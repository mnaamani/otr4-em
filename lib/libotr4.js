;(function () {

    var root = this;

    if (typeof exports !== 'undefined'){

	    module.exports.getModule=function(){
		    return root.Module;
    	};
        
    }else{
    	this.getModule = function(){
            return root.Module;
        }
    }

// -- code generated by emscripten will follow ---
var Module = {};
Module["preRun"]=[];
Module["MPI_HOOK"] = {};
if (typeof exports !== 'undefined') {
    Module["MPI_HOOK"]["BigInt"]= require("./bigint");
}else{
    Module["MPI_HOOK"]["BigInt"] = this["BigInt"];
}
/* emcc is generating this code when libgpg-error is compiled to js.. :(
__ATINIT__ = __ATINIT__.concat([
  { func: _i32______gpg_err_init_to_void_____ }
]);
*/
function _i32______gpg_err_init_to_void_____(){};//workaround.. TODO:investigate
var _static_buffer_ptr;
var _static_new_mpi_ptr_ptr;
var _static_otr_error_message_str;
var gcry_ = {};
var jsapi_ = {};
var otrl_ = {};
var helper_ = {};
Module['preRun'].push(function(){
    Module["malloc"]=_malloc;
    Module["free"]=_free;
    Module["FS"]=FS;
    //select doesn't really have a place in node environment.. since i/o is non-blocking
    _select = (function() {
      return 3;//this means all the three socket sets passed to the function are have sockets ready for reading.
    });
    Module['FS_createDevice']("/dev/","random",(function(){
      return Math.floor(Math.random() * 256);
    }));
    Module['FS_createDevice']("/dev/","urandom",(function(){
      return Math.floor(Math.random() * 256);
    }));
    console.error("created virtual /dev/random devices.");
    _static_buffer_ptr = allocate(4096,"i8",ALLOC_STATIC); 
    _static_new_mpi_ptr_ptr = allocate(4,"i8",ALLOC_STATIC);
    _static_otr_error_message_str = allocate(512,"i8",ALLOC_STATIC);
    Module["libgcrypt"] = {};
    Module["libgcrypt"]["mpi_new"] = gcry_.mpi_new = cwrap('_gcry_mpi_new','number',['number']);
    Module["libgcrypt"]["mpi_set"] = gcry_.mpi_set = cwrap('_gcry_mpi_set','number',['number','number']);
    Module["libgcrypt"]["mpi_release"] = gcry_.mpi_release = cwrap('_gcry_mpi_release','',['number']);
    Module["libgcrypt"]["mpi_scan"] = gcry_.mpi_scan = cwrap('_gcry_mpi_scan','number',['number','number','string','number','number']);
    Module["libgcrypt"]["mpi_print"] = gcry_.mpi_print = cwrap('_gcry_mpi_print','number',['number','number','number','number','number']);
    Module["libgcrypt"]["strerror"] = gcry_.strerror = cwrap('gcry_strerror','string',['number']);
    Module["libotrl"] = {};
    Module["libotrl"]["version"] = otrl_.version = cwrap('otrl_version','string');    
    Module["libotrl"]["userstate_create"]=otrl_.userstate_create=cwrap('otrl_userstate_create','',['number']);
    Module["libotrl"]["userstate_free"]=otrl_.userstate_free=cwrap('otrl_userstate_free','',['number']);
    Module["libotrl"]["privkey_read"]=otrl_.privkey_read=cwrap('otrl_privkey_read','number',['number','string']);
    Module["libotrl"]["privkey_fingerprint"]=otrl_.privkey_fingerprint=cwrap('otrl_privkey_fingerprint','number',['number','number','string','string']);
    Module["libotrl"]["privkey_read_fingerprints"]=otrl_.privkey_read_fingerprints=cwrap('otrl_privkey_read_fingerprints','number',['number','string','number','number']);
    Module["libotrl"]["privkey_write_fingerprints"]=otrl_.privkey_write_fingerprints=cwrap('otrl_privkey_write_fingerprints','number',['number','string']);
    Module["libotrl"]["privkey_generate"]=otrl_.privkey_generate=cwrap('otrl_privkey_generate','number',['number','string','string','string']);
    Module["libotrl"]["privkey_forget"]=otrl_.privkey_forget=cwrap('otrl_privkey_forget','',['number']);
    Module["libotrl"]["privkey_forget_all"]=otrl_.privkey_forget_all=cwrap('otrl_privkey_forget_all','',['number']);
    Module["libotrl"]["privkey_find"]=otrl_.privkey_find=cwrap('otrl_privkey_find','number',['number','string','string']);
    Module["libotrl"]["context_find"]=otrl_.context_find=cwrap('otrl_context_find','number',['number','string','string','string','number','number','number','number','number']);
    Module["libotrl"]["message_sending"]=otrl_.message_sending=cwrap('otrl_message_sending','number',['number','number','number','string','string','string',
                                                                                                    'number','string','number','number','number','number','number','number']);
    Module["libotrl"]["message_free"]=otrl_.message_free=cwrap('otrl_message_free','',['number']);
    Module["libotrl"]["message_disconnect"]=otrl_.message_disconnect = cwrap('otrl_message_disconnect','',['number','number','number','string','string','string','number']);
    Module["libotrl"]["message_initiate_smp_q"]=otrl_.message_initiate_smp_q=cwrap('otrl_message_initiate_smp_q','',['number','number','number','number','string','string','number']);
    Module["libotrl"]["message_initiate_smp"]=otrl_.message_initiate_smp=cwrap('otrl_message_initiate_smp','',['number','number','number','number','string','number']);
    Module["libotrl"]["message_respond_smp"]=otrl_.message_respond_smp=cwrap('otrl_message_respond_smp','',['number','number','number','number','string','number']);
    Module["libotrl"]["message_abort_smp"]=otrl_.message_abort_smp=cwrap('otrl_message_abort_smp','',['number','number','number','number']);
    Module["libotrl"]["message_receiving"]=otrl_.message_receiving=cwrap('otrl_message_receiving','number',['number','number','number','string','string','string','string','number','number','number','number','number']);
    Module["libotrl"]["instag_generate"]=otrl_.instag_generate=cwrap('otrl_instag_generate','number',['number','string','string','string']);
    Module["libotrl"]["instag_read"]=otrl_.instag_read=cwrap('otrl_instag_read','number',['number','string']);
    Module["libotrl"]["instag_write"]=otrl_.instag_write=cwrap('otrl_instag_write','number',['number','string']);
    Module["libotrl"]["instag_find"]=otrl_.instag_find=cwrap('otrl_instag_find','number',['number','string','string']);
    Module["libotrl"]["message_symkey"]=otrl_.message_symkey = cwrap('otrl_message_symkey','number',['number','number','number','number','number','number','number','number']);
    Module["libotrl"]["tlv_free"]=otrl_.tlv_free = cwrap('otrl_tlv_free','',['number']);
    Module["libotrl"]["tlv_find"]=otrl_.tlv_find = cwrap('otrl_tlv_find','number',['number','number']);
    Module["jsapi"]={};    
    Module["jsapi"]["can_start_smp"]=jsapi_.can_start_smp = cwrap('jsapi_can_start_smp','number',['number']);
    Module["jsapi"]["privkey_get_next"]=jsapi_.privkey_get_next = cwrap("jsapi_privkey_get_next",'number',['number']);
    Module["jsapi"]["privkey_get_accountname"]=jsapi_.privkey_get_accountname = cwrap("jsapi_privkey_get_accountname",'string',['number']);
    Module["jsapi"]["privkey_get_protocol"]=jsapi_.privkey_get_protocol = cwrap("jsapi_privkey_get_protocol",'string',['number']);
    Module["jsapi"]["privkey_delete"]=jsapi_.privkey_delete = cwrap('jsapi_privkey_delete','',['number','string','string','string']);
    Module["jsapi"]["privkey_get_dsa_token"]=jsapi_.privkey_get_dsa_token = cwrap('jsapi_privkey_get_dsa_token','number',['number','string','number','number']);
    Module["jsapi"]["privkey_write_trusted_fingerprints"]=jsapi_.privkey_write_trusted_fingerprints = cwrap("jsapi_privkey_write_trusted_fingerprints",'number',['number','string']);
    Module["jsapi"]["userstate_import_privkey"]=jsapi_.userstate_import_privkey = cwrap('jsapi_userstate_import_privkey','number',['number','string','string','number','number','number','number','number']);
    Module["jsapi"]["userstate_write_to_file"]=jsapi_.userstate_write_to_file = cwrap('jsapi_userstate_write_to_file','number',['number','string']);
    Module["jsapi"]["userstate_get_privkey_root"]=jsapi_.userstate_get_privkey_root = cwrap("jsapi_userstate_get_privkey_root","number",["number"]);
    Module["jsapi"]["conncontext_get_protocol"]=jsapi_.conncontext_get_protocol =cwrap('jsapi_conncontext_get_protocol','string',['number']);
    Module["jsapi"]["conncontext_get_username"]=jsapi_.conncontext_get_username =cwrap('jsapi_conncontext_get_username','string',['number']);
    Module["jsapi"]["conncontext_get_accountname"]=jsapi_.conncontext_get_accountname =cwrap('jsapi_conncontext_get_accountname','string',['number']);
    Module["jsapi"]["conncontext_get_msgstate"]=jsapi_.conncontext_get_msgstate =cwrap('jsapi_conncontext_get_msgstate','number',['number']);
    Module["jsapi"]["conncontext_get_protocol_version"]=jsapi_.conncontext_get_protocol_version =cwrap('jsapi_conncontext_get_protocol_version','number',['number']);
    Module["jsapi"]["conncontext_get_smstate"]=jsapi_.conncontext_get_smstate =cwrap('jsapi_conncontext_get_smstate','number',['number']);
    Module["jsapi"]["conncontext_get_active_fingerprint"]=jsapi_.conncontext_get_active_fingerprint =cwrap('jsapi_conncontext_get_active_fingerprint','',['number','number']);
    Module["jsapi"]["conncontext_get_trust"]=jsapi_.conncontext_get_trust = cwrap('jsapi_conncontext_get_trust','string',['number']);
    Module["jsapi"]["conncontext_get_their_instance"]=jsapi_.conncontext_get_their_instance = cwrap('jsapi_conncontext_get_their_instance','number',['number']);
    Module["jsapi"]["conncontext_get_our_instance"]=jsapi_.conncontext_get_our_instance = cwrap('jsapi_conncontext_get_our_instance','number',['number']);
    Module["jsapi"]["conncontext_get_master"]=jsapi_.conncontext_get_master = cwrap('jsapi_conncontext_get_master','number',['number']);
    Module["jsapi"]["messageappops_new"]=jsapi_.messageappops_new = cwrap('jsapi_messageappops_new','number');
    Module["jsapi"]["instag_get_tag"]=jsapi_.instag_get_tag = cwrap('jsapi_instag_get_tag','number',['number']);
    Module["jsapi"]["initialise"]=jsapi_.initialise = cwrap('jsapi_initialise');
    Module["helper"]={};
    Module["helper"]["mpi2bigint"] = helper_.mpi2bigint = __mpi2bigint;
    Module["helper"]["bigint2mpi"] = helper_.bigint2mpi = __bigint2mpi;
    Module["helper"]["ptr_to_ArrayBuffer"] = helper_.ptr_to_ArrayBuffer = ptr_to_ArrayBuffer;
    Module["helper"]["ptr_to_HexString"] = helper_.ptr_to_HexString = ptr_to_HexString;
    Module["helper"]["unsigned_char"] = helper_.unsigned_char = unsigned_char;
    Module["helper"]["unsigned_int32"] = helper_.unsigned_int32 = unsigned_int32;
    Module["helper"]["str2ab"] = helper_.str2ab = str2ab;
    Module["helper"]["ab2str"] = helper_.ab2str = ab2str;
// some of the MPI calculations are slow
// can we use pure javascript crypto and still preserve the libgcrypt API?
/* native alot faster don't override
        __gcry_mpi_add = function BigInt_MPI_ADD(w,u,v){
            var ww = BI.add( __mpi2bigint(u), __mpi2bigint(v) );
            __bigint2mpi(w,ww);
        };
*/
/* not tested but my guess is it wont significantly increase performance
        __gcry_mpi_sub = function BigInt_MPI_SUB(w,u,v){
            var ww = BI.sub( __mpi2bigint(u), __mpi2bigint(v) );
            __bigint2mpi(w,ww);
        };
*/
/*native is faster, but its still quite fast!
        __gcry_mpi_mul = function BigInt_MPI_MULT(w,u,v){
            var ww = BI.mult( __mpi2bigint(u), __mpi2bigint(v) );
            __bigint2mpi(w,ww);
        };
*/
/*
//void gcry_mpi_mul_2exp (gcry_mpi_t w, gcry_mpi_t u, unsigned long e)
//w = u * 2^e.
    __gcry_mpi_mul2exp = function BigInt_MPI_MUL2EXP(mpi_w, mpi_u, e){
    };
*/
//_gcry_mpi_tdiv_qr( gcry_mpi_t quot, gcry_mpi_t rem, gcry_mpi_t num, gcry_mpi_t den)
/** !!!!!!! EL GAMAL FAILS in pubkey.js test!!!! so does ECC DSA!!
    __gcry_mpi_tdiv_qr = function BigInt_MPI_DIVIDE_(mpi_quot,mpi_rem,mpi_num,mpi_den){
        var q = BI.str2bigInt("0",16,512);//should have enough elements to store Q
        var r = BI.str2bigInt("0",16,512);//what is the best size determined from sizes of num and den?
        var num = __mpi2bigint(mpi_num);
        var den = __mpi2bigint(mpi_den);
        BI.divide_(num,den,q,r);
        if(mpi_quot) __bigint2mpi(mpi_quot,q);
        if(mpi_rem) __bigint2mpi(mpi_rem, r);
    };
*/      
/* GCD causing problems with some libgcrypt tests...
        console.log("overriding __gcry_mpi_gcd");
        __gcry_mpi_gcd = function BigInt_MPI_GCD(mpi_g, mpi_a, mpi_b){
            //console.log(">__gcry_mpi_gcd()");
            var a = __mpi2bigint(mpi_a);
            var b = __mpi2bigint(mpi_b);
            //assert a.length == b.length
            var g = Module["MPI_HOOK"]["BigInt"]["GCD"](a,b);
            __bigint2mpi(mpi_g, g);
            if( Module["MPI_HOOK"]["BigInt"]["equalsInt"](g,1) ) return 1;
            return 0;
        };
*/
      //console.log("overriding __gcry_mpi_mod");
/*perf boost not tested but it should be enhancing..*/
        __gcry_mpi_mod = function BigInt_MPI_MOD(mpi_r,mpi_x,mpi_n){
            //console.log(">__gcry_mpi_mod()");
            //r = x mod n
            var x = __mpi2bigint(mpi_x);
            var n = __mpi2bigint(mpi_n);
            __bigint2mpi(mpi_r, Module["MPI_HOOK"]["BigInt"]["mod"](x,n));
        };
        //console.log("overriding __gcry_mpi_powm");
//confirmed bigint mulpowm, powm and invm, gcd  enhance performance..
        __gcry_mpi_powm = function BigInt_MPI_POWMOD(w, b, e, m){
            //console.log(">__gcry_mpi_powm()");
          var bi_base = __mpi2bigint(b);
          var bi_expo = __mpi2bigint(e);
          var bi_mod  = __mpi2bigint(m);
          var result = Module["MPI_HOOK"]["BigInt"]["powMod"](bi_base,bi_expo,bi_mod);
          __bigint2mpi(w,result);
        };
      //console.log("overriding __gcry_mpi_invm");
        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null
        __gcry_mpi_invm = function BigInt_MPI_INVERSEMOD(x,a,m){
            //console.log(">__gcry_mpi_invm()");
            var bi_a = __mpi2bigint(a);
            var bi_m = __mpi2bigint(m);
            var result = Module["MPI_HOOK"]["BigInt"]["inverseMod"](bi_a,bi_m);
            if(result){
                __bigint2mpi(x,result);
                return 1;
            }else{
                return 0;//no inverse mod exists
            }
        };
/*
//no significant improvement, but if enabled without mulpowm -- degrades performance!
        // w = u * v mod m --> (u*v) mod m  ===  u * (v mod m) ? 
        __gcry_mpi_mulm = function BigInt_MPI_MULTMOD(w, u, v, m){
          var bi_u = __mpi2bigint(u);
          var bi_v = __mpi2bigint(v);
          var bi_m = __mpi2bigint(m);
          //faster when v < u (and gives correct value!)
          var result = BI.greater(bi_u,bi_v) ? BI.multMod(bi_u,bi_v,bi_m) :BI.multMod(bi_v,bi_u,bi_m);
          __bigint2mpi(w,result);
        };
*/
      //console.log("overriding __gcry_mpi_mulpowm");
        __gcry_mpi_mulpowm = function BigInt_MPI_MULPOWM(mpi_r,mpi_array_base,mpi_array_exp,mpi_m){
            //console.log(">__gcry_mpi_mulpowm()");
            var indexer = 1;
            var mpi1, mpi2, bi_m,bi_result;
            mpi1 = getValue(mpi_array_base,"i32");
            mpi2 = getValue(mpi_array_exp,"i32");
            bi_m = __mpi2bigint(mpi_m);
            var BE = [];
            var O = [];
            while(mpi1 && mpi2){
                BE.push({b:__mpi2bigint(mpi1),e:__mpi2bigint(mpi2)});
                mpi1 = getValue(mpi_array_base+(indexer*4),"i32");
                mpi2 = getValue(mpi_array_exp+ (indexer*4),"i32");
                indexer++;
            }
            if(BE.length){
                BE.forEach(function(be){
                    O.push(Module["MPI_HOOK"]["BigInt"]["powMod"](be.b,be.e,bi_m));
                });
                bi_result = Module["MPI_HOOK"]["BigInt"]["str2bigInt"]("1",16);
                O.forEach(function(k){
                    bi_result = Module["MPI_HOOK"]["BigInt"]["mult"](bi_result,k);
                });
            }
            bi_result = Module["MPI_HOOK"]["BigInt"]["mod"](bi_result,bi_m);
            __bigint2mpi(mpi_r,bi_result);
        };
//TODO: _gcry_generate_fips186_2_prime
//      _gcry_generate_elg_prime
      //console.log("overriding _gen_prime");
/*static gcry_mpi_t gen_prime (unsigned int nbits, int secret, int randomlevel,
                             int (*extra_check)(void *, gcry_mpi_t),
                             void *extra_check_arg);*/
    _gen_prime = function BigInt_Prime(nbits,secretlevel,randomlevel,xtracheck,xtracheck_args){
        var mpi_prime = gcry_.mpi_new ( nbits );
        for(;;){
            var bi_prime = Module["MPI_HOOK"]["BigInt"]["randTruePrime"](nbits);
            __bigint2mpi(mpi_prime,bi_prime);
            if(xtracheck && FUNCTION_TABLE[xtracheck](xtracheck_args,mpi_prime)){                
                   continue;//prime rejected!                
            }
            return mpi_prime;
        }
    };
});//preRun
// __msgops_callback_ functions are called from jsapi.c to bubble up to 
// to eventually fire the corresponding event emitted by otr.Session()
function __msgops_callback_smp_request($opdata,$context,$question){
    var obj = (new Module["ConnContext"]($context))["obj"]();
    if($question!=0) obj["question"] = Module["Pointer_stringify"]($question);
    Module["ops_event"]($opdata, obj, "smp_request");
}
function __msgops_callback_smp_failed($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_failed");
}
function __msgops_callback_smp_aborted($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_aborted");
}
function __msgops_callback_smp_complete($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_complete");
}
function __msgops_callback_smp_error($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_error");    
}
function __msgops_callback_policy($opdata, $context) {
  return Module["ops_event"]($opdata,{},"policy");
}
function __msgops_callback_create_privkey($opdata,$accountname,$protocol){
  Module["ops_event"]($opdata,{
    "accountname":Module["Pointer_stringify"]($accountname),
    "protocol":Module["Pointer_stringify"]($protocol)
  },"create_privkey");
}
function __msgops_callback_is_logged_in($opdata,$accountname,$protocol,$recipient){
  return Module["ops_event"]($opdata,{},"is_logged_in");
}
function __msgops_callback_inject_message($opdata,$accountname,$protocol,$recipient,$message){
    Module["ops_event"]($opdata,{
        "message":Module["Pointer_stringify"]($message)
    },"inject_message");
}
function __msgops_callback_update_context_list($opdata){
    Module["ops_event"]($opdata,{},"update_context_list");
}
function __msgops_callback_new_fingerprint($opdata,$userstate,$accountname,$protocol,$username,$fingerprint_human){
    Module["ops_event"]($opdata,{
        "fingerprint":Module["Pointer_stringify"]($fingerprint_human)
    },"new_fingerprint")    
}
function __msgops_callback_write_fingerprints($opdata){
    Module["ops_event"]($opdata,{},"write_fingerprints");
}
function __msgops_callback_gone_secure($opdata,$context){
    Module["ops_event"]($opdata,{},"gone_secure");
}
function __msgops_callback_gone_insecure($opdata,$context){
    Module["ops_event"]($opdata,{},"gone_insecure");
}
function __msgops_callback_still_secure($opdata,$context,$is_reply){
    Module["ops_event"]($opdata,{},"still_secure");
}
function __msgops_callback_max_message_size($opdata,$context){
    return Module["ops_event"]($opdata,{},"max_message_size");
}
//new ops in libotr4
function __msgops_callback_received_symkey($opdata,$context,$use,$usedata,$usedatalen,$symkey){
    Module["ops_event"]($opdata,{
        "use": $use,
        "usedata":ptr_to_ArrayBuffer($usedata,$usedatalen),
        "key":ptr_to_ArrayBuffer($symkey,32)
    },"received_symkey")
/* for debugging..
    Module["ops_event"]($opdata,{
        "use": $use,
        "usedata":ab2str(ptr_to_ArrayBuffer($usedata,$usedatalen)),
        "key":ptr_to_HexString($symkey,32)
    },"received_symkey")
*/
}
/*const char * msgops_callback_otr_error_message(void *opdata, ConnContext *context, OtrlErrorCode err_code){}*/
function __msgops_callback_otr_error_message($opdata, $context, $err_code){
    //TODO:write error string into _static_otr_error_message_str
    //for now this is implemented in jsapi.c
    return _static_otr_error_message_str;
}
/*void msgops_callback_otr_error_message_free(void *opdata, const char *err_msg){}*/
function __msgops_callback_otr_error_message_free($opdata, $err_msg){
    //no need to free anything.. we are using a statically allocated shared memory location.
}
function __msgops_callback_handle_msg_event($opdata, $msg_event,$context, $message, $err){
    Module["ops_event"]($opdata,{
        "event":$msg_event,
        "message":Module["Pointer_stringify"]($message),
        "err": ($err? new GcryptError($err):null)
    },"msg_event");
}
function __msgops_callback_create_instag($opdata, $accountname, $protocol){
    Module["ops_event"]($opdata,{
        "accountname":Module["Pointer_stringify"]($accountname),
        "protocol":Module["Pointer_stringify"]($protocol)
    },"create_instag");
}
/* TODO
void msgops_callback_convert_msg(void *opdata, ConnContext *context,
        OtrlConvertType convert_type, char ** dest, const char *src){
    _msgops_callback_convert_msg(opdata, context, convert_type, dest, src);
}
void msgops_callback_convert_free(void *opdata, ConnContext *context, char *dest){
    _msgops_callback_convert_free(opdata, context, dest);
}
void msgops_callback_timer_control(void *opdata, unsigned int interval){
    _msgops_callback_timer_control(opdata,interval);
}
*/
//todo:copy directly between memory and bigint array.. (faster than string conversions?..)
function __mpi2bigint(mpi_ptr){
    var GCRYMPI_FMT_HEX = 4; //gcrypt.h:    GCRYMPI_FMT_HEX = 4,    /* Hex format. */
    //gcry_error_t gcry_mpi_print (enum gcry_mpi_format format, unsigned char *buffer, size_t buflen, size_t *nwritten, const gcry_mpi_t a)
    var err = gcry_.mpi_print(GCRYMPI_FMT_HEX,_static_buffer_ptr,4096,0,mpi_ptr);
    if(err) {
        throw new GcryptError(err);
    }
    var mpi_str_ptr = _static_buffer_ptr;
    var mpi_str = Module['Pointer_stringify'](mpi_str_ptr);
    return Module["MPI_HOOK"]["BigInt"]["str2bigInt"](mpi_str,16);   
}
function __bigint2mpi(mpi_ptr,bi_num){
    var new_mpi_ptr_ptr = _static_new_mpi_ptr_ptr;
    var bi_num_str = Module["MPI_HOOK"]["BigInt"]["bigInt2str"](bi_num,16);
    //gcry_error_t gcry_mpi_scan (gcry_mpi_t *r_mpi, enum gcry_mpi_format format, const unsigned char *buffer, size_t buflen, size_t *nscanned)
    var err = gcry_.mpi_scan(new_mpi_ptr_ptr,4,bi_num_str,0,0);
    if(err){
        throw new GcryptError(err);
    }
    var scanned_mpi_ptr = getValue(new_mpi_ptr_ptr,"i32");
    if(scanned_mpi_ptr==0){
        throw("NULL scanned MPI in __bigint2mpi() otr_pre.js");
    }
    //gcry_mpi_t gcry_mpi_set (gcry_mpi_t w, const gcry_mpi_t u)
    var same = gcry_.mpi_set(mpi_ptr,scanned_mpi_ptr);
    gcry_.mpi_release(scanned_mpi_ptr);
    if(same && same != mpi_ptr){
        return same;
    }        
}
function GcryptError( num ) {
    this.num = num || 0;
    this.message = gcry_.strerror(num || 0);
}
GcryptError.prototype = new Error();
GcryptError.prototype.constructor = GcryptError;
var hexDigit = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];
function hexString( val ){
    return hexDigit[(val & 0xF0) >> 4] + hexDigit[val & 0x0F];
}
function ptr_to_HexString(ptr,len){     
    var hex = "";
    for(var i=0; i<len; i++){
        hex = hex + hexString( unsigned_char( getValue( ptr + i,"i8")));
    }
    return hex;
}
function ptr_to_ArrayBuffer(ptr,len){
    var buf = new ArrayBuffer(len);
    var u8 = new Uint8Array(buf);
    for(var i=0; i<len; i++){
        u8[i]= unsigned_char( getValue( ptr + i,"i8"));
    }
    return buf;    
}
function unsigned_char( c ){
    c = c & 0xFF;
    return ( c < 0 ? (0xFF+1)+c : c );
}
function unsigned_int32( i ){
    //i must be in the range of a signed 32-bit integer!
    i = i & 0xFFFFFFFF;//truncate so we dont return values larger than an unsigned 32-bit int.
    return ( i < 0 ? (0xFFFFFFFF+1)+i : i );
}
// http://updates.html5rocks.com/2012/06/How-to-convert-ArrayBuffer-to-and-from-String
function ab2str(buf) {
  return String.fromCharCode.apply(null, new Uint16Array(buf));
}
function str2ab(str) {
  var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char
  var bufView = new Uint16Array(buf);
  for (var i=0, strLen=str.length; i<strLen; i++) {
    bufView[i] = str.charCodeAt(i);
  }
  return buf;
}
// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE; // TODO: support asm
    table[index] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? (((low)>>>(0))+(((high)>>>(0))*4294967296)) : (((low)>>>(0))+(((high)|(0))*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};
var ABORT = false;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 409600;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 1048576;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max
var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
// === Body ===
assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);
STATICTOP += 119832;
assert(STATICTOP < TOTAL_MEMORY);
var _stderr;
__ATINIT__ = __ATINIT__.concat([
  { func: function() { _i32______gpg_err_init_to_void_____() } }
]);
var ___progname;
var __ZTVSt9exception;
var __ZTVN10__cxxabiv120__si_class_type_infoE;
var __ZTISt9exception;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
var _err;
var _errx;
var _warn1;
var _warnx;
var _verr;
var _verrx;
var _vwarn;
var _vwarnx;
allocate(4, "i8", ALLOC_NONE, 409600);
allocate(4, "i8", ALLOC_NONE, 409604);
allocate(4, "i8", ALLOC_NONE, 409608);
allocate(4, "i8", ALLOC_NONE, 409612);
allocate(4, "i8", ALLOC_NONE, 409616);
allocate([0,2,0,0,119,0,0,0,0,3,0,0,145,0,0,0,0,4,0,0,165,0,0,0,0,5,0,0,183,0,0,0,0,6,0,0,198,0,0,0,0,7,0,0,212,0,0,0,0,8,0,0,225,0,0,0,0,9,0,0,237,0,0,0,0,10,0,0,249,0,0,0,0,11,0,0,3,1,0,0,0,12,0,0,13,1,0,0,0,13,0,0,23,1,0,0,0,14,0,0,32,1,0,0,0,15,0,0,40,1,0,0,0,16,0,0,49,1,0,0,0,17,0,0,57,1,0,0,0,18,0,0,64,1,0,0,0,19,0,0,72,1,0,0,0,20,0,0,79,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 409620);
allocate([208,207,7,56,147,112,138,131,125,215,138,54,101,41,108,31,124,63,211,65] /* \D0\CF\078\93p\8A\83 */, "i8", ALLOC_NONE, 409780);
allocate([0,0,0,0,0,0,0,0,0,0,30,30,0,0,14,14,0,0,224,224,0,0,240,240,0,0,254,254,0,0,254,254,0,30,0,30,0,14,0,14,0,30,30,0,0,14,14,0,0,30,224,254,0,14,240,254,0,30,254,224,0,14,254,240,0,224,0,224,0,240,0,240,0,224,30,254,0,240,14,254,0,224,224,0,0,240,240,0,0,224,254,30,0,240,254,14,0,254,0,254,0,254,0,254,0,254,30,224,0,254,14,240,0,254,224,30,0,254,240,14,0,254,254,0,0,254,254,0,30,0,0,30,14,0,0,14,30,0,30,0,14,0,14,0,30,0,224,254,14,0,240,254,30,0,254,224,14,0,254,240,30,30,0,0,14,14,0,0,30,30,30,30,14,14,14,14,30,30,224,224,14,14,240,240,30,30,254,254,14,14,254,254,30,224,0,254,14,240,0,254,30,224,30,224,14,240,14,240,30,224,224,30,14,240,240,14,30,224,254,0,14,240,254,0,30,254,0,224,14,254,0,240,30,254,30,254,14,254,14,254,30,254,224,0,14,254,240,0,30,254,254,30,14,254,254,14,224,0,0,224,240,0,0,240,224,0,30,254,240,0,14,254,224,0,224,0,240,0,240,0,224,0,254,30,240,0,254,14,224,30,0,254,240,14,0,254,224,30,30,224,240,14,14,240,224,30,224,30,240,14,240,14,224,30,254,0,240,14,254,0,224,224,0,0,240,240,0,0,224,224,30,30,240,240,14,14,224,224,224,224,240,240,240,240,224,224,254,254,240,240,254,254,224,254,0,30,240,254,0,14,224,254,30,0,240,254,14,0,224,254,224,254,240,254,240,254,224,254,254,224,240,254,254,240,254,0,0,254,254,0,0,254,254,0,30,224,254,0,14,240,254,0,224,30,254,0,240,14,254,0,254,0,254,0,254,0,254,30,0,224,254,14,0,240,254,30,30,254,254,14,14,254,254,30,224,0,254,14,240,0,254,30,254,30,254,14,254,14,254,224,0,30,254,240,0,14,254,224,30,0,254,240,14,0,254,224,224,254,254,240,240,254,254,224,254,224,254,240,254,240,254,254,0,0,254,254,0,0,254,254,30,30,254,254,14,14,254,254,224,224,254,254,240,240,254,254,254,254,254,254,254,254], "i8", ALLOC_NONE, 409800);
allocate([97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,48,49,50,51,52,53,54,55,56,57,45,46,47,95,58,42,43,61,0] /* abcdefghijklmnopqrst */, "i8", ALLOC_NONE, 410312);
allocate(4, "i8", ALLOC_NONE, 410384);
allocate(4, "i8", ALLOC_NONE, 410388);
allocate(4, "i8", ALLOC_NONE, 410392);
allocate(4, "i8", ALLOC_NONE, 410396);
allocate([34,174,40,215,152,47,138,66,205,101,239,35,145,68,55,113,47,59,77,236,207,251,192,181,188,219,137,129,165,219,181,233,56,181,72,243,91,194,86,57,25,208,5,182,241,17,241,89,155,79,25,175,164,130,63,146,24,129,109,218,213,94,28,171,66,2,3,163,152,170,7,216,190,111,112,69,1,91,131,18,140,178,228,78,190,133,49,36,226,180,255,213,195,125,12,85,111,137,123,242,116,93,190,114,177,150,22,59,254,177,222,128,53,18,199,37,167,6,220,155,148,38,105,207,116,241,155,193,210,74,241,158,193,105,155,228,227,37,79,56,134,71,190,239,181,213,140,139,198,157,193,15,101,156,172,119,204,161,12,36,117,2,43,89,111,44,233,45,131,228,166,110,170,132,116,74,212,251,65,189,220,169,176,92,181,83,17,131,218,136,249,118,171,223,102,238,82,81,62,152,16,50,180,45,109,198,49,168,63,33,251,152,200,39,3,176,228,14,239,190,199,127,89,191,194,143,168,61,243,11,224,198,37,167,10,147,71,145,167,213,111,130,3,224,81,99,202,6,112,110,14,10,103,41,41,20,252,47,210,70,133,10,183,39,38,201,38,92,56,33,27,46,237,42,196,90,252,109,44,77,223,179,149,157,19,13,56,83,222,99,175,139,84,115,10,101,168,178,119,60,187,10,106,118,230,174,237,71,46,201,194,129,59,53,130,20,133,44,114,146,100,3,241,76,161,232,191,162,1,48,66,188,75,102,26,168,145,151,248,208,112,139,75,194,48,190,84,6,163,81,108,199,24,82,239,214,25,232,146,209,16,169,101,85,36,6,153,214,42,32,113,87,133,53,14,244,184,209,187,50,112,160,106,16,200,208,210,184,22,193,164,25,83,171,65,81,8,108,55,30,153,235,142,223,76,119,72,39,168,72,155,225,181,188,176,52,99,90,201,197,179,12,28,57,203,138,65,227,74,170,216,78,115,227,99,119,79,202,156,91,163,184,178,214,243,111,46,104,252,178,239,93,238,130,143,116,96,47,23,67,111,99,165,120,114,171,240,161,20,120,200,132,236,57,100,26,8,2,199,140,40,30,99,35,250,255,190,144,233,189,130,222,235,108,80,164,21,121,198,178,247,163,249,190,43,83,114,227,242,120,113,198,156,97,38,234,206,62,39,202,7,194,192,33,199,184,134,209,30,235,224,205,214,125,218,234,120,209,110,238,127,79,125,245,186,111,23,114,170,103,240,6,166,152,200,162,197,125,99,10,174,13,249,190,4,152,63,17,27,71,28,19,53,11,113,27,132,125,4,35,245,119,219,40,147,36,199,64,123,171,202,50,188,190,201,21,10,190,158,60,76,13,16,156,196,103,29,67,182,66,62,203,190,212,197,76,42,126,101,252,156,41,127,89,236,250,214,58,171,111,203,95,23,88,71,74,140,25,68,108], "i8", ALLOC_NONE, 410400);
allocate([152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198], "i8", ALLOC_NONE, 411040);
allocate([152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198], "i8", ALLOC_NONE, 411296);
allocate(4, "i8", ALLOC_NONE, 411552);
allocate(4, "i8", ALLOC_NONE, 411556);
allocate(4, "i8", ALLOC_NONE, 411560);
allocate(4, "i8", ALLOC_NONE, 411564);
allocate([3,0,5,0,7,0,11,0,13,0,17,0,19,0,23,0,29,0,31,0,37,0,41,0,43,0,47,0,53,0,59,0,61,0,67,0,71,0,73,0,79,0,83,0,89,0,97,0,101,0,103,0,107,0,109,0,113,0,127,0,131,0,137,0,139,0,149,0,151,0,157,0,163,0,167,0,173,0,179,0,181,0,191,0,193,0,197,0,199,0,211,0,223,0,227,0,229,0,233,0,239,0,241,0,251,0,1,1,7,1,13,1,15,1,21,1,25,1,27,1,37,1,51,1,55,1,57,1,61,1,75,1,81,1,91,1,93,1,97,1,103,1,111,1,117,1,123,1,127,1,133,1,141,1,145,1,153,1,163,1,165,1,175,1,177,1,183,1,187,1,193,1,201,1,205,1,207,1,211,1,223,1,231,1,235,1,243,1,247,1,253,1,9,2,11,2,29,2,35,2,45,2,51,2,57,2,59,2,65,2,75,2,81,2,87,2,89,2,95,2,101,2,105,2,107,2,119,2,129,2,131,2,135,2,141,2,147,2,149,2,161,2,165,2,171,2,179,2,189,2,197,2,207,2,215,2,221,2,227,2,231,2,239,2,245,2,249,2,1,3,5,3,19,3,29,3,41,3,43,3,53,3,55,3,59,3,61,3,71,3,85,3,89,3,91,3,95,3,109,3,113,3,115,3,119,3,139,3,143,3,151,3,161,3,169,3,173,3,179,3,185,3,199,3,203,3,209,3,215,3,223,3,229,3,241,3,245,3,251,3,253,3,7,4,9,4,15,4,25,4,27,4,37,4,39,4,45,4,63,4,67,4,69,4,73,4,79,4,85,4,93,4,99,4,105,4,127,4,129,4,139,4,147,4,157,4,163,4,169,4,177,4,189,4,193,4,199,4,205,4,207,4,213,4,225,4,235,4,253,4,255,4,3,5,9,5,11,5,17,5,21,5,23,5,27,5,39,5,41,5,47,5,81,5,87,5,93,5,101,5,119,5,129,5,143,5,147,5,149,5,153,5,159,5,167,5,171,5,173,5,179,5,191,5,201,5,203,5,207,5,209,5,213,5,219,5,231,5,243,5,251,5,7,6,13,6,17,6,23,6,31,6,35,6,43,6,47,6,61,6,65,6,71,6,73,6,77,6,83,6,85,6,91,6,101,6,121,6,127,6,131,6,133,6,157,6,161,6,163,6,173,6,185,6,187,6,197,6,205,6,211,6,217,6,223,6,241,6,247,6,251,6,253,6,9,7,19,7,31,7,39,7,55,7,69,7,75,7,79,7,81,7,85,7,87,7,97,7,109,7,115,7,121,7,139,7,141,7,157,7,159,7,181,7,187,7,195,7,201,7,205,7,207,7,211,7,219,7,225,7,235,7,237,7,247,7,5,8,15,8,21,8,33,8,35,8,39,8,41,8,51,8,63,8,65,8,81,8,83,8,89,8,93,8,95,8,105,8,113,8,131,8,155,8,159,8,165,8,173,8,189,8,191,8,195,8,203,8,219,8,221,8,225,8,233,8,239,8,245,8,249,8,5,9,7,9,29,9,35,9,37,9,43,9,47,9,53,9,67,9,73,9,77,9,79,9,85,9,89,9,95,9,107,9,113,9,119,9,133,9,137,9,143,9,155,9,163,9,169,9,173,9,199,9,217,9,227,9,235,9,239,9,245,9,247,9,253,9,19,10,31,10,33,10,49,10,57,10,61,10,73,10,87,10,97,10,99,10,103,10,111,10,117,10,123,10,127,10,129,10,133,10,139,10,147,10,151,10,153,10,159,10,169,10,171,10,181,10,189,10,193,10,207,10,217,10,229,10,231,10,237,10,241,10,243,10,3,11,17,11,21,11,27,11,35,11,41,11,45,11,63,11,71,11,81,11,87,11,93,11,101,11,111,11,123,11,137,11,141,11,147,11,153,11,155,11,183,11,185,11,195,11,203,11,207,11,221,11,225,11,233,11,245,11,251,11,7,12,11,12,17,12,37,12,47,12,49,12,65,12,91,12,95,12,97,12,109,12,115,12,119,12,131,12,137,12,145,12,149,12,157,12,179,12,181,12,185,12,187,12,199,12,227,12,229,12,235,12,241,12,247,12,251,12,1,13,3,13,15,13,19,13,31,13,33,13,43,13,45,13,61,13,63,13,79,13,85,13,105,13,121,13,129,13,133,13,135,13,139,13,141,13,163,13,171,13,183,13,189,13,199,13,201,13,205,13,211,13,213,13,219,13,229,13,231,13,243,13,253,13,255,13,9,14,23,14,29,14,33,14,39,14,47,14,53,14,59,14,75,14,87,14,89,14,93,14,107,14,113,14,117,14,125,14,135,14,143,14,149,14,155,14,177,14,183,14,185,14,195,14,209,14,213,14,219,14,237,14,239,14,249,14,7,15,11,15,13,15,23,15,37,15,41,15,49,15,67,15,71,15,77,15,79,15,83,15,89,15,91,15,103,15,107,15,127,15,149,15,161,15,163,15,167,15,173,15,179,15,181,15,187,15,209,15,211,15,217,15,233,15,239,15,251,15,253,15,3,16,15,16,31,16,33,16,37,16,43,16,57,16,61,16,63,16,81,16,105,16,115,16,121,16,123,16,133,16,135,16,145,16,147,16,157,16,163,16,165,16,175,16,177,16,187,16,193,16,201,16,231,16,241,16,243,16,253,16,5,17,11,17,21,17,39,17,45,17,57,17,69,17,71,17,89,17,95,17,99,17,105,17,111,17,129,17,131,17,141,17,155,17,161,17,165,17,167,17,171,17,195,17,197,17,209,17,215,17,231,17,239,17,245,17,251,17,13,18,29,18,31,18,35,18,41,18,43,18,49,18,55,18,65,18,71,18,83,18,95,18,113,18,115,18,121,18,125,18,143,18,151,18,175,18,179,18,181,18,185,18,191,18,193,18,205,18,209,18,223,18,253,18,7,19,13,19,25,19,39,19,45,19,55,19,67,19,69,19,73,19,79,19,87,19,93,19,103,19,105,19,109,19,123,19,129,19,135,19,0,0], "i8", ALLOC_NONE, 411568);
allocate(4, "i8", ALLOC_NONE, 412908);
allocate(4, "i8", ALLOC_NONE, 412912);
allocate([48,81,48,13,6,9,96,134,72,1,101,3,4,2,3,5,0,4,64] /* 0Q0\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 412916);
allocate([48,65,48,13,6,9,96,134,72,1,101,3,4,2,2,5,0,4,48] /* 0A0\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 412936);
allocate(4, "i8", ALLOC_NONE, 412956);
allocate(4, "i8", ALLOC_NONE, 412960);
allocate([16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,157,87,111,206,163,163,167,237,144,153,242,146,115,215,142,178,40,139,150,138,232,176,134,72,209,206,150,6,253,153,45,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,157,87,111,206,171,163,167,237,152,153,242,146,123,215,142,19,14,53,62,16,55,194,36,5,232,250,239,178,195,195,233,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,149,87,111,206,163,227,167,237,152,217,242,144,115,215,142,185,14,229,134,45,230,145,104,242,189,213,18,91,69,71,43,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,32,97,164,39,130,189,82,236,105,30,195,131,176,59,167,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 412964);
allocate(4, "i8", ALLOC_NONE, 413304);
allocate(4, "i8", ALLOC_NONE, 413308);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,22,75,122,123,252,248,25,226,227,149,251,231,59,86,224,163,135,189,100,34,46,131,31,214,16,39,12,215,234,37,5,84,151,88,191,117,192,90,153,74,109,3,79,101,248,240,230,253,202,234,177,163,77,74,107,75,99,110,7,10,56,188,231,55,0,0,0,0,0,0,0,0,0,0,0,0,135,170,124,222,165,239,97,157,79,240,180,36,26,29,108,176,35,121,244,226,206,78,194,120,122,208,179,5,69,225,124,222,218,168,51,183,214,184,167,2,3,139,39,78,174,163,244,228,190,157,145,78,235,97,241,112,46,105,108,32,58,18,104,84,0,0,0,0,0,0,0,0,0,0,0,0,250,115,176,8,157,86,162,132,239,176,240,117,108,137,11,233,177,181,219,221,142,232,26,54,85,248,62,51,178,39,157,57,191,62,132,130,121,167,34,200,6,180,133,164,126,103,200,7,185,70,163,55,190,232,148,38,116,39,136,89,225,50,146,251,0,0,0,0,0,0,0,0,0,0,0,0,176,186,70,86,55,69,140,105,144,229,168,197,246,29,74,247,229,118,217,127,249,75,135,45,231,111,128,80,54,30,227,219,169,28,165,193,26,162,94,180,214,121,39,92,197,120,128,99,165,241,151,65,18,12,79,45,226,173,235,235,16,162,152,221,0,0,0,0,0,0,0,0,0,0,0,0,128,178,66,99,199,193,163,235,183,20,147,193,221,123,232,180,155,70,209,244,27,74,238,193,18,27,1,55,131,248,243,82,107,86,208,55,224,95,37,152,189,15,210,33,93,106,30,82,149,230,79,115,246,63,10,236,139,145,90,152,93,120,101,152,0,0,0,0,0,0,0,0,0,0,0,0,227,123,106,119,93,200,125,186,164,223,169,249,110,94,63,253,222,189,113,248,134,114,137,134,93,245,163,45,32,205,201,68,182,2,44,172,60,73,130,177,13,94,235,85,195,228,222,21,19,70,118,251,109,224,68,96,101,201,116,64,250,140,106,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 413312);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,175,69,210,227,118,72,64,49,97,127,120,210,181,138,107,27,156,126,244,100,245,160,27,71,228,46,195,115,99,34,68,94,142,34,64,202,94,105,226,199,139,50,57,236,250,178,22,73,0,0,0,0,0,0,0,0,0,0,0,0,175,208,57,68,216,72,149,98,107,8,37,244,171,70,144,127,21,249,218,219,228,16,30,198,130,170,3,76,124,235,197,156,250,234,158,169,7,110,222,127,74,241,82,232,178,250,156,182,0,0,0,0,0,0,0,0,0,0,0,0,136,6,38,8,211,230,173,138,10,162,172,224,20,200,168,111,10,166,53,217,71,172,159,235,232,62,244,229,89,102,20,75,42,90,179,157,193,56,20,185,78,58,182,225,1,163,79,39,0,0,0,0,0,0,0,0,0,0,0,0,62,138,105,183,120,60,37,133,25,51,171,98,144,175,108,167,122,153,129,72,8,80,0,156,197,87,124,110,31,87,59,78,104,1,221,35,196,167,214,121,204,248,163,134,198,116,207,251,0,0,0,0,0,0,0,0,0,0,0,0,78,206,8,68,133,129,62,144,136,210,198,58,4,27,197,180,79,158,241,1,42,43,88,143,60,209,31,5,3,58,196,198,12,46,246,171,64,48,254,130,150,36,141,241,99,244,73,82,0,0,0,0,0,0,0,0,0,0,0,0,102,23,23,142,148,31,2,13,53,30,47,37,78,143,211,44,96,36,32,254,176,184,251,154,220,206,187,130,70,30,153,197,166,120,204,49,231,153,23,109,56,96,230,17,12,70,82,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 413844);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,91,220,193,70,191,96,117,78,106,4,36,38,8,149,117,199,90,0,63,8,157,39,57,131,157,236,88,185,100,236,56,67,0,0,0,0,0,0,0,0,0,0,0,0,176,52,76,97,216,219,56,83,92,168,175,206,175,11,241,43,136,29,194,0,201,131,61,167,38,233,55,108,46,50,207,247,0,0,0,0,0,0,0,0,0,0,0,0,119,62,169,30,54,128,14,70,133,77,184,235,208,145,129,167,41,89,9,139,62,248,193,34,217,99,85,20,206,213,101,254,0,0,0,0,0,0,0,0,0,0,0,0,130,85,138,56,154,68,60,14,164,204,129,152,153,242,8,58,133,240,250,163,229,120,248,7,122,46,63,244,103,41,102,91,0,0,0,0,0,0,0,0,0,0,0,0,96,228,49,89,30,224,182,127,13,138,38,170,203,245,183,127,142,11,198,33,55,40,197,20,5,70,4,15,14,227,127,84,0,0,0,0,0,0,0,0,0,0,0,0,155,9,255,167,27,148,47,203,39,99,95,188,213,176,233,68,191,220,99,100,79,7,19,147,138,127,81,83,92,58,53,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 414264);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,163,14,1,9,139,198,219,191,69,105,15,58,126,158,109,15,139,190,162,163,158,97,72,0,143,208,94,68,0,0,0,0,0,0,0,0,0,0,0,0,137,111,177,18,138,187,223,25,104,50,16,124,212,157,243,63,71,180,177,22,153,18,186,79,83,104,75,34,0,0,0,0,0,0,0,0,0,0,0,0,127,179,203,53,136,198,193,246,255,169,105,77,125,106,210,100,147,101,176,193,246,93,105,209,236,131,51,234,0,0,0,0,0,0,0,0,0,0,0,0,108,17,80,104,116,1,60,172,106,42,188,27,179,130,98,124,236,106,144,216,110,252,1,45,231,175,236,90,0,0,0,0,0,0,0,0,0,0,0,0,149,233,160,219,150,32,149,173,174,190,155,45,111,13,188,226,212,153,241,18,242,210,183,39,63,166,135,14,0,0,0,0,0,0,0,0,0,0,0,0,58,133,65,102,172,93,159,2,63,84,213,23,208,179,157,189,148,103,112,219,156,43,149,201,246,245,101,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 414572);
allocate([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,149,248,165,229,221,49,217,0,128,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,157,100,85,90,154,16,184,82,0,0,0,16,0,0,0,0,56,73,103,76,38,2,49,158,56,73,103,76,38,2,49,158,56,73,103,76,38,2,49,158,81,69,75,88,45,223,68,10,113,120,135,110,1,241,155,42,4,185,21,186,67,254,181,182,4,185,21,186,67,254,181,182,4,185,21,186,67,254,181,182,66,253,68,48,89,87,127,162,175,55,251,66,31,140,64,149,1,35,69,103,137,171,205,239,1,35,69,103,137,171,205,239,1,35,69,103,137,171,205,239,115,111,109,101,100,97,116,97,61,18,79,226,25,139,163,24,1,35,69,103,137,171,205,239,85,85,85,85,85,85,85,85,1,35,69,103,137,171,205,239,115,111,109,101,100,97,116,97,251,171,161,255,157,5,233,177,1,35,69,103,137,171,205,239,85,85,85,85,85,85,85,85,254,220,186,152,118,84,50,16,115,111,109,101,100,97,116,97,24,215,72,229,99,98,5,114,3,82,2,7,103,32,130,23,134,2,135,102,89,8,33,152,100,5,106,189,254,169,52,87,115,113,117,105,103,103,108,101,192,125,42,15,165,102,250,48,1,1,1,1,1,1,1,1,128,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,230,230,221,91,126,114,41,116,16,70,16,52,137,152,128,32,145,7,208,21,137,25,1,1,25,7,146,16,152,26,1,1,0,0,0,0,0,0,0,0,225,239,98,195,50,254,130,91], "i8", ALLOC_NONE, 414852);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,114,97,119,41,32,40,118,97,108,117,101,32,35,97,48,98,49,99,50,100,51,101,52,102,53,49,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,48,97,49,98,50,99,51,100,52,35,41,41,0] /* (data (flags raw) (v */, "i8", ALLOC_NONE, 415252);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,112,107,99,115,49,41,32,40,104,97,115,104,32,115,104,97,49,32,35,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,48,48,97,97,98,98,99,99,100,100,101,101,102,102,56,48,50,48,51,48,52,48,35,41,41,0] /* (data (flags pkcs1)  */, "i8", ALLOC_NONE, 415324);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,114,97,119,41,32,40,118,97,108,117,101,32,35,97,48,98,49,99,50,100,51,101,52,102,53,48,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,48,97,49,98,50,99,51,100,52,35,41,41,0] /* (data (flags raw) (v */, "i8", ALLOC_NONE, 415400);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,112,107,99,115,49,41,32,40,104,97,115,104,32,115,104,97,49,32,35,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,48,48,97,97,98,98,99,99,100,100,101,101,102,102,49,48,50,48,51,48,52,48,35,41,41,0] /* (data (flags pkcs1)  */, "i8", ALLOC_NONE, 415472);
allocate([123,56,59,35,162,125,38,211] /* {8;#\A2}&\D3 */, "i8", ALLOC_NONE, 415548);
allocate([36,110,157,185,197,80,56,26] /* $n\9D\B9\C5P8\1A */, "i8", ALLOC_NONE, 415556);
allocate([16,0,0,0,0,0,0,0] /* \10\00\00\00\00\00\0 */, "i8", ALLOC_NONE, 415564);
allocate([144,175,233,27,178,136,84,79,44,50,220,35,155,38,53,230] /* \90\AF\E9\1B\B2\88TO */, "i8", ALLOC_NONE, 415572);
allocate(8, "i8", ALLOC_NONE, 415588);
allocate([220,238,76,249,44] /* \DC\EEL\F9, */, "i8", ALLOC_NONE, 415596);
allocate(8, "i8", ALLOC_NONE, 415604);
allocate([212,145,219,22,231,177,195,158,134,203,8,107,120,159,84,25] /* \D4\91\DB\16\E7\B1\C */, "i8", ALLOC_NONE, 415612);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415628);
allocate([131,162,248,162,136,100,31,185,164,233,165,204,47,19,28,125] /* \83\A2\F8\A2\88d\1F\ */, "i8", ALLOC_NONE, 415644);
allocate([254,220,186,152,118,84,50,16] /* \FE\DC\BA\98vT2\10 */, "i8", ALLOC_NONE, 415660);
allocate([1,35,69,103,137,171,205,239] /* \01#Eg\89\AB\CD\EF */, "i8", ALLOC_NONE, 415668);
allocate([66,76,79,87,70,73,83,72,0] /* BLOWFISH\00 */, "i8", ALLOC_NONE, 415676);
allocate([48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* 0\00\00\00\00\00\00\ */, "i8", ALLOC_NONE, 415688);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415704);
allocate([212,59,183,85,110,163,46,70,242,162,130,183,212,91,78,13,87,255,115,157,77,201,44,27,215,252,1,112,12,200,33,111] /* \D4;\B7Un\A3.F\F2\A2 */, "i8", ALLOC_NONE, 415736);
allocate([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] /* \00\01\02\03\04\05\0 */, "i8", ALLOC_NONE, 415768);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16,0,17,34,51,68,85,102,119] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415784);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415808);
allocate([97,138,99,210,251] /* a\8Ac\D2\FB */, "i8", ALLOC_NONE, 415824);
allocate(16, "i8", ALLOC_NONE, 415832);
allocate([159,88,159,92,246,18,44,50,182,191,236,47,42,232,195,90] /* \9FX\9F\5C\F6\12,2\B */, "i8", ALLOC_NONE, 415848);
allocate([71,6,72,8,81,230,27,232,93,116,191,179,253,149,97,133] /* G\06H\08Q\E6\1B\E8]t */, "i8", ALLOC_NONE, 415864);
allocate([65,121,110,160,82,97,110,228] /* Ayn\A0Ran\E4 */, "i8", ALLOC_NONE, 415880);
allocate([17,34,51,68,255,170,204,221] /* \11\223D\FF\AA\CC\DD */, "i8", ALLOC_NONE, 415888);
allocate([1,35,69,103,18,52,86,120,35,69,103,137,52,86,120,154] /* \01#Eg\124Vx#Eg\894V */, "i8", ALLOC_NONE, 415896);
allocate([18,52,86,120,154,188,222,240] /* \124Vx\9A\BC\DE\F0 */, "i8", ALLOC_NONE, 415912);
allocate([85,85,85,85,85,85,85,85] /* UUUUUUUU */, "i8", ALLOC_NONE, 415920);
allocate([185,202,127,214,160,245,211,66,25,109,132,145,118,28,59,190,72,178,130,152,104,194,128,0,0,0,40,24,0,0,37,0,82,23,141,41,162,213,132,18,157,137,154,69,130,2,247,119,66,156,8,61,130,244,138,64,102,181,73,39,171,66,199,195,14,183,97,60,254,176,190,115,247,110,109,111,29,163,20,250,187,75,193,14,197,251,205,70,190,40,97,231,3,43,55,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,149,189,74,82,226,158,215,19,211,19,250,32,233,141,188,200,209,229,17,89,82,247,250,55,56,180,197,206,178,176,154,13,156,197,13,22,225,188,237,207,96,98,9,157,32,131,126,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,128,0,129,1,130,2,131,3,160,32,161,33,162,34,163,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,150,237,204,195,221,4,127,117,99,25,55,111,21,34,87,86,122,20,118,119,149,23,126,200,146,232,221,21,203,31,188,177,37,62,46,162,65,27,221,245,33,72,65,113,179,141,47,76], "i8", ALLOC_NONE, 415928);
allocate([254,220,186,152,118,84,50,16] /* \FE\DC\BA\98vT2\10 */, "i8", ALLOC_NONE, 416216);
allocate([255,255,255,255,255,255,255,255] /* \FF\FF\FF\FF\FF\FF\F */, "i8", ALLOC_NONE, 416224);
allocate([2,0,0,0,43,126,21,22,40,174,210,166,171,247,21,136,9,207,79,60,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,107,193,190,226,46,64,159,150,233,61,126,17,115,147,23,42,59,63,217,46,183,45,173,32,51,52,73,248,232,60,251,74,174,45,138,87,30,3,172,156,158,183,111,172,69,175,142,81,200,166,69,55,160,179,169,63,205,227,205,173,159,28,229,139,48,200,28,70,163,92,228,17,229,251,193,25,26,10,82,239,38,117,31,103,163,203,177,64,177,128,140,241,135,164,244,223,246,159,36,69,223,79,155,23,173,43,65,123,230,108,55,16,192,75,5,53,124,93,28,14,234,196,198,111,159,247,242,230,5,0,0,0,43,126,21,22,40,174,210,166,171,247,21,136,9,207,79,60,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,107,193,190,226,46,64,159,150,233,61,126,17,115,147,23,42,59,63,217,46,183,45,173,32,51,52,73,248,232,60,251,74,174,45,138,87,30,3,172,156,158,183,111,172,69,175,142,81,119,137,80,141,22,145,143,3,245,60,82,218,197,78,216,37,48,200,28,70,163,92,228,17,229,251,193,25,26,10,82,239,151,64,5,30,156,95,236,246,67,68,247,168,34,96,237,204,246,159,36,69,223,79,155,23,173,43,65,123,230,108,55,16,48,76,101,40,246,89,199,120,102,165,16,217,193,214,174,94], "i8", ALLOC_NONE, 416232);
allocate([143,209,3,137,51,107,249,94] /* \8F\D1\03\893k\F9^ */, "i8", ALLOC_NONE, 416560);
allocate([154,204,35,125,255,22,215,108,32,239,124,145,158,58,117,9] /* \9A\CC#}\FF\16\D7l \ */, "i8", ALLOC_NONE, 416568);
allocate([108,180,86,28,64,191,10,151,5,147,28,182,212,8,231,250] /* l\B4V\1C@\BF\0A\97\0 */, "i8", ALLOC_NONE, 416584);
allocate([80,220,1,98,189,117,127,49] /* P\DC\01b\BDu\7F1 */, "i8", ALLOC_NONE, 416600);
allocate([180,153,52,1,179,233,150,248,78,229,206,231,215,155,9,185] /* \B4\994\01\B3\E9\96\ */, "i8", ALLOC_NONE, 416608);
allocate([103,103,49,56,84,150,105,115,8,87,6,86,72,234,190,67] /* gg18T\96is\08W\06VH\ */, "i8", ALLOC_NONE, 416624);
allocate([241,56,41,201,222] /* \F18)\C9\DE */, "i8", ALLOC_NONE, 416640);
allocate([28,25,138,131,141,240,40,183] /* \1C\19\8A\83\8D\F0(\ */, "i8", ALLOC_NONE, 416648);
allocate([1,159,152,9,222,23,17,133,143,170,195,163,186,32,251,195] /* \01\9F\98\09\DE\17\1 */, "i8", ALLOC_NONE, 416656);
allocate([238,84,209,62,188,174,112,109,34,107,195,20,44,212,13,74] /* \EET\D1_\BC\AEpm\22k */, "i8", ALLOC_NONE, 416672);
allocate([225,19,244,16,44,252,206,67] /* \E1\13\F4\10,\FC\CEC */, "i8", ALLOC_NONE, 416688);
allocate([35,139,79,229,132,126,68,178] /* #\8BO\E5\84~D\B2 */, "i8", ALLOC_NONE, 416696);
allocate([6,154,0,127,199,106,69,159,152,186,249,23,254,223,149,33] /* \06\9A\00\7F\C7jE\9F */, "i8", ALLOC_NONE, 416704);
allocate([8,9,10,11,13,14,15,16,18,19,20,21,23,24,25,26,28,29,30,31,33,34,35,36,38,39,40,41,43,44,45,46] /* \08\09\0A\0B\0D\0E\0 */, "i8", ALLOC_NONE, 416720);
allocate([8,14,149,23,235,22,119,113,154,207,114,128,134,4,10,227] /* \08\0E\95\17\EB\16wq */, "i8", ALLOC_NONE, 416752);
allocate([118,119,116,117,241,242,243,244,248,249,230,231,119,112,113,114] /* vwtu\F1\F2\F3\F4\F8\ */, "i8", ALLOC_NONE, 416768);
allocate([4,5,6,7,9,10,11,12,14,15,16,17,19,20,21,22,24,25,26,27,29,30,31,32] /* \04\05\06\07\09\0A\0 */, "i8", ALLOC_NONE, 416784);
allocate([93,30,242,13,206,214,188,188,18,19,26,199,197,71,136,170] /* ]\1E\F2\0D\CE\D6\BC\ */, "i8", ALLOC_NONE, 416808);
allocate([1,75,175,34,120,166,157,51,29,81,128,16,54,67,233,154] /* \01K\AF\22x\A6\9D3\1 */, "i8", ALLOC_NONE, 416824);
allocate([232,233,234,235,237,238,239,240,242,243,244,245,247,248,249,250] /* \E8\E9\EA\EB\ED\EE\E */, "i8", ALLOC_NONE, 416840);
allocate([103,67,195,209,81,154,180,242,205,154,120,171,9,165,17,189] /* gC\C3\D1Q\9A\B4\F2\C */, "i8", ALLOC_NONE, 416856);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 416872);
allocate(4, "i8", ALLOC_NONE, 416912);
allocate(4, "i8", ALLOC_NONE, 416916);
allocate(4, "i8", ALLOC_NONE, 416920);
allocate([64,16,0,16,0,16,0,0,0,0,4,0,64,16,4,16,0,0,0,16,64,16,0,16,64,0,0,0,0,0,0,16,64,0,4,0,0,0,4,16,64,16,4,16,0,16,4,0,0,16,4,16,64,16,4,0,0,16,0,0,64,0,0,0,0,0,4,16,64,0,0,16,0,16,0,16,64,16,0,0,0,16,4,0,64,0,4,0,64,0,4,16,0,16,4,16,64,16,0,0,0,0,0,0,0,0,0,0,64,0,4,16,64,0,0,16,0,16,0,16,64,16,4,0,0,0,4,0,64,16,4,0,0,0,4,0,0,16,4,16,0,16,0,0,64,0,0,0,64,0,4,16,0,16,0,0,64,16,4,0,0,16,0,16,64,0,0,0,64,0,0,16,0,0,4,16,64,0,4,16,0,0,0,16,0,0,4,0,64,16,0,16,0,0,0,0,64,16,4,16,64,0,4,0,64,0,0,16,0,0,4,16,0,16,0,16,64,16,0,16,0,0,0,0,64,16,4,16,0,16,4,0,0,16,4,0,64,16,0,0,64,16,0,0,64,0,4,0,0,0,0,16,0,16,4,16], "i8", ALLOC_NONE, 416924);
allocate([0,0,32,0,2,0,32,4,2,8,0,4,0,0,0,0,0,8,0,0,2,8,0,4,2,8,32,0,0,8,32,4,2,8,32,4,0,0,32,0,0,0,0,0,2,0,0,4,2,0,0,0,0,0,0,4,2,0,32,4,2,8,0,0,0,8,0,4,2,8,32,0,2,0,32,0,0,8,0,4,2,0,0,4,0,0,32,4,0,8,32,4,2,0,32,0,0,0,32,4,0,8,0,0,2,8,0,0,2,8,32,4,0,8,32,0,2,0,0,0,0,0,0,4,0,8,32,0,0,0,0,4,0,8,32,0,0,0,32,0,2,8,0,4,2,8,0,4,2,0,32,4,2,0,32,4,2,0,0,0,2,0,32,0,0,0,0,4,0,8,0,4,0,0,32,0,0,8,32,4,2,8,0,0,2,8,32,0,0,8,32,4,2,8,0,0,2,0,0,4,2,8,32,4,0,0,32,4,0,8,32,0,0,0,0,0,2,0,0,0,2,8,32,4,0,0,0,0,2,8,32,0,0,0,32,4,0,8,0,0,2,0,0,4,0,8,0,4,0,8,0,0,2,0,32,0], "i8", ALLOC_NONE, 417180);
allocate([16,0,0,32,0,0,64,32,0,64,0,0,16,64,64,32,0,0,64,32,16,0,0,0,16,64,64,32,0,0,64,0,0,64,0,32,16,64,64,0,0,0,64,0,16,0,0,32,16,0,64,0,0,64,0,32,0,0,0,32,16,64,0,0,0,0,0,0,16,0,64,0,16,64,0,32,0,64,0,0,0,64,64,0,16,64,0,32,16,0,0,0,16,0,64,32,16,0,64,32,0,0,0,0,16,64,64,0,0,64,64,32,16,64,0,0,0,64,64,0,0,64,64,32,0,0,0,32,0,64,0,32,16,0,0,0,16,0,64,32,0,64,64,0,16,64,64,32,0,0,64,0,16,64,0,0,16,0,0,32,0,0,64,0,0,64,0,32,0,0,0,32,16,64,0,0,16,0,0,32,16,64,64,32,0,64,64,0,0,0,64,32,16,64,64,0,0,64,64,32,0,0,0,0,16,0,64,32,16,0,0,0,0,64,0,0,0,0,64,32,16,64,64,0,0,64,0,0,16,0,64,0,16,64,0,32,0,0,0,0,0,64,64,32,0,0,0,32,16,0,64,0,16,64,0,32], "i8", ALLOC_NONE, 417436);
allocate([0,1,0,0,0,1,8,2,0,0,8,2,0,1,0,66,0,0,8,0,0,1,0,0,0,0,0,64,0,0,8,2,0,1,8,64,0,0,8,0,0,1,0,2,0,1,8,64,0,1,0,66,0,0,8,66,0,1,8,0,0,0,0,64,0,0,0,2,0,0,8,64,0,0,8,64,0,0,0,0,0,1,0,64,0,1,8,66,0,1,8,66,0,1,0,2,0,0,8,66,0,1,0,64,0,0,0,0,0,0,0,66,0,1,8,2,0,0,0,2,0,0,0,66,0,1,8,0,0,0,8,0,0,1,0,66,0,1,0,0,0,0,0,2,0,0,0,64,0,0,8,2,0,1,0,66,0,1,8,64,0,1,0,2,0,0,0,64,0,0,8,66,0,1,8,2,0,1,8,64,0,1,0,0,0,0,0,2,0,0,8,66,0,1,8,66,0,1,8,0,0,0,0,66,0,1,8,66,0,0,8,2,0,0,0,0,0,0,8,64,0,0,0,66,0,1,8,0,0,1,0,2,0,1,0,64,0,0,8,0,0,0,0,0,0,0,8,64,0,1,8,2,0,1,0,64], "i8", ALLOC_NONE, 417692);
allocate([85,60,50,38,133,96,14,91,245,89,27,250,169,193,70,26,250,143,76,124,161,69,226,169,215,85,41,219,89,81,202,101,194,175,53,206,118,10,219,5,69,61,17,169,126,199,234,129,13,10,172,182,138,248,142,82,255,227,123,89,83,162,158,160,86,205,72,172,179,223,13,67,111,228,92,244,122,166,179,196,94,208,226,251,216,207,206,78,240,53,153,179,16,111,245,62,198,25,214,156,130,214,34,11,105,32,223,116,10,70,253,23,64,237,16,133,142,204,248,108,167,202,110,58,191,36,200,214,73,112,129,26,88,61,36,97,162,99,193,187,182,172,139,4,50,204,68,125,194,138,163,217,171,16,244,170,91,255,221,127,75,130,4,168,90,73,109,173,148,159,140,45,79,167,166,225,227,232,222,53,18,133,247,212,147,216,64,101,136,127,75,253,218,191,164,42,4,32,124,36,124,50,209,23,197,161,110,9,133,102,26,54,180,102,105,213,125,5,33,18,195,165,125,39,247,207,58,164,147,152,213,148,129,34,192,205,28,197,240,100,219,137,97,255,196,188,51,61,241,106,230,76,24,203,5,224,234,155,185,29,29,205,92,255,15,152,66,254,167,84,184,176,159,75,141,113,106,106,212,123,140,253,165,34,204,168,15,209,49,189,228,43,149,132,20,211,71,56,36,203,95,151,250,199,7,196,70,88,30,237,134,72,4,11,183,30,121,219,205,40,127,65,115,245,226,11,176,194,119,248,128,33,69,144,149,92,0,235,112,243,255,221,107,122,164,214,217,214,56,158,80,206,2,167,127,100,0,15,235,235,6,111,96,118,207,6,204,29,10,255,134,162,139,242,217,228,98,194,24,201,93,48,90,216,84,95,34,50,135,29,91,71,254,181,204,104,22,181,79,45,32,186,43,215,217,185,121,166,165,67,45,145,13,28,132,83,232,164,18,191,72,170,126,59,223,29,47,242,71,14,30,120,115,9,181,10,230,12,242,239,66,183,255,157,209,97,210,32,57,46,42,6,3,43,161,22,149,4,101,57,34,235,96,25,184,184,14,213,254,22,28,37,110,1,38,248,48,195,192,154,113,118,62,149,101,38,21,237,112,149,54,166,148,49,214,2,135,201,177,148,131,240,116,80,225,92,178,144,140,89,186,112,246,66,151,11,129,21,74,121,108,140,175,252,233,37,89,13,78,116,104,216,108,113,103,48,27,115,215,232,119,176,10,145,97,47,196,90,219,187,97,106,103,21,133,240,251,62,81,147,213,233,131,158,75,114,148,244,141,100,9,92,152,225,135,232,253,12,55,117,198,211,177,52,93,37,13,188,51,228,53,220,224,27,19,52,66,184,170,208,175,126,139,180,80,42,4,8,53,171,163,68,238,196,151,153,208,153,23,32,73,123,154,130,65,68,197,183,7,131,59,38,166,108,106,253,244,149,47,117,229,198,8,44,64,23,114,146,238,217,149,167,84,183,138,42,61,148,114,47,85,247,66,164,8,18,120,25,78,51,49,44,145,98,238,234,124,141,169,79,9,179,93,102,47,134,195,85,243,177,83,93,23,16,6,189,39,63,65,64,184,108,254,70,89,250,12,223,146,55,224,63,143,94,184,46,55,0,231,207,24,225,188,173,231,41,190,167,221,49,132,222,92,238,68,229,62,135,241,65,27,27,120,138,231,240,210,160,120,76,201,165,40,7,182,119,40,46,65,57,44,166,201,175,243,94,38,161,197,6,37,106,12,119,194,188,18,206,225,220,213,109,182,58,55,91,103,74,208,153,84,230,22,210,191,129,52,82,143,125,137,243,21,236,252,100,111,15,200,19,91,139,97,190,239,116,29,62,39,20,183,130,220,172,23,157,25,3,224,191,64,221,248,97,224,231,87,146,233,55,170,90,119,4,105,98,82,250,249,86,61,70,58,246,187,139,100,110,162,67,21,63,1,240,152,200,158,135,159,126,48,168,204,119,1,21,164,39,76,204,72,51,29,202,44,47,67,27,19,160,111,159,143,31,29,222,214,221,167,71,160,2,102,96,199,178,28,204,100,171,55,210,211,209,252,37,114,142,147,155,118,244,15,142,112,3,78,236,45,193,3,61,218,251,178,254,154,136,67,238,210,206,11,174,67,79,251,235,35,137,203,34,109,57,247,60,1,13,54,105,34,224,212,210,2,54,94,133,76,120,31,208,186,5,56,7,70,245,82,56,19,122,225,51,56,182,199,138,5,116,72,223,74,161,138,103,156,178,146,186,205,173,250,108,199,159,232,12,52,158,51,8,9,78,157,95,185,35,89,31,41,233,175,241,95,38,74,15,246,128,52,110,28,132,155,178,42,58,191,238,173,180,145,143,168,56,25,226,195,211,198,69,248,239,223,87,242,170,44,246,11,107,0,47,120,238,117,111,239,121,244,98,169,22,137,28,212,90,165,17,83,212,254,132,144,210,41,242,230,0,176,22,123,194,241,66,116,192,35,152,116,118,31,43,96,83,116,194,163,236,118,75,189,145,22,185,99,244,152,140,106,230,173,241,60,201,188,20,151,131,69,109,62,33,133,136,17,71,77,39,240,125,23,142,81,41,63,80,181,115,155,180,107,107,249,195,104,129,22,16,174,176,202,99,59,150,61,14,20,219,161,85,86,75,252,141,92,222,20,110,53,241,137,247,193,218,81,78,175,104,62,104,217,15,75,141,157,79,168,201,209,249,160,82,63,224,145,54,128,142,135,225,70,110,216,94,80,113,208,153,14,26,113,60,16,147,78,12,178,101,8,90,46,104,240,228,31,252,251,86,155,223,94,16,227,93,141,234,122,24,121,35,177,253,171,113,156,123,231,190,225,157,185,46,35,69,207,51,234,192,236,33,161,199,5,24,82,215,164,89,114,124,174,86,235,245,150,56,220,117,143,177,61,143,99,170,142,128,233,171,141,53,57,159,172,114,11,192,145,250,222,183,146,45,73,98,253,65,85,107,91,77,46,249,232,222,198,109,126,234,190,196,171,87,63,53,206,144,86,218,214,105,87,115,132,20,57,66,166,74,35,10,157,13,248,40,128,80,249,246,21,242,179,122,162,25,227,184,77,26,52,81,17,156,173,49,5,88,239,123,165,34,60,119,51,134,150,7,26,86,199,69,54,190,157,36,158,218,19,249,104,76,166,120,155,45,101,218,239,52,195,59,127,169,39,76,244,23,107,230,32,18,98,118,11,125,205,154,137,67,119,150,130,103,237,224,202,91,238,243,252,121,200,0,54,117,159,64,182,109,146,181,57,154,208,6,136,197,122,49,176,174,131,111,33,31,56,134,74,202,230,1,37,48,159,209,98,52,255,102,251,59,253,221,36,124,32,114,235,226,236,226,211,182,246,74,222,8,234,199,190,77,153,156,196,139,154,176,151,229,172,73,186,151,7,207,102,71,140,179,117,42,124,197,115,147,27,19,88,30,147,97,206,44,130,177,12,28,186,9,185,85,117,157,210,17,125,147,221,175,127,18,228,146,109,198,173,59,218,41,188,236,194,84,113,213,193,162,36,254,246,130,77,19,197,88,79,39,98,91,81,227,58,28,38,129,203,1,46,200,7,233,203,127,227,19,25,9,237,248,201,70,0,200,249,216,73,50,99,251,136,227,237,155,207,128,158,241,108,17,154,83,129,24,87,36,213,107,247,243,3,81,168,247,71,174,245,230,183,21,207,156,126,212,222,198,215,219,26,187,40,2,65,92,229,68,153,78,219,94,37,212,71,182,48,252,170,184,43,136,17,93,42,33,211,41,187,139,9,245,179,150,2,233,20,234,181,143,90,2,221,87,33,148,123,103,181,172,144,163,192,231,88,251,1,74,189,131,76,103,211,137,59,185,243,75,223,164,45,158,41,72,171,140,50,30,196,252,82,44,88,186,150,140,243,3,178,93,216,127,189,189,209,202,131,174,130,96,193,66,180,187,176,154,218,165,107,232,95,185,63,169,113,55,103,4,46,178,216,82,49,73,201,88,83,132,30,84,180,151,134,72,42,190,102,105,142,211,45,220,162,149,43,133,60,146,172,17,44,192,123,168,242,13,153,177,136,35,190,55,79,27,250,8,128,124,3,229,84,77,200,208,112,31,212,87,206,126,236,173,144,84,58,58,6,217,39,60,43,0,191,162,48,128,132,163,174,126,192,3,32,237,109,50,2,198,134,64,169,105,125,40,167,131,138,122,245,48,203,95,122,197,121,231,235,121,228,68,104,181,233,188,220,5,15,180,115,163,226,14,87,136,110,120,26,215,160,246,232,189,205,186,156,135,47,163,100,193,188,209,106,151,139,215,102,150,94,226,33,171,60,195,229,229,170,99,16,144,144,141,105,72,68,179,24,152,187,138,30,62,174,135,100,227,180,220,59,137,49,249,189,175,25,213,187,95,220,160,69,99,202,101,148,155,38,254,40,134,236,81,156,63,96,1,93,30,183,73,80,161,6,64,228,77,177,203,118,247,229,112,108,191,237,43,85,239,242,24,18,65,163,54,90,112,8,7,12,203,68,96,152,79,117,20,77,231,14,40,168,14,67,217,86,205,101,80,95,83,215,145,37,193,150,239,10,114,241,35,50,200,31,165,99,115,111,57,160,195], "i8", ALLOC_NONE, 417948);
allocate([1,32,128,0,129,32,0,0,129,32,0,0,128,0,0,0,128,32,128,0,129,0,128,0,1,0,128,0,1,32,0,0,0,0,0,0,0,32,128,0,0,32,128,0,129,32,128,0,129,0,0,0,0,0,0,0,128,0,128,0,1,0,128,0,1,0,0,0,0,32,0,0,0,0,128,0,1,32,128,0,128,0,0,0,0,0,128,0,1,32,0,0,128,32,0,0,129,0,128,0,1,0,0,0,128,32,0,0,128,0,128,0,0,32,0,0,128,32,128,0,129,32,128,0,129,0,0,0,128,0,128,0,1,0,128,0,0,32,128,0,129,32,128,0,129,0,0,0,0,0,0,0,0,0,0,0,0,32,128,0,128,32,0,0,128,0,128,0,129,0,128,0,1,0,0,0,1,32,128,0,129,32,0,0,129,32,0,0,128,0,0,0,129,32,128,0,129,0,0,0,1,0,0,0,0,32,0,0,1,0,128,0,1,32,0,0,128,32,128,0,129,0,128,0,1,32,0,0,128,32,0,0,0,0,128,0,1,32,128,0,128,0,0,0,0,0,128,0,0,32,0,0,128,32,128,0], "i8", ALLOC_NONE, 419996);
allocate([155,243,218,241,47,204,159,244,129,146,242,111,198,213,127,72,63,168,220,252,103,6,163,232,99,206,252,210,227,75,155,44,194,187,251,147,75,247,63,218,102,186,112,254,210,101,161,47,212,147,14,151,121,226,3,161,113,94,228,176,119,236,205,190,151,228,133,57,114,30,180,207,23,80,247,94,2,170,10,183,224,184,64,56,240,9,35,212,121,133,137,53,208,26,252,142,197,171,178,226,11,146,198,150,114,145,90,55,99,65,175,102,251,39,113,202,220,171,116,33,65,255,114,74,166,206,60,179,165,102,48,8,51,73,74,240,245,154,40,215,205,10,151,141,94,194,200,49,224,232,150,143,71,93,135,118,34,192,254,243,221,144,97,5,16,243,123,236,145,20,15,187,174,176,173,245,146,136,213,15,133,248,80,155,232,77,183,88,131,72,117,73,97,28,83,145,246,79,53,163,238,198,210,129,228,187,2,7,152,237,237,125,5,36,251,137,2,233,150,133,19,117,48,172,237,114,39,23,128,53,45,29,13,195,107,142,194,143,115,235,38,67,4,99,143,239,84,88,190,59,221,90,50,82,92,158,35,70,92,50,207,83,170,144,103,208,157,52,81,77,210,193,36,166,158,166,238,207,81,32,79,126,46,134,10,15,34,19,100,72,224,4,148,57,57,206,183,252,134,112,164,44,196,217,204,231,3,138,35,210,90,104,219,241,47,171,178,132,100,6,236,121,191,239,112,93,157,254,84,24,72,156,221,185,19,91,173,9,21,237,117,212,240,21,81,152,199,14,6,205,235,11,248,183,58,24,145,103,140,213,228,238,243,82,80,124,24,209,255,130,78,229,146,17,93,201,162,108,172,185,76,161,238,134,93,125,103,83,177,190,133,52,42,73,140,31,120,29,25,221,249,235,132,167,186,102,8,246,116,140,208,162,59,100,143,81,34,124,8,225,86,233,82,136,141,174,16,196,141,203,104,167,26,142,236,191,38,119,4,56,170,69,59,205,180,56,119,166,25,222,13,236,28,105,22,173,7,46,70,128,147,49,212,198,56,25,166,11,109,135,165,197,64,216,143,165,31,250,185,22,24,79,167,60,23,177,138,24,31,2,156,201,152,47,218,171,22,232,74,19,171,128,5,62,187,90,100,115,183,5,59,95,246,242,117,85,190,162,1,37,169,139,126,78,0,116,47,27,83,217,232,113,3,88,215,28,48,78,118,98,149,216,110,127,61,0,111,89,255,38,89,177,185,214,197,168,61,41,101,159,76,248,144,214,77,240,206,110,136,175,51,255,95,39,130,71,1,8,130,63,8,51,20,228,181,249,26,154,64,254,13,253,107,57,219,44,52,163,37,67,82,178,1,179,98,126,231,138,90,97,85,102,159,158,111,195,9,44,211,146,45,90,69,133,133,116,71,73,169,222,199,242,186,158,163,51,193,180,207,99,98,84,188,110,204,64,176,131,176,38,179,253,200,84,148,59,140,215,255,135,158,106,245,86,198,43,244,153,13,148,194,45,45,110,9,107,9,223,247,152,191,82,216,58,30,224,166,25,11,180,212,219,203,156,169,66,89,197,233,69,175,152,153,165,134,49,217,7,232,149,98,54,115,247,161,250,27,24,72,107,29,10,122,21,226,87,236,31,213,26,32,246,106,68,103,70,117,240,176,207,202,235,21,230,120,7,41,104,79,31,243,184,30,209,34,206,214,62,113,34,59,201,195,46,167,193,87,48,47,31,63,124,195,172,70,203,14,245,170,2,253,147,184,219,207,159,11,96,46,217,31,51,214,58,234,72,97,249,152,164,234,131,106,139,110,66,216,168,220,92,115,183,116,178,137,160,17,74,82,30,115,179,246,135,73,103,201,203,229,8,136,17,148,211,155,177,199,228,6,153,12,162,36,155,126,127,237,175,167,68,54,235,222,234,9,101,222,14,239,232,211,241,30,108,180,143,121,233,67,125,201,185,163,40,12,116,132,215,242,162,111,86,151,97,71,150,132,123,157,6,95,182,230,227,91,122,16,111,190,120,237,48,99,249,21,106,7,122,231,13,230,238,208,155,139,160,74,238,75,43,78,137,184,199,62,166,86,106,244,254,52,186,89,19,18,2,252,3,55,40,248,153,191,76,200,48,175,12,53,113,128,57,122,104,23,240,137,122,167,208,105,53,66,158,235,169,193,241,153,129,238,45,40,118,121,140,189,122,31,221,165,55,23,93,128,250,169,9,60,67,83,79,217,161,124,223,83,12,139,250,119,203,108,136,188,220,217,63,32,71,27,169,124,145,64,192,223,220,209,249,66,1,208,125,88,123,56,79,29,252,118,132,3,101,49,243,197,231,248,35,57,115,227,231,68,34,42,3,75,167,245,80,215,165,135,92,46,153,152,54,196,76,43,8,60,246,88,184,236,123,145,223,218,109,248,91,252,184,112,50,118,221,181,41,187,114,174,16,43,54,0,119,78,201,106,87,143,251,30,198,218,18,209,26,39,164,250,197,14,195,27,105,67,113,50,204,17,99,36,255,6,50,229,48,142,54,66,49,150,163,44,224,49,14,56,113,241,118,173,10,150,92,141,149,54,165,109,193,48,244,214,248,210,225,231,27,63,209,255,200,225,219,77,0,102,174,120,117,70,230,123,6,1,63,131,5,109,88,254,59,173,181,52,187,240,151,43,161,201,52,95,9,168,12,214,37,69,182,122,36,209,119,116,1,243,198,219,220,77,210,202,222,212,20,46,74,235,30,10,190,217,230,181,189,171,1,67,121,247,112,126,42,253,64,5,39,138,45,244,222,193,34,76,163,192,142,7,1,135,99,193,244,26,81,222,229,10,51,154,189,82,58,187,126,53,100,125,170,87,120,105,119,50,76,174,3,22,131,78,0,18,227,120,173,32,16,162,231,242,32,180,106,12,167,65,157,230,65,17,234,24,108,224,40,40,107,79,152,189,140,178,210,131,157,110,68,108,95,183,38,127,141,65,77,140,86,71,186,142,61,24,230,191,173,11,216,68,96,22,95,127,109,32,14,62,202,203,17,57,164,88,226,188,192,29,178,70,23,58,114,211,205,215,245,84,168,202,199,156,29,38,61,136,50,172,124,44,148,186,35,100,194,144,118,184,66,128,71,36,85,229,23,159,56,162,86,118,71,190,224,160,45,171,103,94,155,40,77,49,253,187,143,156,43,134,68,101,19,20,157,4,200,124,180,147,199,145,43,54,27,44,130,216,223,19,251,85,70,177,78,123,169,226,20,7,186,203,30,20,95,222,92,157,69,67,97,137,172,240,213,241,251,168,83,0,91,94,28,216,4,234,151,243,179,253,212,168,129,33,98,8,18,42,87,65,211,188,233,138,229,204,67,134,37,17,20,164,224,198,164,254,197,68,145,15,98,207,101,101,208,51,13,161,156,33,159,72,141,164,84,33,200,99,109,172,94,62,196,175,13,119,114,58,139,114,169,239,135,223,32,123,78,147,215,229,134,62,26,182,3,85,227,4,213,25,200,251,33,227,202,166,191,96,172,179,80,154,18,195,182,159,126,234,104,94,205,199,177,131,148,25,144,28,176,108,55,149,194,213,60,233,61,19,173,185,42,223,46,213,174,132,120,160,192,18,245,96,46,201,16,98,227,163,134,61,188,206,81,57,22,155,157,38,53,250,181,205,208,42,110,125,12,51,87,127,216,151,98,232,89,231,176,141,137,33,242,142,41,126,170,165,209,41,0,0,85,69,27,6,181,225,138,192,139,58,112,146,108,43,28,195,194,66,239,37,175,107,89,204,148,86,4,84,34,219,115,29,10,154,23,196,217,249,160,182,4,96,60,61,174,162,175,253,239,196,150,148,180,91,7,200,247,227,212,28,29,20,199,197,156,52,85,142,33,56,22,189,120,106,36,80,248,104,21,241,178,41,188,2,149,250,188,250,237,27,5,35,218,242,229,108,121,124,83,147,220,176,40,225,170,174,41,75,238,160,61,73,58,215,149,104,65,44,107,223,181,55,127,45,18,37,189,171,252,177,196,93,16,88,11,129,112,144,42,136,247,55,221,15,225,92,63,138,81,181,202,77,82,91,37,81,132,135,133,158,60,226,52,189,25,129,130,41,64,203,236,60,93,111,91,160,116,202,62,225,66,21,2,16,182,172,226,89,47,209,121,249,15,80,204,249,228,39,218,55,96,125,132,241,13,90,151,146,94,254,35,230,211,144,225,109,214,72,128,86,123,184,214,50,80,110,33,53,130,206,183,54,154,74,75,246,36,122,42,39,128,247,22,105,140,139,237,239,147,85,21,206,76,244,191,221,55,37,189,153,75,93,219,149,75,192,47,129,105,161,253,211,146,182,11,102,144,154,74,26,251,178,185,164,70,105,25,12,115,104,218,73,127,170,137,226,129,95,160,177,131,15,154,102,100,139,244,68,150,125,255,179,39,179,117,182,141,92,97,107,204,149,190,235,188,185,32,79,103,130,89,101,117,130,35,49,111,5,207,69,62,113,136,228,90,87,17,194,84,153,159,97,191,233,234,168,64,96,196,186,234,205,193,192,242,233,111,76,69,28,105,18,100,73,246,156,65,112,15,91,38,239,59,220,211,158,138,87,195,245,96,14,109], "i8", ALLOC_NONE, 420252);
allocate([8,2,0,0,0,2,2,8,0,0,0,0,8,0,2,8,0,2,0,8,0,0,0,0,8,2,2,0,0,2,0,8,8,0,2,0,8,0,0,8,8,0,0,8,0,0,2,0,8,2,2,8,8,0,2,0,0,0,2,8,8,2,0,0,0,0,0,8,8,0,0,0,0,2,2,8,0,2,0,0,0,2,2,0,0,0,2,8,8,0,2,8,8,2,2,0,8,2,0,8,0,2,2,0,0,0,2,0,8,2,0,8,8,0,0,0,8,2,2,8,0,2,0,0,0,0,0,8,0,2,2,8,0,0,0,8,8,0,2,0,8,2,0,0,0,0,2,0,0,2,2,8,0,2,0,8,0,0,0,0,0,2,0,0,8,0,2,0,8,2,2,8,0,2,0,8,8,0,0,8,0,2,0,0,0,0,0,0,8,0,2,8,8,2,0,8,0,0,2,0,0,0,0,8,8,2,2,8,8,0,0,0,8,2,2,0,0,2,2,0,8,0,0,8,0,0,2,8,8,2,0,8,8,2,0,0,0,0,2,8,8,2,2,0,8,0,0,0,8,0,2,8,0,2,2,0], "i8", ALLOC_NONE, 422300);
allocate([56,33,161,5,90,190,166,230,152,124,248,180,165,34,161,181,144,105,11,20,137,96,60,86,213,93,31,57,46,203,70,76,52,148,183,201,219,173,50,217,245,175,21,32,228,112,234,8,241,140,71,62,103,166,101,215,153,141,39,171,126,117,251,196,146,6,110,45,134,198,17,223,22,59,127,13,241,132,235,221,4,234,101,166,4,246,46,111,179,223,224,240,15,15,142,74,81,186,188,61,248,238,237,165,30,55,164,14,42,10,79,252,41,132,179,92,168,29,62,232,226,28,27,186,130,248,143,220,13,232,83,131,94,80,69,205,23,7,219,212,0,154,209,24,1,129,243,165,237,207,160,52,242,202,135,136,81,126,231,11,54,81,196,179,56,20,52,30,249,204,137,144,244,151,87,224,20,29,89,242,157,63,210,255,205,197,149,133,34,218,61,84,51,42,5,153,253,129,31,102,118,123,15,219,65,230,54,135,7,83,142,65,37,119,34,21,250,178,46,22,70,127,95,226,254,217,19,108,18,178,168,72,234,110,231,146,23,84,220,175,143,137,209,198,191,18,217,3,27,245,131,27,250,170,177,49,217,183,42,228,150,39,172,241,172,235,210,252,215,167,163,64,197,188,251,10,109,19,86,16,133,12,109,154,221,225,137,120,170,116,121,42,120,37,53,211,155,192,138,7,9,93,226,167,208,237,198,234,179,56,65,189,112,158,235,113,190,191,10,146,92,98,194,79,245,208,165,162,163,144,18,11,107,227,84,192,43,147,254,98,255,89,221,246,125,172,168,17,69,53,55,53,212,220,250,114,145,94,132,202,220,32,157,50,96,43,248,132,24,47,103,205,225,44,198,121,44,100,36,209,173,162,9,139,38,231,217,25,106,233,193,208,12,80,169,75,155,106,120,90,243,67,76,99,54,3,2,14,34,216,102,235,74,71,123,193,194,170,155,236,227,26,115,106,88,2,132,224,122,102,38,130,165,236,202,145,118,86,212,103,181,173,117,72,92,21,148,29,223,63,129,91,152,253,0,109,6,205,116,183,252,110,40,81,175,68,167,31,71,52,136,94,46,174,97,231,174,160,44,247,154,224,232,174,205,228,64,190,101,246,24,81,187,11,151,233,100,25,223,51,235,75,110,114,98,151,25,41,7,0,59,112,167,48,239,245,22,216,49,70,190,166,4,21,181,181,128,184,108,75,216,126,195,147,23,100,150,125,233,246,119,237,33,123,115,107,249,46,49,6,99,119,244,243,111,232,72,137,82,174,248,248,163,134,242,215,219,83,99,16,252,76,231,220,202,22,221,198,82,250,189,25,92,0,211,106,212,100,93,143,134,104,106,24,30,207,44,81,157,58,174,96,86,56,194,98,126,54,215,177,220,119,234,231,89,227,110,190,154,116,115,7,108,82,75,115,159,208,249,229,90,115,168,139,85,138,204,199,63,73,69,171,65,48,83,193,185,176,189,89,10,71,186,88,25,50,147,195,70,95,11,176,45,133,229,176,54,211,43,155,32,145,159,241,158,101,125,79,96,110,36,203,44,120,226,138,154,185,199,196,20,200,182,42,245,204,123,114,17,190,175,217,39,71,77,179,33,1,12,13,149,126,31,71,173,112,86,67,111,117,73,104,90,97,66,212,173,245,122,149,185,128,153,224,135,78,85,227,174,80,223,161,207,42,86,213,47,253,58,38,152,216,214,143,12,216,77,146,244,200,58,23,74,117,61,202,153,207,60,191,145,175,172,123,71,254,45,193,144,214,246,113,83,237,148,112,104,94,40,92,26,131,164,160,8,55,10,201,211,197,128,101,208,23,55,144,127,15,127,242,253,184,19,187,249,25,67,40,80,77,27,111,189,177,18,64,255,143,163,27,118,28,59,31,226,226,196,48,21,13,138,44,55,167,105,206,67,137,102,206,181,254,17,78,24,229,33,102,115,189,128,219,139,97,11,77,87,139,214,186,41,125,91,254,230,37,62,97,187,129,63,145,7,188,16,156,28,7,151,45,172,9,121,235,190,199,87,215,197,59,53,141,229,195,232,97,143,243,146,120,1,235,26,194,28,155,156,251,239,212,171,247,148,244,38,125,114,153,3,62,107,149,162,99,224,163,48,156,160,74,154,139,74,157,180,15,9,0,213,183,106,63,192,138,38,87,160,242,192,156,209,66,191,237,45,157,238,61,114,169,96,121,200,73,15,51,65,27,66,135,2,114,178,198,156,54,0,124,192,158,197,10,37,52,53,203,73,172,78,239,216,41,1,239,78,36,80,244,182,222,244,202,229,70,204,138,247,99,146,152,99,171,254,47,120,69,122,93,254,185,124,143,53,70,99,78,100,247,216,91,0,201,45,191,21,115,122,66,28,38,37,33,170,196,208,23,80,142,81,147,108,72,146,57,195,212,215,162,224,254,203,180,141,221,93,44,32,214,117,124,97,108,91,227,216,149,194,219,25,43,3,2,211,105,179,96,50,65,228,220,95,104,66,206,16,86,246,221,185,221,243,6,240,72,225,181,29,210,164,142,111,73,205,47,230,252,176,32,49,238,176,88,35,145,27,44,8,163,245,24,184,23,131,178,207,210,166,156,24,30,156,168,200,219,170,106,87,24,107,12,227,250,153,18,169,234,93,182,231,39,16,127,75,121,43,251,235,91,59,68,127,49,228,4,166,208,57,89,50,45,133,75,252,127,32,251,238,107,174,213,116,211,199,129,178,130,150,48,117,180,195,148,161,9,227,186,5,159,180,19,123,249,195,140,103,57,41,248,47,66,169,152,124,255,118,16,176,22,75,36,238,103,61,102,28,87,191,248,161,13,227,238,88,103,13,31,183,185,222,122,217,17,182,201,162,87,108,123,136,213,175,183,225,79,152,107,132,174,144,98,253,165,193,172,222,76,223,148,255,58,72,197,209,91,138,5,55,60,186,66,193,108,22,99,64,111,247,178,110,82,184,141,78,109,13,111,3,128,8,225,29,49,29,151,201,35,5,158,145,214,124,204,36,40,236,69,201,130,35,230,89,131,91,87,149,153,136,196,13,64,158,250,104,21,114,69,203,62,130,209,47,8,6,130,59,152,253,218,203,168,134,35,8,41,125,170,136,117,184,3,68,205,159,38,224,209,189,40,247,245,145,27,246,1,2,4,57,159,102,228,222,74,240,140,33,124,29,122,206,229,156,215,41,60,98,101,177,11,192,150,144,68,104,35,186,3,165,157,135,241,155,171,142,5,88,164,177,236,35,188,204,30,64,187,1,223,88,154,61,20,95,168,104,232,112,160,158,35,242,125,48,136,241,79,131,17,100,26,180,101,213,20,2,22,112,82,116,51,19,238,9,94,40,63,207,61,14,149,83,9,200,185,84,2,147,89,109,218,48,137,64,153,242,59,135,19,105,83,63,148,85,169,132,135,203,169,202,222,94,161,160,233,43,53,39,33,20,41,251,122,78,255,31,55,240,118,40,34,79,39,80,244,57,2,139,134,94,29,240,58,7,187,193,150,14,193,113,5,200,191,35,46,34,104,133,8,103,210,176,181,128,142,212,163,113,150,129,187,147,225,138,211,181,85,184,4,139,161,208,226,58,105,95,51,213,173,236,180,72,92,202,161,22,73,25,59,116,253,196,152,190,52,129,1,119,37,173,164,84,60,232,135,121,231,185,225,51,218,20,16,225,40,19,162,106,34,158,197,12,39,96,95,26,109,117,95,73,113,119,239,175,96,251,83,232,155,191,61,68,247,167,134,199,173,130,154,178,115,97,69,4,9,94,189,50,194,102,122,188,88,178,200,58,103,140,85,6,243,42,119,201,182,198,57,246,65,218,53,218,159,233,239,109,33,21,230,123,28,199,12,100,17,39,85,92,86,148,54,196,147,57,120,119,70,98,142,3,234,105,36,62,90,206,243,171,249,210,18,211,15,141,118,30,116,198,82,214,206,131,184,68,1,82,133,63,163,91,90,11,194,157,90,67,195,51,150,230,26,236,253,140,8,164,140,162,151,32,244,150,30,60,164,36,136,70,167,238,110,166,47,97,55,90,14,207,249,101,177,76,107,74,251,171,160,6,28,170,67,107,121,98,241,111,194,77,127,15,155,237,84,142,204,186,108,62,37,187,210,239,255,183,166,79,157,162,176,149,188,37,46,140,56,241,222,139,165,214,134,84,240,182,118,197,74,215,222,93,128,69,43,188,189,48,128,137,146,77,233,112,175,129,60,219,0,49,158,218,109,255,62,71,136,204,223,159,195,141,179,126,184,23,141,82,133,56,18,66,182,177,64,210,14,218,242,169,249,75,213,220,250,206,68,230,126,60,67,14,32,18,19,72,199,120,58,79,200,252,159,187,118,133,36,114,31,205,240,228,207,56,54,5,116,105,236,76,78,236,12,124,182,167,43,237,50,206,229,243,77,47,172,17,76,234,38,67,209,51,203,188,88,126,199,76,4,233,164,239,252,52,217,147,50,81,95,68,84,229,6,85,100,201,93,10,228,125,49,143,65,222,80,89,226,221,105,26,179,140,56,134,10,130,85,52,168,180,45,233,26,113,132,30,169,16,144,113,131,73,177,183,240,247,77,121,113,151,192,171,46,42,214,14,92,141,170,151,192,250,34], "i8", ALLOC_NONE, 422556);
allocate([32,128,16,128,0,128,0,128,0,128,0,0,32,128,16,0,0,0,16,0,32,0,0,0,32,0,16,128,32,128,0,128,32,0,0,128,32,128,16,128,0,128,16,128,0,0,0,128,0,128,0,128,0,0,16,0,32,0,0,0,32,0,16,128,0,128,16,0,32,0,16,0,32,128,0,128,0,0,0,0,0,0,0,128,0,128,0,0,32,128,16,0,0,0,16,128,32,0,16,0,32,0,0,128,0,0,0,0,0,128,16,0,32,128,0,0,0,128,16,128,0,0,16,128,32,128,0,0,0,0,0,0,32,128,16,0,32,0,16,128,0,0,16,0,32,128,0,128,0,0,16,128,0,128,16,128,0,128,0,0,0,0,16,128,0,128,0,128,32,0,0,0,32,128,16,128,32,128,16,0,32,0,0,0,0,128,0,0,0,0,0,128,32,128,0,0,0,128,16,128,0,0,16,0,32,0,0,128,32,0,16,0,32,128,0,128,32,0,0,128,32,0,16,0,0,128,16,0,0,0,0,0,0,128,0,128,32,128,0,0,0,0,0,128,32,0,16,128,32,128,16,128,0,128,16,0], "i8", ALLOC_NONE, 424604);
allocate([94,12,233,247,124,177,170,2,236,168,67,226,3,75,66,172,211,252,213,13,227,91,205,114,58,127,249,246,147,155,1,109,147,145,31,210,255,120,153,205,226,41,128,112,201,161,115,117,195,131,42,146,107,50,100,177,112,88,145,4,238,62,136,70,230,236,3,113,5,227,172,234,92,83,163,8,184,105,65,197,124,196,222,141,145,84,231,76,12,244,13,220,223,244,162,10,250,190,77,167,24,111,183,16,106,171,209,90,35,182,204,198,255,226,47,87,33,97,114,19,30,146,157,25,111,140,72,26,202,7,0,218,244,249,201,75,199,65,82,232,246,230,245,38,182,71,89,234,219,121,144,133,146,140,158,201,197,133,24,79,75,134,111,169,30,118,142,215,125,193,181,82,140,66,54,142,193,99,48,55,39,104,207,105,110,197,180,155,61,201,7,182,234,181,118,14,118,14,130,125,66,220,127,240,198,156,92,100,224,66,51,36,120,160,56,191,4,125,46,157,60,52,107,95,198,14,11,96,235,138,194,242,172,188,84,114,95,216,14,108,229,79,219,164,129,34,89,113,159,237,15,206,105,250,103,25,219,69,101,185,248,147,82,253,11,96,167,242,215,233,121,200,78,25,147,1,146,72,2,134,179,192,156,45,59,83,249,164,19,118,149,21,108,131,83,144,241,123,53,252,138,207,109,219,87,15,55,122,122,234,190,24,102,144,185,80,202,23,113,3,53,74,66,116,151,10,179,106,155,36,37,227,2,47,233,244,225,202,28,6,7,219,57,119,5,42,164,236,156,180,243,216,115,47,56,81,63,190,86,189,40,187,176,67,88,237,250,69,131,31,191,17,92,61,129,28,105,161,95,215,182,228,240,138,153,153,173,135,164,24,238,51,16,68,201,177,234,232,38,60,249,34,168,192,43,16,16,181,59,18,230,12,49,239,30,20,84,177,221,89,0,185,101,252,7,230,224,197,64,134,21,224,207,163,195,38,152,7,78,136,253,53,197,35,149,13,13,147,0,43,154,78,117,141,99,53,213,157,70,64,207,252,133,64,76,58,226,139,210,122,177,196,46,106,62,106,252,240,178,202,205,63,148,107,26,151,96,40,70,4,227,18,226,110,222,61,174,101,23,224,42,243,34,98,254,8,131,71,181,11,85,93,42,162,237,160,141,169,239,169,167,13,196,134,22,167,81,195,132,124,134,156,109,88,5,17,83,40,162,253,133,238,255,220,118,239,94,44,38,208,251,204,1,210,144,137,203,148,242,186,117,217,250,42,245,100,148,230,20,62,19,223,175,19,176,148,88,201,35,40,163,209,167,6,25,17,246,48,81,254,149,111,192,6,44,70,78,179,42,217,210,113,124,136,51,222,123,237,62,57,24,101,110,109,116,121,41,51,113,93,56,25,164,91,100,117,169,72,185,166,27,124,103,172,253,123,25,124,152,49,2,61,5,75,196,35,108,222,77,214,2,208,254,73,28,88,113,21,38,56,99,77,71,221,98,208,115,228,195,70,69,170,96,248,85,148,52,206,143,146,217,148,171,202,186,27,22,72,104,111,14,119,48,36,145,99,28,100,198,2,230,165,200,110,43,221,125,51,21,37,40,135,27,112,75,3,66,107,218,44,109,9,203,129,193,55,61,176,111,28,199,102,130,67,8,225,85,178,81,235,199,128,49,43,188,139,192,150,47,184,146,223,186,243,50,166,192,200,104,92,86,5,61,28,134,204,4,85,143,107,178,95,229,164,191,171,180,206,186,179,10,139,132,65,50,93,68,170,115,162,52,179,129,216,90,168,240,150,166,188,108,213,40,181,101,236,246,36,74,82,244,144,46,81,225,12,90,211,6,85,157,215,157,78,121,151,206,198,250,5,137,37,51,155,16,62,91,41,25,32,204,84,160,115,139,71,169,248,176,126,65,52,249,242,36,41,196,27,109,83,125,53,147,57,139,255,182,29,194,26,168,56,191,22,96,125,241,251,196,71,245,227,103,118,221,170,15,30,150,235,139,147,98,255,188,122,201,121,193,143,148,173,141,167,13,229,17,41,183,152,31,143,145,26,18,39,174,142,228,97,8,152,133,49,173,247,98,77,235,234,92,239,69,163,235,236,206,132,150,188,94,178,206,245,33,98,247,183,12,226,51,246,228,147,130,171,6,223,44,163,164,44,238,165,44,32,90,152,177,143,138,204,71,132,11,207,163,89,152,151,68,82,118,159,23,0,36,161,177,22,213,168,38,199,93,187,62,186,215,11,57,219,106,184,85,202,75,229,99,128,71,108,253,58,122,29,221,158,102,231,8,198,158,81,35,170,73,209,162,21,87,14,148,241,143,132,113,69,125,23,34,76,1,65,50,95,181,238,194,46,110,58,161,92,94,15,97,195,245,117,123,146,41,128,54,228,214,195,171,159,19,173,47,64,207,76,169,241,93,13,200,223,165,190,72,217,139,62,126,247,63,189,87,211,160,165,69,246,116,31,37,46,209,162,130,160,129,94,82,158,253,102,73,122,104,127,206,144,12,46,197,59,151,186,190,188,232,194,95,116,9,229,188,1,0,0,214,179,218,230,187,119,55,66,181,110,240,174,126,28,102,209,216,207,170,77,53,31,120,161,252,175,22,43,74,40,17,45,31,29,137,250,103,79,252,241,218,10,146,203,93,194,236,115,81,38,161,194,34,12,97,174,138,183,86,211,16,168,224,150,15,135,231,47,31,56,154,90,48,85,78,233,237,98,173,213,39,20,141,54,232,229,37,210,49,70,175,199,112,123,151,101,79,215,57,222,178,137,248,153,67,209,225,84,191,48,63,35,151,60,166,217,211,117,150,154,168,249,52,243,79,85,112,84,136,86,79,74,116,203,106,22,173,174,228,178,170,76,199,112,18,77,41,111,100,145,208,240,209,49,64,104,137,42,184,87,107,11,190,97,90,90,217,239,154,242,242,105,233,18,189,47,232,159,255,254,19,112,211,155,6,90,8,214,4,4,155,63,21,254,108,22,243,193,64,73,251,222,243,205,77,44,84,9,227,92,205,133,131,33,197,180,65,166,98,68,220,183,53,201,63,182,211,142,166,248,23,52,64,91,33,91,41,89,9,184,114,133,140,59,239,218,156,249,93,185,252,248,20,6,140,1,243,205,58,26,205,172,20,27,45,115,187,0,242,113,212,132,22,218,232,149,14,17,163,193,184,130,26,191,32,114,10,67,14,33,223,57,13,9,126,183,157,94,208,60,159,189,244,94,68,164,87,126,218,246,79,157,248,165,212,131,225,96,29,218,71,142,153,23,132,195,135,178,134,24,179,27,18,220,62,254,239,203,12,152,204,60,254,199,3,253,155,24,144,181,111,228,220,87,76,154,70,253,50,55,101,173,241,124,160,0,247,126,89,136,29,163,104,68,198,89,246,97,91,212,180,176,47,118,24,119,4,153,208,174,91,21,166,186,80,61,76,94,117,104,223,180,216,34,127,78,33,233,244,149,172,46,83,191,221,42,9,1,189,180,9,57,174,50,80,52,142,176,55,245,77,131,141,114,32,66,168,157,32,250,247,35,254,158,155,29,105,158,127,141,174,196,136,210,70,4,91,120,105,225,36,197,76,123,133,19,202,53,1,127,216,33,165,138,123,19,15,64,187,206,190,150,7,88,102,43,46,39,222,176,194,37,65,38,18,54,178,251,30,173,189,2,119,5,233,75,248,172,142,187,186,212,123,198,27,100,57,49,88,145,36,224,54,128,224,45,220,139,237,104,159,244,86,129,60,96,17,81,239,219,247,54,210,247,128,30,210,138,89,196,39,151,215,95,10,103,150,8,138,160,203,169,235,9,67,143,74,203,161,54,112,15,75,86,175,129,189,154,25,120,167,154,185,192,82,233,200,63,200,30,159,149,185,129,74,121,119,80,80,140,240,56,99,5,143,175,202,58,120,103,122,98,80,63,180,7,119,204,236,245,73,171,68,74,152,238,121,182,228,214,195,59,140,16,20,207,209,212,192,156,160,200,107,32,11,192,6,68,137,45,215,200,84,136,161,130,44,67,60,92,179,102,227,103,242,55,43,16,97,221,35,185,29,39,132,216,121,39,171,86,175,37,21,255,176,225,131,190,169,73,126,33,212,101,124,251,212,231,72,109,231,224,219,107,158,23,217,69,135,130,223,8,52,189,83,221,154,106,234,34,10,32,34,86,28,20,110,227,238,80,183,140,27,93,128,127,55,232,88,159,165,199,229,175,60,194,177,79,106,153,127,226,208,240,117,7,251,125,134,211,26,137,136,110,222,115,230,208,37,108,184,175,158,235,58,18,149,184,69,193,213,213,241,48,231,105,114,238,45,74,67,187,56,250,49,249,236,103,203,120,156,191,59,50,114,3,59,243,116,156,39,251,54,99,214,82,170,78,251,10,172,51,95,80,135,225,204,162,153,205,165,232,187,48,45,30,128,116,73,83,144,109,135,213,17,87,45,141,142,3,188,145,40,65,26,31,72,102,229,130,29,231,226,214,183,50,119,73,58,108,3,116,171,245,97,99,217,126,182,137,162,2,234,241,216,149,237,255,61,212,100,20,214,59,43,231,32,72,220,11,23,15,48,166,122,167,120,237,96,135,193,235], "i8", ALLOC_NONE, 424860);
allocate([0,4,1,1,0,0,0,0,0,0,1,0,4,4,1,1,4,0,1,1,4,4,1,0,4,0,0,0,0,0,1,0,0,4,0,0,0,4,1,1,4,4,1,1,0,4,0,0,4,4,0,1,4,0,1,1,0,0,0,1,4,0,0,0,4,4,0,0,0,4,0,1,0,4,0,1,0,4,1,0,0,4,1,0,0,0,1,1,0,0,1,1,4,4,0,1,4,0,1,0,4,0,0,1,4,0,0,1,4,0,1,0,0,0,0,0,4,4,0,0,4,4,1,0,0,0,0,1,0,0,1,0,4,4,1,1,4,0,0,0,0,0,1,1,0,4,1,1,0,0,0,1,0,0,0,1,0,4,0,0,4,0,1,1,0,0,1,0,0,4,1,0,4,0,0,1,0,4,0,0,4,0,0,0,4,4,0,1,4,4,1,0,4,4,1,1,4,0,1,0,0,0,1,1,4,4,0,1,4,0,0,1,4,4,0,0,4,4,1,0,0,4,1,1,4,4,0,0,0,4,0,1,0,4,0,1,0,0,0,0,4,0,1,0,0,4,1,0,0,0,0,0,4,0,1,1], "i8", ALLOC_NONE, 426908);
allocate([40,112,114,105,118,97,116,101,45,107,101,121,32,40,100,115,97,32,32,40,112,32,35,48,48,65,68,55,67,48,48,50,53,66,65,49,65,49,53,70,55,55,53,70,51,70,50,68,54,55,51,55,49,56,51,57,49,68,48,48,52,53,54,57,55,56,68,51,52,55,66,51,51,68,55,66,52,57,69,55,70,51,50,69,68,65,66,32,32,32,32,32,32,57,54,50,55,51,56,57,57,68,68,56,66,50,66,66,52,54,67,68,54,69,67,65,50,54,51,70,65,70,48,52,65,50,56,57,48,51,53,48,51,68,53,57,48,54,50,65,56,56,54,53,68,50,65,69,56,65,68,70,66,53,49,57,49,32,32,32,32,32,32,67,70,51,54,70,70,66,53,54,50,68,48,69,50,70,53,56,48,57,56,48,49,65,49,70,54,55,53,68,65,69,53,57,54,57,56,65,57,69,48,49,69,70,69,56,68,55,68,67,70,67,65,48,56,52,70,52,67,54,70,53,65,52,52,32,32,32,32,32,32,52,52,68,52,57,57,65,48,54,70,70,65,69,65,53,69,56,69,70,53,69,48,49,70,50,70,68,50,48,65,55,66,55,69,70,51,70,54,57,54,56,65,70,66,65,49,70,66,56,68,57,49,70,49,53,53,57,68,53,50,68,56,55,55,55,66,35,41,32,32,40,113,32,35,48,48,69,66,55,66,53,55,53,49,68,50,53,69,66,66,66,55,66,68,53,57,68,57,50,48,51,49,53,70,68,56,52,48,69,49,57,65,69,66,70,57,35,41,32,32,40,103,32,35,49,53,55,52,51,54,51,51,56,55,70,68,70,68,49,68,68,70,51,56,70,52,70,66,69,49,51,53,66,66,50,48,67,55,69,69,52,55,55,50,70,66,57,52,67,51,51,55,65,70,56,54,69,65,56,69,52,57,54,54,54,53,48,51,32,32,32,32,32,32,65,69,48,52,66,54,66,69,56,49,65,50,70,56,68,68,48,57,53,51,49,49,69,48,50,49,55,65,67,65,54,57,56,65,49,49,69,54,67,53,68,51,51,67,67,68,65,69,55,49,52,57,56,69,68,51,53,68,49,51,57,57,49,69,32,32,32,32,32,32,66,48,50,70,48,57,65,66,52,48,66,68,56,70,52,67,53,69,68,56,67,55,53,68,65,55,55,57,68,48,65,69,49,48,52,66,67,51,52,67,57,54,48,66,48,48,50,51,55,55,48,54,56,65,66,52,66,53,65,49,70,57,56,52,32,32,32,32,32,32,51,70,66,65,57,49,70,53,51,55,70,49,66,55,67,65,67,52,68,56,68,68,54,68,56,57,66,48,68,56,54,51,65,70,55,48,50,53,68,53,52,57,70,57,67,55,54,53,68,50,70,67,48,55,69,69,50,48,56,70,56,68,49,53,35,41,32,32,40,121,32,35,54,52,66,49,49,69,70,56,56,55,49,66,69,52,65,66,53,55,50,65,65,56,49,48,68,53,68,51,67,65,49,49,65,54,67,68,66,67,54,51,55,65,56,48,49,52,54,48,50,67,55,50,57,54,48,68,66,49,51,53,66,70,52,54,32,32,32,32,32,32,65,49,56,49,54,65,55,50,52,67,51,52,70,56,55,51,51,48,70,67,57,69,49,56,55,67,53,68,54,54,56,57,55,65,48,52,53,51,53,67,67,50,65,67,57,49,54,52,65,55,49,53,48,65,66,70,65,56,49,55,57,56,50,55,32,32,32,32,32,32,54,69,52,53,56,51,49,65,66,56,49,49,69,69,69,56,52,56,69,66,66,50,52,68,57,70,53,70,50,56,56,51,66,54,69,53,68,68,67,52,67,54,53,57,68,69,70,57,52,52,68,67,70,68,56,48,66,70,52,68,48,65,50,48,32,32,32,32,32,32,52,50,67,65,65,55,68,67,50,56,57,70,48,67,53,65,57,68,49,53,53,70,48,50,68,51,68,53,53,49,68,66,55,52,49,65,56,49,54,57,53,66,55,52,68,52,67,56,70,52,55,55,70,57,67,55,56,51,56,69,66,48,70,66,35,41,32,32,40,120,32,35,49,49,68,53,52,69,52,65,68,66,68,51,48,51,52,49,54,48,70,50,67,69,68,52,66,55,67,68,50,57,50,65,52,69,66,70,51,69,67,48,35,41,41,41,0] /* (private-key (dsa  ( */, "i8", ALLOC_NONE, 427164);
allocate([40,112,114,105,118,97,116,101,45,107,101,121,32,40,114,115,97,32,32,40,110,32,35,48,48,101,48,99,101,57,54,102,57,48,98,54,99,57,101,48,50,102,51,57,50,50,98,101,97,100,97,57,51,102,101,53,48,97,56,55,53,101,97,99,54,98,99,99,49,56,98,98,57,97,57,99,102,50,101,56,52,57,54,53,99,97,97,32,32,32,32,32,32,50,100,49,102,102,57,53,97,55,102,53,52,50,52,54,53,99,54,99,48,99,49,57,100,50,55,54,101,52,53,50,54,99,101,48,52,56,56,54,56,97,55,97,57,49,52,102,100,51,52,51,99,99,51,97,56,55,100,100,55,52,50,57,49,32,32,32,32,32,32,102,102,99,53,54,53,53,48,54,100,53,98,98,98,50,53,99,98,97,99,54,97,48,101,50,100,100,49,102,56,98,99,97,97,98,48,100,52,97,50,57,99,50,102,51,55,99,57,53,48,102,51,54,51,52,56,52,98,102,50,54,57,102,55,32,32,32,32,32,32,56,57,49,52,52,48,52,54,52,98,97,102,55,57,56,50,55,101,48,51,97,51,54,101,55,48,98,56,49,52,57,51,56,101,101,98,100,99,54,51,101,57,54,52,50,52,55,98,101,55,53,100,99,53,56,98,48,49,52,98,55,101,97,50,53,49,35,41,32,32,40,101,32,35,48,49,48,48,48,49,35,41,32,32,40,100,32,35,48,52,54,49,50,57,102,50,52,56,57,100,55,49,53,55,57,98,101,48,97,55,53,102,101,48,50,57,98,100,54,99,100,98,53,55,52,101,98,102,53,55,101,97,56,97,53,98,48,102,100,97,57,52,50,99,97,98,57,52,51,98,49,49,32,32,32,32,32,32,55,100,55,98,98,57,53,101,53,100,50,56,56,55,53,101,48,102,57,102,99,53,102,99,99,48,54,97,55,50,102,54,100,53,48,50,52,54,52,100,97,98,100,101,100,55,56,101,102,54,98,55,49,54,49,55,55,98,56,51,100,53,98,100,32,32,32,32,32,32,99,53,52,51,100,99,53,100,51,102,101,100,57,51,50,101,53,57,102,53,56,57,55,101,57,50,101,54,102,53,56,97,48,102,51,51,52,50,52,49,48,54,97,51,98,54,102,97,50,99,98,102,56,55,55,53,49,48,101,52,97,99,50,49,32,32,32,32,32,32,99,51,101,101,52,55,56,53,49,101,57,55,100,49,50,57,57,54,50,50,50,97,99,51,53,54,54,100,52,99,99,98,48,98,56,51,100,49,54,52,48,55,52,97,98,102,55,100,101,54,53,53,102,99,50,52,52,54,100,97,49,55,56,49,35,41,32,32,40,112,32,35,48,48,101,56,54,49,98,55,48,48,101,49,55,101,56,97,102,101,54,56,51,55,101,55,53,49,50,101,51,53,98,54,99,97,49,49,100,48,97,101,52,55,100,56,98,56,53,49,54,49,99,54,55,98,97,102,54,52,51,55,55,50,49,51,32,32,32,32,32,32,102,101,53,50,100,55,55,50,102,50,48,51,53,98,51,99,97,56,51,48,97,102,52,49,100,56,97,52,49,50,48,101,49,99,49,99,55,48,100,49,50,99,99,50,50,102,48,48,100,50,56,100,51,49,100,100,52,56,97,56,100,52,50,52,102,49,35,41,32,32,40,113,32,35,48,48,102,55,97,55,99,97,53,51,54,55,99,54,54,49,102,56,101,54,50,100,102,51,52,102,48,100,48,53,99,49,48,99,56,56,101,53,52,57,50,51,52,56,100,100,55,98,100,100,99,57,52,50,99,57,97,56,102,51,54,57,102,57,32,32,32,32,32,32,51,53,97,48,55,55,56,53,100,50,100,98,56,48,53,50,49,53,101,100,55,56,54,101,52,50,56,53,100,102,49,54,53,56,101,101,100,51,99,101,56,52,102,52,54,57,98,56,49,98,53,48,100,51,53,56,52,48,55,98,52,97,100,51,54,49,35,41,32,32,40,117,32,35,51,48,52,53,53,57,97,57,101,97,100,53,54,100,50,51,48,57,100,50,48,51,56,49,49,97,54,52,49,98,98,49,97,48,57,54,50,54,98,99,56,101,98,51,54,102,102,102,97,50,51,99,57,54,56,101,99,53,98,100,56,57,49,101,32,32,32,32,32,32,101,98,98,97,102,99,55,51,97,101,54,54,54,101,48,49,98,97,55,99,56,57,57,48,98,97,101,48,54,99,99,50,98,98,101,49,48,98,55,53,101,54,57,102,99,97,99,98,51,53,51,97,54,52,55,51,48,55,57,100,56,101,57,98,35,41,41,41,0] /* (private-key (rsa  ( */, "i8", ALLOC_NONE, 428132);
allocate([40,112,117,98,108,105,99,45,107,101,121,32,40,100,115,97,32,32,40,112,32,35,48,48,65,68,55,67,48,48,50,53,66,65,49,65,49,53,70,55,55,53,70,51,70,50,68,54,55,51,55,49,56,51,57,49,68,48,48,52,53,54,57,55,56,68,51,52,55,66,51,51,68,55,66,52,57,69,55,70,51,50,69,68,65,66,32,32,32,32,32,32,57,54,50,55,51,56,57,57,68,68,56,66,50,66,66,52,54,67,68,54,69,67,65,50,54,51,70,65,70,48,52,65,50,56,57,48,51,53,48,51,68,53,57,48,54,50,65,56,56,54,53,68,50,65,69,56,65,68,70,66,53,49,57,49,32,32,32,32,32,32,67,70,51,54,70,70,66,53,54,50,68,48,69,50,70,53,56,48,57,56,48,49,65,49,70,54,55,53,68,65,69,53,57,54,57,56,65,57,69,48,49,69,70,69,56,68,55,68,67,70,67,65,48,56,52,70,52,67,54,70,53,65,52,52,32,32,32,32,32,32,52,52,68,52,57,57,65,48,54,70,70,65,69,65,53,69,56,69,70,53,69,48,49,70,50,70,68,50,48,65,55,66,55,69,70,51,70,54,57,54,56,65,70,66,65,49,70,66,56,68,57,49,70,49,53,53,57,68,53,50,68,56,55,55,55,66,35,41,32,32,40,113,32,35,48,48,69,66,55,66,53,55,53,49,68,50,53,69,66,66,66,55,66,68,53,57,68,57,50,48,51,49,53,70,68,56,52,48,69,49,57,65,69,66,70,57,35,41,32,32,40,103,32,35,49,53,55,52,51,54,51,51,56,55,70,68,70,68,49,68,68,70,51,56,70,52,70,66,69,49,51,53,66,66,50,48,67,55,69,69,52,55,55,50,70,66,57,52,67,51,51,55,65,70,56,54,69,65,56,69,52,57,54,54,54,53,48,51,32,32,32,32,32,32,65,69,48,52,66,54,66,69,56,49,65,50,70,56,68,68,48,57,53,51,49,49,69,48,50,49,55,65,67,65,54,57,56,65,49,49,69,54,67,53,68,51,51,67,67,68,65,69,55,49,52,57,56,69,68,51,53,68,49,51,57,57,49,69,32,32,32,32,32,32,66,48,50,70,48,57,65,66,52,48,66,68,56,70,52,67,53,69,68,56,67,55,53,68,65,55,55,57,68,48,65,69,49,48,52,66,67,51,52,67,57,54,48,66,48,48,50,51,55,55,48,54,56,65,66,52,66,53,65,49,70,57,56,52,32,32,32,32,32,32,51,70,66,65,57,49,70,53,51,55,70,49,66,55,67,65,67,52,68,56,68,68,54,68,56,57,66,48,68,56,54,51,65,70,55,48,50,53,68,53,52,57,70,57,67,55,54,53,68,50,70,67,48,55,69,69,50,48,56,70,56,68,49,53,35,41,32,32,40,121,32,35,54,52,66,49,49,69,70,56,56,55,49,66,69,52,65,66,53,55,50,65,65,56,49,48,68,53,68,51,67,65,49,49,65,54,67,68,66,67,54,51,55,65,56,48,49,52,54,48,50,67,55,50,57,54,48,68,66,49,51,53,66,70,52,54,32,32,32,32,32,32,65,49,56,49,54,65,55,50,52,67,51,52,70,56,55,51,51,48,70,67,57,69,49,56,55,67,53,68,54,54,56,57,55,65,48,52,53,51,53,67,67,50,65,67,57,49,54,52,65,55,49,53,48,65,66,70,65,56,49,55,57,56,50,55,32,32,32,32,32,32,54,69,52,53,56,51,49,65,66,56,49,49,69,69,69,56,52,56,69,66,66,50,52,68,57,70,53,70,50,56,56,51,66,54,69,53,68,68,67,52,67,54,53,57,68,69,70,57,52,52,68,67,70,68,56,48,66,70,52,68,48,65,50,48,32,32,32,32,32,32,52,50,67,65,65,55,68,67,50,56,57,70,48,67,53,65,57,68,49,53,53,70,48,50,68,51,68,53,53,49,68,66,55,52,49,65,56,49,54,57,53,66,55,52,68,52,67,56,70,52,55,55,70,57,67,55,56,51,56,69,66,48,70,66,35,41,41,41,0] /* (public-key (dsa  (p */, "i8", ALLOC_NONE, 429164);
allocate([40,112,117,98,108,105,99,45,107,101,121,32,40,114,115,97,32,32,40,110,32,35,48,48,101,48,99,101,57,54,102,57,48,98,54,99,57,101,48,50,102,51,57,50,50,98,101,97,100,97,57,51,102,101,53,48,97,56,55,53,101,97,99,54,98,99,99,49,56,98,98,57,97,57,99,102,50,101,56,52,57,54,53,99,97,97,32,32,32,32,32,32,50,100,49,102,102,57,53,97,55,102,53,52,50,52,54,53,99,54,99,48,99,49,57,100,50,55,54,101,52,53,50,54,99,101,48,52,56,56,54,56,97,55,97,57,49,52,102,100,51,52,51,99,99,51,97,56,55,100,100,55,52,50,57,49,32,32,32,32,32,32,102,102,99,53,54,53,53,48,54,100,53,98,98,98,50,53,99,98,97,99,54,97,48,101,50,100,100,49,102,56,98,99,97,97,98,48,100,52,97,50,57,99,50,102,51,55,99,57,53,48,102,51,54,51,52,56,52,98,102,50,54,57,102,55,32,32,32,32,32,32,56,57,49,52,52,48,52,54,52,98,97,102,55,57,56,50,55,101,48,51,97,51,54,101,55,48,98,56,49,52,57,51,56,101,101,98,100,99,54,51,101,57,54,52,50,52,55,98,101,55,53,100,99,53,56,98,48,49,52,98,55,101,97,50,53,49,35,41,32,32,40,101,32,35,48,49,48,48,48,49,35,41,41,41,0] /* (public-key (rsa  (n */, "i8", ALLOC_NONE, 430084);
allocate([13,48,22,226,252,255,221,187,189,218,235,167,149,128,100,53,183,248,137,119,27,18,193,230,0,22,36,14,181,232,44,5,176,207,169,17,17,47,149,229,10,153,231,236,116,209,134,147,28,147,66,42,17,129,227,118,58,239,45,177,252,221,221,55,177,222,154,222,44,195,12,10,41,112,25,190,64,9,160,132,15,58,36,187,207,55,209,180,240,121,78,180,253,237,158,4,93,161,21,11,104,49,13,72,90,222,187,139,66,237,157,102,49,232,236,199,231,149,143,63,27,25,223,114,13,51,128,117,81,66,7,148,250,205,125,92,99,109,190,171,100,33,64,170,10,212,1,179,202,209,231,2,174,29,87,83,162,130,49,122,236,221,168,18,93,51,170,253,232,67,111,23,212,70,251,113,34,144,18,56,212,154,148,206,173,105,71,184,98,216,91,150,85,208,243,130,103,151,251,102,78,11,184,21,160,71,91,29,111,224,253,76,184,196,142,194,110,114,232,87,252,120,122,100,68,93,134,153,147,213,139,96,3,14,32,108,246,95,220,57,163,0,11,93,242,175,99,174,50,214,139,126,12,140,16,112,73,80,211,187,4,223,152,41,42,244,12,152,145,244,109,155,83,221,126,158,72,133,145,6,7,126,203,88,46,239,116,59,177,255,47,82,204,8,71,210,205,39,126,28,91,33,235,164,226,210,241,60,56,122,180,25,24,118,79,66,57,96,133,53,231,222,23,157,230,53,235,39,123,246,175,201,184,245,186,54,205,103,196,9,177,16,137,193,123,191,29,225,248,26,205,6,8,198,112,113,84,51,94,45,90,73,222,212,6,208,198,100,44,198,192,188,179,13,208,61,52,143,143,112,66,27,213,119,15,98,79,38,191,210,184,36,158,183,193,21,100,37,165,70,78,229,215,248,96,129,55,62,165,205,149,120,165,21,156,133,136,151,69,230,95,199,123,195,12,186,7,219,171,163,118,6,30,155,34,127,123,46,132,49,215,159,37,36,114,244,190,248,184,252,95,131,242,193,244,109,149,177,245,150,252,240,10,253,76,19,254,176,61,109,80,226,234,18,155,79,37,242,21,242,111,115,35,162,40,196,180,159,121,73,208,37,248,19,199,52,135,129,97,196,152,110,122,234,252,110,209,124,108,135,54,20,7,65,84,241,20,238,222,190,39,175,233,86,65,164,74,160,153,200,247,60,230,186,236,146,109,1,103,221,235,130,22,21,223,238,66,168,180,96,186,253,117,123,144,241,15,3,227,32,158,194,216,36,59,103,57,225,184,63,166,239,84,48,135,113,59,207,242,182,66,100,50,159,204,164,21,203,4,69,26,176,141,125,228,241,229,27,74,132,220,223,231,186,112,218,203,66,10,174,125,205,122,91,232,87,246,90,63,213,140,77,207,32,40,212,164,206,164,48,209,121,251,235,134,52,220,205,211,51,83,59,133,119,181,252,239,55,120,135,6,197,230,179,128,229,244,184,104,78,126,179,200,197,162,158,128,13,124,235,143,57,148,79,42,19,14,149,183,67,28,125,238,47,189,19,54,34,162,202,6,221,43,147,223,55,137,130,36,196,195,235,243,172,183,246,21,87,221,120,52,239,111,97,103,242,228,203,72,193,94,129,82,144,171,15,65,94,101,36,138,180,164,127,218,46,228,64,123,232,132,160,142,233,225,233,137,88,252,144,211,239,91,211,7,221,148,86,72,219,178,229,215,56,1,1,114,87,188,222,14,115,19,49,100,91,79,126,145,148,186,47,60,80,130,18,111,100,74,210,35,117,149,150,119,224,143,122,193,249,33,33,91,122,150,184,135,209,77,58,38,41,223,12,81,186,159,124,244,129,237,99,17,173,101,89,123,234,110,114,0,26,146,48,64,17,119,109,218,0,97,221,12,74,3,70,31,173,176,223,91,96,100,195,237,158,168,230,235,34,138,210,231,206,160,54,231,160,185,166,100,85,9,50,133,16,55,143,235,199,202,5,231,45,15,87,81,137,43,130,9,223,108,26,105,189,242,228,18,170,15,28,69,135,122,162,246,224,25,72,218,58,79,118,241,76,43,28,119,13,86,177,205,103,132,131,13,53,15,250,56,89,243,158,57,66,7,123,153,54,61,9,132,14,97,62,169,74,123,216,96,131,12,139,169,31,44,56,73,17,165,37,118,233,183,209,20,6,75,36,37,14,71,131,118,12,130,141,158,88,209,89,32,13,30,187,102,164,130,10,218,248,48,145,241,4,192,78,110,186,100,81,38,153,13,35,231,30,128,173,178,80,1,104,238,234,131,162,178,141,158,245,139,234], "i8", ALLOC_NONE, 430404);
allocate([25,64,224,133,103,245,43,51,255,191,45,102,147,86,198,207,111,127,141,42,18,201,155,171,161,8,96,222,31,218,40,32,231,188,39,2,22,41,100,77,0,195,250,24,130,139,241,80,17,203,178,44,92,231,50,178,242,149,54,75,222,7,135,178,246,188,95,160,233,129,65,205,12,33,80,225,189,241,78,226,129,195,104,177,137,231,228,253,216,176,121,92,67,253,139,30,1,80,73,77,65,67,190,56,29,238,60,145,63,156,167,146,190,102,151,8,244,173,238,186,207,190,134,18,25,203,234,182,0,194,96,38,228,189,101,117,122,31,36,100,169,220,72,130,102,173,179,195,134,96,19,40,168,223,216,11,242,28,109,53,190,137,119,16,206,233,178,179,143,170,2,5,30,53,192,11,42,245,107,22,130,255,18,235,17,105,72,227,22,117,77,211,255,58,123,78,27,103,67,95,55,224,246,156,131,172,129,73,206,102,66,51,183,65,147,140,192,84,216,208,136,108,58,203,41,40,188,71,55,186,37,71,43,210,106,166,30,31,214,122,250,186,92,12,7,241,55,68,98,153,231,182,22,216,210,66,136,18,150,10,110,192,165,225,103,158,116,19,26,8,252,114,247,57,209,177,69,55,88,249,88,223,25,207,86,247,195,190,48,186,110,192,36,27,33,7,41,136,194,69,127,49,94,201,17,197,142,188,233,70,188,56,20,250,230,198,74,88,232,186,70,188,78,173,139,80,143,70,95,67,41,120,59,24,36,241,159,186,29,130,244,15,246,175,109,78,44,234,100,146,227,22,139,74,84,146,195,79,155,0,237,140,166,171,120,111,201,154,154,183,165,6,110,110,133,178,169,60,236,26,136,134,131,190,233,4,8,14,86,190,241,85,59,54,229,231,93,242,161,179,133,187,222,247,60,3,254,97,51,98,116,22,40,76,3,60,116,12,109,218,108,197,170,121,173,225,228,60,2,200,240,81,90,243,248,152,159,164,38,22,41,43,216,238,227,47,56,29,154,185,79,12,120,87,50,187,123,217,198,62,169,166,119,110,92,139,101,203,199,48,82,212,139,64,209,43,183,62,192,96,120,141,6,185,244,84,55,163,125,200,48,244,2,19,167,200,50,140,109,185,190,231,212,235,45,157,139,190,6,251,121,121,8,83,34,231,119,207,117,139,164,141,239,17,88,200,131,224,111,120,107,141,166,23,99,90,160,247,92,250,51,0,218,93,176,191,142,242,16,195,185,245,128,194,234,160,122,118,185,8,176,210,217,163,23,66,211,121,141,113,26,2,106,51,198,154,96,253,17,39,227,80,128,67,168,8,153,6,196,237,127,61,239,43,109,130,118,132,235,78,37,207,141,72,102,213,201,54,65,78,231,40,202,10,97,194,207,169,73,61,223,185,227,186,230,141,95,182,100,175,174,146,230,213,199,58,9,5,168,158,125,1,43,242,112,63,23,164,195,22,30,221,249,215,224,21,135,184,177,80,213,79,159,43,130,186,90,98,98,121,1,106,156,27,192,46,169,138,72,21,64,231,22,215,44,90,5,64,34,154,210,147,154,191,45,227,185,69,135,5,30,220,83,52,110,41,153,214,111,255,108,73,134,73,159,28,7,237,226,223,209,66,114,184,174,126,222,25,26,86,62,5,140,111,173,21,28,108,98,102,76,194,84,113,42,43,8,234,57,41,235,147,240,176,220,23,174,242,212,88,251,148,162,158,76,86,207,82,102,254,131,152,129,5,196,46,195,83,57,118,46,105,214,1,8,193,160,211,14,22,231,161,166,223,242,228,133,210,62,105,152,70,144,116,221,14,43,76,86,118,117,79,120,51,57,93,79,35,50,161,93,28,50,61,148,225,245,195,1,147,38,75,47,2,159,199,126,126,153,60,4,149,79,94,189,251,250,63,14,173,247,118,244,147,102,41,111,206,31,61,190,69,30,198,52,171,181,211,183,249,43,247,192,52,4,27,103,181,114,78,61,163,146,85,1,147,34,181,127,168,210,207,103,183,174,96,107,56,20,24,61,195,188,48,125,192,160,56,242,6,22,253,155,81,99,195,144,211,157,88,230,248,121,84,71,214,184,28,169,97,253,151,244,89,119,234,157,83,87,45,207,88,154,86,173,99,78,232,120,27,46,70,126,248,128,101,20,121,129,243,244,85,218,145,243,48,162,64,53,143,152,209,210,24,227,182,188,80,250,63,33,240,64,61,174,189,192,195,76,194,88,73,178,54,143,81,112,211,177,132,131,206,237,15,218,218,141,135,199,121,162,242,232,27,224,148,75,111,113,144,163,138,75,149], "i8", ALLOC_NONE, 431428);
allocate([157,143,250,246,225,108,172,44,103,72,163,76,124,127,51,226,231,8,219,149,180,67,104,1,188,92,237,236,172,83,85,50,96,9,159,191,237,226,161,223,157,87,240,131,185,134,237,99,184,166,182,26,57,190,94,222,50,247,143,243,56,177,137,137,97,73,241,51,189,55,25,192,218,198,6,245,126,94,98,228,153,234,8,163,60,227,35,78,204,215,203,121,103,67,161,72,25,150,20,163,213,75,201,254,74,23,20,161,102,24,160,234,45,219,132,160,111,72,168,9,74,97,136,168,152,175,0,41,145,89,102,1,99,40,153,225,96,12,243,200,60,239,120,46,50,25,213,208,20,236,15,207,210,7,202,247,114,32,168,208,126,25,65,253,176,166,5,147,218,227,107,232,205,211,190,116,60,165,45,55,72,68,127,76,64,212,181,218,195,14,186,109,167,25,57,8,217,238,186,159,176,207,219,73,83,12,103,78,1,156,61,92,65,185,189,100,106,99,14,44,205,217,125,186,136,115,111,234,98,199,11,231,219,154,242,53,141,221,76,92,140,141,212,240,226,83,129,184,102,152,161,8,200,234,226,26,137,175,76,40,35,130,146,170,83,190,52,147,191,33,58,59,227,75,67,22,6,57,234,154,110,195,232,239,217,205,144,248,174,109,34,128,163,164,64,195,9,156,126,223,7,168,148,166,204,94,124,91,166,179,29,34,47,160,105,154,84,138,129,104,111,41,178,206,58,132,192,83,85,54,137,254,138,230,191,37,188,138,98,180,191,46,34,207,72,111,172,37,135,147,169,169,101,219,189,83,231,251,111,231,120,253,103,233,99,53,169,11,193,43,52,142,233,27,161,232,13,116,128,73,252,125,8,200,153,191,228,141,160,1,17,161,117,121,211,127,192,38,90,218,79,153,31,232,137,205,40,149,237,159,51,253,191,52,120,184,109,69,4,95,152,134,37,34,59,200,196,201,190,86,193,45,170,141,98,79,197,94,245,87,190,10,34,226,191,110,145,210,149,91,199,78,192,195,242,36,153,93,209,66,160,127,13,205,255,39,110,123,240,138,220,168,6,193,69,115,47,35,30,244,134,35,22,53,38,137,234,230,148,176,51,51,242,198,126,21,175,116,43,55,228,115,37,105,72,216,169,233,137,2,22,243,29,239,98,58,56,226,135,167,118,246,165,243,83,72,54,116,99,16,149,32,141,105,118,69,7,212,250,182,80,249,42,89,35,53,247,54,135,110,251,76,192,206,164,125,170,45,21,108,168,150,3,203,93,254,13,197,171,7,215,252,47,196,33,9,187,240,223,137,120,190,226,95,51,79,143,68,201,19,70,117,141,208,5,43,133,213,185,72,65,148,4,220,155,143,9,200,134,231,237,125,115,51,154,195,5,0,65,66,81,23,9,106,166,200,243,14,214,114,0,137,130,118,32,40,190,247,169,169,157,103,50,191,117,91,91,212,0,253,83,179,88,227,176,203,10,34,15,131,20,178,143,31,8,207,114,211,19,74,60,204,102,49,246,140,190,135,28,6,136,143,201,136,151,227,98,96,122,142,207,71,131,82,200,182,251,172,194,60,118,105,192,63,82,2,143,78,77,49,216,100,227,112,56,218,89,84,102,30,240,8,9,193,165,33,48,81,183,104,91,108,160,138,47,130,62,205,7,48,239,158,113,116,129,38,135,220,212,64,51,7,217,47,67,126,65,194,94,12,108,40,9,136,145,216,146,245,246,48,169,8,5,243,126,149,189,255,251,183,111,233,102,194,152,172,228,111,192,236,115,177,42,180,96,188,218,152,52,149,18,174,161,251,54,215,75,45,171,250,37,15,235,252,243,164,35,145,150,226,61,12,127,37,73,175,72,147,188,0,20,54,74,111,129,232,0,242,20,56,67,64,249,163,194,84,122,156,87,79,112,188,249,231,65,218,58,211,90,194,132,160,244,84,5,85,127,177,190,124,53,89,200,21,189,237,171,197,151,127,181,199,90,186,175,222,246,182,58,156,71,58,37,218,2,83,106,126,61,101,73,141,38,84,234,119,164,81,91,213,23,80,136,93,210,215,118,108,19,68,200,168,4,4,33,161,229,184,138,146,26,184,105,88,237,96,150,91,197,151,27,153,236,234,19,89,147,41,241,183,253,1,250,141,142,8,245,246,182,154,159,191,76,59,171,227,93,74,53,29,5,230,85,216,225,160,241,76,107,211,235,237,68,245,36,53,233,176,189,143,187,190,207,98,215,162,84,47,201,73,49,243,181,56,84,164,40,113,5,41,57,72,184,29,91,166,189,151,28,133,47,207,117,214], "i8", ALLOC_NONE, 432452);
allocate([4,12,201,126,185,116,110,44,223,102,14,155,17,121,51,166,255,127,106,184,245,88,211,29,68,157,221,68,127,22,49,23,250,241,251,8,204,17,245,231,0,27,5,210,0,186,90,115,216,34,183,42,203,129,99,56,58,36,246,172,122,253,190,105,127,231,162,230,205,32,199,240,22,72,73,196,128,193,245,204,64,22,133,56,72,168,176,21,203,24,139,230,255,222,170,76,1,10,72,95,170,178,18,4,252,20,152,37,226,239,208,65,141,180,64,78,251,182,142,36,254,28,186,141,2,155,169,65,4,10,85,26,203,101,143,186,231,244,81,114,37,23,165,149,215,236,6,193,10,152,165,151,170,185,57,197,106,254,121,77,99,247,243,242,64,128,175,104,86,158,12,237,139,149,180,17,136,90,235,225,176,230,9,135,86,113,224,215,167,254,41,78,45,229,102,99,0,192,209,2,5,142,172,196,113,245,119,147,42,55,5,12,242,53,133,87,2,190,97,34,201,160,66,214,128,162,19,223,210,91,181,116,192,153,33,104,236,229,33,212,232,60,251,83,179,237,173,200,201,127,168,40,129,153,149,61,0,249,31,92,153,211,56,254,11,255,78,12,234,7,36,6,177,79,47,170,118,105,185,79,5,149,199,144,116,167,168,176,255,161,85,239,194,162,156,229,39,45,182,166,99,66,106,230,31,0,101,223,102,9,197,14,188,85,221,223,85,6,222,41,154,115,30,145,117,137,175,23,28,145,199,50,104,148,248,137,128,233,1,13,244,85,71,82,201,60,182,3,178,68,200,12,170,240,243,188,233,54,172,135,38,116,58,229,43,216,179,1,73,116,158,26,126,45,238,100,218,177,219,205,16,73,201,1,128,191,104,184,253,243,38,13,231,237,66,147,132,194,165,4,182,55,103,99,22,182,245,80,227,102,71,242,193,54,202,142,219,5,110,19,145,131,241,254,55,122,136,251,212,247,231,214,201,125,251,199,223,252,99,48,222,137,245,182,218,65,41,236,149,102,228,38,25,100,86,183,197,239,84,246,183,88,141,208,1,84,146,72,127,203,186,193,15,85,255,229,73,48,8,182,232,208,181,91,90,46,215,135,225,110,106,171,206,102,58,34,205,243,43,198,249,133,8,158,71,62,203,104,15,1,108,8,32,232,29,162,222,105,139,209,119,87,246,243,246,195,2,250,195,218,126,64,80,213,179,203,77,8,147,23,186,14,215,176,213,120,179,10,12,251,81,217,86,218,215,222,228,187,36,65,86,11,202,148,209,85,87,15,110,229,225,224,190,181,132,97,159,36,10,88,192,75,247,148,142,136,39,227,97,85,123,159,128,2,220,195,21,119,104,5,215,107,108,100,179,77,144,68,163,240,180,102,138,100,241,192,175,213,126,105,246,47,233,73,79,55,158,48,106,53,182,44,115,133,128,133,64,248,145,73,2,174,240,118,77,232,59,8,154,28,66,40,6,148,72,68,184,76,110,115,16,41,9,193,198,95,201,139,244,156,134,125,111,97,79,19,141,17,119,46,225,43,27,179,114,180,144,170,23,215,165,60,186,27,22,125,16,144,173,156,162,43,70,175,210,89,228,159,89,69,211,69,19,218,242,217,135,84,198,219,78,249,228,243,111,72,109,23,234,19,124,9,199,165,29,99,130,115,95,68,244,131,86,23,151,106,198,205,136,2,190,112,114,207,205,179,243,210,93,110,121,96,147,32,165,128,155,69,219,226,96,190,1,49,194,169,92,49,165,235,242,66,78,34,114,21,92,28,44,27,114,246,243,255,210,26,78,64,37,140,47,215,78,50,253,183,103,64,142,19,35,5,120,188,163,92,110,214,15,220,131,34,146,117,23,107,77,120,110,177,235,88,133,79,9,68,135,29,72,63,123,174,254,252,118,255,181,119,191,2,35,140,86,117,244,170,42,176,70,95,1,40,9,43,247,245,56,61,54,31,168,12,138,74,175,82,192,231,213,102,116,8,59,223,16,81,5,149,168,215,90,27,173,213,30,246,121,228,246,108,132,129,117,32,101,250,206,208,88,190,247,136,38,104,4,74,243,248,246,15,112,127,156,160,160,171,70,83,40,108,233,92,163,237,118,225,127,48,172,107,210,41,104,55,169,15,54,133,42,254,227,23,103,151,183,36,32,107,169,245,149,37,205,214,191,30,255,104,44,68,85,117,190,6,159,241,154,101,224,249,29,73,185,238,24,7,1,52,184,202,48,187,21,254,34,232,131,9,87,136,73,98,14,117,85,126,98,218,168,255,118,94,70,69,83,177,8,222,71,109,212,231,233,239], "i8", ALLOC_NONE, 433476);
allocate([32,4,179,157,222,233,182,31,239,123,190,167,152,162,115,210,219,123,79,74,87,140,173,100,67,4,81,133,209,14,2,250,255,122,40,126,99,182,15,230,161,53,95,9,32,241,235,121,67,157,5,253,177,183,151,100,99,31,100,243,223,74,30,36,95,127,20,40,205,184,162,79,64,0,67,201,32,34,195,12,48,11,211,253,79,55,165,192,217,0,45,29,21,123,20,36,26,17,77,238,103,81,202,15,76,144,255,113,254,95,25,45,95,100,5,26,254,254,19,12,202,8,27,8,33,1,23,5,0,1,83,128,254,94,62,232,248,244,154,172,1,39,231,127,95,238,184,210,97,66,223,6,138,155,158,187,37,234,147,114,223,255,132,206,1,136,113,245,4,75,214,61,59,38,111,162,0,132,212,126,230,235,126,84,160,76,109,68,245,214,243,108,223,171,73,38,245,199,160,174,193,140,51,54,147,126,63,80,97,32,119,211,225,56,182,17,3,14,80,114,187,178,14,248,46,80,224,171,222,119,141,236,129,30,151,87,70,103,79,225,0,84,51,201,143,49,32,105,153,187,29,8,165,4,195,255,5,24,53,77,227,92,61,127,198,102,200,166,169,204,91,93,234,111,236,218,145,111,146,159,47,34,70,159,125,70,145,57,142,109,191,165,79,196,67,17,2,131,149,67,235,78,33,208,184,131,32,2,12,24,182,63,30,147,248,24,230,88,22,40,62,110,72,38,112,138,215,139,193,228,119,116,124,224,6,181,37,10,45,243,2,139,9,121,129,187,234,228,35,59,18,40,56,173,222,105,22,202,116,21,98,27,135,223,183,64,28,33,249,158,26,165,123,55,20,0,200,138,30,4,3,64,17,9,210,228,89,189,213,86,209,227,213,118,232,79,64,163,145,47,222,232,123,85,167,228,234,0,236,194,229,12,166,187,180,77,255,189,86,231,172,105,51,221,53,176,23,236,39,35,87,6,176,200,175,153,145,195,200,86,28,129,101,107,25,97,20,94,117,203,133,110,2,192,7,190,119,85,50,194,236,244,63,137,45,201,191,91,37,59,236,208,183,26,128,183,36,59,109,141,239,99,199,32,252,165,102,195,128,40,56,156,5,50,206,10,138,84,201,170,199,215,161,236,50,250,26,4,90,98,22,29,44,144,1,103,84,122,117,155,247,119,212,49,49,176,38,145,219,111,204,54,70,139,11,199,72,106,230,217,121,90,229,86,235,76,106,2,255,126,67,82,180,118,143,47,165,128,249,13,227,205,116,134,235,4,218,237,4,190,169,23,223,244,24,44,157,127,116,183,180,247,42,171,32,77,195,239,124,107,9,46,84,162,65,23,53,160,182,229,246,66,61,33,38,124,28,44,15,245,194,97,249,218,82,101,248,49,194,210,105,15,19,37,162,127,22,216,200,242,24,4,166,150,26,0,171,38,21,13,33,92,49,99,236,114,10,94,253,254,186,73,217,8,121,24,134,189,13,141,167,112,17,49,12,100,155,62,215,16,62,204,182,211,202,213,136,195,174,12,225,1,48,247,255,138,114,108,161,226,234,113,110,243,154,31,47,209,203,207,23,132,222,193,107,190,7,172,216,161,68,203,86,15,155,139,195,136,57,1,202,47,197,177,205,49,190,180,6,40,120,216,226,164,163,18,50,229,125,111,182,126,253,88,0,233,30,208,194,255,173,36,197,15,153,244,197,170,17,151,149,123,29,0,210,231,229,130,246,115,152,16,150,48,97,0,33,149,45,195,255,33,161,173,21,132,144,41,127,151,187,127,219,179,158,175,42,237,201,41,101,164,226,92,44,243,48,167,232,63,170,208,145,192,92,138,231,44,158,212,169,84,228,12,134,205,10,214,25,25,95,1,3,145,7,119,246,58,160,222,94,86,168,120,223,86,227,222,190,92,240,33,135,227,117,139,81,6,197,179,239,195,165,184,210,182,238,216,119,190,35,229,41,69,21,194,223,239,105,47,251,122,230,175,178,196,112,244,91,235,224,243,118,152,204,214,12,70,228,57,56,133,218,31,47,131,135,25,103,115,0,202,248,68,145,169,158,41,107,41,149,194,47,73,171,190,102,146,105,110,103,181,218,221,211,155,47,5,126,223,28,112,37,219,238,81,94,27,230,36,83,246,108,227,252,106,4,204,22,3,62,33,68,134,208,89,220,183,31,41,101,121,67,253,214,204,121,57,130,65,246,205,43,147,77,195,87,182,130,210,223,78,12,41,229,122,107,83,185,60,254,32,30,133,126,85,51,152,176,240,236,19,114,179,255,211,193,197,133,63,210,126,239,10], "i8", ALLOC_NONE, 434500);
allocate([64,194,239,141,159,93,250,37,191,61,144,235,7,201,16,232,255,127,96,71,75,228,159,54,68,198,31,140,144,202,206,174,191,249,177,190,234,202,251,238,80,25,207,232,174,7,223,81,6,136,14,146,72,5,173,240,131,141,60,225,213,16,112,146,159,125,16,17,185,125,100,7,212,228,227,178,94,40,79,61,32,168,175,185,224,130,222,250,139,38,103,160,46,121,114,130,192,178,63,85,43,226,154,72,148,151,239,212,188,63,94,18,238,252,255,33,253,27,91,130,237,197,85,146,64,162,87,18,2,131,26,78,255,127,224,186,231,70,130,82,14,20,87,142,191,247,115,51,136,129,159,140,232,78,252,166,165,181,130,201,183,29,192,168,100,194,159,87,49,79,9,103,95,63,189,242,193,247,255,64,252,141,183,31,193,210,107,142,155,229,123,67,191,61,176,153,75,198,219,181,230,192,141,99,153,157,129,85,28,200,151,161,110,45,1,74,40,74,136,197,113,111,195,204,19,194,67,184,241,67,7,108,60,137,9,131,95,221,237,15,80,232,127,47,126,127,192,215,191,127,80,2,4,154,251,90,208,210,71,167,46,25,81,22,62,191,112,175,128,19,195,88,46,48,152,95,196,195,124,114,2,180,15,10,130,239,127,15,173,253,150,140,174,42,44,93,73,154,233,142,184,136,218,80,160,244,39,132,144,87,172,30,73,180,111,121,21,220,82,130,155,125,189,239,125,89,114,166,216,64,168,173,4,69,245,69,3,116,93,250,5,195,62,232,26,117,145,79,194,105,86,146,65,233,239,35,46,241,3,169,242,13,39,96,182,228,118,2,116,101,253,148,178,133,121,146,203,219,118,130,118,129,119,2,141,145,175,248,158,247,72,78,223,109,97,143,14,132,157,226,131,125,47,132,200,229,12,52,130,182,187,150,72,177,180,147,171,60,48,239,40,175,79,152,155,175,159,119,13,86,220,146,32,30,77,34,136,170,55,132,150,220,41,125,220,211,86,39,238,124,144,139,64,210,31,181,227,124,192,231,161,180,102,229,94,97,233,195,157,32,248,60,227,209,148,96,65,163,156,205,14,70,118,92,59,152,234,0,129,120,214,212,44,87,71,253,217,237,108,247,156,34,168,189,170,173,125,18,78,7,138,67,144,192,151,31,138,219,27,8,190,126,160,147,21,202,56,185,255,60,176,151,248,192,194,61,236,178,26,141,81,14,56,100,251,123,204,104,136,39,15,217,129,1,73,18,212,255,229,93,106,248,126,221,20,226,162,118,104,3,164,185,143,149,93,146,250,255,57,75,233,174,57,186,11,211,255,164,59,147,247,250,35,134,73,109,250,188,60,25,69,117,98,39,122,244,92,130,160,139,189,97,209,66,30,209,244,4,173,206,146,163,126,18,183,141,66,16,114,169,114,130,168,196,112,146,11,229,125,18,200,161,91,40,79,244,98,60,165,234,192,53,49,210,5,232,251,41,137,66,130,223,252,180,83,106,182,79,91,193,125,14,171,31,8,31,174,24,134,16,109,8,253,252,137,40,255,249,17,204,75,105,174,92,106,35,77,202,222,18,197,140,63,44,254,45,208,210,150,88,239,248,218,82,207,228,103,91,21,149,140,72,74,73,12,168,182,185,188,130,143,92,69,107,211,137,55,148,96,58,169,201,0,236,83,82,113,68,73,75,135,10,64,188,115,215,28,103,52,124,246,126,113,2,54,85,235,79,255,47,208,162,196,96,191,210,192,3,63,212,109,239,180,80,209,140,71,7,136,24,110,0,85,63,229,162,188,212,230,185,22,128,4,162,51,56,87,151,103,125,32,215,61,143,15,222,51,123,248,114,51,79,204,171,93,197,136,118,176,166,0,123,1,0,123,148,210,117,0,87,248,136,187,249,158,1,66,137,255,165,100,66,224,2,99,133,43,217,219,114,105,27,151,238,222,47,162,110,43,174,8,95,109,97,122,175,103,135,201,229,210,235,31,207,194,200,239,97,113,37,172,241,194,57,130,204,184,76,33,103,209,131,229,177,98,62,220,183,206,189,16,127,56,92,10,249,61,68,240,15,198,109,110,96,73,58,84,96,72,193,39,87,29,138,233,43,56,23,180,138,36,190,225,32,15,218,150,175,37,132,69,104,229,59,131,153,125,69,13,96,80,147,47,40,98,179,52,131,32,17,29,217,160,141,109,43,49,30,43,100,0,90,48,156,136,230,188,82,138,88,3,27,213,239,186,247,156,237,66,65,17,92,49,164,197,62,50,131,54,70,239,223,1,197,51,161,28,83,211,233,131,55,53,238], "i8", ALLOC_NONE, 435524);
allocate([148,16,32,31,91,167,11,239,126,207,227,105,128,67,63,57,122,207,97,254,122,32,197,238,148,156,136,85,81,6,252,114,121,239,167,173,53,114,29,78,206,99,90,213,186,54,4,222,239,48,196,153,148,7,12,95,125,219,220,24,243,239,214,161,123,47,181,160,5,54,232,89,148,176,21,238,9,217,255,233,134,0,68,220,89,68,148,239,179,204,131,186,251,205,195,224,129,65,218,209,177,42,9,59,193,241,151,249,123,207,230,165,219,13,66,1,91,239,231,228,65,255,161,37,6,248,128,225,128,16,196,31,122,238,155,23,169,198,122,211,164,48,88,254,127,139,222,152,78,63,232,119,105,146,146,121,123,159,250,36,91,200,19,225,131,0,196,172,37,53,80,215,95,97,234,247,84,49,20,98,99,75,85,13,33,17,104,93,89,195,102,200,115,207,99,61,192,52,226,206,135,126,216,212,33,43,103,92,129,97,31,7,127,98,247,57,132,48,30,54,59,87,235,228,164,100,47,96,156,205,58,214,53,70,188,27,45,3,129,158,12,245,1,39,180,122,132,153,121,223,227,160,140,243,108,186,148,48,132,16,94,169,55,37,254,111,111,244,31,59,255,161,106,251,140,32,116,140,69,143,39,162,224,217,52,58,199,78,105,79,136,252,223,232,77,62,136,0,14,239,141,100,89,53,140,56,69,138,102,67,128,29,253,155,29,114,187,132,134,165,51,99,37,232,18,130,78,132,152,128,141,18,180,63,211,254,225,10,40,206,165,155,225,39,82,194,166,213,189,84,151,228,221,85,214,197,100,112,102,235,77,11,132,119,1,168,182,161,169,38,219,132,20,103,181,224,183,67,240,33,96,88,208,229,132,48,240,84,114,244,111,6,83,161,26,163,85,71,220,218,191,93,98,181,230,27,86,104,148,107,202,131,59,210,110,45,219,1,207,236,186,208,211,166,92,61,128,182,9,167,119,175,76,163,180,51,214,200,123,57,149,43,226,94,4,83,14,95,97,111,237,129,100,67,231,32,120,19,94,180,155,99,24,222,34,161,28,136,209,38,103,185,232,167,73,128,123,218,183,34,37,45,85,94,55,210,114,82,28,149,210,121,76,137,13,198,2,180,140,72,91,254,164,27,107,159,176,164,207,21,168,28,5,48,12,162,99,223,113,136,203,47,222,185,233,201,198,12,83,255,238,11,23,69,33,227,53,40,84,180,60,41,99,159,41,231,65,238,124,45,29,110,134,82,4,80,243,133,102,30,198,1,52,243,149,44,162,48,80,8,167,49,19,15,147,96,23,132,249,115,89,152,38,161,68,92,100,236,169,119,200,82,166,51,255,205,65,23,43,160,162,217,186,124,111,3,128,33,8,156,217,80,97,72,63,203,101,215,107,194,171,246,163,100,118,38,52,128,123,94,167,37,252,209,230,228,230,16,199,32,128,182,240,205,59,77,132,23,77,248,238,49,228,36,8,126,235,73,203,44,174,59,106,132,136,120,247,143,246,96,93,238,115,86,247,122,219,92,221,47,193,49,22,161,67,111,246,48,84,236,250,179,250,215,127,21,204,121,133,239,88,222,82,209,94,253,47,219,25,206,50,143,122,249,106,48,248,62,240,2,213,154,49,153,15,250,66,194,176,235,227,167,6,73,142,198,12,35,218,184,40,48,130,128,200,243,222,220,113,177,95,211,200,27,138,8,96,197,192,190,232,201,163,97,77,245,168,188,250,239,47,199,153,46,130,34,180,112,197,130,137,78,217,216,188,52,28,139,230,22,30,48,121,233,59,39,166,234,255,176,198,184,217,97,105,72,178,0,63,206,255,183,59,40,220,8,90,246,218,67,152,151,225,247,47,183,25,118,164,155,28,143,160,55,134,220,177,211,167,22,183,147,195,159,235,110,19,167,62,198,188,198,66,55,81,26,188,40,104,239,214,101,3,82,171,119,106,45,75,237,39,53,22,210,31,130,46,110,92,9,251,242,146,219,203,41,234,94,245,146,88,20,127,79,88,145,123,105,131,84,204,168,103,38,72,96,25,133,234,172,75,140,212,96,56,131,249,224,35,13,138,126,56,108,73,210,230,10,12,96,132,178,29,115,53,216,71,198,177,220,234,86,76,172,179,129,189,62,176,171,14,35,135,188,56,100,250,177,181,240,179,162,94,143,66,70,24,252,122,107,3,10,189,137,176,79,137,165,157,100,94,65,69,163,35,131,3,92,185,59,93,62,114,149,215,67,124,208,109,126,30,223,223,6,239,196,108,108,57,165,96,113,112,190,191,115,5,118,135,131,241,236,35,69], "i8", ALLOC_NONE, 436548);
allocate([212,64,251,48,11,255,160,159,47,205,236,107,122,140,37,63,47,63,33,30,211,77,0,156,64,229,3,96,73,201,159,207,39,175,212,191,181,189,187,136,144,64,3,226,117,150,208,152,224,160,99,110,210,97,195,21,29,102,231,194,142,255,212,34,111,59,104,40,89,208,127,192,200,121,35,255,226,80,95,119,211,64,195,67,86,134,47,223,26,164,124,136,45,189,210,162,214,224,201,161,25,72,108,52,135,109,183,97,47,15,84,34,225,50,190,42,107,22,84,170,58,142,86,34,208,65,211,162,200,64,219,102,47,57,132,167,47,255,77,0,222,210,185,45,172,63,148,151,216,193,151,74,183,68,118,82,167,55,244,181,239,186,44,184,89,209,81,215,237,240,247,111,31,122,9,90,208,104,123,130,46,245,236,144,84,192,176,34,53,89,142,188,127,47,109,75,162,100,187,80,16,73,102,210,45,129,229,190,144,34,51,183,159,21,59,233,17,228,142,180,93,52,255,75,64,194,69,253,63,151,49,173,46,208,246,196,101,129,252,85,173,202,177,213,174,45,172,161,109,183,212,162,80,12,155,193,242,64,34,136,56,79,110,12,215,191,228,164,114,162,91,79,47,29,76,86,25,83,156,197,84,227,73,185,254,105,70,176,138,171,182,177,221,88,19,199,69,197,133,99,93,147,15,17,213,138,83,87,147,4,57,106,224,55,61,230,179,246,84,42,95,125,120,58,181,160,118,98,223,252,166,25,106,32,66,122,213,212,249,41,145,24,27,246,94,39,114,187,103,129,80,170,145,16,144,56,235,5,181,198,140,203,199,132,15,90,215,42,39,20,74,135,107,147,209,162,175,134,210,42,145,210,86,170,96,67,137,215,13,117,92,66,38,158,179,147,201,132,113,24,45,179,0,108,20,187,226,115,60,188,190,160,121,55,98,84,171,158,69,100,130,139,50,63,130,207,24,119,166,206,162,89,46,0,238,4,230,120,254,137,80,9,171,63,194,246,95,50,5,63,56,129,200,197,99,105,214,90,203,118,201,116,153,212,207,13,24,202,213,130,7,56,246,92,250,199,17,21,195,138,19,158,231,53,208,145,218,71,134,144,15,244,158,65,226,167,65,98,54,49,149,244,30,5,4,59,87,170,141,93,128,74,208,0,131,84,60,42,50,0,223,205,100,191,142,166,87,186,43,55,198,117,65,211,175,80,117,50,193,167,245,11,90,145,171,191,84,107,38,20,11,43,215,201,76,171,130,205,156,68,101,242,251,247,243,197,133,171,148,219,85,27,36,227,212,170,63,189,164,207,226,163,234,45,2,77,32,158,172,37,189,200,179,85,223,234,152,158,189,213,178,49,18,227,108,173,213,42,222,41,67,149,40,69,190,173,105,15,113,216,15,201,81,170,246,107,120,170,30,63,81,34,155,167,81,170,204,68,211,42,240,65,90,123,173,251,124,211,5,149,6,27,145,228,236,65,230,50,195,180,212,104,34,3,204,10,96,201,109,126,56,206,108,177,107,191,120,251,112,106,201,217,3,13,222,57,223,212,218,99,16,224,100,244,54,71,216,40,211,90,150,204,71,179,195,15,187,117,251,27,81,152,53,204,251,79,106,207,139,181,188,10,31,225,74,254,197,191,16,236,10,167,10,87,57,172,47,68,4,63,83,177,136,97,46,122,57,224,121,203,39,87,143,65,235,156,141,214,172,28,150,124,211,42,157,203,117,1,9,255,157,198,240,101,91,199,216,64,219,217,121,119,14,236,212,234,68,71,116,50,28,177,158,203,36,221,189,84,28,126,249,68,17,240,177,14,36,210,253,179,117,150,85,55,172,163,175,39,124,212,77,95,200,81,150,117,144,86,230,21,187,165,240,4,3,88,241,44,4,202,234,55,26,1,219,170,191,141,74,62,186,53,160,255,38,53,9,77,123,195,217,110,48,188,102,38,165,152,37,247,72,86,157,86,94,255,208,99,237,12,207,178,99,124,225,69,11,112,241,80,234,213,114,40,169,133,167,189,31,175,112,72,35,212,243,11,135,167,121,77,59,45,152,65,224,66,231,237,208,12,184,13,71,38,76,129,129,248,215,106,77,71,92,94,12,124,89,25,35,209,152,114,27,56,219,244,210,245,83,134,131,171,35,30,47,110,158,156,113,131,70,224,145,189,110,69,86,154,12,32,57,220,113,197,200,32,28,218,43,150,255,150,230,225,8,171,65,177,185,137,202,124,131,231,105,26,67,72,204,2,121,197,247,162,125,244,158,66,156,22,123,66,73,240,201,90,0,15,143,221,191,101,129,92], "i8", ALLOC_NONE, 437572);
allocate([1,0,0,0,17,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438596);
allocate([2,0,0,0,11,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438608);
allocate([2,0,0,0,11,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438632);
allocate([2,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438656);
allocate(16, "i8", ALLOC_NONE, 438676);
allocate(4, "i8", ALLOC_NONE, 438692);
allocate(4, "i8", ALLOC_NONE, 438696);
allocate(4, "i8", ALLOC_NONE, 438700);
allocate(4, "i8", ALLOC_NONE, 438704);
allocate(4, "i8", ALLOC_NONE, 438708);
allocate(4, "i8", ALLOC_NONE, 438712);
allocate(4, "i8", ALLOC_NONE, 438716);
allocate(4, "i8", ALLOC_NONE, 438720);
allocate(4, "i8", ALLOC_NONE, 438724);
allocate(4, "i8", ALLOC_NONE, 438728);
allocate(4, "i8", ALLOC_NONE, 438732);
allocate(4, "i8", ALLOC_NONE, 438736);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438740);
allocate(16, "i8", ALLOC_NONE, 438780);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438796);
allocate(12, "i8", ALLOC_NONE, 438836);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438848);
allocate(12, "i8", ALLOC_NONE, 438888);
allocate([0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1], "i8", ALLOC_NONE, 438900);
allocate([217,120,249,196,25,221,181,237,40,233,253,121,74,160,216,157,198,126,55,131,43,118,83,142,98,76,100,136,68,139,251,162,23,154,89,245,135,179,79,19,97,69,109,141,9,129,125,50,189,143,64,235,134,183,123,11,240,149,33,34,92,107,78,130,84,214,101,147,206,96,178,28,115,86,192,20,167,140,241,220,18,117,202,31,59,190,228,209,66,61,212,48,163,60,182,38,111,191,14,218,70,105,7,87,39,242,29,155,188,148,67,3,248,17,199,246,144,239,62,231,6,195,213,47,200,102,30,215,8,232,234,222,128,82,238,247,132,170,114,172,53,77,106,42,150,26,210,113,90,21,73,116,75,159,208,94,4,24,164,236,194,224,65,110,15,81,203,204,36,145,175,80,161,244,112,57,153,124,58,133,35,184,180,122,252,2,54,91,37,85,151,49,45,93,250,152,227,138,146,174,5,223,41,16,103,108,186,201,211,0,230,207,225,158,168,44,99,22,1,63,88,226,137,169,13,56,52,27,171,51,255,176,187,72,12,95,185,177,205,46,197,243,219,71,229,165,156,119,10,166,32,104,254,127,193,173] /* \D9x\F9\C4\19\DD\B5\ */, "i8", ALLOC_NONE, 438964);
allocate([111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,115,0] /* option requires an a */, "i8", ALLOC_NONE, 439220);
allocate([111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,99,0] /* option requires an a */, "i8", ALLOC_NONE, 439256);
allocate(4, "i8", ALLOC_NONE, 439292);
allocate([255,255,255,255], "i8", ALLOC_NONE, 439296);
allocate([1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,27,0,0,0,54,0,0,0,108,0,0,0,216,0,0,0,171,0,0,0,77,0,0,0,154,0,0,0,47,0,0,0,94,0,0,0,188,0,0,0,99,0,0,0,198,0,0,0,151,0,0,0,53,0,0,0,106,0,0,0,212,0,0,0,179,0,0,0,125,0,0,0,250,0,0,0,239,0,0,0,197,0,0,0,145,0,0,0], "i8", ALLOC_NONE, 439300);
allocate([79,1,184,135,232,198,35,24,82,145,111,121,245,210,166,54,53,123,12,163,142,155,188,96,87,254,75,46,194,215,224,29,218,74,240,159,229,55,119,21,133,107,160,177,10,41,201,88,103,5,62,203,244,16,93,189,216,149,125,167,139,65,39,228,158,71,23,221,102,124,238,251,51,131,90,173,7,191,45,202], "i8", ALLOC_NONE, 439420);
allocate(4, "i8", ALLOC_NONE, 439500);
allocate([117,243,198,244,219,123,251,200,74,211,230,107,69,125,232,75,214,50,216,253,55,113,241,225,48,15,248,27,135,250,6,63,94,186,174,91,138,0,188,157,109,193,177,14,128,93,210,213,160,132,7,20,181,144,44,163,178,115,76,84,146,116,54,81,56,176,189,90,252,96,98,150,108,66,247,16,124,40,39,140,19,149,156,199,36,70,59,112,202,227,133,203,17,208,147,184,166,131,32,255,159,119,195,204,3,111,8,191,64,231,43,226,121,12,170,130,65,58,234,185,228,154,164,151,126,218,122,23,102,148,161,29,61,240,222,179,11,114,167,28,239,209,83,62,143,51,38,95,236,118,42,73,129,136,238,33,196,26,235,217,197,57,153,205,173,49,139,1,24,35,221,31,78,45,249,72,79,242,101,142,120,92,88,25,141,229,152,87,103,127,5,100,175,99,182,254,245,183,60,165,206,233,104,68,224,77,67,105,41,46,172,21,89,168,10,158,110,71,223,52,53,106,207,220,34,201,192,155,137,212,237,171,18,162,13,82,187,2,47,169,215,97,30,180,80,4,246,194,22,37,134,86,85,9,190,145] /* u\F3\C6\F4\DB{\FB\C8 */, "i8", ALLOC_NONE, 439504);
allocate([169,103,179,232,4,253,163,118,154,146,128,120,228,221,209,56,13,198,53,152,24,247,236,108,67,117,55,38,250,19,148,72,242,208,139,48,132,84,223,35,25,91,61,89,243,174,162,130,99,1,131,46,217,81,155,124,166,235,165,190,22,12,227,97,192,140,58,245,115,44,37,11,187,78,137,107,83,106,180,241,225,230,189,69,226,244,182,102,204,149,3,86,212,28,30,215,251,195,142,181,233,207,191,186,234,119,57,175,51,201,98,113,129,121,9,173,36,205,249,216,229,197,185,77,68,8,134,231,161,29,170,237,6,112,178,210,65,123,160,17,49,194,39,144,32,246,96,255,150,92,177,171,158,156,82,27,95,147,10,239,145,133,73,238,45,79,143,59,71,135,109,70,214,62,105,100,42,206,203,47,252,151,5,122,172,127,213,26,75,14,167,90,40,20,63,41,136,60,76,2,184,218,176,23,85,31,138,125,87,199,141,116,183,196,159,114,126,21,34,18,88,7,153,52,110,80,222,104,101,188,219,248,200,168,43,64,220,254,50,164,202,16,33,240,211,93,15,0,111,157,54,66,74,94,193,224] /* \A9g\B3\E8\04\FD\A3v */, "i8", ALLOC_NONE, 439760);
allocate(4, "i8", ALLOC_NONE, 440016);
allocate(4, "i8", ALLOC_NONE, 440020);
allocate([144,128,7,0,188,129,7,0,1,0,0,0,1,0,0,0,204,128,7,0,212,129,7,0,20,0,0,0,0,0,0,0,204,128,7,0,212,129,7,0,16,0,0,0,0,0,0,0,128,129,7,0,4,130,7,0,17,0,0,0,1,0,0,0,8,129,7,0,236,129,7,0,45,1,0,0,0,0,0,0,68,129,7,0,236,129,7,0,46,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 440024);
allocate([136,106,63,36,211,8,163,133,46,138,25,19,68,115,112,3,34,56,9,164,208,49,159,41,152,250,46,8,137,108,78,236,230,33,40,69,119,19,208,56,207,102,84,190,108,12,233,52,183,41,172,192,221,80,124,201,181,213,132,63,23,9,71,181,217,213,22,146,27,251,121,137], "i8", ALLOC_NONE, 440136);
allocate(4, "i8", ALLOC_NONE, 440208);
allocate(4, "i8", ALLOC_NONE, 440212);
allocate(4, "i8", ALLOC_NONE, 440216);
allocate(4, "i8", ALLOC_NONE, 440220);
allocate(4, "i8", ALLOC_NONE, 440224);
allocate(4, "i8", ALLOC_NONE, 440228);
allocate(4, "i8", ALLOC_NONE, 440232);
allocate(4, "i8", ALLOC_NONE, 440236);
allocate(4, "i8", ALLOC_NONE, 440240);
allocate(4, "i8", ALLOC_NONE, 440244);
allocate(4, "i8", ALLOC_NONE, 440248);
allocate(4, "i8", ALLOC_NONE, 440252);
allocate([0,0,0,0,0,0,36,64,0,0,0,0,0,0,89,64,0,0,0,0,0,136,195,64,0,0,0,0,132,215,151,65,0,128,224,55,121,195,65,67,23,110,5,181,181,184,147,70,245,249,63,233,3,79,56,77,50,29,48,249,72,119,130,90,60,191,115,127,221,79,21,117], "i8", ALLOC_NONE, 440256);
allocate(4, "i8", ALLOC_NONE, 440328);
allocate(4, "i8", ALLOC_NONE, 440332);
allocate(4, "i8", ALLOC_NONE, 440336);
allocate(4, "i8", ALLOC_NONE, 440340);
allocate(4, "i8", ALLOC_NONE, 440344);
allocate(4, "i8", ALLOC_NONE, 440348);
allocate(4, "i8", ALLOC_NONE, 440352);
allocate(4, "i8", ALLOC_NONE, 440356);
allocate(4, "i8", ALLOC_NONE, 440360);
allocate(4, "i8", ALLOC_NONE, 440364);
allocate(4, "i8", ALLOC_NONE, 440368);
allocate([0,1,23,2,46,24,83,3,106,47,147,25,52,84,69,4,92,107,182,48,166,148,75,26,140,53,129,85,170,70,13,5,36,93,135,108,155,183,193,49,43,167,163,149,152,76,202,27,230,141,115,54,205,130,18,86,98,171,240,71,79,14,189,6,212,37,210,94,39,136,102,109,214,156,121,184,8,194,223,50,104,44,253,168,138,164,90,150,41,153,34,77,96,203,228,28,123,231,59,142,158,116,244,55,216,206,249,131,111,19,178,87,225,99,220,172,196,241,175,72,10,80,66,15,186,190,199,7,222,213,120,38,101,211,209,95,227,40,33,137,89,103,252,110,177,215,248,157,243,122,58,185,198,9,65,195,174,224,219,51,68,105,146,45,82,254,22,169,12,139,128,165,74,91,181,151,201,42,162,154,192,35,134,78,188,97,239,204,17,229,114,29,61,124,235,232,233,60,234,143,125,159,236,117,30,245,62,56,246,217,63,207,118,250,31,132,160,112,237,20,144,179,126,88,251,226,32,100,208,221,119,173,218,197,64,242,57,176,247,73,180,11,127,81,21,67,145,16,113,187,238,191,133,200,161] /* \00\01\17\02.\18S\03 */, "i8", ALLOC_NONE, 440372);
allocate(4, "i8", ALLOC_NONE, 440628);
allocate(4, "i8", ALLOC_NONE, 440632);
allocate(4, "i8", ALLOC_NONE, 440636);
allocate(4, "i8", ALLOC_NONE, 440640);
allocate(4, "i8", ALLOC_NONE, 440644);
allocate([63,0,0,0], "i8", ALLOC_NONE, 440648);
allocate([1,0,0,0], "i8", ALLOC_NONE, 440652);
allocate([1,0,0,0], "i8", ALLOC_NONE, 440656);
allocate(4, "i8", ALLOC_NONE, 440660);
allocate(4, "i8", ALLOC_NONE, 440664);
allocate(56, "i8", ALLOC_NONE, 440668);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 440724);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 440756);
allocate(8, "i8", ALLOC_NONE, 440772);
allocate(12, "i8", ALLOC_NONE, 440780);
allocate(12, "i8", ALLOC_NONE, 440792);
allocate(12, "i8", ALLOC_NONE, 440804);
allocate(8, "i8", ALLOC_NONE, 440816);
allocate(24, "i8", ALLOC_NONE, 440824);
allocate(12, "i8", ALLOC_NONE, 440848);
allocate(12, "i8", ALLOC_NONE, 440860);
allocate(8, "i8", ALLOC_NONE, 440872);
allocate(4, "i8", ALLOC_NONE, 440880);
allocate([255,255,255,255], "i8", ALLOC_NONE, 440884);
allocate([255,255,255,255], "i8", ALLOC_NONE, 440888);
allocate(4, "i8", ALLOC_NONE, 440892);
allocate(4, "i8", ALLOC_NONE, 440896);
allocate([111,112,116,105,111,110,32,100,111,101,115,110,39,116,32,116,97,107,101,32,97,110,32,97,114,103,117,109,101,110,116,32,45,45,32,37,46,42,115,0] /* option doesn't take  */, "i8", ALLOC_NONE, 440900);
allocate(4, "i8", ALLOC_NONE, 440940);
allocate(4, "i8", ALLOC_NONE, 440944);
allocate(4, "i8", ALLOC_NONE, 440948);
allocate([85,110,115,112,101,99,105,102,105,101,100,32,115,111,117,114,99,101,0,103,99,114,121,112,116,0,71,110,117,80,71,0,71,112,103,83,77,0,71,80,71,32,65,103,101,110,116,0,80,105,110,101,110,116,114,121,0,83,67,68,0,71,80,71,77,69,0,75,101,121,98,111,120,0,75,83,66,65,0,68,105,114,109,110,103,114,0,71,83,84,73,0,71,80,65,0,75,108,101,111,112,97,116,114,97,0,71,49,51,0,65,110,121,32,115,111,117,114,99,101,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,49,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,50,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,51,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,52,0,85,110,107,110,111,119,110,32,115,111,117,114,99,101,0] /* Unspecified source\0 */, "i8", ALLOC_NONE, 440952);
allocate([83,117,99,99,101,115,115,0,71,101,110,101,114,97,108,32,101,114,114,111,114,0,85,110,107,110,111,119,110,32,112,97,99,107,101,116,0,85,110,107,110,111,119,110,32,118,101,114,115,105,111,110,32,105,110,32,112,97,99,107,101,116,0,73,110,118,97,108,105,100,32,112,117,98,108,105,99,32,107,101,121,32,97,108,103,111,114,105,116,104,109,0,73,110,118,97,108,105,100,32,100,105,103,101,115,116,32,97,108,103,111,114,105,116,104,109,0,66,97,100,32,112,117,98,108,105,99,32,107,101,121,0,66,97,100,32,115,101,99,114,101,116,32,107,101,121,0,66,97,100,32,115,105,103,110,97,116,117,114,101,0,78,111,32,112,117,98,108,105,99,32,107,101,121,0,67,104,101,99,107,115,117,109,32,101,114,114,111,114,0,66,97,100,32,112,97,115,115,112,104,114,97,115,101,0,73,110,118,97,108,105,100,32,99,105,112,104,101,114,32,97,108,103,111,114,105,116,104,109,0,75,101,121,114,105,110,103,32,111,112,101,110,0,73,110,118,97,108,105,100,32,112,97,99,107,101,116,0,73,110,118,97,108,105,100,32,97,114,109,111,114,0,78,111,32,117,115,101,114,32,73,68,0,78,111,32,115,101,99,114,101,116,32,107,101,121,0,87,114,111,110,103,32,115,101,99,114,101,116,32,107,101,121,32,117,115,101,100,0,66,97,100,32,115,101,115,115,105,111,110,32,107,101,121,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,97,108,103,111,114,105,116,104,109,0,78,117,109,98,101,114,32,105,115,32,110,111,116,32,112,114,105,109,101,0,73,110,118,97,108,105,100,32,101,110,99,111,100,105,110,103,32,109,101,116,104,111,100,0,73,110,118,97,108,105,100,32,101,110,99,114,121,112,116,105,111,110,32,115,99,104,101,109,101,0,73,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,32,115,99,104,101,109,101,0,73,110,118,97,108,105,100,32,97,116,116,114,105,98,117,116,101,0,78,111,32,118,97,108,117,101,0,78,111,116,32,102,111,117,110,100,0,86,97,108,117,101,32,110,111,116,32,102,111,117,110,100,0,83,121,110,116,97,120,32,101,114,114,111,114,0,66,97,100,32,77,80,73,32,118,97,108,117,101,0,73,110,118,97,108,105,100,32,112,97,115,115,112,104,114,97,115,101,0,73,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,32,99,108,97,115,115,0,82,101,115,111,117,114,99,101,115,32,101,120,104,97,117,115,116,101,100,0,73,110,118,97,108,105,100,32,107,101,121,114,105,110,103,0,84,114,117,115,116,32,68,66,32,101,114,114,111,114,0,66,97,100,32,99,101,114,116,105,102,105,99,97,116,101,0,73,110,118,97,108,105,100,32,117,115,101,114,32,73,68,0,85,110,101,120,112,101,99,116,101,100,32,101,114,114,111,114,0,84,105,109,101,32,99,111,110,102,108,105,99,116,0,75,101,121,115,101,114,118,101,114,32,101,114,114,111,114,0,87,114,111,110,103,32,112,117,98,108,105,99,32,107,101,121,32,97,108,103,111,114,105,116,104,109,0,84,114,105,98,117,116,101,32,116,111,32,68,46,32,65,46,0,87,101,97,107,32,101,110,99,114,121,112,116,105,111,110,32,107,101,121,0,73,110,118,97,108,105,100,32,107,101,121,32,108,101,110,103,116,104,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,83,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,85,82,73,0,73,110,118,97,108,105,100,32,85,82,73,0,78,101,116,119,111,114,107,32,101,114,114,111,114,0,85,110,107,110,111,119,110,32,104,111,115,116,0,83,101,108,102,116,101,115,116,32,102,97,105,108,101,100,0,68,97,116,97,32,110,111,116,32,101,110,99,114,121,112,116,101,100,0,68,97,116,97,32,110,111,116,32,112,114,111,99,101,115,115,101,100,0,85,110,117,115,97,98,108,101,32,112,117,98,108,105,99,32,107,101,121,0,85,110,117,115,97,98,108,101,32,115,101,99,114,101,116,32,107,101,121,0,73,110,118,97,108,105,100,32,118,97,108,117,101,0,66,97,100,32,99,101,114,116,105,102,105,99,97,116,101,32,99,104,97,105,110,0,77,105,115,115,105,110,103,32,99,101,114,116,105,102,105,99,97,116,101,0,78,111,32,100,97,116,97,0,66,117,103,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,32,99,111,100,101,0,84,105,109,101,111,117,116,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,0,69,79,70,32,40,103,99,114,121,112,116,41,0,73,110,118,97,108,105,100,32,111,98,106,101,99,116,0,80,114,111,118,105,100,101,100,32,111,98,106,101,99,116,32,105,115,32,116,111,111,32,115,104,111,114,116,0,80,114,111,118,105,100,101,100,32,111,98,106,101,99,116,32,105,115,32,116,111,111,32,108,97,114,103,101,0,77,105,115,115,105,110,103,32,105,116,101,109,32,105,110,32,111,98,106,101,99,116,0,78,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,67,111,110,102,108,105,99,116,105,110,103,32,117,115,101,0,73,110,118,97,108,105,100,32,99,105,112,104,101,114,32,109,111,100,101,0,73,110,118,97,108,105,100,32,102,108,97,103,0,73,110,118,97,108,105,100,32,104,97,110,100,108,101,0,82,101,115,117,108,116,32,116,114,117,110,99,97,116,101,100,0,73,110,99,111,109,112,108,101,116,101,32,108,105,110,101,0,73,110,118,97,108,105,100,32,114,101,115,112,111,110,115,101,0,78,111,32,97,103,101,110,116,32,114,117,110,110,105,110,103,0,97,103,101,110,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,100,97,116,97,0,85,110,115,112,101,99,105,102,105,99,32,65,115,115,117,97,110,32,115,101,114,118,101,114,32,102,97,117,108,116,0,71,101,110,101,114,97,108,32,65,115,115,117,97,110,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,115,101,115,115,105,111,110,32,107,101,121,0,73,110,118,97,108,105,100,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,115,117,112,112,111,114,116,101,100,32,97,108,103,111,114,105,116,104,109,0,78,111,32,112,105,110,101,110,116,114,121,0,112,105,110,101,110,116,114,121,32,101,114,114,111,114,0,66,97,100,32,80,73,78,0,73,110,118,97,108,105,100,32,110,97,109,101,0,66,97,100,32,100,97,116,97,0,73,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,0,87,114,111,110,103,32,99,97,114,100,0,78,111,32,100,105,114,109,110,103,114,0,100,105,114,109,110,103,114,32,101,114,114,111,114,0,67,101,114,116,105,102,105,99,97,116,101,32,114,101,118,111,107,101,100,0,78,111,32,67,82,76,32,107,110,111,119,110,0,67,82,76,32,116,111,111,32,111,108,100,0,76,105,110,101,32,116,111,111,32,108,111,110,103,0,78,111,116,32,116,114,117,115,116,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,108,101,100,0,66,97,100,32,67,65,32,99,101,114,116,105,102,105,99,97,116,101,0,67,101,114,116,105,102,105,99,97,116,101,32,101,120,112,105,114,101,100,0,67,101,114,116,105,102,105,99,97,116,101,32,116,111,111,32,121,111,117,110,103,0,85,110,115,117,112,112,111,114,116,101,100,32,99,101,114,116,105,102,105,99,97,116,101,0,85,110,107,110,111,119,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,115,117,112,112,111,114,116,101,100,32,112,114,111,116,101,99,116,105,111,110,0,67,111,114,114,117,112,116,101,100,32,112,114,111,116,101,99,116,105,111,110,0,65,109,98,105,103,117,111,117,115,32,110,97,109,101,0,67,97,114,100,32,101,114,114,111,114,0,67,97,114,100,32,114,101,115,101,116,32,114,101,113,117,105,114,101,100,0,67,97,114,100,32,114,101,109,111,118,101,100,0,73,110,118,97,108,105,100,32,99,97,114,100,0,67,97,114,100,32,110,111,116,32,112,114,101,115,101,110,116,0,78,111,32,80,75,67,83,49,53,32,97,112,112,108,105,99,97,116,105,111,110,0,78,111,116,32,99,111,110,102,105,114,109,101,100,0,67,111,110,102,105,103,117,114,97,116,105,111,110,32,101,114,114,111,114,0,78,111,32,112,111,108,105,99,121,32,109,97,116,99,104,0,73,110,118,97,108,105,100,32,105,110,100,101,120,0,73,110,118,97,108,105,100,32,73,68,0,78,111,32,83,109,97,114,116,67,97,114,100,32,100,97,101,109,111,110,0,83,109,97,114,116,67,97,114,100,32,100,97,101,109,111,110,32,101,114,114,111,114,0,85,110,115,117,112,112,111,114,116,101,100,32,112,114,111,116,111,99,111,108,0,66,97,100,32,80,73,78,32,109,101,116,104,111,100,0,67,97,114,100,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,100,0,85,110,115,117,112,112,111,114,116,101,100,32,111,112,101,114,97,116,105,111,110,0,87,114,111,110,103,32,107,101,121,32,117,115,97,103,101,0,78,111,116,104,105,110,103,32,102,111,117,110,100,0,87,114,111,110,103,32,98,108,111,98,32,116,121,112,101,0,77,105,115,115,105,110,103,32,118,97,108,117,101,0,72,97,114,100,119,97,114,101,32,112,114,111,98,108,101,109,0,80,73,78,32,98,108,111,99,107,101,100,0,67,111,110,100,105,116,105,111,110,115,32,111,102,32,117,115,101,32,110,111,116,32,115,97,116,105,115,102,105,101,100,0,80,73,78,115,32,97,114,101,32,110,111,116,32,115,121,110,99,101,100,0,73,110,118,97,108,105,100,32,67,82,76,0,66,69,82,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,66,69,82,0,69,108,101,109,101,110,116,32,110,111,116,32,102,111,117,110,100,0,73,100,101,110,116,105,102,105,101,114,32,110,111,116,32,102,111,117,110,100,0,73,110,118,97,108,105,100,32,116,97,103,0,73,110,118,97,108,105,100,32,108,101,110,103,116,104,0,73,110,118,97,108,105,100,32,107,101,121,32,105,110,102,111,0,85,110,101,120,112,101,99,116,101,100,32,116,97,103,0,78,111,116,32,68,69,82,32,101,110,99,111,100,101,100,0,78,111,32,67,77,83,32,111,98,106,101,99,116,0,73,110,118,97,108,105,100,32,67,77,83,32,111,98,106,101,99,116,0,85,110,107,110,111,119,110,32,67,77,83,32,111,98,106,101,99,116,0,85,110,115,117,112,112,111,114,116,101,100,32,67,77,83,32,111,98,106,101,99,116,0,85,110,115,117,112,112,111,114,116,101,100,32,101,110,99,111,100,105,110,103,0,85,110,115,117,112,112,111,114,116,101,100,32,67,77,83,32,118,101,114,115,105,111,110,0,85,110,107,110,111,119,110,32,97,108,103,111,114,105,116,104,109,0,73,110,118,97,108,105,100,32,99,114,121,112,116,111,32,101,110,103,105,110,101,0,80,117,98,108,105,99,32,107,101,121,32,110,111,116,32,116,114,117,115,116,101,100,0,68,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,0,75,101,121,32,101,120,112,105,114,101,100,0,83,105,103,110,97,116,117,114,101,32,101,120,112,105,114,101,100,0,69,110,99,111,100,105,110,103,32,112,114,111,98,108,101,109,0,73,110,118,97,108,105,100,32,115,116,97,116,101,0,68,117,112,108,105,99,97,116,101,100,32,118,97,108,117,101,0,77,105,115,115,105,110,103,32,97,99,116,105,111,110,0,65,83,78,46,49,32,109,111,100,117,108,101,32,110,111,116,32,102,111,117,110,100,0,73,110,118,97,108,105,100,32,79,73,68,32,115,116,114,105,110,103,0,73,110,118,97,108,105,100,32,116,105,109,101,0,73,110,118,97,108,105,100,32,67,82,76,32,111,98,106,101,99,116,0,85,110,115,117,112,112,111,114,116,101,100,32,67,82,76,32,118,101,114,115,105,111,110,0,73,110,118,97,108,105,100,32,99,101,114,116,105,102,105,99,97,116,101,32,111,98,106,101,99,116,0,85,110,107,110,111,119,110,32,110,97,109,101,0,65,32,108,111,99,97,108,101,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0,78,111,116,32,108,111,99,107,101,100,0,80,114,111,116,111,99,111,108,32,118,105,111,108,97,116,105,111,110,0,73,110,118,97,108,105,100,32,77,65,67,0,73,110,118,97,108,105,100,32,114,101,113,117,101,115,116,0,85,110,107,110,111,119,110,32,101,120,116,101,110,115,105,111,110,0,85,110,107,110,111,119,110,32,99,114,105,116,105,99,97,108,32,101,120,116,101,110,115,105,111,110,0,76,111,99,107,101,100,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,0,85,110,107,110,111,119,110,32,99,111,109,109,97,110,100,0,78,111,116,32,111,112,101,114,97,116,105,111,110,97,108,0,78,111,32,112,97,115,115,112,104,114,97,115,101,32,103,105,118,101,110,0,78,111,32,80,73,78,32,103,105,118,101,110,0,78,111,116,32,101,110,97,98,108,101,100,0,78,111,32,99,114,121,112,116,111,32,101,110,103,105,110,101,0,77,105,115,115,105,110,103,32,107,101,121,0,84,111,111,32,109,97,110,121,32,111,98,106,101,99,116,115,0,76,105,109,105,116,32,114,101,97,99,104,101,100,0,78,111,116,32,105,110,105,116,105,97,108,105,122,101,100,0,77,105,115,115,105,110,103,32,105,115,115,117,101,114,32,99,101,114,116,105,102,105,99,97,116,101,0,79,112,101,114,97,116,105,111,110,32,102,117,108,108,121,32,99,97,110,99,101,108,108,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,121,101,116,32,102,105,110,105,115,104,101,100,0,66,117,102,102,101,114,32,116,111,111,32,115,104,111,114,116,0,73,110,118,97,108,105,100,32,108,101,110,103,116,104,32,115,112,101,99,105,102,105,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,83,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,109,97,116,99,104,101,100,32,112,97,114,101,110,116,104,101,115,101,115,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,83,45,101,120,112,114,101,115,115,105,111,110,32,110,111,116,32,99,97,110,111,110,105,99,97,108,0,66,97,100,32,99,104,97,114,97,99,116,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,66,97,100,32,113,117,111,116,97,116,105,111,110,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,90,101,114,111,32,112,114,101,102,105,120,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,78,101,115,116,101,100,32,100,105,115,112,108,97,121,32,104,105,110,116,115,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,109,97,116,99,104,101,100,32,100,105,115,112,108,97,121,32,104,105,110,116,115,0,85,110,101,120,112,101,99,116,101,100,32,114,101,115,101,114,118,101,100,32,112,117,110,99,116,117,97,116,105,111,110,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,66,97,100,32,104,101,120,97,100,101,99,105,109,97,108,32,99,104,97,114,97,99,116,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,79,100,100,32,104,101,120,97,100,101,99,105,109,97,108,32,110,117,109,98,101,114,115,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,66,97,100,32,111,99,116,97,108,32,99,104,97,114,97,99,116,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,71,101,110,101,114,97,108,32,73,80,67,32,101,114,114,111,114,0,73,80,67,32,97,99,99,101,112,116,32,99,97,108,108,32,102,97,105,108,101,100,0,73,80,67,32,99,111,110,110,101,99,116,32,99,97,108,108,32,102,97,105,108,101,100,0,73,110,118,97,108,105,100,32,73,80,67,32,114,101,115,112,111,110,115,101,0,73,110,118,97,108,105,100,32,118,97,108,117,101,32,112,97,115,115,101,100,32,116,111,32,73,80,67,0,73,110,99,111,109,112,108,101,116,101,32,108,105,110,101,32,112,97,115,115,101,100,32,116,111,32,73,80,67,0,76,105,110,101,32,112,97,115,115,101,100,32,116,111,32,73,80,67,32,116,111,111,32,108,111,110,103,0,78,101,115,116,101,100,32,73,80,67,32,99,111,109,109,97,110,100,115,0,78,111,32,100,97,116,97,32,99,97,108,108,98,97,99,107,32,105,110,32,73,80,67,0,78,111,32,105,110,113,117,105,114,101,32,99,97,108,108,98,97,99,107,32,105,110,32,73,80,67,0,78,111,116,32,97,110,32,73,80,67,32,115,101,114,118,101,114,0,78,111,116,32,97,110,32,73,80,67,32,99,108,105,101,110,116,0,80,114,111,98,108,101,109,32,115,116,97,114,116,105,110,103,32,73,80,67,32,115,101,114,118,101,114,0,73,80,67,32,114,101,97,100,32,101,114,114,111,114,0,73,80,67,32,119,114,105,116,101,32,101,114,114,111,114,0,84,111,111,32,109,117,99,104,32,100,97,116,97,32,102,111,114,32,73,80,67,32,108,97,121,101,114,0,85,110,101,120,112,101,99,116,101,100,32,73,80,67,32,99,111,109,109,97,110,100,0,85,110,107,110,111,119,110,32,73,80,67,32,99,111,109,109,97,110,100,0,73,80,67,32,115,121,110,116,97,120,32,101,114,114,111,114,0,73,80,67,32,99,97,108,108,32,104,97,115,32,98,101,101,110,32,99,97,110,99,101,108,108,101,100,0,78,111,32,105,110,112,117,116,32,115,111,117,114,99,101,32,102,111,114,32,73,80,67,0,78,111,32,111,117,116,112,117,116,32,115,111,117,114,99,101,32,102,111,114,32,73,80,67,0,73,80,67,32,112,97,114,97,109,101,116,101,114,32,101,114,114,111,114,0,85,110,107,110,111,119,110,32,73,80,67,32,105,110,113,117,105,114,101,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,50,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,51,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,52,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,53,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,54,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,55,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,56,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,57,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,48,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,49,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,50,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,51,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,52,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,53,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,54,0,83,121,115,116,101,109,32,101,114,114,111,114,32,119,47,111,32,101,114,114,110,111,0,85,110,107,110,111,119,110,32,115,121,115,116,101,109,32,101,114,114,111,114,0,69,110,100,32,111,102,32,102,105,108,101,0,85,110,107,110,111,119,110,32,101,114,114,111,114,32,99,111,100,101,0] /* Success\00General er */, "i8", ALLOC_NONE, 441176);
allocate([0,0,0,0,19,0,0,0,26,0,0,0,32,0,0,0,38,0,0,0,48,0,0,0,57,0,0,0,61,0,0,0,67,0,0,0,74,0,0,0,79,0,0,0,87,0,0,0,92,0,0,0,96,0,0,0,106,0,0,0,110,0,0,0,121,0,0,0,143,0,0,0,165,0,0,0,187,0,0,0,209,0,0,0], "i8", ALLOC_NONE, 445944);
allocate([0,0,0,0,8,0,0,0,22,0,0,0,37,0,0,0,63,0,0,0,92,0,0,0,117,0,0,0,132,0,0,0,147,0,0,0,161,0,0,0,175,0,0,0,190,0,0,0,205,0,0,0,230,0,0,0,243,0,0,0,2,1,0,0,16,1,0,0,27,1,0,0,41,1,0,0,63,1,0,0,79,1,0,0,109,1,0,0,129,1,0,0,153,1,0,0,179,1,0,0,204,1,0,0,222,1,0,0,231,1,0,0,241,1,0,0,1,2,0,0,14,2,0,0,28,2,0,0,47,2,0,0,71,2,0,0,91,2,0,0,107,2,0,0,122,2,0,0,138,2,0,0,154,2,0,0,171,2,0,0,185,2,0,0,201,2,0,0,228,2,0,0,245,2,0,0,9,3,0,0,28,3,0,0,45,3,0,0,65,3,0,0,77,3,0,0,91,3,0,0,104,3,0,0,120,3,0,0,139,3,0,0,158,3,0,0,178,3,0,0,198,3,0,0,212,3,0,0,234,3,0,0,254,3,0,0,6,4,0,0,10,4,0,0,24,4,0,0,47,4,0,0,55,4,0,0,70,4,0,0,83,4,0,0,98,4,0,0,127,4,0,0,156,4,0,0,179,4,0,0,195,4,0,0,211,4,0,0,231,4,0,0,244,4,0,0,3,5,0,0,20,5,0,0,36,5,0,0,53,5,0,0,70,5,0,0,82,5,0,0,95,5,0,0,126,5,0,0,147,5,0,0,167,5,0,0,188,5,0,0,210,5,0,0,222,5,0,0,237,5,0,0,245,5,0,0,2,6,0,0,11,6,0,0,29,6,0,0,40,6,0,0,51,6,0,0,65,6,0,0,85,6,0,0,98,6,0,0,110,6,0,0,124,6,0,0,136,6,0,0,156,6,0,0,175,6,0,0,195,6,0,0,217,6,0,0,241,6,0,0,6,7,0,0,29,7,0,0,50,7,0,0,65,7,0,0,76,7,0,0,96,7,0,0,109,7,0,0,122,7,0,0,139,7,0,0,161,7,0,0,175,7,0,0,195,7,0,0,211,7,0,0,225,7,0,0,236,7,0,0,0,8,0,0,23,8,0,0,44,8,0,0,59,8,0,0,80,8,0,0,102,8,0,0,118,8,0,0,132,8,0,0,148,8,0,0,162,8,0,0,179,8,0,0,191,8,0,0,223,8,0,0,243,8,0,0,255,8,0,0,9,9,0,0,21,9,0,0,39,9,0,0,60,9,0,0,72,9,0,0,87,9,0,0,104,9,0,0,119,9,0,0,135,9,0,0,149,9,0,0,168,9,0,0,187,9,0,0,210,9,0,0,231,9,0,0,255,9,0,0,17,10,0,0,39,10,0,0,62,10,0,0,80,10,0,0,92,10,0,0,110,10,0,0,127,10,0,0,141,10,0,0,158,10,0,0,173,10,0,0,196,10,0,0,215,10,0,0,228,10,0,0,247,10,0,0,15,11,0,0,42,11,0,0,55,11,0,0,80,11,0,0,91,11,0,0,110,11,0,0,122,11,0,0,138,11,0,0,156,11,0,0,183,11,0,0,190,11,0,0,205,11,0,0,221,11,0,0,237,11,0,0,1,12,0,0,14,12,0,0,26,12,0,0,43,12,0,0,55,12,0,0,72,12,0,0,86,12,0,0,102,12,0,0,129,12,0,0,155,12,0,0,182,12,0,0,199,12,0,0,240,12,0,0,16,13,0,0,54,13,0,0,81,13,0,0,111,13,0,0,141,13,0,0,169,13,0,0,206,13,0,0,230,13,0,0,22,14,0,0,64,14,0,0,104,14,0,0,140,14,0,0,158,14,0,0,181,14,0,0,205,14,0,0,226,14,0,0,254,14,0,0,28,15,0,0,56,15,0,0,76,15,0,0,100,15,0,0,127,15,0,0,145,15,0,0,163,15,0,0,191,15,0,0,206,15,0,0,222,15,0,0,250,15,0,0,17,16,0,0,37,16,0,0,54,16,0,0,82,16,0,0,106,16,0,0,131,16,0,0,151,16,0,0,171,16,0,0,197,16,0,0,223,16,0,0,249,16,0,0,19,17,0,0,45,17,0,0,71,17,0,0,97,17,0,0,123,17,0,0,149,17,0,0,176,17,0,0,203,17,0,0,230,17,0,0,1,18,0,0,28,18,0,0,55,18,0,0,82,18,0,0,105,18,0,0,126,18,0,0,138,18,0,0], "i8", ALLOC_NONE, 446028);
allocate(24, "i8", ALLOC_NONE, 447012);
allocate([58,103,101,110,101,114,105,99,47,109,112,105,104,45,97,100,100,49,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,115,117,98,49,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,109,117,108,49,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,109,117,108,50,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,109,117,108,51,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,108,115,104,105,102,116,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,114,115,104,105,102,116,46,99,0] /* :generic/mpih-add1.c */, "i8", ALLOC_NONE, 447036);
allocate(4, "i8", ALLOC_NONE, 447184);
allocate(20, "i8", ALLOC_NONE, 447188);
allocate([117,50,188,188,243,33,236,236,198,67,32,32,244,201,179,179,219,3,218,218,123,139,2,2,251,43,226,226,200,250,158,158,74,236,201,201,211,9,212,212,230,107,24,24,107,159,30,30,69,14,152,152,125,56,178,178,232,210,166,166,75,183,38,38,214,87,60,60,50,138,147,147,216,238,130,130,253,152,82,82,55,212,123,123,113,55,187,187,241,151,91,91,225,131,71,71,48,60,36,36,15,226,81,81,248,198,186,186,27,243,74,74,135,72,191,191,250,112,13,13,6,179,176,176,63,222,117,117,94,253,210,210,186,32,125,125,174,49,102,102,91,163,58,58,138,28,89,89,0,0,0,0,188,147,205,205,157,224,26,26,109,44,174,174,193,171,127,127,177,199,43,43,14,185,190,190,128,160,224,224,93,16,138,138,210,82,59,59,213,186,100,100,160,136,216,216,132,165,231,231,7,232,95,95,20,17,27,27,181,194,44,44,144,180,252,252,44,39,49,49,163,101,128,128,178,42,115,115,115,129,12,12,76,95,121,121,84,65,107,107,146,2,75,75,116,105,83,83,54,143,148,148,81,31,131,131,56,54,42,42,176,156,196,196,189,200,34,34,90,248,213,213,252,195,189,189,96,120,72,72,98,206,255,255,150,7,76,76,108,119,65,65,66,230,199,199,247,36,235,235,16,20,28,28,124,99,93,93,40,34,54,54,39,192,103,103,140,175,233,233,19,249,68,68,149,234,20,20,156,187,245,245,199,24,207,207,36,45,63,63,70,227,192,192,59,219,114,114,112,108,84,84,202,76,41,41,227,53,240,240,133,254,8,8,203,23,198,198,17,79,243,243,208,228,140,140,147,89,164,164,184,150,202,202,166,59,104,104,131,77,184,184,32,40,56,56,255,46,229,229,159,86,173,173,119,132,11,11,195,29,200,200,204,255,153,153,3,237,88,88,111,154,25,25,8,10,14,14,191,126,149,149,64,80,112,112,231,48,247,247,43,207,110,110,226,110,31,31,121,61,181,181,12,15,9,9,170,52,97,97,130,22,87,87,65,11,159,159,58,128,157,157,234,100,17,17,185,205,37,37,228,221,175,175,154,8,69,69,164,141,223,223,151,92,163,163,126,213,234,234,218,88,53,53,122,208,237,237,23,252,67,67,102,203,248,248,148,177,251,251,161,211,55,55,29,64,250,250,61,104,194,194,240,204,180,180,222,93,50,50,179,113,156,156,11,231,86,86,114,218,227,227,167,96,135,135,28,27,21,21,239,58,249,249,209,191,99,99,83,169,52,52,62,133,154,154,143,66,177,177,51,209,124,124,38,155,136,136,95,166,61,61,236,215,161,161,118,223,228,228,42,148,129,129,73,1,145,145,129,251,15,15,136,170,238,238,238,97,22,22,33,115,215,215,196,245,151,151,26,168,165,165,235,63,254,254,217,181,109,109,197,174,120,120,57,109,197,197,153,229,29,29,205,164,118,118,173,220,62,62,49,103,203,203,139,71,182,182,1,91,239,239,24,30,18,18,35,197,96,96,221,176,106,106,31,246,77,77,78,233,206,206,45,124,222,222,249,157,85,85,72,90,126,126,79,178,33,33,242,122,3,3,101,38,160,160,142,25,94,94,120,102,90,90,92,75,101,101,88,78,98,98,25,69,253,253,141,244,6,6,229,134,64,64,152,190,242,242,87,172,51,51,103,144,23,23,127,142,5,5,5,94,232,232,100,125,79,79,175,106,137,137,99,149,16,16,182,47,116,116,254,117,10,10,245,146,92,92,183,116,155,155,60,51,45,45,165,214,48,48,206,73,46,46,233,137,73,73,104,114,70,70,68,85,119,119,224,216,168,168,77,4,150,150,67,189,40,40,105,41,169,169,41,121,217,217,46,145,134,134,172,135,209,209,21,74,244,244,89,21,141,141,168,130,214,214,10,188,185,185,158,13,66,66,110,193,246,246,71,184,47,47,223,6,221,221,52,57,35,35,53,98,204,204,106,196,241,241,207,18,193,193,220,235,133,133,34,158,143,143,201,161,113,113,192,240,144,144,155,83,170,170,137,241,1,1,212,225,139,139,237,140,78,78,171,111,142,142,18,162,171,171,162,62,111,111,13,84,230,230,82,242,219,219,187,123,146,146,2,182,183,183,47,202,105,105,169,217,57,57,215,12,211,211,97,35,167,167,30,173,162,162,180,153,195,195,80,68,108,108,4,5,7,7,246,127,4,4,194,70,39,39,22,167,172,172,37,118,208,208,134,19,80,80,86,247,220,220,85,26,132,132,9,81,225,225,190,37,122,122,145,239,19,19,57,57,217,169,23,23,144,103,156,156,113,179,166,166,210,232,7,7,5,4,82,82,152,253,128,128,101,163,228,228,223,118,69,69,8,154,75,75,2,146,224,224,160,128,90,90,102,120,175,175,221,228,106,106,176,221,99,99,191,209,42,42,54,56,230,230,84,13,32,32,67,198,204,204,98,53,242,242,190,152,18,18,30,24,235,235,36,247,161,161,215,236,65,65,119,108,40,40,189,67,188,188,50,117,123,123,212,55,136,136,155,38,13,13,112,250,68,68,249,19,251,251,177,148,126,126,90,72,3,3,122,242,140,140,228,208,182,182,71,139,36,36,60,48,231,231,165,132,107,107,65,84,221,221,6,223,96,96,197,35,253,253,69,25,58,58,163,91,194,194,104,61,141,141,21,89,236,236,33,243,102,102,49,174,111,111,62,162,87,87,22,130,16,16,149,99,239,239,91,1,184,184,77,131,134,134,145,46,109,109,181,217,131,131,31,81,170,170,83,155,93,93,99,124,104,104,59,166,254,254,63,235,48,48,214,165,122,122,37,190,172,172,167,22,9,9,15,12,240,240,53,227,167,167,35,97,144,144,240,192,233,233,175,140,157,157,128,58,92,92,146,245,12,12,129,115,49,49,39,44,208,208,118,37,86,86,231,11,146,146,123,187,206,206,233,78,1,1,241,137,30,30,159,107,52,52,169,83,241,241,196,106,195,195,153,180,91,91,151,241,71,71,131,225,24,24,107,230,34,34,200,189,152,152,14,69,31,31,110,226,179,179,201,244,116,116,47,182,248,248,203,102,153,153,255,204,20,20,234,149,88,88,237,3,220,220,247,86,139,139,225,212,21,21,27,28,162,162,173,30,211,211,12,215,226,226,43,251,200,200,29,195,94,94,25,142,44,44,194,181,73,73,137,233,193,193,18,207,149,149,126,191,125,125,32,186,17,17,100,234,11,11,132,119,197,197,109,57,137,137,106,175,124,124,209,51,113,113,161,201,255,255,206,98,187,187,55,113,15,15,251,129,181,181,61,121,225,225,81,9,62,62,220,173,63,63,45,36,118,118,164,205,85,85,157,249,130,130,238,216,64,64,134,229,120,120,174,197,37,37,205,185,150,150,4,77,119,119,85,68,14,14,10,8,80,80,19,134,247,247,48,231,55,55,211,161,250,250,64,29,97,97,52,170,78,78,140,237,176,176,179,6,84,84,108,112,115,115,42,178,59,59,82,210,159,159,11,65,2,2,139,123,216,216,136,160,243,243,79,17,203,203,103,49,39,39,70,194,103,103,192,39,252,252,180,144,56,56,40,32,4,4,127,246,72,72,120,96,229,229,46,255,76,76,7,150,101,101,75,92,43,43,199,177,142,142,111,171,66,66,13,158,245,245,187,156,219,219,242,82,74,74,243,27,61,61,166,95,164,164,89,147,185,185,188,10,249,249,58,239,19,19,239,145,8,8,254,133,145,145,1,73,22,22,97,238,222,222,124,45,33,33,178,79,177,177,66,143,114,114,219,59,47,47,184,71,191,191,72,135,174,174,44,109,192,192,227,70,60,60,87,214,154,154,133,62,169,169,41,105,79,79,125,100,129,129,148,42,46,46,73,206,198,198,23,203,105,105,202,47,189,189,195,252,163,163,92,151,232,232,94,5,237,237,208,122,209,209,135,172,5,5,142,127,100,100,186,213,165,165,168,26,38,38,183,75,190,190,185,14,135,135,96,167,213,213,248,90,54,54,34,40,27,27,17,20,117,117,222,63,217,217,121,41,238,238,170,136,45,45,51,60,121,121,95,76,183,183,182,2,202,202,150,184,53,53,88,218,196,196,156,176,67,67,252,23,132,132,26,85,77,77,246,31,89,89,28,138,178,178,56,125,51,51,172,87,207,207,24,199,6,6,244,141,83,83,105,116,155,155,116,183,151,151,245,196,173,173,86,159,227,227,218,114,234,234,213,126,244,244,74,21,143,143,158,34,171,171,162,18,98,98,78,88,95,95,232,7,29,29,229,153,35,35,57,52,246,246,193,110,108,108,68,80,50,50,93,222,70,70,114,104,160,160,38,101,205,205,147,188,218,218,3,219,186,186,198,248,158,158,250,200,214,214,130,168,110,110,207,43,112,112,80,64,133,133,235,220,10,10,117,254,147,147,138,50,223,223,141,164,41,41,76,202,28,28,20,16,215,215,115,33,180,180,204,240,212,212,9,211,138,138,16,93,81,81,226,15,0,0,0,0,25,25,154,111,26,26,224,157,148,148,143,54,199,199,230,66,201,201,236,74,210,210,253,94,127,127,171,193,168,168,216,224,50,188,117,188,33,236,243,236,67,32,198,32,201,179,244,179,3,218,219,218,139,2,123,2,43,226,251,226,250,158,200,158,236,201,74,201,9,212,211,212,107,24,230,24,159,30,107,30,14,152,69,152,56,178,125,178,210,166,232,166,183,38,75,38,87,60,214,60,138,147,50,147,238,130,216,130,152,82,253,82,212,123,55,123,55,187,113,187,151,91,241,91,131,71,225,71,60,36,48,36,226,81,15,81,198,186,248,186,243,74,27,74,72,191,135,191,112,13,250,13,179,176,6,176,222,117,63,117,253,210,94,210,32,125,186,125,49,102,174,102,163,58,91,58,28,89,138,89,0,0,0,0,147,205,188,205,224,26,157,26,44,174,109,174,171,127,193,127,199,43,177,43,185,190,14,190,160,224,128,224,16,138,93,138,82,59,210,59,186,100,213,100,136,216,160,216,165,231,132,231,232,95,7,95,17,27,20,27,194,44,181,44,180,252,144,252,39,49,44,49,101,128,163,128,42,115,178,115,129,12,115,12,95,121,76,121,65,107,84,107,2,75,146,75,105,83,116,83,143,148,54,148,31,131,81,131,54,42,56,42,156,196,176,196,200,34,189,34,248,213,90,213,195,189,252,189,120,72,96,72,206,255,98,255,7,76,150,76,119,65,108,65,230,199,66,199,36,235,247,235,20,28,16,28,99,93,124,93,34,54,40,54,192,103,39,103,175,233,140,233,249,68,19,68,234,20,149,20,187,245,156,245,24,207,199,207,45,63,36,63,227,192,70,192,219,114,59,114,108,84,112,84,76,41,202,41,53,240,227,240,254,8,133,8,23,198,203,198,79,243,17,243,228,140,208,140,89,164,147,164,150,202,184,202,59,104,166,104,77,184,131,184,40,56,32,56,46,229,255,229,86,173,159,173,132,11,119,11,29,200,195,200,255,153,204,153,237,88,3,88,154,25,111,25,10,14,8,14,126,149,191,149,80,112,64,112,48,247,231,247,207,110,43,110,110,31,226,31,61,181,121,181,15,9,12,9,52,97,170,97,22,87,130,87,11,159,65,159,128,157,58,157,100,17,234,17,205,37,185,37,221,175,228,175,8,69,154,69,141,223,164,223,92,163,151,163,213,234,126,234,88,53,218,53,208,237,122,237,252,67,23,67,203,248,102,248,177,251,148,251,211,55,161,55,64,250,29,250,104,194,61,194,204,180,240,180,93,50,222,50,113,156,179,156,231,86,11,86,218,227,114,227,96,135,167,135,27,21,28,21,58,249,239,249,191,99,209,99,169,52,83,52,133,154,62,154,66,177,143,177,209,124,51,124,155,136,38,136,166,61,95,61,215,161,236,161,223,228,118,228,148,129,42,129,1,145,73,145,251,15,129,15,170,238,136,238,97,22,238,22,115,215,33,215,245,151,196,151,168,165,26,165,63,254,235,254,181,109,217,109,174,120,197,120,109,197,57,197,229,29,153,29,164,118,205,118,220,62,173,62,103,203,49,203,71,182,139,182,91,239,1,239,30,18,24,18,197,96,35,96,176,106,221,106,246,77,31,77,233,206,78,206,124,222,45,222,157,85,249,85,90,126,72,126,178,33,79,33,122,3,242,3,38,160,101,160,25,94,142,94,102,90,120,90,75,101,92,101,78,98,88,98,69,253,25,253,244,6,141,6,134,64,229,64,190,242,152,242,172,51,87,51,144,23,103,23,142,5,127,5,94,232,5,232,125,79,100,79,106,137,175,137,149,16,99,16,47,116,182,116,117,10,254,10,146,92,245,92,116,155,183,155,51,45,60,45,214,48,165,48,73,46,206,46,137,73,233,73,114,70,104,70,85,119,68,119,216,168,224,168,4,150,77,150,189,40,67,40,41,169,105,169,121,217,41,217,145,134,46,134,135,209,172,209,74,244,21,244,21,141,89,141,130,214,168,214,188,185,10,185,13,66,158,66,193,246,110,246,184,47,71,47,6,221,223,221,57,35,52,35,98,204,53,204,196,241,106,241,18,193,207,193,235,133,220,133,158,143,34,143,161,113,201,113,240,144,192,144,83,170,155,170,241,1,137,1,225,139,212,139,140,78,237,78,111,142,171,142,162,171,18,171,62,111,162,111,84,230,13,230,242,219,82,219,123,146,187,146,182,183,2,183,202,105,47,105,217,57,169,57,12,211,215,211,35,167,97,167,173,162,30,162,153,195,180,195,68,108,80,108,5,7,4,7,127,4,246,4,70,39,194,39,167,172,22,172,118,208,37,208,19,80,134,80,247,220,86,220,26,132,85,132,81,225,9,225,37,122,190,122,239,19,145,19,217,169,57,217,144,103,23,144,113,179,156,113,210,232,166,210,5,4,7,5,152,253,82,152,101,163,128,101,223,118,228,223,8,154,69,8,2,146,75,2,160,128,224,160,102,120,90,102,221,228,175,221,176,221,106,176,191,209,99,191,54,56,42,54,84,13,230,84,67,198,32,67,98,53,204,98,190,152,242,190,30,24,18,30,36,247,235,36,215,236,161,215,119,108,65,119,189,67,40,189,50,117,188,50,212,55,123,212,155,38,136,155,112,250,13,112,249,19,68,249,177,148,251,177,90,72,126,90,122,242,3,122,228,208,140,228,71,139,182,71,60,48,36,60,165,132,231,165,65,84,107,65,6,223,221,6,197,35,96,197,69,25,253,69,163,91,58,163,104,61,194,104,21,89,141,21,33,243,236,33,49,174,102,49,62,162,111,62,22,130,87,22,149,99,16,149,91,1,239,91,77,131,184,77,145,46,134,145,181,217,109,181,31,81,131,31,83,155,170,83,99,124,93,99,59,166,104,59,63,235,254,63,214,165,48,214,37,190,122,37,167,22,172,167,15,12,9,15,53,227,240,53,35,97,167,35,240,192,144,240,175,140,233,175,128,58,157,128,146,245,92,146,129,115,12,129,39,44,49,39,118,37,208,118,231,11,86,231,123,187,146,123,233,78,206,233,241,137,1,241,159,107,30,159,169,83,52,169,196,106,241,196,153,180,195,153,151,241,91,151,131,225,71,131,107,230,24,107,200,189,34,200,14,69,152,14,110,226,31,110,201,244,179,201,47,182,116,47,203,102,248,203,255,204,153,255,234,149,20,234,237,3,88,237,247,86,220,247,225,212,139,225,27,28,21,27,173,30,162,173,12,215,211,12,43,251,226,43,29,195,200,29,25,142,94,25,194,181,44,194,137,233,73,137,18,207,193,18,126,191,149,126,32,186,125,32,100,234,17,100,132,119,11,132,109,57,197,109,106,175,137,106,209,51,124,209,161,201,113,161,206,98,255,206,55,113,187,55,251,129,15,251,61,121,181,61,81,9,225,81,220,173,62,220,45,36,63,45,164,205,118,164,157,249,85,157,238,216,130,238,134,229,64,134,174,197,120,174,205,185,37,205,4,77,150,4,85,68,119,85,10,8,14,10,19,134,80,19,48,231,247,48,211,161,55,211,64,29,250,64,52,170,97,52,140,237,78,140,179,6,176,179,108,112,84,108,42,178,115,42,82,210,59,82,11,65,159,11,139,123,2,139,136,160,216,136,79,17,243,79,103,49,203,103,70,194,39,70,192,39,103,192,180,144,252,180,40,32,56,40,127,246,4,127,120,96,72,120,46,255,229,46,7,150,76,7,75,92,101,75,199,177,43,199,111,171,142,111,13,158,66,13,187,156,245,187,242,82,219,242,243,27,74,243,166,95,61,166,89,147,164,89,188,10,185,188,58,239,249,58,239,145,19,239,254,133,8,254,1,73,145,1,97,238,22,97,124,45,222,124,178,79,33,178,66,143,177,66,219,59,114,219,184,71,47,184,72,135,191,72,44,109,174,44,227,70,192,227,87,214,60,87,133,62,154,133,41,105,169,41,125,100,79,125,148,42,129,148,73,206,46,73,23,203,198,23,202,47,105,202,195,252,189,195,92,151,163,92,94,5,232,94,208,122,237,208,135,172,209,135,142,127,5,142,186,213,100,186,168,26,165,168,183,75,38,183,185,14,190,185,96,167,135,96,248,90,213,248,34,40,54,34,17,20,27,17,222,63,117,222,121,41,217,121,170,136,238,170,51,60,45,51,95,76,121,95,182,2,183,182,150,184,202,150,88,218,53,88,156,176,196,156,252,23,67,252,26,85,132,26,246,31,77,246,28,138,89,28,56,125,178,56,172,87,51,172,24,199,207,24,244,141,6,244,105,116,83,105,116,183,155,116,245,196,151,245,86,159,173,86,218,114,227,218,213,126,234,213,74,21,244,74,158,34,143,158,162,18,171,162,78,88,98,78,232,7,95,232,229,153,29,229,57,52,35,57,193,110,246,193,68,80,108,68,93,222,50,93,114,104,70,114,38,101,160,38,147,188,205,147,3,219,218,3,198,248,186,198,250,200,158,250,130,168,214,130,207,43,110,207,80,64,112,80,235,220,133,235,117,254,10,117,138,50,147,138,141,164,223,141,76,202,41,76,20,16,28,20,115,33,215,115,204,240,180,204,9,211,212,9,16,93,138,16,226,15,81,226,0,0,0,0,154,111,25,154,224,157,26,224,143,54,148,143,230,66,199,230,236,74,201,236,253,94,210,253,171,193,127,171,216,224,168,216], "i8", ALLOC_NONE, 447208);
allocate(4, "i8", ALLOC_NONE, 451304);
allocate(4, "i8", ALLOC_NONE, 451308);
allocate(4, "i8", ALLOC_NONE, 451312);
allocate([0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1], "i8", ALLOC_NONE, 451316);
allocate([55,206,57,58,207,245,250,211,55,119,194,171,27,45,197,90,158,103,176,92,66,55,163,79,64,39,130,211,190,155,188,153,157,142,17,213,21,115,15,191,126,28,45,214,123,196,0,199,107,27,140,183,69,144,161,33,190,177,110,178,180,110,54,106,47,171,72,87,121,110,148,188,210,118,163,198,200,194,73,101,238,248,15,83,125,222,141,70,29,10,115,213,198,77,208,76,219,187,57,41,80,70,186,169,232,38,149,172,4,227,94,190,240,213,250,161,154,81,45,106,226,140,239,99,34,238,134,154,184,194,137,192,246,46,36,67,170,3,30,165,164,208,242,156,186,97,192,131,77,106,233,155,80,21,229,143,214,91,100,186,249,162,38,40,225,58,58,167,134,149,169,75,233,98,85,239,211,239,47,199,218,247,82,247,105,111,4,63,89,10,250,119,21,169,228,128,1,134,176,135,173,230,9,155,147,229,62,59,90,253,144,233,151,215,52,158,217,183,240,44,81,139,43,2,58,172,213,150,125,166,125,1,214,62,207,209,40,45,125,124,207,37,159,31,155,184,242,173,114,180,214,90,76,245,136,90,113,172,41,224,230,165,25,224,253,172,176,71,155,250,147,237,141,196,211,232,204,87,59,40,41,102,213,248,40,46,19,121,145,1,95,120,85,96,117,237,68,14,150,247,140,94,211,227,212,109,5,21,186,109,244,136,37,97,161,3,189,240,100,5,21,158,235,195,162,87,144,60,236,26,39,151,42,7,58,169,155,109,63,27,245,33,99,30,251,102,156,245,25,243,220,38,40,217,51,117,245,253,85,177,130,52,86,3,187,60,186,138,17,119,81,40,248,217,10,194,103,81,204,171,95,146,173,204,81,23,232,77,142,220,48,56,98,88,157,55,145,249,32,147,194,144,122,234,206,123,62,251,100,206,33,81,50,190,79,119,126,227,182,168,70,61,41,195,105,83,222,72,128,230,19,100,16,8,174,162,36,178,109,221,253,45,133,105,102,33,7,9,10,70,154,179,221,192,69,100,207,222,108,88,174,200,32,28,221,247,190,91,64,141,88,27,127,1,210,204,187,227,180,107,126,106,162,221,69,255,89,58,68,10,53,62,213,205,180,188,168,206,234,114,187,132,100,250,174,18,102,141,71,111,60,191,99,228,155,210,158,93,47,84,27,119,194,174,112,99,78,246,141,13,14,116,87,19,91,231,113,22,114,248,93,125,83,175,8,203,64,64,204,226,180,78,106,70,210,52,132,175,21,1,40,4,176,225,29,58,152,149,180,159,184,6,72,160,110,206,130,59,63,111,130,171,32,53,75,29,26,1,248,39,114,39,177,96,21,97,220,63,147,231,43,121,58,187,189,37,69,52,225,57,136,160,75,121,206,81,183,201,50,47,201,186,31,160,126,200,28,224,246,209,199,188,195,17,1,207,199,170,232,161,73,135,144,26,154,189,79,212,203,222,218,208,56,218,10,213,42,195,57,3,103,54,145,198,124,49,249,141,79,43,177,224,183,89,158,247,58,187,245,67,255,25,213,242,156,69,217,39,44,34,151,191,42,252,230,21,113,252,145,15,37,21,148,155,97,147,229,250,235,156,182,206,89,100,168,194,209,168,186,18,94,7,193,182,12,106,5,227,101,80,210,16,66,164,3,203,14,110,236,224,59,219,152,22,190,160,152,76,100,233,120,50,50,149,31,159,223,146,211,224,43,52,160,211,30,242,113,137,65,116,10,27,140,52,163,75,32,113,190,197,216,50,118,195,141,159,53,223,46,47,153,155,71,111,11,230,29,241,227,15,84,218,76,229,145,216,218,30,207,121,98,206,111,126,62,205,102,177,24,22,5,29,44,253,197,210,143,132,153,34,251,246,87,243,35,245,35,118,50,166,49,53,168,147,2,205,204,86,98,129,240,172,181,235,117,90,151,54,22,110,204,115,210,136,146,98,150,222,208,73,185,129,27,144,80,76,20,86,198,113,189,199,198,230,10,20,122,50,6,208,225,69,154,123,242,195,253,83,170,201,0,15,168,98,226,191,37,187,246,210,189,53,5,105,18,113,34,2,4,178,124,207,203,182,43,156,118,205,192,62,17,83,211,227,64,22,96,189,171,56,240,173,71,37,156,32,56,186,118,206,70,247,197,161,175,119,96,96,117,32,78,254,203,133,216,141,232,138,176,249,170,122,126,170,249,76,92,194,72,25,140,138,251,2,228,106,195,1,249,225,235,214,105,248,212,144,160,222,92,166,45,37,9,63,159,230,8,194,50,97,78,183,91,226,119,206,227,223,143,87,230,114,195,58], "i8", ALLOC_NONE, 451380);
allocate([104,90,61,233,247,64,129,148,28,38,76,246,52,41,105,148,247,32,21,65,247,212,2,118,46,107,244,188,104,0,162,212,113,36,8,212,106,244,32,51,183,212,183,67,175,97,0,80,46,246,57,30,70,69,36,151,116,79,33,20,64,136,139,191,29,252,149,77,175,145,181,150,211,221,244,112,69,47,160,102,236,9,188,191,133,151,189,3,208,109,172,127,4,133,203,49,179,39,235,150,65,57,253,85,230,71,37,218,154,10,202,171,37,120,80,40,244,41,4,83,218,134,44,10,251,109,182,233,98,20,220,104,0,105,72,215,164,192,14,104,238,141,161,39,162,254,63,79,140,173,135,232,6,224,140,181,182,214,244,122,124,30,206,170,236,95,55,211,153,163,120,206,66,42,107,64,53,158,254,32,185,133,243,217,171,215,57,238,139,78,18,59,247,250,201,29,86,24,109,75,49,102,163,38,178,151,227,234,116,250,110,58,50,67,91,221,247,231,65,104,251,32,120,202,78,245,10,251,151,179,254,216,172,86,64,69,39,149,72,186,58,58,83,85,135,141,131,32,183,169,107,254,75,149,150,208,188,103,168,85,88,154,21,161,99,41,169,204,51,219,225,153,86,74,42,166,249,37,49,63,28,126,244,94,124,49,41,144,2,232,248,253,112,47,39,4,92,21,187,128,227,44,40,5,72,21,193,149,34,109,198,228,63,19,193,72,220,134,15,199,238,201,249,7,15,31,4,65,164,121,71,64,23,110,136,93,235,81,95,50,209,192,155,213,143,193,188,242,100,53,17,65,52,120,123,37,96,156,42,96,163,232,248,223,27,108,99,31,194,180,18,14,158,50,225,2,209,79,102,175,21,129,209,202,224,149,35,107,225,146,62,51,98,11,36,59,34,185,190,238,14,162,178,133,153,13,186,230,140,12,114,222,40,247,162,45,69,120,18,208,253,148,183,149,98,8,125,100,240,245,204,231,111,163,73,84,250,72,125,135,39,253,157,195,30,141,62,243,65,99,71,10,116,255,46,153,171,110,111,58,55,253,248,244,96,220,18,168,248,221,235,161,76,225,27,153,13,107,110,219,16,85,123,198,55,44,103,109,59,212,101,39,4,232,208,220,199,13,41,241,163,255,0,204,146,15,57,181,11,237,15,105,251,159,123,102,156,125,219,206,11,207,145,160,163,94,21,217,136,47,19,187,36,173,91,81,191,121,148,123,235,214,59,118,179,46,57,55,121,89,17,204,151,226,38,128,45,49,46,244,167,173,66,104,59,43,106,198,204,76,117,18,28,241,46,120,55,66,18,106,231,81,146,183,230,187,161,6,80,99,251,75,24,16,107,26,250,237,202,17,216,189,37,61,201,195,225,226,89,22,66,68,134,19,18,10,110,236,12,217,42,234,171,213,78,103,175,100,95,168,134,218,136,233,191,190,254,195,228,100,87,128,188,157,134,192,247,240,248,123,120,96,77,96,3,96,70,131,253,209,176,31,56,246,4,174,69,119,204,252,54,215,51,107,66,131,113,171,30,240,135,65,128,176,95,94,0,60,190,87,160,119,36,174,232,189,153,66,70,85,97,46,88,191,143,244,88,78,162,253,221,242,56,239,116,244,194,189,137,135,195,249,102,83,116,142,179,200,85,242,117,180,185,217,252,70,97,38,235,122,132,223,29,139,121,14,106,132,226,149,95,145,142,89,110,70,112,87,180,32,145,85,213,140,76,222,2,201,225,172,11,185,208,5,130,187,72,98,168,17,158,169,116,117,182,25,127,183,9,220,169,224,161,9,45,102,51,70,50,196,2,31,90,232,140,190,240,9,37,160,153,74,16,254,110,29,29,61,185,26,223,164,165,11,15,242,134,161,105,241,104,40,131,218,183,220,254,6,57,87,155,206,226,161,82,127,205,79,1,94,17,80,250,131,6,167,196,181,2,160,39,208,230,13,39,140,248,154,65,134,63,119,6,76,96,195,181,6,168,97,40,122,23,240,224,134,245,192,170,88,96,0,98,125,220,48,215,158,230,17,99,234,56,35,148,221,194,83,52,22,194,194,86,238,203,187,222,182,188,144,161,125,252,235,118,29,89,206,9,228,5,111,136,1,124,75,61,10,114,57,36,124,146,124,95,114,227,134,185,157,77,114,180,91,193,26,252,184,158,211,120,85,84,237,181,165,252,8,211,124,61,216,196,15,173,77,94,239,80,30,248,230,97,177,217,20,133,162,60,19,81,108,231,199,213,111,196,78,225,86,206,191,42,54,55,200,198,221,52,50,154,215,18,130,99,146,142,250,14,103,224,0,96,64], "i8", ALLOC_NONE, 452404);
allocate([233,112,122,75,68,41,179,181,46,9,117,219,35,38,25,196,176,166,110,173,125,223,167,73,184,96,238,156,102,178,237,143,113,140,170,236,255,23,154,105,108,82,100,86,225,158,177,194,165,2,54,25,41,76,9,117,64,19,89,160,62,58,24,228,154,152,84,63,101,157,66,91,214,228,143,107,214,63,247,153,7,156,210,161,245,48,232,239,230,56,45,77,193,93,37,240,134,32,221,76,38,235,112,132,198,233,130,99,94,204,30,2,63,107,104,9,201,239,186,62,20,24,151,60,161,112,106,107,132,53,127,104,134,226,160,82,5,83,156,183,55,7,80,170,28,132,7,62,92,174,222,127,236,68,125,142,184,242,22,87,55,218,58,176,13,12,80,240,4,31,28,240,255,179,0,2,26,245,12,174,178,116,181,60,88,122,131,37,189,33,9,220,249,19,145,209,246,47,169,124,115,71,50,148,1,71,245,34,129,229,229,58,220,218,194,55,52,118,181,200,167,221,243,154,70,97,68,169,14,3,208,15,62,199,200,236,65,30,117,164,153,205,56,226,47,14,234,59,161,187,128,50,49,179,62,24,56,139,84,78,8,185,109,79,3,13,66,111,191,4,10,246,144,18,184,44,121,124,151,36,114,176,121,86,175,137,175,188,31,119,154,222,16,8,147,217,18,174,139,179,46,63,207,220,31,114,18,85,36,113,107,46,230,221,26,80,135,205,132,159,24,71,88,122,23,218,8,116,188,154,159,188,140,125,75,233,58,236,122,236,250,29,133,219,102,67,9,99,210,195,100,196,71,24,28,239,8,217,21,50,55,59,67,221,22,186,194,36,67,77,161,18,81,196,101,42,2,0,148,80,221,228,58,19,158,248,223,113,85,78,49,16,214,119,172,129,155,25,17,95,241,86,53,4,107,199,163,215,59,24,17,60,9,165,36,89,237,230,143,242,250,251,241,151,44,191,186,158,110,60,21,30,112,69,227,134,177,111,233,234,10,94,14,134,179,42,62,90,28,231,31,119,250,6,61,78,185,220,101,41,15,29,231,153,214,137,62,128,37,200,102,82,120,201,76,46,106,179,16,156,186,14,21,198,120,234,226,148,83,60,252,165,244,45,10,30,167,78,247,242,61,43,29,54,15,38,57,25,96,121,194,25,8,167,35,82,182,18,19,247,110,254,173,235,102,31,195,234,149,69,188,227,131,200,123,166,209,55,127,177,40,255,140,1,239,221,50,195,165,90,108,190,133,33,88,101,2,152,171,104,15,165,206,238,59,149,47,219,173,125,239,42,132,47,110,91,40,182,33,21,112,97,7,41,117,71,221,236,16,21,159,97,48,168,204,19,150,189,97,235,30,254,52,3,207,99,3,170,144,92,115,181,57,162,112,76,11,158,158,213,20,222,170,203,188,134,204,238,167,44,98,96,171,92,171,156,110,132,243,178,175,30,139,100,202,240,189,25,185,105,35,160,80,187,90,101,50,90,104,64,179,180,42,60,213,233,158,49,247,184,33,192,25,11,84,155,153,160,95,135,126,153,247,149,168,125,61,98,154,136,55,248,119,45,227,151,95,147,237,17,129,18,104,22,41,136,53,14,214,31,230,199,161,223,222,150,153,186,88,120,165,132,245,87,99,114,34,27,255,195,131,155,150,70,194,26,235,10,179,205,84,48,46,83,228,72,217,143,40,49,188,109,239,242,235,88,234,255,198,52,97,237,40,254,115,60,124,238,217,20,74,93,227,183,100,232,20,93,16,66,224,19,62,32,182,226,238,69,234,171,170,163,21,79,108,219,208,79,203,250,66,244,66,199,181,187,106,239,29,59,79,101,5,33,205,65,158,121,30,216,199,77,133,134,106,71,75,228,80,98,129,61,242,161,98,207,70,38,141,91,160,131,136,252,163,182,199,193,195,36,21,127,146,116,203,105,11,138,132,71,133,178,146,86,0,191,91,9,157,72,25,173,116,177,98,20,0,14,130,35,42,141,66,88,234,245,85,12,62,244,173,29,97,112,63,35,146,240,114,51,65,126,147,141,241,236,95,214,219,59,34,108,89,55,222,124,96,116,238,203,167,242,133,64,110,50,119,206,132,128,7,166,158,80,248,25,85,216,239,232,53,151,217,97,170,167,105,169,194,6,12,197,252,171,4,90,220,202,11,128,46,122,68,158,132,52,69,195,5,103,213,253,201,158,30,14,211,219,115,219,205,136,85,16,121,218,95,103,64,67,103,227,101,52,196,197,216,56,62,113,158,248,40,61,32,255,109,241,231,33,62,21,74,61,176,143,43,159,227,230,247,173,131,219], "i8", ALLOC_NONE, 453428);
allocate([166,11,49,209,172,181,223,152,219,114,253,47,183,223,26,208,237,175,225,184,150,126,38,106,69,144,124,186,153,127,44,241,71,153,161,36,247,108,145,179,226,242,1,8,22,252,142,133,216,32,105,99,105,78,87,113,163,254,88,164,126,61,147,244,143,116,149,13,88,182,142,114,88,205,139,113,238,74,21,130,29,164,84,123,181,89,90,194,57,213,48,156,19,96,242,42,35,176,209,197,240,133,96,40,24,121,65,202,239,56,219,184,176,220,121,142,14,24,58,96,139,14,158,108,62,138,30,176,193,119,21,215,39,75,49,189,218,47,175,120,96,92,96,85,243,37,85,230,148,171,85,170,98,152,72,87,64,20,232,99,106,57,202,85,182,16,171,42,52,92,204,180,206,232,65,17,175,134,84,161,147,233,114,124,17,20,238,179,42,188,111,99,93,197,169,43,246,49,24,116,22,62,92,206,30,147,135,155,51,186,214,175,92,207,36,108,129,83,50,122,119,134,149,40,152,72,143,59,175,185,75,107,27,232,191,196,147,33,40,102,204,9,216,97,145,169,33,251,96,172,124,72,50,128,236,93,93,93,132,239,177,117,133,233,2,35,38,220,136,27,101,235,129,62,137,35,197,172,150,211,243,111,109,15,57,66,244,131,130,68,11,46,4,32,132,164,74,240,200,105,94,155,31,158,66,104,198,33,154,108,233,246,97,156,12,103,240,136,211,171,210,160,81,106,104,47,84,216,40,167,15,150,163,51,81,171,108,11,239,110,228,59,122,19,80,240,59,186,152,42,251,126,29,101,241,161,118,1,175,57,62,89,202,102,136,14,67,130,25,134,238,140,180,159,111,69,195,165,132,125,190,94,139,59,216,117,111,224,115,32,193,133,159,68,26,64,166,106,193,86,98,170,211,78,6,119,63,54,114,223,254,27,61,2,155,66,36,215,208,55,72,18,10,208,211,234,15,219,155,192,241,73,201,114,83,7,123,27,153,128,216,121,212,37,247,222,232,246,26,80,254,227,59,76,121,182,189,224,108,151,186,6,192,4,182,79,169,193,196,96,159,64,194,158,92,94,99,36,106,25,175,111,251,104,181,83,108,62,235,178,57,19,111,236,82,59,31,81,252,109,44,149,48,155,68,69,129,204,9,189,94,175,4,208,227,190,253,74,51,222,7,40,15,102,179,75,46,25,87,168,203,192,15,116,200,69,57,95,11,210,219,251,211,185,189,192,121,85,10,50,96,26,198,0,161,214,121,114,44,64,254,37,159,103,204,163,31,251,248,233,165,142,248,34,50,219,223,22,117,60,21,107,97,253,200,30,80,47,171,82,5,173,250,181,61,50,96,135,35,253,72,123,49,83,130,223,0,62,187,87,92,158,160,140,111,202,46,86,135,26,219,105,23,223,246,168,66,213,195,255,126,40,198,50,103,172,115,85,79,140,176,39,91,105,200,88,202,187,93,163,255,225,160,17,240,184,152,61,250,16,184,131,33,253,108,181,252,74,91,211,209,45,121,228,83,154,101,69,248,182,188,73,142,210,144,151,251,75,218,242,221,225,51,126,203,164,65,19,251,98,232,198,228,206,218,202,32,239,1,76,119,54,254,158,126,208,180,31,241,43,77,218,219,149,152,145,144,174,113,142,173,234,160,213,147,107,208,209,142,208,224,37,199,175,47,91,60,142,183,148,117,142,251,226,246,143,100,43,18,242,18,184,136,136,28,240,13,144,160,94,173,79,28,195,143,104,145,241,207,209,173,193,168,179,24,34,47,47,119,23,14,190,254,45,117,234,161,31,2,139,15,204,160,229,232,116,111,181,214,243,172,24,153,226,137,206,224,79,168,180,183,224,19,253,129,59,196,124,217,168,173,210,102,162,95,22,5,119,149,128,20,115,204,147,119,20,26,33,101,32,173,230,134,250,181,119,245,66,84,199,207,53,157,251,12,175,205,235,160,137,62,123,211,27,65,214,73,126,30,174,45,14,37,0,94,179,113,32,187,0,104,34,175,224,184,87,155,54,100,36,30,185,9,240,29,145,99,85,170,166,223,89,137,67,193,120,127,83,90,217,162,91,125,32,197,185,229,2,118,3,38,131,169,207,149,98,104,25,200,17,65,74,115,78,202,45,71,179,74,169,20,123,82,0,81,27,21,41,83,154,63,87,15,214,228,198,155,188,118,164,96,43,0,116,230,129,181,111,186,8,31,233,27,87,107,236,150,242,21,217,13,42,33,101,99,182,182,249,185,231,46,5,52,255,100,86,133,197,93,45,176,83,161,143,159,169,153,71,186,8,106,7,133,110], "i8", ALLOC_NONE, 454452);
allocate(4, "i8", ALLOC_NONE, 455476);
allocate(4, "i8", ALLOC_NONE, 455480);
allocate(4, "i8", ALLOC_NONE, 455484);
allocate(4, "i8", ALLOC_NONE, 455488);
allocate(4, "i8", ALLOC_NONE, 455492);
allocate(4, "i8", ALLOC_NONE, 455496);
allocate([117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,115,0] /* unknown option -- %s */, "i8", ALLOC_NONE, 455500);
allocate([117,110,107,110,111,119,110,32,111,112,116,105,111,110,32,45,45,32,37,99,0] /* unknown option -- %c */, "i8", ALLOC_NONE, 455524);
allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 455548);
allocate(4, "i8", ALLOC_NONE, 455596);
allocate([255,255,255,255], "i8", ALLOC_NONE, 455600);
allocate([0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,45,1,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 455604);
allocate(4, "i8", ALLOC_NONE, 455708);
allocate(4, "i8", ALLOC_NONE, 455712);
allocate(4, "i8", ALLOC_NONE, 455716);
allocate(4, "i8", ALLOC_NONE, 455720);
allocate(4, "i8", ALLOC_NONE, 455724);
allocate(4, "i8", ALLOC_NONE, 455728);
allocate(4, "i8", ALLOC_NONE, 455732);
allocate(4, "i8", ALLOC_NONE, 455736);
allocate([1,2,4,8,16,32,64,128,77,154,121,242,169,31,62,124,248,189,55,110,220,245,167,3,6,12,24,48,96,192,205,215,227,139,91,182,33,66,132,69,138,89,178,41,82,164,5,10,20,40,80,160,13,26,52,104,208,237,151,99,198,193,207,211,235,155,123,246,161,15,30,60,120,240,173,23,46,92,184,61,122,244,165,7,14,28,56,112,224,141,87,174,17,34,68,136,93,186,57,114,228,133,71,142,81,162,9,18,36,72,144,109,218,249,191,51,102,204,213,231,131,75,150,97,194,201,223,243,171,27,54,108,216,253,183,35,70,140,85,170,25,50,100,200,221,247,163,11,22,44,88,176,45,90,180,37,74,148,101,202,217,255,179,43,86,172,21,42,84,168,29,58,116,232,157,119,238,145,111,222,241,175,19,38,76,152,125,250,185,63,126,252,181,39,78,156,117,234,153,127,254,177,47,94,188,53,106,212,229,135,67,134,65,130,73,146,105,210,233,159,115,230,129,79,158,113,226,137,95,190,49,98,196,197,199,195,203,219,251,187,59,118,236,149,103,206,209,239,147,107,214,225,143,83,166,1,2,4,8,16,32,64,128,77,154,121,242,169,31,62,124,248,189,55,110,220,245,167,3,6,12,24,48,96,192,205,215,227,139,91,182,33,66,132,69,138,89,178,41,82,164,5,10,20,40,80,160,13,26,52,104,208,237,151,99,198,193,207,211,235,155,123,246,161,15,30,60,120,240,173,23,46,92,184,61,122,244,165,7,14,28,56,112,224,141,87,174,17,34,68,136,93,186,57,114,228,133,71,142,81,162,9,18,36,72,144,109,218,249,191,51,102,204,213,231,131,75,150,97,194,201,223,243,171,27,54,108,216,253,183,35,70,140,85,170,25,50,100,200,221,247,163,11,22,44,88,176,45,90,180,37,74,148,101,202,217,255,179,43,86,172,21,42,84,168,29,58,116,232,157,119,238,145,111,222,241,175,19,38,76,152,125,250,185,63,126,252,181,39,78,156,117,234,153,127,254,177,47,94,188,53,106,212,229,135,67,134,65,130,73,146,105,210,233,159,115,230,129,79,158,113,226,137,95,190,49,98,196,197,199,195,203] /* \01\02\04\08\10 @\80 */, "i8", ALLOC_NONE, 455740);
allocate([7,0,0,0,13,0,0,0,112,0,0,0,125,0,0,0,0,0,0,0,106,0,0,0,11,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,140,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,111,0,0,0,104,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,132,0,0,0,17,0,0,0,14,0,0,0,27,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,118,0,0,0,36,0,0,0,0,0,0,0,138,0,0,0,119,0,0,0,4,0,0,0,22,0,0,0,5,0,0,0,127,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,24,0,0,0,31,0,0,0,122,0,0,0,74,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,126,0,0,0,114,0,0,0,23,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,61,0,0,0,19,0,0,0,2,0,0,0,8,0,0,0,46,0,0,0,67,0,0,0,0,0,0,0,12,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,28,0,0,0,63,0,0,0,60,0,0,0,88,0,0,0,0,0,0,0,128,0,0,0,20,0,0,0,90,0,0,0,0,0,0,0,108,0,0,0,134,0,0,0,25,0,0,0,0,0,0,0,6,0,0,0,95,0,0,0,139,0,0,0,1,0,0,0,96,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,123,0,0,0,107,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,3,0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,62,0,0,0,116,0,0,0,129,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,18,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 456232);
allocate([107,128,0,0,81,128,0,0,127,128,0,0,47,128,0,0,49,128,0,0,104,128,0,0,0,128,0,0,82,128,0,0,11,128,0,0,21,128,0,0,6,128,0,0,138,128,0,0,86,128,0,0,1,128,0,0,36,128,0,0,95,128,0,0,19,128,0,0,35,128,0,0,139,128,0,0,80,128,0,0,97,128,0,0,51,128,0,0,48,128,0,0,75,128,0,0,65,128,0,0,102,128,0,0,134,128,0,0,37,128,0,0,91,128,0,0,126,128,0,0,122,128,0,0,66,128,0,0,109,128,0,0,32,128,0,0,117,128,0,0,28,128,0,0,29,128,0,0,69,128,0,0,83,128,0,0,94,128,0,0,98,128,0,0,63,128,0,0,87,128,0,0,43,128,0,0,22,128,0,0,54,128,0,0,55,128,0,0,56,128,0,0,62,128,0,0,136,128,0,0,78,128,0,0,53,128,0,0,10,128,0,0,14,128,0,0,140,128,0,0,76,128,0,0,16,128,0,0,17,128,0,0,18,128,0,0,93,128,0,0,79,128,0,0,131,128,0,0,92,128,0,0,88,128,0,0,89,128,0,0,119,128,0,0,84,128,0,0,4,128,0,0,128,128,0,0,23,128,0,0,114,128,0,0,68,128,0,0,33,128,0,0,13,128,0,0,106,128,0,0,103,128,0,0,12,128,0,0,118,128,0,0,57,128,0,0,58,128,0,0,61,128,0,0,60,128,0,0,59,128,0,0,45,128,0,0,121,128,0,0,130,128,0,0,137,128,0,0,100,128,0,0,30,128,0,0,67,128,0,0,116,128,0,0,90,128,0,0,115,128,0,0,125,128,0,0,101,128,0,0,105,128,0,0,108,128,0,0,5,128,0,0,2,128,0,0,3,128,0,0,72,128,0,0,74,128,0,0,73,128,0,0,24,128,0,0,26,128,0,0,77,128,0,0,50,128,0,0,96,128,0,0,124,128,0,0,133,128,0,0,132,128,0,0,25,128,0,0,41,128,0,0,42,128,0,0,7,128,0,0,46,128,0,0,129,128,0,0,135,128,0,0,99,128,0,0,70,128,0,0,52,128,0,0,120,128,0,0,34,128,0,0,85,128,0,0,64,128,0,0,20,128,0,0], "i8", ALLOC_NONE, 456796);
allocate(4, "i8", ALLOC_NONE, 457300);
allocate(4, "i8", ALLOC_NONE, 457304);
allocate(4, "i8", ALLOC_NONE, 457308);
allocate(4, "i8", ALLOC_NONE, 457312);
allocate([1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1] /* \01\01\02\02\02\02\0 */, "i8", ALLOC_NONE, 457316);
allocate(16, "i8", ALLOC_NONE, 457332);
allocate(12, "i8", ALLOC_NONE, 457348);
allocate(12, "i8", ALLOC_NONE, 457360);
allocate(24, "i8", ALLOC_NONE, 457372);
allocate(4, "i8", ALLOC_NONE, 457396);
allocate(8, "i8", ALLOC_NONE, 457400);
allocate(12, "i8", ALLOC_NONE, 457408);
allocate([0,0,0,0,192,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 457420);
allocate(4, "i8", ALLOC_NONE, 457888);
allocate(4, "i8", ALLOC_NONE, 457892);
allocate(4, "i8", ALLOC_NONE, 457896);
allocate(4, "i8", ALLOC_NONE, 457900);
allocate(4, "i8", ALLOC_NONE, 457904);
allocate(4, "i8", ALLOC_NONE, 457908);
allocate(4, "i8", ALLOC_NONE, 457912);
allocate(4, "i8", ALLOC_NONE, 457916);
allocate(4, "i8", ALLOC_NONE, 457920);
allocate(4, "i8", ALLOC_NONE, 457924);
allocate(4, "i8", ALLOC_NONE, 457928);
allocate(4, "i8", ALLOC_NONE, 457932);
allocate(4, "i8", ALLOC_NONE, 457936);
allocate(4, "i8", ALLOC_NONE, 457940);
allocate(4, "i8", ALLOC_NONE, 457944);
allocate(4, "i8", ALLOC_NONE, 457948);
allocate([72,132,7,0,180,250,6,0,46,1,0,0,1,0,0,0,32,132,7,0,180,250,6,0,47,1,0,0,1,0,0,0,112,132,7,0,180,250,6,0,48,1,0,0,1,0,0,0,248,131,7,0,180,250,6,0,45,1,0,0,0,0,0,0,208,131,7,0,180,250,6,0,1,0,0,0,1,0,0,0,168,131,7,0,180,250,6,0,3,0,0,0,0,0,0,0,128,131,7,0,168,132,7,0,2,0,0,0,1,0,0,0,48,131,7,0,160,132,7,0,8,0,0,0,1,0,0,0,88,131,7,0,164,132,7,0,11,0,0,0,1,0,0,0,224,130,7,0,152,132,7,0,10,0,0,0,1,0,0,0,8,131,7,0,156,132,7,0,9,0,0,0,1,0,0,0,184,130,7,0,180,250,6,0,6,0,0,0,0,0,0,0,144,130,7,0,180,250,6,0,50,1,0,0,0,0,0,0,104,130,7,0,180,250,6,0,51,1,0,0,0,0,0,0,64,130,7,0,180,250,6,0,49,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 457952);
allocate(4, "i8", ALLOC_NONE, 458208);
allocate(4, "i8", ALLOC_NONE, 458212);
allocate(4, "i8", ALLOC_NONE, 458216);
allocate(4, "i8", ALLOC_NONE, 458220);
allocate(4, "i8", ALLOC_NONE, 458224);
allocate(4, "i8", ALLOC_NONE, 458228);
allocate(160, "i8", ALLOC_NONE, 458232);
allocate(4, "i8", ALLOC_NONE, 458392);
allocate(4, "i8", ALLOC_NONE, 458396);
allocate(4, "i8", ALLOC_NONE, 458400);
allocate([0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45], "i8", ALLOC_NONE, 458404);
allocate([112,97,98,103,110,113,0] /* pabgnq\00 */, "i8", ALLOC_NONE, 459428);
allocate(4, "i8", ALLOC_NONE, 459436);
allocate(4, "i8", ALLOC_NONE, 459440);
allocate([136,136,7,0,184,250,6,0,4,0,0,0,0,0,0,0,172,135,7,0,184,250,6,0,46,1,0,0,0,0,0,0,164,134,7,0,100,137,7,0,2,0,0,0,1,0,0,0,180,136,7,0,184,250,6,0,45,1,0,0,0,0,0,0,216,135,7,0,184,250,6,0,3,0,0,0,0,0,0,0,56,137,7,0,124,137,7,0,7,0,0,0,1,0,0,0,12,137,7,0,116,137,7,0,8,0,0,0,1,0,0,0,224,136,7,0,108,137,7,0,9,0,0,0,1,0,0,0,120,134,7,0,184,250,6,0,10,0,0,0,0,0,0,0,76,134,7,0,184,250,6,0,47,1,0,0,0,0,0,0,40,135,7,0,184,250,6,0,48,1,0,0,0,0,0,0,252,134,7,0,184,250,6,0,49,1,0,0,0,0,0,0,208,134,7,0,184,250,6,0,50,1,0,0,0,0,0,0,128,135,7,0,184,250,6,0,51,1,0,0,0,0,0,0,84,135,7,0,184,250,6,0,53,1,0,0,0,0,0,0,92,136,7,0,184,250,6,0,54,1,0,0,0,0,0,0,48,136,7,0,184,250,6,0,55,1,0,0,0,0,0,0,4,136,7,0,184,250,6,0,56,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 459444);
allocate(8, "i8", ALLOC_NONE, 459748);
allocate(4, "i8", ALLOC_NONE, 459756);
allocate([124,36,36,36,125,114,115,116,117,118,119,120,121,122,123,36,36,36,36,36,36,36,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,36,36,36,36,36,36,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,0] /* |$$$}rstuvwxyz{$$$$$ */, "i8", ALLOC_NONE, 459760);
allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_NONE, 459844);
allocate([112,0,112,112,44,0,44,44,179,0,179,179,192,0,192,192,228,0,228,228,87,0,87,87,234,0,234,234,174,0,174,174,35,0,35,35,107,0,107,107,69,0,69,69,165,0,165,165,237,0,237,237,79,0,79,79,29,0,29,29,146,0,146,146,134,0,134,134,175,0,175,175,124,0,124,124,31,0,31,31,62,0,62,62,220,0,220,220,94,0,94,94,11,0,11,11,166,0,166,166,57,0,57,57,213,0,213,213,93,0,93,93,217,0,217,217,90,0,90,90,81,0,81,81,108,0,108,108,139,0,139,139,154,0,154,154,251,0,251,251,176,0,176,176,116,0,116,116,43,0,43,43,240,0,240,240,132,0,132,132,223,0,223,223,203,0,203,203,52,0,52,52,118,0,118,118,109,0,109,109,169,0,169,169,209,0,209,209,4,0,4,4,20,0,20,20,58,0,58,58,222,0,222,222,17,0,17,17,50,0,50,50,156,0,156,156,83,0,83,83,242,0,242,242,254,0,254,254,207,0,207,207,195,0,195,195,122,0,122,122,36,0,36,36,232,0,232,232,96,0,96,96,105,0,105,105,170,0,170,170,160,0,160,160,161,0,161,161,98,0,98,98,84,0,84,84,30,0,30,30,224,0,224,224,100,0,100,100,16,0,16,16,0,0,0,0,163,0,163,163,117,0,117,117,138,0,138,138,230,0,230,230,9,0,9,9,221,0,221,221,135,0,135,135,131,0,131,131,205,0,205,205,144,0,144,144,115,0,115,115,246,0,246,246,157,0,157,157,191,0,191,191,82,0,82,82,216,0,216,216,200,0,200,200,198,0,198,198,129,0,129,129,111,0,111,111,19,0,19,19,99,0,99,99,233,0,233,233,167,0,167,167,159,0,159,159,188,0,188,188,41,0,41,41,249,0,249,249,47,0,47,47,180,0,180,180,120,0,120,120,6,0,6,6,231,0,231,231,113,0,113,113,212,0,212,212,171,0,171,171,136,0,136,136,141,0,141,141,114,0,114,114,185,0,185,185,248,0,248,248,172,0,172,172,54,0,54,54,42,0,42,42,60,0,60,60,241,0,241,241,64,0,64,64,211,0,211,211,187,0,187,187,67,0,67,67,21,0,21,21,173,0,173,173,119,0,119,119,128,0,128,128,130,0,130,130,236,0,236,236,39,0,39,39,229,0,229,229,133,0,133,133,53,0,53,53,12,0,12,12,65,0,65,65,239,0,239,239,147,0,147,147,25,0,25,25,33,0,33,33,14,0,14,14,78,0,78,78,101,0,101,101,189,0,189,189,184,0,184,184,143,0,143,143,235,0,235,235,206,0,206,206,48,0,48,48,95,0,95,95,197,0,197,197,26,0,26,26,225,0,225,225,202,0,202,202,71,0,71,71,61,0,61,61,1,0,1,1,214,0,214,214,86,0,86,86,77,0,77,77,13,0,13,13,102,0,102,102,204,0,204,204,45,0,45,45,18,0,18,18,32,0,32,32,177,0,177,177,153,0,153,153,76,0,76,76,194,0,194,194,126,0,126,126,5,0,5,5,183,0,183,183,49,0,49,49,23,0,23,23,215,0,215,215,88,0,88,88,97,0,97,97,27,0,27,27,28,0,28,28,15,0,15,15,22,0,22,22,24,0,24,24,34,0,34,34,68,0,68,68,178,0,178,178,181,0,181,181,145,0,145,145,8,0,8,8,168,0,168,168,252,0,252,252,80,0,80,80,208,0,208,208,125,0,125,125,137,0,137,137,151,0,151,151,91,0,91,91,149,0,149,149,255,0,255,255,210,0,210,210,196,0,196,196,72,0,72,72,247,0,247,247,219,0,219,219,3,0,3,3,218,0,218,218,63,0,63,63,148,0,148,148,92,0,92,92,2,0,2,2,74,0,74,74,51,0,51,51,103,0,103,103,243,0,243,243,127,0,127,127,226,0,226,226,155,0,155,155,38,0,38,38,55,0,55,55,59,0,59,59,150,0,150,150,75,0,75,75,190,0,190,190,46,0,46,46,121,0,121,121,140,0,140,140,110,0,110,110,142,0,142,142,245,0,245,245,182,0,182,182,253,0,253,253,89,0,89,89,152,0,152,152,106,0,106,106,70,0,70,70,186,0,186,186,37,0,37,37,66,0,66,66,162,0,162,162,250,0,250,250,7,0,7,7,85,0,85,85,238,0,238,238,10,0,10,10,73,0,73,73,104,0,104,104,56,0,56,56,164,0,164,164,40,0,40,40,123,0,123,123,201,0,201,201,193,0,193,193,227,0,227,227,244,0,244,244,199,0,199,199,158,0,158,158], "i8", ALLOC_NONE, 459912);
allocate([56,56,0,56,65,65,0,65,22,22,0,22,118,118,0,118,217,217,0,217,147,147,0,147,96,96,0,96,242,242,0,242,114,114,0,114,194,194,0,194,171,171,0,171,154,154,0,154,117,117,0,117,6,6,0,6,87,87,0,87,160,160,0,160,145,145,0,145,247,247,0,247,181,181,0,181,201,201,0,201,162,162,0,162,140,140,0,140,210,210,0,210,144,144,0,144,246,246,0,246,7,7,0,7,167,167,0,167,39,39,0,39,142,142,0,142,178,178,0,178,73,73,0,73,222,222,0,222,67,67,0,67,92,92,0,92,215,215,0,215,199,199,0,199,62,62,0,62,245,245,0,245,143,143,0,143,103,103,0,103,31,31,0,31,24,24,0,24,110,110,0,110,175,175,0,175,47,47,0,47,226,226,0,226,133,133,0,133,13,13,0,13,83,83,0,83,240,240,0,240,156,156,0,156,101,101,0,101,234,234,0,234,163,163,0,163,174,174,0,174,158,158,0,158,236,236,0,236,128,128,0,128,45,45,0,45,107,107,0,107,168,168,0,168,43,43,0,43,54,54,0,54,166,166,0,166,197,197,0,197,134,134,0,134,77,77,0,77,51,51,0,51,253,253,0,253,102,102,0,102,88,88,0,88,150,150,0,150,58,58,0,58,9,9,0,9,149,149,0,149,16,16,0,16,120,120,0,120,216,216,0,216,66,66,0,66,204,204,0,204,239,239,0,239,38,38,0,38,229,229,0,229,97,97,0,97,26,26,0,26,63,63,0,63,59,59,0,59,130,130,0,130,182,182,0,182,219,219,0,219,212,212,0,212,152,152,0,152,232,232,0,232,139,139,0,139,2,2,0,2,235,235,0,235,10,10,0,10,44,44,0,44,29,29,0,29,176,176,0,176,111,111,0,111,141,141,0,141,136,136,0,136,14,14,0,14,25,25,0,25,135,135,0,135,78,78,0,78,11,11,0,11,169,169,0,169,12,12,0,12,121,121,0,121,17,17,0,17,127,127,0,127,34,34,0,34,231,231,0,231,89,89,0,89,225,225,0,225,218,218,0,218,61,61,0,61,200,200,0,200,18,18,0,18,4,4,0,4,116,116,0,116,84,84,0,84,48,48,0,48,126,126,0,126,180,180,0,180,40,40,0,40,85,85,0,85,104,104,0,104,80,80,0,80,190,190,0,190,208,208,0,208,196,196,0,196,49,49,0,49,203,203,0,203,42,42,0,42,173,173,0,173,15,15,0,15,202,202,0,202,112,112,0,112,255,255,0,255,50,50,0,50,105,105,0,105,8,8,0,8,98,98,0,98,0,0,0,0,36,36,0,36,209,209,0,209,251,251,0,251,186,186,0,186,237,237,0,237,69,69,0,69,129,129,0,129,115,115,0,115,109,109,0,109,132,132,0,132,159,159,0,159,238,238,0,238,74,74,0,74,195,195,0,195,46,46,0,46,193,193,0,193,1,1,0,1,230,230,0,230,37,37,0,37,72,72,0,72,153,153,0,153,185,185,0,185,179,179,0,179,123,123,0,123,249,249,0,249,206,206,0,206,191,191,0,191,223,223,0,223,113,113,0,113,41,41,0,41,205,205,0,205,108,108,0,108,19,19,0,19,100,100,0,100,155,155,0,155,99,99,0,99,157,157,0,157,192,192,0,192,75,75,0,75,183,183,0,183,165,165,0,165,137,137,0,137,95,95,0,95,177,177,0,177,23,23,0,23,244,244,0,244,188,188,0,188,211,211,0,211,70,70,0,70,207,207,0,207,55,55,0,55,94,94,0,94,71,71,0,71,148,148,0,148,250,250,0,250,252,252,0,252,91,91,0,91,151,151,0,151,254,254,0,254,90,90,0,90,172,172,0,172,60,60,0,60,76,76,0,76,3,3,0,3,53,53,0,53,243,243,0,243,35,35,0,35,184,184,0,184,93,93,0,93,106,106,0,106,146,146,0,146,213,213,0,213,33,33,0,33,68,68,0,68,81,81,0,81,198,198,0,198,125,125,0,125,57,57,0,57,131,131,0,131,220,220,0,220,170,170,0,170,124,124,0,124,119,119,0,119,86,86,0,86,5,5,0,5,27,27,0,27,164,164,0,164,21,21,0,21,52,52,0,52,30,30,0,30,28,28,0,28,248,248,0,248,82,82,0,82,32,32,0,32,20,20,0,20,233,233,0,233,189,189,0,189,221,221,0,221,228,228,0,228,161,161,0,161,224,224,0,224,138,138,0,138,241,241,0,241,214,214,0,214,122,122,0,122,187,187,0,187,227,227,0,227,64,64,0,64,79,79,0,79], "i8", ALLOC_NONE, 460936);
allocate([0,112,112,112,0,130,130,130,0,44,44,44,0,236,236,236,0,179,179,179,0,39,39,39,0,192,192,192,0,229,229,229,0,228,228,228,0,133,133,133,0,87,87,87,0,53,53,53,0,234,234,234,0,12,12,12,0,174,174,174,0,65,65,65,0,35,35,35,0,239,239,239,0,107,107,107,0,147,147,147,0,69,69,69,0,25,25,25,0,165,165,165,0,33,33,33,0,237,237,237,0,14,14,14,0,79,79,79,0,78,78,78,0,29,29,29,0,101,101,101,0,146,146,146,0,189,189,189,0,134,134,134,0,184,184,184,0,175,175,175,0,143,143,143,0,124,124,124,0,235,235,235,0,31,31,31,0,206,206,206,0,62,62,62,0,48,48,48,0,220,220,220,0,95,95,95,0,94,94,94,0,197,197,197,0,11,11,11,0,26,26,26,0,166,166,166,0,225,225,225,0,57,57,57,0,202,202,202,0,213,213,213,0,71,71,71,0,93,93,93,0,61,61,61,0,217,217,217,0,1,1,1,0,90,90,90,0,214,214,214,0,81,81,81,0,86,86,86,0,108,108,108,0,77,77,77,0,139,139,139,0,13,13,13,0,154,154,154,0,102,102,102,0,251,251,251,0,204,204,204,0,176,176,176,0,45,45,45,0,116,116,116,0,18,18,18,0,43,43,43,0,32,32,32,0,240,240,240,0,177,177,177,0,132,132,132,0,153,153,153,0,223,223,223,0,76,76,76,0,203,203,203,0,194,194,194,0,52,52,52,0,126,126,126,0,118,118,118,0,5,5,5,0,109,109,109,0,183,183,183,0,169,169,169,0,49,49,49,0,209,209,209,0,23,23,23,0,4,4,4,0,215,215,215,0,20,20,20,0,88,88,88,0,58,58,58,0,97,97,97,0,222,222,222,0,27,27,27,0,17,17,17,0,28,28,28,0,50,50,50,0,15,15,15,0,156,156,156,0,22,22,22,0,83,83,83,0,24,24,24,0,242,242,242,0,34,34,34,0,254,254,254,0,68,68,68,0,207,207,207,0,178,178,178,0,195,195,195,0,181,181,181,0,122,122,122,0,145,145,145,0,36,36,36,0,8,8,8,0,232,232,232,0,168,168,168,0,96,96,96,0,252,252,252,0,105,105,105,0,80,80,80,0,170,170,170,0,208,208,208,0,160,160,160,0,125,125,125,0,161,161,161,0,137,137,137,0,98,98,98,0,151,151,151,0,84,84,84,0,91,91,91,0,30,30,30,0,149,149,149,0,224,224,224,0,255,255,255,0,100,100,100,0,210,210,210,0,16,16,16,0,196,196,196,0,0,0,0,0,72,72,72,0,163,163,163,0,247,247,247,0,117,117,117,0,219,219,219,0,138,138,138,0,3,3,3,0,230,230,230,0,218,218,218,0,9,9,9,0,63,63,63,0,221,221,221,0,148,148,148,0,135,135,135,0,92,92,92,0,131,131,131,0,2,2,2,0,205,205,205,0,74,74,74,0,144,144,144,0,51,51,51,0,115,115,115,0,103,103,103,0,246,246,246,0,243,243,243,0,157,157,157,0,127,127,127,0,191,191,191,0,226,226,226,0,82,82,82,0,155,155,155,0,216,216,216,0,38,38,38,0,200,200,200,0,55,55,55,0,198,198,198,0,59,59,59,0,129,129,129,0,150,150,150,0,111,111,111,0,75,75,75,0,19,19,19,0,190,190,190,0,99,99,99,0,46,46,46,0,233,233,233,0,121,121,121,0,167,167,167,0,140,140,140,0,159,159,159,0,110,110,110,0,188,188,188,0,142,142,142,0,41,41,41,0,245,245,245,0,249,249,249,0,182,182,182,0,47,47,47,0,253,253,253,0,180,180,180,0,89,89,89,0,120,120,120,0,152,152,152,0,6,6,6,0,106,106,106,0,231,231,231,0,70,70,70,0,113,113,113,0,186,186,186,0,212,212,212,0,37,37,37,0,171,171,171,0,66,66,66,0,136,136,136,0,162,162,162,0,141,141,141,0,250,250,250,0,114,114,114,0,7,7,7,0,185,185,185,0,85,85,85,0,248,248,248,0,238,238,238,0,172,172,172,0,10,10,10,0,54,54,54,0,73,73,73,0,42,42,42,0,104,104,104,0,60,60,60,0,56,56,56,0,241,241,241,0,164,164,164,0,64,64,64,0,40,40,40,0,211,211,211,0,123,123,123,0,187,187,187,0,201,201,201,0,67,67,67,0,193,193,193,0,21,21,21,0,227,227,227,0,173,173,173,0,244,244,244,0,119,119,119,0,199,199,199,0,128,128,128,0,158,158,158], "i8", ALLOC_NONE, 461960);
allocate([224,224,224,0,5,5,5,0,88,88,88,0,217,217,217,0,103,103,103,0,78,78,78,0,129,129,129,0,203,203,203,0,201,201,201,0,11,11,11,0,174,174,174,0,106,106,106,0,213,213,213,0,24,24,24,0,93,93,93,0,130,130,130,0,70,70,70,0,223,223,223,0,214,214,214,0,39,39,39,0,138,138,138,0,50,50,50,0,75,75,75,0,66,66,66,0,219,219,219,0,28,28,28,0,158,158,158,0,156,156,156,0,58,58,58,0,202,202,202,0,37,37,37,0,123,123,123,0,13,13,13,0,113,113,113,0,95,95,95,0,31,31,31,0,248,248,248,0,215,215,215,0,62,62,62,0,157,157,157,0,124,124,124,0,96,96,96,0,185,185,185,0,190,190,190,0,188,188,188,0,139,139,139,0,22,22,22,0,52,52,52,0,77,77,77,0,195,195,195,0,114,114,114,0,149,149,149,0,171,171,171,0,142,142,142,0,186,186,186,0,122,122,122,0,179,179,179,0,2,2,2,0,180,180,180,0,173,173,173,0,162,162,162,0,172,172,172,0,216,216,216,0,154,154,154,0,23,23,23,0,26,26,26,0,53,53,53,0,204,204,204,0,247,247,247,0,153,153,153,0,97,97,97,0,90,90,90,0,232,232,232,0,36,36,36,0,86,86,86,0,64,64,64,0,225,225,225,0,99,99,99,0,9,9,9,0,51,51,51,0,191,191,191,0,152,152,152,0,151,151,151,0,133,133,133,0,104,104,104,0,252,252,252,0,236,236,236,0,10,10,10,0,218,218,218,0,111,111,111,0,83,83,83,0,98,98,98,0,163,163,163,0,46,46,46,0,8,8,8,0,175,175,175,0,40,40,40,0,176,176,176,0,116,116,116,0,194,194,194,0,189,189,189,0,54,54,54,0,34,34,34,0,56,56,56,0,100,100,100,0,30,30,30,0,57,57,57,0,44,44,44,0,166,166,166,0,48,48,48,0,229,229,229,0,68,68,68,0,253,253,253,0,136,136,136,0,159,159,159,0,101,101,101,0,135,135,135,0,107,107,107,0,244,244,244,0,35,35,35,0,72,72,72,0,16,16,16,0,209,209,209,0,81,81,81,0,192,192,192,0,249,249,249,0,210,210,210,0,160,160,160,0,85,85,85,0,161,161,161,0,65,65,65,0,250,250,250,0,67,67,67,0,19,19,19,0,196,196,196,0,47,47,47,0,168,168,168,0,182,182,182,0,60,60,60,0,43,43,43,0,193,193,193,0,255,255,255,0,200,200,200,0,165,165,165,0,32,32,32,0,137,137,137,0,0,0,0,0,144,144,144,0,71,71,71,0,239,239,239,0,234,234,234,0,183,183,183,0,21,21,21,0,6,6,6,0,205,205,205,0,181,181,181,0,18,18,18,0,126,126,126,0,187,187,187,0,41,41,41,0,15,15,15,0,184,184,184,0,7,7,7,0,4,4,4,0,155,155,155,0,148,148,148,0,33,33,33,0,102,102,102,0,230,230,230,0,206,206,206,0,237,237,237,0,231,231,231,0,59,59,59,0,254,254,254,0,127,127,127,0,197,197,197,0,164,164,164,0,55,55,55,0,177,177,177,0,76,76,76,0,145,145,145,0,110,110,110,0,141,141,141,0,118,118,118,0,3,3,3,0,45,45,45,0,222,222,222,0,150,150,150,0,38,38,38,0,125,125,125,0,198,198,198,0,92,92,92,0,211,211,211,0,242,242,242,0,79,79,79,0,25,25,25,0,63,63,63,0,220,220,220,0,121,121,121,0,29,29,29,0,82,82,82,0,235,235,235,0,243,243,243,0,109,109,109,0,94,94,94,0,251,251,251,0,105,105,105,0,178,178,178,0,240,240,240,0,49,49,49,0,12,12,12,0,212,212,212,0,207,207,207,0,140,140,140,0,226,226,226,0,117,117,117,0,169,169,169,0,74,74,74,0,87,87,87,0,132,132,132,0,17,17,17,0,69,69,69,0,27,27,27,0,245,245,245,0,228,228,228,0,14,14,14,0,115,115,115,0,170,170,170,0,241,241,241,0,221,221,221,0,89,89,89,0,20,20,20,0,108,108,108,0,146,146,146,0,84,84,84,0,208,208,208,0,120,120,120,0,112,112,112,0,227,227,227,0,73,73,73,0,128,128,128,0,80,80,80,0,167,167,167,0,246,246,246,0,119,119,119,0,147,147,147,0,134,134,134,0,131,131,131,0,42,42,42,0,199,199,199,0,91,91,91,0,233,233,233,0,238,238,238,0,143,143,143,0,1,1,1,0,61,61,61,0], "i8", ALLOC_NONE, 462984);
allocate(4, "i8", ALLOC_NONE, 464008);
allocate(4, "i8", ALLOC_NONE, 464012);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 464016);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 464056);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 464096);
allocate([169,117,103,243,179,198,232,244,4,219,253,123,163,251,118,200,154,74,146,211,128,230,120,107,228,69,221,125,209,232,56,75,13,214,198,50,53,216,152,253,24,55,247,113,236,241,108,225,67,48,117,15,55,248,38,27,250,135,19,250,148,6,72,63,242,94,208,186,139,174,48,91,132,138,84,0,223,188,35,157,25,109,91,193,61,177,89,14,243,128,174,93,162,210,130,213,99,160,1,132,131,7,46,20,217,181,81,144,155,44,124,163,166,178,235,115,165,76,190,84,22,146,12,116,227,54,97,81,192,56,140,176,58,189,245,90,115,252,44,96,37,98,11,150,187,108,78,66,137,247,107,16,83,124,106,40,180,39,241,140,225,19,230,149,189,156,69,199,226,36,244,70,182,59,102,112,204,202,149,227,3,133,86,203,212,17,28,208,30,147,215,184,251,166,195,131,142,32,181,255,233,159,207,119,191,195,186,204,234,3,119,111,57,8,175,191,51,64,201,231,98,43,113,226,129,121,121,12,9,170,173,130,36,65,205,58,249,234,216,185,229,228,197,154,185,164,77,151,68,126,8,218,134,122,231,23,161,102,29,148,170,161,237,29,6,61,112,240,178,222,210,179,65,11,123,114,160,167,17,28,49,239,194,209,39,83,144,62,32,143,246,51,96,38,255,95,150,236,92,118,177,42,171,73,158,129,156,136,82,238,27,33,95,196,147,26,10,235,239,217,145,197,133,57,73,153,238,205,45,173,79,49,143,139,59,1,71,24,135,35,109,221,70,31,214,78,62,45,105,249,100,72,42,79,206,242,203,101,47,142,252,120,151,92,5,88,122,25,172,141,127,229,213,152,26,87,75,103,14,127,167,5,90,100,40,175,20,99,63,182,41,254,136,245,60,183,76,60,2,165,184,206,218,233,176,104,23,68,85,224,31,77,138,67,125,105,87,41,199,46,141,172,116,21,183,89,196,168,159,10,114,158,126,110,21,71,34,223,18,52,88,53,7,106,153,207,52,220,110,34,80,201,222,192,104,155,101,137,188,212,219,237,248,171,200,18,168,162,43,13,64,82,220,187,254,2,50,47,164,169,202,215,16,97,33,30,240,180,211,80,93,4,15,246,0,194,111,22,157,37,54,134,66,86,74,85,94,9,193,190,224,145] /* \A9ug\F3\B3\C6\E8\F4 */, "i8", ALLOC_NONE, 464136);
allocate([48,33,48,9,6,5,43,14,3,2,26,5,0,4,20] /* 0!0\09\06\05+\0E\03\ */, "i8", ALLOC_NONE, 464648);
allocate([48,33,48,9,6,5,43,36,3,2,1,5,0,4,20] /* 0!0\09\06\05+$\03\02 */, "i8", ALLOC_NONE, 464664);
allocate([48,32,48,12,6,8,42,134,72,134,247,13,2,5,5,0,4,16] /* 0 0\0C\06\08_\86H\86 */, "i8", ALLOC_NONE, 464680);
allocate([48,49,48,13,6,9,96,134,72,1,101,3,4,2,1,5,0,4,32] /* 010\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 464700);
allocate([48,45,48,13,6,9,96,134,72,1,101,3,4,2,4,5,0,4,28] /* 0-0\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 464720);
allocate([48,41,48,13,6,9,43,6,1,4,1,218,71,12,2,5,0,4,24] /* 0)0\0D\06\09+\06\01\ */, "i8", ALLOC_NONE, 464740);
allocate([48,32,48,12,6,8,42,134,72,134,247,13,2,4,5,0,4,16] /* 0 0\0C\06\08_\86H\86 */, "i8", ALLOC_NONE, 464760);
allocate(4, "i8", ALLOC_NONE, 464780);
allocate([97,109,98,105,103,117,111,117,115,32,111,112,116,105,111,110,32,45,45,32,37,46,42,115,0] /* ambiguous option --  */, "i8", ALLOC_NONE, 464784);
allocate(4, "i8", ALLOC_NONE, 464812);
allocate(4, "i8", ALLOC_NONE, 464816);
allocate(4, "i8", ALLOC_NONE, 464820);
allocate([0,0,0,0,0,0,0,0,348,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,8,0,0,0], ["i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 464824);
allocate(8, "i8", ALLOC_NONE, 464856);
allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 464864);
allocate([4,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 464888);
allocate([0,0,0,0,46,0,0,0,154,0,0,0,1,0,0,0,270,0,0,0,0,0,0,0], ["i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 464896);
allocate([87,72,73,82,76,80,79,79,76,0] /* WHIRLPOOL\00 */, "i8", ALLOC_NONE, 464920);
allocate([142,149,155,117,218,227,19,218,140,244,247,40,20,252,20,63,143,119,121,198,235,159,127,161,114,153,174,173,182,136,144,24,80,29,40,158,73,0,247,228,51,27,153,222,196,181,67,58,199,211,41,238,182,221,38,84,94,150,229,91,135,75,233,9,0] /* \8E\95\9Bu\DA\E3\13\ */, "i8", ALLOC_NONE, 464932);
allocate([36,141,106,97,210,6,56,184,229,192,38,147,12,62,96,57,163,60,228,89,100,255,33,103,246,236,237,212,25,219,6,193,0] /* $\8Dja\D2\068\B8\E5\ */, "i8", ALLOC_NONE, 465000);
allocate([115,101,99,112,50,50,52,114,49,0] /* secp224r1\00 */, "i8", ALLOC_NONE, 465036);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 465048);
allocate([83,101,114,112,101,110,116,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-256 test dec */, "i8", ALLOC_NONE, 465056);
allocate([84,87,79,70,73,83,72,0] /* TWOFISH\00 */, "i8", ALLOC_NONE, 465092);
allocate([115,101,99,112,49,57,50,114,49,0] /* secp192r1\00 */, "i8", ALLOC_NONE, 465100);
allocate([116,114,97,110,115,105,101,110,116,45,107,101,121,0] /* transient-key\00 */, "i8", ALLOC_NONE, 465112);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,49,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 465128);
allocate([112,114,105,109,101,49,57,50,118,49,0] /* prime192v1\00 */, "i8", ALLOC_NONE, 465152);
allocate([84,73,71,69,82,49,57,50,0] /* TIGER192\00 */, "i8", ALLOC_NONE, 465164);
allocate([37,109,0] /* %m\00 */, "i8", ALLOC_NONE, 465176);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,53,46,51,46,49,46,49,0] /* 1.2.840.10045.3.1.1\ */, "i8", ALLOC_NONE, 465180);
allocate([102,105,112,115,49,56,54,45,51,32,112,114,105,109,101,32,113,0] /* fips186-3 prime q\00 */, "i8", ALLOC_NONE, 465200);
allocate([63,79,84,82,58,65,65,73,0] /* ?OTR:AAI\00 */, "i8", ALLOC_NONE, 465220);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,102,111,117,110,100,0] /* algorithm not found\ */, "i8", ALLOC_NONE, 465232);
allocate([109,112,105,95,115,99,97,110,32,102,97,105,108,101,100,58,32,37,115,10,0] /* mpi_scan failed: %s\ */, "i8", ALLOC_NONE, 465252);
allocate([84,114,105,112,108,101,45,68,69,83,32,83,83,76,101,97,121,32,116,101,115,116,32,102,97,105,108,101,100,32,111,110,32,100,101,99,114,121,112,116,105,111,110,46,0] /* Triple-DES SSLeay te */, "i8", ALLOC_NONE, 465276);
allocate([99,105,112,104,101,114,32,37,100,32,110,111,116,32,102,111,117,110,100,10,0] /* cipher %d not found\ */, "i8", ALLOC_NONE, 465324);
allocate([41,10,0] /* )\0A\00 */, "i8", ALLOC_NONE, 465348);
allocate([109,112,105,95,112,114,105,110,116,32,102,97,105,108,101,100,58,32,37,115,10,0] /* mpi_print failed: %s */, "i8", ALLOC_NONE, 465352);
allocate([83,72,65,53,49,50,0] /* SHA512\00 */, "i8", ALLOC_NONE, 465376);
allocate([40,37,115,37,109,41,0] /* (%s%m)\00 */, "i8", ALLOC_NONE, 465384);
allocate([101,99,99,32,103,101,116,32,112,97,114,97,109,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecc get param: Faile */, "i8", ALLOC_NONE, 465392);
allocate([48,120,55,100,100,101,51,56,53,100,53,54,54,51,51,50,101,99,99,48,101,97,98,102,97,57,99,102,55,56,50,50,102,100,102,50,48,57,102,55,48,48,50,52,97,53,55,98,49,97,97,48,48,48,99,53,53,98,56,56,49,102,56,49,49,49,98,50,100,99,100,101,52,57,52,97,53,102,52,56,53,101,53,98,99,97,52,98,100,56,56,97,50,55,54,51,97,101,100,49,99,97,50,98,50,102,97,56,102,48,53,52,48,54,55,56,99,100,49,101,48,102,51,97,100,56,48,56,57,50,0] /* 0x7dde385d566332ecc0 */, "i8", ALLOC_NONE, 465444);
allocate([102,111,114,107,32,100,101,116,101,99,116,105,111,110,32,102,97,105,108,101,100,0] /* fork detection faile */, "i8", ALLOC_NONE, 465576);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,110,111,110,99,101,32,98,117,102,102,101,114,32,108,111,99,107,58,32,37,115,10,0] /* failed to release th */, "i8", ALLOC_NONE, 465600);
allocate([100,97,116,97,45,53,48,32,107,101,121,45,50,48,0] /* data-50 key-20\00 */, "i8", ALLOC_NONE, 465648);
allocate([101,108,103,32,32,103,61,32,0] /* elg  g= \00 */, "i8", ALLOC_NONE, 465664);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 465676);
allocate([78,73,83,84,32,80,45,49,57,50,0] /* NIST P-192\00 */, "i8", ALLOC_NONE, 465684);
allocate([117,115,101,45,102,105,112,115,49,56,54,45,50,0] /* use-fips186-2\00 */, "i8", ALLOC_NONE, 465696);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,50,51,0] /* 0.3.4401.5.3.1.9.23\ */, "i8", ALLOC_NONE, 465712);
allocate([37,48,50,88,0] /* %02X\00 */, "i8", ALLOC_NONE, 465732);
allocate([99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,112,111,111,108,32,111,102,32,37,117,32,98,121,116,101,115,10,0] /* can't allocate memor */, "i8", ALLOC_NONE, 465740);
allocate([79,104,104,104,104,32,106,101,101,101,101,58,32,0] /* Ohhhh jeeee: \00 */, "i8", ALLOC_NONE, 465780);
allocate([118,101,114,115,105,111,110,58,37,115,58,10,0] /* version:%s:\0A\00 */, "i8", ALLOC_NONE, 465796);
allocate([37,115,101,114,114,111,114,32,105,110,32,108,105,98,103,99,114,121,112,116,44,32,102,105,108,101,32,37,115,44,32,108,105,110,101,32,37,100,37,115,37,115,58,32,37,115,10,0] /* %serror in libgcrypt */, "i8", ALLOC_NONE, 465812);
allocate([48,120,56,49,97,101,101,52,98,100,100,56,50,101,100,57,54,52,53,97,50,49,51,50,50,101,57,99,52,99,54,97,57,51,56,53,101,100,57,102,55,48,98,53,100,57,49,54,99,49,98,52,51,98,54,50,101,101,102,52,100,48,48,57,56,101,102,102,51,98,49,102,55,56,101,50,100,48,100,52,56,100,53,48,100,49,54,56,55,98,57,51,98,57,55,100,53,102,55,99,54,100,53,48,52,55,52,48,54,97,53,101,54,56,56,98,51,53,50,50,48,57,98,99,98,57,102,56,50,50,0] /* 0x81aee4bdd82ed9645a */, "i8", ALLOC_NONE, 465860);
allocate([115,109,112,0] /* smp\00 */, "i8", ALLOC_NONE, 465992);
allocate([109,112,105,99,111,100,101,114,46,99,0] /* mpicoder.c\00 */, "i8", ALLOC_NONE, 465996);
allocate([117,115,105,110,103,32,100,117,109,109,121,32,112,117,98,108,105,99,32,107,101,121,32,102,117,110,99,116,105,111,110,0] /* using dummy public k */, "i8", ALLOC_NONE, 466008);
allocate([83,72,65,50,50,52,0] /* SHA224\00 */, "i8", ALLOC_NONE, 466040);
allocate([48,120,97,97,100,100,57,100,98,56,100,98,101,57,99,52,56,98,51,102,100,52,101,54,97,101,51,51,99,57,102,99,48,55,99,98,51,48,56,100,98,51,98,51,99,57,100,50,48,101,100,54,54,51,57,99,99,97,55,48,51,51,48,56,55,48,53,53,51,101,53,99,52,49,52,99,97,57,50,54,49,57,52,49,56,54,54,49,49,57,55,102,97,99,49,48,52,55,49,100,98,49,100,51,56,49,48,56,53,100,100,97,100,100,98,53,56,55,57,54,56,50,57,99,97,57,48,48,54,57,0] /* 0xaadd9db8dbe9c48b3f */, "i8", ALLOC_NONE, 466048);
allocate([99,117,114,118,101,0] /* curve\00 */, "i8", ALLOC_NONE, 466180);
allocate([40,110,97,109,101,32,37,115,41,0] /* (name %s)\00 */, "i8", ALLOC_NONE, 466188);
allocate([97,98,99,100,101,102,103,104,98,99,100,101,102,103,104,105,99,100,101,102,103,104,105,106,100,101,102,103,104,105,106,107,101,102,103,104,105,106,107,108,102,103,104,105,106,107,108,109,103,104,105,106,107,108,109,110,104,105,106,107,108,109,110,111,105,106,107,108,109,110,111,112,106,107,108,109,110,111,112,113,107,108,109,110,111,112,113,114,108,109,110,111,112,113,114,115,109,110,111,112,113,114,115,116,110,111,112,113,114,115,116,117,0] /* abcdefghbcdefghicdef */, "i8", ALLOC_NONE, 466200);
allocate([97,98,99,100,98,99,100,101,99,100,101,102,100,101,102,103,101,102,103,104,102,103,104,105,103,104,105,106,104,105,106,107,105,106,107,108,106,107,108,109,107,108,109,110,108,109,110,111,109,110,111,112,110,111,112,113,0] /* abcdbcdecdefdefgefgh */, "i8", ALLOC_NONE, 466316);
allocate([48,120,51,100,102,57,49,54,49,48,97,56,51,52,52,49,99,97,101,97,57,56,54,51,98,99,50,100,101,100,53,100,53,97,97,56,50,53,51,97,97,49,48,97,50,101,102,49,99,57,56,98,57,97,99,56,98,53,55,102,49,49,49,55,97,55,50,98,102,50,99,55,98,57,101,55,99,49,97,99,52,100,55,55,102,99,57,52,99,97,100,99,48,56,51,101,54,55,57,56,52,48,53,48,98,55,53,101,98,97,101,53,100,100,50,56,48,57,98,100,54,51,56,48,49,54,102,55,50,51,0] /* 0x3df91610a83441caea */, "i8", ALLOC_NONE, 466376);
allocate([105,100,120,32,62,61,32,53,0] /* idx _= 5\00 */, "i8", ALLOC_NONE, 466508);
allocate([52,170,151,60,212,196,218,164,246,30,235,43,219,173,39,49,101,52,1,111,0] /* 4\AA\97_\D4\C4\DA\A4 */, "i8", ALLOC_NONE, 466520);
allocate([83,101,114,112,101,110,116,45,49,57,50,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-192 test dec */, "i8", ALLOC_NONE, 466544);
allocate([83,72,65,49,0] /* SHA1\00 */, "i8", ALLOC_NONE, 466580);
allocate([48,120,55,56,51,48,97,51,51,49,56,98,54,48,51,98,56,57,101,50,51,50,55,49,52,53,97,99,50,51,52,99,99,53,57,52,99,98,100,100,56,100,51,100,102,57,49,54,49,48,97,56,51,52,52,49,99,97,101,97,57,56,54,51,98,99,50,100,101,100,53,100,53,97,97,56,50,53,51,97,97,49,48,97,50,101,102,49,99,57,56,98,57,97,99,56,98,53,55,102,49,49,49,55,97,55,50,98,102,50,99,55,98,57,101,55,99,49,97,99,52,100,55,55,102,99,57,52,99,97,0] /* 0x7830a3318b603b89e2 */, "i8", ALLOC_NONE, 466588);
allocate([101,99,100,104,0] /* ecdh\00 */, "i8", ALLOC_NONE, 466720);
allocate([40,109,105,115,99,45,107,101,121,45,105,110,102,111,40,112,45,113,45,115,119,97,112,112,101,100,41,41,0] /* (misc-key-info(p-q-s */, "i8", ALLOC_NONE, 466728);
allocate([65,69,83,45,50,53,54,0] /* AES-256\00 */, "i8", ALLOC_NONE, 466760);
allocate([48,120,97,97,100,100,57,100,98,56,100,98,101,57,99,52,56,98,51,102,100,52,101,54,97,101,51,51,99,57,102,99,48,55,99,98,51,48,56,100,98,51,98,51,99,57,100,50,48,101,100,54,54,51,57,99,99,97,55,48,51,51,48,56,55,49,55,100,52,100,57,98,48,48,57,98,99,54,54,56,52,50,97,101,99,100,97,49,50,97,101,54,97,51,56,48,101,54,50,56,56,49,102,102,50,102,50,100,56,50,99,54,56,53,50,56,97,97,54,48,53,54,53,56,51,97,52,56,102,51,0] /* 0xaadd9db8dbe9c48b3f */, "i8", ALLOC_NONE, 466768);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,50,46,49,46,54,0] /* 1.2.840.113549.1.12. */, "i8", ALLOC_NONE, 466900);
allocate([101,99,100,115,97,0] /* ecdsa\00 */, "i8", ALLOC_NONE, 466924);
allocate([83,69,82,80,69,78,84,49,50,56,0] /* SERPENT128\00 */, "i8", ALLOC_NONE, 466932);
allocate([40,118,97,108,117,101,32,37,109,41,0] /* (value %m)\00 */, "i8", ALLOC_NONE, 466944);
allocate([98,114,97,105,110,112,111,111,108,80,53,49,50,114,49,0] /* brainpoolP512r1\00 */, "i8", ALLOC_NONE, 466956);
allocate([80,75,67,83,35,49,32,98,108,111,99,107,32,116,121,112,101,32,50,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* PKCS#1 block type 2  */, "i8", ALLOC_NONE, 466972);
allocate([102,105,112,115,49,56,54,45,51,32,112,114,105,109,101,32,112,0] /* fips186-3 prime p\00 */, "i8", ALLOC_NONE, 467008);
allocate([48,120,56,97,98,101,49,100,55,53,50,48,102,57,99,50,97,52,53,99,98,49,101,98,56,101,57,53,99,102,100,53,53,50,54,50,98,55,48,98,50,57,102,101,101,99,53,56,54,52,101,49,57,99,48,53,52,102,102,57,57,49,50,57,50,56,48,101,52,54,52,54,50,49,55,55,57,49,56,49,49,49,52,50,56,50,48,51,52,49,50,54,51,99,53,51,49,53,0] /* 0x8abe1d7520f9c2a45c */, "i8", ALLOC_NONE, 467028);
allocate([83,69,69,68,0] /* SEED\00 */, "i8", ALLOC_NONE, 467128);
allocate([63,79,84,82,58,65,65,77,0] /* ?OTR:AAM\00 */, "i8", ALLOC_NONE, 467136);
allocate([105,32,62,32,48,0] /* i _ 0\00 */, "i8", ALLOC_NONE, 467148);
allocate([97,108,103,111,114,105,116,104,109,32,100,105,115,97,98,108,101,100,0] /* algorithm disabled\0 */, "i8", ALLOC_NONE, 467156);
allocate([84,114,105,112,108,101,45,68,69,83,32,83,83,76,101,97,121,32,116,101,115,116,32,102,97,105,108,101,100,32,111,110,32,101,110,99,114,121,112,116,105,111,110,46,0] /* Triple-DES SSLeay te */, "i8", ALLOC_NONE, 467176);
allocate([48,120,49,100,49,99,54,52,102,48,54,56,99,102,52,53,102,102,97,50,97,54,51,97,56,49,98,55,99,49,51,102,54,98,56,56,52,55,97,51,101,55,55,101,102,49,52,102,101,51,100,98,55,102,99,97,102,101,48,99,98,100,49,48,101,56,101,56,50,54,101,48,51,52,51,54,100,54,52,54,97,97,101,102,56,55,98,50,101,50,52,55,100,52,97,102,49,101,0] /* 0x1d1c64f068cf45ffa2 */, "i8", ALLOC_NONE, 467224);
allocate([99,105,112,104,101,114,32,37,100,32,119,47,111,32,98,108,111,99,107,115,105,122,101,10,0] /* cipher %d w/o blocks */, "i8", ALLOC_NONE, 467324);
allocate([80,75,67,83,35,49,32,98,108,111,99,107,32,116,121,112,101,32,49,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* PKCS#1 block type 1  */, "i8", ALLOC_NONE, 467352);
allocate([40,112,114,105,118,107,101,121,115,10,0] /* (privkeys\0A\00 */, "i8", ALLOC_NONE, 467388);
allocate([48,120,56,99,98,57,49,101,56,50,97,51,51,56,54,100,50,56,48,102,53,100,54,102,55,101,53,48,101,54,52,49,100,102,49,53,50,102,55,49,48,57,101,100,53,52,53,54,98,51,49,102,49,54,54,101,54,99,97,99,48,52,50,53,97,55,99,102,51,97,98,54,97,102,54,98,55,102,99,51,49,48,51,98,56,56,51,50,48,50,101,57,48,52,54,53,54,53,0] /* 0x8cb91e82a3386d280f */, "i8", ALLOC_NONE, 467400);
allocate([40,103,101,110,107,101,121,40,37,115,40,110,98,105,116,115,37,100,41,0] /* (genkey(%s(nbits%d)\ */, "i8", ALLOC_NONE, 467500);
allocate([110,32,61,61,32,110,102,114,97,109,101,0] /* n == nframe\00 */, "i8", ALLOC_NONE, 467520);
allocate([48,120,48,52,97,56,99,55,100,100,50,50,99,101,50,56,50,54,56,98,51,57,98,53,53,52,49,54,102,48,52,52,55,99,50,102,98,55,55,100,101,49,48,55,100,99,100,50,97,54,50,101,56,56,48,101,97,53,51,101,101,98,54,50,100,53,55,99,98,52,51,57,48,50,57,53,100,98,99,57,57,52,51,97,98,55,56,54,57,54,102,97,53,48,52,99,49,49,0] /* 0x04a8c7dd22ce28268b */, "i8", ALLOC_NONE, 467532);
allocate([105,32,62,32,49,0] /* i _ 1\00 */, "i8", ALLOC_NONE, 467632);
allocate([82,78,71,32,111,117,116,112,117,116,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,107,110,111,119,110,32,118,97,108,117,101,0] /* RNG output does not  */, "i8", ALLOC_NONE, 467640);
allocate([102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,110,111,110,99,101,32,98,117,102,102,101,114,32,108,111,99,107,58,32,37,115,10,0] /* failed to acquire th */, "i8", ALLOC_NONE, 467680);
allocate([11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0] /* \0B\0B\0B\0B\0B\0B\0 */, "i8", ALLOC_NONE, 467728);
allocate([101,108,103,32,32,112,61,32,0] /* elg  p= \00 */, "i8", ALLOC_NONE, 467752);
allocate([115,99,97,110,110,105,110,103,32,69,67,67,32,112,97,114,97,109,101,116,101,114,32,102,97,105,108,101,100,58,32,37,115,10,0] /* scanning ECC paramet */, "i8", ALLOC_NONE, 467764);
allocate([117,115,101,45,102,105,112,115,49,56,54,0] /* use-fips186\00 */, "i8", ALLOC_NONE, 467800);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,50,49,0] /* 0.3.4401.5.3.1.9.21\ */, "i8", ALLOC_NONE, 467812);
allocate([37,117,58,0] /* %u:\00 */, "i8", ALLOC_NONE, 467832);
allocate([99,97,110,39,116,32,109,109,97,112,32,112,111,111,108,32,111,102,32,37,117,32,98,121,116,101,115,58,32,37,115,32,45,32,117,115,105,110,103,32,109,97,108,108,111,99,10,0] /* can't mmap pool of % */, "i8", ALLOC_NONE, 467836);
allocate([70,97,116,97,108,58,32,0] /* Fatal: \00 */, "i8", ALLOC_NONE, 467884);
allocate([105,110,116,101,108,45,97,101,115,110,105,0] /* intel-aesni\00 */, "i8", ALLOC_NONE, 467892);
allocate([95,103,99,114,121,95,102,105,112,115,95,109,111,100,101,32,40,41,0] /* _gcry_fips_mode ()\0 */, "i8", ALLOC_NONE, 467904);
allocate([48,120,55,98,99,51,56,50,99,54,51,100,56,99,49,53,48,99,51,99,55,50,48,56,48,97,99,101,48,53,97,102,97,48,99,50,98,101,97,50,56,101,52,102,98,50,50,55,56,55,49,51,57,49,54,53,101,102,98,97,57,49,102,57,48,102,56,97,97,53,56,49,52,97,53,48,51,97,100,52,101,98,48,52,97,56,99,55,100,100,50,50,99,101,50,56,50,54,0] /* 0x7bc382c63d8c150c3c */, "i8", ALLOC_NONE, 467924);
allocate([63,79,84,82,124,37,120,124,37,120,44,0] /* ?OTR|%x|%x,\00 */, "i8", ALLOC_NONE, 468024);
allocate([105,32,61,61,32,110,108,105,109,98,115,0] /* i == nlimbs\00 */, "i8", ALLOC_NONE, 468036);
allocate([79,65,69,80,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* OAEP encoded data\00 */, "i8", ALLOC_NONE, 468048);
allocate([48,120,56,99,98,57,49,101,56,50,97,51,51,56,54,100,50,56,48,102,53,100,54,102,55,101,53,48,101,54,52,49,100,102,49,53,50,102,55,49,48,57,101,100,53,52,53,54,98,52,49,50,98,49,100,97,49,57,55,102,98,55,49,49,50,51,97,99,100,51,97,55,50,57,57,48,49,100,49,97,55,49,56,55,52,55,48,48,49,51,51,49,48,55,101,99,53,51,0] /* 0x8cb91e82a3386d280f */, "i8", ALLOC_NONE, 468068);
allocate([80,83,83,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* PSS encoded data\00 */, "i8", ALLOC_NONE, 468168);
allocate([32,40,97,99,99,111,117,110,116,10,0] /*  (account\0A\00 */, "i8", ALLOC_NONE, 468188);
allocate([108,111,110,103,32,115,116,114,105,110,103,0] /* long string\00 */, "i8", ALLOC_NONE, 468200);
allocate([108,111,110,103,32,115,116,114,105,110,103,0] /* long string\00 */, "i8", ALLOC_NONE, 468212);
allocate([98,114,97,105,110,112,111,111,108,80,51,56,52,114,49,0] /* brainpoolP384r1\00 */, "i8", ALLOC_NONE, 468224);
allocate([104,108,101,110,0] /* hlen\00 */, "i8", ALLOC_NONE, 468240);
allocate([111,110,101,32,109,105,108,108,105,111,110,32,34,97,34,0] /* one million \22a\22\ */, "i8", ALLOC_NONE, 468248);
allocate([83,101,114,112,101,110,116,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-128 test dec */, "i8", ALLOC_NONE, 468264);
allocate([115,97,108,116,45,108,101,110,103,116,104,0] /* salt-length\00 */, "i8", ALLOC_NONE, 468300);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,54,0] /* 1.2.410.200004.1.6\0 */, "i8", ALLOC_NONE, 468312);
allocate([82,83,65,0] /* RSA\00 */, "i8", ALLOC_NONE, 468332);
allocate([48,120,49,52,102,100,100,48,53,53,52,53,101,99,49,99,99,56,97,98,52,48,57,51,50,52,55,102,55,55,50,55,53,101,48,55,52,51,102,102,101,100,49,49,55,49,56,50,101,97,97,57,99,55,55,56,55,55,97,97,97,99,54,97,99,55,100,51,53,50,52,53,100,49,54,57,50,101,56,101,101,49,0] /* 0x14fdd05545ec1cc8ab */, "i8", ALLOC_NONE, 468336);
allocate([48,120,48,50,0] /* 0x02\00 */, "i8", ALLOC_NONE, 468420);
allocate([117,115,101,45,120,57,51,49,0] /* use-x931\00 */, "i8", ALLOC_NONE, 468428);
allocate([82,73,80,69,77,68,49,54,48,0] /* RIPEMD160\00 */, "i8", ALLOC_NONE, 468440);
allocate([82,73,74,78,68,65,69,76,50,53,54,0] /* RIJNDAEL256\00 */, "i8", ALLOC_NONE, 468452);
allocate([48,120,52,51,98,100,55,101,57,97,102,98,53,51,100,56,98,56,53,50,56,57,98,99,99,52,56,101,101,53,98,102,101,54,102,50,48,49,51,55,100,49,48,97,48,56,55,101,98,54,101,55,56,55,49,101,50,97,49,48,97,53,57,57,99,55,49,48,97,102,56,100,48,100,51,57,101,50,48,54,49,49,0] /* 0x43bd7e9afb53d8b852 */, "i8", ALLOC_NONE, 468464);
allocate([82,70,67,50,50,54,56,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,51,32,102,97,105,108,101,100,46,0] /* RFC2268 decryption t */, "i8", ALLOC_NONE, 468548);
allocate([118,97,108,117,101,0] /* value\00 */, "i8", ALLOC_NONE, 468584);
allocate([40,118,97,108,117,101,32,37,98,41,0] /* (value %b)\00 */, "i8", ALLOC_NONE, 468592);
allocate([48,120,100,51,53,101,52,55,50,48,51,54,98,99,52,102,98,55,101,49,51,99,55,56,53,101,100,50,48,49,101,48,54,53,102,57,56,102,99,102,97,53,98,54,56,102,49,50,97,51,50,100,52,56,50,101,99,55,101,101,56,54,53,56,101,57,56,54,57,49,53,53,53,98,52,52,99,53,57,51,49,49,0] /* 0xd35e472036bc4fb7e1 */, "i8", ALLOC_NONE, 468604);
allocate([104,97,115,104,0] /* hash\00 */, "i8", ALLOC_NONE, 468688);
allocate([102,105,112,115,49,56,54,45,51,32,115,101,101,100,58,0] /* fips186-3 seed:\00 */, "i8", ALLOC_NONE, 468696);
allocate([48,120,53,50,48,56,56,51,57,52,57,100,102,100,98,99,52,50,100,51,97,100,49,57,56,54,52,48,54,56,56,97,54,102,101,49,51,102,52,49,51,52,57,53,53,52,98,52,57,97,99,99,51,49,100,99,99,100,56,56,52,53,51,57,56,49,54,102,53,101,98,52,97,99,56,102,98,49,102,49,97,54,0] /* 0x520883949dfdbc42d3 */, "i8", ALLOC_NONE, 468712);
allocate([100,97,116,97,0] /* data\00 */, "i8", ALLOC_NONE, 468796);
allocate([110,111,32,115,101,108,102,116,101,115,116,32,97,118,97,105,108,97,98,108,101,0] /* no selftest availabl */, "i8", ALLOC_NONE, 468804);
allocate([32,32,9,9,32,32,9,9,0] /*   \09\09  \09\09\00 */, "i8", ALLOC_NONE, 468828);
allocate([84,114,105,112,108,101,45,68,69,83,32,116,101,115,116,32,102,97,105,108,101,100,46,0] /* Triple-DES test fail */, "i8", ALLOC_NONE, 468840);
allocate([48,120,51,101,101,51,48,98,53,54,56,102,98,97,98,48,102,56,56,51,99,99,101,98,100,52,54,100,51,102,51,98,98,56,97,50,97,55,51,53,49,51,102,53,101,98,55,57,100,97,54,54,49,57,48,101,98,48,56,53,102,102,97,57,102,52,57,50,102,51,55,53,97,57,55,100,56,54,48,101,98,52,0] /* 0x3ee30b568fbab0f883 */, "i8", ALLOC_NONE, 468864);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,102,111,117,110,100,0] /* algorithm not found\ */, "i8", ALLOC_NONE, 468948);
allocate([32,32,101,110,99,114,58,0] /*   encr:\00 */, "i8", ALLOC_NONE, 468968);
allocate([40,103,101,110,107,101,121,32,40,100,115,97,32,40,110,98,105,116,115,32,52,58,49,48,50,52,41,41,41,0] /* (genkey (dsa (nbits  */, "i8", ALLOC_NONE, 468976);
allocate([32,32,112,107,101,121,58,0] /*   pkey:\00 */, "i8", ALLOC_NONE, 469008);
allocate([48,120,100,51,53,101,52,55,50,48,51,54,98,99,52,102,98,55,101,49,51,99,55,56,53,101,100,50,48,49,101,48,54,53,102,57,56,102,99,102,97,54,102,54,102,52,48,100,101,102,52,102,57,50,98,57,101,99,55,56,57,51,101,99,50,56,102,99,100,52,49,50,98,49,102,49,98,51,50,101,50,55,0] /* 0xd35e472036bc4fb7e1 */, "i8", ALLOC_NONE, 469016);
allocate([40,116,121,112,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,83,84,82,73,78,71,41,32,124,124,32,40,116,121,112,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,83,84,82,73,78,71,41,0] /* (type == GCRY_AC_IO_ */, "i8", ALLOC_NONE, 469100);
allocate([63,79,84,82,58,0] /* ?OTR:\00 */, "i8", ALLOC_NONE, 469160);
allocate([98,114,97,105,110,112,111,111,108,80,51,50,48,114,49,0] /* brainpoolP320r1\00 */, "i8", ALLOC_NONE, 469168);
allocate([101,114,114,111,114,32,115,101,116,116,105,110,103,32,70,68,95,67,76,79,69,88,69,67,32,111,110,32,102,100,32,37,100,58,32,37,115,10,0] /* error setting FD_CLO */, "i8", ALLOC_NONE, 469184);
allocate([112,117,98,107,101,121,95,101,110,99,114,121,112,116,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_encrypt: algo */, "i8", ALLOC_NONE, 469224);
allocate([88,57,46,51,49,32,82,78,71,32,99,111,114,101,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0] /* X9.31 RNG core funct */, "i8", ALLOC_NONE, 469252);
allocate([99,97,110,39,116,32,99,108,111,115,101,32,96,37,115,39,58,32,37,115,10,0] /* can't close `%s': %s */, "i8", ALLOC_NONE, 469284);
allocate([72,105,32,84,104,101,114,101,0] /* Hi There\00 */, "i8", ALLOC_NONE, 469308);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,120,32,111,102,32,115,105,122,101,32,37,117,0] /* choosing a random x  */, "i8", ALLOC_NONE, 469320);
allocate([40,112,117,98,108,105,99,45,107,101,121,40,101,99,99,40,112,37,109,41,40,97,37,109,41,40,98,37,109,41,40,103,37,109,41,40,110,37,109,41,41,41,0] /* (public-key(ecc(p%m) */, "i8", ALLOC_NONE, 469352);
allocate([100,101,114,105,118,101,45,112,97,114,109,115,0] /* derive-parms\00 */, "i8", ALLOC_NONE, 469396);
allocate([49,46,50,46,51,57,50,46,50,48,48,48,49,49,46,54,49,46,49,46,49,46,49,46,51,0] /* 1.2.392.200011.61.1. */, "i8", ALLOC_NONE, 469412);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,52,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 469440);
allocate([115,101,120,112,46,99,0] /* sexp.c\00 */, "i8", ALLOC_NONE, 469472);
allocate([115,101,99,117,114,101,32,109,101,109,111,114,121,32,105,115,32,100,105,115,97,98,108,101,100,0] /* secure memory is dis */, "i8", ALLOC_NONE, 469480);
allocate([32,37,48,50,88,0] /*  %02X\00 */, "i8", ALLOC_NONE, 469508);
allocate([112,97,100,108,111,99,107,45,109,109,117,108,0] /* padlock-mmul\00 */, "i8", ALLOC_NONE, 469516);
allocate([70,65,84,65,76,58,32,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,70,83,77,32,108,111,99,107,32,105,110,32,108,105,98,103,99,114,121,112,116,58,32,37,115,10,0] /* FATAL: failed to cre */, "i8", ALLOC_NONE, 469532);
allocate([48,120,53,52,55,101,102,56,51,53,99,51,100,97,99,52,102,100,57,55,102,56,52,54,49,97,49,52,54,49,49,100,99,57,99,50,55,55,52,53,49,51,50,100,101,100,56,101,53,52,53,99,49,100,53,52,99,55,50,102,48,52,54,57,57,55,0] /* 0x547ef835c3dac4fd97 */, "i8", ALLOC_NONE, 469588);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 469656);
allocate([63,79,84,82,124,0] /* ?OTR|\00 */, "i8", ALLOC_NONE, 469660);
allocate([104,97,118,97,108,0] /* haval\00 */, "i8", ALLOC_NONE, 469668);
allocate([65,69,83,0] /* AES\00 */, "i8", ALLOC_NONE, 469676);
allocate([48,120,56,98,100,50,97,101,98,57,99,98,55,101,53,55,99,98,50,99,52,98,52,56,50,102,102,99,56,49,98,55,97,102,98,57,100,101,50,55,101,49,101,51,98,100,50,51,99,50,51,97,52,52,53,51,98,100,57,97,99,101,51,50,54,50,0] /* 0x8bd2aeb9cb7e57cb2c */, "i8", ALLOC_NONE, 469680);
allocate([116,105,103,101,114,0] /* tiger\00 */, "i8", ALLOC_NONE, 469748);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 469756);
allocate([84,119,111,102,105,115,104,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-256 test dec */, "i8", ALLOC_NONE, 469760);
allocate([82,70,67,50,50,54,56,95,52,48,0] /* RFC2268_40\00 */, "i8", ALLOC_NONE, 469796);
allocate([221,175,53,161,147,97,122,186,204,65,115,73,174,32,65,49,18,230,250,78,137,169,126,162,10,158,238,230,75,85,211,154,33,146,153,42,39,79,193,168,54,186,60,35,163,254,235,189,69,77,68,35,100,60,232,14,42,154,201,79,165,76,164,159,0] /* \DD\AF5\A1\93az\BA\C */, "i8", ALLOC_NONE, 469808);
allocate([186,120,22,191,143,1,207,234,65,65,64,222,93,174,34,35,176,3,97,163,150,23,122,156,180,16,255,97,242,0,21,173,0] /* \BAx\16\BF\8F\01\CF\ */, "i8", ALLOC_NONE, 469876);
allocate([48,120,97,57,102,98,53,55,100,98,97,49,101,101,97,57,98,99,51,101,54,54,48,97,57,48,57,100,56,51,56,100,55,49,56,99,51,57,55,97,97,51,98,53,54,49,97,54,102,55,57,48,49,101,48,101,56,50,57,55,52,56,53,54,97,55,0] /* 0xa9fb57dba1eea9bc3e */, "i8", ALLOC_NONE, 469912);
allocate([109,100,52,0] /* md4\00 */, "i8", ALLOC_NONE, 469980);
allocate([132,152,62,68,28,59,210,110,186,174,74,161,249,81,41,229,229,70,112,241,0] /* \84\98_D\1C;\D2n\BA\ */, "i8", ALLOC_NONE, 469984);
allocate([83,101,114,112,101,110,116,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-256 test enc */, "i8", ALLOC_NONE, 470008);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,53,0] /* 1.2.410.200004.1.5\0 */, "i8", ALLOC_NONE, 470044);
allocate([48,120,50,54,100,99,53,99,54,99,101,57,52,97,52,98,52,52,102,51,51,48,98,53,100,57,98,98,100,55,55,99,98,102,57,53,56,52,49,54,50,57,53,99,102,55,101,49,99,101,54,98,99,99,100,99,49,56,102,102,56,99,48,55,98,54,0] /* 0x26dc5c6ce94a4b44f3 */, "i8", ALLOC_NONE, 470064);
allocate([109,100,50,0] /* md2\00 */, "i8", ALLOC_NONE, 470132);
allocate([100,101,114,105,118,101,45,112,97,114,109,115,0] /* derive-parms\00 */, "i8", ALLOC_NONE, 470136);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,52,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 470152);
allocate([48,120,55,100,53,97,48,57,55,53,102,99,50,99,51,48,53,55,101,101,102,54,55,53,51,48,52,49,55,97,102,102,101,55,102,98,56,48,53,53,99,49,50,54,100,99,53,99,54,99,101,57,52,97,52,98,52,52,102,51,51,48,98,53,100,57,0] /* 0x7d5a0975fc2c3057ee */, "i8", ALLOC_NONE, 470176);
allocate([82,70,67,50,50,54,56,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,51,32,102,97,105,108,101,100,46,0] /* RFC2268 encryption t */, "i8", ALLOC_NONE, 470244);
allocate([115,104,97,50,50,52,0] /* sha224\00 */, "i8", ALLOC_NONE, 470280);
allocate([41,41,0] /* ))\00 */, "i8", ALLOC_NONE, 470288);
allocate([48,120,97,57,102,98,53,55,100,98,97,49,101,101,97,57,98,99,51,101,54,54,48,97,57,48,57,100,56,51,56,100,55,50,54,101,51,98,102,54,50,51,100,53,50,54,50,48,50,56,50,48,49,51,52,56,49,100,49,102,54,101,53,51,55,55,0] /* 0xa9fb57dba1eea9bc3e */, "i8", ALLOC_NONE, 470292);
allocate([115,104,97,53,49,50,0] /* sha512\00 */, "i8", ALLOC_NONE, 470360);
allocate([102,105,112,115,49,56,54,45,51,32,112,98,105,116,115,32,112,61,37,117,32,113,61,37,117,32,99,111,117,110,116,101,114,61,37,100,10,0] /* fips186-3 pbits p=%u */, "i8", ALLOC_NONE, 470368);
allocate([98,114,97,105,110,112,111,111,108,80,50,53,54,114,49,0] /* brainpoolP256r1\00 */, "i8", ALLOC_NONE, 470408);
allocate([115,104,97,51,56,52,0] /* sha384\00 */, "i8", ALLOC_NONE, 470424);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 470432);
allocate([32,32,9,9,32,32,9,32,0] /*   \09\09  \09 \00 */, "i8", ALLOC_NONE, 470440);
allocate([48,120,53,56,97,97,53,54,102,55,55,50,99,48,55,50,54,102,50,52,99,54,98,56,57,101,52,101,99,100,97,99,50,52,51,53,52,98,57,101,57,57,99,97,97,51,102,54,100,51,55,54,49,52,48,50,99,100,0] /* 0x58aa56f772c0726f24 */, "i8", ALLOC_NONE, 470452);
allocate([97,108,103,111,114,105,116,104,109,32,100,105,115,97,98,108,101,100,0] /* algorithm disabled\0 */, "i8", ALLOC_NONE, 470512);
allocate([114,109,100,49,54,48,0] /* rmd160\00 */, "i8", ALLOC_NONE, 470532);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 470540);
allocate([48,120,48,100,57,48,50,57,97,100,50,99,55,101,53,99,102,52,51,52,48,56,50,51,98,50,97,56,55,100,99,54,56,99,57,101,52,99,101,51,49,55,52,99,49,101,54,101,102,100,101,101,49,50,99,48,55,100,0] /* 0x0d9029ad2c7e5cf434 */, "i8", ALLOC_NONE, 470552);
allocate([97,99,46,99,0] /* ac.c\00 */, "i8", ALLOC_NONE, 470612);
allocate([114,105,112,101,109,100,49,54,48,0] /* ripemd160\00 */, "i8", ALLOC_NONE, 470620);
allocate([48,120,100,55,99,49,51,52,97,97,50,54,52,51,54,54,56,54,50,97,49,56,51,48,50,53,55,53,100,48,102,98,57,56,100,49,49,54,98,99,52,98,54,100,100,101,98,99,97,51,97,53,97,55,57,51,57,102,0] /* 0xd7c134aa264366862a */, "i8", ALLOC_NONE, 470632);
allocate([99,97,110,39,116,32,111,112,101,110,32,37,115,58,32,37,115,10,0] /* can't open %s: %s\0A */, "i8", ALLOC_NONE, 470692);
allocate([115,104,97,50,53,54,0] /* sha256\00 */, "i8", ALLOC_NONE, 470712);
allocate([101,114,114,111,114,32,115,101,116,116,105,110,103,32,107,101,121,32,102,111,114,32,82,78,71,0] /* error setting key fo */, "i8", ALLOC_NONE, 470720);
allocate([99,97,110,39,116,32,119,114,105,116,101,32,96,37,115,39,58,32,37,115,10,0] /* can't write `%s': %s */, "i8", ALLOC_NONE, 470748);
allocate([100,97,116,97,45,57,32,107,101,121,45,50,48,0] /* data-9 key-20\00 */, "i8", ALLOC_NONE, 470772);
allocate([101,108,103,97,109,97,108,46,99,0] /* elgamal.c\00 */, "i8", ALLOC_NONE, 470788);
allocate([115,101,0] /* se\00 */, "i8", ALLOC_NONE, 470800);
allocate([116,114,97,110,115,105,101,110,116,45,107,101,121,0] /* transient-key\00 */, "i8", ALLOC_NONE, 470804);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,52,0] /* 0.3.4401.5.3.1.9.44\ */, "i8", ALLOC_NONE, 470820);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,51,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 470840);
allocate([37,42,115,91,117,110,107,110,111,119,110,32,116,97,103,32,37,100,93,10,0] /* %_s[unknown tag %d]\ */, "i8", ALLOC_NONE, 470872);
allocate([99,97,110,39,116,32,108,111,99,107,32,109,101,109,111,114,121,58,32,37,115,10,0] /* can't lock memory: % */, "i8", ALLOC_NONE, 470896);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 470920);
allocate([37,48,50,88,0] /* %02X\00 */, "i8", ALLOC_NONE, 470924);
allocate([112,97,100,108,111,99,107,45,115,104,97,0] /* padlock-sha\00 */, "i8", ALLOC_NONE, 470932);
allocate([70,65,84,65,76,58,32,101,114,114,111,114,32,114,101,97,100,105,110,103,32,96,37,115,39,32,105,110,32,108,105,98,103,99,114,121,112,116,58,32,37,115,10,0] /* FATAL: error reading */, "i8", ALLOC_NONE, 470944);
allocate([48,120,50,53,56,48,102,54,51,99,99,102,101,52,52,49,51,56,56,55,48,55,49,51,98,49,97,57,50,51,54,57,101,51,51,101,50,49,51,53,100,50,54,54,100,98,98,51,55,50,51,56,54,99,52,48,48,98,0] /* 0x2580f63ccfe4413887 */, "i8", ALLOC_NONE, 470988);
allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_NONE, 471048);
allocate([63,79,84,82,0] /* ?OTR\00 */, "i8", ALLOC_NONE, 471052);
allocate([109,100,53,0] /* md5\00 */, "i8", ALLOC_NONE, 471060);
allocate([48,120,54,56,97,53,101,54,50,99,97,57,99,101,54,99,49,99,50,57,57,56,48,51,97,54,99,49,53,51,48,98,53,49,52,101,49,56,50,97,100,56,98,48,48,52,50,97,53,57,99,97,100,50,57,102,52,51,0] /* 0x68a5e62ca9ce6c1c29 */, "i8", ALLOC_NONE, 471064);
allocate([115,104,97,49,0] /* sha1\00 */, "i8", ALLOC_NONE, 471124);
allocate(1, "i8", ALLOC_NONE, 471132);
allocate([84,119,111,102,105,115,104,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-256 test enc */, "i8", ALLOC_NONE, 471136);
allocate([97,98,99,0] /* abc\00 */, "i8", ALLOC_NONE, 471172);
allocate([97,98,99,0] /* abc\00 */, "i8", ALLOC_NONE, 471176);
allocate([48,120,100,55,99,49,51,52,97,97,50,54,52,51,54,54,56,54,50,97,49,56,51,48,50,53,55,53,100,49,100,55,56,55,98,48,57,102,48,55,53,55,57,55,100,97,56,57,102,53,55,101,99,56,99,48,102,102,0] /* 0xd7c134aa264366862a */, "i8", ALLOC_NONE, 471180);
allocate([114,97,110,100,111,109,45,111,118,101,114,114,105,100,101,0] /* random-override\00 */, "i8", ALLOC_NONE, 471240);
allocate([97,98,99,100,98,99,100,101,99,100,101,102,100,101,102,103,101,102,103,104,102,103,104,105,103,104,105,106,104,105,106,107,105,106,107,108,106,107,108,109,107,108,109,110,108,109,110,111,109,110,111,112,110,111,112,113,0] /* abcdbcdecdefdefgefgh */, "i8", ALLOC_NONE, 471256);
allocate([83,101,114,112,101,110,116,45,49,57,50,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-192 test enc */, "i8", ALLOC_NONE, 471316);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,52,0] /* 1.2.410.200004.1.4\0 */, "i8", ALLOC_NONE, 471352);
allocate([98,114,97,105,110,112,111,111,108,80,50,50,52,114,49,0] /* brainpoolP224r1\00 */, "i8", ALLOC_NONE, 471372);
allocate([108,97,98,101,108,0] /* label\00 */, "i8", ALLOC_NONE, 471388);
allocate([110,0] /* n\00 */, "i8", ALLOC_NONE, 471396);
allocate([111,105,100,46,49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,0] /* oid.1.2.840.113549.1 */, "i8", ALLOC_NONE, 471400);
allocate([99,104,101,99,107,105,110,103,32,103,58,0] /* checking g:\00 */, "i8", ALLOC_NONE, 471428);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,51,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 471440);
allocate([48,120,49,52,98,54,57,48,56,54,54,97,98,100,53,98,98,56,56,98,53,102,52,56,50,56,99,49,52,57,48,48,48,50,101,54,55,55,51,102,97,50,102,97,50,57,57,98,56,102,0] /* 0x14b690866abd5bb88b */, "i8", ALLOC_NONE, 471464);
allocate([82,70,67,50,50,54,56,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,50,32,102,97,105,108,101,100,46,0] /* RFC2268 decryption t */, "i8", ALLOC_NONE, 471516);
allocate([77,68,53,0] /* MD5\00 */, "i8", ALLOC_NONE, 471552);
allocate([104,97,115,104,45,97,108,103,111,0] /* hash-algo\00 */, "i8", ALLOC_NONE, 471556);
allocate([111,112,101,110,112,103,112,45,114,115,97,0] /* openpgp-rsa\00 */, "i8", ALLOC_NONE, 471568);
allocate([77,68,52,0] /* MD4\00 */, "i8", ALLOC_NONE, 471580);
allocate([37,109,41,0] /* %m)\00 */, "i8", ALLOC_NONE, 471584);
allocate([48,120,99,48,97,48,54,52,55,101,97,97,98,54,97,52,56,55,53,51,98,48,51,51,99,53,54,99,98,48,102,48,57,48,48,97,50,102,53,99,52,56,53,51,51,55,53,102,100,54,0] /* 0xc0a0647eaab6a48753 */, "i8", ALLOC_NONE, 471588);
allocate([110,111,45,98,108,105,110,100,105,110,103,0] /* no-blinding\00 */, "i8", ALLOC_NONE, 471640);
allocate([98,97,100,32,115,105,103,110,97,116,117,114,101,32,110,111,116,32,100,101,116,101,99,116,101,100,0] /* bad signature not de */, "i8", ALLOC_NONE, 471652);
allocate([115,101,101,100,108,101,110,32,60,61,32,115,105,122,101,111,102,32,115,101,101,100,95,104,101,108,112,95,98,117,102,102,101,114,0] /* seedlen _= sizeof se */, "i8", ALLOC_NONE, 471680);
allocate([48,120,99,51,48,50,102,52,49,100,57,51,50,97,51,54,99,100,97,55,97,51,52,54,50,102,57,101,57,101,57,49,54,98,53,98,101,56,102,49,48,50,57,97,99,52,97,99,99,49,0] /* 0xc302f41d932a36cda7 */, "i8", ALLOC_NONE, 471716);
allocate([112,115,115,0] /* pss\00 */, "i8", ALLOC_NONE, 471768);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 471772);
allocate([118,101,114,105,102,121,32,102,97,105,108,101,100,0] /* verify failed\00 */, "i8", ALLOC_NONE, 471780);
allocate([32,9,32,9,32,32,9,32,0] /*  \09 \09  \09 \00 */, "i8", ALLOC_NONE, 471796);
allocate([48,120,52,54,57,97,50,56,101,102,55,99,50,56,99,99,97,51,100,99,55,50,49,100,48,52,52,102,52,52,57,54,98,99,99,97,55,101,102,52,49,52,54,102,98,102,50,53,99,57,0] /* 0x469a28ef7c28cca3dc */, "i8", ALLOC_NONE, 471808);
allocate([110,111,32,115,101,108,102,116,101,115,116,32,97,118,97,105,108,97,98,108,101,0] /* no selftest availabl */, "i8", ALLOC_NONE, 471860);
allocate([111,97,101,112,0] /* oaep\00 */, "i8", ALLOC_NONE, 471884);
allocate([115,105,103,110,105,110,103,32,102,97,105,108,101,100,0] /* signing failed\00 */, "i8", ALLOC_NONE, 471892);
allocate([112,114,111,116,111,99,111,108,0] /* protocol\00 */, "i8", ALLOC_NONE, 471908);
allocate([99,111,110,116,101,120,116,45,62,99,111,110,116,101,120,116,95,112,114,105,118,32,33,61,32,78,85,76,76,0] /* context-_context_pri */, "i8", ALLOC_NONE, 471920);
allocate([48,120,54,97,57,49,49,55,52,48,55,54,98,49,101,48,101,49,57,99,51,57,99,48,51,49,102,101,56,54,56,53,99,49,99,97,101,48,52,48,101,53,99,54,57,97,50,56,101,102,0] /* 0x6a91174076b1e0e19c */, "i8", ALLOC_NONE, 471952);
allocate([40,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,82,69,65,68,65,66,76,69,41,32,124,124,32,40,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,87,82,73,84,65,66,76,69,41,0] /* (mode == GCRY_AC_IO_ */, "i8", ALLOC_NONE, 472004);
allocate([112,107,99,115,49,0] /* pkcs1\00 */, "i8", ALLOC_NONE, 472068);
allocate([114,115,97,0] /* rsa\00 */, "i8", ALLOC_NONE, 472076);
allocate([48,120,99,51,48,50,102,52,49,100,57,51,50,97,51,54,99,100,97,55,97,51,52,54,51,48,57,51,100,49,56,100,98,55,56,102,99,101,52,55,54,100,101,49,97,56,54,50,57,55,0] /* 0xc302f41d932a36cda7 */, "i8", ALLOC_NONE, 472080);
allocate([114,101,97,100,32,101,114,114,111,114,32,111,110,32,114,97,110,100,111,109,32,100,101,118,105,99,101,58,32,37,115,10,0] /* read error on random */, "i8", ALLOC_NONE, 472132);
allocate([114,97,119,0] /* raw\00 */, "i8", ALLOC_NONE, 472168);
allocate([101,114,114,111,114,32,99,114,101,97,116,105,110,103,32,99,105,112,104,101,114,32,99,111,110,116,101,120,116,32,102,111,114,32,82,78,71,0] /* error creating ciphe */, "i8", ALLOC_NONE, 472172);
allocate([99,97,110,39,116,32,99,114,101,97,116,101,32,96,37,115,39,58,32,37,115,10,0] /* can't create `%s': % */, "i8", ALLOC_NONE, 472212);
allocate([105,100,120,32,62,61,32,48,32,38,38,32,105,100,120,32,60,32,40,49,60,60,107,41,0] /* idx _= 0 && idx _ (1 */, "i8", ALLOC_NONE, 472236);
allocate([101,110,99,45,118,97,108,0] /* enc-val\00 */, "i8", ALLOC_NONE, 472264);
allocate([74,101,102,101,0] /* Jefe\00 */, "i8", ALLOC_NONE, 472272);
allocate([120,118,97,108,117,101,0] /* xvalue\00 */, "i8", ALLOC_NONE, 472280);
allocate([80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0] /* POSIXLY_CORRECT\00 */, "i8", ALLOC_NONE, 472288);
allocate([69,67,68,72,0] /* ECDH\00 */, "i8", ALLOC_NONE, 472304);
allocate([113,98,105,116,115,0] /* qbits\00 */, "i8", ALLOC_NONE, 472312);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,51,0] /* 0.3.4401.5.3.1.9.43\ */, "i8", ALLOC_NONE, 472320);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,50,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 472340);
allocate([34,93,10,0] /* \22]\0A\00 */, "i8", ALLOC_NONE, 472372);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,115,101,116,32,117,105,100,58,32,37,115,10,0] /* failed to reset uid: */, "i8", ALLOC_NONE, 472376);
allocate([37,115,32,0] /* %s \00 */, "i8", ALLOC_NONE, 472404);
allocate([112,97,100,108,111,99,107,45,97,101,115,0] /* padlock-aes\00 */, "i8", ALLOC_NONE, 472408);
allocate([47,112,114,111,99,47,118,101,114,115,105,111,110,0] /* /proc/version\00 */, "i8", ALLOC_NONE, 472420);
allocate([98,114,97,105,110,112,111,111,108,80,49,57,50,114,49,0] /* brainpoolP192r1\00 */, "i8", ALLOC_NONE, 472436);
allocate([48,0] /* 0\00 */, "i8", ALLOC_NONE, 472452);
allocate(1, "i8", ALLOC_NONE, 472456);
allocate([101,110,99,45,118,97,108,0] /* enc-val\00 */, "i8", ALLOC_NONE, 472460);
allocate([109,105,115,109,97,116,99,104,0] /* mismatch\00 */, "i8", ALLOC_NONE, 472468);
allocate([48,120,49,54,54,55,99,98,52,55,55,97,49,97,56,101,99,51,51,56,102,57,52,55,52,49,54,54,57,99,57,55,54,51,49,54,100,97,54,51,50,49,0] /* 0x1667cb477a1a8ec338 */, "i8", ALLOC_NONE, 472480);
allocate([32,112,108,97,105,110,58,0] /*  plain:\00 */, "i8", ALLOC_NONE, 472524);
allocate([9,37,115,10,0] /* \09%s\0A\00 */, "i8", ALLOC_NONE, 472532);
allocate([84,119,111,102,105,115,104,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-128 test dec */, "i8", ALLOC_NONE, 472540);
allocate([100,101,99,114,121,112,116,32,114,101,116,117,114,110,101,100,32,110,111,32,112,108,97,105,110,116,101,120,116,0] /* decrypt returned no  */, "i8", ALLOC_NONE, 472576);
allocate([115,104,111,114,116,32,115,116,114,105,110,103,0] /* short string\00 */, "i8", ALLOC_NONE, 472608);
allocate([115,104,111,114,116,32,115,116,114,105,110,103,0] /* short string\00 */, "i8", ALLOC_NONE, 472624);
allocate([48,120,98,101,100,53,97,102,49,54,101,97,51,102,54,97,52,102,54,50,57,51,56,99,52,54,51,49,101,98,53,97,102,55,98,100,98,99,100,98,99,51,0] /* 0xbed5af16ea3f6a4f62 */, "i8", ALLOC_NONE, 472640);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 472684);
allocate([112,117,98,107,101,121,95,100,101,99,114,121,112,116,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_decrypt: algo */, "i8", ALLOC_NONE, 472688);
allocate([108,111,110,103,32,115,116,114,105,110,103,0] /* long string\00 */, "i8", ALLOC_NONE, 472716);
allocate([118,97,108,117,101,0] /* value\00 */, "i8", ALLOC_NONE, 472728);
allocate([83,101,114,112,101,110,116,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-128 test enc */, "i8", ALLOC_NONE, 472736);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,51,0] /* 1.2.410.200004.1.3\0 */, "i8", ALLOC_NONE, 472772);
allocate([48,120,101,57,53,101,52,97,53,102,55,51,55,48,53,57,100,99,54,48,100,102,53,57,57,49,100,52,53,48,50,57,52,48,57,101,54,48,102,99,48,57,0] /* 0xe95e4a5f737059dc60 */, "i8", ALLOC_NONE, 472792);
allocate([111,112,101,110,112,103,112,45,100,115,97,0] /* openpgp-dsa\00 */, "i8", ALLOC_NONE, 472836);
allocate([118,97,108,117,101,32,101,120,116,114,97,99,116,101,100,32,102,114,111,109,32,80,75,67,83,35,49,32,98,108,111,99,107,32,116,121,112,101,32,50,32,101,110,99,111,100,101,100,32,100,97,116,97,58,0] /* value extracted from */, "i8", ALLOC_NONE, 472848);
allocate([115,0] /* s\00 */, "i8", ALLOC_NONE, 472904);
allocate([100,101,99,114,121,112,116,32,102,97,105,108,101,100,0] /* decrypt failed\00 */, "i8", ALLOC_NONE, 472908);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,50,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 472924);
allocate([48,120,49,101,53,56,57,97,56,53,57,53,52,50,51,52,49,50,49,51,52,102,97,97,50,100,98,100,101,99,57,53,99,56,100,56,54,55,53,101,53,56,0] /* 0x1e589a859542341213 */, "i8", ALLOC_NONE, 472948);
allocate([100,115,97,0] /* dsa\00 */, "i8", ALLOC_NONE, 472992);
allocate([82,70,67,50,50,54,56,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,50,32,102,97,105,108,101,100,46,0] /* RFC2268 encryption t */, "i8", ALLOC_NONE, 472996);
allocate([118,97,108,117,101,32,101,120,116,114,97,99,116,101,100,32,102,114,111,109,32,79,65,69,80,32,101,110,99,111,100,101,100,32,100,97,116,97,58,0] /* value extracted from */, "i8", ALLOC_NONE, 473032);
allocate([99,105,112,104,101,114,116,101,120,116,32,109,97,116,99,104,101,115,32,112,108,97,105,110,116,101,120,116,0] /* ciphertext matches p */, "i8", ALLOC_NONE, 473072);
allocate([68,69,83,0] /* DES\00 */, "i8", ALLOC_NONE, 473104);
allocate([40,101,110,99,45,118,97,108,40,0] /* (enc-val(\00 */, "i8", ALLOC_NONE, 473108);
allocate([48,120,51,52,48,101,55,98,101,50,97,50,56,48,101,98,55,52,101,50,98,101,54,49,98,97,100,97,55,52,53,100,57,55,101,56,102,55,99,51,48,48,0] /* 0x340e7be2a280eb74e2 */, "i8", ALLOC_NONE, 473120);
allocate([98,97,100,32,115,105,103,110,97,116,117,114,101,32,110,111,116,32,100,101,116,101,99,116,101,100,0] /* bad signature not de */, "i8", ALLOC_NONE, 473164);
allocate(1, "i8", ALLOC_NONE, 473192);
allocate([103,99,114,121,95,112,107,95,100,101,99,114,121,112,116,32,114,101,116,117,114,110,101,100,32,103,97,114,98,97,103,101,0] /* gcry_pk_decrypt retu */, "i8", ALLOC_NONE, 473196);
allocate([95,103,99,114,121,95,109,100,95,103,101,116,95,97,108,103,111,95,100,108,101,110,32,40,104,97,115,104,97,108,103,111,41,32,61,61,32,113,98,105,116,115,47,56,0] /* _gcry_md_get_algo_dl */, "i8", ALLOC_NONE, 473232);
allocate([48,120,101,57,53,101,52,97,53,102,55,51,55,48,53,57,100,99,54,48,100,102,99,55,97,100,57,53,98,51,100,56,49,51,57,53,49,53,54,50,48,102,0] /* 0xe95e4a5f737059dc60 */, "i8", ALLOC_NONE, 473280);
allocate([118,101,114,105,102,121,32,102,97,105,108,101,100,0] /* verify failed\00 */, "i8", ALLOC_NONE, 473324);
allocate([32,32,32,115,105,103,58,0] /*    sig:\00 */, "i8", ALLOC_NONE, 473340);
allocate([103,99,114,121,95,109,100,95,111,112,101,110,32,102,97,105,108,101,100,32,102,111,114,32,97,108,103,111,32,37,100,58,32,37,115,0] /* gcry_md_open failed  */, "i8", ALLOC_NONE, 473348);
allocate([101,110,99,114,121,112,116,32,102,97,105,108,101,100,0] /* encrypt failed\00 */, "i8", ALLOC_NONE, 473384);
allocate([68,69,83,32,109,97,105,110,116,101,110,97,110,99,101,32,116,101,115,116,32,102,97,105,108,101,100,46,0] /* DES maintenance test */, "i8", ALLOC_NONE, 473400);
allocate([32,9,32,32,9,9,9,9,32,9,32,9,32,9,32,32,0] /*  \09  \09\09\09\09 \ */, "i8", ALLOC_NONE, 473432);
allocate([98,114,97,105,110,112,111,111,108,80,49,54,48,114,49,0] /* brainpoolP160r1\00 */, "i8", ALLOC_NONE, 473452);
allocate([115,105,103,110,105,110,103,32,102,97,105,108,101,100,0] /* signing failed\00 */, "i8", ALLOC_NONE, 473468);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 473484);
allocate([32,32,100,97,116,97,58,0] /*   data:\00 */, "i8", ALLOC_NONE, 473492);
allocate([99,111,110,118,101,114,116,105,110,103,32,100,97,116,97,32,102,97,105,108,101,100,0] /* converting data fail */, "i8", ALLOC_NONE, 473500);
allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NONE, 473524);
allocate([115,109,115,116,97,116,101,32,33,61,32,78,85,76,76,0] /* smstate != NULL\00 */, "i8", ALLOC_NONE, 473532);
allocate([48,120,49,49,56,51,57,50,57,54,97,55,56,57,97,51,98,99,48,48,52,53,99,56,97,53,102,98,52,50,99,55,100,49,98,100,57,57,56,102,53,52,52,52,57,53,55,57,98,52,52,54,56,49,55,97,102,98,100,49,55,50,55,51,101,54,54,50,99,57,55,101,101,55,50,57,57,53,101,102,52,50,54,52,48,99,53,53,48,98,57,48,49,51,102,97,100,48,55,54,49,51,53,51,99,55,48,56,54,97,50,55,50,99,50,52,48,56,56,98,101,57,52,55,54,57,102,100,49,54,54,53,48,0] /* 0x11839296a789a3bc00 */, "i8", ALLOC_NONE, 473548);
allocate([99,111,110,118,101,114,116,105,110,103,32,100,97,116,97,32,102,97,105,108,101,100,0] /* converting data fail */, "i8", ALLOC_NONE, 473684);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 473708);
allocate([32,32,115,107,101,121,58,0] /*   skey:\00 */, "i8", ALLOC_NONE, 473712);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,114,97,119,41,32,40,118,97,108,117,101,32,37,109,41,41,0] /* (data (flags raw) (v */, "i8", ALLOC_NONE, 473720);
allocate([112,117,98,107,101,121,95,115,105,103,110,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_sign: algo=%d */, "i8", ALLOC_NONE, 473752);
allocate([48,120,99,54,56,53,56,101,48,54,98,55,48,52,48,52,101,57,99,100,57,101,51,101,99,98,54,54,50,51,57,53,98,52,52,50,57,99,54,52,56,49,51,57,48,53,51,102,98,53,50,49,102,56,50,56,97,102,54,48,54,98,52,100,51,100,98,97,97,49,52,98,53,101,55,55,101,102,101,55,53,57,50,56,102,101,49,100,99,49,50,55,97,50,102,102,97,56,100,101,51,51,52,56,98,51,99,49,56,53,54,97,52,50,57,98,102,57,55,101,55,101,51,49,99,50,101,53,98,100,54,54,0] /* 0xc6858e06b70404e9cd */, "i8", ALLOC_NONE, 473776);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 473912);
allocate([98,111,103,117,115,32,114,101,97,100,32,102,114,111,109,32,114,97,110,100,111,109,32,100,101,118,105,99,101,32,40,110,61,37,100,41,10,0] /* bogus read from rand */, "i8", ALLOC_NONE, 473920);
allocate([69,120,112,101,99,116,101,100,32,108,105,98,111,116,114,32,65,80,73,32,118,101,114,115,105,111,110,32,37,117,46,37,117,46,37,117,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,97,99,116,117,97,108,32,118,101,114,115,105,111,110,32,37,117,46,37,117,46,37,117,46,32,32,65,98,111,114,116,105,110,103,46,10,0] /* Expected libotr API  */, "i8", ALLOC_NONE, 473960);
allocate([116,101,109,112,118,97,108,117,101,95,102,111,114,95,120,57,51,49,95,97,101,115,95,100,114,105,118,101,114,0] /* tempvalue_for_x931_a */, "i8", ALLOC_NONE, 474052);
allocate([37,115,9,37,115,9,37,48,56,120,10,0] /* %s\09%s\09%08x\0A\00 */, "i8", ALLOC_NONE, 474084);
allocate([110,111,116,101,58,32,114,97,110,100,111,109,95,115,101,101,100,32,102,105,108,101,32,110,111,116,32,117,112,100,97,116,101,100,10,0] /* note: random_seed fi */, "i8", ALLOC_NONE, 474096);
allocate([107,32,60,32,49,48,0] /* k _ 10\00 */, "i8", ALLOC_NONE, 474132);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 474140);
allocate([119,104,97,116,32,100,111,32,121,97,32,119,97,110,116,32,102,111,114,32,110,111,116,104,105,110,103,63,0] /* what do ya want for  */, "i8", ALLOC_NONE, 474148);
allocate([114,115,0] /* rs\00 */, "i8", ALLOC_NONE, 474180);
allocate([114,115,0] /* rs\00 */, "i8", ALLOC_NONE, 474184);
allocate([114,115,0] /* rs\00 */, "i8", ALLOC_NONE, 474188);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,49,0] /* 0.3.4401.5.3.1.9.41\ */, "i8", ALLOC_NONE, 474192);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,49,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 474212);
allocate([37,42,115,91,100,97,116,97,61,34,0] /* %_s[data=\22\00 */, "i8", ALLOC_NONE, 474244);
allocate([79,111,112,115,44,32,115,101,99,117,114,101,32,109,101,109,111,114,121,32,112,111,111,108,32,97,108,114,101,97,100,121,32,105,110,105,116,105,97,108,105,122,101,100,10,0] /* Oops, secure memory  */, "i8", ALLOC_NONE, 474256);
allocate([65,115,115,101,114,116,105,111,110,32,96,37,115,39,32,102,97,105,108,101,100,32,40,37,115,58,37,100,58,37,115,41,10,0] /* Assertion `%s' faile */, "i8", ALLOC_NONE, 474304);
allocate([112,97,100,108,111,99,107,45,114,110,103,0] /* padlock-rng\00 */, "i8", ALLOC_NONE, 474340);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 474352);
allocate([48,120,49,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,97,53,49,56,54,56,55,56,51,98,102,50,102,57,54,54,98,55,102,99,99,48,49,52,56,102,55,48,57,97,53,100,48,51,98,98,53,99,57,98,56,56,57,57,99,52,55,97,101,98,98,54,102,98,55,49,101,57,49,51,56,54,52,48,57,0] /* 0x1fffffffffffffffff */, "i8", ALLOC_NONE, 474356);
allocate([115,105,103,110,0] /* sign\00 */, "i8", ALLOC_NONE, 474492);
allocate([109,112,105,117,116,105,108,46,99,0] /* mpiutil.c\00 */, "i8", ALLOC_NONE, 474500);
allocate([37,108,88,0] /* %lX\00 */, "i8", ALLOC_NONE, 474512);
allocate([63,79,84,82,32,69,114,114,111,114,58,32,0] /* ?OTR Error: \00 */, "i8", ALLOC_NONE, 474516);
allocate([110,101,100,112,113,117,0] /* nedpqu\00 */, "i8", ALLOC_NONE, 474532);
allocate([101,110,99,114,121,112,116,0] /* encrypt\00 */, "i8", ALLOC_NONE, 474540);
allocate([65,69,83,45,49,50,56,0] /* AES-128\00 */, "i8", ALLOC_NONE, 474548);
allocate([103,99,114,121,95,99,105,112,104,101,114,95,99,108,111,115,101,58,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,47,105,110,118,97,108,105,100,32,104,97,110,100,108,101,0] /* gcry_cipher_close: a */, "i8", ALLOC_NONE, 474556);
allocate([48,120,48,53,49,57,53,51,101,98,57,54,49,56,101,49,99,57,97,49,102,57,50,57,97,50,49,97,48,98,54,56,53,52,48,101,101,97,50,100,97,55,50,53,98,57,57,98,51,49,53,102,51,98,56,98,52,56,57,57,49,56,101,102,49,48,57,101,49,53,54,49,57,51,57,53,49,101,99,55,101,57,51,55,98,49,54,53,50,99,48,98,100,51,98,98,49,98,102,48,55,51,53,55,51,100,102,56,56,51,100,50,99,51,52,102,49,101,102,52,53,49,102,100,52,54,98,53,48,51,102,48,48,0] /* 0x051953eb9618e1c9a1 */, "i8", ALLOC_NONE, 474608);
allocate([107,101,121,32,99,111,110,115,105,115,116,101,110,99,121,0] /* key consistency\00 */, "i8", ALLOC_NONE, 474744);
allocate([82,83,65,0] /* RSA\00 */, "i8", ALLOC_NONE, 474760);
allocate([37,48,50,120,0] /* %02x\00 */, "i8", ALLOC_NONE, 474764);
allocate([84,119,111,102,105,115,104,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-128 test enc */, "i8", ALLOC_NONE, 474772);
allocate([115,105,103,110,0] /* sign\00 */, "i8", ALLOC_NONE, 474808);
allocate([49,46,51,46,54,46,49,46,52,46,49,46,49,49,53,57,49,46,49,50,46,50,0] /* 1.3.6.1.4.1.11591.12 */, "i8", ALLOC_NONE, 474816);
allocate([65,69,83,49,50,56,0] /* AES128\00 */, "i8", ALLOC_NONE, 474840);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,50,0] /* 1.2.840.113549.1.1.1 */, "i8", ALLOC_NONE, 474848);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,49,0] /* 1.2.840.113549.1.1.1 */, "i8", ALLOC_NONE, 474872);
allocate([158,168,134,239,226,104,219,236,206,66,12,117,36,223,50,224,117,26,42,38,0] /* \9E\A8\86\EF\E2h\DB\ */, "i8", ALLOC_NONE, 474896);
allocatex01ffffffffffffffff */, "i8", ALLOC_NONE, 474920);
allocate([99,111,110,118,101,114,116,0] /* convert\00 */, "i8", ALLOC_NONE, 475056);
allocate([102,108,97,103,115,0] /* flags\00 */, "i8", ALLOC_NONE, 475064);
allocate([169,153,62,54,71,6,129,106,186,62,37,113,120,80,194,108,156,208,216,157,0] /* \A9\99_6G\06\81j\BA_ */, "i8", ALLOC_NONE, 475072);
allocate([107,101,121,32,99,111,110,115,105,115,116,101,110,99,121,0] /* key consistency\00 */, "i8", ALLOC_NONE, 475096);
allocate([83,101,114,112,101,110,116,32,116,101,115,116,32,102,97,105,108,117,114,101,58,32,37,115,10,0] /* Serpent test failure */, "i8", ALLOC_NONE, 475112);
allocate([82,73,74,78,68,65,69,76,0] /* RIJNDAEL\00 */, "i8", ALLOC_NONE, 475140);
allocate([83,69,69,68,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* SEED test decryption */, "i8", ALLOC_NONE, 475152);
allocate([83,97,109,112,108,101,32,35,52,0] /* Sample #4\00 */, "i8", ALLOC_NONE, 475184);
allocate([48,120,48,49,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0] /* 0x01ffffffffffffffff */, "i8", ALLOC_NONE, 475196);
allocate([100,115,97,32,32,104,0] /* dsa  h\00 */, "i8", ALLOC_NONE, 475332);
allocate([115,105,103,45,118,97,108,0] /* sig-val\00 */, "i8", ALLOC_NONE, 475340);
allocate([97,0] /* a\00 */, "i8", ALLOC_NONE, 475348);
allocate([99,111,110,118,101,114,116,0] /* convert\00 */, "i8", ALLOC_NONE, 475352);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475360);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,49,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475384);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,52,0] /* FIPS-198a, A.4\00 */, "i8", ALLOC_NONE, 475408);
allocate([78,73,83,84,32,80,45,53,50,49,0] /* NIST P-521\00 */, "i8", ALLOC_NONE, 475424);
allocate([115,101,101,100,0] /* seed\00 */, "i8", ALLOC_NONE, 475436);
allocate([82,70,67,50,50,54,56,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* RFC2268 decryption t */, "i8", ALLOC_NONE, 475444);
allocate([32,32,104,97,115,104,0] /*   hash\00 */, "i8", ALLOC_NONE, 475480);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,120,112,41,41,32,61,61,32,110,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 475488);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,51,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475524);
allocate([188,244,30,171,139,178,216,2,243,208,92,175,124,176,146,236,248,209,163,170,0] /* \BC\F4\1E\AB\8B\B2\D */, "i8", ALLOC_NONE, 475548);
allocate([48,120,51,54,49,55,100,101,52,97,57,54,50,54,50,99,54,102,53,100,57,101,57,56,98,102,57,50,57,50,100,99,50,57,102,56,102,52,49,100,98,100,50,56,57,97,49,52,55,99,101,57,100,97,51,49,49,51,98,53,102,48,98,56,99,48,48,97,54,48,98,49,99,101,49,100,55,101,56,49,57,100,55,97,52,51,49,100,55,99,57,48,101,97,48,101,53,102,0] /* 0x3617de4a96262c6f5d */, "i8", ALLOC_NONE, 475572);
allocate([40,101,110,99,45,118,97,108,40,37,115,40,97,37,98,41,41,41,0] /* (enc-val(%s(a%b)))\0 */, "i8", ALLOC_NONE, 475672);
allocate([33,100,101,114,105,118,101,112,97,114,109,115,0] /* !deriveparms\00 */, "i8", ALLOC_NONE, 475692);
allocate([70,65,84,65,76,58,32,102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,70,83,77,32,108,111,99,107,32,105,110,32,108,105,98,103,114,121,112,116,58,32,37,115,10,0] /* FATAL: failed to acq */, "i8", ALLOC_NONE, 475708);
allocate([32,32,32,115,105,103,0] /*    sig\00 */, "i8", ALLOC_NONE, 475764);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,120,105,41,41,32,61,61,32,49,48,49,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 475772);
allocate([112,114,105,109,101,103,101,110,46,99,0] /* primegen.c\00 */, "i8", ALLOC_NONE, 475808);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475820);
allocate([83,97,109,112,108,101,32,35,51,0] /* Sample #3\00 */, "i8", ALLOC_NONE, 475844);
allocate([48,120,97,97,56,55,99,97,50,50,98,101,56,98,48,53,51,55,56,101,98,49,99,55,49,101,102,51,50,48,97,100,55,52,54,101,49,100,51,98,54,50,56,98,97,55,57,98,57,56,53,57,102,55,52,49,101,48,56,50,53,52,50,97,51,56,53,53,48,50,102,50,53,100,98,102,53,53,50,57,54,99,51,97,53,52,53,101,51,56,55,50,55,54,48,97,98,55,0] /* 0xaa87ca22be8b05378e */, "i8", ALLOC_NONE, 475856);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,114,105,109,101,95,113,41,41,32,61,61,32,113,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 475956);
allocate([70,65,84,65,76,58,32,102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,70,83,77,32,108,111,99,107,32,105,110,32,108,105,98,103,114,121,112,116,58,32,37,115,10,0] /* FATAL: failed to rel */, "i8", ALLOC_NONE, 476000);
allocate([32,32,112,107,101,121,0] /*   pkey\00 */, "i8", ALLOC_NONE, 476056);
allocate([77,68,53,32,117,115,101,100,0] /* MD5 used\00 */, "i8", ALLOC_NONE, 476064);
allocate([32,32,117,0] /*   u\00 */, "i8", ALLOC_NONE, 476076);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,49,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 476080);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 476104);
allocate([63,79,84,82,0] /* ?OTR\00 */, "i8", ALLOC_NONE, 476112);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,51,0] /* FIPS-198a, A.3\00 */, "i8", ALLOC_NONE, 476120);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,99,55,54,51,52,100,56,49,102,52,51,55,50,100,100,102,53,56,49,97,48,100,98,50,52,56,98,48,97,55,55,97,101,99,101,99,49,57,54,97,99,99,99,53,50,57,55,51,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 476136);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,114,105,109,101,95,112,41,41,32,61,61,32,110,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 476236);
allocate([114,97,110,100,111,109,0] /* random\00 */, "i8", ALLOC_NONE, 476280);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 476288);
allocate([112,117,98,107,101,121,95,118,101,114,105,102,121,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_verify: algo= */, "i8", ALLOC_NONE, 476296);
allocate([32,32,100,0] /*   d\00 */, "i8", ALLOC_NONE, 476320);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 476324);
allocate([97,99,99,111,117,110,116,0] /* account\00 */, "i8", ALLOC_NONE, 476328);
allocate([99,111,110,116,101,120,116,32,33,61,32,78,85,76,76,0] /* context != NULL\00 */, "i8", ALLOC_NONE, 476336);
allocate([9,34,211,64,95,170,61,25,79,130,164,88,48,115,125,92,198,199,93,36,0] /* \09\22\D3@_\AA=\19O\ */, "i8", ALLOC_NONE, 476352);
allocate([48,120,98,51,51,49,50,102,97,55,101,50,51,101,101,55,101,52,57,56,56,101,48,53,54,98,101,51,102,56,50,100,49,57,49,56,49,100,57,99,54,101,102,101,56,49,52,49,49,50,48,51,49,52,48,56,56,102,53,48,49,51,56,55,53,97,99,54,53,54,51,57,56,100,56,97,50,101,100,49,57,100,50,97,56,53,99,56,101,100,100,51,101,99,50,97,101,102,0] /* 0xb3312fa7e23ee7e498 */, "i8", ALLOC_NONE, 476376);
allocate([112,107,95,100,115,97,0] /* pk_dsa\00 */, "i8", ALLOC_NONE, 476476);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 476484);
allocate([40,37,115,32,37,37,109,41,0] /* (%s %%m)\00 */, "i8", ALLOC_NONE, 476488);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,102,111,117,110,100,0] /* algorithm not found\ */, "i8", ALLOC_NONE, 476500);
allocate([32,32,101,0] /*   e\00 */, "i8", ALLOC_NONE, 476520);
allocate([65,69,83,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-128 test decrypt */, "i8", ALLOC_NONE, 476524);
allocate([83,97,109,112,108,101,32,35,50,0] /* Sample #2\00 */, "i8", ALLOC_NONE, 476556);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,99,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 476568);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,107,32,0] /* choosing a random k  */, "i8", ALLOC_NONE, 476668);
allocate([32,40,0] /*  (\00 */, "i8", ALLOC_NONE, 476692);
allocate([115,101,108,101,99,116,40,41,32,101,114,114,111,114,58,32,37,115,10,0] /* select() error: %s\0 */, "i8", ALLOC_NONE, 476696);
allocate([97,108,103,111,114,105,116,104,109,32,100,105,115,97,98,108,101,100,0] /* algorithm disabled\0 */, "i8", ALLOC_NONE, 476716);
allocate([33,115,116,114,111,110,103,95,114,110,103,95,99,111,110,116,101,120,116,45,62,116,101,115,116,95,100,116,95,112,116,114,0] /* !strong_rng_context- */, "i8", ALLOC_NONE, 476736);
allocate([35,32,87,65,82,78,73,78,71,33,32,89,111,117,32,115,104,111,117,108,100,110,39,116,32,99,111,112,121,32,116,104,105,115,32,102,105,108,101,32,116,111,32,97,110,111,116,104,101,114,32,99,111,109,112,117,116,101,114,46,32,73,116,32,105,115,32,117,110,110,101,99,101,115,115,97,114,121,32,97,110,100,32,99,97,110,32,99,97,117,115,101,32,112,114,111,98,108,101,109,115,46,10,0] /* # WARNING! You shoul */, "i8", ALLOC_NONE, 476772);
allocate([114,97,110,100,111,109,45,99,115,112,114,110,103,46,99,0] /* random-csprng.c\00 */, "i8", ALLOC_NONE, 476876);
allocate([116,0] /* t\00 */, "i8", ALLOC_NONE, 476892);
allocate([100,97,116,97,45,50,56,32,107,101,121,45,52,0] /* data-28 key-4\00 */, "i8", ALLOC_NONE, 476896);
allocate([100,105,103,101,115,116,32,109,105,115,109,97,116,99,104,0] /* digest mismatch\00 */, "i8", ALLOC_NONE, 476912);
allocate([32,32,110,0] /*   n\00 */, "i8", ALLOC_NONE, 476928);
allocate([97,98,0] /* ab\00 */, "i8", ALLOC_NONE, 476932);
allocate([65,69,83,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-128 test encrypt */, "i8", ALLOC_NONE, 476936);
allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0] /* std::bad_alloc\00 */, "i8", ALLOC_NONE, 476968);
allocate(1, "i8", ALLOC_NONE, 476984);
allocate([110,111,32,115,101,108,102,116,101,115,116,32,97,118,97,105,108,97,98,108,101,0] /* no selftest availabl */, "i8", ALLOC_NONE, 476988);
allocate(1, "i8", ALLOC_NONE, 477012);
allocate([50,0] /* 2\00 */, "i8", ALLOC_NONE, 477016);
allocate([49,46,50,46,51,57,50,46,50,48,48,48,49,49,46,54,49,46,49,46,49,46,49,46,52,0] /* 1.2.392.200011.61.1. */, "i8", ALLOC_NONE, 477020);
allocate([50,78,208,254,244,19,162,3,0] /* 2N\D0\FE\F4\13\A2\03 */, "i8", ALLOC_NONE, 477048);
allocate([65,114,99,102,111,117,114,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* Arcfour decryption t */, "i8", ALLOC_NONE, 477060);
allocate([37,42,115,91,99,108,111,115,101,93,10,0] /* %_s[close]\0A\00 */, "i8", ALLOC_NONE, 477096);
allocate([102,97,105,108,101,100,32,116,111,32,100,114,111,112,32,115,101,116,117,105,100,10,0] /* failed to drop setui */, "i8", ALLOC_NONE, 477108);
allocate([40,112,117,98,108,105,99,45,107,101,121,32,40,100,115,97,32,40,112,32,37,109,41,40,113,32,37,109,41,40,103,32,37,109,41,40,121,32,37,109,41,41,41,0] /* (public-key (dsa (p  */, "i8", ALLOC_NONE, 477132);
allocate([46,46,46,32,116,104,105,115,32,105,115,32,97,32,98,117,103,32,40,37,115,58,37,100,58,37,115,41,10,0] /* ... this is a bug (% */, "i8", ALLOC_NONE, 477176);
allocate([111,117,116,32,111,102,32,99,111,114,101,32,105,110,32,115,101,99,117,114,101,32,109,101,109,111,114,121,0] /* out of core in secur */, "i8", ALLOC_NONE, 477208);
allocate([47,101,116,99,47,103,99,114,121,112,116,47,102,105,112,115,95,101,110,97,98,108,101,100,0] /* /etc/gcrypt/fips_ena */, "i8", ALLOC_NONE, 477240);
allocate([102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,82,78,71,32,108,111,99,107,58,32,37,115,10,0] /* failed to create the */, "i8", ALLOC_NONE, 477268);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,50,0] /* FIPS-198a, A.2\00 */, "i8", ALLOC_NONE, 477304);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 477320);
allocate([115,101,108,102,45,116,101,115,116,32,97,102,116,101,114,32,107,101,121,32,103,101,110,101,114,97,116,105,111,110,32,102,97,105,108,101,100,0] /* self-test after key  */, "i8", ALLOC_NONE, 477420);
allocate([33,97,112,0] /* !ap\00 */, "i8", ALLOC_NONE, 477460);
allocate([79,107,97,121,0] /* Okay\00 */, "i8", ALLOC_NONE, 477464);
allocate([37,48,56,108,88,0] /* %08lX\00 */, "i8", ALLOC_NONE, 477472);
allocate([114,101,115,45,62,100,32,61,61,32,114,112,0] /* res-_d == rp\00 */, "i8", ALLOC_NONE, 477480);
allocate([32,32,9,9,32,32,9,9,0] /*   \09\09  \09\09\00 */, "i8", ALLOC_NONE, 477496);
allocate([37,48,50,88,0] /* %02X\00 */, "i8", ALLOC_NONE, 477508);
allocate([114,115,97,45,117,115,101,45,101,0] /* rsa-use-e\00 */, "i8", ALLOC_NONE, 477516);
allocate([32,32,113,0] /*   q\00 */, "i8", ALLOC_NONE, 477528);
allocate([100,101,99,114,121,112,116,32,109,105,115,109,97,116,99,104,0] /* decrypt mismatch\00 */, "i8", ALLOC_NONE, 477532);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 477552);
allocate([99,111,110,116,101,120,116,46,99,0] /* context.c\00 */, "i8", ALLOC_NONE, 477560);
allocate([102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,82,78,71,32,108,111,99,107,58,32,37,115,10,0] /* failed to acquire th */, "i8", ALLOC_NONE, 477572);
allocate([79,76,163,213,214,139,167,204,10,18,8,201,198,30,156,93,160,64,60,10,0] /* OL\A3\D5\D6\8B\A7\CC */, "i8", ALLOC_NONE, 477608);
allocate([78,73,83,84,32,80,45,51,56,52,0] /* NIST P-384\00 */, "i8", ALLOC_NONE, 477632);
allocate([100,115,97,32,32,120,0] /* dsa  x\00 */, "i8", ALLOC_NONE, 477644);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 477652);
allocate([91,82,93,0] /* [R]\00 */, "i8", ALLOC_NONE, 477660);
allocate([37,115,9,37,115,9,37,115,9,0] /* %s\09%s\09%s\09\00 */, "i8", ALLOC_NONE, 477664);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 477676);
allocate([32,32,112,0] /*   p\00 */, "i8", ALLOC_NONE, 477680);
allocate([100,101,99,114,121,112,116,32,99,111,109,109,97,110,100,0] /* decrypt command\00 */, "i8", ALLOC_NONE, 477684);
allocate([84,73,71,69,82,50,0] /* TIGER2\00 */, "i8", ALLOC_NONE, 477700);
allocate([101,99,99,0] /* ecc\00 */, "i8", ALLOC_NONE, 477708);
allocate([121,0] /* y\00 */, "i8", ALLOC_NONE, 477712);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,50,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 477716);
allocate([109,101,109,111,114,121,32,99,111,114,114,117,112,116,105,111,110,32,100,101,116,101,99,116,101,100,32,105,110,32,82,78,71,32,99,111,110,116,101,120,116,32,37,112,10,0] /* memory corruption de */, "i8", ALLOC_NONE, 477740);
allocate([102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,110,111,110,99,101,32,98,117,102,102,101,114,32,108,111,99,107,58,32,37,115,10,0] /* failed to create the */, "i8", ALLOC_NONE, 477788);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,49,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 477832);
allocate([83,97,109,112,108,101,32,35,49,0] /* Sample #1\00 */, "i8", ALLOC_NONE, 477856);
allocate([48,120,52,102,101,51,52,50,101,50,102,101,49,97,55,102,57,98,56,101,101,55,101,98,52,97,55,99,48,102,57,101,49,54,50,98,99,101,51,51,53,55,54,98,51,49,53,101,99,101,99,98,98,54,52,48,54,56,51,55,98,102,53,49,102,53,0] /* 0x4fe342e2fe1a7f9b8e */, "i8", ALLOC_NONE, 477868);
allocate([100,115,97,32,32,121,0] /* dsa  y\00 */, "i8", ALLOC_NONE, 477936);
allocate([72,77,65,67,45,0] /* HMAC-\00 */, "i8", ALLOC_NONE, 477944);
allocate([109,115,103,45,109,97,108,102,111,114,109,101,100,0] /* msg-malformed\00 */, "i8", ALLOC_NONE, 477952);
allocate([97,98,99,0] /* abc\00 */, "i8", ALLOC_NONE, 477968);
allocate([112,32,97,110,100,32,113,32,97,114,101,32,115,119,97,112,112,101,100,10,0] /* p and q are swapped\ */, "i8", ALLOC_NONE, 477972);
allocate([101,110,99,114,121,112,116,32,109,105,115,109,97,116,99,104,0] /* encrypt mismatch\00 */, "i8", ALLOC_NONE, 477996);
allocate([83,69,82,80,69,78,84,50,53,54,0] /* SERPENT256\00 */, "i8", ALLOC_NONE, 478016);
allocate([112,97,98,103,110,0] /* pabgn\00 */, "i8", ALLOC_NONE, 478028);
allocate([103,0] /* g\00 */, "i8", ALLOC_NONE, 478036);
allocate([83,69,69,68,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* SEED test encryption */, "i8", ALLOC_NONE, 478040);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,82,78,71,32,108,111,99,107,58,32,37,115,10,0] /* failed to release th */, "i8", ALLOC_NONE, 478072);
allocate([102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,112,111,111,108,32,108,111,99,107,58,32,37,115,10,0] /* failed to create the */, "i8", ALLOC_NONE, 478108);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,49,0] /* FIPS-198a, A.1\00 */, "i8", ALLOC_NONE, 478144);
allocate([48,120,54,98,49,55,100,49,102,50,101,49,50,99,52,50,52,55,102,56,98,99,101,54,101,53,54,51,97,52,52,48,102,50,55,55,48,51,55,100,56,49,50,100,101,98,51,51,97,48,102,52,97,49,51,57,52,53,100,56,57,56,99,50,57,54,0] /* 0x6b17d1f2e12c4247f8 */, "i8", ALLOC_NONE, 478160);
allocate([100,115,97,32,32,103,0] /* dsa  g\00 */, "i8", ALLOC_NONE, 478228);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 478236);
allocate([109,115,103,45,117,110,114,101,97,100,98,108,101,0] /* msg-unreadble\00 */, "i8", ALLOC_NONE, 478244);
allocate([110,101,100,112,113,117,0] /* nedpqu\00 */, "i8", ALLOC_NONE, 478260);
allocate([95,103,99,114,121,95,109,112,105,95,103,99,100,32,40,103,44,32,101,44,32,112,104,105,41,0] /* _gcry_mpi_gcd (g, e, */, "i8", ALLOC_NONE, 478268);
allocate([49,46,51,46,51,54,46,51,46,50,46,49,0] /* 1.3.36.3.2.1\00 */, "i8", ALLOC_NONE, 478296);
allocate([101,110,99,114,121,112,116,32,99,111,109,109,97,110,100,0] /* encrypt command\00 */, "i8", ALLOC_NONE, 478312);
allocate([63,79,84,82,124,37,48,56,120,124,37,48,56,120,44,37,48,53,104,117,44,37,48,53,104,117,44,37,115,44,0] /* ?OTR|%08x|%08x,%05hu */, "i8", ALLOC_NONE, 478328);
allocate([40,49,58,37,99,37,117,58,0] /* (1:%c%u:\00 */, "i8", ALLOC_NONE, 478360);
allocate([113,0] /* q\00 */, "i8", ALLOC_NONE, 478372);
allocate([101,114,114,111,114,32,99,114,101,97,116,105,110,103,32,107,101,121,32,102,111,114,32,82,78,71,58,32,37,115,10,0] /* error creating key f */, "i8", ALLOC_NONE, 478376);
allocate([110,111,32,101,110,116,114,111,112,121,32,103,97,116,104,101,114,105,110,103,32,109,111,100,117,108,101,32,100,101,116,101,99,116,101,100,10,0] /* no entropy gathering */, "i8", ALLOC_NONE, 478408);
allocate([100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,105,110,32,115,101,99,111,110,100,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,0] /* does not match in se */, "i8", ALLOC_NONE, 478448);
allocate([65,69,83,50,53,54,0] /* AES256\00 */, "i8", ALLOC_NONE, 478488);
allocate([48,120,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,98,99,101,54,102,97,97,100,97,55,49,55,57,101,56,52,102,51,98,57,99,97,99,50,102,99,54,51,50,53,53,49,0] /* 0xffffffff00000000ff */, "i8", ALLOC_NONE, 478496);
allocate([100,115,97,32,32,113,0] /* dsa  q\00 */, "i8", ALLOC_NONE, 478564);
allocate([104,109,97,99,0] /* hmac\00 */, "i8", ALLOC_NONE, 478572);
allocate([82,70,67,50,50,54,56,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* RFC2268 encryption t */, "i8", ALLOC_NONE, 478580);
allocate([109,115,103,45,110,111,116,45,105,110,45,112,114,105,118,97,116,101,0] /* msg-not-in-private\0 */, "i8", ALLOC_NONE, 478616);
allocate([88,113,0] /* Xq\00 */, "i8", ALLOC_NONE, 478636);
allocate([115,101,116,32,73,86,0] /* set IV\00 */, "i8", ALLOC_NONE, 478640);
allocate([63,79,84,82,44,37,48,53,104,117,44,37,48,53,104,117,44,37,115,44,0] /* ?OTR,%05hu,%05hu,%s, */, "i8", ALLOC_NONE, 478648);
allocate([115,104,97,100,111,119,101,100,45,112,114,105,118,97,116,101,45,107,101,121,0] /* shadowed-private-key */, "i8", ALLOC_NONE, 478672);
allocate([112,0] /* p\00 */, "i8", ALLOC_NONE, 478696);
allocate([101,114,114,111,114,32,99,114,101,97,116,105,110,103,32,99,105,112,104,101,114,32,99,111,110,116,101,120,116,32,102,111,114,32,82,78,71,58,32,37,115,10,0] /* error creating ciphe */, "i8", ALLOC_NONE, 478700);
allocate([47,100,101,118,47,117,114,97,110,100,111,109,0] /* /dev/urandom\00 */, "i8", ALLOC_NONE, 478744);
allocate([95,103,99,114,121,95,104,109,97,99,50,53,54,95,102,105,110,97,108,105,122,101,32,102,97,105,108,101,100,0] /* _gcry_hmac256_finali */, "i8", ALLOC_NONE, 478760);
allocate([48,120,53,97,99,54,51,53,100,56,97,97,51,97,57,51,101,55,98,51,101,98,98,100,53,53,55,54,57,56,56,54,98,99,54,53,49,100,48,54,98,48,99,99,53,51,98,48,102,54,51,98,99,101,51,99,51,101,50,55,100,50,54,48,52,98,0] /* 0x5ac635d8aa3a93e7b3 */, "i8", ALLOC_NONE, 478792);
allocate([100,115,97,32,32,112,0] /* dsa  p\00 */, "i8", ALLOC_NONE, 478860);
allocate([112,117,98,107,101,121,46,99,0] /* pubkey.c\00 */, "i8", ALLOC_NONE, 478868);
allocate([108,105,98,103,99,114,121,112,116,32,115,101,108,102,116,101,115,116,58,32,37,115,32,37,115,37,115,32,40,37,100,41,58,32,37,115,37,115,37,115,37,115,10,0] /* libgcrypt selftest:  */, "i8", ALLOC_NONE, 478880);
allocate([101,110,99,114,121,112,116,105,111,110,45,101,114,114,111,114,0] /* encryption-error\00 */, "i8", ALLOC_NONE, 478924);
allocate([88,113,50,0] /* Xq2\00 */, "i8", ALLOC_NONE, 478944);
allocate([113,98,105,116,115,47,56,32,60,61,32,115,105,122,101,111,102,32,100,105,103,101,115,116,0] /* qbits/8 _= sizeof di */, "i8", ALLOC_NONE, 478948);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,50,46,53,0] /* 1.2.840.113549.2.5\0 */, "i8", ALLOC_NONE, 478976);
allocate([115,101,116,32,107,101,121,0] /* set key\00 */, "i8", ALLOC_NONE, 478996);
allocate([63,79,84,82,44,37,104,117,44,37,104,117,44,37,110,37,42,91,94,44,93,44,37,110,0] /* ?OTR,%hu,%hu,%n%_[^, */, "i8", ALLOC_NONE, 479004);
allocate([112,114,111,116,101,99,116,101,100,45,112,114,105,118,97,116,101,45,107,101,121,0] /* protected-private-ke */, "i8", ALLOC_NONE, 479032);
allocate([119,43,98,0] /* w+b\00 */, "i8", ALLOC_NONE, 479056);
allocate([58,32,0] /* : \00 */, "i8", ALLOC_NONE, 479060);
allocate([115,101,118,101,114,101,32,101,114,114,111,114,32,103,101,116,116,105,110,103,32,114,97,110,100,111,109,10,0] /* severe error getting */, "i8", ALLOC_NONE, 479064);
allocate([47,100,101,118,47,114,97,110,100,111,109,0] /* /dev/random\00 */, "i8", ALLOC_NONE, 479096);
allocate([95,103,99,114,121,95,104,109,97,99,50,53,54,95,110,101,119,32,102,97,105,108,101,100,0] /* _gcry_hmac256_new fa */, "i8", ALLOC_NONE, 479108);
allocate([48,120,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,49,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,99,0] /* 0xffffffff0000000100 */, "i8", ALLOC_NONE, 479136);
allocate([113,98,105,116,115,32,62,61,32,49,54,48,0] /* qbits _= 160\00 */, "i8", ALLOC_NONE, 479204);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 479220);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 479228);
allocate([117,110,105,109,112,108,101,109,101,110,116,101,100,32,102,117,110,99,116,105,111,110,32,99,97,108,108,101,100,0] /* unimplemented functi */, "i8", ALLOC_NONE, 479240);
allocate([88,113,49,0] /* Xq1\00 */, "i8", ALLOC_NONE, 479272);
allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_NONE, 479276);
allocate([108,111,119,45,108,101,118,101,108,0] /* low-level\00 */, "i8", ALLOC_NONE, 479284);
allocate([63,79,84,82,44,0] /* ?OTR,\00 */, "i8", ALLOC_NONE, 479296);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 479304);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 479316);
allocate([79,73,68,46,0] /* OID.\00 */, "i8", ALLOC_NONE, 479320);
allocate([63,79,84,82,37,115,10,60,98,62,37,115,60,47,98,62,32,104,97,115,32,114,101,113,117,101,115,116,101,100,32,97,110,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,111,116,114,46,99,121,112,104,101,114,112,117,110,107,115,46,99,97,47,34,62,79,102,102,45,116,104,101,45,82,101,99,111,114,100,32,112,114,105,118,97,116,101,32,99,111,110,118,101,114,115,97,116,105,111,110,60,47,97,62,46,32,32,72,111,119,101,118,101,114,44,32,121,111,117,32,100,111,32,110,111,116,32,104,97,118,101,32,97,32,112,108,117,103,105,110,32,116,111,32,115,117,112,112,111,114,116,32,116,104,97,116,46,10,83,101,101,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,111,116,114,46,99,121,112,104,101,114,112,117,110,107,115,46,99,97,47,34,62,104,116,116,112,58,47,47,111,116,114,46,99,121,112,104,101,114,112,117,110,107,115,46,99,97,47,60,47,97,62,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,0] /* ?OTR%s\0A_b_%s_/b_ h */, "i8", ALLOC_NONE, 479328);
allocate(1, "i8", ALLOC_NONE, 479588);
allocate([102,111,114,107,32,119,105,116,104,111,117,116,32,112,114,111,112,101,114,32,114,101,45,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,100,101,116,101,99,116,101,100,32,105,110,32,82,78,71,0] /* fork without proper  */, "i8", ALLOC_NONE, 479592);
allocate([87,65,82,78,73,78,71,58,32,117,115,105,110,103,32,105,110,115,101,99,117,114,101,32,114,97,110,100,111,109,32,110,117,109,98,101,114,32,103,101,110,101,114,97,116,111,114,33,33,10,0] /* WARNING: using insec */, "i8", ALLOC_NONE, 479648);
allocate([100,111,101,115,32,110,111,116,32,109,97,116,99,104,0] /* does not match\00 */, "i8", ALLOC_NONE, 479700);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 479716);
allocate([48,120,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,49,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0] /* 0xffffffff0000000100 */, "i8", ALLOC_NONE, 479724);
allocate([32,40,116,114,97,110,115,105,101,110,116,45,107,101,121,41,0] /*  (transient-key)\00 */, "i8", ALLOC_NONE, 479792);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 479812);
allocate([99,105,112,104,101,114,46,99,0] /* cipher.c\00 */, "i8", ALLOC_NONE, 479816);
allocate([112,114,111,116,111,99,111,108,0] /* protocol\00 */, "i8", ALLOC_NONE, 479828);
allocate([88,112,0] /* Xp\00 */, "i8", ALLOC_NONE, 479840);
allocate([110,111,32,116,101,115,116,32,100,97,116,97,32,102,111,114,32,116,104,105,115,32,109,111,100,101,0] /* no test data for thi */, "i8", ALLOC_NONE, 479844);
allocate([63,79,84,82,124,37,42,120,124,37,42,120,44,37,104,117,44,37,104,117,44,37,110,37,42,91,94,44,93,44,37,110,0] /* ?OTR|%_x|%_x,%hu,%hu */, "i8", ALLOC_NONE, 479872);
allocate([112,117,98,108,105,99,45,107,101,121,0] /* public-key\00 */, "i8", ALLOC_NONE, 479908);
allocate([32,41,10,0] /*  )\0A\00 */, "i8", ALLOC_NONE, 479920);
allocate([111,105,100,46,0] /* oid.\00 */, "i8", ALLOC_NONE, 479924);
allocate([37,115,37,115,37,115,58,32,37,115,10,0] /* %s%s%s: %s\0A\00 */, "i8", ALLOC_NONE, 479932);
allocate([112,114,105,118,107,101,121,115,0] /* privkeys\00 */, "i8", ALLOC_NONE, 479944);
allocate([102,45,62,102,105,110,103,101,114,112,114,105,110,116,32,33,61,32,78,85,76,76,0] /* f-_fingerprint != NU */, "i8", ALLOC_NONE, 479956);
allocate([114,110,103,95,99,116,120,0] /* rng_ctx\00 */, "i8", ALLOC_NONE, 479980);
allocate([102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,112,111,111,108,32,108,111,99,107,58,32,37,115,10,0] /* failed to acquire th */, "i8", ALLOC_NONE, 479988);
allocate([103,99,114,121,95,109,100,95,114,101,97,100,32,102,97,105,108,101,100,0] /* gcry_md_read failed\ */, "i8", ALLOC_NONE, 480028);
allocate([78,73,83,84,32,80,45,50,53,54,0] /* NIST P-256\00 */, "i8", ALLOC_NONE, 480048);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,120,37,115,0] /* choosing a random x% */, "i8", ALLOC_NONE, 480060);
allocate([83,104,117,116,100,111,119,110,0] /* Shutdown\00 */, "i8", ALLOC_NONE, 480084);
allocate([40,0] /* (\00 */, "i8", ALLOC_NONE, 480096);
allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NONE, 480100);
allocate([88,112,50,0] /* Xp2\00 */, "i8", ALLOC_NONE, 480108);
allocate([111,102,98,0] /* ofb\00 */, "i8", ALLOC_NONE, 480112);
allocate([63,79,84,82,124,0] /* ?OTR|\00 */, "i8", ALLOC_NONE, 480116);
allocate([112,32,45,32,115,116,114,105,110,103,32,60,32,110,101,101,100,101,100,0] /* p - string _ needed\ */, "i8", ALLOC_NONE, 480124);
allocate([112,114,105,109,101,103,101,110,0] /* primegen\00 */, "i8", ALLOC_NONE, 480144);
allocate([40,112,114,111,116,111,99,111,108,32,37,115,41,0] /* (protocol %s)\00 */, "i8", ALLOC_NONE, 480156);
allocate([109,100,95,101,110,97,98,108,101,58,32,97,108,103,111,114,105,116,104,109,32,37,100,32,110,111,116,32,97,118,97,105,108,97,98,108,101,10,0] /* md_enable: algorithm */, "i8", ALLOC_NONE, 480172);
allocate([102,97,105,108,101,100,32,116,111,32,100,117,109,112,32,100,97,116,97,32,115,101,116,0] /* failed to dump data  */, "i8", ALLOC_NONE, 480212);
allocate([98,117,102,102,101,114,0] /* buffer\00 */, "i8", ALLOC_NONE, 480236);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,112,111,111,108,32,108,111,99,107,58,32,37,115,10,0] /* failed to release th */, "i8", ALLOC_NONE, 480244);
allocate([103,99,114,121,95,109,100,95,115,101,116,107,101,121,32,102,97,105,108,101,100,0] /* gcry_md_setkey faile */, "i8", ALLOC_NONE, 480284);
allocate([48,120,98,100,51,55,54,51,56,56,98,53,102,55,50,51,102,98,52,99,50,50,100,102,101,54,99,100,52,51,55,53,97,48,53,97,48,55,52,55,54,52,52,52,100,53,56,49,57,57,56,53,48,48,55,101,51,52,0] /* 0xbd376388b5f723fb4c */, "i8", ALLOC_NONE, 480308);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,113,41,41,32,61,61,32,113,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 480368);
allocate([37,99,0] /* %c\00 */, "i8", ALLOC_NONE, 480404);
allocate([103,108,111,98,97,108,46,99,0] /* global.c\00 */, "i8", ALLOC_NONE, 480408);
allocate([70,97,116,97,108,45,69,114,114,111,114,0] /* Fatal-Error\00 */, "i8", ALLOC_NONE, 480420);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 480432);
allocate([117,115,101,100,32,105,110,32,110,111,110,45,111,112,101,114,97,116,105,111,110,97,108,32,115,116,97,116,101,0] /* used in non-operatio */, "i8", ALLOC_NONE, 480436);
allocate([110,101,101,100,95,101,110,116,114,111,112,121,0] /* need_entropy\00 */, "i8", ALLOC_NONE, 480468);
allocate([97,99,99,111,117,110,116,0] /* account\00 */, "i8", ALLOC_NONE, 480484);
allocate([33,115,116,100,95,114,110,103,95,99,111,110,116,101,120,116,45,62,116,101,115,116,95,100,116,95,112,116,114,0] /* !std_rng_context-_te */, "i8", ALLOC_NONE, 480492);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 480524);
allocate(1, "i8", ALLOC_NONE, 480528);
allocate([105,61,61,107,0] /* i==k\00 */, "i8", ALLOC_NONE, 480532);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0] /* algorithm not availa */, "i8", ALLOC_NONE, 480540);
allocate([105,110,118,97,108,105,100,32,68,65,84,65,77,79,68,69,0] /* invalid DATAMODE\00 */, "i8", ALLOC_NONE, 480564);
allocate([88,112,49,0] /* Xp1\00 */, "i8", ALLOC_NONE, 480584);
allocate([112,103,121,120,0] /* pgyx\00 */, "i8", ALLOC_NONE, 480588);
allocate([99,102,98,0] /* cfb\00 */, "i8", ALLOC_NONE, 480596);
allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* in use bytes     = % */, "i8", ALLOC_NONE, 480600);
allocate([112,97,98,103,110,113,100,0] /* pabgnqd\00 */, "i8", ALLOC_NONE, 480628);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 480636);
allocate([63,79,84,82,58,0] /* ?OTR:\00 */, "i8", ALLOC_NONE, 480640);
allocate([48,120,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,67,57,48,70,68,65,65,50,50,49,54,56,67,50,51,52,67,52,67,54,54,50,56,66,56,48,68,67,49,67,68,49,50,57,48,50,52,69,48,56,56,65,54,55,67,67,55,52,48,50,48,66,66,69,65,54,51,66,49,51,57,66,50,50,53,49,52,65,48,56,55,57,56,69,51,52,48,52,68,68,69,70,57,53,49,57,66,51,67,68,51,65,52,51,49,66,51,48,50,66,48,65,54,68,70,50,53,70,49,52,51,55,52,70,69,49,51,53,54,68,54,68,53,49,67,50,52,53,69,52,56,53,66,53,55,54,54,50,53,69,55,69,67,54,70,52,52,67,52,50,69,57,65,54,51,55,69,68,54,66,48,66,70,70,53,67,66,54,70,52,48,54,66,55,69,68,69,69,51,56,54,66,70,66,53,65,56,57,57,70,65,53,65,69,57,70,50,52,49,49,55,67,52,66,49,70,69,54,52,57,50,56,54,54,53,49,69,67,69,52,53,66,51,68,67,50,48,48,55,67,66,56,65,49,54,51,66,70,48,53,57,56,68,65,52,56,51,54,49,67,53,53,68,51,57,65,54,57,49,54,51,70,65,56,70,68,50,52,67,70,53,70,56,51,54,53,53,68,50,51,68,67,65,51,65,68,57,54,49,67,54,50,70,51,53,54,50,48,56,53,53,50,66,66,57,69,68,53,50,57,48,55,55,48,57,54,57,54,54,68,54,55,48,67,51,53,52,69,52,65,66,67,57,56,48,52,70,49,55,52,54,67,48,56,67,65,50,51,55,51,50,55,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0] /* 0xFFFFFFFFFFFFFFFFC9 */, "i8", ALLOC_NONE, 480648);
allocate([112,113,103,121,120,0] /* pqgyx\00 */, "i8", ALLOC_NONE, 481036);
allocate([110,98,105,116,115,32,61,61,32,95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,114,105,109,101,41,41,0] /* nbits == _gcry_mpi_g */, "i8", ALLOC_NONE, 481044);
allocate([67,82,67,50,52,82,70,67,50,52,52,48,0] /* CRC24RFC2440\00 */, "i8", ALLOC_NONE, 481084);
allocate([49,0] /* 1\00 */, "i8", ALLOC_NONE, 481100);
allocate([67,65,77,69,76,76,73,65,50,53,54,0] /* CAMELLIA256\00 */, "i8", ALLOC_NONE, 481104);
allocate([97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* abcdefghijklmnopqrst */, "i8", ALLOC_NONE, 481116);
allocate([65,114,99,102,111,117,114,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* Arcfour encryption t */, "i8", ALLOC_NONE, 481144);
allocate([40,110,97,109,101,32,37,115,41,0] /* (name %s)\00 */, "i8", ALLOC_NONE, 481180);
allocate([117,110,107,110,111,119,110,0] /* unknown\00 */, "i8", ALLOC_NONE, 481192);
allocate(1, "i8", ALLOC_NONE, 481200);
allocate([115,101,99,117,114,101,32,109,101,109,111,114,121,32,112,111,111,108,32,105,115,32,110,111,116,32,108,111,99,107,101,100,32,119,104,105,108,101,32,105,110,32,70,73,80,83,32,109,111,100,101,10,0] /* secure memory pool i */, "i8", ALLOC_NONE, 481204);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 481260);
allocate([0,1,10,0] /* \00\01\0A\00 */, "i8", ALLOC_NONE, 481264);
allocate([110,111,45,98,108,105,110,100,105,110,103,0] /* no-blinding\00 */, "i8", ALLOC_NONE, 481268);
allocate([111,117,116,32,111,102,32,99,111,114,101,32,104,97,110,100,108,101,114,32,105,103,110,111,114,101,100,32,105,110,32,70,73,80,83,32,109,111,100,101,10,0] /* out of core handler  */, "i8", ALLOC_NONE, 481280);
allocate([33,110,111,95,102,105,112,115,95,109,111,100,101,95,114,101,113,117,105,114,101,100,0] /* !no_fips_mode_requir */, "i8", ALLOC_NONE, 481324);
allocate([42,108,111,99,107,32,61,61,32,77,85,84,69,88,95,76,79,67,75,69,68,0] /* _lock == MUTEX_LOCKE */, "i8", ALLOC_NONE, 481348);
allocate([101,110,116,114,111,112,121,95,99,111,108,108,101,99,116,95,98,117,102,102,101,114,0] /* entropy_collect_buff */, "i8", ALLOC_NONE, 481372);
allocate([119,97,105,116,105,110,103,32,102,111,114,32,108,111,99,107,32,111,110,32,96,37,115,39,46,46,46,10,0] /* waiting for lock on  */, "i8", ALLOC_NONE, 481396);
allocate([103,99,114,121,95,109,100,95,111,112,101,110,32,102,97,105,108,101,100,0] /* gcry_md_open failed\ */, "i8", ALLOC_NONE, 481428);
allocate([111,112,101,110,112,103,112,45,101,108,103,45,115,105,103,0] /* openpgp-elg-sig\00 */, "i8", ALLOC_NONE, 481448);
allocate([116,108,118,45,62,100,97,116,97,32,33,61,32,78,85,76,76,0] /* tlv-_data != NULL\00 */, "i8", ALLOC_NONE, 481464);
allocate([48,120,98,55,48,101,48,99,98,100,54,98,98,52,98,102,55,102,51,50,49,51,57,48,98,57,52,97,48,51,99,49,100,51,53,54,99,50,49,49,50,50,51,52,51,50,56,48,100,54,49,49,53,99,49,100,50,49,0] /* 0xb70e0cbd6bb4bf7f32 */, "i8", ALLOC_NONE, 481484);
allocate([100,115,97,46,99,0] /* dsa.c\00 */, "i8", ALLOC_NONE, 481544);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,0] /* 0.3.4401.5.3.1.9.4\0 */, "i8", ALLOC_NONE, 481552);
allocate([92,48,0] /* \5C0\00 */, "i8", ALLOC_NONE, 481572);
allocate([105,110,118,97,108,105,100,32,102,108,97,103,32,118,97,108,117,101,10,0] /* invalid flag value\0 */, "i8", ALLOC_NONE, 481576);
allocate([102,105,112,115,45,109,111,100,101,58,37,99,58,37,99,58,10,0] /* fips-mode:%c:%c:\0A\ */, "i8", ALLOC_NONE, 481596);
allocate([69,114,114,111,114,0] /* Error\00 */, "i8", ALLOC_NONE, 481616);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 481624);
allocate([45,0] /* -\00 */, "i8", ALLOC_NONE, 481628);
allocate([33,109,112,95,109,97,114,107,101,114,0] /* !mp_marker\00 */, "i8", ALLOC_NONE, 481632);
allocate([32,32,9,9,32,32,9,32,0] /*   \09\09  \09 \00 */, "i8", ALLOC_NONE, 481644);
allocate([119,104,105,114,108,112,111,111,108,46,99,0] /* whirlpool.c\00 */, "i8", ALLOC_NONE, 481656);
allocate([112,114,105,118,107,101,121,115,0] /* privkeys\00 */, "i8", ALLOC_NONE, 481668);
allocate([115,101,108,102,45,116,101,115,116,32,97,102,116,101,114,32,107,101,121,32,103,101,110,101,114,97,116,105,111,110,32,102,97,105,108,101,100,0] /* self-test after key  */, "i8", ALLOC_NONE, 481680);
allocate([65,69,83,45,49,57,50,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-192 test decrypt */, "i8", ALLOC_NONE, 481720);
allocate([40,109,105,115,99,45,107,101,121,45,105,110,102,111,40,112,109,49,45,102,97,99,116,111,114,115,0] /* (misc-key-info(pm1-f */, "i8", ALLOC_NONE, 481752);
allocate([108,101,110,112,32,61,61,32,48,0] /* lenp == 0\00 */, "i8", ALLOC_NONE, 481780);
allocate([44,32,112,37,100,61,37,117,0] /* , p%d=%u\00 */, "i8", ALLOC_NONE, 481792);
allocate([33,32,97,104,100,45,62,98,117,102,112,111,115,0] /* ! ahd-_bufpos\00 */, "i8", ALLOC_NONE, 481804);
allocate([32,40,97,99,99,111,117,110,116,10,0] /*  (account\0A\00 */, "i8", ALLOC_NONE, 481820);
allocate([118,105,115,105,98,105,108,105,116,121,46,99,0] /* visibility.c\00 */, "i8", ALLOC_NONE, 481832);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 481848);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 481852);
allocate([101,114,114,111,114,32,103,101,116,116,105,110,103,32,101,110,116,114,111,112,121,32,100,97,116,97,10,0] /* error getting entrop */, "i8", ALLOC_NONE, 481856);
allocate([99,97,110,39,116,32,108,111,99,107,32,96,37,115,39,58,32,37,115,10,0] /* can't lock `%s': %s\ */, "i8", ALLOC_NONE, 481884);
allocate([105,110,118,97,108,105,100,32,116,101,115,116,115,32,100,97,116,97,0] /* invalid tests data\0 */, "i8", ALLOC_NONE, 481908);
allocate([111,112,101,110,112,103,112,45,101,108,103,0] /* openpgp-elg\00 */, "i8", ALLOC_NONE, 481928);
allocate([47,100,101,118,47,114,97,110,100,111,109,0] /* /dev/random\00 */, "i8", ALLOC_NONE, 481940);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,49,54,97,50,101,48,98,56,102,48,51,101,49,51,100,100,50,57,52,53,53,99,53,99,50,97,51,100,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 481952);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,41,41,32,61,61,32,110,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 482012);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,51,0] /* 0.3.4401.5.3.1.9.3\0 */, "i8", ALLOC_NONE, 482048);
allocate([92,98,0] /* \5Cb\00 */, "i8", ALLOC_NONE, 482068);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 482072);
allocate([79,112,101,114,97,116,105,111,110,97,108,0] /* Operational\00 */, "i8", ALLOC_NONE, 482076);
allocate([40,112,114,105,118,107,101,121,115,32,40,97,99,99,111,117,110,116,32,40,110,97,109,101,32,37,115,41,32,40,112,114,111,116,111,99,111,108,32,37,115,41,32,40,112,114,105,118,97,116,101,45,107,101,121,32,40,100,115,97,32,32,32,32,32,32,32,32,32,40,112,32,37,77,41,32,40,113,32,37,77,41,32,40,103,32,37,77,41,32,40,121,32,37,77,41,32,40,120,32,37,77,41,32,41,41,41,41,0] /* (privkeys (account ( */, "i8", ALLOC_NONE, 482088);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 482200);
allocate([84,87,79,70,73,83,72,49,50,56,0] /* TWOFISH128\00 */, "i8", ALLOC_NONE, 482204);
allocate([32,32,117,61,32,0] /*   u= \00 */, "i8", ALLOC_NONE, 482216);
allocate([65,69,83,45,49,57,50,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-192 test encrypt */, "i8", ALLOC_NONE, 482224);
allocate([84,73,71,69,82,0] /* TIGER\00 */, "i8", ALLOC_NONE, 482256);
allocate([40,112,114,105,118,97,116,101,45,107,101,121,40,0] /* (private-key(\00 */, "i8", ALLOC_NONE, 482264);
allocate([112,114,111,116,111,46,99,0] /* proto.c\00 */, "i8", ALLOC_NONE, 482280);
allocate([33,110,111,110,99,101,95,99,111,110,116,101,120,116,45,62,116,101,115,116,95,100,116,95,112,116,114,0] /* !nonce_context-_test */, "i8", ALLOC_NONE, 482288);
allocate([44,32,113,48,61,37,117,0] /* , q0=%u\00 */, "i8", ALLOC_NONE, 482316);
allocate([97,104,100,45,62,98,117,102,115,105,122,101,32,61,61,32,40,110,32,45,32,115,105,122,101,111,102,32,40,115,116,114,117,99,116,32,103,99,114,121,95,109,100,95,104,97,110,100,108,101,41,32,43,32,49,41,0] /* ahd-_bufsize == (n - */, "i8", ALLOC_NONE, 482324);
allocate([40,115,105,103,45,118,97,108,32,40,100,115,97,32,40,114,32,37,109,41,40,115,32,37,109,41,41,41,0] /* (sig-val (dsa (r %m) */, "i8", ALLOC_NONE, 482384);
allocate([79,73,68,46,0] /* OID.\00 */, "i8", ALLOC_NONE, 482416);
allocate([83,72,65,51,56,52,0] /* SHA384\00 */, "i8", ALLOC_NONE, 482424);
allocate([40,102,108,97,103,115,0] /* (flags\00 */, "i8", ALLOC_NONE, 482432);
allocate([33,101,110,116,114,111,112,121,95,99,111,108,108,101,99,116,95,98,117,102,102,101,114,0] /* !entropy_collect_buf */, "i8", ALLOC_NONE, 482440);
allocate([99,97,110,39,116,32,114,101,97,100,32,96,37,115,39,58,32,37,115,10,0] /* can't read `%s': %s\ */, "i8", ALLOC_NONE, 482464);
allocate([84,104,105,115,32,105,115,32,97,32,116,101,115,116,32,117,115,105,110,103,32,97,32,108,97,114,103,101,114,32,116,104,97,110,32,98,108,111,99,107,45,115,105,122,101,32,107,101,121,32,97,110,100,32,97,32,108,97,114,103,101,114,32,116,104,97,110,32,98,108,111,99,107,45,115,105,122,101,32,100,97,116,97,46,32,84,104,101,32,107,101,121,32,110,101,101,100,115,32,116,111,32,98,101,32,104,97,115,104,101,100,32,98,101,102,111,114,101,32,98,101,105,110,103,32,117,115,101,100,32,98,121,32,116,104,101,32,72,77,65,67,32,97,108,103,111,114,105,116,104,109,46,0] /* This is a test using */, "i8", ALLOC_NONE, 482488);
allocate([101,108,103,0] /* elg\00 */, "i8", ALLOC_NONE, 482644);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 482648);
allocate([48,120,98,52,48,53,48,97,56,53,48,99,48,52,98,51,97,98,102,53,52,49,51,50,53,54,53,48,52,52,98,48,98,55,100,55,98,102,100,56,98,97,50,55,48,98,51,57,52,51,50,51,53,53,102,102,98,52,0] /* 0xb4050a850c04b3abf5 */, "i8", ALLOC_NONE, 482656);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 482716);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,49,0] /* 0.3.4401.5.3.1.9.1\0 */, "i8", ALLOC_NONE, 482720);
allocate([92,118,0] /* \5Cv\00 */, "i8", ALLOC_NONE, 482740);
allocate([83,72,65,50,53,54,0] /* SHA256\00 */, "i8", ALLOC_NONE, 482744);
allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_NONE, 482752);
allocate([83,101,108,102,45,84,101,115,116,0] /* Self-Test\00 */, "i8", ALLOC_NONE, 482756);
allocate([114,97,110,100,111,109,32,117,115,97,103,101,58,32,112,111,111,108,115,105,122,101,61,37,100,32,109,105,120,101,100,61,37,108,117,32,112,111,108,108,115,61,37,108,117,47,37,108,117,32,97,100,100,101,100,61,37,108,117,47,37,108,117,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,109,105,120,61,37,108,117,32,103,101,116,108,118,108,49,61,37,108,117,47,37,108,117,32,103,101,116,108,118,108,50,61,37,108,117,47,37,108,117,37,115,10,0] /* random usage: poolsi */, "i8", ALLOC_NONE, 482768);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 482892);
allocate([121,0] /* y\00 */, "i8", ALLOC_NONE, 482896);
allocate([107,0] /* k\00 */, "i8", ALLOC_NONE, 482900);
allocate([115,104,111,114,116,32,115,116,114,105,110,103,0] /* short string\00 */, "i8", ALLOC_NONE, 482904);
allocate([32,32,100,61,32,0] /*   d= \00 */, "i8", ALLOC_NONE, 482920);
allocate([65,69,83,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-256 test decrypt */, "i8", ALLOC_NONE, 482928);
allocate([83,69,82,80,69,78,84,49,57,50,0] /* SERPENT192\00 */, "i8", ALLOC_NONE, 482960);
allocate([37,83,0] /* %S\00 */, "i8", ALLOC_NONE, 482972);
allocate([0,3,3,0] /* \00\03\03\00 */, "i8", ALLOC_NONE, 482976);
allocate([98,105,116,32,115,105,122,101,115,58,32,112,114,105,109,101,61,37,117,44,32,113,61,37,117,0] /* bit sizes: prime=%u, */, "i8", ALLOC_NONE, 482980);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 483008);
allocate([107,101,121,108,101,110,32,60,61,32,104,100,45,62,99,116,120,45,62,109,97,99,112,97,100,115,95,66,115,105,122,101,0] /* keylen _= hd-_ctx-_m */, "i8", ALLOC_NONE, 483012);
allocate([115,0] /* s\00 */, "i8", ALLOC_NONE, 483048);
allocate([111,105,100,46,0] /* oid.\00 */, "i8", ALLOC_NONE, 483052);
allocate([99,111,110,116,101,120,116,95,112,114,105,118,46,99,0] /* context_priv.c\00 */, "i8", ALLOC_NONE, 483060);
allocate([97,99,95,105,111,45,62,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,87,82,73,84,65,66,76,69,0] /* ac_io-_mode == GCRY_ */, "i8", ALLOC_NONE, 483076);
allocate([104,109,97,99,0] /* hmac\00 */, "i8", ALLOC_NONE, 483112);
allocate([103,101,116,116,105,109,101,111,102,100,97,121,40,41,32,102,97,105,108,101,100,58,32,37,115,10,0] /* gettimeofday() faile */, "i8", ALLOC_NONE, 483120);
allocate([119,97,114,110,105,110,103,58,32,105,110,118,97,108,105,100,32,115,105,122,101,32,111,102,32,114,97,110,100,111,109,95,115,101,101,100,32,102,105,108,101,32,45,32,110,111,116,32,117,115,101,100,10,0] /* warning: invalid siz */, "i8", ALLOC_NONE, 483148);
allocate([100,105,103,101,115,116,32,115,105,122,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,101,120,112,101,99,116,101,100,32,115,105,122,101,0] /* digest size does not */, "i8", ALLOC_NONE, 483204);
allocate([100,97,116,97,45,49,53,50,32,107,101,121,45,49,51,49,0] /* data-152 key-131\00 */, "i8", ALLOC_NONE, 483248);
allocate([117,115,105,110,103,32,97,32,115,117,112,112,108,105,101,100,32,120,32,111,102,32,115,105,122,101,32,37,117,0] /* using a supplied x o */, "i8", ALLOC_NONE, 483268);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 483300);
allocate([37,109,0] /* %m\00 */, "i8", ALLOC_NONE, 483360);
allocate([49,46,50,46,51,57,50,46,50,48,48,48,49,49,46,54,49,46,49,46,49,46,49,46,50,0] /* 1.2.392.200011.61.1. */, "i8", ALLOC_NONE, 483364);
allocate([92,102,0] /* \5Cf\00 */, "i8", ALLOC_NONE, 483392);
allocate([104,119,102,108,105,115,116,58,0] /* hwflist:\00 */, "i8", ALLOC_NONE, 483396);
allocate([73,110,105,116,0] /* Init\00 */, "i8", ALLOC_NONE, 483408);
allocate([103,0] /* g\00 */, "i8", ALLOC_NONE, 483416);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,51,0] /* 1.2.840.113549.1.1.1 */, "i8", ALLOC_NONE, 483420);
allocate([48,120,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,67,57,48,70,68,65,65,50,50,49,54,56,67,50,51,52,67,52,67,54,54,50,56,66,56,48,68,67,49,67,68,49,50,57,48,50,52,69,48,56,56,65,54,55,67,67,55,52,48,50,48,66,66,69,65,54,51,66,49,51,57,66,50,50,53,49,52,65,48,56,55,57,56,69,51,52,48,52,68,68,69,70,57,53,49,57,66,51,67,68,51,65,52,51,49,66,51,48,50,66,48,65,54,68,70,50,53,70,49,52,51,55,52,70,69,49,51,53,54,68,54,68,53,49,67,50,52,53,69,52,56,53,66,53,55,54,54,50,53,69,55,69,67,54,70,52,52,67,52,50,69,57,65,54,51,55,69,68,54,66,48,66,70,70,53,67,66,54,70,52,48,54,66,55,69,68,69,69,51,56,54,66,70,66,53,65,56,57,57,70,65,53,65,69,57,70,50,52,49,49,55,67,52,66,49,70,69,54,52,57,50,56,54,54,53,49,69,67,69,52,53,66,51,68,67,50,48,48,55,67,66,56,65,49,54,51,66,70,48,53,57,56,68,65,52,56,51,54,49,67,53,53,68,51,57,65,54,57,49,54,51,70,65,56,70,68,50,52,67,70,53,70,56,51,54,53,53,68,50,51,68,67,65,51,65,68,57,54,49,67,54,50,70,51,53,54,50,48,56,53,53,50,66,66,57,69,68,53,50,57,48,55,55,48,57,54,57,54,54,68,54,55,48,67,51,53,52,69,52,65,66,67,57,56,48,52,70,49,55,52,54,67,48,56,67,65,50,51,55,51,50,55,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0] /* 0xFFFFFFFFFFFFFFFFC9 */, "i8", ALLOC_NONE, 483444);
allocate([110,101,0] /* ne\00 */, "i8", ALLOC_NONE, 483832);
allocate([69,76,71,0] /* ELG\00 */, "i8", ALLOC_NONE, 483836);
allocate([32,32,101,61,32,0] /*   e= \00 */, "i8", ALLOC_NONE, 483840);
allocate([49,46,51,46,51,54,46,51,46,51,46,49,46,50,0] /* 1.3.36.3.3.1.2\00 */, "i8", ALLOC_NONE, 483848);
allocate([65,69,83,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-256 test encrypt */, "i8", ALLOC_NONE, 483864);
allocate([40,112,117,98,108,105,99,45,107,101,121,40,0] /* (public-key(\00 */, "i8", ALLOC_NONE, 483896);
allocate([102,97,99,116,111,114,32,112,105,58,32,0] /* factor pi: \00 */, "i8", ALLOC_NONE, 483912);
allocate([0,2,3,0] /* \00\02\03\00 */, "i8", ALLOC_NONE, 483924);
allocate([109,111,114,101,32,116,104,97,110,32,111,110,101,32,97,108,103,111,114,105,116,104,109,32,105,110,32,109,100,95,114,101,97,100,40,48,41,10,0] /* more than one algori */, "i8", ALLOC_NONE, 483928);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 483968);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 483972);
allocate([97,99,95,105,111,45,62,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,82,69,65,68,65,66,76,69,0] /* ac_io-_mode == GCRY_ */, "i8", ALLOC_NONE, 483976);
allocate([65,69,83,32,101,110,99,114,121,112,116,105,111,110,32,105,110,32,82,78,71,32,102,97,105,108,101,100,58,32,37,115,10,0] /* AES encryption in RN */, "i8", ALLOC_NONE, 484012);
allocate([110,111,116,101,58,32,114,97,110,100,111,109,95,115,101,101,100,32,102,105,108,101,32,105,115,32,101,109,112,116,121,10,0] /* note: random_seed fi */, "i8", ALLOC_NONE, 484048);
allocatei8", ALLOC_NONE, 484084);
allocate([112,107,95,101,108,103,0] /* pk_elg\00 */, "i8", ALLOC_NONE, 484216);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 484224);
allocate([40,112,109,49,45,102,97,99,116,111,114,115,0] /* (pm1-factors\00 */, "i8", ALLOC_NONE, 484284);
allocate([67,65,77,69,76,76,73,65,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-256 test de */, "i8", ALLOC_NONE, 484300);
allocate([92,114,0] /* \5Cr\00 */, "i8", ALLOC_NONE, 484340);
allocate([65,69,83,49,57,50,0] /* AES192\00 */, "i8", ALLOC_NONE, 484344);
allocate([109,112,105,45,97,115,109,58,37,115,58,10,0] /* mpi-asm:%s:\0A\00 */, "i8", ALLOC_NONE, 484352);
allocate([80,111,119,101,114,45,79,110,0] /* Power-On\00 */, "i8", ALLOC_NONE, 484368);
allocate([113,0] /* q\00 */, "i8", ALLOC_NONE, 484380);
allocate([82,70,67,50,50,54,56,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,37,115,41,46,10,0] /* RFC2268 selftest fai */, "i8", ALLOC_NONE, 484384);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,51,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 484416);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,52,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 484440);
allocate([32,32,110,61,32,0] /*   n= \00 */, "i8", ALLOC_NONE, 484464);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 484472);
allocate([69,67,68,83,65,0] /* ECDSA\00 */, "i8", ALLOC_NONE, 484480);
allocate([40,107,101,121,45,100,97,116,97,0] /* (key-data\00 */, "i8", ALLOC_NONE, 484488);
allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0] /* max system bytes = % */, "i8", ALLOC_NONE, 484500);
allocate([102,97,99,116,111,114,32,113,48,58,32,0] /* factor q0: \00 */, "i8", ALLOC_NONE, 484528);
allocate([0,1,3,0] /* \00\01\03\00 */, "i8", ALLOC_NONE, 484540);
allocate([87,65,82,78,73,78,71,58,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,97,108,103,111,114,105,116,104,109,32,105,110,32,109,100,95,103,101,116,95,97,108,103,111,40,41,10,0] /* WARNING: more than o */, "i8", ALLOC_NONE, 484544);
allocate([101,99,100,115,97,0] /* ecdsa\00 */, "i8", ALLOC_NONE, 484596);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,50,46,49,46,51,0] /* 1.2.840.113549.1.12. */, "i8", ALLOC_NONE, 484604);
allocate([100,115,97,0] /* dsa\00 */, "i8", ALLOC_NONE, 484628);
allocate([99,105,112,104,101,114,95,101,110,99,114,121,112,116,58,32,105,110,118,97,108,105,100,32,109,111,100,101,32,37,100,10,0] /* cipher_encrypt: inva */, "i8", ALLOC_NONE, 484632);
allocate([66,97,100,32,99,104,101,99,107,58,32,84,104,101,114,101,32,105,115,32,78,79,32,99,111,114,114,101,115,112,111,110,100,101,110,99,101,32,98,101,116,119,101,101,110,32,39,100,39,32,97,110,100,32,39,81,39,33,10,0] /* Bad check: There is  */, "i8", ALLOC_NONE, 484668);
allocate([115,105,103,45,118,97,108,0] /* sig-val\00 */, "i8", ALLOC_NONE, 484728);
allocate([66,97,100,32,99,104,101,99,107,58,32,81,32,99,97,110,32,110,111,116,32,98,101,32,97,32,80,111,105,110,116,32,97,116,32,73,110,102,105,110,105,116,121,33,10,0] /* Bad check: Q can not */, "i8", ALLOC_NONE, 484736);
allocate([99,104,101,99,107,95,115,101,99,114,101,116,95,107,101,121,58,32,69,32,105,115,32,110,111,116,32,97,32,99,117,114,118,101,32,111,102,32,111,114,100,101,114,32,110,10,0] /* check_secret_key: E  */, "i8", ALLOC_NONE, 484784);
allocate([108,101,110,103,116,104,32,61,61,32,49,54,0] /* length == 16\00 */, "i8", ALLOC_NONE, 484832);
allocate([96,37,115,39,32,105,115,32,110,111,116,32,97,32,114,101,103,117,108,97,114,32,102,105,108,101,32,45,32,105,103,110,111,114,101,100,10,0] /* `%s' is not a regula */, "i8", ALLOC_NONE, 484848);
allocate([84,101,115,116,32,85,115,105,110,103,32,76,97,114,103,101,114,32,84,104,97,110,32,66,108,111,99,107,45,83,105,122,101,32,75,101,121,32,45,32,72,97,115,104,32,75,101,121,32,70,105,114,115,116,0] /* Test Using Larger Th */, "i8", ALLOC_NONE, 484888);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,107,32,0] /* choosing a random k  */, "i8", ALLOC_NONE, 484944);
allocate(1, "i8", ALLOC_NONE, 484968);
allocate([78,73,83,84,32,80,45,50,50,52,0] /* NIST P-224\00 */, "i8", ALLOC_NONE, 484972);
allocate([37,83,0] /* %S\00 */, "i8", ALLOC_NONE, 484984);
allocate([67,65,77,69,76,76,73,65,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-256 test en */, "i8", ALLOC_NONE, 484988);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 485028);
allocate([92,110,0] /* \5Cn\00 */, "i8", ALLOC_NONE, 485036);
allocate([114,110,100,45,109,111,100,58,108,105,110,117,120,58,10,0] /* rnd-mod:linux:\0A\00 */, "i8", ALLOC_NONE, 485040);
allocate([100,101,110,105,101,100,0] /* denied\00 */, "i8", ALLOC_NONE, 485056);
allocate([66,97,100,32,99,104,101,99,107,58,32,39,71,39,32,99,97,110,110,111,116,32,98,101,32,80,111,105,110,116,32,97,116,32,73,110,102,105,110,105,116,121,33,10,0] /* Bad check: 'G' canno */, "i8", ALLOC_NONE, 485064);
allocate([66,97,100,32,99,104,101,99,107,58,32,80,111,105,110,116,32,39,71,39,32,100,111,101,115,32,110,111,116,32,98,101,108,111,110,103,32,116,111,32,99,117,114,118,101,32,39,69,39,33,10,0] /* Bad check: Point 'G' */, "i8", ALLOC_NONE, 485112);
allocate([68,83,65,0] /* DSA\00 */, "i8", ALLOC_NONE, 485164);
allocate([48,120,48,50,0] /* 0x02\00 */, "i8", ALLOC_NONE, 485168);
allocate([112,0] /* p\00 */, "i8", ALLOC_NONE, 485176);
allocate([157,14,24,9,113,100,116,203,8,110,131,78,49,10,74,28,237,20,158,156,0,242,72,82,121,114,206,197,112,76,42,91,7,184,179,220,56,236,196,235,174,151,221,216,127,61,137,133,0] /* \9D\0E\18\09qdt\CB\0 */, "i8", ALLOC_NONE, 485180);
allocate([32,121,70,85,152,12,145,216,187,180,193,234,151,97,138,75,240,63,66,88,25,72,178,238,78,231,173,103,0] /*  yFU\98\0C\91\D8\BB\ */, "i8", ALLOC_NONE, 485232);
allocate([101,99,99,0] /* ecc\00 */, "i8", ALLOC_NONE, 485264);
allocate([67,82,67,51,50,0] /* CRC32\00 */, "i8", ALLOC_NONE, 485268);
allocate([32,32,102,61,32,0] /*   f= \00 */, "i8", ALLOC_NONE, 485276);
allocate([101,99,100,104,0] /* ecdh\00 */, "i8", ALLOC_NONE, 485284);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 485292);
allocate([67,65,83,84,53,0] /* CAST5\00 */, "i8", ALLOC_NONE, 485296);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,52,0] /* 1.2.840.113549.1.1.4 */, "i8", ALLOC_NONE, 485304);
allocate([108,111,119,45,108,101,118,101,108,0] /* low-level\00 */, "i8", ALLOC_NONE, 485328);
allocate([101,99,100,104,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,32,102,111,114,32,107,71,10,0] /* ecdh: Failed to get  */, "i8", ALLOC_NONE, 485340);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,50,46,52,0] /* 1.2.840.113549.2.4\0 */, "i8", ALLOC_NONE, 485388);
allocate([110,98,105,116,115,0] /* nbits\00 */, "i8", ALLOC_NONE, 485408);
allocate([101,99,100,104,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,32,102,111,114,32,107,100,71,10,0] /* ecdh: Failed to get  */, "i8", ALLOC_NONE, 485416);
allocate([102,97,99,116,111,114,32,32,113,58,32,0] /* factor  q: \00 */, "i8", ALLOC_NONE, 485464);
allocate([63,79,84,82,58,65,65,69,0] /* ?OTR:AAE\00 */, "i8", ALLOC_NONE, 485476);
allocate([112,111,115,115,105,98,108,101,32,117,115,97,103,101,32,101,114,114,111,114,0] /* possible usage error */, "i8", ALLOC_NONE, 485488);
allocate([101,99,100,104,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecdh: Failed to get  */, "i8", ALLOC_NONE, 485512);
allocate([49,46,51,46,51,54,46,51,46,49,46,51,46,50,46,49,0] /* 1.3.36.3.1.3.2.1\00 */, "i8", ALLOC_NONE, 485552);
allocate([40,37,109,41,0] /* (%m)\00 */, "i8", ALLOC_NONE, 485572);
allocate([99,45,62,117,110,117,115,101,100,32,60,32,98,108,111,99,107,115,105,122,101,0] /* c-_unused _ blocksiz */, "i8", ALLOC_NONE, 485580);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 485604);
allocate([67,65,77,69,76,76,73,65,49,50,56,0] /* CAMELLIA128\00 */, "i8", ALLOC_NONE, 485612);
allocate([101,110,99,45,118,97,108,0] /* enc-val\00 */, "i8", ALLOC_NONE, 485624);
allocate([108,111,119,45,108,101,118,101,108,0] /* low-level\00 */, "i8", ALLOC_NONE, 485632);
allocate([66,76,79,87,70,73,83,72,0] /* BLOWFISH\00 */, "i8", ALLOC_NONE, 485644);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,107,32,111,102,32,37,117,32,98,105,116,115,32,97,116,32,115,101,99,108,101,118,101,108,32,37,100,10,0] /* choosing a random k  */, "i8", ALLOC_NONE, 485656);
allocate([100,117,112,108,105,99,97,116,101,32,49,50,56,32,98,105,116,32,98,108,111,99,107,32,114,101,116,117,114,110,101,100,32,98,121,32,82,78,71,0] /* duplicate 128 bit bl */, "i8", ALLOC_NONE, 485704);
allocate([99,97,110,39,116,32,115,116,97,116,32,96,37,115,39,58,32,37,115,10,0] /* can't stat `%s': %s\ */, "i8", ALLOC_NONE, 485744);
allocate([100,97,116,97,45,53,52,32,107,101,121,45,49,51,49,0] /* data-54 key-131\00 */, "i8", ALLOC_NONE, 485768);
allocate([115,105,103,110,43,118,101,114,105,102,121,0] /* sign+verify\00 */, "i8", ALLOC_NONE, 485784);
allocate([37,115,58,32,0] /* %s: \00 */, "i8", ALLOC_NONE, 485796);
allocate([48,120,48,55,49,57,50,98,57,53,102,102,99,56,100,97,55,56,54,51,49,48,49,49,101,100,54,98,50,52,99,100,100,53,55,51,102,57,55,55,97,49,49,101,55,57,52,56,49,49,0] /* 0x07192b95ffc8da7863 */, "i8", ALLOC_NONE, 485804);
allocate([40,109,105,115,99,45,107,101,121,45,105,110,102,111,0] /* (misc-key-info\00 */, "i8", ALLOC_NONE, 485856);
allocate([67,65,77,69,76,76,73,65,45,49,57,50,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-192 test de */, "i8", ALLOC_NONE, 485872);
allocate([38,92,0] /* &\5C\00 */, "i8", ALLOC_NONE, 485912);
allocate([65,82,67,70,79,85,82,0] /* ARCFOUR\00 */, "i8", ALLOC_NONE, 485916);
allocate([99,114,99,58,109,100,52,58,109,100,53,58,114,109,100,49,54,48,58,115,104,97,49,58,115,104,97,50,53,54,58,115,104,97,53,49,50,58,116,105,103,101,114,58,119,104,105,114,108,112,111,111,108,0] /* crc:md4:md5:rmd160:s */, "i8", ALLOC_NONE, 485924);
allocate([103,114,97,110,116,101,100,0] /* granted\00 */, "i8", ALLOC_NONE, 485980);
allocate([101,99,100,115,97,32,115,105,103,110,32,114,101,115,117,108,116,32,115,32,0] /* ecdsa sign result s  */, "i8", ALLOC_NONE, 485988);
allocate([109,101,109,111,114,121,32,97,116,32,37,112,32,99,111,114,114,117,112,116,101,100,32,40,117,110,100,101,114,102,108,111,119,61,37,48,50,120,41,10,0] /* memory at %p corrupt */, "i8", ALLOC_NONE, 486012);
allocate([101,99,100,115,97,32,115,105,103,110,32,114,101,115,117,108,116,32,114,32,0] /* ecdsa sign result r  */, "i8", ALLOC_NONE, 486056);
allocate([100,115,97,0] /* dsa\00 */, "i8", ALLOC_NONE, 486080);
allocate([9,51,12,51,247,17,71,232,61,25,47,199,130,205,27,71,83,17,27,23,59,59,5,210,47,160,128,134,227,176,247,18,252,199,199,26,85,126,45,185,102,195,233,250,145,116,96,57,0] /* \093\0C3\F7\11G\E8=\ */, "i8", ALLOC_NONE, 486084);
allocate([117,56,139,22,81,39,118,204,93,186,93,161,253,137,1,80,176,198,69,92,180,245,139,25,82,82,37,37,0] /* u8\8B\16Q'v\CC]\BA]\ */, "i8", ALLOC_NONE, 486136);
allocate([109,100,46,99,0] /* md.c\00 */, "i8", ALLOC_NONE, 486168);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,53,46,52,46,49,0] /* 1.2.840.10045.4.1\00 */, "i8", ALLOC_NONE, 486176);
allocate([101,99,99,32,115,105,103,110,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecc sign: Failed to  */, "i8", ALLOC_NONE, 486196);
allocate([32,32,103,61,32,0] /*   g= \00 */, "i8", ALLOC_NONE, 486240);
allocate([101,99,100,115,97,32,115,105,103,110,32,104,97,115,104,32,32,0] /* ecdsa sign hash  \00 */, "i8", ALLOC_NONE, 486248);
allocate([65,69,83,45,49,57,50,0] /* AES-192\00 */, "i8", ALLOC_NONE, 486268);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,65,99,99,101,112,116,101,100,10,0] /* ecc verify: Accepted */, "i8", ALLOC_NONE, 486276);
allocate([51,68,69,83,0] /* 3DES\00 */, "i8", ALLOC_NONE, 486300);
allocate([114,115,97,45,117,115,101,45,101,0] /* rsa-use-e\00 */, "i8", ALLOC_NONE, 486308);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,78,111,116,32,118,101,114,105,102,105,101,100,10,0] /* ecc verify: Not veri */, "i8", ALLOC_NONE, 486320);
allocate([112,114,105,109,101,32,32,32,32,58,32,0] /* prime    : \00 */, "i8", ALLOC_NONE, 486348);
allocate([63,79,84,82,32,69,114,114,111,114,58,0] /* ?OTR Error:\00 */, "i8", ALLOC_NONE, 486360);
allocate([110,111,32,65,83,78,46,49,32,79,73,68,32,102,111,114,32,109,100,32,97,108,103,111,32,37,100,10,0] /* no ASN.1 OID for md  */, "i8", ALLOC_NONE, 486372);
allocate([32,32,32,32,32,115,0] /*      s\00 */, "i8", ALLOC_NONE, 486404);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,51,46,55,0] /* 1.2.840.113549.3.7\0 */, "i8", ALLOC_NONE, 486412);
allocate(1, "i8", ALLOC_NONE, 486432);
allocate([99,105,112,104,101,114,95,100,101,99,114,121,112,116,58,32,105,110,118,97,108,105,100,32,109,111,100,101,32,37,100,10,0] /* cipher_decrypt: inva */, "i8", ALLOC_NONE, 486436);
allocate([32,32,32,32,32,114,0] /*      r\00 */, "i8", ALLOC_NONE, 486472);
allocate([100,97,116,97,0] /* data\00 */, "i8", ALLOC_NONE, 486480);
allocate([32,32,32,32,32,121,0] /*      y\00 */, "i8", ALLOC_NONE, 486488);
allocate([52,46,48,46,48,0] /* 4.0.0\00 */, "i8", ALLOC_NONE, 486496);
allocate([91,110,105,108,93,10,0] /* [nil]\0A\00 */, "i8", ALLOC_NONE, 486504);
allocate([32,32,32,32,32,120,0] /*      x\00 */, "i8", ALLOC_NONE, 486512);
allocate([114,110,103,95,99,116,120,45,62,105,115,95,115,101,101,100,101,100,0] /* rng_ctx-_is_seeded\0 */, "i8", ALLOC_NONE, 486520);
allocate([99,97,110,39,116,32,111,112,101,110,32,96,37,115,39,58,32,37,115,10,0] /* can't open `%s': %s\ */, "i8", ALLOC_NONE, 486540);
allocate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0] /* \01\02\03\04\05\06\0 */, "i8", ALLOC_NONE, 486564);
allocate(1, "i8", ALLOC_NONE, 486592);
allocate([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* bad_array_new_length */, "i8", ALLOC_NONE, 486596);
allocate([48,120,49,56,56,100,97,56,48,101,98,48,51,48,57,48,102,54,55,99,98,102,50,48,101,98,52,51,97,49,56,56,48,48,102,52,102,102,48,97,102,100,56,50,102,102,49,48,49,50,0] /* 0x188da80eb03090f67c */, "i8", ALLOC_NONE, 486620);
allocate([40,115,101,101,100,45,118,97,108,117,101,115,40,99,111,117,110,116,101,114,32,37,100,41,40,115,101,101,100,32,37,98,41,40,104,32,37,109,41,41,0] /* (seed-values(counter */, "i8", ALLOC_NONE, 486672);
allocate([67,65,77,69,76,76,73,65,45,49,57,50,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-192 test en */, "i8", ALLOC_NONE, 486716);
allocate([37,117,0] /* %u\00 */, "i8", ALLOC_NONE, 486756);
allocate([100,105,103,101,115,116,115,58,37,115,58,10,0] /* digests:%s:\0A\00 */, "i8", ALLOC_NONE, 486760);
allocate([108,105,98,103,99,114,121,112,116,32,115,116,97,116,101,32,116,114,97,110,115,105,116,105,111,110,32,37,115,32,61,62,32,37,115,32,37,115,10,0] /* libgcrypt state tran */, "i8", ALLOC_NONE, 486776);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecc verify: Failed t */, "i8", ALLOC_NONE, 486816);
allocate([115,101,99,109,101,109,32,117,115,97,103,101,58,32,37,117,47,37,108,117,32,98,121,116,101,115,32,105,110,32,37,117,32,98,108,111,99,107,115,10,0] /* secmem usage: %u/%lu */, "i8", ALLOC_NONE, 486864);
allocate([110,32,60,61,32,104,45,62,99,105,112,104,101,114,45,62,98,108,111,99,107,115,105,122,101,0] /* n _= h-_cipher-_bloc */, "i8", ALLOC_NONE, 486908);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,82,101,106,101,99,116,101,100,10,0] /* ecc verify: Rejected */, "i8", ALLOC_NONE, 486936);
allocate([41,10,0] /* )\0A\00 */, "i8", ALLOC_NONE, 486960);
allocate([203,0,117,63,69,163,94,139,181,160,61,105,154,198,80,7,39,44,50,171,14,222,209,99,26,139,96,90,67,255,91,237,128,134,7,43,161,231,204,35,88,186,236,161,52,200,37,167,0] /* \CB\00u?E\A3^\8B\B5\ */, "i8", ALLOC_NONE, 486964);
allocate([35,9,125,34,52,5,216,34,134,66,164,119,189,162,85,179,42,173,188,228,189,160,179,247,227,108,157,167,0] /* #\09}\224\05\D8\22\8 */, "i8", ALLOC_NONE, 487016);
allocate([49,46,51,46,49,52,46,51,46,50,46,50,57,0] /* 1.3.14.3.2.29\00 */, "i8", ALLOC_NONE, 487048);
allocate([69,67,68,83,65,32,111,112,101,114,97,116,105,111,110,58,32,115,105,103,110,44,32,118,101,114,105,102,121,32,111,107,46,10,0] /* ECDSA operation: sig */, "i8", ALLOC_NONE, 487064);
allocate([112,104,105,61,32,0] /* phi= \00 */, "i8", ALLOC_NONE, 487100);
allocate([69,67,68,83,65,32,111,112,101,114,97,116,105,111,110,58,32,115,105,103,110,44,32,118,101,114,105,102,121,32,102,97,105,108,101,100,10,0] /* ECDSA operation: sig */, "i8", ALLOC_NONE, 487108);
allocate([82,73,74,78,68,65,69,76,49,57,50,0] /* RIJNDAEL192\00 */, "i8", ALLOC_NONE, 487148);
allocate([69,67,68,83,65,32,111,112,101,114,97,116,105,111,110,58,32,115,105,103,110,32,102,97,105,108,101,100,10,0] /* ECDSA operation: sig */, "i8", ALLOC_NONE, 487160);
allocate([103,101,110,107,101,121,0] /* genkey\00 */, "i8", ALLOC_NONE, 487192);
allocate([84,101,115,116,105,110,103,32,107,101,121,46,10,0] /* Testing key.\0A\00 */, "i8", ALLOC_NONE, 487200);
allocate([103,101,110,32,112,114,105,109,101,58,32,112,98,105,116,115,61,37,117,32,113,98,105,116,115,61,37,117,32,102,98,105,116,115,61,37,117,47,37,117,32,110,61,37,100,10,0] /* gen prime: pbits=%u  */, "i8", ALLOC_NONE, 487216);
allocate([63,79,84,82,58,65,65,69,68,0] /* ?OTR:AAED\00 */, "i8", ALLOC_NONE, 487264);
allocate([109,100,32,100,101,98,117,103,58,32,99,97,110,39,116,32,111,112,101,110,32,37,115,10,0] /* md debug: can't open */, "i8", ALLOC_NONE, 487276);
allocate([101,99,103,101,110,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecgen: Failed to get */, "i8", ALLOC_NONE, 487304);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 487348);
allocate([109,105,115,99,46,99,0] /* misc.c\00 */, "i8", ALLOC_NONE, 487352);
allocate([9,37,115,10,0] /* \09%s\0A\00 */, "i8", ALLOC_NONE, 487360);
allocate([99,105,112,104,101,114,32,109,111,100,101,32,78,79,78,69,32,117,115,101,100,0] /* cipher mode NONE use */, "i8", ALLOC_NONE, 487368);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,117,115,101,100,58,32,37,115,10,0] /* ecgen curve used: %s */, "i8", ALLOC_NONE, 487392);
allocate([118,97,108,117,101,0] /* value\00 */, "i8", ALLOC_NONE, 487416);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,71,122,0] /* ecgen curve Gz\00 */, "i8", ALLOC_NONE, 487424);
allocate([97,117,116,104,46,99,0] /* auth.c\00 */, "i8", ALLOC_NONE, 487440);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,71,121,0] /* ecgen curve Gy\00 */, "i8", ALLOC_NONE, 487448);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 487464);
allocate([114,110,103,95,99,116,120,45,62,99,105,112,104,101,114,95,104,100,0] /* rng_ctx-_cipher_hd\0 */, "i8", ALLOC_NONE, 487468);
allocate([78,111,32,119,97,121,32,116,111,32,103,97,116,104,101,114,32,101,110,116,114,111,112,121,32,102,111,114,32,116,104,101,32,82,78,71,10,0] /* No way to gather ent */, "i8", ALLOC_NONE, 487488);
allocate([205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0] /* \CD\CD\CD\CD\CD\CD\C */, "i8", ALLOC_NONE, 487528);
allocate([101,110,99,114,121,112,116,43,100,101,99,114,121,112,116,0] /* encrypt+decrypt\00 */, "i8", ALLOC_NONE, 487580);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,57,57,100,101,102,56,51,54,49,52,54,98,99,57,98,49,98,52,100,50,50,56,51,49,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 487596);
allocate([103,0] /* g\00 */, "i8", ALLOC_NONE, 487648);
allocate([67,65,77,69,76,76,73,65,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-128 test de */, "i8", ALLOC_NONE, 487652);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 487692);
allocate([100,115,97,58,101,108,103,97,109,97,108,58,114,115,97,58,101,99,99,0] /* dsa:elgamal:rsa:ecc\ */, "i8", ALLOC_NONE, 487696);
allocate([110,111,32,100,101,115,99,114,105,112,116,105,111,110,32,97,118,97,105,108,97,98,108,101,0] /* no description avail */, "i8", ALLOC_NONE, 487716);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,71,120,0] /* ecgen curve Gx\00 */, "i8", ALLOC_NONE, 487744);
allocate([40,37,115,0] /* (%s\00 */, "i8", ALLOC_NONE, 487760);
allocate([102,32,33,61,32,78,85,76,76,0] /* f != NULL\00 */, "i8", ALLOC_NONE, 487764);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,110,0] /* ecgen curve  n\00 */, "i8", ALLOC_NONE, 487776);
allocate([40,112,114,105,118,107,101,121,115,10,0] /* (privkeys\0A\00 */, "i8", ALLOC_NONE, 487792);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 487804);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 487812);
allocate([49,46,51,46,49,52,46,51,46,50,46,50,54,0] /* 1.3.14.3.2.26\00 */, "i8", ALLOC_NONE, 487820);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,98,0] /* ecgen curve  b\00 */, "i8", ALLOC_NONE, 487836);
allocate([32,32,113,61,32,0] /*   q= \00 */, "i8", ALLOC_NONE, 487852);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,97,0] /* ecgen curve  a\00 */, "i8", ALLOC_NONE, 487860);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,52,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 487876);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,112,0] /* ecgen curve  p\00 */, "i8", ALLOC_NONE, 487900);
allocate([37,77,41,0] /* %M)\00 */, "i8", ALLOC_NONE, 487916);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,100,0] /* ecgen result d\00 */, "i8", ALLOC_NONE, 487920);
allocate([111,118,101,114,102,108,111,119,32,105,110,32,112,114,105,109,101,32,103,101,110,101,114,97,116,105,111,110,10,0] /* overflow in prime ge */, "i8", ALLOC_NONE, 487936);
allocate([49,46,53,46,48,0] /* 1.5.0\00 */, "i8", ALLOC_NONE, 487968);
allocate([63,79,84,82,58,65,65,69,75,0] /* ?OTR:AAEK\00 */, "i8", ALLOC_NONE, 487976);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 487988);
allocate([119,0] /* w\00 */, "i8", ALLOC_NONE, 487992);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,81,0] /* ecgen result Q\00 */, "i8", ALLOC_NONE, 487996);
allocate([68,69,83,32,119,101,97,107,32,107,101,121,32,100,101,116,101,99,116,105,111,110,32,102,97,105,108,101,100,0] /* DES weak key detecti */, "i8", ALLOC_NONE, 488012);
allocate([37,48,50,120,0] /* %02x\00 */, "i8", ALLOC_NONE, 488044);
allocate([73,86,32,108,101,110,103,116,104,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,98,108,111,99,107,108,101,110,103,116,104,0] /* IV length does not m */, "i8", ALLOC_NONE, 488052);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,110,0] /* ecgen result n\00 */, "i8", ALLOC_NONE, 488092);
allocate([112,117,98,108,105,99,45,107,101,121,0] /* public-key\00 */, "i8", ALLOC_NONE, 488108);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,71,0] /* ecgen result G\00 */, "i8", ALLOC_NONE, 488120);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,98,0] /* ecgen result b\00 */, "i8", ALLOC_NONE, 488136);
allocate([102,105,112,115,95,114,110,103,95,105,115,95,108,111,99,107,101,100,0] /* fips_rng_is_locked\0 */, "i8", ALLOC_NONE, 488152);
allocate([83,108,111,119,32,101,110,116,114,111,112,121,32,103,97,116,104,101,114,105,110,103,32,109,111,100,117,108,101,32,110,111,116,32,121,101,116,32,105,110,105,116,105,97,108,105,122,101,100,10,0] /* Slow entropy gatheri */, "i8", ALLOC_NONE, 488172);
allocate([100,97,116,97,45,53,48,32,107,101,121,45,50,54,0] /* data-50 key-26\00 */, "i8", ALLOC_NONE, 488224);
allocate([69,108,103,97,109,97,108,32,116,101,115,116,32,107,101,121,32,102,111,114,32,37,115,32,37,115,32,102,97,105,108,101,100,10,0] /* Elgamal test key for */, "i8", ALLOC_NONE, 488240);
allocate([48,120,54,52,50,49,48,53,49,57,101,53,57,99,56,48,101,55,48,102,97,55,101,57,97,98,55,50,50,52,51,48,52,57,102,101,98,56,100,101,101,99,99,49,52,54,98,57,98,49,0] /* 0x64210519e59c80e70f */, "i8", ALLOC_NONE, 488276);
allocate([113,0] /* q\00 */, "i8", ALLOC_NONE, 488328);
allocate([67,65,77,69,76,76,73,65,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-128 test en */, "i8", ALLOC_NONE, 488332);
allocate([45,46,47,95,58,42,43,61,0] /* -./_:_+=\00 */, "i8", ALLOC_NONE, 488372);
allocate([105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,102,97,116,97,108,32,111,114,32,98,117,103,41,0] /* internal error (fata */, "i8", ALLOC_NONE, 488384);
allocate([112,117,98,107,101,121,115,58,37,115,58,10,0] /* pubkeys:%s:\0A\00 */, "i8", ALLOC_NONE, 488416);
allocate([44,32,102,117,110,99,116,105,111,110,32,0] /* , function \00 */, "i8", ALLOC_NONE, 488432);
allocate([33,100,111,110,101,0] /* !done\00 */, "i8", ALLOC_NONE, 488444);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,97,0] /* ecgen result a\00 */, "i8", ALLOC_NONE, 488452);
allocate([99,97,108,108,101,100,32,105,110,32,110,111,110,45,111,112,101,114,97,116,105,111,110,97,108,32,115,116,97,116,101,0] /* called in non-operat */, "i8", ALLOC_NONE, 488468);
allocate([97,116,104,46,99,0] /* ath.c\00 */, "i8", ALLOC_NONE, 488500);
allocate([47,100,101,118,47,117,114,97,110,100,111,109,0] /* /dev/urandom\00 */, "i8", ALLOC_NONE, 488508);
allocate([58,32,0] /* : \00 */, "i8", ALLOC_NONE, 488524);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,112,0] /* ecgen result p\00 */, "i8", ALLOC_NONE, 488528);
allocate([119,43,98,0] /* w+b\00 */, "i8", ALLOC_NONE, 488544);
allocate([114,97,110,100,111,109,45,102,105,112,115,46,99,0] /* random-fips.c\00 */, "i8", ALLOC_NONE, 488548);
allocate([231,24,72,61,12,231,105,100,78,46,66,199,188,21,180,99,142,31,152,177,59,32,68,40,86,50,168,3,175,169,115,235,222,15,242,68,135,126,166,10,76,176,67,44,229,119,195,27,235,0,156,92,44,73,170,46,78,173,178,23,173,140,192,155,0] /* \E7\18H=\0C\E7idN.B\ */, "i8", ALLOC_NONE, 488564);
allocate([205,199,110,92,153,20,251,146,129,161,199,226,132,215,62,103,241,128,154,72,164,151,32,14,4,109,57,204,199,17,44,208,0] /* \CD\C7n\5C\99\14\FB\ */, "i8", ALLOC_NONE, 488632);
allocate([37,48,56,120,0] /* %08x\00 */, "i8", ALLOC_NONE, 488668);
allocate([32,40,104,119,114,110,103,32,102,97,105,108,101,100,41,0] /*  (hwrng failed)\00 */, "i8", ALLOC_NONE, 488676);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,48,46,52,46,51,0] /* 1.2.840.10040.4.3\00 */, "i8", ALLOC_NONE, 488692);
allocate([40,99,117,114,118,101,32,37,115,41,0] /* (curve %s)\00 */, "i8", ALLOC_NONE, 488712);
allocate([109,112,105,45,109,112,111,119,46,99,0] /* mpi-mpow.c\00 */, "i8", ALLOC_NONE, 488724);
allocate([99,111,110,116,101,120,116,95,112,114,105,118,32,33,61,32,78,85,76,76,0] /* context_priv != NULL */, "i8", ALLOC_NONE, 488736);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 488760);
allocate([103,99,114,121,95,109,100,95,111,112,101,110,32,102,97,105,108,101,100,0] /* gcry_md_open failed\ */, "i8", ALLOC_NONE, 488768);
allocate([32,32,112,61,32,0] /*   p= \00 */, "i8", ALLOC_NONE, 488788);
allocate([116,114,97,110,115,105,101,110,116,45,107,101,121,0] /* transient-key\00 */, "i8", ALLOC_NONE, 488796);
allocate([112,103,121,0] /* pgy\00 */, "i8", ALLOC_NONE, 488812);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,51,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 488816);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 488840);
allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* system bytes     = % */, "i8", ALLOC_NONE, 488844);
allocate([112,97,98,103,110,113,0] /* pabgnq\00 */, "i8", ALLOC_NONE, 488872);
allocate([40,115,105,103,45,118,97,108,40,0] /* (sig-val(\00 */, "i8", ALLOC_NONE, 488880);
allocate([40,49,58,37,99,37,117,58,0] /* (1:%c%u:\00 */, "i8", ALLOC_NONE, 488892);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 488904);
allocate([48,120,55,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,69,52,56,55,69,68,53,49,49,48,66,52,54,49,49,65,54,50,54,51,51,49,52,53,67,48,54,69,48,69,54,56,57,52,56,49,50,55,48,52,52,53,51,51,69,54,51,65,48,49,48,53,68,70,53,51,49,68,56,57,67,68,57,49,50,56,65,53,48,52,51,67,67,55,49,65,48,50,54,69,70,55,67,65,56,67,68,57,69,54,57,68,50,49,56,68,57,56,49,53,56,53,51,54,70,57,50,70,56,65,49,66,65,55,70,48,57,65,66,54,66,54,65,56,69,49,50,50,70,50,52,50,68,65,66,66,51,49,50,70,51,70,54,51,55,65,50,54,50,49,55,52,68,51,49,66,70,54,66,53,56,53,70,70,65,69,53,66,55,65,48,51,53,66,70,54,70,55,49,67,51,53,70,68,65,68,52,52,67,70,68,50,68,55,52,70,57,50,48,56,66,69,50,53,56,70,70,51,50,52,57,52,51,51,50,56,70,54,55,50,50,68,57,69,69,49,48,48,51,69,53,67,53,48,66,49,68,70,56,50,67,67,54,68,50,52,49,66,48,69,50,65,69,57,67,68,51,52,56,66,49,70,68,52,55,69,57,50,54,55,65,70,67,49,66,50,65,69,57,49,69,69,53,49,68,54,67,66,48,69,51,49,55,57,65,66,49,48,52,50,65,57,53,68,67,70,54,65,57,52,56,51,66,56,52,66,52,66,51,54,66,51,56,54,49,65,65,55,50,53,53,69,52,67,48,50,55,56,66,65,51,54,48,52,54,53,49,49,66,57,57,51,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0] /* 0x7FFFFFFFFFFFFFFFE4 */, "i8", ALLOC_NONE, 488908);
allocate([112,113,103,121,0] /* pqgy\00 */, "i8", ALLOC_NONE, 489296);
allocate([116,108,118,46,99,0] /* tlv.c\00 */, "i8", ALLOC_NONE, 489304);
allocate([67,82,67,51,50,82,70,67,49,53,49,48,0] /* CRC32RFC1510\00 */, "i8", ALLOC_NONE, 489312);
allocate([99,97,110,39,116,32,103,101,110,101,114,97,116,101,32,97,32,112,114,105,109,101,32,119,105,116,104,32,108,101,115,115,32,116,104,97,110,32,37,100,32,98,105,116,115,10,0] /* can't generate a pri */, "i8", ALLOC_NONE, 489328);
allocate([67,65,83,84,53,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,37,115,41,46,10,0] /* CAST5 selftest faile */, "i8", ALLOC_NONE, 489376);
allocate([67,65,77,69,76,76,73,65,49,57,50,0] /* CAMELLIA192\00 */, "i8", ALLOC_NONE, 489408);
allocate([63,79,84,82,118,0] /* ?OTRv\00 */, "i8", ALLOC_NONE, 489420);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 489428);
allocate([65,82,67,70,79,85,82,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,37,115,41,10,0] /* ARCFOUR selftest fai */, "i8", ALLOC_NONE, 489432);
allocate([109,101,109,111,114,121,32,97,116,32,37,112,32,99,111,114,114,117,112,116,101,100,32,40,111,118,101,114,102,108,111,119,61,37,48,50,120,41,10,0] /* memory at %p corrupt */, "i8", ALLOC_NONE, 489464);
allocate([100,98,103,109,100,45,37,48,53,100,46,37,46,49,48,115,0] /* dbgmd-%05d.%.10s\00 */, "i8", ALLOC_NONE, 489504);
allocate([99,117,114,118,101,0] /* curve\00 */, "i8", ALLOC_NONE, 489524);
allocate([119,101,97,107,32,107,101,121,32,116,97,98,108,101,32,100,101,102,101,99,116,0] /* weak key table defec */, "i8", ALLOC_NONE, 489532);
allocate([37,42,115,91,111,112,101,110,93,10,0] /* %_s[open]\0A\00 */, "i8", ALLOC_NONE, 489556);
allocate([37,115,9,37,115,9,37,115,9,0] /* %s\09%s\09%s\09\00 */, "i8", ALLOC_NONE, 489568);
allocate([87,65,82,78,73,78,71,58,32,99,105,112,104,101,114,95,115,101,116,105,118,58,32,105,118,108,101,110,61,37,117,32,98,108,107,108,101,110,61,37,117,10,0] /* WARNING: cipher_seti */, "i8", ALLOC_NONE, 489580);
allocate([111,112,101,114,97,116,105,111,110,32,105,115,32,110,111,116,32,112,111,115,115,105,98,108,101,32,119,105,116,104,111,117,116,32,105,110,105,116,105,97,108,105,122,101,100,32,115,101,99,117,114,101,32,109,101,109,111,114,121,10,0] /* operation is not pos */, "i8", ALLOC_NONE, 489624);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,49,51,0] /* 1.3.36.3.3.2.8.1.1.1 */, "i8", ALLOC_NONE, 489688);
allocate([10,70,97,116,97,108,32,101,114,114,111,114,58,32,0] /* \0AFatal error: \00 */, "i8", ALLOC_NONE, 489712);
allocate([105,110,118,97,108,105,100,32,102,108,97,103,32,118,97,108,117,101,32,105,110,32,109,112,105,10,0] /* invalid flag value i */, "i8", ALLOC_NONE, 489728);
allocate([108,101,110,112,32,61,61,32,48,0] /* lenp == 0\00 */, "i8", ALLOC_NONE, 489756);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 489768);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,49,49,0] /* 1.3.36.3.3.2.8.1.1.1 */, "i8", ALLOC_NONE, 489780);
allocate([99,117,115,116,111,109,32,97,108,108,111,99,97,116,105,111,110,32,104,97,110,100,108,101,114,0] /* custom allocation ha */, "i8", ALLOC_NONE, 489804);
allocate([102,105,112,115,46,99,0] /* fips.c\00 */, "i8", ALLOC_NONE, 489832);
allocate([42,108,111,99,107,32,61,61,32,77,85,84,69,88,95,85,78,76,79,67,75,69,68,0] /* _lock == MUTEX_UNLOC */, "i8", ALLOC_NONE, 489840);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,57,0] /* 1.3.36.3.3.2.8.1.1.9 */, "i8", ALLOC_NONE, 489864);
allocate([75,65,84,0] /* KAT\00 */, "i8", ALLOC_NONE, 489888);
allocate([116,111,111,32,109,97,110,121,32,114,97,110,100,111,109,32,98,105,116,115,32,114,101,113,117,101,115,116,101,100,10,0] /* too many random bits */, "i8", ALLOC_NONE, 489892);
allocate([170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0] /* \AA\AA\AA\AA\AA\AA\A */, "i8", ALLOC_NONE, 489924);
allocate([101,108,103,32,32,120,61,32,0] /* elg  x= \00 */, "i8", ALLOC_NONE, 489948);
allocate([116,108,118,32,33,61,32,78,85,76,76,0] /* tlv != NULL\00 */, "i8", ALLOC_NONE, 489960);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,99,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 489972);
allocate([112,0] /* p\00 */, "i8", ALLOC_NONE, 490024);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 490028);
allocate([8,9,11,10,12,13,34,39,92,0] /* \08\09\0B\0A\0C\0D\2 */, "i8", ALLOC_NONE, 490032);
allocate([91,85,110,107,110,111,119,110,32,108,111,103,32,108,101,118,101,108,32,37,100,93,58,32,0] /* [Unknown log level % */, "i8", ALLOC_NONE, 490044);
allocate([109,112,105,95,103,101,116,95,111,112,97,113,117,101,32,111,110,32,110,111,114,109,97,108,32,109,112,105,10,0] /* mpi_get_opaque on no */, "i8", ALLOC_NONE, 490072);
allocate([97,114,99,102,111,117,114,58,98,108,111,119,102,105,115,104,58,99,97,115,116,53,58,100,101,115,58,97,101,115,58,116,119,111,102,105,115,104,58,115,101,114,112,101,110,116,58,114,102,99,50,50,54,56,58,115,101,101,100,58,99,97,109,101,108,108,105,97,0] /* arcfour:blowfish:cas */, "i8", ALLOC_NONE, 490104);
allocate(1, "i8", ALLOC_NONE, 490176);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 490180);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,55,0] /* 1.3.36.3.3.2.8.1.1.7 */, "i8", ALLOC_NONE, 490184);
allocate([91,77,80,73,95,78,85,76,76,93,0] /* [MPI_NULL]\00 */, "i8", ALLOC_NONE, 490208);
allocate([109,112,105,45,112,111,119,46,99,0] /* mpi-pow.c\00 */, "i8", ALLOC_NONE, 490220);
allocate([32,9,32,9,32,32,9,32,0] /*  \09 \09  \09 \00 */, "i8", ALLOC_NONE, 490232);
allocate([58,32,0] /* : \00 */, "i8", ALLOC_NONE, 490244);
allocate([33,32,40,98,117,102,102,101,114,95,115,105,122,101,32,124,124,32,99,97,114,114,121,41,0] /* ! (buffer_size || ca */, "i8", ALLOC_NONE, 490248);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,53,0] /* 1.3.36.3.3.2.8.1.1.5 */, "i8", ALLOC_NONE, 490276);
allocate([32,41,10,0] /*  )\0A\00 */, "i8", ALLOC_NONE, 490300);
allocate([111,110,101,32,109,105,108,108,105,111,110,32,34,97,34,0] /* one million \22a\22\ */, "i8", ALLOC_NONE, 490304);
allocate([111,110,101,32,109,105,108,108,105,111,110,32,34,97,34,0] /* one million \22a\22\ */, "i8", ALLOC_NONE, 490320);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,53,0] /* 1.2.840.113549.1.1.5 */, "i8", ALLOC_NONE, 490336);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,51,0] /* 1.3.36.3.3.2.8.1.1.3 */, "i8", ALLOC_NONE, 490360);
allocate([83,69,82,80,69,78,84,0] /* SERPENT\00 */, "i8", ALLOC_NONE, 490384);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,49,0] /* 1.3.36.3.3.2.8.1.1.1 */, "i8", ALLOC_NONE, 490392);
allocate([114,115,97,46,99,0] /* rsa.c\00 */, "i8", ALLOC_NONE, 490416);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 490424);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,50,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 490428);
allocate([33,98,112,95,109,97,114,107,101,114,0] /* !bp_marker\00 */, "i8", ALLOC_NONE, 490452);
allocate([49,46,51,46,49,51,50,46,48,46,51,53,0] /* 1.3.132.0.35\00 */, "i8", ALLOC_NONE, 490464);
allocate([40,115,105,103,45,118,97,108,40,37,115,40,115,37,98,41,41,41,0] /* (sig-val(%s(s%b)))\0 */, "i8", ALLOC_NONE, 490480);
allocate([115,101,99,112,53,50,49,114,49,0] /* secp521r1\00 */, "i8", ALLOC_NONE, 490500);
allocate([95,103,99,114,121,95,109,112,105,95,99,109,112,32,40,40,120,41,44,40,110,109,105,110,117,115,49,41,41,32,60,32,48,32,38,38,32,95,103,99,114,121,95,109,112,105,95,99,109,112,95,117,105,32,40,40,120,41,44,40,49,41,41,32,62,32,48,0] /* _gcry_mpi_cmp ((x),( */, "i8", ALLOC_NONE, 490512);
allocate([63,79,84,82,63,0] /* ?OTR?\00 */, "i8", ALLOC_NONE, 490580);
allocate([79,111,112,115,58,32,109,100,32,100,101,98,117,103,32,97,108,114,101,97,100,121,32,115,116,97,114,116,101,100,10,0] /* Oops: md debug alrea */, "i8", ALLOC_NONE, 490588);
allocate([49,46,51,46,49,51,50,46,48,46,51,52,0] /* 1.3.132.0.34\00 */, "i8", ALLOC_NONE, 490620);
allocate([83,72,65,49,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0] /* SHA1 not available\0 */, "i8", ALLOC_NONE, 490636);
allocate([99,105,112,104,101,114,32,37,100,32,119,47,111,32,107,101,121,32,108,101,110,103,116,104,10,0] /* cipher %d w/o key le */, "i8", ALLOC_NONE, 490656);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 490684);
allocate([115,101,99,112,51,56,52,114,49,0] /* secp384r1\00 */, "i8", ALLOC_NONE, 490688);
allocate([109,112,105,32,114,111,117,110,100,105,110,103,32,116,111,32,99,101,105,108,105,110,103,32,110,111,116,32,121,101,116,32,105,109,112,108,101,109,101,110,116,101,100,10,0] /* mpi rounding to ceil */, "i8", ALLOC_NONE, 490700);
allocate([41,41,0] /* ))\00 */, "i8", ALLOC_NONE, 490748);
allocate([115,101,99,112,50,53,54,114,49,0] /* secp256r1\00 */, "i8", ALLOC_NONE, 490752);
allocate([112,114,105,109,101,50,53,54,118,49,0] /* prime256v1\00 */, "i8", ALLOC_NONE, 490764);
allocate([114,97,110,100,111,109,0] /* random\00 */, "i8", ALLOC_NONE, 490776);
allocate([112,111,111,108,95,105,115,95,108,111,99,107,101,100,0] /* pool_is_locked\00 */, "i8", ALLOC_NONE, 490784);
allocate([221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,0] /* \DD\DD\DD\DD\DD\DD\D */, "i8", ALLOC_NONE, 490800);
allocate([101,108,103,32,32,121,61,32,0] /* elg  y= \00 */, "i8", ALLOC_NONE, 490852);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 490864);
allocate([100,111,109,97,105,110,0] /* domain\00 */, "i8", ALLOC_NONE, 490916);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,50,52,0] /* 0.3.4401.5.3.1.9.24\ */, "i8", ALLOC_NONE, 490924);
allocate([92,120,37,48,50,120,0] /* \5Cx%02x\00 */, "i8", ALLOC_NONE, 490944);
allocate([87,97,114,110,105,110,103,58,32,117,115,105,110,103,32,105,110,115,101,99,117,114,101,32,109,101,109,111,114,121,33,10,0] /* Warning: using insec */, "i8", ALLOC_NONE, 490952);
allocate([68,66,71,58,32,0] /* DBG: \00 */, "i8", ALLOC_NONE, 490988);
allocate([99,105,112,104,101,114,115,58,37,115,58,10,0] /* ciphers:%s:\0A\00 */, "i8", ALLOC_NONE, 490996);
allocate([102,97,116,97,108,32,0] /* fatal \00 */, "i8", ALLOC_NONE, 491012);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,53,46,51,46,49,46,55,0] /* 1.2.840.10045.3.1.7\ */, "i8", ALLOC_NONE, 491020);
allocate([91,114,101,115,101,110,116,93,0] /* [resent]\00 */, "i8", ALLOC_NONE, 491040);
allocate([32,9,32,32,9,9,9,9,32,9,32,9,32,9,32,32,0] /*  \09  \09\09\09\09 \ */, "i8", ALLOC_NONE, 491052);
allocate([49,46,51,46,49,51,50,46,48,46,51,51,0] /* 1.3.132.0.33\00 */, "i8", ALLOC_NONE, 491072);
allocate([40,112,114,111,116,111,99,111,108,32,37,115,41,0] /* (protocol %s)\00 */, "i8", ALLOC_NONE, 491088);
allocate([108,105,98,103,99,114,121,112,116,32,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,10,0] /* libgcrypt version mi */, "i8", ALLOC_NONE, 491104);
allocate([49,46,53,46,48,0] /* 1.5.0\00 */, "i8", ALLOC_NONE, 491132);
allocate(472, "i8", ALLOC_NONE, 491140);
allocate(4, "i8", ALLOC_NONE, 491612);
allocate([3,4,0] /* \03\04\00 */, "i8", ALLOC_NONE, 491616);
allocate(4, "i8", ALLOC_NONE, 491620);
allocate(28, "i8", ALLOC_NONE, 491624);
allocate(4, "i8", ALLOC_NONE, 491652);
allocate([255,255,255,255], "i8", ALLOC_NONE, 491656);
allocate([255,255,255,255], "i8", ALLOC_NONE, 491660);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,186,0,0,0,184,0,0,0,74,0,0,0,202,0,0,0,136,0,0,0,30,0,0,0,230,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491664);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,346,0,0,0,358,0,0,0,340,0,0,0,344,0,0,0,22,0,0,0,118,0,0,0,98,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491724);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,174,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,300,0,0,0,44,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491784);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,174,0,0,0,100,0,0,0,114,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491844);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,360,0,0,0,162,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,356,0,0,0,4,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491904);
allocate([312,0,0,0,276,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491964);
allocate([0,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491988);
allocate([188,0,0,0,116,0,0,0,242,0,0,0,58,0,0,0,94,0,0,0,158,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492012);
allocate([84,0,0,0,302,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492036);
allocate([47,112,114,111,99,47,115,121,115,47,99,114,121,112,116,111,47,102,105,112,115,95,101,110,97,98,108,101,100,0] /* /proc/sys/crypto/fip */, "i8", ALLOC_NONE, 492060);
allocate(4, "i8", ALLOC_NONE, 492092);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,334,0,0,0,134,0,0,0,64,0,0,0,62,0,0,0,164,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492096);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,72,0,0,0,112,0,0,0,180,0,0,0,272,0,0,0,100,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492136);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,24,0,0,0,240,0,0,0,112,0,0,0,180,0,0,0,272,0,0,0,100,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492176);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,126,0,0,0,112,0,0,0,180,0,0,0,272,0,0,0,100,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492216);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,64,0,0,0,364,0,0,0,286,0,0,0,248,0,0,0,130,0,0,0,204,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492256);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,48,0,0,0,20,0,0,0,286,0,0,0,248,0,0,0,130,0,0,0,204,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492296);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,32,0,0,0,138,0,0,0,104,0,0,0,88,0,0,0,336,0,0,0,104,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492336);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,28,0,0,0,288,0,0,0,104,0,0,0,88,0,0,0,336,0,0,0,104,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492376);
allocate([0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,20,0,0,0,296,0,0,0,12,0,0,0,264,0,0,0,10,0,0,0,92,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492416);
allocate([0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,20,0,0,0,282,0,0,0,124,0,0,0,160,0,0,0,132,0,0,0,92,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492456);
allocate([0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,16,0,0,0,36,0,0,0,52,0,0,0,216,0,0,0,234,0,0,0,88,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492496);
allocate([0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,16,0,0,0,372,0,0,0,48,0,0,0,78,0,0,0,390,0,0,0,88,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492536);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,380,0,0,0,260,0,0,0,316,0,0,0,232,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492576);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,246,0,0,0,260,0,0,0,24,0,0,0,232,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492616);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,166,0,0,0,150,0,0,0,6,0,0,0,232,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492656);
allocate([192,0,0,0], ["*",0,0,0], ALLOC_NONE, 492696);
allocate([192,0,0,0], ["*",0,0,0], ALLOC_NONE, 492700);
allocate([236,0,0,0], ["*",0,0,0], ALLOC_NONE, 492704);
allocate([236,0,0,0], ["*",0,0,0], ALLOC_NONE, 492708);
allocate([18,0,0,0], ["*",0,0,0], ALLOC_NONE, 492712);
allocate([10,10,84,104,105,115,32,105,115,32,76,105,98,103,99,114,121,112,116,32,49,46,53,46,48,32,45,32,84,104,101,32,71,78,85,32,67,114,121,112,116,111,32,76,105,98,114,97,114,121,10,67,111,112,121,114,105,103,104,116,32,50,48,48,48,44,32,50,48,48,50,44,32,50,48,48,51,44,32,50,48,48,52,44,32,50,48,48,55,44,32,50,48,48,56,44,32,50,48,48,57,44,10,32,32,32,32,32,32,32,32,32,32,50,48,49,48,44,32,50,48,49,49,32,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,44,32,73,110,99,46,10,10,10,0] /* \0A\0AThis is Libgcr */, "i8", ALLOC_NONE, 492716);
allocate([0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \00\01\02\02\03\03\0 */, "i8", ALLOC_NONE, 492876);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,4256,0,0,0,332,0,0,0,196,0,0,0,266,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493132);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,4256,0,0,0,332,0,0,0,196,0,0,0,266,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493176);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,192,0,0,0,772,0,0,0,146,0,0,0,82,0,0,0,156,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493220);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,528,0,0,0,352,0,0,0,80,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493264);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,192,0,0,0,528,0,0,0,352,0,0,0,80,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493308);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,528,0,0,0,352,0,0,0,80,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493352);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,128,0,0,0,106,0,0,0,278,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493396);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,40,0,0,0,128,0,0,0,220,0,0,0,168,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493440);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,64,0,0,0,256,0,0,0,324,0,0,0,374,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493484);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,128,0,0,0,80,0,0,0,386,0,0,0,238,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493528);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,276,0,0,0,376,0,0,0,308,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493572);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,192,0,0,0,276,0,0,0,376,0,0,0,308,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493616);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,276,0,0,0,376,0,0,0,308,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493660);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,128,0,0,0,4168,0,0,0,320,0,0,0,328,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493704);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,264,0,0,0,318,0,0,0,0,0,0,0,0,0,0,0,258,0,0,0,258,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493748);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,488,0,0,0,28,0,0,0,362,0,0,0,292,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493792);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,192,0,0,0,488,0,0,0,28,0,0,0,362,0,0,0,292,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493836);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,488,0,0,0,28,0,0,0,362,0,0,0,292,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493880);
allocate([338,0,0,0,326,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493924);
allocate([32,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493932);
allocate([32,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493940);
allocate([32,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493948);
allocate([111,116,114,108,95,116,108,118,95,110,101,119,0] /* otrl_tlv_new\00 */, "i8", ALLOC_NONE, 493956);
allocate([111,116,114,108,95,112,114,111,116,111,95,99,114,101,97,116,101,95,100,97,116,97,0] /* otrl_proto_create_da */, "i8", ALLOC_NONE, 493972);
allocate([111,116,114,108,95,99,111,110,116,101,120,116,95,112,114,105,118,95,110,101,119,0] /* otrl_context_priv_ne */, "i8", ALLOC_NONE, 493996);
allocate([111,116,114,108,95,99,111,110,116,101,120,116,95,102,105,110,100,95,102,105,110,103,101,114,112,114,105,110,116,0] /* otrl_context_find_fi */, "i8", ALLOC_NONE, 494020);
allocate([111,116,114,108,95,97,117,116,104,95,115,116,97,114,116,95,118,50,51,0] /* otrl_auth_start_v23\ */, "i8", ALLOC_NONE, 494052);
allocate([110,101,119,95,99,111,110,116,101,120,116,0] /* new_context\00 */, "i8", ALLOC_NONE, 494072);
allocate([99,114,101,97,116,101,95,118,49,95,107,101,121,95,101,120,99,104,97,110,103,101,95,109,101,115,115,97,103,101,0] /* create_v1_key_exchan */, "i8", ALLOC_NONE, 494084);
allocate([99,114,101,97,116,101,95,115,105,103,110,97,116,117,114,101,95,109,101,115,115,97,103,101,0] /* create_signature_mes */, "i8", ALLOC_NONE, 494116);
allocate([99,114,101,97,116,101,95,114,101,118,101,97,108,115,105,103,95,109,101,115,115,97,103,101,0] /* create_revealsig_mes */, "i8", ALLOC_NONE, 494144);
allocate([99,114,101,97,116,101,95,107,101,121,95,109,101,115,115,97,103,101,0] /* create_key_message\0 */, "i8", ALLOC_NONE, 494172);
allocate([99,104,101,99,107,95,112,117,98,107,101,121,95,97,117,116,104,0] /* check_pubkey_auth\00 */, "i8", ALLOC_NONE, 494192);
allocate([99,97,108,99,117,108,97,116,101,95,112,117,98,107,101,121,95,97,117,116,104,0] /* calculate_pubkey_aut */, "i8", ALLOC_NONE, 494212);
allocate([95,103,99,114,121,95,97,116,104,95,109,117,116,101,120,95,117,110,108,111,99,107,0] /* _gcry_ath_mutex_unlo */, "i8", ALLOC_NONE, 494236);
allocate([95,103,99,114,121,95,97,116,104,95,109,117,116,101,120,95,108,111,99,107,0] /* _gcry_ath_mutex_lock */, "i8", ALLOC_NONE, 494260);
allocate([95,103,99,114,121,95,97,116,104,95,109,117,116,101,120,95,100,101,115,116,114,111,121,0] /* _gcry_ath_mutex_dest */, "i8", ALLOC_NONE, 494284);
allocate([120,57,51,49,95,114,101,115,101,101,100,0] /* x931_reseed\00 */, "i8", ALLOC_NONE, 494308);
allocate([120,57,51,49,95,103,101,116,95,100,116,0] /* x931_get_dt\00 */, "i8", ALLOC_NONE, 494320);
allocate([120,57,51,49,95,103,101,110,101,114,97,116,101,95,115,101,101,100,0] /* x931_generate_seed\0 */, "i8", ALLOC_NONE, 494332);
allocate([120,57,51,49,95,103,101,110,101,114,97,116,101,95,107,101,121,0] /* x931_generate_key\00 */, "i8", ALLOC_NONE, 494352);
allocate([120,57,51,49,95,97,101,115,95,100,114,105,118,101,114,0] /* x931_aes_driver\00 */, "i8", ALLOC_NONE, 494372);
allocate([119,104,105,114,108,112,111,111,108,95,97,100,100,0] /* whirlpool_add\00 */, "i8", ALLOC_NONE, 494388);
allocate([118,115,101,120,112,95,115,115,99,97,110,0] /* vsexp_sscan\00 */, "i8", ALLOC_NONE, 494404);
allocate([115,101,120,112,95,101,108,101,109,101,110,116,115,95,101,120,116,114,97,99,116,95,101,99,99,0] /* sexp_elements_extrac */, "i8", ALLOC_NONE, 494416);
allocate([115,101,108,102,116,101,115,116,95,107,97,116,0] /* selftest_kat\00 */, "i8", ALLOC_NONE, 494444);
allocate([114,101,97,100,95,115,101,101,100,95,102,105,108,101,0] /* read_seed_file\00 */, "i8", ALLOC_NONE, 494460);
allocate([114,101,97,100,95,112,111,111,108,0] /* read_pool\00 */, "i8", ALLOC_NONE, 494476);
allocate([112,115,115,95,118,101,114,105,102,121,0] /* pss_verify\00 */, "i8", ALLOC_NONE, 494488);
allocate([112,115,115,95,101,110,99,111,100,101,0] /* pss_encode\00 */, "i8", ALLOC_NONE, 494500);
allocate([112,114,101,112,97,114,101,95,109,97,99,112,97,100,115,0] /* prepare_macpads\00 */, "i8", ALLOC_NONE, 494512);
allocate([112,107,99,115,49,95,101,110,99,111,100,101,95,102,111,114,95,115,105,103,110,97,116,117,114,101,0] /* pkcs1_encode_for_sig */, "i8", ALLOC_NONE, 494528);
allocate([112,107,99,115,49,95,101,110,99,111,100,101,95,102,111,114,95,101,110,99,114,121,112,116,105,111,110,0] /* pkcs1_encode_for_enc */, "i8", ALLOC_NONE, 494556);
allocate([112,107,95,114,101,103,105,115,116,101,114,95,100,101,102,97,117,108,116,0] /* pk_register_default\ */, "i8", ALLOC_NONE, 494584);
allocate([109,112,105,95,115,101,116,95,115,101,99,117,114,101,0] /* mpi_set_secure\00 */, "i8", ALLOC_NONE, 494604);
allocate([109,105,120,95,112,111,111,108,0] /* mix_pool\00 */, "i8", ALLOC_NONE, 494620);
allocate([109,100,95,119,114,105,116,101,0] /* md_write\00 */, "i8", ALLOC_NONE, 494632);
allocate([109,100,95,114,101,103,105,115,116,101,114,95,100,101,102,97,117,108,116,0] /* md_register_default\ */, "i8", ALLOC_NONE, 494644);
allocate([109,100,95,114,101,97,100,0] /* md_read\00 */, "i8", ALLOC_NONE, 494664);
allocate([109,100,95,103,101,116,95,97,108,103,111,0] /* md_get_algo\00 */, "i8", ALLOC_NONE, 494672);
allocate([109,100,95,99,111,112,121,0] /* md_copy\00 */, "i8", ALLOC_NONE, 494684);
allocate([109,95,111,117,116,95,111,102,95,110,0] /* m_out_of_n\00 */, "i8", ALLOC_NONE, 494692);
allocate([105,115,95,112,114,105,109,101,0] /* is_prime\00 */, "i8", ALLOC_NONE, 494704);
allocate([103,108,111,98,97,108,95,105,110,105,116,0] /* global_init\00 */, "i8", ALLOC_NONE, 494716);
allocate([103,101,116,95,114,97,110,100,111,109,0] /* get_random\00 */, "i8", ALLOC_NONE, 494728);
allocate([103,101,116,95,112,111,111,108,95,112,114,105,109,101,0] /* get_pool_prime\00 */, "i8", ALLOC_NONE, 494740);
allocate([103,101,116,95,101,110,116,114,111,112,121,0] /* get_entropy\00 */, "i8", ALLOC_NONE, 494756);
allocate([103,101,110,101,114,97,116,101,95,120,57,51,49,0] /* generate_x931\00 */, "i8", ALLOC_NONE, 494768);
allocate([103,101,110,101,114,97,116,101,95,115,116,100,0] /* generate_std\00 */, "i8", ALLOC_NONE, 494784);
allocate([103,101,110,101,114,97,116,101,95,102,105,112,115,49,56,54,0] /* generate_fips186\00 */, "i8", ALLOC_NONE, 494800);
allocate([103,101,110,101,114,97,116,101,0] /* generate\00 */, "i8", ALLOC_NONE, 494820);
allocate([103,101,110,101,114,97,116,101,0] /* generate\00 */, "i8", ALLOC_NONE, 494832);
allocate([103,101,110,95,120,57,51,49,95,112,97,114,109,95,120,112,0] /* gen_x931_parm_xp\00 */, "i8", ALLOC_NONE, 494844);
allocate([103,101,110,95,120,57,51,49,95,112,97,114,109,95,120,105,0] /* gen_x931_parm_xi\00 */, "i8", ALLOC_NONE, 494864);
allocate([103,101,110,95,107,0] /* gen_k\00 */, "i8", ALLOC_NONE, 494884);
allocate([103,99,114,121,95,115,101,120,112,95,118,108,105,115,116,0] /* gcry_sexp_vlist\00 */, "i8", ALLOC_NONE, 494892);
allocate([103,99,114,121,95,114,97,110,100,111,109,105,122,101,0] /* gcry_randomize\00 */, "i8", ALLOC_NONE, 494908);
allocate([103,99,114,121,95,114,97,110,100,111,109,95,98,121,116,101,115,95,115,101,99,117,114,101,0] /* gcry_random_bytes_se */, "i8", ALLOC_NONE, 494924);
allocate([103,99,114,121,95,114,97,110,100,111,109,95,98,121,116,101,115,0] /* gcry_random_bytes\00 */, "i8", ALLOC_NONE, 494952);
allocate([103,99,114,121,95,109,100,95,104,97,115,104,95,98,117,102,102,101,114,0] /* gcry_md_hash_buffer\ */, "i8", ALLOC_NONE, 494972);
allocate([103,99,114,121,95,109,100,95,103,101,116,95,97,108,103,111,0] /* gcry_md_get_algo\00 */, "i8", ALLOC_NONE, 494992);
allocate([103,99,114,121,95,99,114,101,97,116,101,95,110,111,110,99,101,0] /* gcry_create_nonce\00 */, "i8", ALLOC_NONE, 495012);
allocate([101,110,116,114,111,112,121,95,99,111,108,108,101,99,116,95,99,98,0] /* entropy_collect_cb\0 */, "i8", ALLOC_NONE, 495032);
allocate([101,110,99,114,121,112,116,95,97,101,115,0] /* encrypt_aes\00 */, "i8", ALLOC_NONE, 495052);
allocate([100,117,109,109,121,95,118,101,114,105,102,121,0] /* dummy_verify\00 */, "i8", ALLOC_NONE, 495064);
allocate([100,117,109,109,121,95,115,105,103,110,0] /* dummy_sign\00 */, "i8", ALLOC_NONE, 495080);
allocate([100,117,109,109,121,95,103,101,116,95,110,98,105,116,115,0] /* dummy_get_nbits\00 */, "i8", ALLOC_NONE, 495092);
allocate([100,117,109,109,121,95,103,101,110,101,114,97,116,101,0] /* dummy_generate\00 */, "i8", ALLOC_NONE, 495108);
allocate([100,117,109,109,121,95,101,110,99,114,121,112,116,95,115,116,114,101,97,109,0] /* dummy_encrypt_stream */, "i8", ALLOC_NONE, 495124);
allocate([100,117,109,109,121,95,101,110,99,114,121,112,116,95,98,108,111,99,107,0] /* dummy_encrypt_block\ */, "i8", ALLOC_NONE, 495148);
allocate([100,117,109,109,121,95,101,110,99,114,121,112,116,0] /* dummy_encrypt\00 */, "i8", ALLOC_NONE, 495168);
allocate([100,117,109,109,121,95,100,101,99,114,121,112,116,95,115,116,114,101,97,109,0] /* dummy_decrypt_stream */, "i8", ALLOC_NONE, 495184);
allocate([100,117,109,109,121,95,100,101,99,114,121,112,116,95,98,108,111,99,107,0] /* dummy_decrypt_block\ */, "i8", ALLOC_NONE, 495208);
allocate([100,117,109,109,121,95,100,101,99,114,121,112,116,0] /* dummy_decrypt\00 */, "i8", ALLOC_NONE, 495228);
allocate([100,117,109,109,121,95,99,104,101,99,107,95,115,101,99,114,101,116,95,107,101,121,0] /* dummy_check_secret_k */, "i8", ALLOC_NONE, 495244);
allocate([100,111,95,102,97,115,116,95,114,97,110,100,111,109,95,112,111,108,108,0] /* do_fast_random_poll\ */, "i8", ALLOC_NONE, 495268);
allocate([100,111,95,99,116,114,95,101,110,99,114,121,112,116,0] /* do_ctr_encrypt\00 */, "i8", ALLOC_NONE, 495288);
allocate([99,105,112,104,101,114,95,115,101,116,105,118,0] /* cipher_setiv\00 */, "i8", ALLOC_NONE, 495304);
allocate([99,105,112,104,101,114,95,114,101,103,105,115,116,101,114,95,100,101,102,97,117,108,116,0] /* cipher_register_defa */, "i8", ALLOC_NONE, 495320);
allocate([99,105,112,104,101,114,95,101,110,99,114,121,112,116,0] /* cipher_encrypt\00 */, "i8", ALLOC_NONE, 495344);
allocate([99,105,112,104,101,114,95,100,101,99,114,121,112,116,0] /* cipher_decrypt\00 */, "i8", ALLOC_NONE, 495360);
allocate([97,100,100,95,114,97,110,100,111,109,110,101,115,115,0] /* add_randomness\00 */, "i8", ALLOC_NONE, 495376);
allocate([95,103,99,114,121,95,115,101,120,112,95,118,108,105,115,116,0] /* _gcry_sexp_vlist\00 */, "i8", ALLOC_NONE, 495392);
allocate([95,103,99,114,121,95,115,101,120,112,95,115,112,114,105,110,116,0] /* _gcry_sexp_sprint\00 */, "i8", ALLOC_NONE, 495412);
allocate([95,103,99,114,121,95,115,101,120,112,95,112,114,101,112,101,110,100,0] /* _gcry_sexp_prepend\0 */, "i8", ALLOC_NONE, 495432);
allocate([95,103,99,114,121,95,115,101,120,112,95,110,116,104,0] /* _gcry_sexp_nth\00 */, "i8", ALLOC_NONE, 495452);
allocate([95,103,99,114,121,95,115,101,120,112,95,102,105,110,100,95,116,111,107,101,110,0] /* _gcry_sexp_find_toke */, "i8", ALLOC_NONE, 495468);
allocate([95,103,99,114,121,95,115,101,120,112,95,99,111,110,115,0] /* _gcry_sexp_cons\00 */, "i8", ALLOC_NONE, 495492);
allocate([95,103,99,114,121,95,115,101,120,112,95,97,112,112,101,110,100,0] /* _gcry_sexp_append\00 */, "i8", ALLOC_NONE, 495508);
allocate([95,103,99,114,121,95,115,101,120,112,95,97,108,105,115,116,0] /* _gcry_sexp_alist\00 */, "i8", ALLOC_NONE, 495528);
allocate([95,103,99,114,121,95,114,110,103,102,105,112,115,95,105,110,105,116,105,97,108,105,122,101,0] /* _gcry_rngfips_initia */, "i8", ALLOC_NONE, 495548);
allocate([95,103,99,114,121,95,114,110,103,99,115,112,114,110,103,95,115,101,116,95,115,101,101,100,95,102,105,108,101,0] /* _gcry_rngcsprng_set_ */, "i8", ALLOC_NONE, 495576);
allocate([95,103,99,114,121,95,112,107,95,115,105,103,110,0] /* _gcry_pk_sign\00 */, "i8", ALLOC_NONE, 495608);
allocate([95,103,99,114,121,95,112,107,95,103,101,110,107,101,121,0] /* _gcry_pk_genkey\00 */, "i8", ALLOC_NONE, 495624);
allocate([95,103,99,114,121,95,112,107,95,101,110,99,114,121,112,116,0] /* _gcry_pk_encrypt\00 */, "i8", ALLOC_NONE, 495640);
allocate([95,103,99,114,121,95,109,112,105,95,115,101,116,95,98,117,102,102,101,114,0] /* _gcry_mpi_set_buffer */, "i8", ALLOC_NONE, 495660);
allocate([95,103,99,114,121,95,109,112,105,95,112,111,119,109,0] /* _gcry_mpi_powm\00 */, "i8", ALLOC_NONE, 495684);
allocate([95,103,99,114,121,95,109,112,105,95,109,117,108,112,111,119,109,0] /* _gcry_mpi_mulpowm\00 */, "i8", ALLOC_NONE, 495700);
allocate([95,103,99,114,121,95,109,100,95,103,101,116,0] /* _gcry_md_get\00 */, "i8", ALLOC_NONE, 495720);
allocate([95,103,99,114,121,95,108,111,103,118,0] /* _gcry_logv\00 */, "i8", ALLOC_NONE, 495736);
allocate([95,103,99,114,121,95,105,110,105,116,105,97,108,105,122,101,95,102,105,112,115,95,109,111,100,101,0] /* _gcry_initialize_fip */, "i8", ALLOC_NONE, 495748);
allocate([95,103,99,114,121,95,105,110,97,99,116,105,118,97,116,101,95,102,105,112,115,95,109,111,100,101,0] /* _gcry_inactivate_fip */, "i8", ALLOC_NONE, 495776);
allocate([95,103,99,114,121,95,103,101,110,101,114,97,116,101,95,102,105,112,115,49,56,54,95,51,95,112,114,105,109,101,0] /* _gcry_generate_fips1 */, "i8", ALLOC_NONE, 495804);
allocate([95,103,99,114,121,95,102,97,116,97,108,95,101,114,114,111,114,0] /* _gcry_fatal_error\00 */, "i8", ALLOC_NONE, 495836);
allocate([95,103,99,114,121,95,99,105,112,104,101,114,95,99,116,108,0] /* _gcry_cipher_ctl\00 */, "i8", ALLOC_NONE, 495856);
allocate([95,103,99,114,121,95,97,99,95,105,111,95,119,114,105,116,101,0] /* _gcry_ac_io_write\00 */, "i8", ALLOC_NONE, 495876);
allocate([95,103,99,114,121,95,97,99,95,105,111,95,114,101,97,100,0] /* _gcry_ac_io_read\00 */, "i8", ALLOC_NONE, 495896);
allocate([95,103,99,114,121,95,97,99,95,105,111,95,105,110,105,116,95,118,97,0] /* _gcry_ac_io_init_va\ */, "i8", ALLOC_NONE, 495916);
allocate([0,0,0,0,156,145,7,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 495936);
allocate(1, "i8", ALLOC_NONE, 495956);
allocate([0,0,0,0,168,145,7,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 495960);
allocate(1, "i8", ALLOC_NONE, 495980);
allocate([83,116,57,98,97,100,95,97,108,108,111,99,0] /* St9bad_alloc\00 */, "i8", ALLOC_NONE, 495984);
allocate([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* St20bad_array_new_le */, "i8", ALLOC_NONE, 496000);
allocate(12, "i8", ALLOC_NONE, 496028);
allocate([0,0,0,0,0,0,0,0,156,145,7,0], "i8", ALLOC_NONE, 496040);
allocate(1, "i8", ALLOC_NONE, 496052);
allocate(4, "i8", ALLOC_NONE, 496056);
allocate([0,0,0,0,9,13,11,14,18,26,22,28,27,23,29,18,36,52,44,56,45,57,39,54,54,46,58,36,63,35,49,42,72,104,88,112,65,101,83,126,90,114,78,108,83,127,69,98,108,92,116,72,101,81,127,70,126,70,98,84,119,75,105,90,144,208,176,224,153,221,187,238,130,202,166,252,139,199,173,242,180,228,156,216,189,233,151,214,166,254,138,196,175,243,129,202,216,184,232,144,209,181,227,158,202,162,254,140,195,175,245,130,252,140,196,168,245,129,207,166,238,150,210,180,231,155,217,186,59,187,123,219,50,182,112,213,41,161,109,199,32,172,102,201,31,143,87,227,22,130,92,237,13,149,65,255,4,152,74,241,115,211,35,171,122,222,40,165,97,201,53,183,104,196,62,185,87,231,15,147,94,234,4,157,69,253,25,143,76,240,18,129,171,107,203,59,162,102,192,53,185,113,221,39,176,124,214,41,143,95,231,3,134,82,236,13,157,69,241,31,148,72,250,17,227,3,147,75,234,14,152,69,241,25,133,87,248,20,142,89,199,55,191,115,206,58,180,125,213,45,169,111,220,32,162,97,118,109,246,173,127,96,253,163,100,119,224,177,109,122,235,191,82,89,218,149,91,84,209,155,64,67,204,137,73,78,199,135,62,5,174,221,55,8,165,211,44,31,184,193,37,18,179,207,26,49,130,229,19,60,137,235,8,43,148,249,1,38,159,247,230,189,70,77,239,176,77,67,244,167,80,81,253,170,91,95,194,137,106,117,203,132,97,123,208,147,124,105,217,158,119,103,174,213,30,61,167,216,21,51,188,207,8,33,181,194,3,47,138,225,50,5,131,236,57,11,152,251,36,25,145,246,47,23,77,214,141,118,68,219,134,120,95,204,155,106,86,193,144,100,105,226,161,78,96,239,170,64,123,248,183,82,114,245,188,92,5,190,213,6,12,179,222,8,23,164,195,26,30,169,200,20,33,138,249,62,40,135,242,48,51,144,239,34,58,157,228,44,221,6,61,150,212,11,54,152,207,28,43,138,198,17,32,132,249,50,17,174,240,63,26,160,235,40,7,178,226,37,12,188,149,110,101,230,156,99,110,232,135,116,115,250,142,121,120,244,177,90,73,222,184,87,66,208,163,64,95,194,170,77,84,204,236,218,247,65,229,215,252,79,254,192,225,93,247,205,234,83,200,238,219,121,193,227,208,119,218,244,205,101,211,249,198,107,164,178,175,49,173,191,164,63,182,168,185,45,191,165,178,35,128,134,131,9,137,139,136,7,146,156,149,21,155,145,158,27,124,10,71,161,117,7,76,175,110,16,81,189,103,29,90,179,88,62,107,153,81,51,96,151,74,36,125,133,67,41,118,139,52,98,31,209,61,111,20,223,38,120,9,205,47,117,2,195,16,86,51,233,25,91,56,231,2,76,37,245,11,65,46,251,215,97,140,154,222,108,135,148,197,123,154,134,204,118,145,136,243,85,160,162,250,88,171,172,225,79,182,190,232,66,189,176,159,9,212,234,150,4,223,228,141,19,194,246,132,30,201,248,187,61,248,210,178,48,243,220,169,39,238,206,160,42,229,192,71,177,60,122,78,188,55,116,85,171,42,102,92,166,33,104,99,133,16,66,106,136,27,76,113,159,6,94,120,146,13,80,15,217,100,10,6,212,111,4,29,195,114,22,20,206,121,24,43,237,72,50,34,224,67,60,57,247,94,46,48,250,85,32,154,183,1,236,147,186,10,226,136,173,23,240,129,160,28,254,190,131,45,212,183,142,38,218,172,153,59,200,165,148,48,198,210,223,89,156,219,210,82,146,192,197,79,128,201,200,68,142,246,235,117,164,255,230,126,170,228,241,99,184,237,252,104,182,10,103,177,12,3,106,186,2,24,125,167,16,17,112,172,30,46,83,157,52,39,94,150,58,60,73,139,40,53,68,128,38,66,15,233,124,75,2,226,114,80,21,255,96,89,24,244,110,102,59,197,68,111,54,206,74,116,33,211,88,125,44,216,86,161,12,122,55,168,1,113,57,179,22,108,43,186,27,103,37,133,56,86,15,140,53,93,1,151,34,64,19,158,47,75,29,233,100,34,71,224,105,41,73,251,126,52,91,242,115,63,85,205,80,14,127,196,93,5,113,223,74,24,99,214,71,19,109,49,220,202,215,56,209,193,217,35,198,220,203,42,203,215,197,21,232,230,239,28,229,237,225,7,242,240,243,14,255,251,253,121,180,146,167,112,185,153,169,107,174,132,187,98,163,143,181,93,128,190,159,84,141,181,145,79,154,168,131,70,151,163,141], "i8", ALLOC_NONE, 496060);
allocate([0,0,0,0,13,11,14,9,26,22,28,18,23,29,18,27,52,44,56,36,57,39,54,45,46,58,36,54,35,49,42,63,104,88,112,72,101,83,126,65,114,78,108,90,127,69,98,83,92,116,72,108,81,127,70,101,70,98,84,126,75,105,90,119,208,176,224,144,221,187,238,153,202,166,252,130,199,173,242,139,228,156,216,180,233,151,214,189,254,138,196,166,243,129,202,175,184,232,144,216,181,227,158,209,162,254,140,202,175,245,130,195,140,196,168,252,129,207,166,245,150,210,180,238,155,217,186,231,187,123,219,59,182,112,213,50,161,109,199,41,172,102,201,32,143,87,227,31,130,92,237,22,149,65,255,13,152,74,241,4,211,35,171,115,222,40,165,122,201,53,183,97,196,62,185,104,231,15,147,87,234,4,157,94,253,25,143,69,240,18,129,76,107,203,59,171,102,192,53,162,113,221,39,185,124,214,41,176,95,231,3,143,82,236,13,134,69,241,31,157,72,250,17,148,3,147,75,227,14,152,69,234,25,133,87,241,20,142,89,248,55,191,115,199,58,180,125,206,45,169,111,213,32,162,97,220,109,246,173,118,96,253,163,127,119,224,177,100,122,235,191,109,89,218,149,82,84,209,155,91,67,204,137,64,78,199,135,73,5,174,221,62,8,165,211,55,31,184,193,44,18,179,207,37,49,130,229,26,60,137,235,19,43,148,249,8,38,159,247,1,189,70,77,230,176,77,67,239,167,80,81,244,170,91,95,253,137,106,117,194,132,97,123,203,147,124,105,208,158,119,103,217,213,30,61,174,216,21,51,167,207,8,33,188,194,3,47,181,225,50,5,138,236,57,11,131,251,36,25,152,246,47,23,145,214,141,118,77,219,134,120,68,204,155,106,95,193,144,100,86,226,161,78,105,239,170,64,96,248,183,82,123,245,188,92,114,190,213,6,5,179,222,8,12,164,195,26,23,169,200,20,30,138,249,62,33,135,242,48,40,144,239,34,51,157,228,44,58,6,61,150,221,11,54,152,212,28,43,138,207,17,32,132,198,50,17,174,249,63,26,160,240,40,7,178,235,37,12,188,226,110,101,230,149,99,110,232,156,116,115,250,135,121,120,244,142,90,73,222,177,87,66,208,184,64,95,194,163,77,84,204,170,218,247,65,236,215,252,79,229,192,225,93,254,205,234,83,247,238,219,121,200,227,208,119,193,244,205,101,218,249,198,107,211,178,175,49,164,191,164,63,173,168,185,45,182,165,178,35,191,134,131,9,128,139,136,7,137,156,149,21,146,145,158,27,155,10,71,161,124,7,76,175,117,16,81,189,110,29,90,179,103,62,107,153,88,51,96,151,81,36,125,133,74,41,118,139,67,98,31,209,52,111,20,223,61,120,9,205,38,117,2,195,47,86,51,233,16,91,56,231,25,76,37,245,2,65,46,251,11,97,140,154,215,108,135,148,222,123,154,134,197,118,145,136,204,85,160,162,243,88,171,172,250,79,182,190,225,66,189,176,232,9,212,234,159,4,223,228,150,19,194,246,141,30,201,248,132,61,248,210,187,48,243,220,178,39,238,206,169,42,229,192,160,177,60,122,71,188,55,116,78,171,42,102,85,166,33,104,92,133,16,66,99,136,27,76,106,159,6,94,113,146,13,80,120,217,100,10,15,212,111,4,6,195,114,22,29,206,121,24,20,237,72,50,43,224,67,60,34,247,94,46,57,250,85,32,48,183,1,236,154,186,10,226,147,173,23,240,136,160,28,254,129,131,45,212,190,142,38,218,183,153,59,200,172,148,48,198,165,223,89,156,210,210,82,146,219,197,79,128,192,200,68,142,201,235,117,164,246,230,126,170,255,241,99,184,228,252,104,182,237,103,177,12,10,106,186,2,3,125,167,16,24,112,172,30,17,83,157,52,46,94,150,58,39,73,139,40,60,68,128,38,53,15,233,124,66,2,226,114,75,21,255,96,80,24,244,110,89,59,197,68,102,54,206,74,111,33,211,88,116,44,216,86,125,12,122,55,161,1,113,57,168,22,108,43,179,27,103,37,186,56,86,15,133,53,93,1,140,34,64,19,151,47,75,29,158,100,34,71,233,105,41,73,224,126,52,91,251,115,63,85,242,80,14,127,205,93,5,113,196,74,24,99,223,71,19,109,214,220,202,215,49,209,193,217,56,198,220,203,35,203,215,197,42,232,230,239,21,229,237,225,28,242,240,243,7,255,251,253,14,180,146,167,121,185,153,169,112,174,132,187,107,163,143,181,98,128,190,159,93,141,181,145,84,154,168,131,79,151,163,141,70], "i8", ALLOC_NONE, 497084);
allocate([0,0,0,0,11,14,9,13,22,28,18,26,29,18,27,23,44,56,36,52,39,54,45,57,58,36,54,46,49,42,63,35,88,112,72,104,83,126,65,101,78,108,90,114,69,98,83,127,116,72,108,92,127,70,101,81,98,84,126,70,105,90,119,75,176,224,144,208,187,238,153,221,166,252,130,202,173,242,139,199,156,216,180,228,151,214,189,233,138,196,166,254,129,202,175,243,232,144,216,184,227,158,209,181,254,140,202,162,245,130,195,175,196,168,252,140,207,166,245,129,210,180,238,150,217,186,231,155,123,219,59,187,112,213,50,182,109,199,41,161,102,201,32,172,87,227,31,143,92,237,22,130,65,255,13,149,74,241,4,152,35,171,115,211,40,165,122,222,53,183,97,201,62,185,104,196,15,147,87,231,4,157,94,234,25,143,69,253,18,129,76,240,203,59,171,107,192,53,162,102,221,39,185,113,214,41,176,124,231,3,143,95,236,13,134,82,241,31,157,69,250,17,148,72,147,75,227,3,152,69,234,14,133,87,241,25,142,89,248,20,191,115,199,55,180,125,206,58,169,111,213,45,162,97,220,32,246,173,118,109,253,163,127,96,224,177,100,119,235,191,109,122,218,149,82,89,209,155,91,84,204,137,64,67,199,135,73,78,174,221,62,5,165,211,55,8,184,193,44,31,179,207,37,18,130,229,26,49,137,235,19,60,148,249,8,43,159,247,1,38,70,77,230,189,77,67,239,176,80,81,244,167,91,95,253,170,106,117,194,137,97,123,203,132,124,105,208,147,119,103,217,158,30,61,174,213,21,51,167,216,8,33,188,207,3,47,181,194,50,5,138,225,57,11,131,236,36,25,152,251,47,23,145,246,141,118,77,214,134,120,68,219,155,106,95,204,144,100,86,193,161,78,105,226,170,64,96,239,183,82,123,248,188,92,114,245,213,6,5,190,222,8,12,179,195,26,23,164,200,20,30,169,249,62,33,138,242,48,40,135,239,34,51,144,228,44,58,157,61,150,221,6,54,152,212,11,43,138,207,28,32,132,198,17,17,174,249,50,26,160,240,63,7,178,235,40,12,188,226,37,101,230,149,110,110,232,156,99,115,250,135,116,120,244,142,121,73,222,177,90,66,208,184,87,95,194,163,64,84,204,170,77,247,65,236,218,252,79,229,215,225,93,254,192,234,83,247,205,219,121,200,238,208,119,193,227,205,101,218,244,198,107,211,249,175,49,164,178,164,63,173,191,185,45,182,168,178,35,191,165,131,9,128,134,136,7,137,139,149,21,146,156,158,27,155,145,71,161,124,10,76,175,117,7,81,189,110,16,90,179,103,29,107,153,88,62,96,151,81,51,125,133,74,36,118,139,67,41,31,209,52,98,20,223,61,111,9,205,38,120,2,195,47,117,51,233,16,86,56,231,25,91,37,245,2,76,46,251,11,65,140,154,215,97,135,148,222,108,154,134,197,123,145,136,204,118,160,162,243,85,171,172,250,88,182,190,225,79,189,176,232,66,212,234,159,9,223,228,150,4,194,246,141,19,201,248,132,30,248,210,187,61,243,220,178,48,238,206,169,39,229,192,160,42,60,122,71,177,55,116,78,188,42,102,85,171,33,104,92,166,16,66,99,133,27,76,106,136,6,94,113,159,13,80,120,146,100,10,15,217,111,4,6,212,114,22,29,195,121,24,20,206,72,50,43,237,67,60,34,224,94,46,57,247,85,32,48,250,1,236,154,183,10,226,147,186,23,240,136,173,28,254,129,160,45,212,190,131,38,218,183,142,59,200,172,153,48,198,165,148,89,156,210,223,82,146,219,210,79,128,192,197,68,142,201,200,117,164,246,235,126,170,255,230,99,184,228,241,104,182,237,252,177,12,10,103,186,2,3,106,167,16,24,125,172,30,17,112,157,52,46,83,150,58,39,94,139,40,60,73,128,38,53,68,233,124,66,15,226,114,75,2,255,96,80,21,244,110,89,24,197,68,102,59,206,74,111,54,211,88,116,33,216,86,125,44,122,55,161,12,113,57,168,1,108,43,179,22,103,37,186,27,86,15,133,56,93,1,140,53,64,19,151,34,75,29,158,47,34,71,233,100,41,73,224,105,52,91,251,126,63,85,242,115,14,127,205,80,5,113,196,93,24,99,223,74,19,109,214,71,202,215,49,220,193,217,56,209,220,203,35,198,215,197,42,203,230,239,21,232,237,225,28,229,240,243,7,242,251,253,14,255,146,167,121,180,153,169,112,185,132,187,107,174,143,181,98,163,190,159,93,128,181,145,84,141,168,131,79,154,163,141,70,151], "i8", ALLOC_NONE, 498108);
allocate([0,0,0,0,14,9,13,11,28,18,26,22,18,27,23,29,56,36,52,44,54,45,57,39,36,54,46,58,42,63,35,49,112,72,104,88,126,65,101,83,108,90,114,78,98,83,127,69,72,108,92,116,70,101,81,127,84,126,70,98,90,119,75,105,224,144,208,176,238,153,221,187,252,130,202,166,242,139,199,173,216,180,228,156,214,189,233,151,196,166,254,138,202,175,243,129,144,216,184,232,158,209,181,227,140,202,162,254,130,195,175,245,168,252,140,196,166,245,129,207,180,238,150,210,186,231,155,217,219,59,187,123,213,50,182,112,199,41,161,109,201,32,172,102,227,31,143,87,237,22,130,92,255,13,149,65,241,4,152,74,171,115,211,35,165,122,222,40,183,97,201,53,185,104,196,62,147,87,231,15,157,94,234,4,143,69,253,25,129,76,240,18,59,171,107,203,53,162,102,192,39,185,113,221,41,176,124,214,3,143,95,231,13,134,82,236,31,157,69,241,17,148,72,250,75,227,3,147,69,234,14,152,87,241,25,133,89,248,20,142,115,199,55,191,125,206,58,180,111,213,45,169,97,220,32,162,173,118,109,246,163,127,96,253,177,100,119,224,191,109,122,235,149,82,89,218,155,91,84,209,137,64,67,204,135,73,78,199,221,62,5,174,211,55,8,165,193,44,31,184,207,37,18,179,229,26,49,130,235,19,60,137,249,8,43,148,247,1,38,159,77,230,189,70,67,239,176,77,81,244,167,80,95,253,170,91,117,194,137,106,123,203,132,97,105,208,147,124,103,217,158,119,61,174,213,30,51,167,216,21,33,188,207,8,47,181,194,3,5,138,225,50,11,131,236,57,25,152,251,36,23,145,246,47,118,77,214,141,120,68,219,134,106,95,204,155,100,86,193,144,78,105,226,161,64,96,239,170,82,123,248,183,92,114,245,188,6,5,190,213,8,12,179,222,26,23,164,195,20,30,169,200,62,33,138,249,48,40,135,242,34,51,144,239,44,58,157,228,150,221,6,61,152,212,11,54,138,207,28,43,132,198,17,32,174,249,50,17,160,240,63,26,178,235,40,7,188,226,37,12,230,149,110,101,232,156,99,110,250,135,116,115,244,142,121,120,222,177,90,73,208,184,87,66,194,163,64,95,204,170,77,84,65,236,218,247,79,229,215,252,93,254,192,225,83,247,205,234,121,200,238,219,119,193,227,208,101,218,244,205,107,211,249,198,49,164,178,175,63,173,191,164,45,182,168,185,35,191,165,178,9,128,134,131,7,137,139,136,21,146,156,149,27,155,145,158,161,124,10,71,175,117,7,76,189,110,16,81,179,103,29,90,153,88,62,107,151,81,51,96,133,74,36,125,139,67,41,118,209,52,98,31,223,61,111,20,205,38,120,9,195,47,117,2,233,16,86,51,231,25,91,56,245,2,76,37,251,11,65,46,154,215,97,140,148,222,108,135,134,197,123,154,136,204,118,145,162,243,85,160,172,250,88,171,190,225,79,182,176,232,66,189,234,159,9,212,228,150,4,223,246,141,19,194,248,132,30,201,210,187,61,248,220,178,48,243,206,169,39,238,192,160,42,229,122,71,177,60,116,78,188,55,102,85,171,42,104,92,166,33,66,99,133,16,76,106,136,27,94,113,159,6,80,120,146,13,10,15,217,100,4,6,212,111,22,29,195,114,24,20,206,121,50,43,237,72,60,34,224,67,46,57,247,94,32,48,250,85,236,154,183,1,226,147,186,10,240,136,173,23,254,129,160,28,212,190,131,45,218,183,142,38,200,172,153,59,198,165,148,48,156,210,223,89,146,219,210,82,128,192,197,79,142,201,200,68,164,246,235,117,170,255,230,126,184,228,241,99,182,237,252,104,12,10,103,177,2,3,106,186,16,24,125,167,30,17,112,172,52,46,83,157,58,39,94,150,40,60,73,139,38,53,68,128,124,66,15,233,114,75,2,226,96,80,21,255,110,89,24,244,68,102,59,197,74,111,54,206,88,116,33,211,86,125,44,216,55,161,12,122,57,168,1,113,43,179,22,108,37,186,27,103,15,133,56,86,1,140,53,93,19,151,34,64,29,158,47,75,71,233,100,34,73,224,105,41,91,251,126,52,85,242,115,63,127,205,80,14,113,196,93,5,99,223,74,24,109,214,71,19,215,49,220,202,217,56,209,193,203,35,198,220,197,42,203,215,239,21,232,230,225,28,229,237,243,7,242,240,253,14,255,251,167,121,180,146,169,112,185,153,187,107,174,132,181,98,163,143,159,93,128,190,145,84,141,181,131,79,154,168,141,70,151,163], "i8", ALLOC_NONE, 499132);
allocate([244,167,80,81,65,101,83,126,23,164,195,26,39,94,150,58,171,107,203,59,157,69,241,31,250,88,171,172,227,3,147,75,48,250,85,32,118,109,246,173,204,118,145,136,2,76,37,245,229,215,252,79,42,203,215,197,53,68,128,38,98,163,143,181,177,90,73,222,186,27,103,37,234,14,152,69,254,192,225,93,47,117,2,195,76,240,18,129,70,151,163,141,211,249,198,107,143,95,231,3,146,156,149,21,109,122,235,191,82,89,218,149,190,131,45,212,116,33,211,88,224,105,41,73,201,200,68,142,194,137,106,117,142,121,120,244,88,62,107,153,185,113,221,39,225,79,182,190,136,173,23,240,32,172,102,201,206,58,180,125,223,74,24,99,26,49,130,229,81,51,96,151,83,127,69,98,100,119,224,177,107,174,132,187,129,160,28,254,8,43,148,249,72,104,88,112,69,253,25,143,222,108,135,148,123,248,183,82,115,211,35,171,75,2,226,114,31,143,87,227,85,171,42,102,235,40,7,178,181,194,3,47,197,123,154,134,55,8,165,211,40,135,242,48,191,165,178,35,3,106,186,2,22,130,92,237,207,28,43,138,121,180,146,167,7,242,240,243,105,226,161,78,218,244,205,101,5,190,213,6,52,98,31,209,166,254,138,196,46,83,157,52,243,85,160,162,138,225,50,5,246,235,117,164,131,236,57,11,96,239,170,64,113,159,6,94,110,16,81,189,33,138,249,62,221,6,61,150,62,5,174,221,230,189,70,77,84,141,181,145,196,93,5,113,6,212,111,4,80,21,255,96,152,251,36,25,189,233,151,214,64,67,204,137,217,158,119,103,232,66,189,176,137,139,136,7,25,91,56,231,200,238,219,121,124,10,71,161,66,15,233,124,132,30,201,248,0,0,0,0,128,134,131,9,43,237,72,50,17,112,172,30,90,114,78,108,14,255,251,253,133,56,86,15,174,213,30,61,45,57,39,54,15,217,100,10,92,166,33,104,91,84,209,155,54,46,58,36,10,103,177,12,87,231,15,147,238,150,210,180,155,145,158,27,192,197,79,128,220,32,162,97,119,75,105,90,18,26,22,28,147,186,10,226,160,42,229,192,34,224,67,60,27,23,29,18,9,13,11,14,139,199,173,242,182,168,185,45,30,169,200,20,241,25,133,87,117,7,76,175,153,221,187,238,127,96,253,163,1,38,159,247,114,245,188,92,102,59,197,68,251,126,52,91,67,41,118,139,35,198,220,203,237,252,104,182,228,241,99,184,49,220,202,215,99,133,16,66,151,34,64,19,198,17,32,132,74,36,125,133,187,61,248,210,249,50,17,174,41,161,109,199,158,47,75,29,178,48,243,220,134,82,236,13,193,227,208,119,179,22,108,43,112,185,153,169,148,72,250,17,233,100,34,71,252,140,196,168,240,63,26,160,125,44,216,86,51,144,239,34,73,78,199,135,56,209,193,217,202,162,254,140,212,11,54,152,245,129,207,166,122,222,40,165,183,142,38,218,173,191,164,63,58,157,228,44,120,146,13,80,95,204,155,106,126,70,98,84,141,19,194,246,216,184,232,144,57,247,94,46,195,175,245,130,93,128,190,159,208,147,124,105,213,45,169,111,37,18,179,207,172,153,59,200,24,125,167,16,156,99,110,232,59,187,123,219,38,120,9,205,89,24,244,110,154,183,1,236,79,154,168,131,149,110,101,230,255,230,126,170,188,207,8,33,21,232,230,239,231,155,217,186,111,54,206,74,159,9,212,234,176,124,214,41,164,178,175,49,63,35,49,42,165,148,48,198,162,102,192,53,78,188,55,116,130,202,166,252,144,208,176,224,167,216,21,51,4,152,74,241,236,218,247,65,205,80,14,127,145,246,47,23,77,214,141,118,239,176,77,67,170,77,84,204,150,4,223,228,209,181,227,158,106,136,27,76,44,31,184,193,101,81,127,70,94,234,4,157,140,53,93,1,135,116,115,250,11,65,46,251,103,29,90,179,219,210,82,146,16,86,51,233,214,71,19,109,215,97,140,154,161,12,122,55,248,20,142,89,19,60,137,235,169,39,238,206,97,201,53,183,28,229,237,225,71,177,60,122,210,223,89,156,242,115,63,85,20,206,121,24,199,55,191,115,247,205,234,83,253,170,91,95,61,111,20,223,68,219,134,120,175,243,129,202,104,196,62,185,36,52,44,56,163,64,95,194,29,195,114,22,226,37,12,188,60,73,139,40,13,149,65,255,168,1,113,57,12,179,222,8,180,228,156,216,86,193,144,100,203,132,97,123,50,182,112,213,108,92,116,72,184,87,66,208], "i8", ALLOC_NONE, 500156);
allocate([167,80,81,244,101,83,126,65,164,195,26,23,94,150,58,39,107,203,59,171,69,241,31,157,88,171,172,250,3,147,75,227,250,85,32,48,109,246,173,118,118,145,136,204,76,37,245,2,215,252,79,229,203,215,197,42,68,128,38,53,163,143,181,98,90,73,222,177,27,103,37,186,14,152,69,234,192,225,93,254,117,2,195,47,240,18,129,76,151,163,141,70,249,198,107,211,95,231,3,143,156,149,21,146,122,235,191,109,89,218,149,82,131,45,212,190,33,211,88,116,105,41,73,224,200,68,142,201,137,106,117,194,121,120,244,142,62,107,153,88,113,221,39,185,79,182,190,225,173,23,240,136,172,102,201,32,58,180,125,206,74,24,99,223,49,130,229,26,51,96,151,81,127,69,98,83,119,224,177,100,174,132,187,107,160,28,254,129,43,148,249,8,104,88,112,72,253,25,143,69,108,135,148,222,248,183,82,123,211,35,171,115,2,226,114,75,143,87,227,31,171,42,102,85,40,7,178,235,194,3,47,181,123,154,134,197,8,165,211,55,135,242,48,40,165,178,35,191,106,186,2,3,130,92,237,22,28,43,138,207,180,146,167,121,242,240,243,7,226,161,78,105,244,205,101,218,190,213,6,5,98,31,209,52,254,138,196,166,83,157,52,46,85,160,162,243,225,50,5,138,235,117,164,246,236,57,11,131,239,170,64,96,159,6,94,113,16,81,189,110,138,249,62,33,6,61,150,221,5,174,221,62,189,70,77,230,141,181,145,84,93,5,113,196,212,111,4,6,21,255,96,80,251,36,25,152,233,151,214,189,67,204,137,64,158,119,103,217,66,189,176,232,139,136,7,137,91,56,231,25,238,219,121,200,10,71,161,124,15,233,124,66,30,201,248,132,0,0,0,0,134,131,9,128,237,72,50,43,112,172,30,17,114,78,108,90,255,251,253,14,56,86,15,133,213,30,61,174,57,39,54,45,217,100,10,15,166,33,104,92,84,209,155,91,46,58,36,54,103,177,12,10,231,15,147,87,150,210,180,238,145,158,27,155,197,79,128,192,32,162,97,220,75,105,90,119,26,22,28,18,186,10,226,147,42,229,192,160,224,67,60,34,23,29,18,27,13,11,14,9,199,173,242,139,168,185,45,182,169,200,20,30,25,133,87,241,7,76,175,117,221,187,238,153,96,253,163,127,38,159,247,1,245,188,92,114,59,197,68,102,126,52,91,251,41,118,139,67,198,220,203,35,252,104,182,237,241,99,184,228,220,202,215,49,133,16,66,99,34,64,19,151,17,32,132,198,36,125,133,74,61,248,210,187,50,17,174,249,161,109,199,41,47,75,29,158,48,243,220,178,82,236,13,134,227,208,119,193,22,108,43,179,185,153,169,112,72,250,17,148,100,34,71,233,140,196,168,252,63,26,160,240,44,216,86,125,144,239,34,51,78,199,135,73,209,193,217,56,162,254,140,202,11,54,152,212,129,207,166,245,222,40,165,122,142,38,218,183,191,164,63,173,157,228,44,58,146,13,80,120,204,155,106,95,70,98,84,126,19,194,246,141,184,232,144,216,247,94,46,57,175,245,130,195,128,190,159,93,147,124,105,208,45,169,111,213,18,179,207,37,153,59,200,172,125,167,16,24,99,110,232,156,187,123,219,59,120,9,205,38,24,244,110,89,183,1,236,154,154,168,131,79,110,101,230,149,230,126,170,255,207,8,33,188,232,230,239,21,155,217,186,231,54,206,74,111,9,212,234,159,124,214,41,176,178,175,49,164,35,49,42,63,148,48,198,165,102,192,53,162,188,55,116,78,202,166,252,130,208,176,224,144,216,21,51,167,152,74,241,4,218,247,65,236,80,14,127,205,246,47,23,145,214,141,118,77,176,77,67,239,77,84,204,170,4,223,228,150,181,227,158,209,136,27,76,106,31,184,193,44,81,127,70,101,234,4,157,94,53,93,1,140,116,115,250,135,65,46,251,11,29,90,179,103,210,82,146,219,86,51,233,16,71,19,109,214,97,140,154,215,12,122,55,161,20,142,89,248,60,137,235,19,39,238,206,169,201,53,183,97,229,237,225,28,177,60,122,71,223,89,156,210,115,63,85,242,206,121,24,20,55,191,115,199,205,234,83,247,170,91,95,253,111,20,223,61,219,134,120,68,243,129,202,175,196,62,185,104,52,44,56,36,64,95,194,163,195,114,22,29,37,12,188,226,73,139,40,60,149,65,255,13,1,113,57,168,179,222,8,12,228,156,216,180,193,144,100,86,132,97,123,203,182,112,213,50,92,116,72,108,87,66,208,184], "i8", ALLOC_NONE, 501180);
allocate([80,81,244,167,83,126,65,101,195,26,23,164,150,58,39,94,203,59,171,107,241,31,157,69,171,172,250,88,147,75,227,3,85,32,48,250,246,173,118,109,145,136,204,118,37,245,2,76,252,79,229,215,215,197,42,203,128,38,53,68,143,181,98,163,73,222,177,90,103,37,186,27,152,69,234,14,225,93,254,192,2,195,47,117,18,129,76,240,163,141,70,151,198,107,211,249,231,3,143,95,149,21,146,156,235,191,109,122,218,149,82,89,45,212,190,131,211,88,116,33,41,73,224,105,68,142,201,200,106,117,194,137,120,244,142,121,107,153,88,62,221,39,185,113,182,190,225,79,23,240,136,173,102,201,32,172,180,125,206,58,24,99,223,74,130,229,26,49,96,151,81,51,69,98,83,127,224,177,100,119,132,187,107,174,28,254,129,160,148,249,8,43,88,112,72,104,25,143,69,253,135,148,222,108,183,82,123,248,35,171,115,211,226,114,75,2,87,227,31,143,42,102,85,171,7,178,235,40,3,47,181,194,154,134,197,123,165,211,55,8,242,48,40,135,178,35,191,165,186,2,3,106,92,237,22,130,43,138,207,28,146,167,121,180,240,243,7,242,161,78,105,226,205,101,218,244,213,6,5,190,31,209,52,98,138,196,166,254,157,52,46,83,160,162,243,85,50,5,138,225,117,164,246,235,57,11,131,236,170,64,96,239,6,94,113,159,81,189,110,16,249,62,33,138,61,150,221,6,174,221,62,5,70,77,230,189,181,145,84,141,5,113,196,93,111,4,6,212,255,96,80,21,36,25,152,251,151,214,189,233,204,137,64,67,119,103,217,158,189,176,232,66,136,7,137,139,56,231,25,91,219,121,200,238,71,161,124,10,233,124,66,15,201,248,132,30,0,0,0,0,131,9,128,134,72,50,43,237,172,30,17,112,78,108,90,114,251,253,14,255,86,15,133,56,30,61,174,213,39,54,45,57,100,10,15,217,33,104,92,166,209,155,91,84,58,36,54,46,177,12,10,103,15,147,87,231,210,180,238,150,158,27,155,145,79,128,192,197,162,97,220,32,105,90,119,75,22,28,18,26,10,226,147,186,229,192,160,42,67,60,34,224,29,18,27,23,11,14,9,13,173,242,139,199,185,45,182,168,200,20,30,169,133,87,241,25,76,175,117,7,187,238,153,221,253,163,127,96,159,247,1,38,188,92,114,245,197,68,102,59,52,91,251,126,118,139,67,41,220,203,35,198,104,182,237,252,99,184,228,241,202,215,49,220,16,66,99,133,64,19,151,34,32,132,198,17,125,133,74,36,248,210,187,61,17,174,249,50,109,199,41,161,75,29,158,47,243,220,178,48,236,13,134,82,208,119,193,227,108,43,179,22,153,169,112,185,250,17,148,72,34,71,233,100,196,168,252,140,26,160,240,63,216,86,125,44,239,34,51,144,199,135,73,78,193,217,56,209,254,140,202,162,54,152,212,11,207,166,245,129,40,165,122,222,38,218,183,142,164,63,173,191,228,44,58,157,13,80,120,146,155,106,95,204,98,84,126,70,194,246,141,19,232,144,216,184,94,46,57,247,245,130,195,175,190,159,93,128,124,105,208,147,169,111,213,45,179,207,37,18,59,200,172,153,167,16,24,125,110,232,156,99,123,219,59,187,9,205,38,120,244,110,89,24,1,236,154,183,168,131,79,154,101,230,149,110,126,170,255,230,8,33,188,207,230,239,21,232,217,186,231,155,206,74,111,54,212,234,159,9,214,41,176,124,175,49,164,178,49,42,63,35,48,198,165,148,192,53,162,102,55,116,78,188,166,252,130,202,176,224,144,208,21,51,167,216,74,241,4,152,247,65,236,218,14,127,205,80,47,23,145,246,141,118,77,214,77,67,239,176,84,204,170,77,223,228,150,4,227,158,209,181,27,76,106,136,184,193,44,31,127,70,101,81,4,157,94,234,93,1,140,53,115,250,135,116,46,251,11,65,90,179,103,29,82,146,219,210,51,233,16,86,19,109,214,71,140,154,215,97,122,55,161,12,142,89,248,20,137,235,19,60,238,206,169,39,53,183,97,201,237,225,28,229,60,122,71,177,89,156,210,223,63,85,242,115,121,24,20,206,191,115,199,55,234,83,247,205,91,95,253,170,20,223,61,111,134,120,68,219,129,202,175,243,62,185,104,196,44,56,36,52,95,194,163,64,114,22,29,195,12,188,226,37,139,40,60,73,65,255,13,149,113,57,168,1,222,8,12,179,156,216,180,228,144,100,86,193,97,123,203,132,112,213,50,182,116,72,108,92,66,208,184,87], "i8", ALLOC_NONE, 502204);
allocate([81,244,167,80,126,65,101,83,26,23,164,195,58,39,94,150,59,171,107,203,31,157,69,241,172,250,88,171,75,227,3,147,32,48,250,85,173,118,109,246,136,204,118,145,245,2,76,37,79,229,215,252,197,42,203,215,38,53,68,128,181,98,163,143,222,177,90,73,37,186,27,103,69,234,14,152,93,254,192,225,195,47,117,2,129,76,240,18,141,70,151,163,107,211,249,198,3,143,95,231,21,146,156,149,191,109,122,235,149,82,89,218,212,190,131,45,88,116,33,211,73,224,105,41,142,201,200,68,117,194,137,106,244,142,121,120,153,88,62,107,39,185,113,221,190,225,79,182,240,136,173,23,201,32,172,102,125,206,58,180,99,223,74,24,229,26,49,130,151,81,51,96,98,83,127,69,177,100,119,224,187,107,174,132,254,129,160,28,249,8,43,148,112,72,104,88,143,69,253,25,148,222,108,135,82,123,248,183,171,115,211,35,114,75,2,226,227,31,143,87,102,85,171,42,178,235,40,7,47,181,194,3,134,197,123,154,211,55,8,165,48,40,135,242,35,191,165,178,2,3,106,186,237,22,130,92,138,207,28,43,167,121,180,146,243,7,242,240,78,105,226,161,101,218,244,205,6,5,190,213,209,52,98,31,196,166,254,138,52,46,83,157,162,243,85,160,5,138,225,50,164,246,235,117,11,131,236,57,64,96,239,170,94,113,159,6,189,110,16,81,62,33,138,249,150,221,6,61,221,62,5,174,77,230,189,70,145,84,141,181,113,196,93,5,4,6,212,111,96,80,21,255,25,152,251,36,214,189,233,151,137,64,67,204,103,217,158,119,176,232,66,189,7,137,139,136,231,25,91,56,121,200,238,219,161,124,10,71,124,66,15,233,248,132,30,201,0,0,0,0,9,128,134,131,50,43,237,72,30,17,112,172,108,90,114,78,253,14,255,251,15,133,56,86,61,174,213,30,54,45,57,39,10,15,217,100,104,92,166,33,155,91,84,209,36,54,46,58,12,10,103,177,147,87,231,15,180,238,150,210,27,155,145,158,128,192,197,79,97,220,32,162,90,119,75,105,28,18,26,22,226,147,186,10,192,160,42,229,60,34,224,67,18,27,23,29,14,9,13,11,242,139,199,173,45,182,168,185,20,30,169,200,87,241,25,133,175,117,7,76,238,153,221,187,163,127,96,253,247,1,38,159,92,114,245,188,68,102,59,197,91,251,126,52,139,67,41,118,203,35,198,220,182,237,252,104,184,228,241,99,215,49,220,202,66,99,133,16,19,151,34,64,132,198,17,32,133,74,36,125,210,187,61,248,174,249,50,17,199,41,161,109,29,158,47,75,220,178,48,243,13,134,82,236,119,193,227,208,43,179,22,108,169,112,185,153,17,148,72,250,71,233,100,34,168,252,140,196,160,240,63,26,86,125,44,216,34,51,144,239,135,73,78,199,217,56,209,193,140,202,162,254,152,212,11,54,166,245,129,207,165,122,222,40,218,183,142,38,63,173,191,164,44,58,157,228,80,120,146,13,106,95,204,155,84,126,70,98,246,141,19,194,144,216,184,232,46,57,247,94,130,195,175,245,159,93,128,190,105,208,147,124,111,213,45,169,207,37,18,179,200,172,153,59,16,24,125,167,232,156,99,110,219,59,187,123,205,38,120,9,110,89,24,244,236,154,183,1,131,79,154,168,230,149,110,101,170,255,230,126,33,188,207,8,239,21,232,230,186,231,155,217,74,111,54,206,234,159,9,212,41,176,124,214,49,164,178,175,42,63,35,49,198,165,148,48,53,162,102,192,116,78,188,55,252,130,202,166,224,144,208,176,51,167,216,21,241,4,152,74,65,236,218,247,127,205,80,14,23,145,246,47,118,77,214,141,67,239,176,77,204,170,77,84,228,150,4,223,158,209,181,227,76,106,136,27,193,44,31,184,70,101,81,127,157,94,234,4,1,140,53,93,250,135,116,115,251,11,65,46,179,103,29,90,146,219,210,82,233,16,86,51,109,214,71,19,154,215,97,140,55,161,12,122,89,248,20,142,235,19,60,137,206,169,39,238,183,97,201,53,225,28,229,237,122,71,177,60,156,210,223,89,85,242,115,63,24,20,206,121,115,199,55,191,83,247,205,234,95,253,170,91,223,61,111,20,120,68,219,134,202,175,243,129,185,104,196,62,56,36,52,44,194,163,64,95,22,29,195,114,188,226,37,12,40,60,73,139,255,13,149,65,57,168,1,113,8,12,179,222,216,180,228,156,100,86,193,144,123,203,132,97,213,50,182,112,72,108,92,116,208,184,87,66], "i8", ALLOC_NONE, 503228);
allocate([99,99,165,198,124,124,132,248,119,119,153,238,123,123,141,246,242,242,13,255,107,107,189,214,111,111,177,222,197,197,84,145,48,48,80,96,1,1,3,2,103,103,169,206,43,43,125,86,254,254,25,231,215,215,98,181,171,171,230,77,118,118,154,236,202,202,69,143,130,130,157,31,201,201,64,137,125,125,135,250,250,250,21,239,89,89,235,178,71,71,201,142,240,240,11,251,173,173,236,65,212,212,103,179,162,162,253,95,175,175,234,69,156,156,191,35,164,164,247,83,114,114,150,228,192,192,91,155,183,183,194,117,253,253,28,225,147,147,174,61,38,38,106,76,54,54,90,108,63,63,65,126,247,247,2,245,204,204,79,131,52,52,92,104,165,165,244,81,229,229,52,209,241,241,8,249,113,113,147,226,216,216,115,171,49,49,83,98,21,21,63,42,4,4,12,8,199,199,82,149,35,35,101,70,195,195,94,157,24,24,40,48,150,150,161,55,5,5,15,10,154,154,181,47,7,7,9,14,18,18,54,36,128,128,155,27,226,226,61,223,235,235,38,205,39,39,105,78,178,178,205,127,117,117,159,234,9,9,27,18,131,131,158,29,44,44,116,88,26,26,46,52,27,27,45,54,110,110,178,220,90,90,238,180,160,160,251,91,82,82,246,164,59,59,77,118,214,214,97,183,179,179,206,125,41,41,123,82,227,227,62,221,47,47,113,94,132,132,151,19,83,83,245,166,209,209,104,185,0,0,0,0,237,237,44,193,32,32,96,64,252,252,31,227,177,177,200,121,91,91,237,182,106,106,190,212,203,203,70,141,190,190,217,103,57,57,75,114,74,74,222,148,76,76,212,152,88,88,232,176,207,207,74,133,208,208,107,187,239,239,42,197,170,170,229,79,251,251,22,237,67,67,197,134,77,77,215,154,51,51,85,102,133,133,148,17,69,69,207,138,249,249,16,233,2,2,6,4,127,127,129,254,80,80,240,160,60,60,68,120,159,159,186,37,168,168,227,75,81,81,243,162,163,163,254,93,64,64,192,128,143,143,138,5,146,146,173,63,157,157,188,33,56,56,72,112,245,245,4,241,188,188,223,99,182,182,193,119,218,218,117,175,33,33,99,66,16,16,48,32,255,255,26,229,243,243,14,253,210,210,109,191,205,205,76,129,12,12,20,24,19,19,53,38,236,236,47,195,95,95,225,190,151,151,162,53,68,68,204,136,23,23,57,46,196,196,87,147,167,167,242,85,126,126,130,252,61,61,71,122,100,100,172,200,93,93,231,186,25,25,43,50,115,115,149,230,96,96,160,192,129,129,152,25,79,79,209,158,220,220,127,163,34,34,102,68,42,42,126,84,144,144,171,59,136,136,131,11,70,70,202,140,238,238,41,199,184,184,211,107,20,20,60,40,222,222,121,167,94,94,226,188,11,11,29,22,219,219,118,173,224,224,59,219,50,50,86,100,58,58,78,116,10,10,30,20,73,73,219,146,6,6,10,12,36,36,108,72,92,92,228,184,194,194,93,159,211,211,110,189,172,172,239,67,98,98,166,196,145,145,168,57,149,149,164,49,228,228,55,211,121,121,139,242,231,231,50,213,200,200,67,139,55,55,89,110,109,109,183,218,141,141,140,1,213,213,100,177,78,78,210,156,169,169,224,73,108,108,180,216,86,86,250,172,244,244,7,243,234,234,37,207,101,101,175,202,122,122,142,244,174,174,233,71,8,8,24,16,186,186,213,111,120,120,136,240,37,37,111,74,46,46,114,92,28,28,36,56,166,166,241,87,180,180,199,115,198,198,81,151,232,232,35,203,221,221,124,161,116,116,156,232,31,31,33,62,75,75,221,150,189,189,220,97,139,139,134,13,138,138,133,15,112,112,144,224,62,62,66,124,181,181,196,113,102,102,170,204,72,72,216,144,3,3,5,6,246,246,1,247,14,14,18,28,97,97,163,194,53,53,95,106,87,87,249,174,185,185,208,105,134,134,145,23,193,193,88,153,29,29,39,58,158,158,185,39,225,225,56,217,248,248,19,235,152,152,179,43,17,17,51,34,105,105,187,210,217,217,112,169,142,142,137,7,148,148,167,51,155,155,182,45,30,30,34,60,135,135,146,21,233,233,32,201,206,206,73,135,85,85,255,170,40,40,120,80,223,223,122,165,140,140,143,3,161,161,248,89,137,137,128,9,13,13,23,26,191,191,218,101,230,230,49,215,66,66,198,132,104,104,184,208,65,65,195,130,153,153,176,41,45,45,119,90,15,15,17,30,176,176,203,123,84,84,252,168,187,187,214,109,22,22,58,44], "i8", ALLOC_NONE, 504252);
allocate([99,165,198,99,124,132,248,124,119,153,238,119,123,141,246,123,242,13,255,242,107,189,214,107,111,177,222,111,197,84,145,197,48,80,96,48,1,3,2,1,103,169,206,103,43,125,86,43,254,25,231,254,215,98,181,215,171,230,77,171,118,154,236,118,202,69,143,202,130,157,31,130,201,64,137,201,125,135,250,125,250,21,239,250,89,235,178,89,71,201,142,71,240,11,251,240,173,236,65,173,212,103,179,212,162,253,95,162,175,234,69,175,156,191,35,156,164,247,83,164,114,150,228,114,192,91,155,192,183,194,117,183,253,28,225,253,147,174,61,147,38,106,76,38,54,90,108,54,63,65,126,63,247,2,245,247,204,79,131,204,52,92,104,52,165,244,81,165,229,52,209,229,241,8,249,241,113,147,226,113,216,115,171,216,49,83,98,49,21,63,42,21,4,12,8,4,199,82,149,199,35,101,70,35,195,94,157,195,24,40,48,24,150,161,55,150,5,15,10,5,154,181,47,154,7,9,14,7,18,54,36,18,128,155,27,128,226,61,223,226,235,38,205,235,39,105,78,39,178,205,127,178,117,159,234,117,9,27,18,9,131,158,29,131,44,116,88,44,26,46,52,26,27,45,54,27,110,178,220,110,90,238,180,90,160,251,91,160,82,246,164,82,59,77,118,59,214,97,183,214,179,206,125,179,41,123,82,41,227,62,221,227,47,113,94,47,132,151,19,132,83,245,166,83,209,104,185,209,0,0,0,0,237,44,193,237,32,96,64,32,252,31,227,252,177,200,121,177,91,237,182,91,106,190,212,106,203,70,141,203,190,217,103,190,57,75,114,57,74,222,148,74,76,212,152,76,88,232,176,88,207,74,133,207,208,107,187,208,239,42,197,239,170,229,79,170,251,22,237,251,67,197,134,67,77,215,154,77,51,85,102,51,133,148,17,133,69,207,138,69,249,16,233,249,2,6,4,2,127,129,254,127,80,240,160,80,60,68,120,60,159,186,37,159,168,227,75,168,81,243,162,81,163,254,93,163,64,192,128,64,143,138,5,143,146,173,63,146,157,188,33,157,56,72,112,56,245,4,241,245,188,223,99,188,182,193,119,182,218,117,175,218,33,99,66,33,16,48,32,16,255,26,229,255,243,14,253,243,210,109,191,210,205,76,129,205,12,20,24,12,19,53,38,19,236,47,195,236,95,225,190,95,151,162,53,151,68,204,136,68,23,57,46,23,196,87,147,196,167,242,85,167,126,130,252,126,61,71,122,61,100,172,200,100,93,231,186,93,25,43,50,25,115,149,230,115,96,160,192,96,129,152,25,129,79,209,158,79,220,127,163,220,34,102,68,34,42,126,84,42,144,171,59,144,136,131,11,136,70,202,140,70,238,41,199,238,184,211,107,184,20,60,40,20,222,121,167,222,94,226,188,94,11,29,22,11,219,118,173,219,224,59,219,224,50,86,100,50,58,78,116,58,10,30,20,10,73,219,146,73,6,10,12,6,36,108,72,36,92,228,184,92,194,93,159,194,211,110,189,211,172,239,67,172,98,166,196,98,145,168,57,145,149,164,49,149,228,55,211,228,121,139,242,121,231,50,213,231,200,67,139,200,55,89,110,55,109,183,218,109,141,140,1,141,213,100,177,213,78,210,156,78,169,224,73,169,108,180,216,108,86,250,172,86,244,7,243,244,234,37,207,234,101,175,202,101,122,142,244,122,174,233,71,174,8,24,16,8,186,213,111,186,120,136,240,120,37,111,74,37,46,114,92,46,28,36,56,28,166,241,87,166,180,199,115,180,198,81,151,198,232,35,203,232,221,124,161,221,116,156,232,116,31,33,62,31,75,221,150,75,189,220,97,189,139,134,13,139,138,133,15,138,112,144,224,112,62,66,124,62,181,196,113,181,102,170,204,102,72,216,144,72,3,5,6,3,246,1,247,246,14,18,28,14,97,163,194,97,53,95,106,53,87,249,174,87,185,208,105,185,134,145,23,134,193,88,153,193,29,39,58,29,158,185,39,158,225,56,217,225,248,19,235,248,152,179,43,152,17,51,34,17,105,187,210,105,217,112,169,217,142,137,7,142,148,167,51,148,155,182,45,155,30,34,60,30,135,146,21,135,233,32,201,233,206,73,135,206,85,255,170,85,40,120,80,40,223,122,165,223,140,143,3,140,161,248,89,161,137,128,9,137,13,23,26,13,191,218,101,191,230,49,215,230,66,198,132,66,104,184,208,104,65,195,130,65,153,176,41,153,45,119,90,45,15,17,30,15,176,203,123,176,84,252,168,84,187,214,109,187,22,58,44,22], "i8", ALLOC_NONE, 505276);
allocate([165,198,99,99,132,248,124,124,153,238,119,119,141,246,123,123,13,255,242,242,189,214,107,107,177,222,111,111,84,145,197,197,80,96,48,48,3,2,1,1,169,206,103,103,125,86,43,43,25,231,254,254,98,181,215,215,230,77,171,171,154,236,118,118,69,143,202,202,157,31,130,130,64,137,201,201,135,250,125,125,21,239,250,250,235,178,89,89,201,142,71,71,11,251,240,240,236,65,173,173,103,179,212,212,253,95,162,162,234,69,175,175,191,35,156,156,247,83,164,164,150,228,114,114,91,155,192,192,194,117,183,183,28,225,253,253,174,61,147,147,106,76,38,38,90,108,54,54,65,126,63,63,2,245,247,247,79,131,204,204,92,104,52,52,244,81,165,165,52,209,229,229,8,249,241,241,147,226,113,113,115,171,216,216,83,98,49,49,63,42,21,21,12,8,4,4,82,149,199,199,101,70,35,35,94,157,195,195,40,48,24,24,161,55,150,150,15,10,5,5,181,47,154,154,9,14,7,7,54,36,18,18,155,27,128,128,61,223,226,226,38,205,235,235,105,78,39,39,205,127,178,178,159,234,117,117,27,18,9,9,158,29,131,131,116,88,44,44,46,52,26,26,45,54,27,27,178,220,110,110,238,180,90,90,251,91,160,160,246,164,82,82,77,118,59,59,97,183,214,214,206,125,179,179,123,82,41,41,62,221,227,227,113,94,47,47,151,19,132,132,245,166,83,83,104,185,209,209,0,0,0,0,44,193,237,237,96,64,32,32,31,227,252,252,200,121,177,177,237,182,91,91,190,212,106,106,70,141,203,203,217,103,190,190,75,114,57,57,222,148,74,74,212,152,76,76,232,176,88,88,74,133,207,207,107,187,208,208,42,197,239,239,229,79,170,170,22,237,251,251,197,134,67,67,215,154,77,77,85,102,51,51,148,17,133,133,207,138,69,69,16,233,249,249,6,4,2,2,129,254,127,127,240,160,80,80,68,120,60,60,186,37,159,159,227,75,168,168,243,162,81,81,254,93,163,163,192,128,64,64,138,5,143,143,173,63,146,146,188,33,157,157,72,112,56,56,4,241,245,245,223,99,188,188,193,119,182,182,117,175,218,218,99,66,33,33,48,32,16,16,26,229,255,255,14,253,243,243,109,191,210,210,76,129,205,205,20,24,12,12,53,38,19,19,47,195,236,236,225,190,95,95,162,53,151,151,204,136,68,68,57,46,23,23,87,147,196,196,242,85,167,167,130,252,126,126,71,122,61,61,172,200,100,100,231,186,93,93,43,50,25,25,149,230,115,115,160,192,96,96,152,25,129,129,209,158,79,79,127,163,220,220,102,68,34,34,126,84,42,42,171,59,144,144,131,11,136,136,202,140,70,70,41,199,238,238,211,107,184,184,60,40,20,20,121,167,222,222,226,188,94,94,29,22,11,11,118,173,219,219,59,219,224,224,86,100,50,50,78,116,58,58,30,20,10,10,219,146,73,73,10,12,6,6,108,72,36,36,228,184,92,92,93,159,194,194,110,189,211,211,239,67,172,172,166,196,98,98,168,57,145,145,164,49,149,149,55,211,228,228,139,242,121,121,50,213,231,231,67,139,200,200,89,110,55,55,183,218,109,109,140,1,141,141,100,177,213,213,210,156,78,78,224,73,169,169,180,216,108,108,250,172,86,86,7,243,244,244,37,207,234,234,175,202,101,101,142,244,122,122,233,71,174,174,24,16,8,8,213,111,186,186,136,240,120,120,111,74,37,37,114,92,46,46,36,56,28,28,241,87,166,166,199,115,180,180,81,151,198,198,35,203,232,232,124,161,221,221,156,232,116,116,33,62,31,31,221,150,75,75,220,97,189,189,134,13,139,139,133,15,138,138,144,224,112,112,66,124,62,62,196,113,181,181,170,204,102,102,216,144,72,72,5,6,3,3,1,247,246,246,18,28,14,14,163,194,97,97,95,106,53,53,249,174,87,87,208,105,185,185,145,23,134,134,88,153,193,193,39,58,29,29,185,39,158,158,56,217,225,225,19,235,248,248,179,43,152,152,51,34,17,17,187,210,105,105,112,169,217,217,137,7,142,142,167,51,148,148,182,45,155,155,34,60,30,30,146,21,135,135,32,201,233,233,73,135,206,206,255,170,85,85,120,80,40,40,122,165,223,223,143,3,140,140,248,89,161,161,128,9,137,137,23,26,13,13,218,101,191,191,49,215,230,230,198,132,66,66,184,208,104,104,195,130,65,65,176,41,153,153,119,90,45,45,17,30,15,15,203,123,176,176,252,168,84,84,214,109,187,187,58,44,22,22], "i8", ALLOC_NONE, 506300);
allocate([198,99,99,165,248,124,124,132,238,119,119,153,246,123,123,141,255,242,242,13,214,107,107,189,222,111,111,177,145,197,197,84,96,48,48,80,2,1,1,3,206,103,103,169,86,43,43,125,231,254,254,25,181,215,215,98,77,171,171,230,236,118,118,154,143,202,202,69,31,130,130,157,137,201,201,64,250,125,125,135,239,250,250,21,178,89,89,235,142,71,71,201,251,240,240,11,65,173,173,236,179,212,212,103,95,162,162,253,69,175,175,234,35,156,156,191,83,164,164,247,228,114,114,150,155,192,192,91,117,183,183,194,225,253,253,28,61,147,147,174,76,38,38,106,108,54,54,90,126,63,63,65,245,247,247,2,131,204,204,79,104,52,52,92,81,165,165,244,209,229,229,52,249,241,241,8,226,113,113,147,171,216,216,115,98,49,49,83,42,21,21,63,8,4,4,12,149,199,199,82,70,35,35,101,157,195,195,94,48,24,24,40,55,150,150,161,10,5,5,15,47,154,154,181,14,7,7,9,36,18,18,54,27,128,128,155,223,226,226,61,205,235,235,38,78,39,39,105,127,178,178,205,234,117,117,159,18,9,9,27,29,131,131,158,88,44,44,116,52,26,26,46,54,27,27,45,220,110,110,178,180,90,90,238,91,160,160,251,164,82,82,246,118,59,59,77,183,214,214,97,125,179,179,206,82,41,41,123,221,227,227,62,94,47,47,113,19,132,132,151,166,83,83,245,185,209,209,104,0,0,0,0,193,237,237,44,64,32,32,96,227,252,252,31,121,177,177,200,182,91,91,237,212,106,106,190,141,203,203,70,103,190,190,217,114,57,57,75,148,74,74,222,152,76,76,212,176,88,88,232,133,207,207,74,187,208,208,107,197,239,239,42,79,170,170,229,237,251,251,22,134,67,67,197,154,77,77,215,102,51,51,85,17,133,133,148,138,69,69,207,233,249,249,16,4,2,2,6,254,127,127,129,160,80,80,240,120,60,60,68,37,159,159,186,75,168,168,227,162,81,81,243,93,163,163,254,128,64,64,192,5,143,143,138,63,146,146,173,33,157,157,188,112,56,56,72,241,245,245,4,99,188,188,223,119,182,182,193,175,218,218,117,66,33,33,99,32,16,16,48,229,255,255,26,253,243,243,14,191,210,210,109,129,205,205,76,24,12,12,20,38,19,19,53,195,236,236,47,190,95,95,225,53,151,151,162,136,68,68,204,46,23,23,57,147,196,196,87,85,167,167,242,252,126,126,130,122,61,61,71,200,100,100,172,186,93,93,231,50,25,25,43,230,115,115,149,192,96,96,160,25,129,129,152,158,79,79,209,163,220,220,127,68,34,34,102,84,42,42,126,59,144,144,171,11,136,136,131,140,70,70,202,199,238,238,41,107,184,184,211,40,20,20,60,167,222,222,121,188,94,94,226,22,11,11,29,173,219,219,118,219,224,224,59,100,50,50,86,116,58,58,78,20,10,10,30,146,73,73,219,12,6,6,10,72,36,36,108,184,92,92,228,159,194,194,93,189,211,211,110,67,172,172,239,196,98,98,166,57,145,145,168,49,149,149,164,211,228,228,55,242,121,121,139,213,231,231,50,139,200,200,67,110,55,55,89,218,109,109,183,1,141,141,140,177,213,213,100,156,78,78,210,73,169,169,224,216,108,108,180,172,86,86,250,243,244,244,7,207,234,234,37,202,101,101,175,244,122,122,142,71,174,174,233,16,8,8,24,111,186,186,213,240,120,120,136,74,37,37,111,92,46,46,114,56,28,28,36,87,166,166,241,115,180,180,199,151,198,198,81,203,232,232,35,161,221,221,124,232,116,116,156,62,31,31,33,150,75,75,221,97,189,189,220,13,139,139,134,15,138,138,133,224,112,112,144,124,62,62,66,113,181,181,196,204,102,102,170,144,72,72,216,6,3,3,5,247,246,246,1,28,14,14,18,194,97,97,163,106,53,53,95,174,87,87,249,105,185,185,208,23,134,134,145,153,193,193,88,58,29,29,39,39,158,158,185,217,225,225,56,235,248,248,19,43,152,152,179,34,17,17,51,210,105,105,187,169,217,217,112,7,142,142,137,51,148,148,167,45,155,155,182,60,30,30,34,21,135,135,146,201,233,233,32,135,206,206,73,170,85,85,255,80,40,40,120,165,223,223,122,3,140,140,143,89,161,161,248,9,137,137,128,26,13,13,23,101,191,191,218,215,230,230,49,132,66,66,198,208,104,104,184,130,65,65,195,41,153,153,176,90,45,45,119,30,15,15,17,123,176,176,203,168,84,84,252,109,187,187,214,44,22,22,58], "i8", ALLOC_NONE, 507324);
allocate([56,56,48,8,40,232,224,200,45,44,33,13,38,164,162,134,15,204,195,207,30,220,210,206,51,176,179,131,56,184,176,136,47,172,163,143,32,96,96,64,21,84,81,69,7,196,195,199,4,68,64,68,47,108,99,79,43,104,99,75,27,88,83,75,3,192,195,195,34,96,98,66,51,48,51,3,53,180,177,133,41,40,33,9,32,160,160,128,34,224,226,194,39,164,163,135,19,208,211,195,17,144,145,129,17,16,17,1,6,4,2,6,28,28,16,12,60,188,176,140,54,52,50,6,11,72,67,75,47,236,227,207,8,136,128,136,44,108,96,76,40,168,160,136,23,20,19,7,4,196,192,196,22,20,18,6,52,244,240,196,2,192,194,194,5,68,65,69,33,224,225,193,22,212,210,198,63,60,51,15,61,60,49,13,14,140,130,142,24,152,144,136,40,40,32,8,14,76,66,78,54,244,242,198,62,60,50,14,37,164,161,133,57,248,241,201,13,12,1,13,31,220,211,207,24,216,208,200,43,40,35,11,38,100,98,70,58,120,114,74,39,36,35,7,47,44,35,15,49,240,241,193,50,112,114,66,2,64,66,66,20,212,208,196,1,64,65,65,0,192,192,192,51,112,115,67,39,100,99,71,44,172,160,140,11,136,131,139,55,244,243,199,45,172,161,141,0,128,128,128,31,28,19,15,10,200,194,202,44,44,32,12,42,168,162,138,52,52,48,4,18,208,210,194,11,8,3,11,46,236,226,206,41,232,225,201,29,92,81,77,20,148,144,132,24,24,16,8,56,248,240,200,23,84,83,71,46,172,162,142,8,8,0,8,5,196,193,197,19,16,19,3,13,204,193,205,6,132,130,134,57,184,177,137,63,252,243,207,61,124,113,77,1,192,193,193,49,48,49,1,53,244,241,197,10,136,130,138,42,104,98,74,49,176,177,129,17,208,209,193,32,32,32,0,23,212,211,199,2,0,2,2,34,32,34,2,4,4,0,4,40,104,96,72,49,112,113,65,7,4,3,7,27,216,211,203,29,156,145,141,25,152,145,137,33,96,97,65,62,188,178,142,38,228,226,198,25,88,81,73,29,220,209,205,17,80,81,65,16,144,144,128,28,220,208,204,26,152,146,138,35,160,163,131,43,168,163,139,16,208,208,192,1,128,129,129,15,12,3,15,7,68,67,71,26,24,18,10,35,224,227,195,44,236,224,204,13,140,129,141,63,188,179,143,22,148,146,134,59,120,115,75,28,92,80,76,34,160,162,130,33,160,161,129,35,96,99,67,35,32,35,3,13,76,65,77,8,200,192,200,30,156,146,142,28,156,144,140,58,56,50,10,12,12,0,12,46,44,34,14,58,184,178,138,46,108,98,78,31,156,147,143,26,88,82,74,50,240,242,194,18,144,146,130,51,240,243,195,9,72,65,73,56,120,112,72,12,204,192,204,21,20,17,5,59,248,243,203,48,112,112,64,53,116,113,69,63,124,115,79,53,52,49,5,16,16,16,0,3,0,3,3,36,100,96,68,45,108,97,77,6,196,194,198,52,116,112,68,21,212,209,197,52,180,176,132,42,232,226,202,9,8,1,9,54,116,114,70,25,24,17,9,62,252,242,206,0,64,64,64,18,16,18,2,32,224,224,192,61,188,177,141,5,4,1,5,58,248,242,202,1,0,1,1,48,240,240,192,42,40,34,10,30,92,82,78,41,168,161,137,22,84,82,70,3,64,67,67,5,132,129,133,20,20,16,4,9,136,129,137,27,152,147,139,48,176,176,128,37,228,225,197,8,72,64,72,57,120,113,73,23,148,147,135,60,252,240,204,30,28,18,14,2,128,130,130,33,32,33,1,12,140,128,140,27,24,19,11,31,92,83,79,55,116,115,71,20,84,80,68,50,176,178,130,29,28,17,13,37,36,33,5,15,76,67,79,0,0,0,0,6,68,66,70,45,236,225,205,24,88,80,72,18,80,82,66,43,232,227,203,62,124,114,78,26,216,210,202,9,200,193,201,61,252,241,205,48,48,48,0,21,148,145,133,37,100,97,69,60,60,48,12,54,180,178,134,36,228,224,196,59,184,179,139,60,124,112,76,14,12,2,14,16,80,80,64,57,56,49,9,38,36,34,6,50,48,50,2,4,132,128,132,41,104,97,73,19,144,147,131,55,52,51,7,39,228,227,199,36,36,32,4,36,164,160,132,11,200,195,203,19,80,83,67,10,8,2,10,7,132,131,135,25,216,209,201,12,76,64,76,3,128,131,131,15,140,131,143,14,204,194,206,59,56,51,11,10,72,66,74,55,180,179,135], "i8", ALLOC_NONE, 508348);
allocate([137,41,168,161,133,5,132,129,198,22,212,210,195,19,208,211,68,20,84,80,13,29,28,17,140,44,172,160,5,37,36,33,77,29,92,81,67,3,64,67,8,24,24,16,14,30,28,18,65,17,80,81,204,60,252,240,202,10,200,194,67,35,96,99,8,40,40,32,68,4,68,64,0,32,32,32,141,29,156,145,192,32,224,224,194,34,224,226,200,8,200,192,7,23,20,19,133,37,164,161,143,15,140,131,3,3,0,3,75,59,120,115,139,59,184,179,3,19,16,19,194,18,208,210,206,46,236,226,64,48,112,112,140,12,140,128,15,63,60,51,136,40,168,160,2,50,48,50,205,29,220,209,198,54,244,242,68,52,116,112,204,44,236,224,133,21,148,145,11,11,8,3,71,23,84,83,76,28,92,80,75,27,88,83,141,61,188,177,1,1,0,1,4,36,36,32,12,28,28,16,67,51,112,115,136,24,152,144,0,16,16,16,204,12,204,192,194,50,240,242,201,25,216,209,12,44,44,32,199,39,228,227,66,50,112,114,131,3,128,131,139,27,152,147,193,17,208,209,134,6,132,130,201,9,200,193,64,32,96,96,64,16,80,80,131,35,160,163,203,43,232,227,13,13,12,1,134,54,180,178,142,30,156,146,79,15,76,67,135,55,180,179,74,26,88,82,198,6,196,194,72,56,120,112,134,38,164,162,2,18,16,18,143,47,172,163,197,21,212,209,65,33,96,97,195,3,192,195,132,52,180,176,65,1,64,65,66,18,80,82,77,61,124,113,141,13,140,129,8,8,8,0,15,31,28,19,137,25,152,145,0,0,0,0,9,25,24,17,4,4,4,0,67,19,80,83,199,55,244,243,193,33,224,225,205,61,252,241,70,54,116,114,15,47,44,35,7,39,36,35,128,48,176,176,139,11,136,131,14,14,12,2,139,43,168,163,130,34,160,162,78,46,108,98,131,19,144,147,77,13,76,65,73,41,104,97,76,60,124,112,9,9,8,1,10,10,8,2,143,63,188,179,207,47,236,227,195,51,240,243,197,5,196,193,135,7,132,131,4,20,20,16,206,62,252,242,68,36,100,96,206,30,220,210,14,46,44,34,75,11,72,67,10,26,24,18,6,6,4,2,1,33,32,33,75,43,104,99,70,38,100,98,2,2,0,2,197,53,244,241,130,18,144,146,138,10,136,130,12,12,12,0,131,51,176,179,78,62,124,114,192,16,208,208,74,58,120,114,71,7,68,67,134,22,148,146,197,37,228,225,6,38,36,34,128,0,128,128,141,45,172,161,207,31,220,211,129,33,160,161,0,48,48,48,7,55,52,51,142,46,172,162,6,54,52,50,5,21,20,17,2,34,32,34,8,56,56,48,196,52,244,240,135,39,164,163,69,5,68,65,76,12,76,64,129,1,128,129,201,41,232,225,132,4,132,128,135,23,148,147,5,53,52,49,203,11,200,195,206,14,204,194,12,60,60,48,65,49,112,113,1,17,16,17,199,7,196,195,137,9,136,129,69,53,116,113,203,59,248,243,202,26,216,210,200,56,248,240,132,20,148,144,73,25,88,81,130,2,128,130,196,4,196,192,207,63,252,243,73,9,72,65,9,57,56,49,71,39,100,99,192,0,192,192,207,15,204,195,199,23,212,211,136,56,184,176,15,15,12,3,142,14,140,130,66,2,64,66,3,35,32,35,129,17,144,145,76,44,108,96,203,27,216,211,132,36,164,160,4,52,52,48,193,49,240,241,72,8,72,64,194,2,192,194,79,47,108,99,13,61,60,49,13,45,44,33,64,0,64,64,142,62,188,178,14,62,60,50,140,60,188,176,193,1,192,193,138,42,168,162,138,58,184,178,78,14,76,66,69,21,84,81,11,59,56,51,204,28,220,208,72,40,104,96,79,63,124,115,140,28,156,144,200,24,216,208,74,10,72,66,70,22,84,82,71,55,116,115,128,32,160,160,205,45,236,225,70,6,68,66,133,53,180,177,11,43,40,35,69,37,100,97,202,58,248,242,195,35,224,227,137,57,184,177,129,49,176,177,143,31,156,147,78,30,92,82,201,57,248,241,198,38,228,226,130,50,176,178,1,49,48,49,202,42,232,226,77,45,108,97,79,31,92,83,196,36,228,224,192,48,240,240,205,13,204,193,136,8,136,128,6,22,20,18,10,58,56,50,72,24,88,80,196,20,212,208,66,34,96,98,9,41,40,33,7,7,4,3,3,51,48,51,200,40,232,224,11,27,24,19,5,5,4,1,73,57,120,113,128,16,144,144,74,42,104,98,10,42,40,34,138,26,152,146], "i8", ALLOC_NONE, 509372);
allocate([48,8,56,56,224,200,40,232,33,13,45,44,162,134,38,164,195,207,15,204,210,206,30,220,179,131,51,176,176,136,56,184,163,143,47,172,96,64,32,96,81,69,21,84,195,199,7,196,64,68,4,68,99,79,47,108,99,75,43,104,83,75,27,88,195,195,3,192,98,66,34,96,51,3,51,48,177,133,53,180,33,9,41,40,160,128,32,160,226,194,34,224,163,135,39,164,211,195,19,208,145,129,17,144,17,1,17,16,2,6,6,4,16,12,28,28,176,140,60,188,50,6,54,52,67,75,11,72,227,207,47,236,128,136,8,136,96,76,44,108,160,136,40,168,19,7,23,20,192,196,4,196,18,6,22,20,240,196,52,244,194,194,2,192,65,69,5,68,225,193,33,224,210,198,22,212,51,15,63,60,49,13,61,60,130,142,14,140,144,136,24,152,32,8,40,40,66,78,14,76,242,198,54,244,50,14,62,60,161,133,37,164,241,201,57,248,1,13,13,12,211,207,31,220,208,200,24,216,35,11,43,40,98,70,38,100,114,74,58,120,35,7,39,36,35,15,47,44,241,193,49,240,114,66,50,112,66,66,2,64,208,196,20,212,65,65,1,64,192,192,0,192,115,67,51,112,99,71,39,100,160,140,44,172,131,139,11,136,243,199,55,244,161,141,45,172,128,128,0,128,19,15,31,28,194,202,10,200,32,12,44,44,162,138,42,168,48,4,52,52,210,194,18,208,3,11,11,8,226,206,46,236,225,201,41,232,81,77,29,92,144,132,20,148,16,8,24,24,240,200,56,248,83,71,23,84,162,142,46,172,0,8,8,8,193,197,5,196,19,3,19,16,193,205,13,204,130,134,6,132,177,137,57,184,243,207,63,252,113,77,61,124,193,193,1,192,49,1,49,48,241,197,53,244,130,138,10,136,98,74,42,104,177,129,49,176,209,193,17,208,32,0,32,32,211,199,23,212,2,2,2,0,34,2,34,32,0,4,4,4,96,72,40,104,113,65,49,112,3,7,7,4,211,203,27,216,145,141,29,156,145,137,25,152,97,65,33,96,178,142,62,188,226,198,38,228,81,73,25,88,209,205,29,220,81,65,17,80,144,128,16,144,208,204,28,220,146,138,26,152,163,131,35,160,163,139,43,168,208,192,16,208,129,129,1,128,3,15,15,12,67,71,7,68,18,10,26,24,227,195,35,224,224,204,44,236,129,141,13,140,179,143,63,188,146,134,22,148,115,75,59,120,80,76,28,92,162,130,34,160,161,129,33,160,99,67,35,96,35,3,35,32,65,77,13,76,192,200,8,200,146,142,30,156,144,140,28,156,50,10,58,56,0,12,12,12,34,14,46,44,178,138,58,184,98,78,46,108,147,143,31,156,82,74,26,88,242,194,50,240,146,130,18,144,243,195,51,240,65,73,9,72,112,72,56,120,192,204,12,204,17,5,21,20,243,203,59,248,112,64,48,112,113,69,53,116,115,79,63,124,49,5,53,52,16,0,16,16,3,3,3,0,96,68,36,100,97,77,45,108,194,198,6,196,112,68,52,116,209,197,21,212,176,132,52,180,226,202,42,232,1,9,9,8,114,70,54,116,17,9,25,24,242,206,62,252,64,64,0,64,18,2,18,16,224,192,32,224,177,141,61,188,1,5,5,4,242,202,58,248,1,1,1,0,240,192,48,240,34,10,42,40,82,78,30,92,161,137,41,168,82,70,22,84,67,67,3,64,129,133,5,132,16,4,20,20,129,137,9,136,147,139,27,152,176,128,48,176,225,197,37,228,64,72,8,72,113,73,57,120,147,135,23,148,240,204,60,252,18,14,30,28,130,130,2,128,33,1,33,32,128,140,12,140,19,11,27,24,83,79,31,92,115,71,55,116,80,68,20,84,178,130,50,176,17,13,29,28,33,5,37,36,67,79,15,76,0,0,0,0,66,70,6,68,225,205,45,236,80,72,24,88,82,66,18,80,227,203,43,232,114,78,62,124,210,202,26,216,193,201,9,200,241,205,61,252,48,0,48,48,145,133,21,148,97,69,37,100,48,12,60,60,178,134,54,180,224,196,36,228,179,139,59,184,112,76,60,124,2,14,14,12,80,64,16,80,49,9,57,56,34,6,38,36,50,2,50,48,128,132,4,132,97,73,41,104,147,131,19,144,51,7,55,52,227,199,39,228,32,4,36,36,160,132,36,164,195,203,11,200,83,67,19,80,2,10,10,8,131,135,7,132,209,201,25,216,64,76,12,76,131,131,3,128,131,143,15,140,194,206,14,204,51,11,59,56,66,74,10,72,179,135,55,180], "i8", ALLOC_NONE, 510396);
allocate([168,161,137,41,132,129,133,5,212,210,198,22,208,211,195,19,84,80,68,20,28,17,13,29,172,160,140,44,36,33,5,37,92,81,77,29,64,67,67,3,24,16,8,24,28,18,14,30,80,81,65,17,252,240,204,60,200,194,202,10,96,99,67,35,40,32,8,40,68,64,68,4,32,32,0,32,156,145,141,29,224,224,192,32,224,226,194,34,200,192,200,8,20,19,7,23,164,161,133,37,140,131,143,15,0,3,3,3,120,115,75,59,184,179,139,59,16,19,3,19,208,210,194,18,236,226,206,46,112,112,64,48,140,128,140,12,60,51,15,63,168,160,136,40,48,50,2,50,220,209,205,29,244,242,198,54,116,112,68,52,236,224,204,44,148,145,133,21,8,3,11,11,84,83,71,23,92,80,76,28,88,83,75,27,188,177,141,61,0,1,1,1,36,32,4,36,28,16,12,28,112,115,67,51,152,144,136,24,16,16,0,16,204,192,204,12,240,242,194,50,216,209,201,25,44,32,12,44,228,227,199,39,112,114,66,50,128,131,131,3,152,147,139,27,208,209,193,17,132,130,134,6,200,193,201,9,96,96,64,32,80,80,64,16,160,163,131,35,232,227,203,43,12,1,13,13,180,178,134,54,156,146,142,30,76,67,79,15,180,179,135,55,88,82,74,26,196,194,198,6,120,112,72,56,164,162,134,38,16,18,2,18,172,163,143,47,212,209,197,21,96,97,65,33,192,195,195,3,180,176,132,52,64,65,65,1,80,82,66,18,124,113,77,61,140,129,141,13,8,0,8,8,28,19,15,31,152,145,137,25,0,0,0,0,24,17,9,25,4,0,4,4,80,83,67,19,244,243,199,55,224,225,193,33,252,241,205,61,116,114,70,54,44,35,15,47,36,35,7,39,176,176,128,48,136,131,139,11,12,2,14,14,168,163,139,43,160,162,130,34,108,98,78,46,144,147,131,19,76,65,77,13,104,97,73,41,124,112,76,60,8,1,9,9,8,2,10,10,188,179,143,63,236,227,207,47,240,243,195,51,196,193,197,5,132,131,135,7,20,16,4,20,252,242,206,62,100,96,68,36,220,210,206,30,44,34,14,46,72,67,75,11,24,18,10,26,4,2,6,6,32,33,1,33,104,99,75,43,100,98,70,38,0,2,2,2,244,241,197,53,144,146,130,18,136,130,138,10,12,0,12,12,176,179,131,51,124,114,78,62,208,208,192,16,120,114,74,58,68,67,71,7,148,146,134,22,228,225,197,37,36,34,6,38,128,128,128,0,172,161,141,45,220,211,207,31,160,161,129,33,48,48,0,48,52,51,7,55,172,162,142,46,52,50,6,54,20,17,5,21,32,34,2,34,56,48,8,56,244,240,196,52,164,163,135,39,68,65,69,5,76,64,76,12,128,129,129,1,232,225,201,41,132,128,132,4,148,147,135,23,52,49,5,53,200,195,203,11,204,194,206,14,60,48,12,60,112,113,65,49,16,17,1,17,196,195,199,7,136,129,137,9,116,113,69,53,248,243,203,59,216,210,202,26,248,240,200,56,148,144,132,20,88,81,73,25,128,130,130,2,196,192,196,4,252,243,207,63,72,65,73,9,56,49,9,57,100,99,71,39,192,192,192,0,204,195,207,15,212,211,199,23,184,176,136,56,12,3,15,15,140,130,142,14,64,66,66,2,32,35,3,35,144,145,129,17,108,96,76,44,216,211,203,27,164,160,132,36,52,48,4,52,240,241,193,49,72,64,72,8,192,194,194,2,108,99,79,47,60,49,13,61,44,33,13,45,64,64,64,0,188,178,142,62,60,50,14,62,188,176,140,60,192,193,193,1,168,162,138,42,184,178,138,58,76,66,78,14,84,81,69,21,56,51,11,59,220,208,204,28,104,96,72,40,124,115,79,63,156,144,140,28,216,208,200,24,72,66,74,10,84,82,70,22,116,115,71,55,160,160,128,32,236,225,205,45,68,66,70,6,180,177,133,53,40,35,11,43,100,97,69,37,248,242,202,58,224,227,195,35,184,177,137,57,176,177,129,49,156,147,143,31,92,82,78,30,248,241,201,57,228,226,198,38,176,178,130,50,48,49,1,49,232,226,202,42,108,97,77,45,92,83,79,31,228,224,196,36,240,240,192,48,204,193,205,13,136,128,136,8,20,18,6,22,56,50,10,58,88,80,72,24,212,208,196,20,96,98,66,34,40,33,9,41,4,3,7,7,48,51,3,51,232,224,200,40,24,19,11,27,4,1,5,5,120,113,73,57,144,144,128,16,104,98,74,42,40,34,10,42,152,146,138,26], "i8", ALLOC_NONE, 511420);
allocate(4, "i8", ALLOC_NONE, 512444);
allocate(4, "i8", ALLOC_NONE, 512448);
allocate(4, "i8", ALLOC_NONE, 512452);
allocate(4, "i8", ALLOC_NONE, 512456);
allocate([82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125] /* R\09j\D506\A58\BF@\A */, "i8", ALLOC_NONE, 512460);
allocate([99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22] /* c|w{\F2ko\C50\01g+\F */, "i8", ALLOC_NONE, 512716);
allocate([185,121,55,158,115,243,110,60,230,230,221,120,204,205,187,241,153,155,119,227,51,55,239,198,103,110,222,141,207,220,188,27,158,185,121,55,60,115,243,110,120,230,230,221,241,204,205,187,227,153,155,119,198,51,55,239,141,103,110,222,27,207,220,188], "i8", ALLOC_NONE, 512972);
allocate(4, "i8", ALLOC_NONE, 513036);
allocate(4, "i8", ALLOC_NONE, 513040);
allocate(4, "i8", ALLOC_NONE, 513044);
allocate([24,216,48,120,192,24,96,24,35,38,70,175,5,35,140,35,198,184,145,249,126,198,63,198,232,251,205,111,19,232,135,232,135,203,19,161,76,135,38,135,184,17,109,98,169,184,218,184,1,9,2,5,8,1,4,1,79,13,158,110,66,79,33,79,54,155,108,238,173,54,216,54,166,255,81,4,89,166,162,166,210,12,185,189,222,210,111,210,245,14,247,6,251,245,243,245,121,150,242,128,239,121,249,121,111,48,222,206,95,111,161,111,145,109,63,239,252,145,126,145,82,248,164,7,170,82,85,82,96,71,192,253,39,96,157,96,188,53,101,118,137,188,202,188,155,55,43,205,172,155,86,155,142,138,1,140,4,142,2,142,163,210,91,21,113,163,182,163,12,108,24,60,96,12,48,12,123,132,246,138,255,123,241,123,53,128,106,225,181,53,212,53,29,245,58,105,232,29,116,29,224,179,221,71,83,224,167,224,215,33,179,172,246,215,123,215,194,156,153,237,94,194,47,194,46,67,92,150,109,46,184,46,75,41,150,122,98,75,49,75,254,93,225,33,163,254,223,254,87,213,174,22,130,87,65,87,21,189,42,65,168,21,84,21,119,232,238,182,159,119,193,119,55,146,110,235,165,55,220,55,229,158,215,86,123,229,179,229,159,19,35,217,140,159,70,159,240,35,253,23,211,240,231,240,74,32,148,127,106,74,53,74,218,68,169,149,158,218,79,218,88,162,176,37,250,88,125,88,201,207,143,202,6,201,3,201,41,124,82,141,85,41,164,41,10,90,20,34,80,10,40,10,177,80,127,79,225,177,254,177,160,201,93,26,105,160,186,160,107,20,214,218,127,107,177,107,133,217,23,171,92,133,46,133,189,60,103,115,129,189,206,189,93,143,186,52,210,93,105,93,16,144,32,80,128,16,64,16,244,7,245,3,243,244,247,244,203,221,139,192,22,203,11,203,62,211,124,198,237,62,248,62,5,45,10,17,40,5,20,5,103,120,206,230,31,103,129,103,228,151,213,83,115,228,183,228,39,2,78,187,37,39,156,39,65,115,130,88,50,65,25,65,139,167,11,157,44,139,22,139,167,246,83,1,81,167,166,167,125,178,250,148,207,125,233,125,149,73,55,251,220,149,110,149,216,86,173,159,142,216,71,216,251,112,235,48,139,251,203,251,238,205,193,113,35,238,159,238,124,187,248,145,199,124,237,124,102,113,204,227,23,102,133,102,221,123,167,142,166,221,83,221,23,175,46,75,184,23,92,23,71,69,142,70,2,71,1,71,158,26,33,220,132,158,66,158,202,212,137,197,30,202,15,202,45,88,90,153,117,45,180,45,191,46,99,121,145,191,198,191,7,63,14,27,56,7,28,7,173,172,71,35,1,173,142,173,90,176,180,47,234,90,117,90,131,239,27,181,108,131,54,131,51,182,102,255,133,51,204,51,99,92,198,242,63,99,145,99,2,18,4,10,16,2,8,2,170,147,73,56,57,170,146,170,113,222,226,168,175,113,217,113,200,198,141,207,14,200,7,200,25,209,50,125,200,25,100,25,73,59,146,112,114,73,57,73,217,95,175,154,134,217,67,217,242,49,249,29,195,242,239,242,227,168,219,72,75,227,171,227,91,185,182,42,226,91,113,91,136,188,13,146,52,136,26,136,154,62,41,200,164,154,82,154,38,11,76,190,45,38,152,38,50,191,100,250,141,50,200,50,176,89,125,74,233,176,250,176,233,242,207,106,27,233,131,233,15,119,30,51,120,15,60,15,213,51,183,166,230,213,115,213,128,244,29,186,116,128,58,128,190,39,97,124,153,190,194,190,205,235,135,222,38,205,19,205,52,137,104,228,189,52,208,52,72,50,144,117,122,72,61,72,255,84,227,36,171,255,219,255,122,141,244,143,247,122,245,122,144,100,61,234,244,144,122,144,95,157,190,62,194,95,97,95,32,61,64,160,29,32,128,32,104,15,208,213,103,104,189,104,26,202,52,114,208,26,104,26,174,183,65,44,25,174,130,174,180,125,117,94,201,180,234,180,84,206,168,25,154,84,77,84,147,127,59,229,236,147,118,147,34,47,68,170,13,34,136,34,100,99,200,233,7,100,141,100,241,42,255,18,219,241,227,241,115,204,230,162,191,115,209,115,18,130,36,90,144,18,72,18,64,122,128,93,58,64,29,64,8,72,16,40,64,8,32,8,195,149,155,232,86,195,43,195,236,223,197,123,51,236,151,236,219,77,171,144,150,219,75,219,161,192,95,31,97,161,190,161,141,145,7,131,28,141,14,141,61,200,122,201,245,61,244,61,151,91,51,241,204,151,102,151,0,0,0,0,0,0,0,0,207,249,131,212,54,207,27,207,43,110,86,135,69,43,172,43,118,225,236,179,151,118,197,118,130,230,25,176,100,130,50,130,214,40,177,169,254,214,127,214,27,195,54,119,216,27,108,27,181,116,119,91,193,181,238,181,175,190,67,41,17,175,134,175,106,29,212,223,119,106,181,106,80,234,160,13,186,80,93,80,69,87,138,76,18,69,9,69,243,56,251,24,203,243,235,243,48,173,96,240,157,48,192,48,239,196,195,116,43,239,155,239,63,218,126,195,229,63,252,63,85,199,170,28,146,85,73,85,162,219,89,16,121,162,178,162,234,233,201,101,3,234,143,234,101,106,202,236,15,101,137,101,186,3,105,104,185,186,210,186,47,74,94,147,101,47,188,47,192,142,157,231,78,192,39,192,222,96,161,129,190,222,95,222,28,252,56,108,224,28,112,28,253,70,231,46,187,253,211,253,77,31,154,100,82,77,41,77,146,118,57,224,228,146,114,146,117,250,234,188,143,117,201,117,6,54,12,30,48,6,24,6,138,174,9,152,36,138,18,138,178,75,121,64,249,178,242,178,230,133,209,89,99,230,191,230,14,126,28,54,112,14,56,14,31,231,62,99,248,31,124,31,98,85,196,247,55,98,149,98,212,58,181,163,238,212,119,212,168,129,77,50,41,168,154,168,150,82,49,244,196,150,98,150,249,98,239,58,155,249,195,249,197,163,151,246,102,197,51,197,37,16,74,177,53,37,148,37,89,171,178,32,242,89,121,89,132,208,21,174,84,132,42,132,114,197,228,167,183,114,213,114,57,236,114,221,213,57,228,57,76,22,152,97,90,76,45,76,94,148,188,59,202,94,101,94,120,159,240,133,231,120,253,120,56,229,112,216,221,56,224,56,140,152,5,134,20,140,10,140,209,23,191,178,198,209,99,209,165,228,87,11,65,165,174,165,226,161,217,77,67,226,175,226,97,78,194,248,47,97,153,97,179,66,123,69,241,179,246,179,33,52,66,165,21,33,132,33,156,8,37,214,148,156,74,156,30,238,60,102,240,30,120,30,67,97,134,82,34,67,17,67,199,177,147,252,118,199,59,199,252,79,229,43,179,252,215,252,4,36,8,20,32,4,16,4,81,227,162,8,178,81,89,81,153,37,47,199,188,153,94,153,109,34,218,196,79,109,169,109,13,101,26,57,104,13,52,13,250,121,233,53,131,250,207,250,223,105,163,132,182,223,91,223,126,169,252,155,215,126,229,126,36,25,72,180,61,36,144,36,59,254,118,215,197,59,236,59,171,154,75,61,49,171,150,171,206,240,129,209,62,206,31,206,17,153,34,85,136,17,68,17,143,131,3,137,12,143,6,143,78,4,156,107,74,78,37,78,183,102,115,81,209,183,230,183,235,224,203,96,11,235,139,235,60,193,120,204,253,60,240,60,129,253,31,191,124,129,62,129,148,64,53,254,212,148,106,148,247,28,243,12,235,247,251,247,185,24,111,103,161,185,222,185,19,139,38,95,152,19,76,19,44,81,88,156,125,44,176,44,211,5,187,184,214,211,107,211,231,140,211,92,107,231,187,231,110,57,220,203,87,110,165,110,196,170,149,243,110,196,55,196,3,27,6,15,24,3,12,3,86,220,172,19,138,86,69,86,68,94,136,73,26,68,13,68,127,160,254,158,223,127,225,127,169,136,79,55,33,169,158,169,42,103,84,130,77,42,168,42,187,10,107,109,177,187,214,187,193,135,159,226,70,193,35,193,83,241,166,2,162,83,81,83,220,114,165,139,174,220,87,220,11,83,22,39,88,11,44,11,157,1,39,211,156,157,78,157,108,43,216,193,71,108,173,108,49,164,98,245,149,49,196,49,116,243,232,185,135,116,205,116,246,21,241,9,227,246,255,246,70,76,140,67,10,70,5,70,172,165,69,38,9,172,138,172,137,181,15,151,60,137,30,137,20,180,40,68,160,20,80,20,225,186,223,66,91,225,163,225,22,166,44,78,176,22,88,22,58,247,116,210,205,58,232,58,105,6,210,208,111,105,185,105,9,65,18,45,72,9,36,9,112,215,224,173,167,112,221,112,182,111,113,84,217,182,226,182,208,30,189,183,206,208,103,208,237,214,199,126,59,237,147,237,204,226,133,219,46,204,23,204,66,104,132,87,42,66,21,66,152,44,45,194,180,152,90,152,164,237,85,14,73,164,170,164,40,117,80,136,93,40,160,40,92,134,184,49,218,92,109,92,248,107,237,63,147,248,199,248,134,194,17,164,68,134,34,134], "i8", ALLOC_NONE, 513048);
allocate([24,24,216,48,120,192,24,96,35,35,38,70,175,5,35,140,198,198,184,145,249,126,198,63,232,232,251,205,111,19,232,135,135,135,203,19,161,76,135,38,184,184,17,109,98,169,184,218,1,1,9,2,5,8,1,4,79,79,13,158,110,66,79,33,54,54,155,108,238,173,54,216,166,166,255,81,4,89,166,162,210,210,12,185,189,222,210,111,245,245,14,247,6,251,245,243,121,121,150,242,128,239,121,249,111,111,48,222,206,95,111,161,145,145,109,63,239,252,145,126,82,82,248,164,7,170,82,85,96,96,71,192,253,39,96,157,188,188,53,101,118,137,188,202,155,155,55,43,205,172,155,86,142,142,138,1,140,4,142,2,163,163,210,91,21,113,163,182,12,12,108,24,60,96,12,48,123,123,132,246,138,255,123,241,53,53,128,106,225,181,53,212,29,29,245,58,105,232,29,116,224,224,179,221,71,83,224,167,215,215,33,179,172,246,215,123,194,194,156,153,237,94,194,47,46,46,67,92,150,109,46,184,75,75,41,150,122,98,75,49,254,254,93,225,33,163,254,223,87,87,213,174,22,130,87,65,21,21,189,42,65,168,21,84,119,119,232,238,182,159,119,193,55,55,146,110,235,165,55,220,229,229,158,215,86,123,229,179,159,159,19,35,217,140,159,70,240,240,35,253,23,211,240,231,74,74,32,148,127,106,74,53,218,218,68,169,149,158,218,79,88,88,162,176,37,250,88,125,201,201,207,143,202,6,201,3,41,41,124,82,141,85,41,164,10,10,90,20,34,80,10,40,177,177,80,127,79,225,177,254,160,160,201,93,26,105,160,186,107,107,20,214,218,127,107,177,133,133,217,23,171,92,133,46,189,189,60,103,115,129,189,206,93,93,143,186,52,210,93,105,16,16,144,32,80,128,16,64,244,244,7,245,3,243,244,247,203,203,221,139,192,22,203,11,62,62,211,124,198,237,62,248,5,5,45,10,17,40,5,20,103,103,120,206,230,31,103,129,228,228,151,213,83,115,228,183,39,39,2,78,187,37,39,156,65,65,115,130,88,50,65,25,139,139,167,11,157,44,139,22,167,167,246,83,1,81,167,166,125,125,178,250,148,207,125,233,149,149,73,55,251,220,149,110,216,216,86,173,159,142,216,71,251,251,112,235,48,139,251,203,238,238,205,193,113,35,238,159,124,124,187,248,145,199,124,237,102,102,113,204,227,23,102,133,221,221,123,167,142,166,221,83,23,23,175,46,75,184,23,92,71,71,69,142,70,2,71,1,158,158,26,33,220,132,158,66,202,202,212,137,197,30,202,15,45,45,88,90,153,117,45,180,191,191,46,99,121,145,191,198,7,7,63,14,27,56,7,28,173,173,172,71,35,1,173,142,90,90,176,180,47,234,90,117,131,131,239,27,181,108,131,54,51,51,182,102,255,133,51,204,99,99,92,198,242,63,99,145,2,2,18,4,10,16,2,8,170,170,147,73,56,57,170,146,113,113,222,226,168,175,113,217,200,200,198,141,207,14,200,7,25,25,209,50,125,200,25,100,73,73,59,146,112,114,73,57,217,217,95,175,154,134,217,67,242,242,49,249,29,195,242,239,227,227,168,219,72,75,227,171,91,91,185,182,42,226,91,113,136,136,188,13,146,52,136,26,154,154,62,41,200,164,154,82,38,38,11,76,190,45,38,152,50,50,191,100,250,141,50,200,176,176,89,125,74,233,176,250,233,233,242,207,106,27,233,131,15,15,119,30,51,120,15,60,213,213,51,183,166,230,213,115,128,128,244,29,186,116,128,58,190,190,39,97,124,153,190,194,205,205,235,135,222,38,205,19,52,52,137,104,228,189,52,208,72,72,50,144,117,122,72,61,255,255,84,227,36,171,255,219,122,122,141,244,143,247,122,245,144,144,100,61,234,244,144,122,95,95,157,190,62,194,95,97,32,32,61,64,160,29,32,128,104,104,15,208,213,103,104,189,26,26,202,52,114,208,26,104,174,174,183,65,44,25,174,130,180,180,125,117,94,201,180,234,84,84,206,168,25,154,84,77,147,147,127,59,229,236,147,118,34,34,47,68,170,13,34,136,100,100,99,200,233,7,100,141,241,241,42,255,18,219,241,227,115,115,204,230,162,191,115,209,18,18,130,36,90,144,18,72,64,64,122,128,93,58,64,29,8,8,72,16,40,64,8,32,195,195,149,155,232,86,195,43,236,236,223,197,123,51,236,151,219,219,77,171,144,150,219,75,161,161,192,95,31,97,161,190,141,141,145,7,131,28,141,14,61,61,200,122,201,245,61,244,151,151,91,51,241,204,151,102,0,0,0,0,0,0,0,0,207,207,249,131,212,54,207,27,43,43,110,86,135,69,43,172,118,118,225,236,179,151,118,197,130,130,230,25,176,100,130,50,214,214,40,177,169,254,214,127,27,27,195,54,119,216,27,108,181,181,116,119,91,193,181,238,175,175,190,67,41,17,175,134,106,106,29,212,223,119,106,181,80,80,234,160,13,186,80,93,69,69,87,138,76,18,69,9,243,243,56,251,24,203,243,235,48,48,173,96,240,157,48,192,239,239,196,195,116,43,239,155,63,63,218,126,195,229,63,252,85,85,199,170,28,146,85,73,162,162,219,89,16,121,162,178,234,234,233,201,101,3,234,143,101,101,106,202,236,15,101,137,186,186,3,105,104,185,186,210,47,47,74,94,147,101,47,188,192,192,142,157,231,78,192,39,222,222,96,161,129,190,222,95,28,28,252,56,108,224,28,112,253,253,70,231,46,187,253,211,77,77,31,154,100,82,77,41,146,146,118,57,224,228,146,114,117,117,250,234,188,143,117,201,6,6,54,12,30,48,6,24,138,138,174,9,152,36,138,18,178,178,75,121,64,249,178,242,230,230,133,209,89,99,230,191,14,14,126,28,54,112,14,56,31,31,231,62,99,248,31,124,98,98,85,196,247,55,98,149,212,212,58,181,163,238,212,119,168,168,129,77,50,41,168,154,150,150,82,49,244,196,150,98,249,249,98,239,58,155,249,195,197,197,163,151,246,102,197,51,37,37,16,74,177,53,37,148,89,89,171,178,32,242,89,121,132,132,208,21,174,84,132,42,114,114,197,228,167,183,114,213,57,57,236,114,221,213,57,228,76,76,22,152,97,90,76,45,94,94,148,188,59,202,94,101,120,120,159,240,133,231,120,253,56,56,229,112,216,221,56,224,140,140,152,5,134,20,140,10,209,209,23,191,178,198,209,99,165,165,228,87,11,65,165,174,226,226,161,217,77,67,226,175,97,97,78,194,248,47,97,153,179,179,66,123,69,241,179,246,33,33,52,66,165,21,33,132,156,156,8,37,214,148,156,74,30,30,238,60,102,240,30,120,67,67,97,134,82,34,67,17,199,199,177,147,252,118,199,59,252,252,79,229,43,179,252,215,4,4,36,8,20,32,4,16,81,81,227,162,8,178,81,89,153,153,37,47,199,188,153,94,109,109,34,218,196,79,109,169,13,13,101,26,57,104,13,52,250,250,121,233,53,131,250,207,223,223,105,163,132,182,223,91,126,126,169,252,155,215,126,229,36,36,25,72,180,61,36,144,59,59,254,118,215,197,59,236,171,171,154,75,61,49,171,150,206,206,240,129,209,62,206,31,17,17,153,34,85,136,17,68,143,143,131,3,137,12,143,6,78,78,4,156,107,74,78,37,183,183,102,115,81,209,183,230,235,235,224,203,96,11,235,139,60,60,193,120,204,253,60,240,129,129,253,31,191,124,129,62,148,148,64,53,254,212,148,106,247,247,28,243,12,235,247,251,185,185,24,111,103,161,185,222,19,19,139,38,95,152,19,76,44,44,81,88,156,125,44,176,211,211,5,187,184,214,211,107,231,231,140,211,92,107,231,187,110,110,57,220,203,87,110,165,196,196,170,149,243,110,196,55,3,3,27,6,15,24,3,12,86,86,220,172,19,138,86,69,68,68,94,136,73,26,68,13,127,127,160,254,158,223,127,225,169,169,136,79,55,33,169,158,42,42,103,84,130,77,42,168,187,187,10,107,109,177,187,214,193,193,135,159,226,70,193,35,83,83,241,166,2,162,83,81,220,220,114,165,139,174,220,87,11,11,83,22,39,88,11,44,157,157,1,39,211,156,157,78,108,108,43,216,193,71,108,173,49,49,164,98,245,149,49,196,116,116,243,232,185,135,116,205,246,246,21,241,9,227,246,255,70,70,76,140,67,10,70,5,172,172,165,69,38,9,172,138,137,137,181,15,151,60,137,30,20,20,180,40,68,160,20,80,225,225,186,223,66,91,225,163,22,22,166,44,78,176,22,88,58,58,247,116,210,205,58,232,105,105,6,210,208,111,105,185,9,9,65,18,45,72,9,36,112,112,215,224,173,167,112,221,182,182,111,113,84,217,182,226,208,208,30,189,183,206,208,103,237,237,214,199,126,59,237,147,204,204,226,133,219,46,204,23,66,66,104,132,87,42,66,21,152,152,44,45,194,180,152,90,164,164,237,85,14,73,164,170,40,40,117,80,136,93,40,160,92,92,134,184,49,218,92,109,248,248,107,237,63,147,248,199,134,134,194,17,164,68,134,34], "i8", ALLOC_NONE, 515096);
allocate([96,24,24,216,48,120,192,24,140,35,35,38,70,175,5,35,63,198,198,184,145,249,126,198,135,232,232,251,205,111,19,232,38,135,135,203,19,161,76,135,218,184,184,17,109,98,169,184,4,1,1,9,2,5,8,1,33,79,79,13,158,110,66,79,216,54,54,155,108,238,173,54,162,166,166,255,81,4,89,166,111,210,210,12,185,189,222,210,243,245,245,14,247,6,251,245,249,121,121,150,242,128,239,121,161,111,111,48,222,206,95,111,126,145,145,109,63,239,252,145,85,82,82,248,164,7,170,82,157,96,96,71,192,253,39,96,202,188,188,53,101,118,137,188,86,155,155,55,43,205,172,155,2,142,142,138,1,140,4,142,182,163,163,210,91,21,113,163,48,12,12,108,24,60,96,12,241,123,123,132,246,138,255,123,212,53,53,128,106,225,181,53,116,29,29,245,58,105,232,29,167,224,224,179,221,71,83,224,123,215,215,33,179,172,246,215,47,194,194,156,153,237,94,194,184,46,46,67,92,150,109,46,49,75,75,41,150,122,98,75,223,254,254,93,225,33,163,254,65,87,87,213,174,22,130,87,84,21,21,189,42,65,168,21,193,119,119,232,238,182,159,119,220,55,55,146,110,235,165,55,179,229,229,158,215,86,123,229,70,159,159,19,35,217,140,159,231,240,240,35,253,23,211,240,53,74,74,32,148,127,106,74,79,218,218,68,169,149,158,218,125,88,88,162,176,37,250,88,3,201,201,207,143,202,6,201,164,41,41,124,82,141,85,41,40,10,10,90,20,34,80,10,254,177,177,80,127,79,225,177,186,160,160,201,93,26,105,160,177,107,107,20,214,218,127,107,46,133,133,217,23,171,92,133,206,189,189,60,103,115,129,189,105,93,93,143,186,52,210,93,64,16,16,144,32,80,128,16,247,244,244,7,245,3,243,244,11,203,203,221,139,192,22,203,248,62,62,211,124,198,237,62,20,5,5,45,10,17,40,5,129,103,103,120,206,230,31,103,183,228,228,151,213,83,115,228,156,39,39,2,78,187,37,39,25,65,65,115,130,88,50,65,22,139,139,167,11,157,44,139,166,167,167,246,83,1,81,167,233,125,125,178,250,148,207,125,110,149,149,73,55,251,220,149,71,216,216,86,173,159,142,216,203,251,251,112,235,48,139,251,159,238,238,205,193,113,35,238,237,124,124,187,248,145,199,124,133,102,102,113,204,227,23,102,83,221,221,123,167,142,166,221,92,23,23,175,46,75,184,23,1,71,71,69,142,70,2,71,66,158,158,26,33,220,132,158,15,202,202,212,137,197,30,202,180,45,45,88,90,153,117,45,198,191,191,46,99,121,145,191,28,7,7,63,14,27,56,7,142,173,173,172,71,35,1,173,117,90,90,176,180,47,234,90,54,131,131,239,27,181,108,131,204,51,51,182,102,255,133,51,145,99,99,92,198,242,63,99,8,2,2,18,4,10,16,2,146,170,170,147,73,56,57,170,217,113,113,222,226,168,175,113,7,200,200,198,141,207,14,200,100,25,25,209,50,125,200,25,57,73,73,59,146,112,114,73,67,217,217,95,175,154,134,217,239,242,242,49,249,29,195,242,171,227,227,168,219,72,75,227,113,91,91,185,182,42,226,91,26,136,136,188,13,146,52,136,82,154,154,62,41,200,164,154,152,38,38,11,76,190,45,38,200,50,50,191,100,250,141,50,250,176,176,89,125,74,233,176,131,233,233,242,207,106,27,233,60,15,15,119,30,51,120,15,115,213,213,51,183,166,230,213,58,128,128,244,29,186,116,128,194,190,190,39,97,124,153,190,19,205,205,235,135,222,38,205,208,52,52,137,104,228,189,52,61,72,72,50,144,117,122,72,219,255,255,84,227,36,171,255,245,122,122,141,244,143,247,122,122,144,144,100,61,234,244,144,97,95,95,157,190,62,194,95,128,32,32,61,64,160,29,32,189,104,104,15,208,213,103,104,104,26,26,202,52,114,208,26,130,174,174,183,65,44,25,174,234,180,180,125,117,94,201,180,77,84,84,206,168,25,154,84,118,147,147,127,59,229,236,147,136,34,34,47,68,170,13,34,141,100,100,99,200,233,7,100,227,241,241,42,255,18,219,241,209,115,115,204,230,162,191,115,72,18,18,130,36,90,144,18,29,64,64,122,128,93,58,64,32,8,8,72,16,40,64,8,43,195,195,149,155,232,86,195,151,236,236,223,197,123,51,236,75,219,219,77,171,144,150,219,190,161,161,192,95,31,97,161,14,141,141,145,7,131,28,141,244,61,61,200,122,201,245,61,102,151,151,91,51,241,204,151,0,0,0,0,0,0,0,0,27,207,207,249,131,212,54,207,172,43,43,110,86,135,69,43,197,118,118,225,236,179,151,118,50,130,130,230,25,176,100,130,127,214,214,40,177,169,254,214,108,27,27,195,54,119,216,27,238,181,181,116,119,91,193,181,134,175,175,190,67,41,17,175,181,106,106,29,212,223,119,106,93,80,80,234,160,13,186,80,9,69,69,87,138,76,18,69,235,243,243,56,251,24,203,243,192,48,48,173,96,240,157,48,155,239,239,196,195,116,43,239,252,63,63,218,126,195,229,63,73,85,85,199,170,28,146,85,178,162,162,219,89,16,121,162,143,234,234,233,201,101,3,234,137,101,101,106,202,236,15,101,210,186,186,3,105,104,185,186,188,47,47,74,94,147,101,47,39,192,192,142,157,231,78,192,95,222,222,96,161,129,190,222,112,28,28,252,56,108,224,28,211,253,253,70,231,46,187,253,41,77,77,31,154,100,82,77,114,146,146,118,57,224,228,146,201,117,117,250,234,188,143,117,24,6,6,54,12,30,48,6,18,138,138,174,9,152,36,138,242,178,178,75,121,64,249,178,191,230,230,133,209,89,99,230,56,14,14,126,28,54,112,14,124,31,31,231,62,99,248,31,149,98,98,85,196,247,55,98,119,212,212,58,181,163,238,212,154,168,168,129,77,50,41,168,98,150,150,82,49,244,196,150,195,249,249,98,239,58,155,249,51,197,197,163,151,246,102,197,148,37,37,16,74,177,53,37,121,89,89,171,178,32,242,89,42,132,132,208,21,174,84,132,213,114,114,197,228,167,183,114,228,57,57,236,114,221,213,57,45,76,76,22,152,97,90,76,101,94,94,148,188,59,202,94,253,120,120,159,240,133,231,120,224,56,56,229,112,216,221,56,10,140,140,152,5,134,20,140,99,209,209,23,191,178,198,209,174,165,165,228,87,11,65,165,175,226,226,161,217,77,67,226,153,97,97,78,194,248,47,97,246,179,179,66,123,69,241,179,132,33,33,52,66,165,21,33,74,156,156,8,37,214,148,156,120,30,30,238,60,102,240,30,17,67,67,97,134,82,34,67,59,199,199,177,147,252,118,199,215,252,252,79,229,43,179,252,16,4,4,36,8,20,32,4,89,81,81,227,162,8,178,81,94,153,153,37,47,199,188,153,169,109,109,34,218,196,79,109,52,13,13,101,26,57,104,13,207,250,250,121,233,53,131,250,91,223,223,105,163,132,182,223,229,126,126,169,252,155,215,126,144,36,36,25,72,180,61,36,236,59,59,254,118,215,197,59,150,171,171,154,75,61,49,171,31,206,206,240,129,209,62,206,68,17,17,153,34,85,136,17,6,143,143,131,3,137,12,143,37,78,78,4,156,107,74,78,230,183,183,102,115,81,209,183,139,235,235,224,203,96,11,235,240,60,60,193,120,204,253,60,62,129,129,253,31,191,124,129,106,148,148,64,53,254,212,148,251,247,247,28,243,12,235,247,222,185,185,24,111,103,161,185,76,19,19,139,38,95,152,19,176,44,44,81,88,156,125,44,107,211,211,5,187,184,214,211,187,231,231,140,211,92,107,231,165,110,110,57,220,203,87,110,55,196,196,170,149,243,110,196,12,3,3,27,6,15,24,3,69,86,86,220,172,19,138,86,13,68,68,94,136,73,26,68,225,127,127,160,254,158,223,127,158,169,169,136,79,55,33,169,168,42,42,103,84,130,77,42,214,187,187,10,107,109,177,187,35,193,193,135,159,226,70,193,81,83,83,241,166,2,162,83,87,220,220,114,165,139,174,220,44,11,11,83,22,39,88,11,78,157,157,1,39,211,156,157,173,108,108,43,216,193,71,108,196,49,49,164,98,245,149,49,205,116,116,243,232,185,135,116,255,246,246,21,241,9,227,246,5,70,70,76,140,67,10,70,138,172,172,165,69,38,9,172,30,137,137,181,15,151,60,137,80,20,20,180,40,68,160,20,163,225,225,186,223,66,91,225,88,22,22,166,44,78,176,22,232,58,58,247,116,210,205,58,185,105,105,6,210,208,111,105,36,9,9,65,18,45,72,9,221,112,112,215,224,173,167,112,226,182,182,111,113,84,217,182,103,208,208,30,189,183,206,208,147,237,237,214,199,126,59,237,23,204,204,226,133,219,46,204,21,66,66,104,132,87,42,66,90,152,152,44,45,194,180,152,170,164,164,237,85,14,73,164,160,40,40,117,80,136,93,40,109,92,92,134,184,49,218,92,199,248,248,107,237,63,147,248,34,134,134,194,17,164,68,134], "i8", ALLOC_NONE, 517144);
allocate([24,96,24,24,216,48,120,192,35,140,35,35,38,70,175,5,198,63,198,198,184,145,249,126,232,135,232,232,251,205,111,19,135,38,135,135,203,19,161,76,184,218,184,184,17,109,98,169,1,4,1,1,9,2,5,8,79,33,79,79,13,158,110,66,54,216,54,54,155,108,238,173,166,162,166,166,255,81,4,89,210,111,210,210,12,185,189,222,245,243,245,245,14,247,6,251,121,249,121,121,150,242,128,239,111,161,111,111,48,222,206,95,145,126,145,145,109,63,239,252,82,85,82,82,248,164,7,170,96,157,96,96,71,192,253,39,188,202,188,188,53,101,118,137,155,86,155,155,55,43,205,172,142,2,142,142,138,1,140,4,163,182,163,163,210,91,21,113,12,48,12,12,108,24,60,96,123,241,123,123,132,246,138,255,53,212,53,53,128,106,225,181,29,116,29,29,245,58,105,232,224,167,224,224,179,221,71,83,215,123,215,215,33,179,172,246,194,47,194,194,156,153,237,94,46,184,46,46,67,92,150,109,75,49,75,75,41,150,122,98,254,223,254,254,93,225,33,163,87,65,87,87,213,174,22,130,21,84,21,21,189,42,65,168,119,193,119,119,232,238,182,159,55,220,55,55,146,110,235,165,229,179,229,229,158,215,86,123,159,70,159,159,19,35,217,140,240,231,240,240,35,253,23,211,74,53,74,74,32,148,127,106,218,79,218,218,68,169,149,158,88,125,88,88,162,176,37,250,201,3,201,201,207,143,202,6,41,164,41,41,124,82,141,85,10,40,10,10,90,20,34,80,177,254,177,177,80,127,79,225,160,186,160,160,201,93,26,105,107,177,107,107,20,214,218,127,133,46,133,133,217,23,171,92,189,206,189,189,60,103,115,129,93,105,93,93,143,186,52,210,16,64,16,16,144,32,80,128,244,247,244,244,7,245,3,243,203,11,203,203,221,139,192,22,62,248,62,62,211,124,198,237,5,20,5,5,45,10,17,40,103,129,103,103,120,206,230,31,228,183,228,228,151,213,83,115,39,156,39,39,2,78,187,37,65,25,65,65,115,130,88,50,139,22,139,139,167,11,157,44,167,166,167,167,246,83,1,81,125,233,125,125,178,250,148,207,149,110,149,149,73,55,251,220,216,71,216,216,86,173,159,142,251,203,251,251,112,235,48,139,238,159,238,238,205,193,113,35,124,237,124,124,187,248,145,199,102,133,102,102,113,204,227,23,221,83,221,221,123,167,142,166,23,92,23,23,175,46,75,184,71,1,71,71,69,142,70,2,158,66,158,158,26,33,220,132,202,15,202,202,212,137,197,30,45,180,45,45,88,90,153,117,191,198,191,191,46,99,121,145,7,28,7,7,63,14,27,56,173,142,173,173,172,71,35,1,90,117,90,90,176,180,47,234,131,54,131,131,239,27,181,108,51,204,51,51,182,102,255,133,99,145,99,99,92,198,242,63,2,8,2,2,18,4,10,16,170,146,170,170,147,73,56,57,113,217,113,113,222,226,168,175,200,7,200,200,198,141,207,14,25,100,25,25,209,50,125,200,73,57,73,73,59,146,112,114,217,67,217,217,95,175,154,134,242,239,242,242,49,249,29,195,227,171,227,227,168,219,72,75,91,113,91,91,185,182,42,226,136,26,136,136,188,13,146,52,154,82,154,154,62,41,200,164,38,152,38,38,11,76,190,45,50,200,50,50,191,100,250,141,176,250,176,176,89,125,74,233,233,131,233,233,242,207,106,27,15,60,15,15,119,30,51,120,213,115,213,213,51,183,166,230,128,58,128,128,244,29,186,116,190,194,190,190,39,97,124,153,205,19,205,205,235,135,222,38,52,208,52,52,137,104,228,189,72,61,72,72,50,144,117,122,255,219,255,255,84,227,36,171,122,245,122,122,141,244,143,247,144,122,144,144,100,61,234,244,95,97,95,95,157,190,62,194,32,128,32,32,61,64,160,29,104,189,104,104,15,208,213,103,26,104,26,26,202,52,114,208,174,130,174,174,183,65,44,25,180,234,180,180,125,117,94,201,84,77,84,84,206,168,25,154,147,118,147,147,127,59,229,236,34,136,34,34,47,68,170,13,100,141,100,100,99,200,233,7,241,227,241,241,42,255,18,219,115,209,115,115,204,230,162,191,18,72,18,18,130,36,90,144,64,29,64,64,122,128,93,58,8,32,8,8,72,16,40,64,195,43,195,195,149,155,232,86,236,151,236,236,223,197,123,51,219,75,219,219,77,171,144,150,161,190,161,161,192,95,31,97,141,14,141,141,145,7,131,28,61,244,61,61,200,122,201,245,151,102,151,151,91,51,241,204,0,0,0,0,0,0,0,0,207,27,207,207,249,131,212,54,43,172,43,43,110,86,135,69,118,197,118,118,225,236,179,151,130,50,130,130,230,25,176,100,214,127,214,214,40,177,169,254,27,108,27,27,195,54,119,216,181,238,181,181,116,119,91,193,175,134,175,175,190,67,41,17,106,181,106,106,29,212,223,119,80,93,80,80,234,160,13,186,69,9,69,69,87,138,76,18,243,235,243,243,56,251,24,203,48,192,48,48,173,96,240,157,239,155,239,239,196,195,116,43,63,252,63,63,218,126,195,229,85,73,85,85,199,170,28,146,162,178,162,162,219,89,16,121,234,143,234,234,233,201,101,3,101,137,101,101,106,202,236,15,186,210,186,186,3,105,104,185,47,188,47,47,74,94,147,101,192,39,192,192,142,157,231,78,222,95,222,222,96,161,129,190,28,112,28,28,252,56,108,224,253,211,253,253,70,231,46,187,77,41,77,77,31,154,100,82,146,114,146,146,118,57,224,228,117,201,117,117,250,234,188,143,6,24,6,6,54,12,30,48,138,18,138,138,174,9,152,36,178,242,178,178,75,121,64,249,230,191,230,230,133,209,89,99,14,56,14,14,126,28,54,112,31,124,31,31,231,62,99,248,98,149,98,98,85,196,247,55,212,119,212,212,58,181,163,238,168,154,168,168,129,77,50,41,150,98,150,150,82,49,244,196,249,195,249,249,98,239,58,155,197,51,197,197,163,151,246,102,37,148,37,37,16,74,177,53,89,121,89,89,171,178,32,242,132,42,132,132,208,21,174,84,114,213,114,114,197,228,167,183,57,228,57,57,236,114,221,213,76,45,76,76,22,152,97,90,94,101,94,94,148,188,59,202,120,253,120,120,159,240,133,231,56,224,56,56,229,112,216,221,140,10,140,140,152,5,134,20,209,99,209,209,23,191,178,198,165,174,165,165,228,87,11,65,226,175,226,226,161,217,77,67,97,153,97,97,78,194,248,47,179,246,179,179,66,123,69,241,33,132,33,33,52,66,165,21,156,74,156,156,8,37,214,148,30,120,30,30,238,60,102,240,67,17,67,67,97,134,82,34,199,59,199,199,177,147,252,118,252,215,252,252,79,229,43,179,4,16,4,4,36,8,20,32,81,89,81,81,227,162,8,178,153,94,153,153,37,47,199,188,109,169,109,109,34,218,196,79,13,52,13,13,101,26,57,104,250,207,250,250,121,233,53,131,223,91,223,223,105,163,132,182,126,229,126,126,169,252,155,215,36,144,36,36,25,72,180,61,59,236,59,59,254,118,215,197,171,150,171,171,154,75,61,49,206,31,206,206,240,129,209,62,17,68,17,17,153,34,85,136,143,6,143,143,131,3,137,12,78,37,78,78,4,156,107,74,183,230,183,183,102,115,81,209,235,139,235,235,224,203,96,11,60,240,60,60,193,120,204,253,129,62,129,129,253,31,191,124,148,106,148,148,64,53,254,212,247,251,247,247,28,243,12,235,185,222,185,185,24,111,103,161,19,76,19,19,139,38,95,152,44,176,44,44,81,88,156,125,211,107,211,211,5,187,184,214,231,187,231,231,140,211,92,107,110,165,110,110,57,220,203,87,196,55,196,196,170,149,243,110,3,12,3,3,27,6,15,24,86,69,86,86,220,172,19,138,68,13,68,68,94,136,73,26,127,225,127,127,160,254,158,223,169,158,169,169,136,79,55,33,42,168,42,42,103,84,130,77,187,214,187,187,10,107,109,177,193,35,193,193,135,159,226,70,83,81,83,83,241,166,2,162,220,87,220,220,114,165,139,174,11,44,11,11,83,22,39,88,157,78,157,157,1,39,211,156,108,173,108,108,43,216,193,71,49,196,49,49,164,98,245,149,116,205,116,116,243,232,185,135,246,255,246,246,21,241,9,227,70,5,70,70,76,140,67,10,172,138,172,172,165,69,38,9,137,30,137,137,181,15,151,60,20,80,20,20,180,40,68,160,225,163,225,225,186,223,66,91,22,88,22,22,166,44,78,176,58,232,58,58,247,116,210,205,105,185,105,105,6,210,208,111,9,36,9,9,65,18,45,72,112,221,112,112,215,224,173,167,182,226,182,182,111,113,84,217,208,103,208,208,30,189,183,206,237,147,237,237,214,199,126,59,204,23,204,204,226,133,219,46,66,21,66,66,104,132,87,42,152,90,152,152,44,45,194,180,164,170,164,164,237,85,14,73,40,160,40,40,117,80,136,93,92,109,92,92,134,184,49,218,248,199,248,248,107,237,63,147,134,34,134,134,194,17,164,68], "i8", ALLOC_NONE, 519192);
allocate([192,24,96,24,24,216,48,120,5,35,140,35,35,38,70,175,126,198,63,198,198,184,145,249,19,232,135,232,232,251,205,111,76,135,38,135,135,203,19,161,169,184,218,184,184,17,109,98,8,1,4,1,1,9,2,5,66,79,33,79,79,13,158,110,173,54,216,54,54,155,108,238,89,166,162,166,166,255,81,4,222,210,111,210,210,12,185,189,251,245,243,245,245,14,247,6,239,121,249,121,121,150,242,128,95,111,161,111,111,48,222,206,252,145,126,145,145,109,63,239,170,82,85,82,82,248,164,7,39,96,157,96,96,71,192,253,137,188,202,188,188,53,101,118,172,155,86,155,155,55,43,205,4,142,2,142,142,138,1,140,113,163,182,163,163,210,91,21,96,12,48,12,12,108,24,60,255,123,241,123,123,132,246,138,181,53,212,53,53,128,106,225,232,29,116,29,29,245,58,105,83,224,167,224,224,179,221,71,246,215,123,215,215,33,179,172,94,194,47,194,194,156,153,237,109,46,184,46,46,67,92,150,98,75,49,75,75,41,150,122,163,254,223,254,254,93,225,33,130,87,65,87,87,213,174,22,168,21,84,21,21,189,42,65,159,119,193,119,119,232,238,182,165,55,220,55,55,146,110,235,123,229,179,229,229,158,215,86,140,159,70,159,159,19,35,217,211,240,231,240,240,35,253,23,106,74,53,74,74,32,148,127,158,218,79,218,218,68,169,149,250,88,125,88,88,162,176,37,6,201,3,201,201,207,143,202,85,41,164,41,41,124,82,141,80,10,40,10,10,90,20,34,225,177,254,177,177,80,127,79,105,160,186,160,160,201,93,26,127,107,177,107,107,20,214,218,92,133,46,133,133,217,23,171,129,189,206,189,189,60,103,115,210,93,105,93,93,143,186,52,128,16,64,16,16,144,32,80,243,244,247,244,244,7,245,3,22,203,11,203,203,221,139,192,237,62,248,62,62,211,124,198,40,5,20,5,5,45,10,17,31,103,129,103,103,120,206,230,115,228,183,228,228,151,213,83,37,39,156,39,39,2,78,187,50,65,25,65,65,115,130,88,44,139,22,139,139,167,11,157,81,167,166,167,167,246,83,1,207,125,233,125,125,178,250,148,220,149,110,149,149,73,55,251,142,216,71,216,216,86,173,159,139,251,203,251,251,112,235,48,35,238,159,238,238,205,193,113,199,124,237,124,124,187,248,145,23,102,133,102,102,113,204,227,166,221,83,221,221,123,167,142,184,23,92,23,23,175,46,75,2,71,1,71,71,69,142,70,132,158,66,158,158,26,33,220,30,202,15,202,202,212,137,197,117,45,180,45,45,88,90,153,145,191,198,191,191,46,99,121,56,7,28,7,7,63,14,27,1,173,142,173,173,172,71,35,234,90,117,90,90,176,180,47,108,131,54,131,131,239,27,181,133,51,204,51,51,182,102,255,63,99,145,99,99,92,198,242,16,2,8,2,2,18,4,10,57,170,146,170,170,147,73,56,175,113,217,113,113,222,226,168,14,200,7,200,200,198,141,207,200,25,100,25,25,209,50,125,114,73,57,73,73,59,146,112,134,217,67,217,217,95,175,154,195,242,239,242,242,49,249,29,75,227,171,227,227,168,219,72,226,91,113,91,91,185,182,42,52,136,26,136,136,188,13,146,164,154,82,154,154,62,41,200,45,38,152,38,38,11,76,190,141,50,200,50,50,191,100,250,233,176,250,176,176,89,125,74,27,233,131,233,233,242,207,106,120,15,60,15,15,119,30,51,230,213,115,213,213,51,183,166,116,128,58,128,128,244,29,186,153,190,194,190,190,39,97,124,38,205,19,205,205,235,135,222,189,52,208,52,52,137,104,228,122,72,61,72,72,50,144,117,171,255,219,255,255,84,227,36,247,122,245,122,122,141,244,143,244,144,122,144,144,100,61,234,194,95,97,95,95,157,190,62,29,32,128,32,32,61,64,160,103,104,189,104,104,15,208,213,208,26,104,26,26,202,52,114,25,174,130,174,174,183,65,44,201,180,234,180,180,125,117,94,154,84,77,84,84,206,168,25,236,147,118,147,147,127,59,229,13,34,136,34,34,47,68,170,7,100,141,100,100,99,200,233,219,241,227,241,241,42,255,18,191,115,209,115,115,204,230,162,144,18,72,18,18,130,36,90,58,64,29,64,64,122,128,93,64,8,32,8,8,72,16,40,86,195,43,195,195,149,155,232,51,236,151,236,236,223,197,123,150,219,75,219,219,77,171,144,97,161,190,161,161,192,95,31,28,141,14,141,141,145,7,131,245,61,244,61,61,200,122,201,204,151,102,151,151,91,51,241,0,0,0,0,0,0,0,0,54,207,27,207,207,249,131,212,69,43,172,43,43,110,86,135,151,118,197,118,118,225,236,179,100,130,50,130,130,230,25,176,254,214,127,214,214,40,177,169,216,27,108,27,27,195,54,119,193,181,238,181,181,116,119,91,17,175,134,175,175,190,67,41,119,106,181,106,106,29,212,223,186,80,93,80,80,234,160,13,18,69,9,69,69,87,138,76,203,243,235,243,243,56,251,24,157,48,192,48,48,173,96,240,43,239,155,239,239,196,195,116,229,63,252,63,63,218,126,195,146,85,73,85,85,199,170,28,121,162,178,162,162,219,89,16,3,234,143,234,234,233,201,101,15,101,137,101,101,106,202,236,185,186,210,186,186,3,105,104,101,47,188,47,47,74,94,147,78,192,39,192,192,142,157,231,190,222,95,222,222,96,161,129,224,28,112,28,28,252,56,108,187,253,211,253,253,70,231,46,82,77,41,77,77,31,154,100,228,146,114,146,146,118,57,224,143,117,201,117,117,250,234,188,48,6,24,6,6,54,12,30,36,138,18,138,138,174,9,152,249,178,242,178,178,75,121,64,99,230,191,230,230,133,209,89,112,14,56,14,14,126,28,54,248,31,124,31,31,231,62,99,55,98,149,98,98,85,196,247,238,212,119,212,212,58,181,163,41,168,154,168,168,129,77,50,196,150,98,150,150,82,49,244,155,249,195,249,249,98,239,58,102,197,51,197,197,163,151,246,53,37,148,37,37,16,74,177,242,89,121,89,89,171,178,32,84,132,42,132,132,208,21,174,183,114,213,114,114,197,228,167,213,57,228,57,57,236,114,221,90,76,45,76,76,22,152,97,202,94,101,94,94,148,188,59,231,120,253,120,120,159,240,133,221,56,224,56,56,229,112,216,20,140,10,140,140,152,5,134,198,209,99,209,209,23,191,178,65,165,174,165,165,228,87,11,67,226,175,226,226,161,217,77,47,97,153,97,97,78,194,248,241,179,246,179,179,66,123,69,21,33,132,33,33,52,66,165,148,156,74,156,156,8,37,214,240,30,120,30,30,238,60,102,34,67,17,67,67,97,134,82,118,199,59,199,199,177,147,252,179,252,215,252,252,79,229,43,32,4,16,4,4,36,8,20,178,81,89,81,81,227,162,8,188,153,94,153,153,37,47,199,79,109,169,109,109,34,218,196,104,13,52,13,13,101,26,57,131,250,207,250,250,121,233,53,182,223,91,223,223,105,163,132,215,126,229,126,126,169,252,155,61,36,144,36,36,25,72,180,197,59,236,59,59,254,118,215,49,171,150,171,171,154,75,61,62,206,31,206,206,240,129,209,136,17,68,17,17,153,34,85,12,143,6,143,143,131,3,137,74,78,37,78,78,4,156,107,209,183,230,183,183,102,115,81,11,235,139,235,235,224,203,96,253,60,240,60,60,193,120,204,124,129,62,129,129,253,31,191,212,148,106,148,148,64,53,254,235,247,251,247,247,28,243,12,161,185,222,185,185,24,111,103,152,19,76,19,19,139,38,95,125,44,176,44,44,81,88,156,214,211,107,211,211,5,187,184,107,231,187,231,231,140,211,92,87,110,165,110,110,57,220,203,110,196,55,196,196,170,149,243,24,3,12,3,3,27,6,15,138,86,69,86,86,220,172,19,26,68,13,68,68,94,136,73,223,127,225,127,127,160,254,158,33,169,158,169,169,136,79,55,77,42,168,42,42,103,84,130,177,187,214,187,187,10,107,109,70,193,35,193,193,135,159,226,162,83,81,83,83,241,166,2,174,220,87,220,220,114,165,139,88,11,44,11,11,83,22,39,156,157,78,157,157,1,39,211,71,108,173,108,108,43,216,193,149,49,196,49,49,164,98,245,135,116,205,116,116,243,232,185,227,246,255,246,246,21,241,9,10,70,5,70,70,76,140,67,9,172,138,172,172,165,69,38,60,137,30,137,137,181,15,151,160,20,80,20,20,180,40,68,91,225,163,225,225,186,223,66,176,22,88,22,22,166,44,78,205,58,232,58,58,247,116,210,111,105,185,105,105,6,210,208,72,9,36,9,9,65,18,45,167,112,221,112,112,215,224,173,217,182,226,182,182,111,113,84,206,208,103,208,208,30,189,183,59,237,147,237,237,214,199,126,46,204,23,204,204,226,133,219,42,66,21,66,66,104,132,87,180,152,90,152,152,44,45,194,73,164,170,164,164,237,85,14,93,40,160,40,40,117,80,136,218,92,109,92,92,134,184,49,147,248,199,248,248,107,237,63,68,134,34,134,134,194,17,164], "i8", ALLOC_NONE, 521240);
allocate([120,192,24,96,24,24,216,48,175,5,35,140,35,35,38,70,249,126,198,63,198,198,184,145,111,19,232,135,232,232,251,205,161,76,135,38,135,135,203,19,98,169,184,218,184,184,17,109,5,8,1,4,1,1,9,2,110,66,79,33,79,79,13,158,238,173,54,216,54,54,155,108,4,89,166,162,166,166,255,81,189,222,210,111,210,210,12,185,6,251,245,243,245,245,14,247,128,239,121,249,121,121,150,242,206,95,111,161,111,111,48,222,239,252,145,126,145,145,109,63,7,170,82,85,82,82,248,164,253,39,96,157,96,96,71,192,118,137,188,202,188,188,53,101,205,172,155,86,155,155,55,43,140,4,142,2,142,142,138,1,21,113,163,182,163,163,210,91,60,96,12,48,12,12,108,24,138,255,123,241,123,123,132,246,225,181,53,212,53,53,128,106,105,232,29,116,29,29,245,58,71,83,224,167,224,224,179,221,172,246,215,123,215,215,33,179,237,94,194,47,194,194,156,153,150,109,46,184,46,46,67,92,122,98,75,49,75,75,41,150,33,163,254,223,254,254,93,225,22,130,87,65,87,87,213,174,65,168,21,84,21,21,189,42,182,159,119,193,119,119,232,238,235,165,55,220,55,55,146,110,86,123,229,179,229,229,158,215,217,140,159,70,159,159,19,35,23,211,240,231,240,240,35,253,127,106,74,53,74,74,32,148,149,158,218,79,218,218,68,169,37,250,88,125,88,88,162,176,202,6,201,3,201,201,207,143,141,85,41,164,41,41,124,82,34,80,10,40,10,10,90,20,79,225,177,254,177,177,80,127,26,105,160,186,160,160,201,93,218,127,107,177,107,107,20,214,171,92,133,46,133,133,217,23,115,129,189,206,189,189,60,103,52,210,93,105,93,93,143,186,80,128,16,64,16,16,144,32,3,243,244,247,244,244,7,245,192,22,203,11,203,203,221,139,198,237,62,248,62,62,211,124,17,40,5,20,5,5,45,10,230,31,103,129,103,103,120,206,83,115,228,183,228,228,151,213,187,37,39,156,39,39,2,78,88,50,65,25,65,65,115,130,157,44,139,22,139,139,167,11,1,81,167,166,167,167,246,83,148,207,125,233,125,125,178,250,251,220,149,110,149,149,73,55,159,142,216,71,216,216,86,173,48,139,251,203,251,251,112,235,113,35,238,159,238,238,205,193,145,199,124,237,124,124,187,248,227,23,102,133,102,102,113,204,142,166,221,83,221,221,123,167,75,184,23,92,23,23,175,46,70,2,71,1,71,71,69,142,220,132,158,66,158,158,26,33,197,30,202,15,202,202,212,137,153,117,45,180,45,45,88,90,121,145,191,198,191,191,46,99,27,56,7,28,7,7,63,14,35,1,173,142,173,173,172,71,47,234,90,117,90,90,176,180,181,108,131,54,131,131,239,27,255,133,51,204,51,51,182,102,242,63,99,145,99,99,92,198,10,16,2,8,2,2,18,4,56,57,170,146,170,170,147,73,168,175,113,217,113,113,222,226,207,14,200,7,200,200,198,141,125,200,25,100,25,25,209,50,112,114,73,57,73,73,59,146,154,134,217,67,217,217,95,175,29,195,242,239,242,242,49,249,72,75,227,171,227,227,168,219,42,226,91,113,91,91,185,182,146,52,136,26,136,136,188,13,200,164,154,82,154,154,62,41,190,45,38,152,38,38,11,76,250,141,50,200,50,50,191,100,74,233,176,250,176,176,89,125,106,27,233,131,233,233,242,207,51,120,15,60,15,15,119,30,166,230,213,115,213,213,51,183,186,116,128,58,128,128,244,29,124,153,190,194,190,190,39,97,222,38,205,19,205,205,235,135,228,189,52,208,52,52,137,104,117,122,72,61,72,72,50,144,36,171,255,219,255,255,84,227,143,247,122,245,122,122,141,244,234,244,144,122,144,144,100,61,62,194,95,97,95,95,157,190,160,29,32,128,32,32,61,64,213,103,104,189,104,104,15,208,114,208,26,104,26,26,202,52,44,25,174,130,174,174,183,65,94,201,180,234,180,180,125,117,25,154,84,77,84,84,206,168,229,236,147,118,147,147,127,59,170,13,34,136,34,34,47,68,233,7,100,141,100,100,99,200,18,219,241,227,241,241,42,255,162,191,115,209,115,115,204,230,90,144,18,72,18,18,130,36,93,58,64,29,64,64,122,128,40,64,8,32,8,8,72,16,232,86,195,43,195,195,149,155,123,51,236,151,236,236,223,197,144,150,219,75,219,219,77,171,31,97,161,190,161,161,192,95,131,28,141,14,141,141,145,7,201,245,61,244,61,61,200,122,241,204,151,102,151,151,91,51,0,0,0,0,0,0,0,0,212,54,207,27,207,207,249,131,135,69,43,172,43,43,110,86,179,151,118,197,118,118,225,236,176,100,130,50,130,130,230,25,169,254,214,127,214,214,40,177,119,216,27,108,27,27,195,54,91,193,181,238,181,181,116,119,41,17,175,134,175,175,190,67,223,119,106,181,106,106,29,212,13,186,80,93,80,80,234,160,76,18,69,9,69,69,87,138,24,203,243,235,243,243,56,251,240,157,48,192,48,48,173,96,116,43,239,155,239,239,196,195,195,229,63,252,63,63,218,126,28,146,85,73,85,85,199,170,16,121,162,178,162,162,219,89,101,3,234,143,234,234,233,201,236,15,101,137,101,101,106,202,104,185,186,210,186,186,3,105,147,101,47,188,47,47,74,94,231,78,192,39,192,192,142,157,129,190,222,95,222,222,96,161,108,224,28,112,28,28,252,56,46,187,253,211,253,253,70,231,100,82,77,41,77,77,31,154,224,228,146,114,146,146,118,57,188,143,117,201,117,117,250,234,30,48,6,24,6,6,54,12,152,36,138,18,138,138,174,9,64,249,178,242,178,178,75,121,89,99,230,191,230,230,133,209,54,112,14,56,14,14,126,28,99,248,31,124,31,31,231,62,247,55,98,149,98,98,85,196,163,238,212,119,212,212,58,181,50,41,168,154,168,168,129,77,244,196,150,98,150,150,82,49,58,155,249,195,249,249,98,239,246,102,197,51,197,197,163,151,177,53,37,148,37,37,16,74,32,242,89,121,89,89,171,178,174,84,132,42,132,132,208,21,167,183,114,213,114,114,197,228,221,213,57,228,57,57,236,114,97,90,76,45,76,76,22,152,59,202,94,101,94,94,148,188,133,231,120,253,120,120,159,240,216,221,56,224,56,56,229,112,134,20,140,10,140,140,152,5,178,198,209,99,209,209,23,191,11,65,165,174,165,165,228,87,77,67,226,175,226,226,161,217,248,47,97,153,97,97,78,194,69,241,179,246,179,179,66,123,165,21,33,132,33,33,52,66,214,148,156,74,156,156,8,37,102,240,30,120,30,30,238,60,82,34,67,17,67,67,97,134,252,118,199,59,199,199,177,147,43,179,252,215,252,252,79,229,20,32,4,16,4,4,36,8,8,178,81,89,81,81,227,162,199,188,153,94,153,153,37,47,196,79,109,169,109,109,34,218,57,104,13,52,13,13,101,26,53,131,250,207,250,250,121,233,132,182,223,91,223,223,105,163,155,215,126,229,126,126,169,252,180,61,36,144,36,36,25,72,215,197,59,236,59,59,254,118,61,49,171,150,171,171,154,75,209,62,206,31,206,206,240,129,85,136,17,68,17,17,153,34,137,12,143,6,143,143,131,3,107,74,78,37,78,78,4,156,81,209,183,230,183,183,102,115,96,11,235,139,235,235,224,203,204,253,60,240,60,60,193,120,191,124,129,62,129,129,253,31,254,212,148,106,148,148,64,53,12,235,247,251,247,247,28,243,103,161,185,222,185,185,24,111,95,152,19,76,19,19,139,38,156,125,44,176,44,44,81,88,184,214,211,107,211,211,5,187,92,107,231,187,231,231,140,211,203,87,110,165,110,110,57,220,243,110,196,55,196,196,170,149,15,24,3,12,3,3,27,6,19,138,86,69,86,86,220,172,73,26,68,13,68,68,94,136,158,223,127,225,127,127,160,254,55,33,169,158,169,169,136,79,130,77,42,168,42,42,103,84,109,177,187,214,187,187,10,107,226,70,193,35,193,193,135,159,2,162,83,81,83,83,241,166,139,174,220,87,220,220,114,165,39,88,11,44,11,11,83,22,211,156,157,78,157,157,1,39,193,71,108,173,108,108,43,216,245,149,49,196,49,49,164,98,185,135,116,205,116,116,243,232,9,227,246,255,246,246,21,241,67,10,70,5,70,70,76,140,38,9,172,138,172,172,165,69,151,60,137,30,137,137,181,15,68,160,20,80,20,20,180,40,66,91,225,163,225,225,186,223,78,176,22,88,22,22,166,44,210,205,58,232,58,58,247,116,208,111,105,185,105,105,6,210,45,72,9,36,9,9,65,18,173,167,112,221,112,112,215,224,84,217,182,226,182,182,111,113,183,206,208,103,208,208,30,189,126,59,237,147,237,237,214,199,219,46,204,23,204,204,226,133,87,42,66,21,66,66,104,132,194,180,152,90,152,152,44,45,14,73,164,170,164,164,237,85,136,93,40,160,40,40,117,80,49,218,92,109,92,92,134,184,63,147,248,199,248,248,107,237,164,68,134,34,134,134,194,17], "i8", ALLOC_NONE, 523288);
allocate([48,120,192,24,96,24,24,216,70,175,5,35,140,35,35,38,145,249,126,198,63,198,198,184,205,111,19,232,135,232,232,251,19,161,76,135,38,135,135,203,109,98,169,184,218,184,184,17,2,5,8,1,4,1,1,9,158,110,66,79,33,79,79,13,108,238,173,54,216,54,54,155,81,4,89,166,162,166,166,255,185,189,222,210,111,210,210,12,247,6,251,245,243,245,245,14,242,128,239,121,249,121,121,150,222,206,95,111,161,111,111,48,63,239,252,145,126,145,145,109,164,7,170,82,85,82,82,248,192,253,39,96,157,96,96,71,101,118,137,188,202,188,188,53,43,205,172,155,86,155,155,55,1,140,4,142,2,142,142,138,91,21,113,163,182,163,163,210,24,60,96,12,48,12,12,108,246,138,255,123,241,123,123,132,106,225,181,53,212,53,53,128,58,105,232,29,116,29,29,245,221,71,83,224,167,224,224,179,179,172,246,215,123,215,215,33,153,237,94,194,47,194,194,156,92,150,109,46,184,46,46,67,150,122,98,75,49,75,75,41,225,33,163,254,223,254,254,93,174,22,130,87,65,87,87,213,42,65,168,21,84,21,21,189,238,182,159,119,193,119,119,232,110,235,165,55,220,55,55,146,215,86,123,229,179,229,229,158,35,217,140,159,70,159,159,19,253,23,211,240,231,240,240,35,148,127,106,74,53,74,74,32,169,149,158,218,79,218,218,68,176,37,250,88,125,88,88,162,143,202,6,201,3,201,201,207,82,141,85,41,164,41,41,124,20,34,80,10,40,10,10,90,127,79,225,177,254,177,177,80,93,26,105,160,186,160,160,201,214,218,127,107,177,107,107,20,23,171,92,133,46,133,133,217,103,115,129,189,206,189,189,60,186,52,210,93,105,93,93,143,32,80,128,16,64,16,16,144,245,3,243,244,247,244,244,7,139,192,22,203,11,203,203,221,124,198,237,62,248,62,62,211,10,17,40,5,20,5,5,45,206,230,31,103,129,103,103,120,213,83,115,228,183,228,228,151,78,187,37,39,156,39,39,2,130,88,50,65,25,65,65,115,11,157,44,139,22,139,139,167,83,1,81,167,166,167,167,246,250,148,207,125,233,125,125,178,55,251,220,149,110,149,149,73,173,159,142,216,71,216,216,86,235,48,139,251,203,251,251,112,193,113,35,238,159,238,238,205,248,145,199,124,237,124,124,187,204,227,23,102,133,102,102,113,167,142,166,221,83,221,221,123,46,75,184,23,92,23,23,175,142,70,2,71,1,71,71,69,33,220,132,158,66,158,158,26,137,197,30,202,15,202,202,212,90,153,117,45,180,45,45,88,99,121,145,191,198,191,191,46,14,27,56,7,28,7,7,63,71,35,1,173,142,173,173,172,180,47,234,90,117,90,90,176,27,181,108,131,54,131,131,239,102,255,133,51,204,51,51,182,198,242,63,99,145,99,99,92,4,10,16,2,8,2,2,18,73,56,57,170,146,170,170,147,226,168,175,113,217,113,113,222,141,207,14,200,7,200,200,198,50,125,200,25,100,25,25,209,146,112,114,73,57,73,73,59,175,154,134,217,67,217,217,95,249,29,195,242,239,242,242,49,219,72,75,227,171,227,227,168,182,42,226,91,113,91,91,185,13,146,52,136,26,136,136,188,41,200,164,154,82,154,154,62,76,190,45,38,152,38,38,11,100,250,141,50,200,50,50,191,125,74,233,176,250,176,176,89,207,106,27,233,131,233,233,242,30,51,120,15,60,15,15,119,183,166,230,213,115,213,213,51,29,186,116,128,58,128,128,244,97,124,153,190,194,190,190,39,135,222,38,205,19,205,205,235,104,228,189,52,208,52,52,137,144,117,122,72,61,72,72,50,227,36,171,255,219,255,255,84,244,143,247,122,245,122,122,141,61,234,244,144,122,144,144,100,190,62,194,95,97,95,95,157,64,160,29,32,128,32,32,61,208,213,103,104,189,104,104,15,52,114,208,26,104,26,26,202,65,44,25,174,130,174,174,183,117,94,201,180,234,180,180,125,168,25,154,84,77,84,84,206,59,229,236,147,118,147,147,127,68,170,13,34,136,34,34,47,200,233,7,100,141,100,100,99,255,18,219,241,227,241,241,42,230,162,191,115,209,115,115,204,36,90,144,18,72,18,18,130,128,93,58,64,29,64,64,122,16,40,64,8,32,8,8,72,155,232,86,195,43,195,195,149,197,123,51,236,151,236,236,223,171,144,150,219,75,219,219,77,95,31,97,161,190,161,161,192,7,131,28,141,14,141,141,145,122,201,245,61,244,61,61,200,51,241,204,151,102,151,151,91,0,0,0,0,0,0,0,0,131,212,54,207,27,207,207,249,86,135,69,43,172,43,43,110,236,179,151,118,197,118,118,225,25,176,100,130,50,130,130,230,177,169,254,214,127,214,214,40,54,119,216,27,108,27,27,195,119,91,193,181,238,181,181,116,67,41,17,175,134,175,175,190,212,223,119,106,181,106,106,29,160,13,186,80,93,80,80,234,138,76,18,69,9,69,69,87,251,24,203,243,235,243,243,56,96,240,157,48,192,48,48,173,195,116,43,239,155,239,239,196,126,195,229,63,252,63,63,218,170,28,146,85,73,85,85,199,89,16,121,162,178,162,162,219,201,101,3,234,143,234,234,233,202,236,15,101,137,101,101,106,105,104,185,186,210,186,186,3,94,147,101,47,188,47,47,74,157,231,78,192,39,192,192,142,161,129,190,222,95,222,222,96,56,108,224,28,112,28,28,252,231,46,187,253,211,253,253,70,154,100,82,77,41,77,77,31,57,224,228,146,114,146,146,118,234,188,143,117,201,117,117,250,12,30,48,6,24,6,6,54,9,152,36,138,18,138,138,174,121,64,249,178,242,178,178,75,209,89,99,230,191,230,230,133,28,54,112,14,56,14,14,126,62,99,248,31,124,31,31,231,196,247,55,98,149,98,98,85,181,163,238,212,119,212,212,58,77,50,41,168,154,168,168,129,49,244,196,150,98,150,150,82,239,58,155,249,195,249,249,98,151,246,102,197,51,197,197,163,74,177,53,37,148,37,37,16,178,32,242,89,121,89,89,171,21,174,84,132,42,132,132,208,228,167,183,114,213,114,114,197,114,221,213,57,228,57,57,236,152,97,90,76,45,76,76,22,188,59,202,94,101,94,94,148,240,133,231,120,253,120,120,159,112,216,221,56,224,56,56,229,5,134,20,140,10,140,140,152,191,178,198,209,99,209,209,23,87,11,65,165,174,165,165,228,217,77,67,226,175,226,226,161,194,248,47,97,153,97,97,78,123,69,241,179,246,179,179,66,66,165,21,33,132,33,33,52,37,214,148,156,74,156,156,8,60,102,240,30,120,30,30,238,134,82,34,67,17,67,67,97,147,252,118,199,59,199,199,177,229,43,179,252,215,252,252,79,8,20,32,4,16,4,4,36,162,8,178,81,89,81,81,227,47,199,188,153,94,153,153,37,218,196,79,109,169,109,109,34,26,57,104,13,52,13,13,101,233,53,131,250,207,250,250,121,163,132,182,223,91,223,223,105,252,155,215,126,229,126,126,169,72,180,61,36,144,36,36,25,118,215,197,59,236,59,59,254,75,61,49,171,150,171,171,154,129,209,62,206,31,206,206,240,34,85,136,17,68,17,17,153,3,137,12,143,6,143,143,131,156,107,74,78,37,78,78,4,115,81,209,183,230,183,183,102,203,96,11,235,139,235,235,224,120,204,253,60,240,60,60,193,31,191,124,129,62,129,129,253,53,254,212,148,106,148,148,64,243,12,235,247,251,247,247,28,111,103,161,185,222,185,185,24,38,95,152,19,76,19,19,139,88,156,125,44,176,44,44,81,187,184,214,211,107,211,211,5,211,92,107,231,187,231,231,140,220,203,87,110,165,110,110,57,149,243,110,196,55,196,196,170,6,15,24,3,12,3,3,27,172,19,138,86,69,86,86,220,136,73,26,68,13,68,68,94,254,158,223,127,225,127,127,160,79,55,33,169,158,169,169,136,84,130,77,42,168,42,42,103,107,109,177,187,214,187,187,10,159,226,70,193,35,193,193,135,166,2,162,83,81,83,83,241,165,139,174,220,87,220,220,114,22,39,88,11,44,11,11,83,39,211,156,157,78,157,157,1,216,193,71,108,173,108,108,43,98,245,149,49,196,49,49,164,232,185,135,116,205,116,116,243,241,9,227,246,255,246,246,21,140,67,10,70,5,70,70,76,69,38,9,172,138,172,172,165,15,151,60,137,30,137,137,181,40,68,160,20,80,20,20,180,223,66,91,225,163,225,225,186,44,78,176,22,88,22,22,166,116,210,205,58,232,58,58,247,210,208,111,105,185,105,105,6,18,45,72,9,36,9,9,65,224,173,167,112,221,112,112,215,113,84,217,182,226,182,182,111,189,183,206,208,103,208,208,30,199,126,59,237,147,237,237,214,133,219,46,204,23,204,204,226,132,87,42,66,21,66,66,104,45,194,180,152,90,152,152,44,85,14,73,164,170,164,164,237,80,136,93,40,160,40,40,117,184,49,218,92,109,92,92,134,237,63,147,248,199,248,248,107,17,164,68,134,34,134,134,194], "i8", ALLOC_NONE, 525336);
allocate([216,48,120,192,24,96,24,24,38,70,175,5,35,140,35,35,184,145,249,126,198,63,198,198,251,205,111,19,232,135,232,232,203,19,161,76,135,38,135,135,17,109,98,169,184,218,184,184,9,2,5,8,1,4,1,1,13,158,110,66,79,33,79,79,155,108,238,173,54,216,54,54,255,81,4,89,166,162,166,166,12,185,189,222,210,111,210,210,14,247,6,251,245,243,245,245,150,242,128,239,121,249,121,121,48,222,206,95,111,161,111,111,109,63,239,252,145,126,145,145,248,164,7,170,82,85,82,82,71,192,253,39,96,157,96,96,53,101,118,137,188,202,188,188,55,43,205,172,155,86,155,155,138,1,140,4,142,2,142,142,210,91,21,113,163,182,163,163,108,24,60,96,12,48,12,12,132,246,138,255,123,241,123,123,128,106,225,181,53,212,53,53,245,58,105,232,29,116,29,29,179,221,71,83,224,167,224,224,33,179,172,246,215,123,215,215,156,153,237,94,194,47,194,194,67,92,150,109,46,184,46,46,41,150,122,98,75,49,75,75,93,225,33,163,254,223,254,254,213,174,22,130,87,65,87,87,189,42,65,168,21,84,21,21,232,238,182,159,119,193,119,119,146,110,235,165,55,220,55,55,158,215,86,123,229,179,229,229,19,35,217,140,159,70,159,159,35,253,23,211,240,231,240,240,32,148,127,106,74,53,74,74,68,169,149,158,218,79,218,218,162,176,37,250,88,125,88,88,207,143,202,6,201,3,201,201,124,82,141,85,41,164,41,41,90,20,34,80,10,40,10,10,80,127,79,225,177,254,177,177,201,93,26,105,160,186,160,160,20,214,218,127,107,177,107,107,217,23,171,92,133,46,133,133,60,103,115,129,189,206,189,189,143,186,52,210,93,105,93,93,144,32,80,128,16,64,16,16,7,245,3,243,244,247,244,244,221,139,192,22,203,11,203,203,211,124,198,237,62,248,62,62,45,10,17,40,5,20,5,5,120,206,230,31,103,129,103,103,151,213,83,115,228,183,228,228,2,78,187,37,39,156,39,39,115,130,88,50,65,25,65,65,167,11,157,44,139,22,139,139,246,83,1,81,167,166,167,167,178,250,148,207,125,233,125,125,73,55,251,220,149,110,149,149,86,173,159,142,216,71,216,216,112,235,48,139,251,203,251,251,205,193,113,35,238,159,238,238,187,248,145,199,124,237,124,124,113,204,227,23,102,133,102,102,123,167,142,166,221,83,221,221,175,46,75,184,23,92,23,23,69,142,70,2,71,1,71,71,26,33,220,132,158,66,158,158,212,137,197,30,202,15,202,202,88,90,153,117,45,180,45,45,46,99,121,145,191,198,191,191,63,14,27,56,7,28,7,7,172,71,35,1,173,142,173,173,176,180,47,234,90,117,90,90,239,27,181,108,131,54,131,131,182,102,255,133,51,204,51,51,92,198,242,63,99,145,99,99,18,4,10,16,2,8,2,2,147,73,56,57,170,146,170,170,222,226,168,175,113,217,113,113,198,141,207,14,200,7,200,200,209,50,125,200,25,100,25,25,59,146,112,114,73,57,73,73,95,175,154,134,217,67,217,217,49,249,29,195,242,239,242,242,168,219,72,75,227,171,227,227,185,182,42,226,91,113,91,91,188,13,146,52,136,26,136,136,62,41,200,164,154,82,154,154,11,76,190,45,38,152,38,38,191,100,250,141,50,200,50,50,89,125,74,233,176,250,176,176,242,207,106,27,233,131,233,233,119,30,51,120,15,60,15,15,51,183,166,230,213,115,213,213,244,29,186,116,128,58,128,128,39,97,124,153,190,194,190,190,235,135,222,38,205,19,205,205,137,104,228,189,52,208,52,52,50,144,117,122,72,61,72,72,84,227,36,171,255,219,255,255,141,244,143,247,122,245,122,122,100,61,234,244,144,122,144,144,157,190,62,194,95,97,95,95,61,64,160,29,32,128,32,32,15,208,213,103,104,189,104,104,202,52,114,208,26,104,26,26,183,65,44,25,174,130,174,174,125,117,94,201,180,234,180,180,206,168,25,154,84,77,84,84,127,59,229,236,147,118,147,147,47,68,170,13,34,136,34,34,99,200,233,7,100,141,100,100,42,255,18,219,241,227,241,241,204,230,162,191,115,209,115,115,130,36,90,144,18,72,18,18,122,128,93,58,64,29,64,64,72,16,40,64,8,32,8,8,149,155,232,86,195,43,195,195,223,197,123,51,236,151,236,236,77,171,144,150,219,75,219,219,192,95,31,97,161,190,161,161,145,7,131,28,141,14,141,141,200,122,201,245,61,244,61,61,91,51,241,204,151,102,151,151,0,0,0,0,0,0,0,0,249,131,212,54,207,27,207,207,110,86,135,69,43,172,43,43,225,236,179,151,118,197,118,118,230,25,176,100,130,50,130,130,40,177,169,254,214,127,214,214,195,54,119,216,27,108,27,27,116,119,91,193,181,238,181,181,190,67,41,17,175,134,175,175,29,212,223,119,106,181,106,106,234,160,13,186,80,93,80,80,87,138,76,18,69,9,69,69,56,251,24,203,243,235,243,243,173,96,240,157,48,192,48,48,196,195,116,43,239,155,239,239,218,126,195,229,63,252,63,63,199,170,28,146,85,73,85,85,219,89,16,121,162,178,162,162,233,201,101,3,234,143,234,234,106,202,236,15,101,137,101,101,3,105,104,185,186,210,186,186,74,94,147,101,47,188,47,47,142,157,231,78,192,39,192,192,96,161,129,190,222,95,222,222,252,56,108,224,28,112,28,28,70,231,46,187,253,211,253,253,31,154,100,82,77,41,77,77,118,57,224,228,146,114,146,146,250,234,188,143,117,201,117,117,54,12,30,48,6,24,6,6,174,9,152,36,138,18,138,138,75,121,64,249,178,242,178,178,133,209,89,99,230,191,230,230,126,28,54,112,14,56,14,14,231,62,99,248,31,124,31,31,85,196,247,55,98,149,98,98,58,181,163,238,212,119,212,212,129,77,50,41,168,154,168,168,82,49,244,196,150,98,150,150,98,239,58,155,249,195,249,249,163,151,246,102,197,51,197,197,16,74,177,53,37,148,37,37,171,178,32,242,89,121,89,89,208,21,174,84,132,42,132,132,197,228,167,183,114,213,114,114,236,114,221,213,57,228,57,57,22,152,97,90,76,45,76,76,148,188,59,202,94,101,94,94,159,240,133,231,120,253,120,120,229,112,216,221,56,224,56,56,152,5,134,20,140,10,140,140,23,191,178,198,209,99,209,209,228,87,11,65,165,174,165,165,161,217,77,67,226,175,226,226,78,194,248,47,97,153,97,97,66,123,69,241,179,246,179,179,52,66,165,21,33,132,33,33,8,37,214,148,156,74,156,156,238,60,102,240,30,120,30,30,97,134,82,34,67,17,67,67,177,147,252,118,199,59,199,199,79,229,43,179,252,215,252,252,36,8,20,32,4,16,4,4,227,162,8,178,81,89,81,81,37,47,199,188,153,94,153,153,34,218,196,79,109,169,109,109,101,26,57,104,13,52,13,13,121,233,53,131,250,207,250,250,105,163,132,182,223,91,223,223,169,252,155,215,126,229,126,126,25,72,180,61,36,144,36,36,254,118,215,197,59,236,59,59,154,75,61,49,171,150,171,171,240,129,209,62,206,31,206,206,153,34,85,136,17,68,17,17,131,3,137,12,143,6,143,143,4,156,107,74,78,37,78,78,102,115,81,209,183,230,183,183,224,203,96,11,235,139,235,235,193,120,204,253,60,240,60,60,253,31,191,124,129,62,129,129,64,53,254,212,148,106,148,148,28,243,12,235,247,251,247,247,24,111,103,161,185,222,185,185,139,38,95,152,19,76,19,19,81,88,156,125,44,176,44,44,5,187,184,214,211,107,211,211,140,211,92,107,231,187,231,231,57,220,203,87,110,165,110,110,170,149,243,110,196,55,196,196,27,6,15,24,3,12,3,3,220,172,19,138,86,69,86,86,94,136,73,26,68,13,68,68,160,254,158,223,127,225,127,127,136,79,55,33,169,158,169,169,103,84,130,77,42,168,42,42,10,107,109,177,187,214,187,187,135,159,226,70,193,35,193,193,241,166,2,162,83,81,83,83,114,165,139,174,220,87,220,220,83,22,39,88,11,44,11,11,1,39,211,156,157,78,157,157,43,216,193,71,108,173,108,108,164,98,245,149,49,196,49,49,243,232,185,135,116,205,116,116,21,241,9,227,246,255,246,246,76,140,67,10,70,5,70,70,165,69,38,9,172,138,172,172,181,15,151,60,137,30,137,137,180,40,68,160,20,80,20,20,186,223,66,91,225,163,225,225,166,44,78,176,22,88,22,22,247,116,210,205,58,232,58,58,6,210,208,111,105,185,105,105,65,18,45,72,9,36,9,9,215,224,173,167,112,221,112,112,111,113,84,217,182,226,182,182,30,189,183,206,208,103,208,208,214,199,126,59,237,147,237,237,226,133,219,46,204,23,204,204,104,132,87,42,66,21,66,66,44,45,194,180,152,90,152,152,237,85,14,73,164,170,164,164,117,80,136,93,40,160,40,40,134,184,49,218,92,109,92,92,107,237,63,147,248,199,248,248,194,17,164,68,134,34,134,134], "i8", ALLOC_NONE, 527384);
HEAP32[((413312)>>2)]=((476896)|0);
HEAP32[((413316)>>2)]=((474148)|0);
HEAP32[((413320)>>2)]=((472272)|0);
HEAP32[((413388)>>2)]=((470772)|0);
HEAP32[((413392)>>2)]=((469308)|0);
HEAP32[((413396)>>2)]=((467728)|0);
HEAP32[((413464)>>2)]=((465648)|0);
HEAP32[((413468)>>2)]=((490800)|0);
HEAP32[((413472)>>2)]=((489924)|0);
HEAP32[((413540)>>2)]=((488224)|0);
HEAP32[((413544)>>2)]=((487528)|0);
HEAP32[((413548)>>2)]=((486564)|0);
HEAP32[((413616)>>2)]=((485768)|0);
HEAP32[((413620)>>2)]=((484888)|0);
HEAP32[((413624)>>2)]=((484084)|0);
HEAP32[((413692)>>2)]=((483248)|0);
HEAP32[((413696)>>2)]=((482488)|0);
HEAP32[((413700)>>2)]=((484084)|0);
HEAP32[((413844)>>2)]=((476896)|0);
HEAP32[((413848)>>2)]=((474148)|0);
HEAP32[((413852)>>2)]=((472272)|0);
HEAP32[((413904)>>2)]=((470772)|0);
HEAP32[((413908)>>2)]=((469308)|0);
HEAP32[((413912)>>2)]=((467728)|0);
HEAP32[((413964)>>2)]=((465648)|0);
HEAP32[((413968)>>2)]=((490800)|0);
HEAP32[((413972)>>2)]=((489924)|0);
HEAP32[((414024)>>2)]=((488224)|0);
HEAP32[((414028)>>2)]=((487528)|0);
HEAP32[((414032)>>2)]=((486564)|0);
HEAP32[((414084)>>2)]=((485768)|0);
HEAP32[((414088)>>2)]=((484888)|0);
HEAP32[((414092)>>2)]=((484084)|0);
HEAP32[((414144)>>2)]=((483248)|0);
HEAP32[((414148)>>2)]=((482488)|0);
HEAP32[((414152)>>2)]=((484084)|0);
HEAP32[((414264)>>2)]=((476896)|0);
HEAP32[((414268)>>2)]=((474148)|0);
HEAP32[((414272)>>2)]=((472272)|0);
HEAP32[((414308)>>2)]=((470772)|0);
HEAP32[((414312)>>2)]=((469308)|0);
HEAP32[((414316)>>2)]=((467728)|0);
HEAP32[((414352)>>2)]=((465648)|0);
HEAP32[((414356)>>2)]=((490800)|0);
HEAP32[((414360)>>2)]=((489924)|0);
HEAP32[((414396)>>2)]=((488224)|0);
HEAP32[((414400)>>2)]=((487528)|0);
HEAP32[((414404)>>2)]=((486564)|0);
HEAP32[((414440)>>2)]=((485768)|0);
HEAP32[((414444)>>2)]=((484888)|0);
HEAP32[((414448)>>2)]=((484084)|0);
HEAP32[((414484)>>2)]=((483248)|0);
HEAP32[((414488)>>2)]=((482488)|0);
HEAP32[((414492)>>2)]=((484084)|0);
HEAP32[((414572)>>2)]=((476896)|0);
HEAP32[((414576)>>2)]=((474148)|0);
HEAP32[((414580)>>2)]=((472272)|0);
HEAP32[((414612)>>2)]=((470772)|0);
HEAP32[((414616)>>2)]=((469308)|0);
HEAP32[((414620)>>2)]=((467728)|0);
HEAP32[((414652)>>2)]=((465648)|0);
HEAP32[((414656)>>2)]=((490800)|0);
HEAP32[((414660)>>2)]=((489924)|0);
HEAP32[((414692)>>2)]=((488224)|0);
HEAP32[((414696)>>2)]=((487528)|0);
HEAP32[((414700)>>2)]=((486564)|0);
HEAP32[((414732)>>2)]=((485768)|0);
HEAP32[((414736)>>2)]=((484888)|0);
HEAP32[((414740)>>2)]=((484084)|0);
HEAP32[((414772)>>2)]=((483248)|0);
HEAP32[((414776)>>2)]=((482488)|0);
HEAP32[((414780)>>2)]=((484084)|0);
HEAP32[((416872)>>2)]=((472772)|0);
HEAP32[((416880)>>2)]=((471352)|0);
HEAP32[((416888)>>2)]=((470044)|0);
HEAP32[((416896)>>2)]=((468312)|0);
HEAP32[((438676)>>2)]=((472076)|0);
HEAP32[((438680)>>2)]=((471568)|0);
HEAP32[((438684)>>2)]=((471400)|0);
HEAP32[((438740)>>2)]=((476080)|0);
HEAP32[((438748)>>2)]=((475820)|0);
HEAP32[((438756)>>2)]=((475524)|0);
HEAP32[((438764)>>2)]=((475360)|0);
HEAP32[((438780)>>2)]=((475140)|0);
HEAP32[((438784)>>2)]=((474840)|0);
HEAP32[((438788)>>2)]=((474548)|0);
HEAP32[((438796)>>2)]=((475384)|0);
HEAP32[((438804)>>2)]=((472924)|0);
HEAP32[((438812)>>2)]=((471440)|0);
HEAP32[((438820)>>2)]=((470152)|0);
HEAP32[((438836)>>2)]=((468452)|0);
HEAP32[((438840)>>2)]=((466760)|0);
HEAP32[((438848)>>2)]=((465128)|0);
HEAP32[((438856)>>2)]=((490428)|0);
HEAP32[((438864)>>2)]=((488816)|0);
HEAP32[((438872)>>2)]=((487876)|0);
HEAP32[((438888)>>2)]=((487148)|0);
HEAP32[((438892)>>2)]=((486268)|0);
HEAP32[((440628)>>2)]=((484968)|0);
HEAP32[((440724)>>2)]=((486412)|0);
HEAP32[((440732)>>2)]=((485552)|0);
HEAP32[((440740)>>2)]=((484604)|0);
HEAP32[((440756)>>2)]=((466900)|0);
HEAP32[((440772)>>2)]=((474816)|0);
HEAP32[((440780)>>2)]=((484416)|0);
HEAP32[((440784)>>2)]=((483420)|0);
HEAP32[((440792)>>2)]=((477716)|0);
HEAP32[((440796)>>2)]=((474848)|0);
HEAP32[((440804)>>2)]=((477832)|0);
HEAP32[((440808)>>2)]=((474872)|0);
HEAP32[((440816)>>2)]=((484440)|0);
HEAP32[((440824)>>2)]=((490336)|0);
HEAP32[((440828)>>2)]=((488692)|0);
HEAP32[((440832)>>2)]=((487820)|0);
HEAP32[((440836)>>2)]=((487048)|0);
HEAP32[((440840)>>2)]=((486176)|0);
HEAP32[((440848)>>2)]=((483848)|0);
HEAP32[((440852)>>2)]=((478296)|0);
HEAP32[((440860)>>2)]=((485304)|0);
HEAP32[((440864)>>2)]=((478976)|0);
HEAP32[((440872)>>2)]=((485388)|0);
HEAP32[((455552)>>2)]=((474340)|0);
HEAP32[((455560)>>2)]=((472408)|0);
HEAP32[((455568)>>2)]=((470932)|0);
HEAP32[((455576)>>2)]=((469516)|0);
HEAP32[((455584)>>2)]=((467892)|0);
HEAP32[((455604)>>2)]=((471124)|0);
HEAP32[((455612)>>2)]=((471060)|0);
HEAP32[((455620)>>2)]=((470712)|0);
HEAP32[((455628)>>2)]=((470620)|0);
HEAP32[((455636)>>2)]=((470532)|0);
HEAP32[((455644)>>2)]=((470424)|0);
HEAP32[((455652)>>2)]=((470360)|0);
HEAP32[((455660)>>2)]=((470280)|0);
HEAP32[((455668)>>2)]=((470132)|0);
HEAP32[((455676)>>2)]=((469980)|0);
HEAP32[((455684)>>2)]=((469748)|0);
HEAP32[((455692)>>2)]=((469668)|0);
HEAP32[((457332)>>2)]=((482644)|0);
HEAP32[((457336)>>2)]=((481928)|0);
HEAP32[((457340)>>2)]=((481448)|0);
HEAP32[((457348)>>2)]=((484596)|0);
HEAP32[((457352)>>2)]=((485264)|0);
HEAP32[((457360)>>2)]=((485284)|0);
HEAP32[((457364)>>2)]=((485264)|0);
HEAP32[((457408)>>2)]=((472992)|0);
HEAP32[((457412)>>2)]=((472836)|0);
HEAP32[((457420)>>2)]=((465684)|0);
HEAP32[((457432)>>2)]=((490864)|0);
HEAP32[((457436)>>2)]=((489972)|0);
HEAP32[((457440)>>2)]=((488276)|0);
HEAP32[((457444)>>2)]=((487596)|0);
HEAP32[((457448)>>2)]=((486620)|0);
HEAP32[((457452)>>2)]=((485804)|0);
HEAP32[((457456)>>2)]=((484972)|0);
HEAP32[((457468)>>2)]=((484224)|0);
HEAP32[((457472)>>2)]=((483300)|0);
HEAP32[((457476)>>2)]=((482656)|0);
HEAP32[((457480)>>2)]=((481952)|0);
HEAP32[((457484)>>2)]=((481484)|0);
HEAP32[((457488)>>2)]=((480308)|0);
HEAP32[((457492)>>2)]=((480048)|0);
HEAP32[((457504)>>2)]=((479724)|0);
HEAP32[((457508)>>2)]=((479136)|0);
HEAP32[((457512)>>2)]=((478792)|0);
HEAP32[((457516)>>2)]=((478496)|0);
HEAP32[((457520)>>2)]=((478160)|0);
HEAP32[((457524)>>2)]=((477868)|0);
HEAP32[((457528)>>2)]=((477632)|0);
HEAP32[((457540)>>2)]=((477320)|0);
HEAP32[((457544)>>2)]=((476568)|0);
HEAP32[((457548)>>2)]=((476376)|0);
HEAP32[((457552)>>2)]=((476136)|0);
HEAP32[((457556)>>2)]=((475856)|0);
HEAP32[((457560)>>2)]=((475572)|0);
HEAP32[((457564)>>2)]=((475424)|0);
HEAP32[((457576)>>2)]=((475196)|0);
HEAP32[((457580)>>2)]=((474920)|0);
HEAP32[((457584)>>2)]=((474608)|0);
HEAP32[((457588)>>2)]=((474356)|0);
HEAP32[((457592)>>2)]=((473776)|0);
HEAP32[((457596)>>2)]=((473548)|0);
HEAP32[((457600)>>2)]=((473452)|0);
HEAP32[((457612)>>2)]=((473280)|0);
HEAP32[((457616)>>2)]=((473120)|0);
HEAP32[((457620)>>2)]=((472948)|0);
HEAP32[((457624)>>2)]=((472792)|0);
HEAP32[((457628)>>2)]=((472640)|0);
HEAP32[((457632)>>2)]=((472480)|0);
HEAP32[((457636)>>2)]=((472436)|0);
HEAP32[((457648)>>2)]=((472080)|0);
HEAP32[((457652)>>2)]=((471952)|0);
HEAP32[((457656)>>2)]=((471808)|0);
HEAP32[((457660)>>2)]=((471716)|0);
HEAP32[((457664)>>2)]=((471588)|0);
HEAP32[((457668)>>2)]=((471464)|0);
HEAP32[((457672)>>2)]=((471372)|0);
HEAP32[((457684)>>2)]=((471180)|0);
HEAP32[((457688)>>2)]=((471064)|0);
HEAP32[((457692)>>2)]=((470988)|0);
HEAP32[((457696)>>2)]=((470632)|0);
HEAP32[((457700)>>2)]=((470552)|0);
HEAP32[((457704)>>2)]=((470452)|0);
HEAP32[((457708)>>2)]=((470408)|0);
HEAP32[((457720)>>2)]=((470292)|0);
HEAP32[((457724)>>2)]=((470176)|0);
HEAP32[((457728)>>2)]=((470064)|0);
HEAP32[((457732)>>2)]=((469912)|0);
HEAP32[((457736)>>2)]=((469680)|0);
HEAP32[((457740)>>2)]=((469588)|0);
HEAP32[((457744)>>2)]=((469168)|0);
HEAP32[((457756)>>2)]=((469016)|0);
HEAP32[((457760)>>2)]=((468864)|0);
HEAP32[((457764)>>2)]=((468712)|0);
HEAP32[((457768)>>2)]=((468604)|0);
HEAP32[((457772)>>2)]=((468464)|0);
HEAP32[((457776)>>2)]=((468336)|0);
HEAP32[((457780)>>2)]=((468224)|0);
HEAP32[((457792)>>2)]=((468068)|0);
HEAP32[((457796)>>2)]=((467924)|0);
HEAP32[((457800)>>2)]=((467532)|0);
HEAP32[((457804)>>2)]=((467400)|0);
HEAP32[((457808)>>2)]=((467224)|0);
HEAP32[((457812)>>2)]=((467028)|0);
HEAP32[((457816)>>2)]=((466956)|0);
HEAP32[((457828)>>2)]=((466768)|0);
HEAP32[((457832)>>2)]=((466588)|0);
HEAP32[((457836)>>2)]=((466376)|0);
HEAP32[((457840)>>2)]=((466048)|0);
HEAP32[((457844)>>2)]=((465860)|0);
HEAP32[((457848)>>2)]=((465444)|0);
HEAP32[((458232)>>2)]=((465684)|0);
HEAP32[((458236)>>2)]=((465180)|0);
HEAP32[((458240)>>2)]=((465684)|0);
HEAP32[((458244)>>2)]=((465152)|0);
HEAP32[((458248)>>2)]=((465684)|0);
HEAP32[((458252)>>2)]=((465100)|0);
HEAP32[((458256)>>2)]=((484972)|0);
HEAP32[((458260)>>2)]=((465036)|0);
HEAP32[((458264)>>2)]=((484972)|0);
HEAP32[((458268)>>2)]=((491072)|0);
HEAP32[((458272)>>2)]=((480048)|0);
HEAP32[((458276)>>2)]=((491020)|0);
HEAP32[((458280)>>2)]=((480048)|0);
HEAP32[((458284)>>2)]=((490764)|0);
HEAP32[((458288)>>2)]=((480048)|0);
HEAP32[((458292)>>2)]=((490752)|0);
HEAP32[((458296)>>2)]=((477632)|0);
HEAP32[((458300)>>2)]=((490688)|0);
HEAP32[((458304)>>2)]=((477632)|0);
HEAP32[((458308)>>2)]=((490620)|0);
HEAP32[((458312)>>2)]=((475424)|0);
HEAP32[((458316)>>2)]=((490500)|0);
HEAP32[((458320)>>2)]=((475424)|0);
HEAP32[((458324)>>2)]=((490464)|0);
HEAP32[((458328)>>2)]=((473452)|0);
HEAP32[((458332)>>2)]=((490392)|0);
HEAP32[((458336)>>2)]=((472436)|0);
HEAP32[((458340)>>2)]=((490360)|0);
HEAP32[((458344)>>2)]=((471372)|0);
HEAP32[((458348)>>2)]=((490276)|0);
HEAP32[((458352)>>2)]=((470408)|0);
HEAP32[((458356)>>2)]=((490184)|0);
HEAP32[((458360)>>2)]=((469168)|0);
HEAP32[((458364)>>2)]=((489864)|0);
HEAP32[((458368)>>2)]=((468224)|0);
HEAP32[((458372)>>2)]=((489780)|0);
HEAP32[((458376)>>2)]=((466956)|0);
HEAP32[((458380)>>2)]=((489688)|0);
HEAP32[((459748)>>2)]=((490384)|0);
HEAP32[((464016)>>2)]=((477020)|0);
HEAP32[((464024)>>2)]=((474192)|0);
HEAP32[((464032)>>2)]=((472320)|0);
HEAP32[((464040)>>2)]=((470820)|0);
HEAP32[((464056)>>2)]=((469412)|0);
HEAP32[((464064)>>2)]=((467812)|0);
HEAP32[((464072)>>2)]=((465712)|0);
HEAP32[((464080)>>2)]=((490924)|0);
HEAP32[((464096)>>2)]=((483364)|0);
HEAP32[((464104)>>2)]=((482720)|0);
HEAP32[((464112)>>2)]=((482048)|0);
HEAP32[((464120)>>2)]=((481552)|0);
HEAP32[((464856)>>2)]=((489768)|0);
HEAP32[((464860)>>2)]=((488108)|0);
HEAP32[((464868)>>2)]=((477516)|0);
HEAP32[((464892)>>2)]=((481268)|0);
HEAP32[((491664)>>2)]=((468332)|0);
HEAP32[((491668)>>2)]=((438676)|0);
HEAP32[((491672)>>2)]=((483832)|0);
HEAP32[((491676)>>2)]=((478260)|0);
HEAP32[((491680)>>2)]=((475348)|0);
HEAP32[((491684)>>2)]=((472904)|0);
HEAP32[((491688)>>2)]=((471396)|0);
HEAP32[((491724)>>2)]=((483836)|0);
HEAP32[((491728)>>2)]=((457332)|0);
HEAP32[((491732)>>2)]=((488812)|0);
HEAP32[((491736)>>2)]=((480588)|0);
HEAP32[((491740)>>2)]=((476932)|0);
HEAP32[((491744)>>2)]=((474180)|0);
HEAP32[((491748)>>2)]=((488812)|0);
HEAP32[((491784)>>2)]=((484480)|0);
HEAP32[((491788)>>2)]=((457348)|0);
HEAP32[((491792)>>2)]=((488872)|0);
HEAP32[((491796)>>2)]=((480628)|0);
HEAP32[((491800)>>2)]=((476984)|0);
HEAP32[((491804)>>2)]=((474184)|0);
HEAP32[((491808)>>2)]=((488872)|0);
HEAP32[((491844)>>2)]=((472304)|0);
HEAP32[((491848)>>2)]=((457360)|0);
HEAP32[((491852)>>2)]=((488872)|0);
HEAP32[((491856)>>2)]=((480628)|0);
HEAP32[((491860)>>2)]=((470800)|0);
HEAP32[((491864)>>2)]=((476984)|0);
HEAP32[((491868)>>2)]=((488872)|0);
HEAP32[((491904)>>2)]=((485164)|0);
HEAP32[((491908)>>2)]=((457408)|0);
HEAP32[((491912)>>2)]=((489296)|0);
HEAP32[((491916)>>2)]=((481036)|0);
HEAP32[((491920)>>2)]=((477012)|0);
HEAP32[((491924)>>2)]=((474188)|0);
HEAP32[((491928)>>2)]=((489296)|0);
HEAP32[((492096)>>2)]=((464920)|0);
HEAP32[((492136)>>2)]=((477700)|0);
HEAP32[((492176)>>2)]=((482256)|0);
HEAP32[((492180)>>2)]=((464740)|0);
HEAP32[((492188)>>2)]=((440772)|0);
HEAP32[((492216)>>2)]=((465164)|0);
HEAP32[((492256)>>2)]=((465376)|0);
HEAP32[((492260)>>2)]=((412916)|0);
HEAP32[((492268)>>2)]=((440780)|0);
HEAP32[((492296)>>2)]=((482424)|0);
HEAP32[((492300)>>2)]=((412936)|0);
HEAP32[((492308)>>2)]=((440792)|0);
HEAP32[((492336)>>2)]=((482744)|0);
HEAP32[((492340)>>2)]=((464700)|0);
HEAP32[((492348)>>2)]=((440804)|0);
HEAP32[((492376)>>2)]=((466040)|0);
HEAP32[((492380)>>2)]=((464720)|0);
HEAP32[((492388)>>2)]=((440816)|0);
HEAP32[((492416)>>2)]=((466580)|0);
HEAP32[((492420)>>2)]=((464648)|0);
HEAP32[((492428)>>2)]=((440824)|0);
HEAP32[((492456)>>2)]=((468440)|0);
HEAP32[((492460)>>2)]=((464664)|0);
HEAP32[((492468)>>2)]=((440848)|0);
HEAP32[((492496)>>2)]=((471552)|0);
HEAP32[((492500)>>2)]=((464680)|0);
HEAP32[((492508)>>2)]=((440860)|0);
HEAP32[((492536)>>2)]=((471580)|0);
HEAP32[((492540)>>2)]=((464760)|0);
HEAP32[((492548)>>2)]=((440872)|0);
HEAP32[((492576)>>2)]=((489312)|0);
HEAP32[((492616)>>2)]=((485268)|0);
HEAP32[((492656)>>2)]=((481084)|0);
HEAP32[((493132)>>2)]=((482204)|0);
HEAP32[((493176)>>2)]=((465092)|0);
HEAP32[((493220)>>2)]=((486300)|0);
HEAP32[((493228)>>2)]=((440724)|0);
HEAP32[((493264)>>2)]=((478016)|0);
HEAP32[((493308)>>2)]=((482960)|0);
HEAP32[((493352)>>2)]=((466932)|0);
HEAP32[((493356)>>2)]=((459748)|0);
HEAP32[((493396)>>2)]=((467128)|0);
HEAP32[((493404)>>2)]=((416872)|0);
HEAP32[((493440)>>2)]=((469796)|0);
HEAP32[((493448)>>2)]=((440756)|0);
HEAP32[((493484)>>2)]=((473104)|0);
HEAP32[((493528)>>2)]=((485296)|0);
HEAP32[((493572)>>2)]=((481104)|0);
HEAP32[((493580)>>2)]=((464016)|0);
HEAP32[((493616)>>2)]=((489408)|0);
HEAP32[((493624)>>2)]=((464056)|0);
HEAP32[((493660)>>2)]=((485612)|0);
HEAP32[((493668)>>2)]=((464096)|0);
HEAP32[((493704)>>2)]=((485644)|0);
HEAP32[((493748)>>2)]=((485916)|0);
HEAP32[((493792)>>2)]=((478488)|0);
HEAP32[((493796)>>2)]=((438836)|0);
HEAP32[((493800)>>2)]=((438796)|0);
HEAP32[((493836)>>2)]=((484344)|0);
HEAP32[((493840)>>2)]=((438888)|0);
HEAP32[((493844)>>2)]=((438848)|0);
HEAP32[((493880)>>2)]=((469676)|0);
HEAP32[((493884)>>2)]=((438780)|0);
HEAP32[((493888)>>2)]=((438740)|0);
HEAP32[((495944)>>2)]=(148);
HEAP32[((495948)>>2)]=(304);
HEAP32[((495952)>>2)]=(42);
HEAP32[((495968)>>2)]=(148);
HEAP32[((495972)>>2)]=(294);
HEAP32[((495976)>>2)]=(182);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([2,0,0,0], "i8", ALLOC_STATIC);
HEAP32[((496028)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((496032)>>2)]=((495984)|0);
HEAP32[((496036)>>2)]=__ZTISt9exception;
HEAP32[((496040)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((496044)>>2)]=((496000)|0);
__ZNSt9bad_allocC1Ev = 228;
__ZNSt9bad_allocD1Ev = 148;
__ZNSt20bad_array_new_lengthC1Ev = 172;
__ZNSt20bad_array_new_lengthD1Ev = (148);
__ZNSt20bad_array_new_lengthD2Ev = (148);
_err = 96;
_errx = 310;
_warn1 = 370;
_warnx = 108;
_verr = 142;
_verrx = 208;
_vwarn = 128;
_vwarnx = 60;
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
      var mode = HEAP32[((varargs)>>2)];
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = flagAlternative ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*') || nullString;
              var argLength = _strlen(arg);
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              for (var i = 0; i < argLength; i++) {
                ret.push(HEAPU8[((arg++)|0)]);
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
  function _umask(newMask) {
      // mode_t umask(mode_t cmask);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/umask.html
      // NOTE: This value isn't actually used for anything.
      if (_umask.cmask === undefined) _umask.cmask = 0x1FF;  // S_IRWXU | S_IRWXG | S_IRWXO.
      var oldMask = _umask.cmask;
      _umask.cmask = newMask;
      return oldMask;
    }
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;
var __msgops_callback_policy; // stub for __msgops_callback_policy
var __msgops_callback_create_privkey; // stub for __msgops_callback_create_privkey
var __msgops_callback_is_logged_in; // stub for __msgops_callback_is_logged_in
var __msgops_callback_inject_message; // stub for __msgops_callback_inject_message
var __msgops_callback_update_context_list; // stub for __msgops_callback_update_context_list
var __msgops_callback_new_fingerprint; // stub for __msgops_callback_new_fingerprint
var __msgops_callback_write_fingerprints; // stub for __msgops_callback_write_fingerprints
var __msgops_callback_gone_secure; // stub for __msgops_callback_gone_secure
var __msgops_callback_gone_insecure; // stub for __msgops_callback_gone_insecure
var __msgops_callback_still_secure; // stub for __msgops_callback_still_secure
var __msgops_callback_max_message_size; // stub for __msgops_callback_max_message_size
var __msgops_callback_received_symkey; // stub for __msgops_callback_received_symkey
var __msgops_callback_smp_request; // stub for __msgops_callback_smp_request
var __msgops_callback_smp_complete; // stub for __msgops_callback_smp_complete
var __msgops_callback_smp_failed; // stub for __msgops_callback_smp_failed
var __msgops_callback_smp_error; // stub for __msgops_callback_smp_error
var __msgops_callback_smp_aborted; // stub for __msgops_callback_smp_aborted
var __msgops_callback_handle_msg_event; // stub for __msgops_callback_handle_msg_event
var __msgops_callback_create_instag; // stub for __msgops_callback_create_instag
var __msgops_callback_convert_msg; // stub for __msgops_callback_convert_msg
var __msgops_callback_convert_free; // stub for __msgops_callback_convert_free
var __msgops_callback_timer_control; // stub for __msgops_callback_timer_control
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }
  var ___stat_struct_layout={__size__:68,st_dev:0,st_ino:4,st_mode:8,st_nlink:12,st_uid:16,st_gid:20,st_rdev:24,st_size:28,st_atime:32,st_spare1:36,st_mtime:40,st_spare2:44,st_ctime:48,st_spare3:52,st_blksize:56,st_blocks:60,st_spare4:64};function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
      if (obj === null || !FS.forceLoadFile(obj)) return -1;
      var offsets = ___stat_struct_layout;
      // Constants.
      HEAP32[(((buf)+(offsets.st_nlink))>>2)]=1
      HEAP32[(((buf)+(offsets.st_uid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_gid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_blksize))>>2)]=4096
      // Variables.
      HEAP32[(((buf)+(offsets.st_ino))>>2)]=obj.inodeNumber
      var time = Math.floor(obj.timestamp / 1000);
      if (offsets.st_atime === undefined) {
        offsets.st_atime = offsets.st_atim.tv_sec;
        offsets.st_mtime = offsets.st_mtim.tv_sec;
        offsets.st_ctime = offsets.st_ctim.tv_sec;
        var nanosec = (obj.timestamp % 1000) * 1000;
        HEAP32[(((buf)+(offsets.st_atim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_mtim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_ctim.tv_nsec))>>2)]=nanosec
      }
      HEAP32[(((buf)+(offsets.st_atime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_mtime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_ctime))>>2)]=time
      var mode = 0;
      var size = 0;
      var blocks = 0;
      var dev = 0;
      var rdev = 0;
      if (obj.isDevice) {
        //  Device numbers reuse inode numbers.
        dev = rdev = obj.inodeNumber;
        size = blocks = 0;
        mode = 0x2000;  // S_IFCHR.
      } else {
        dev = 1;
        rdev = 0;
        // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
        //       but this is not required by the standard.
        if (obj.isFolder) {
          size = 4096;
          blocks = 1;
          mode = 0x4000;  // S_IFDIR.
        } else {
          var data = obj.contents || obj.link;
          size = data.length;
          blocks = Math.ceil(data.length / 4096);
          mode = obj.link === undefined ? 0x8000 : 0xA000;  // S_IFREG, S_IFLNK.
        }
      }
      HEAP32[(((buf)+(offsets.st_dev))>>2)]=dev;
      HEAP32[(((buf)+(offsets.st_rdev))>>2)]=rdev;
      HEAP32[(((buf)+(offsets.st_size))>>2)]=size
      HEAP32[(((buf)+(offsets.st_blocks))>>2)]=blocks
      if (obj.read) mode |= 0x16D;  // S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH.
      if (obj.write) mode |= 0x92;  // S_IWUSR | S_IWGRP | S_IWOTH.
      HEAP32[(((buf)+(offsets.st_mode))>>2)]=mode
      return 0;
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else {
        var pathArray = intArrayFromString(FS.streams[fildes].path);
        return _stat(allocate(pathArray, 'i8', ALLOC_STACK), buf);
      }
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      _memcpy(newStr, ptr, len);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))|0)]=byte_
      }
      HEAP8[(((s)+(i))|0)]=0
      return s;
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;
  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }
  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }
  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }
  function _strcpy(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      do {
        HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
        i = (i+1)|0;
      } while ((HEAP8[(((psrc)+(i-1))|0)])|0 != 0);
      return pdest|0;
    }
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        // TODO: Support strings like "%5c" etc.
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'c') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          fields++;
          next = get();
          HEAP8[(argPtr)]=next
          formatIndex += 2;
          continue;
        }
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' || type == 'E') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   (type === 'x' && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
            case 'e':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                (HEAPF64[(tempDoublePtr)>>3]=parseFloat(text),HEAP32[((argPtr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((argPtr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _strncpy(pdest, psrc, num) {
      pdest = pdest|0; psrc = psrc|0; num = num|0;
      var padding = 0, curr = 0, i = 0;
      while ((i|0) < (num|0)) {
        curr = padding ? 0 : HEAP8[(((psrc)+(i))|0)];
        HEAP8[(((pdest)+(i))|0)]=curr
        padding = padding ? 1 : (HEAP8[(((psrc)+(i))|0)] == 0);
        i = (i+1)|0;
      }
      return pdest|0;
    }
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  function _strcat(pdest, psrc) {
      pdest = pdest|0; psrc = psrc|0;
      var i = 0;
      pdest = (pdest + _strlen(pdest))|0;
      do {
        HEAP8[((pdest+i)|0)]=HEAP8[((psrc+i)|0)];
        i = (i+1)|0;
      } while (HEAP8[(((psrc)+(i-1))|0)] != 0);
      return pdest|0;
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _llvm_va_end() {}
  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _tolower(chr) {
      chr = chr|0;
      if ((chr|0) < 65) return chr|0;
      if ((chr|0) > 90) return chr|0;
      return (chr - 65 + 97)|0;
    }function _strncasecmp(px, py, n) {
      px = px|0; py = py|0; n = n|0;
      var i = 0, x = 0, y = 0;
      while ((i>>>0) < (n>>>0)) {
        x = _tolower(HEAP8[(((px)+(i))|0)]);
        y = _tolower(HEAP8[(((py)+(i))|0)]);
        if (((x|0) == (y|0)) & ((x|0) == 0)) return 0;
        if ((x|0) == 0) return -1;
        if ((y|0) == 0) return 1;
        if ((x|0) == (y|0)) {
          i = (i + 1)|0;
          continue;
        } else {
          return ((x>>>0) > (y>>>0) ? 1 : -1)|0;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      px = px|0; py = py|0;
      return _strncasecmp(px, py, -1)|0;
    }
  function _stpcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[((pdest+i)|0)]=HEAP8[((psrc+i)|0)];
        i ++;
      } while (HEAP8[(((psrc)+(i-1))|0)] != 0);
      return pdest + i - 1;
    }
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
      // Apply sign.
      ret *= multiplier;
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
      if (bits == 64) {
        return tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0;
      }
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function _select(nfds, readfds, writefds, exceptfds, timeout) {
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      assert(!exceptfds);
      var errorCondition = 0;
      function canRead(info) {
        // make sure hasData exists. 
        // we do create it when the socket is connected, 
        // but other implementations may create it lazily
        if ((info.socket.readyState == WebSocket.CLOSING || info.socket.readyState == WebSocket.CLOSED) && info.inQueue.length == 0) {
          errorCondition = -1;
          return false;
        }
        return info.hasData && info.hasData();
      }
      function canWrite(info) {
        // make sure socket exists. 
        // we do create it when the socket is connected, 
        // but other implementations may create it lazily
        if ((info.socket.readyState == WebSocket.CLOSING || info.socket.readyState == WebSocket.CLOSED)) {
          errorCondition = -1;
          return false;
        }
        return info.socket && (info.socket.readyState == info.socket.OPEN);
      }
      function checkfds(nfds, fds, can) {
        if (!fds) return 0;
        var bitsSet = 0;
        var dstLow  = 0;
        var dstHigh = 0;
        var srcLow  = HEAP32[((fds)>>2)];
        var srcHigh = HEAP32[(((fds)+(4))>>2)];
        nfds = Math.min(64, nfds); // fd sets have 64 bits
        for (var fd = 0; fd < nfds; fd++) {
          var mask = 1 << (fd % 32), int = fd < 32 ? srcLow : srcHigh;
          if (int & mask) {
            // index is in the set, check if it is ready for read
            var info = Sockets.fds[fd];
            if (info && can(info)) {
              // set bit
              fd < 32 ? (dstLow = dstLow | mask) : (dstHigh = dstHigh | mask);
              bitsSet++;
            }
          }
        }
        HEAP32[((fds)>>2)]=dstLow;
        HEAP32[(((fds)+(4))>>2)]=dstHigh;
        return bitsSet;
      }
      var totalHandles = checkfds(nfds, readfds, canRead) + checkfds(nfds, writefds, canWrite);
      if (errorCondition) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else {
        return totalHandles;
      }
    }
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }var _waitpid=_wait;
  function _accept(fd, addr, addrlen) {
      // TODO: webrtc queued incoming connections, etc.
      // For now, the model is that bind does a connect, and we "accept" that one connection,
      // which has host:port the same as ours. We also return the same socket fd.
      var info = Sockets.fds[fd];
      if (!info) return -1;
      if (addr) {
        setValue(addr + Sockets.sockaddr_in_layout.sin_addr, info.addr, 'i32');
        setValue(addr + Sockets.sockaddr_in_layout.sin_port, info.port, 'i32');
        setValue(addrlen, Sockets.sockaddr_in_layout.__size__, 'i32');
      }
      return fd;
    }
  var Sockets={BACKEND_WEBSOCKETS:0,BACKEND_WEBRTC:1,BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,backend:0,nextFd:1,fds:{},sockaddr_in_layout:{__size__:20,sin_family:0,sin_port:4,sin_addr:8,sin_zero:12,sin_zero_b:16},msghdr_layout:{__size__:28,msg_name:0,msg_namelen:4,msg_iov:8,msg_iovlen:12,msg_control:16,msg_controllen:20,msg_flags:24},backends:{0:{connect:function (info) {
            console.log('opening ws://' + info.host + ':' + info.port);
            info.socket = new WebSocket('ws://' + info.host + ':' + info.port, ['binary']);
            info.socket.binaryType = 'arraybuffer';
            var i32Temp = new Uint32Array(1);
            var i8Temp = new Uint8Array(i32Temp.buffer);
            info.inQueue = [];
            info.hasData = function() { return info.inQueue.length > 0 }
            if (!info.stream) {
              var partialBuffer = null; // in datagram mode, inQueue contains full dgram messages; this buffers incomplete data. Must begin with the beginning of a message
            }
            info.socket.onmessage = function(event) {
              assert(typeof event.data !== 'string' && event.data.byteLength); // must get binary data!
              var data = new Uint8Array(event.data); // make a typed array view on the array buffer
              if (info.stream) {
                info.inQueue.push(data);
              } else {
                // we added headers with message sizes, read those to find discrete messages
                if (partialBuffer) {
                  // append to the partial buffer
                  var newBuffer = new Uint8Array(partialBuffer.length + data.length);
                  newBuffer.set(partialBuffer);
                  newBuffer.set(data, partialBuffer.length);
                  // forget the partial buffer and work on data
                  data = newBuffer;
                  partialBuffer = null;
                }
                var currPos = 0;
                while (currPos+4 < data.length) {
                  i8Temp.set(data.subarray(currPos, currPos+4));
                  var currLen = i32Temp[0];
                  assert(currLen > 0);
                  if (currPos + 4 + currLen > data.length) {
                    break; // not enough data has arrived
                  }
                  currPos += 4;
                  info.inQueue.push(data.subarray(currPos, currPos+currLen));
                  currPos += currLen;
                }
                // If data remains, buffer it
                if (currPos < data.length) {
                  partialBuffer = data.subarray(currPos);
                }
              }
            }
            function send(data) {
              // TODO: if browser accepts views, can optimize this
              // ok to use the underlying buffer, we created data and know that the buffer starts at the beginning
              info.socket.send(data.buffer);
            }
            var outQueue = [];
            var intervalling = false, interval;
            function trySend() {
              if (info.socket.readyState != info.socket.OPEN) {
                if (!intervalling) {
                  intervalling = true;
                  console.log('waiting for socket in order to send');
                  interval = setInterval(trySend, 100);
                }
                return;
              }
              for (var i = 0; i < outQueue.length; i++) {
                send(outQueue[i]);
              }
              outQueue.length = 0;
              if (intervalling) {
                intervalling = false;
                clearInterval(interval);
              }
            }
            info.sender = function(data) {
              if (!info.stream) {
                // add a header with the message size
                var header = new Uint8Array(4);
                i32Temp[0] = data.length;
                header.set(i8Temp);
                outQueue.push(header);
              }
              outQueue.push(new Uint8Array(data));
              trySend();
            };
          }},1:{}}};
  function __inet_ntop_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }
  var ___hostent_struct_layout={__size__:20,h_name:0,h_aliases:4,h_addrtype:8,h_length:12,h_addr_list:16};function _gethostbyname(name) {
      name = Pointer_stringify(name);
        if (!_gethostbyname.id) {
          _gethostbyname.id = 1;
          _gethostbyname.table = {};
        }
      var id = _gethostbyname.id++;
      assert(id < 65535);
      var fakeAddr = 172 | (29 << 8) | ((id & 0xff) << 16) | ((id & 0xff00) << 24);
      _gethostbyname.table[id] = name;
      // generate hostent
      var ret = _malloc(___hostent_struct_layout.__size__);
      var nameBuf = _malloc(name.length+1);
      writeStringToMemory(name, nameBuf);
      setValue(ret+___hostent_struct_layout.h_name, nameBuf, 'i8*');
      var aliasesBuf = _malloc(4);
      setValue(aliasesBuf, 0, 'i8*');
      setValue(ret+___hostent_struct_layout.h_aliases, aliasesBuf, 'i8**');
      setValue(ret+___hostent_struct_layout.h_addrtype, 1, 'i32');
      setValue(ret+___hostent_struct_layout.h_length, 4, 'i32');
      var addrListBuf = _malloc(12);
      setValue(addrListBuf, addrListBuf+8, 'i32*');
      setValue(addrListBuf+4, 0, 'i32*');
      setValue(addrListBuf+8, fakeAddr, 'i32');
      setValue(ret+___hostent_struct_layout.h_addr_list, addrListBuf, 'i8**');
      return ret;
    }function _connect(fd, addr, addrlen) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      info.connected = true;
      info.addr = getValue(addr + Sockets.sockaddr_in_layout.sin_addr, 'i32');
      info.port = _htons(getValue(addr + Sockets.sockaddr_in_layout.sin_port, 'i16'));
      info.host = __inet_ntop_raw(info.addr);
      // Support 'fake' ips from gethostbyname
      var parts = info.host.split('.');
      if (parts[0] == '172' && parts[1] == '29') {
        var low = Number(parts[2]);
        var high = Number(parts[3]);
        info.host = _gethostbyname.table[low + 0xff*high];
        assert(info.host, 'problem translating fake ip ' + parts);
      }
      Sockets.backends[Sockets.backend].connect(info);
      return 0;
    }
  function _sendmsg(fd, msg, flags) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      // if we are not connected, use the address info in the message
      if (!info.connected) {
        var name = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_name))>>2)];
        assert(name, 'sendmsg on non-connected socket, and no name/address in the message');
        _connect(fd, name, HEAP32[(((msg)+(Sockets.msghdr_layout.msg_namelen))>>2)]);
      }
      var iov = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iov))>>2)];
      var num = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iovlen))>>2)];
      var totalSize = 0;
      for (var i = 0; i < num; i++) {
        totalSize += HEAP32[(((iov)+(8*i + 4))>>2)];
      }
      var buffer = new Uint8Array(totalSize);
      var ret = 0;
      for (var i = 0; i < num; i++) {
        var currNum = HEAP32[(((iov)+(8*i + 4))>>2)];
        if (!currNum) continue;
        var currBuf = HEAP32[(((iov)+(8*i))>>2)];
        buffer.set(HEAPU8.subarray(currBuf, currBuf+currNum), ret);
        ret += currNum;
      }
      info.sender(buffer); // send all the iovs as a single message
      return ret;
    }
  function _recv(fd, buf, len, flags) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EAGAIN); // no data, and all sockets are nonblocking, so this is the right behavior
        return -1;
      }
      var buffer = info.inQueue.shift();
      if (len < buffer.length) {
        if (info.stream) {
          // This is tcp (reliable), so if not all was read, keep it
          info.inQueue.unshift(buffer.subarray(len));
        }
        buffer = buffer.subarray(0, len);
      }
      HEAPU8.set(buffer, buf);
      return buffer.length;
    }function _recvmsg(fd, msg, flags) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      // if we are not connected, use the address info in the message
      if (!info.connected) {
        var name = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_name))>>2)];
        assert(name, 'sendmsg on non-connected socket, and no name/address in the message');
        _connect(fd, name, HEAP32[(((msg)+(Sockets.msghdr_layout.msg_namelen))>>2)]);
      }
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EWOULDBLOCK);
        return -1;
      }
      var buffer = info.inQueue.shift();
      var bytes = buffer.length;
      // write source
      var name = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_name))>>2)];
      HEAP32[(((name)+(Sockets.sockaddr_in_layout.sin_addr))>>2)]=info.addr;
      HEAP16[(((name)+(Sockets.sockaddr_in_layout.sin_port))>>1)]=_htons(info.port);
      // write data
      var ret = bytes;
      var iov = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iov))>>2)];
      var num = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iovlen))>>2)];
      var bufferPos = 0;
      for (var i = 0; i < num && bytes > 0; i++) {
        var currNum = HEAP32[(((iov)+(8*i + 4))>>2)];
        if (!currNum) continue;
        currNum = Math.min(currNum, bytes); // XXX what should happen when we partially fill a buffer..?
        bytes -= currNum;
        var currBuf = HEAP32[(((iov)+(8*i))>>2)];
        HEAPU8.set(buffer.subarray(bufferPos, bufferPos + currNum), currBuf);
        bufferPos += currNum;
      }
      if (info.stream) {
        // This is tcp (reliable), so if not all was read, keep it
        if (bufferPos < bytes) {
          info.inQueue.unshift(buffer.subarray(bufferPos));
        }
      }
      return ret;
    }
  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      var target = FS.findObject(path);
      if (target === null) return -1;
      if ((amode & 2 && !target.write) ||  // W_OK.
          ((amode & 1 || amode & 4) && !target.read)) {  // X_OK, R_OK.
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        return 0;
      }
    }
  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[(((strerrbuf)+(i))|0)]=msg.charCodeAt(i)
          }
          HEAP8[(((strerrbuf)+(i))|0)]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }
  var _vfprintf=_fprintf;
  function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        _mmap.mappings[start] = null;
        _free(info.malloc);
      }
      return 0;
    }
  function _getgid() {
      // gid_t getgid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getgid.html
      // We have just one process/group/user, all with ID 0.
      return 0;
    }var _getuid=_getgid;
  var _geteuid=_getgid;
  function _setgid(gid) {
      // int setgid(gid_t gid);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setgid.html
      // We have just one process/group/user, so it makes no sense to set IDs.
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }var _setuid=_setgid;
var _mlock; // stub for _mlock
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _mmap(start, num, prot, flags, stream, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      if (!_mmap.mappings) _mmap.mappings = {};
      if (stream == -1) {
        var ptr = _malloc(num);
      } else {
        var info = FS.streams[stream];
        if (!info) return -1;
        var contents = info.object.contents;
        contents = Array.prototype.slice.call(contents, offset, offset+num);
        ptr = allocate(contents, 'i8', ALLOC_NORMAL);
      }
      // align to page size
      var ret = ptr;
      if (ptr % PAGE_SIZE != 0) {
        var old = ptr;
        ptr = _malloc(num + PAGE_SIZE);
        ret = alignMemoryPage(ptr);
        _memcpy(ret, old, num);
        _free(old);
      }
      if (stream == -1) {
        _memset(ret, 0, num);
      }
      _mmap.mappings[ret] = { malloc: ptr, num: num };
      return ret;
    }
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }
  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }
  function _truncate(path, length) {
      // int truncate(const char *path, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/truncate.html
      // NOTE: The path argument may be a string, to simplify ftruncate().
      if (length < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (typeof path !== 'string') path = Pointer_stringify(path);
        var target = FS.findObject(path);
        if (target === null) return -1;
        if (target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        } else if (target.isDevice) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else if (!target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        } else {
          var contents = target.contents;
          if (length < contents.length) contents.length = length;
          else while (length > contents.length) contents.push(0);
          target.timestamp = Date.now();
          return 0;
        }
      }
    }function _ftruncate(fildes, length) {
      // int ftruncate(int fildes, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftruncate.html
      if (FS.streams[fildes] && FS.streams[fildes].isWrite) {
        return _truncate(FS.streams[fildes].path, length);
      } else if (FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  var _getpid=_getgid;
  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }
  var ___rusage_struct_layout={__size__:72,ru_utime:0,ru_stime:8,ru_maxrss:16,ru_ixrss:20,ru_idrss:24,ru_isrss:28,ru_minflt:32,ru_majflt:36,ru_nswap:40,ru_inblock:44,ru_oublock:48,ru_msgsnd:52,ru_msgrcv:56,ru_nsignals:60,ru_nvcsw:64,ru_nivcsw:68};function _getrusage(resource, rlp) {
      // %struct.timeval = type { i32, i32 }
      var timeval = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      // int getrusage(int resource, struct rusage *rlp);
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_utime+timeval[0]))>>2)]=1
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_utime+timeval[1]))>>2)]=2
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_stime+timeval[0]))>>2)]=3
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_stime+timeval[1]))>>2)]=4
      return 0;
    }
  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000/1000));
    }
  var ___flock_struct_layout={__size__:16,l_type:0,l_whence:2,l_start:4,l_len:8,l_pid:12,l_xxx:14};function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      var stream = FS.streams[fildes];
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream = {};
          for (var member in stream) {
            newStream[member] = stream[member];
          }
          arg = dup2 ? arg : Math.max(arg, FS.streams.length); // dup2 wants exactly arg; fcntl wants a free descriptor >= arg
          for (var i = FS.streams.length; i < arg; i++) {
            FS.streams[i] = null; // Keep dense
          }
          FS.streams[arg] = newStream;
          return arg;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          var flags = 0;
          if (stream.isRead && stream.isWrite) flags = 2;
          else if (!stream.isRead && stream.isWrite) flags = 1;
          else if (stream.isRead && !stream.isWrite) flags = 0;
          if (stream.isAppend) flags |= 8;
          // Synchronization and blocking flags are irrelevant to us.
          return flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.isAppend = Boolean(arg | 8);
          // Synchronization and blocking flags are irrelevant to us.
          return 0;
        case 7:
        case 20:
          var arg = HEAP32[((varargs)>>2)];
          var offset = ___flock_struct_layout.l_type;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=3
          return 0;
        case 8:
        case 9:
        case 21:
        case 22:
          // Pretend that the locking is successful.
          return 0;
        case 6:
        case 5:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }
  function _srand(seed) {}
  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }
  var _getppid=_getgid;
  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      return Number(FS.streams[stream] && FS.streams[stream].error);
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }
  function ___gxx_personality_v0() {
    }
  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }
  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }
  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
  function __ZNSt9exceptionD2Ev(){}
  var _environ=allocate(1, "i32*", ALLOC_STACK);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[(((poolPtr)+(j))|0)]=line.charCodeAt(j);
        }
        HEAP8[(((poolPtr)+(j))|0)]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
var _warn; // stub for _warn
  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x+y > 4294967295,(x+y)>>>0;
    }
  function _llvm_uadd_with_overflow_i64(a, b, c, d) {
      a = a|0; b = b|0; c = c|0; d = d|0;
      var l = 0, h = 0, overflow = 0;
      l = (a + c)>>>0;
      h = (b + d)>>>0;
      if ((l>>>0) < (a>>>0)) { // iff we overflowed
        h = (h+1)>>>0;
        overflow = 1;
      }
      return tempRet0 = h,tempRet2 = overflow,l|0;
    }
  var _llvm_memset_p0i8_i64=_memset;
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (Browser.initted) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'];
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        this.lockPointer = lockPointer;
        this.resizeCanvas = resizeCanvas;
        if (typeof this.lockPointer === 'undefined') this.lockPointer = true;
        if (typeof this.resizeCanvas === 'undefined') this.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!this.fullScreenHandlersInstalled) {
          this.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
___buildEnvironment(ENV);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
var FUNCTION_TABLE = [0,0,_camellia_decrypt,0,_dsa_get_nbits,0,_crc24rfc2440_final,0,_ecc_get_nbits,0,_sha1_read
,0,_sha1_write,0,_ac_ssa_dencode_prepare_pkcs_v1_5,0,_gcry_cipher_lookup_func_oid,0,_run_selftests907,0,_sha384_init
,0,_elg_sign,0,_crc32_final,0,_msgops_callback_handle_msg_event,0,_rijndael_setkey,0,_rsa_verify
,0,_run_selftests773,0,_serpent_decrypt,0,_md5_init,0,_msgops_callback_create_instag,0,_decrypt_block
,0,__ZNKSt9bad_alloc4whatEv,0,_ecc_verify,0,_eme_pkcs_v1_5_encode,0,_md4_write,0,_decrypt_block1584
,0,_md5_write,0,_compute_keygrip,0,_dummy_decrypt,0,_ecc_get_param,0,__vwarnx
,0,_whirlpool_read,0,_whirlpool_final,0,_elg_generate_ext,0,_gcry_md_lookup_func_oid,0,_fprintf
,0,_tiger2_init,0,_rsa_encrypt,0,_dsa_sign,0,_md4_final,0,_serpent_encrypt
,0,_do_tripledes_encrypt,0,_run_selftests1659,0,_do_decrypt,0,_sha256_final,0,_entropy_collect_cb
,0,_dummy_setkey,0,_ecc_get_curve,0,__err,0,_elg_get_nbits,0,_ecc_check_secret_key
,0,_msgops_callback_is_logged_in,0,_sha256_write,0,_seed_setkey,0,__warnx,0,__gcry_aes_cfb_enc
,0,_tiger_write,0,_ecc_encrypt_raw,0,_ecc_generate_ext,0,_elg_verify,0,_gcry_pk_lookup_func_name
,0,__gcry_aes_ctr_enc,0,_rmd160_write,0,_tiger_init,0,__vwarn,0,_sha512_read
,0,_rmd160_read,0,_whirlpool_write,0,_rsa_sign,0,_sha256_init,0,__gcry_aes_cbc_dec
,0,__verr,0,_dummy_encrypt_stream,0,_do_tripledes_setkey,0,__ZNSt9bad_allocD2Ev,0,_crc24rfc2440_write
,0,__gcry_aes_cfb_dec,0,_eme_pkcs_v1_5_decode,0,_do_tripledes_decrypt,0,_ecc_get_param_sexp,0,_rmd160_final
,0,_dsa_check_secret_key,0,__gcry_log_info_with_dummy_fp,0,_crc24rfc2440_init,0,_do_encrypt,0,_msgops_callback_account_name
,0,__ZNSt20bad_array_new_lengthC2Ev,0,_ecc_generate,0,_otrl_mem_free,0,_otrl_mem_malloc,0,_tiger_final
,0,__ZNKSt20bad_array_new_length4whatEv,0,_rsa_check_secret_key,0,_rsa_generate,0,_run_selftests1772,0,_dummy_check_secret_key
,0,_run_selftests962,0,_add_randomness,0,_twofish_encrypt,0,_do_des_decrypt,0,_otrl_mem_is_secure
,0,_rsa_decrypt,0,_gcry_cipher_lookup_func_name,0,_go_encrypted,0,__verrx,0,_msgops_callback_still_secure
,0,_msgops_callback_policy,0,_dummy_encrypt_block,0,_md5_final,0,_msgops_callback_inject_message,0,_do_setkey
,0,_msgops_callback_gone_secure,0,_msgops_callback_otr_error_message_free,0,_check_exponent,0,__ZNSt9bad_allocC2Ev,0,_rsa_get_nbits
,0,_crc32_read,0,_md5_read,0,_run_selftests934,0,_encrypt_block1583,0,_tiger1_init
,0,_compute_keygrip1773,0,_dummy_encrypt,0,_crc32_init,0,_sha512_final,0,_msgops_callback_otr_error_message
,0,_otrl_mem_realloc,0,_ecc_decrypt_raw,0,_reporter,0,_encrypt_stream,0,_crc32_write
,0,_dummy_generate,0,_sha1_final,0,_twofish_decrypt,0,_msgops_callback_gone_insecure,0,_emsa_pkcs_v1_5_encode
,0,_tiger_read,0,_msgops_callback_write_fingerprints,0,_rsa_generate_ext,0,_seed_encrypt,0,_msgops_callback_max_message_size
,0,__gcry_rmd160_init,0,_pss_verify_cmp,0,_sha512_write,0,_sha224_init,0,_msgops_callback_update_context_list
,0,_rijndael_decrypt,0,__ZNSt20bad_array_new_lengthD0Ev,0,_sha1_init,0,__gcry_rndlinux_gather_random,0,_ecc_sign
,0,_dsa_generate_ext,0,__ZNSt9bad_allocD0Ev,0,_gcry_md_lookup_func_name,0,_camellia_encrypt,0,__errx
,0,_run_selftests847,0,_dummy_verify,0,_crc32rfc1510_final,0,_arcfour_setkey,0,_bf_setkey
,0,_dummy_sign,0,_do_des_setkey,0,_do_tripledes_set_extra_info,0,_encrypt_block,0,_seed_decrypt
,0,_twofish_setkey,0,_whirlpool_init,0,_sha256_read,0,_run_selftests,0,_elg_encrypt
,0,_msgops_callback_account_name_free,0,_elg_decrypt,0,_elg_generate,0,_ac_es_dencode_prepare_pkcs_v1_5,0,_msgops_callback_handle_smp_event
,0,_serpent_setkey,0,_msgops_callback_new_fingerprint,0,_dsa_verify,0,_elg_check_secret_key,0,_dsa_generate
,0,_rijndael_encrypt,0,_sha512_init,0,_dummy_decrypt_stream,0,_msgops_callback_create_privkey,0,_warn
,0,_md4_init,0,_do_des_encrypt,0,_camellia_setkey,0,_msgops_callback_received_symkey,0,_crc32rfc1510_init
,0,__gcry_aes_cbc_enc,0,_dummy_get_nbits,0,_cast_setkey,0,_dummy_decrypt_block,0,_md4_read,0];
// EMSCRIPTEN_START_FUNCS
function _msgops_callback_account_name(r1, r2, r3) {
  return r2;
}
function _msgops_callback_account_name_free(r1, r2) {
  return;
}
function _msgops_callback_otr_error_message(r1, r2, r3) {
  var r4;
  if ((r3 | 0) == 2) {
    r4 = 478616;
  } else if ((r3 | 0) == 3) {
    r4 = 478244;
  } else if ((r3 | 0) == 4) {
    r4 = 477952;
  } else if ((r3 | 0) == 1) {
    r4 = 478924;
  } else {
    r4 = 471132;
  }
  return r4;
}
function _msgops_callback_otr_error_message_free(r1, r2) {
  return;
}
function _msgops_callback_resent_msg_prefix(r1, r2) {
  return 477660;
}
function _msgops_callback_resent_msg_prefix_free(r1, r2) {
  return;
}
function _jsapi_userstate_get_privkey_root(r1) {
  return HEAP32[r1 + 4 >> 2];
}
function _jsapi_privkey_get_next(r1) {
  return HEAP32[r1 >> 2];
}
function _jsapi_privkey_get_accountname(r1) {
  return HEAP32[r1 + 8 >> 2];
}
function _jsapi_privkey_get_protocol(r1) {
  return HEAP32[r1 + 12 >> 2];
}
function _jsapi_conncontext_get_protocol(r1) {
  return HEAP32[r1 + 20 >> 2];
}
function _jsapi_conncontext_get_username(r1) {
  return HEAP32[r1 + 12 >> 2];
}
function _jsapi_conncontext_get_accountname(r1) {
  return HEAP32[r1 + 16 >> 2];
}
function _jsapi_conncontext_get_msgstate(r1) {
  return HEAP32[r1 + 48 >> 2];
}
function _jsapi_conncontext_get_protocol_version(r1) {
  return HEAP32[r1 + 280 >> 2];
}
function _jsapi_conncontext_get_smstate(r1) {
  return HEAP32[HEAP32[r1 + 296 >> 2] + 52 >> 2];
}
function _jsapi_conncontext_get_trust(r1) {
  var r2, r3;
  r2 = HEAP32[r1 + 248 >> 2];
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = HEAP32[r2 + 16 >> 2];
  return r3;
}
function _jsapi_conncontext_get_their_instance(r1) {
  return HEAP32[r1 + 44 >> 2];
}
function _jsapi_conncontext_get_our_instance(r1) {
  return HEAP32[r1 + 40 >> 2];
}
function _jsapi_conncontext_get_master(r1) {
  return HEAP32[r1 + 24 >> 2];
}
function _jsapi_instag_get_tag(r1) {
  return HEAP32[r1 + 16 >> 2];
}
function _jsapi_privkey_write_trusted_fingerprints(r1, r2) {
  var r3, r4;
  r3 = _fopen(r2, 482200);
  if ((r3 | 0) == 0) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    r4 = _jsapi_privkey_write_trusted_fingerprints_FILEp(r1, r3);
    _fclose(r3);
    r2 = r4;
    return r2;
  }
}
function _jsapi_privkey_write_trusted_fingerprints_FILEp(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r3 = STACKTOP;
  if ((r2 | 0) == 0) {
    r4 = _gcry_error(0);
    STACKTOP = r3;
    return r4;
  }
  r5 = HEAP32[r1 >> 2];
  if ((r5 | 0) == 0) {
    r4 = _gcry_error(0);
    STACKTOP = r3;
    return r4;
  } else {
    r6 = r5, r7 = r6 >> 2;
  }
  while (1) {
    L45 : do {
      if ((HEAP32[r7 + 11] | 0) == 0) {
        r5 = HEAP32[r7 + 57];
        if ((r5 | 0) == 0) {
          break;
        }
        r1 = r6 + 12 | 0;
        r8 = r6 + 16 | 0;
        r9 = r6 + 20 | 0;
        r10 = r5;
        while (1) {
          r5 = r10 + 16 | 0;
          if ((HEAP32[r5 >> 2] | 0) == 0) {
            break L45;
          }
          r11 = HEAP32[r8 >> 2];
          r12 = HEAP32[r9 >> 2];
          _fprintf(r2, 477664, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[r1 >> 2], HEAP32[tempInt + 4 >> 2] = r11, HEAP32[tempInt + 8 >> 2] = r12, tempInt));
          r12 = r10 + 8 | 0;
          r11 = 0;
          while (1) {
            _fprintf(r2, 474764, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[HEAP32[r12 >> 2] + r11 | 0], tempInt));
            r13 = r11 + 1 | 0;
            if ((r13 | 0) == 20) {
              break;
            } else {
              r11 = r13;
            }
          }
          r11 = HEAP32[r5 >> 2];
          _fprintf(r2, 472532, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = (r11 | 0) == 0 ? 471132 : r11, tempInt));
          r11 = HEAP32[r10 >> 2];
          if ((r11 | 0) == 0) {
            break L45;
          } else {
            r10 = r11;
          }
        }
      }
    } while (0);
    r10 = HEAP32[r7];
    if ((r10 | 0) == 0) {
      break;
    } else {
      r6 = r10, r7 = r6 >> 2;
    }
  }
  r4 = _gcry_error(0);
  STACKTOP = r3;
  return r4;
}
function _gcry_error(r1) {
  return _gcry_err_make(r1);
}
function _jsapi_sexp_write(r1, r2) {
  var r3, r4;
  r3 = _gcry_sexp_sprint(r2, 3, 0, 0);
  r4 = _malloc(r3);
  if ((r4 | 0) != 0 | (r3 | 0) == 0) {
    _gcry_sexp_sprint(r2, 3, r4, r3);
    _fputs(r4, r1);
    _free(r4);
    r4 = _gcry_error(0);
    return r4;
  } else {
    r4 = _gcry_error(32854);
    return r4;
  }
}
function _jsapi_account_write(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  r7 = r5 + 4;
  _fwrite(468188, 10, 1, r1);
  r8 = _gcry_sexp_build(r6, 0, 466188, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
  do {
    if ((r8 | 0) == 0) {
      r2 = _jsapi_sexp_write(r1, HEAP32[r6 >> 2]);
      _gcry_sexp_release(HEAP32[r6 >> 2]);
      if ((r2 | 0) != 0) {
        r9 = r2;
        break;
      }
      r2 = _gcry_sexp_build(r7, 0, 491088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
      if ((r2 | 0) != 0) {
        r9 = r2;
        break;
      }
      r2 = _jsapi_sexp_write(r1, HEAP32[r7 >> 2]);
      _gcry_sexp_release(HEAP32[r7 >> 2]);
      if ((r2 | 0) != 0) {
        r9 = r2;
        break;
      }
      r9 = _jsapi_sexp_write(r1, r4);
    } else {
      r9 = r8;
    }
  } while (0);
  _fwrite(490300, 3, 1, r1);
  STACKTOP = r5;
  return r9;
}
function _jsapi_userstate_write_to_file(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = _umask(63);
  r4 = _fopen(r2, 488544);
  if ((r4 | 0) == 0) {
    _umask(r3);
    r5 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r5;
  }
  _fwrite(487792, 10, 1, r4);
  r2 = HEAP32[r1 + 4 >> 2];
  L75 : do {
    if ((r2 | 0) != 0) {
      r1 = r2, r6 = r1 >> 2;
      while (1) {
        _jsapi_account_write(r4, HEAP32[r6 + 2], HEAP32[r6 + 3], HEAP32[r6 + 5]);
        r7 = HEAP32[r6];
        if ((r7 | 0) == 0) {
          break L75;
        } else {
          r1 = r7, r6 = r1 >> 2;
        }
      }
    }
  } while (0);
  _fwrite(486960, 2, 1, r4);
  _fseek(r4, 0, 0);
  _fclose(r4);
  _umask(r3);
  r5 = 0;
  return r5;
}
function _jsapi_privkey_delete(r1, r2, r3, r4) {
  var r5, r6;
  r5 = _otrl_privkey_find(r1, r3, r4);
  if ((r5 | 0) == 0) {
    r6 = 0;
    return r6;
  }
  _otrl_privkey_forget(r5);
  r6 = _jsapi_userstate_write_to_file(r1, r2);
  return r6;
}
function _jsapi_privkey_get_dsa_token(r1, r2, r3, r4, r5) {
  var r6, r7;
  r6 = _gcry_sexp_find_token(HEAP32[r1 + 20 >> 2], 486080, 0);
  if ((r6 | 0) == 0) {
    r7 = _gcry_error(54);
    return r7;
  }
  r1 = _gcry_sexp_find_token(r6, r2, 0);
  _gcry_sexp_release(r6);
  if ((r1 | 0) == 0) {
    r7 = _gcry_error(54);
    return r7;
  }
  r6 = _gcry_sexp_nth_mpi(r1, 1, 5);
  _gcry_sexp_release(r1);
  if ((r6 | 0) == 0) {
    r7 = _gcry_error(54);
    return r7;
  } else {
    r1 = _gcry_mpi_print(4, r3, r4, r5, r6);
    _gcry_mpi_release(r6);
    r7 = r1;
    return r7;
  }
}
function _jsapi_make_pubkey(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r4 = r2 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r2, r6 = r5 >> 2;
  r7 = r2 + 4, r8 = r7 >> 2;
  r9 = r2 + 8, r10 = r9 >> 2;
  r11 = r2 + 12, r12 = r11 >> 2;
  HEAP32[r1 >> 2] = 0;
  HEAP32[r4] = 0;
  r13 = _gcry_sexp_find_token(r3, 486080, 0);
  if ((r13 | 0) == 0) {
    r14 = _gcry_error(54);
    STACKTOP = r2;
    return r14;
  }
  r3 = _gcry_sexp_find_token(r13, 485176, 0);
  r15 = _gcry_sexp_find_token(r13, 484380, 0);
  r16 = _gcry_sexp_find_token(r13, 483416, 0);
  r17 = _gcry_sexp_find_token(r13, 482896, 0);
  _gcry_sexp_release(r13);
  if ((r3 | 0) == 0 | (r15 | 0) == 0 | (r16 | 0) == 0 | (r17 | 0) == 0) {
    _gcry_sexp_release(r3);
    _gcry_sexp_release(r15);
    _gcry_sexp_release(r16);
    _gcry_sexp_release(r17);
    r14 = _gcry_error(54);
    STACKTOP = r2;
    return r14;
  }
  r13 = _gcry_sexp_nth_mpi(r3, 1, 5);
  _gcry_sexp_release(r3);
  r3 = _gcry_sexp_nth_mpi(r15, 1, 5);
  _gcry_sexp_release(r15);
  r15 = _gcry_sexp_nth_mpi(r16, 1, 5);
  _gcry_sexp_release(r16);
  r16 = _gcry_sexp_nth_mpi(r17, 1, 5);
  _gcry_sexp_release(r17);
  if ((r13 | 0) == 0 | (r3 | 0) == 0 | (r15 | 0) == 0 | (r16 | 0) == 0) {
    _gcry_mpi_release(r13);
    _gcry_mpi_release(r3);
    _gcry_mpi_release(r15);
    _gcry_mpi_release(r16);
    r14 = _gcry_error(54);
    STACKTOP = r2;
    return r14;
  }
  HEAP32[r4] = 0;
  _gcry_mpi_print(5, 0, 0, r5, r13);
  HEAP32[r4] = HEAP32[r6] + HEAP32[r4] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, r7, r3);
  HEAP32[r4] = HEAP32[r8] + HEAP32[r4] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, r9, r15);
  HEAP32[r4] = HEAP32[r10] + HEAP32[r4] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, r11, r16);
  r11 = HEAP32[r12] + HEAP32[r4] + 4 | 0;
  HEAP32[r4] = r11;
  r9 = _malloc(r11);
  HEAP32[r1 >> 2] = r9;
  if ((r9 | 0) == 0) {
    _gcry_mpi_release(r13);
    _gcry_mpi_release(r3);
    _gcry_mpi_release(r15);
    _gcry_mpi_release(r16);
    r14 = _gcry_error(32854);
    STACKTOP = r2;
    return r14;
  } else {
    r1 = HEAP32[r4];
    HEAP8[r9] = HEAP32[r6] >>> 24 & 255;
    HEAP8[r9 + 1 | 0] = HEAP32[r6] >>> 16 & 255;
    HEAP8[r9 + 2 | 0] = HEAP32[r6] >>> 8 & 255;
    HEAP8[r9 + 3 | 0] = HEAP32[r6] & 255;
    r4 = r1 - 4 | 0;
    _gcry_mpi_print(5, r9 + 4 | 0, r4, 0, r13);
    r1 = HEAP32[r6];
    HEAP8[r1 + (r9 + 4) | 0] = HEAP32[r8] >>> 24 & 255;
    HEAP8[r1 + (r9 + 5) | 0] = HEAP32[r8] >>> 16 & 255;
    HEAP8[r1 + (r9 + 6) | 0] = HEAP32[r8] >>> 8 & 255;
    HEAP8[r1 + (r9 + 7) | 0] = HEAP32[r8] & 255;
    r6 = r1 + 8 | 0;
    r11 = r4 - r1 - 4 | 0;
    _gcry_mpi_print(5, r9 + r6 | 0, r11, 0, r3);
    r1 = HEAP32[r8];
    r8 = r1 + r6 | 0;
    r6 = r11 - r1 | 0;
    HEAP8[r9 + r8 | 0] = HEAP32[r10] >>> 24 & 255;
    HEAP8[r8 + (r9 + 1) | 0] = HEAP32[r10] >>> 16 & 255;
    HEAP8[r8 + (r9 + 2) | 0] = HEAP32[r10] >>> 8 & 255;
    HEAP8[r8 + (r9 + 3) | 0] = HEAP32[r10] & 255;
    r1 = r8 + 4 | 0;
    _gcry_mpi_print(5, r9 + r1 | 0, r6 - 4 | 0, 0, r15);
    r8 = HEAP32[r10];
    r10 = r8 + r1 | 0;
    HEAP8[r9 + r10 | 0] = HEAP32[r12] >>> 24 & 255;
    HEAP8[r10 + (r9 + 1) | 0] = HEAP32[r12] >>> 16 & 255;
    HEAP8[r10 + (r9 + 2) | 0] = HEAP32[r12] >>> 8 & 255;
    HEAP8[r10 + (r9 + 3) | 0] = HEAP32[r12] & 255;
    _gcry_mpi_print(5, r10 + (r9 + 4) | 0, r6 - 8 - r8 | 0, 0, r16);
    _gcry_mpi_release(r13);
    _gcry_mpi_release(r3);
    _gcry_mpi_release(r15);
    _gcry_mpi_release(r16);
    r14 = _gcry_error(0);
    STACKTOP = r2;
    return r14;
  }
}
function _jsapi_userstate_import_privkey(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23;
  r9 = 0;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r11 = r10, r12 = r11 >> 2;
  r13 = r10 + 4, r14 = r13 >> 2;
  r15 = _gcry_sexp_build(r13, 0, 482088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = r2, HEAP32[tempInt + 4 >> 2] = r3, HEAP32[tempInt + 8 >> 2] = r4, HEAP32[tempInt + 12 >> 2] = r5, HEAP32[tempInt + 16 >> 2] = r6, HEAP32[tempInt + 20 >> 2] = r7, HEAP32[tempInt + 24 >> 2] = r8, tempInt));
  if ((r15 | 0) != 0) {
    r16 = r15;
    STACKTOP = r10;
    return r16;
  }
  r15 = _otrl_privkey_find(r1, r2, r3);
  if ((r15 | 0) != 0) {
    _otrl_privkey_forget(r15);
  }
  r15 = _gcry_sexp_nth_data(HEAP32[r14], 0, r11);
  do {
    if ((HEAP32[r12] | 0) == 8) {
      if ((_strncmp(r15, 481668, 8) | 0) != 0) {
        break;
      }
      r3 = HEAP32[r14];
      r2 = r1 + 4 | 0;
      r8 = 1;
      while (1) {
        if (r8 >>> 0 >= _gcry_sexp_length(r3) >>> 0) {
          r9 = 131;
          break;
        }
        r17 = _gcry_sexp_nth(r3, r8);
        r7 = _gcry_sexp_nth_data(r17, 0, r11);
        if ((HEAP32[r12] | 0) != 7) {
          r9 = 114;
          break;
        }
        if ((_strncmp(r7, 480484, 7) | 0) != 0) {
          r9 = 114;
          break;
        }
        r18 = _gcry_sexp_find_token(r17, 480100, 0);
        r19 = _gcry_sexp_find_token(r17, 479828, 0);
        r20 = _gcry_sexp_find_token(r17, 479228, 0);
        _gcry_sexp_release(r17);
        if ((r18 | 0) == 0 | (r19 | 0) == 0 | (r20 | 0) == 0) {
          r9 = 116;
          break;
        }
        r7 = _gcry_sexp_nth_data(r18, 1, r11);
        if ((r7 | 0) == 0) {
          r9 = 118;
          break;
        }
        r21 = _malloc(HEAP32[r12] + 1 | 0);
        if ((r21 | 0) == 0) {
          r9 = 120;
          break;
        }
        _memmove(r21, r7, HEAP32[r12], 1, 0);
        HEAP8[r21 + HEAP32[r12] | 0] = 0;
        _gcry_sexp_release(r18);
        r7 = _gcry_sexp_nth_data(r19, 1, r11);
        if ((r7 | 0) == 0) {
          r9 = 122;
          break;
        }
        r22 = _malloc(HEAP32[r12] + 1 | 0);
        if ((r22 | 0) == 0) {
          r9 = 124;
          break;
        }
        _memmove(r22, r7, HEAP32[r12], 1, 0);
        HEAP8[r22 + HEAP32[r12] | 0] = 0;
        _gcry_sexp_release(r19);
        r7 = _malloc(32);
        r23 = r7;
        if ((r7 | 0) == 0) {
          r9 = 126;
          break;
        }
        HEAP32[r7 + 8 >> 2] = r21;
        HEAP32[r7 + 12 >> 2] = r22;
        HEAP16[r7 + 16 >> 1] = 0;
        r6 = r7 + 20 | 0;
        HEAP32[r6 >> 2] = r20;
        r5 = HEAP32[r2 >> 2];
        r4 = r7;
        HEAP32[r4 >> 2] = r5;
        if ((r5 | 0) != 0) {
          HEAP32[r5 + 4 >> 2] = r4;
        }
        HEAP32[r7 + 4 >> 2] = r2;
        HEAP32[r2 >> 2] = r23;
        if ((_jsapi_make_pubkey(r7 + 24 | 0, r7 + 28 | 0, HEAP32[r6 >> 2]) | 0) == 0) {
          r8 = r8 + 1 | 0;
        } else {
          r9 = 130;
          break;
        }
      }
      if (r9 == 116) {
        _gcry_sexp_release(r18);
        _gcry_sexp_release(r19);
        _gcry_sexp_release(r20);
        _gcry_sexp_release(HEAP32[r14]);
        r16 = _gcry_error(54);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 118) {
        _gcry_sexp_release(r18);
        _gcry_sexp_release(r19);
        _gcry_sexp_release(r20);
        _gcry_sexp_release(HEAP32[r14]);
        r16 = _gcry_error(54);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 114) {
        _gcry_sexp_release(r17);
        _gcry_sexp_release(HEAP32[r14]);
        r16 = _gcry_error(54);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 120) {
        _gcry_sexp_release(r18);
        _gcry_sexp_release(r19);
        _gcry_sexp_release(r20);
        _gcry_sexp_release(HEAP32[r14]);
        r16 = _gcry_error(32854);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 122) {
        _free(r21);
        _gcry_sexp_release(r19);
        _gcry_sexp_release(r20);
        _gcry_sexp_release(HEAP32[r14]);
        r16 = _gcry_error(54);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 124) {
        _free(r21);
        _gcry_sexp_release(r19);
        _gcry_sexp_release(r20);
        _gcry_sexp_release(HEAP32[r14]);
        r16 = _gcry_error(32854);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 126) {
        _free(r21);
        _free(r22);
        _gcry_sexp_release(r20);
        _gcry_sexp_release(HEAP32[r14]);
        r16 = _gcry_error(32854);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 130) {
        _gcry_sexp_release(HEAP32[r14]);
        _otrl_privkey_forget(r23);
        r16 = _gcry_error(54);
        STACKTOP = r10;
        return r16;
      } else if (r9 == 131) {
        _gcry_sexp_release(r3);
        r16 = _gcry_error(0);
        STACKTOP = r10;
        return r16;
      }
    }
  } while (0);
  _gcry_sexp_release(HEAP32[r14]);
  r16 = _gcry_error(54);
  STACKTOP = r10;
  return r16;
}
function _jsapi_conncontext_get_active_fingerprint(r1, r2) {
  var r3;
  HEAP8[r2] = 0;
  r3 = HEAP32[r1 + 248 >> 2];
  if ((r3 | 0) == 0) {
    return;
  }
  _otrl_privkey_hash_to_human(r2, HEAP32[r3 + 8 >> 2]);
  return;
}
function _msgops_callback_policy(r1, r2) {
  return __msgops_callback_policy(r1, r2);
}
function _msgops_callback_create_privkey(r1, r2, r3) {
  __msgops_callback_create_privkey(r1, r2, r3);
  return;
}
function _msgops_callback_is_logged_in(r1, r2, r3, r4) {
  return __msgops_callback_is_logged_in(r1, r2, r3, r4);
}
function _msgops_callback_inject_message(r1, r2, r3, r4, r5) {
  __msgops_callback_inject_message(r1, r2, r3, r4, r5);
  return;
}
function _msgops_callback_update_context_list(r1) {
  __msgops_callback_update_context_list(r1);
  return;
}
function _msgops_callback_new_fingerprint(r1, r2, r3, r4, r5, r6) {
  var r7, r8;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r8 = r7 | 0;
  _otrl_privkey_hash_to_human(r8, r6);
  __msgops_callback_new_fingerprint(r1, r2, r3, r4, r5, r8);
  STACKTOP = r7;
  return;
}
function _msgops_callback_write_fingerprints(r1) {
  __msgops_callback_write_fingerprints(r1);
  return;
}
function _msgops_callback_gone_secure(r1, r2) {
  __msgops_callback_gone_secure(r1, r2);
  return;
}
function _msgops_callback_gone_insecure(r1, r2) {
  __msgops_callback_gone_insecure(r1, r2);
  return;
}
function _msgops_callback_still_secure(r1, r2, r3) {
  __msgops_callback_still_secure(r1, r2, r3);
  return;
}
function _msgops_callback_max_message_size(r1, r2) {
  return __msgops_callback_max_message_size(r1, r2);
}
function _msgops_callback_received_symkey(r1, r2, r3, r4, r5, r6) {
  __msgops_callback_received_symkey(r1, r2, r3, r4, r5, r6);
  return;
}
function _msgops_callback_handle_smp_event(r1, r2, r3, r4, r5) {
  if ((r2 | 0) == 3 | (r2 | 0) == 1) {
    __msgops_callback_smp_error(r1, r3);
    return;
  } else if ((r2 | 0) == 8) {
    __msgops_callback_smp_failed(r1, r3);
    return;
  } else if ((r2 | 0) == 5) {
    __msgops_callback_smp_request(r1, r3, 0);
    return;
  } else if ((r2 | 0) == 2) {
    __msgops_callback_smp_aborted(r1, r3);
    return;
  } else if ((r2 | 0) == 4) {
    __msgops_callback_smp_request(r1, r3, r5);
    return;
  } else if ((r2 | 0) == 7) {
    __msgops_callback_smp_complete(r1, r3);
    return;
  } else {
    return;
  }
}
function _msgops_callback_handle_msg_event(r1, r2, r3, r4, r5) {
  __msgops_callback_handle_msg_event(r1, r2, r3, r4, r5);
  return;
}
function _msgops_callback_create_instag(r1, r2, r3) {
  __msgops_callback_create_instag(r1, r2, r3);
  return;
}
function _msgops_callback_convert_msg(r1, r2, r3, r4, r5) {
  __msgops_callback_convert_msg(r1, r2, r3, r4, r5);
  return;
}
function _msgops_callback_convert_free(r1, r2, r3) {
  __msgops_callback_convert_free(r1, r2, r3);
  return;
}
function _msgops_callback_timer_control(r1, r2) {
  __msgops_callback_timer_control(r1, r2);
  return;
}
function _jsapi_initialise() {
  var r1;
  r1 = STACKTOP;
  if ((_gcry_check_version(491132) | 0) == 0) {
    _fwrite(491104, 27, 1, HEAP32[_stderr >> 2]);
    _exit(2);
  }
  _gcry_control(38, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt));
  if ((_otrl_init(4, 0, 0) | 0) == 0) {
    STACKTOP = r1;
    return;
  } else {
    _exit(1);
  }
}
function _gpg_err_make(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function _jsapi_can_start_smp(r1) {
  return (HEAP32[HEAP32[r1 + 296 >> 2] + 44 >> 2] | 0) == 0 & 1;
}
function _jsapi_messageappops_new() {
  var r1, r2;
  r1 = _malloc(96), r2 = r1 >> 2;
  HEAP32[r2] = 212;
  HEAP32[r2 + 1] = 368;
  HEAP32[r2 + 2] = 102;
  HEAP32[r2 + 3] = 218;
  HEAP32[r2 + 4] = 290;
  HEAP32[r2 + 5] = 354;
  HEAP32[r2 + 6] = 274;
  HEAP32[r2 + 7] = 222;
  HEAP32[r2 + 8] = 268;
  HEAP32[r2 + 9] = 210;
  HEAP32[r2 + 10] = 280;
  HEAP32[r2 + 12] = 342;
  HEAP32[r2 + 11] = 170;
  HEAP32[r2 + 13] = 378;
  HEAP32[r2 + 14] = 250;
  HEAP32[r2 + 15] = 224;
  HEAP32[r2 + 16] = 0;
  HEAP32[r2 + 17] = 0;
  HEAP32[r2 + 18] = 350;
  HEAP32[r2 + 19] = 26;
  HEAP32[r2 + 20] = 38;
  HEAP32[r2 + 21] = 0;
  HEAP32[r2 + 22] = 0;
  HEAP32[r2 + 23] = 0;
  return r1;
}
function _gcry_err_make(r1) {
  return _gpg_err_make(r1);
}
function _otrl_privkey_hash_to_human(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  r4 = 0;
  r5 = r1;
  while (1) {
    r6 = r4 << 2;
    _sprintf(r5, 477508, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r2 + r6 | 0], tempInt));
    _sprintf(r5 + 2 | 0, 477508, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r2 + (r6 | 1) | 0], tempInt));
    _sprintf(r5 + 4 | 0, 477508, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r2 + (r6 | 2) | 0], tempInt));
    _sprintf(r5 + 6 | 0, 477508, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r2 + (r6 | 3) | 0], tempInt));
    HEAP8[r5 + 8 | 0] = 32;
    r6 = r4 + 1 | 0;
    if ((r6 | 0) == 5) {
      break;
    } else {
      r4 = r6;
      r5 = r5 + 9 | 0;
    }
  }
  HEAP8[r1 + 44 | 0] = 0;
  STACKTOP = r3;
  return;
}
function _otrl_privkey_fingerprint(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r6 = _otrl_privkey_find(r1, r3, r4);
  if ((r6 | 0) == 0) {
    r7 = 0;
    STACKTOP = r5;
    return r7;
  }
  r4 = r5 | 0;
  _gcry_md_hash_buffer(2, r4, HEAP32[r6 + 24 >> 2], HEAP32[r6 + 28 >> 2]);
  _otrl_privkey_hash_to_human(r2, r4);
  r7 = r2;
  STACKTOP = r5;
  return r7;
}
function _otrl_privkey_find(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  if ((r2 | 0) == 0 | (r3 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  r6 = HEAP32[r1 + 4 >> 2];
  if ((r6 | 0) == 0) {
    r5 = 0;
    return r5;
  } else {
    r7 = r6, r8 = r7 >> 2;
  }
  while (1) {
    if ((_strcmp(HEAP32[r8 + 2], r2) | 0) == 0) {
      if ((_strcmp(HEAP32[r8 + 3], r3) | 0) == 0) {
        r5 = r7;
        r4 = 209;
        break;
      }
    }
    r6 = HEAP32[r8];
    if ((r6 | 0) == 0) {
      r5 = 0;
      r4 = 206;
      break;
    } else {
      r7 = r6, r8 = r7 >> 2;
    }
  }
  if (r4 == 209) {
    return r5;
  } else if (r4 == 206) {
    return r5;
  }
}
function _otrl_privkey_fingerprint_raw(r1, r2, r3, r4) {
  var r5, r6;
  r5 = _otrl_privkey_find(r1, r3, r4);
  if ((r5 | 0) == 0) {
    r6 = 0;
    return r6;
  }
  _gcry_md_hash_buffer(2, r2, HEAP32[r5 + 24 >> 2], HEAP32[r5 + 28 >> 2]);
  r6 = r2;
  return r6;
}
function _otrl_privkey_read(r1, r2) {
  var r3, r4;
  r3 = _fopen(r2, 487464);
  if ((r3 | 0) == 0) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    r4 = _otrl_privkey_read_FILEp(r1, r3);
    _fclose(r3);
    r2 = r4;
    return r2;
  }
}
function _otrl_privkey_read_FILEp(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  r5 = r4;
  r6 = r4 + 72, r7 = r6 >> 2;
  r8 = r4 + 76, r9 = r8 >> 2;
  if ((r2 | 0) == 0) {
    r10 = _gcry_error68(0);
    STACKTOP = r4;
    return r10;
  }
  _otrl_privkey_forget_all(r1);
  if ((_fstat(_fileno(r2), r5) | 0) != 0) {
    r10 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    STACKTOP = r4;
    return r10;
  }
  r11 = (r5 + 28 | 0) >> 2;
  r5 = _malloc(HEAP32[r11]);
  r12 = HEAP32[r11];
  if ((r5 | 0) == 0 & (r12 | 0) > 0) {
    r10 = _gcry_error68(32854);
    STACKTOP = r4;
    return r10;
  }
  if ((_fread(r5, r12, 1, r2) | 0) != 1) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    _free(r5);
    r10 = r2;
    STACKTOP = r4;
    return r10;
  }
  r2 = _gcry_sexp_new(r8, r5, HEAP32[r11], 0);
  _free(r5);
  if ((r2 | 0) != 0) {
    r10 = r2;
    STACKTOP = r4;
    return r10;
  }
  r2 = _gcry_sexp_nth_data(HEAP32[r9], 0, r6);
  do {
    if ((HEAP32[r7] | 0) == 8) {
      if ((_strncmp(r2, 479944, 8) | 0) != 0) {
        break;
      }
      r5 = r1 + 4 | 0;
      r11 = 1;
      while (1) {
        r13 = HEAP32[r9];
        if ((r11 | 0) >= (_gcry_sexp_length(r13) | 0)) {
          r3 = 254;
          break;
        }
        r14 = _gcry_sexp_nth(r13, r11);
        r8 = _gcry_sexp_nth_data(r14, 0, r6);
        if ((HEAP32[r7] | 0) != 7) {
          r3 = 237;
          break;
        }
        if ((_strncmp(r8, 476328, 7) | 0) != 0) {
          r3 = 237;
          break;
        }
        r15 = _gcry_sexp_find_token(r14, 473524, 0);
        r16 = _gcry_sexp_find_token(r14, 471908, 0);
        r17 = _gcry_sexp_find_token(r14, 470540, 0);
        _gcry_sexp_release(r14);
        if ((r15 | 0) == 0 | (r16 | 0) == 0 | (r17 | 0) == 0) {
          r3 = 239;
          break;
        }
        r8 = _gcry_sexp_nth_data(r15, 1, r6);
        if ((r8 | 0) == 0) {
          r3 = 241;
          break;
        }
        r18 = _malloc(HEAP32[r7] + 1 | 0);
        if ((r18 | 0) == 0) {
          r3 = 243;
          break;
        }
        _memmove(r18, r8, HEAP32[r7], 1, 0);
        HEAP8[r18 + HEAP32[r7] | 0] = 0;
        _gcry_sexp_release(r15);
        r8 = _gcry_sexp_nth_data(r16, 1, r6);
        if ((r8 | 0) == 0) {
          r3 = 245;
          break;
        }
        r19 = _malloc(HEAP32[r7] + 1 | 0);
        if ((r19 | 0) == 0) {
          r3 = 247;
          break;
        }
        _memmove(r19, r8, HEAP32[r7], 1, 0);
        HEAP8[r19 + HEAP32[r7] | 0] = 0;
        _gcry_sexp_release(r16);
        r8 = _malloc(32);
        r20 = r8;
        if ((r8 | 0) == 0) {
          r3 = 249;
          break;
        }
        HEAP32[r8 + 8 >> 2] = r18;
        HEAP32[r8 + 12 >> 2] = r19;
        HEAP16[r8 + 16 >> 1] = 0;
        r12 = r8 + 20 | 0;
        HEAP32[r12 >> 2] = r17;
        r21 = HEAP32[r5 >> 2];
        r22 = r8;
        HEAP32[r22 >> 2] = r21;
        if ((r21 | 0) != 0) {
          HEAP32[r21 + 4 >> 2] = r22;
        }
        HEAP32[r8 + 4 >> 2] = r5;
        HEAP32[r5 >> 2] = r20;
        if ((_make_pubkey(r8 + 24 | 0, r8 + 28 | 0, HEAP32[r12 >> 2]) | 0) == 0) {
          r11 = r11 + 1 | 0;
        } else {
          r3 = 253;
          break;
        }
      }
      if (r3 == 243) {
        _gcry_sexp_release(r15);
        _gcry_sexp_release(r16);
        _gcry_sexp_release(r17);
        _gcry_sexp_release(HEAP32[r9]);
        r10 = _gcry_error68(32854);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 247) {
        _free(r18);
        _gcry_sexp_release(r16);
        _gcry_sexp_release(r17);
        _gcry_sexp_release(HEAP32[r9]);
        r10 = _gcry_error68(32854);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 249) {
        _free(r18);
        _free(r19);
        _gcry_sexp_release(r17);
        _gcry_sexp_release(HEAP32[r9]);
        r10 = _gcry_error68(32854);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 253) {
        _gcry_sexp_release(HEAP32[r9]);
        _otrl_privkey_forget(r20);
        r10 = _gcry_error68(54);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 254) {
        _gcry_sexp_release(r13);
        r10 = _gcry_error68(0);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 237) {
        _gcry_sexp_release(r14);
        _gcry_sexp_release(HEAP32[r9]);
        r10 = _gcry_error68(54);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 245) {
        _free(r18);
        _gcry_sexp_release(r16);
        _gcry_sexp_release(r17);
        _gcry_sexp_release(HEAP32[r9]);
        r10 = _gcry_error68(54);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 239) {
        _gcry_sexp_release(r15);
        _gcry_sexp_release(r16);
        _gcry_sexp_release(r17);
        _gcry_sexp_release(HEAP32[r9]);
        r10 = _gcry_error68(54);
        STACKTOP = r4;
        return r10;
      } else if (r3 == 241) {
        _gcry_sexp_release(r15);
        _gcry_sexp_release(r16);
        _gcry_sexp_release(r17);
        _gcry_sexp_release(HEAP32[r9]);
        r10 = _gcry_error68(54);
        STACKTOP = r4;
        return r10;
      }
    }
  } while (0);
  _gcry_sexp_release(HEAP32[r9]);
  r10 = _gcry_error68(54);
  STACKTOP = r4;
  return r10;
}
function _gcry_error68(r1) {
  return _gcry_err_make71(r1);
}
function _otrl_privkey_forget_all(r1) {
  var r2, r3;
  r2 = r1 + 4 | 0;
  r1 = HEAP32[r2 >> 2];
  if ((r1 | 0) == 0) {
    return;
  } else {
    r3 = r1;
  }
  while (1) {
    _otrl_privkey_forget(r3);
    r1 = HEAP32[r2 >> 2];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r3 = r1;
    }
  }
  return;
}
function _make_pubkey(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r4 = r2 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r2, r6 = r5 >> 2;
  r7 = r2 + 4, r8 = r7 >> 2;
  r9 = r2 + 8, r10 = r9 >> 2;
  r11 = r2 + 12, r12 = r11 >> 2;
  HEAP32[r1 >> 2] = 0;
  HEAP32[r4] = 0;
  r13 = _gcry_sexp_find_token(r3, 484628, 0);
  if ((r13 | 0) == 0) {
    r14 = _gcry_error68(54);
    STACKTOP = r2;
    return r14;
  }
  r3 = _gcry_sexp_find_token(r13, 478696, 0);
  r15 = _gcry_sexp_find_token(r13, 478372, 0);
  r16 = _gcry_sexp_find_token(r13, 478036, 0);
  r17 = _gcry_sexp_find_token(r13, 477712, 0);
  _gcry_sexp_release(r13);
  if ((r3 | 0) == 0 | (r15 | 0) == 0 | (r16 | 0) == 0 | (r17 | 0) == 0) {
    _gcry_sexp_release(r3);
    _gcry_sexp_release(r15);
    _gcry_sexp_release(r16);
    _gcry_sexp_release(r17);
    r14 = _gcry_error68(54);
    STACKTOP = r2;
    return r14;
  }
  r13 = _gcry_sexp_nth_mpi(r3, 1, 5);
  _gcry_sexp_release(r3);
  r3 = _gcry_sexp_nth_mpi(r15, 1, 5);
  _gcry_sexp_release(r15);
  r15 = _gcry_sexp_nth_mpi(r16, 1, 5);
  _gcry_sexp_release(r16);
  r16 = _gcry_sexp_nth_mpi(r17, 1, 5);
  _gcry_sexp_release(r17);
  if ((r13 | 0) == 0 | (r3 | 0) == 0 | (r15 | 0) == 0 | (r16 | 0) == 0) {
    _gcry_mpi_release(r13);
    _gcry_mpi_release(r3);
    _gcry_mpi_release(r15);
    _gcry_mpi_release(r16);
    r14 = _gcry_error68(54);
    STACKTOP = r2;
    return r14;
  }
  HEAP32[r4] = 0;
  _gcry_mpi_print(5, 0, 0, r5, r13);
  HEAP32[r4] = HEAP32[r6] + HEAP32[r4] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, r7, r3);
  HEAP32[r4] = HEAP32[r8] + HEAP32[r4] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, r9, r15);
  HEAP32[r4] = HEAP32[r10] + HEAP32[r4] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, r11, r16);
  r11 = HEAP32[r12] + HEAP32[r4] + 4 | 0;
  HEAP32[r4] = r11;
  r9 = _malloc(r11);
  HEAP32[r1 >> 2] = r9;
  if ((r9 | 0) == 0) {
    _gcry_mpi_release(r13);
    _gcry_mpi_release(r3);
    _gcry_mpi_release(r15);
    _gcry_mpi_release(r16);
    r14 = _gcry_error68(32854);
    STACKTOP = r2;
    return r14;
  } else {
    r1 = HEAP32[r4];
    HEAP8[r9] = HEAP32[r6] >>> 24 & 255;
    HEAP8[r9 + 1 | 0] = HEAP32[r6] >>> 16 & 255;
    HEAP8[r9 + 2 | 0] = HEAP32[r6] >>> 8 & 255;
    HEAP8[r9 + 3 | 0] = HEAP32[r6] & 255;
    r4 = r1 - 4 | 0;
    _gcry_mpi_print(5, r9 + 4 | 0, r4, 0, r13);
    r1 = HEAP32[r6];
    HEAP8[r1 + (r9 + 4) | 0] = HEAP32[r8] >>> 24 & 255;
    HEAP8[r1 + (r9 + 5) | 0] = HEAP32[r8] >>> 16 & 255;
    HEAP8[r1 + (r9 + 6) | 0] = HEAP32[r8] >>> 8 & 255;
    HEAP8[r1 + (r9 + 7) | 0] = HEAP32[r8] & 255;
    r6 = r1 + 8 | 0;
    r11 = r4 - r1 - 4 | 0;
    _gcry_mpi_print(5, r9 + r6 | 0, r11, 0, r3);
    r1 = HEAP32[r8];
    r8 = r1 + r6 | 0;
    r6 = r11 - r1 | 0;
    HEAP8[r9 + r8 | 0] = HEAP32[r10] >>> 24 & 255;
    HEAP8[r8 + (r9 + 1) | 0] = HEAP32[r10] >>> 16 & 255;
    HEAP8[r8 + (r9 + 2) | 0] = HEAP32[r10] >>> 8 & 255;
    HEAP8[r8 + (r9 + 3) | 0] = HEAP32[r10] & 255;
    r1 = r8 + 4 | 0;
    _gcry_mpi_print(5, r9 + r1 | 0, r6 - 4 | 0, 0, r15);
    r8 = HEAP32[r10];
    r10 = r8 + r1 | 0;
    HEAP8[r9 + r10 | 0] = HEAP32[r12] >>> 24 & 255;
    HEAP8[r10 + (r9 + 1) | 0] = HEAP32[r12] >>> 16 & 255;
    HEAP8[r10 + (r9 + 2) | 0] = HEAP32[r12] >>> 8 & 255;
    HEAP8[r10 + (r9 + 3) | 0] = HEAP32[r12] & 255;
    _gcry_mpi_print(5, r10 + (r9 + 4) | 0, r6 - 8 - r8 | 0, 0, r16);
    _gcry_mpi_release(r13);
    _gcry_mpi_release(r3);
    _gcry_mpi_release(r15);
    _gcry_mpi_release(r16);
    r14 = _gcry_error68(0);
    STACKTOP = r2;
    return r14;
  }
}
function _otrl_privkey_forget(r1) {
  var r2, r3, r4, r5;
  _free(HEAP32[r1 + 8 >> 2]);
  _free(HEAP32[r1 + 12 >> 2]);
  _gcry_sexp_release(HEAP32[r1 + 20 >> 2]);
  _free(HEAP32[r1 + 24 >> 2]);
  r2 = r1 | 0;
  r3 = r1 + 4 | 0;
  HEAP32[HEAP32[r3 >> 2] >> 2] = HEAP32[r2 >> 2];
  r4 = HEAP32[r2 >> 2];
  if ((r4 | 0) == 0) {
    r5 = r1;
    _free(r5);
    return;
  }
  HEAP32[r4 + 4 >> 2] = HEAP32[r3 >> 2];
  r5 = r1;
  _free(r5);
  return;
}
function _otrl_privkey_pending_forget_all(r1) {
  var r2, r3;
  r2 = r1 + 12 | 0;
  r1 = HEAP32[r2 >> 2];
  if ((r1 | 0) == 0) {
    return;
  } else {
    r3 = r1;
  }
  while (1) {
    _pending_forget(r3);
    r1 = HEAP32[r2 >> 2];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r3 = r1;
    }
  }
  return;
}
function _pending_forget(r1) {
  var r2, r3, r4;
  if ((r1 | 0) == 0) {
    return;
  }
  _free(HEAP32[r1 + 8 >> 2]);
  _free(HEAP32[r1 + 12 >> 2]);
  r2 = r1 | 0;
  r3 = r1 + 4 | 0;
  HEAP32[HEAP32[r3 >> 2] >> 2] = HEAP32[r2 >> 2];
  r4 = HEAP32[r2 >> 2];
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 4 >> 2] = HEAP32[r3 >> 2];
  }
  _free(r1);
  return;
}
function _otrl_privkey_generate_start(r1, r2, r3, r4) {
  var r5, r6;
  if ((_pending_find(r1, r2, r3) | 0) == 0) {
    _pending_insert(r1, r2, r3);
    r1 = _malloc(12), r5 = r1 >> 2;
    HEAP32[r5] = _strdup(r2);
    HEAP32[r5 + 1] = _strdup(r3);
    HEAP32[r5 + 2] = 0;
    HEAP32[r4 >> 2] = r1;
    r6 = _gcry_error68(0);
    return r6;
  }
  if ((r4 | 0) != 0) {
    HEAP32[r4 >> 2] = 0;
  }
  r6 = _gcry_error68(32803);
  return r6;
}
function _pending_find(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  r5 = HEAP32[r1 + 12 >> 2];
  if ((r5 | 0) == 0) {
    r6 = 0;
    return r6;
  } else {
    r7 = r5, r8 = r7 >> 2;
  }
  while (1) {
    if ((_strcmp(HEAP32[r8 + 2], r2) | 0) == 0) {
      if ((_strcmp(HEAP32[r8 + 3], r3) | 0) == 0) {
        r6 = r7;
        r4 = 323;
        break;
      }
    }
    r5 = HEAP32[r8];
    if ((r5 | 0) == 0) {
      r6 = 0;
      r4 = 324;
      break;
    } else {
      r7 = r5, r8 = r7 >> 2;
    }
  }
  if (r4 == 323) {
    return r6;
  } else if (r4 == 324) {
    return r6;
  }
}
function _pending_insert(r1, r2, r3) {
  var r4, r5;
  if ((_pending_find(r1, r2, r3) | 0) != 0) {
    return;
  }
  r4 = _malloc(16), r5 = r4 >> 2;
  if ((r4 | 0) == 0) {
    return;
  }
  HEAP32[r5 + 2] = _strdup(r2);
  HEAP32[r5 + 3] = _strdup(r3);
  r3 = r1 + 12 | 0;
  r1 = r4;
  HEAP32[r1 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r3 >> 2] = r4;
  r4 = HEAP32[r1 >> 2];
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 4 >> 2] = r1;
  }
  HEAP32[r5 + 1] = r3;
  return;
}
function _otrl_privkey_generate_calculate(r1) {
  var r2, r3, r4, r5, r6;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r2;
  r4 = r2 + 4;
  r5 = _gcry_sexp_new(r4, 468976, 29, 0);
  if ((r5 | 0) != 0) {
    r6 = r5;
    STACKTOP = r2;
    return r6;
  }
  r5 = _gcry_pk_genkey(r3, HEAP32[r4 >> 2]);
  _gcry_sexp_release(HEAP32[r4 >> 2]);
  if ((r5 | 0) != 0) {
    r6 = r5;
    STACKTOP = r2;
    return r6;
  }
  HEAP32[r1 + 8 >> 2] = _gcry_sexp_find_token(HEAP32[r3 >> 2], 470540, 0);
  _gcry_sexp_release(HEAP32[r3 >> 2]);
  r6 = _gcry_error68(0);
  STACKTOP = r2;
  return r6;
}
function _ctoh(r1) {
  var r2, r3;
  r2 = r1 << 24 >> 24;
  if ((r1 - 48 & 255) < 10) {
    r3 = r2 - 48 | 0;
    return r3;
  }
  if ((r1 - 97 & 255) >= 6) {
    return (r1 - 65 & 255) < 6 ? r2 - 55 | 0 : 0;
  }
  r3 = r2 - 87 | 0;
  return r3;
}
function _gpg_err_make72(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function _otrl_context_find_recent_instance(r1, r2) {
  var r3, r4, r5;
  do {
    if ((r1 | 0) == 0) {
      r3 = 0;
    } else {
      r4 = HEAP32[r1 + 24 >> 2], r5 = r4 >> 2;
      if ((r4 | 0) == 0) {
        r3 = 0;
        break;
      }
      if ((r2 | 0) == 3) {
        r3 = HEAP32[r5 + 7];
        break;
      } else if ((r2 | 0) == 4) {
        r3 = HEAP32[r5 + 8];
        break;
      } else if ((r2 | 0) == 2) {
        r3 = HEAP32[r5 + 9];
        break;
      } else {
        r3 = 0;
        break;
      }
    }
  } while (0);
  return r3;
}
function _otrl_context_is_fingerprint_trusted(r1) {
  var r2, r3;
  do {
    if ((r1 | 0) == 0) {
      r2 = 0;
    } else {
      r3 = HEAP32[r1 + 16 >> 2];
      if ((r3 | 0) == 0) {
        r2 = 0;
        break;
      }
      r2 = HEAP8[r3] << 24 >> 24 != 0;
    }
  } while (0);
  return r2 & 1;
}
function _otrl_privkey_generate_cancelled(r1, r2) {
  var r3;
  r3 = r2 >> 2;
  if ((r1 | 0) != 0) {
    _pending_forget(_pending_find(r1, HEAP32[r3], HEAP32[r3 + 1]));
  }
  _free(HEAP32[r3]);
  _free(HEAP32[r3 + 1]);
  _gcry_sexp_release(HEAP32[r3 + 2]);
  _free(r2);
  return;
}
function _otrl_privkey_generate_finish(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  r6 = _privkey_fopen(r3, r5);
  if ((r6 | 0) != 0) {
    HEAP32[r5 >> 2] = _otrl_privkey_generate_finish_FILEp(r1, r2, r6);
    _fclose(r6);
  }
  STACKTOP = r4;
  return HEAP32[r5 >> 2];
}
function _privkey_fopen(r1, r2) {
  var r3, r4, r5;
  r3 = _umask(63);
  r4 = _fopen(r1, 479056);
  if ((r4 | 0) != 0 | (r2 | 0) == 0) {
    r5 = _umask(r3);
    return r4;
  }
  HEAP32[r2 >> 2] = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
  r5 = _umask(r3);
  return r4;
}
function _otrl_privkey_generate_finish_FILEp(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  r5 = _gcry_error68(55);
  if ((r2 | 0) == 0 | (r1 | 0) == 0 | (r3 | 0) == 0) {
    r6 = r5;
    _otrl_privkey_generate_cancelled(r1, r2);
    return r6;
  }
  _fwrite(467388, 10, 1, r3);
  r5 = HEAP32[r1 + 4 >> 2];
  L432 : do {
    if ((r5 | 0) != 0) {
      r7 = r2;
      r8 = r2 + 4 | 0;
      r9 = r5, r10 = r9 >> 2;
      while (1) {
        r11 = r9 + 8 | 0;
        do {
          if ((_strcmp(HEAP32[r11 >> 2], HEAP32[r7 >> 2]) | 0) == 0) {
            if ((_strcmp(HEAP32[r10 + 3], HEAP32[r8 >> 2]) | 0) == 0) {
              break;
            } else {
              r4 = 379;
              break;
            }
          } else {
            r4 = 379;
          }
        } while (0);
        if (r4 == 379) {
          r4 = 0;
          _account_write(r3, HEAP32[r11 >> 2], HEAP32[r10 + 3], HEAP32[r10 + 5]);
        }
        r12 = HEAP32[r10];
        if ((r12 | 0) == 0) {
          break L432;
        } else {
          r9 = r12, r10 = r9 >> 2;
        }
      }
    }
  } while (0);
  _account_write(r3, HEAP32[r2 >> 2], HEAP32[r2 + 4 >> 2], HEAP32[r2 + 8 >> 2]);
  _fwrite(465348, 2, 1, r3);
  _fseek(r3, 0, 0);
  r6 = _otrl_privkey_read_FILEp(r1, r3);
  _otrl_privkey_generate_cancelled(r1, r2);
  return r6;
}
function _account_write(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5;
  r7 = r5 + 4;
  _fwrite(481820, 10, 1, r1);
  do {
    if ((_gcry_sexp_build(r6, 0, 481180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt)) | 0) == 0) {
      r8 = _sexp_write(r1, HEAP32[r6 >> 2]);
      _gcry_sexp_release(HEAP32[r6 >> 2]);
      if ((r8 | 0) != 0) {
        break;
      }
      if ((_gcry_sexp_build(r7, 0, 480156, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt)) | 0) != 0) {
        break;
      }
      r8 = _sexp_write(r1, HEAP32[r7 >> 2]);
      _gcry_sexp_release(HEAP32[r7 >> 2]);
      if ((r8 | 0) != 0) {
        break;
      }
      _sexp_write(r1, r4);
    }
  } while (0);
  _fwrite(479920, 3, 1, r1);
  STACKTOP = r5;
  return;
}
function _otrl_privkey_generate(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  r7 = _privkey_fopen(r2, r6);
  if ((r7 | 0) != 0) {
    HEAP32[r6 >> 2] = _otrl_privkey_generate_FILEp(r1, r7, r3, r4);
    _fclose(r7);
  }
  STACKTOP = r5;
  return HEAP32[r6 >> 2];
}
function _otrl_privkey_generate_FILEp(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5, r7 = r6 >> 2;
  HEAP32[r7] = 0;
  r8 = _otrl_privkey_generate_start(r1, r3, r4, r6);
  r6 = HEAP32[r7];
  if ((r6 | 0) == 0) {
    r9 = r8;
    STACKTOP = r5;
    return r9;
  }
  _otrl_privkey_generate_calculate(r6);
  r9 = _otrl_privkey_generate_finish_FILEp(r1, HEAP32[r7], r2);
  STACKTOP = r5;
  return r9;
}
function _otrl_privkey_read_fingerprints(r1, r2, r3, r4) {
  var r5, r6;
  r5 = _fopen(r2, 487464);
  if ((r5 | 0) == 0) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    r6 = _otrl_privkey_read_fingerprints_FILEp(r1, r5, r3, r4);
    _fclose(r5);
    r2 = r6;
    return r2;
  }
}
function _otrl_privkey_read_fingerprints_FILEp(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 1020 | 0;
  r6 = r5 + 1e3;
  if ((r2 | 0) == 0) {
    r7 = _gcry_error68(0);
    STACKTOP = r5;
    return r7;
  }
  r8 = r5 | 0;
  if ((_fgets(r8, 1e3, r2) | 0) == 0) {
    r7 = _gcry_error68(0);
    STACKTOP = r5;
    return r7;
  }
  r9 = r6 | 0;
  while (1) {
    r10 = _strchr(r8, 9);
    do {
      if ((r10 | 0) != 0) {
        HEAP8[r10] = 0;
        r11 = r10 + 1 | 0;
        r12 = _strchr(r11, 9);
        if ((r12 | 0) == 0) {
          break;
        }
        HEAP8[r12] = 0;
        r13 = r12 + 1 | 0;
        r12 = _strchr(r13, 9);
        if ((r12 | 0) == 0) {
          break;
        }
        HEAP8[r12] = 0;
        r14 = r12 + 1 | 0;
        r15 = _strchr(r14, 9);
        if ((r15 | 0) == 0) {
          r16 = _strchr(r14, 13);
          if ((r16 | 0) == 0) {
            r17 = _strchr(r14, 10);
            if ((r17 | 0) == 0) {
              break;
            } else {
              r18 = r17;
            }
          } else {
            r18 = r16;
          }
          HEAP8[r18] = 0;
          r19 = 0;
        } else {
          HEAP8[r15] = 0;
          r16 = r15 + 1 | 0;
          r15 = _strchr(r16, 13);
          if ((r15 | 0) == 0) {
            r17 = _strchr(r16, 10);
            if ((r17 | 0) == 0) {
              break;
            } else {
              r20 = r17;
            }
          } else {
            r20 = r15;
          }
          HEAP8[r20] = 0;
          r19 = r16;
        }
        if ((_strlen(r14) | 0) == 40) {
          r21 = 0;
          r22 = 0;
        } else {
          break;
        }
        while (1) {
          r14 = r21 | 1;
          r16 = r22 + 1 | 0;
          HEAP8[r6 + r22 | 0] = (_ctoh(HEAP8[r12 + r14 | 0]) << 4) + _ctoh(HEAP8[r14 + (r12 + 1) | 0]) & 255;
          if ((r16 | 0) == 20) {
            break;
          } else {
            r21 = r21 + 2 | 0;
            r22 = r16;
          }
        }
        _otrl_context_set_trust(_otrl_context_find_fingerprint(_otrl_context_find(r1, r8, r11, r13, 0, 1, 0, r3, r4), r9, 1, 0), r19);
      }
    } while (0);
    if ((_fgets(r8, 1e3, r2) | 0) == 0) {
      break;
    }
  }
  r7 = _gcry_error68(0);
  STACKTOP = r5;
  return r7;
}
function _otrl_privkey_write_fingerprints(r1, r2) {
  var r3, r4;
  r3 = _fopen(r2, 490684);
  if ((r3 | 0) == 0) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    r4 = _otrl_privkey_write_fingerprints_FILEp(r1, r3);
    _fclose(r3);
    r2 = r4;
    return r2;
  }
}
function _otrl_privkey_write_fingerprints_FILEp(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = STACKTOP;
  if ((r2 | 0) == 0) {
    r4 = _gcry_error68(0);
    STACKTOP = r3;
    return r4;
  }
  r5 = HEAP32[r1 >> 2];
  if ((r5 | 0) == 0) {
    r4 = _gcry_error68(0);
    STACKTOP = r3;
    return r4;
  } else {
    r6 = r5, r7 = r6 >> 2;
  }
  while (1) {
    L507 : do {
      if ((HEAP32[r7 + 11] | 0) == 0) {
        r5 = HEAP32[r7 + 57];
        if ((r5 | 0) == 0) {
          break;
        }
        r1 = r6 + 12 | 0;
        r8 = r6 + 16 | 0;
        r9 = r6 + 20 | 0;
        r10 = r5;
        while (1) {
          r5 = HEAP32[r8 >> 2];
          r11 = HEAP32[r9 >> 2];
          _fprintf(r2, 489568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[r1 >> 2], HEAP32[tempInt + 4 >> 2] = r5, HEAP32[tempInt + 8 >> 2] = r11, tempInt));
          r11 = r10 + 8 | 0;
          r5 = 0;
          while (1) {
            _fprintf(r2, 488044, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[HEAP32[r11 >> 2] + r5 | 0], tempInt));
            r12 = r5 + 1 | 0;
            if ((r12 | 0) == 20) {
              break;
            } else {
              r5 = r12;
            }
          }
          r5 = HEAP32[r10 + 16 >> 2];
          _fprintf(r2, 487360, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = (r5 | 0) == 0 ? 486432 : r5, tempInt));
          r5 = HEAP32[r10 >> 2];
          if ((r5 | 0) == 0) {
            break L507;
          } else {
            r10 = r5;
          }
        }
      }
    } while (0);
    r10 = HEAP32[r7];
    if ((r10 | 0) == 0) {
      break;
    } else {
      r6 = r10, r7 = r6 >> 2;
    }
  }
  r4 = _gcry_error68(0);
  STACKTOP = r3;
  return r4;
}
function _otrl_privkey_sign(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4;
  r10 = r6 + 8;
  r11 = r6 + 12;
  r12 = r6 + 16;
  if (HEAP16[r3 + 16 >> 1] << 16 >> 16 != 0) {
    r13 = _gcry_error68(55);
    STACKTOP = r6;
    return r13;
  }
  r14 = _malloc(40);
  HEAP32[r1 >> 2] = r14;
  if ((r14 | 0) == 0) {
    r13 = _gcry_error68(32854);
    STACKTOP = r6;
    return r13;
  }
  HEAP32[r2 >> 2] = 40;
  if ((r5 | 0) == 0) {
    HEAP32[r8] = _gcry_mpi_set_ui(0, 0);
  } else {
    _gcry_mpi_scan(r7, 5, r4, r5, 0);
  }
  _gcry_sexp_build(r10, 0, 485572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r8], tempInt));
  _gcry_mpi_release(HEAP32[r8]);
  _gcry_pk_sign(r9, HEAP32[r10 >> 2], HEAP32[r3 + 20 >> 2]);
  _gcry_sexp_release(HEAP32[r10 >> 2]);
  r10 = _gcry_sexp_find_token(HEAP32[r9 >> 2], 484628, 0);
  _gcry_sexp_release(HEAP32[r9 >> 2]);
  r9 = _gcry_sexp_find_token(r10, 483968, 0);
  r3 = _gcry_sexp_find_token(r10, 483048, 0);
  _gcry_sexp_release(r10);
  r10 = _gcry_sexp_nth_mpi(r9, 1, 5);
  _gcry_sexp_release(r9);
  r9 = _gcry_sexp_nth_mpi(r3, 1, 5);
  _gcry_sexp_release(r3);
  _gcry_mpi_print(5, 0, 0, r11, r10);
  _gcry_mpi_print(5, 0, 0, r12, r9);
  _memset(HEAP32[r1 >> 2], 0, 40);
  r3 = HEAP32[r11 >> 2];
  _gcry_mpi_print(5, HEAP32[r1 >> 2] + (20 - r3) | 0, r3, 0, r10);
  r3 = HEAP32[r12 >> 2];
  _gcry_mpi_print(5, HEAP32[r1 >> 2] + (40 - r3) | 0, r3, 0, r9);
  _gcry_mpi_release(r10);
  _gcry_mpi_release(r9);
  r13 = _gcry_error68(0);
  STACKTOP = r6;
  return r13;
}
function _otrl_privkey_verify(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r8 = r7, r9 = r8 >> 2;
  r10 = r7 + 4;
  r11 = r7 + 8;
  r12 = r7 + 12;
  r13 = r7 + 16;
  if (!(r3 << 16 >> 16 == 0 & (r2 | 0) == 40)) {
    r14 = _gcry_error68(55);
    STACKTOP = r7;
    return r14;
  }
  if ((r6 | 0) == 0) {
    HEAP32[r9] = _gcry_mpi_set_ui(0, 0);
  } else {
    _gcry_mpi_scan(r8, 5, r5, r6, 0);
  }
  _gcry_sexp_build(r12, 0, 485572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r9], tempInt));
  _gcry_mpi_release(HEAP32[r9]);
  _gcry_mpi_scan(r10, 5, r1, 20, 0);
  _gcry_mpi_scan(r11, 5, r1 + 20 | 0, 20, 0);
  r1 = HEAP32[r11 >> 2];
  _gcry_sexp_build(r13, 0, 482384, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r10 >> 2], HEAP32[tempInt + 4 >> 2] = r1, tempInt));
  _gcry_mpi_release(HEAP32[r10 >> 2]);
  _gcry_mpi_release(HEAP32[r11 >> 2]);
  r11 = _gcry_pk_verify(HEAP32[r13 >> 2], HEAP32[r12 >> 2], r4);
  _gcry_sexp_release(HEAP32[r12 >> 2]);
  _gcry_sexp_release(HEAP32[r13 >> 2]);
  r14 = r11;
  STACKTOP = r7;
  return r14;
}
function _sexp_write(r1, r2) {
  var r3, r4;
  r3 = _gcry_sexp_sprint(r2, 3, 0, 0);
  r4 = _malloc(r3);
  if ((r4 | 0) != 0 | (r3 | 0) == 0) {
    _gcry_sexp_sprint(r2, 3, r4, r3);
    _fputs(r4, r1);
    _free(r4);
    r4 = _gcry_error68(0);
    return r4;
  } else {
    r4 = _gcry_error68(32854);
    return r4;
  }
}
function _gcry_err_make71(r1) {
  return _gpg_err_make72(r1);
}
function _otrl_context_find_recent_secure_instance(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r2 = 0;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = HEAP32[r1 + 24 >> 2];
  if ((r4 | 0) == 0) {
    r3 = r1;
    return r3;
  } else {
    r5 = r4, r6 = r5 >> 2;
    r7 = r1, r8 = r7 >> 2;
  }
  while (1) {
    if ((HEAP32[r6 + 6] | 0) != (r4 | 0)) {
      r3 = r7;
      r2 = 489;
      break;
    }
    r1 = HEAP32[r8 + 12];
    r9 = HEAP32[r6 + 12];
    do {
      if ((r1 | 0) == (r9 | 0)) {
        r10 = 0;
        r2 = 479;
      } else {
        if ((r9 | 0) == 1) {
          r10 = 1;
          r2 = 479;
          break;
        }
        if ((r1 | 0) == 0 & (r9 | 0) == 2) {
          r10 = 1;
          r2 = 479;
          break;
        } else {
          r11 = r7;
          break;
        }
      }
    } while (0);
    do {
      if (r2 == 479) {
        r2 = 0;
        r9 = _otrl_context_is_fingerprint_trusted(HEAP32[r8 + 62]);
        r1 = _otrl_context_is_fingerprint_trusted(HEAP32[r6 + 62]);
        if ((r9 | 0) == (r1 | 0)) {
          r12 = 0;
        } else {
          if ((r1 | 0) == 0) {
            r11 = r7;
            break;
          } else {
            r12 = 1;
          }
        }
        if ((r10 | r12 | 0) == 0) {
          if ((r12 | r10 | 0) != 0) {
            r11 = r7;
            break;
          }
          if ((HEAP32[HEAP32[r6 + 2] + 580 >> 2] | 0) < (HEAP32[HEAP32[r8 + 2] + 580 >> 2] | 0)) {
            r11 = r7;
            break;
          }
        }
        r11 = r5;
      }
    } while (0);
    r1 = HEAP32[r6];
    if ((r1 | 0) == 0) {
      r3 = r11;
      r2 = 488;
      break;
    } else {
      r5 = r1, r6 = r5 >> 2;
      r7 = r11, r8 = r7 >> 2;
    }
  }
  if (r2 == 488) {
    return r3;
  } else if (r2 == 489) {
    return r3;
  }
}
function _otrl_version() {
  return 486496;
}
function _otrl_context_update_recent_child(r1, r2) {
  var r3;
  r3 = HEAP32[r1 + 24 >> 2] >> 2;
  if ((r2 | 0) == 0) {
    HEAP32[r3 + 7] = r1;
  } else {
    HEAP32[r3 + 8] = r1;
  }
  HEAP32[r3 + 9] = r1;
  return;
}
function _otrl_context_find(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r10 = 0;
  r11 = (r7 | 0) != 0;
  if (r11) {
    HEAP32[r7 >> 2] = 0;
  }
  if ((r2 | 0) == 0 | (r3 | 0) == 0 | (r4 | 0) == 0) {
    r12 = 0;
    return r12;
  }
  r13 = r1 | 0;
  r14 = HEAP32[r13 >> 2];
  L586 : do {
    if ((r14 | 0) == 0) {
      r15 = 1;
      r16 = 1;
      r17 = 1;
      r18 = r13, r19 = r18 >> 2;
      r10 = 511;
    } else {
      r20 = r5 >>> 0 < 256;
      r21 = 1;
      r22 = 1;
      r23 = r13, r24 = r23 >> 2;
      r25 = r14;
      while (1) {
        r26 = _strcmp(HEAP32[r25 + 12 >> 2], r2);
        if ((r26 | 0) > 0) {
          r27 = r23, r28 = r27 >> 2;
          break L586;
        }
        do {
          if ((r26 | 0) == 0) {
            r29 = _strcmp(HEAP32[r25 + 16 >> 2], r3);
            if ((r29 | 0) > 0) {
              r27 = r23, r28 = r27 >> 2;
              break L586;
            }
            if ((r29 | r26 | 0) != 0) {
              r30 = r29;
              r31 = r22;
              break;
            }
            r32 = _strcmp(HEAP32[HEAP32[r24] + 20 >> 2], r4);
            if ((r32 | 0) > 0) {
              r27 = r23, r28 = r27 >> 2;
              break L586;
            } else {
              r33 = r32;
              r34 = r29;
              r35 = 1;
              r10 = 507;
              break;
            }
          } else {
            r33 = r22;
            r34 = r21;
            r35 = (r26 | r21 | 0) == 0;
            r10 = 507;
            break;
          }
        } while (0);
        do {
          if (r10 == 507) {
            r10 = 0;
            if (!(r35 & (r33 | 0) == 0)) {
              r30 = r34;
              r31 = r33;
              break;
            }
            if (r20) {
              r15 = r33;
              r16 = r34;
              r17 = r26;
              r18 = r23, r19 = r18 >> 2;
              r10 = 511;
              break L586;
            }
            if (HEAP32[HEAP32[r24] + 44 >> 2] >>> 0 < r5 >>> 0) {
              r30 = r34;
              r31 = r33;
            } else {
              r15 = r33;
              r16 = r34;
              r17 = r26;
              r18 = r23, r19 = r18 >> 2;
              r10 = 511;
              break L586;
            }
          }
        } while (0);
        r29 = HEAP32[r24] | 0;
        r32 = HEAP32[r29 >> 2];
        if ((r32 | 0) == 0) {
          r15 = r31;
          r16 = r30;
          r17 = r26;
          r18 = r29, r19 = r18 >> 2;
          r10 = 511;
          break L586;
        } else {
          r21 = r30;
          r22 = r31;
          r23 = r29, r24 = r23 >> 2;
          r25 = r32;
        }
      }
    }
  } while (0);
  do {
    if (r10 == 511) {
      if ((r16 | r17 | r15 | 0) != 0) {
        r27 = r18, r28 = r27 >> 2;
        break;
      }
      r31 = HEAP32[r19];
      if ((r31 | 0) == 0) {
        r27 = r18, r28 = r27 >> 2;
        break;
      }
      if (r5 >>> 0 >= 256) {
        if ((HEAP32[r31 + 44 >> 2] | 0) != (r5 | 0)) {
          r27 = r18, r28 = r27 >> 2;
          break;
        }
      }
      if (r5 >>> 0 > 255 | (r5 | 0) == 0) {
        r12 = HEAP32[r19];
        return r12;
      }
      if ((r5 | 0) == 2 | (r5 | 0) == 3 | (r5 | 0) == 4) {
        r12 = _otrl_context_find_recent_instance(HEAP32[r19], r5);
        return r12;
      } else if ((r5 | 0) == 1) {
        r12 = _otrl_context_find_recent_secure_instance(HEAP32[r19]);
        return r12;
      } else {
        r12 = 0;
        return r12;
      }
    }
  } while (0);
  if ((r6 | 0) == 0) {
    r12 = 0;
    return r12;
  }
  r6 = _otrl_instag_find(r1, r3, r4);
  if (r11) {
    HEAP32[r7 >> 2] = 1;
  }
  r7 = _new_context(r2, r3, r4), r11 = r7 >> 2;
  r19 = r7 | 0;
  HEAP32[r19 >> 2] = HEAP32[r28];
  r18 = HEAP32[r28];
  if ((r18 | 0) != 0) {
    HEAP32[r18 + 4 >> 2] = r19;
  }
  HEAP32[r28] = r7;
  HEAP32[r11 + 1] = r27;
  if ((r8 | 0) != 0) {
    FUNCTION_TABLE[r8](r9, HEAP32[r28]);
  }
  if ((r6 | 0) != 0) {
    HEAP32[r11 + 10] = HEAP32[r6 + 16 >> 2];
  }
  r6 = r5 >>> 0 > 255;
  r27 = (r5 | 0) == 0;
  if (r6 | r27) {
    HEAP32[r11 + 11] = r5;
  }
  if (r6) {
    HEAP32[r11 + 6] = _otrl_context_find(r1, r2, r3, r4, 0, 1, 0, r8, r9);
  }
  if (r27) {
    HEAP32[r11 + 9] = r7;
    HEAP32[r11 + 7] = r7;
    HEAP32[r11 + 8] = r7;
  }
  r12 = HEAP32[r28];
  return r12;
}
function _new_context(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = _malloc(300), r5 = r4 >> 2;
  r6 = r4;
  if ((r4 | 0) == 0) {
    ___assert_func(477560, 130, 494072, 476336);
  }
  HEAP32[r5 + 3] = _strdup(r1);
  HEAP32[r5 + 4] = _strdup(r2);
  HEAP32[r5 + 5] = _strdup(r3);
  HEAP32[r5 + 12] = 0;
  _otrl_auth_new(r6);
  r3 = _malloc(56);
  r2 = r3;
  if ((r3 | 0) == 0) {
    ___assert_func(477560, 140, 494072, 473532);
  }
  _otrl_sm_state_new(r2);
  HEAP32[r5 + 74] = r2;
  HEAP32[r5 + 10] = 0;
  HEAP32[r5 + 11] = 0;
  HEAP32[r5 + 59] = 0;
  HEAP32[r5 + 60] = r6;
  HEAP32[r5 + 57] = 0;
  HEAP32[r5 + 58] = 0;
  r2 = (r4 + 248 | 0) >> 2;
  r3 = (r4 + 280 | 0) >> 2;
  HEAP32[r2] = 0;
  HEAP32[r2 + 1] = 0;
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 3] = 0;
  HEAP32[r2 + 4] = 0;
  HEAP32[r2 + 5] = 0;
  HEAP32[r2 + 6] = 0;
  HEAP32[r3] = 0;
  HEAP32[r3 + 1] = 0;
  HEAP32[r3 + 2] = 0;
  HEAP32[r3 + 3] = 0;
  r3 = _otrl_context_priv_new();
  HEAP32[r5 + 2] = r3;
  if ((r3 | 0) != 0) {
    r7 = r4;
    HEAP32[r7 >> 2] = 0;
    r8 = r4 + 24 | 0;
    r9 = r8;
    HEAP32[r9 >> 2] = r6;
    r10 = r4 + 28 | 0;
    r11 = r10;
    HEAP32[r11 >> 2] = 0;
    r12 = r4 + 32 | 0;
    r13 = r12;
    HEAP32[r13 >> 2] = 0;
    r14 = r4 + 36 | 0;
    r15 = r14;
    HEAP32[r15 >> 2] = 0;
    return r6;
  }
  ___assert_func(477560, 158, 494072, 471920);
  r7 = r4;
  HEAP32[r7 >> 2] = 0;
  r8 = r4 + 24 | 0;
  r9 = r8;
  HEAP32[r9 >> 2] = r6;
  r10 = r4 + 28 | 0;
  r11 = r10;
  HEAP32[r11 >> 2] = 0;
  r12 = r4 + 32 | 0;
  r13 = r12;
  HEAP32[r13 >> 2] = 0;
  r14 = r4 + 36 | 0;
  r15 = r14;
  HEAP32[r15 >> 2] = 0;
  return r6;
}
function _otrl_context_find_fingerprint(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = 0;
  r6 = (r4 | 0) != 0;
  if (r6) {
    HEAP32[r4 >> 2] = 0;
  }
  if ((r1 | 0) == 0) {
    r7 = 0;
    return r7;
  }
  r8 = HEAP32[r1 + 24 >> 2];
  if ((r8 | 0) == 0) {
    r7 = 0;
    return r7;
  }
  r1 = r8 + 228 | 0;
  r9 = r1;
  while (1) {
    r10 = HEAP32[r9 >> 2];
    if ((r10 | 0) == 0) {
      break;
    }
    if ((_memcmp(HEAP32[r10 + 8 >> 2], r2, 20) | 0) == 0) {
      r7 = r10;
      r5 = 572;
      break;
    } else {
      r9 = r10 | 0;
    }
  }
  if (r5 == 572) {
    return r7;
  }
  if ((r3 | 0) == 0) {
    r7 = 0;
    return r7;
  }
  if (r6) {
    HEAP32[r4 >> 2] = 1;
  }
  r4 = _malloc(20), r6 = r4 >> 2;
  r3 = r4;
  if ((r4 | 0) == 0) {
    ___assert_func(477560, 387, 494020, 487764);
  }
  r5 = _malloc(20);
  r9 = r4 + 8 | 0;
  HEAP32[r9 >> 2] = r5;
  if ((r5 | 0) == 0) {
    ___assert_func(477560, 389, 494020, 479956);
  }
  _memmove(HEAP32[r9 >> 2], r2, 20, 1, 0);
  HEAP32[r6 + 3] = r8;
  HEAP32[r6 + 4] = 0;
  r8 = HEAP32[r1 >> 2];
  r2 = r4;
  HEAP32[r2 >> 2] = r8;
  if ((r8 | 0) != 0) {
    HEAP32[r8 + 4 >> 2] = r2;
  }
  HEAP32[r1 >> 2] = r3;
  HEAP32[r6 + 1] = r1;
  r7 = r3;
  return r7;
}
function _otrl_context_set_trust(r1, r2) {
  var r3, r4;
  if ((r1 | 0) == 0) {
    return;
  }
  r3 = r1 + 16 | 0;
  _free(HEAP32[r3 >> 2]);
  if ((r2 | 0) == 0) {
    r4 = 0;
  } else {
    r4 = _strdup(r2);
  }
  HEAP32[r3 >> 2] = r4;
  return;
}
function _otrl_context_force_finished(r1) {
  var r2;
  HEAP32[r1 + 48 >> 2] = 2;
  _otrl_auth_clear(r1 + 52 | 0);
  HEAP32[r1 + 280 >> 2] = 0;
  r2 = (r1 + 248 | 0) >> 2;
  HEAP32[r2] = 0;
  HEAP32[r2 + 1] = 0;
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 3] = 0;
  HEAP32[r2 + 4] = 0;
  HEAP32[r2 + 5] = 0;
  HEAP32[r2 + 6] = 0;
  _otrl_sm_state_free(HEAP32[r1 + 296 >> 2]);
  _otrl_context_priv_force_finished(HEAP32[r1 + 8 >> 2]);
  return;
}
function _otrl_context_force_plaintext(r1) {
  _otrl_context_force_finished(r1);
  HEAP32[r1 + 48 >> 2] = 0;
  return;
}
function _otrl_context_forget_fingerprint(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = HEAP32[r1 + 12 >> 2];
  r4 = r3 + 228 | 0;
  r5 = r3 + 48 | 0;
  r6 = (HEAP32[r5 >> 2] | 0) == 0;
  if ((r4 | 0) == (r1 | 0)) {
    if ((r2 | 0) == 0 | r6 ^ 1) {
      return;
    }
    _otrl_context_forget(r3);
    return;
  }
  do {
    if (r6) {
      if ((HEAP32[r3 + 248 >> 2] | 0) != (r1 | 0)) {
        break;
      }
      return;
    }
  } while (0);
  _free(HEAP32[r1 + 8 >> 2]);
  _free(HEAP32[r1 + 16 >> 2]);
  r6 = r1 | 0;
  r7 = r1 + 4 | 0;
  HEAP32[HEAP32[r7 >> 2] >> 2] = HEAP32[r6 >> 2];
  r8 = HEAP32[r6 >> 2];
  if ((r8 | 0) != 0) {
    HEAP32[r8 + 4 >> 2] = HEAP32[r7 >> 2];
  }
  _free(r1);
  if ((HEAP32[r5 >> 2] | 0) != 0) {
    return;
  }
  if ((HEAP32[r4 >> 2] | 0) != 0 | (r2 | 0) == 0) {
    return;
  }
  _otrl_context_forget(r3);
  return;
}
function _otrl_context_forget(r1) {
  var r2, r3, r4, r5, r6;
  r2 = r1 + 48 | 0;
  if ((HEAP32[r2 >> 2] | 0) != 0) {
    r3 = 1;
    return r3;
  }
  L723 : do {
    if ((HEAP32[r1 + 44 >> 2] | 0) == 0) {
      L725 : do {
        if ((r1 | 0) != 0) {
          r4 = HEAP32[r1 + 24 >> 2];
          r5 = r1;
          while (1) {
            if ((HEAP32[r5 + 24 >> 2] | 0) != (r4 | 0)) {
              break L725;
            }
            if ((HEAP32[r2 >> 2] | 0) != 0) {
              r3 = 1;
              break;
            }
            r6 = HEAP32[r5 >> 2];
            if ((r6 | 0) == 0) {
              break L725;
            } else {
              r5 = r6;
            }
          }
          return r3;
        }
      } while (0);
      r5 = r1 | 0;
      r4 = r1 + 24 | 0;
      while (1) {
        r6 = HEAP32[r5 >> 2];
        if ((r6 | 0) == 0) {
          break L723;
        }
        if ((HEAP32[r6 + 24 >> 2] | 0) != (HEAP32[r4 >> 2] | 0)) {
          break L723;
        }
        if ((_otrl_context_forget(r6) | 0) != 0) {
          r3 = 1;
          break;
        }
      }
      return r3;
    }
  } while (0);
  _otrl_context_force_plaintext(r1);
  r2 = r1 + 228 | 0;
  r4 = HEAP32[r2 >> 2];
  L739 : do {
    if ((r4 | 0) != 0) {
      r5 = r4;
      while (1) {
        _otrl_context_forget_fingerprint(r5, 0);
        r6 = HEAP32[r2 >> 2];
        if ((r6 | 0) == 0) {
          break L739;
        } else {
          r5 = r6;
        }
      }
    }
  } while (0);
  r2 = r1 + 12 | 0;
  _free(HEAP32[r2 >> 2]);
  r4 = r1 + 16 | 0;
  _free(HEAP32[r4 >> 2]);
  r5 = r1 + 20 | 0;
  _free(HEAP32[r5 >> 2]);
  r6 = r1 + 296 | 0;
  _free(HEAP32[r6 >> 2]);
  HEAP32[r2 >> 2] = 0;
  HEAP32[r4 >> 2] = 0;
  HEAP32[r5 >> 2] = 0;
  HEAP32[r6 >> 2] = 0;
  r6 = r1 + 288 | 0;
  r5 = HEAP32[r6 >> 2];
  do {
    if ((r5 | 0) != 0) {
      r4 = HEAP32[r1 + 292 >> 2];
      if ((r4 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[r4](r5);
      HEAP32[r6 >> 2] = 0;
    }
  } while (0);
  r6 = r1 | 0;
  r5 = r1 + 4 | 0;
  HEAP32[HEAP32[r5 >> 2] >> 2] = HEAP32[r6 >> 2];
  r4 = HEAP32[r6 >> 2];
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 4 >> 2] = HEAP32[r5 >> 2];
  }
  _free(r1);
  r3 = 0;
  return r3;
}
function _otrl_context_forget_all(r1) {
  var r2, r3, r4;
  r2 = (r1 | 0) >> 2;
  r1 = HEAP32[r2];
  if ((r1 | 0) == 0) {
    return;
  } else {
    r3 = r1;
  }
  while (1) {
    _otrl_context_force_plaintext(r3);
    r1 = HEAP32[r3 >> 2];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r3 = r1;
    }
  }
  r3 = HEAP32[r2];
  if ((r3 | 0) == 0) {
    return;
  } else {
    r4 = r3;
  }
  while (1) {
    _otrl_context_forget(r4);
    r3 = HEAP32[r2];
    if ((r3 | 0) == 0) {
      break;
    } else {
      r4 = r3;
    }
  }
  return;
}
function _otrl_init(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  if (!((r1 | 0) == 4 & (r2 | 0) == 0)) {
    _fprintf(HEAP32[_stderr >> 2], 473960, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r2, HEAP32[tempInt + 8 >> 2] = r3, HEAP32[tempInt + 12 >> 2] = 4, HEAP32[tempInt + 16 >> 2] = 0, HEAP32[tempInt + 20 >> 2] = 0, tempInt));
    r5 = _gcry_error70(55);
    STACKTOP = r4;
    return r5;
  }
  r6 = r2 << 8 | r1 << 16 | r3;
  r3 = HEAP32[110160];
  if ((r3 | 0) == 0 | r3 >>> 0 > r6 >>> 0) {
    HEAP32[110160] = r6;
  }
  _otrl_mem_init();
  _otrl_dh_init();
  _otrl_sm_init();
  r5 = _gcry_error70(0);
  STACKTOP = r4;
  return r5;
}
function _gcry_error70(r1) {
  return _gcry_err_make7175(r1);
}
function _otrl_proto_default_query_msg(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = STACKTOP;
  r4 = _malloc(8);
  if ((r2 & 1 | 0) == 0) {
    r5 = r4;
  } else {
    HEAP8[r4] = 63;
    r5 = r4 + 1 | 0;
  }
  r6 = (r2 & 2 | 0) != 0;
  r7 = (r2 & 4 | 0) == 0;
  if (r7 & (r6 ^ 1)) {
    r8 = r5;
  } else {
    HEAP8[r5] = 118;
    r2 = r5 + 1 | 0;
    if (r6) {
      HEAP8[r2] = 50;
      r9 = r5 + 2 | 0;
    } else {
      r9 = r2;
    }
    if (r7) {
      r10 = r9;
    } else {
      HEAP8[r9] = 51;
      r10 = r9 + 1 | 0;
    }
    HEAP8[r10] = 63;
    r8 = r10 + 1 | 0;
  }
  HEAP8[r8] = 0;
  r8 = _malloc(_strlen(r4) + _strlen(r1) + 254 | 0);
  if ((r8 | 0) == 0) {
    _free(r4);
    r10 = 0;
    STACKTOP = r3;
    return r10;
  } else {
    _sprintf(r8, 479328, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r1, tempInt));
    _free(r4);
    r10 = r8;
    STACKTOP = r3;
    return r10;
  }
}
function _otrl_proto_query_bestversion(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = 0;
  r4 = _strstr(r1, 476112);
  r1 = r4 + 4 | 0;
  L791 : do {
    if ((r1 | 0) == 0) {
      r5 = 0;
    } else {
      r6 = HEAP8[r1] << 24 >> 24 == 63;
      r7 = r6 ? r4 + 5 | 0 : r1;
      r8 = r6 & 1;
      if ((r7 | 0) == 0) {
        r5 = r8;
        break;
      }
      if (HEAP8[r7] << 24 >> 24 == 118) {
        r9 = r8;
        r10 = r7;
      } else {
        r5 = r8;
        break;
      }
      while (1) {
        r8 = r10;
        while (1) {
          r11 = r8 + 1 | 0;
          r7 = HEAP8[r11];
          if (r7 << 24 >> 24 == 0 | r7 << 24 >> 24 == 63) {
            r5 = r9;
            break L791;
          }
          r6 = r7 << 24 >> 24;
          if ((r6 | 0) == 51) {
            r3 = 664;
            break;
          } else if ((r6 | 0) == 50) {
            r3 = 663;
            break;
          } else {
            r8 = r11;
          }
        }
        if (r3 == 664) {
          r3 = 0;
          r9 = r9 | 4;
          r10 = r11;
          continue;
        } else if (r3 == 663) {
          r3 = 0;
          r9 = r9 | 2;
          r10 = r11;
          continue;
        }
      }
    }
  } while (0);
  do {
    if ((r2 & 4 | 0) != 0) {
      if ((r5 & 4 | 0) == 0) {
        break;
      } else {
        r12 = 3;
      }
      return r12;
    }
  } while (0);
  do {
    if ((r2 & 2 | 0) != 0) {
      if ((r5 & 2 | 0) == 0) {
        break;
      } else {
        r12 = 2;
      }
      return r12;
    }
  } while (0);
  do {
    if ((r2 & 1 | 0) != 0) {
      if ((r5 & 1 | 0) == 0) {
        break;
      } else {
        r12 = 1;
      }
      return r12;
    }
  } while (0);
  r12 = 0;
  return r12;
}
function _otrl_proto_whitespace_bestversion(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  HEAP32[r2 >> 2] = 0;
  HEAP32[r3 >> 2] = 0;
  r5 = _strstr(r1, 473432);
  if ((r5 | 0) == 0) {
    r6 = 0;
    return r6;
  }
  r1 = 0;
  r7 = r5 + 16 | 0;
  while (1) {
    r8 = HEAP8[r7];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = HEAP8[r7 + 1 | 0];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = HEAP8[r7 + 2 | 0];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = HEAP8[r7 + 3 | 0];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = HEAP8[r7 + 4 | 0];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = HEAP8[r7 + 5 | 0];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = HEAP8[r7 + 6 | 0];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = HEAP8[r7 + 7 | 0];
    if (!(r8 << 24 >> 24 == 32 | r8 << 24 >> 24 == 9)) {
      break;
    }
    r8 = (_strncmp(r7, 471796, 8) | 0) == 0 & 1 | r1;
    r9 = (_strncmp(r7, 470440, 8) | 0) == 0 ? r8 | 2 : r8;
    r1 = (_strncmp(r7, 468828, 8) | 0) == 0 ? r9 | 4 : r9;
    r7 = r7 + 8 | 0;
  }
  HEAP32[r2 >> 2] = r5;
  HEAP32[r3 >> 2] = r7;
  do {
    if ((r4 & 4 | 0) != 0) {
      if ((r1 & 4 | 0) == 0) {
        break;
      } else {
        r6 = 3;
      }
      return r6;
    }
  } while (0);
  do {
    if ((r4 & 2 | 0) != 0) {
      if ((r1 & 2 | 0) == 0) {
        break;
      } else {
        r6 = 2;
      }
      return r6;
    }
  } while (0);
  do {
    if ((r4 & 1 | 0) != 0) {
      if ((r1 & 1 | 0) == 0) {
        break;
      } else {
        r6 = 1;
      }
      return r6;
    }
  } while (0);
  r6 = 0;
  return r6;
}
function _otrl_proto_message_type(r1) {
  var r2, r3, r4, r5;
  r2 = 0;
  r3 = _strstr(r1, 476112);
  L845 : do {
    if ((r3 | 0) == 0) {
      r4 = (_strstr(r1, 473432) | 0) != 0 & 1;
    } else {
      do {
        if ((_strncmp(r3, 467136, 8) | 0) == 0) {
          r2 = 705;
        } else {
          if ((_strncmp(r3, 465220, 8) | 0) == 0) {
            r2 = 705;
            break;
          }
          if ((_strncmp(r3, 490580, 5) | 0) == 0) {
            r4 = 2;
            break L845;
          }
          if ((_strncmp(r3, 489420, 5) | 0) == 0) {
            r4 = 2;
            break L845;
          }
          if ((_strncmp(r3, 487976, 9) | 0) == 0) {
            r4 = 7;
            break L845;
          }
          if ((_strncmp(r3, 487264, 9) | 0) == 0) {
            r4 = 8;
            break L845;
          }
          if ((_strncmp(r3, 486360, 11) | 0) == 0) {
            r4 = 9;
            break L845;
          } else {
            break;
          }
        }
      } while (0);
      do {
        if (r2 == 705) {
          r5 = HEAP8[r3 + 8 | 0] << 24 >> 24;
          if ((r5 | 0) == 68) {
            r4 = 8;
            break L845;
          } else if ((r5 | 0) == 75) {
            r4 = 4;
            break L845;
          } else if ((r5 | 0) == 83) {
            r4 = 6;
            break L845;
          } else if ((r5 | 0) == 82) {
            r4 = 5;
            break L845;
          } else if ((r5 | 0) == 67) {
            r4 = 3;
            break L845;
          } else {
            break;
          }
        }
      } while (0);
      r4 = 10;
    }
  } while (0);
  return r4;
}
function _otrl_proto_message_version(r1) {
  var r2, r3;
  r2 = _strstr(r1, 476112);
  do {
    if ((r2 | 0) == 0) {
      r3 = 0;
    } else {
      if ((_strncmp(r2, 467136, 8) | 0) == 0) {
        r3 = 3;
        break;
      }
      if ((_strncmp(r2, 465220, 8) | 0) == 0) {
        r3 = 2;
        break;
      }
      r3 = (_strncmp(r2, 485476, 8) | 0) == 0 & 1;
    }
  } while (0);
  return r3;
}
function _otrl_proto_instance(r1, r2, r3) {
  var r4, r5, r6;
  do {
    if ((r1 | 0) != 0) {
      if ((_strncmp(r1, 467136, 8) | 0) != 0) {
        break;
      }
      if (_strlen(r1) >>> 0 < 21) {
        break;
      }
      r4 = _malloc(9);
      r5 = _otrl_base64_decode(r4, r1 + 9 | 0, 12);
      if (r5 >>> 0 < 4) {
        break;
      }
      HEAP32[r2 >> 2] = HEAPU8[r4 + 1 | 0] << 16 | HEAPU8[r4] << 24 | HEAPU8[r4 + 2 | 0] << 8 | HEAPU8[r4 + 3 | 0];
      if ((r5 - 4 | 0) >>> 0 < 4) {
        break;
      }
      HEAP32[r3 >> 2] = HEAPU8[r4 + 5 | 0] << 16 | HEAPU8[r4 + 4 | 0] << 24 | HEAPU8[r4 + 6 | 0] << 8 | HEAPU8[r4 + 7 | 0];
      _free(r4);
      r6 = _gcry_error70(0);
      return r6;
    }
  } while (0);
  r6 = _gcry_error70(55);
  return r6;
}
function _otrl_proto_create_data(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40;
  r7 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8, r10 = r9 >> 2;
  r11 = _strlen(r3);
  r12 = r11 + 1 | 0;
  r13 = r12 + _otrl_tlv_seriallen(r4) | 0;
  r14 = (r2 + 8 | 0) >> 2;
  r15 = HEAP32[r14];
  r16 = r15 + 308 | 0;
  r17 = HEAP32[r15 + 564 >> 2] * 20 & -1;
  r18 = HEAP32[r2 + 280 >> 2];
  do {
    if ((HEAP32[r2 + 48 >> 2] | 0) == 1) {
      if ((HEAP32[r15 + 12 >> 2] | 0) == 0) {
        break;
      }
      r19 = _gcry_malloc_secure(r12);
      if ((r19 | 0) == 0) {
        r20 = _gcry_error70(32854);
        STACKTOP = r8;
        return r20;
      }
      _strcpy(r19, r3);
      HEAP32[r1 >> 2] = 0;
      r21 = (r18 | 0) == 3;
      _gcry_mpi_print(5, 0, 0, r9, HEAP32[HEAP32[r14] + 36 >> 2]);
      r22 = r13 + r17 + (r21 ? 11 : 3) + ((r18 - 2 | 0) >>> 0 < 2 & 1) + HEAP32[r10] + 24 | 0;
      r23 = r22 + 24 | 0;
      r24 = _malloc(r23);
      r25 = _gcry_malloc_secure(r13);
      if ((r24 | 0) == 0 | (r25 | 0) == 0) {
        _free(r24);
        _gcry_free(r25);
        _gcry_free(r19);
        r20 = _gcry_error70(32854);
        STACKTOP = r8;
        return r20;
      }
      _memcpy(r25, r19, r11);
      HEAP8[r25 + r11 | 0] = 0;
      _otrl_tlv_serialize(r25 + r12 | 0, r4);
      if ((r18 | 0) == 2) {
        HEAP8[r24] = HEAP8[483924];
        HEAP8[r24 + 1 | 0] = HEAP8[483925 | 0];
        HEAP8[r24 + 2 | 0] = HEAP8[483926 | 0];
      } else if ((r18 | 0) == 1) {
        HEAP8[r24] = HEAP8[484540];
        HEAP8[r24 + 1 | 0] = HEAP8[484541 | 0];
        HEAP8[r24 + 2 | 0] = HEAP8[484542 | 0];
      } else {
        HEAP8[r24] = HEAP8[482976];
        HEAP8[r24 + 1 | 0] = HEAP8[482977 | 0];
        HEAP8[r24 + 2 | 0] = HEAP8[482978 | 0];
      }
      r26 = r24 + 3 | 0;
      r27 = r22 + 21 | 0;
      do {
        if (r21) {
          r28 = (r2 + 40 | 0) >> 2;
          HEAP8[r26] = HEAP32[r28] >>> 24 & 255;
          HEAP8[r24 + 4 | 0] = HEAP32[r28] >>> 16 & 255;
          HEAP8[r24 + 5 | 0] = HEAP32[r28] >>> 8 & 255;
          HEAP8[r24 + 6 | 0] = HEAP32[r28] & 255;
          r28 = (r2 + 44 | 0) >> 2;
          HEAP8[r24 + 7 | 0] = HEAP32[r28] >>> 24 & 255;
          HEAP8[r24 + 8 | 0] = HEAP32[r28] >>> 16 & 255;
          HEAP8[r24 + 9 | 0] = HEAP32[r28] >>> 8 & 255;
          HEAP8[r24 + 10 | 0] = HEAP32[r28] & 255;
          r29 = r22 + 13 | 0;
          r30 = r24 + 11 | 0;
          r7 = 746;
          break;
        } else {
          if ((r18 - 2 | 0) >>> 0 < 2) {
            r29 = r27;
            r30 = r26;
            r7 = 746;
            break;
          } else {
            r31 = r26;
            r32 = r27;
            break;
          }
        }
      } while (0);
      if (r7 == 746) {
        HEAP8[r30] = r5;
        r31 = r30 + 1 | 0;
        r32 = r29 - 1 | 0;
      }
      HEAP8[r31] = (HEAP32[HEAP32[r14] + 24 >> 2] - 1 | 0) >>> 24 & 255;
      HEAP8[r31 + 1 | 0] = (HEAP32[HEAP32[r14] + 24 >> 2] + 16777215 | 0) >>> 16 & 255;
      HEAP8[r31 + 2 | 0] = (HEAP32[HEAP32[r14] + 24 >> 2] + 65535 | 0) >>> 8 & 255;
      HEAP8[r31 + 3 | 0] = HEAP32[HEAP32[r14] + 24 >> 2] + 255 & 255;
      HEAP8[r31 + 4 | 0] = HEAP32[HEAP32[r14] + 12 >> 2] >>> 24 & 255;
      HEAP8[r31 + 5 | 0] = HEAP32[HEAP32[r14] + 12 >> 2] >>> 16 & 255;
      HEAP8[r31 + 6 | 0] = HEAP32[HEAP32[r14] + 12 >> 2] >>> 8 & 255;
      HEAP8[r31 + 7 | 0] = HEAP32[HEAP32[r14] + 12 >> 2] & 255;
      HEAP8[r31 + 8 | 0] = HEAP32[r10] >>> 24 & 255;
      HEAP8[r31 + 9 | 0] = HEAP32[r10] >>> 16 & 255;
      HEAP8[r31 + 10 | 0] = HEAP32[r10] >>> 8 & 255;
      HEAP8[r31 + 11 | 0] = HEAP32[r10] & 255;
      r27 = r32 - 12 | 0;
      _gcry_mpi_print(5, r31 + 12 | 0, r27, 0, HEAP32[HEAP32[r14] + 36 >> 2]);
      r26 = HEAP32[r10];
      r21 = r16 | 0;
      _otrl_dh_incctr(r21);
      r28 = r16;
      r33 = r26 + (r31 + 12) | 0;
      r34 = r28 | 0;
      r35 = r28 + 4 | 0;
      r28 = HEAPU8[r35] | HEAPU8[r35 + 1 | 0] << 8 | HEAPU8[r35 + 2 | 0] << 16 | HEAPU8[r35 + 3 | 0] << 24 | 0;
      r35 = r33 | 0;
      tempBigInt = HEAPU8[r34] | HEAPU8[r34 + 1 | 0] << 8 | HEAPU8[r34 + 2 | 0] << 16 | HEAPU8[r34 + 3 | 0] << 24 | 0;
      HEAP8[r35] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r35 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r35 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r35 + 3 | 0] = tempBigInt & 255;
      r35 = r33 + 4 | 0;
      tempBigInt = r28;
      HEAP8[r35] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r35 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r35 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r35 + 3 | 0] = tempBigInt & 255;
      HEAP8[r26 + (r31 + 20) | 0] = r13 >>> 24 & 255;
      HEAP8[r26 + (r31 + 21) | 0] = r13 >>> 16 & 255;
      HEAP8[r26 + (r31 + 22) | 0] = r13 >>> 8 & 255;
      HEAP8[r26 + (r31 + 23) | 0] = r13 & 255;
      r35 = r26 + 24 | 0;
      r28 = r31 + r35 | 0;
      r33 = (r15 + 340 | 0) >> 2;
      r34 = _gcry_cipher_ctl(HEAP32[r33], 4, 0, 0);
      do {
        if ((r34 | 0) == 0) {
          r36 = _gcry_cipher_setctr(HEAP32[r33], r21, 16);
          if ((r36 | 0) != 0) {
            r37 = r36;
            break;
          }
          r36 = _gcry_cipher_encrypt(HEAP32[r33], r28, r13, r25, r13);
          if ((r36 | 0) != 0) {
            r37 = r36;
            break;
          }
          r36 = r35 + r13 | 0;
          r38 = r31 + r36 | 0;
          r39 = (r15 + 348 | 0) >> 2;
          _gcry_md_reset(HEAP32[r39]);
          _gcry_md_write(HEAP32[r39], r24, r38 - r24 | 0);
          _memmove(r38, _gcry_md_read(HEAP32[r39], 2), 20, 1, 0);
          HEAP8[r36 + (r31 + 20) | 0] = r17 >>> 24 & 255;
          HEAP8[r36 + (r31 + 21) | 0] = r17 >>> 16 & 255;
          HEAP8[r36 + (r31 + 22) | 0] = r17 >>> 8 & 255;
          HEAP8[r36 + (r31 + 23) | 0] = r17 & 255;
          r39 = -36 - r13 + r27 - r26 | 0;
          if ((r17 | 0) == 0) {
            r40 = r39;
          } else {
            _memmove(r36 + (r31 + 24) | 0, HEAP32[HEAP32[r14] + 568 >> 2], r17, 1, 0);
            _free(HEAP32[HEAP32[r14] + 568 >> 2]);
            HEAP32[HEAP32[r14] + 568 >> 2] = 0;
            HEAP32[HEAP32[r14] + 564 >> 2] = 0;
            r40 = r39 - r17 | 0;
          }
          if ((r40 | 0) != 0) {
            ___assert_func(482280, 600, 493972, 481780);
          }
          r39 = Math.floor(((r22 + 26 | 0) >>> 0) / 3) << 2;
          r36 = _malloc(r39 + 7 | 0);
          if ((r36 | 0) == 0) {
            r37 = _gcry_error70(32854);
            break;
          }
          HEAP8[r36] = HEAP8[480640];
          HEAP8[r36 + 1 | 0] = HEAP8[480641 | 0];
          HEAP8[r36 + 2 | 0] = HEAP8[480642 | 0];
          HEAP8[r36 + 3 | 0] = HEAP8[480643 | 0];
          HEAP8[r36 + 4 | 0] = HEAP8[480644 | 0];
          _otrl_base64_encode(r36 + 5 | 0, r24, r23);
          HEAP8[r39 + (r36 + 5) | 0] = 46;
          HEAP8[r39 + (r36 + 6) | 0] = 0;
          _free(r24);
          _gcry_free(r25);
          HEAP32[r1 >> 2] = r36;
          _gcry_free(HEAP32[HEAP32[r14] + 584 >> 2]);
          HEAP32[HEAP32[r14] + 584 >> 2] = 0;
          HEAP32[HEAP32[r14] + 588 >> 2] = 0;
          do {
            if ((r13 | 0) != 0) {
              r36 = _gcry_malloc_secure(r12);
              HEAP32[HEAP32[r14] + 584 >> 2] = r36;
              r36 = HEAP32[HEAP32[r14] + 584 >> 2];
              if ((r36 | 0) == 0) {
                break;
              }
              _strcpy(r36, r19);
            }
          } while (0);
          _gcry_free(r19);
          if ((r6 | 0) != 0) {
            _memmove(r6, r15 + 404 | 0, 32, 1, 0);
          }
          r20 = _gcry_error70(0);
          STACKTOP = r8;
          return r20;
        } else {
          r37 = r34;
        }
      } while (0);
      _free(r24);
      _gcry_free(r25);
      _gcry_free(r19);
      HEAP32[r1 >> 2] = 0;
      r20 = r37;
      STACKTOP = r8;
      return r20;
    }
  } while (0);
  r20 = _gcry_error70(70);
  STACKTOP = r8;
  return r20;
}
function _otrl_proto_data_read_flags(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r3 = (r2 | 0) != 0;
  if (r3) {
    HEAP8[r2] = 0;
  }
  r4 = _strstr(r1, 480640);
  L932 : do {
    if ((r4 | 0) == 0) {
      r5 = 0;
    } else {
      r1 = _strchr(r4, 46);
      if ((r1 | 0) == 0) {
        r6 = _strlen(r4);
      } else {
        r6 = r1 - r4 | 0;
      }
      r1 = ((r6 - 2 | 0) >>> 2) * 3 & -1;
      r7 = _malloc(r1);
      if (!((r7 | 0) != 0 | (r1 | 0) == 0)) {
        r8 = _gcry_error70(32854);
        return r8;
      }
      r1 = _otrl_base64_decode(r7, r4 + 5 | 0, r6 - 5 | 0);
      if (r1 >>> 0 < 3) {
        r5 = r7;
        break;
      }
      r9 = HEAP8[r7 + 1 | 0];
      if (HEAP8[r7] << 24 >> 24 != 0) {
        r5 = r7;
        break;
      }
      if (HEAP8[r7 + 2 | 0] << 24 >> 24 != 3) {
        r5 = r7;
        break;
      }
      if ((r9 - 1 & 255) >= 3) {
        r5 = r7;
        break;
      }
      r10 = r7 + 3 | 0;
      r11 = r1 - 3 | 0;
      if (r9 << 24 >> 24 == 3) {
        if (r11 >>> 0 < 8) {
          r5 = r7;
          break;
        }
        r12 = r1 - 11 | 0;
        r13 = r7 + 11 | 0;
      } else {
        r12 = r11;
        r13 = r10;
      }
      do {
        if ((r9 - 2 & 255) < 2) {
          if ((r12 | 0) == 0) {
            r5 = r7;
            break L932;
          }
          if (!r3) {
            break;
          }
          HEAP8[r2] = HEAP8[r13];
        }
      } while (0);
      _free(r7);
      r8 = _gcry_error70(0);
      return r8;
    }
  } while (0);
  _free(r5);
  r8 = _gcry_error70(55);
  return r8;
}
function _otrl_proto_accept_data(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45;
  r7 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r9 = r8, r10 = r9 >> 2;
  r11 = r8 + 4, r12 = r11 >> 2;
  r13 = r8 + 12;
  HEAP32[r10] = 0;
  HEAP32[r1 >> 2] = 0;
  HEAP32[r2 >> 2] = 0;
  r14 = (r5 | 0) != 0;
  if (r14) {
    HEAP8[r5] = 0;
  }
  r15 = _strstr(r4, 480640);
  L962 : do {
    if ((r15 | 0) == 0) {
      r16 = 0;
      r17 = 0;
      r7 = 849;
    } else {
      r4 = _strchr(r15, 46);
      if ((r4 | 0) == 0) {
        r18 = _strlen(r15);
      } else {
        r18 = r4 - r15 | 0;
      }
      r4 = ((r18 - 2 | 0) >>> 2) * 3 & -1;
      r19 = _malloc(r4);
      if (!((r19 | 0) != 0 | (r4 | 0) == 0)) {
        r20 = _gcry_error70(32854);
        r21 = 0;
        r22 = r19;
        break;
      }
      r4 = _otrl_base64_decode(r19, r15 + 5 | 0, r18 - 5 | 0);
      if (r4 >>> 0 < 3) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r23 = HEAP8[r19 + 1 | 0];
      if (HEAP8[r19] << 24 >> 24 != 0) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      if (HEAP8[r19 + 2 | 0] << 24 >> 24 != 3) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      if ((r23 - 1 & 255) >= 3) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r24 = r19 + 3 | 0;
      r25 = r4 - 3 | 0;
      if (r23 << 24 >> 24 == 3) {
        if (r25 >>> 0 < 8) {
          r16 = 0;
          r17 = r19;
          r7 = 849;
          break;
        }
        r26 = r4 - 11 | 0;
        r27 = r19 + 11 | 0;
      } else {
        r26 = r25;
        r27 = r24;
      }
      if ((r23 - 2 & 255) < 2) {
        if ((r26 | 0) == 0) {
          r16 = 0;
          r17 = r19;
          r7 = 849;
          break;
        }
        if (r14) {
          HEAP8[r5] = HEAP8[r27];
        }
        r28 = r26 - 1 | 0;
        r29 = r27 + 1 | 0;
      } else {
        r28 = r26;
        r29 = r27;
      }
      if (r28 >>> 0 < 4) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r23 = HEAPU8[r29 + 1 | 0] << 16 | HEAPU8[r29] << 24 | HEAPU8[r29 + 2 | 0] << 8 | HEAPU8[r29 + 3 | 0];
      if ((r28 - 4 | 0) >>> 0 < 4) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r24 = HEAPU8[r29 + 5 | 0] << 16 | HEAPU8[r29 + 4 | 0] << 24 | HEAPU8[r29 + 6 | 0] << 8 | HEAPU8[r29 + 7 | 0];
      if ((r28 - 8 | 0) >>> 0 < 4) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r25 = HEAPU8[r29 + 9 | 0] << 16 | HEAPU8[r29 + 8 | 0] << 24 | HEAPU8[r29 + 10 | 0] << 8 | HEAPU8[r29 + 11 | 0];
      r4 = r29 + 12 | 0;
      r30 = r28 - 12 | 0;
      if ((r25 | 0) == 0) {
        HEAP32[r10] = _gcry_mpi_set_ui(0, 0);
      } else {
        if (r30 >>> 0 < r25 >>> 0) {
          r16 = 0;
          r17 = r19;
          r7 = 849;
          break;
        }
        _gcry_mpi_scan(r9, 5, r4, r25, 0);
      }
      r4 = r30 - r25 | 0;
      if (r4 >>> 0 < 8) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r30 = r11;
      r31 = r25 + (r29 + 12) | 0;
      r32 = r31 | 0;
      r33 = r31 + 4 | 0;
      r31 = HEAPU8[r33] | HEAPU8[r33 + 1 | 0] << 8 | HEAPU8[r33 + 2 | 0] << 16 | HEAPU8[r33 + 3 | 0] << 24 | 0;
      HEAP32[r12] = HEAPU8[r32] | HEAPU8[r32 + 1 | 0] << 8 | HEAPU8[r32 + 2 | 0] << 16 | HEAPU8[r32 + 3 | 0] << 24 | 0;
      HEAP32[r12 + 1] = r31;
      if ((r4 - 8 | 0) >>> 0 < 4) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r31 = HEAPU8[r25 + (r29 + 21) | 0] << 16 | HEAPU8[r25 + (r29 + 20) | 0] << 24 | HEAPU8[r25 + (r29 + 22) | 0] << 8 | HEAPU8[r25 + (r29 + 23) | 0];
      r32 = r25 + 24 | 0;
      r25 = r4 - 12 | 0;
      if (r25 >>> 0 < r31 >>> 0) {
        r16 = 0;
        r17 = r19;
        r7 = 849;
        break;
      }
      r4 = _malloc(r31 + 1 | 0);
      if ((r4 | 0) == 0) {
        r20 = _gcry_error70(32854);
        r21 = 0;
        r22 = r19;
        break;
      }
      _memmove(r4, r29 + r32 | 0, r31, 1, 0);
      r33 = r4 + r31 | 0;
      HEAP8[r33] = 0;
      r34 = r31 + r32 | 0;
      r32 = r29 + r34 | 0;
      r35 = r25 - r31 | 0;
      if (r35 >>> 0 < 20) {
        r16 = r4;
        r17 = r19;
        r7 = 849;
        break;
      }
      r25 = r13 | 0;
      _memmove(r25, r32, 20, 1, 0);
      if ((r35 - 20 | 0) >>> 0 < 4) {
        r16 = r4;
        r17 = r19;
        r7 = 849;
        break;
      }
      if ((r35 - 24 | 0) != (HEAPU8[r34 + (r29 + 21) | 0] << 16 | HEAPU8[r34 + (r29 + 20) | 0] << 24 | HEAPU8[r34 + (r29 + 22) | 0] << 8 | HEAPU8[r34 + (r29 + 23) | 0] | 0)) {
        r16 = r4;
        r17 = r19;
        r7 = 849;
        break;
      }
      r34 = (r3 + 8 | 0) >> 2;
      r35 = HEAP32[r34] >> 2;
      r36 = HEAP32[r35 + 3];
      do {
        if ((r36 | 0) != 0) {
          r37 = (r23 | 0) == (r36 - 1 | 0);
          if (!((r23 | 0) == (r36 | 0) | r37)) {
            break;
          }
          r38 = HEAP32[r35 + 6];
          if ((r24 | 0) != (r38 - 1 | 0) & (r24 | 0) != (r38 | 0) | (r23 | 0) == 0 | (r24 | 0) == 0) {
            break;
          }
          if (r37) {
            if ((HEAP32[r35 + 5] | 0) == 0) {
              break;
            }
          }
          r37 = HEAP32[r34], r38 = r37 >> 2;
          r39 = HEAP32[r38 + 3] - r23 | 0;
          r40 = HEAP32[r38 + 6] - r24 | 0;
          r41 = ((r40 << 8) + (r39 << 7) + r37 + 120 | 0) >> 2;
          _gcry_md_reset(HEAP32[r41]);
          _gcry_md_write(HEAP32[r41], r19, r32 - r19 | 0);
          if ((_memcmp(r25, _gcry_md_read(HEAP32[r41], 2), 20) | 0) != 0) {
            break;
          }
          HEAP32[((r40 << 8) + (r39 << 7) + 144 >> 2) + r38] = 1;
          r38 = (r40 << 8) + (r39 << 7) + r37 + 68 | 0;
          if ((_otrl_dh_cmpctr(r30, r38) | 0) < 1) {
            break;
          }
          r41 = r38;
          r42 = HEAP32[r12 + 1];
          r43 = r41 | 0;
          tempBigInt = HEAP32[r12];
          HEAP8[r43] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r43 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r43 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r43 + 3 | 0] = tempBigInt & 255;
          r43 = r41 + 4 | 0;
          tempBigInt = r42;
          HEAP8[r43] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r43 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r43 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r43 + 3 | 0] = tempBigInt & 255;
          r43 = ((r40 << 8) + (r39 << 7) + r37 + 88 | 0) >> 2;
          r42 = _gcry_cipher_ctl(HEAP32[r43], 4, 0, 0);
          if ((r42 | 0) != 0) {
            r20 = r42;
            r21 = r4;
            r22 = r19;
            break L962;
          }
          r42 = _gcry_cipher_setctr(HEAP32[r43], r38, 16);
          if ((r42 | 0) != 0) {
            r20 = r42;
            r21 = r4;
            r22 = r19;
            break L962;
          }
          r42 = _gcry_cipher_decrypt(HEAP32[r43], r4, r31, 0, 0);
          if ((r42 | 0) != 0) {
            r20 = r42;
            r21 = r4;
            r22 = r19;
            break L962;
          }
          if ((r6 | 0) != 0) {
            _memmove(r6, (r40 << 8) + (r39 << 7) + r37 + 148 | 0, 32, 1, 0);
          }
          if ((r24 | 0) == (HEAP32[HEAP32[r34] + 24 >> 2] | 0)) {
            r37 = _rotate_dh_keys(r3);
            if ((r37 | 0) != 0) {
              r20 = r37;
              r21 = r4;
              r22 = r19;
              break L962;
            }
          }
          if ((r23 | 0) == (HEAP32[HEAP32[r34] + 12 >> 2] | 0)) {
            r37 = _rotate_y_keys(r3, HEAP32[r10]);
            if ((r37 | 0) != 0) {
              r20 = r37;
              r21 = r4;
              r22 = r19;
              break L962;
            }
          }
          _gcry_mpi_release(HEAP32[r10]);
          HEAP32[r1 >> 2] = r4;
          r37 = r4;
          while (1) {
            r44 = r37 >>> 0 < r33 >>> 0;
            if (!r44) {
              break;
            }
            if (HEAP8[r37] << 24 >> 24 == 0) {
              break;
            } else {
              r37 = r37 + 1 | 0;
            }
          }
          r39 = r44 ? r37 + 1 | 0 : r37;
          HEAP32[r2 >> 2] = _otrl_tlv_parse(r39, r33 - r39 | 0);
          _free(r19);
          r45 = _gcry_error70(0);
          STACKTOP = r8;
          return r45;
        }
      } while (0);
      r20 = _gcry_error70(70);
      r21 = r4;
      r22 = r19;
      break;
    }
  } while (0);
  if (r7 == 849) {
    r20 = _gcry_error70(55);
    r21 = r16;
    r22 = r17;
  }
  _gcry_mpi_release(HEAP32[r10]);
  _free(r21);
  _free(r22);
  r45 = r20;
  STACKTOP = r8;
  return r45;
}
function _rotate_dh_keys(r1) {
  var r2, r3, r4, r5, r6;
  r2 = (r1 + 8 | 0) >> 2;
  _otrl_dh_keypair_free(HEAP32[r2] + 40 | 0);
  r3 = HEAP32[r2];
  r4 = (r3 + 40 | 0) >> 2;
  r5 = (r3 + 28 | 0) >> 2;
  HEAP32[r4] = HEAP32[r5];
  HEAP32[r4 + 1] = HEAP32[r5 + 1];
  HEAP32[r4 + 2] = HEAP32[r5 + 2];
  r5 = HEAP32[r2];
  r4 = _reveal_macs(r1, r5 + 308 | 0, r5 + 436 | 0);
  if ((r4 | 0) != 0) {
    r6 = r4;
    return r6;
  }
  _otrl_dh_session_free(HEAP32[r2] + 308 | 0);
  _otrl_dh_session_free(HEAP32[r2] + 436 | 0);
  r4 = HEAP32[r2];
  _memcpy(r4 + 308 | 0, r4 + 52 | 0, 128);
  r4 = HEAP32[r2];
  _memcpy(r4 + 436 | 0, r4 + 180 | 0, 128);
  _otrl_dh_gen_keypair(5, HEAP32[r2] + 28 | 0);
  r4 = HEAP32[r2] + 24 | 0;
  HEAP32[r4 >> 2] = HEAP32[r4 >> 2] + 1 | 0;
  r4 = HEAP32[r2];
  r5 = HEAP32[r4 + 16 >> 2];
  r1 = r4 + 52 | 0;
  do {
    if ((r5 | 0) == 0) {
      _otrl_dh_session_blank(r1);
    } else {
      r3 = _otrl_dh_session(r1, r4 + 28 | 0, r5);
      if ((r3 | 0) == 0) {
        break;
      } else {
        r6 = r3;
      }
      return r6;
    }
  } while (0);
  r5 = HEAP32[r2];
  r2 = HEAP32[r5 + 20 >> 2];
  r4 = r5 + 180 | 0;
  do {
    if ((r2 | 0) == 0) {
      _otrl_dh_session_blank(r4);
    } else {
      r1 = _otrl_dh_session(r4, r5 + 28 | 0, r2);
      if ((r1 | 0) == 0) {
        break;
      } else {
        r6 = r1;
      }
      return r6;
    }
  } while (0);
  r6 = _gcry_error70(0);
  return r6;
}
function _rotate_y_keys(r1, r2) {
  var r3, r4, r5, r6;
  r3 = (r1 + 8 | 0) >> 2;
  _gcry_mpi_release(HEAP32[HEAP32[r3] + 20 >> 2]);
  r4 = HEAP32[r3];
  HEAP32[r4 + 20 >> 2] = HEAP32[r4 + 16 >> 2];
  r4 = HEAP32[r3];
  r5 = _reveal_macs(r1, r4 + 180 | 0, r4 + 436 | 0);
  if ((r5 | 0) != 0) {
    r6 = r5;
    return r6;
  }
  _otrl_dh_session_free(HEAP32[r3] + 180 | 0);
  _otrl_dh_session_free(HEAP32[r3] + 436 | 0);
  r5 = HEAP32[r3];
  _memcpy(r5 + 180 | 0, r5 + 52 | 0, 128);
  r5 = HEAP32[r3];
  _memcpy(r5 + 436 | 0, r5 + 308 | 0, 128);
  r5 = _gcry_mpi_copy(r2);
  HEAP32[HEAP32[r3] + 16 >> 2] = r5;
  r5 = HEAP32[r3] + 12 | 0;
  HEAP32[r5 >> 2] = HEAP32[r5 >> 2] + 1 | 0;
  r5 = HEAP32[r3];
  r2 = _otrl_dh_session(r5 + 52 | 0, r5 + 28 | 0, HEAP32[r5 + 16 >> 2]);
  if ((r2 | 0) != 0) {
    r6 = r2;
    return r6;
  }
  r2 = HEAP32[r3];
  r3 = _otrl_dh_session(r2 + 308 | 0, r2 + 40 | 0, HEAP32[r2 + 16 >> 2]);
  if ((r3 | 0) != 0) {
    r6 = r3;
    return r6;
  }
  r6 = _gcry_error70(0);
  return r6;
}
function _otrl_proto_fragment_accumulate(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r4, r6 = r5 >> 1;
  r7 = r4 + 4, r8 = r7 >> 1;
  r9 = r4 + 8, r10 = r9 >> 2;
  r11 = r4 + 12;
  HEAP16[r6] = 0;
  HEAP16[r8] = 0;
  HEAP32[r10] = 0;
  HEAP32[r11 >> 2] = 0;
  r12 = _strstr(r3, 480116);
  do {
    if ((r12 | 0) == 0) {
      r13 = _strstr(r3, 479296);
      if ((r13 | 0) != 0) {
        _sscanf(r13, 479004, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r5, HEAP32[tempInt + 8 >> 2] = r9, HEAP32[tempInt + 12 >> 2] = r11, tempInt));
        r14 = r13;
        break;
      }
      r13 = (r2 + 8 | 0) >> 2;
      _free(HEAP32[HEAP32[r13] >> 2]);
      HEAP32[HEAP32[r13] >> 2] = 0;
      HEAP32[HEAP32[r13] + 4 >> 2] = 0;
      HEAP16[HEAP32[r13] + 8 >> 1] = 0;
      HEAP16[HEAP32[r13] + 10 >> 1] = 0;
      r15 = 0;
      STACKTOP = r4;
      return r15;
    } else {
      _sscanf(r12, 479872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r7, HEAP32[tempInt + 4 >> 2] = r5, HEAP32[tempInt + 8 >> 2] = r9, HEAP32[tempInt + 12 >> 2] = r11, tempInt));
      r14 = r12;
    }
  } while (0);
  r12 = HEAP16[r8];
  r9 = r12 & 65535;
  L1069 : do {
    if (r12 << 16 >> 16 != 0) {
      r5 = HEAP16[r6];
      if (r5 << 16 >> 16 == 0 | (r12 & 65535) > (r5 & 65535)) {
        break;
      }
      r7 = HEAP32[r10];
      if ((r7 | 0) <= 0) {
        break;
      }
      r3 = HEAP32[r11 >> 2];
      if (!((r3 | 0) > 0 & (r7 | 0) < (r3 | 0))) {
        break;
      }
      if (r12 << 16 >> 16 == 1) {
        r13 = r3 - r7 | 0;
        r16 = r13 - 1 | 0;
        r17 = (r2 + 8 | 0) >> 2;
        _free(HEAP32[HEAP32[r17] >> 2]);
        HEAP32[HEAP32[r17] >> 2] = 0;
        if ((r3 | 0) != (r7 | 0)) {
          r18 = _malloc(r13);
          HEAP32[HEAP32[r17] >> 2] = r18;
        }
        r18 = HEAP32[r17];
        r13 = HEAP32[r18 >> 2];
        if ((r13 | 0) == 0) {
          HEAP32[r18 + 4 >> 2] = 0;
          HEAP16[HEAP32[r17] + 8 >> 1] = 0;
          HEAP16[HEAP32[r17] + 10 >> 1] = 0;
          break;
        } else {
          _memmove(r13, r14 + HEAP32[r10] | 0, r16, 1, 0);
          HEAP32[HEAP32[r17] + 4 >> 2] = r16;
          r16 = HEAP32[r17];
          HEAP8[HEAP32[r16 >> 2] + HEAP32[r16 + 4 >> 2] | 0] = 0;
          HEAP16[HEAP32[r17] + 8 >> 1] = HEAP16[r6];
          HEAP16[HEAP32[r17] + 10 >> 1] = HEAP16[r8];
          break;
        }
      }
      r17 = (r2 + 8 | 0) >> 2;
      r16 = HEAP32[r17];
      do {
        if (r5 << 16 >> 16 == HEAP16[r16 + 8 >> 1] << 16 >> 16) {
          if ((r9 | 0) != (HEAPU16[r16 + 10 >> 1] + 1 | 0)) {
            break;
          }
          r13 = r3 - r7 | 0;
          r18 = r13 - 1 | 0;
          r19 = HEAP32[r16 + 4 >> 2];
          r20 = r19 + r13 | 0;
          do {
            if (r20 >>> 0 > r19 >>> 0) {
              r13 = _realloc(HEAP32[r16 >> 2], r20);
              r21 = HEAP32[r17] | 0;
              if ((r13 | 0) == 0) {
                r22 = r21;
                break;
              }
              HEAP32[r21 >> 2] = r13;
              r13 = HEAP32[r17];
              _memmove(HEAP32[r13 >> 2] + HEAP32[r13 + 4 >> 2] | 0, r14 + HEAP32[r10] | 0, r18, 1, 0);
              r13 = HEAP32[r17] + 4 | 0;
              HEAP32[r13 >> 2] = HEAP32[r13 >> 2] + r18 | 0;
              r13 = HEAP32[r17];
              HEAP8[HEAP32[r13 >> 2] + HEAP32[r13 + 4 >> 2] | 0] = 0;
              HEAP16[HEAP32[r17] + 10 >> 1] = HEAP16[r8];
              break L1069;
            } else {
              r22 = HEAP32[r17] | 0;
            }
          } while (0);
          _free(HEAP32[r22 >> 2]);
          HEAP32[HEAP32[r17] >> 2] = 0;
          HEAP32[HEAP32[r17] + 4 >> 2] = 0;
          HEAP16[HEAP32[r17] + 8 >> 1] = 0;
          HEAP16[HEAP32[r17] + 10 >> 1] = 0;
          break L1069;
        }
      } while (0);
      _free(HEAP32[HEAP32[r17] >> 2]);
      HEAP32[HEAP32[r17] >> 2] = 0;
      HEAP32[HEAP32[r17] + 4 >> 2] = 0;
      HEAP16[HEAP32[r17] + 8 >> 1] = 0;
      HEAP16[HEAP32[r17] + 10 >> 1] = 0;
    }
  } while (0);
  r22 = (r2 + 8 | 0) >> 2;
  r2 = HEAP32[r22];
  r8 = HEAP16[r2 + 8 >> 1];
  if (r8 << 16 >> 16 == 0) {
    r15 = 1;
    STACKTOP = r4;
    return r15;
  }
  if (r8 << 16 >> 16 != HEAP16[r2 + 10 >> 1] << 16 >> 16) {
    r15 = 1;
    STACKTOP = r4;
    return r15;
  }
  HEAP32[r1 >> 2] = HEAP32[r2 >> 2];
  HEAP32[HEAP32[r22] >> 2] = 0;
  HEAP32[HEAP32[r22] + 4 >> 2] = 0;
  HEAP16[HEAP32[r22] + 8 >> 1] = 0;
  HEAP16[HEAP32[r22] + 10 >> 1] = 0;
  r15 = 2;
  STACKTOP = r4;
  return r15;
}
function _gpg_err_make7276(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function _encodeblock(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = HEAP8[r2];
  r5 = r3 >>> 0 > 1;
  do {
    if (r5) {
      r6 = HEAPU8[r2 + 1 | 0];
      if (r3 >>> 0 <= 2) {
        r7 = 0;
        r8 = r6;
        r9 = 0;
        break;
      }
      r7 = HEAPU8[r2 + 2 | 0];
      r8 = r6;
      r9 = 1;
    } else {
      r7 = 0;
      r8 = 0;
      r9 = 0;
    }
  } while (0);
  r2 = r4 & 255;
  HEAP8[r1] = HEAP8[(r2 >>> 2) + 459844 | 0];
  HEAP8[r1 + 1 | 0] = HEAP8[(r8 >>> 4 | r2 << 4 & 48) + 459844 | 0];
  if (r5) {
    r10 = HEAP8[(r8 << 2 & 60 | r7 >>> 6) + 459844 | 0];
  } else {
    r10 = 61;
  }
  HEAP8[r1 + 2 | 0] = r10;
  if (!r9) {
    r11 = 61;
    r12 = r1 + 3 | 0;
    HEAP8[r12] = r11;
    return;
  }
  r11 = HEAP8[(r7 & 63) + 459844 | 0];
  r12 = r1 + 3 | 0;
  HEAP8[r12] = r11;
  return;
}
function _decode(r1, r2, r3) {
  var r4, r5, r6;
  if (r3 >>> 0 < 2) {
    r4 = 0;
    return r4;
  }
  r5 = r2 + 1 | 0;
  HEAP8[r1] = (HEAP8[r5] << 24 >> 24 >>> 4 | HEAP8[r2] << 2 & 255) & 255;
  if (r3 >>> 0 <= 2) {
    r4 = 1;
    return r4;
  }
  r6 = r2 + 2 | 0;
  HEAP8[r1 + 1 | 0] = (HEAP8[r6] << 24 >> 24 >>> 2 | HEAP8[r5] << 4 & 255) & 255;
  if (r3 >>> 0 <= 3) {
    r4 = 2;
    return r4;
  }
  HEAP8[r1 + 2 | 0] = HEAP8[r6] << 6 | HEAP8[r2 + 3 | 0];
  r4 = 3;
  return r4;
}
function _otrl_dh_keypair_init(r1) {
  HEAP32[r1 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  HEAP32[r1 + 8 >> 2] = 0;
  return;
}
function _otrl_proto_fragment_create(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r6 = 0;
  r7 = STACKTOP;
  r8 = _strlen(r5);
  r9 = (HEAP32[r4 + 280 >> 2] | 0) == 3 ? 37 : 19;
  r10 = _malloc(r2 << 2);
  r11 = r10, r12 = r11 >> 2;
  if ((r10 | 0) == 0) {
    r13 = _gcry_error70(32854);
    STACKTOP = r7;
    return r13;
  }
  L1133 : do {
    if ((r2 | 0) >= 1) {
      r14 = r1 - r9 | 0;
      r15 = r4 + 188 | 0;
      r16 = r4 + 40 | 0;
      r17 = r4 + 44 | 0;
      r18 = 0;
      r19 = 1;
      r20 = r5;
      r21 = 1;
      while (1) {
        r22 = r8 - r18 | 0;
        r23 = (r22 | 0) < (r14 | 0) ? r22 : r14;
        r24 = _malloc(r23 + 1 | 0);
        if ((r24 | 0) == 0) {
          r6 = 936;
          break;
        }
        _strncpy(r24, r20, r23);
        HEAP8[r24 + r23 | 0] = 0;
        r22 = r23 + r9 | 0;
        r25 = _malloc(r22 + 1 | 0);
        if ((r25 | 0) == 0) {
          r6 = 941;
          break;
        }
        if ((HEAP32[r15 >> 2] | 0) == 3) {
          r26 = HEAP32[r17 >> 2];
          _snprintf(r25, r22, 478328, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = HEAP32[r16 >> 2], HEAP32[tempInt + 4 >> 2] = r26, HEAP32[tempInt + 8 >> 2] = r21, HEAP32[tempInt + 12 >> 2] = r2, HEAP32[tempInt + 16 >> 2] = r24, tempInt));
        } else {
          _snprintf(r25, r22, 478648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r21, HEAP32[tempInt + 4 >> 2] = r2, HEAP32[tempInt + 8 >> 2] = r24, tempInt));
        }
        HEAP8[r25 + r22 | 0] = 0;
        HEAP32[(r21 - 1 << 2 >> 2) + r12] = r25;
        _free(r24);
        r25 = r19 + 1 & 65535;
        r22 = r25 & 65535;
        if ((r22 | 0) > (r2 | 0)) {
          break L1133;
        } else {
          r18 = r23 + r18 | 0;
          r19 = r25;
          r20 = r20 + r23 | 0;
          r21 = r22;
        }
      }
      if (r6 == 941) {
        L1145 : do {
          if ((r21 - 1 | 0) > 0) {
            r20 = r21 - 1 | 0;
            r19 = 0;
            while (1) {
              r18 = r19 + 1 | 0;
              _free(HEAP32[(r19 << 2 >> 2) + r12]);
              if ((r18 | 0) == (r20 | 0)) {
                break L1145;
              } else {
                r19 = r18;
              }
            }
          }
        } while (0);
        _free(r10);
        _free(r24);
        r13 = _gcry_error70(32854);
        STACKTOP = r7;
        return r13;
      } else if (r6 == 936) {
        L1152 : do {
          if ((r21 - 1 | 0) > 0) {
            r19 = r21 - 1 | 0;
            r20 = 0;
            while (1) {
              r18 = r20 + 1 | 0;
              _free(HEAP32[(r20 << 2 >> 2) + r12]);
              if ((r18 | 0) == (r19 | 0)) {
                break L1152;
              } else {
                r20 = r18;
              }
            }
          }
        } while (0);
        _free(r10);
        r13 = _gcry_error70(32854);
        STACKTOP = r7;
        return r13;
      }
    }
  } while (0);
  HEAP32[r3 >> 2] = r11;
  r13 = _gcry_error70(0);
  STACKTOP = r7;
  return r13;
}
function _otrl_proto_fragment_free(r1, r2) {
  var r3, r4, r5;
  r3 = HEAP32[r1 >> 2];
  if ((r3 | 0) == 0) {
    return;
  }
  r1 = r2 & 65535;
  L1164 : do {
    if (r2 << 16 >> 16 != 0) {
      r4 = 0;
      while (1) {
        r5 = HEAP32[r3 + (r4 << 2) >> 2];
        if ((r5 | 0) != 0) {
          _free(r5);
        }
        r5 = r4 + 1 | 0;
        if ((r5 | 0) < (r1 | 0)) {
          r4 = r5;
        } else {
          break L1164;
        }
      }
    }
  } while (0);
  _free(r3);
  return;
}
function _reveal_macs(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = r2 + 92 | 0;
  r5 = r2 + 64 | 0;
  r6 = r3 + 92 | 0;
  r7 = r3 + 64 | 0;
  r8 = HEAP32[r5 >> 2] + HEAP32[r4 >> 2] + HEAP32[r6 >> 2] + HEAP32[r7 >> 2] | 0;
  if ((r8 | 0) == 0) {
    r9 = _gcry_error70(0);
    return r9;
  }
  r10 = (r1 + 8 | 0) >> 2;
  r1 = HEAP32[r10];
  r11 = _realloc(HEAP32[r1 + 568 >> 2], (HEAP32[r1 + 564 >> 2] + r8) * 20 & -1);
  if ((r11 | 0) == 0) {
    r9 = _gcry_error70(32854);
    return r9;
  }
  if ((HEAP32[r4 >> 2] | 0) != 0) {
    _memmove(r11 + (HEAP32[HEAP32[r10] + 564 >> 2] * 20 & -1) | 0, r2 + 72 | 0, 20, 1, 0);
    r4 = HEAP32[r10] + 564 | 0;
    HEAP32[r4 >> 2] = HEAP32[r4 >> 2] + 1 | 0;
  }
  if ((HEAP32[r5 >> 2] | 0) != 0) {
    _memmove(r11 + (HEAP32[HEAP32[r10] + 564 >> 2] * 20 & -1) | 0, r2 + 44 | 0, 20, 1, 0);
    r2 = HEAP32[r10] + 564 | 0;
    HEAP32[r2 >> 2] = HEAP32[r2 >> 2] + 1 | 0;
  }
  if ((HEAP32[r6 >> 2] | 0) != 0) {
    _memmove(r11 + (HEAP32[HEAP32[r10] + 564 >> 2] * 20 & -1) | 0, r3 + 72 | 0, 20, 1, 0);
    r6 = HEAP32[r10] + 564 | 0;
    HEAP32[r6 >> 2] = HEAP32[r6 >> 2] + 1 | 0;
  }
  if ((HEAP32[r7 >> 2] | 0) != 0) {
    _memmove(r11 + (HEAP32[HEAP32[r10] + 564 >> 2] * 20 & -1) | 0, r3 + 44 | 0, 20, 1, 0);
    r3 = HEAP32[r10] + 564 | 0;
    HEAP32[r3 >> 2] = HEAP32[r3 >> 2] + 1 | 0;
  }
  HEAP32[HEAP32[r10] + 568 >> 2] = r11;
  r9 = _gcry_error70(0);
  return r9;
}
function _gcry_err_make7175(r1) {
  return _gpg_err_make7276(r1);
}
function _otrl_base64_encode(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  L1196 : do {
    if (r3 >>> 0 > 2) {
      r4 = r1;
      r5 = r2;
      r6 = r3;
      r7 = 0;
      while (1) {
        _encodeblock(r4, r5, 3);
        r8 = r4 + 4 | 0;
        r9 = r7 + 4 | 0;
        r10 = r5 + 3 | 0;
        r11 = r6 - 3 | 0;
        if (r11 >>> 0 > 2) {
          r4 = r8;
          r5 = r10;
          r6 = r11;
          r7 = r9;
        } else {
          r12 = r8;
          r13 = r10;
          r14 = r11;
          r15 = r9;
          break L1196;
        }
      }
    } else {
      r12 = r1;
      r13 = r2;
      r14 = r3;
      r15 = 0;
    }
  } while (0);
  if ((r14 | 0) == 0) {
    r16 = r15;
    return r16;
  }
  _encodeblock(r12, r13, r14);
  r16 = r15 + 4 | 0;
  return r16;
}
function _otrl_base64_decode(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  r7 = r6 | 0;
  r8 = r6 | 0;
  r9 = r1;
  r1 = r2;
  r2 = r3;
  r3 = 0;
  L1205 : while (1) {
    r10 = r1;
    r11 = r2;
    r12 = 0;
    r13 = r3;
    L1207 : while (1) {
      r14 = r10;
      r15 = r11;
      r16 = r12;
      L1209 : while (1) {
        if ((r15 | 0) == 0) {
          r4 = 1001;
          break L1205;
        } else {
          r17 = r15;
          r18 = r14;
        }
        while (1) {
          r19 = HEAP8[r18];
          r20 = r18 + 1 | 0;
          r21 = r17 - 1 | 0;
          r22 = r19 << 24 >> 24;
          if ((r19 - 43 & 255) <= 79) {
            if (r19 << 24 >> 24 == 61) {
              break L1209;
            }
            r23 = HEAP8[r22 - 43 + 459760 | 0];
            if (r23 << 24 >> 24 != 36) {
              break;
            }
          }
          if ((r21 | 0) == 0) {
            r4 = 1002;
            break L1205;
          } else {
            r17 = r21;
            r18 = r20;
          }
        }
        r24 = r16 + 1 | 0;
        HEAP8[r6 + r16 | 0] = r23 - 62 & 255;
        if ((r24 | 0) == 4) {
          break L1207;
        } else {
          r14 = r20;
          r15 = r21;
          r16 = r24;
        }
      }
      r10 = r20;
      r11 = 0;
      r12 = r16;
      r13 = _decode(r9, r7, r16) + r13 | 0;
    }
    r12 = _decode(r9, r8, r24);
    r9 = r9 + r12 | 0;
    r1 = r20;
    r2 = r21;
    r3 = r12 + r13 | 0;
  }
  if (r4 == 1001) {
    STACKTOP = r5;
    return r13;
  } else if (r4 == 1002) {
    STACKTOP = r5;
    return r13;
  }
}
function _otrl_base64_otr_encode(r1, r2) {
  var r3, r4, r5;
  r3 = Math.floor(((r2 + 2 | 0) >>> 0) / 3) << 2;
  r4 = _malloc(r3 + 7 | 0);
  if ((r4 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  HEAP8[r4] = HEAP8[469160];
  HEAP8[r4 + 1 | 0] = HEAP8[469161 | 0];
  HEAP8[r4 + 2 | 0] = HEAP8[469162 | 0];
  HEAP8[r4 + 3 | 0] = HEAP8[469163 | 0];
  HEAP8[r4 + 4 | 0] = HEAP8[469164 | 0];
  _otrl_base64_encode(r4 + 5 | 0, r1, r2);
  HEAP8[r3 + (r4 + 5) | 0] = 46;
  HEAP8[r3 + (r4 + 6) | 0] = 0;
  r5 = r4;
  return r5;
}
function _otrl_base64_otr_decode(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = _strstr(r1, 469160);
  if ((r4 | 0) == 0) {
    r5 = -2;
    return r5;
  }
  r1 = _strchr(r4, 46);
  if ((r1 | 0) == 0) {
    r5 = -2;
    return r5;
  }
  r6 = r1 - r4 | 0;
  r1 = ((r6 - 2 | 0) >>> 2) * 3 & -1;
  r7 = _malloc(r1);
  if (!((r7 | 0) != 0 | (r1 | 0) == 0)) {
    r5 = -1;
    return r5;
  }
  r1 = _otrl_base64_decode(r7, r4 + 5 | 0, r6 - 5 | 0);
  HEAP32[r2 >> 2] = r7;
  HEAP32[r3 >> 2] = r1;
  r5 = 0;
  return r5;
}
function _otrl_dh_init() {
  var r1;
  _gcry_mpi_scan(513040, 4, 483444, 0, 0);
  _gcry_mpi_scan(513044, 4, 468420, 0, 0);
  r1 = _gcry_mpi_new(1536);
  HEAP32[128259] = r1;
  _gcry_mpi_sub_ui(r1, HEAP32[128260], 2);
  return;
}
function _otrl_dh_keypair_copy(r1, r2) {
  HEAP32[r1 >> 2] = HEAP32[r2 >> 2];
  HEAP32[r1 + 4 >> 2] = _gcry_mpi_copy(HEAP32[r2 + 4 >> 2]);
  HEAP32[r1 + 8 >> 2] = _gcry_mpi_copy(HEAP32[r2 + 8 >> 2]);
  return;
}
function _otrl_dh_keypair_free(r1) {
  var r2, r3;
  r2 = r1 + 4 | 0;
  _gcry_mpi_release(HEAP32[r2 >> 2]);
  r3 = r1 + 8 | 0;
  _gcry_mpi_release(HEAP32[r3 >> 2]);
  HEAP32[r2 >> 2] = 0;
  HEAP32[r3 >> 2] = 0;
  return;
}
function _otrl_dh_gen_keypair(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3, r5 = r4 >> 2;
  HEAP32[r5] = 0;
  if ((r1 | 0) == 5) {
    r6 = _gcry_random_bytes_secure(40, 1);
    _gcry_mpi_scan(r4, 5, r6, 40, 0);
    _gcry_free(r6);
    HEAP32[r2 >> 2] = r1;
    HEAP32[r2 + 4 >> 2] = HEAP32[r5];
    r1 = _gcry_mpi_new(1536);
    HEAP32[r2 + 8 >> 2] = r1;
    _gcry_mpi_powm(r1, HEAP32[128261], HEAP32[r5], HEAP32[128260]);
    r5 = _gcry_error86(0);
    STACKTOP = r3;
    return r5;
  } else {
    r5 = _gcry_error86(55);
    STACKTOP = r3;
    return r5;
  }
}
function _gcry_error86(r1) {
  return _gcry_err_make97(r1);
}
function _otrl_dh_session(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4, r6 = r5 >> 2;
  _otrl_dh_session_blank(r1);
  if ((HEAP32[r2 >> 2] | 0) != 5) {
    r7 = _gcry_error86(55);
    STACKTOP = r4;
    return r7;
  }
  r8 = _gcry_mpi_new(1536);
  _gcry_mpi_powm(r8, r3, HEAP32[r2 + 4 >> 2], HEAP32[128260]);
  _gcry_mpi_print(5, 0, 0, r5, r8);
  r5 = _gcry_malloc_secure(HEAP32[r6] + 5 | 0);
  if ((r5 | 0) == 0) {
    _gcry_mpi_release(r8);
    r7 = _gcry_error86(32854);
    STACKTOP = r4;
    return r7;
  }
  HEAP8[r5 + 1 | 0] = HEAP32[r6] >>> 24 & 255;
  HEAP8[r5 + 2 | 0] = HEAP32[r6] >>> 16 & 255;
  HEAP8[r5 + 3 | 0] = HEAP32[r6] >>> 8 & 255;
  HEAP8[r5 + 4 | 0] = HEAP32[r6] & 255;
  _gcry_mpi_print(5, r5 + 5 | 0, HEAP32[r6], 0, r8);
  _gcry_mpi_release(r8);
  r8 = _gcry_malloc_secure(20);
  if ((r8 | 0) == 0) {
    _gcry_free(r5);
    r7 = _gcry_error86(32854);
    STACKTOP = r4;
    return r7;
  }
  r9 = (_gcry_mpi_cmp(HEAP32[r2 + 8 >> 2], r3) | 0) > 0;
  r3 = r9 ? 2 : 1;
  HEAP8[r5] = r9 ? 1 : 2;
  _gcry_md_hash_buffer(2, r8, r5, HEAP32[r6] + 5 | 0);
  r9 = r1 + 32 | 0;
  r2 = _gcry_cipher_open(r9, 7, 6, 1);
  do {
    if ((r2 | 0) == 0) {
      r10 = _gcry_cipher_setkey(HEAP32[r9 >> 2], r8, 16);
      if ((r10 | 0) != 0) {
        r11 = r10;
        break;
      }
      r10 = r1 + 44 | 0;
      _gcry_md_hash_buffer(2, r10, r8, 16);
      r12 = r1 + 40 | 0;
      r13 = _gcry_md_open(r12, 2, 2);
      if ((r13 | 0) != 0) {
        r11 = r13;
        break;
      }
      r13 = _gcry_md_setkey(HEAP32[r12 >> 2], r10, 20);
      if ((r13 | 0) != 0) {
        r11 = r13;
        break;
      }
      HEAP8[r5] = r3;
      _gcry_md_hash_buffer(2, r8, r5, HEAP32[r6] + 5 | 0);
      r13 = r1 + 36 | 0;
      r10 = _gcry_cipher_open(r13, 7, 6, 1);
      if ((r10 | 0) != 0) {
        r11 = r10;
        break;
      }
      r10 = _gcry_cipher_setkey(HEAP32[r13 >> 2], r8, 16);
      if ((r10 | 0) != 0) {
        r11 = r10;
        break;
      }
      r10 = r1 + 72 | 0;
      _gcry_md_hash_buffer(2, r10, r8, 16);
      r13 = r1 + 68 | 0;
      r12 = _gcry_md_open(r13, 2, 2);
      if ((r12 | 0) != 0) {
        r11 = r12;
        break;
      }
      r12 = _gcry_md_setkey(HEAP32[r13 >> 2], r10, 20);
      if ((r12 | 0) != 0) {
        r11 = r12;
        break;
      }
      HEAP8[r5] = -1;
      _gcry_md_hash_buffer(8, r1 + 96 | 0, r5, HEAP32[r6] + 5 | 0);
      _gcry_free(r5);
      _gcry_free(r8);
      r7 = _gcry_error86(0);
      STACKTOP = r4;
      return r7;
    } else {
      r11 = r2;
    }
  } while (0);
  _otrl_dh_session_free(r1);
  _gcry_free(r5);
  _gcry_free(r8);
  r7 = r11;
  STACKTOP = r4;
  return r7;
}
function _otrl_dh_session_blank(r1) {
  _memset(r1 | 0, 0, 128);
  return;
}
function _otrl_dh_session_free(r1) {
  _gcry_cipher_close(HEAP32[r1 + 32 >> 2]);
  _gcry_cipher_close(HEAP32[r1 + 36 >> 2]);
  _gcry_md_close(HEAP32[r1 + 40 >> 2]);
  _gcry_md_close(HEAP32[r1 + 68 >> 2]);
  _otrl_dh_session_blank(r1);
  return;
}
function _otrl_mem_is_secure(r1) {
  return 1;
}
function _gpg_err_make98(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function _otrl_dh_incctr(r1) {
  var r2, r3, r4, r5, r6;
  r2 = 0;
  r3 = 8;
  while (1) {
    if ((r3 | 0) == 0) {
      r2 = 1059;
      break;
    }
    r4 = r3 - 1 | 0;
    r5 = r1 + r4 | 0;
    r6 = HEAP8[r5] + 1 & 255;
    HEAP8[r5] = r6;
    if (r6 << 24 >> 24 == 0) {
      r3 = r4;
    } else {
      r2 = 1060;
      break;
    }
  }
  if (r2 == 1059) {
    return;
  } else if (r2 == 1060) {
    return;
  }
}
function _otrl_dh_cmpctr(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = 0;
  r4 = 0;
  while (1) {
    if ((r4 | 0) >= 8) {
      r5 = 0;
      r3 = 1066;
      break;
    }
    r6 = HEAP8[r1 + r4 | 0];
    r7 = HEAP8[r2 + r4 | 0];
    if (r6 << 24 >> 24 == r7 << 24 >> 24) {
      r4 = r4 + 1 | 0;
    } else {
      break;
    }
  }
  if (r3 == 1066) {
    return r5;
  }
  r5 = (r6 & 255) - (r7 & 255) | 0;
  return r5;
}
function _otrl_dh_compute_v2_auth_keys(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10) {
  var r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r11 = r6 >> 2;
  r12 = r5 >> 2;
  r13 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r14 = r13, r15 = r14 >> 2;
  HEAP32[r12] = 0;
  HEAP32[r11] = 0;
  HEAP32[r7 >> 2] = 0;
  HEAP32[r8 >> 2] = 0;
  HEAP32[r9 >> 2] = 0;
  HEAP32[r10 >> 2] = 0;
  r16 = r13 + 4 | 0;
  _memset(r16, 0, 16);
  if ((HEAP32[r1 >> 2] | 0) != 5) {
    r17 = _gcry_error86(55);
    STACKTOP = r13;
    return r17;
  }
  do {
    if ((_gcry_mpi_cmp_ui(r2, 2) | 0) >= 0) {
      if ((_gcry_mpi_cmp(r2, HEAP32[128259]) | 0) > 0) {
        break;
      }
      r18 = _gcry_mpi_new(1536);
      _gcry_mpi_powm(r18, r2, HEAP32[r1 + 4 >> 2], HEAP32[128260]);
      _gcry_mpi_print(5, 0, 0, r14, r18);
      r19 = _gcry_malloc_secure(HEAP32[r15] + 5 | 0);
      if ((r19 | 0) == 0) {
        _gcry_mpi_release(r18);
        r17 = _gcry_error86(32854);
        STACKTOP = r13;
        return r17;
      }
      HEAP8[r19 + 1 | 0] = HEAP32[r15] >>> 24 & 255;
      HEAP8[r19 + 2 | 0] = HEAP32[r15] >>> 16 & 255;
      HEAP8[r19 + 3 | 0] = HEAP32[r15] >>> 8 & 255;
      HEAP8[r19 + 4 | 0] = HEAP32[r15] & 255;
      _gcry_mpi_print(5, r19 + 5 | 0, HEAP32[r15], 0, r18);
      _gcry_mpi_release(r18);
      r18 = _gcry_malloc_secure(32);
      if ((r18 | 0) == 0) {
        _gcry_free(r19);
        r17 = _gcry_error86(32854);
        STACKTOP = r13;
        return r17;
      }
      HEAP8[r19] = 0;
      _gcry_md_hash_buffer(8, r18, r19, HEAP32[r15] + 5 | 0);
      r20 = r18;
      r21 = r3;
      r22 = r20 | 0;
      r23 = r20 + 4 | 0;
      r20 = HEAPU8[r23] | HEAPU8[r23 + 1 | 0] << 8 | HEAPU8[r23 + 2 | 0] << 16 | HEAPU8[r23 + 3 | 0] << 24 | 0;
      r23 = r21 | 0;
      tempBigInt = HEAPU8[r22] | HEAPU8[r22 + 1 | 0] << 8 | HEAPU8[r22 + 2 | 0] << 16 | HEAPU8[r22 + 3 | 0] << 24 | 0;
      HEAP8[r23] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r23 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r23 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r23 + 3 | 0] = tempBigInt & 255;
      r23 = r21 + 4 | 0;
      tempBigInt = r20;
      HEAP8[r23] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r23 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r23 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r23 + 3 | 0] = tempBigInt & 255;
      HEAP32[r4 >> 2] = 8;
      HEAP8[r19] = 1;
      _gcry_md_hash_buffer(8, r18, r19, HEAP32[r15] + 5 | 0);
      r23 = _gcry_cipher_open(r5, 7, 6, 1);
      do {
        if ((r23 | 0) == 0) {
          r20 = _gcry_cipher_setkey(HEAP32[r12], r18, 16);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_cipher_setctr(HEAP32[r12], r16, 16);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_cipher_open(r6, 7, 6, 1);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_cipher_setkey(HEAP32[r11], r18 + 16 | 0, 16);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_cipher_setctr(HEAP32[r11], r16, 16);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          HEAP8[r19] = 2;
          _gcry_md_hash_buffer(8, r18, r19, HEAP32[r15] + 5 | 0);
          r20 = _gcry_md_open(r7, 8, 2);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_md_setkey(HEAP32[r7 >> 2], r18, 32);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          HEAP8[r19] = 3;
          _gcry_md_hash_buffer(8, r18, r19, HEAP32[r15] + 5 | 0);
          r20 = _gcry_md_open(r9, 8, 2);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_md_setkey(HEAP32[r9 >> 2], r18, 32);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          HEAP8[r19] = 4;
          _gcry_md_hash_buffer(8, r18, r19, HEAP32[r15] + 5 | 0);
          r20 = _gcry_md_open(r8, 8, 2);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_md_setkey(HEAP32[r8 >> 2], r18, 32);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          HEAP8[r19] = 5;
          _gcry_md_hash_buffer(8, r18, r19, HEAP32[r15] + 5 | 0);
          r20 = _gcry_md_open(r10, 8, 2);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          r20 = _gcry_md_setkey(HEAP32[r10 >> 2], r18, 32);
          if ((r20 | 0) != 0) {
            r24 = r20;
            break;
          }
          _gcry_free(r19);
          _gcry_free(r18);
          r17 = _gcry_error86(0);
          STACKTOP = r13;
          return r17;
        } else {
          r24 = r23;
        }
      } while (0);
      _gcry_cipher_close(HEAP32[r12]);
      _gcry_cipher_close(HEAP32[r11]);
      _gcry_md_close(HEAP32[r7 >> 2]);
      _gcry_md_close(HEAP32[r8 >> 2]);
      _gcry_md_close(HEAP32[r9 >> 2]);
      _gcry_md_close(HEAP32[r10 >> 2]);
      HEAP32[r12] = 0;
      HEAP32[r11] = 0;
      HEAP32[r7 >> 2] = 0;
      HEAP32[r8 >> 2] = 0;
      HEAP32[r9 >> 2] = 0;
      HEAP32[r10 >> 2] = 0;
      _gcry_free(r19);
      _gcry_free(r18);
      r17 = r24;
      STACKTOP = r13;
      return r17;
    }
  } while (0);
  r17 = _gcry_error86(55);
  STACKTOP = r13;
  return r17;
}
function _otrl_dh_compute_v1_session_id(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6, r8 = r7 >> 2;
  if ((HEAP32[r1 >> 2] | 0) != 5) {
    r9 = _gcry_error86(55);
    STACKTOP = r6;
    return r9;
  }
  do {
    if ((_gcry_mpi_cmp_ui(r2, 2) | 0) >= 0) {
      if ((_gcry_mpi_cmp(r2, HEAP32[128259]) | 0) > 0) {
        break;
      }
      r10 = _gcry_mpi_new(1536);
      _gcry_mpi_powm(r10, r2, HEAP32[r1 + 4 >> 2], HEAP32[128260]);
      _gcry_mpi_print(5, 0, 0, r7, r10);
      r11 = _gcry_malloc_secure(HEAP32[r8] + 5 | 0);
      if ((r11 | 0) == 0) {
        _gcry_mpi_release(r10);
        r9 = _gcry_error86(32854);
        STACKTOP = r6;
        return r9;
      }
      HEAP8[r11 + 1 | 0] = HEAP32[r8] >>> 24 & 255;
      HEAP8[r11 + 2 | 0] = HEAP32[r8] >>> 16 & 255;
      HEAP8[r11 + 3 | 0] = HEAP32[r8] >>> 8 & 255;
      HEAP8[r11 + 4 | 0] = HEAP32[r8] & 255;
      _gcry_mpi_print(5, r11 + 5 | 0, HEAP32[r8], 0, r10);
      _gcry_mpi_release(r10);
      r10 = _gcry_malloc_secure(20);
      if ((r10 | 0) == 0) {
        _gcry_free(r11);
        r9 = _gcry_error86(32854);
        STACKTOP = r6;
        return r9;
      } else {
        HEAP8[r11] = 0;
        _gcry_md_hash_buffer(2, r10, r11, HEAP32[r8] + 5 | 0);
        _memcpy(r3, r10, 20);
        HEAP32[r4 >> 2] = 20;
        HEAP32[r5 >> 2] = (_gcry_mpi_cmp(HEAP32[r1 + 8 >> 2], r2) | 0) > 0 & 1;
        _gcry_free(r10);
        _gcry_free(r11);
        r9 = _gcry_error86(0);
        STACKTOP = r6;
        return r9;
      }
    }
  } while (0);
  r9 = _gcry_error86(55);
  STACKTOP = r6;
  return r9;
}
function _gcry_err_make97(r1) {
  return _gpg_err_make98(r1);
}
function _otrl_mem_init() {
  HEAP32[113899] = 8;
  _gcry_set_allocation_handler(178, 178, 200, 252, 176);
  return;
}
function _otrl_mem_malloc(r1) {
  var r2, r3;
  r2 = _llvm_uadd_with_overflow_i32(HEAP32[113899], r1);
  if (tempRet0) {
    r3 = 0;
    return r3;
  }
  r1 = _malloc(r2);
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  HEAP32[r1 >> 2] = r2;
  r3 = r1 + HEAP32[113899] | 0;
  return r3;
}
function _otrl_mem_realloc(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  if ((r1 | 0) == 0) {
    r3 = _otrl_mem_malloc(r2);
    return r3;
  }
  if ((r2 | 0) == 0) {
    _otrl_mem_free(r1);
    r3 = 0;
    return r3;
  }
  r4 = HEAP32[113899];
  r5 = r1 + -r4 | 0;
  r6 = HEAP32[r5 >> 2];
  r7 = _llvm_uadd_with_overflow_i32(r4, r2);
  if (tempRet0) {
    r3 = 0;
    return r3;
  }
  do {
    if (r7 >>> 0 < r6 >>> 0) {
      r2 = r1 + (r7 - r4) | 0;
      r8 = r6 - r7 | 0;
      _memset(r2, -1, r8);
      _memset(r2, -86, r8);
      _memset(r2, 85, r8);
      _memset(r2, 0, r8);
      r9 = r5;
    } else {
      r8 = _realloc(r5, r7);
      if ((r8 | 0) == 0) {
        r3 = 0;
      } else {
        r9 = r8;
        break;
      }
      return r3;
    }
  } while (0);
  HEAP32[r9 >> 2] = r7;
  r3 = r9 + HEAP32[113899] | 0;
  return r3;
}
function _otrl_mem_free(r1) {
  var r2;
  r2 = r1 + -HEAP32[113899] | 0;
  r1 = HEAP32[r2 >> 2];
  _memset(r2, -1, r1);
  _memset(r2, -86, r1);
  _memset(r2, 85, r1);
  _memset(r2, 0, r1);
  _free(r2);
  return;
}
function _otrl_message_free(r1) {
  _free(r1);
  return;
}
function _otrl_message_sending(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14) {
  var r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42;
  r15 = r10 >> 2;
  r16 = r2 >> 2;
  r17 = 0;
  r18 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r19 = r18;
  r20 = r18 + 4;
  r21 = r18 + 8, r22 = r21 >> 2;
  HEAP32[r20 >> 2] = 0;
  HEAP32[r22] = 0;
  r23 = (r10 | 0) != 0;
  if (r23) {
    HEAP32[r15] = 0;
  }
  r24 = _gcry_error113(0);
  r25 = (r12 | 0) != 0;
  if (r25) {
    HEAP32[r12 >> 2] = 0;
  }
  r26 = r23 ^ 1;
  do {
    if ((r4 | 0) == 0 | (r5 | 0) == 0 | (r6 | 0) == 0 | (r8 | 0) == 0 | r26) {
      r27 = 0;
      r28 = _gcry_error113(55);
    } else {
      r23 = _otrl_context_find(r1, r6, r4, r5, r7, 1, r20, r13, r14), r29 = r23 >> 2;
      do {
        if ((HEAP32[r20 >> 2] | 0) != 0) {
          r30 = HEAP32[r16 + 4];
          if ((r30 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[r30](r3);
        }
      } while (0);
      if ((HEAP32[r29 + 10] | 0) == 0) {
        _populate_context_instag(r1, r2, r3, r4, r5, r23);
      }
      if (r25) {
        HEAP32[r12 >> 2] = r23;
      }
      r30 = HEAP32[r16];
      if ((r30 | 0) == 0) {
        r31 = 118;
      } else {
        r32 = FUNCTION_TABLE[r30](r3, r23);
        if ((r32 & 7 | 0) == 0) {
          r27 = r23;
          r28 = r24;
          break;
        } else {
          r31 = r32;
        }
      }
      if ((_otrl_proto_message_type(r8) | 0) == 2) {
        r32 = _otrl_proto_default_query_msg(r4, r31);
        if ((r32 | 0) != 0) {
          HEAP32[r15] = r32;
        }
        HEAP32[r29 + 71] = 1;
        r27 = r23;
        r28 = r24;
        break;
      }
      r32 = HEAP32[r29 + 12];
      if ((r32 | 0) == 0) {
        if ((r31 & 8 | 0) != 0) {
          r30 = HEAP32[r16 + 19];
          if ((r30 | 0) != 0) {
            FUNCTION_TABLE[r30](r3, 1, r23, 0, r24);
          }
          r30 = _gcry_malloc_secure(_strlen(r8) + 1 | 0);
          r33 = (r23 + 8 | 0) >> 2;
          HEAP32[HEAP32[r33] + 584 >> 2] = r30;
          if ((HEAP32[HEAP32[r33] + 584 >> 2] | 0) == 0) {
            r27 = r23;
            r28 = r24;
            break;
          }
          r30 = _otrl_proto_default_query_msg(r4, r31);
          _strcpy(HEAP32[HEAP32[r33] + 584 >> 2], r8);
          r34 = _time(0);
          HEAP32[HEAP32[r33] + 576 >> 2] = r34;
          _otrl_context_update_recent_child(r23, 1);
          HEAP32[HEAP32[r33] + 588 >> 2] = 2;
          if ((r30 | 0) == 0) {
            r27 = r23;
            r28 = _gcry_error113(32854);
            break;
          } else {
            HEAP32[r15] = r30;
            HEAP32[r29 + 71] = 1;
            r27 = r23;
            r28 = r24;
            break;
          }
        }
        if ((r31 & 16 | 0) == 0) {
          r27 = r23;
          r28 = r24;
          break;
        }
        r30 = r23 + 284 | 0;
        if ((HEAP32[r30 >> 2] | 0) == 2) {
          r27 = r23;
          r28 = r24;
          break;
        }
        r33 = _strlen(r8);
        r34 = r31 & 1;
        r35 = r31 & 2;
        r36 = r31 & 4;
        r37 = r33 + 16 | 0;
        r38 = (r34 << 3) + r37 | 0;
        r39 = (r35 << 2) + r38 | 0;
        r40 = _malloc((r36 << 1 | 1) + r39 | 0);
        if ((r40 | 0) == 0) {
          r27 = r23;
          r28 = r24;
          break;
        }
        _strcpy(r40, r8);
        _memcpy(r40 + r33 | 0, 491052, 17);
        if ((r34 | 0) != 0) {
          _memcpy(r40 + r37 | 0, 490232, 9);
        }
        if ((r35 | 0) != 0) {
          _memcpy(r40 + r38 | 0, 481644, 9);
        }
        if ((r36 | 0) != 0) {
          _memcpy(r40 + r39 | 0, 477496, 9);
        }
        HEAP32[r15] = r40;
        HEAP32[r30 >> 2] = 1;
        r27 = r23;
        r28 = r24;
        break;
      } else if ((r32 | 0) == 1) {
        r30 = HEAP32[r16 + 21];
        do {
          if ((r30 | 0) == 0) {
            r17 = 1183;
          } else {
            FUNCTION_TABLE[r30](r3, r23, 0, r21, r8);
            r40 = HEAP32[r22];
            if ((r40 | 0) == 0) {
              r17 = 1183;
              break;
            }
            r39 = _otrl_proto_create_data(r19, r23, r40, r9, 0, 0);
            r40 = HEAP32[r16 + 22];
            if ((r40 | 0) == 0) {
              r41 = r39;
              break;
            }
            FUNCTION_TABLE[r40](r3, r23, HEAP32[r22]);
            HEAP32[r22] = 0;
            r41 = r39;
            break;
          }
        } while (0);
        if (r17 == 1183) {
          r41 = _otrl_proto_create_data(r19, r23, r8, r9, 0, 0);
        }
        if ((r41 | 0) == 0) {
          r30 = _time(0);
          HEAP32[HEAP32[r29 + 2] + 576 >> 2] = r30;
          _otrl_context_update_recent_child(r23, 1);
          HEAP32[r15] = HEAP32[r19 >> 2];
          r27 = r23;
          r28 = r24;
          break;
        }
        r30 = HEAP32[r16 + 19];
        if ((r30 | 0) != 0) {
          FUNCTION_TABLE[r30](r3, 2, r23, 0, r24);
        }
        r30 = HEAP32[r16 + 14];
        if ((r30 | 0) == 0) {
          r27 = r23;
          r28 = r24;
          break;
        }
        r39 = FUNCTION_TABLE[r30](r3, r23, 1);
        r30 = _malloc(_strlen(r39) + 13 | 0);
        HEAP32[r15] = r30;
        if ((r30 | 0) != 0) {
          _memcpy(r30, 474516, 13);
          _strcat(HEAP32[r15], r39);
        }
        r30 = HEAP32[r16 + 15];
        if ((r30 | 0) != 0) {
          FUNCTION_TABLE[r30](r3, r39);
        }
        if ((HEAP32[r15] | 0) != 0) {
          r27 = r23;
          r28 = r24;
          break;
        }
        r27 = r23;
        r28 = _gcry_error113(32854);
        break;
      } else if ((r32 | 0) == 2) {
        r39 = HEAP32[r16 + 19];
        if ((r39 | 0) != 0) {
          FUNCTION_TABLE[r39](r3, 3, r23, 0, r24);
        }
        r39 = _strdup(472456);
        HEAP32[r15] = r39;
        if ((r39 | 0) != 0) {
          r27 = r23;
          r28 = r24;
          break;
        }
        r27 = r23;
        r28 = _gcry_error113(32854);
        break;
      } else {
        r27 = r23;
        r28 = r24;
        break;
      }
    }
  } while (0);
  if ((r11 | 0) == 0) {
    r42 = r28;
    STACKTOP = r18;
    return r42;
  }
  if ((r28 | 0) != 0 | r26) {
    r42 = r28;
    STACKTOP = r18;
    return r42;
  }
  r26 = HEAP32[r15];
  if ((r26 | 0) == 0 | (r27 | 0) == 0) {
    r42 = r28;
    STACKTOP = r18;
    return r42;
  }
  r42 = _fragment_and_send(r2, 0, r27, r26, r11, r10);
  STACKTOP = r18;
  return r42;
}
function _gcry_error113(r1) {
  return _gcry_err_make115(r1);
}
function _populate_context_instag(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10;
  r7 = 0;
  r8 = _otrl_instag_find(r1, r4, r5);
  do {
    if ((r8 | 0) == 0) {
      r9 = HEAP32[r2 + 80 >> 2];
      if ((r9 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[r9](r3, r4, r5);
      r9 = _otrl_instag_find(r1, r4, r5);
      if ((r9 | 0) == 0) {
        break;
      } else {
        r10 = r9;
        r7 = 1212;
        break;
      }
    } else {
      r10 = r8;
      r7 = 1212;
    }
  } while (0);
  do {
    if (r7 == 1212) {
      r8 = HEAP32[r10 + 16 >> 2];
      if (r8 >>> 0 <= 255) {
        break;
      }
      HEAP32[r6 + 40 >> 2] = r8;
      return;
    }
  } while (0);
  HEAP32[r6 + 40 >> 2] = _otrl_instag_get_new();
  return;
}
function _fragment_and_send(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r7 = r3 >> 2;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8, r10 = r9 >> 2;
  do {
    if ((r4 | 0) != 0) {
      r11 = (r1 + 12 | 0) >> 2;
      if ((HEAP32[r11] | 0) == 0) {
        break;
      }
      r12 = HEAP32[r1 + 40 >> 2];
      if ((r12 | 0) == 0) {
        r13 = 0;
      } else {
        r13 = FUNCTION_TABLE[r12](r2, r3);
      }
      r12 = _strlen(r4);
      if (!((r13 | 0) != 0 & (r12 | 0) > (r13 | 0))) {
        if ((r5 | 0) == 1) {
          FUNCTION_TABLE[HEAP32[r11]](r2, HEAP32[r7 + 4], HEAP32[r7 + 5], HEAP32[r7 + 3], r4);
          break;
        } else {
          HEAP32[r6 >> 2] = _strdup(r4);
          break;
        }
      }
      r14 = (r12 - 1 | 0) / (r13 - ((HEAP32[r7 + 70] | 0) == 3 ? 37 : 19) | 0) & -1;
      r12 = r14 + 1 | 0;
      r15 = _otrl_proto_fragment_create(r13, r12, r9, r3, r4);
      if ((r15 | 0) != 0) {
        r16 = r15;
        STACKTOP = r8;
        return r16;
      }
      if ((r5 | 0) == 2) {
        HEAP32[r6 >> 2] = _strdup(HEAP32[HEAP32[r10] >> 2]);
      } else {
        FUNCTION_TABLE[HEAP32[r11]](r2, HEAP32[r7 + 4], HEAP32[r7 + 5], HEAP32[r7 + 3], HEAP32[HEAP32[r10] >> 2]);
      }
      L1503 : do {
        if ((r14 | 0) > 1) {
          r15 = r3 + 16 | 0;
          r17 = r3 + 20 | 0;
          r18 = r3 + 12 | 0;
          r19 = HEAP32[r10];
          r20 = 1;
          while (1) {
            FUNCTION_TABLE[HEAP32[r11]](r2, HEAP32[r15 >> 2], HEAP32[r17 >> 2], HEAP32[r18 >> 2], HEAP32[r19 + (r20 << 2) >> 2]);
            r21 = r20 + 1 | 0;
            if ((r21 | 0) == (r14 | 0)) {
              break L1503;
            } else {
              r20 = r21;
            }
          }
        }
      } while (0);
      if ((r5 | 0) == 3) {
        HEAP32[r6 >> 2] = _strdup(HEAP32[HEAP32[r10] + (r14 << 2) >> 2]);
      } else {
        FUNCTION_TABLE[HEAP32[r11]](r2, HEAP32[r7 + 4], HEAP32[r7 + 5], HEAP32[r7 + 3], HEAP32[HEAP32[r10] + (r14 << 2) >> 2]);
      }
      _otrl_proto_fragment_free(r9, r12 & 65535);
    }
  } while (0);
  r16 = _gcry_error113(0);
  STACKTOP = r8;
  return r16;
}
function _otrl_message_initiate_smp(r1, r2, r3, r4, r5, r6) {
  _init_respond_smp(r1, r2, r3, r4, 0, r5, r6, 1);
  return;
}
function _init_respond_smp(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r9 = r4 >> 2;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r11 = r10, r12 = r11 >> 2;
  r13 = r10 + 4, r14 = r13 >> 2;
  r15 = r10 + 60, r16 = r15 >> 2;
  HEAP32[r12] = 0;
  HEAP32[r16] = 0;
  if ((r4 | 0) == 0) {
    STACKTOP = r10;
    return;
  }
  if ((HEAP32[r9 + 12] | 0) != 1) {
    STACKTOP = r10;
    return;
  }
  r17 = r10 + 40 | 0;
  _otrl_privkey_fingerprint_raw(r1, r17, HEAP32[r9 + 4], HEAP32[r9 + 5]);
  r1 = (r4 + 272 | 0) >> 2;
  r18 = r7 + HEAP32[r1] + 41 | 0;
  r19 = _malloc(r18);
  HEAP8[r19] = 1;
  r20 = (r8 | 0) != 0;
  r8 = r19 + 1 | 0;
  if (r20) {
    _memmove(r8, r17, 20, 1, 0);
    _memmove(r19 + 21 | 0, HEAP32[HEAP32[r9 + 62] + 8 >> 2], 20, 1, 0);
  } else {
    _memmove(r8, HEAP32[HEAP32[r9 + 62] + 8 >> 2], 20, 1, 0);
    _memmove(r19 + 21 | 0, r17, 20, 1, 0);
  }
  _memmove(r19 + 41 | 0, r4 + 252 | 0, HEAP32[r1], 1, 0);
  _memmove(r19 + HEAP32[r1] + 41 | 0, r6, r7, 1, 0);
  r7 = r10 + 8 | 0;
  _gcry_md_hash_buffer(8, r7, r19, r18);
  _free(r19);
  r19 = r4 + 296 | 0;
  r18 = HEAP32[r19 >> 2];
  if (r20) {
    _otrl_sm_step1(r18, r7, 32, r11, r13);
  } else {
    _otrl_sm_step2b(r18, r7, 32, r11, r13);
  }
  r13 = (r5 | 0) != 0;
  do {
    if (r13) {
      r11 = _strlen(r5) + 1 | 0;
      r7 = _malloc(r11 + HEAP32[r14] | 0);
      if ((r7 | 0) != 0) {
        _strcpy(r7, r5);
        _memmove(r7 + r11 | 0, HEAP32[r12], HEAP32[r14], 1, 0);
        _free(HEAP32[r12]);
        HEAP32[r12] = r7;
        HEAP32[r14] = HEAP32[r14] + r11 | 0;
        break;
      }
      _free(HEAP32[r12]);
      STACKTOP = r10;
      return;
    }
  } while (0);
  if (r20) {
    r21 = r13 ? 7 : 2;
  } else {
    r21 = 3;
  }
  r13 = _otrl_tlv_new(r21, HEAP32[r14] & 65535, HEAP32[r12]);
  if ((_otrl_proto_create_data(r15, r4, 472456, r13, 1, 0) | 0) == 0) {
    _fragment_and_send(r2, r3, r4, HEAP32[r16], 1, 0);
    HEAP32[HEAP32[r19 >> 2] + 44 >> 2] = r20 ? 1 : 2;
  }
  _free(HEAP32[r16]);
  _otrl_tlv_free(r13);
  _free(HEAP32[r12]);
  STACKTOP = r10;
  return;
}
function _otrl_message_initiate_smp_q(r1, r2, r3, r4, r5, r6, r7) {
  _init_respond_smp(r1, r2, r3, r4, r5, r6, r7, 1);
  return;
}
function _otrl_message_respond_smp(r1, r2, r3, r4, r5, r6) {
  _init_respond_smp(r1, r2, r3, r4, 0, r5, r6, 0);
  return;
}
function _otrl_message_abort_smp(r1, r2, r3, r4) {
  var r5, r6, r7;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r1, r6 = r5 >> 2;
  r7 = _otrl_tlv_new(6, 0, 472456);
  HEAP32[r6] = 0;
  HEAP32[HEAP32[r4 + 296 >> 2] + 44 >> 2] = 0;
  if ((_otrl_proto_create_data(r5, r4, 472456, r7, 1, 0) | 0) == 0) {
    _fragment_and_send(r2, r3, r4, HEAP32[r6], 1, 0);
  }
  _free(HEAP32[r6]);
  _otrl_tlv_free(r7);
  STACKTOP = r1;
  return;
}
function _otrl_message_receiving(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12) {
  var r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76;
  r13 = r8 >> 2;
  r14 = r2 >> 2;
  r15 = 0;
  r16 = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  r17 = r16, r18 = r17 >> 2;
  r19 = r16 + 4, r20 = r19 >> 2;
  r21 = r16 + 8, r22 = r21 >> 2;
  r23 = r16 + 36, r24 = r23 >> 2;
  r25 = r16 + 40, r26 = r25 >> 2;
  r27 = r16 + 44;
  r28 = r16 + 48;
  r29 = r16 + 52, r30 = r29 >> 2;
  r31 = r16 + 56, r32 = r31 >> 2;
  r33 = r16 + 60, r34 = r33 >> 2;
  r35 = r16 + 64;
  r36 = r16 + 68;
  r37 = r16 + 72;
  r38 = r16 + 76;
  r39 = r16 + 80;
  r40 = r16 + 84;
  r41 = r16 + 88;
  r42 = r16 + 92;
  r43 = r16 + 96, r44 = r43 >> 2;
  HEAP32[r18] = 0;
  HEAP32[r20] = 0;
  HEAP32[r24] = 0;
  HEAP32[r26] = 0;
  if ((r4 | 0) == 0 | (r5 | 0) == 0 | (r6 | 0) == 0 | (r7 | 0) == 0 | (r8 | 0) == 0) {
    r45 = 0;
    STACKTOP = r16;
    return r45;
  }
  HEAP32[r13] = 0;
  r46 = (r9 | 0) != 0;
  if (r46) {
    HEAP32[r9 >> 2] = 0;
  }
  r47 = (r10 | 0) != 0;
  if (r47) {
    HEAP32[r10 >> 2] = 0;
  }
  r48 = _otrl_context_find(r1, r6, r4, r5, 0, 1, r17, r11, r12);
  do {
    if ((HEAP32[r18] | 0) != 0) {
      r49 = HEAP32[r14 + 4];
      if ((r49 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[r49](r3);
    }
  } while (0);
  r49 = _otrl_context_find(r1, r6, r4, r5, 1, 0, 0, r11, r12);
  r50 = r48 + 40 | 0;
  if ((HEAP32[r50 >> 2] | 0) == 0) {
    _populate_context_instag(r1, r2, r3, r4, r5, r48);
  }
  r51 = HEAP32[r14];
  do {
    if ((r51 | 0) == 0) {
      r52 = 118;
    } else {
      r53 = FUNCTION_TABLE[r51](r3, r48);
      if ((r53 & 7 | 0) == 0) {
        r45 = 0;
      } else {
        r52 = r53;
        break;
      }
      STACKTOP = r16;
      return r45;
    }
  } while (0);
  r51 = _strstr(r7, 471052);
  do {
    if ((r51 | 0) == 0) {
      r54 = r7;
      r55 = r48;
      r56 = 0;
      r57 = 0;
    } else {
      do {
        if ((_strstr(r7, 469660) | 0) == 0) {
          r58 = r48;
        } else {
          _sscanf(r51, 468024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r25, HEAP32[tempInt + 4 >> 2] = r23, tempInt));
          r53 = HEAP32[r24];
          do {
            if ((r53 | 0) != 0) {
              if ((HEAP32[r50 >> 2] | 0) == (r53 | 0)) {
                break;
              }
              r59 = HEAP32[r14 + 19];
              if ((r59 | 0) == 0) {
                r45 = 1;
                STACKTOP = r16;
                return r45;
              }
              r60 = _gcry_error113(0);
              FUNCTION_TABLE[r59](r3, 15, r48, 0, r60);
              r45 = 1;
              STACKTOP = r16;
              return r45;
            }
          } while (0);
          r53 = HEAP32[r26];
          if (r53 >>> 0 > 255) {
            r58 = _otrl_context_find(r1, r6, r4, r5, r53, 1, r17, r11, r12);
            break;
          }
          _message_malformed(r2, r3, r48);
          r45 = 1;
          STACKTOP = r16;
          return r45;
        }
      } while (0);
      r53 = _otrl_proto_fragment_accumulate(r19, r58, r7);
      if ((r53 | 0) == 2) {
        r60 = HEAP32[r20];
        r54 = r60;
        r55 = r58;
        r56 = 1;
        r57 = _strstr(r60, 471052);
        break;
      } else if ((r53 | 0) == 1) {
        r45 = 1;
        STACKTOP = r16;
        return r45;
      } else {
        r54 = r7;
        r55 = r58;
        r56 = 0;
        r57 = r51;
        break;
      }
    }
  } while (0);
  r51 = _otrl_proto_message_type(r54);
  r58 = _otrl_proto_message_version(r54);
  do {
    if ((r52 & 16 | 0) != 0) {
      r7 = (r55 + 284 | 0) >> 2;
      if ((r51 | 0) != 0) {
        HEAP32[r7] = 3;
        break;
      }
      if ((HEAP32[r7] | 0) != 1) {
        break;
      }
      HEAP32[r7] = 2;
    }
  } while (0);
  L1599 : do {
    if ((r58 | 0) == 1) {
      if ((r52 & 1 | 0) == 0) {
        r45 = 1;
      } else {
        r61 = r55, r62 = r61 >> 2;
        break;
      }
      STACKTOP = r16;
      return r45;
    } else if ((r58 | 0) == 3) {
      if ((r52 & 4 | 0) == 0) {
        r45 = 1;
        STACKTOP = r16;
        return r45;
      }
      r7 = _gcry_error113(55);
      if ((r57 | 0) == 0) {
        r63 = r7;
      } else {
        r63 = _otrl_proto_instance(r57, r25, r23);
      }
      r7 = (r63 | 0) != 0;
      do {
        if (r7) {
          r64 = r55;
        } else {
          r19 = (r51 | 0) == 3;
          do {
            if (r19) {
              r50 = HEAP32[r24];
              if ((r50 | 0) == 0) {
                break;
              }
              if ((HEAP32[r55 + 40 >> 2] | 0) != (r50 | 0)) {
                r15 = 1309;
                break;
              }
              if (r19) {
                break;
              } else {
                r15 = 1308;
                break;
              }
            } else {
              r15 = 1308;
            }
          } while (0);
          do {
            if (r15 == 1308) {
              if ((HEAP32[r55 + 40 >> 2] | 0) == (HEAP32[r24] | 0)) {
                break;
              } else {
                r15 = 1309;
                break;
              }
            }
          } while (0);
          if (r15 == 1309) {
            r19 = HEAP32[r14 + 19];
            if ((r19 | 0) == 0) {
              r45 = 1;
              STACKTOP = r16;
              return r45;
            }
            r50 = _gcry_error113(0);
            FUNCTION_TABLE[r19](r3, 15, r48, 0, r50);
            r45 = 1;
            STACKTOP = r16;
            return r45;
          }
          r50 = HEAP32[r26];
          if (r50 >>> 0 > 255) {
            r65 = _otrl_context_find(r1, r6, r4, r5, r50, 1, r17, r11, r12), r66 = r65 >> 2;
          } else {
            r65 = r55, r66 = r65 >> 2;
          }
          if (r7 | HEAP32[r26] >>> 0 < 256) {
            r64 = r65;
            break;
          }
          if ((HEAP32[r18] | 0) == 0) {
            if (!((r48 | 0) != (r65 | 0) & (r51 | 0) == 4)) {
              r61 = r65, r62 = r61 >> 2;
              break L1599;
            }
            r50 = r48 + 52 | 0;
            if ((HEAP32[r50 >> 2] | 0) != 1) {
              r61 = r65, r62 = r61 >> 2;
              break L1599;
            }
            r19 = r65 + 52 | 0;
            if ((HEAP32[r19 >> 2] | 0) == 1) {
              r61 = r65, r62 = r61 >> 2;
              break L1599;
            }
            HEAP32[r66 + 12] = HEAP32[r48 + 48 >> 2];
            HEAP32[r66 + 47] = 3;
            HEAP32[r66 + 70] = 3;
            _otrl_auth_copy_on_key(r50, r19);
            r61 = r65, r62 = r61 >> 2;
            break L1599;
          }
          HEAP32[r66 + 47] = 3;
          HEAP32[r66 + 70] = 3;
          if ((HEAP32[r18] | 0) != 0) {
            HEAP32[r66 + 12] = HEAP32[r48 + 48 >> 2];
          }
          if ((r51 | 0) == 4) {
            _otrl_auth_copy_on_key(r48 + 52 | 0, r65 + 52 | 0);
          } else if ((r51 | 0) != 3) {
            r45 = 1;
            STACKTOP = r16;
            return r45;
          }
          r19 = HEAP32[r14 + 4];
          if ((r19 | 0) == 0) {
            r61 = r65, r62 = r61 >> 2;
            break L1599;
          }
          FUNCTION_TABLE[r19](r3);
          r61 = r65, r62 = r61 >> 2;
          break L1599;
        }
      } while (0);
      _message_malformed(r2, r3, r64);
      r45 = 1;
      STACKTOP = r16;
      return r45;
    } else if ((r58 | 0) == 2) {
      if ((r52 & 2 | 0) == 0) {
        r45 = 1;
      } else {
        r61 = r55, r62 = r61 >> 2;
        break;
      }
      STACKTOP = r16;
      return r45;
    } else {
      r61 = r55, r62 = r61 >> 2;
    }
  } while (0);
  if (r47) {
    HEAP32[r10 >> 2] = r61;
  }
  r10 = _time(0);
  r47 = (r61 + 8 | 0) >> 2;
  HEAP32[HEAP32[r47] + 580 >> 2] = r10;
  _otrl_context_update_recent_child(r61, 0);
  HEAP32[r22] = 0;
  HEAP32[r22 + 1] = r1;
  HEAP32[r22 + 4] = r61;
  HEAP32[r22 + 2] = r2;
  HEAP32[r22 + 3] = r3;
  r10 = (r21 + 20 | 0) >> 2;
  HEAP32[r10] = -1;
  HEAP32[r22 + 6] = r8;
  do {
    if ((r51 | 0) == 3) {
      _send_or_error_auth(r2, r3, _otrl_auth_handle_commit(r61 + 52 | 0, r57, r58), r61, r1);
      if ((HEAP32[r10] | 0) != -1) {
        break;
      }
      HEAP32[r10] = 1;
      break;
    } else if ((r51 | 0) == 4) {
      r8 = r61 + 16 | 0;
      r22 = HEAP32[r8 >> 2];
      r55 = r61 + 20 | 0;
      r64 = HEAP32[r55 >> 2];
      r65 = _otrl_privkey_find(r1, r22, r64);
      do {
        if ((r65 | 0) == 0) {
          r66 = HEAP32[r14 + 1];
          if ((r66 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[r66](r3, r22, r64);
          r66 = _otrl_privkey_find(r1, HEAP32[r8 >> 2], HEAP32[r55 >> 2]);
          if ((r66 | 0) == 0) {
            break;
          } else {
            r67 = r66;
            r15 = 1345;
            break;
          }
        } else {
          r67 = r65;
          r15 = 1345;
        }
      } while (0);
      do {
        if (r15 == 1345) {
          r65 = _otrl_auth_handle_key(r61 + 52 | 0, r57, r29, r67);
          if ((HEAP32[r30] | r65 | 0) == 0) {
            break;
          }
          _send_or_error_auth(r2, r3, r65, r61, r1);
        }
      } while (0);
      if ((HEAP32[r10] | 0) != -1) {
        break;
      }
      HEAP32[r10] = 1;
      break;
    } else if ((r51 | 0) == 5) {
      r65 = r61 + 16 | 0;
      r55 = HEAP32[r65 >> 2];
      r8 = r61 + 20 | 0;
      r64 = HEAP32[r8 >> 2];
      r22 = _otrl_privkey_find(r1, r55, r64);
      do {
        if ((r22 | 0) == 0) {
          r66 = HEAP32[r14 + 1];
          if ((r66 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[r66](r3, r55, r64);
          r66 = _otrl_privkey_find(r1, HEAP32[r65 >> 2], HEAP32[r8 >> 2]);
          if ((r66 | 0) == 0) {
            break;
          } else {
            r68 = r66;
            r15 = 1352;
            break;
          }
        } else {
          r68 = r22;
          r15 = 1352;
        }
      } while (0);
      do {
        if (r15 == 1352) {
          r22 = _otrl_auth_handle_revealsig(r61 + 52 | 0, r57, r29, r68, 206, r21);
          if ((HEAP32[r30] | r22 | 0) == 0) {
            break;
          }
          _send_or_error_auth(r2, r3, r22, r61, r1);
          _maybe_resend(r21);
        }
      } while (0);
      if ((HEAP32[r10] | 0) != -1) {
        break;
      }
      HEAP32[r10] = 1;
      break;
    } else if ((r51 | 0) == 6) {
      r22 = _otrl_auth_handle_signature(r61 + 52 | 0, r57, r29, 206, r21);
      if ((HEAP32[r30] | r22 | 0) != 0) {
        _send_or_error_auth(r2, r3, r22, r61, r1);
        _maybe_resend(r21);
      }
      if ((HEAP32[r10] | 0) != -1) {
        break;
      }
      HEAP32[r10] = 1;
      break;
    } else if ((r51 | 0) == 7) {
      if ((HEAP32[r62 + 12] | 0) == 1) {
        r22 = HEAP32[r47];
        r69 = r22 + 40 | 0;
        r70 = HEAP32[r22 + 24 >> 2] - 1 | 0;
      } else {
        r69 = 0;
        r70 = 0;
      }
      r22 = r61 + 16 | 0;
      r8 = HEAP32[r22 >> 2];
      r65 = r61 + 20 | 0;
      r64 = HEAP32[r65 >> 2];
      r55 = _otrl_privkey_find(r1, r8, r64);
      do {
        if ((r55 | 0) == 0) {
          r66 = HEAP32[r14 + 1];
          if ((r66 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[r66](r3, r8, r64);
          r66 = _otrl_privkey_find(r1, HEAP32[r22 >> 2], HEAP32[r65 >> 2]);
          if ((r66 | 0) == 0) {
            break;
          } else {
            r71 = r66;
            r15 = 1365;
            break;
          }
        } else {
          r71 = r55;
          r15 = 1365;
        }
      } while (0);
      do {
        if (r15 == 1365) {
          r55 = _otrl_auth_handle_v1_key_exchange(r61 + 52 | 0, r54, r29, r71, r69, r70, 206, r21);
          if ((HEAP32[r30] | r55 | 0) == 0) {
            break;
          }
          _send_or_error_auth(r2, r3, r55, r61, r1);
          _maybe_resend(r21);
        }
      } while (0);
      if ((HEAP32[r10] | 0) != -1) {
        break;
      }
      HEAP32[r10] = 1;
      break;
    } else if ((r51 | 0) == 2) {
      if ((HEAP32[r62 + 12] | 0) == 1) {
        r55 = HEAP32[r47];
        r72 = r55 + 40 | 0;
        r73 = HEAP32[r55 + 24 >> 2] - 1 | 0;
      } else {
        r72 = 0;
        r73 = 0;
      }
      r55 = _otrl_proto_query_bestversion(r54, r52);
      do {
        if ((r55 | 0) == 3) {
          _send_or_error_auth(r2, r3, _otrl_auth_start_v23(r61 + 52 | 0, 3), r61, r1);
        } else if ((r55 | 0) == 2) {
          _send_or_error_auth(r2, r3, _otrl_auth_start_v23(r61 + 52 | 0, 2), r61, r1);
        } else if ((r55 | 0) == 1) {
          r65 = r61 + 16 | 0;
          r22 = HEAP32[r65 >> 2];
          r64 = r61 + 20 | 0;
          r8 = HEAP32[r64 >> 2];
          r66 = _otrl_privkey_find(r1, r22, r8);
          if ((r66 | 0) == 0) {
            r18 = HEAP32[r14 + 1];
            if ((r18 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[r18](r3, r22, r8);
            r8 = _otrl_privkey_find(r1, HEAP32[r65 >> 2], HEAP32[r64 >> 2]);
            if ((r8 | 0) == 0) {
              break;
            } else {
              r74 = r8;
            }
          } else {
            r74 = r66;
          }
          _send_or_error_auth(r2, r3, _otrl_auth_start_v1(r61 + 52 | 0, r72, r73, r74), r61, r1);
        }
      } while (0);
      if ((HEAP32[r10] | 0) != -1) {
        break;
      }
      HEAP32[r10] = 1;
      break;
    } else if ((r51 | 0) == 8) {
      r55 = HEAP32[r62 + 12];
      if ((r55 | 0) == 0 | (r55 | 0) == 2) {
        _otrl_proto_data_read_flags(r54, r35);
        if ((HEAP8[r35] & 1) << 24 >> 24 != 0) {
          HEAP32[r10] = 1;
          break;
        }
        do {
          if ((r49 | 0) == 0 | (r49 | 0) == (r61 | 0)) {
            r15 = 1376;
          } else {
            if ((HEAP32[r49 + 48 >> 2] | 0) != 1) {
              r15 = 1376;
              break;
            }
            r66 = HEAP32[r14 + 19];
            if ((r66 | 0) == 0) {
              break;
            }
            r8 = _gcry_error113(0);
            FUNCTION_TABLE[r66](r3, 15, r48, 0, r8);
            break;
          }
        } while (0);
        do {
          if (r15 == 1376) {
            r8 = HEAP32[r14 + 19];
            if ((r8 | 0) == 0) {
              break;
            }
            r66 = _gcry_error113(0);
            FUNCTION_TABLE[r8](r3, 7, r61, 0, r66);
          }
        } while (0);
        HEAP32[r10] = 1;
        break;
      } else if ((r55 | 0) != 1) {
        break;
      }
      r66 = _gcry_malloc_secure(32);
      r8 = _otrl_proto_accept_data(r33, r31, r61, r54, r35, r66);
      if ((r8 | 0) != 0) {
        r64 = (_gpg_err_code(r8) | 0) == 70;
        if ((HEAP8[r35] & 1) << 24 >> 24 != 0) {
          HEAP32[r10] = 1;
          break;
        }
        r8 = HEAP32[r14 + 19];
        r65 = (r8 | 0) != 0;
        do {
          if (r64) {
            if (!r65) {
              break;
            }
            r22 = _gcry_error113(0);
            FUNCTION_TABLE[r8](r3, 8, r61, 0, r22);
          } else {
            if (!r65) {
              break;
            }
            r22 = _gcry_error113(0);
            FUNCTION_TABLE[r8](r3, 9, r61, 0, r22);
          }
        } while (0);
        r8 = r2 + 12 | 0;
        do {
          if ((HEAP32[r8 >> 2] | 0) != 0) {
            r65 = HEAP32[r14 + 14];
            if ((r65 | 0) == 0) {
              break;
            }
            r55 = FUNCTION_TABLE[r65](r3, r61, r64 ? 3 : 4);
            do {
              if ((r55 | 0) != 0) {
                r65 = _malloc(_strlen(r55) + 13 | 0);
                if ((r65 | 0) == 0) {
                  break;
                }
                _memcpy(r65, 474516, 13);
                _strcat(r65, r55);
                FUNCTION_TABLE[HEAP32[r8 >> 2]](r3, r4, r5, r6, r65);
                _free(r65);
              }
            } while (0);
            r65 = HEAP32[r14 + 15];
            if ((r65 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[r65](r3, r55);
          }
        } while (0);
        HEAP32[r10] = 1;
        break;
      }
      if ((_otrl_tlv_find(HEAP32[r32], 1) | 0) != 0) {
        _otrl_context_force_finished(r61);
      }
      r8 = _otrl_tlv_find(HEAP32[r32], 8);
      do {
        if ((r8 | 0) != 0 & HEAP32[110160] >>> 0 > 262143) {
          r64 = HEAP32[r14 + 13];
          if ((r64 | 0) == 0) {
            break;
          }
          r65 = HEAP16[r8 + 2 >> 1];
          if ((r65 & 65535) <= 3) {
            break;
          }
          r22 = HEAP32[r8 + 4 >> 2];
          FUNCTION_TABLE[r64](r3, r61, HEAPU8[r22 + 1 | 0] << 16 | HEAPU8[r22] << 24 | HEAPU8[r22 + 2 | 0] << 8 | HEAPU8[r22 + 3 | 0], r22 + 4 | 0, (r65 & 65535) - 4 | 0, r66);
        }
      } while (0);
      _gcry_free(r66);
      r8 = (r61 + 296 | 0) >> 2;
      r65 = HEAP32[HEAP32[r8] + 44 >> 2];
      r22 = _otrl_tlv_find(HEAP32[r32], 7);
      L1746 : do {
        if ((r22 | 0) != 0) {
          do {
            if ((r65 | 0) == 0) {
              r64 = r22 + 2 | 0;
              r18 = HEAP16[r64 >> 1];
              if (r18 << 16 >> 16 == 0) {
                break;
              }
              r26 = r18 & 65535;
              r18 = r22 + 4 | 0;
              r12 = HEAP32[r18 >> 2];
              r11 = _memchr(r12, 0, r26 - 1 | 0);
              if ((r11 | 0) == 0) {
                r75 = r26;
              } else {
                r75 = 1 - r12 + r11 | 0;
              }
              _otrl_sm_step2a(HEAP32[r8], HEAP32[r18 >> 2] + r75 | 0, HEAPU16[r64 >> 1] - r75 | 0, 1);
              r64 = HEAP32[r14 + 18];
              r18 = (r64 | 0) != 0;
              if ((HEAP32[HEAP32[r8] + 52 >> 2] | 0) != -2) {
                if (!r18) {
                  break L1746;
                }
                FUNCTION_TABLE[r64](r3, 4, r61, 25, r12);
                break L1746;
              }
              if (r18) {
                FUNCTION_TABLE[r64](r3, 3, r61, 0, 0);
              }
              HEAP32[HEAP32[r8] + 44 >> 2] = 0;
              HEAP32[HEAP32[r8] + 52 >> 2] = 0;
              break L1746;
            }
          } while (0);
          r55 = HEAP32[r14 + 18];
          if ((r55 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[r55](r3, 1, r61, 0, 0);
        }
      } while (0);
      r22 = _otrl_tlv_find(HEAP32[r32], 2);
      do {
        if ((r22 | 0) != 0) {
          if ((r65 | 0) != 0) {
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[r66](r3, 1, r61, 0, 0);
            break;
          }
          _otrl_sm_step2a(HEAP32[r8], HEAP32[r22 + 4 >> 2], HEAPU16[r22 + 2 >> 1], 0);
          r66 = HEAP32[r14 + 18];
          r55 = (r66 | 0) != 0;
          if ((HEAP32[HEAP32[r8] + 52 >> 2] | 0) != -2) {
            if (!r55) {
              break;
            }
            FUNCTION_TABLE[r66](r3, 5, r61, 25, 0);
            break;
          }
          if (r55) {
            FUNCTION_TABLE[r66](r3, 3, r61, 0, 0);
          }
          HEAP32[HEAP32[r8] + 44 >> 2] = 0;
          HEAP32[HEAP32[r8] + 52 >> 2] = 0;
        }
      } while (0);
      r22 = _otrl_tlv_find(HEAP32[r32], 3);
      do {
        if ((r22 | 0) != 0) {
          if ((r65 | 0) != 1) {
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[r66](r3, 1, r61, 0, 0);
            break;
          }
          _otrl_sm_step3(HEAP32[r8], HEAP32[r22 + 4 >> 2], HEAPU16[r22 + 2 >> 1], r36, r37);
          if ((HEAP32[HEAP32[r8] + 52 >> 2] | 0) == -2) {
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) != 0) {
              FUNCTION_TABLE[r66](r3, 3, r61, 0, 0);
            }
            HEAP32[HEAP32[r8] + 44 >> 2] = 0;
            HEAP32[HEAP32[r8] + 52 >> 2] = 0;
          } else {
            r66 = _otrl_tlv_new(4, HEAP32[r37 >> 2] & 65535, HEAP32[r36 >> 2]);
            if ((_otrl_proto_create_data(r38, r61, 472456, r66, 1, 0) | 0) == 0) {
              _fragment_and_send(r2, r3, r61, HEAP32[r38 >> 2], 1, 0);
            }
            _free(HEAP32[r38 >> 2]);
            _otrl_tlv_free(r66);
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) != 0) {
              FUNCTION_TABLE[r66](r3, 6, r61, 60, 0);
            }
            HEAP32[HEAP32[r8] + 44 >> 2] = 3;
          }
          _free(HEAP32[r36 >> 2]);
        }
      } while (0);
      r22 = _otrl_tlv_find(HEAP32[r32], 4);
      do {
        if ((r22 | 0) != 0) {
          if ((r65 | 0) != 2) {
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[r66](r3, 1, r61, 0, 0);
            break;
          }
          r66 = _otrl_sm_step4(HEAP32[r8], HEAP32[r22 + 4 >> 2], HEAPU16[r22 + 2 >> 1], r39, r40);
          if ((HEAP32[HEAP32[r8] + 48 >> 2] | 0) == 0) {
            _set_smp_trust(r2, r3, r61, (r66 | 0) == (_gcry_error113(0) | 0) & 1);
          }
          if ((HEAP32[HEAP32[r8] + 52 >> 2] | 0) == -2) {
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) != 0) {
              FUNCTION_TABLE[r66](r3, 3, r61, 0, 0);
            }
            HEAP32[HEAP32[r8] + 44 >> 2] = 0;
            HEAP32[HEAP32[r8] + 52 >> 2] = 0;
          } else {
            r66 = _otrl_tlv_new(5, HEAP32[r40 >> 2] & 65535, HEAP32[r39 >> 2]);
            if ((_otrl_proto_create_data(r41, r61, 472456, r66, 1, 0) | 0) == 0) {
              _fragment_and_send(r2, r3, r61, HEAP32[r41 >> 2], 1, 0);
            }
            _free(HEAP32[r41 >> 2]);
            _otrl_tlv_free(r66);
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) != 0) {
              FUNCTION_TABLE[r66](r3, (HEAP32[HEAP32[r8] + 52 >> 2] | 0) == 1 ? 7 : 8, r61, 100, 0);
            }
            HEAP32[HEAP32[r8] + 44 >> 2] = 0;
          }
          _free(HEAP32[r39 >> 2]);
        }
      } while (0);
      r22 = _otrl_tlv_find(HEAP32[r32], 5);
      do {
        if ((r22 | 0) != 0) {
          if ((r65 | 0) != 3) {
            r66 = HEAP32[r14 + 18];
            if ((r66 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[r66](r3, 1, r61, 0, 0);
            break;
          }
          _set_smp_trust(r2, r3, r61, (_otrl_sm_step5(HEAP32[r8], HEAP32[r22 + 4 >> 2], HEAPU16[r22 + 2 >> 1]) | 0) == (_gcry_error113(0) | 0) & 1);
          r66 = HEAP32[HEAP32[r8] + 52 >> 2];
          r55 = HEAP32[r14 + 18];
          r64 = (r55 | 0) != 0;
          if ((r66 | 0) == -2) {
            if (r64) {
              FUNCTION_TABLE[r55](r3, 3, r61, 0, 0);
            }
            HEAP32[HEAP32[r8] + 44 >> 2] = 0;
            HEAP32[HEAP32[r8] + 52 >> 2] = 0;
            break;
          } else {
            if (r64) {
              FUNCTION_TABLE[r55](r3, (r66 | 0) == 1 ? 7 : 8, r61, 100, 0);
            }
            HEAP32[HEAP32[r8] + 44 >> 2] = 0;
            break;
          }
        }
      } while (0);
      do {
        if ((_otrl_tlv_find(HEAP32[r32], 6) | 0) != 0) {
          HEAP32[HEAP32[r8] + 44 >> 2] = 0;
          r22 = HEAP32[r14 + 18];
          if ((r22 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[r22](r3, 2, r61, 0, 0);
        }
      } while (0);
      do {
        if (HEAP8[HEAP32[r34]] << 24 >> 24 == 0) {
          r8 = HEAP32[r14 + 19];
          if ((r8 | 0) != 0) {
            r22 = _gcry_error113(0);
            FUNCTION_TABLE[r8](r3, 10, r61, 0, r22);
          }
          HEAP32[r10] = 1;
        } else {
          if ((HEAP32[r10] | 0) == 1) {
            break;
          }
          if ((HEAP32[HEAP32[r47] + 12 >> 2] | 0) == 0) {
            break;
          }
          r22 = _time(0);
          if ((HEAP32[HEAP32[r47] + 576 >> 2] | 0) >= (r22 - 60 | 0)) {
            break;
          }
          if ((_otrl_proto_create_data(r42, r61, 472456, 0, 1, 0) | 0) != 0) {
            break;
          }
          r8 = HEAP32[r14 + 3];
          if ((r8 | 0) != 0) {
            FUNCTION_TABLE[r8](r3, r4, r5, r6, HEAP32[r42 >> 2]);
          }
          _free(HEAP32[r42 >> 2]);
          HEAP32[HEAP32[r47] + 576 >> 2] = r22;
          _otrl_context_update_recent_child(r61, 1);
          r22 = HEAP32[r14 + 19];
          if ((r22 | 0) == 0) {
            break;
          }
          r8 = _gcry_error113(0);
          FUNCTION_TABLE[r22](r3, 11, r61, 0, r8);
        }
      } while (0);
      r8 = HEAP32[r32];
      if (r46) {
        HEAP32[r9 >> 2] = r8;
      } else {
        _otrl_tlv_free(r8);
      }
      if ((HEAP32[r10] | 0) == 1) {
        _free(HEAP32[r34]);
        break;
      }
      HEAP32[r44] = 0;
      HEAP32[r13] = HEAP32[r34];
      HEAP32[r10] = 0;
      r8 = HEAP32[r14 + 21];
      if ((r8 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[r8](r3, r61, 1, r43, HEAP32[r34]);
      if ((HEAP32[r44] | 0) == 0) {
        break;
      }
      _free(HEAP32[r34]);
      HEAP32[r34] = 0;
      HEAP32[r13] = _strdup(HEAP32[r44]);
      r8 = HEAP32[r14 + 22];
      if ((r8 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[r8](r3, r61, HEAP32[r44]);
      break;
    } else if ((r51 | 0) == 9) {
      if ((r52 & 64 | 0) != 0) {
        r8 = r61 + 16 | 0;
        r22 = _otrl_proto_default_query_msg(HEAP32[r8 >> 2], r52);
        do {
          if ((r22 | 0) != 0) {
            r65 = HEAP32[r14 + 3];
            if ((r65 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[r65](r3, HEAP32[r8 >> 2], HEAP32[r62 + 5], HEAP32[r62 + 3], r22);
          }
        } while (0);
        _free(r22);
      }
      if ((HEAP32[r62 + 12] | 0) == 1) {
        HEAP32[HEAP32[r47] + 588 >> 2] = 1;
      }
      r8 = HEAP32[r14 + 19];
      if ((r8 | 0) == 0) {
        break;
      }
      r65 = _strstr(r54, 474516);
      if ((r65 | 0) == 0) {
        break;
      }
      r66 = r65 + 12 | 0;
      r55 = HEAP8[r66] << 24 >> 24 == 32 ? r65 + 13 | 0 : r66;
      r66 = _gcry_error113(0);
      FUNCTION_TABLE[r8](r3, 12, r61, r55, r66);
      HEAP32[r10] = 1;
      break;
    } else if ((r51 | 0) == 1) {
      r66 = _otrl_proto_whitespace_bestversion(r54, r27, r28, r52);
      do {
        if ((HEAP32[r27 >> 2] | 0) != 0) {
          r55 = HEAP32[r28 >> 2];
          if ((r55 | 0) == 0) {
            break;
          }
          r8 = _strlen(r55);
          r55 = _strdup(r54);
          if ((r55 | 0) == 0) {
            break;
          }
          r65 = r54;
          _memmove(r55 + (HEAP32[r27 >> 2] - r65) | 0, r55 + (HEAP32[r28 >> 2] - r65) | 0, r8 + 1 | 0, 1, 0);
          HEAP32[r13] = r55;
          HEAP32[r10] = 0;
        }
      } while (0);
      if ((r66 | 0) == 0) {
        r15 = 1513;
        break;
      }
      if ((HEAP32[r62 + 12] | 0) == 1) {
        r15 = 1513;
        break;
      }
      if ((r52 & 32 | 0) == 0) {
        r15 = 1513;
        break;
      }
      if ((r66 | 0) == 3) {
        _send_or_error_auth(r2, r3, _otrl_auth_start_v23(r61 + 52 | 0, 3), r61, r1);
        r15 = 1513;
        break;
      } else if ((r66 | 0) == 2) {
        _send_or_error_auth(r2, r3, _otrl_auth_start_v23(r61 + 52 | 0, 2), r61, r1);
        r15 = 1513;
        break;
      } else if ((r66 | 0) == 1) {
        r22 = r61 + 16 | 0;
        r55 = HEAP32[r22 >> 2];
        r8 = r61 + 20 | 0;
        r65 = HEAP32[r8 >> 2];
        r64 = _otrl_privkey_find(r1, r55, r65);
        if ((r64 | 0) == 0) {
          r18 = HEAP32[r14 + 1];
          if ((r18 | 0) == 0) {
            r15 = 1513;
            break;
          }
          FUNCTION_TABLE[r18](r3, r55, r65);
          r65 = _otrl_privkey_find(r1, HEAP32[r22 >> 2], HEAP32[r8 >> 2]);
          if ((r65 | 0) == 0) {
            r15 = 1513;
            break;
          } else {
            r76 = r65;
          }
        } else {
          r76 = r64;
        }
        _send_or_error_auth(r2, r3, _otrl_auth_start_v1(r61 + 52 | 0, 0, 0, r76), r61, r1);
        r15 = 1513;
        break;
      } else {
        r15 = 1513;
        break;
      }
    } else if ((r51 | 0) == 0) {
      r15 = 1513;
    } else if ((r51 | 0) == 10) {
      r64 = HEAP32[r14 + 19];
      if ((r64 | 0) != 0) {
        r65 = _gcry_error113(0);
        FUNCTION_TABLE[r64](r3, 14, r61, 0, r65);
      }
      if ((HEAP32[r10] | 0) != -1) {
        break;
      }
      HEAP32[r10] = 1;
      break;
    }
  } while (0);
  do {
    if (r15 == 1513) {
      if ((HEAP32[r49 + 48 >> 2] | 0) == 0) {
        if ((r52 & 8 | 0) == 0) {
          break;
        }
      }
      r51 = HEAP32[r13];
      r1 = HEAP32[r14 + 19];
      if ((r1 | 0) == 0) {
        break;
      }
      r76 = _gcry_error113(0);
      FUNCTION_TABLE[r1](r3, 13, r61, (r51 | 0) == 0 ? r54 : r51, r76);
      _free(HEAP32[r13]);
      HEAP32[r13] = 0;
      HEAP32[r10] = 1;
    }
  } while (0);
  if ((r56 | 0) != 0) {
    _free(HEAP32[r20]);
  }
  if ((HEAP32[r10] | 0) == -1) {
    HEAP32[r10] = 0;
  }
  r45 = HEAP32[r10];
  STACKTOP = r16;
  return r45;
}
function _otrl_message_poll_get_default_interval(r1) {
  return 70;
}
function _gpg_err_code(r1) {
  return r1 & 65535;
}
function _message_malformed(r1, r2, r3) {
  var r4, r5, r6;
  r4 = HEAP32[r1 + 76 >> 2];
  if ((r4 | 0) != 0) {
    r5 = _gcry_error113(0);
    FUNCTION_TABLE[r4](r2, 9, r3, 0, r5);
  }
  r5 = r1 + 12 | 0;
  if ((HEAP32[r5 >> 2] | 0) == 0) {
    return;
  }
  r4 = HEAP32[r1 + 56 >> 2];
  if ((r4 | 0) == 0) {
    return;
  }
  r6 = FUNCTION_TABLE[r4](r2, r3, 4);
  if ((r6 | 0) == 0) {
    return;
  }
  r4 = _malloc(_strlen(r6) + 13 | 0);
  if ((r4 | 0) != 0) {
    _memcpy(r4, 474516, 13);
    _strcat(r4, r6);
    FUNCTION_TABLE[HEAP32[r5 >> 2]](r2, HEAP32[r3 + 16 >> 2], HEAP32[r3 + 20 >> 2], HEAP32[r3 + 12 >> 2], r4);
    _free(r4);
  }
  r4 = HEAP32[r1 + 60 >> 2];
  if ((r4 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r4](r2, r6);
  return;
}
function _send_or_error_auth(r1, r2, r3, r4, r5) {
  var r6, r7, r8;
  r6 = r4 >> 2;
  r7 = 0;
  if ((r3 | 0) != 0) {
    r8 = HEAP32[r1 + 76 >> 2];
    if ((r8 | 0) == 0) {
      return;
    }
    FUNCTION_TABLE[r8](r2, 4, r4, 0, r3);
    return;
  }
  r3 = HEAP32[r6 + 55];
  if ((r3 | 0) == 0) {
    return;
  }
  if (HEAP8[r3] << 24 >> 24 == 0) {
    return;
  }
  _fragment_and_send(r1, r2, r4, r3, 1, 0);
  r3 = _time(0);
  r8 = r4 + 24 | 0;
  do {
    if ((HEAP32[r8 >> 2] | 0) == (r4 | 0)) {
      if ((HEAP32[r6 + 47] | 0) == 3) {
        break;
      } else {
        r7 = 1563;
        break;
      }
    } else {
      r7 = 1563;
    }
  } while (0);
  if (r7 == 1563) {
    HEAP32[HEAP32[r6 + 2] + 576 >> 2] = r3;
    _otrl_context_update_recent_child(r4, 1);
  }
  if ((HEAP32[r8 >> 2] | 0) != (r4 | 0)) {
    return;
  }
  if ((HEAP32[r6 + 13] | 0) != 1) {
    return;
  }
  if ((HEAP32[r6 + 47] | 0) != 3) {
    return;
  }
  HEAP32[r6 + 56] = r3;
  r3 = r5 + 16 | 0;
  if ((HEAP32[r3 >> 2] | 0) != 0 | (r1 | 0) == 0) {
    return;
  }
  r5 = HEAP32[r1 + 92 >> 2];
  if ((r5 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r5](r2, 70);
  HEAP32[r3 >> 2] = 1;
  return;
}
function _go_encrypted(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r3 = r2 >> 2;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  HEAP32[r6 >> 2] = 0;
  r7 = (r2 + 16 | 0) >> 2;
  r8 = HEAP32[r7];
  r9 = HEAP32[r8 + 48 >> 2];
  r10 = HEAP32[r8 + 248 >> 2];
  if ((_gcry_mpi_cmp(HEAP32[r1 + 80 >> 2], HEAP32[r1 + 16 >> 2]) | 0) == 0) {
    r1 = HEAP32[HEAP32[r3 + 2] + 76 >> 2];
    if ((r1 | 0) != 0) {
      r8 = HEAP32[r3 + 3];
      r11 = HEAP32[r7];
      r12 = _gcry_error113(0);
      FUNCTION_TABLE[r1](r8, 5, r11, 0, r12);
    }
    HEAP32[r3 + 5] = 1;
    r13 = _gcry_error113(0);
    STACKTOP = r5;
    return r13;
  }
  r12 = HEAP32[r7];
  r11 = _otrl_context_find_fingerprint(r12, r12 + 164 | 0, 1, r6);
  do {
    if ((HEAP32[r6 >> 2] | 0) != 0) {
      r12 = r2 + 8 | 0;
      r8 = HEAP32[HEAP32[r12 >> 2] + 20 >> 2];
      if ((r8 | 0) != 0) {
        r1 = HEAP32[r7], r14 = r1 >> 2;
        FUNCTION_TABLE[r8](HEAP32[r3 + 3], HEAP32[r3 + 1], HEAP32[r14 + 4], HEAP32[r14 + 5], HEAP32[r14 + 3], r1 + 164 | 0);
      }
      r1 = HEAP32[HEAP32[r12 >> 2] + 24 >> 2];
      if ((r1 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[r1](HEAP32[r3 + 3]);
    }
  } while (0);
  r6 = HEAP32[r7] >> 2;
  r1 = (r10 | 0) == (r11 | 0);
  do {
    if ((HEAP32[r6 + 12] | 0) == 1 & r1) {
      r10 = HEAP32[r6 + 2];
      if ((HEAP32[r10 + 24 >> 2] - 1 | 0) != (HEAP32[r6 + 18] | 0)) {
        break;
      }
      if ((_gcry_mpi_cmp(HEAP32[r10 + 48 >> 2], HEAP32[r6 + 17]) | 0) != 0) {
        break;
      }
      r10 = HEAP32[r7] >> 2;
      r12 = HEAP32[r10 + 2];
      r14 = HEAP32[r12 + 12 >> 2];
      do {
        if ((r14 | 0) == 0) {
          r4 = 1598;
        } else {
          if ((r14 | 0) != (HEAP32[r10 + 34] | 0)) {
            r4 = 1598;
            break;
          }
          if ((_gcry_mpi_cmp(HEAP32[r12 + 16 >> 2], HEAP32[r10 + 33]) | 0) == 0) {
            break;
          } else {
            r4 = 1598;
            break;
          }
        }
      } while (0);
      if (r4 == 1598) {
        r10 = HEAP32[r7] >> 2;
        r12 = HEAP32[r10 + 2];
        r14 = HEAP32[r12 + 12 >> 2];
        if (r14 >>> 0 <= 1) {
          break;
        }
        if ((r14 - 1 | 0) != (HEAP32[r10 + 34] | 0)) {
          break;
        }
        r14 = HEAP32[r12 + 20 >> 2];
        if ((r14 | 0) == 0) {
          break;
        }
        if ((_gcry_mpi_cmp(r14, HEAP32[r10 + 33]) | 0) != 0) {
          break;
        }
      }
      r10 = HEAP32[HEAP32[r3 + 2] + 36 >> 2];
      if ((r10 | 0) != 0) {
        r14 = HEAP32[r7];
        FUNCTION_TABLE[r10](HEAP32[r3 + 3], r14, HEAP32[r14 + 184 >> 2]);
      }
      HEAP32[r3 + 5] = 1;
      r13 = _gcry_error113(0);
      STACKTOP = r5;
      return r13;
    }
  } while (0);
  r6 = HEAP32[r7];
  _memcpy(r6 + 252 | 0, r6 + 192 | 0, 20);
  r6 = HEAP32[r7];
  HEAP32[r6 + 272 >> 2] = HEAP32[r6 + 212 >> 2];
  r6 = HEAP32[r7];
  HEAP32[r6 + 276 >> 2] = HEAP32[r6 + 216 >> 2];
  r6 = HEAP32[r7];
  HEAP32[r6 + 280 >> 2] = HEAP32[r6 + 188 >> 2];
  r6 = HEAP32[r7];
  HEAP32[HEAP32[r6 + 8 >> 2] + 12 >> 2] = HEAP32[r6 + 136 >> 2];
  _gcry_mpi_release(HEAP32[HEAP32[HEAP32[r7] + 8 >> 2] + 16 >> 2]);
  _gcry_mpi_release(HEAP32[HEAP32[HEAP32[r7] + 8 >> 2] + 20 >> 2]);
  r6 = _gcry_mpi_copy(HEAP32[HEAP32[r7] + 132 >> 2]);
  HEAP32[HEAP32[HEAP32[r7] + 8 >> 2] + 16 >> 2] = r6;
  HEAP32[HEAP32[HEAP32[r7] + 8 >> 2] + 20 >> 2] = 0;
  r6 = HEAP32[r7] >> 2;
  r14 = HEAP32[r6 + 2];
  do {
    if ((HEAP32[r14 + 24 >> 2] - 1 | 0) == (HEAP32[r6 + 18] | 0)) {
      if ((_gcry_mpi_cmp(HEAP32[r14 + 48 >> 2], HEAP32[r6 + 17]) | 0) == 0) {
        break;
      } else {
        r4 = 1607;
        break;
      }
    } else {
      r4 = 1607;
    }
  } while (0);
  if (r4 == 1607) {
    _otrl_dh_keypair_free(HEAP32[HEAP32[r7] + 8 >> 2] + 28 | 0);
    _otrl_dh_keypair_free(HEAP32[HEAP32[r7] + 8 >> 2] + 40 | 0);
    r4 = HEAP32[r7];
    _otrl_dh_keypair_copy(HEAP32[r4 + 8 >> 2] + 40 | 0, r4 + 60 | 0);
    r4 = HEAP32[HEAP32[r7] + 8 >> 2];
    _otrl_dh_gen_keypair(HEAP32[r4 + 40 >> 2], r4 + 28 | 0);
    r4 = HEAP32[r7];
    HEAP32[HEAP32[r4 + 8 >> 2] + 24 >> 2] = HEAP32[r4 + 72 >> 2] + 1 | 0;
  }
  _otrl_dh_session_free(HEAP32[HEAP32[r7] + 8 >> 2] + 52 | 0);
  r4 = HEAP32[HEAP32[r7] + 8 >> 2];
  r6 = _otrl_dh_session(r4 + 52 | 0, r4 + 28 | 0, HEAP32[r4 + 16 >> 2]);
  if ((r6 | 0) != 0) {
    r13 = r6;
    STACKTOP = r5;
    return r13;
  }
  _otrl_dh_session_free(HEAP32[HEAP32[r7] + 8 >> 2] + 308 | 0);
  r6 = HEAP32[HEAP32[r7] + 8 >> 2];
  r4 = _otrl_dh_session(r6 + 308 | 0, r6 + 40 | 0, HEAP32[r6 + 16 >> 2]);
  if ((r4 | 0) != 0) {
    r13 = r4;
    STACKTOP = r5;
    return r13;
  }
  r4 = HEAP32[HEAP32[r7] + 8 >> 2] + 572 | 0;
  HEAP32[r4 >> 2] = HEAP32[r4 >> 2] + 1 | 0;
  HEAP32[HEAP32[r7] + 248 >> 2] = r11;
  HEAP32[HEAP32[r7] + 48 >> 2] = 1;
  r11 = r2 + 8 | 0;
  r2 = HEAP32[HEAP32[r11 >> 2] + 16 >> 2];
  if ((r2 | 0) != 0) {
    FUNCTION_TABLE[r2](HEAP32[r3 + 3]);
  }
  r2 = HEAP32[r11 >> 2];
  do {
    if ((r9 | 0) == 1 & r1) {
      r11 = HEAP32[r2 + 36 >> 2];
      if ((r11 | 0) == 0) {
        break;
      }
      r4 = HEAP32[r7];
      FUNCTION_TABLE[r11](HEAP32[r3 + 3], r4, HEAP32[r4 + 184 >> 2]);
    } else {
      r4 = HEAP32[r2 + 28 >> 2];
      if ((r4 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[r4](HEAP32[r3 + 3], HEAP32[r7]);
    }
  } while (0);
  HEAP32[r3] = 1;
  r13 = _gpg_error();
  STACKTOP = r5;
  return r13;
}
function _maybe_resend(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2;
  if ((HEAP32[r1 >> 2] | 0) == 0) {
    STACKTOP = r2;
    return;
  }
  r4 = _time(0);
  r5 = (r1 + 16 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = HEAP32[r6 + 8 >> 2] >> 2;
  r8 = HEAP32[r7 + 146];
  if ((r8 | 0) == 0) {
    STACKTOP = r2;
    return;
  }
  r9 = HEAP32[r7 + 147];
  if ((r9 | 0) == 0) {
    STACKTOP = r2;
    return;
  }
  if ((HEAP32[r7 + 144] | 0) < (r4 - 60 | 0)) {
    STACKTOP = r2;
    return;
  }
  r7 = (r9 | 0) == 1;
  do {
    if (r7) {
      r9 = r1 + 8 | 0;
      r10 = HEAP32[HEAP32[r9 >> 2] + 64 >> 2];
      if ((r10 | 0) == 0) {
        r11 = 0;
      } else {
        r11 = FUNCTION_TABLE[r10](HEAP32[r1 + 12 >> 2], r6);
      }
      r10 = (r11 | 0) == 0;
      r12 = r10 ? 491040 : r11;
      r13 = _malloc(_strlen(HEAP32[HEAP32[HEAP32[r5] + 8 >> 2] + 584 >> 2]) + _strlen(r12) + 2 | 0);
      if ((r13 | 0) == 0) {
        STACKTOP = r2;
        return;
      }
      _strcpy(r13, r12);
      r14 = r13 + _strlen(r13) | 0;
      tempBigInt = 32;
      HEAP8[r14] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r14 + 1 | 0] = tempBigInt & 255;
      _strcat(r13, HEAP32[HEAP32[HEAP32[r5] + 8 >> 2] + 584 >> 2]);
      if (!r10) {
        FUNCTION_TABLE[HEAP32[HEAP32[r9 >> 2] + 68 >> 2]](HEAP32[r1 + 12 >> 2], r12);
      }
      r12 = _otrl_proto_create_data(r3, HEAP32[r5], r13, 0, 0, 0);
      if (!r7) {
        r15 = r12;
        break;
      }
      _free(r13);
      r15 = r12;
    } else {
      r15 = _otrl_proto_create_data(r3, HEAP32[r5], r8, 0, 0, 0);
    }
  } while (0);
  if ((r15 | 0) != 0) {
    STACKTOP = r2;
    return;
  }
  r15 = r1 + 8 | 0;
  r8 = r1 + 12 | 0;
  _fragment_and_send(HEAP32[r15 >> 2], HEAP32[r8 >> 2], HEAP32[r5], HEAP32[r3 >> 2], 1, 0);
  _free(HEAP32[r3 >> 2]);
  HEAP32[HEAP32[HEAP32[r5] + 8 >> 2] + 576 >> 2] = r4;
  _otrl_context_update_recent_child(HEAP32[r5], 1);
  do {
    if (r7) {
      r4 = HEAP32[HEAP32[r15 >> 2] + 76 >> 2];
      if ((r4 | 0) == 0) {
        break;
      }
      r3 = HEAP32[r8 >> 2];
      r11 = HEAP32[r5];
      r6 = _gcry_error113(0);
      FUNCTION_TABLE[r4](r3, 6, r11, 0, r6);
    }
  } while (0);
  HEAP32[r1 + 20 >> 2] = 1;
  STACKTOP = r2;
  return;
}
function _set_smp_trust(r1, r2, r3, r4) {
  _otrl_context_set_trust(HEAP32[r3 + 248 >> 2], (r4 | 0) != 0 ? 465992 : 472456);
  r4 = HEAP32[r1 + 24 >> 2];
  if ((r4 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r4](r2);
  return;
}
function _otrl_message_disconnect(r1, r2, r3, r4, r5, r6, r7) {
  var r8;
  r8 = _otrl_context_find(r1, r6, r4, r5, r7, 0, 0, 0, 0);
  if ((r8 | 0) == 0) {
    return;
  }
  _disconnect_context(r2, r3, r8);
  return;
}
function _disconnect_context(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4, r6 = r5 >> 2;
  if ((r3 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  do {
    if ((HEAP32[r3 + 48 >> 2] | 0) == 1) {
      if ((HEAP32[HEAP32[r3 + 8 >> 2] + 12 >> 2] | 0) == 0) {
        break;
      }
      r7 = HEAP32[r1 + 8 >> 2];
      if ((r7 | 0) == 0) {
        break;
      }
      r8 = r3 + 16 | 0;
      r9 = r3 + 20 | 0;
      r10 = r3 + 12 | 0;
      if ((FUNCTION_TABLE[r7](r2, HEAP32[r8 >> 2], HEAP32[r9 >> 2], HEAP32[r10 >> 2]) | 0) != 1) {
        break;
      }
      r7 = r1 + 12 | 0;
      if ((HEAP32[r7 >> 2] | 0) == 0) {
        break;
      }
      HEAP32[r6] = 0;
      r11 = _otrl_tlv_new(1, 0, 0);
      if ((_otrl_proto_create_data(r5, r3, 472456, r11, 1, 0) | 0) == 0) {
        FUNCTION_TABLE[HEAP32[r7 >> 2]](r2, HEAP32[r8 >> 2], HEAP32[r9 >> 2], HEAP32[r10 >> 2], HEAP32[r6]);
      }
      _free(HEAP32[r6]);
      _otrl_tlv_free(r11);
    }
  } while (0);
  _otrl_context_force_plaintext(r3);
  r3 = HEAP32[r1 + 16 >> 2];
  if ((r3 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  FUNCTION_TABLE[r3](r2);
  STACKTOP = r4;
  return;
}
function _otrl_message_disconnect_all_instances(r1, r2, r3, r4, r5, r6) {
  var r7, r8;
  r7 = 0;
  if ((r6 | 0) == 0 | (r4 | 0) == 0 | (r5 | 0) == 0) {
    return;
  }
  r8 = _otrl_context_find(r1, r6, r4, r5, 0, 0, 0, 0, 0);
  if ((r8 | 0) == 0) {
    return;
  }
  r5 = r8 + 24 | 0;
  r4 = r8;
  while (1) {
    if ((HEAP32[r4 + 24 >> 2] | 0) != (HEAP32[r5 >> 2] | 0)) {
      r7 = 1682;
      break;
    }
    _disconnect_context(r2, r3, r4);
    r8 = HEAP32[r4 >> 2];
    if ((r8 | 0) == 0) {
      r7 = 1683;
      break;
    } else {
      r4 = r8;
    }
  }
  if (r7 == 1682) {
    return;
  } else if (r7 == 1683) {
    return;
  }
}
function _otrl_message_symkey(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16;
  r1 = r4 >> 2;
  r9 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r10 = r9, r11 = r10 >> 2;
  do {
    if ((r4 | 0) != 0) {
      r12 = (r7 | 0) != 0;
      if (r12 & (r6 | 0) == 0) {
        break;
      }
      do {
        if ((HEAP32[r1 + 12] | 0) == 1) {
          if ((HEAP32[HEAP32[r1 + 2] + 12 >> 2] | 0) == 0) {
            break;
          }
          r13 = r7 + 4 | 0;
          r14 = _malloc(r13);
          HEAP32[r11] = 0;
          HEAP8[r14] = r5 >>> 24 & 255;
          HEAP8[r14 + 1 | 0] = r5 >>> 16 & 255;
          HEAP8[r14 + 2 | 0] = r5 >>> 8 & 255;
          HEAP8[r14 + 3 | 0] = r5 & 255;
          if (r12) {
            _memmove(r14 + 4 | 0, r6, r7, 1, 0);
          }
          r15 = _otrl_tlv_new(8, r13 & 65535, r14);
          _free(r14);
          r14 = _otrl_proto_create_data(r10, r4, 472456, r15, 1, r8);
          do {
            if ((r14 | 0) == 0) {
              r13 = HEAP32[r2 + 12 >> 2];
              if ((r13 | 0) == 0) {
                break;
              }
              FUNCTION_TABLE[r13](r3, HEAP32[r1 + 4], HEAP32[r1 + 5], HEAP32[r1 + 3], HEAP32[r11]);
            }
          } while (0);
          _free(HEAP32[r11]);
          _otrl_tlv_free(r15);
          r16 = r14;
          STACKTOP = r9;
          return r16;
        }
      } while (0);
      r16 = _gcry_error113(55);
      STACKTOP = r9;
      return r16;
    }
  } while (0);
  r16 = _gcry_error113(55);
  STACKTOP = r9;
  return r16;
}
function _gpg_err_make114(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function _otrl_tlv_seriallen(r1) {
  var r2, r3, r4, r5;
  if ((r1 | 0) == 0) {
    r2 = 0;
    return r2;
  } else {
    r3 = r1;
    r4 = 0;
  }
  while (1) {
    r1 = r4 + HEAPU16[r3 + 2 >> 1] + 4 | 0;
    r5 = HEAP32[r3 + 8 >> 2];
    if ((r5 | 0) == 0) {
      r2 = r1;
      break;
    } else {
      r3 = r5;
      r4 = r1;
    }
  }
  return r2;
}
function _otrl_tlv_find(r1, r2) {
  var r3, r4, r5;
  r3 = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  } else {
    r5 = r1;
  }
  while (1) {
    if (HEAP16[r5 >> 1] << 16 >> 16 == r2 << 16 >> 16) {
      r4 = r5;
      r3 = 1715;
      break;
    }
    r1 = HEAP32[r5 + 8 >> 2];
    if ((r1 | 0) == 0) {
      r4 = 0;
      r3 = 1716;
      break;
    } else {
      r5 = r1;
    }
  }
  if (r3 == 1715) {
    return r4;
  } else if (r3 == 1716) {
    return r4;
  }
}
function _otrl_message_poll(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = _time(0) - 60 | 0;
  if ((r1 | 0) == 0) {
    return;
  }
  r5 = HEAP32[r1 >> 2];
  L2145 : do {
    if ((r5 | 0) == 0) {
      r6 = 0;
    } else {
      r7 = 0;
      r8 = r5, r9 = r8 >> 2;
      while (1) {
        do {
          if ((HEAP32[r9 + 6] | 0) == (r8 | 0)) {
            r10 = r8 + 52 | 0;
            if ((HEAP32[r10 >> 2] | 0) != 1) {
              r11 = r7;
              break;
            }
            if ((HEAP32[r9 + 47] | 0) != 3) {
              r11 = r7;
              break;
            }
            r12 = HEAP32[r9 + 56];
            if ((r12 | 0) <= 0) {
              r11 = r7;
              break;
            }
            if ((r12 | 0) >= (r4 | 0)) {
              r11 = 1;
              break;
            }
            _otrl_auth_clear(r10);
            r11 = r7;
          } else {
            r11 = r7;
          }
        } while (0);
        r10 = HEAP32[r9];
        if ((r10 | 0) == 0) {
          r6 = r11;
          break L2145;
        } else {
          r7 = r11;
          r8 = r10, r9 = r8 >> 2;
        }
      }
    }
  } while (0);
  if ((r6 | 0) != 0 | (r2 | 0) == 0) {
    return;
  }
  r6 = HEAP32[r2 + 92 >> 2];
  if ((r6 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r6](r3, 0);
  HEAP32[r1 + 16 >> 2] = 0;
  return;
}
function _gpg_error() {
  return _gpg_err_make114(0, 0);
}
function _gcry_err_make115(r1) {
  return _gpg_err_make114(32, r1);
}
function _otrl_userstate_create() {
  var r1, r2, r3;
  r1 = _malloc(20), r2 = r1 >> 2;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  HEAP32[r2] = 0;
  HEAP32[r2 + 1] = 0;
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 3] = 0;
  HEAP32[r2 + 4] = 0;
  r3 = r1;
  return r3;
}
function _otrl_userstate_free(r1) {
  _otrl_context_forget_all(r1);
  _otrl_privkey_forget_all(r1);
  _otrl_privkey_pending_forget_all(r1);
  _otrl_instag_forget_all(r1);
  _free(r1);
  return;
}
function _otrl_tlv_new(r1, r2, r3) {
  var r4, r5, r6;
  r4 = _malloc(12);
  if ((r4 | 0) == 0) {
    ___assert_func(489304, 32, 493956, 489960);
  }
  HEAP16[r4 >> 1] = r1;
  r1 = r4 + 2 | 0;
  HEAP16[r1 >> 1] = r2;
  r5 = r2 & 65535;
  r2 = _malloc(r5 + 1 | 0);
  r6 = (r4 + 4 | 0) >> 2;
  HEAP32[r6] = r2;
  if ((r2 | 0) == 0) {
    ___assert_func(489304, 36, 493956, 481464);
  }
  _memmove(HEAP32[r6], r3, r5, 1, 0);
  HEAP8[HEAP32[r6] + HEAPU16[r1 >> 1] | 0] = 0;
  HEAP32[r4 + 8 >> 2] = 0;
  return r4;
}
function _otrl_tlv_parse(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = 0;
  L2179 : do {
    if (r2 >>> 0 > 3) {
      r5 = r4;
      r6 = r2;
      r7 = r1;
      while (1) {
        r8 = HEAPU8[r7 + 2 | 0] << 8 | HEAPU8[r7 + 3 | 0];
        r9 = r6 - 4 | 0;
        r10 = r8 & 65535;
        if (r9 >>> 0 < r10 >>> 0) {
          break L2179;
        }
        r11 = _otrl_tlv_new(HEAPU8[r7] << 8 | HEAPU8[r7 + 1 | 0], r8, r7 + 4 | 0);
        HEAP32[r5 >> 2] = r11;
        r8 = r9 - r10 | 0;
        if (r8 >>> 0 > 3) {
          r5 = r11 + 8 | 0;
          r6 = r8;
          r7 = r10 + (r7 + 4) | 0;
        } else {
          break L2179;
        }
      }
    }
  } while (0);
  STACKTOP = r3;
  return HEAP32[r4 >> 2];
}
function _otrl_tlv_free(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    return;
  } else {
    r2 = r1;
  }
  while (1) {
    r1 = HEAP32[r2 + 8 >> 2];
    _free(HEAP32[r2 + 4 >> 2]);
    _free(r2);
    if ((r1 | 0) == 0) {
      break;
    } else {
      r2 = r1;
    }
  }
  return;
}
function _otrl_tlv_serialize(r1, r2) {
  var r3, r4;
  if ((r2 | 0) == 0) {
    return;
  } else {
    r3 = r1;
    r4 = r2;
  }
  while (1) {
    r2 = r4 | 0;
    HEAP8[r3] = HEAPU16[r2 >> 1] >>> 8 & 255;
    HEAP8[r3 + 1 | 0] = HEAP16[r2 >> 1] & 255;
    r2 = (r4 + 2 | 0) >> 1;
    HEAP8[r3 + 2 | 0] = HEAPU16[r2] >>> 8 & 255;
    HEAP8[r3 + 3 | 0] = HEAP16[r2] & 255;
    _memmove(r3 + 4 | 0, HEAP32[r4 + 4 >> 2], HEAPU16[r2], 1, 0);
    r1 = HEAP32[r4 + 8 >> 2];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r3 = r3 + HEAPU16[r2] + 4 | 0;
      r4 = r1;
    }
  }
  return;
}
function _otrl_auth_new(r1) {
  HEAP32[r1 + 52 >> 2] = 0;
  _otrl_dh_keypair_init(r1 + 60 | 0);
  HEAP32[r1 + 220 >> 2] = 0;
  HEAP32[r1 + 224 >> 2] = 0;
  _memset(r1 + 72 | 0, 0, 144);
  HEAP32[r1 + 56 >> 2] = r1;
  return;
}
function _otrl_auth_clear(r1) {
  var r2, r3, r4;
  r2 = r1 >> 2;
  HEAP32[r2] = 0;
  _otrl_dh_keypair_free(r1 + 8 | 0);
  HEAP32[r2 + 5] = 0;
  r3 = r1 + 24 | 0;
  _free(HEAP32[r3 >> 2]);
  r4 = r1 + 80 | 0;
  _memset(r3, 0, 56);
  _gcry_mpi_release(HEAP32[r4 >> 2]);
  HEAP32[r4 >> 2] = 0;
  HEAP32[r2 + 21] = 0;
  r4 = r1 + 88 | 0;
  _gcry_cipher_close(HEAP32[r4 >> 2]);
  _gcry_cipher_close(HEAP32[r2 + 23]);
  _gcry_md_close(HEAP32[r2 + 24]);
  _gcry_md_close(HEAP32[r2 + 25]);
  _gcry_md_close(HEAP32[r2 + 26]);
  _gcry_md_close(HEAP32[r2 + 27]);
  r3 = r1 + 168 | 0;
  _memset(r4, 0, 76);
  _free(HEAP32[r3 >> 2]);
  HEAP32[r3 >> 2] = 0;
  HEAP32[r2 + 43] = 0;
  return;
}
function _otrl_auth_start_v23(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  r9 = r4 + 8;
  HEAP32[r8] = 0;
  _otrl_auth_clear(r1);
  HEAP32[r1 + 132 >> 2] = 1;
  r10 = (r1 + 136 | 0) >> 2;
  HEAP32[r10] = r2;
  r11 = (r1 + 4 | 0) >> 2;
  HEAP32[HEAP32[r11] + 280 >> 2] = r2;
  _otrl_dh_gen_keypair(5, r1 + 8 | 0);
  HEAP32[r1 + 20 >> 2] = 1;
  r2 = r1 + 32 | 0;
  _gcry_randomize(r2, 16, 1);
  r12 = r1 + 16 | 0;
  _gcry_mpi_print(5, 0, 0, r5, HEAP32[r12 >> 2]);
  r5 = _malloc(HEAP32[r6] + 4 | 0);
  r13 = (r1 + 24 | 0) >> 2;
  HEAP32[r13] = r5;
  do {
    if ((r5 | 0) == 0) {
      r3 = 1778;
    } else {
      r14 = HEAP32[r6];
      r15 = (r1 + 28 | 0) >> 2;
      HEAP32[r15] = r14 + 4 | 0;
      r16 = HEAP32[r13];
      HEAP8[r16] = HEAP32[r6] >>> 24 & 255;
      HEAP8[r16 + 1 | 0] = HEAP32[r6] >>> 16 & 255;
      HEAP8[r16 + 2 | 0] = HEAP32[r6] >>> 8 & 255;
      HEAP8[r16 + 3 | 0] = HEAP32[r6] & 255;
      _gcry_mpi_print(5, r16 + 4 | 0, r14, 0, HEAP32[r12 >> 2]);
      if ((r14 | 0) != (HEAP32[r6] | 0)) {
        ___assert_func(487440, 172, 494052, 489756);
      }
      r14 = r1 + 48 | 0;
      _gcry_md_hash_buffer(8, r14, HEAP32[r13], HEAP32[r15]);
      r16 = _gcry_cipher_open(r7, 7, 6, 1);
      if ((r16 | 0) != 0) {
        r17 = r16;
        break;
      }
      r16 = _gcry_cipher_setkey(HEAP32[r8], r2, 16);
      if ((r16 | 0) != 0) {
        r17 = r16;
        break;
      }
      r16 = r9 | 0;
      _memset(r16, 0, 16);
      r18 = _gcry_cipher_setctr(HEAP32[r8], r16, 16);
      if ((r18 | 0) != 0) {
        r17 = r18;
        break;
      }
      r18 = _gcry_cipher_encrypt(HEAP32[r8], HEAP32[r13], HEAP32[r15], 0, 0);
      if ((r18 | 0) != 0) {
        r17 = r18;
        break;
      }
      _gcry_cipher_close(HEAP32[r8]);
      HEAP32[r8] = 0;
      r16 = ((HEAP32[r10] | 0) == 3 ? 15 : 7) + HEAP32[r15] | 0;
      r19 = r16 + 36 | 0;
      r20 = _malloc(r19);
      if ((r20 | 0) == 0) {
        r3 = 1778;
        break;
      }
      HEAP8[r20] = 0;
      HEAP8[r20 + 1 | 0] = HEAP32[r10] & 255;
      HEAP8[r20 + 2 | 0] = 2;
      r21 = r20 + 3 | 0;
      if ((HEAP32[r10] | 0) == 3) {
        HEAP8[r21] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 24 & 255;
        HEAP8[r20 + 4 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 16 & 255;
        HEAP8[r20 + 5 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 8 & 255;
        HEAP8[r20 + 6 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] & 255;
        HEAP8[r20 + 7 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 24 & 255;
        HEAP8[r20 + 8 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 16 & 255;
        HEAP8[r20 + 9 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 8 & 255;
        HEAP8[r20 + 10 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] & 255;
        r22 = r16 + 25 | 0;
        r23 = r20 + 11 | 0;
      } else {
        r22 = r16 + 33 | 0;
        r23 = r21;
      }
      HEAP8[r23] = HEAP32[r15] >>> 24 & 255;
      HEAP8[r23 + 1 | 0] = HEAP32[r15] >>> 16 & 255;
      HEAP8[r23 + 2 | 0] = HEAP32[r15] >>> 8 & 255;
      HEAP8[r23 + 3 | 0] = HEAP32[r15] & 255;
      _memmove(r23 + 4 | 0, HEAP32[r13], HEAP32[r15], 1, 0);
      r21 = HEAP32[r15];
      HEAP8[r21 + (r23 + 4) | 0] = 0;
      HEAP8[r21 + (r23 + 5) | 0] = 0;
      HEAP8[r21 + (r23 + 6) | 0] = 0;
      HEAP8[r21 + (r23 + 7) | 0] = 32;
      _memmove(r21 + (r23 + 8) | 0, r14, 32, 1, 0);
      if ((r22 - 4 - r21 | 0) != 36) {
        ___assert_func(487440, 228, 494052, 489756);
      }
      r21 = r1 + 168 | 0;
      HEAP32[r21 >> 2] = _otrl_base64_otr_encode(r20, r19);
      _free(r20);
      if ((HEAP32[r21 >> 2] | 0) == 0) {
        r3 = 1778;
        break;
      }
      HEAP32[r1 >> 2] = 1;
      r24 = r18;
      STACKTOP = r4;
      return r24;
    }
  } while (0);
  if (r3 == 1778) {
    r17 = _gcry_error142(32854);
  }
  _otrl_auth_clear(r1);
  _gcry_cipher_close(HEAP32[r8]);
  r24 = r17;
  STACKTOP = r4;
  return r24;
}
function _gcry_error142(r1) {
  return _gcry_err_make159(r1);
}
function _otrl_auth_handle_commit(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r4 = r1 >> 2;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4;
  r10 = r6 + 36;
  r11 = _gcry_error142(0);
  HEAP32[r8] = 0;
  r12 = r1 + 4 | 0;
  r13 = HEAP32[r12 >> 2];
  r14 = (HEAP32[r13 + 24 >> 2] | 0) == (r13 | 0);
  r13 = _otrl_base64_otr_decode(r2, r7, r10);
  do {
    if ((r13 | 0) == -1) {
      r15 = 0;
      r5 = 1809;
    } else if ((r13 | 0) == -2) {
      r16 = 0;
      r5 = 1808;
    } else {
      r7 = HEAP32[r8];
      r2 = HEAP32[r10 >> 2];
      r17 = (r1 + 136 | 0) >> 2;
      HEAP32[r17] = r3;
      HEAP32[HEAP32[r12 >> 2] + 280 >> 2] = r3;
      if (r2 >>> 0 < 3) {
        r16 = 0;
        r5 = 1808;
        break;
      }
      if (HEAP8[r7] << 24 >> 24 != 0) {
        r16 = 0;
        r5 = 1808;
        break;
      }
      if (HEAP8[r7 + 2 | 0] << 24 >> 24 != 2) {
        r16 = 0;
        r5 = 1808;
        break;
      }
      if ((HEAP8[r7 + 1 | 0] - 1 & 255) >= 3) {
        r16 = 0;
        r5 = 1808;
        break;
      }
      r18 = r7 + 3 | 0;
      r19 = r2 - 3 | 0;
      if ((r3 | 0) == 3) {
        if (r19 >>> 0 < 8) {
          r16 = 0;
          r5 = 1808;
          break;
        }
        r20 = r7 + 11 | 0;
        r21 = r2 - 11 | 0;
      } else {
        r20 = r18;
        r21 = r19;
      }
      if (r21 >>> 0 < 4) {
        r16 = 0;
        r5 = 1808;
        break;
      }
      r19 = HEAPU8[r20 + 1 | 0] << 16 | HEAPU8[r20] << 24 | HEAPU8[r20 + 2 | 0] << 8 | HEAPU8[r20 + 3 | 0];
      r18 = r21 - 4 | 0;
      if (r18 >>> 0 < r19 >>> 0) {
        r16 = 0;
        r5 = 1808;
        break;
      }
      r2 = _malloc(r19);
      if (!((r2 | 0) != 0 | (r19 | 0) == 0)) {
        r15 = r2;
        r5 = 1809;
        break;
      }
      _memmove(r2, r20 + 4 | 0, r19, 1, 0);
      r7 = r18 - r19 | 0;
      if (r7 >>> 0 < 4) {
        r16 = r2;
        r5 = 1808;
        break;
      }
      if ((HEAPU8[r19 + (r20 + 5) | 0] << 16 | HEAPU8[r19 + (r20 + 4) | 0] << 24 | HEAPU8[r19 + (r20 + 6) | 0] << 8 | HEAPU8[r19 + (r20 + 7) | 0] | 0) != 32) {
        r16 = r2;
        r5 = 1808;
        break;
      }
      if ((r7 - 4 | 0) >>> 0 < 32) {
        r16 = r2;
        r5 = 1808;
        break;
      }
      r18 = r9 | 0;
      _memcpy(r18, r19 + (r20 + 8) | 0, 32);
      if ((r7 | 0) != 36) {
        r16 = r2;
        r5 = 1808;
        break;
      }
      _free(HEAP32[r8]);
      HEAP32[r8] = 0;
      r7 = (r1 | 0) >> 2;
      r22 = HEAP32[r7];
      if ((r22 | 0) == 1) {
        do {
          if (!r14) {
            if ((_memcmp(r1 + 48 | 0, r18, 32) | 0) <= 0) {
              break;
            }
            _free(r2);
            r23 = r11;
            STACKTOP = r6;
            return r23;
          }
        } while (0);
        _otrl_auth_clear(r1);
        HEAP32[r17] = r3;
        _otrl_dh_gen_keypair(5, r1 + 8 | 0);
        HEAP32[r4 + 5] = 1;
        HEAP32[r4 + 6] = r2;
        HEAP32[r4 + 7] = r19;
        _memcpy(r1 + 48 | 0, r18, 32);
        r24 = _create_key_message(r1);
        if ((r24 | 0) != 0) {
          r25 = r24;
          r26 = 0;
          break;
        }
        HEAP32[r7] = 2;
        r23 = 0;
        STACKTOP = r6;
        return r23;
      } else if ((r22 | 0) == 0 | (r22 | 0) == 3 | (r22 | 0) == 4) {
        _otrl_auth_clear(r1);
        HEAP32[r17] = r3;
        _otrl_dh_gen_keypair(5, r1 + 8 | 0);
        HEAP32[r4 + 5] = 1;
        HEAP32[r4 + 6] = r2;
        HEAP32[r4 + 7] = r19;
        _memcpy(r1 + 48 | 0, r18, 32);
        r24 = _create_key_message(r1);
        if ((r24 | 0) != 0) {
          r25 = r24;
          r26 = 0;
          break;
        }
        HEAP32[r7] = 2;
        r23 = 0;
        STACKTOP = r6;
        return r23;
      } else if ((r22 | 0) == 2) {
        r24 = r1 + 24 | 0;
        _free(HEAP32[r24 >> 2]);
        HEAP32[r24 >> 2] = r2;
        HEAP32[r4 + 7] = r19;
        _memcpy(r1 + 48 | 0, r18, 32);
        r23 = r11;
        STACKTOP = r6;
        return r23;
      } else {
        r23 = r11;
        STACKTOP = r6;
        return r23;
      }
    }
  } while (0);
  if (r5 == 1809) {
    r25 = _gcry_error142(32854);
    r26 = r15;
  } else if (r5 == 1808) {
    r25 = _gcry_error142(55);
    r26 = r16;
  }
  _free(HEAP32[r8]);
  _free(r26);
  r23 = r25;
  STACKTOP = r6;
  return r23;
}
function _create_key_message(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2, r4 = r3 >> 2;
  r5 = _gcry_error142(0);
  r6 = r1 + 16 | 0;
  _gcry_mpi_print(5, 0, 0, r3, HEAP32[r6 >> 2]);
  r3 = (r1 + 136 | 0) >> 2;
  r7 = ((HEAP32[r3] | 0) == 3 ? 15 : 7) + HEAP32[r4] | 0;
  r8 = _malloc(r7);
  do {
    if ((r8 | 0) != 0) {
      HEAP8[r8] = 0;
      HEAP8[r8 + 1 | 0] = HEAP32[r3] & 255;
      HEAP8[r8 + 2 | 0] = 10;
      r9 = r8 + 3 | 0;
      if ((HEAP32[r3] | 0) == 3) {
        r10 = (r1 + 4 | 0) >> 2;
        HEAP8[r9] = HEAP32[HEAP32[r10] + 40 >> 2] >>> 24 & 255;
        HEAP8[r8 + 4 | 0] = HEAP32[HEAP32[r10] + 40 >> 2] >>> 16 & 255;
        HEAP8[r8 + 5 | 0] = HEAP32[HEAP32[r10] + 40 >> 2] >>> 8 & 255;
        HEAP8[r8 + 6 | 0] = HEAP32[HEAP32[r10] + 40 >> 2] & 255;
        HEAP8[r8 + 7 | 0] = HEAP32[HEAP32[r10] + 44 >> 2] >>> 24 & 255;
        HEAP8[r8 + 8 | 0] = HEAP32[HEAP32[r10] + 44 >> 2] >>> 16 & 255;
        HEAP8[r8 + 9 | 0] = HEAP32[HEAP32[r10] + 44 >> 2] >>> 8 & 255;
        HEAP8[r8 + 10 | 0] = HEAP32[HEAP32[r10] + 44 >> 2] & 255;
        r11 = r7 - 11 | 0;
        r12 = r8 + 11 | 0;
      } else {
        r11 = r7 - 3 | 0;
        r12 = r9;
      }
      HEAP8[r12] = HEAP32[r4] >>> 24 & 255;
      HEAP8[r12 + 1 | 0] = HEAP32[r4] >>> 16 & 255;
      HEAP8[r12 + 2 | 0] = HEAP32[r4] >>> 8 & 255;
      HEAP8[r12 + 3 | 0] = HEAP32[r4] & 255;
      r9 = r11 - 4 | 0;
      _gcry_mpi_print(5, r12 + 4 | 0, r9, 0, HEAP32[r6 >> 2]);
      if ((r9 | 0) != (HEAP32[r4] | 0)) {
        ___assert_func(487440, 277, 494172, 489756);
      }
      r9 = (r1 + 168 | 0) >> 2;
      _free(HEAP32[r9]);
      HEAP32[r9] = _otrl_base64_otr_encode(r8, r7);
      _free(r8);
      if ((HEAP32[r9] | 0) == 0) {
        break;
      } else {
        r13 = r5;
      }
      STACKTOP = r2;
      return r13;
    }
  } while (0);
  r13 = _gcry_error142(32854);
  STACKTOP = r2;
  return r13;
}
function _otrl_auth_handle_key(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r5 = r3 >> 2;
  r3 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4;
  r10 = r6 + 8, r11 = r10 >> 2;
  r12 = _gcry_error142(0);
  HEAP32[r8] = 0;
  HEAP32[r11] = 0;
  HEAP32[r5] = 0;
  r13 = _otrl_proto_message_version(r2);
  r14 = _otrl_base64_otr_decode(r2, r7, r9);
  L2273 : do {
    if ((r14 | 0) == -2) {
      r3 = 1852;
    } else if ((r14 | 0) == -1) {
      r15 = _gcry_error142(32854);
      break;
    } else {
      r7 = HEAP32[r8];
      r2 = HEAP32[r9 >> 2];
      if (r2 >>> 0 < 3) {
        r3 = 1852;
        break;
      }
      if (HEAP8[r7] << 24 >> 24 != 0) {
        r3 = 1852;
        break;
      }
      if (HEAP8[r7 + 2 | 0] << 24 >> 24 != 10) {
        r3 = 1852;
        break;
      }
      if ((HEAP8[r7 + 1 | 0] - 1 & 255) >= 3) {
        r3 = 1852;
        break;
      }
      r16 = r7 + 3 | 0;
      r17 = r2 - 3 | 0;
      if ((r13 | 0) == 3) {
        if (r17 >>> 0 < 8) {
          r3 = 1852;
          break;
        }
        r18 = r7 + 11 | 0;
        r19 = r2 - 11 | 0;
      } else {
        r18 = r16;
        r19 = r17;
      }
      if (r19 >>> 0 < 4) {
        r3 = 1852;
        break;
      }
      r17 = HEAPU8[r18 + 1 | 0] << 16 | HEAPU8[r18] << 24 | HEAPU8[r18 + 2 | 0] << 8 | HEAPU8[r18 + 3 | 0];
      r16 = r18 + 4 | 0;
      r2 = r19 - 4 | 0;
      if ((r17 | 0) == 0) {
        HEAP32[r11] = _gcry_mpi_set_ui(0, 0);
      } else {
        if (r2 >>> 0 < r17 >>> 0) {
          r3 = 1852;
          break;
        }
        _gcry_mpi_scan(r10, 5, r16, r17, 0);
      }
      if ((r2 | 0) != (r17 | 0)) {
        r3 = 1852;
        break;
      }
      _free(HEAP32[r8]);
      HEAP32[r8] = 0;
      r17 = r1 | 0;
      r2 = HEAP32[r17 >> 2];
      do {
        if ((r2 | 0) == 0 | (r2 | 0) == 2 | (r2 | 0) == 4) {
          HEAP32[r5] = 0;
          r20 = r12;
        } else if ((r2 | 0) == 1) {
          if ((r13 | 0) != (HEAP32[r1 + 136 >> 2] | 0)) {
            r15 = r12;
            break L2273;
          }
          r16 = (r1 + 80 | 0) >> 2;
          _gcry_mpi_release(HEAP32[r16]);
          HEAP32[r16] = HEAP32[r11];
          HEAP32[r11] = 0;
          r7 = _otrl_dh_compute_v2_auth_keys(r1 + 8 | 0, HEAP32[r16], r1 + 140 | 0, r1 + 160 | 0, r1 + 88 | 0, r1 + 92 | 0, r1 + 96 | 0, r1 + 100 | 0, r1 + 104 | 0, r1 + 108 | 0);
          if ((r7 | 0) != 0) {
            r15 = r7;
            break L2273;
          }
          r7 = _create_revealsig_message(r1, r4);
          if ((r7 | 0) != 0) {
            r15 = r7;
            break L2273;
          }
          HEAP32[r5] = 1;
          HEAP32[r17 >> 2] = 3;
          r20 = 0;
        } else if ((r2 | 0) == 3) {
          if ((_gcry_mpi_cmp(HEAP32[r11], HEAP32[r1 + 80 >> 2]) | 0) == 0) {
            HEAP32[r5] = 1;
            r20 = r12;
            break;
          } else {
            HEAP32[r5] = 0;
            r20 = r12;
            break;
          }
        } else {
          r20 = r12;
        }
      } while (0);
      _gcry_mpi_release(HEAP32[r11]);
      r21 = r20;
      STACKTOP = r6;
      return r21;
    }
  } while (0);
  if (r3 == 1852) {
    r15 = _gcry_error142(55);
  }
  _free(HEAP32[r8]);
  _gcry_mpi_release(HEAP32[r11]);
  r21 = r15;
  STACKTOP = r6;
  return r21;
}
function _create_revealsig_message(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r3 = r1 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  HEAP32[r6] = 0;
  r9 = _calculate_pubkey_auth(r5, r7, HEAP32[r3 + 24], HEAP32[r3 + 22], HEAP32[r3 + 4], HEAP32[r3 + 20], r2, HEAP32[r3 + 5]);
  if ((r9 | 0) == 0) {
    r3 = (r1 + 136 | 0) >> 2;
    r2 = ((HEAP32[r3] | 0) == 3 ? 35 : 27) + HEAP32[r8] | 0;
    r7 = r2 + 20 | 0;
    r5 = _malloc(r7);
    do {
      if ((r5 | 0) != 0) {
        HEAP8[r5] = 0;
        HEAP8[r5 + 1 | 0] = HEAP32[r3] & 255;
        HEAP8[r5 + 2 | 0] = 17;
        r10 = r5 + 3 | 0;
        if ((HEAP32[r3] | 0) == 3) {
          r11 = (r1 + 4 | 0) >> 2;
          HEAP8[r10] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 24 & 255;
          HEAP8[r5 + 4 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 16 & 255;
          HEAP8[r5 + 5 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 8 & 255;
          HEAP8[r5 + 6 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] & 255;
          HEAP8[r5 + 7 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 24 & 255;
          HEAP8[r5 + 8 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 16 & 255;
          HEAP8[r5 + 9 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 8 & 255;
          HEAP8[r5 + 10 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] & 255;
          r12 = r2 + 9 | 0;
          r13 = r5 + 11 | 0;
        } else {
          r12 = r2 + 17 | 0;
          r13 = r10;
        }
        HEAP8[r13] = 0;
        HEAP8[r13 + 1 | 0] = 0;
        HEAP8[r13 + 2 | 0] = 0;
        HEAP8[r13 + 3 | 0] = 16;
        _memmove(r13 + 4 | 0, r1 + 32 | 0, 16, 1, 0);
        r10 = r13 + 20 | 0;
        HEAP8[r10] = HEAP32[r8] >>> 24 & 255;
        HEAP8[r13 + 21 | 0] = HEAP32[r8] >>> 16 & 255;
        HEAP8[r13 + 22 | 0] = HEAP32[r8] >>> 8 & 255;
        HEAP8[r13 + 23 | 0] = HEAP32[r8] & 255;
        _memmove(r13 + 24 | 0, HEAP32[r6], HEAP32[r8], 1, 0);
        r11 = HEAP32[r8];
        r14 = r11 + (r13 + 24) | 0;
        _free(HEAP32[r6]);
        HEAP32[r6] = 0;
        r15 = (r1 + 104 | 0) >> 2;
        _gcry_md_reset(HEAP32[r15]);
        _gcry_md_write(HEAP32[r15], r10, r14 - r10 | 0);
        _memmove(r14, _gcry_md_read(HEAP32[r15], 8), 20, 1, 0);
        if ((r12 - 24 - r11 | 0) != 20) {
          ___assert_func(487440, 695, 494144, 489756);
        }
        r11 = r1 + 168 | 0;
        _free(HEAP32[r11 >> 2]);
        r15 = _otrl_base64_otr_encode(r5, r7);
        HEAP32[r11 >> 2] = r15;
        if ((r15 | 0) == 0) {
          break;
        }
        _free(r5);
        r16 = r9;
        STACKTOP = r4;
        return r16;
      }
    } while (0);
    r17 = _gcry_error142(32854);
    r18 = r5;
  } else {
    r17 = r9;
    r18 = 0;
  }
  _free(r18);
  _free(HEAP32[r6]);
  r16 = r17;
  STACKTOP = r4;
  return r16;
}
function _otrl_auth_handle_revealsig(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36;
  r7 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r9 = r8, r10 = r9 >> 2;
  r11 = r8 + 4;
  r12 = r8 + 8, r13 = r12 >> 2;
  r14 = r8 + 12, r15 = r14 >> 2;
  r16 = r8 + 16;
  r17 = r8 + 32;
  r18 = _gcry_error142(0);
  HEAP32[r10] = 0;
  HEAP32[r13] = 0;
  HEAP32[r15] = 0;
  HEAP32[r3 >> 2] = 0;
  r19 = _otrl_base64_otr_decode(r2, r9, r11);
  do {
    if ((r19 | 0) == -2) {
      r20 = 0;
      r7 = 1905;
    } else if ((r19 | 0) == -1) {
      r21 = 0;
      r7 = 1906;
    } else {
      r9 = HEAP32[r10];
      r2 = HEAP32[r11 >> 2];
      if (r2 >>> 0 < 3) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      r22 = HEAP8[r9 + 1 | 0];
      if (HEAP8[r9] << 24 >> 24 != 0) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      if (HEAP8[r9 + 2 | 0] << 24 >> 24 != 17) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      if ((r22 - 1 & 255) >= 3) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      r23 = r9 + 3 | 0;
      r24 = r2 - 3 | 0;
      if (r22 << 24 >> 24 == 3) {
        if (r24 >>> 0 < 8) {
          r20 = 0;
          r7 = 1905;
          break;
        }
        r25 = r9 + 11 | 0;
        r26 = r2 - 11 | 0;
      } else {
        r25 = r23;
        r26 = r24;
      }
      if (r26 >>> 0 < 4) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      r24 = HEAPU8[r25 + 1 | 0] << 16 | HEAPU8[r25] << 24 | HEAPU8[r25 + 2 | 0] << 8 | HEAPU8[r25 + 3 | 0];
      r23 = r26 - 4 | 0;
      if ((r24 | 0) != 16 | r23 >>> 0 < r24 >>> 0) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      r2 = r1 + 32 | 0;
      _memmove(r2, r25 + 4 | 0, r24, 1, 0);
      r9 = r24 + (r25 + 4) | 0;
      r22 = r23 - r24 | 0;
      if (r22 >>> 0 < 4) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      r23 = HEAPU8[r24 + (r25 + 5) | 0] << 16 | HEAPU8[r9] << 24 | HEAPU8[r24 + (r25 + 6) | 0] << 8 | HEAPU8[r24 + (r25 + 7) | 0];
      r27 = r24 + 8 | 0;
      r24 = r25 + r27 | 0;
      r28 = r22 - 4 | 0;
      if (r28 >>> 0 < r23 >>> 0) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      r22 = r25 + r23 + r27 | 0;
      if ((r28 - r23 | 0) != 20) {
        r20 = 0;
        r7 = 1905;
        break;
      }
      r23 = r1 | 0;
      r28 = HEAP32[r23 >> 2];
      if ((r28 | 0) == 2) {
        r27 = (r1 + 28 | 0) >> 2;
        r29 = _malloc(HEAP32[r27]);
        if ((HEAP32[r27] | 0) != 0 & (r29 | 0) == 0) {
          r21 = r29;
          r7 = 1906;
          break;
        }
        r30 = _gcry_cipher_open(r12, 7, 6, 1);
        if ((r30 | 0) != 0) {
          r31 = r30;
          r32 = r29;
          break;
        }
        r30 = _gcry_cipher_setkey(HEAP32[r13], r2, 16);
        if ((r30 | 0) != 0) {
          r31 = r30;
          r32 = r29;
          break;
        }
        r30 = r16 | 0;
        _memset(r30, 0, 16);
        r2 = _gcry_cipher_setctr(HEAP32[r13], r30, 16);
        if ((r2 | 0) != 0) {
          r31 = r2;
          r32 = r29;
          break;
        }
        r2 = HEAP32[r27];
        r30 = _gcry_cipher_decrypt(HEAP32[r13], r29, r2, HEAP32[r1 + 24 >> 2], r2);
        if ((r30 | 0) != 0) {
          r31 = r30;
          r32 = r29;
          break;
        }
        _gcry_cipher_close(HEAP32[r13]);
        HEAP32[r13] = 0;
        r30 = r17 | 0;
        _gcry_md_hash_buffer(8, r30, r29, HEAP32[r27]);
        if ((_memcmp(r30, r1 + 48 | 0, 32) | 0) != 0) {
          r31 = r18;
          r32 = r29;
          break;
        }
        r30 = HEAP32[r27];
        if (r30 >>> 0 < 4) {
          r20 = r29;
          r7 = 1905;
          break;
        }
        r27 = HEAPU8[r29 + 1 | 0] << 16 | HEAPU8[r29] << 24 | HEAPU8[r29 + 2 | 0] << 8 | HEAPU8[r29 + 3 | 0];
        r2 = r29 + 4 | 0;
        r33 = r30 - 4 | 0;
        if ((r27 | 0) == 0) {
          HEAP32[r15] = _gcry_mpi_set_ui(0, 0);
        } else {
          if (r33 >>> 0 < r27 >>> 0) {
            r20 = r29;
            r7 = 1905;
            break;
          }
          _gcry_mpi_scan(r14, 5, r2, r27, 0);
        }
        _free(r29);
        if ((r33 | 0) != (r27 | 0)) {
          r20 = 0;
          r7 = 1905;
          break;
        }
        r27 = (r1 + 80 | 0) >> 2;
        _gcry_mpi_release(HEAP32[r27]);
        HEAP32[r27] = HEAP32[r15];
        HEAP32[r15] = 0;
        r33 = r1 + 88 | 0;
        r29 = r1 + 96 | 0;
        r2 = r1 + 104 | 0, r30 = r2 >> 2;
        r34 = _otrl_dh_compute_v2_auth_keys(r1 + 8 | 0, HEAP32[r27], r1 + 140 | 0, r1 + 160 | 0, r33, r1 + 92 | 0, r29, r1 + 100 | 0, r2, r1 + 108 | 0);
        if ((r34 | 0) != 0) {
          r31 = r34;
          r32 = 0;
          break;
        }
        _gcry_md_reset(HEAP32[r30]);
        r34 = r22 - r9 | 0;
        _gcry_md_write(HEAP32[r30], r9, r34);
        if ((_memcmp(r22, _gcry_md_read(HEAP32[r30], 8), 20) | 0) != 0) {
          r20 = 0;
          r7 = 1905;
          break;
        }
        r30 = _check_pubkey_auth(r1 + 112 | 0, r1 + 84 | 0, r24, r34 - 4 | 0, HEAP32[r29 >> 2], HEAP32[r33 >> 2], HEAP32[r1 + 16 >> 2], HEAP32[r27]);
        if ((r30 | 0) != 0) {
          r31 = r30;
          r32 = 0;
          break;
        }
        _free(HEAP32[r10]);
        HEAP32[r10] = 0;
        r30 = _create_signature_message(r1, r4);
        if ((r30 | 0) != 0) {
          r31 = r30;
          r32 = 0;
          break;
        }
        HEAP32[r1 + 164 >> 2] = 1;
        if ((r5 | 0) == 0) {
          r35 = 0;
        } else {
          r35 = FUNCTION_TABLE[r5](r1, r6);
        }
        HEAP32[r3 >> 2] = 1;
        HEAP32[r1 + 20 >> 2] = 0;
        HEAP32[r23 >> 2] = 0;
        r36 = r35;
        STACKTOP = r8;
        return r36;
      } else if ((r28 | 0) == 0 | (r28 | 0) == 1 | (r28 | 0) == 3 | (r28 | 0) == 4) {
        HEAP32[r3 >> 2] = 0;
        _free(HEAP32[r10]);
        HEAP32[r10] = 0;
        r36 = r18;
        STACKTOP = r8;
        return r36;
      } else {
        r36 = r18;
        STACKTOP = r8;
        return r36;
      }
    }
  } while (0);
  if (r7 == 1905) {
    r31 = _gcry_error142(55);
    r32 = r20;
  } else if (r7 == 1906) {
    r31 = _gcry_error142(32854);
    r32 = r21;
  }
  _free(HEAP32[r10]);
  _free(r32);
  _gcry_cipher_close(HEAP32[r13]);
  _gcry_mpi_release(HEAP32[r15]);
  r36 = r31;
  STACKTOP = r8;
  return r36;
}
function _check_pubkey_auth(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44;
  r9 = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  r10 = r9, r11 = r10 >> 2;
  r12 = r9 + 4, r13 = r12 >> 2;
  r14 = r9 + 8;
  r15 = r9 + 40, r16 = r15 >> 2;
  r17 = r9 + 44, r18 = r17 >> 2;
  r19 = r9 + 48, r20 = r19 >> 2;
  r21 = r9 + 52, r22 = r21 >> 2;
  r23 = r9 + 56, r24 = r23 >> 2;
  HEAP32[r24] = 0;
  r25 = _gcry_cipher_decrypt(r6, r3, r4, 0, 0);
  L2371 : do {
    if ((r25 | 0) == 0) {
      do {
        if (r4 >>> 0 >= 2) {
          r6 = HEAP8[r3];
          r26 = HEAP8[r3 + 1 | 0];
          r27 = (r6 & 255) << 8 | r26 & 255;
          r28 = r3 + 2 | 0;
          if (r27 << 16 >> 16 != 0) {
            break;
          }
          if ((r4 - 2 | 0) >>> 0 < 4) {
            break;
          }
          r29 = HEAPU8[r3 + 3 | 0] << 16 | HEAPU8[r28] << 24 | HEAPU8[r3 + 4 | 0] << 8 | HEAPU8[r3 + 5 | 0];
          r30 = r3 + 6 | 0;
          r31 = r4 - 6 | 0;
          if ((r29 | 0) == 0) {
            HEAP32[r16] = _gcry_mpi_set_ui(0, 0);
          } else {
            if (r31 >>> 0 < r29 >>> 0) {
              break;
            }
            _gcry_mpi_scan(r15, 5, r30, r29, 0);
          }
          r30 = r31 - r29 | 0;
          if (r30 >>> 0 < 4) {
            break;
          }
          r31 = HEAPU8[r29 + (r3 + 7) | 0] << 16 | HEAPU8[r29 + (r3 + 6) | 0] << 24 | HEAPU8[r29 + (r3 + 8) | 0] << 8 | HEAPU8[r29 + (r3 + 9) | 0];
          r32 = r29 + 10 | 0;
          r29 = r3 + r32 | 0;
          r33 = r30 - 4 | 0;
          if ((r31 | 0) == 0) {
            HEAP32[r18] = _gcry_mpi_set_ui(0, 0);
          } else {
            if (r33 >>> 0 < r31 >>> 0) {
              break;
            }
            _gcry_mpi_scan(r17, 5, r29, r31, 0);
          }
          r29 = r31 + r32 | 0;
          r32 = r33 - r31 | 0;
          if (r32 >>> 0 < 4) {
            break;
          }
          r31 = HEAPU8[r29 + (r3 + 1) | 0] << 16 | HEAPU8[r3 + r29 | 0] << 24 | HEAPU8[r29 + (r3 + 2) | 0] << 8 | HEAPU8[r29 + (r3 + 3) | 0];
          r33 = r29 + 4 | 0;
          r29 = r3 + r33 | 0;
          r30 = r32 - 4 | 0;
          if ((r31 | 0) == 0) {
            HEAP32[r20] = _gcry_mpi_set_ui(0, 0);
          } else {
            if (r30 >>> 0 < r31 >>> 0) {
              break;
            }
            _gcry_mpi_scan(r19, 5, r29, r31, 0);
          }
          r29 = r31 + r33 | 0;
          r33 = r30 - r31 | 0;
          if (r33 >>> 0 < 4) {
            break;
          }
          r31 = HEAPU8[r29 + (r3 + 1) | 0] << 16 | HEAPU8[r3 + r29 | 0] << 24 | HEAPU8[r29 + (r3 + 2) | 0] << 8 | HEAPU8[r29 + (r3 + 3) | 0];
          r30 = r29 + 4 | 0;
          r29 = r3 + r30 | 0;
          r32 = r33 - 4 | 0;
          if ((r31 | 0) == 0) {
            HEAP32[r22] = _gcry_mpi_set_ui(0, 0);
          } else {
            if (r32 >>> 0 < r31 >>> 0) {
              break;
            }
            _gcry_mpi_scan(r21, 5, r29, r31, 0);
          }
          r29 = r31 + r30 | 0;
          r30 = r3 + r29 | 0;
          r33 = r32 - r31 | 0;
          r31 = r30 - r28 | 0;
          _gcry_md_hash_buffer(2, r1, r28, r31);
          r32 = HEAP32[r18];
          r34 = HEAP32[r20];
          r35 = HEAP32[r22];
          _gcry_sexp_build(r23, 0, 477132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[r16], HEAP32[tempInt + 4 >> 2] = r32, HEAP32[tempInt + 8 >> 2] = r34, HEAP32[tempInt + 12 >> 2] = r35, tempInt));
          _gcry_mpi_release(HEAP32[r16]);
          _gcry_mpi_release(HEAP32[r18]);
          _gcry_mpi_release(HEAP32[r20]);
          _gcry_mpi_release(HEAP32[r22]);
          if (r33 >>> 0 < 4) {
            break;
          }
          r35 = HEAP8[r30];
          r30 = HEAP8[r29 + (r3 + 1) | 0];
          r34 = HEAP8[r29 + (r3 + 2) | 0];
          r32 = HEAP8[r29 + (r3 + 3) | 0];
          r36 = (r30 & 255) << 16 | (r35 & 255) << 24 | (r34 & 255) << 8 | r32 & 255;
          if ((r36 | 0) == 0) {
            break;
          }
          _gcry_mpi_print(5, 0, 0, r10, r7);
          _gcry_mpi_print(5, 0, 0, r12, r8);
          r37 = r31 + HEAP32[r11] + HEAP32[r13] + 10 | 0;
          r38 = r37 + 4 | 0;
          r39 = _malloc(r38);
          if ((r39 | 0) == 0) {
            r40 = _gcry_error142(32854);
            break L2371;
          }
          HEAP8[r39] = HEAP32[r13] >>> 24 & 255;
          HEAP8[r39 + 1 | 0] = HEAP32[r13] >>> 16 & 255;
          HEAP8[r39 + 2 | 0] = HEAP32[r13] >>> 8 & 255;
          HEAP8[r39 + 3 | 0] = HEAP32[r13] & 255;
          _gcry_mpi_print(5, r39 + 4 | 0, r37, 0, r8);
          r41 = HEAP32[r13];
          HEAP8[r41 + (r39 + 4) | 0] = HEAP32[r11] >>> 24 & 255;
          HEAP8[r41 + (r39 + 5) | 0] = HEAP32[r11] >>> 16 & 255;
          HEAP8[r41 + (r39 + 6) | 0] = HEAP32[r11] >>> 8 & 255;
          HEAP8[r41 + (r39 + 7) | 0] = HEAP32[r11] & 255;
          r42 = r41 + 8 | 0;
          r43 = r37 - r41 - 4 | 0;
          _gcry_mpi_print(5, r39 + r42 | 0, r43, 0, r7);
          r41 = HEAP32[r11];
          r37 = r41 + r42 | 0;
          HEAP8[r39 + r37 | 0] = r6;
          HEAP8[r37 + (r39 + 1) | 0] = r26;
          r26 = r37 + 2 | 0;
          _memmove(r39 + r26 | 0, r28, r31, 1, 0);
          r28 = r26 + r31 | 0;
          HEAP8[r39 + r28 | 0] = r35;
          HEAP8[r28 + (r39 + 1) | 0] = r30;
          HEAP8[r28 + (r39 + 2) | 0] = r34;
          HEAP8[r28 + (r39 + 3) | 0] = r32;
          if ((-2 - r31 + r43 - r41 | 0) != 4) {
            ___assert_func(487440, 604, 494192, 489756);
          }
          _gcry_md_reset(r5);
          _gcry_md_write(r5, r39, r38);
          r38 = r14 | 0;
          _memmove(r38, _gcry_md_read(r5, 8), 32, 1, 0);
          _free(r39);
          r39 = _otrl_privkey_verify(r29 + (r3 + 4) | 0, r33 - 4 | 0, r27, HEAP32[r24], r38, 32);
          if ((r39 | 0) != 0) {
            r40 = r39;
            break L2371;
          }
          _gcry_sexp_release(HEAP32[r24]);
          HEAP32[r24] = 0;
          HEAP32[r2 >> 2] = r36;
          r44 = 0;
          STACKTOP = r9;
          return r44;
        }
      } while (0);
      r40 = _gcry_error142(55);
    } else {
      r40 = r25;
    }
  } while (0);
  _free(0);
  _gcry_sexp_release(HEAP32[r24]);
  r44 = r40;
  STACKTOP = r9;
  return r44;
}
function _create_signature_message(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = r1 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  HEAP32[r6] = 0;
  r9 = _calculate_pubkey_auth(r5, r7, HEAP32[r3 + 25], HEAP32[r3 + 23], HEAP32[r3 + 4], HEAP32[r3 + 20], r2, HEAP32[r3 + 5]);
  if ((r9 | 0) == 0) {
    r3 = (r1 + 136 | 0) >> 2;
    r2 = ((HEAP32[r3] | 0) == 3 ? 15 : 7) + HEAP32[r8] | 0;
    r7 = r2 + 20 | 0;
    r5 = _malloc(r7);
    do {
      if ((r5 | 0) != 0) {
        HEAP8[r5] = 0;
        HEAP8[r5 + 1 | 0] = HEAP32[r3] & 255;
        HEAP8[r5 + 2 | 0] = 18;
        r10 = r5 + 3 | 0;
        if ((HEAP32[r3] | 0) == 3) {
          r11 = (r1 + 4 | 0) >> 2;
          HEAP8[r10] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 24 & 255;
          HEAP8[r5 + 4 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 16 & 255;
          HEAP8[r5 + 5 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] >>> 8 & 255;
          HEAP8[r5 + 6 | 0] = HEAP32[HEAP32[r11] + 40 >> 2] & 255;
          HEAP8[r5 + 7 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 24 & 255;
          HEAP8[r5 + 8 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 16 & 255;
          HEAP8[r5 + 9 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] >>> 8 & 255;
          HEAP8[r5 + 10 | 0] = HEAP32[HEAP32[r11] + 44 >> 2] & 255;
          r12 = r2 + 9 | 0;
          r13 = r5 + 11 | 0;
        } else {
          r12 = r2 + 17 | 0;
          r13 = r10;
        }
        HEAP8[r13] = HEAP32[r8] >>> 24 & 255;
        HEAP8[r13 + 1 | 0] = HEAP32[r8] >>> 16 & 255;
        HEAP8[r13 + 2 | 0] = HEAP32[r8] >>> 8 & 255;
        HEAP8[r13 + 3 | 0] = HEAP32[r8] & 255;
        _memmove(r13 + 4 | 0, HEAP32[r6], HEAP32[r8], 1, 0);
        r10 = HEAP32[r8];
        r11 = r10 + 4 | 0;
        _free(HEAP32[r6]);
        HEAP32[r6] = 0;
        r14 = (r1 + 108 | 0) >> 2;
        _gcry_md_reset(HEAP32[r14]);
        _gcry_md_write(HEAP32[r14], r13, r11);
        _memmove(r13 + r11 | 0, _gcry_md_read(HEAP32[r14], 8), 20, 1, 0);
        if ((r12 - 4 - r10 | 0) != 20) {
          ___assert_func(487440, 768, 494116, 489756);
        }
        r10 = r1 + 168 | 0;
        _free(HEAP32[r10 >> 2]);
        r14 = _otrl_base64_otr_encode(r5, r7);
        HEAP32[r10 >> 2] = r14;
        if ((r14 | 0) == 0) {
          break;
        }
        _free(r5);
        r15 = r9;
        STACKTOP = r4;
        return r15;
      }
    } while (0);
    r16 = _gcry_error142(32854);
    r17 = r5;
  } else {
    r16 = r9;
    r17 = 0;
  }
  _free(r17);
  _free(HEAP32[r6]);
  r15 = r16;
  STACKTOP = r4;
  return r15;
}
function _otrl_auth_handle_signature(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r6 = r1 >> 2;
  r7 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r9 = r8, r10 = r9 >> 2;
  r11 = r8 + 4;
  r12 = _gcry_error142(0);
  HEAP32[r10] = 0;
  HEAP32[r3 >> 2] = 0;
  r13 = _otrl_base64_otr_decode(r2, r9, r11);
  do {
    if ((r13 | 0) == -2) {
      r7 = 1980;
    } else if ((r13 | 0) == -1) {
      r14 = _gcry_error142(32854);
      break;
    } else {
      r9 = HEAP32[r10];
      r2 = HEAP32[r11 >> 2];
      if (r2 >>> 0 < 3) {
        r7 = 1980;
        break;
      }
      r15 = HEAP8[r9 + 1 | 0];
      if (HEAP8[r9] << 24 >> 24 != 0) {
        r7 = 1980;
        break;
      }
      if (HEAP8[r9 + 2 | 0] << 24 >> 24 != 18) {
        r7 = 1980;
        break;
      }
      if ((r15 - 1 & 255) >= 3) {
        r7 = 1980;
        break;
      }
      r16 = r9 + 3 | 0;
      r17 = r2 - 3 | 0;
      if (r15 << 24 >> 24 == 3) {
        if (r17 >>> 0 < 8) {
          r7 = 1980;
          break;
        }
        r18 = r9 + 11 | 0;
        r19 = r2 - 11 | 0;
      } else {
        r18 = r16;
        r19 = r17;
      }
      if (r19 >>> 0 < 4) {
        r7 = 1980;
        break;
      }
      r17 = HEAPU8[r18 + 1 | 0] << 16 | HEAPU8[r18] << 24 | HEAPU8[r18 + 2 | 0] << 8 | HEAPU8[r18 + 3 | 0];
      r16 = r18 + 4 | 0;
      r2 = r19 - 4 | 0;
      if (r2 >>> 0 < r17 >>> 0) {
        r7 = 1980;
        break;
      }
      r9 = r17 + 4 | 0;
      r15 = r18 + r9 | 0;
      if ((r2 - r17 | 0) != 20) {
        r7 = 1980;
        break;
      }
      r2 = r1 | 0;
      r20 = HEAP32[r2 >> 2];
      if ((r20 | 0) == 0 | (r20 | 0) == 1 | (r20 | 0) == 2 | (r20 | 0) == 4) {
        HEAP32[r3 >> 2] = 0;
        _free(HEAP32[r10]);
        HEAP32[r10] = 0;
        r21 = r12;
        STACKTOP = r8;
        return r21;
      } else if ((r20 | 0) == 3) {
        r20 = (r1 + 108 | 0) >> 2;
        _gcry_md_reset(HEAP32[r20]);
        _gcry_md_write(HEAP32[r20], r18, r9);
        if ((_memcmp(r15, _gcry_md_read(HEAP32[r20], 8), 20) | 0) != 0) {
          r7 = 1980;
          break;
        }
        r20 = _check_pubkey_auth(r1 + 112 | 0, r1 + 84 | 0, r16, r17, HEAP32[r6 + 25], HEAP32[r6 + 23], HEAP32[r6 + 4], HEAP32[r6 + 20]);
        if ((r20 | 0) != 0) {
          r14 = r20;
          break;
        }
        _free(HEAP32[r10]);
        HEAP32[r10] = 0;
        HEAP32[r6 + 41] = 0;
        if ((r4 | 0) == 0) {
          r22 = 0;
        } else {
          r22 = FUNCTION_TABLE[r4](r1, r5);
        }
        r20 = r1 + 168 | 0;
        _free(HEAP32[r20 >> 2]);
        HEAP32[r20 >> 2] = 0;
        HEAP32[r3 >> 2] = 0;
        HEAP32[r6 + 5] = 0;
        HEAP32[r2 >> 2] = 0;
        r21 = r22;
        STACKTOP = r8;
        return r21;
      } else {
        r21 = r12;
        STACKTOP = r8;
        return r21;
      }
    }
  } while (0);
  if (r7 == 1980) {
    r14 = _gcry_error142(55);
  }
  _free(HEAP32[r10]);
  r21 = r14;
  STACKTOP = r8;
  return r21;
}
function _otrl_auth_start_v1(r1, r2, r3, r4) {
  var r5, r6;
  r5 = r1 >> 2;
  _otrl_auth_clear(r1);
  HEAP32[r5 + 33] = 1;
  HEAP32[r5 + 34] = 1;
  r6 = r1 + 8 | 0;
  if ((r2 | 0) == 0) {
    _otrl_dh_gen_keypair(5, r6);
    HEAP32[r5 + 5] = 1;
  } else {
    _otrl_dh_keypair_copy(r6, r2);
    HEAP32[r5 + 5] = r3;
  }
  r3 = _create_v1_key_exchange_message(r1, 0, r4);
  if ((r3 | 0) != 0) {
    return r3;
  }
  HEAP32[r5] = 4;
  return r3;
}
function _create_v1_key_exchange_message(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4, r9 = r8 >> 2;
  r10 = r5 + 8;
  HEAP32[r7] = 0;
  if (HEAP16[r3 + 16 >> 1] << 16 >> 16 != 0) {
    r11 = _gpg_error155(55);
    STACKTOP = r5;
    return r11;
  }
  r12 = r1 + 16 | 0;
  _gcry_mpi_print(5, 0, 0, r8, HEAP32[r12 >> 2]);
  r8 = (r3 + 28 | 0) >> 2;
  r13 = HEAP32[r8] + HEAP32[r9] + 12 | 0;
  r14 = r13 + 40 | 0;
  r15 = _malloc(r14);
  do {
    if ((r15 | 0) == 0) {
      r4 = 2006;
    } else {
      HEAP8[r15] = HEAP8[481264];
      HEAP8[r15 + 1 | 0] = HEAP8[481265 | 0];
      HEAP8[r15 + 2 | 0] = HEAP8[481266 | 0];
      HEAP8[r15 + 3 | 0] = r2;
      _memmove(r15 + 4 | 0, HEAP32[r3 + 24 >> 2], HEAP32[r8], 1, 0);
      r16 = HEAP32[r8];
      r17 = (r1 + 20 | 0) >> 2;
      HEAP8[r16 + (r15 + 4) | 0] = HEAP32[r17] >>> 24 & 255;
      HEAP8[r16 + (r15 + 5) | 0] = HEAP32[r17] >>> 16 & 255;
      HEAP8[r16 + (r15 + 6) | 0] = HEAP32[r17] >>> 8 & 255;
      HEAP8[r16 + (r15 + 7) | 0] = HEAP32[r17] & 255;
      HEAP8[r16 + (r15 + 8) | 0] = HEAP32[r9] >>> 24 & 255;
      HEAP8[r16 + (r15 + 9) | 0] = HEAP32[r9] >>> 16 & 255;
      HEAP8[r16 + (r15 + 10) | 0] = HEAP32[r9] >>> 8 & 255;
      HEAP8[r16 + (r15 + 11) | 0] = HEAP32[r9] & 255;
      r17 = r16 + 12 | 0;
      r18 = r13 + 28 - r16 | 0;
      _gcry_mpi_print(5, r15 + r17 | 0, r18, 0, HEAP32[r12 >> 2]);
      r16 = HEAP32[r9];
      r19 = r16 + r17 | 0;
      r17 = r5 + 12 | 0;
      _gcry_md_hash_buffer(2, r17, r15, r19);
      r20 = _otrl_privkey_sign(r6, r10, r3, r17, 20);
      if ((r20 | 0) != 0) {
        r21 = r20;
        break;
      }
      if ((HEAP32[r10 >> 2] | 0) != 40) {
        r21 = _gcry_error142(55);
        break;
      }
      _memmove(r15 + r19 | 0, HEAP32[r7], 40, 1, 0);
      _free(HEAP32[r7]);
      HEAP32[r7] = 0;
      if ((r18 - r16 | 0) != 40) {
        ___assert_func(487440, 1235, 494084, 489756);
      }
      r16 = r1 + 168 | 0;
      _free(HEAP32[r16 >> 2]);
      r18 = _otrl_base64_otr_encode(r15, r14);
      HEAP32[r16 >> 2] = r18;
      if ((r18 | 0) == 0) {
        r4 = 2006;
        break;
      }
      _free(r15);
      r11 = r20;
      STACKTOP = r5;
      return r11;
    }
  } while (0);
  if (r4 == 2006) {
    r21 = _gcry_error142(32854);
  }
  _free(r15);
  _free(HEAP32[r7]);
  r11 = r21;
  STACKTOP = r5;
  return r11;
}
function _gpg_err_make158(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function _otrl_auth_handle_v1_key_exchange(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39;
  r9 = 0;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  r11 = r10, r12 = r11 >> 2;
  r13 = r10 + 4;
  r14 = r10 + 24;
  r15 = r10 + 44, r16 = r15 >> 2;
  r17 = r10 + 48, r18 = r17 >> 2;
  r19 = r10 + 52, r20 = r19 >> 2;
  r21 = r10 + 56, r22 = r21 >> 2;
  r23 = r10 + 60, r24 = r23 >> 2;
  r25 = r10 + 64, r26 = r25 >> 2;
  r27 = r10 + 68;
  HEAP32[r12] = 0;
  HEAP32[r24] = 0;
  HEAP32[r26] = 0;
  HEAP32[r3 >> 2] = 0;
  r28 = _otrl_base64_otr_decode(r2, r11, r27);
  do {
    if ((r28 | 0) == -1) {
      r29 = _gcry_error142(32854);
      break;
    } else if ((r28 | 0) == -2) {
      r9 = 2063;
    } else {
      r11 = HEAP32[r12];
      r2 = HEAP32[r27 >> 2];
      if (r2 >>> 0 < 3) {
        r9 = 2063;
        break;
      }
      if ((_memcmp(r11, 481264, 3) | 0) != 0 | (r2 | 0) == 3) {
        r9 = 2063;
        break;
      }
      r30 = HEAP8[r11 + 3 | 0];
      r31 = r11 + 4 | 0;
      if ((r2 - 4 | 0) >>> 0 < 4) {
        r9 = 2063;
        break;
      }
      r32 = HEAPU8[r11 + 5 | 0] << 16 | HEAPU8[r31] << 24 | HEAPU8[r11 + 6 | 0] << 8 | HEAPU8[r11 + 7 | 0];
      r33 = r11 + 8 | 0;
      r34 = r2 - 8 | 0;
      if ((r32 | 0) == 0) {
        HEAP32[r16] = _gcry_mpi_set_ui(0, 0);
      } else {
        if (r34 >>> 0 < r32 >>> 0) {
          r9 = 2063;
          break;
        }
        _gcry_mpi_scan(r15, 5, r33, r32, 0);
      }
      r33 = r34 - r32 | 0;
      if (r33 >>> 0 < 4) {
        r9 = 2063;
        break;
      }
      r34 = HEAPU8[r32 + (r11 + 9) | 0] << 16 | HEAPU8[r32 + (r11 + 8) | 0] << 24 | HEAPU8[r32 + (r11 + 10) | 0] << 8 | HEAPU8[r32 + (r11 + 11) | 0];
      r2 = r32 + 12 | 0;
      r32 = r11 + r2 | 0;
      r35 = r33 - 4 | 0;
      if ((r34 | 0) == 0) {
        HEAP32[r18] = _gcry_mpi_set_ui(0, 0);
      } else {
        if (r35 >>> 0 < r34 >>> 0) {
          r9 = 2063;
          break;
        }
        _gcry_mpi_scan(r17, 5, r32, r34, 0);
      }
      r32 = r34 + r2 | 0;
      r2 = r35 - r34 | 0;
      if (r2 >>> 0 < 4) {
        r9 = 2063;
        break;
      }
      r34 = HEAPU8[r32 + (r11 + 1) | 0] << 16 | HEAPU8[r11 + r32 | 0] << 24 | HEAPU8[r32 + (r11 + 2) | 0] << 8 | HEAPU8[r32 + (r11 + 3) | 0];
      r35 = r32 + 4 | 0;
      r32 = r11 + r35 | 0;
      r33 = r2 - 4 | 0;
      if ((r34 | 0) == 0) {
        HEAP32[r20] = _gcry_mpi_set_ui(0, 0);
      } else {
        if (r33 >>> 0 < r34 >>> 0) {
          r9 = 2063;
          break;
        }
        _gcry_mpi_scan(r19, 5, r32, r34, 0);
      }
      r32 = r34 + r35 | 0;
      r35 = r33 - r34 | 0;
      if (r35 >>> 0 < 4) {
        r9 = 2063;
        break;
      }
      r34 = HEAPU8[r32 + (r11 + 1) | 0] << 16 | HEAPU8[r11 + r32 | 0] << 24 | HEAPU8[r32 + (r11 + 2) | 0] << 8 | HEAPU8[r32 + (r11 + 3) | 0];
      r33 = r32 + 4 | 0;
      r32 = r11 + r33 | 0;
      r2 = r35 - 4 | 0;
      if ((r34 | 0) == 0) {
        HEAP32[r22] = _gcry_mpi_set_ui(0, 0);
      } else {
        if (r2 >>> 0 < r34 >>> 0) {
          r9 = 2063;
          break;
        }
        _gcry_mpi_scan(r21, 5, r32, r34, 0);
      }
      r32 = r34 + r33 | 0;
      r33 = r11 + r32 | 0;
      r35 = r2 - r34 | 0;
      r34 = r13 | 0;
      _gcry_md_hash_buffer(2, r34, r31, r33 - r31 | 0);
      r31 = HEAP32[r18];
      r2 = HEAP32[r20];
      r36 = HEAP32[r22];
      _gcry_sexp_build(r25, 0, 477132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[r16], HEAP32[tempInt + 4 >> 2] = r31, HEAP32[tempInt + 8 >> 2] = r2, HEAP32[tempInt + 12 >> 2] = r36, tempInt));
      _gcry_mpi_release(HEAP32[r16]);
      _gcry_mpi_release(HEAP32[r18]);
      _gcry_mpi_release(HEAP32[r20]);
      _gcry_mpi_release(HEAP32[r22]);
      if (r35 >>> 0 < 4) {
        r9 = 2063;
        break;
      }
      r36 = HEAPU8[r32 + (r11 + 1) | 0] << 16 | HEAPU8[r33] << 24 | HEAPU8[r32 + (r11 + 2) | 0] << 8 | HEAPU8[r32 + (r11 + 3) | 0];
      if ((r36 | 0) == 0) {
        r9 = 2063;
        break;
      }
      if ((r35 - 4 | 0) >>> 0 < 4) {
        r9 = 2063;
        break;
      }
      r33 = HEAPU8[r32 + (r11 + 5) | 0] << 16 | HEAPU8[r32 + (r11 + 4) | 0] << 24 | HEAPU8[r32 + (r11 + 6) | 0] << 8 | HEAPU8[r32 + (r11 + 7) | 0];
      r2 = r32 + 8 | 0;
      r32 = r11 + r2 | 0;
      r31 = r35 - 8 | 0;
      if ((r33 | 0) == 0) {
        HEAP32[r24] = _gcry_mpi_set_ui(0, 0);
      } else {
        if (r31 >>> 0 < r33 >>> 0) {
          r9 = 2063;
          break;
        }
        _gcry_mpi_scan(r23, 5, r32, r33, 0);
      }
      r32 = r11 + r33 + r2 | 0;
      r2 = r31 - r33 | 0;
      if ((r2 | 0) != 40) {
        r9 = 2063;
        break;
      }
      r33 = r14 | 0;
      r31 = HEAP32[r12];
      _gcry_md_hash_buffer(2, r33, r31, r32 - r31 | 0);
      r31 = _otrl_privkey_verify(r32, r2, 0, HEAP32[r26], r33, 20);
      if ((r31 | 0) != 0) {
        r29 = r31;
        break;
      }
      _gcry_sexp_release(HEAP32[r26]);
      HEAP32[r26] = 0;
      _free(HEAP32[r12]);
      HEAP32[r12] = 0;
      r31 = r1 | 0;
      r33 = HEAP32[r31 >> 2];
      r2 = r30 << 24 >> 24 == 1;
      if ((r33 | 0) != 4 & r2) {
        r29 = _gpg_error155(0);
        break;
      }
      if ((r33 | 0) != 4) {
        _otrl_auth_clear(r1);
      }
      HEAP32[r1 + 84 >> 2] = r36;
      r36 = (r1 + 80 | 0) >> 2;
      _gcry_mpi_release(HEAP32[r36]);
      HEAP32[r36] = HEAP32[r24];
      HEAP32[r24] = 0;
      _memcpy(r1 + 112 | 0, r34, 20);
      if (r2) {
        r37 = 0;
      } else {
        do {
          if ((r5 | 0) == 0) {
            r2 = r1 + 20 | 0;
            if ((HEAP32[r2 >> 2] | 0) != 0) {
              break;
            }
            _otrl_dh_gen_keypair(5, r1 + 8 | 0);
            HEAP32[r2 >> 2] = 1;
          } else {
            _otrl_dh_keypair_copy(r1 + 8 | 0, r5);
            HEAP32[r1 + 20 >> 2] = r6;
          }
        } while (0);
        r2 = _create_v1_key_exchange_message(r1, 1, r4);
        if ((r2 | 0) == 0) {
          r37 = 1;
        } else {
          r29 = r2;
          break;
        }
      }
      HEAP32[r3 >> 2] = r37;
      r2 = _otrl_dh_compute_v1_session_id(r1 + 8 | 0, HEAP32[r36], r1 + 140 | 0, r1 + 160 | 0, r1 + 164 | 0);
      if ((r2 | 0) != 0) {
        r29 = r2;
        break;
      }
      HEAP32[r1 + 136 >> 2] = 1;
      if ((r7 | 0) == 0) {
        r38 = 0;
      } else {
        r38 = FUNCTION_TABLE[r7](r1, r8);
      }
      HEAP32[r1 + 20 >> 2] = 0;
      HEAP32[r31 >> 2] = 0;
      r39 = r38;
      STACKTOP = r10;
      return r39;
    }
  } while (0);
  if (r9 == 2063) {
    r29 = _gcry_error142(55);
  }
  _free(HEAP32[r12]);
  _gcry_sexp_release(HEAP32[r26]);
  _gcry_mpi_release(HEAP32[r24]);
  r39 = r29;
  STACKTOP = r10;
  return r39;
}
function _gpg_error155(r1) {
  return _gpg_err_make158(0, r1);
}
function _otrl_auth_copy_on_key(r1, r2) {
  var r3, r4, r5;
  r3 = HEAP32[r1 >> 2];
  if (!((r3 | 0) == 1 | (r3 | 0) == 3)) {
    return;
  }
  r3 = r2 + 8 | 0;
  _otrl_dh_keypair_free(r3);
  HEAP32[r2 + 132 >> 2] = HEAP32[r1 + 132 >> 2];
  _otrl_dh_keypair_copy(r3, r1 + 8 | 0);
  HEAP32[r2 + 20 >> 2] = HEAP32[r1 + 20 >> 2];
  _memmove(r2 + 32 | 0, r1 + 32 | 0, 16, 1, 0);
  r3 = r2 + 24 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 | 0) != 0) {
    _free(r4);
  }
  r4 = r1 + 28 | 0;
  r5 = _malloc(HEAP32[r4 >> 2]);
  HEAP32[r3 >> 2] = r5;
  _memmove(r5, HEAP32[r1 + 24 >> 2], HEAP32[r4 >> 2], 1, 0);
  _memmove(r2 + 48 | 0, r1 + 48 | 0, 32, 1, 0);
  HEAP32[r2 >> 2] = 1;
  return;
}
function _calculate_pubkey_auth(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34;
  r9 = 0;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r11 = r10, r12 = r11 >> 2;
  r13 = r10 + 4, r14 = r13 >> 2;
  r15 = r10 + 8;
  r16 = r10 + 40, r17 = r16 >> 2;
  r18 = r10 + 44, r19 = r18 >> 2;
  HEAP32[r17] = 0;
  _gcry_mpi_print(5, 0, 0, r11, r5);
  _gcry_mpi_print(5, 0, 0, r13, r6);
  r13 = (r7 + 28 | 0) >> 2;
  r11 = HEAP32[r12] + HEAP32[r14] + HEAP32[r13] + 10 | 0;
  r20 = r11 + 4 | 0;
  r21 = _malloc(r20);
  do {
    if ((r21 | 0) == 0) {
      r9 = 2086;
    } else {
      HEAP8[r21] = HEAP32[r12] >>> 24 & 255;
      HEAP8[r21 + 1 | 0] = HEAP32[r12] >>> 16 & 255;
      HEAP8[r21 + 2 | 0] = HEAP32[r12] >>> 8 & 255;
      HEAP8[r21 + 3 | 0] = HEAP32[r12] & 255;
      _gcry_mpi_print(5, r21 + 4 | 0, r11, 0, r5);
      r22 = HEAP32[r12];
      r23 = r11 - r22 | 0;
      HEAP8[r22 + (r21 + 4) | 0] = HEAP32[r14] >>> 24 & 255;
      HEAP8[r22 + (r21 + 5) | 0] = HEAP32[r14] >>> 16 & 255;
      HEAP8[r22 + (r21 + 6) | 0] = HEAP32[r14] >>> 8 & 255;
      HEAP8[r22 + (r21 + 7) | 0] = HEAP32[r14] & 255;
      r24 = r22 + 8 | 0;
      _gcry_mpi_print(5, r21 + r24 | 0, r23 - 4 | 0, 0, r6);
      r22 = HEAP32[r14];
      r25 = r22 + r24 | 0;
      r24 = (r7 + 16 | 0) >> 1;
      HEAP8[r21 + r25 | 0] = HEAPU16[r24] >>> 8 & 255;
      HEAP8[r25 + (r21 + 1) | 0] = HEAP16[r24] & 255;
      r26 = r25 + 2 | 0;
      r25 = r7 + 24 | 0;
      _memmove(r21 + r26 | 0, HEAP32[r25 >> 2], HEAP32[r13], 1, 0);
      r27 = HEAP32[r13];
      r28 = r27 + r26 | 0;
      r26 = r8 >>> 24 & 255;
      HEAP8[r21 + r28 | 0] = r26;
      r29 = r8 >>> 16 & 255;
      HEAP8[r28 + (r21 + 1) | 0] = r29;
      r30 = r8 >>> 8 & 255;
      HEAP8[r28 + (r21 + 2) | 0] = r30;
      r31 = r8 & 255;
      HEAP8[r28 + (r21 + 3) | 0] = r31;
      if ((r23 - 6 - r22 - r27 | 0) != 4) {
        ___assert_func(487440, 465, 494212, 489756);
      }
      _gcry_md_reset(r3);
      _gcry_md_write(r3, r21, r20);
      r27 = r15 | 0;
      _memmove(r27, _gcry_md_read(r3, 8), 32, 1, 0);
      _free(r21);
      r22 = _otrl_privkey_sign(r16, r18, r7, r27, 32);
      if ((r22 | 0) != 0) {
        r32 = 0;
        r33 = r22;
        break;
      }
      r22 = HEAP32[r13];
      r27 = HEAP32[r19];
      r23 = r27 + (r22 + 6) | 0;
      r28 = _malloc(r23);
      if ((r28 | 0) == 0) {
        r9 = 2086;
        break;
      }
      HEAP8[r28] = HEAPU16[r24] >>> 8 & 255;
      HEAP8[r28 + 1 | 0] = HEAP16[r24] & 255;
      _memmove(r28 + 2 | 0, HEAP32[r25 >> 2], HEAP32[r13], 1, 0);
      r25 = HEAP32[r13];
      HEAP8[r25 + (r28 + 2) | 0] = r26;
      HEAP8[r25 + (r28 + 3) | 0] = r29;
      HEAP8[r25 + (r28 + 4) | 0] = r30;
      HEAP8[r25 + (r28 + 5) | 0] = r31;
      _memmove(r25 + (r28 + 6) | 0, HEAP32[r17], HEAP32[r19], 1, 0);
      r31 = HEAP32[r19];
      _free(HEAP32[r17]);
      HEAP32[r17] = 0;
      if ((r22 + r27 - r25 | 0) != (r31 | 0)) {
        ___assert_func(487440, 501, 494212, 489756);
      }
      r31 = _gcry_cipher_encrypt(r4, r28, r23, 0, 0);
      if ((r31 | 0) != 0) {
        r32 = r28;
        r33 = r31;
        break;
      }
      HEAP32[r1 >> 2] = r28;
      HEAP32[r2 >> 2] = r23;
      r34 = 0;
      STACKTOP = r10;
      return r34;
    }
  } while (0);
  if (r9 == 2086) {
    r32 = 0;
    r33 = _gcry_error142(32854);
  }
  _free(r32);
  _free(HEAP32[r17]);
  r34 = r33;
  STACKTOP = r10;
  return r34;
}
function _gcry_err_make159(r1) {
  return _gpg_err_make158(32, r1);
}
function _otrl_sm_init() {
  var r1;
  _gcry_check_version(0);
  _gcry_mpi_scan(512452, 4, 480648, 0, 0);
  _gcry_mpi_scan(512444, 4, 488908, 0, 0);
  _gcry_mpi_scan(512456, 4, 485168, 0, 0);
  r1 = _gcry_mpi_new(1536);
  HEAP32[128112] = r1;
  _gcry_mpi_sub_ui(r1, HEAP32[128113], 2);
  return;
}
function _otrl_sm_state_new(r1) {
  _memset(r1, 0, 56);
  return;
}
function _otrl_sm_state_init(r1) {
  var r2;
  r2 = r1 >> 2;
  _otrl_sm_state_free(r1);
  HEAP32[r2] = _gcry_mpi_new(1536);
  HEAP32[r2 + 1] = 0;
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 3] = _gcry_mpi_copy(HEAP32[128114]);
  HEAP32[r2 + 4] = _gcry_mpi_new(1536);
  HEAP32[r2 + 5] = _gcry_mpi_new(1536);
  HEAP32[r2 + 6] = _gcry_mpi_new(1536);
  HEAP32[r2 + 7] = _gcry_mpi_new(1536);
  HEAP32[r2 + 8] = _gcry_mpi_new(1536);
  HEAP32[r2 + 9] = _gcry_mpi_new(1536);
  HEAP32[r2 + 10] = _gcry_mpi_new(1536);
  HEAP32[r2 + 12] = 0;
  HEAP32[r2 + 13] = 0;
  return;
}
function _otrl_sm_state_free(r1) {
  var r2;
  r2 = r1 >> 2;
  _gcry_mpi_release(HEAP32[r2]);
  _gcry_mpi_release(HEAP32[r2 + 1]);
  _gcry_mpi_release(HEAP32[r2 + 2]);
  _gcry_mpi_release(HEAP32[r2 + 3]);
  _gcry_mpi_release(HEAP32[r2 + 4]);
  _gcry_mpi_release(HEAP32[r2 + 5]);
  _gcry_mpi_release(HEAP32[r2 + 6]);
  _gcry_mpi_release(HEAP32[r2 + 7]);
  _gcry_mpi_release(HEAP32[r2 + 8]);
  _gcry_mpi_release(HEAP32[r2 + 9]);
  _gcry_mpi_release(HEAP32[r2 + 10]);
  _otrl_sm_state_new(r1);
  return;
}
function _otrl_sm_msg1_init(r1) {
  var r2, r3, r4;
  r2 = _malloc(24), r3 = r2 >> 2;
  r4 = r2;
  HEAP32[r4 >> 2] = _gcry_mpi_new(1536);
  HEAP32[r3 + 1] = 0;
  HEAP32[r3 + 2] = _gcry_mpi_new(1536);
  HEAP32[r3 + 3] = _gcry_mpi_new(1536);
  HEAP32[r3 + 4] = 0;
  HEAP32[r3 + 5] = _gcry_mpi_new(1536);
  HEAP32[r1 >> 2] = r4;
  return;
}
function _otrl_sm_msg2_init(r1) {
  var r2, r3, r4;
  r2 = _malloc(44), r3 = r2 >> 2;
  r4 = r2;
  HEAP32[r4 >> 2] = _gcry_mpi_new(1536);
  HEAP32[r3 + 1] = 0;
  HEAP32[r3 + 2] = _gcry_mpi_new(1536);
  HEAP32[r3 + 3] = _gcry_mpi_new(1536);
  HEAP32[r3 + 4] = 0;
  HEAP32[r3 + 5] = _gcry_mpi_new(1536);
  HEAP32[r3 + 6] = _gcry_mpi_new(1536);
  HEAP32[r3 + 7] = _gcry_mpi_new(1536);
  HEAP32[r3 + 8] = 0;
  HEAP32[r3 + 9] = _gcry_mpi_new(1536);
  HEAP32[r3 + 10] = _gcry_mpi_new(1536);
  HEAP32[r1 >> 2] = r4;
  return;
}
function _otrl_sm_msg3_init(r1) {
  var r2, r3, r4;
  r2 = _malloc(32), r3 = r2 >> 2;
  r4 = r2;
  HEAP32[r4 >> 2] = _gcry_mpi_new(1536);
  HEAP32[r3 + 1] = _gcry_mpi_new(1536);
  HEAP32[r3 + 2] = 0;
  HEAP32[r3 + 3] = _gcry_mpi_new(1536);
  HEAP32[r3 + 4] = _gcry_mpi_new(1536);
  HEAP32[r3 + 5] = _gcry_mpi_new(1536);
  HEAP32[r3 + 6] = 0;
  HEAP32[r3 + 7] = _gcry_mpi_new(1536);
  HEAP32[r1 >> 2] = r4;
  return;
}
function _otrl_sm_msg4_init(r1) {
  var r2, r3;
  r2 = _malloc(12);
  r3 = r2;
  HEAP32[r3 >> 2] = _gcry_mpi_new(1536);
  HEAP32[r2 + 4 >> 2] = 0;
  HEAP32[r2 + 8 >> 2] = _gcry_mpi_new(1536);
  HEAP32[r1 >> 2] = r3;
  return;
}
function _otrl_sm_msg_free(r1, r2) {
  var r3, r4, r5;
  r3 = HEAP32[r1 >> 2];
  L2592 : do {
    if ((r2 | 0) > 0) {
      r4 = 0;
      while (1) {
        _gcry_mpi_release(HEAP32[r3 + (r4 << 2) >> 2]);
        r5 = r4 + 1 | 0;
        if ((r5 | 0) == (r2 | 0)) {
          break L2592;
        } else {
          r4 = r5;
        }
      }
    }
  } while (0);
  _free(r3);
  HEAP32[r1 >> 2] = 0;
  return;
}
function _otrl_sm_step1(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  HEAP32[r8] = 0;
  HEAP32[r4 >> 2] = 0;
  HEAP32[r5 >> 2] = 0;
  _gcry_mpi_scan(r7, 5, r2, r3, 0);
  r3 = (r1 + 12 | 0) >> 2;
  if ((HEAP32[r3] | 0) == 0) {
    _otrl_sm_state_init(r1);
  }
  _gcry_mpi_set(HEAP32[r1 >> 2], HEAP32[r8]);
  _gcry_mpi_release(HEAP32[r8]);
  HEAP32[r1 + 48 >> 2] = 0;
  _otrl_sm_msg1_init(r9);
  r8 = (r1 + 4 | 0) >> 2;
  HEAP32[r8] = _randomExponent();
  r2 = (r1 + 8 | 0) >> 2;
  HEAP32[r2] = _randomExponent();
  _gcry_mpi_powm(HEAP32[HEAP32[r10] >> 2], HEAP32[r3], HEAP32[r8], HEAP32[128113]);
  r7 = HEAP32[r10];
  _otrl_sm_proof_know_log(r7 + 4 | 0, r7 + 8 | 0, HEAP32[r3], HEAP32[r8], 1);
  _gcry_mpi_powm(HEAP32[HEAP32[r10] + 12 >> 2], HEAP32[r3], HEAP32[r2], HEAP32[128113]);
  r8 = HEAP32[r10];
  _otrl_sm_proof_know_log(r8 + 16 | 0, r8 + 20 | 0, HEAP32[r3], HEAP32[r2], 2);
  _serialize_mpi_array(r4, r5, 6, HEAP32[r10]);
  _otrl_sm_msg_free(r9, 6);
  HEAP32[r1 + 52 >> 2] = 0;
  r1 = _gcry_error171(0);
  STACKTOP = r6;
  return r1;
}
function _randomExponent() {
  var r1, r2, r3;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r2 = r1;
  HEAP32[r2 >> 2] = 0;
  r3 = _gcry_random_bytes_secure(192, 1);
  _gcry_mpi_scan(r2, 5, r3, 192, 0);
  _gcry_free(r3);
  STACKTOP = r1;
  return HEAP32[r2 >> 2];
}
function _otrl_sm_proof_know_log(r1, r2, r3, r4, r5) {
  var r6, r7;
  r6 = _randomExponent();
  r7 = _gcry_mpi_new(1536);
  _gcry_mpi_powm(r7, r3, r6, HEAP32[128113]);
  _otrl_sm_hash(r1, r5, r7, 0);
  _gcry_mpi_mulm(r7, r4, HEAP32[r1 >> 2], HEAP32[128111]);
  _gcry_mpi_subm(HEAP32[r2 >> 2], r6, r7, HEAP32[128111]);
  _gcry_mpi_release(r7);
  _gcry_mpi_release(r6);
  return;
}
function _serialize_mpi_array(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = r3 << 2;
  r6 = _malloc(r5);
  r7 = r6;
  r8 = _malloc(r5);
  r9 = r8;
  L2603 : do {
    if ((r3 | 0) == 0) {
      r10 = 0;
    } else {
      r11 = 0;
      r12 = 0;
      while (1) {
        r13 = (r11 << 2) + r7 | 0;
        _gcry_mpi_aprint(5, (r11 << 2) + r9 | 0, r13, HEAP32[r4 + (r11 << 2) >> 2]);
        r14 = HEAP32[r13 >> 2] + r12 | 0;
        r13 = r11 + 1 | 0;
        if ((r13 | 0) == (r3 | 0)) {
          r10 = r14;
          break L2603;
        } else {
          r11 = r13;
          r12 = r14;
        }
      }
    }
  } while (0);
  r4 = r10 + (r5 + 4) | 0;
  HEAP32[r2 >> 2] = r4;
  r2 = _malloc(r4);
  HEAP32[r1 >> 2] = r2;
  HEAP8[r2] = r3 >>> 24 & 255;
  HEAP8[r2 + 1 | 0] = r3 >>> 16 & 255;
  HEAP8[r2 + 2 | 0] = r3 >>> 8 & 255;
  HEAP8[r2 + 3 | 0] = r3 & 255;
  if ((r3 | 0) == 0) {
    _free(r8);
    _free(r6);
    return;
  }
  r1 = 0;
  r4 = r2 + 4 | 0;
  while (1) {
    r2 = HEAP32[r7 + (r1 << 2) >> 2];
    HEAP8[r4] = r2 >>> 24 & 255;
    HEAP8[r4 + 1 | 0] = r2 >>> 16 & 255;
    HEAP8[r4 + 2 | 0] = r2 >>> 8 & 255;
    HEAP8[r4 + 3 | 0] = r2 & 255;
    L2612 : do {
      if ((r2 | 0) != 0) {
        r5 = (r1 << 2) + r9 | 0;
        r10 = 0;
        while (1) {
          HEAP8[r10 + (r4 + 4) | 0] = HEAP8[HEAP32[r5 >> 2] + r10 | 0];
          r12 = r10 + 1 | 0;
          if ((r12 | 0) == (r2 | 0)) {
            break L2612;
          } else {
            r10 = r12;
          }
        }
      }
    } while (0);
    _gcry_free(HEAP32[r9 + (r1 << 2) >> 2]);
    r10 = r1 + 1 | 0;
    if ((r10 | 0) == (r3 | 0)) {
      break;
    } else {
      r1 = r10;
      r4 = r2 + (r4 + 4) | 0;
    }
  }
  _free(r8);
  _free(r6);
  return;
}
function _gcry_error171(r1) {
  return _gcry_err_make182(r1);
}
function _otrl_sm_step2a(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = (r1 + 12 | 0) >> 2;
  if ((HEAP32[r8] | 0) == 0) {
    _otrl_sm_state_init(r1);
  }
  HEAP32[r1 + 48 >> 2] = r4;
  r4 = r1 + 52 | 0;
  HEAP32[r4 >> 2] = -2;
  r9 = _unserialize_mpi_array(r6, 6, r2, r3);
  r3 = _gcry_error171(0);
  if ((r9 | 0) != (r3 | 0)) {
    r10 = r9;
    STACKTOP = r5;
    return r10;
  }
  do {
    if ((_check_group_elem(HEAP32[HEAP32[r7] >> 2]) | 0) == 0) {
      if ((_check_expon(HEAP32[HEAP32[r7] + 8 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[r7] + 12 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r7] + 20 >> 2]) | 0) != 0) {
        break;
      }
      _gcry_mpi_set(HEAP32[r1 + 24 >> 2], HEAP32[HEAP32[r7] + 12 >> 2]);
      r9 = HEAP32[r7] >> 2;
      do {
        if ((_otrl_sm_check_know_log(HEAP32[r9 + 1], HEAP32[r9 + 2], HEAP32[r8], HEAP32[r9], 1) | 0) == 0) {
          r2 = HEAP32[r7] >> 2;
          if ((_otrl_sm_check_know_log(HEAP32[r2 + 4], HEAP32[r2 + 5], HEAP32[r8], HEAP32[r2 + 3], 2) | 0) != 0) {
            break;
          }
          r2 = r1 + 4 | 0;
          HEAP32[r2 >> 2] = _randomExponent();
          r11 = r1 + 8 | 0;
          HEAP32[r11 >> 2] = _randomExponent();
          _gcry_mpi_powm(HEAP32[r1 + 16 >> 2], HEAP32[HEAP32[r7] >> 2], HEAP32[r2 >> 2], HEAP32[128113]);
          _gcry_mpi_powm(HEAP32[r1 + 20 >> 2], HEAP32[HEAP32[r7] + 12 >> 2], HEAP32[r11 >> 2], HEAP32[128113]);
          HEAP32[r4 >> 2] = 0;
          _otrl_sm_msg_free(r6, 6);
          r10 = r3;
          STACKTOP = r5;
          return r10;
        }
      } while (0);
      _otrl_sm_msg_free(r6, 6);
      r10 = _gcry_error171(55);
      STACKTOP = r5;
      return r10;
    }
  } while (0);
  _otrl_sm_msg_free(r6, 6);
  r10 = _gcry_error171(55);
  STACKTOP = r5;
  return r10;
}
function _unserialize_mpi_array(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r5 = r1 >> 2;
  HEAP32[r5] = 0;
  do {
    if (r4 >>> 0 >= 4) {
      r1 = HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0];
      r6 = r3 + 4 | 0;
      r7 = r4 - 4 | 0;
      L2642 : do {
        if ((r1 | 0) == (r2 | 0)) {
          HEAP32[r5] = _malloc(r1 << 2);
          L2644 : do {
            if ((r1 | 0) != 0) {
              r8 = 0;
              while (1) {
                HEAP32[HEAP32[r5] + (r8 << 2) >> 2] = 0;
                r9 = r8 + 1 | 0;
                if ((r9 | 0) == (r1 | 0)) {
                  break;
                } else {
                  r8 = r9;
                }
              }
              if ((r1 | 0) == 0) {
                break;
              } else {
                r10 = 0;
                r11 = r7;
                r12 = r6;
              }
              while (1) {
                if (r11 >>> 0 < 4) {
                  break L2642;
                }
                r8 = HEAPU8[r12 + 1 | 0] << 16 | HEAPU8[r12] << 24 | HEAPU8[r12 + 2 | 0] << 8 | HEAPU8[r12 + 3 | 0];
                r9 = r12 + 4 | 0;
                r13 = r11 - 4 | 0;
                if ((r8 | 0) == 0) {
                  r14 = _gcry_mpi_set_ui(0, 0);
                  HEAP32[HEAP32[r5] + (r10 << 2) >> 2] = r14;
                } else {
                  if (r13 >>> 0 < r8 >>> 0) {
                    break L2642;
                  }
                  _gcry_mpi_scan((r10 << 2) + HEAP32[r5] | 0, 5, r9, r8, 0);
                }
                r9 = r10 + 1 | 0;
                if (r9 >>> 0 < r1 >>> 0) {
                  r10 = r9;
                  r11 = r13 - r8 | 0;
                  r12 = r8 + (r12 + 4) | 0;
                } else {
                  break L2644;
                }
              }
            }
          } while (0);
          r15 = _gcry_error171(0);
          return r15;
        }
      } while (0);
      if ((HEAP32[r5] | 0) == 0) {
        break;
      }
      r6 = HEAP32[r5];
      L2660 : do {
        if ((r1 | 0) == 0) {
          r16 = r6;
        } else {
          r7 = 0;
          r8 = r6;
          while (1) {
            _gcry_mpi_release(HEAP32[r8 + (r7 << 2) >> 2]);
            r13 = r7 + 1 | 0;
            r9 = HEAP32[r5];
            if ((r13 | 0) == (r1 | 0)) {
              r16 = r9;
              break L2660;
            } else {
              r7 = r13;
              r8 = r9;
            }
          }
        }
      } while (0);
      _free(r16);
      HEAP32[r5] = 0;
    }
  } while (0);
  r15 = _gcry_error171(55);
  return r15;
}
function _check_group_elem(r1) {
  if ((_gcry_mpi_cmp_ui(r1, 2) | 0) < 0) {
    return 1;
  } else {
    return (_gcry_mpi_cmp(r1, HEAP32[128112]) | 0) > 0 & 1;
  }
}
function _check_expon(r1) {
  if ((_gcry_mpi_cmp_ui(r1, 1) | 0) < 0) {
    return 1;
  } else {
    return _gcry_mpi_cmp(r1, HEAP32[128111]) >>> 31 ^ 1;
  }
}
function _otrl_sm_check_know_log(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = _gcry_mpi_new(1536);
  r10 = _gcry_mpi_new(1536);
  r11 = _gcry_mpi_new(1536);
  HEAP32[r8] = 0;
  _gcry_mpi_powm(r9, r3, r2, HEAP32[128113]);
  _gcry_mpi_powm(r10, r4, r1, HEAP32[128113]);
  _gcry_mpi_mulm(r11, r9, r10, HEAP32[128113]);
  _otrl_sm_hash(r7, r5, r11, 0);
  r5 = _gcry_mpi_cmp(HEAP32[r8], r1);
  _gcry_mpi_release(r9);
  _gcry_mpi_release(r10);
  _gcry_mpi_release(r11);
  _gcry_mpi_release(HEAP32[r8]);
  STACKTOP = r6;
  return r5;
}
function _otrl_sm_step2b(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  HEAP32[r10] = 0;
  HEAP32[r4 >> 2] = 0;
  HEAP32[r5 >> 2] = 0;
  _gcry_mpi_scan(r9, 5, r2, r3, 0);
  r3 = r1 | 0;
  _gcry_mpi_set(HEAP32[r3 >> 2], HEAP32[r10]);
  _gcry_mpi_release(HEAP32[r10]);
  _otrl_sm_msg2_init(r7);
  r10 = (r1 + 12 | 0) >> 2;
  r2 = r1 + 4 | 0;
  _gcry_mpi_powm(HEAP32[HEAP32[r8] >> 2], HEAP32[r10], HEAP32[r2 >> 2], HEAP32[128113]);
  r9 = HEAP32[r8];
  _otrl_sm_proof_know_log(r9 + 4 | 0, r9 + 8 | 0, HEAP32[r10], HEAP32[r2 >> 2], 3);
  r2 = r1 + 8 | 0;
  _gcry_mpi_powm(HEAP32[HEAP32[r8] + 12 >> 2], HEAP32[r10], HEAP32[r2 >> 2], HEAP32[128113]);
  r9 = HEAP32[r8];
  _otrl_sm_proof_know_log(r9 + 16 | 0, r9 + 20 | 0, HEAP32[r10], HEAP32[r2 >> 2], 4);
  r2 = _randomExponent();
  r9 = _gcry_mpi_new(1536);
  r11 = _gcry_mpi_new(1536);
  r12 = r1 + 28 | 0;
  _gcry_mpi_powm(HEAP32[r12 >> 2], HEAP32[r1 + 20 >> 2], r2, HEAP32[128113]);
  _gcry_mpi_set(HEAP32[HEAP32[r8] + 24 >> 2], HEAP32[r12 >> 2]);
  _gcry_mpi_powm(r9, HEAP32[r10], r2, HEAP32[128113]);
  _gcry_mpi_powm(r11, HEAP32[r1 + 16 >> 2], HEAP32[r3 >> 2], HEAP32[128113]);
  r3 = r1 + 32 | 0;
  _gcry_mpi_mulm(HEAP32[r3 >> 2], r9, r11, HEAP32[128113]);
  _gcry_mpi_set(HEAP32[HEAP32[r8] + 28 >> 2], HEAP32[r3 >> 2]);
  r3 = HEAP32[r8];
  _otrl_sm_proof_equal_coords(r3 + 32 | 0, r3 + 36 | 0, r3 + 40 | 0, r1, r2, 5);
  _serialize_mpi_array(r4, r5, 11, HEAP32[r8]);
  _gcry_mpi_release(r2);
  _gcry_mpi_release(r9);
  _gcry_mpi_release(r11);
  _otrl_sm_msg_free(r7, 11);
  r7 = _gcry_error171(0);
  STACKTOP = r6;
  return r7;
}
function _otrl_sm_proof_equal_coords(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10;
  r7 = _randomExponent();
  r8 = _randomExponent();
  r9 = _gcry_mpi_new(1536);
  r10 = _gcry_mpi_new(1536);
  _gcry_mpi_powm(r9, HEAP32[r4 + 12 >> 2], r7, HEAP32[128113]);
  _gcry_mpi_powm(r10, HEAP32[r4 + 16 >> 2], r8, HEAP32[128113]);
  _gcry_mpi_mulm(r10, r9, r10, HEAP32[128113]);
  _gcry_mpi_powm(r9, HEAP32[r4 + 20 >> 2], r7, HEAP32[128113]);
  _otrl_sm_hash(r1, r6, r9, r10);
  _gcry_mpi_mulm(r9, r5, HEAP32[r1 >> 2], HEAP32[128111]);
  _gcry_mpi_subm(HEAP32[r2 >> 2], r7, r9, HEAP32[128111]);
  _gcry_mpi_mulm(r9, HEAP32[r4 >> 2], HEAP32[r1 >> 2], HEAP32[128111]);
  _gcry_mpi_subm(HEAP32[r3 >> 2], r8, r9, HEAP32[128111]);
  _gcry_mpi_release(r7);
  _gcry_mpi_release(r8);
  _gcry_mpi_release(r9);
  _gcry_mpi_release(r10);
  return;
}
function _otrl_sm_step3(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  HEAP32[r4 >> 2] = 0;
  HEAP32[r5 >> 2] = 0;
  r11 = r1 + 52 | 0;
  HEAP32[r11 >> 2] = -2;
  r12 = _unserialize_mpi_array(r7, 11, r2, r3);
  r3 = _gcry_error171(0);
  if ((r12 | 0) != (r3 | 0)) {
    r13 = r12;
    STACKTOP = r6;
    return r13;
  }
  do {
    if ((_check_group_elem(HEAP32[HEAP32[r8] >> 2]) | 0) == 0) {
      if ((_check_group_elem(HEAP32[HEAP32[r8] + 12 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[r8] + 24 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[r8] + 28 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r8] + 8 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r8] + 20 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r8] + 36 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r8] + 40 >> 2]) | 0) != 0) {
        break;
      }
      _otrl_sm_msg3_init(r9);
      _gcry_mpi_set(HEAP32[r1 + 24 >> 2], HEAP32[HEAP32[r8] + 12 >> 2]);
      r12 = HEAP32[r8] >> 2;
      r2 = (r1 + 12 | 0) >> 2;
      do {
        if ((_otrl_sm_check_know_log(HEAP32[r12 + 1], HEAP32[r12 + 2], HEAP32[r2], HEAP32[r12], 3) | 0) == 0) {
          r14 = HEAP32[r8] >> 2;
          if ((_otrl_sm_check_know_log(HEAP32[r14 + 4], HEAP32[r14 + 5], HEAP32[r2], HEAP32[r14 + 3], 4) | 0) != 0) {
            break;
          }
          r14 = r1 + 16 | 0;
          _gcry_mpi_powm(HEAP32[r14 >> 2], HEAP32[HEAP32[r8] >> 2], HEAP32[r1 + 4 >> 2], HEAP32[128113]);
          r15 = r1 + 20 | 0;
          r16 = r1 + 8 | 0;
          _gcry_mpi_powm(HEAP32[r15 >> 2], HEAP32[HEAP32[r8] + 12 >> 2], HEAP32[r16 >> 2], HEAP32[128113]);
          r17 = HEAP32[r8] >> 2;
          if ((_otrl_sm_check_equal_coords(HEAP32[r17 + 8], HEAP32[r17 + 9], HEAP32[r17 + 10], HEAP32[r17 + 6], HEAP32[r17 + 7], r1, 5) | 0) == 0) {
            r17 = _randomExponent();
            r18 = _gcry_mpi_new(1536);
            r19 = _gcry_mpi_new(1536);
            r20 = (r1 + 28 | 0) >> 2;
            _gcry_mpi_powm(HEAP32[r20], HEAP32[r15 >> 2], r17, HEAP32[128113]);
            _gcry_mpi_set(HEAP32[HEAP32[r10] >> 2], HEAP32[r20]);
            _gcry_mpi_powm(r18, HEAP32[r2], r17, HEAP32[128113]);
            _gcry_mpi_powm(r19, HEAP32[r14 >> 2], HEAP32[r1 >> 2], HEAP32[128113]);
            r14 = (r1 + 32 | 0) >> 2;
            _gcry_mpi_mulm(HEAP32[r14], r18, r19, HEAP32[128113]);
            _gcry_mpi_set(HEAP32[HEAP32[r10] + 4 >> 2], HEAP32[r14]);
            r15 = HEAP32[r10];
            _otrl_sm_proof_equal_coords(r15 + 8 | 0, r15 + 12 | 0, r15 + 16 | 0, r1, r17, 6);
            r15 = _gcry_mpi_new(1536);
            _gcry_mpi_invm(r15, HEAP32[HEAP32[r8] + 24 >> 2], HEAP32[128113]);
            _gcry_mpi_mulm(HEAP32[r1 + 36 >> 2], HEAP32[r20], r15, HEAP32[128113]);
            _gcry_mpi_invm(r15, HEAP32[HEAP32[r8] + 28 >> 2], HEAP32[128113]);
            r20 = r1 + 40 | 0;
            _gcry_mpi_mulm(HEAP32[r20 >> 2], HEAP32[r14], r15, HEAP32[128113]);
            _gcry_mpi_powm(HEAP32[HEAP32[r10] + 20 >> 2], HEAP32[r20 >> 2], HEAP32[r16 >> 2], HEAP32[128113]);
            r16 = HEAP32[r10];
            _otrl_sm_proof_equal_logs(r16 + 24 | 0, r16 + 28 | 0, r1, 7);
            _serialize_mpi_array(r4, r5, 8, HEAP32[r10]);
            _otrl_sm_msg_free(r7, 11);
            _otrl_sm_msg_free(r9, 8);
            _gcry_mpi_release(r17);
            _gcry_mpi_release(r18);
            _gcry_mpi_release(r19);
            _gcry_mpi_release(r15);
            HEAP32[r11 >> 2] = 0;
            r13 = r3;
            STACKTOP = r6;
            return r13;
          } else {
            _otrl_sm_msg_free(r7, 11);
            _otrl_sm_msg_free(r9, 8);
            r13 = _gcry_error171(55);
            STACKTOP = r6;
            return r13;
          }
        }
      } while (0);
      _otrl_sm_msg_free(r7, 11);
      _otrl_sm_msg_free(r9, 8);
      r13 = _gcry_error171(55);
      STACKTOP = r6;
      return r13;
    }
  } while (0);
  _otrl_sm_msg_free(r7, 11);
  r13 = _gcry_error171(55);
  STACKTOP = r6;
  return r13;
}
function _otrl_sm_check_equal_coords(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8, r10 = r9 >> 2;
  r11 = _gcry_mpi_new(1536);
  r12 = _gcry_mpi_new(1536);
  r13 = _gcry_mpi_new(1536);
  HEAP32[r10] = 0;
  _gcry_mpi_powm(r12, HEAP32[r6 + 20 >> 2], r2, HEAP32[128113]);
  _gcry_mpi_powm(r13, r4, r1, HEAP32[128113]);
  _gcry_mpi_mulm(r11, r12, r13, HEAP32[128113]);
  _gcry_mpi_powm(r12, HEAP32[r6 + 12 >> 2], r2, HEAP32[128113]);
  _gcry_mpi_powm(r13, HEAP32[r6 + 16 >> 2], r3, HEAP32[128113]);
  _gcry_mpi_mulm(r12, r12, r13, HEAP32[128113]);
  _gcry_mpi_powm(r13, r5, r1, HEAP32[128113]);
  _gcry_mpi_mulm(r12, r13, r12, HEAP32[128113]);
  _otrl_sm_hash(r9, r7, r11, r12);
  r7 = _gcry_mpi_cmp(r1, HEAP32[r10]);
  _gcry_mpi_release(r11);
  _gcry_mpi_release(r12);
  _gcry_mpi_release(r13);
  _gcry_mpi_release(HEAP32[r10]);
  STACKTOP = r8;
  return r7;
}
function _otrl_sm_proof_equal_logs(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = _randomExponent();
  r6 = _gcry_mpi_new(1536);
  r7 = _gcry_mpi_new(1536);
  _gcry_mpi_powm(r6, HEAP32[r3 + 12 >> 2], r5, HEAP32[128113]);
  _gcry_mpi_powm(r7, HEAP32[r3 + 40 >> 2], r5, HEAP32[128113]);
  _otrl_sm_hash(r1, r4, r6, r7);
  _gcry_mpi_mulm(r6, HEAP32[r3 + 8 >> 2], HEAP32[r1 >> 2], HEAP32[128111]);
  _gcry_mpi_subm(HEAP32[r2 >> 2], r5, r6, HEAP32[128111]);
  _gcry_mpi_release(r5);
  _gcry_mpi_release(r6);
  _gcry_mpi_release(r7);
  return;
}
function _gpg_err_make183(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function _gpg_err_make203(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function _otrl_sm_step4(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  r11 = _unserialize_mpi_array(r7, 8, r2, r3);
  HEAP32[r4 >> 2] = 0;
  HEAP32[r5 >> 2] = 0;
  r3 = r1 + 52 | 0;
  HEAP32[r3 >> 2] = -2;
  r2 = _gcry_error171(0);
  if ((r11 | 0) != (r2 | 0)) {
    r12 = r11;
    STACKTOP = r6;
    return r12;
  }
  _otrl_sm_msg4_init(r9);
  do {
    if ((_check_group_elem(HEAP32[HEAP32[r8] >> 2]) | 0) == 0) {
      if ((_check_group_elem(HEAP32[HEAP32[r8] + 4 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[r8] + 20 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r8] + 12 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r8] + 16 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[r8] + 28 >> 2]) | 0) != 0) {
        break;
      }
      r11 = HEAP32[r8] >> 2;
      if ((_otrl_sm_check_equal_coords(HEAP32[r11 + 2], HEAP32[r11 + 3], HEAP32[r11 + 4], HEAP32[r11], HEAP32[r11 + 1], r1, 6) | 0) != 0) {
        _otrl_sm_msg_free(r7, 8);
        _otrl_sm_msg_free(r9, 3);
        r12 = _gcry_error171(55);
        STACKTOP = r6;
        return r12;
      }
      r11 = _gcry_mpi_new(1536);
      _gcry_mpi_invm(r11, HEAP32[r1 + 28 >> 2], HEAP32[128113]);
      r13 = r1 + 36 | 0;
      _gcry_mpi_mulm(HEAP32[r13 >> 2], HEAP32[HEAP32[r8] >> 2], r11, HEAP32[128113]);
      _gcry_mpi_invm(r11, HEAP32[r1 + 32 >> 2], HEAP32[128113]);
      r14 = r1 + 40 | 0;
      _gcry_mpi_mulm(HEAP32[r14 >> 2], HEAP32[HEAP32[r8] + 4 >> 2], r11, HEAP32[128113]);
      r15 = HEAP32[r8] >> 2;
      if ((_otrl_sm_check_equal_logs(HEAP32[r15 + 6], HEAP32[r15 + 7], HEAP32[r15 + 5], r1, 7) | 0) != 0) {
        _otrl_sm_msg_free(r7, 8);
        _otrl_sm_msg_free(r9, 3);
        _gcry_mpi_release(r11);
        r12 = _gcry_error171(55);
        STACKTOP = r6;
        return r12;
      }
      r15 = r1 + 8 | 0;
      _gcry_mpi_powm(HEAP32[HEAP32[r10] >> 2], HEAP32[r14 >> 2], HEAP32[r15 >> 2], HEAP32[128113]);
      r14 = HEAP32[r10];
      _otrl_sm_proof_equal_logs(r14 + 4 | 0, r14 + 8 | 0, r1, 8);
      _serialize_mpi_array(r4, r5, 3, HEAP32[r10]);
      r14 = _gcry_mpi_new(1536);
      _gcry_mpi_powm(r14, HEAP32[HEAP32[r8] + 20 >> 2], HEAP32[r15 >> 2], HEAP32[128113]);
      r15 = _gcry_mpi_cmp(r14, HEAP32[r13 >> 2]);
      _otrl_sm_msg_free(r7, 8);
      _otrl_sm_msg_free(r9, 3);
      _gcry_mpi_release(r14);
      _gcry_mpi_release(r11);
      r11 = (r15 | 0) != 0;
      HEAP32[r3 >> 2] = r11 ? -1 : 1;
      if (!r11) {
        r12 = r2;
        STACKTOP = r6;
        return r12;
      }
      r12 = _gcry_error171(55);
      STACKTOP = r6;
      return r12;
    }
  } while (0);
  _otrl_sm_msg_free(r7, 8);
  _otrl_sm_msg_free(r9, 3);
  r12 = _gcry_error171(55);
  STACKTOP = r6;
  return r12;
}
function _otrl_sm_check_equal_logs(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = _gcry_mpi_new(1536);
  r10 = _gcry_mpi_new(1536);
  r11 = _gcry_mpi_new(1536);
  HEAP32[r8] = 0;
  _gcry_mpi_powm(r10, HEAP32[r4 + 12 >> 2], r2, HEAP32[128113]);
  _gcry_mpi_powm(r11, HEAP32[r4 + 24 >> 2], r1, HEAP32[128113]);
  _gcry_mpi_mulm(r9, r10, r11, HEAP32[128113]);
  _gcry_mpi_powm(r11, HEAP32[r4 + 40 >> 2], r2, HEAP32[128113]);
  _gcry_mpi_powm(r10, r3, r1, HEAP32[128113]);
  _gcry_mpi_mulm(r10, r11, r10, HEAP32[128113]);
  _otrl_sm_hash(r7, r5, r9, r10);
  r5 = _gcry_mpi_cmp(r1, HEAP32[r8]);
  _gcry_mpi_release(r9);
  _gcry_mpi_release(r10);
  _gcry_mpi_release(r11);
  _gcry_mpi_release(HEAP32[r8]);
  STACKTOP = r6;
  return r5;
}
function _otrl_sm_step5(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = _unserialize_mpi_array(r5, 3, r2, r3);
  r3 = r1 + 52 | 0;
  HEAP32[r3 >> 2] = -2;
  r2 = _gcry_error171(0);
  if ((r7 | 0) != (r2 | 0)) {
    r8 = r7;
    STACKTOP = r4;
    return r8;
  }
  do {
    if ((_check_group_elem(HEAP32[HEAP32[r6] >> 2]) | 0) == 0) {
      if ((_check_expon(HEAP32[HEAP32[r6] + 8 >> 2]) | 0) != 0) {
        break;
      }
      r7 = HEAP32[r6] >> 2;
      if ((_otrl_sm_check_equal_logs(HEAP32[r7 + 1], HEAP32[r7 + 2], HEAP32[r7], r1, 8) | 0) != 0) {
        _otrl_sm_msg_free(r5, 3);
        r8 = _gcry_error171(55);
        STACKTOP = r4;
        return r8;
      }
      r7 = _gcry_mpi_new(1536);
      _gcry_mpi_powm(r7, HEAP32[HEAP32[r6] >> 2], HEAP32[r1 + 8 >> 2], HEAP32[128113]);
      r9 = _gcry_mpi_cmp(r7, HEAP32[r1 + 36 >> 2]);
      _gcry_mpi_release(r7);
      _otrl_sm_msg_free(r5, 3);
      r7 = (r9 | 0) != 0;
      HEAP32[r3 >> 2] = r7 ? -1 : 1;
      if (!r7) {
        r8 = r2;
        STACKTOP = r4;
        return r8;
      }
      r8 = _gcry_error171(55);
      STACKTOP = r4;
      return r8;
    }
  } while (0);
  _otrl_sm_msg_free(r5, 3);
  r8 = _gcry_error171(55);
  STACKTOP = r4;
  return r8;
}
function _otrl_sm_hash(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r6 = r5;
  r7 = r5 + 32, r8 = r7 >> 2;
  r9 = r5 + 36, r10 = r9 >> 2;
  r11 = r5 + 40, r12 = r11 >> 2;
  r13 = r5 + 44;
  _gcry_mpi_aprint(5, r11, r7, r3);
  r3 = HEAP32[r8];
  r7 = (r4 | 0) != 0;
  if (r7) {
    _gcry_mpi_aprint(5, r13, r9, r4);
    r14 = r3 + HEAP32[r10] + 9 | 0;
  } else {
    HEAP32[r10] = 0;
    r14 = r3 + 5 | 0;
  }
  r3 = _malloc(r14);
  HEAP8[r3] = r2 & 255;
  HEAP8[r3 + 1 | 0] = HEAP32[r8] >>> 24 & 255;
  HEAP8[r3 + 2 | 0] = HEAP32[r8] >>> 16 & 255;
  HEAP8[r3 + 3 | 0] = HEAP32[r8] >>> 8 & 255;
  HEAP8[r3 + 4 | 0] = HEAP32[r8] & 255;
  _memmove(r3 + 5 | 0, HEAP32[r12], HEAP32[r8], 1, 0);
  if (r7) {
    HEAP8[r3 + HEAP32[r8] + 5 | 0] = HEAP32[r10] >>> 24 & 255;
    HEAP8[r3 + HEAP32[r8] + 6 | 0] = HEAP32[r10] >>> 16 & 255;
    HEAP8[r3 + HEAP32[r8] + 7 | 0] = HEAP32[r10] >>> 8 & 255;
    HEAP8[r3 + HEAP32[r8] + 8 | 0] = HEAP32[r10] & 255;
    _memmove(r3 + HEAP32[r8] + 9 | 0, HEAP32[r13 >> 2], HEAP32[r10], 1, 0);
    r10 = r6 | 0;
    _gcry_md_hash_buffer(8, r10, r3, r14);
    _gcry_mpi_scan(r1, 5, r10, 32, 0);
    _free(r3);
    _gcry_free(HEAP32[r12]);
    _gcry_free(HEAP32[r13 >> 2]);
    STACKTOP = r5;
    return;
  } else {
    r13 = r6 | 0;
    _gcry_md_hash_buffer(8, r13, r3, r14);
    _gcry_mpi_scan(r1, 5, r13, 32, 0);
    _free(r3);
    _gcry_free(HEAP32[r12]);
    STACKTOP = r5;
    return;
  }
}
function _gcry_err_make182(r1) {
  return _gpg_err_make183(r1);
}
function _otrl_context_priv_new() {
  var r1, r2;
  r1 = _malloc(592);
  if ((r1 | 0) == 0) {
    ___assert_func(483060, 36, 493996, 488736);
  }
  r2 = (r1 + 564 | 0) >> 2;
  _memset(r1, 0, 52);
  HEAP32[r2] = 0;
  HEAP32[r2 + 1] = 0;
  HEAP32[r2 + 2] = 0;
  HEAP32[r2 + 3] = 0;
  HEAP32[r2 + 4] = 0;
  HEAP32[r2 + 5] = 0;
  HEAP32[r2 + 6] = 0;
  _otrl_dh_session_blank(r1 + 52 | 0);
  _otrl_dh_session_blank(r1 + 180 | 0);
  _otrl_dh_session_blank(r1 + 308 | 0);
  _otrl_dh_session_blank(r1 + 436 | 0);
  return r1;
}
function _otrl_context_priv_force_finished(r1) {
  var r2, r3, r4;
  r2 = r1 >> 2;
  _free(HEAP32[r2]);
  HEAP32[r2 + 141] = 0;
  r3 = r1 + 568 | 0;
  r4 = r1 >> 2;
  HEAP32[r4] = 0;
  HEAP32[r4 + 1] = 0;
  HEAP32[r4 + 2] = 0;
  _free(HEAP32[r3 >> 2]);
  HEAP32[r3 >> 2] = 0;
  r3 = r1 + 584 | 0;
  _gcry_free(HEAP32[r3 >> 2]);
  HEAP32[r3 >> 2] = 0;
  HEAP32[r2 + 147] = 0;
  HEAP32[r2 + 3] = 0;
  r3 = r1 + 16 | 0;
  _gcry_mpi_release(HEAP32[r3 >> 2]);
  HEAP32[r3 >> 2] = 0;
  r3 = r1 + 20 | 0;
  _gcry_mpi_release(HEAP32[r3 >> 2]);
  HEAP32[r3 >> 2] = 0;
  HEAP32[r2 + 6] = 0;
  _otrl_dh_keypair_free(r1 + 28 | 0);
  _otrl_dh_keypair_free(r1 + 40 | 0);
  _otrl_dh_session_free(r1 + 52 | 0);
  _otrl_dh_session_free(r1 + 180 | 0);
  _otrl_dh_session_free(r1 + 308 | 0);
  _otrl_dh_session_free(r1 + 436 | 0);
  return;
}
function _otrl_instag_forget(r1) {
  var r2, r3, r4;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = HEAP32[r1 + 8 >> 2];
  if ((r2 | 0) != 0) {
    _free(r2);
  }
  r2 = HEAP32[r1 + 12 >> 2];
  if ((r2 | 0) != 0) {
    _free(r2);
  }
  r2 = r1 | 0;
  r3 = r1 + 4 | 0;
  HEAP32[HEAP32[r3 >> 2] >> 2] = HEAP32[r2 >> 2];
  r4 = HEAP32[r2 >> 2];
  if ((r4 | 0) != 0) {
    HEAP32[r4 + 4 >> 2] = HEAP32[r3 >> 2];
  }
  _free(r1);
  return;
}
function _otrl_instag_forget_all(r1) {
  var r2, r3;
  r2 = r1 + 8 | 0;
  r1 = HEAP32[r2 >> 2];
  if ((r1 | 0) == 0) {
    return;
  } else {
    r3 = r1;
  }
  while (1) {
    _otrl_instag_forget(r3);
    r1 = HEAP32[r2 >> 2];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r3 = r1;
    }
  }
  return;
}
function _otrl_instag_find(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  r5 = HEAP32[r1 + 8 >> 2];
  if ((r5 | 0) == 0) {
    r6 = 0;
    return r6;
  } else {
    r7 = r5, r8 = r7 >> 2;
  }
  while (1) {
    if ((_strcmp(HEAP32[r8 + 2], r2) | 0) == 0) {
      if ((_strcmp(HEAP32[r8 + 3], r3) | 0) == 0) {
        r6 = r7;
        r4 = 2268;
        break;
      }
    }
    r5 = HEAP32[r8];
    if ((r5 | 0) == 0) {
      r6 = 0;
      r4 = 2267;
      break;
    } else {
      r7 = r5, r8 = r7 >> 2;
    }
  }
  if (r4 == 2267) {
    return r6;
  } else if (r4 == 2268) {
    return r6;
  }
}
function _otrl_instag_read(r1, r2) {
  var r3, r4;
  r3 = _fopen(r2, 482892);
  if ((r3 | 0) == 0) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    r4 = _otrl_instag_read_FILEp(r1, r3);
    _fclose(r3);
    r2 = r4;
    return r2;
  }
}
function _otrl_instag_read_FILEp(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 1004 | 0;
  r4 = r3;
  r5 = r3 + 1e3;
  if ((r2 | 0) == 0) {
    r6 = _gcry_error199(0);
    STACKTOP = r3;
    return r6;
  }
  r7 = r4 | 0;
  L2813 : do {
    if ((_fgets(r7, 1e3, r2) | 0) != 0) {
      r8 = r4;
      r9 = r1 + 8 | 0;
      while (1) {
        HEAP32[r5 >> 2] = 0;
        r10 = _malloc(20), r11 = r10 >> 2;
        r12 = r10;
        if ((r10 | 0) == 0) {
          break;
        }
        r13 = _strchr(r7, 9);
        L2818 : do {
          if ((r13 | 0) == 0) {
            _free(r10);
          } else {
            HEAP8[r13] = 0;
            r14 = r13 + 1 | 0;
            r15 = r14;
            r16 = r15 - r8 | 0;
            r17 = _malloc(r16);
            HEAP32[r11 + 2] = r17;
            _memmove(r17, r7, r16, 1, 0);
            r16 = _strchr(r14, 9);
            if ((r16 | 0) == 0) {
              _free(r10);
              break;
            }
            HEAP8[r16] = 0;
            r17 = r16 + 1 | 0;
            r16 = r17 - r15 | 0;
            r15 = _malloc(r16);
            HEAP32[r11 + 3] = r15;
            _memmove(r15, r14, r16, 1, 0);
            r16 = _strchr(r17, 13);
            do {
              if ((r16 | 0) == 0) {
                r14 = _strchr(r17, 10);
                if ((r14 | 0) != 0) {
                  r18 = r14;
                  break;
                }
                _free(r10);
                break L2818;
              } else {
                r18 = r16;
              }
            } while (0);
            HEAP8[r18] = 0;
            if ((_strlen(r17) | 0) != 8) {
              _free(r10);
              break;
            }
            _sscanf(r17, 488668, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
            r16 = HEAP32[r5 >> 2];
            if (r16 >>> 0 < 256) {
              _free(r10);
              break;
            }
            HEAP32[r11 + 4] = r16;
            r16 = HEAP32[r9 >> 2];
            r14 = r10;
            HEAP32[r14 >> 2] = r16;
            if ((r16 | 0) != 0) {
              HEAP32[r16 + 4 >> 2] = r14;
            }
            HEAP32[r11 + 1] = r9;
            HEAP32[r9 >> 2] = r12;
          }
        } while (0);
        if ((_fgets(r7, 1e3, r2) | 0) == 0) {
          break L2813;
        }
      }
      r6 = _gcry_error199(32854);
      STACKTOP = r3;
      return r6;
    }
  } while (0);
  r6 = _gcry_error199(0);
  STACKTOP = r3;
  return r6;
}
function _gcry_error199(r1) {
  return _gcry_err_make202(r1);
}
function _otrl_instag_generate(r1, r2, r3, r4) {
  var r5, r6;
  r5 = _fopen(r2, 480524);
  if ((r5 | 0) == 0) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    r6 = _otrl_instag_generate_FILEp(r1, r5, r3, r4);
    _fclose(r5);
    r2 = r6;
    return r2;
  }
}
function _otrl_instag_generate_FILEp(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  if ((r3 | 0) == 0 | (r4 | 0) == 0) {
    r5 = _gcry_error199(0);
    return r5;
  }
  r6 = _malloc(20), r7 = r6 >> 2;
  HEAP32[r7 + 2] = _strdup(r3);
  HEAP32[r7 + 3] = _strdup(r4);
  HEAP32[r7 + 4] = _otrl_instag_get_new();
  r4 = r1 + 8 | 0;
  r3 = HEAP32[r4 >> 2];
  r8 = r6;
  HEAP32[r8 >> 2] = r3;
  if ((r3 | 0) != 0) {
    HEAP32[r3 + 4 >> 2] = r8;
  }
  HEAP32[r7 + 1] = r4;
  HEAP32[r4 >> 2] = r6;
  _otrl_instag_write_FILEp(r1, r2);
  r5 = _gcry_error199(0);
  return r5;
}
function _otrl_instag_get_new() {
  var r1, r2;
  while (1) {
    r1 = _gcry_random_bytes(4, 1);
    r2 = HEAP32[r1 >> 2];
    _gcry_free(r1);
    if (r2 >>> 0 >= 256) {
      break;
    }
  }
  return r2;
}
function _otrl_instag_write_FILEp(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = STACKTOP;
  _fwrite(476772, 103, 1, r2);
  r4 = HEAP32[r1 + 8 >> 2];
  if ((r4 | 0) == 0) {
    r5 = _gcry_error199(0);
    STACKTOP = r3;
    return r5;
  } else {
    r6 = r4, r7 = r6 >> 2;
  }
  while (1) {
    r4 = HEAP32[r7 + 3];
    r1 = HEAP32[r7 + 4];
    _fprintf(r2, 474084, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[r7 + 2], HEAP32[tempInt + 4 >> 2] = r4, HEAP32[tempInt + 8 >> 2] = r1, tempInt));
    r1 = HEAP32[r7];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r6 = r1, r7 = r6 >> 2;
    }
  }
  r5 = _gcry_error199(0);
  STACKTOP = r3;
  return r5;
}
function _otrl_instag_write(r1, r2) {
  var r3, r4;
  r3 = _fopen(r2, 480524);
  if ((r3 | 0) == 0) {
    r2 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    r4 = _otrl_instag_write_FILEp(r1, r3);
    _fclose(r3);
    r2 = r4;
    return r2;
  }
}
function _gcry_err_make202(r1) {
  return _gpg_err_make203(r1);
}
function _gcry_strerror(r1) {
  return __gcry_strerror(r1);
}
function _gcry_strsource(r1) {
  return __gcry_strsource(r1);
}
function _gcry_err_code_from_errno(r1) {
  return __gcry_err_code_from_errno(r1);
}
function _gcry_err_code_to_errno(r1) {
  return __gcry_err_code_to_errno(r1);
}
function _gcry_err_make_from_errno(r1, r2) {
  return __gcry_err_make_from_errno(r1, r2);
}
function _gcry_error_from_errno(r1) {
  return __gcry_error_from_errno(r1);
}
function _gcry_check_version(r1) {
  return __gcry_check_version(r1);
}
function _gcry_control(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  r2 = __gcry_vcontrol(r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return r2;
}
function _gcry_sexp_new(r1, r2, r3, r4) {
  return __gcry_sexp_new(r1, r2, r3, r4);
}
function _gcry_sexp_create(r1, r2, r3, r4, r5) {
  return __gcry_sexp_create(r1, r2, r3, r4, r5);
}
function _gcry_sexp_sscan(r1, r2, r3, r4) {
  return __gcry_sexp_sscan(r1, r2, r3, r4);
}
function _gcry_sexp_build(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  HEAP32[r6 >> 2] = r4;
  r4 = __gcry_sexp_vbuild(r1, r2, r3, HEAP32[r6 >> 2]);
  STACKTOP = r5;
  return r4;
}
function _gcry_sexp_build_array(r1, r2, r3, r4) {
  return __gcry_sexp_build_array(r1, r2, r3, r4);
}
function _gcry_sexp_release(r1) {
  __gcry_sexp_release(r1);
  return;
}
function _gcry_sexp_canon_len(r1, r2, r3, r4) {
  return __gcry_sexp_canon_len(r1, r2, r3, r4);
}
function _gcry_sexp_sprint(r1, r2, r3, r4) {
  return __gcry_sexp_sprint(r1, r2, r3, r4);
}
function _gcry_sexp_dump(r1) {
  __gcry_sexp_dump(r1);
  return;
}
function _gcry_sexp_find_token(r1, r2, r3) {
  return __gcry_sexp_find_token(r1, r2, r3);
}
function _gcry_sexp_length(r1) {
  return __gcry_sexp_length(r1);
}
function _gcry_sexp_nth(r1, r2) {
  return __gcry_sexp_nth(r1, r2);
}
function _gcry_sexp_car(r1) {
  return __gcry_sexp_car(r1);
}
function _gcry_sexp_cdr(r1) {
  return __gcry_sexp_cdr(r1);
}
function _gcry_sexp_cadr(r1) {
  return __gcry_sexp_cadr(r1);
}
function _gcry_sexp_nth_data(r1, r2, r3) {
  return __gcry_sexp_nth_data(r1, r2, r3);
}
function _gcry_sexp_nth_string(r1, r2) {
  return __gcry_sexp_nth_string(r1, r2);
}
function _gcry_sexp_cons(r1, r2) {
  __gcry_sexp_cons(0, 0);
  return 0;
}
function _gcry_sexp_alist(r1) {
  __gcry_sexp_alist(0);
  return 0;
}
function _gcry_sexp_vlist(r1, r2) {
  __gcry_bug(481832, 169, 494892);
  return 0;
}
function _gcry_sexp_append(r1, r2) {
  __gcry_sexp_append(0, 0);
  return 0;
}
function _gcry_sexp_prepend(r1, r2) {
  __gcry_sexp_prepend(0, 0);
  return 0;
}
function _gcry_sexp_nth_mpi(r1, r2, r3) {
  return __gcry_sexp_nth_mpi(r1, r2, r3);
}
function _gcry_mpi_new(r1) {
  return __gcry_mpi_new(r1);
}
function _gcry_mpi_snew(r1) {
  return __gcry_mpi_snew(r1);
}
function _gcry_mpi_release(r1) {
  __gcry_mpi_release(r1);
  return;
}
function _gcry_mpi_copy(r1) {
  return __gcry_mpi_copy(r1);
}
function _gcry_mpi_set(r1, r2) {
  return __gcry_mpi_set(r1, r2);
}
function _gcry_mpi_set_ui(r1, r2) {
  return __gcry_mpi_set_ui(r1, r2);
}
function _gcry_mpi_swap(r1, r2) {
  __gcry_mpi_swap(r1, r2);
  return;
}
function _gcry_mpi_cmp(r1, r2) {
  return __gcry_mpi_cmp(r1, r2);
}
function _gcry_mpi_cmp_ui(r1, r2) {
  return __gcry_mpi_cmp_ui(r1, r2);
}
function _gcry_mpi_scan(r1, r2, r3, r4, r5) {
  return __gcry_mpi_scan(r1, r2, r3, r4, r5);
}
function _gcry_mpi_print(r1, r2, r3, r4, r5) {
  return __gcry_mpi_print(r1, r2, r3, r4, r5);
}
function _gcry_mpi_aprint(r1, r2, r3, r4) {
  return __gcry_mpi_aprint(r1, r2, r3, r4);
}
function _gcry_mpi_dump(r1) {
  __gcry_mpi_dump(r1);
  return;
}
function _gcry_mpi_add(r1, r2, r3) {
  __gcry_mpi_add(r1, r2, r3);
  return;
}
function _gcry_mpi_add_ui(r1, r2, r3) {
  __gcry_mpi_add_ui(r1, r2, r3);
  return;
}
function _gcry_mpi_addm(r1, r2, r3, r4) {
  __gcry_mpi_addm(r1, r2, r3, r4);
  return;
}
function _gcry_mpi_sub(r1, r2, r3) {
  __gcry_mpi_sub(r1, r2, r3);
  return;
}
function _gcry_mpi_sub_ui(r1, r2, r3) {
  __gcry_mpi_sub_ui(r1, r2, r3);
  return;
}
function _gcry_mpi_subm(r1, r2, r3, r4) {
  __gcry_mpi_subm(r1, r2, r3, r4);
  return;
}
function _gcry_mpi_mul(r1, r2, r3) {
  __gcry_mpi_mul(r1, r2, r3);
  return;
}
function _gcry_mpi_mul_ui(r1, r2, r3) {
  __gcry_mpi_mul_ui(r1, r2, r3);
  return;
}
function _gcry_mpi_mulm(r1, r2, r3, r4) {
  __gcry_mpi_mulm(r1, r2, r3, r4);
  return;
}
function _gcry_mpi_mul_2exp(r1, r2, r3) {
  __gcry_mpi_mul_2exp(r1, r2, r3);
  return;
}
function _gcry_mpi_div(r1, r2, r3, r4, r5) {
  __gcry_mpi_div(r1, r2, r3, r4, r5);
  return;
}
function _gcry_mpi_mod(r1, r2, r3) {
  __gcry_mpi_mod(r1, r2, r3);
  return;
}
function _gcry_mpi_powm(r1, r2, r3, r4) {
  __gcry_mpi_powm(r1, r2, r3, r4);
  return;
}
function _gcry_mpi_gcd(r1, r2, r3) {
  return __gcry_mpi_gcd(r1, r2, r3);
}
function _gcry_mpi_invm(r1, r2, r3) {
  __gcry_mpi_invm(r1, r2, r3);
  return 1;
}
function _gcry_mpi_get_nbits(r1) {
  return __gcry_mpi_get_nbits(r1);
}
function _gcry_mpi_test_bit(r1, r2) {
  return __gcry_mpi_test_bit(r1, r2);
}
function _gcry_mpi_set_bit(r1, r2) {
  __gcry_mpi_set_bit(r1, r2);
  return;
}
function _gcry_mpi_clear_bit(r1, r2) {
  __gcry_mpi_clear_bit(r1, r2);
  return;
}
function _gcry_mpi_set_highbit(r1, r2) {
  __gcry_mpi_set_highbit(r1, r2);
  return;
}
function _gcry_mpi_clear_highbit(r1, r2) {
  __gcry_mpi_clear_highbit(r1, r2);
  return;
}
function _gcry_mpi_rshift(r1, r2, r3) {
  __gcry_mpi_rshift(r1, r2, r3);
  return;
}
function _gcry_mpi_lshift(r1, r2, r3) {
  __gcry_mpi_lshift(r1, r2, r3);
  return;
}
function _gcry_mpi_set_opaque(r1, r2, r3) {
  return __gcry_mpi_set_opaque(r1, r2, r3);
}
function _gcry_mpi_get_opaque(r1, r2) {
  return __gcry_mpi_get_opaque(r1, r2);
}
function _gcry_mpi_set_flag(r1, r2) {
  __gcry_mpi_set_flag(r1, r2);
  return;
}
function _gcry_mpi_get_flag(r1, r2) {
  return __gcry_mpi_get_flag(r1, r2);
}
function _gcry_cipher_open(r1, r2, r3, r4) {
  var r5;
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[r1 >> 2] = 0;
    r5 = _gpg_error261();
    return r5;
  } else {
    r5 = __gcry_cipher_open(r1, r2, r3, r4);
    return r5;
  }
}
function _gpg_error261() {
  return _gpg_err_make308(1, 176);
}
function _gcry_cipher_close(r1) {
  __gcry_cipher_close(r1);
  return;
}
function _gcry_cipher_setkey(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_cipher_setkey(r1, r2, r3);
    return r4;
  }
}
function _gcry_cipher_setiv(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r4 = _gpg_error261();
    return r4;
  } else {
    __gcry_cipher_setiv(r1, r2, r3);
    r4 = 0;
    return r4;
  }
}
function _gcry_cipher_setctr(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_cipher_setctr(r1, r2, r3);
    return r4;
  }
}
function _gcry_cipher_ctl(r1, r2, r3, r4) {
  var r5;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r5 = _gpg_error261();
    return r5;
  } else {
    r5 = __gcry_cipher_ctl(r1, r2, r3, r4);
    return r5;
  }
}
function _gcry_cipher_info(r1, r2, r3, r4) {
  return __gcry_cipher_info(0, 0, 0, 0);
}
function _gcry_cipher_algo_info(r1, r2, r3, r4) {
  var r5;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r5 = _gpg_error261();
    return r5;
  } else {
    r5 = __gcry_cipher_algo_info(r1, r2, r3, r4);
    return r5;
  }
}
function _gcry_cipher_algo_name(r1) {
  return __gcry_cipher_algo_name(r1);
}
function _gcry_cipher_map_name(r1) {
  return __gcry_cipher_map_name(r1);
}
function _gcry_cipher_mode_from_oid(r1) {
  return __gcry_cipher_mode_from_oid(r1);
}
function _gcry_cipher_encrypt(r1, r2, r3, r4, r5) {
  var r6;
  if ((__gcry_global_is_operational() | 0) != 0) {
    r6 = __gcry_cipher_encrypt(r1, r2, r3, r4, r5);
    return r6;
  }
  if ((r2 | 0) != 0) {
    _memset(r2, 66, r3);
  }
  r6 = _gpg_error261();
  return r6;
}
function _gcry_cipher_decrypt(r1, r2, r3, r4, r5) {
  var r6;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r6 = _gpg_error261();
    return r6;
  } else {
    r6 = __gcry_cipher_decrypt(r1, r2, r3, r4, r5);
    return r6;
  }
}
function _gcry_cipher_get_algo_keylen(r1) {
  return __gcry_cipher_get_algo_keylen(r1);
}
function _gcry_cipher_get_algo_blklen(r1) {
  return __gcry_cipher_get_algo_blklen(r1);
}
function _gcry_cipher_list(r1, r2) {
  __gcry_cipher_list(r1, r2);
  return 0;
}
function _gcry_pk_encrypt(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[r1 >> 2] = 0;
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_pk_encrypt(r1, r2, r3);
    return r4;
  }
}
function _gcry_pk_decrypt(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[r1 >> 2] = 0;
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_pk_decrypt(r1, r2, r3);
    return r4;
  }
}
function _gcry_pk_sign(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[r1 >> 2] = 0;
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_pk_sign(r1, r2, r3);
    return r4;
  }
}
function _gcry_pk_verify(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_pk_verify(r1, r2, r3);
    return r4;
  }
}
function _gcry_pk_testkey(r1) {
  var r2;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r2 = _gpg_error261();
    return r2;
  } else {
    r2 = __gcry_pk_testkey(r1);
    return r2;
  }
}
function _gcry_pk_genkey(r1, r2) {
  var r3;
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[r1 >> 2] = 0;
    r3 = _gpg_error261();
    return r3;
  } else {
    r3 = __gcry_pk_genkey(r1, r2);
    return r3;
  }
}
function _gcry_pk_ctl(r1, r2, r3) {
  return __gcry_pk_ctl(r1, r2, r3);
}
function _gcry_pk_algo_info(r1, r2, r3, r4) {
  var r5;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r5 = _gpg_error261();
    return r5;
  } else {
    r5 = __gcry_pk_algo_info(r1, r2, r3, r4);
    return r5;
  }
}
function _gcry_pk_algo_name(r1) {
  return __gcry_pk_algo_name(r1);
}
function _gcry_pk_map_name(r1) {
  return __gcry_pk_map_name(r1);
}
function _gcry_pk_get_nbits(r1) {
  var r2;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r2 = 0;
    return r2;
  }
  r2 = __gcry_pk_get_nbits(r1);
  return r2;
}
function _gcry_pk_get_keygrip(r1, r2) {
  var r3;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = __gcry_pk_get_keygrip(r1, r2);
  return r3;
}
function _gcry_pk_get_curve(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r4 = __gcry_pk_get_curve(r1, r2, r3);
  return r4;
}
function _gcry_pk_get_param(r1, r2) {
  var r3;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = __gcry_pk_get_param(r1, r2);
  return r3;
}
function _gcry_pk_list(r1, r2) {
  __gcry_pk_list(r1, r2);
  return 0;
}
function _gcry_md_open(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[r1 >> 2] = 0;
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_md_open(r1, r2, r3);
    return r4;
  }
}
function _gcry_md_close(r1) {
  __gcry_md_close(r1);
  return;
}
function _gcry_md_enable(r1, r2) {
  var r3;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r3 = _gpg_error261();
    return r3;
  } else {
    r3 = __gcry_md_enable(r1, r2);
    return r3;
  }
}
function _gcry_md_copy(r1, r2) {
  var r3;
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[r1 >> 2] = 0;
    r3 = _gpg_error261();
    return r3;
  } else {
    r3 = __gcry_md_copy(r1, r2);
    return r3;
  }
}
function _gcry_md_reset(r1) {
  __gcry_md_reset(r1);
  return;
}
function _gcry_md_ctl(r1, r2, r3, r4) {
  var r5;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r5 = _gpg_error261();
    return r5;
  } else {
    r5 = __gcry_md_ctl(r1, r2, r3, r4);
    return r5;
  }
}
function _gcry_md_write(r1, r2, r3) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    return;
  }
  __gcry_md_write(r1, r2, r3);
  return;
}
function _gcry_md_read(r1, r2) {
  return __gcry_md_read(r1, r2);
}
function _gcry_md_hash_buffer(r1, r2, r3, r4) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481832, 843, 494972, 0, 488468);
  }
  __gcry_md_hash_buffer(r1, r2, r3, r4);
  return;
}
function _gcry_md_get_algo(r1) {
  var r2;
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481832, 854, 494992, 0, 480436);
    r2 = 0;
    return r2;
  } else {
    r2 = __gcry_md_get_algo(r1);
    return r2;
  }
}
function _gcry_md_get_algo_dlen(r1) {
  return __gcry_md_get_algo_dlen(r1);
}
function _gcry_md_is_enabled(r1, r2) {
  var r3;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = __gcry_md_is_enabled(r1, r2);
  return r3;
}
function _gcry_md_is_secure(r1) {
  return __gcry_md_is_secure(r1);
}
function _gcry_md_info(r1, r2, r3, r4) {
  var r5;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r5 = _gpg_error261();
    return r5;
  } else {
    r5 = __gcry_md_info(r1, r2, r3, r4);
    return r5;
  }
}
function _gcry_md_algo_info(r1, r2, r3, r4) {
  return __gcry_md_algo_info(r1, r2, r3, r4);
}
function _gcry_md_algo_name(r1) {
  return __gcry_md_algo_name(r1);
}
function _gcry_md_map_name(r1) {
  return __gcry_md_map_name(r1);
}
function _gcry_md_setkey(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_md_setkey(r1, r2, r3);
    return r4;
  }
}
function _gcry_md_debug(r1, r2) {
  __gcry_md_debug(r1, r2);
  return;
}
function _gcry_md_list(r1, r2) {
  __gcry_md_list(r1, r2);
  return 0;
}
function _gcry_ac_data_new(r1) {
  return __gcry_ac_data_new(r1);
}
function _gcry_ac_data_destroy(r1) {
  __gcry_ac_data_destroy(r1);
  return;
}
function _gcry_ac_data_copy(r1, r2) {
  return __gcry_ac_data_copy(r1, r2);
}
function _gcry_ac_data_length(r1) {
  return __gcry_ac_data_length(r1);
}
function _gcry_ac_data_clear(r1) {
  __gcry_ac_data_clear(r1);
  return;
}
function _gcry_ac_data_set(r1, r2, r3, r4) {
  return __gcry_ac_data_set(r1, r2, r3, r4);
}
function _gcry_ac_data_get_name(r1, r2, r3, r4) {
  return __gcry_ac_data_get_name(r1, r2, r3, r4);
}
function _gcry_ac_data_get_index(r1, r2, r3, r4, r5) {
  return __gcry_ac_data_get_index(r1, r2, r3, r4, r5);
}
function _gcry_ac_data_to_sexp(r1, r2, r3) {
  return __gcry_ac_data_to_sexp(r1, r2, r3);
}
function _gcry_ac_data_from_sexp(r1, r2, r3) {
  return __gcry_ac_data_from_sexp(r1, r2, r3);
}
function _gcry_ac_io_init(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  HEAP32[r6 >> 2] = r4;
  __gcry_ac_io_init_va(r1, r2, r3, HEAP32[r6 >> 2]);
  STACKTOP = r5;
  return;
}
function _gcry_ac_io_init_va(r1, r2, r3, r4) {
  __gcry_ac_io_init_va(r1, r2, r3, r4);
  return;
}
function _gcry_ac_open(r1, r2, r3) {
  return __gcry_ac_open(r1, r2, r3);
}
function _gcry_ac_close(r1) {
  __gcry_ac_close(r1);
  return;
}
function _gcry_ac_key_init(r1, r2, r3, r4) {
  return __gcry_ac_key_init(r1, 0, r3, r4);
}
function _gcry_ac_key_pair_generate(r1, r2, r3, r4, r5) {
  return __gcry_ac_key_pair_generate(r1, r2, r3, r4, 0);
}
function _gcry_ac_key_pair_extract(r1, r2) {
  return __gcry_ac_key_pair_extract(r1, r2);
}
function _gcry_ac_key_data_get(r1) {
  return __gcry_ac_key_data_get(r1);
}
function _gcry_ac_key_test(r1, r2) {
  return __gcry_ac_key_test(r1, r2);
}
function _gcry_ac_key_get_nbits(r1, r2, r3) {
  return __gcry_ac_key_get_nbits(r1, r2, r3);
}
function _gcry_ac_key_get_grip(r1, r2, r3) {
  return __gcry_ac_key_get_grip(r1, r2, r3);
}
function _gcry_ac_key_destroy(r1) {
  __gcry_ac_key_destroy(r1);
  return;
}
function _gcry_ac_key_pair_destroy(r1) {
  __gcry_ac_key_pair_destroy(r1);
  return;
}
function _gcry_ac_data_encode(r1, r2, r3, r4, r5) {
  return __gcry_ac_data_encode(r1, r2, r3, r4, r5);
}
function _gcry_ac_data_decode(r1, r2, r3, r4, r5) {
  return __gcry_ac_data_decode(r1, r2, r3, r4, r5);
}
function _gcry_ac_data_encrypt(r1, r2, r3, r4, r5) {
  return __gcry_ac_data_encrypt(r1, r2, r3, r4, r5);
}
function _gcry_ac_data_decrypt(r1, r2, r3, r4, r5) {
  return __gcry_ac_data_decrypt(r1, r2, r3, r4, r5);
}
function _gcry_ac_data_sign(r1, r2, r3, r4) {
  return __gcry_ac_data_sign(r1, r2, r3, r4);
}
function _gcry_ac_data_verify(r1, r2, r3, r4) {
  return __gcry_ac_data_verify(r1, r2, r3, r4);
}
function _gcry_ac_data_encrypt_scheme(r1, r2, r3, r4, r5, r6, r7) {
  return __gcry_ac_data_encrypt_scheme(r1, r2, 0, r4, r5, r6, r7);
}
function _gcry_ac_data_decrypt_scheme(r1, r2, r3, r4, r5, r6, r7) {
  return __gcry_ac_data_decrypt_scheme(r1, r2, 0, r4, r5, r6, r7);
}
function _gcry_ac_data_sign_scheme(r1, r2, r3, r4, r5, r6, r7) {
  return __gcry_ac_data_sign_scheme(r1, r2, 0, r4, r5, r6, r7);
}
function _gcry_ac_data_verify_scheme(r1, r2, r3, r4, r5, r6, r7) {
  return __gcry_ac_data_verify_scheme(r1, r2, 0, r4, r5, r6, r7);
}
function _gcry_ac_id_to_name(r1, r2) {
  var r3;
  r3 = __gcry_pk_algo_name(r1);
  if (HEAP8[r3] << 24 >> 24 == 0) {
    r1 = _gcry_error294();
    return r1;
  } else {
    HEAP32[r2 >> 2] = r3;
    r1 = 0;
    return r1;
  }
}
function _gcry_error294() {
  return _gcry_err_make307();
}
function _gcry_ac_name_to_id(r1, r2) {
  var r3;
  r3 = __gcry_pk_map_name(r1);
  if ((r3 | 0) == 0) {
    r1 = _gcry_error294();
    return r1;
  } else {
    HEAP32[r2 >> 2] = r3;
    r1 = 0;
    return r1;
  }
}
function _gcry_kdf_derive(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  return __gcry_kdf_derive(r1, r2, r3, r4, r5, r6, r7, r8, r9);
}
function _gcry_random_add_bytes(r1, r2, r3) {
  var r4;
  if ((__gcry_global_is_operational() | 0) == 0) {
    r4 = _gpg_error261();
    return r4;
  } else {
    r4 = __gcry_random_add_bytes(r1, r2, r3);
    return r4;
  }
}
function _gcry_mpi_randomize(r1, r2, r3) {
  __gcry_mpi_randomize(r1, r2, r3);
  return;
}
function _gcry_prime_generate(r1, r2, r3, r4, r5, r6, r7, r8) {
  return __gcry_prime_generate(r1, r2, r3, r4, r5, r6, r7, r8);
}
function _gcry_mpi_clear_flag(r1, r2) {
  __gcry_mpi_clear_flag(0, r2);
}
function _gcry_randomize(r1, r2, r3) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481832, 1230, 494908, 1, 488468);
    __gcry_fips_noreturn();
  } else {
    __gcry_randomize(r1, r2, r3);
    return;
  }
}
function _gcry_random_bytes(r1, r2) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481832, 1250, 494952, 1, 488468);
    __gcry_fips_noreturn();
  } else {
    return __gcry_random_bytes(r1, r2);
  }
}
function _gcry_random_bytes_secure(r1, r2) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481832, 1263, 494924, 1, 488468);
    __gcry_fips_noreturn();
  } else {
    return __gcry_random_bytes_secure(r1, r2);
  }
}
function _gcry_create_nonce(r1, r2) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481832, 1283, 495012, 1, 488468);
    __gcry_fips_noreturn();
  } else {
    __gcry_create_nonce(r1, r2);
    return;
  }
}
function _gpg_err_make308(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function __gcry_ac_data_length(r1) {
  return HEAP32[r1 + 4 >> 2];
}
function _gcry_prime_group_generator(r1, r2, r3, r4) {
  return __gcry_prime_group_generator(r1, r2, r3, r4);
}
function _gcry_prime_release_factors(r1) {
  __gcry_prime_release_factors(r1);
  return;
}
function _gcry_prime_check(r1, r2) {
  return __gcry_prime_check(r1, 0);
}
function _gcry_set_progress_handler(r1, r2) {
  __gcry_set_progress_handler(r1, r2);
  return;
}
function _gcry_set_allocation_handler(r1, r2, r3, r4, r5) {
  __gcry_set_allocation_handler(r1, r2, r3, r4, r5);
  return;
}
function _gcry_set_outofcore_handler(r1, r2) {
  __gcry_set_outofcore_handler(r1, r2);
  return;
}
function _gcry_set_fatalerror_handler(r1, r2) {
  __gcry_set_fatalerror_handler(r1, r2);
  return;
}
function _gcry_set_log_handler(r1, r2) {
  __gcry_set_log_handler(r1, r2);
  return;
}
function _gcry_set_gettext_handler(r1) {
  __gcry_set_gettext_handler(r1);
  return;
}
function _gcry_malloc(r1) {
  return __gcry_malloc(r1);
}
function _gcry_calloc(r1, r2) {
  return __gcry_calloc(r1, r2);
}
function _gcry_malloc_secure(r1) {
  return __gcry_malloc_secure(r1);
}
function _gcry_calloc_secure(r1, r2) {
  return __gcry_calloc_secure(r1, r2);
}
function _gcry_realloc(r1, r2) {
  return __gcry_realloc(r1, r2);
}
function _gcry_strdup(r1) {
  return __gcry_strdup(r1);
}
function _gcry_xmalloc(r1) {
  return __gcry_xmalloc(r1);
}
function _gcry_xcalloc(r1, r2) {
  return __gcry_xcalloc(r1, r2);
}
function _gcry_xmalloc_secure(r1) {
  return __gcry_xmalloc_secure(r1);
}
function _gcry_xcalloc_secure(r1, r2) {
  return __gcry_xcalloc_secure(r1, r2);
}
function _gcry_xrealloc(r1, r2) {
  return __gcry_xrealloc(r1, r2);
}
function _gcry_xstrdup(r1) {
  return __gcry_xstrdup(r1);
}
function _gcry_free(r1) {
  __gcry_free(r1);
  return;
}
function _gcry_is_secure(r1) {
  return __gcry_is_secure(r1);
}
function _gcry_cipher_register(r1, r2, r3) {
  return __gcry_cipher_register(r1, 0, r2, r3);
}
function _gcry_cipher_unregister(r1) {
  __gcry_cipher_unregister(r1);
  return;
}
function _gcry_pk_register(r1, r2, r3) {
  return __gcry_pk_register(r1, 0, r2, r3);
}
function _gcry_pk_unregister(r1) {
  __gcry_pk_unregister(r1);
  return;
}
function _gcry_md_register(r1, r2, r3) {
  return __gcry_md_register(r1, 0, r2, r3);
}
function _gcry_md_unregister(r1) {
  __gcry_md_unregister(r1);
  return;
}
function _gcry_err_make307() {
  return _gpg_err_make308(32, 4);
}
function __gcry_ac_data_new(r1) {
  var r2, r3;
  if ((__gcry_fips_mode() | 0) != 0) {
    r2 = _gpg_error337();
    return r2;
  }
  r3 = __gcry_malloc(8);
  if ((r3 | 0) == 0) {
    r2 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r2;
  } else {
    HEAP32[r3 >> 2] = 0;
    HEAP32[r3 + 4 >> 2] = 0;
    HEAP32[r1 >> 2] = r3;
    r2 = 0;
    return r2;
  }
}
function _gpg_error337() {
  return _gpg_err_make402(1, 60);
}
function __gcry_ac_data_destroy(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  _ac_data_values_destroy(r1);
  __gcry_free(HEAP32[r1 >> 2]);
  __gcry_free(r1);
  return;
}
function _ac_data_values_destroy(r1) {
  var r2, r3, r4;
  r2 = r1 + 4 | 0;
  if ((HEAP32[r2 >> 2] | 0) == 0) {
    return;
  }
  r3 = r1 | 0;
  r1 = 0;
  while (1) {
    r4 = HEAP32[r3 >> 2];
    if ((HEAP32[r4 + (r1 * 12 & -1) + 8 >> 2] & 1 | 0) != 0) {
      __gcry_mpi_release(HEAP32[r4 + (r1 * 12 & -1) + 4 >> 2]);
      __gcry_free(HEAP32[HEAP32[r3 >> 2] + (r1 * 12 & -1) >> 2]);
    }
    r4 = r1 + 1 | 0;
    if (r4 >>> 0 < HEAP32[r2 >> 2] >>> 0) {
      r1 = r4;
    } else {
      break;
    }
  }
  return;
}
function __gcry_ac_data_copy(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    r5 = _gpg_error337();
    STACKTOP = r3;
    return r5;
  }
  r6 = __gcry_malloc(8);
  r7 = r6;
  do {
    if ((r6 | 0) == 0) {
      r8 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      if ((r8 | 0) == 0) {
        r5 = 0;
      } else {
        r9 = r8;
        break;
      }
      STACKTOP = r3;
      return r5;
    } else {
      r8 = r2 + 4 | 0;
      r10 = _ac_data_mpi_copy(HEAP32[r2 >> 2], HEAP32[r8 >> 2], r4);
      if ((r10 | 0) != 0) {
        r9 = r10;
        break;
      }
      HEAP32[r6 + 4 >> 2] = HEAP32[r8 >> 2];
      HEAP32[r6 >> 2] = HEAP32[r4 >> 2];
      HEAP32[r1 >> 2] = r7;
      r5 = 0;
      STACKTOP = r3;
      return r5;
    }
  } while (0);
  __gcry_free(r6);
  r5 = r9;
  STACKTOP = r3;
  return r5;
}
function _ac_data_mpi_copy(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = r2 * 12 & -1;
  r5 = __gcry_malloc(r4);
  r6 = r5, r7 = r6 >> 2;
  r8 = (r5 | 0) != 0;
  if (!r8) {
    r9 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r9;
  }
  _memset(r5, 0, r4);
  L3289 : do {
    if ((r2 | 0) != 0) {
      r4 = 0;
      while (1) {
        r10 = __gcry_strdup(HEAP32[r1 + (r4 * 12 & -1) >> 2]);
        r11 = __gcry_mpi_copy(HEAP32[r1 + (r4 * 12 & -1) + 4 >> 2]);
        if ((r10 | 0) == 0 | (r11 | 0) == 0) {
          break;
        }
        HEAP32[((r4 * 12 & -1) + 8 >> 2) + r7] = 1;
        HEAP32[((r4 * 12 & -1) >> 2) + r7] = r10;
        HEAP32[((r4 * 12 & -1) + 4 >> 2) + r7] = r11;
        r12 = r4 + 1 | 0;
        if (r12 >>> 0 < r2 >>> 0) {
          r4 = r12;
        } else {
          break L3289;
        }
      }
      r4 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      __gcry_mpi_release(r11);
      __gcry_free(r10);
      if ((r4 | 0) == 0) {
        break;
      }
      if (!r8) {
        r9 = r4;
        return r9;
      }
      L3298 : do {
        if ((r2 | 0) != 0) {
          r12 = 0;
          while (1) {
            __gcry_mpi_release(HEAP32[((r12 * 12 & -1) + 4 >> 2) + r7]);
            __gcry_free(HEAP32[((r12 * 12 & -1) >> 2) + r7]);
            r13 = r12 + 1 | 0;
            if ((r13 | 0) == (r2 | 0)) {
              break L3298;
            } else {
              r12 = r13;
            }
          }
        }
      } while (0);
      __gcry_free(r5);
      r9 = r4;
      return r9;
    }
  } while (0);
  HEAP32[r3 >> 2] = r6;
  r9 = 0;
  return r9;
}
function __gcry_ac_data_set(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  if ((__gcry_fips_mode() | 0) != 0) {
    r5 = _gpg_error337();
    return r5;
  }
  L3310 : do {
    if (r2 >>> 0 > 3) {
      r6 = 0;
      r7 = 0;
      r8 = _gcry_error346(45);
    } else {
      do {
        if ((r2 & 2 | 0) == 0) {
          r9 = 0;
          r10 = 0;
          r11 = r2;
        } else {
          r12 = __gcry_strdup(r3);
          r13 = __gcry_mpi_copy(r4);
          if ((r12 | 0) != 0) {
            if ((r13 | 0) != 0) {
              r9 = r12;
              r10 = r13;
              r11 = r2 | 1;
              break;
            }
          }
          r6 = r12;
          r7 = r13;
          r8 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          break L3310;
        }
      } while (0);
      r13 = r1 | 0;
      r12 = (r1 + 4 | 0) >> 2;
      r14 = HEAP32[r12];
      r15 = 0;
      while (1) {
        if (r15 >>> 0 >= r14 >>> 0) {
          break;
        }
        if ((_strcmp(r3, HEAP32[HEAP32[r13 >> 2] + (r15 * 12 & -1) >> 2]) | 0) == 0) {
          break;
        } else {
          r15 = r15 + 1 | 0;
        }
      }
      r13 = HEAP32[r12];
      r14 = (r1 | 0) >> 2;
      r16 = HEAP32[r14];
      do {
        if (r15 >>> 0 < r13 >>> 0) {
          if ((HEAP32[r16 + (r15 * 12 & -1) + 8 >> 2] & 1 | 0) == 0) {
            break;
          }
          __gcry_mpi_release(HEAP32[r16 + (r15 * 12 & -1) + 4 >> 2]);
          __gcry_free(HEAP32[HEAP32[r14] + (r15 * 12 & -1) >> 2]);
        } else {
          r17 = __gcry_realloc(r16, (r13 * 12 & -1) + 12 | 0);
          r18 = r17;
          if ((r17 | 0) == 0) {
            r6 = r9;
            r7 = r10;
            r8 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
            break L3310;
          }
          if ((HEAP32[r14] | 0) != (r18 | 0)) {
            HEAP32[r14] = r18;
          }
          HEAP32[r12] = HEAP32[r12] + 1 | 0;
        }
      } while (0);
      HEAP32[HEAP32[r14] + (r15 * 12 & -1) >> 2] = (r9 | 0) != 0 ? r9 : r3;
      HEAP32[HEAP32[r14] + (r15 * 12 & -1) + 4 >> 2] = (r10 | 0) != 0 ? r10 : r4;
      HEAP32[HEAP32[r14] + (r15 * 12 & -1) + 8 >> 2] = r11;
      r5 = 0;
      return r5;
    }
  } while (0);
  if ((r8 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  __gcry_mpi_release(r7);
  __gcry_free(r6);
  r5 = r8;
  return r5;
}
function _gcry_error346(r1) {
  return _gcry_err_make401(r1);
}
function __gcry_ac_data_get_name(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  if ((__gcry_fips_mode() | 0) != 0) {
    r5 = _gpg_error337();
    return r5;
  }
  if ((r2 & -3 | 0) != 0) {
    r5 = _gcry_error346(45);
    return r5;
  }
  r6 = r1 | 0;
  r7 = r1 + 4 | 0;
  r8 = HEAP32[r7 >> 2];
  r9 = 0;
  while (1) {
    if (r9 >>> 0 >= r8 >>> 0) {
      break;
    }
    if ((_strcmp(r3, HEAP32[HEAP32[r6 >> 2] + (r9 * 12 & -1) >> 2]) | 0) == 0) {
      break;
    } else {
      r9 = r9 + 1 | 0;
    }
  }
  if ((r9 | 0) == (HEAP32[r7 >> 2] | 0)) {
    r5 = _gcry_error346(27);
    return r5;
  }
  r7 = HEAP32[HEAP32[r1 >> 2] + (r9 * 12 & -1) + 4 >> 2];
  do {
    if ((r2 & 2 | 0) == 0) {
      r10 = r7;
    } else {
      r9 = __gcry_mpi_copy(r7);
      if ((r9 | 0) != 0) {
        r10 = r9;
        break;
      }
      r5 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      return r5;
    }
  } while (0);
  HEAP32[r4 >> 2] = r10;
  r5 = 0;
  return r5;
}
function __gcry_ac_data_get_index(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r6 = r1 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r7 = _gpg_error337();
    return r7;
  }
  L3369 : do {
    if ((r2 & -3 | 0) == 0) {
      if (HEAP32[r6 + 1] >>> 0 <= r3 >>> 0) {
        r8 = 0;
        r9 = _gcry_error346(45);
        break;
      }
      do {
        if ((r2 & 2 | 0) == 0) {
          r10 = 0;
          r11 = 0;
        } else {
          do {
            if ((r4 | 0) == 0) {
              r12 = 0;
            } else {
              r1 = __gcry_strdup(HEAP32[HEAP32[r6] + (r3 * 12 & -1) >> 2]);
              if ((r1 | 0) != 0) {
                r12 = r1;
                break;
              }
              r8 = 0;
              r9 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
              break L3369;
            }
          } while (0);
          if ((r5 | 0) == 0) {
            r10 = r12;
            r11 = 0;
            break;
          }
          r1 = __gcry_mpi_copy(HEAP32[HEAP32[r6] + (r3 * 12 & -1) + 4 >> 2]);
          if ((r1 | 0) != 0) {
            r10 = r12;
            r11 = r1;
            break;
          }
          r8 = r12;
          r9 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          break L3369;
        }
      } while (0);
      if ((r4 | 0) != 0) {
        if ((r10 | 0) == 0) {
          r13 = HEAP32[HEAP32[r6] + (r3 * 12 & -1) >> 2];
        } else {
          r13 = r10;
        }
        HEAP32[r4 >> 2] = r13;
      }
      if ((r5 | 0) == 0) {
        r7 = 0;
        return r7;
      }
      if ((r11 | 0) == 0) {
        r14 = HEAP32[HEAP32[r6] + (r3 * 12 & -1) + 4 >> 2];
      } else {
        r14 = r11;
      }
      HEAP32[r5 >> 2] = r14;
      r7 = 0;
      return r7;
    } else {
      r8 = 0;
      r9 = _gcry_error346(45);
    }
  } while (0);
  if ((r9 | 0) == 0) {
    r7 = 0;
    return r7;
  }
  __gcry_mpi_release(0);
  __gcry_free(r8);
  r7 = r9;
  return r7;
}
function __gcry_ac_data_to_sexp(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r6 = r5;
  r7 = r5 + 4;
  r8 = r5 + 8;
  if ((__gcry_fips_mode() | 0) != 0) {
    r9 = _gpg_error337();
    STACKTOP = r5;
    return r9;
  }
  L3407 : do {
    if ((r3 | 0) == 0) {
      r10 = 0;
      r11 = 1;
    } else {
      r12 = HEAP32[r3 >> 2];
      if ((r12 | 0) == 0) {
        r10 = 0;
        r11 = 1;
        break;
      } else {
        r13 = 1;
        r14 = 0;
        r15 = r12;
      }
      while (1) {
        r12 = r13 + _strlen(r15) + 2 | 0;
        r16 = r14 + 1 | 0;
        r17 = HEAP32[r3 + (r16 << 2) >> 2];
        if ((r17 | 0) == 0) {
          r10 = r16;
          r11 = r12;
          break L3407;
        } else {
          r13 = r12;
          r14 = r16;
          r15 = r17;
        }
      }
    }
  } while (0);
  r15 = (r10 | 0) != 0;
  r14 = r15 ? r11 : r11 + 2 | 0;
  r11 = __gcry_ac_data_length(r1);
  L3412 : do {
    if ((r11 | 0) == 0) {
      r18 = r14;
      r4 = 2831;
    } else {
      r13 = r14;
      r17 = 0;
      while (1) {
        r16 = __gcry_ac_data_get_index(r1, 0, r17, r7, 0);
        if ((r16 | 0) != 0) {
          r19 = 0;
          r20 = r16;
          r21 = 0;
          break L3412;
        }
        r16 = r13 + _strlen(HEAP32[r7 >> 2]) + 5 | 0;
        r12 = r17 + 1 | 0;
        if (r12 >>> 0 < r11 >>> 0) {
          r13 = r16;
          r17 = r12;
        } else {
          r18 = r16;
          r4 = 2831;
          break L3412;
        }
      }
    }
  } while (0);
  L3416 : do {
    if (r4 == 2831) {
      r14 = __gcry_malloc(r18);
      if ((r14 | 0) == 0) {
        r19 = 0;
        r20 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r21 = 0;
        break;
      }
      HEAP8[r14] = 0;
      L3421 : do {
        if (r15) {
          r17 = 0;
          r13 = 0;
          while (1) {
            r16 = _sprintf(r14 + r17 | 0, 487760, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r3 + (r13 << 2) >> 2], tempInt)) + r17 | 0;
            r12 = r13 + 1 | 0;
            if ((r12 | 0) == (r10 | 0)) {
              r22 = r16;
              break L3421;
            } else {
              r17 = r16;
              r13 = r12;
            }
          }
        } else {
          r13 = r14;
          tempBigInt = 40;
          HEAP8[r13] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r13 + 1 | 0] = tempBigInt & 255;
          r22 = 1;
        }
      } while (0);
      r13 = __gcry_malloc((r11 << 2) + 4 | 0);
      r17 = r13;
      if ((r13 | 0) == 0) {
        r19 = r17;
        r20 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r21 = r14;
        break;
      }
      L3429 : do {
        if ((r11 | 0) == 0) {
          r23 = r22;
        } else {
          r13 = r1 | 0;
          r12 = r22;
          r16 = 0;
          while (1) {
            r24 = __gcry_ac_data_get_index(r1, 0, r16, r7, r8);
            if ((r24 | 0) != 0) {
              r19 = r17;
              r20 = r24;
              r21 = r14;
              break L3416;
            }
            r24 = _sprintf(r14 + r12 | 0, 476488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r7 >> 2], tempInt)) + r12 | 0;
            HEAP32[r17 + (r16 << 2) >> 2] = HEAP32[r13 >> 2] + (r16 * 12 & -1) + 4 | 0;
            r25 = r16 + 1 | 0;
            if (r25 >>> 0 < r11 >>> 0) {
              r12 = r24;
              r16 = r25;
            } else {
              r23 = r24;
              break L3429;
            }
          }
        }
      } while (0);
      L3435 : do {
        if (r15) {
          r16 = r23;
          r12 = 0;
          while (1) {
            r13 = r14 + r16 | 0;
            tempBigInt = 41;
            HEAP8[r13] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r13 + 1 | 0] = tempBigInt & 255;
            r13 = r12 + 1 | 0;
            if ((r13 | 0) == (r10 | 0)) {
              break L3435;
            } else {
              r16 = r16 + 1 | 0;
              r12 = r13;
            }
          }
        } else {
          r12 = r14 + r23 | 0;
          tempBigInt = 41;
          HEAP8[r12] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r12 + 1 | 0] = tempBigInt & 255;
        }
      } while (0);
      r12 = __gcry_sexp_build_array(r6, 0, r14, r17);
      if ((r12 | 0) != 0) {
        r19 = r17;
        r20 = r12;
        r21 = r14;
        break;
      }
      HEAP32[r2 >> 2] = HEAP32[r6 >> 2];
      r19 = r17;
      r20 = 0;
      r21 = r14;
    }
  } while (0);
  __gcry_free(r21);
  __gcry_free(r19);
  r9 = r20;
  STACKTOP = r5;
  return r9;
}
function __gcry_ac_data_from_sexp(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4, r9 = r8 >> 2;
  HEAP32[r7] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    r10 = _gpg_error337();
    STACKTOP = r5;
    return r10;
  }
  L3448 : do {
    if ((r3 | 0) == 0) {
      r11 = 0;
      r12 = r2;
      r4 = 2864;
    } else {
      L3450 : do {
        if ((HEAP32[r3 >> 2] | 0) == 0) {
          r13 = r2;
          r14 = 0;
        } else {
          r15 = r2;
          r16 = 0;
          r17 = r3;
          while (1) {
            r18 = __gcry_sexp_nth_data(r15, 0, r8);
            r19 = HEAP32[r9];
            r20 = HEAP32[r17 >> 2];
            if ((r19 | 0) != (_strlen(r20) | 0)) {
              break;
            }
            if ((_strncmp(r18, r20, r19) | 0) != 0) {
              break;
            }
            r19 = r16 + 1 | 0;
            if ((HEAP32[r3 + (r19 << 2) >> 2] | 0) == 0) {
              r13 = r15;
              r14 = r16;
              break L3450;
            }
            r20 = __gcry_sexp_nth(r15, 1);
            if ((r20 | 0) == 0) {
              break;
            }
            if ((r15 | 0) != (r2 | 0)) {
              __gcry_sexp_release(r15);
            }
            r18 = (r19 << 2) + r3 | 0;
            if ((HEAP32[r18 >> 2] | 0) == 0) {
              r13 = r20;
              r14 = r19;
              break L3450;
            } else {
              r15 = r20;
              r16 = r19;
              r17 = r18;
            }
          }
          r17 = _gcry_error346(83);
          if ((r17 | 0) == 0) {
            r13 = r15;
            r14 = r16;
          } else {
            r21 = 0;
            r22 = 0;
            r23 = 0;
            r24 = r15;
            r25 = r17;
            break L3448;
          }
        }
      } while (0);
      r11 = (r14 | 0) != 0 & 1;
      r12 = r13;
      r4 = 2864;
      break;
    }
  } while (0);
  L3462 : do {
    if (r4 == 2864) {
      r13 = __gcry_ac_data_new(r6);
      if ((r13 | 0) != 0) {
        r21 = 0;
        r22 = 0;
        r23 = 0;
        r24 = r12;
        r25 = r13;
        break;
      }
      L3465 : do {
        if ((r12 | 0) == 0) {
          r26 = 0;
          r27 = 0;
        } else {
          r14 = __gcry_sexp_length(r12);
          r3 = r14 - r11 | 0;
          do {
            if ((r14 | 0) == (r11 | 0)) {
              r28 = 0;
              r29 = 0;
              r30 = r13;
            } else {
              r17 = HEAP32[r7];
              r18 = 0;
              while (1) {
                r31 = __gcry_sexp_nth(r12, r18 + r11 | 0);
                if ((r31 | 0) == 0) {
                  r4 = 2869;
                  break;
                }
                r19 = __gcry_sexp_nth_data(r31, 0, r8);
                r32 = __gcry_malloc(HEAP32[r9] + 1 | 0);
                if ((r32 | 0) == 0) {
                  r4 = 2871;
                  break;
                }
                _memcpy(r32, r19, HEAP32[r9]);
                HEAP8[r32 + HEAP32[r9] | 0] = 0;
                r19 = __gcry_sexp_nth_mpi(r31, 1, 0);
                if ((r19 | 0) == 0) {
                  r4 = 2873;
                  break;
                }
                r20 = __gcry_ac_data_set(r17, 1, r32, r19);
                if ((r20 | 0) != 0) {
                  r21 = r32;
                  r22 = r19;
                  r23 = r31;
                  r24 = r12;
                  r25 = r20;
                  break L3462;
                }
                __gcry_sexp_release(r31);
                r20 = r18 + 1 | 0;
                if (r20 >>> 0 < r3 >>> 0) {
                  r18 = r20;
                } else {
                  r26 = 0;
                  r27 = 0;
                  break L3465;
                }
              }
              if (r4 == 2869) {
                r28 = 0;
                r29 = 0;
                r30 = _gcry_error346(83);
                break;
              } else if (r4 == 2871) {
                r28 = 0;
                r29 = r31;
                r30 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
                break;
              } else if (r4 == 2873) {
                r28 = r32;
                r29 = r31;
                r30 = _gcry_error346(83);
                break;
              }
            }
          } while (0);
          if ((r30 | 0) == 0) {
            r26 = r29;
            r27 = r28;
          } else {
            r21 = r28;
            r22 = 0;
            r23 = r29;
            r24 = r12;
            r25 = r30;
            break L3462;
          }
        }
      } while (0);
      HEAP32[r1 >> 2] = HEAP32[r7];
      r21 = r27;
      r22 = 0;
      r23 = r26;
      r24 = r12;
      r25 = 0;
    }
  } while (0);
  if ((r24 | 0) != (r2 | 0)) {
    __gcry_sexp_release(r24);
  }
  __gcry_sexp_release(r23);
  __gcry_mpi_release(r22);
  __gcry_free(r21);
  if ((r25 | 0) == 0) {
    r10 = 0;
    STACKTOP = r5;
    return r10;
  }
  __gcry_ac_data_destroy(HEAP32[r7]);
  r10 = r25;
  STACKTOP = r5;
  return r10;
}
function _gcry_ac_data_dump(r1, r2) {
  __gcry_ac_data_dump(r1, r2);
  return;
}
function __gcry_ac_data_dump(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4;
  r8 = r4 + 8;
  r9 = r4 + 12;
  if ((r2 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    STACKTOP = r4;
    return;
  }
  HEAP32[r6] = 0;
  r10 = __gcry_ac_data_length(r2);
  L3497 : do {
    if ((r10 | 0) != 0) {
      r11 = (r1 | 0) != 0;
      r12 = r11 ? r1 : 479588;
      r13 = r11 ? 479060 : 479588;
      r11 = 0;
      while (1) {
        if ((__gcry_ac_data_get_index(r2, 0, r11, r8, r9) | 0) != 0) {
          r3 = 2892;
          break;
        }
        if ((__gcry_mpi_aprint(4, r5, r7, HEAP32[r9 >> 2]) | 0) != 0) {
          r3 = 2894;
          break;
        }
        r14 = HEAP32[r8 >> 2];
        r15 = HEAP32[r6];
        __gcry_log_printf(479932, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r12, HEAP32[tempInt + 4 >> 2] = r13, HEAP32[tempInt + 8 >> 2] = r14, HEAP32[tempInt + 12 >> 2] = r15, tempInt));
        __gcry_free(HEAP32[r6]);
        HEAP32[r6] = 0;
        r15 = r11 + 1 | 0;
        if (r15 >>> 0 < r10 >>> 0) {
          r11 = r15;
        } else {
          break L3497;
        }
      }
      if (r3 == 2892) {
        __gcry_log_error(480212, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        break;
      } else if (r3 == 2894) {
        __gcry_log_error(480212, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        break;
      }
    }
  } while (0);
  __gcry_free(HEAP32[r6]);
  STACKTOP = r4;
  return;
}
function __gcry_ac_data_clear(r1) {
  var r2;
  _ac_data_values_destroy(r1);
  r2 = r1 | 0;
  __gcry_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  return;
}
function __gcry_ac_io_init(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  HEAP32[r6 >> 2] = r4;
  __gcry_ac_io_init_va(r1, r2, r3, HEAP32[r6 >> 2]);
  STACKTOP = r5;
  return;
}
function __gcry_ac_open(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5, r7 = r6 >> 2;
  HEAP32[r1 >> 2] = 0;
  HEAP32[r7] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    r8 = _gpg_error337();
    STACKTOP = r5;
    return r8;
  }
  r9 = __gcry_pk_aliased_algo_name(r2);
  do {
    if ((r9 | 0) == 0) {
      r10 = _gcry_error346(4);
      r4 = 2911;
      break;
    } else {
      r11 = __gcry_pk_module_lookup(r2, r6);
      if ((r11 | 0) != 0) {
        r12 = r11;
        break;
      }
      r13 = __gcry_malloc(16), r14 = r13 >> 2;
      if ((r13 | 0) == 0) {
        r10 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r4 = 2911;
        break;
      } else {
        HEAP32[r14] = r2;
        HEAP32[r14 + 1] = r9;
        HEAP32[r14 + 2] = r3;
        HEAP32[r14 + 3] = HEAP32[r7];
        HEAP32[r1 >> 2] = r13;
        r10 = r11;
        r4 = 2911;
        break;
      }
    }
  } while (0);
  do {
    if (r4 == 2911) {
      if ((r10 | 0) == 0) {
        r8 = 0;
      } else {
        r12 = r10;
        break;
      }
      STACKTOP = r5;
      return r8;
    }
  } while (0);
  __gcry_pk_module_release(HEAP32[r7]);
  r8 = r12;
  STACKTOP = r5;
  return r8;
}
function __gcry_ac_close(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  __gcry_pk_module_release(HEAP32[r1 + 12 >> 2]);
  __gcry_free(r1);
  return;
}
function __gcry_ac_key_init(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r2;
  L3533 : do {
    if ((__gcry_fips_mode() | 0) == 0) {
      r6 = __gcry_malloc(8);
      r7 = r6;
      do {
        if ((r6 | 0) == 0) {
          r8 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          if ((r8 | 0) == 0) {
            r9 = 0;
            break L3533;
          } else {
            r10 = r8;
          }
        } else {
          r8 = __gcry_ac_data_copy(r5, r4);
          if ((r8 | 0) != 0) {
            r10 = r8;
            break;
          }
          HEAP32[r6 >> 2] = HEAP32[r5 >> 2];
          HEAP32[r6 + 4 >> 2] = r3;
          HEAP32[r1 >> 2] = r7;
          r9 = 0;
          break L3533;
        }
      } while (0);
      __gcry_free(r6);
      r9 = r10;
    } else {
      r9 = _gpg_error337();
    }
  } while (0);
  STACKTOP = r2;
  return r9;
}
function __gcry_ac_key_pair_generate(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r6 = r5;
  r7 = r5 + 4, r8 = r7 >> 2;
  r9 = r5 + 8, r10 = r9 >> 2;
  r11 = r5 + 12, r12 = r11 >> 2;
  r13 = r5 + 16, r14 = r13 >> 2;
  HEAP32[r6 >> 2] = r2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r15 = _gpg_error337();
    STACKTOP = r5;
    return r15;
  }
  HEAP32[r12] = 0;
  HEAP32[r14] = 0;
  HEAP32[r8] = 0;
  HEAP32[r10] = 0;
  r2 = __gcry_malloc(8);
  r16 = r2;
  do {
    if ((r2 | 0) == 0) {
      r17 = 0;
      r18 = 0;
      r19 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      r20 = 0;
      r21 = 0;
      r22 = 0;
    } else {
      r23 = __gcry_malloc(8);
      r24 = r23;
      if ((r23 | 0) == 0) {
        r17 = 0;
        r18 = 0;
        r19 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r20 = 0;
        r21 = 0;
        r22 = r24;
        break;
      }
      r25 = __gcry_malloc(8);
      r26 = r25;
      if ((r25 | 0) == 0) {
        r17 = 0;
        r18 = 0;
        r19 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r20 = 0;
        r21 = r26;
        r22 = r24;
        break;
      }
      r27 = (r3 | 0) != 0;
      if (r27) {
        r28 = HEAP32[r1 >> 2];
        r29 = (r28 | 0) == (HEAP32[116216] | 0) ? 28 : 22;
        r30 = (r28 | 0) == (HEAP32[116219] | 0) ? r29 + 6 | 0 : r29;
      } else {
        r30 = 22;
      }
      r29 = __gcry_malloc(r30);
      if ((r29 | 0) == 0) {
        r17 = 0;
        r18 = 0;
        r19 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r20 = 0;
        r21 = r26;
        r22 = r24;
        break;
      }
      HEAP8[r29] = 0;
      _memcpy(r29 + _strlen(r29) | 0, 467500, 20);
      do {
        if (r27) {
          r28 = r1 | 0;
          if ((HEAP32[r28 >> 2] | 0) == (HEAP32[116216] | 0)) {
            r31 = r29 + _strlen(r29) | 0;
            HEAP8[r31] = HEAP8[465384];
            HEAP8[r31 + 1 | 0] = HEAP8[465385 | 0];
            HEAP8[r31 + 2 | 0] = HEAP8[465386 | 0];
            HEAP8[r31 + 3 | 0] = HEAP8[465387 | 0];
            HEAP8[r31 + 4 | 0] = HEAP8[465388 | 0];
            HEAP8[r31 + 5 | 0] = HEAP8[465389 | 0];
            HEAP8[r31 + 6 | 0] = HEAP8[465390 | 0];
          }
          if ((HEAP32[r28 >> 2] | 0) == (HEAP32[116219] | 0)) {
            r28 = r29 + _strlen(r29) | 0;
            HEAP8[r28] = HEAP8[465384];
            HEAP8[r28 + 1 | 0] = HEAP8[465385 | 0];
            HEAP8[r28 + 2 | 0] = HEAP8[465386 | 0];
            HEAP8[r28 + 3 | 0] = HEAP8[465387 | 0];
            HEAP8[r28 + 4 | 0] = HEAP8[465388 | 0];
            HEAP8[r28 + 5 | 0] = HEAP8[465389 | 0];
            HEAP8[r28 + 6 | 0] = HEAP8[465390 | 0];
          }
          r28 = r29 + _strlen(r29) | 0;
          HEAP8[r28] = HEAP8[490748];
          HEAP8[r28 + 1 | 0] = HEAP8[490749 | 0];
          HEAP8[r28 + 2 | 0] = HEAP8[490750 | 0];
          if (!r27) {
            r32 = 8;
            break;
          }
          r28 = HEAP32[r1 >> 2];
          r31 = (r28 | 0) == (HEAP32[116216] | 0) ? 4 : 2;
          r32 = ((r28 | 0) == (HEAP32[116219] | 0) ? r31 + 2 | 0 : r31) << 2;
        } else {
          r31 = r29 + _strlen(r29) | 0;
          HEAP8[r31] = HEAP8[490748];
          HEAP8[r31 + 1 | 0] = HEAP8[490749 | 0];
          HEAP8[r31 + 2 | 0] = HEAP8[490750 | 0];
          r32 = 8;
        }
      } while (0);
      r31 = __gcry_malloc(r32), r28 = r31 >> 2;
      r33 = r31, r34 = r33 >> 2;
      if ((r31 | 0) == 0) {
        r17 = r33;
        r18 = r29;
        r19 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r20 = 0;
        r21 = r26;
        r22 = r24;
        break;
      }
      r31 = r1 + 4 | 0;
      HEAP32[r34] = r31;
      HEAP32[r28 + 1] = r6;
      do {
        if (r27) {
          r35 = HEAP32[r1 >> 2];
          if ((r35 | 0) == (HEAP32[116216] | 0)) {
            HEAP32[r28 + 2] = 464868;
            HEAP32[r28 + 3] = r3 + HEAP32[116218] | 0;
            r36 = 4;
          } else {
            r36 = 2;
          }
          if ((r35 | 0) != (HEAP32[116219] | 0)) {
            break;
          }
          HEAP32[(r36 << 2 >> 2) + r34] = 464880;
          HEAP32[((r36 | 1) << 2 >> 2) + r34] = r3 + HEAP32[116221] | 0;
        }
      } while (0);
      r34 = __gcry_sexp_build_array(r7, 0, r29, r33);
      if ((r34 | 0) != 0) {
        r17 = r33;
        r18 = r29;
        r19 = r34;
        r20 = 0;
        r21 = r26;
        r22 = r24;
        break;
      }
      r34 = __gcry_pk_genkey(r9, HEAP32[r8]);
      if ((r34 | 0) != 0) {
        r17 = r33;
        r18 = r29;
        r19 = r34;
        r20 = 0;
        r21 = r26;
        r22 = r24;
        break;
      }
      r34 = __gcry_sexp_find_token(HEAP32[r10], 489768, 0);
      if ((r34 | 0) == 0) {
        r17 = r33;
        r18 = r29;
        r19 = _gcry_error346(63);
        r20 = 0;
        r21 = r26;
        r22 = r24;
        break;
      }
      r28 = _ac_data_extract(489768, HEAP32[r31 >> 2], r34, r11);
      if ((r28 | 0) != 0) {
        r17 = r33;
        r18 = r29;
        r19 = r28;
        r20 = r34;
        r21 = r26;
        r22 = r24;
        break;
      }
      __gcry_sexp_release(r34);
      r34 = __gcry_sexp_find_token(HEAP32[r10], 488108, 0);
      if ((r34 | 0) == 0) {
        r17 = r33;
        r18 = r29;
        r19 = _gcry_error346(63);
        r20 = 0;
        r21 = r26;
        r22 = r24;
        break;
      }
      r28 = _ac_data_extract(488108, HEAP32[r31 >> 2], r34, r13);
      if ((r28 | 0) != 0) {
        r17 = r33;
        r18 = r29;
        r19 = r28;
        r20 = r34;
        r21 = r26;
        r22 = r24;
        break;
      }
      HEAP32[r23 + 4 >> 2] = 0;
      HEAP32[r23 >> 2] = HEAP32[r12];
      HEAP32[r25 + 4 >> 2] = 1;
      HEAP32[r25 >> 2] = HEAP32[r14];
      HEAP32[r2 + 4 >> 2] = r24;
      HEAP32[r2 >> 2] = r26;
      HEAP32[r4 >> 2] = r16;
      r17 = r33;
      r18 = r29;
      r19 = 0;
      r20 = r34;
      r21 = r26;
      r22 = r24;
    }
  } while (0);
  __gcry_free(r18);
  __gcry_free(r17);
  __gcry_sexp_release(HEAP32[r8]);
  __gcry_sexp_release(HEAP32[r10]);
  __gcry_sexp_release(r20);
  if ((r19 | 0) == 0) {
    r15 = 0;
    STACKTOP = r5;
    return r15;
  }
  __gcry_ac_data_destroy(HEAP32[r12]);
  __gcry_ac_data_destroy(HEAP32[r14]);
  __gcry_free(r22);
  __gcry_free(r21);
  __gcry_free(r2);
  r15 = r19;
  STACKTOP = r5;
  return r15;
}
function _ac_data_extract(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  HEAP32[r10] = 0;
  r11 = __gcry_sexp_nth_data(r3, 0, r7);
  L3599 : do {
    if ((r11 | 0) == 0) {
      r5 = 2990;
    } else {
      if ((_strncmp(r1, r11, HEAP32[r8]) | 0) != 0) {
        r5 = 2990;
        break;
      }
      r12 = __gcry_sexp_find_token(r3, r2, 0);
      if ((r12 | 0) == 0) {
        r5 = 2990;
        break;
      }
      r13 = __gcry_sexp_length(r12) - 1 | 0;
      r14 = __gcry_ac_data_new(r9);
      if ((r14 | 0) != 0) {
        r15 = r14;
        r16 = 0;
        r17 = r12;
        r18 = 0;
        r19 = 0;
        break;
      }
      L3604 : do {
        if ((r13 | 0) != 0) {
          r14 = HEAP32[r10];
          r20 = 0;
          while (1) {
            r21 = r20 + 1 | 0;
            r22 = __gcry_sexp_nth(r12, r21);
            if ((r22 | 0) == 0) {
              r5 = 2979;
              break;
            }
            r23 = __gcry_sexp_nth_data(r22, 0, r7);
            if ((r23 | 0) == 0) {
              r5 = 2981;
              break;
            }
            r24 = __gcry_sexp_nth_mpi(r22, 1, 5);
            if ((r24 | 0) == 0) {
              r5 = 2983;
              break;
            }
            r25 = __gcry_malloc(HEAP32[r8] + 1 | 0);
            if ((r25 | 0) == 0) {
              r5 = 2985;
              break;
            }
            _strncpy(r25, r23, HEAP32[r8]);
            HEAP8[r25 + HEAP32[r8] | 0] = 0;
            r23 = __gcry_ac_data_set(r14, 1, r25, r24);
            if ((r23 | 0) != 0) {
              r15 = r23;
              r16 = r22;
              r17 = r12;
              r18 = r24;
              r19 = r25;
              break L3599;
            }
            __gcry_sexp_release(r22);
            if (r21 >>> 0 < r13 >>> 0) {
              r20 = r21;
            } else {
              break L3604;
            }
          }
          if (r5 == 2979) {
            r26 = 0;
            r27 = 0;
            r28 = _gcry_error346(83);
          } else if (r5 == 2981) {
            r26 = 0;
            r27 = r22;
            r28 = _gcry_error346(83);
          } else if (r5 == 2983) {
            r26 = 0;
            r27 = r22;
            r28 = _gcry_error346(63);
          } else if (r5 == 2985) {
            r26 = r24;
            r27 = r22;
            r28 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          }
          if ((r28 | 0) != 0) {
            r15 = r28;
            r16 = r27;
            r17 = r12;
            r18 = r26;
            r19 = 0;
            break L3599;
          }
        }
      } while (0);
      HEAP32[r4 >> 2] = HEAP32[r10];
      r29 = 0;
      r30 = r12;
      __gcry_sexp_release(r30);
      STACKTOP = r6;
      return r29;
    }
  } while (0);
  do {
    if (r5 == 2990) {
      r4 = _gcry_error346(83);
      if ((r4 | 0) == 0) {
        r29 = 0;
        r30 = 0;
      } else {
        r15 = r4;
        r16 = 0;
        r17 = 0;
        r18 = 0;
        r19 = 0;
        break;
      }
      __gcry_sexp_release(r30);
      STACKTOP = r6;
      return r29;
    }
  } while (0);
  __gcry_ac_data_destroy(HEAP32[r10]);
  __gcry_mpi_release(r18);
  __gcry_free(r19);
  __gcry_sexp_release(r16);
  r29 = r15;
  r30 = r17;
  __gcry_sexp_release(r30);
  STACKTOP = r6;
  return r29;
}
function __gcry_ac_key_pair_extract(r1, r2) {
  var r3;
  do {
    if ((__gcry_fips_mode() | 0) == 0) {
      if ((r2 | 0) == 1) {
        r3 = HEAP32[r1 >> 2];
        break;
      } else if ((r2 | 0) == 0) {
        r3 = HEAP32[r1 + 4 >> 2];
        break;
      } else {
        r3 = 0;
        break;
      }
    } else {
      r3 = 0;
    }
  } while (0);
  return r3;
}
function __gcry_ac_key_destroy(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = (r1 | 0) >> 2;
  if ((HEAP32[r2] | 0) != 0) {
    r3 = HEAP32[r2];
    r4 = HEAP32[r3 >> 2];
    L3639 : do {
      if ((HEAP32[r3 + 4 >> 2] | 0) == 0) {
        r5 = r4;
      } else {
        r6 = 0;
        r7 = r4;
        while (1) {
          r8 = HEAP32[r7 + (r6 * 12 & -1) + 4 >> 2];
          if ((r8 | 0) != 0) {
            __gcry_mpi_release(r8);
          }
          r8 = HEAP32[HEAP32[HEAP32[r2] >> 2] + (r6 * 12 & -1) >> 2];
          if ((r8 | 0) != 0) {
            __gcry_free(r8);
          }
          r8 = r6 + 1 | 0;
          r9 = HEAP32[r2];
          r10 = HEAP32[r9 >> 2];
          if (r8 >>> 0 < HEAP32[r9 + 4 >> 2] >>> 0) {
            r6 = r8;
            r7 = r10;
          } else {
            r5 = r10;
            break L3639;
          }
        }
      }
    } while (0);
    __gcry_free(r5);
    __gcry_free(HEAP32[r2]);
  }
  __gcry_free(r1);
  return;
}
function __gcry_ac_io_init_va(r1, r2, r3, r4) {
  var r5, r6;
  r5 = r1 >> 2;
  r6 = r1 >> 2;
  HEAP32[r6] = 0;
  HEAP32[r6 + 1] = 0;
  HEAP32[r6 + 2] = 0;
  HEAP32[r6 + 3] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  if (r2 >>> 0 >= 2) {
    __gcry_assert_failed(472004, 470612, 888, 495916);
  }
  if ((r3 | 0) != 0) {
    __gcry_assert_failed(469100, 470612, 889, 495916);
  }
  HEAP32[r5] = r2;
  HEAP32[r5 + 1] = r3;
  if ((r2 | 0) == 1) {
    HEAP32[r5 + 2] = HEAP32[r4 >> 2];
    HEAP32[r5 + 3] = HEAP32[r4 + 4 >> 2];
    return;
  } else if ((r2 | 0) == 0) {
    HEAP32[r5 + 2] = HEAP32[r4 >> 2];
    HEAP32[r5 + 3] = HEAP32[r4 + 4 >> 2];
    return;
  } else {
    return;
  }
}
function __gcry_ac_key_pair_destroy(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  __gcry_ac_key_destroy(HEAP32[r1 + 4 >> 2]);
  __gcry_ac_key_destroy(HEAP32[r1 >> 2]);
  __gcry_free(r1);
  return;
}
function __gcry_ac_key_data_get(r1) {
  var r2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r2 = 0;
    return r2;
  }
  r2 = HEAP32[r1 >> 2];
  return r2;
}
function __gcry_ac_key_test(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3, r5 = r4 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r6 = _gpg_error337();
    STACKTOP = r3;
    return r6;
  }
  HEAP32[r5] = 0;
  r7 = _ac_data_construct(HEAP32[(HEAP32[r2 + 4 >> 2] << 2) + 464856 >> 2], 0, 0, HEAP32[r1 + 4 >> 2], HEAP32[r2 >> 2], r4);
  if ((r7 | 0) == 0) {
    r8 = __gcry_pk_testkey(HEAP32[r5]);
  } else {
    r8 = r7;
  }
  __gcry_sexp_release(HEAP32[r5]);
  r6 = _gcry_error346(r8);
  STACKTOP = r3;
  return r6;
}
function _ac_data_construct(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r8 = r7, r9 = r8 >> 2;
  HEAP32[r9] = 0;
  r10 = __gcry_ac_data_length(r5);
  r11 = __gcry_malloc(r10 << 3);
  r12 = r11;
  do {
    if ((r11 | 0) == 0) {
      r13 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      r14 = 0;
    } else {
      L3689 : do {
        if ((r10 | 0) != 0) {
          r15 = HEAP32[r5 >> 2];
          r16 = 0;
          while (1) {
            r17 = r16 << 1;
            HEAP32[r12 + (r17 << 2) >> 2] = r15 + (r16 * 12 & -1) | 0;
            HEAP32[r12 + ((r17 | 1) << 2) >> 2] = r15 + (r16 * 12 & -1) + 4 | 0;
            r17 = r16 + 1 | 0;
            if ((r17 | 0) == (r10 | 0)) {
              break L3689;
            } else {
              r16 = r17;
            }
          }
        }
      } while (0);
      r16 = (r2 | 0) != 0;
      r15 = r16 ? 10 : 3;
      r17 = (r4 | 0) != 0;
      if (r17) {
        r18 = _strlen(r4) + 2 | 0;
      } else {
        r18 = 0;
      }
      r19 = _strlen(r1);
      if ((r10 | 0) == 0) {
        r20 = r18 + r15 + r19 | 0;
      } else {
        r20 = r15 + r19 + r18 + (r10 * 6 & -1) | 0;
      }
      if (r16) {
        r21 = (r3 & 4 | 0) == 0 ? r20 : r20 + 12 | 0;
      } else {
        r21 = r20;
      }
      r19 = __gcry_malloc(r21);
      if ((r19 | 0) == 0) {
        r13 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r14 = 0;
        break;
      }
      HEAP8[r19] = 0;
      r15 = r19 + _strlen(r19) | 0;
      tempBigInt = 40;
      HEAP8[r15] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r15 + 1 | 0] = tempBigInt & 255;
      _strcat(r19, r1);
      if (r16) {
        r16 = r19 + _strlen(r19) | 0;
        HEAP8[r16] = HEAP8[482432];
        HEAP8[r16 + 1 | 0] = HEAP8[482433 | 0];
        HEAP8[r16 + 2 | 0] = HEAP8[482434 | 0];
        HEAP8[r16 + 3 | 0] = HEAP8[482435 | 0];
        HEAP8[r16 + 4 | 0] = HEAP8[482436 | 0];
        HEAP8[r16 + 5 | 0] = HEAP8[482437 | 0];
        HEAP8[r16 + 6 | 0] = HEAP8[482438 | 0];
        if ((r3 & 4 | 0) != 0) {
          r16 = r19 + _strlen(r19) | 0;
          tempBigInt = 32;
          HEAP8[r16] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r16 + 1 | 0] = tempBigInt & 255;
          _memcpy(r19 + _strlen(r19) | 0, 481268, 12);
        }
        r16 = r19 + _strlen(r19) | 0;
        tempBigInt = 41;
        HEAP8[r16] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[r16 + 1 | 0] = tempBigInt & 255;
      }
      if (r17) {
        r16 = r19 + _strlen(r19) | 0;
        tempBigInt = 40;
        HEAP8[r16] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[r16 + 1 | 0] = tempBigInt & 255;
        _strcat(r19, r4);
      }
      L3715 : do {
        if ((r10 | 0) != 0) {
          r16 = 0;
          while (1) {
            r15 = r19 + _strlen(r19) | 0;
            HEAP8[r15] = HEAP8[465384];
            HEAP8[r15 + 1 | 0] = HEAP8[465385 | 0];
            HEAP8[r15 + 2 | 0] = HEAP8[465386 | 0];
            HEAP8[r15 + 3 | 0] = HEAP8[465387 | 0];
            HEAP8[r15 + 4 | 0] = HEAP8[465388 | 0];
            HEAP8[r15 + 5 | 0] = HEAP8[465389 | 0];
            HEAP8[r15 + 6 | 0] = HEAP8[465390 | 0];
            r15 = r16 + 1 | 0;
            if ((r15 | 0) == (r10 | 0)) {
              break L3715;
            } else {
              r16 = r15;
            }
          }
        }
      } while (0);
      if (r17) {
        r16 = r19 + _strlen(r19) | 0;
        tempBigInt = 41;
        HEAP8[r16] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[r16 + 1 | 0] = tempBigInt & 255;
      }
      r16 = r19 + _strlen(r19) | 0;
      tempBigInt = 41;
      HEAP8[r16] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r16 + 1 | 0] = tempBigInt & 255;
      r16 = __gcry_sexp_build_array(r8, 0, r19, r12);
      if ((r16 | 0) != 0) {
        r13 = r16;
        r14 = r19;
        break;
      }
      HEAP32[r6 >> 2] = HEAP32[r9];
      r13 = 0;
      r14 = r19;
    }
  } while (0);
  __gcry_free(r14);
  __gcry_free(r11);
  if ((r13 | 0) == 0) {
    STACKTOP = r7;
    return r13;
  }
  __gcry_sexp_release(HEAP32[r9]);
  STACKTOP = r7;
  return r13;
}
function __gcry_ac_key_get_nbits(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4, r6 = r5 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r7 = _gpg_error337();
    STACKTOP = r4;
    return r7;
  }
  HEAP32[r6] = 0;
  r8 = _ac_data_construct(HEAP32[(HEAP32[r2 + 4 >> 2] << 2) + 464856 >> 2], 0, 0, HEAP32[r1 + 4 >> 2], HEAP32[r2 >> 2], r5);
  do {
    if ((r8 | 0) == 0) {
      r5 = __gcry_pk_get_nbits(HEAP32[r6]);
      if ((r5 | 0) == 0) {
        r9 = _gcry_error346(4);
        break;
      } else {
        HEAP32[r3 >> 2] = r5;
        r9 = r8;
        break;
      }
    } else {
      r9 = r8;
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r6]);
  r7 = r9;
  STACKTOP = r4;
  return r7;
}
function __gcry_ac_key_get_grip(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4, r6 = r5 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r7 = _gpg_error337();
    STACKTOP = r4;
    return r7;
  }
  HEAP32[r6] = 0;
  r8 = _ac_data_construct(HEAP32[(HEAP32[r2 + 4 >> 2] << 2) + 464856 >> 2], 0, 0, HEAP32[r1 + 4 >> 2], HEAP32[r2 >> 2], r5);
  do {
    if ((r8 | 0) == 0) {
      if ((__gcry_pk_get_keygrip(HEAP32[r6], r3) | 0) != 0) {
        r9 = 0;
        break;
      }
      r9 = _gcry_error346(65);
    } else {
      r9 = r8;
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r6]);
  r7 = r9;
  STACKTOP = r4;
  return r7;
}
function __gcry_ac_data_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r7 = r6;
  r8 = r6 + 4, r9 = r8 >> 2;
  r10 = r6 + 8, r11 = r10 >> 2;
  r12 = r6 + 12, r13 = r12 >> 2;
  r14 = r6 + 16, r15 = r14 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r16 = _gpg_error337();
    STACKTOP = r6;
    return r16;
  }
  HEAP32[r7 >> 2] = 0;
  HEAP32[r11] = 0;
  HEAP32[r13] = 0;
  HEAP32[r9] = 0;
  HEAP32[r15] = 0;
  r17 = HEAP32[r3 + 4 >> 2];
  do {
    if ((r17 | 0) == 1) {
      r18 = (r1 + 4 | 0) >> 2;
      r19 = _ac_data_construct(HEAP32[(r17 << 2) + 464856 >> 2], 0, 0, HEAP32[r18], HEAP32[r3 >> 2], r14);
      if ((r19 | 0) != 0) {
        r20 = r19;
        break;
      }
      r19 = __gcry_ac_data_new(r8);
      if ((r19 | 0) != 0) {
        r20 = r19;
        break;
      }
      r19 = __gcry_ac_data_set(HEAP32[r9], 0, 487416, r4);
      if ((r19 | 0) != 0) {
        r20 = r19;
        break;
      }
      r19 = _ac_data_construct(486480, 1, r2, HEAP32[r18], HEAP32[r9], r10);
      if ((r19 | 0) != 0) {
        r20 = r19;
        break;
      }
      r19 = __gcry_pk_encrypt(r12, HEAP32[r11], HEAP32[r15]);
      if ((r19 | 0) != 0) {
        r20 = r19;
        break;
      }
      r19 = _ac_data_extract(485624, HEAP32[r18], HEAP32[r13], r7);
      if ((r19 | 0) != 0) {
        r20 = r19;
        break;
      }
      HEAP32[r5 >> 2] = HEAP32[r7 >> 2];
      r20 = 0;
    } else {
      r20 = _gcry_error346(125);
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r11]);
  __gcry_sexp_release(HEAP32[r13]);
  __gcry_sexp_release(HEAP32[r15]);
  __gcry_ac_data_destroy(HEAP32[r9]);
  r16 = r20;
  STACKTOP = r6;
  return r16;
}
function __gcry_ac_data_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  r11 = r6 + 8, r12 = r11 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r13 = _gpg_error337();
    STACKTOP = r6;
    return r13;
  }
  HEAP32[r8] = 0;
  HEAP32[r10] = 0;
  HEAP32[r12] = 0;
  r14 = HEAP32[r3 + 4 >> 2];
  do {
    if ((r14 | 0) == 0) {
      r15 = r1 + 4 | 0;
      r16 = _ac_data_construct(HEAP32[(r14 << 2) + 464856 >> 2], 0, 0, HEAP32[r15 >> 2], HEAP32[r3 >> 2], r11);
      if ((r16 | 0) != 0) {
        r17 = r16;
        r18 = 0;
        break;
      }
      r16 = _ac_data_construct(485624, 1, r2, HEAP32[r15 >> 2], r5, r7);
      if ((r16 | 0) != 0) {
        r17 = r16;
        r18 = 0;
        break;
      }
      r16 = __gcry_pk_decrypt(r9, HEAP32[r8], HEAP32[r12]);
      if ((r16 | 0) != 0) {
        r17 = r16;
        r18 = 0;
        break;
      }
      r15 = __gcry_sexp_find_token(HEAP32[r10], 487416, 0);
      if ((r15 | 0) == 0) {
        r17 = _gcry_error346(1);
        r18 = 0;
        break;
      }
      r19 = __gcry_sexp_nth_mpi(r15, 1, 5);
      if ((r19 | 0) == 0) {
        r17 = _gcry_error346(1);
        r18 = r15;
        break;
      } else {
        HEAP32[r4 >> 2] = r19;
        r17 = r16;
        r18 = r15;
        break;
      }
    } else {
      r17 = _gcry_error346(125);
      r18 = 0;
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r8]);
  __gcry_sexp_release(HEAP32[r10]);
  __gcry_sexp_release(r18);
  __gcry_sexp_release(HEAP32[r12]);
  r13 = _gcry_error346(r17);
  STACKTOP = r6;
  return r13;
}
function __gcry_ac_data_sign(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r6 = r5;
  r7 = r5 + 4, r8 = r7 >> 2;
  r9 = r5 + 8, r10 = r9 >> 2;
  r11 = r5 + 12, r12 = r11 >> 2;
  r13 = r5 + 16, r14 = r13 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r15 = _gpg_error337();
    STACKTOP = r5;
    return r15;
  }
  HEAP32[r6 >> 2] = 0;
  HEAP32[r8] = 0;
  HEAP32[r10] = 0;
  HEAP32[r12] = 0;
  HEAP32[r14] = 0;
  r16 = HEAP32[r2 + 4 >> 2];
  do {
    if ((r16 | 0) == 0) {
      r17 = r1 + 4 | 0;
      r18 = _ac_data_construct(HEAP32[(r16 << 2) + 464856 >> 2], 0, 0, HEAP32[r17 >> 2], HEAP32[r2 >> 2], r13);
      if ((r18 | 0) != 0) {
        r19 = r18;
        break;
      }
      r18 = __gcry_ac_data_new(r7);
      if ((r18 | 0) != 0) {
        r19 = r18;
        break;
      }
      r18 = __gcry_ac_data_set(HEAP32[r8], 0, 487416, r3);
      if ((r18 | 0) != 0) {
        r19 = r18;
        break;
      }
      r18 = _ac_data_construct(486480, 1, 0, 0, HEAP32[r8], r9);
      if ((r18 | 0) != 0) {
        r19 = r18;
        break;
      }
      r18 = __gcry_pk_sign(r11, HEAP32[r10], HEAP32[r14]);
      if ((r18 | 0) != 0) {
        r19 = r18;
        break;
      }
      r18 = _ac_data_extract(484728, HEAP32[r17 >> 2], HEAP32[r12], r6);
      if ((r18 | 0) != 0) {
        r19 = r18;
        break;
      }
      HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
      r19 = 0;
    } else {
      r19 = _gcry_error346(125);
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r10]);
  __gcry_sexp_release(HEAP32[r12]);
  __gcry_sexp_release(HEAP32[r14]);
  __gcry_ac_data_destroy(HEAP32[r8]);
  r15 = _gcry_error346(r19);
  STACKTOP = r5;
  return r15;
}
function __gcry_ac_data_verify(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4, r9 = r8 >> 2;
  r10 = r5 + 8, r11 = r10 >> 2;
  r12 = r5 + 12, r13 = r12 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r14 = _gpg_error337();
    STACKTOP = r5;
    return r14;
  }
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  HEAP32[r11] = 0;
  HEAP32[r13] = 0;
  r15 = r1 + 4 | 0;
  r1 = _ac_data_construct(488108, 0, 0, HEAP32[r15 >> 2], HEAP32[r2 >> 2], r12);
  do {
    if ((r1 | 0) == 0) {
      if ((HEAP32[r2 + 4 >> 2] | 0) != 1) {
        r16 = _gcry_error346(125);
        break;
      }
      r12 = _ac_data_construct(484728, 1, 0, HEAP32[r15 >> 2], r4, r6);
      if ((r12 | 0) != 0) {
        r16 = r12;
        break;
      }
      r12 = __gcry_ac_data_new(r8);
      if ((r12 | 0) != 0) {
        r16 = r12;
        break;
      }
      r12 = __gcry_ac_data_set(HEAP32[r9], 0, 487416, r3);
      if ((r12 | 0) != 0) {
        r16 = r12;
        break;
      }
      r12 = _ac_data_construct(486480, 1, 0, 0, HEAP32[r9], r10);
      if ((r12 | 0) != 0) {
        r16 = r12;
        break;
      }
      r16 = __gcry_pk_verify(HEAP32[r7], HEAP32[r11], HEAP32[r13]);
    } else {
      r16 = r1;
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r7]);
  __gcry_sexp_release(HEAP32[r11]);
  __gcry_sexp_release(HEAP32[r13]);
  __gcry_ac_data_destroy(HEAP32[r9]);
  r14 = _gcry_error346(r16);
  STACKTOP = r5;
  return r14;
}
function __gcry_ac_data_encode(r1, r2, r3, r4, r5) {
  var r6;
  if ((__gcry_fips_mode() | 0) == 0) {
    r6 = _ac_data_dencode(r1, 0, r2, r3, r4, r5);
    return r6;
  } else {
    r6 = _gpg_error337();
    return r6;
  }
}
function _ac_data_dencode(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9;
  r7 = 0;
  while (1) {
    r8 = r7 >>> 0 < 2;
    if (!r8) {
      break;
    }
    if ((HEAP32[(r7 * 12 & -1) + 464896 >> 2] | 0) == (r1 | 0)) {
      break;
    } else {
      r7 = r7 + 1 | 0;
    }
  }
  do {
    if ((r7 | 0) == 2) {
      r9 = _gcry_error346(27);
    } else {
      if ((r2 | 0) == 0) {
        if (!r8) {
          r9 = 0;
          break;
        }
        r9 = FUNCTION_TABLE[HEAP32[(r7 * 12 & -1) + 464900 >> 2]](r3, r4, r5, r6);
        break;
      } else if ((r2 | 0) == 1) {
        if ((r7 | 0) != 0) {
          r9 = 0;
          break;
        }
        r9 = FUNCTION_TABLE[HEAP32[(r7 * 12 & -1) + 464904 >> 2]](r3, r4, r5, r6);
        break;
      } else {
        r9 = _gcry_error346(45);
        break;
      }
    }
  } while (0);
  return r9;
}
function __gcry_ac_data_decode(r1, r2, r3, r4, r5) {
  var r6;
  if ((__gcry_fips_mode() | 0) == 0) {
    r6 = _ac_data_dencode(r1, 1, r2, r3, r4, r5);
    return r6;
  } else {
    r6 = _gpg_error337();
    return r6;
  }
}
function __gcry_ac_mpi_to_os(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  if ((__gcry_fips_mode() | 0) != 0) {
    STACKTOP = r4;
    return;
  }
  r6 = __gcry_mpi_new(0);
  __gcry_mpi_set_ui(r6, 256);
  r7 = __gcry_mpi_copy(r1);
  L3849 : do {
    if ((__gcry_mpi_cmp_ui(r7, 0) | 0) == 0) {
      r8 = 0;
    } else {
      r9 = 0;
      while (1) {
        r10 = r9 + 1 | 0;
        __gcry_mpi_div(r7, 0, r7, r6, 0);
        if ((__gcry_mpi_cmp_ui(r7, 0) | 0) == 0) {
          r8 = r10;
          break L3849;
        } else {
          r9 = r10;
        }
      }
    }
  } while (0);
  __gcry_mpi_set(r7, r1);
  r1 = __gcry_mpi_new(0);
  L3853 : do {
    if ((r8 | 0) != 0 & (r3 | 0) != 0) {
      r9 = r3 - 1 | 0;
      r10 = -r8 | 0;
      r11 = -r3 | 0;
      r12 = -(r10 >>> 0 > r11 >>> 0 ? r10 : r11) | 0;
      r11 = 0;
      while (1) {
        __gcry_mpi_mod(r1, r7, r6);
        __gcry_mpi_get_ui(r1, r5);
        __gcry_mpi_div(r7, 0, r7, r6, 0);
        HEAP8[r2 + (r9 - r11) | 0] = HEAP32[r5 >> 2] & 255;
        r10 = r11 + 1 | 0;
        if ((r10 | 0) == (r12 | 0)) {
          r13 = r12;
          break L3853;
        } else {
          r11 = r10;
        }
      }
    } else {
      r13 = 0;
    }
  } while (0);
  L3858 : do {
    if (r13 >>> 0 < r3 >>> 0) {
      r5 = r3 - 1 | 0;
      r8 = r13;
      while (1) {
        HEAP8[r2 + (r5 - r8) | 0] = 0;
        r11 = r8 + 1 | 0;
        if ((r11 | 0) == (r3 | 0)) {
          break L3858;
        } else {
          r8 = r11;
        }
      }
    }
  } while (0);
  __gcry_mpi_release(r6);
  __gcry_mpi_release(r1);
  __gcry_mpi_release(r7);
  STACKTOP = r4;
  return;
}
function __gcry_ac_mpi_to_os_alloc(r1, r2, r3) {
  var r4, r5, r6;
  if ((__gcry_fips_mode() | 0) != 0) {
    r4 = _gpg_error337();
    return r4;
  }
  r5 = (__gcry_mpi_get_nbits(r1) + 7 | 0) >>> 3;
  r6 = __gcry_malloc(r5);
  if ((r6 | 0) == 0) {
    r4 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    return r4;
  } else {
    __gcry_ac_mpi_to_os(r1, r6, r5);
    HEAP32[r2 >> 2] = r6;
    HEAP32[r3 >> 2] = r5;
    r4 = 0;
    return r4;
  }
}
function __gcry_ac_os_to_mpi(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  r4 = __gcry_mpi_new(0);
  __gcry_mpi_set_ui(r4, 1);
  r5 = __gcry_mpi_new(0);
  __gcry_mpi_set_ui(r5, 0);
  r6 = __gcry_mpi_new(0);
  L3878 : do {
    if ((r3 | 0) != 0) {
      r7 = r3 - 1 | 0;
      r8 = 0;
      while (1) {
        __gcry_mpi_mul_ui(r6, r4, HEAPU8[r2 + (r7 - r8) | 0]);
        __gcry_mpi_add(r5, r5, r6);
        __gcry_mpi_mul_ui(r4, r4, 256);
        r9 = r8 + 1 | 0;
        if ((r9 | 0) == (r3 | 0)) {
          break L3878;
        } else {
          r8 = r9;
        }
      }
    }
  } while (0);
  __gcry_mpi_release(r6);
  __gcry_mpi_release(r4);
  __gcry_mpi_set(r1, r5);
  __gcry_mpi_release(r5);
  return;
}
function _ac_scheme_get(r1) {
  var r2, r3;
  r2 = 0;
  while (1) {
    if (r2 >>> 0 >= 2) {
      break;
    }
    if ((HEAP32[(r2 << 4) + 464824 >> 2] | 0) == (r1 | 0)) {
      break;
    } else {
      r2 = r2 + 1 | 0;
    }
  }
  if ((r2 | 0) == 2) {
    r3 = 0;
    return r3;
  }
  r3 = (r2 << 4) + 464824 | 0;
  return r3;
}
function __gcry_ac_data_encrypt_scheme(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  r8 = r3;
  r9 = r3 + 16, r10 = r9 >> 2;
  r11 = r3 + 20;
  r12 = r3 + 24, r13 = r12 >> 2;
  r14 = r3 + 28, r15 = r14 >> 2;
  r16 = r3 + 32, r17 = r16 >> 2;
  r18 = r3 + 36;
  r19 = r3 + 40, r20 = r19 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r21 = _gpg_error337();
    STACKTOP = r3;
    return r21;
  }
  HEAP32[r13] = 0;
  HEAP32[r15] = 0;
  HEAP32[r20] = 0;
  HEAP32[r17] = 0;
  HEAP32[r10] = 0;
  r22 = _ac_scheme_get(r2), r2 = r22 >> 2;
  do {
    if ((r22 | 0) == 0) {
      r23 = 0;
      r24 = _gcry_error346(23);
    } else {
      if ((HEAP32[r5 + 4 >> 2] | 0) != 1) {
        r23 = 0;
        r24 = _gcry_error346(125);
        break;
      }
      r25 = _ac_dencode_prepare(r1, r5, r4, HEAP32[r2 + 2], HEAP32[r2 + 3], r19);
      if ((r25 | 0) != 0) {
        r23 = 0;
        r24 = r25;
        break;
      }
      __gcry_ac_io_init(r8, 1, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r9, HEAP32[tempInt + 4 >> 2] = r11, tempInt));
      r25 = __gcry_ac_data_encode(HEAP32[r2 + 1], 0, HEAP32[r20], r6, r8);
      if ((r25 | 0) != 0) {
        r23 = 0;
        r24 = r25;
        break;
      }
      r25 = __gcry_mpi_snew(0);
      __gcry_ac_os_to_mpi(r25, HEAP32[r10], HEAP32[r11 >> 2]);
      r26 = __gcry_ac_data_encrypt(r1, 0, r5, r25, r12);
      if ((r26 | 0) != 0) {
        r23 = r25;
        r24 = r26;
        break;
      }
      r26 = _ac_data_set_to_mpi(HEAP32[r13], r14);
      if ((r26 | 0) != 0) {
        r23 = r25;
        r24 = r26;
        break;
      }
      r26 = __gcry_ac_mpi_to_os_alloc(HEAP32[r15], r16, r18);
      if ((r26 | 0) != 0) {
        r23 = r25;
        r24 = r26;
        break;
      }
      r23 = r25;
      r24 = __gcry_ac_io_write(r7, HEAP32[r17], HEAP32[r18 >> 2]);
    }
  } while (0);
  __gcry_ac_data_destroy(HEAP32[r13]);
  __gcry_mpi_release(HEAP32[r15]);
  __gcry_mpi_release(r23);
  __gcry_free(HEAP32[r20]);
  __gcry_free(HEAP32[r17]);
  __gcry_free(HEAP32[r10]);
  r21 = r24;
  STACKTOP = r3;
  return r21;
}
function _ac_dencode_prepare(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9;
  r7 = __gcry_malloc(r5);
  do {
    if ((r7 | 0) == 0) {
      r5 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      if ((r5 | 0) == 0) {
        r8 = 0;
      } else {
        r9 = r5;
        break;
      }
      return r8;
    } else {
      r5 = FUNCTION_TABLE[r4](r1, r2, r3, r7);
      if ((r5 | 0) != 0) {
        r9 = r5;
        break;
      }
      HEAP32[r6 >> 2] = r7;
      r8 = 0;
      return r8;
    }
  } while (0);
  _free(r7);
  r8 = r9;
  return r8;
}
function _ac_data_set_to_mpi(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  do {
    if ((__gcry_ac_data_length(r1) | 0) == 1) {
      r5 = __gcry_ac_data_get_index(r1, 2, 0, 0, r4);
      if ((r5 | 0) != 0) {
        r6 = r5;
        break;
      }
      HEAP32[r2 >> 2] = HEAP32[r4 >> 2];
      r6 = 0;
    } else {
      r6 = _gcry_error346(70);
    }
  } while (0);
  STACKTOP = r3;
  return r6;
}
function __gcry_ac_data_decrypt_scheme(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r8 = r3;
  r9 = r3 + 16, r10 = r9 >> 2;
  r11 = r3 + 20, r12 = r11 >> 2;
  r13 = r3 + 24;
  r14 = r3 + 28, r15 = r14 >> 2;
  r16 = r3 + 32, r17 = r16 >> 2;
  r18 = r3 + 36, r19 = r18 >> 2;
  r20 = r3 + 40, r21 = r20 >> 2;
  r22 = r3 + 44;
  if ((__gcry_fips_mode() | 0) != 0) {
    r23 = _gpg_error337();
    STACKTOP = r3;
    return r23;
  }
  HEAP32[r10] = 0;
  HEAP32[r15] = 0;
  HEAP32[r19] = 0;
  HEAP32[r17] = 0;
  HEAP32[r12] = 0;
  HEAP32[r21] = 0;
  r24 = _ac_scheme_get(r2), r2 = r24 >> 2;
  do {
    if ((r24 | 0) == 0) {
      r25 = _gcry_error346(23);
      r26 = 0;
    } else {
      if ((HEAP32[r5 + 4 >> 2] | 0) != 0) {
        r25 = _gcry_error346(125);
        r26 = 0;
        break;
      }
      r27 = __gcry_ac_io_read_all(r6, r20, r22);
      if ((r27 | 0) != 0) {
        r25 = r27;
        r26 = 0;
        break;
      }
      r27 = __gcry_mpi_snew(0);
      __gcry_ac_os_to_mpi(r27, HEAP32[r21], HEAP32[r22 >> 2]);
      r28 = __gcry_pk_get_elements(HEAP32[r1 >> 2], r18, 0);
      if ((r28 | 0) != 0) {
        r25 = r28;
        r26 = r27;
        break;
      }
      if ((_strlen(HEAP32[r19]) | 0) != 1) {
        r25 = _gcry_error346(70);
        r26 = r27;
        break;
      }
      r28 = __gcry_ac_data_new(r9);
      if ((r28 | 0) != 0) {
        r25 = r28;
        r26 = r27;
        break;
      }
      r28 = __gcry_ac_data_set(HEAP32[r10], 3, HEAP32[r19], r27);
      if ((r28 | 0) != 0) {
        r25 = r28;
        r26 = r27;
        break;
      }
      r28 = __gcry_ac_data_decrypt(r1, 0, r5, r14, HEAP32[r10]);
      if ((r28 | 0) != 0) {
        r25 = r28;
        r26 = r27;
        break;
      }
      r28 = __gcry_ac_mpi_to_os_alloc(HEAP32[r15], r11, r13);
      if ((r28 | 0) != 0) {
        r25 = r28;
        r26 = r27;
        break;
      }
      r28 = _ac_dencode_prepare(r1, r5, r4, HEAP32[r2 + 2], HEAP32[r2 + 3], r16);
      if ((r28 | 0) != 0) {
        r25 = r28;
        r26 = r27;
        break;
      }
      r28 = HEAP32[r13 >> 2];
      __gcry_ac_io_init(r8, 0, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r12], HEAP32[tempInt + 4 >> 2] = r28, tempInt));
      r25 = __gcry_ac_data_decode(HEAP32[r2 + 1], 0, HEAP32[r17], r8, r7);
      r26 = r27;
    }
  } while (0);
  __gcry_ac_data_destroy(HEAP32[r10]);
  __gcry_mpi_release(r26);
  __gcry_mpi_release(HEAP32[r15]);
  _free(HEAP32[r19]);
  __gcry_free(HEAP32[r17]);
  __gcry_free(HEAP32[r12]);
  __gcry_free(HEAP32[r21]);
  r23 = r25;
  STACKTOP = r3;
  return r23;
}
function __gcry_ac_io_read_all(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 1028 | 0;
  r6 = r5 + 1024, r7 = r6 >> 2;
  HEAP32[r7] = 1024;
  r8 = r5 | 0;
  r9 = __gcry_ac_io_read(r1, 0, r8, r6);
  L3950 : do {
    if ((r9 | 0) == 0) {
      r10 = 0;
      r11 = 0;
      while (1) {
        r12 = HEAP32[r7];
        if ((r12 | 0) == 0) {
          break;
        }
        r13 = __gcry_realloc(r11, r12 + r10 | 0);
        if ((r13 | 0) == 0) {
          r4 = 3270;
          break;
        }
        _memcpy(r13 + r10 | 0, r8, HEAP32[r7]);
        r12 = HEAP32[r7] + r10 | 0;
        HEAP32[r7] = 1024;
        r14 = __gcry_ac_io_read(r1, r12, r8, r6);
        if ((r14 | 0) == 0) {
          r10 = r12;
          r11 = r13;
        } else {
          r15 = r14;
          r16 = r13;
          break L3950;
        }
      }
      if (r4 == 3270) {
        r13 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        if ((r13 | 0) != 0) {
          r15 = r13;
          r16 = r11;
          break;
        }
      }
      HEAP32[r3 >> 2] = r10;
      HEAP32[r2 >> 2] = r11;
      r17 = 0;
      STACKTOP = r5;
      return r17;
    } else {
      r15 = r9;
      r16 = 0;
    }
  } while (0);
  __gcry_free(r16);
  r17 = r15;
  STACKTOP = r5;
  return r17;
}
function __gcry_ac_data_sign_scheme(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  r8 = r3;
  r9 = r3 + 16, r10 = r9 >> 2;
  r11 = r3 + 20, r12 = r11 >> 2;
  r13 = r3 + 24;
  r14 = r3 + 28, r15 = r14 >> 2;
  r16 = r3 + 32, r17 = r16 >> 2;
  r18 = r3 + 36;
  r19 = r3 + 40, r20 = r19 >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r21 = _gpg_error337();
    STACKTOP = r3;
    return r21;
  }
  HEAP32[r10] = 0;
  HEAP32[r20] = 0;
  HEAP32[r15] = 0;
  HEAP32[r17] = 0;
  HEAP32[r12] = 0;
  do {
    if ((HEAP32[r5 + 4 >> 2] | 0) == 0) {
      r22 = _ac_scheme_get(r2), r23 = r22 >> 2;
      if ((r22 | 0) == 0) {
        r24 = 0;
        r25 = _gcry_error346(24);
        break;
      }
      r22 = _ac_dencode_prepare(r1, r5, r4, HEAP32[r23 + 2], HEAP32[r23 + 3], r14);
      if ((r22 | 0) != 0) {
        r24 = 0;
        r25 = r22;
        break;
      }
      __gcry_ac_io_init(r8, 1, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r11, HEAP32[tempInt + 4 >> 2] = r13, tempInt));
      r22 = __gcry_ac_data_encode(HEAP32[r23 + 1], 0, HEAP32[r15], r6, r8);
      if ((r22 | 0) != 0) {
        r24 = 0;
        r25 = r22;
        break;
      }
      r22 = __gcry_mpi_new(0);
      __gcry_ac_os_to_mpi(r22, HEAP32[r12], HEAP32[r13 >> 2]);
      r23 = __gcry_ac_data_sign(r1, r5, r22, r9);
      if ((r23 | 0) != 0) {
        r24 = r22;
        r25 = r23;
        break;
      }
      r23 = _ac_data_set_to_mpi(HEAP32[r10], r19);
      if ((r23 | 0) != 0) {
        r24 = r22;
        r25 = r23;
        break;
      }
      r23 = __gcry_ac_mpi_to_os_alloc(HEAP32[r20], r16, r18);
      if ((r23 | 0) != 0) {
        r24 = r22;
        r25 = r23;
        break;
      }
      r24 = r22;
      r25 = __gcry_ac_io_write(r7, HEAP32[r17], HEAP32[r18 >> 2]);
    } else {
      r24 = 0;
      r25 = _gcry_error346(125);
    }
  } while (0);
  __gcry_ac_data_destroy(HEAP32[r10]);
  __gcry_mpi_release(HEAP32[r20]);
  __gcry_mpi_release(r24);
  __gcry_free(HEAP32[r15]);
  __gcry_free(HEAP32[r17]);
  __gcry_free(HEAP32[r12]);
  r21 = r25;
  STACKTOP = r3;
  return r21;
}
function __gcry_ac_data_verify_scheme(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  r8 = r3;
  r9 = r3 + 16, r10 = r9 >> 2;
  r11 = r3 + 20, r12 = r11 >> 2;
  r13 = r3 + 24;
  r14 = r3 + 28, r15 = r14 >> 2;
  r16 = r3 + 32, r17 = r16 >> 2;
  r18 = r3 + 36, r19 = r18 >> 2;
  r20 = r3 + 40;
  if ((__gcry_fips_mode() | 0) != 0) {
    r21 = _gpg_error337();
    STACKTOP = r3;
    return r21;
  }
  HEAP32[r17] = 0;
  HEAP32[r10] = 0;
  HEAP32[r15] = 0;
  HEAP32[r12] = 0;
  HEAP32[r19] = 0;
  do {
    if ((HEAP32[r5 + 4 >> 2] | 0) == 1) {
      r22 = _ac_scheme_get(r2), r23 = r22 >> 2;
      if ((r22 | 0) == 0) {
        r24 = _gcry_error346(24);
        r25 = 0;
        r26 = 0;
        break;
      }
      r22 = _ac_dencode_prepare(r1, r5, r4, HEAP32[r23 + 2], HEAP32[r23 + 3], r14);
      if ((r22 | 0) != 0) {
        r24 = r22;
        r25 = 0;
        r26 = 0;
        break;
      }
      __gcry_ac_io_init(r8, 1, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r11, HEAP32[tempInt + 4 >> 2] = r13, tempInt));
      r22 = __gcry_ac_data_encode(HEAP32[r23 + 1], 0, HEAP32[r15], r6, r8);
      if ((r22 | 0) != 0) {
        r24 = r22;
        r25 = 0;
        r26 = 0;
        break;
      }
      r22 = __gcry_mpi_new(0);
      __gcry_ac_os_to_mpi(r22, HEAP32[r12], HEAP32[r13 >> 2]);
      r23 = __gcry_ac_io_read_all(r7, r18, r20);
      if ((r23 | 0) != 0) {
        r24 = r23;
        r25 = r22;
        r26 = 0;
        break;
      }
      r23 = __gcry_mpi_new(0);
      __gcry_ac_os_to_mpi(r23, HEAP32[r19], HEAP32[r20 >> 2]);
      r27 = __gcry_pk_get_elements(HEAP32[r1 >> 2], 0, r16);
      if ((r27 | 0) != 0) {
        r24 = r27;
        r25 = r22;
        r26 = r23;
        break;
      }
      if ((_strlen(HEAP32[r17]) | 0) != 1) {
        r24 = _gcry_error346(70);
        r25 = r22;
        r26 = r23;
        break;
      }
      r27 = __gcry_ac_data_new(r9);
      if ((r27 | 0) != 0) {
        r24 = r27;
        r25 = r22;
        r26 = r23;
        break;
      }
      r27 = __gcry_ac_data_set(HEAP32[r10], 3, HEAP32[r17], r23);
      if ((r27 | 0) != 0) {
        r24 = r27;
        r25 = r22;
        r26 = r23;
        break;
      }
      __gcry_mpi_release(r23);
      r24 = __gcry_ac_data_verify(r1, r5, r22, HEAP32[r10]);
      r25 = r22;
      r26 = 0;
    } else {
      r24 = _gcry_error346(125);
      r25 = 0;
      r26 = 0;
    }
  } while (0);
  __gcry_ac_data_destroy(HEAP32[r10]);
  __gcry_mpi_release(r26);
  __gcry_mpi_release(r25);
  _free(HEAP32[r17]);
  __gcry_free(HEAP32[r15]);
  __gcry_free(HEAP32[r12]);
  __gcry_free(HEAP32[r19]);
  r21 = r24;
  STACKTOP = r3;
  return r21;
}
function __gcry_ac_init() {
  return (__gcry_fips_mode() | 0) == 0 ? 0 : 60;
}
function _ac_es_dencode_prepare_pkcs_v1_5(r1, r2, r3, r4) {
  var r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r3;
  r6 = __gcry_ac_key_get_nbits(r1, r2, r5);
  if ((r6 | 0) != 0) {
    STACKTOP = r3;
    return r6;
  }
  HEAP32[r4 >> 2] = HEAP32[r5 >> 2];
  STACKTOP = r3;
  return r6;
}
function _ac_ssa_dencode_prepare_pkcs_v1_5(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = __gcry_ac_key_get_nbits(r1, r2, r6);
  if ((r8 | 0) != 0) {
    STACKTOP = r5;
    return r8;
  }
  HEAP32[r7] = (HEAP32[r7] + 7 | 0) >>> 3;
  HEAP32[r4 >> 2] = HEAP32[r3 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r7];
  STACKTOP = r5;
  return r8;
}
function _eme_pkcs_v1_5_encode(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r1, r6 = r5 >> 2;
  r7 = r1 + 4, r8 = r7 >> 2;
  HEAP32[r6] = 0;
  r9 = __gcry_ac_io_read_all(r3, r5, r7);
  do {
    if ((r9 | 0) == 0) {
      r7 = HEAP32[r2 >> 2] >>> 3;
      if (HEAP32[r8] >>> 0 > (r7 - 11 | 0) >>> 0) {
        r10 = _gcry_error346(66);
        r11 = 0;
        break;
      }
      r5 = r7 - 1 | 0;
      r3 = __gcry_malloc(r5);
      if ((r3 | 0) == 0) {
        r10 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r11 = 0;
        break;
      } else {
        r12 = r7 - HEAP32[r8] | 0;
        _em_randomize_nonzero(r3 + 1 | 0, r12 - 3 | 0);
        HEAP8[r3] = 2;
        HEAP8[r3 + (r12 - 2) | 0] = 0;
        _memcpy(r3 + (r12 - 1) | 0, HEAP32[r6], HEAP32[r8]);
        r10 = __gcry_ac_io_write(r4, r3, r5);
        r11 = r3;
        break;
      }
    } else {
      r10 = r9;
      r11 = 0;
    }
  } while (0);
  __gcry_free(r11);
  __gcry_free(HEAP32[r6]);
  STACKTOP = r1;
  return r10;
}
function _eme_pkcs_v1_5_decode(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r1 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4, r9 = r8 >> 2;
  HEAP32[r7] = 0;
  r10 = __gcry_ac_io_read_all(r3, r6, r8);
  L4023 : do {
    if ((r10 | 0) == 0) {
      r8 = HEAP32[r2 >> 2] >>> 3;
      r6 = HEAP32[r9];
      r3 = HEAP32[r7];
      r11 = 0;
      while (1) {
        if (r11 >>> 0 >= r6 >>> 0) {
          r12 = r6;
          break;
        }
        if (HEAP8[r3 + r11 | 0] << 24 >> 24 == 0) {
          r1 = 3333;
          break;
        } else {
          r11 = r11 + 1 | 0;
        }
      }
      if (r1 == 3333) {
        r12 = HEAP32[r9];
      }
      do {
        if (r12 >>> 0 > 9) {
          if ((r12 | 0) != (r8 - 1 | 0)) {
            break;
          }
          if (!(HEAP8[HEAP32[r7]] << 24 >> 24 == 2 & r11 >>> 0 < r12 >>> 0 & (r11 - 1 | 0) >>> 0 > 7)) {
            break;
          }
          r3 = r11 + 1 | 0;
          r6 = __gcry_malloc(r12 - r3 | 0);
          if ((r6 | 0) == 0) {
            r13 = 0;
            r14 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
            break L4023;
          } else {
            _memcpy(r6, HEAP32[r7] + r3 | 0, HEAP32[r9] - r3 | 0);
            r13 = r6;
            r14 = __gcry_ac_io_write(r4, r6, HEAP32[r9] - r3 | 0);
            break L4023;
          }
        }
      } while (0);
      r13 = 0;
      r14 = _gcry_error346(152);
    } else {
      r13 = 0;
      r14 = r10;
    }
  } while (0);
  __gcry_free(r13);
  __gcry_free(HEAP32[r7]);
  STACKTOP = r5;
  return r14;
}
function __gcry_ac_io_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = r1 >> 2;
  if ((HEAP32[r4] | 0) != 1) {
    __gcry_assert_failed(483076, 470612, 949, 495876);
  }
  r5 = HEAP32[r4 + 1];
  if ((r5 | 0) == 1) {
    r6 = FUNCTION_TABLE[HEAP32[r4 + 2]](HEAP32[r4 + 3], r2, r3);
    return r6;
  } else if ((r5 | 0) == 0) {
    r5 = (r1 + 8 | 0) >> 2;
    r7 = HEAP32[HEAP32[r5] >> 2];
    if ((r7 | 0) != 0) {
      r8 = (r1 + 12 | 0) >> 2;
      r1 = __gcry_realloc(r7, HEAP32[HEAP32[r8] >> 2] + r3 | 0);
      if ((r1 | 0) == 0) {
        r6 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        return r6;
      }
      r7 = HEAP32[r5];
      if ((HEAP32[r7 >> 2] | 0) != (r1 | 0)) {
        HEAP32[r7 >> 2] = r1;
      }
      _memcpy(r1 + HEAP32[HEAP32[r8] >> 2] | 0, r2, r3);
      r1 = HEAP32[r8];
      HEAP32[r1 >> 2] = HEAP32[r1 >> 2] + r3 | 0;
      r6 = 0;
      return r6;
    }
    if ((__gcry_is_secure(r2) | 0) == 0) {
      r9 = __gcry_malloc(r3);
    } else {
      r9 = __gcry_malloc_secure(r3);
    }
    if ((r9 | 0) == 0) {
      r6 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      return r6;
    } else {
      _memcpy(r9, r2, r3);
      HEAP32[HEAP32[r5] >> 2] = r9;
      HEAP32[HEAP32[r4 + 3] >> 2] = r3;
      r6 = 0;
      return r6;
    }
  } else {
    r6 = 0;
    return r6;
  }
}
function __gcry_ac_io_read(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = r1 >> 2;
  if ((HEAP32[r5] | 0) != 0) {
    __gcry_assert_failed(483976, 470612, 1009, 495896);
  }
  r1 = HEAP32[r5 + 1];
  if ((r1 | 0) == 1) {
    r6 = FUNCTION_TABLE[HEAP32[r5 + 2]](HEAP32[r5 + 3], r3, r4);
    return r6;
  } else if ((r1 | 0) == 0) {
    r1 = HEAP32[r5 + 3] - r2 | 0;
    r7 = HEAP32[r4 >> 2];
    r8 = r7 >>> 0 > r1 >>> 0 ? r1 : r7;
    _memcpy(r3, HEAP32[r5 + 2] + r2 | 0, r8);
    HEAP32[r4 >> 2] = r8;
    r6 = 0;
    return r6;
  } else {
    r6 = 0;
    return r6;
  }
}
function _gpg_err_make402(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function _emsa_pkcs_v1_5_encode(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  r5 = r1, r6 = r5 >> 2;
  r7 = r1 + 4;
  r8 = r7 | 0;
  r9 = STACKTOP, r10 = r9 >> 2;
  STACKTOP = STACKTOP + 4 | 0;
  HEAP32[r6] = 0;
  r11 = r2 >> 2;
  r12 = __gcry_md_open(r5, HEAP32[r11], 0);
  do {
    if ((r12 | 0) == 0) {
      HEAP32[r10] = 100;
      r5 = __gcry_md_algo_info(HEAP32[r11], 10, r7 | 0, r9);
      if ((r5 | 0) != 0) {
        r13 = r5;
        r14 = 0;
        r15 = 0;
        r16 = 0;
        break;
      }
      r5 = __gcry_md_get_algo_dlen(HEAP32[r11]);
      r17 = __gcry_ac_io_process(r3, HEAP32[r6]);
      if ((r17 | 0) != 0) {
        r13 = r17;
        r14 = 0;
        r15 = 0;
        r16 = 0;
        break;
      }
      r17 = __gcry_md_read(HEAP32[r6], 0);
      r18 = HEAP32[r10];
      r19 = r18 + r5 | 0;
      r20 = __gcry_malloc(r19);
      if ((r20 | 0) == 0) {
        r13 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r14 = 0;
        r15 = 0;
        r16 = 0;
        break;
      }
      if ((HEAP32[r10] | 0) != 0) {
        r21 = HEAP32[r10];
        _memcpy(r20, r8, r21 >>> 0 > 1 ? r21 : 1);
      }
      L4095 : do {
        if ((r5 | 0) != 0) {
          r21 = 0;
          while (1) {
            HEAP8[r20 + HEAP32[r10] + r21 | 0] = HEAP8[r17 + r21 | 0];
            r22 = r21 + 1 | 0;
            if ((r22 | 0) == (r5 | 0)) {
              break L4095;
            } else {
              r21 = r22;
            }
          }
        }
      } while (0);
      r17 = HEAP32[r2 + 4 >> 2];
      if (r17 >>> 0 < (r19 + 11 | 0) >>> 0) {
        r13 = _gcry_error346(66);
        r14 = 0;
        r15 = r20;
        r16 = 0;
        break;
      }
      r21 = r17 - r19 | 0;
      r22 = r21 - 3 | 0;
      r23 = __gcry_malloc(r22);
      if ((r23 | 0) == 0) {
        r13 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r14 = 0;
        r15 = r20;
        r16 = 0;
        break;
      }
      if ((r22 | 0) != 0) {
        _memset(r23, -1, r17 - 3 - (r5 + r18) | 0);
      }
      r24 = __gcry_malloc(r17);
      if ((r24 | 0) == 0) {
        r13 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        r14 = 0;
        r15 = r20;
        r16 = r23;
        break;
      }
      HEAP8[r24] = 0;
      HEAP8[r24 + 1 | 0] = 1;
      if ((r22 | 0) != 0) {
        _memcpy(r24 + 2 | 0, r23, r17 - 3 - (r5 + r18) | 0);
      }
      HEAP8[r24 + (r21 - 1) | 0] = 0;
      if ((r19 | 0) != 0) {
        r21 = r5 + r18 | 0;
        _memcpy(r24 + (r17 - r21) | 0, r20, r21);
      }
      r13 = __gcry_ac_io_write(r4, r24, r17);
      r14 = r24;
      r15 = r20;
      r16 = r23;
    } else {
      r13 = r12;
      r14 = 0;
      r15 = 0;
      r16 = 0;
    }
  } while (0);
  __gcry_md_close(HEAP32[r6]);
  __gcry_free(r14);
  __gcry_free(r16);
  __gcry_free(r15);
  STACKTOP = r1;
  return r13;
}
function __gcry_ac_io_process(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 1028 | 0;
  r4 = r3 + 1024, r5 = r4 >> 2;
  HEAP32[r5] = 1024;
  r6 = r3 | 0;
  r7 = __gcry_ac_io_read(r1, 0, r6, r4);
  L4119 : do {
    if ((r7 | 0) == 0) {
      r8 = 0;
      while (1) {
        r9 = HEAP32[r5];
        if ((r9 | 0) == 0) {
          r10 = 0;
          break L4119;
        }
        r11 = _emsa_pkcs_v1_5_encode_data_cb(r2, r6, r9);
        if ((r11 | 0) != 0) {
          r10 = r11;
          break L4119;
        }
        r11 = HEAP32[r5] + r8 | 0;
        HEAP32[r5] = 1024;
        r9 = __gcry_ac_io_read(r1, r11, r6, r4);
        if ((r9 | 0) == 0) {
          r8 = r11;
        } else {
          r10 = r9;
          break L4119;
        }
      }
    } else {
      r10 = r7;
    }
  } while (0);
  STACKTOP = r3;
  return r10;
}
function _emsa_pkcs_v1_5_encode_data_cb(r1, r2, r3) {
  __gcry_md_write(r1, r2, r3);
  return 0;
}
function _em_randomize_nonzero(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r3 = 0;
  if ((r2 | 0) != 0) {
    _memset(r1, 0, r2);
  }
  r4 = (r2 | 0) != 0;
  r5 = 0;
  r6 = 0;
  while (1) {
    if (r5 >>> 0 < r2 >>> 0) {
      r7 = (HEAP8[r1 + r5 | 0] << 24 >> 24 == 0 & 1) + r6 | 0;
      r5 = r5 + 1 | 0;
      r6 = r7;
      continue;
    }
    if ((r6 | 0) == 0) {
      r3 = 3424;
      break;
    }
    r7 = (r6 >>> 7) + r6 | 0;
    r8 = __gcry_random_bytes_secure(r7, 1);
    if (r4 & (r7 | 0) != 0) {
      r9 = r6;
      r10 = 0;
      r11 = 0;
    } else {
      __gcry_free(r8);
      r5 = 0;
      r6 = 0;
      continue;
    }
    L4138 : while (1) {
      r12 = r1 + r10 | 0;
      if (HEAP8[r12] << 24 >> 24 == 0) {
        r13 = r11;
        while (1) {
          if (r13 >>> 0 >= r7 >>> 0) {
            r14 = r9;
            break L4138;
          }
          r15 = HEAP8[r8 + r13 | 0];
          r16 = r13 + 1 | 0;
          if (r15 << 24 >> 24 == 0) {
            r13 = r16;
          } else {
            break;
          }
        }
        HEAP8[r12] = r15;
        r17 = r16;
        r18 = r9 - 1 | 0;
      } else {
        r17 = r11;
        r18 = r9;
      }
      r13 = r10 + 1 | 0;
      if ((r18 | 0) != 0 & r13 >>> 0 < r2 >>> 0 & r17 >>> 0 < r7 >>> 0) {
        r9 = r18;
        r10 = r13;
        r11 = r17;
      } else {
        r14 = r18;
        break;
      }
    }
    __gcry_free(r8);
    if ((r14 | 0) == 0) {
      r3 = 3423;
      break;
    } else {
      r5 = 0;
      r6 = 0;
    }
  }
  if (r3 == 3423) {
    return;
  } else if (r3 == 3424) {
    return;
  }
}
function _gcry_err_make401(r1) {
  return _gpg_err_make402(32, r1);
}
function __gcry_cipher_register(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  if ((__gcry_fips_mode() | 0) != 0) {
    r7 = _gpg_error425(60);
    STACKTOP = r5;
    return r7;
  }
  __gcry_ath_mutex_lock(459436);
  r8 = __gcry_module_add(459440, 0, r1, (r2 | 0) != 0 ? r2 : 457400, r6);
  __gcry_ath_mutex_unlock(459436);
  if ((r8 | 0) == 0) {
    HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r3 >> 2] = HEAP32[HEAP32[r6 >> 2] + 24 >> 2];
  }
  r7 = _gcry_error426(r8);
  STACKTOP = r5;
  return r7;
}
function _gpg_error425(r1) {
  return _gpg_err_make463(1, r1);
}
function _gcry_error426(r1) {
  return _gcry_err_make462(r1);
}
function __gcry_cipher_unregister(r1) {
  __gcry_ath_mutex_lock(459436);
  __gcry_module_release(r1);
  __gcry_ath_mutex_unlock(459436);
  return;
}
function __gcry_cipher_map_name(r1) {
  var r2, r3, r4, r5, r6;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2, r4 = r3 >> 2;
  HEAP32[r4] = 0;
  if ((r1 | 0) == 0) {
    r5 = 0;
    STACKTOP = r2;
    return r5;
  }
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  do {
    if ((_search_oid(r1, r3, 0) | 0) == 0) {
      r6 = _gcry_cipher_lookup_name(r1);
      if ((r6 | 0) == 0) {
        break;
      }
      HEAP32[r4] = HEAP32[r6 + 24 >> 2];
      __gcry_module_release(r6);
    }
  } while (0);
  __gcry_ath_mutex_unlock(459436);
  r5 = HEAP32[r4];
  STACKTOP = r2;
  return r5;
}
function _search_oid(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  do {
    if ((r1 | 0) == 0) {
      r4 = 0;
    } else {
      if ((_strncmp(r1, 483052, 4) | 0) != 0) {
        if ((_strncmp(r1, 482416, 4) | 0) != 0) {
          r4 = r1;
          break;
        }
      }
      r4 = r1 + 4 | 0;
    }
  } while (0);
  r1 = _gcry_cipher_lookup_oid(r4);
  if ((r1 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  r6 = (HEAP32[r1 + 8 >> 2] + 8 | 0) >> 2;
  r7 = HEAP32[HEAP32[r6] >> 2];
  L4185 : do {
    if ((r7 | 0) == 0) {
      r8 = 0;
    } else {
      r9 = (r2 | 0) == 0;
      r10 = (r3 | 0) == 0;
      r11 = r3;
      r12 = r1 + 24 | 0;
      r13 = 0;
      r14 = 0;
      r15 = r7;
      while (1) {
        do {
          if ((_strcasecmp(r4, r15) | 0) == 0) {
            if (!r9) {
              HEAP32[r2 >> 2] = HEAP32[r12 >> 2];
            }
            if (r10) {
              r16 = 1;
              break;
            }
            r17 = (r14 << 3) + HEAP32[r6] | 0;
            r18 = HEAP32[r17 + 4 >> 2];
            HEAP32[r11 >> 2] = HEAP32[r17 >> 2];
            HEAP32[r11 + 4 >> 2] = r18;
            r16 = 1;
          } else {
            r16 = r13;
          }
        } while (0);
        r18 = r14 + 1 | 0;
        r17 = HEAP32[HEAP32[r6] + (r18 << 3) >> 2];
        if ((r17 | 0) != 0 & (r16 | 0) == 0) {
          r13 = r16;
          r14 = r18;
          r15 = r17;
        } else {
          r8 = r16;
          break L4185;
        }
      }
    }
  } while (0);
  __gcry_module_release(r1);
  r5 = r8;
  return r5;
}
function _gcry_cipher_lookup_name(r1) {
  return __gcry_module_lookup(HEAP32[114860], r1, 204);
}
function __gcry_cipher_mode_from_oid(r1) {
  var r2, r3, r4, r5;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r2;
  if ((r1 | 0) == 0) {
    r4 = 0;
    STACKTOP = r2;
    return r4;
  }
  __gcry_ath_mutex_lock(459436);
  if ((_search_oid(r1, 0, r3) | 0) == 0) {
    r5 = 0;
  } else {
    r5 = HEAP32[r3 + 4 >> 2];
  }
  __gcry_ath_mutex_unlock(459436);
  r4 = r5;
  STACKTOP = r2;
  return r4;
}
function __gcry_cipher_algo_name(r1) {
  return _cipher_algo_to_string(r1);
}
function _cipher_algo_to_string(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  r2 = __gcry_module_lookup_id(HEAP32[114860], r1);
  if ((r2 | 0) == 0) {
    r3 = 483972;
    r4 = __gcry_ath_mutex_unlock(459436);
    return r3;
  }
  r1 = HEAP32[HEAP32[r2 + 8 >> 2] >> 2];
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(459436);
  return r3;
}
function __gcry_cipher_open(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r5 = 0;
  r6 = r4 & 1;
  __gcry_fast_random_poll();
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  r7 = __gcry_module_lookup_id(HEAP32[114860], r2), r8 = r7 >> 2;
  r9 = (r7 | 0) != 0;
  do {
    if (r9) {
      if ((HEAP32[r8 + 4] & 1 | 0) != 0) {
        r5 = 3484;
        break;
      }
      r10 = HEAP32[r8 + 2], r11 = r10 >> 2;
      r12 = r10;
      r10 = HEAP32[r8 + 3];
      __gcry_ath_mutex_unlock(459436);
      r13 = r4 >>> 0 > 15;
      r14 = r13 ? 12 : 0;
      if (r13) {
        r15 = r14;
        r16 = 0;
        break;
      }
      if ((r3 | 0) == 1 | (r3 | 0) == 3 | (r3 | 0) == 2 | (r3 | 0) == 5 | (r3 | 0) == 6 | (r3 | 0) == 7) {
        if ((HEAP32[r11 + 7] | 0) == 214) {
          r15 = 71;
          r16 = 0;
          break;
        }
        r17 = (HEAP32[r11 + 8] | 0) == 388;
        if (r17 | r13) {
          r15 = r17 ? 71 : r14;
          r16 = 0;
          break;
        }
      } else if ((r3 | 0) == 0) {
        if ((__gcry_fips_mode() | 0) != 0) {
          r15 = 71;
          r16 = 0;
          break;
        }
        r17 = (__gcry_get_debug_flag(0) | 0) == 0;
        if (r17 | r13) {
          r15 = r17 ? 71 : r14;
          r16 = 0;
          break;
        }
      } else if ((r3 | 0) == 4) {
        if ((HEAP32[r11 + 9] | 0) == 144) {
          r15 = 71;
          r16 = 0;
          break;
        }
        r17 = (HEAP32[r11 + 10] | 0) == 366;
        if (r17 | r13) {
          r15 = r17 ? 71 : r14;
          r16 = 0;
          break;
        }
      } else {
        r15 = 71;
        r16 = 0;
        break;
      }
      r17 = (HEAP32[r11 + 5] << 1) + 143 | 0;
      r11 = (r6 | 0) != 0;
      if (r11) {
        r18 = __gcry_calloc_secure(1, r17);
      } else {
        r18 = __gcry_calloc(1, r17);
      }
      r13 = r18;
      if ((r18 | 0) == 0) {
        r15 = _gpg_err_code_from_syserror();
        r16 = r13;
        break;
      }
      r19 = r18 & 15;
      if ((r19 | 0) == 0) {
        r20 = 0;
        r21 = r13, r22 = r21 >> 2;
      } else {
        r13 = 16 - r19 | 0;
        r20 = r13;
        r21 = r18 + r13 | 0, r22 = r21 >> 2;
      }
      HEAP32[r22] = r11 ? 1183944770 : 604576100;
      HEAP32[r22 + 1] = r17 - r20 | 0;
      HEAP32[r22 + 2] = r20;
      HEAP32[r22 + 3] = r12;
      HEAP32[r22 + 4] = r10;
      HEAP32[r22 + 5] = r7;
      HEAP32[r22 + 6] = r2;
      HEAP32[r22 + 12] = r3;
      HEAP32[r22 + 13] = r4;
      if ((r2 - 7 | 0) >>> 0 >= 3) {
        r15 = r14;
        r16 = r21;
        break;
      }
      HEAP32[r22 + 7] = 110;
      HEAP32[r22 + 8] = 152;
      HEAP32[r22 + 9] = 382;
      HEAP32[r22 + 10] = 140;
      HEAP32[r22 + 11] = 122;
      r15 = r14;
      r16 = r21;
      break;
    } else {
      r5 = 3484;
    }
  } while (0);
  if (r5 == 3484) {
    __gcry_ath_mutex_unlock(459436);
    r15 = 12;
    r16 = 0;
  }
  r5 = (r15 | 0) != 0;
  if (!(r5 & r9)) {
    r23 = r5 ? 0 : r16;
    HEAP32[r1 >> 2] = r23;
    r24 = _gcry_error426(r15);
    return r24;
  }
  __gcry_ath_mutex_lock(459436);
  __gcry_module_release(r7);
  __gcry_ath_mutex_unlock(459436);
  r23 = r5 ? 0 : r16;
  HEAP32[r1 >> 2] = r23;
  r24 = _gcry_error426(r15);
  return r24;
}
function __gcry_cipher_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7;
  if ((r4 | 0) == 0) {
    r6 = _cipher_encrypt(r1, r2, r3, r2, r3);
  } else {
    r6 = _cipher_encrypt(r1, r2, r3, r4, r5);
  }
  if ((r6 | 0) == 0 | (r2 | 0) == 0) {
    r7 = _gcry_error426(r6);
    return r7;
  }
  _memset(r2, 66, r3);
  r7 = _gcry_error426(r6);
  return r7;
}
function _cipher_register_default() {
  var r1, r2, r3, r4, r5;
  r1 = 0;
  r2 = 0;
  while (1) {
    r3 = ((r2 << 4) + 459444 | 0) >> 2;
    if ((r2 | 0) == 18) {
      r1 = 3532;
      break;
    }
    r4 = HEAP32[r3] + 24 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 92;
    }
    r4 = HEAP32[r3] + 28 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 214;
    }
    r4 = HEAP32[r3] + 32 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 388;
    }
    r4 = HEAP32[r3] + 36 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 144;
    }
    r4 = HEAP32[r3] + 40 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 366;
    }
    do {
      if ((__gcry_fips_mode() | 0) == 0) {
        r1 = 3529;
      } else {
        if ((228 >>> (r2 >>> 0) & 1 | 0) == 0) {
          r5 = 1;
          break;
        } else {
          r1 = 3529;
          break;
        }
      }
    } while (0);
    if (r1 == 3529) {
      r1 = 0;
      r5 = (__gcry_module_add(459440, HEAP32[(r2 << 4) + 459452 >> 2], HEAP32[r3], HEAP32[(r2 << 4) + 459448 >> 2], 0) | 0) == 0;
    }
    if (r5) {
      r2 = r2 + 1 | 0;
    } else {
      r1 = 3531;
      break;
    }
  }
  if (r1 == 3531) {
    __gcry_bug(479816, 326, 495320);
  } else if (r1 == 3532) {
    return;
  }
}
function _dummy_encrypt_block(r1, r2, r3) {
  __gcry_bug(479816, 255, 495148);
}
function _dummy_decrypt_block(r1, r2, r3) {
  __gcry_bug(479816, 265, 495208);
}
function _dummy_encrypt_stream(r1, r2, r3, r4) {
  __gcry_bug(479816, 277, 495124);
}
function _dummy_decrypt_stream(r1, r2, r3, r4) {
  __gcry_bug(479816, 289, 495184);
}
function __gcry_cipher_close(r1) {
  var r2, r3, r4, r5, r6;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = r1 | 0;
  r3 = HEAP32[r2 >> 2];
  if (!((r3 | 0) == 1183944770 | (r3 | 0) == 604576100)) {
    __gcry_fatal_error(63, 474556);
  }
  HEAP32[r2 >> 2] = 0;
  __gcry_ath_mutex_lock(459436);
  __gcry_module_release(HEAP32[r1 + 20 >> 2]);
  __gcry_ath_mutex_unlock(459436);
  r2 = HEAP32[r1 + 8 >> 2];
  r3 = r1;
  r4 = HEAP32[r1 + 4 >> 2];
  L4297 : do {
    if ((r4 | 0) != 0) {
      r1 = r3;
      r5 = r4;
      while (1) {
        HEAP8[r1] = 0;
        r6 = r5 - 1 | 0;
        if ((r6 | 0) == 0) {
          break L4297;
        } else {
          r1 = r1 + 1 | 0;
          r5 = r6;
        }
      }
    }
  } while (0);
  __gcry_free(r3 + -r2 | 0);
  return;
}
function _gpg_err_code451(r1) {
  return r1 & 65535;
}
function __gcry_cipher_decrypt(r1, r2, r3, r4, r5) {
  var r6;
  if ((r4 | 0) == 0) {
    r6 = _cipher_decrypt(r1, r2, r3, r2, r3);
  } else {
    r6 = _cipher_decrypt(r1, r2, r3, r4, r5);
  }
  return _gcry_error426(r6);
}
function __gcry_cipher_setkey(r1, r2, r3) {
  return _cipher_setkey(r1, r2, r3);
}
function _cipher_setkey(r1, r2, r3) {
  var r4, r5, r6;
  r4 = r1 + 12 | 0;
  r5 = r1 + 128 | 0;
  r6 = FUNCTION_TABLE[HEAP32[HEAP32[r4 >> 2] + 24 >> 2]](r5, r2, r3);
  if ((r6 | 0) == 0) {
    r3 = HEAP32[HEAP32[r4 >> 2] + 20 >> 2];
    _memcpy(r5 + r3 | 0, r5, r3);
    r3 = r1 + 56 | 0;
    HEAP32[r3 >> 2] = HEAP32[r3 >> 2] | 1;
    r3 = _gcry_error426(r6);
    return r3;
  } else {
    r5 = r1 + 56 | 0;
    HEAP32[r5 >> 2] = HEAP32[r5 >> 2] & -2;
    r3 = _gcry_error426(r6);
    return r3;
  }
}
function __gcry_cipher_setiv(r1, r2, r3) {
  _cipher_setiv(r1, r2, r3);
  return 0;
}
function _cipher_setiv(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  r5 = r1 + 64 | 0;
  r6 = (r1 + 12 | 0) >> 2;
  _memset(r5, 0, HEAP32[HEAP32[r6] + 12 >> 2]);
  if ((r2 | 0) == 0) {
    r7 = r1 + 56 | 0;
    HEAP32[r7 >> 2] = HEAP32[r7 >> 2] & -3;
    r8 = r1 + 112 | 0;
    HEAP32[r8 >> 2] = 0;
    STACKTOP = r4;
    return;
  }
  r7 = HEAP32[HEAP32[r6] + 12 >> 2];
  if ((r7 | 0) != (r3 | 0)) {
    __gcry_log_info(489580, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
    __gcry_fips_signal_error(479816, 924, 495304, 0, 488052);
  }
  r7 = HEAP32[HEAP32[r6] + 12 >> 2];
  _memcpy(r5, r2, r7 >>> 0 < r3 >>> 0 ? r7 : r3);
  r3 = r1 + 56 | 0;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] | 2;
  r8 = r1 + 112 | 0;
  HEAP32[r8 >> 2] = 0;
  STACKTOP = r4;
  return;
}
function __gcry_cipher_setctr(r1, r2, r3) {
  var r4, r5, r6;
  r4 = (r2 | 0) != 0;
  do {
    if (r4) {
      r5 = HEAP32[HEAP32[r1 + 12 >> 2] + 12 >> 2];
      if ((r5 | 0) == (r3 | 0)) {
        _memcpy(r1 + 80 | 0, r2, r5);
        HEAP32[r1 + 112 >> 2] = 0;
        r6 = 0;
        return r6;
      }
      if ((r3 | 0) == 0 | r4 ^ 1) {
        break;
      }
      r6 = _gpg_error425(45);
      return r6;
    }
  } while (0);
  _memset(r1 + 80 | 0, 0, HEAP32[HEAP32[r1 + 12 >> 2] + 12 >> 2]);
  HEAP32[r1 + 112 >> 2] = 0;
  r6 = 0;
  return r6;
}
function _cipher_reset(r1) {
  var r2, r3, r4;
  r2 = r1 + 128 | 0;
  r3 = (r1 + 12 | 0) >> 2;
  r4 = HEAP32[HEAP32[r3] + 20 >> 2];
  _memcpy(r2, r2 + r4 | 0, r4);
  HEAP32[r1 + 56 >> 2] = 0;
  _memset(r1 + 64 | 0, 0, HEAP32[HEAP32[r3] + 12 >> 2]);
  _memset(r1 + 96 | 0, 0, HEAP32[HEAP32[r3] + 12 >> 2]);
  _memset(r1 + 80 | 0, 0, HEAP32[HEAP32[r3] + 12 >> 2]);
  return;
}
function _cipher_sync(r1) {
  var r2, r3, r4, r5;
  if ((HEAP32[r1 + 52 >> 2] & 2 | 0) == 0) {
    return;
  }
  r2 = (r1 + 112 | 0) >> 2;
  r3 = HEAP32[r2];
  if ((r3 | 0) == 0) {
    return;
  }
  r4 = r1 + 64 | 0;
  r5 = r1 + 12 | 0;
  _memmove(r4 + r3 | 0, r4, HEAP32[HEAP32[r5 >> 2] + 12 >> 2] - r3 | 0, 1, 0);
  r3 = HEAP32[r2];
  _memcpy(r4, HEAP32[HEAP32[r5 >> 2] + 12 >> 2] - r3 + r1 + 96 | 0, r3);
  HEAP32[r2] = 0;
  return;
}
function _disable_cipher_algo(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  r2 = __gcry_module_lookup_id(HEAP32[114860], r1);
  if ((r2 | 0) == 0) {
    r3 = __gcry_ath_mutex_unlock(459436);
    return;
  }
  r1 = r2 + 16 | 0;
  r4 = HEAP32[r1 >> 2];
  if ((r4 & 1 | 0) == 0) {
    HEAP32[r1 >> 2] = r4 | 1;
  }
  __gcry_module_release(r2);
  r3 = __gcry_ath_mutex_unlock(459436);
  return;
}
function __gcry_cipher_info(r1, r2, r3, r4) {
  return _gcry_error426(61);
}
function __gcry_cipher_algo_info(r1, r2, r3, r4) {
  var r5, r6;
  do {
    if ((r2 | 0) == 6) {
      if ((r3 | 0) != 0 | (r4 | 0) == 0) {
        r5 = 12;
        break;
      }
      r6 = _cipher_get_keylen(r1);
      if (!((r6 | 0) != 0 & r6 >>> 0 < 513)) {
        r5 = 12;
        break;
      }
      HEAP32[r4 >> 2] = r6 >>> 3;
      r5 = 0;
    } else if ((r2 | 0) == 8) {
      if (!((r3 | 0) == 0 & (r4 | 0) == 0)) {
        r5 = 45;
        break;
      }
      r5 = _check_cipher_algo(r1);
    } else if ((r2 | 0) == 7) {
      if ((r3 | 0) != 0 | (r4 | 0) == 0) {
        r5 = 12;
        break;
      }
      r6 = _cipher_get_blocksize(r1);
      if (!((r6 | 0) != 0 & r6 >>> 0 < 1e4)) {
        r5 = 12;
        break;
      }
      HEAP32[r4 >> 2] = r6;
      r5 = 0;
    } else {
      r5 = 61;
    }
  } while (0);
  return _gcry_error426(r5);
}
function _check_cipher_algo(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  r2 = __gcry_module_lookup_id(HEAP32[114860], r1);
  if ((r2 | 0) == 0) {
    r3 = 12;
    r4 = __gcry_ath_mutex_unlock(459436);
    return r3;
  }
  r1 = (HEAP32[r2 + 16 >> 2] & 1 | 0) == 0 ? 0 : 12;
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(459436);
  return r3;
}
function __gcry_cipher_get_algo_keylen(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2;
  if ((__gcry_cipher_algo_info(r1, 6, 0, r3) | 0) != 0) {
    HEAP32[r3 >> 2] = 0;
  }
  STACKTOP = r2;
  return HEAP32[r3 >> 2];
}
function __gcry_cipher_get_algo_blklen(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2;
  if ((__gcry_cipher_algo_info(r1, 7, 0, r3) | 0) != 0) {
    HEAP32[r3 >> 2] = 0;
  }
  STACKTOP = r2;
  return HEAP32[r3 >> 2];
}
function __gcry_cipher_init() {
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  return 0;
}
function __gcry_cipher_list(r1, r2) {
  __gcry_ath_mutex_lock(459436);
  __gcry_module_list(HEAP32[114860], r1, r2);
  __gcry_ath_mutex_unlock(459436);
  return 0;
}
function __gcry_cipher_selftest(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  r5 = __gcry_module_lookup_id(HEAP32[114860], r1), r6 = r5 >> 2;
  r7 = (r5 | 0) != 0;
  do {
    if (r7) {
      if ((HEAP32[r6 + 4] & 1 | 0) != 0) {
        r4 = 3626;
        break;
      }
      r8 = HEAP32[r6 + 3];
      __gcry_ath_mutex_unlock(459436);
      if ((r8 | 0) == 0) {
        r4 = 3630;
        break;
      }
      r9 = HEAP32[r8 >> 2];
      if ((r9 | 0) == 0) {
        r4 = 3630;
        break;
      }
      r10 = FUNCTION_TABLE[r9](r1, r2, r3);
      break;
    } else {
      r4 = 3626;
    }
  } while (0);
  do {
    if (r4 == 3626) {
      __gcry_ath_mutex_unlock(459436);
      r4 = 3630;
      break;
    }
  } while (0);
  do {
    if (r4 == 3630) {
      if ((r3 | 0) == 0) {
        r10 = 12;
        break;
      }
      do {
        if (r7) {
          if ((HEAP32[r6 + 4] & 1 | 0) == 0) {
            r11 = 471860;
            break;
          } else {
            r4 = 3633;
            break;
          }
        } else {
          r4 = 3633;
        }
      } while (0);
      if (r4 == 3633) {
        r11 = r7 ? 470512 : 468948;
      }
      FUNCTION_TABLE[r3](476288, r1, 473484, r11);
      r10 = 12;
    }
  } while (0);
  if (!r7) {
    r12 = _gpg_error425(r10);
    return r12;
  }
  __gcry_ath_mutex_lock(459436);
  __gcry_module_release(r5);
  __gcry_ath_mutex_unlock(459436);
  r12 = _gpg_error425(r10);
  return r12;
}
function _do_ecb_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = r1 + 12 | 0;
  r7 = HEAP32[HEAP32[r6 >> 2] + 12 >> 2];
  if (r3 >>> 0 < r5 >>> 0) {
    r8 = 200;
    return r8;
  }
  if (((r5 >>> 0) % (r7 >>> 0) | 0) != 0) {
    r8 = 139;
    return r8;
  }
  r3 = Math.floor((r5 >>> 0) / (r7 >>> 0));
  if ((r3 | 0) == 0) {
    r8 = 0;
    return r8;
  }
  r5 = r1 + 128 | 0;
  r1 = r4;
  r4 = r2;
  r2 = 0;
  while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[r6 >> 2] + 32 >> 2]](r5, r4, r1);
    r9 = r2 + 1 | 0;
    if (r9 >>> 0 < r3 >>> 0) {
      r1 = r1 + r7 | 0;
      r4 = r4 + r7 | 0;
      r2 = r9;
    } else {
      r8 = 0;
      break;
    }
  }
  return r8;
}
function _cipher_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8;
  r6 = STACKTOP;
  r7 = HEAP32[r1 + 48 >> 2];
  L4427 : do {
    if ((r7 | 0) == 1) {
      r8 = _do_ecb_encrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 2) {
      r8 = _do_cfb_encrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 5) {
      r8 = _do_ofb_encrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 7) {
      r8 = _do_aeswrap_encrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 3) {
      r8 = _do_cbc_encrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 6) {
      r8 = _do_ctr_encrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 4) {
      FUNCTION_TABLE[HEAP32[HEAP32[r1 + 12 >> 2] + 36 >> 2]](r1 + 128 | 0, r2, r4, r5);
      r8 = 0;
    } else if ((r7 | 0) == 0) {
      do {
        if ((__gcry_fips_mode() | 0) == 0) {
          if ((__gcry_get_debug_flag(0) | 0) == 0) {
            break;
          }
          if ((r4 | 0) == (r2 | 0)) {
            r8 = 0;
            break L4427;
          }
          _memmove(r2, r4, r5, 1, 0);
          r8 = 0;
          break L4427;
        }
      } while (0);
      __gcry_fips_signal_error(479816, 1742, 495344, 0, 487368);
      r8 = 71;
    } else {
      __gcry_log_fatal(484632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
    }
  } while (0);
  STACKTOP = r6;
  return r8;
}
function _cipher_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8;
  r6 = STACKTOP;
  r7 = HEAP32[r1 + 48 >> 2];
  L4444 : do {
    if ((r7 | 0) == 1) {
      r8 = _do_ecb_decrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 7) {
      r8 = _do_aeswrap_decrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 6) {
      r8 = _do_ctr_decrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 2) {
      r8 = _do_cfb_decrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 4) {
      FUNCTION_TABLE[HEAP32[HEAP32[r1 + 12 >> 2] + 40 >> 2]](r1 + 128 | 0, r2, r4, r5);
      r8 = 0;
    } else if ((r7 | 0) == 5) {
      r8 = _do_ofb_decrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 3) {
      r8 = _do_cbc_decrypt(r1, r2, r3, r4, r5);
    } else if ((r7 | 0) == 0) {
      do {
        if ((__gcry_fips_mode() | 0) == 0) {
          if ((__gcry_get_debug_flag(0) | 0) == 0) {
            break;
          }
          if ((r4 | 0) == (r2 | 0)) {
            r8 = 0;
            break L4444;
          }
          _memmove(r2, r4, r5, 1, 0);
          r8 = 0;
          break L4444;
        }
      } while (0);
      __gcry_fips_signal_error(479816, 1834, 495360, 0, 487368);
      r8 = 71;
    } else {
      __gcry_log_fatal(486436, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
    }
  } while (0);
  STACKTOP = r6;
  return r8;
}
function __gcry_cipher_ctl(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  L4461 : do {
    if ((r2 | 0) == 1) {
      r5 = _cipher_setkey(r1, r3, r4);
    } else if ((r2 | 0) == 4) {
      _cipher_reset(r1);
      r5 = 0;
    } else if ((r2 | 0) == 61) {
      r6 = HEAP32[HEAP32[r1 + 16 >> 2] + 4 >> 2];
      if ((r6 | 0) == 0) {
        r5 = 60;
        break;
      }
      r5 = FUNCTION_TABLE[r6](r1 + 128 | 0, 1, 0, 0);
    } else if ((r2 | 0) == 3) {
      _cipher_sync(r1);
      r5 = 0;
    } else if ((r2 | 0) == 42) {
      r6 = (r1 + 52 | 0) >> 2;
      r7 = HEAP32[r6];
      if ((r4 | 0) == 0) {
        HEAP32[r6] = r7 & -9;
        r5 = 0;
        break;
      }
      if ((r7 & 4 | 0) != 0) {
        r5 = 72;
        break;
      }
      HEAP32[r6] = r7 | 8;
      r5 = 0;
    } else if ((r2 | 0) == 12) {
      if ((r3 | 0) != 0 & (r1 | 0) == 0 & (r4 | 0) == 4) {
        _disable_cipher_algo(HEAP32[r3 >> 2]);
        r5 = 0;
        break;
      }
      r8 = _gcry_error426(12);
      return r8;
    } else if ((r2 | 0) == 43) {
      r5 = _gpg_err_code451(__gcry_cipher_setctr(r1, r3, r4));
    } else if ((r2 | 0) == 2) {
      _cipher_setiv(r1, r3, r4);
      r5 = 0;
    } else if ((r2 | 0) == 41) {
      r7 = (r1 + 52 | 0) >> 2;
      r6 = HEAP32[r7];
      if ((r4 | 0) == 0) {
        HEAP32[r7] = r6 & -5;
        r5 = 0;
        break;
      }
      if ((r6 & 8 | 0) != 0) {
        r5 = 72;
        break;
      }
      HEAP32[r7] = r6 | 4;
      r5 = 0;
    } else if ((r2 | 0) == 62) {
      r6 = r1 + 12 | 0;
      r7 = HEAP32[HEAP32[r6 >> 2] + 12 >> 2];
      if ((r7 + 1 | 0) >>> 0 > r4 >>> 0) {
        r5 = 66;
        break;
      }
      r9 = HEAP32[r1 + 112 >> 2];
      r10 = (r9 | 0) == 0 ? r7 : r9;
      if (r10 >>> 0 > r7 >>> 0) {
        __gcry_assert_failed(486908, 479816, 2004, 495856);
      }
      HEAP8[r3] = r10 & 255;
      if ((r10 | 0) == 0) {
        r5 = 0;
        break;
      }
      r7 = r1 + (HEAP32[HEAP32[r6 >> 2] + 12 >> 2] - r10) + 64 | 0;
      r6 = r10;
      r10 = r3;
      while (1) {
        r9 = r10 + 1 | 0;
        r11 = r6 - 1 | 0;
        HEAP8[r9] = HEAP8[r7];
        if ((r11 | 0) == 0) {
          r5 = 0;
          break L4461;
        } else {
          r7 = r7 + 1 | 0;
          r6 = r11;
          r10 = r9;
        }
      }
    } else {
      r5 = 61;
    }
  } while (0);
  r8 = _gcry_error426(r5);
  return r8;
}
function _cipher_get_keylen(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  r3 = __gcry_module_lookup_id(HEAP32[114860], r1);
  if ((r3 | 0) == 0) {
    __gcry_log_bug(465324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
  r4 = HEAP32[HEAP32[r3 + 8 >> 2] + 16 >> 2];
  if ((r4 | 0) == 0) {
    __gcry_log_bug(490656, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  } else {
    __gcry_module_release(r3);
    __gcry_ath_mutex_unlock(459436);
    STACKTOP = r2;
    return r4;
  }
}
function _cipher_get_blocksize(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  __gcry_ath_mutex_lock(459436);
  if (!HEAP8[458224]) {
    _cipher_register_default();
    HEAP8[458224] = 1;
  }
  __gcry_ath_mutex_unlock(459436);
  __gcry_ath_mutex_lock(459436);
  r3 = __gcry_module_lookup_id(HEAP32[114860], r1);
  if ((r3 | 0) == 0) {
    __gcry_log_bug(465324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
  r4 = HEAP32[HEAP32[r3 + 8 >> 2] + 12 >> 2];
  if ((r4 | 0) == 0) {
    __gcry_log_bug(467324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  } else {
    __gcry_module_release(r3);
    __gcry_ath_mutex_unlock(459436);
    STACKTOP = r2;
    return r4;
  }
}
function _do_cbc_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r6 = (r1 + 12 | 0) >> 2;
  r7 = HEAP32[HEAP32[r6] + 12 >> 2];
  r8 = Math.floor((r5 >>> 0) / (r7 >>> 0));
  if (r3 >>> 0 < r5 >>> 0) {
    r9 = 200;
    return r9;
  }
  r3 = (r5 >>> 0) % (r7 >>> 0);
  r10 = (r3 | 0) == 0;
  do {
    if (!r10) {
      if (r7 >>> 0 >= r5 >>> 0) {
        r9 = 139;
        return r9;
      }
      if ((HEAP32[r1 + 52 >> 2] & 4 | 0) == 0) {
        r9 = 139;
      } else {
        break;
      }
      return r9;
    }
  } while (0);
  r11 = r1 + 52 | 0;
  r12 = r7 >>> 0 < r5 >>> 0;
  if ((HEAP32[r11 >> 2] & 4 | 0) != 0 & r12) {
    _memcpy(r1 + 96 | 0, r1 + 64 | 0, r7);
    r13 = (r10 ? -2 : -1) + r8 | 0;
  } else {
    r13 = r8;
  }
  r8 = HEAP32[r1 + 40 >> 2];
  L4528 : do {
    if ((r8 | 0) == 0) {
      if ((r13 | 0) == 0) {
        r14 = r2;
        r15 = r4;
        break;
      }
      r5 = r1 + 96 | 0;
      r16 = r1 + 128 | 0;
      r17 = r1 + 64 | 0;
      r18 = (r7 | 0) == 0;
      r19 = r4;
      r20 = r2;
      r21 = 0;
      while (1) {
        _memcpy(r5, r19, r7);
        FUNCTION_TABLE[HEAP32[HEAP32[r6] + 32 >> 2]](r16, r20, r19);
        L4534 : do {
          if (!r18) {
            r22 = r17;
            r23 = 0;
            while (1) {
              r24 = r20 + r23 | 0;
              HEAP8[r24] = HEAP8[r24] ^ HEAP8[r22];
              r24 = r23 + 1 | 0;
              if ((r24 | 0) == (r7 | 0)) {
                break L4534;
              } else {
                r22 = r22 + 1 | 0;
                r23 = r24;
              }
            }
          }
        } while (0);
        _memcpy(r17, r5, r7);
        r23 = HEAP32[HEAP32[r6] + 12 >> 2];
        r22 = r19 + r23 | 0;
        r24 = r20 + r23 | 0;
        r23 = r21 + 1 | 0;
        if ((r23 | 0) == (r13 | 0)) {
          r14 = r24;
          r15 = r22;
          break L4528;
        } else {
          r19 = r22;
          r20 = r24;
          r21 = r23;
        }
      }
    } else {
      FUNCTION_TABLE[r8](r1 + 128 | 0, r1 + 64 | 0, r2, r4, r13);
      r21 = Math.imul(r13, r7);
      r14 = r2 + r21 | 0;
      r15 = r4 + r21 | 0;
    }
  } while (0);
  if (!((HEAP32[r11 >> 2] & 4 | 0) != 0 & r12)) {
    r9 = 0;
    return r9;
  }
  r12 = r10 ? r7 : r3;
  r3 = r1 + 96 | 0;
  r10 = r1 + 64 | 0;
  r11 = r10;
  r4 = r10;
  _memcpy(r3, r4, r7);
  _memcpy(r4, r15 + r7 | 0, r12);
  r10 = r1 + 128 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[r6] + 32 >> 2]](r10, r14, r15);
  L4542 : do {
    if ((r12 | 0) > 0) {
      r15 = r4;
      r1 = 0;
      while (1) {
        r2 = r14 + r1 | 0;
        HEAP8[r2] = HEAP8[r2] ^ HEAP8[r15];
        r2 = r1 + 1 | 0;
        if ((r2 | 0) == (r12 | 0)) {
          break L4542;
        } else {
          r15 = r15 + 1 | 0;
          r1 = r2;
        }
      }
    }
  } while (0);
  _memcpy(r14 + r7 | 0, r14, r12);
  L4546 : do {
    if (r12 >>> 0 < r7 >>> 0) {
      r1 = r12;
      while (1) {
        HEAP8[r11 + r1 | 0] = HEAP8[r14 + r1 | 0];
        r15 = r1 + 1 | 0;
        if ((r15 | 0) == (r7 | 0)) {
          break L4546;
        } else {
          r1 = r15;
        }
      }
    }
  } while (0);
  FUNCTION_TABLE[HEAP32[HEAP32[r6] + 32 >> 2]](r10, r14, r4);
  if ((r7 | 0) == 0) {
    r9 = 0;
    return r9;
  } else {
    r25 = r3;
    r26 = 0;
  }
  while (1) {
    r3 = r14 + r26 | 0;
    HEAP8[r3] = HEAP8[r3] ^ HEAP8[r25];
    r3 = r26 + 1 | 0;
    if ((r3 | 0) == (r7 | 0)) {
      r9 = 0;
      break;
    } else {
      r25 = r25 + 1 | 0;
      r26 = r3;
    }
  }
  return r9;
}
function _do_cfb_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32;
  r6 = 0;
  r7 = (r1 + 12 | 0) >> 2;
  r8 = HEAP32[HEAP32[r7] + 12 >> 2];
  r9 = r8 << 1;
  if (r3 >>> 0 < r5 >>> 0) {
    r10 = 200;
    return r10;
  }
  r3 = (r1 + 112 | 0) >> 2;
  r11 = HEAP32[r3];
  if (r11 >>> 0 >= r5 >>> 0) {
    if ((r5 | 0) == 0) {
      r10 = 0;
      return r10;
    }
    r12 = r5;
    r13 = r1 + (r8 - r11) + 64 | 0;
    r14 = r4;
    r15 = r2;
    while (1) {
      r16 = HEAP8[r14];
      HEAP8[r15] = HEAP8[r13] ^ r16;
      HEAP8[r13] = r16;
      r16 = r12 - 1 | 0;
      HEAP32[r3] = HEAP32[r3] - 1 | 0;
      if ((r16 | 0) == 0) {
        r10 = 0;
        break;
      } else {
        r12 = r16;
        r13 = r13 + 1 | 0;
        r14 = r14 + 1 | 0;
        r15 = r15 + 1 | 0;
      }
    }
    return r10;
  }
  L4568 : do {
    if ((r11 | 0) == 0) {
      r17 = r2;
      r18 = r4;
      r19 = r5;
    } else {
      r15 = r5 - r11 | 0;
      if ((HEAP32[r3] | 0) == 0) {
        r17 = r2;
        r18 = r4;
        r19 = r15;
        break;
      }
      r14 = r1 + (r8 - r11) + 64 | 0;
      r13 = r4;
      r12 = r2;
      while (1) {
        r16 = r13 + 1 | 0;
        r20 = HEAP8[r13];
        r21 = r12 + 1 | 0;
        HEAP8[r12] = HEAP8[r14] ^ r20;
        HEAP8[r14] = r20;
        r20 = HEAP32[r3] - 1 | 0;
        HEAP32[r3] = r20;
        if ((r20 | 0) == 0) {
          r17 = r21;
          r18 = r16;
          r19 = r15;
          break L4568;
        } else {
          r14 = r14 + 1 | 0;
          r13 = r16;
          r12 = r21;
        }
      }
    }
  } while (0);
  do {
    if (r19 >>> 0 < r9 >>> 0) {
      r6 = 3761;
    } else {
      r2 = HEAP32[r1 + 32 >> 2];
      if ((r2 | 0) == 0) {
        r6 = 3761;
        break;
      }
      r4 = Math.floor((r19 >>> 0) / (r8 >>> 0));
      FUNCTION_TABLE[r2](r1 + 128 | 0, r1 + 64 | 0, r17, r18, r4);
      r2 = Math.imul(r4, r8);
      r22 = r17 + r2 | 0;
      r23 = r18 + r2 | 0;
      r24 = r19 - r2 | 0;
      break;
    }
  } while (0);
  L4577 : do {
    if (r6 == 3761) {
      if (r19 >>> 0 < r9 >>> 0) {
        r22 = r17;
        r23 = r18;
        r24 = r19;
        break;
      }
      r2 = r1 + 128 | 0;
      r4 = r1 + 64 | 0;
      r11 = (r8 | 0) == 0;
      r5 = r19;
      r12 = r18;
      r13 = r17;
      while (1) {
        FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r2, r4, r4);
        if (r11) {
          r25 = r12;
          r26 = r13;
        } else {
          r14 = r13 + r8 | 0;
          r15 = r4;
          r21 = 0;
          r16 = r12;
          r20 = r13;
          while (1) {
            r27 = HEAP8[r16];
            HEAP8[r20] = HEAP8[r15] ^ r27;
            HEAP8[r15] = r27;
            r27 = r21 + 1 | 0;
            if ((r27 | 0) == (r8 | 0)) {
              break;
            } else {
              r15 = r15 + 1 | 0;
              r21 = r27;
              r16 = r16 + 1 | 0;
              r20 = r20 + 1 | 0;
            }
          }
          r25 = r12 + r8 | 0;
          r26 = r14;
        }
        r20 = r5 - r8 | 0;
        if (r20 >>> 0 < r9 >>> 0) {
          r22 = r26;
          r23 = r25;
          r24 = r20;
          break L4577;
        } else {
          r5 = r20;
          r12 = r25;
          r13 = r26;
        }
      }
    }
  } while (0);
  if (r24 >>> 0 < r8 >>> 0) {
    r28 = r22;
    r29 = r23;
    r30 = r24;
  } else {
    r26 = r1 + 64 | 0;
    _memcpy(r1 + 96 | 0, r26, r8);
    FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r1 + 128 | 0, r26, r26);
    if ((r8 | 0) == 0) {
      r31 = r23;
      r32 = r22;
    } else {
      r25 = r22 + r8 | 0;
      r9 = r26;
      r26 = 0;
      r17 = r23;
      r18 = r22;
      while (1) {
        r22 = HEAP8[r17];
        HEAP8[r18] = HEAP8[r9] ^ r22;
        HEAP8[r9] = r22;
        r22 = r26 + 1 | 0;
        if ((r22 | 0) == (r8 | 0)) {
          break;
        } else {
          r9 = r9 + 1 | 0;
          r26 = r22;
          r17 = r17 + 1 | 0;
          r18 = r18 + 1 | 0;
        }
      }
      r31 = r23 + r8 | 0;
      r32 = r25;
    }
    r28 = r32;
    r29 = r31;
    r30 = r24 - r8 | 0;
  }
  if ((r30 | 0) == 0) {
    r10 = 0;
    return r10;
  }
  r24 = r1 + 64 | 0;
  _memcpy(r1 + 96 | 0, r24, r8);
  FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r1 + 128 | 0, r24, r24);
  HEAP32[r3] = r8 - r30 | 0;
  r8 = r30;
  r30 = r24;
  r24 = r29;
  r29 = r28;
  while (1) {
    r28 = HEAP8[r24];
    HEAP8[r29] = HEAP8[r30] ^ r28;
    HEAP8[r30] = r28;
    r28 = r8 - 1 | 0;
    if ((r28 | 0) == 0) {
      r10 = 0;
      break;
    } else {
      r8 = r28;
      r30 = r30 + 1 | 0;
      r24 = r24 + 1 | 0;
      r29 = r29 + 1 | 0;
    }
  }
  return r10;
}
function _do_ofb_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r6 = (r1 + 12 | 0) >> 2;
  r7 = HEAP32[HEAP32[r6] + 12 >> 2];
  if (r3 >>> 0 < r5 >>> 0) {
    r8 = 200;
    return r8;
  }
  r3 = (r1 + 112 | 0) >> 2;
  r9 = HEAP32[r3];
  if (r9 >>> 0 >= r5 >>> 0) {
    if ((r5 | 0) == 0) {
      r8 = 0;
      return r8;
    }
    r10 = r2;
    r11 = r4;
    r12 = r5;
    r13 = r1 + (r7 - r9) + 64 | 0;
    while (1) {
      HEAP8[r10] = HEAP8[r11] ^ HEAP8[r13];
      r14 = r12 - 1 | 0;
      HEAP32[r3] = HEAP32[r3] - 1 | 0;
      if ((r14 | 0) == 0) {
        r8 = 0;
        break;
      } else {
        r10 = r10 + 1 | 0;
        r11 = r11 + 1 | 0;
        r12 = r14;
        r13 = r13 + 1 | 0;
      }
    }
    return r8;
  }
  L4617 : do {
    if ((r9 | 0) == 0) {
      r15 = r5;
      r16 = r4;
      r17 = r2;
    } else {
      r13 = r5 - r9 | 0;
      if ((HEAP32[r3] | 0) == 0) {
        r15 = r13;
        r16 = r4;
        r17 = r2;
        break;
      }
      r12 = r2;
      r11 = r4;
      r10 = r1 + (r7 - r9) + 64 | 0;
      while (1) {
        r14 = r11 + 1 | 0;
        r18 = r12 + 1 | 0;
        HEAP8[r12] = HEAP8[r11] ^ HEAP8[r10];
        r19 = HEAP32[r3] - 1 | 0;
        HEAP32[r3] = r19;
        if ((r19 | 0) == 0) {
          r15 = r13;
          r16 = r14;
          r17 = r18;
          break L4617;
        } else {
          r12 = r18;
          r11 = r14;
          r10 = r10 + 1 | 0;
        }
      }
    }
  } while (0);
  L4623 : do {
    if (r15 >>> 0 < r7 >>> 0) {
      r20 = r17;
      r21 = r16;
      r22 = r15;
    } else {
      r9 = r1 + 96 | 0;
      r4 = r1 + 64 | 0;
      r2 = r1 + 128 | 0;
      r5 = (r7 | 0) == 0;
      r10 = r17;
      r11 = r16;
      r12 = r15;
      while (1) {
        _memcpy(r9, r4, r7);
        FUNCTION_TABLE[HEAP32[HEAP32[r6] + 28 >> 2]](r2, r4, r4);
        if (r5) {
          r23 = r10;
          r24 = r11;
        } else {
          r13 = r10 + r7 | 0;
          r14 = r10;
          r18 = r11;
          r19 = r4;
          r25 = 0;
          while (1) {
            HEAP8[r14] = HEAP8[r18] ^ HEAP8[r19];
            r26 = r25 + 1 | 0;
            if ((r26 | 0) == (r7 | 0)) {
              break;
            } else {
              r14 = r14 + 1 | 0;
              r18 = r18 + 1 | 0;
              r19 = r19 + 1 | 0;
              r25 = r26;
            }
          }
          r23 = r13;
          r24 = r11 + r7 | 0;
        }
        r25 = r12 - r7 | 0;
        if (r25 >>> 0 < r7 >>> 0) {
          r20 = r23;
          r21 = r24;
          r22 = r25;
          break L4623;
        } else {
          r10 = r23;
          r11 = r24;
          r12 = r25;
        }
      }
    }
  } while (0);
  if ((r22 | 0) == 0) {
    r8 = 0;
    return r8;
  }
  r24 = r1 + 64 | 0;
  _memcpy(r1 + 96 | 0, r24, r7);
  FUNCTION_TABLE[HEAP32[HEAP32[r6] + 28 >> 2]](r1 + 128 | 0, r24, r24);
  HEAP32[r3] = r7 - r22 | 0;
  r7 = r20;
  r20 = r21;
  r21 = r22;
  r22 = r24;
  while (1) {
    HEAP8[r7] = HEAP8[r20] ^ HEAP8[r22];
    r24 = r21 - 1 | 0;
    if ((r24 | 0) == 0) {
      r8 = 0;
      break;
    } else {
      r7 = r7 + 1 | 0;
      r20 = r20 + 1 | 0;
      r21 = r24;
      r22 = r22 + 1 | 0;
    }
  }
  return r8;
}
function _do_ctr_decrypt(r1, r2, r3, r4, r5) {
  return _do_ctr_encrypt(r1, r2, r3, r4, r5);
}
function _do_aeswrap_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r8 = r7;
  r9 = r1 + 12 | 0;
  if ((HEAP32[HEAP32[r9 >> 2] + 12 >> 2] | 0) != 16) {
    r10 = 139;
    STACKTOP = r7;
    return r10;
  }
  if ((r3 + 8 | 0) >>> 0 < r5 >>> 0) {
    r10 = 200;
    STACKTOP = r7;
    return r10;
  }
  if ((r5 & 7 | 0) != 0 | r5 >>> 0 < 24) {
    r10 = 45;
    STACKTOP = r7;
    return r10;
  }
  r3 = r1 + 96 | 0;
  r11 = r1 + 80 | 0;
  r12 = r4;
  r13 = r3;
  r14 = r12 | 0;
  r15 = r12 + 4 | 0;
  r12 = HEAPU8[r15] | HEAPU8[r15 + 1 | 0] << 8 | HEAPU8[r15 + 2 | 0] << 16 | HEAPU8[r15 + 3 | 0] << 24 | 0;
  r15 = r13 | 0;
  tempBigInt = HEAPU8[r14] | HEAPU8[r14 + 1 | 0] << 8 | HEAPU8[r14 + 2 | 0] << 16 | HEAPU8[r14 + 3 | 0] << 24 | 0;
  HEAP8[r15] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r15 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r15 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r15 + 3 | 0] = tempBigInt & 255;
  r15 = r13 + 4 | 0;
  tempBigInt = r12;
  HEAP8[r15] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r15 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r15 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r15 + 3 | 0] = tempBigInt & 255;
  _memmove(r2, r4 + 8 | 0, r5 - 8 | 0, 1, 0);
  r4 = (r5 >>> 3) - 1 | 0;
  r5 = r4 * 6 & -1;
  HEAP8[r8 + 7 | 0] = r5 & 255;
  HEAP8[r8 + 6 | 0] = r5 >>> 8 & 255;
  HEAP8[r8 + 5 | 0] = r5 >>> 16 & 255;
  HEAP8[r8 + 4 | 0] = r5 >>> 24 & 255;
  r5 = r11;
  HEAP8[r8 + 3 | 0] = 0;
  HEAP8[r8 + 2 | 0] = 0;
  HEAP8[r8 + 1 | 0] = 0;
  HEAP8[r8 | 0] = 0;
  r15 = (r4 | 0) == 0;
  r12 = r1 + 88 | 0;
  r14 = r1 + 128 | 0;
  r16 = r11 | 0;
  r11 = 5;
  while (1) {
    L4653 : do {
      if (!r15) {
        r17 = r4;
        while (1) {
          HEAP8[r5] = HEAP8[r8 | 0] ^ HEAP8[r1 + 96 | 0];
          HEAP8[r5 + 1 | 0] = HEAP8[r8 + 1 | 0] ^ HEAP8[r1 + 97 | 0];
          HEAP8[r5 + 2 | 0] = HEAP8[r8 + 2 | 0] ^ HEAP8[r1 + 98 | 0];
          HEAP8[r5 + 3 | 0] = HEAP8[r8 + 3 | 0] ^ HEAP8[r1 + 99 | 0];
          HEAP8[r5 + 4 | 0] = HEAP8[r8 + 4 | 0] ^ HEAP8[r1 + 100 | 0];
          HEAP8[r5 + 5 | 0] = HEAP8[r8 + 5 | 0] ^ HEAP8[r1 + 101 | 0];
          HEAP8[r5 + 6 | 0] = HEAP8[r8 + 6 | 0] ^ HEAP8[r1 + 102 | 0];
          HEAP8[r5 + 7 | 0] = HEAP8[r8 + 7 | 0] ^ HEAP8[r1 + 103 | 0];
          r18 = r2 + ((r17 << 3) - 8) | 0;
          r19 = r18 | 0;
          r20 = r18 + 4 | 0;
          r21 = HEAPU8[r20] | HEAPU8[r20 + 1 | 0] << 8 | HEAPU8[r20 + 2 | 0] << 16 | HEAPU8[r20 + 3 | 0] << 24 | 0;
          r20 = r12 | 0;
          tempBigInt = HEAPU8[r19] | HEAPU8[r19 + 1 | 0] << 8 | HEAPU8[r19 + 2 | 0] << 16 | HEAPU8[r19 + 3 | 0] << 24 | 0;
          HEAP8[r20] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r20 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r20 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r20 + 3 | 0] = tempBigInt & 255;
          r20 = r12 + 4 | 0;
          tempBigInt = r21;
          HEAP8[r20] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r20 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r20 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r20 + 3 | 0] = tempBigInt & 255;
          FUNCTION_TABLE[HEAP32[HEAP32[r9 >> 2] + 32 >> 2]](r14, r5, r5);
          r20 = 7;
          while (1) {
            if ((r20 | 0) <= -1) {
              break;
            }
            r21 = r8 + r20 | 0;
            r19 = HEAP8[r21];
            HEAP8[r21] = r19 - 1 & 255;
            if (r19 << 24 >> 24 == 0) {
              r20 = r20 - 1 | 0;
            } else {
              break;
            }
          }
          r20 = r16 | 0;
          r19 = r16 + 4 | 0;
          r21 = HEAPU8[r19] | HEAPU8[r19 + 1 | 0] << 8 | HEAPU8[r19 + 2 | 0] << 16 | HEAPU8[r19 + 3 | 0] << 24 | 0;
          r19 = r13 | 0;
          tempBigInt = HEAPU8[r20] | HEAPU8[r20 + 1 | 0] << 8 | HEAPU8[r20 + 2 | 0] << 16 | HEAPU8[r20 + 3 | 0] << 24 | 0;
          HEAP8[r19] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r19 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r19 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r19 + 3 | 0] = tempBigInt & 255;
          r19 = r13 + 4 | 0;
          tempBigInt = r21;
          HEAP8[r19] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r19 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r19 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r19 + 3 | 0] = tempBigInt & 255;
          r19 = r12 | 0;
          r21 = r12 + 4 | 0;
          r20 = HEAPU8[r21] | HEAPU8[r21 + 1 | 0] << 8 | HEAPU8[r21 + 2 | 0] << 16 | HEAPU8[r21 + 3 | 0] << 24 | 0;
          r21 = r18 | 0;
          tempBigInt = HEAPU8[r19] | HEAPU8[r19 + 1 | 0] << 8 | HEAPU8[r19 + 2 | 0] << 16 | HEAPU8[r19 + 3 | 0] << 24 | 0;
          HEAP8[r21] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r21 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r21 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r21 + 3 | 0] = tempBigInt & 255;
          r21 = r18 + 4 | 0;
          tempBigInt = r20;
          HEAP8[r21] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r21 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r21 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r21 + 3 | 0] = tempBigInt & 255;
          r21 = r17 - 1 | 0;
          if ((r21 | 0) == 0) {
            break L4653;
          } else {
            r17 = r21;
          }
        }
      }
    } while (0);
    if ((r11 | 0) > 0) {
      r11 = r11 - 1 | 0;
    } else {
      break;
    }
  }
  if ((HEAP32[r1 + 56 >> 2] & 2 | 0) == 0) {
    r22 = 0;
  } else {
    r10 = (_memcmp(r3, r1 + 64 | 0, 8) | 0) != 0 ? 10 : 0;
    STACKTOP = r7;
    return r10;
  }
  while (1) {
    if ((r22 | 0) >= 8) {
      r10 = 0;
      r6 = 3828;
      break;
    }
    if (HEAP8[r1 + (r22 + 96) | 0] << 24 >> 24 == -90) {
      r22 = r22 + 1 | 0;
    } else {
      r10 = 10;
      r6 = 3829;
      break;
    }
  }
  if (r6 == 3828) {
    STACKTOP = r7;
    return r10;
  } else if (r6 == 3829) {
    STACKTOP = r7;
    return r10;
  }
}
function _do_ecb_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = r1 + 12 | 0;
  r7 = HEAP32[HEAP32[r6 >> 2] + 12 >> 2];
  if (r3 >>> 0 < r5 >>> 0) {
    r8 = 200;
    return r8;
  }
  if (((r5 >>> 0) % (r7 >>> 0) | 0) != 0) {
    r8 = 139;
    return r8;
  }
  r3 = Math.floor((r5 >>> 0) / (r7 >>> 0));
  if ((r3 | 0) == 0) {
    r8 = 0;
    return r8;
  }
  r5 = r1 + 128 | 0;
  r1 = r4;
  r4 = r2;
  r2 = 0;
  while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[r6 >> 2] + 28 >> 2]](r5, r4, r1);
    r9 = r2 + 1 | 0;
    if (r9 >>> 0 < r3 >>> 0) {
      r1 = r1 + r7 | 0;
      r4 = r4 + r7 | 0;
      r2 = r9;
    } else {
      r8 = 0;
      break;
    }
  }
  return r8;
}
function _do_cbc_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31;
  r6 = r1;
  r7 = (r1 + 12 | 0) >> 2;
  r8 = HEAP32[HEAP32[r7] + 12 >> 2];
  r9 = Math.floor((r5 >>> 0) / (r8 >>> 0));
  r10 = (r1 + 52 | 0) >> 2;
  r11 = HEAP32[r10];
  if (((r11 & 8 | 0) != 0 ? r8 : r5) >>> 0 > r3 >>> 0) {
    r12 = 200;
    return r12;
  }
  r3 = (r5 >>> 0) % (r8 >>> 0);
  r13 = (r3 | 0) == 0;
  do {
    if (!r13) {
      if (r8 >>> 0 >= r5 >>> 0) {
        r12 = 139;
        return r12;
      }
      if ((r11 & 4 | 0) == 0) {
        r12 = 139;
      } else {
        break;
      }
      return r12;
    }
  } while (0);
  r11 = HEAP32[r10];
  r14 = r8 >>> 0 < r5 >>> 0;
  r15 = (r11 & 4 | 0) != 0 & r14 & r13;
  r16 = (r15 << 31 >> 31) + r9 | 0;
  r9 = HEAP32[r1 + 36 >> 2];
  do {
    if ((r9 | 0) == 0) {
      if ((r16 | 0) == 0) {
        r17 = r2;
        r18 = r4;
        break;
      }
      r19 = r1 + 64 | 0;
      r20 = (r8 | 0) == 0;
      r21 = r1 + 128 | 0;
      r22 = Math.imul(r8, (r15 << 31 >> 31) + Math.floor((r5 >>> 0) / (r8 >>> 0)) | 0);
      r23 = r4;
      r24 = 0;
      r25 = r2;
      while (1) {
        L4700 : do {
          if (!r20) {
            r26 = r19;
            r27 = 0;
            while (1) {
              HEAP8[r25 + r27 | 0] = HEAP8[r26] ^ HEAP8[r23 + r27 | 0];
              r28 = r27 + 1 | 0;
              if ((r28 | 0) == (r8 | 0)) {
                break L4700;
              } else {
                r26 = r26 + 1 | 0;
                r27 = r28;
              }
            }
          }
        } while (0);
        FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r21, r25, r25);
        _memcpy(r19, r25, r8);
        if ((HEAP32[r10] & 8 | 0) == 0) {
          r29 = r25 + r8 | 0;
        } else {
          r29 = r25;
        }
        r27 = r24 + 1 | 0;
        if (r27 >>> 0 < r16 >>> 0) {
          r23 = r23 + r8 | 0;
          r24 = r27;
          r25 = r29;
        } else {
          break;
        }
      }
      r17 = r29;
      r18 = r4 + r22 | 0;
    } else {
      FUNCTION_TABLE[r9](r1 + 128 | 0, r1 + 64 | 0, r2, r4, r16, r11 & 8);
      r25 = Math.imul(r16, r8);
      r24 = r4 + r25 | 0;
      if ((HEAP32[r10] & 8 | 0) != 0) {
        r17 = r2;
        r18 = r24;
        break;
      }
      r17 = r2 + r25 | 0;
      r18 = r24;
    }
  } while (0);
  if (!((HEAP32[r10] & 4 | 0) != 0 & r14)) {
    r12 = 0;
    return r12;
  }
  r14 = r13 ? r8 : r3;
  r3 = r17 + -r8 | 0;
  r13 = r1 + 64 | 0;
  if ((r14 | 0) > 0) {
    r10 = r14 + 64 | 0;
    r2 = r13;
    r4 = 0;
    while (1) {
      r16 = HEAP8[r18 + r4 | 0];
      r11 = r17 + (r4 - r8) | 0;
      HEAP8[r17 + r4 | 0] = HEAP8[r11];
      HEAP8[r11] = HEAP8[r2] ^ r16;
      r16 = r4 + 1 | 0;
      if ((r16 | 0) == (r14 | 0)) {
        break;
      } else {
        r2 = r2 + 1 | 0;
        r4 = r16;
      }
    }
    r30 = r6 + r10 | 0;
    r31 = r14;
  } else {
    r30 = r13;
    r31 = 0;
  }
  L4720 : do {
    if (r31 >>> 0 < r8 >>> 0) {
      r14 = r30;
      r10 = r31;
      while (1) {
        HEAP8[r17 + (r10 - r8) | 0] = HEAP8[r14];
        r6 = r10 + 1 | 0;
        if ((r6 | 0) == (r8 | 0)) {
          break L4720;
        } else {
          r14 = r14 + 1 | 0;
          r10 = r6;
        }
      }
    }
  } while (0);
  FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r1 + 128 | 0, r3, r3);
  _memcpy(r13, r3, r8);
  r12 = 0;
  return r12;
}
function _do_cfb_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32;
  r6 = 0;
  r7 = (r1 + 12 | 0) >> 2;
  r8 = HEAP32[HEAP32[r7] + 12 >> 2];
  r9 = r8 << 1;
  if (r3 >>> 0 < r5 >>> 0) {
    r10 = 200;
    return r10;
  }
  r3 = (r1 + 112 | 0) >> 2;
  r11 = HEAP32[r3];
  if (r11 >>> 0 >= r5 >>> 0) {
    if ((r5 | 0) == 0) {
      r10 = 0;
      return r10;
    }
    r12 = r5;
    r13 = r1 + (r8 - r11) + 64 | 0;
    r14 = r4;
    r15 = r2;
    while (1) {
      r16 = HEAP8[r13] ^ HEAP8[r14];
      HEAP8[r13] = r16;
      HEAP8[r15] = r16;
      r16 = r12 - 1 | 0;
      HEAP32[r3] = HEAP32[r3] - 1 | 0;
      if ((r16 | 0) == 0) {
        r10 = 0;
        break;
      } else {
        r12 = r16;
        r13 = r13 + 1 | 0;
        r14 = r14 + 1 | 0;
        r15 = r15 + 1 | 0;
      }
    }
    return r10;
  }
  L4738 : do {
    if ((r11 | 0) == 0) {
      r17 = r2;
      r18 = r4;
      r19 = r5;
    } else {
      r15 = r5 - r11 | 0;
      if ((HEAP32[r3] | 0) == 0) {
        r17 = r2;
        r18 = r4;
        r19 = r15;
        break;
      }
      r14 = r1 + (r8 - r11) + 64 | 0;
      r13 = r4;
      r12 = r2;
      while (1) {
        r16 = r13 + 1 | 0;
        r20 = HEAP8[r14] ^ HEAP8[r13];
        HEAP8[r14] = r20;
        r21 = r12 + 1 | 0;
        HEAP8[r12] = r20;
        r20 = HEAP32[r3] - 1 | 0;
        HEAP32[r3] = r20;
        if ((r20 | 0) == 0) {
          r17 = r21;
          r18 = r16;
          r19 = r15;
          break L4738;
        } else {
          r14 = r14 + 1 | 0;
          r13 = r16;
          r12 = r21;
        }
      }
    }
  } while (0);
  do {
    if (r19 >>> 0 < r9 >>> 0) {
      r6 = 3881;
    } else {
      r2 = HEAP32[r1 + 28 >> 2];
      if ((r2 | 0) == 0) {
        r6 = 3881;
        break;
      }
      r4 = Math.floor((r19 >>> 0) / (r8 >>> 0));
      FUNCTION_TABLE[r2](r1 + 128 | 0, r1 + 64 | 0, r17, r18, r4);
      r2 = Math.imul(r4, r8);
      r22 = r17 + r2 | 0;
      r23 = r18 + r2 | 0;
      r24 = r19 - r2 | 0;
      break;
    }
  } while (0);
  L4747 : do {
    if (r6 == 3881) {
      if (r19 >>> 0 < r9 >>> 0) {
        r22 = r17;
        r23 = r18;
        r24 = r19;
        break;
      }
      r2 = r1 + 128 | 0;
      r4 = r1 + 64 | 0;
      r11 = (r8 | 0) == 0;
      r5 = r19;
      r12 = r18;
      r13 = r17;
      while (1) {
        FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r2, r4, r4);
        if (r11) {
          r25 = r12;
          r26 = r13;
        } else {
          r14 = r13 + r8 | 0;
          r15 = r4;
          r21 = r12;
          r16 = r13;
          r20 = 0;
          while (1) {
            r27 = HEAP8[r15] ^ HEAP8[r21];
            HEAP8[r15] = r27;
            HEAP8[r16] = r27;
            r27 = r20 + 1 | 0;
            if ((r27 | 0) == (r8 | 0)) {
              break;
            } else {
              r15 = r15 + 1 | 0;
              r21 = r21 + 1 | 0;
              r16 = r16 + 1 | 0;
              r20 = r27;
            }
          }
          r25 = r12 + r8 | 0;
          r26 = r14;
        }
        r20 = r5 - r8 | 0;
        if (r20 >>> 0 < r9 >>> 0) {
          r22 = r26;
          r23 = r25;
          r24 = r20;
          break L4747;
        } else {
          r5 = r20;
          r12 = r25;
          r13 = r26;
        }
      }
    }
  } while (0);
  if (r24 >>> 0 < r8 >>> 0) {
    r28 = r22;
    r29 = r23;
    r30 = r24;
  } else {
    r26 = r1 + 64 | 0;
    _memcpy(r1 + 96 | 0, r26, r8);
    FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r1 + 128 | 0, r26, r26);
    if ((r8 | 0) == 0) {
      r31 = r23;
      r32 = r22;
    } else {
      r25 = r22 + r8 | 0;
      r9 = r26;
      r26 = r23;
      r17 = r22;
      r22 = 0;
      while (1) {
        r18 = HEAP8[r9] ^ HEAP8[r26];
        HEAP8[r9] = r18;
        HEAP8[r17] = r18;
        r18 = r22 + 1 | 0;
        if ((r18 | 0) == (r8 | 0)) {
          break;
        } else {
          r9 = r9 + 1 | 0;
          r26 = r26 + 1 | 0;
          r17 = r17 + 1 | 0;
          r22 = r18;
        }
      }
      r31 = r23 + r8 | 0;
      r32 = r25;
    }
    r28 = r32;
    r29 = r31;
    r30 = r24 - r8 | 0;
  }
  if ((r30 | 0) == 0) {
    r10 = 0;
    return r10;
  }
  r24 = r1 + 64 | 0;
  _memcpy(r1 + 96 | 0, r24, r8);
  FUNCTION_TABLE[HEAP32[HEAP32[r7] + 28 >> 2]](r1 + 128 | 0, r24, r24);
  HEAP32[r3] = r8 - r30 | 0;
  r8 = r30;
  r30 = r24;
  r24 = r29;
  r29 = r28;
  while (1) {
    r28 = HEAP8[r30] ^ HEAP8[r24];
    HEAP8[r30] = r28;
    HEAP8[r29] = r28;
    r28 = r8 - 1 | 0;
    if ((r28 | 0) == 0) {
      r10 = 0;
      break;
    } else {
      r8 = r28;
      r30 = r30 + 1 | 0;
      r24 = r24 + 1 | 0;
      r29 = r29 + 1 | 0;
    }
  }
  return r10;
}
function _do_ofb_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r6 = (r1 + 12 | 0) >> 2;
  r7 = HEAP32[HEAP32[r6] + 12 >> 2];
  if (r3 >>> 0 < r5 >>> 0) {
    r8 = 200;
    return r8;
  }
  r3 = (r1 + 112 | 0) >> 2;
  r9 = HEAP32[r3];
  if (r9 >>> 0 >= r5 >>> 0) {
    if ((r5 | 0) == 0) {
      r8 = 0;
      return r8;
    }
    r10 = r2;
    r11 = r4;
    r12 = r5;
    r13 = r1 + (r7 - r9) + 64 | 0;
    while (1) {
      HEAP8[r10] = HEAP8[r11] ^ HEAP8[r13];
      r14 = r12 - 1 | 0;
      HEAP32[r3] = HEAP32[r3] - 1 | 0;
      if ((r14 | 0) == 0) {
        r8 = 0;
        break;
      } else {
        r10 = r10 + 1 | 0;
        r11 = r11 + 1 | 0;
        r12 = r14;
        r13 = r13 + 1 | 0;
      }
    }
    return r8;
  }
  L4787 : do {
    if ((r9 | 0) == 0) {
      r15 = r5;
      r16 = r4;
      r17 = r2;
    } else {
      r13 = r5 - r9 | 0;
      if ((HEAP32[r3] | 0) == 0) {
        r15 = r13;
        r16 = r4;
        r17 = r2;
        break;
      }
      r12 = r2;
      r11 = r4;
      r10 = r1 + (r7 - r9) + 64 | 0;
      while (1) {
        r14 = r11 + 1 | 0;
        r18 = r12 + 1 | 0;
        HEAP8[r12] = HEAP8[r11] ^ HEAP8[r10];
        r19 = HEAP32[r3] - 1 | 0;
        HEAP32[r3] = r19;
        if ((r19 | 0) == 0) {
          r15 = r13;
          r16 = r14;
          r17 = r18;
          break L4787;
        } else {
          r12 = r18;
          r11 = r14;
          r10 = r10 + 1 | 0;
        }
      }
    }
  } while (0);
  L4793 : do {
    if (r15 >>> 0 < r7 >>> 0) {
      r20 = r17;
      r21 = r16;
      r22 = r15;
    } else {
      r9 = r1 + 96 | 0;
      r4 = r1 + 64 | 0;
      r2 = r1 + 128 | 0;
      r5 = (r7 | 0) == 0;
      r10 = r17;
      r11 = r16;
      r12 = r15;
      while (1) {
        _memcpy(r9, r4, r7);
        FUNCTION_TABLE[HEAP32[HEAP32[r6] + 28 >> 2]](r2, r4, r4);
        if (r5) {
          r23 = r10;
          r24 = r11;
        } else {
          r13 = r10 + r7 | 0;
          r14 = r10;
          r18 = r11;
          r19 = r4;
          r25 = 0;
          while (1) {
            HEAP8[r14] = HEAP8[r18] ^ HEAP8[r19];
            r26 = r25 + 1 | 0;
            if ((r26 | 0) == (r7 | 0)) {
              break;
            } else {
              r14 = r14 + 1 | 0;
              r18 = r18 + 1 | 0;
              r19 = r19 + 1 | 0;
              r25 = r26;
            }
          }
          r23 = r13;
          r24 = r11 + r7 | 0;
        }
        r25 = r12 - r7 | 0;
        if (r25 >>> 0 < r7 >>> 0) {
          r20 = r23;
          r21 = r24;
          r22 = r25;
          break L4793;
        } else {
          r10 = r23;
          r11 = r24;
          r12 = r25;
        }
      }
    }
  } while (0);
  if ((r22 | 0) == 0) {
    r8 = 0;
    return r8;
  }
  r24 = r1 + 64 | 0;
  _memcpy(r1 + 96 | 0, r24, r7);
  FUNCTION_TABLE[HEAP32[HEAP32[r6] + 28 >> 2]](r1 + 128 | 0, r24, r24);
  HEAP32[r3] = r7 - r22 | 0;
  r7 = r20;
  r20 = r21;
  r21 = r22;
  r22 = r24;
  while (1) {
    HEAP8[r7] = HEAP8[r20] ^ HEAP8[r22];
    r24 = r21 - 1 | 0;
    if ((r24 | 0) == 0) {
      r8 = 0;
      break;
    } else {
      r7 = r7 + 1 | 0;
      r20 = r20 + 1 | 0;
      r21 = r24;
      r22 = r22 + 1 | 0;
    }
  }
  return r8;
}
function _do_ctr_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r7 = r6;
  r8 = r1 + 12 | 0;
  r9 = HEAP32[HEAP32[r8 >> 2] + 12 >> 2];
  if (r3 >>> 0 < r5 >>> 0) {
    r10 = 200;
    STACKTOP = r6;
    return r10;
  }
  r3 = (r1 + 112 | 0) >> 2;
  r11 = HEAP32[r3];
  if ((r11 | 0) == 0) {
    r12 = r2;
    r13 = r5;
    r14 = r4;
  } else {
    if (r11 >>> 0 >= r9 >>> 0) {
      __gcry_assert_failed(485580, 479816, 1463, 495288);
    }
    L4819 : do {
      if ((r5 | 0) != 0 & (HEAP32[r3] | 0) != 0) {
        r15 = 0;
        r16 = r9 - r11 | 0;
        r17 = r4;
        while (1) {
          HEAP8[r2 + r15 | 0] = HEAP8[r1 + (r16 + 96) | 0] ^ HEAP8[r17];
          r18 = HEAP32[r3] - 1 | 0;
          HEAP32[r3] = r18;
          r19 = r15 + 1 | 0;
          r20 = r4 + r19 | 0;
          if (r19 >>> 0 < r5 >>> 0 & (r18 | 0) != 0) {
            r15 = r19;
            r16 = r16 + 1 | 0;
            r17 = r20;
          } else {
            r21 = r19;
            r22 = r20;
            break L4819;
          }
        }
      } else {
        r21 = 0;
        r22 = r4;
      }
    } while (0);
    r12 = r2 + r21 | 0;
    r13 = r5 - r21 | 0;
    r14 = r22;
  }
  r22 = Math.floor((r13 >>> 0) / (r9 >>> 0));
  do {
    if ((r22 | 0) == 0) {
      r23 = r12;
      r24 = r13;
      r25 = r14;
    } else {
      r21 = HEAP32[r1 + 44 >> 2];
      if ((r21 | 0) == 0) {
        r23 = r12;
        r24 = r13;
        r25 = r14;
        break;
      }
      FUNCTION_TABLE[r21](r1 + 128 | 0, r1 + 80 | 0, r12, r14, r22);
      r21 = Math.imul(r22, r9);
      r23 = r12 + r21 | 0;
      r24 = r13 - r21 | 0;
      r25 = r14 + r21 | 0;
    }
  } while (0);
  if ((r24 | 0) == 0) {
    r10 = 0;
    STACKTOP = r6;
    return r10;
  }
  r14 = r1 + 128 | 0;
  r13 = r7 | 0;
  r12 = r1 + 80 | 0;
  r22 = r12;
  r21 = r12;
  r12 = 0;
  r5 = 0;
  while (1) {
    L4834 : do {
      if ((r5 | 0) == 0) {
        FUNCTION_TABLE[HEAP32[HEAP32[r8 >> 2] + 28 >> 2]](r14, r13, r21);
        r2 = r9;
        while (1) {
          if ((r2 | 0) <= 0) {
            break L4834;
          }
          r4 = r2 - 1 | 0;
          r11 = r22 + r4 | 0;
          r17 = HEAP8[r11] + 1 & 255;
          HEAP8[r11] = r17;
          if (r17 << 24 >> 24 == 0) {
            r2 = r4;
          } else {
            break L4834;
          }
        }
      }
    } while (0);
    HEAP8[r23 + r12 | 0] = HEAP8[r7 + r5 | 0] ^ HEAP8[r25 + r12 | 0];
    r2 = r12 + 1 | 0;
    r26 = (r2 >>> 0) % (r9 >>> 0);
    if ((r2 | 0) == (r24 | 0)) {
      break;
    } else {
      r12 = r2;
      r5 = r26;
    }
  }
  r5 = ((r9 - r26 | 0) >>> 0) % (r9 >>> 0);
  HEAP32[r3] = r5;
  if ((r5 | 0) != 0) {
    _memcpy(r1 + (r26 + 96) | 0, r7 + r26 | 0, r5);
  }
  HEAP8[r7 | 0] = 0;
  HEAP8[r7 + 1 | 0] = 0;
  HEAP8[r7 + 2 | 0] = 0;
  HEAP8[r7 + 3 | 0] = 0;
  HEAP8[r7 + 4 | 0] = 0;
  HEAP8[r7 + 5 | 0] = 0;
  HEAP8[r7 + 6 | 0] = 0;
  HEAP8[r7 + 7 | 0] = 0;
  HEAP8[r7 + 8 | 0] = 0;
  HEAP8[r7 + 9 | 0] = 0;
  HEAP8[r7 + 10 | 0] = 0;
  HEAP8[r7 + 11 | 0] = 0;
  HEAP8[r7 + 12 | 0] = 0;
  HEAP8[r7 + 13 | 0] = 0;
  HEAP8[r7 + 14 | 0] = 0;
  HEAP8[r7 + 15 | 0] = 0;
  r10 = 0;
  STACKTOP = r6;
  return r10;
}
function _dummy_setkey(r1, r2, r3) {
  return 0;
}
function _gpg_err_make463(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function _do_tripledes_set_extra_info(r1, r2, r3, r4) {
  var r5;
  if ((r2 | 0) == 1) {
    HEAP32[r1 + 768 >> 2] = 1;
    r5 = 0;
  } else {
    r5 = 61;
  }
  return r5;
}
function _do_aeswrap_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6;
  r8 = r7;
  r9 = r1 + 12 | 0;
  if ((HEAP32[HEAP32[r9 >> 2] + 12 >> 2] | 0) != 16) {
    r10 = 139;
    STACKTOP = r6;
    return r10;
  }
  if ((r5 + 8 | 0) >>> 0 > r3 >>> 0) {
    r10 = 200;
    STACKTOP = r6;
    return r10;
  }
  if ((r5 & 7 | 0) != 0) {
    r10 = 45;
    STACKTOP = r6;
    return r10;
  }
  r3 = r5 >>> 3;
  if (r5 >>> 0 < 16) {
    r10 = 45;
    STACKTOP = r6;
    return r10;
  }
  r11 = r1 + 80 | 0;
  r12 = r11;
  if ((HEAP32[r1 + 56 >> 2] & 2 | 0) == 0) {
    r13 = r2;
    r14 = r13 | 0;
    tempBigInt = -1499027802;
    HEAP8[r14] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r14 + 1 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r14 + 2 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r14 + 3 | 0] = tempBigInt & 255;
    r14 = r13 + 4 | 0;
    tempBigInt = -1499027802;
    HEAP8[r14] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r14 + 1 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r14 + 2 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r14 + 3 | 0] = tempBigInt & 255;
  } else {
    r14 = r1 + 64 | 0;
    r13 = r2;
    r15 = r14 | 0;
    r16 = r14 + 4 | 0;
    r14 = HEAPU8[r16] | HEAPU8[r16 + 1 | 0] << 8 | HEAPU8[r16 + 2 | 0] << 16 | HEAPU8[r16 + 3 | 0] << 24 | 0;
    r16 = r13 | 0;
    tempBigInt = HEAPU8[r15] | HEAPU8[r15 + 1 | 0] << 8 | HEAPU8[r15 + 2 | 0] << 16 | HEAPU8[r15 + 3 | 0] << 24 | 0;
    HEAP8[r16] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r16 + 1 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r16 + 2 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r16 + 3 | 0] = tempBigInt & 255;
    r16 = r13 + 4 | 0;
    tempBigInt = r14;
    HEAP8[r16] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r16 + 1 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r16 + 2 | 0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[r16 + 3 | 0] = tempBigInt & 255;
  }
  _memmove(r2 + 8 | 0, r4, r5, 1, 0);
  HEAP32[r7 >> 2] = 0;
  HEAP32[r7 + 4 >> 2] = 0;
  r5 = (r3 | 0) == 0;
  r4 = r2;
  r16 = r11 | 0;
  r11 = r1 + 88 | 0;
  r14 = r1 + 128 | 0;
  r1 = 0;
  while (1) {
    L4874 : do {
      if (!r5) {
        r13 = 1;
        while (1) {
          r15 = r4 | 0;
          r17 = r4 + 4 | 0;
          r18 = HEAPU8[r17] | HEAPU8[r17 + 1 | 0] << 8 | HEAPU8[r17 + 2 | 0] << 16 | HEAPU8[r17 + 3 | 0] << 24 | 0;
          r17 = r16 | 0;
          tempBigInt = HEAPU8[r15] | HEAPU8[r15 + 1 | 0] << 8 | HEAPU8[r15 + 2 | 0] << 16 | HEAPU8[r15 + 3 | 0] << 24 | 0;
          HEAP8[r17] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r17 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r17 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r17 + 3 | 0] = tempBigInt & 255;
          r17 = r16 + 4 | 0;
          tempBigInt = r18;
          HEAP8[r17] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r17 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r17 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r17 + 3 | 0] = tempBigInt & 255;
          r17 = (r13 << 3) + r2 | 0;
          r18 = r17 | 0;
          r15 = r17 + 4 | 0;
          r19 = HEAPU8[r15] | HEAPU8[r15 + 1 | 0] << 8 | HEAPU8[r15 + 2 | 0] << 16 | HEAPU8[r15 + 3 | 0] << 24 | 0;
          r15 = r11 | 0;
          tempBigInt = HEAPU8[r18] | HEAPU8[r18 + 1 | 0] << 8 | HEAPU8[r18 + 2 | 0] << 16 | HEAPU8[r18 + 3 | 0] << 24 | 0;
          HEAP8[r15] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r15 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r15 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r15 + 3 | 0] = tempBigInt & 255;
          r15 = r11 + 4 | 0;
          tempBigInt = r19;
          HEAP8[r15] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r15 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r15 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r15 + 3 | 0] = tempBigInt & 255;
          FUNCTION_TABLE[HEAP32[HEAP32[r9 >> 2] + 28 >> 2]](r14, r12, r12);
          r15 = 7;
          while (1) {
            if ((r15 | 0) <= -1) {
              break;
            }
            r19 = r8 + r15 | 0;
            r18 = HEAP8[r19] + 1 & 255;
            HEAP8[r19] = r18;
            if (r18 << 24 >> 24 == 0) {
              r15 = r15 - 1 | 0;
            } else {
              break;
            }
          }
          HEAP8[r2] = HEAP8[r7] ^ HEAP8[r12];
          HEAP8[r2 + 1 | 0] = HEAP8[r8 + 1 | 0] ^ HEAP8[r12 + 1 | 0];
          HEAP8[r2 + 2 | 0] = HEAP8[r8 + 2 | 0] ^ HEAP8[r12 + 2 | 0];
          HEAP8[r2 + 3 | 0] = HEAP8[r8 + 3 | 0] ^ HEAP8[r12 + 3 | 0];
          HEAP8[r2 + 4 | 0] = HEAP8[r8 + 4 | 0] ^ HEAP8[r12 + 4 | 0];
          HEAP8[r2 + 5 | 0] = HEAP8[r8 + 5 | 0] ^ HEAP8[r12 + 5 | 0];
          HEAP8[r2 + 6 | 0] = HEAP8[r8 + 6 | 0] ^ HEAP8[r12 + 6 | 0];
          HEAP8[r2 + 7 | 0] = HEAP8[r8 + 7 | 0] ^ HEAP8[r12 + 7 | 0];
          r15 = r11 | 0;
          r18 = r11 + 4 | 0;
          r19 = HEAPU8[r18] | HEAPU8[r18 + 1 | 0] << 8 | HEAPU8[r18 + 2 | 0] << 16 | HEAPU8[r18 + 3 | 0] << 24 | 0;
          r18 = r17 | 0;
          tempBigInt = HEAPU8[r15] | HEAPU8[r15 + 1 | 0] << 8 | HEAPU8[r15 + 2 | 0] << 16 | HEAPU8[r15 + 3 | 0] << 24 | 0;
          HEAP8[r18] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r18 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r18 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r18 + 3 | 0] = tempBigInt & 255;
          r18 = r17 + 4 | 0;
          tempBigInt = r19;
          HEAP8[r18] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r18 + 1 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r18 + 2 | 0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r18 + 3 | 0] = tempBigInt & 255;
          r18 = r13 + 1 | 0;
          if (r18 >>> 0 > r3 >>> 0) {
            break L4874;
          } else {
            r13 = r18;
          }
        }
      }
    } while (0);
    r13 = r1 + 1 | 0;
    if ((r13 | 0) == 6) {
      r10 = 0;
      break;
    } else {
      r1 = r13;
    }
  }
  STACKTOP = r6;
  return r10;
}
function _gcry_cipher_lookup_func_name(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = HEAP32[r1 + 4 >> 2];
  r4 = (_strcasecmp(r2, HEAP32[r1 >> 2]) | 0) == 0;
  r1 = r4 & 1;
  if ((r3 | 0) == 0) {
    r5 = r1;
    return r5;
  }
  r6 = HEAP32[r3 >> 2];
  if ((r6 | 0) != 0 & (r4 ^ 1)) {
    r7 = 0;
    r8 = r6;
  } else {
    r5 = r1;
    return r5;
  }
  while (1) {
    r9 = (_strcasecmp(r2, r8) | 0) == 0;
    r1 = r7 + 1 | 0;
    r6 = HEAP32[r3 + (r1 << 2) >> 2];
    if ((r6 | 0) != 0 & (r9 ^ 1)) {
      r7 = r1;
      r8 = r6;
    } else {
      break;
    }
  }
  r5 = r9 & 1;
  return r5;
}
function _gcry_cipher_lookup_oid(r1) {
  return __gcry_module_lookup(HEAP32[114860], r1, 16);
}
function _gcry_cipher_lookup_func_oid(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = HEAP32[r1 + 8 >> 2];
  if ((r3 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r1 = HEAP32[r3 >> 2];
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  } else {
    r5 = 0;
    r6 = 0;
    r7 = r1;
  }
  while (1) {
    r1 = (_strcasecmp(r2, r7) | 0) == 0 ? 1 : r5;
    r8 = r6 + 1 | 0;
    r9 = HEAP32[r3 + (r8 << 3) >> 2];
    if ((r9 | 0) != 0 & (r1 | 0) == 0) {
      r5 = r1;
      r6 = r8;
      r7 = r9;
    } else {
      r4 = r1;
      break;
    }
  }
  return r4;
}
function _gcry_err_make462(r1) {
  return _gpg_err_make463(32, r1);
}
function _do_des_setkey(r1, r2, r3) {
  var r4;
  if ((r3 | 0) != 8) {
    r4 = 44;
    return r4;
  }
  _des_setkey(r1, r2);
  r1 = (_is_weak_key(r2) | 0) == 0;
  __gcry_burn_stack(64);
  r4 = r1 ? 0 : 43;
  return r4;
}
function _do_des_encrypt(r1, r2, r3) {
  _des_ecb_crypt(r1, r3, r2, 0);
  __gcry_burn_stack(32);
  return;
}
function _do_des_decrypt(r1, r2, r3) {
  _des_ecb_crypt(r1, r3, r2, 1);
  __gcry_burn_stack(32);
  return;
}
function _do_tripledes_setkey(r1, r2, r3) {
  var r4, r5;
  if ((r3 | 0) != 24) {
    r4 = 44;
    return r4;
  }
  r3 = r2 + 8 | 0;
  r5 = r2 + 16 | 0;
  _tripledes_set3keys(r1, r2, r3, r5);
  L4915 : do {
    if ((HEAP32[r1 + 768 >> 2] | 0) == 0) {
      do {
        if ((_is_weak_key(r2) | 0) == 0) {
          if ((_is_weak_key(r3) | 0) != 0) {
            break;
          }
          if ((_is_weak_key(r5) | 0) == 0) {
            break L4915;
          }
        }
      } while (0);
      __gcry_burn_stack(64);
      r4 = 43;
      return r4;
    }
  } while (0);
  __gcry_burn_stack(64);
  r4 = 0;
  return r4;
}
function _do_tripledes_encrypt(r1, r2, r3) {
  _tripledes_ecb_crypt(r1, r3, r2, 0);
  __gcry_burn_stack(32);
  return;
}
function _do_tripledes_decrypt(r1, r2, r3) {
  _tripledes_ecb_crypt(r1, r3, r2, 1);
  __gcry_burn_stack(32);
  return;
}
function _run_selftests(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 2) {
    r4 = _selftest_fips(r3);
  } else {
    r4 = 12;
  }
  return r4;
}
function _selftest_fips(r1) {
  var r2, r3;
  r2 = _selftest();
  do {
    if ((r2 | 0) == 0) {
      r3 = 0;
    } else {
      if ((r1 | 0) == 0) {
        r3 = 50;
        break;
      }
      FUNCTION_TABLE[r1](476104, 2, 479284, r2);
      r3 = 50;
    }
  } while (0);
  return r3;
}
function _selftest() {
  var r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r1 = 0;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 2292 | 0;
  r3 = r2, r4 = r3 >> 2;
  r5 = r2 + 8, r6 = r5 >> 2;
  r7 = r2 + 16;
  r8 = r2 + 24;
  r9 = r2 + 40;
  r10 = r2 + 304;
  r11 = r2 + 312;
  r12 = r2 + 320;
  r13 = r2 + 328;
  r14 = r2 + 336;
  r15 = r2 + 1108;
  r16 = r2 + 1508;
  r17 = r2 + 1516;
  r18 = r2 + 2288;
  HEAP32[r4] = 1431655765;
  HEAP32[r4 + 1] = 1431655765;
  HEAP32[r6] = -1;
  HEAP32[r6 + 1] = -1;
  HEAP32[r7 >> 2] = -1180864988;
  HEAP32[r7 + 4 >> 2] = 439898309;
  r19 = r2 + 48 | 0;
  r20 = r3;
  r3 = r5;
  r5 = r8;
  r21 = r2 + 32 | 0;
  r22 = r9;
  r23 = 0;
  while (1) {
    _des_setkey(r19, r20);
    _des_ecb_crypt(r19, r3, r5, 0);
    _des_ecb_crypt(r19, r5, r21, 0);
    _des_setkey(r19, r21);
    _des_ecb_crypt(r19, r5, r22, 1);
    r24 = HEAP32[r9 + 4 >> 2];
    HEAP32[r4] = HEAP32[r9 >> 2];
    HEAP32[r4 + 1] = r24;
    r24 = HEAP32[r8 + 4 >> 2];
    HEAP32[r6] = HEAP32[r8 >> 2];
    HEAP32[r6 + 1] = r24;
    r24 = r23 + 1 | 0;
    if ((r24 | 0) == 64) {
      break;
    } else {
      r23 = r24;
    }
  }
  if ((_memcmp(r9, r7, 8) | 0) != 0) {
    r25 = 473400;
    STACKTOP = r2;
    return r25;
  }
  HEAP32[r10 >> 2] = -1732584194;
  HEAP32[r10 + 4 >> 2] = 271733878;
  HEAP32[r11 >> 2] = 2018915346;
  HEAP32[r11 + 4 >> 2] = -253838182;
  HEAP32[r12 >> 2] = 1144201745;
  HEAP32[r12 + 4 >> 2] = -573789441;
  HEAP32[r13 >> 2] = 591083643;
  HEAP32[r13 + 4 >> 2] = -752452190;
  r7 = r14 | 0;
  r14 = r11;
  r11 = r12;
  r12 = r10;
  r9 = 0;
  while (1) {
    _tripledes_set2keys(r7, r14, r11);
    _tripledes_ecb_crypt(r7, r12, r14, 0);
    _tripledes_ecb_crypt(r7, r12, r11, 1);
    _tripledes_set3keys(r7, r14, r12, r11);
    _tripledes_ecb_crypt(r7, r12, r12, 0);
    r23 = r9 + 1 | 0;
    if ((r23 | 0) == 16) {
      break;
    } else {
      r9 = r23;
    }
  }
  if ((_memcmp(r10, r13, 8) | 0) != 0) {
    r25 = 468840;
    STACKTOP = r2;
    return r25;
  }
  _memcpy(r15 | 0, 414852, 400);
  r13 = r17 | 0;
  r17 = r16 | 0;
  r16 = 0;
  while (1) {
    if (r16 >>> 0 >= 10) {
      r1 = 4037;
      break;
    }
    _tripledes_set3keys(r13, r15 + (r16 * 40 & -1) | 0, r15 + (r16 * 40 & -1) + 8 | 0, r15 + (r16 * 40 & -1) + 16 | 0);
    r10 = r15 + (r16 * 40 & -1) + 24 | 0;
    _tripledes_ecb_crypt(r13, r10, r17, 0);
    r9 = r15 + (r16 * 40 & -1) + 32 | 0;
    if ((_memcmp(r9, r17, 8) | 0) != 0) {
      r25 = 467176;
      r1 = 4048;
      break;
    }
    _tripledes_ecb_crypt(r13, r9, r17, 1);
    if ((_memcmp(r10, r17, 8) | 0) == 0) {
      r16 = r16 + 1 | 0;
    } else {
      r25 = 465276;
      r1 = 4049;
      break;
    }
  }
  if (r1 == 4037) {
    if ((__gcry_md_open(r18, 2, 0) | 0) != 0) {
      r25 = 490636;
      STACKTOP = r2;
      return r25;
    }
    r16 = HEAP32[r18 >> 2];
    r17 = 0;
    while (1) {
      __gcry_md_write(r16, (r17 << 3) + 409800 | 0, 8);
      r13 = r17 + 1 | 0;
      if ((r13 | 0) == 64) {
        break;
      } else {
        r17 = r13;
      }
    }
    r17 = _memcmp(__gcry_md_read(r16, 2), 409780, 20);
    __gcry_md_close(HEAP32[r18 >> 2]);
    if ((r17 | 0) == 0) {
      r26 = 0;
    } else {
      r25 = 489532;
      STACKTOP = r2;
      return r25;
    }
    while (1) {
      if ((r26 | 0) >= 64) {
        r25 = 0;
        r1 = 4045;
        break;
      }
      if ((_is_weak_key((r26 << 3) + 409800 | 0) | 0) == 0) {
        r25 = 488012;
        r1 = 4047;
        break;
      } else {
        r26 = r26 + 1 | 0;
      }
    }
    if (r1 == 4045) {
      STACKTOP = r2;
      return r25;
    } else if (r1 == 4047) {
      STACKTOP = r2;
      return r25;
    }
  } else if (r1 == 4048) {
    STACKTOP = r2;
    return r25;
  } else if (r1 == 4049) {
    STACKTOP = r2;
    return r25;
  }
}
function _des_setkey(r1, r2) {
  var r3, r4, r5;
  r3 = 0;
  r4 = STACKTOP;
  do {
    if ((__gcry_fips_mode() | 0) != 0 | HEAP8[455488]) {
      r3 = 4055;
    } else {
      HEAP8[455488] = 1;
      r5 = _selftest();
      HEAP32[114553] = r5;
      if ((r5 | 0) == 0) {
        break;
      }
      __gcry_log_error(487348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
      r3 = 4055;
      break;
    }
  } while (0);
  do {
    if (r3 == 4055) {
      if ((HEAP32[114553] | 0) == 0) {
        break;
      }
      STACKTOP = r4;
      return;
    }
  } while (0);
  _des_key_schedule(r2, r1 | 0);
  __gcry_burn_stack(32);
  r2 = 0;
  while (1) {
    HEAP32[r1 + (r2 << 2) + 128 >> 2] = HEAP32[r1 + (30 - r2 << 2) >> 2];
    HEAP32[r1 + ((r2 | 1) << 2) + 128 >> 2] = HEAP32[r1 + (31 - r2 << 2) >> 2];
    r3 = r2 + 2 | 0;
    if ((r3 | 0) < 32) {
      r2 = r3;
    } else {
      break;
    }
  }
  STACKTOP = r4;
  return;
}
function _des_ecb_crypt(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = ((r4 | 0) != 0 ? r1 + 128 | 0 : r1 | 0) >> 2;
  r1 = HEAPU8[r2 + 1 | 0] << 16 | HEAPU8[r2] << 24 | HEAPU8[r2 + 2 | 0] << 8 | HEAPU8[r2 + 3 | 0];
  r4 = HEAPU8[r2 + 5 | 0] << 16 | HEAPU8[r2 + 4 | 0] << 24 | HEAPU8[r2 + 6 | 0] << 8 | HEAPU8[r2 + 7 | 0];
  r2 = (r4 ^ r1 >>> 4) & 252645135;
  r6 = r2 ^ r4;
  r4 = r2 << 4 ^ r1;
  r1 = r4 >>> 16 ^ r6 & 65535;
  r2 = r1 ^ r6;
  r6 = r1 << 16 ^ r4;
  r4 = (r2 >>> 2 ^ r6) & 858993459;
  r1 = r4 ^ r6;
  r6 = r4 << 2 ^ r2;
  r2 = (r6 >>> 8 ^ r1) & 16711935;
  r4 = r2 ^ r1;
  r1 = r2 << 8 ^ r6;
  r6 = r1 << 1;
  r2 = (r6 ^ r4) & -1431655766;
  r7 = r2 ^ (r6 | r1 >>> 31);
  r1 = r2 ^ r4;
  r4 = r7 ^ HEAP32[r5];
  r2 = (r7 << 28 | r7 >>> 4) ^ HEAP32[r5 + 1];
  r6 = HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2] ^ (r1 << 1 | r1 >>> 31);
  r1 = r6 ^ HEAP32[r5 + 2];
  r2 = (r6 << 28 | r6 >>> 4) ^ HEAP32[r5 + 3];
  r4 = HEAP32[((r1 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r1 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r1 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r1 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2] ^ r7;
  r7 = r4 ^ HEAP32[r5 + 4];
  r2 = (r4 << 28 | r4 >>> 4) ^ HEAP32[r5 + 5];
  r1 = HEAP32[((r7 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r7 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r7 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r7 >>> 24 & 63) << 2) + 424604 >> 2] ^ r6 ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 6];
  r6 = HEAP32[r5 + 7] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r7 ^ HEAP32[r5 + 8];
  r2 = HEAP32[r5 + 9] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r4 ^ HEAP32[r5 + 10];
  r6 = HEAP32[r5 + 11] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r1 ^ HEAP32[r5 + 12];
  r2 = HEAP32[r5 + 13] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r7 ^ HEAP32[r5 + 14];
  r6 = HEAP32[r5 + 15] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r4 ^ HEAP32[r5 + 16];
  r2 = HEAP32[r5 + 17] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 18];
  r6 = HEAP32[r5 + 19] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r7 ^ HEAP32[r5 + 20];
  r2 = HEAP32[r5 + 21] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r4 ^ HEAP32[r5 + 22];
  r6 = HEAP32[r5 + 23] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r1 ^ HEAP32[r5 + 24];
  r2 = HEAP32[r5 + 25] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r7 ^ HEAP32[r5 + 26];
  r6 = HEAP32[r5 + 27] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r4 ^ HEAP32[r5 + 28];
  r2 = HEAP32[r5 + 29] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 30];
  r6 = HEAP32[r5 + 31] ^ (r1 << 28 | r1 >>> 4);
  r5 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r5 << 31 | r5 >>> 1;
  r5 = (r6 ^ r1) & -1431655766;
  r2 = r5 ^ r6;
  r6 = r5 ^ r1;
  r1 = r6 << 31 | r6 >>> 1;
  r6 = (r1 >>> 8 ^ r2) & 16711935;
  r5 = r6 ^ r2;
  r2 = r6 << 8 ^ r1;
  r1 = (r2 >>> 2 ^ r5) & 858993459;
  r6 = r1 ^ r5;
  r5 = r1 << 2 ^ r2;
  r2 = r5 & 65535 ^ r6 >>> 16;
  r1 = r2 ^ r5;
  r5 = r2 << 16 ^ r6;
  r6 = (r5 >>> 4 ^ r1) & 252645135;
  r2 = r6 ^ r1;
  r1 = r6 << 4 ^ r5;
  HEAP8[r3] = r1 >>> 24 & 255;
  HEAP8[r3 + 1 | 0] = r1 >>> 16 & 255;
  HEAP8[r3 + 2 | 0] = r1 >>> 8 & 255;
  HEAP8[r3 + 3 | 0] = r1 & 255;
  HEAP8[r3 + 4 | 0] = r2 >>> 24 & 255;
  HEAP8[r3 + 5 | 0] = r2 >>> 16 & 255;
  HEAP8[r3 + 6 | 0] = r2 >>> 8 & 255;
  HEAP8[r3 + 7 | 0] = r2 & 255;
  return;
}
function _tripledes_set2keys(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = r1 >> 2;
  _des_key_schedule(r2, r1 | 0);
  _des_key_schedule(r3, r1 + 512 | 0);
  __gcry_burn_stack(32);
  r3 = 0;
  while (1) {
    r2 = (r3 << 2) + r1 + 384 | 0;
    HEAP32[r2 >> 2] = HEAP32[(30 - r3 << 2 >> 2) + r4];
    r5 = r3 | 1;
    r6 = (r5 << 2) + r1 + 384 | 0;
    HEAP32[r6 >> 2] = HEAP32[(31 - r3 << 2 >> 2) + r4];
    HEAP32[(r3 + 32 << 2 >> 2) + r4] = HEAP32[((62 - r3 << 2) + 384 >> 2) + r4];
    HEAP32[(r3 + 33 << 2 >> 2) + r4] = HEAP32[((63 - r3 << 2) + 384 >> 2) + r4];
    r7 = r3 + 64 | 0;
    HEAP32[(r7 << 2 >> 2) + r4] = HEAP32[(r3 << 2 >> 2) + r4];
    r8 = r3 + 65 | 0;
    HEAP32[(r8 << 2 >> 2) + r4] = HEAP32[(r5 << 2 >> 2) + r4];
    HEAP32[((r7 << 2) + 384 >> 2) + r4] = HEAP32[r2 >> 2];
    HEAP32[((r8 << 2) + 384 >> 2) + r4] = HEAP32[r6 >> 2];
    r6 = r3 + 2 | 0;
    if ((r6 | 0) < 32) {
      r3 = r6;
    } else {
      break;
    }
  }
  return;
}
function _tripledes_ecb_crypt(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = ((r4 | 0) != 0 ? r1 + 384 | 0 : r1 | 0) >> 2;
  r1 = HEAPU8[r2 + 1 | 0] << 16 | HEAPU8[r2] << 24 | HEAPU8[r2 + 2 | 0] << 8 | HEAPU8[r2 + 3 | 0];
  r4 = HEAPU8[r2 + 5 | 0] << 16 | HEAPU8[r2 + 4 | 0] << 24 | HEAPU8[r2 + 6 | 0] << 8 | HEAPU8[r2 + 7 | 0];
  r2 = (r4 ^ r1 >>> 4) & 252645135;
  r6 = r2 ^ r4;
  r4 = r2 << 4 ^ r1;
  r1 = r4 >>> 16 ^ r6 & 65535;
  r2 = r1 ^ r6;
  r6 = r1 << 16 ^ r4;
  r4 = (r2 >>> 2 ^ r6) & 858993459;
  r1 = r4 ^ r6;
  r6 = r4 << 2 ^ r2;
  r2 = (r6 >>> 8 ^ r1) & 16711935;
  r4 = r2 ^ r1;
  r1 = r2 << 8 ^ r6;
  r6 = r1 << 1;
  r2 = (r6 ^ r4) & -1431655766;
  r7 = r2 ^ (r6 | r1 >>> 31);
  r1 = r2 ^ r4;
  r4 = r7 ^ HEAP32[r5];
  r2 = (r7 << 28 | r7 >>> 4) ^ HEAP32[r5 + 1];
  r6 = HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2] ^ (r1 << 1 | r1 >>> 31);
  r1 = r6 ^ HEAP32[r5 + 2];
  r2 = (r6 << 28 | r6 >>> 4) ^ HEAP32[r5 + 3];
  r4 = HEAP32[((r1 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r1 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r1 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r1 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2] ^ r7;
  r7 = r4 ^ HEAP32[r5 + 4];
  r2 = (r4 << 28 | r4 >>> 4) ^ HEAP32[r5 + 5];
  r1 = HEAP32[((r7 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r7 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r7 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r7 >>> 24 & 63) << 2) + 424604 >> 2] ^ r6 ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 6];
  r6 = HEAP32[r5 + 7] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r7 ^ HEAP32[r5 + 8];
  r2 = HEAP32[r5 + 9] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r4 ^ HEAP32[r5 + 10];
  r6 = HEAP32[r5 + 11] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r1 ^ HEAP32[r5 + 12];
  r2 = HEAP32[r5 + 13] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r7 ^ HEAP32[r5 + 14];
  r6 = HEAP32[r5 + 15] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r4 ^ HEAP32[r5 + 16];
  r2 = HEAP32[r5 + 17] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 18];
  r6 = HEAP32[r5 + 19] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r7 ^ HEAP32[r5 + 20];
  r2 = HEAP32[r5 + 21] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r4 ^ HEAP32[r5 + 22];
  r6 = HEAP32[r5 + 23] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r1 ^ HEAP32[r5 + 24];
  r2 = HEAP32[r5 + 25] ^ (r1 << 28 | r1 >>> 4);
  r7 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r7 ^ HEAP32[r5 + 26];
  r6 = HEAP32[r5 + 27] ^ (r7 << 28 | r7 >>> 4);
  r4 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2];
  r6 = r4 ^ HEAP32[r5 + 28];
  r2 = HEAP32[r5 + 29] ^ (r4 << 28 | r4 >>> 4);
  r1 = HEAP32[((r6 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 30];
  r6 = r1 << 28 | r1 >>> 4;
  r7 = HEAP32[r5 + 31] ^ r6;
  r8 = HEAP32[r5 + 32] ^ r1;
  r9 = HEAP32[r5 + 33] ^ r6;
  r6 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r4 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r7 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r7 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r7 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r7 >>> 24 & 63) << 2) + 426908 >> 2] ^ HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r6 ^ HEAP32[r5 + 34];
  r8 = HEAP32[r5 + 35] ^ (r6 << 28 | r6 >>> 4);
  r7 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r8 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 426908 >> 2];
  r8 = r7 ^ HEAP32[r5 + 36];
  r9 = HEAP32[r5 + 37] ^ (r7 << 28 | r7 >>> 4);
  r1 = HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r1 ^ HEAP32[r5 + 38];
  r8 = HEAP32[r5 + 39] ^ (r1 << 28 | r1 >>> 4);
  r6 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r8 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 426908 >> 2];
  r8 = r6 ^ HEAP32[r5 + 40];
  r9 = HEAP32[r5 + 41] ^ (r6 << 28 | r6 >>> 4);
  r7 = HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r7 ^ HEAP32[r5 + 42];
  r8 = HEAP32[r5 + 43] ^ (r7 << 28 | r7 >>> 4);
  r1 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r8 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 426908 >> 2];
  r8 = r1 ^ HEAP32[r5 + 44];
  r9 = HEAP32[r5 + 45] ^ (r1 << 28 | r1 >>> 4);
  r6 = HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r6 ^ HEAP32[r5 + 46];
  r8 = HEAP32[r5 + 47] ^ (r6 << 28 | r6 >>> 4);
  r7 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r8 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 426908 >> 2];
  r8 = r7 ^ HEAP32[r5 + 48];
  r9 = HEAP32[r5 + 49] ^ (r7 << 28 | r7 >>> 4);
  r1 = HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r1 ^ HEAP32[r5 + 50];
  r8 = HEAP32[r5 + 51] ^ (r1 << 28 | r1 >>> 4);
  r6 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r8 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 426908 >> 2];
  r8 = r6 ^ HEAP32[r5 + 52];
  r9 = HEAP32[r5 + 53] ^ (r6 << 28 | r6 >>> 4);
  r7 = HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r7 ^ HEAP32[r5 + 54];
  r8 = HEAP32[r5 + 55] ^ (r7 << 28 | r7 >>> 4);
  r1 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r8 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 426908 >> 2];
  r8 = r1 ^ HEAP32[r5 + 56];
  r9 = HEAP32[r5 + 57] ^ (r1 << 28 | r1 >>> 4);
  r6 = HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r6 ^ HEAP32[r5 + 58];
  r8 = HEAP32[r5 + 59] ^ (r6 << 28 | r6 >>> 4);
  r7 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r8 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 426908 >> 2];
  r8 = r7 ^ HEAP32[r5 + 60];
  r9 = HEAP32[r5 + 61] ^ (r7 << 28 | r7 >>> 4);
  r1 = HEAP32[((r8 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r8 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r8 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r8 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r9 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 426908 >> 2];
  r9 = r1 ^ HEAP32[r5 + 62];
  r8 = r1 << 28 | r1 >>> 4;
  r6 = HEAP32[r5 + 63] ^ r8;
  r2 = HEAP32[r5 + 64] ^ r1;
  r4 = HEAP32[r5 + 65] ^ r8;
  r8 = HEAP32[((r9 & 63) << 2) + 416924 >> 2] ^ r7 ^ HEAP32[((r9 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r9 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r9 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r6 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r6 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r6 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r6 >>> 24 & 63) << 2) + 426908 >> 2] ^ HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r8 ^ HEAP32[r5 + 66];
  r2 = HEAP32[r5 + 67] ^ (r8 << 28 | r8 >>> 4);
  r6 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r6 ^ HEAP32[r5 + 68];
  r4 = HEAP32[r5 + 69] ^ (r6 << 28 | r6 >>> 4);
  r1 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r8 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r1 ^ HEAP32[r5 + 70];
  r2 = HEAP32[r5 + 71] ^ (r1 << 28 | r1 >>> 4);
  r8 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r8 ^ HEAP32[r5 + 72];
  r4 = HEAP32[r5 + 73] ^ (r8 << 28 | r8 >>> 4);
  r6 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r6 ^ HEAP32[r5 + 74];
  r2 = HEAP32[r5 + 75] ^ (r6 << 28 | r6 >>> 4);
  r1 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r8 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 76];
  r4 = HEAP32[r5 + 77] ^ (r1 << 28 | r1 >>> 4);
  r8 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r8 ^ HEAP32[r5 + 78];
  r2 = HEAP32[r5 + 79] ^ (r8 << 28 | r8 >>> 4);
  r6 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r6 ^ HEAP32[r5 + 80];
  r4 = HEAP32[r5 + 81] ^ (r6 << 28 | r6 >>> 4);
  r1 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r8 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r1 ^ HEAP32[r5 + 82];
  r2 = HEAP32[r5 + 83] ^ (r1 << 28 | r1 >>> 4);
  r8 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r8 ^ HEAP32[r5 + 84];
  r4 = HEAP32[r5 + 85] ^ (r8 << 28 | r8 >>> 4);
  r6 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r6 ^ HEAP32[r5 + 86];
  r2 = HEAP32[r5 + 87] ^ (r6 << 28 | r6 >>> 4);
  r1 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r8 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r1 ^ HEAP32[r5 + 88];
  r4 = HEAP32[r5 + 89] ^ (r1 << 28 | r1 >>> 4);
  r8 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r8 ^ HEAP32[r5 + 90];
  r2 = HEAP32[r5 + 91] ^ (r8 << 28 | r8 >>> 4);
  r6 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r1 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r6 ^ HEAP32[r5 + 92];
  r4 = HEAP32[r5 + 93] ^ (r6 << 28 | r6 >>> 4);
  r1 = HEAP32[((r2 & 63) << 2) + 416924 >> 2] ^ r8 ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r4 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 426908 >> 2];
  r4 = r1 ^ HEAP32[r5 + 94];
  r2 = HEAP32[r5 + 95] ^ (r1 << 28 | r1 >>> 4);
  r5 = HEAP32[((r4 & 63) << 2) + 416924 >> 2] ^ r6 ^ HEAP32[((r4 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[((r4 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[((r4 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[((r2 & 63) << 2) + 417180 >> 2] ^ HEAP32[((r2 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[((r2 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[((r2 >>> 24 & 63) << 2) + 426908 >> 2];
  r2 = r5 << 31 | r5 >>> 1;
  r5 = (r2 ^ r1) & -1431655766;
  r4 = r5 ^ r2;
  r2 = r5 ^ r1;
  r1 = r2 << 31 | r2 >>> 1;
  r2 = (r1 >>> 8 ^ r4) & 16711935;
  r5 = r2 ^ r4;
  r4 = r2 << 8 ^ r1;
  r1 = (r4 >>> 2 ^ r5) & 858993459;
  r2 = r1 ^ r5;
  r5 = r1 << 2 ^ r4;
  r4 = r5 & 65535 ^ r2 >>> 16;
  r1 = r4 ^ r5;
  r5 = r4 << 16 ^ r2;
  r2 = (r5 >>> 4 ^ r1) & 252645135;
  r4 = r2 ^ r1;
  r1 = r2 << 4 ^ r5;
  HEAP8[r3] = r1 >>> 24 & 255;
  HEAP8[r3 + 1 | 0] = r1 >>> 16 & 255;
  HEAP8[r3 + 2 | 0] = r1 >>> 8 & 255;
  HEAP8[r3 + 3 | 0] = r1 & 255;
  HEAP8[r3 + 4 | 0] = r4 >>> 24 & 255;
  HEAP8[r3 + 5 | 0] = r4 >>> 16 & 255;
  HEAP8[r3 + 6 | 0] = r4 >>> 8 & 255;
  HEAP8[r3 + 7 | 0] = r4 & 255;
  return;
}
function _working_memcmp(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = HEAP8[r1];
  r4 = HEAP8[r2];
  do {
    if (r3 << 24 >> 24 == r4 << 24 >> 24) {
      r5 = HEAP8[r1 + 1 | 0];
      r6 = HEAP8[r2 + 1 | 0];
      if (r5 << 24 >> 24 != r6 << 24 >> 24) {
        r7 = r5;
        r8 = r6;
        break;
      }
      r6 = HEAP8[r1 + 2 | 0];
      r5 = HEAP8[r2 + 2 | 0];
      if (r6 << 24 >> 24 != r5 << 24 >> 24) {
        r7 = r6;
        r8 = r5;
        break;
      }
      r5 = HEAP8[r1 + 3 | 0];
      r6 = HEAP8[r2 + 3 | 0];
      if (r5 << 24 >> 24 != r6 << 24 >> 24) {
        r7 = r5;
        r8 = r6;
        break;
      }
      r6 = HEAP8[r1 + 4 | 0];
      r5 = HEAP8[r2 + 4 | 0];
      if (r6 << 24 >> 24 != r5 << 24 >> 24) {
        r7 = r6;
        r8 = r5;
        break;
      }
      r5 = HEAP8[r1 + 5 | 0];
      r6 = HEAP8[r2 + 5 | 0];
      if (r5 << 24 >> 24 != r6 << 24 >> 24) {
        r7 = r5;
        r8 = r6;
        break;
      }
      r6 = HEAP8[r1 + 6 | 0];
      r5 = HEAP8[r2 + 6 | 0];
      if (r6 << 24 >> 24 != r5 << 24 >> 24) {
        r7 = r6;
        r8 = r5;
        break;
      }
      r5 = HEAP8[r1 + 7 | 0];
      r6 = HEAP8[r2 + 7 | 0];
      if (r5 << 24 >> 24 == r6 << 24 >> 24) {
        r9 = 0;
      } else {
        r7 = r5;
        r8 = r6;
        break;
      }
      return r9;
    } else {
      r7 = r3;
      r8 = r4;
    }
  } while (0);
  r9 = (r7 & 255) - (r8 & 255) | 0;
  return r9;
}
function _tripledes_set3keys(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = r1 >> 2;
  r6 = 0;
  r7 = STACKTOP;
  do {
    if ((__gcry_fips_mode() | 0) != 0 | HEAP8[455488]) {
      r6 = 4081;
    } else {
      HEAP8[455488] = 1;
      r8 = _selftest();
      HEAP32[102599] = r8;
      if ((r8 | 0) == 0) {
        break;
      }
      __gcry_log_error(487348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r8, tempInt));
      r6 = 4081;
      break;
    }
  } while (0);
  do {
    if (r6 == 4081) {
      if ((HEAP32[102599] | 0) == 0) {
        break;
      }
      STACKTOP = r7;
      return;
    }
  } while (0);
  _des_key_schedule(r2, r1 | 0);
  _des_key_schedule(r3, r1 + 512 | 0);
  _des_key_schedule(r4, r1 + 256 | 0);
  __gcry_burn_stack(32);
  r1 = 0;
  while (1) {
    HEAP32[((r1 << 2) + 384 >> 2) + r5] = HEAP32[(94 - r1 << 2 >> 2) + r5];
    HEAP32[(((r1 | 1) << 2) + 384 >> 2) + r5] = HEAP32[(95 - r1 << 2 >> 2) + r5];
    HEAP32[(r1 + 32 << 2 >> 2) + r5] = HEAP32[((62 - r1 << 2) + 384 >> 2) + r5];
    HEAP32[(r1 + 33 << 2 >> 2) + r5] = HEAP32[((63 - r1 << 2) + 384 >> 2) + r5];
    HEAP32[((r1 + 64 << 2) + 384 >> 2) + r5] = HEAP32[(30 - r1 << 2 >> 2) + r5];
    HEAP32[((r1 + 65 << 2) + 384 >> 2) + r5] = HEAP32[(31 - r1 << 2 >> 2) + r5];
    r4 = r1 + 2 | 0;
    if ((r4 | 0) < 32) {
      r1 = r4;
    } else {
      break;
    }
  }
  STACKTOP = r7;
  return;
}
function _is_weak_key(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = 0;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  HEAP8[r4 | 0] = HEAP8[r1] & -2;
  HEAP8[r4 + 1 | 0] = HEAP8[r1 + 1 | 0] & -2;
  HEAP8[r4 + 2 | 0] = HEAP8[r1 + 2 | 0] & -2;
  HEAP8[r4 + 3 | 0] = HEAP8[r1 + 3 | 0] & -2;
  HEAP8[r4 + 4 | 0] = HEAP8[r1 + 4 | 0] & -2;
  HEAP8[r4 + 5 | 0] = HEAP8[r1 + 5 | 0] & -2;
  HEAP8[r4 + 6 | 0] = HEAP8[r1 + 6 | 0] & -2;
  HEAP8[r4 + 7 | 0] = HEAP8[r1 + 7 | 0] & -2;
  r1 = r4 | 0;
  r4 = 63;
  r5 = 0;
  L5011 : while (1) {
    r6 = r4;
    while (1) {
      if ((r5 | 0) > (r6 | 0)) {
        r7 = 0;
        r2 = 4094;
        break L5011;
      }
      r8 = (r6 + r5 | 0) / 2 & -1;
      r9 = _working_memcmp(r1, (r8 << 3) + 409800 | 0);
      if ((r9 | 0) == 0) {
        r7 = -1;
        r2 = 4095;
        break L5011;
      }
      if ((r9 | 0) > 0) {
        break;
      } else {
        r6 = r8 - 1 | 0;
      }
    }
    r4 = r6;
    r5 = r8 + 1 | 0;
  }
  if (r2 == 4094) {
    STACKTOP = r3;
    return r7;
  } else if (r2 == 4095) {
    STACKTOP = r3;
    return r7;
  }
}
function _gpg_err_code485(r1) {
  return r1 & 65535;
}
function _gpg_err_make489(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 16777216;
  }
  return r2;
}
function _des_key_schedule(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = HEAPU8[r1 + 1 | 0] << 16 | HEAPU8[r1] << 24 | HEAPU8[r1 + 2 | 0] << 8 | HEAPU8[r1 + 3 | 0];
  r4 = HEAPU8[r1 + 5 | 0] << 16 | HEAPU8[r1 + 4 | 0] << 24 | HEAPU8[r1 + 6 | 0] << 8 | HEAPU8[r1 + 7 | 0];
  r1 = (r4 >>> 4 ^ r3) & 252645135;
  r5 = r1 ^ r3;
  r3 = r1 << 4 ^ r4;
  r4 = (r3 ^ r5) & 269488144;
  r1 = r4 ^ r5;
  r5 = r4 ^ r3;
  r3 = (HEAP32[((r1 >>> 8 & 15) << 2) + 451316 >> 2] << 2 | HEAP32[((r1 & 15) << 2) + 451316 >> 2] << 3 | HEAP32[((r1 >>> 16 & 15) << 2) + 451316 >> 2] << 1 | HEAP32[((r1 >>> 24 & 15) << 2) + 451316 >> 2] | HEAP32[((r1 >>> 5 & 15) << 2) + 451316 >> 2] << 7 | HEAP32[((r1 >>> 13 & 15) << 2) + 451316 >> 2] << 6 | HEAP32[((r1 >>> 21 & 15) << 2) + 451316 >> 2] << 5 | HEAP32[(r1 >>> 29 << 2) + 451316 >> 2] << 4) & 268435455;
  r1 = (HEAP32[((r5 >>> 9 & 15) << 2) + 438900 >> 2] << 2 | HEAP32[((r5 >>> 1 & 15) << 2) + 438900 >> 2] << 3 | HEAP32[((r5 >>> 17 & 15) << 2) + 438900 >> 2] << 1 | HEAP32[((r5 >>> 25 & 15) << 2) + 438900 >> 2] | HEAP32[((r5 >>> 4 & 15) << 2) + 438900 >> 2] << 7 | HEAP32[((r5 >>> 12 & 15) << 2) + 438900 >> 2] << 6 | HEAP32[((r5 >>> 20 & 15) << 2) + 438900 >> 2] << 5 | HEAP32[(r5 >>> 28 << 2) + 438900 >> 2] << 4) & 268435455;
  r5 = r2;
  r2 = 0;
  while (1) {
    r4 = HEAPU8[r2 + 457316 | 0];
    r6 = 28 - r4 | 0;
    r7 = r3 >>> (r6 >>> 0) | r3 << r4;
    r8 = r7 & 268435455;
    r9 = r1 >>> (r6 >>> 0) | r1 << r4;
    r4 = r9 & 268435455;
    r6 = r7 << 10;
    r10 = r4 >>> 14;
    r11 = r4 >>> 3;
    HEAP32[r5 >> 2] = r7 << 28 & 268435456 | r9 & 256 | r7 << 4 & 603979776 | r7 << 14 & 134217728 | r7 << 18 & 34078720 | r7 << 6 & 16777216 | r7 << 9 & 2097152 | r7 >>> 1 & 1048576 | r6 & 262144 | r7 >>> 10 & 65536 | r9 >>> 13 & 8192 | r9 >>> 4 & 4096 | r9 << 6 & 2048 | r9 >>> 1 & 1024 | r9 >>> 5 & 32 | r9 >>> 10 & 16 | r9 >>> 18 & 4 | r9 >>> 26 & 2 | r9 >>> 24 & 1 | r8 << 2 & 131072 | r10 & 512 | r11 & 8;
    r12 = r7 << 15;
    HEAP32[r5 + 4 >> 2] = r7 << 17 & 268435456 | r9 & 512 | r12 & 536870912 | r6 & 134217728 | r7 << 22 & 67108864 | r7 >>> 2 & 33554432 | r7 << 16 & 2097152 | r7 << 11 & 1048576 | r7 >>> 6 & 262144 | r12 & 131072 | r7 >>> 4 & 65536 | r9 >>> 2 & 8192 | r9 << 8 & 4096 | r9 >>> 9 & 1024 | r9 << 7 & 256 | r9 >>> 7 & 32 | r9 >>> 21 & 2 | r8 << 1 & 16777216 | r8 << 3 & 524288 | r10 & 2056 | r11 & 17 | r4 << 2 & 4;
    r11 = r2 + 1 | 0;
    if ((r11 | 0) == 16) {
      break;
    } else {
      r3 = r8;
      r1 = r4;
      r5 = r5 + 8 | 0;
      r2 = r11;
    }
  }
  return;
}
function _openpgp_s2k(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r10 = 0;
  r11 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r12 = r11;
  do {
    if ((r3 | 0) == 19 | (r3 | 0) == 17) {
      if ((r5 | 0) != 0 & (r6 | 0) == 8) {
        break;
      } else {
        r13 = 55;
      }
      STACKTOP = r11;
      return r13;
    }
  } while (0);
  if ((__gcry_is_secure(r1) | 0) == 0) {
    r14 = (__gcry_is_secure(r9) | 0) != 0;
  } else {
    r14 = 1;
  }
  r15 = _gpg_err_code485(__gcry_md_open(r12, r4, r14 & 1));
  if ((r15 | 0) != 0) {
    r13 = r15;
    STACKTOP = r11;
    return r13;
  }
  L20 : do {
    if ((r8 | 0) != 0) {
      r15 = HEAP32[r12 >> 2];
      r14 = r2 + 8 | 0;
      r16 = r14 >>> 0 > r7 >>> 0 ? r14 : r7;
      r17 = (r15 + 4 | 0) >> 2;
      r18 = r15 + 8 | 0;
      r19 = 0;
      r20 = 0;
      while (1) {
        L24 : do {
          if ((r20 | 0) != 0) {
            __gcry_md_reset(r15);
            if ((r20 | 0) > 0) {
              r21 = 0;
            } else {
              break;
            }
            while (1) {
              if ((HEAP32[r17] | 0) == (HEAP32[r18 >> 2] | 0)) {
                __gcry_md_write(r15, 0, 0);
              }
              r22 = HEAP32[r17];
              HEAP32[r17] = r22 + 1 | 0;
              HEAP8[r15 + (r22 + 12) | 0] = 0;
              r22 = r21 + 1 | 0;
              if ((r22 | 0) == (r20 | 0)) {
                break L24;
              } else {
                r21 = r22;
              }
            }
          }
        } while (0);
        L32 : do {
          if ((r3 | 0) == 19) {
            if (r16 >>> 0 > r14 >>> 0) {
              r23 = r16;
            } else {
              r24 = r16;
              r10 = 23;
              break;
            }
            while (1) {
              __gcry_md_write(r15, r5, r6);
              __gcry_md_write(r15, r1, r2);
              r22 = r23 - r14 | 0;
              if (r22 >>> 0 > r14 >>> 0) {
                r23 = r22;
              } else {
                r24 = r22;
                r10 = 23;
                break L32;
              }
            }
          } else if ((r3 | 0) == 17) {
            r24 = r14;
            r10 = 23;
          } else {
            __gcry_md_write(r15, r1, r2);
            break;
          }
        } while (0);
        do {
          if (r10 == 23) {
            r10 = 0;
            if (r24 >>> 0 < r6 >>> 0) {
              __gcry_md_write(r15, r5, r24);
              break;
            } else {
              __gcry_md_write(r15, r5, r6);
              __gcry_md_write(r15, r1, r24 - r6 | 0);
              break;
            }
          }
        } while (0);
        __gcry_md_ctl(r15, 5, 0, 0);
        r22 = __gcry_md_get_algo_dlen(r4);
        r25 = r8 - r19 | 0;
        r26 = r22 >>> 0 > r25 >>> 0 ? r25 : r22;
        _memcpy(r9 + r19 | 0, __gcry_md_read(r15, r4), r26);
        r22 = r26 + r19 | 0;
        if (r22 >>> 0 < r8 >>> 0) {
          r19 = r22;
          r20 = r20 + 1 | 0;
        } else {
          break L20;
        }
      }
    }
  } while (0);
  __gcry_md_close(HEAP32[r12 >> 2]);
  r13 = 0;
  STACKTOP = r11;
  return r13;
}
function _pkdf2(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r9 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r10 = r9, r11 = r10 >> 2;
  if ((r4 | 0) == 0 | (r5 | 0) == 0 | (r6 | 0) == 0 | (r7 | 0) == 0) {
    r12 = 55;
    STACKTOP = r9;
    return r12;
  }
  r13 = __gcry_md_get_algo_dlen(r3);
  if ((r13 | 0) == 0) {
    r12 = 5;
    STACKTOP = r9;
    return r12;
  }
  if ((__gcry_is_secure(r1) | 0) == 0) {
    r14 = (__gcry_is_secure(r8) | 0) != 0;
  } else {
    r14 = 1;
  }
  r15 = Math.floor(((r7 - 1 | 0) >>> 0) / (r13 >>> 0));
  r16 = r15 + 1 | 0;
  r17 = r7 - Math.imul(r15, r13) | 0;
  r15 = r5 + 4 | 0;
  r7 = r13 + r15 | 0;
  r18 = r7 + r13 | 0;
  if (r14) {
    r19 = __gcry_malloc_secure(r18);
  } else {
    r19 = __gcry_malloc(r18);
  }
  if ((r19 | 0) == 0) {
    r12 = _gpg_err_code_from_syserror();
    STACKTOP = r9;
    return r12;
  }
  r18 = r19 + r5 | 0;
  r20 = r19 + r15 | 0;
  r21 = r19 + r7 | 0;
  r22 = _gpg_err_code485(__gcry_md_open(r10, r3, r14 & 1 | 2));
  if ((r22 | 0) != 0) {
    __gcry_free(r19);
    r12 = r22;
    STACKTOP = r9;
    return r12;
  }
  _memcpy(r19, r4, r5);
  L67 : do {
    if ((r16 | 0) != 0) {
      r4 = (r6 | 0) == 0;
      r22 = r5 + (r19 + 1) | 0;
      r14 = r5 + (r19 + 2) | 0;
      r3 = r5 + (r19 + 3) | 0;
      r10 = (r13 | 0) == 0;
      r23 = r8;
      r24 = 1;
      L69 : while (1) {
        L71 : do {
          if (!r4) {
            r25 = HEAP32[r11];
            r26 = r24 >>> 24 & 255;
            r27 = r24 >>> 16 & 255;
            r28 = r24 >>> 8 & 255;
            r29 = r24 & 255;
            r30 = HEAP32[r11];
            r31 = 0;
            while (1) {
              r32 = _gpg_err_code485(__gcry_md_setkey(r25, r1, r2));
              if ((r32 | 0) != 0) {
                break L69;
              }
              L76 : do {
                if ((r31 | 0) == 0) {
                  HEAP8[r18] = r26;
                  HEAP8[r22] = r27;
                  HEAP8[r14] = r28;
                  HEAP8[r3] = r29;
                  __gcry_md_write(r30, r19, r15);
                  _memcpy(r21, __gcry_md_read(r30, 0), r13);
                  _memcpy(r20, r21, r13);
                } else {
                  __gcry_md_write(r30, r21, r13);
                  _memcpy(r21, __gcry_md_read(r30, 0), r13);
                  if (r10) {
                    break;
                  } else {
                    r33 = 0;
                  }
                  while (1) {
                    r34 = r19 + r33 + r15 | 0;
                    HEAP8[r34] = HEAP8[r34] ^ HEAP8[r19 + r33 + r7 | 0];
                    r34 = r33 + 1 | 0;
                    if ((r34 | 0) == (r13 | 0)) {
                      break L76;
                    } else {
                      r33 = r34;
                    }
                  }
                }
              } while (0);
              r34 = r31 + 1 | 0;
              if (r34 >>> 0 < r6 >>> 0) {
                r31 = r34;
              } else {
                break L71;
              }
            }
          }
        } while (0);
        if ((r24 | 0) == (r16 | 0)) {
          _memcpy(r23, r20, r17);
          r35 = r23;
        } else {
          _memcpy(r23, r20, r13);
          r35 = r23 + r13 | 0;
        }
        r31 = r24 + 1 | 0;
        if (r31 >>> 0 > r16 >>> 0) {
          break L67;
        } else {
          r23 = r35;
          r24 = r31;
        }
      }
      __gcry_md_close(HEAP32[r11]);
      __gcry_free(r19);
      r12 = r32;
      STACKTOP = r9;
      return r12;
    }
  } while (0);
  __gcry_md_close(HEAP32[r11]);
  __gcry_free(r19);
  r12 = 0;
  STACKTOP = r9;
  return r12;
}
function __gcry_kdf_derive(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10;
  do {
    if ((r1 | 0) == 0 | (r2 | 0) == 0) {
      r10 = 79;
    } else {
      if ((r9 | 0) == 0 | (r8 | 0) == 0) {
        r10 = 55;
        break;
      }
      if ((r3 | 0) == 34) {
        r10 = _pkdf2(r1, r2, r4, r5, r6, r7, r8, r9);
        break;
      } else if ((r3 | 0) == 16 | (r3 | 0) == 17 | (r3 | 0) == 19) {
        r10 = _openpgp_s2k(r1, r2, r3, r4, r5, r6, r7, r8, r9);
        break;
      } else if ((r3 | 0) == 33) {
        r10 = 84;
        break;
      } else {
        r10 = 149;
        break;
      }
    }
  } while (0);
  return _gpg_error488(r10);
}
function _gpg_error488(r1) {
  return _gpg_err_make489(r1);
}
function __gcry_md_register(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  if ((__gcry_fips_mode() | 0) != 0) {
    r7 = _gpg_error518(60);
    STACKTOP = r5;
    return r7;
  }
  __gcry_ath_mutex_lock(457944);
  r8 = __gcry_module_add(457948, 0, r1, (r2 | 0) != 0 ? r2 : 457396, r6);
  __gcry_ath_mutex_unlock(457944);
  if ((r8 | 0) == 0) {
    HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
    HEAP32[r3 >> 2] = HEAP32[HEAP32[r6 >> 2] + 24 >> 2];
  }
  r7 = _gcry_error519(r8);
  STACKTOP = r5;
  return r7;
}
function _gpg_error518(r1) {
  return _gpg_err_make565(1, r1);
}
function _gcry_error519(r1) {
  return _gcry_err_make564(r1);
}
function __gcry_md_unregister(r1) {
  __gcry_ath_mutex_lock(457944);
  __gcry_module_release(r1);
  __gcry_ath_mutex_unlock(457944);
  return;
}
function __gcry_md_map_name(r1) {
  var r2, r3, r4, r5, r6;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2, r4 = r3 >> 2;
  HEAP32[r4] = 0;
  if ((r1 | 0) == 0) {
    r5 = 0;
    STACKTOP = r2;
    return r5;
  }
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  __gcry_ath_mutex_lock(457944);
  do {
    if ((_search_oid524(r1, r3) | 0) == 0) {
      r6 = _gcry_md_lookup_name(r1);
      if ((r6 | 0) == 0) {
        break;
      }
      HEAP32[r4] = HEAP32[r6 + 24 >> 2];
      __gcry_module_release(r6);
    }
  } while (0);
  __gcry_ath_mutex_unlock(457944);
  r5 = HEAP32[r4];
  STACKTOP = r2;
  return r5;
}
function _search_oid524(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  do {
    if ((r1 | 0) == 0) {
      r3 = 0;
    } else {
      if ((_strncmp(r1, 479924, 4) | 0) != 0) {
        if ((_strncmp(r1, 479320, 4) | 0) != 0) {
          r3 = r1;
          break;
        }
      }
      r3 = r1 + 4 | 0;
    }
  } while (0);
  r1 = _gcry_md_lookup_oid(r3);
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = HEAP32[r1 + 8 >> 2] + 12 | 0;
  r6 = HEAP32[HEAP32[r5 >> 2] >> 2];
  L135 : do {
    if ((r6 | 0) == 0) {
      r7 = 0;
    } else {
      r8 = (r2 | 0) == 0;
      r9 = r1 + 24 | 0;
      r10 = 0;
      r11 = 0;
      r12 = r6;
      while (1) {
        r13 = (_strcasecmp(r3, r12) | 0) != 0;
        if (r13 | r8) {
          r14 = r13 ? r10 : 1;
        } else {
          HEAP32[r2 >> 2] = HEAP32[r9 >> 2];
          r14 = 1;
        }
        r13 = r11 + 1 | 0;
        r15 = HEAP32[HEAP32[r5 >> 2] + (r13 << 2) >> 2];
        if ((r15 | 0) != 0 & (r14 | 0) == 0) {
          r10 = r14;
          r11 = r13;
          r12 = r15;
        } else {
          r7 = r14;
          break L135;
        }
      }
    }
  } while (0);
  __gcry_module_release(r1);
  r4 = r7;
  return r4;
}
function _gcry_md_lookup_name(r1) {
  return __gcry_module_lookup(HEAP32[114487], r1, 306);
}
function __gcry_md_algo_name(r1) {
  var r2;
  r2 = _digest_algo_to_string(r1);
  return (r2 | 0) != 0 ? r2 : 472684;
}
function _digest_algo_to_string(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  __gcry_ath_mutex_lock(457944);
  r2 = __gcry_module_lookup_id(HEAP32[114487], r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    r4 = __gcry_ath_mutex_unlock(457944);
    return r3;
  }
  r1 = HEAP32[HEAP32[r2 + 8 >> 2] >> 2];
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(457944);
  return r3;
}
function __gcry_md_open(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  if (r3 >>> 0 > 3) {
    r6 = 45;
  } else {
    r6 = _md_open(r5, r2, r3 & 1, r3 & 2);
  }
  HEAP32[r1 >> 2] = (r6 | 0) != 0 ? 0 : HEAP32[r5 >> 2];
  r5 = _gcry_error519(r6);
  STACKTOP = r4;
  return r5;
}
function _md_register_default() {
  var r1, r2, r3, r4;
  r1 = 0;
  r2 = 0;
  while (1) {
    r3 = (r2 << 4) + 457952 | 0;
    if ((r2 | 0) == 15) {
      r1 = 131;
      break;
    }
    do {
      if ((__gcry_fips_mode() | 0) == 0) {
        r1 = 128;
      } else {
        if ((2007 >>> (r2 >>> 0) & 1 | 0) == 0) {
          r4 = 1;
          break;
        }
        if ((r2 | 0) != 4) {
          r1 = 128;
          break;
        }
        if ((__gcry_enforced_fips_mode() | 0) == 0) {
          r1 = 128;
          break;
        } else {
          r4 = 1;
          break;
        }
      }
    } while (0);
    if (r1 == 128) {
      r1 = 0;
      r4 = (__gcry_module_add(457948, HEAP32[(r2 << 4) + 457960 >> 2], HEAP32[r3 >> 2], HEAP32[(r2 << 4) + 457956 >> 2], 0) | 0) == 0;
    }
    if (r4) {
      r2 = r2 + 1 | 0;
    } else {
      r1 = 130;
      break;
    }
  }
  if (r1 == 130) {
    __gcry_bug(486168, 200, 494644);
  } else if (r1 == 131) {
    return;
  }
}
function _md_open(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r5 = (r3 | 0) != 0;
  r6 = r5 ? 528 : 1040;
  r7 = r6 | 32;
  if (r5) {
    r8 = __gcry_malloc_secure(r7), r9 = r8 >> 2;
  } else {
    r8 = __gcry_malloc(r7), r9 = r8 >> 2;
  }
  r10 = r8;
  do {
    if ((r8 | 0) == 0) {
      r11 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      if ((r11 | 0) == 0) {
        break;
      } else {
        r12 = r11;
      }
      return r12;
    }
  } while (0);
  r11 = r8 + r6 | 0;
  r13 = r8;
  HEAP32[r13 >> 2] = r11;
  HEAP32[r9 + 2] = r6 - 15 | 0;
  HEAP32[r9 + 1] = 0;
  _memset(HEAP32[r13 >> 2], 0, 32);
  HEAP32[r11 >> 2] = r5 ? 378630161 : 285677921;
  HEAP32[((r6 | 4) >> 2) + r9] = r7;
  HEAP32[((r6 | 8) >> 2) + r9] = r3;
  do {
    if ((r4 | 0) != 0) {
      r3 = (r2 - 9 | 0) >>> 0 < 2 ? 128 : 64;
      HEAP32[(r6 + 28 >> 2) + r9] = r3;
      r7 = __gcry_malloc_secure(r3 << 1);
      HEAP32[(r6 + 24 >> 2) + r9] = r7;
      if ((r7 | 0) != 0) {
        break;
      }
      r7 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      _md_close(r10);
      if ((r7 | 0) == 0) {
        break;
      } else {
        r12 = r7;
      }
      return r12;
    }
  } while (0);
  __gcry_fast_random_poll();
  do {
    if ((r2 | 0) != 0) {
      r9 = _md_enable(r10, r2);
      if ((r9 | 0) == 0) {
        break;
      }
      _md_close(r10);
      r12 = r9;
      return r12;
    }
  } while (0);
  HEAP32[r1 >> 2] = r10;
  r12 = 0;
  return r12;
}
function __gcry_md_enable(r1, r2) {
  return _gcry_error519(_md_enable(r1, r2));
}
function _md_enable(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r3 = 0;
  r4 = STACKTOP;
  r5 = HEAP32[r1 >> 2];
  r1 = r5 + 20 | 0;
  r6 = r1;
  while (1) {
    r7 = HEAP32[r6 >> 2];
    if ((r7 | 0) == 0) {
      break;
    }
    if ((HEAP32[HEAP32[r7 + 4 >> 2] + 24 >> 2] | 0) == (r2 | 0)) {
      r8 = 0;
      r3 = 171;
      break;
    } else {
      r6 = r7 + 8 | 0;
    }
  }
  if (r3 == 171) {
    STACKTOP = r4;
    return r8;
  }
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  __gcry_ath_mutex_lock(457944);
  r6 = __gcry_module_lookup_id(HEAP32[114487], r2);
  __gcry_ath_mutex_unlock(457944);
  r7 = (r6 | 0) != 0;
  if (!r7) {
    __gcry_log_debug(480172, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
    r8 = 5;
    STACKTOP = r4;
    return r8;
  }
  r9 = HEAP32[r6 + 8 >> 2];
  r10 = r9;
  do {
    if ((r2 | 0) == 1) {
      if ((__gcry_fips_mode() | 0) == 0) {
        r3 = 160;
        break;
      }
      __gcry_inactivate_fips_mode(476064);
      r11 = (__gcry_enforced_fips_mode() | 0) == 0;
      if (r11) {
        r3 = 160;
        break;
      } else {
        r12 = r11 ? 0 : 5;
        break;
      }
    } else {
      r3 = 160;
    }
  } while (0);
  do {
    if (r3 == 160) {
      r2 = HEAP32[r9 + 36 >> 2] + 16 | 0;
      if ((HEAP32[r5 + 8 >> 2] | 0) == 0) {
        r13 = __gcry_malloc(r2), r14 = r13 >> 2;
      } else {
        r13 = __gcry_malloc_secure(r2), r14 = r13 >> 2;
      }
      if ((r13 | 0) == 0) {
        r12 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
        break;
      }
      r11 = r13;
      HEAP32[r11 >> 2] = r10;
      HEAP32[r14 + 1] = r6;
      HEAP32[r14 + 2] = HEAP32[r1 >> 2];
      HEAP32[r14 + 3] = r2;
      HEAP32[r1 >> 2] = r13;
      FUNCTION_TABLE[HEAP32[HEAP32[r11 >> 2] + 20 >> 2]](r13 + 16 | 0);
      r8 = 0;
      STACKTOP = r4;
      return r8;
    }
  } while (0);
  if ((r12 | 0) == 0 | r7 ^ 1) {
    r8 = r12;
    STACKTOP = r4;
    return r8;
  }
  __gcry_ath_mutex_lock(457944);
  __gcry_module_release(r6);
  __gcry_ath_mutex_unlock(457944);
  r8 = r12;
  STACKTOP = r4;
  return r8;
}
function __gcry_md_copy(r1, r2) {
  var r3;
  r3 = _md_copy(r2, r1);
  if ((r3 | 0) != 0) {
    HEAP32[r1 >> 2] = 0;
  }
  return _gcry_error519(r3);
}
function __gcry_md_reset(r1) {
  var r2, r3, r4, r5, r6;
  r2 = (r1 | 0) >> 2;
  HEAP32[HEAP32[r2] + 16 >> 2] = 0;
  HEAP32[r1 + 4 >> 2] = 0;
  r3 = HEAP32[HEAP32[r2] + 20 >> 2];
  L230 : do {
    if ((r3 | 0) != 0) {
      r4 = r3;
      while (1) {
        r5 = r4 + 16 | 0;
        r6 = r4 | 0;
        _memset(r5, 0, HEAP32[HEAP32[r6 >> 2] + 36 >> 2]);
        FUNCTION_TABLE[HEAP32[HEAP32[r6 >> 2] + 20 >> 2]](r5);
        r5 = HEAP32[r4 + 8 >> 2];
        if ((r5 | 0) == 0) {
          break L230;
        } else {
          r4 = r5;
        }
      }
    }
  } while (0);
  r3 = HEAP32[r2];
  r2 = HEAP32[r3 + 24 >> 2];
  if ((r2 | 0) == 0) {
    return;
  }
  _md_write(r1, r2, HEAP32[r3 + 28 >> 2]);
  return;
}
function __gcry_md_close(r1) {
  _md_close(r1);
  return;
}
function _md_close(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = (r1 | 0) >> 2;
  if ((HEAP32[HEAP32[r2] + 12 >> 2] | 0) != 0) {
    _md_stop_debug(r1);
  }
  r3 = HEAP32[HEAP32[r2] + 20 >> 2];
  L246 : do {
    if ((r3 | 0) != 0) {
      r4 = r3, r5 = r4 >> 2;
      while (1) {
        r6 = HEAP32[r5 + 2];
        __gcry_ath_mutex_lock(457944);
        __gcry_module_release(HEAP32[r5 + 1]);
        __gcry_ath_mutex_unlock(457944);
        r7 = r4;
        r8 = HEAP32[r5 + 3];
        L249 : do {
          if ((r8 | 0) != 0) {
            r9 = r7;
            r10 = r8;
            while (1) {
              HEAP8[r9] = 0;
              r11 = r10 - 1 | 0;
              if ((r11 | 0) == 0) {
                break L249;
              } else {
                r9 = r9 + 1 | 0;
                r10 = r11;
              }
            }
          }
        } while (0);
        __gcry_free(r7);
        if ((r6 | 0) == 0) {
          break L246;
        } else {
          r4 = r6, r5 = r4 >> 2;
        }
      }
    }
  } while (0);
  r3 = HEAP32[r2];
  r4 = HEAP32[r3 + 24 >> 2];
  if ((r4 | 0) != 0) {
    r5 = HEAP32[r3 + 28 >> 2] << 1;
    L256 : do {
      if ((r5 | 0) != 0) {
        r3 = r4;
        r8 = r5;
        while (1) {
          HEAP8[r3] = 0;
          r10 = r8 - 1 | 0;
          if ((r10 | 0) == 0) {
            break L256;
          } else {
            r3 = r3 + 1 | 0;
            r8 = r10;
          }
        }
      }
    } while (0);
    __gcry_free(HEAP32[HEAP32[r2] + 24 >> 2]);
  }
  r5 = r1;
  r1 = HEAP32[HEAP32[r2] + 4 >> 2];
  L261 : do {
    if ((r1 | 0) != 0) {
      r2 = r5;
      r4 = r1;
      while (1) {
        HEAP8[r2] = 0;
        r8 = r4 - 1 | 0;
        if ((r8 | 0) == 0) {
          break L261;
        } else {
          r2 = r2 + 1 | 0;
          r4 = r8;
        }
      }
    }
  } while (0);
  __gcry_free(r5);
  return;
}
function __gcry_md_write(r1, r2, r3) {
  _md_write(r1, r2, r3);
  return;
}
function __gcry_md_ctl(r1, r2, r3, r4) {
  var r5;
  if ((r2 | 0) == 5) {
    _md_final(r1);
    r5 = 0;
  } else if ((r2 | 0) == 33) {
    _md_stop_debug(r1);
    r5 = 0;
  } else if ((r2 | 0) == 1) {
    r5 = _gcry_err_code(__gcry_md_setkey(r1, r3, r4));
  } else if ((r2 | 0) == 32) {
    _md_start_debug(r1, r3);
    r5 = 0;
  } else {
    r5 = 61;
  }
  return _gcry_error519(r5);
}
function _gcry_err_code(r1) {
  return _gpg_err_code563(r1);
}
function __gcry_md_setkey(r1, r2, r3) {
  var r4, r5;
  do {
    if ((HEAP32[HEAP32[r1 >> 2] + 24 >> 2] | 0) == 0) {
      r4 = 70;
    } else {
      r5 = _prepare_macpads(r1, r2, r3);
      if ((r5 | 0) != 0) {
        r4 = r5;
        break;
      }
      __gcry_md_reset(r1);
      r4 = 0;
    }
  } while (0);
  return _gcry_error519(r4);
}
function _md_start_debug(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 52 | 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    STACKTOP = r3;
    return;
  }
  r4 = (r1 | 0) >> 2;
  if ((HEAP32[HEAP32[r4] + 12 >> 2] | 0) != 0) {
    __gcry_log_debug(490588, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = r3;
    return;
  }
  r1 = HEAP32[112826] + 1 | 0;
  HEAP32[112826] = r1;
  r5 = r3 | 0;
  _snprintf(r5, 49, 489504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r2, tempInt));
  r2 = _fopen(r5, 487992);
  HEAP32[HEAP32[r4] + 12 >> 2] = r2;
  if ((HEAP32[HEAP32[r4] + 12 >> 2] | 0) != 0) {
    STACKTOP = r3;
    return;
  }
  __gcry_log_debug(487276, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  STACKTOP = r3;
  return;
}
function _md_stop_debug(r1) {
  var r2, r3, r4, r5;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r3 = r2 >> 2;
  r4 = r2 + 8;
  r5 = (r1 | 0) >> 2;
  if ((HEAP32[HEAP32[r5] + 12 >> 2] | 0) != 0) {
    if ((HEAP32[r1 + 4 >> 2] | 0) != 0) {
      _md_write(r1, 0, 0);
    }
    _fclose(HEAP32[HEAP32[r5] + 12 >> 2]);
    HEAP32[HEAP32[r5] + 12 >> 2] = 0;
  }
  HEAP32[r3] = 42;
  HEAP32[r3 + 1] = 0;
  r5 = (i64Math.multiply(r1, 0, HEAP32[r3], HEAP32[r3 + 1]), HEAP32[tempDoublePtr >> 2]);
  r3 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r4 >> 2] = r5;
  HEAP32[r4 + 4 >> 2] = r3;
  STACKTOP = r2;
  return;
}
function _md_copy(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r3 = r1 | 0;
  r4 = HEAP32[r3 >> 2];
  r5 = r1 + 4 | 0;
  if ((HEAP32[r5 >> 2] | 0) != 0) {
    _md_write(r1, 0, 0);
  }
  r6 = HEAP32[r3 >> 2] - r1 | 0, r3 = r6 >> 2;
  r7 = r4 + 8 | 0;
  r8 = r6 + 32 | 0;
  if ((HEAP32[r7 >> 2] | 0) == 0) {
    r9 = __gcry_malloc(r8), r10 = r9 >> 2;
  } else {
    r9 = __gcry_malloc_secure(r8), r10 = r9 >> 2;
  }
  r8 = r9;
  do {
    if ((r9 | 0) == 0) {
      r11 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      if ((r11 | 0) == 0) {
        break;
      } else {
        r12 = r11;
      }
      return r12;
    }
  } while (0);
  r11 = r9 + r6 | 0;
  HEAP32[r10] = r11;
  r13 = HEAP32[r1 + 8 >> 2];
  if ((r13 | 0) != (r6 - 15 | 0)) {
    __gcry_assert_failed(482324, 486168, 655, 494684);
  }
  HEAP32[r10 + 2] = r13;
  HEAP32[r10 + 1] = 0;
  if ((HEAP32[r5 >> 2] | 0) != 0) {
    __gcry_assert_failed(481804, 486168, 658, 494684);
  }
  _memcpy(r11, r4, 32);
  HEAP32[r3 + (r10 + 5)] = 0;
  HEAP32[r3 + (r10 + 3)] = 0;
  r11 = r4 + 24 | 0;
  do {
    if ((HEAP32[r11 >> 2] | 0) != 0) {
      r5 = r4 + 28 | 0;
      r13 = __gcry_malloc_secure(HEAP32[r5 >> 2] << 1);
      HEAP32[r3 + (r10 + 6)] = r13;
      if ((r13 | 0) != 0) {
        _memcpy(r13, HEAP32[r11 >> 2], HEAP32[r5 >> 2] << 1);
        break;
      }
      r5 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      _md_close(r8);
      if ((r5 | 0) == 0) {
        break;
      } else {
        r12 = r5;
      }
      return r12;
    }
  } while (0);
  r11 = HEAP32[r4 + 20 >> 2];
  L324 : do {
    if ((r11 | 0) == 0) {
      r14 = 0;
    } else {
      r10 = r6 + (r9 + 20) | 0;
      r3 = r11;
      while (1) {
        r5 = r3 | 0;
        r13 = HEAP32[HEAP32[r5 >> 2] + 36 >> 2] + 16 | 0;
        if ((HEAP32[r7 >> 2] | 0) == 0) {
          r15 = __gcry_malloc(r13);
        } else {
          r15 = __gcry_malloc_secure(r13);
        }
        if ((r15 | 0) == 0) {
          break;
        }
        _memcpy(r15, r3, HEAP32[HEAP32[r5 >> 2] + 36 >> 2] + 16 | 0);
        HEAP32[r15 + 8 >> 2] = HEAP32[r10 >> 2];
        HEAP32[r10 >> 2] = r15;
        __gcry_ath_mutex_lock(457944);
        __gcry_module_use(HEAP32[r15 + 4 >> 2]);
        __gcry_ath_mutex_unlock(457944);
        r5 = HEAP32[r3 + 8 >> 2];
        if ((r5 | 0) == 0) {
          r14 = 0;
          break L324;
        } else {
          r3 = r5;
        }
      }
      r3 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      _md_close(r8);
      r14 = r3;
    }
  } while (0);
  r15 = (r14 | 0) == 0;
  do {
    if ((HEAP32[r4 + 12 >> 2] | 0) != 0 & r15) {
      _md_start_debug(r8, 481192);
      if (r15) {
        break;
      } else {
        r12 = r14;
      }
      return r12;
    } else {
      if (r15) {
        break;
      } else {
        r12 = r14;
      }
      return r12;
    }
  } while (0);
  HEAP32[r2 >> 2] = r8;
  r12 = 0;
  return r12;
}
function _md_write(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = (r1 | 0) >> 2;
  r5 = HEAP32[HEAP32[r4] + 12 >> 2];
  do {
    if ((r5 | 0) != 0) {
      r6 = HEAP32[r1 + 4 >> 2];
      do {
        if ((r6 | 0) != 0) {
          if ((_fwrite(r1 + 12 | 0, r6, 1, r5) | 0) == 1) {
            break;
          }
          __gcry_bug(486168, 794, 494632);
        }
      } while (0);
      if ((r3 | 0) == 0) {
        break;
      }
      if ((_fwrite(r2, r3, 1, HEAP32[HEAP32[r4] + 12 >> 2]) | 0) == 1) {
        break;
      }
      __gcry_bug(486168, 796, 494632);
    }
  } while (0);
  r5 = HEAP32[HEAP32[r4] + 20 >> 2];
  r4 = (r1 + 4 | 0) >> 2;
  if ((r5 | 0) == 0) {
    HEAP32[r4] = 0;
    return;
  }
  r6 = r1 + 12 | 0;
  r1 = r5, r5 = r1 >> 2;
  while (1) {
    r7 = HEAP32[r4];
    if ((r7 | 0) != 0) {
      FUNCTION_TABLE[HEAP32[HEAP32[r5] + 24 >> 2]](r1 + 16 | 0, r6, r7);
    }
    FUNCTION_TABLE[HEAP32[HEAP32[r5] + 24 >> 2]](r1 + 16 | 0, r2, r3);
    r7 = HEAP32[r5 + 2];
    if ((r7 | 0) == 0) {
      break;
    } else {
      r1 = r7, r5 = r1 >> 2;
    }
  }
  HEAP32[r4] = 0;
  return;
}
function _md_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2, r4 = r3 >> 2;
  r5 = (r1 | 0) >> 2;
  if ((HEAP32[HEAP32[r5] + 16 >> 2] | 0) != 0) {
    STACKTOP = r2;
    return;
  }
  if ((HEAP32[r1 + 4 >> 2] | 0) != 0) {
    _md_write(r1, 0, 0);
  }
  r6 = HEAP32[HEAP32[r5] + 20 >> 2];
  L368 : do {
    if ((r6 | 0) != 0) {
      r7 = r6;
      while (1) {
        FUNCTION_TABLE[HEAP32[HEAP32[r7 >> 2] + 28 >> 2]](r7 + 16 | 0);
        r8 = HEAP32[r7 + 8 >> 2];
        if ((r8 | 0) == 0) {
          break L368;
        } else {
          r7 = r8;
        }
      }
    }
  } while (0);
  HEAP32[HEAP32[r5] + 16 >> 2] = 1;
  if ((HEAP32[HEAP32[r5] + 24 >> 2] | 0) == 0) {
    STACKTOP = r2;
    return;
  }
  r6 = _md_get_algo(r1);
  r7 = _md_read(r1, r6);
  r1 = _md_digest_length(r6);
  r8 = _md_open(r3, r6, HEAP32[HEAP32[r5] + 8 >> 2], 0);
  if ((r8 | 0) != 0) {
    __gcry_fatal_error(r8, 0);
  }
  r8 = HEAP32[r5];
  r5 = HEAP32[r8 + 28 >> 2];
  _md_write(HEAP32[r4], HEAP32[r8 + 24 >> 2] + r5 | 0, r5);
  _md_write(HEAP32[r4], r7, r1);
  _md_final(HEAP32[r4]);
  _memcpy(r7, _md_read(HEAP32[r4], r6), r1);
  _md_close(HEAP32[r4]);
  STACKTOP = r2;
  return;
}
function _gpg_err_code563(r1) {
  return r1 & 65535;
}
function _gpg_err_make565(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function _md4_init(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP32[r2] = 1732584193;
  HEAP32[r2 + 1] = -271733879;
  HEAP32[r2 + 2] = -1732584194;
  HEAP32[r2 + 3] = 271733878;
  HEAP32[r2 + 4] = 0;
  HEAP32[r2 + 21] = 0;
  return;
}
function _md4_read(r1) {
  return r1 + 20 | 0;
}
function __gcry_md_debug(r1, r2) {
  if ((r2 | 0) == 0) {
    _md_stop_debug(r1);
    return;
  } else {
    _md_start_debug(r1, r2);
    return;
  }
}
function __gcry_md_read(r1, r2) {
  __gcry_md_ctl(r1, 5, 0, 0);
  return _md_read(r1, r2);
}
function __gcry_md_get(r1, r2, r3, r4) {
  __gcry_fips_signal_error(486168, 1e3, 495720, 0, 479240);
  return 63;
}
function _md_digest_length(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  __gcry_ath_mutex_lock(457944);
  r2 = __gcry_module_lookup_id(HEAP32[114487], r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    r4 = __gcry_ath_mutex_unlock(457944);
    return r3;
  }
  r1 = HEAP32[HEAP32[r2 + 8 >> 2] + 16 >> 2];
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(457944);
  return r3;
}
function __gcry_md_get_algo(r1) {
  return _md_get_algo(r1);
}
function _md_get_algo(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  r3 = HEAP32[HEAP32[r1 >> 2] + 20 >> 2];
  if ((r3 | 0) == 0) {
    r4 = 0;
    STACKTOP = r2;
    return r4;
  }
  if ((HEAP32[r3 + 8 >> 2] | 0) != 0) {
    __gcry_fips_signal_error(486168, 1055, 494672, 0, 485488);
    __gcry_log_error(484544, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r4 = HEAP32[HEAP32[r3 + 4 >> 2] + 24 >> 2];
  STACKTOP = r2;
  return r4;
}
function __gcry_md_get_algo_dlen(r1) {
  return _md_digest_length(r1);
}
function __gcry_md_algo_info(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5, r7 = r6 >> 2;
  L414 : do {
    if ((r2 | 0) == 10) {
      r8 = _check_digest_algo(r1);
      if ((r8 | 0) != 0) {
        r9 = r8;
        break;
      }
      r10 = _md_asn_oid(r1, r6);
      r11 = (r3 | 0) != 0;
      do {
        if (r11) {
          r12 = HEAP32[r7];
          if (HEAP32[r4 >> 2] >>> 0 < r12 >>> 0) {
            break;
          }
          _memcpy(r3, r10, r12);
          HEAP32[r4 >> 2] = HEAP32[r7];
          r9 = r8;
          break L414;
        } else {
          if ((r4 | 0) == 0) {
            break;
          }
          HEAP32[r4 >> 2] = HEAP32[r7];
          r9 = r8;
          break L414;
        }
      } while (0);
      r9 = r11 ? 66 : 45;
    } else if ((r2 | 0) == 8) {
      if (!((r3 | 0) == 0 & (r4 | 0) == 0)) {
        r9 = 45;
        break;
      }
      r9 = _check_digest_algo(r1);
    } else {
      r9 = 61;
    }
  } while (0);
  r1 = _gcry_error519(r9);
  STACKTOP = r5;
  return r1;
}
function _check_digest_algo(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  __gcry_ath_mutex_lock(457944);
  r2 = __gcry_module_lookup_id(HEAP32[114487], r1);
  if ((r2 | 0) == 0) {
    r3 = 5;
    r4 = __gcry_ath_mutex_unlock(457944);
    return r3;
  }
  __gcry_module_release(r2);
  r3 = 0;
  r4 = __gcry_ath_mutex_unlock(457944);
  return r3;
}
function __gcry_md_info(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  L435 : do {
    if ((r2 | 0) == 35) {
      if ((r3 | 0) == 0) {
        r5 = 45;
        break;
      }
      if ((r4 | 0) != 0) {
        if ((HEAP32[r4 >> 2] | 0) != 4) {
          r5 = 45;
          break;
        }
      }
      r6 = HEAP32[r3 >> 2];
      HEAP32[r4 >> 2] = 0;
      r7 = HEAP32[r1 >> 2] + 20 | 0;
      while (1) {
        r8 = HEAP32[r7 >> 2];
        if ((r8 | 0) == 0) {
          r5 = 0;
          break L435;
        }
        if ((HEAP32[HEAP32[r8 + 4 >> 2] + 24 >> 2] | 0) == (r6 | 0)) {
          break;
        } else {
          r7 = r8 + 8 | 0;
        }
      }
      HEAP32[r4 >> 2] = 1;
      r5 = 0;
    } else if ((r2 | 0) == 9) {
      HEAP32[r4 >> 2] = HEAP32[HEAP32[r1 >> 2] + 8 >> 2];
      r5 = 0;
    } else {
      r5 = 61;
    }
  } while (0);
  return _gcry_error519(r5);
}
function __gcry_md_init() {
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  return 0;
}
function __gcry_md_is_secure(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2;
  if ((__gcry_md_info(r1, 9, 0, r3) | 0) != 0) {
    HEAP32[r3 >> 2] = 1;
  }
  STACKTOP = r2;
  return HEAP32[r3 >> 2];
}
function __gcry_md_is_enabled(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  r5 = r3 + 4, r6 = r5 >> 2;
  HEAP32[r4 >> 2] = r2;
  HEAP32[r6] = 4;
  if ((__gcry_md_info(r1, 35, r4, r5) | 0) != 0) {
    HEAP32[r6] = 0;
  }
  STACKTOP = r3;
  return HEAP32[r6];
}
function __gcry_md_list(r1, r2) {
  __gcry_ath_mutex_lock(457944);
  __gcry_module_list(HEAP32[114487], r1, r2);
  __gcry_ath_mutex_unlock(457944);
  return 0;
}
function __gcry_md_selftest(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  __gcry_ath_mutex_lock(457944);
  r5 = __gcry_module_lookup_id(HEAP32[114487], r1), r6 = r5 >> 2;
  r7 = (r5 | 0) != 0;
  do {
    if (r7) {
      if ((HEAP32[r6 + 4] & 1 | 0) != 0) {
        r4 = 364;
        break;
      }
      r8 = HEAP32[r6 + 3];
      __gcry_ath_mutex_unlock(457944);
      if ((r8 | 0) == 0) {
        r4 = 368;
        break;
      }
      r9 = HEAP32[r8 >> 2];
      if ((r9 | 0) == 0) {
        r4 = 368;
        break;
      }
      r10 = FUNCTION_TABLE[r9](r1, r2, r3);
      break;
    } else {
      r4 = 364;
    }
  } while (0);
  do {
    if (r4 == 364) {
      __gcry_ath_mutex_unlock(457944);
      r4 = 368;
      break;
    }
  } while (0);
  do {
    if (r4 == 368) {
      if ((r3 | 0) == 0) {
        r10 = 5;
        break;
      }
      do {
        if (r7) {
          if ((HEAP32[r6 + 4] & 1 | 0) == 0) {
            r11 = 468804;
            break;
          } else {
            r4 = 371;
            break;
          }
        } else {
          r4 = 371;
        }
      } while (0);
      if (r4 == 371) {
        r11 = r7 ? 467156 : 465232;
      }
      FUNCTION_TABLE[r3](471772, r1, 470432, r11);
      r10 = 5;
    }
  } while (0);
  if (!r7) {
    r12 = _gpg_error518(r10);
    return r12;
  }
  __gcry_ath_mutex_lock(457944);
  __gcry_module_release(r5);
  __gcry_ath_mutex_unlock(457944);
  r12 = _gpg_error518(r10);
  return r12;
}
function _gcry_md_lookup_func_name(r1, r2) {
  return (_strcasecmp(HEAP32[r1 >> 2], r2) | 0) == 0 & 1;
}
function _gcry_md_lookup_oid(r1) {
  return __gcry_module_lookup(HEAP32[114487], r1, 68);
}
function _gcry_md_lookup_func_oid(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = HEAP32[r1 + 12 >> 2];
  if ((r3 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r1 = HEAP32[r3 >> 2];
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  } else {
    r5 = 0;
    r6 = 0;
    r7 = r1;
  }
  while (1) {
    r1 = (_strcasecmp(r2, r7) | 0) == 0 ? 1 : r5;
    r8 = r6 + 1 | 0;
    r9 = HEAP32[r3 + (r8 << 2) >> 2];
    if ((r9 | 0) != 0 & (r1 | 0) == 0) {
      r5 = r1;
      r6 = r8;
      r7 = r9;
    } else {
      r4 = r1;
      break;
    }
  }
  return r4;
}
function _gcry_err_make564(r1) {
  return _gpg_err_make565(32, r1);
}
function _md4_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1;
  r6 = (r1 + 84 | 0) >> 2;
  r7 = r1 + 20 | 0;
  r8 = r1 + 16 | 0;
  r9 = r3;
  r3 = r2;
  L497 : while (1) {
    if ((HEAP32[r6] | 0) == 64) {
      _transform(r5, r7);
      __gcry_burn_stack(104);
      HEAP32[r6] = 0;
      HEAP32[r8 >> 2] = HEAP32[r8 >> 2] + 1 | 0;
    }
    if ((r3 | 0) == 0) {
      r4 = 407;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r3;
      break;
    }
    if ((r9 | 0) == 0) {
      r9 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r3;
      r13 = r9;
    }
    while (1) {
      r2 = HEAP32[r6];
      if ((r2 | 0) >= 64) {
        r4 = 395;
        break L497;
      }
      r14 = HEAP8[r12];
      HEAP32[r6] = r2 + 1 | 0;
      HEAP8[r2 + (r1 + 20) | 0] = r14;
      r14 = r13 - 1 | 0;
      if ((r14 | 0) == 0) {
        r9 = 0;
        r3 = 0;
        continue L497;
      } else {
        r12 = r12 + 1 | 0;
        r13 = r14;
      }
    }
  }
  if (r4 == 395) {
    _md4_write(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  } else if (r4 == 407) {
    return;
  }
  __gcry_burn_stack(104);
  L511 : do {
    if (r10 >>> 0 > 63) {
      r12 = r1 + 16 | 0;
      r13 = r11;
      r3 = r10;
      while (1) {
        _transform(r5, r13);
        HEAP32[r6] = 0;
        HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
        r9 = r3 - 64 | 0;
        r8 = r13 + 64 | 0;
        if (r9 >>> 0 > 63) {
          r13 = r8;
          r3 = r9;
        } else {
          r15 = r8;
          r16 = r9;
          break L511;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  if ((r16 | 0) == 0) {
    return;
  } else {
    r17 = r15;
    r18 = r16;
  }
  while (1) {
    r16 = HEAP32[r6];
    if ((r16 | 0) >= 64) {
      r4 = 404;
      break;
    }
    r15 = HEAP8[r17];
    HEAP32[r6] = r16 + 1 | 0;
    HEAP8[r16 + (r1 + 20) | 0] = r15;
    r15 = r18 - 1 | 0;
    if ((r15 | 0) == 0) {
      r4 = 405;
      break;
    } else {
      r17 = r17 + 1 | 0;
      r18 = r15;
    }
  }
  if (r4 == 405) {
    return;
  } else if (r4 == 404) {
    return;
  }
}
function _md4_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r2 = r1 >> 2;
  r3 = r1;
  _md4_write(r1, 0, 0);
  r4 = HEAP32[r2 + 4];
  r5 = (r1 + 84 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = _llvm_uadd_with_overflow_i32(r4 << 6, r6);
  r8 = (tempRet0 & 1) + (r4 >>> 26) | 0;
  r4 = r7 << 3;
  r9 = r8 << 3 | r7 >>> 29;
  HEAP32[r5] = r6 + 1 | 0;
  r10 = r1 + 20 | 0;
  HEAP8[r6 + (r1 + 20) | 0] = -128;
  r11 = HEAP32[r5];
  L525 : do {
    if ((r6 | 0) < 56) {
      if ((r11 | 0) < 56) {
        r12 = r11;
      } else {
        break;
      }
      while (1) {
        HEAP32[r5] = r12 + 1 | 0;
        HEAP8[r12 + (r1 + 20) | 0] = 0;
        r13 = HEAP32[r5];
        if ((r13 | 0) < 56) {
          r12 = r13;
        } else {
          break L525;
        }
      }
    } else {
      L527 : do {
        if ((r11 | 0) < 64) {
          r13 = r11;
          while (1) {
            HEAP32[r5] = r13 + 1 | 0;
            HEAP8[r13 + (r1 + 20) | 0] = 0;
            r14 = HEAP32[r5];
            if ((r14 | 0) < 64) {
              r13 = r14;
            } else {
              break L527;
            }
          }
        }
      } while (0);
      _md4_write(r1, 0, 0);
      _memset(r10, 0, 56);
    }
  } while (0);
  HEAP8[r1 + 76 | 0] = r4 & 255;
  HEAP8[r1 + 77 | 0] = r7 >>> 5 & 255;
  HEAP8[r1 + 78 | 0] = r7 >>> 13 & 255;
  HEAP8[r1 + 79 | 0] = r7 >>> 21 & 255;
  HEAP8[r1 + 80 | 0] = r9 & 255;
  HEAP8[r1 + 81 | 0] = r8 >>> 5 & 255;
  HEAP8[r1 + 82 | 0] = r8 >>> 13 & 255;
  HEAP8[r1 + 83 | 0] = r8 >>> 21 & 255;
  _transform(r3, r10);
  __gcry_burn_stack(104);
  HEAP32[r10 >> 2] = HEAP32[r2];
  HEAP32[r2 + 6] = HEAP32[r2 + 1];
  HEAP32[r2 + 7] = HEAP32[r2 + 2];
  HEAP32[r2 + 8] = HEAP32[r2 + 3];
  return;
}
function _prepare_macpads(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = _md_get_algo(r1);
  if ((r4 | 0) == 0) {
    r5 = 5;
    return r5;
  }
  r6 = (r1 | 0) >> 2;
  do {
    if (HEAP32[HEAP32[r6] + 28 >> 2] >>> 0 < r3 >>> 0) {
      r1 = __gcry_malloc_secure(_md_digest_length(r4));
      if ((r1 | 0) == 0) {
        r5 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
        return r5;
      } else {
        __gcry_md_hash_buffer(r4, r1, r2, r3);
        r7 = _md_digest_length(r4);
        if (r7 >>> 0 <= HEAP32[HEAP32[r6] + 28 >> 2] >>> 0) {
          r8 = r1;
          r9 = r1;
          r10 = r7;
          break;
        }
        __gcry_assert_failed(483012, 486168, 871, 494512);
      }
    } else {
      r8 = r2;
      r9 = 0;
      r10 = r3;
    }
  } while (0);
  r3 = HEAP32[r6];
  _memset(HEAP32[r3 + 24 >> 2], 0, HEAP32[r3 + 28 >> 2] << 1);
  r3 = HEAP32[r6];
  r2 = HEAP32[r3 + 24 >> 2];
  r4 = HEAP32[r3 + 28 >> 2];
  _memcpy(r2, r8, r10);
  _memcpy(r2 + r4 | 0, r8, r10);
  L547 : do {
    if ((HEAP32[HEAP32[r6] + 28 >> 2] | 0) > 0) {
      r10 = 0;
      while (1) {
        r8 = r2 + r10 | 0;
        HEAP8[r8] = HEAP8[r8] ^ 54;
        r8 = r2 + r10 + r4 | 0;
        HEAP8[r8] = HEAP8[r8] ^ 92;
        r8 = r10 + 1 | 0;
        if ((r8 | 0) < (HEAP32[HEAP32[r6] + 28 >> 2] | 0)) {
          r10 = r8;
        } else {
          break L547;
        }
      }
    }
  } while (0);
  __gcry_free(r9);
  r5 = 0;
  return r5;
}
function _md_read(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = 0;
  r4 = STACKTOP;
  r5 = HEAP32[HEAP32[r1 >> 2] + 20 >> 2];
  r1 = (r5 | 0) == 0;
  if ((r2 | 0) == 0) {
    if (r1) {
      __gcry_bug(486168, 969, 494664);
    }
    if ((HEAP32[r5 + 8 >> 2] | 0) != 0) {
      __gcry_log_debug(483928, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    r6 = FUNCTION_TABLE[HEAP32[HEAP32[r5 >> 2] + 32 >> 2]](r5 + 16 | 0);
    STACKTOP = r4;
    return r6;
  }
  if (r1) {
    __gcry_bug(486168, 969, 494664);
  } else {
    r7 = r5, r8 = r7 >> 2;
  }
  while (1) {
    if ((HEAP32[HEAP32[r8 + 1] + 24 >> 2] | 0) == (r2 | 0)) {
      break;
    }
    r5 = HEAP32[r8 + 2];
    if ((r5 | 0) == 0) {
      r3 = 442;
      break;
    } else {
      r7 = r5, r8 = r7 >> 2;
    }
  }
  if (r3 == 442) {
    __gcry_bug(486168, 969, 494664);
  }
  r6 = FUNCTION_TABLE[HEAP32[HEAP32[r8] + 32 >> 2]](r7 + 16 | 0);
  STACKTOP = r4;
  return r6;
}
function __gcry_md_hash_buffer(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5, r7 = r6 >> 2;
  do {
    if ((r1 | 0) == 3) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_rmd160_hash_buffer(r2, r3, r4);
      STACKTOP = r5;
      return;
    } else if ((r1 | 0) == 2) {
      __gcry_sha1_hash_buffer(r2, r3, r4);
      STACKTOP = r5;
      return;
    } else if ((r1 | 0) == 1) {
      if ((__gcry_fips_mode() | 0) == 0) {
        break;
      }
      __gcry_inactivate_fips_mode(476064);
      if ((__gcry_enforced_fips_mode() | 0) == 0) {
        break;
      }
      __gcry_fips_noreturn();
    }
  } while (0);
  r8 = _md_open(r6, r1, 0, 0);
  if ((r8 | 0) != 0) {
    r6 = _gpg_strerror(_gcry_error519(r8));
    __gcry_log_bug(473348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
  }
  _md_write(HEAP32[r7], r3, r4);
  _md_final(HEAP32[r7]);
  _memcpy(r2, _md_read(HEAP32[r7], r1), _md_digest_length(r1));
  _md_close(HEAP32[r7]);
  STACKTOP = r5;
  return;
}
function _md_asn_oid(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  __gcry_ath_mutex_lock(457944);
  if (!HEAP8[458220]) {
    _md_register_default();
    HEAP8[458220] = 1;
  }
  __gcry_ath_mutex_unlock(457944);
  __gcry_ath_mutex_lock(457944);
  r4 = __gcry_module_lookup_id(HEAP32[114487], r1);
  if ((r4 | 0) == 0) {
    __gcry_log_bug(486372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
  if ((r2 | 0) != 0) {
    HEAP32[r2 >> 2] = HEAP32[HEAP32[r4 + 8 >> 2] + 8 >> 2];
  }
  r2 = HEAP32[HEAP32[r4 + 8 >> 2] + 4 >> 2];
  __gcry_module_release(r4);
  __gcry_ath_mutex_unlock(457944);
  STACKTOP = r3;
  return r2;
}
function _transform(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28;
  r3 = r1 | 0;
  r4 = HEAP32[r3 >> 2];
  r5 = (r1 + 4 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = (r1 + 8 | 0) >> 2;
  r8 = HEAP32[r7];
  r9 = (r1 + 12 | 0) >> 2;
  r1 = HEAP32[r9];
  r10 = r2;
  r11 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 4 | 0;
  r12 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 8 | 0;
  r13 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 12 | 0;
  r14 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 16 | 0;
  r15 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 20 | 0;
  r16 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 24 | 0;
  r17 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 28 | 0;
  r18 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 32 | 0;
  r19 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 36 | 0;
  r20 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 40 | 0;
  r21 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 44 | 0;
  r22 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 48 | 0;
  r23 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 52 | 0;
  r24 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 56 | 0;
  r25 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 60 | 0;
  r2 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r11 + r4 + ((r1 ^ r8) & r6 ^ r1) | 0;
  r26 = r10 << 3 | r10 >>> 29;
  r10 = r12 + r1 + (r26 & (r8 ^ r6) ^ r8) | 0;
  r1 = r10 << 7 | r10 >>> 25;
  r10 = r13 + r8 + (r1 & (r26 ^ r6) ^ r6) | 0;
  r8 = r10 << 11 | r10 >>> 21;
  r10 = r14 + r6 + (r8 & (r1 ^ r26) ^ r26) | 0;
  r6 = r10 << 19 | r10 >>> 13;
  r10 = r26 + r15 + (r6 & (r8 ^ r1) ^ r1) | 0;
  r26 = r10 << 3 | r10 >>> 29;
  r10 = r1 + r16 + (r26 & (r6 ^ r8) ^ r8) | 0;
  r1 = r10 << 7 | r10 >>> 25;
  r10 = r8 + r17 + (r1 & (r26 ^ r6) ^ r6) | 0;
  r8 = r10 << 11 | r10 >>> 21;
  r10 = r6 + r18 + (r8 & (r1 ^ r26) ^ r26) | 0;
  r6 = r10 << 19 | r10 >>> 13;
  r10 = r26 + r19 + (r6 & (r8 ^ r1) ^ r1) | 0;
  r26 = r10 << 3 | r10 >>> 29;
  r10 = r1 + r20 + (r26 & (r6 ^ r8) ^ r8) | 0;
  r1 = r10 << 7 | r10 >>> 25;
  r10 = r8 + r21 + (r1 & (r26 ^ r6) ^ r6) | 0;
  r8 = r10 << 11 | r10 >>> 21;
  r10 = r6 + r22 + (r8 & (r1 ^ r26) ^ r26) | 0;
  r6 = r10 << 19 | r10 >>> 13;
  r10 = r26 + r23 + (r6 & (r8 ^ r1) ^ r1) | 0;
  r26 = r10 << 3 | r10 >>> 29;
  r10 = r1 + r24 + (r26 & (r6 ^ r8) ^ r8) | 0;
  r1 = r10 << 7 | r10 >>> 25;
  r10 = r8 + r25 + (r1 & (r26 ^ r6) ^ r6) | 0;
  r8 = r10 << 11 | r10 >>> 21;
  r10 = r6 + r2 + (r8 & (r1 ^ r26) ^ r26) | 0;
  r6 = r10 << 19 | r10 >>> 13;
  r10 = r6 & r8;
  r27 = r11 + r26 + ((r6 | r8) & r1 | r10) + 1518500249 | 0;
  r26 = r27 << 3 | r27 >>> 29;
  r27 = r26 & r6;
  r28 = r15 + r1 + (r26 & r8 | r10 | r27) + 1518500249 | 0;
  r10 = r28 << 5 | r28 >>> 27;
  r28 = r10 & r26;
  r1 = r19 + r8 + (r10 & r6 | r27 | r28) + 1518500249 | 0;
  r27 = r1 << 9 | r1 >>> 23;
  r1 = r27 & r10;
  r8 = r23 + r6 + (r27 & r26 | r28 | r1) + 1518500249 | 0;
  r28 = r8 << 13 | r8 >>> 19;
  r8 = r28 & r27;
  r6 = r12 + r26 + (r28 & r10 | r1 | r8) + 1518500249 | 0;
  r1 = r6 << 3 | r6 >>> 29;
  r6 = r1 & r28;
  r26 = r16 + r10 + (r1 & r27 | r8 | r6) + 1518500249 | 0;
  r8 = r26 << 5 | r26 >>> 27;
  r26 = r8 & r1;
  r10 = r20 + r27 + (r8 & r28 | r6 | r26) + 1518500249 | 0;
  r6 = r10 << 9 | r10 >>> 23;
  r10 = r6 & r8;
  r27 = r24 + r28 + (r6 & r1 | r26 | r10) + 1518500249 | 0;
  r26 = r27 << 13 | r27 >>> 19;
  r27 = r26 & r6;
  r28 = r13 + r1 + (r26 & r8 | r10 | r27) + 1518500249 | 0;
  r10 = r28 << 3 | r28 >>> 29;
  r28 = r10 & r26;
  r1 = r17 + r8 + (r10 & r6 | r27 | r28) + 1518500249 | 0;
  r27 = r1 << 5 | r1 >>> 27;
  r1 = r27 & r10;
  r8 = r21 + r6 + (r27 & r26 | r28 | r1) + 1518500249 | 0;
  r28 = r8 << 9 | r8 >>> 23;
  r8 = r28 & r27;
  r6 = r25 + r26 + (r28 & r10 | r1 | r8) + 1518500249 | 0;
  r1 = r6 << 13 | r6 >>> 19;
  r6 = r1 & r28;
  r26 = r14 + r10 + (r1 & r27 | r8 | r6) + 1518500249 | 0;
  r8 = r26 << 3 | r26 >>> 29;
  r26 = r8 & r1;
  r10 = r18 + r27 + (r8 & r28 | r6 | r26) + 1518500249 | 0;
  r6 = r10 << 5 | r10 >>> 27;
  r10 = r6 & r8;
  r27 = r22 + r28 + (r6 & r1 | r26 | r10) + 1518500249 | 0;
  r26 = r27 << 9 | r27 >>> 23;
  r27 = r2 + r1 + (r26 & (r6 | r8) | r10) + 1518500249 | 0;
  r10 = r27 << 13 | r27 >>> 19;
  r27 = r11 + r8 + (r26 ^ r6 ^ r10) + 1859775393 | 0;
  r8 = r27 << 3 | r27 >>> 29;
  r27 = r19 + r6 + (r10 ^ r26 ^ r8) + 1859775393 | 0;
  r6 = r27 << 9 | r27 >>> 23;
  r27 = r15 + r26 + (r8 ^ r10 ^ r6) + 1859775393 | 0;
  r26 = r27 << 11 | r27 >>> 21;
  r27 = r23 + r10 + (r6 ^ r8 ^ r26) + 1859775393 | 0;
  r10 = r27 << 15 | r27 >>> 17;
  r27 = r13 + r8 + (r26 ^ r6 ^ r10) + 1859775393 | 0;
  r8 = r27 << 3 | r27 >>> 29;
  r27 = r21 + r6 + (r10 ^ r26 ^ r8) + 1859775393 | 0;
  r6 = r27 << 9 | r27 >>> 23;
  r27 = r17 + r26 + (r8 ^ r10 ^ r6) + 1859775393 | 0;
  r26 = r27 << 11 | r27 >>> 21;
  r27 = r25 + r10 + (r6 ^ r8 ^ r26) + 1859775393 | 0;
  r10 = r27 << 15 | r27 >>> 17;
  r27 = r12 + r8 + (r26 ^ r6 ^ r10) + 1859775393 | 0;
  r8 = r27 << 3 | r27 >>> 29;
  r27 = r20 + r6 + (r10 ^ r26 ^ r8) + 1859775393 | 0;
  r6 = r27 << 9 | r27 >>> 23;
  r27 = r16 + r26 + (r8 ^ r10 ^ r6) + 1859775393 | 0;
  r26 = r27 << 11 | r27 >>> 21;
  r27 = r24 + r10 + (r6 ^ r8 ^ r26) + 1859775393 | 0;
  r10 = r27 << 15 | r27 >>> 17;
  r27 = r14 + r8 + (r26 ^ r6 ^ r10) + 1859775393 | 0;
  r8 = r27 << 3 | r27 >>> 29;
  r27 = r22 + r6 + (r10 ^ r26 ^ r8) + 1859775393 | 0;
  r6 = r27 << 9 | r27 >>> 23;
  r27 = r18 + r26 + (r8 ^ r10 ^ r6) + 1859775393 | 0;
  r26 = r27 << 11 | r27 >>> 21;
  r27 = r2 + r10 + (r6 ^ r8 ^ r26) + 1859775393 | 0;
  HEAP32[r3 >> 2] = r8 + r4 | 0;
  HEAP32[r5] = (r27 << 15 | r27 >>> 17) + HEAP32[r5] | 0;
  HEAP32[r7] = r26 + HEAP32[r7] | 0;
  HEAP32[r9] = r6 + HEAP32[r9] | 0;
  return;
}
function _md5_init(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP32[r2] = 1732584193;
  HEAP32[r2 + 1] = -271733879;
  HEAP32[r2 + 2] = -1732584194;
  HEAP32[r2 + 3] = 271733878;
  HEAP32[r2 + 4] = 0;
  HEAP32[r2 + 21] = 0;
  return;
}
function _md5_read(r1) {
  return r1 + 20 | 0;
}
function _md5_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1;
  r6 = (r1 + 84 | 0) >> 2;
  r7 = r1 + 20 | 0;
  r8 = r1 + 16 | 0;
  r9 = r3;
  r3 = r2;
  L601 : while (1) {
    if ((HEAP32[r6] | 0) == 64) {
      _transform576(r5, r7);
      __gcry_burn_stack(104);
      HEAP32[r6] = 0;
      HEAP32[r8 >> 2] = HEAP32[r8 >> 2] + 1 | 0;
    }
    if ((r3 | 0) == 0) {
      r4 = 484;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r3;
      break;
    }
    if ((r9 | 0) == 0) {
      r9 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r3;
      r13 = r9;
    }
    while (1) {
      r2 = HEAP32[r6];
      if ((r2 | 0) >= 64) {
        r4 = 475;
        break L601;
      }
      r14 = HEAP8[r12];
      HEAP32[r6] = r2 + 1 | 0;
      HEAP8[r2 + (r1 + 20) | 0] = r14;
      r14 = r13 - 1 | 0;
      if ((r14 | 0) == 0) {
        r9 = 0;
        r3 = 0;
        continue L601;
      } else {
        r12 = r12 + 1 | 0;
        r13 = r14;
      }
    }
  }
  if (r4 == 475) {
    _md5_write(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  } else if (r4 == 484) {
    return;
  }
  __gcry_burn_stack(104);
  L615 : do {
    if (r10 >>> 0 > 63) {
      r12 = r1 + 16 | 0;
      r13 = r11;
      r3 = r10;
      while (1) {
        _transform576(r5, r13);
        HEAP32[r6] = 0;
        HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
        r9 = r3 - 64 | 0;
        r8 = r13 + 64 | 0;
        if (r9 >>> 0 > 63) {
          r13 = r8;
          r3 = r9;
        } else {
          r15 = r8;
          r16 = r9;
          break L615;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  if ((r16 | 0) == 0) {
    return;
  } else {
    r17 = r15;
    r18 = r16;
  }
  while (1) {
    r16 = HEAP32[r6];
    if ((r16 | 0) >= 64) {
      r4 = 485;
      break;
    }
    r15 = HEAP8[r17];
    HEAP32[r6] = r16 + 1 | 0;
    HEAP8[r16 + (r1 + 20) | 0] = r15;
    r15 = r18 - 1 | 0;
    if ((r15 | 0) == 0) {
      r4 = 486;
      break;
    } else {
      r17 = r17 + 1 | 0;
      r18 = r15;
    }
  }
  if (r4 == 485) {
    return;
  } else if (r4 == 486) {
    return;
  }
}
function _md5_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r2 = r1 >> 2;
  r3 = r1;
  _md5_write(r1, 0, 0);
  r4 = HEAP32[r2 + 4];
  r5 = (r1 + 84 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = _llvm_uadd_with_overflow_i32(r4 << 6, r6);
  r8 = (tempRet0 & 1) + (r4 >>> 26) | 0;
  r4 = r7 << 3;
  r9 = r8 << 3 | r7 >>> 29;
  HEAP32[r5] = r6 + 1 | 0;
  r10 = r1 + 20 | 0;
  HEAP8[r6 + (r1 + 20) | 0] = -128;
  r11 = HEAP32[r5];
  L629 : do {
    if ((r6 | 0) < 56) {
      if ((r11 | 0) < 56) {
        r12 = r11;
      } else {
        break;
      }
      while (1) {
        HEAP32[r5] = r12 + 1 | 0;
        HEAP8[r12 + (r1 + 20) | 0] = 0;
        r13 = HEAP32[r5];
        if ((r13 | 0) < 56) {
          r12 = r13;
        } else {
          break L629;
        }
      }
    } else {
      L631 : do {
        if ((r11 | 0) < 64) {
          r13 = r11;
          while (1) {
            HEAP32[r5] = r13 + 1 | 0;
            HEAP8[r13 + (r1 + 20) | 0] = 0;
            r14 = HEAP32[r5];
            if ((r14 | 0) < 64) {
              r13 = r14;
            } else {
              break L631;
            }
          }
        }
      } while (0);
      _md5_write(r1, 0, 0);
      _memset(r10, 0, 56);
    }
  } while (0);
  HEAP8[r1 + 76 | 0] = r4 & 255;
  HEAP8[r1 + 77 | 0] = r7 >>> 5 & 255;
  HEAP8[r1 + 78 | 0] = r7 >>> 13 & 255;
  HEAP8[r1 + 79 | 0] = r7 >>> 21 & 255;
  HEAP8[r1 + 80 | 0] = r9 & 255;
  HEAP8[r1 + 81 | 0] = r8 >>> 5 & 255;
  HEAP8[r1 + 82 | 0] = r8 >>> 13 & 255;
  HEAP8[r1 + 83 | 0] = r8 >>> 21 & 255;
  _transform576(r3, r10);
  __gcry_burn_stack(104);
  HEAP32[r10 >> 2] = HEAP32[r2];
  HEAP32[r2 + 6] = HEAP32[r2 + 1];
  HEAP32[r2 + 7] = HEAP32[r2 + 2];
  HEAP32[r2 + 8] = HEAP32[r2 + 3];
  return;
}
function __gcry_register_primegen_progress(r1, r2) {
  HEAP32[110061] = r1;
  HEAP32[110056] = r2;
  return;
}
function _transform576(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r3 = r1 | 0;
  r4 = HEAP32[r3 >> 2];
  r5 = (r1 + 4 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = (r1 + 8 | 0) >> 2;
  r8 = HEAP32[r7];
  r9 = (r1 + 12 | 0) >> 2;
  r1 = HEAP32[r9];
  r10 = r2;
  r11 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 4 | 0;
  r12 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 8 | 0;
  r13 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 12 | 0;
  r14 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 16 | 0;
  r15 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 20 | 0;
  r16 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 24 | 0;
  r17 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 28 | 0;
  r18 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 32 | 0;
  r19 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 36 | 0;
  r20 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 40 | 0;
  r21 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 44 | 0;
  r22 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 48 | 0;
  r23 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 52 | 0;
  r24 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 56 | 0;
  r25 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r2 + 60 | 0;
  r2 = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
  r10 = r4 - 680876936 + r11 + ((r1 ^ r8) & r6 ^ r1) | 0;
  r26 = (r10 << 7 | r10 >>> 25) + r6 | 0;
  r10 = r1 - 389564586 + r12 + (r26 & (r8 ^ r6) ^ r8) | 0;
  r1 = (r10 << 12 | r10 >>> 20) + r26 | 0;
  r10 = r8 + r13 + (r1 & (r26 ^ r6) ^ r6) + 606105819 | 0;
  r8 = (r10 << 17 | r10 >>> 15) + r1 | 0;
  r10 = r6 - 1044525330 + r14 + (r8 & (r1 ^ r26) ^ r26) | 0;
  r6 = (r10 << 22 | r10 >>> 10) + r8 | 0;
  r10 = r15 - 176418897 + r26 + (r6 & (r8 ^ r1) ^ r1) | 0;
  r26 = (r10 << 7 | r10 >>> 25) + r6 | 0;
  r10 = r16 + r1 + (r26 & (r6 ^ r8) ^ r8) + 1200080426 | 0;
  r1 = (r10 << 12 | r10 >>> 20) + r26 | 0;
  r10 = r17 - 1473231341 + r8 + (r1 & (r26 ^ r6) ^ r6) | 0;
  r8 = (r10 << 17 | r10 >>> 15) + r1 | 0;
  r10 = r18 - 45705983 + r6 + (r8 & (r1 ^ r26) ^ r26) | 0;
  r6 = (r10 << 22 | r10 >>> 10) + r8 | 0;
  r10 = r19 + r26 + (r6 & (r8 ^ r1) ^ r1) + 1770035416 | 0;
  r26 = (r10 << 7 | r10 >>> 25) + r6 | 0;
  r10 = r20 - 1958414417 + r1 + (r26 & (r6 ^ r8) ^ r8) | 0;
  r1 = (r10 << 12 | r10 >>> 20) + r26 | 0;
  r10 = r21 - 42063 + r8 + (r1 & (r26 ^ r6) ^ r6) | 0;
  r8 = (r10 << 17 | r10 >>> 15) + r1 | 0;
  r10 = r22 - 1990404162 + r6 + (r8 & (r1 ^ r26) ^ r26) | 0;
  r6 = (r10 << 22 | r10 >>> 10) + r8 | 0;
  r10 = r23 + r26 + (r6 & (r8 ^ r1) ^ r1) + 1804603682 | 0;
  r26 = (r10 << 7 | r10 >>> 25) + r6 | 0;
  r10 = r24 - 40341101 + r1 + (r26 & (r6 ^ r8) ^ r8) | 0;
  r1 = (r10 << 12 | r10 >>> 20) + r26 | 0;
  r10 = r25 - 1502002290 + r8 + (r1 & (r26 ^ r6) ^ r6) | 0;
  r8 = (r10 << 17 | r10 >>> 15) + r1 | 0;
  r10 = r2 + r6 + (r8 & (r1 ^ r26) ^ r26) + 1236535329 | 0;
  r6 = (r10 << 22 | r10 >>> 10) + r8 | 0;
  r10 = r12 - 165796510 + r26 + ((r6 ^ r8) & r1 ^ r8) | 0;
  r26 = (r10 << 5 | r10 >>> 27) + r6 | 0;
  r10 = r17 - 1069501632 + r1 + ((r26 ^ r6) & r8 ^ r6) | 0;
  r1 = (r10 << 9 | r10 >>> 23) + r26 | 0;
  r10 = r22 + r8 + ((r1 ^ r26) & r6 ^ r26) + 643717713 | 0;
  r8 = (r10 << 14 | r10 >>> 18) + r1 | 0;
  r10 = r11 - 373897302 + r6 + ((r8 ^ r1) & r26 ^ r1) | 0;
  r6 = (r10 << 20 | r10 >>> 12) + r8 | 0;
  r10 = r16 - 701558691 + r26 + ((r6 ^ r8) & r1 ^ r8) | 0;
  r26 = (r10 << 5 | r10 >>> 27) + r6 | 0;
  r10 = r21 + r1 + ((r26 ^ r6) & r8 ^ r6) + 38016083 | 0;
  r1 = (r10 << 9 | r10 >>> 23) + r26 | 0;
  r10 = r2 - 660478335 + r8 + ((r1 ^ r26) & r6 ^ r26) | 0;
  r8 = (r10 << 14 | r10 >>> 18) + r1 | 0;
  r10 = r15 - 405537848 + r6 + ((r8 ^ r1) & r26 ^ r1) | 0;
  r6 = (r10 << 20 | r10 >>> 12) + r8 | 0;
  r10 = r20 + r26 + ((r6 ^ r8) & r1 ^ r8) + 568446438 | 0;
  r26 = (r10 << 5 | r10 >>> 27) + r6 | 0;
  r10 = r25 - 1019803690 + r1 + ((r26 ^ r6) & r8 ^ r6) | 0;
  r1 = (r10 << 9 | r10 >>> 23) + r26 | 0;
  r10 = r14 - 187363961 + r8 + ((r1 ^ r26) & r6 ^ r26) | 0;
  r8 = (r10 << 14 | r10 >>> 18) + r1 | 0;
  r10 = r19 + r6 + ((r8 ^ r1) & r26 ^ r1) + 1163531501 | 0;
  r6 = (r10 << 20 | r10 >>> 12) + r8 | 0;
  r10 = r24 - 1444681467 + r26 + ((r6 ^ r8) & r1 ^ r8) | 0;
  r26 = (r10 << 5 | r10 >>> 27) + r6 | 0;
  r10 = r13 - 51403784 + r1 + ((r26 ^ r6) & r8 ^ r6) | 0;
  r1 = (r10 << 9 | r10 >>> 23) + r26 | 0;
  r10 = r18 + r8 + ((r1 ^ r26) & r6 ^ r26) + 1735328473 | 0;
  r8 = (r10 << 14 | r10 >>> 18) + r1 | 0;
  r10 = r23 - 1926607734 + r6 + ((r8 ^ r1) & r26 ^ r1) | 0;
  r6 = (r10 << 20 | r10 >>> 12) + r8 | 0;
  r10 = r16 - 378558 + r26 + (r8 ^ r1 ^ r6) | 0;
  r26 = (r10 << 4 | r10 >>> 28) + r6 | 0;
  r10 = r19 - 2022574463 + r1 + (r6 ^ r8 ^ r26) | 0;
  r1 = (r10 << 11 | r10 >>> 21) + r26 | 0;
  r10 = r22 + r8 + (r26 ^ r6 ^ r1) + 1839030562 | 0;
  r8 = (r10 << 16 | r10 >>> 16) + r1 | 0;
  r10 = r25 - 35309556 + r6 + (r1 ^ r26 ^ r8) | 0;
  r6 = (r10 << 23 | r10 >>> 9) + r8 | 0;
  r10 = r12 - 1530992060 + r26 + (r8 ^ r1 ^ r6) | 0;
  r26 = (r10 << 4 | r10 >>> 28) + r6 | 0;
  r10 = r15 + r1 + (r6 ^ r8 ^ r26) + 1272893353 | 0;
  r1 = (r10 << 11 | r10 >>> 21) + r26 | 0;
  r10 = r18 - 155497632 + r8 + (r26 ^ r6 ^ r1) | 0;
  r8 = (r10 << 16 | r10 >>> 16) + r1 | 0;
  r10 = r21 - 1094730640 + r6 + (r1 ^ r26 ^ r8) | 0;
  r6 = (r10 << 23 | r10 >>> 9) + r8 | 0;
  r10 = r24 + r26 + (r8 ^ r1 ^ r6) + 681279174 | 0;
  r26 = (r10 << 4 | r10 >>> 28) + r6 | 0;
  r10 = r11 - 358537222 + r1 + (r6 ^ r8 ^ r26) | 0;
  r1 = (r10 << 11 | r10 >>> 21) + r26 | 0;
  r10 = r14 - 722521979 + r8 + (r26 ^ r6 ^ r1) | 0;
  r8 = (r10 << 16 | r10 >>> 16) + r1 | 0;
  r10 = r17 + r6 + (r1 ^ r26 ^ r8) + 76029189 | 0;
  r6 = (r10 << 23 | r10 >>> 9) + r8 | 0;
  r10 = r20 - 640364487 + r26 + (r8 ^ r1 ^ r6) | 0;
  r26 = (r10 << 4 | r10 >>> 28) + r6 | 0;
  r10 = r23 - 421815835 + r1 + (r6 ^ r8 ^ r26) | 0;
  r1 = (r10 << 11 | r10 >>> 21) + r26 | 0;
  r10 = r2 + r8 + (r26 ^ r6 ^ r1) + 530742520 | 0;
  r8 = (r10 << 16 | r10 >>> 16) + r1 | 0;
  r10 = r13 - 995338651 + r6 + (r1 ^ r26 ^ r8) | 0;
  r6 = (r10 << 23 | r10 >>> 9) + r8 | 0;
  r10 = r11 - 198630844 + r26 + ((r6 | r1 ^ -1) ^ r8) | 0;
  r26 = (r10 << 6 | r10 >>> 26) + r6 | 0;
  r10 = r18 + r1 + ((r26 | r8 ^ -1) ^ r6) + 1126891415 | 0;
  r1 = (r10 << 10 | r10 >>> 22) + r26 | 0;
  r10 = r25 - 1416354905 + r8 + ((r1 | r6 ^ -1) ^ r26) | 0;
  r8 = (r10 << 15 | r10 >>> 17) + r1 | 0;
  r10 = r16 - 57434055 + r6 + ((r8 | r26 ^ -1) ^ r1) | 0;
  r6 = (r10 << 21 | r10 >>> 11) + r8 | 0;
  r10 = r23 + r26 + ((r6 | r1 ^ -1) ^ r8) + 1700485571 | 0;
  r26 = (r10 << 6 | r10 >>> 26) + r6 | 0;
  r10 = r14 - 1894986606 + r1 + ((r26 | r8 ^ -1) ^ r6) | 0;
  r1 = (r10 << 10 | r10 >>> 22) + r26 | 0;
  r10 = r21 - 1051523 + r8 + ((r1 | r6 ^ -1) ^ r26) | 0;
  r8 = (r10 << 15 | r10 >>> 17) + r1 | 0;
  r10 = r12 - 2054922799 + r6 + ((r8 | r26 ^ -1) ^ r1) | 0;
  r6 = (r10 << 21 | r10 >>> 11) + r8 | 0;
  r10 = r19 + r26 + ((r6 | r1 ^ -1) ^ r8) + 1873313359 | 0;
  r26 = (r10 << 6 | r10 >>> 26) + r6 | 0;
  r10 = r2 - 30611744 + r1 + ((r26 | r8 ^ -1) ^ r6) | 0;
  r1 = (r10 << 10 | r10 >>> 22) + r26 | 0;
  r10 = r17 - 1560198380 + r8 + ((r1 | r6 ^ -1) ^ r26) | 0;
  r8 = (r10 << 15 | r10 >>> 17) + r1 | 0;
  r10 = r24 + r6 + ((r8 | r26 ^ -1) ^ r1) + 1309151649 | 0;
  r6 = (r10 << 21 | r10 >>> 11) + r8 | 0;
  r10 = r15 - 145523070 + r26 + ((r6 | r1 ^ -1) ^ r8) | 0;
  r26 = (r10 << 6 | r10 >>> 26) + r6 | 0;
  r10 = r22 - 1120210379 + r1 + ((r26 | r8 ^ -1) ^ r6) | 0;
  r1 = (r10 << 10 | r10 >>> 22) + r26 | 0;
  r10 = r13 + r8 + ((r1 | r6 ^ -1) ^ r26) + 718787259 | 0;
  r8 = (r10 << 15 | r10 >>> 17) + r1 | 0;
  r10 = r20 - 343485551 + r6 + ((r8 | r26 ^ -1) ^ r1) | 0;
  HEAP32[r3 >> 2] = r26 + r4 | 0;
  HEAP32[r5] = r8 + HEAP32[r5] + (r10 << 21 | r10 >>> 11) | 0;
  HEAP32[r7] = r8 + HEAP32[r7] | 0;
  HEAP32[r9] = r1 + HEAP32[r9] | 0;
  return;
}
function __gcry_generate_secret_prime(r1, r2, r3, r4) {
  var r5;
  r5 = _gen_prime(r1, 1, r2, r3, r4);
  _progress(10);
  return r5;
}
function _progress(r1) {
  var r2;
  r2 = HEAP32[110061];
  if ((r2 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r2](HEAP32[110056], 480144, r1, 0, 0);
  return;
}
function __gcry_generate_public_prime(r1, r2, r3, r4) {
  var r5;
  r5 = _gen_prime(r1, 0, r2, r3, r4);
  _progress(10);
  return r5;
}
function __gcry_generate_elg_prime(r1, r2, r3, r4, r5) {
  var r6, r7, r8;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6, r8 = r7 >> 2;
  HEAP32[r8] = 0;
  if ((_prime_generate_internal((r1 | 0) == 1 & 1, r7, r2, r3, r4, r5, 0, 0, 0, 0, 0) | 0) != 0) {
    HEAP32[r8] = 0;
  }
  STACKTOP = r6;
  return HEAP32[r8];
}
function _gen_prime(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r8 = r7, r9 = r8 >> 2;
  if (r1 >>> 0 < 16) {
    __gcry_log_fatal(489328, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 16, tempInt));
  }
  r10 = __gcry_xmalloc(2672);
  r11 = r10;
  r12 = __gcry_mpi_alloc_set_ui(2);
  r13 = __gcry_mpi_alloc_set_ui(3);
  r14 = (r2 | 0) != 0;
  if (r14) {
    r15 = __gcry_mpi_snew(r1);
  } else {
    r15 = __gcry_mpi_new(r1);
  }
  r16 = __gcry_mpi_alloc_like(r15);
  r17 = __gcry_mpi_alloc_like(r15);
  r18 = __gcry_mpi_alloc_like(r15);
  HEAP32[r9] = 0;
  r19 = r1 - 1 | 0;
  r20 = r1 - 2 | 0;
  r21 = r19 - r2 | 0;
  r2 = (r4 | 0) == 0;
  L660 : while (1) {
    __gcry_mpi_randomize(r15, r1, r3);
    __gcry_mpi_set_highbit(r15, r19);
    if (r14) {
      __gcry_mpi_set_bit(r15, r20);
    }
    __gcry_mpi_set_bit(r15, 0);
    r22 = 0;
    while (1) {
      HEAP32[r11 + (r22 << 2) >> 2] = __gcry_mpi_fdiv_r_ui(0, r15, HEAPU16[(r22 << 1) + 411568 >> 1]);
      r23 = r22 + 1 | 0;
      if ((r23 | 0) == 668) {
        r24 = 0;
        r25 = 0;
        break;
      } else {
        r22 = r23;
      }
    }
    L667 : while (1) {
      r22 = 0;
      while (1) {
        r23 = HEAPU16[(r22 << 1) + 411568 >> 1];
        r26 = (r22 | 0) != 668;
        if (!r26) {
          r6 = 524;
          break;
        }
        r27 = (r22 << 2) + r11 | 0;
        r28 = HEAP32[r27 >> 2];
        r29 = r28 + r24 | 0;
        if (r29 >>> 0 < r23 >>> 0) {
          r30 = r29;
        } else {
          r29 = r28;
          while (1) {
            r31 = r29 - r23 | 0;
            r32 = r31 + r24 | 0;
            if (r32 >>> 0 < r23 >>> 0) {
              break;
            } else {
              r29 = r31;
            }
          }
          HEAP32[r27 >> 2] = r31;
          r30 = r32;
        }
        if ((r30 | 0) == 0) {
          r6 = 523;
          break;
        } else {
          r22 = r22 + 1 | 0;
        }
      }
      do {
        if (r6 == 523) {
          r6 = 0;
          if (r26) {
            r33 = r25;
            break;
          } else {
            r6 = 524;
            break;
          }
        }
      } while (0);
      do {
        if (r6 == 524) {
          r6 = 0;
          __gcry_mpi_add_ui(r18, r15, r24);
          HEAP32[r9] = HEAP32[r9] + 1 | 0;
          __gcry_mpi_sub_ui(r17, r18, 1);
          __gcry_mpi_powm(r16, r12, r17, r18);
          do {
            if ((__gcry_mpi_cmp_ui(r16, 1) | 0) == 0) {
              if ((_is_prime(r18, 5, r8) | 0) == 0) {
                break;
              }
              if ((__gcry_mpi_test_bit(r18, r21) | 0) == 0) {
                r6 = 527;
                break L667;
              }
              if (r2) {
                r6 = 537;
                break L660;
              }
              if ((FUNCTION_TABLE[r4](r5, r18) | 0) == 0) {
                r6 = 536;
                break L660;
              }
              _progress(47);
            }
          } while (0);
          r27 = r25 + 1 | 0;
          if ((r27 | 0) != 10) {
            r33 = r27;
            break;
          }
          _progress(46);
          r33 = 0;
        }
      } while (0);
      r27 = r24 + 2 | 0;
      if (r27 >>> 0 < 2e4) {
        r24 = r27;
        r25 = r33;
      } else {
        break;
      }
    }
    if (r6 == 527) {
      r6 = 0;
      _progress(10);
      __gcry_log_debug(487936, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    _progress(58);
  }
  if (r6 == 536) {
    __gcry_mpi_free(r12);
    __gcry_mpi_free(r13);
    __gcry_mpi_free(r16);
    __gcry_mpi_free(r17);
    __gcry_mpi_free(r15);
    __gcry_free(r10);
    STACKTOP = r7;
    return r18;
  } else if (r6 == 537) {
    __gcry_mpi_free(r12);
    __gcry_mpi_free(r13);
    __gcry_mpi_free(r16);
    __gcry_mpi_free(r17);
    __gcry_mpi_free(r15);
    __gcry_free(r10);
    STACKTOP = r7;
    return r18;
  }
}
function _prime_generate_internal(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11) {
  var r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99;
  r12 = 0;
  r13 = STACKTOP;
  r14 = r8 & 1;
  if (r3 >>> 0 < 48) {
    r15 = 45;
    STACKTOP = r13;
    return r15;
  }
  r8 = r7 >>> 0 > 1 ? 1 : r7;
  if ((r4 | 0) == 0) {
    r16 = Math.floor((r3 >>> 0) / 3);
  } else {
    r16 = r4;
  }
  r4 = r3 - r16 | 0;
  r17 = r4 - 1 | 0;
  r18 = 1;
  while (1) {
    if (Math.floor((r17 >>> 0) / (r18 >>> 0)) >>> 0 < r16 >>> 0) {
      break;
    } else {
      r18 = r18 + 1 | 0;
    }
  }
  r19 = r18 - 1 | 0;
  r20 = __gcry_mpi_alloc_set_ui(2);
  do {
    if ((r19 | 0) == 0) {
      r12 = 657;
    } else {
      r21 = (r1 | 0) != 0;
      if (r21 & r19 >>> 0 < 2) {
        r12 = 657;
        break;
      }
      if (r21) {
        r22 = r18 - 2 | 0;
        r23 = Math.floor(((r3 - 1 - (r16 << 1) | 0) >>> 0) / (r22 >>> 0));
        r24 = r4 - Math.imul(r23, r22) | 0;
        r25 = r22;
        r26 = r23;
      } else {
        r23 = Math.floor((r17 >>> 0) / (r19 >>> 0));
        r24 = r3 - Math.imul(r23, r19) | 0;
        r25 = r19;
        r26 = r23;
      }
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        __gcry_log_debug(487216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r16, HEAP32[tempInt + 8 >> 2] = r24, HEAP32[tempInt + 12 >> 2] = r26, HEAP32[tempInt + 16 >> 2] = r25, tempInt));
      }
      r23 = __gcry_mpi_new(r3);
      r22 = _gen_prime(r24, r14, r7, 0, 0);
      if (r21) {
        r27 = _gen_prime(r16, r14, r7, 0, 0);
      } else {
        r27 = 0;
      }
      r28 = r25 + 2 | 0;
      r29 = __gcry_calloc(r28, 4);
      r30 = r29, r31 = r30 >> 2;
      if ((r29 | 0) == 0) {
        r32 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
        __gcry_free(0);
        r33 = r32;
        r34 = r27;
        r35 = r22;
        r36 = r23;
        r37 = 0;
        break;
      }
      r32 = __gcry_malloc(r25 << 2);
      r38 = r32 >> 2;
      do {
        if ((r32 | 0) == 0) {
          r39 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
          __gcry_free(r32);
          r40 = 0;
          r41 = r22;
          r42 = 0;
          r43 = r39;
          r12 = 659;
          break;
        } else {
          if ((r25 | 0) != 0) {
            _memset(r32, -1, r25 << 2);
          }
          r39 = (r25 * 3 & -1) + (r21 ? 10 : 5) | 0;
          r44 = r39 >>> 0 < 30 ? 30 : r39;
          r39 = __gcry_calloc(r44, 4);
          r45 = r39;
          do {
            if ((r39 | 0) == 0) {
              r46 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
              r47 = 0;
              r48 = r22;
              r49 = 0;
            } else {
              r50 = (r25 | 0) == 0;
              r51 = (r44 | 0) != 0 & (r25 | 0) != 0;
              r52 = (r25 | 0) == 0;
              r53 = (r44 | 0) == 0;
              r54 = (r25 | 0) == 0;
              r55 = r25 << 2;
              r56 = r24;
              r57 = 0;
              r58 = 0;
              r59 = r22;
              r60 = 0;
              L729 : while (1) {
                r61 = r57;
                r62 = r58;
                r63 = r60;
                while (1) {
                  r64 = r63;
                  while (1) {
                    if (!r50) {
                      _memset(r32, -1, r55);
                    }
                    if ((r64 | 0) == 0) {
                      r12 = 564;
                      break;
                    }
                    _m_out_of_n(r64, r25, r44);
                    if ((__gcry_ath_mutex_lock(440248) | 0) != 0) {
                      r65 = 63;
                      r66 = 0;
                      r67 = r64;
                      break L729;
                    }
                    do {
                      if (r51) {
                        r68 = 1;
                        r69 = 0;
                        r70 = 0;
                        while (1) {
                          if (HEAP8[r64 + r69 | 0] << 24 >> 24 == 0) {
                            r71 = r70;
                            r72 = r68;
                          } else {
                            r73 = ((r69 << 2) + r45 | 0) >> 2;
                            r74 = HEAP32[r73];
                            do {
                              if ((r74 | 0) != 0 | (r68 | 0) == 0) {
                                r75 = r68;
                                r76 = r74;
                                r12 = 585;
                              } else {
                                r77 = _get_pool_prime(r26, r8);
                                HEAP32[r73] = r77;
                                if ((r77 | 0) != 0) {
                                  r78 = r68;
                                  break;
                                }
                                if ((__gcry_ath_mutex_unlock(440248) | 0) != 0) {
                                  r65 = 63;
                                  r66 = 0;
                                  r67 = r64;
                                  break L729;
                                }
                                r75 = 0;
                                r76 = HEAP32[r73];
                                r12 = 585;
                                break;
                              }
                            } while (0);
                            do {
                              if (r12 == 585) {
                                r12 = 0;
                                if ((r76 | 0) != 0) {
                                  r78 = r75;
                                  break;
                                }
                                HEAP32[r73] = _gen_prime(r26, 0, r8, 0, 0);
                                r78 = r75;
                              }
                            } while (0);
                            HEAP32[(r70 << 2 >> 2) + r38] = r69;
                            HEAP32[(r70 << 2 >> 2) + r31] = HEAP32[r73];
                            r71 = r70 + 1 | 0;
                            r72 = r78;
                          }
                          r79 = r69 + 1 | 0;
                          if (r79 >>> 0 < r44 >>> 0 & r71 >>> 0 < r25 >>> 0) {
                            r68 = r72;
                            r69 = r79;
                            r70 = r71;
                          } else {
                            break;
                          }
                        }
                        if ((r72 | 0) == 0) {
                          r80 = r79;
                          break;
                        } else {
                          r81 = r79;
                          r12 = 590;
                          break;
                        }
                      } else {
                        r81 = 0;
                        r12 = 590;
                      }
                    } while (0);
                    if (r12 == 590) {
                      r12 = 0;
                      if ((__gcry_ath_mutex_unlock(440248) | 0) == 0) {
                        r80 = r81;
                      } else {
                        r65 = 63;
                        r66 = 0;
                        r67 = r64;
                        break L729;
                      }
                    }
                    if ((r80 | 0) != (r25 | 0)) {
                      r82 = r64;
                      break;
                    }
                    __gcry_free(r64);
                    _progress(33);
                    r64 = 0;
                  }
                  do {
                    if (r12 == 564) {
                      r12 = 0;
                      L761 : do {
                        if (!r53) {
                          r64 = 0;
                          while (1) {
                            r70 = (r64 << 2) + r45 | 0;
                            __gcry_mpi_free(HEAP32[r70 >> 2]);
                            HEAP32[r70 >> 2] = 0;
                            r70 = r64 + 1 | 0;
                            if (r70 >>> 0 < r44 >>> 0) {
                              r64 = r70;
                            } else {
                              break L761;
                            }
                          }
                        }
                      } while (0);
                      r64 = __gcry_calloc(1, r44);
                      if ((r64 | 0) == 0) {
                        r12 = 567;
                        break L729;
                      }
                      if ((__gcry_ath_mutex_lock(440248) | 0) != 0) {
                        r65 = 63;
                        r66 = 0;
                        r67 = r64;
                        break L729;
                      }
                      if (!r54) {
                        r70 = 1;
                        r69 = 0;
                        while (1) {
                          HEAP8[r64 + r69 | 0] = 1;
                          r68 = ((r69 << 2) + r45 | 0) >> 2;
                          HEAP32[r68] = 0;
                          do {
                            if ((r70 | 0) == 0) {
                              r12 = 574;
                            } else {
                              r74 = _get_pool_prime(r26, r8);
                              HEAP32[r68] = r74;
                              if ((r74 | 0) != 0) {
                                r83 = r70;
                                break;
                              }
                              if ((__gcry_ath_mutex_unlock(440248) | 0) != 0) {
                                r65 = 63;
                                r66 = 0;
                                r67 = r64;
                                break L729;
                              }
                              if ((HEAP32[r68] | 0) == 0) {
                                r12 = 574;
                                break;
                              } else {
                                r83 = 0;
                                break;
                              }
                            }
                          } while (0);
                          if (r12 == 574) {
                            r12 = 0;
                            HEAP32[r68] = _gen_prime(r26, 0, r8, 0, 0);
                            r83 = 0;
                          }
                          HEAP32[(r69 << 2 >> 2) + r38] = r69;
                          HEAP32[(r69 << 2 >> 2) + r31] = HEAP32[r68];
                          r74 = r69 + 1 | 0;
                          if (r74 >>> 0 < r25 >>> 0) {
                            r70 = r83;
                            r69 = r74;
                          } else {
                            break;
                          }
                        }
                        if ((r83 | 0) == 0) {
                          r82 = r64;
                          break;
                        }
                      }
                      if ((__gcry_ath_mutex_unlock(440248) | 0) == 0) {
                        r82 = r64;
                      } else {
                        r65 = 63;
                        r66 = 0;
                        r67 = r64;
                        break L729;
                      }
                    }
                  } while (0);
                  __gcry_mpi_set(r23, r59);
                  __gcry_mpi_mul_ui(r23, r23, 2);
                  if (r21) {
                    __gcry_mpi_mul(r23, r23, r27);
                  }
                  L783 : do {
                    if (!r52) {
                      r69 = 0;
                      while (1) {
                        __gcry_mpi_mul(r23, r23, HEAP32[(r69 << 2 >> 2) + r31]);
                        r70 = r69 + 1 | 0;
                        if ((r70 | 0) == (r25 | 0)) {
                          break L783;
                        } else {
                          r69 = r70;
                        }
                      }
                    }
                  } while (0);
                  __gcry_mpi_add_ui(r23, r23, 1);
                  r69 = __gcry_mpi_get_nbits(r23);
                  if (r69 >>> 0 < r3 >>> 0) {
                    r64 = r62 + 1 | 0;
                    if (r64 >>> 0 > 20) {
                      r12 = 599;
                      break;
                    } else {
                      r84 = r64;
                    }
                  } else {
                    r84 = 0;
                  }
                  if (r69 >>> 0 > r3 >>> 0) {
                    r64 = r61 + 1 | 0;
                    if (r64 >>> 0 > 20) {
                      r12 = 603;
                      break;
                    } else {
                      r85 = r64;
                    }
                  } else {
                    r85 = 0;
                  }
                  if ((r69 | 0) != (r3 | 0)) {
                    r61 = r85;
                    r62 = r84;
                    r63 = r82;
                    continue;
                  }
                  if ((_check_prime(r23, r20, 5, r10, r11) | 0) == 0) {
                    r61 = r85;
                    r62 = r84;
                    r63 = r82;
                  } else {
                    r12 = 607;
                    break L729;
                  }
                }
                if (r12 == 599) {
                  r12 = 0;
                  r63 = r56 + 1 | 0;
                  _progress(62);
                  __gcry_mpi_free(r59);
                  r56 = r63;
                  r57 = r61;
                  r58 = 0;
                  r59 = _gen_prime(r63, r14, r7, 0, 0);
                  r60 = r82;
                  continue;
                } else if (r12 == 603) {
                  r12 = 0;
                  r63 = r56 - 1 | 0;
                  _progress(60);
                  __gcry_mpi_free(r59);
                  r56 = r63;
                  r57 = 0;
                  r58 = r84;
                  r59 = _gen_prime(r63, r14, r7, 0, 0);
                  r60 = r82;
                  continue;
                }
              }
              L797 : do {
                if (r12 == 567) {
                  r65 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
                  r66 = 0;
                  r67 = 0;
                } else if (r12 == 607) {
                  if ((__gcry_get_debug_flag(1) | 0) != 0) {
                    _progress(10);
                    __gcry_log_mpidump(486348, r23);
                    __gcry_log_mpidump(485464, r59);
                    if (r21) {
                      __gcry_log_mpidump(484528, r27);
                    }
                    L805 : do {
                      if ((r25 | 0) != 0) {
                        r60 = 0;
                        while (1) {
                          __gcry_log_mpidump(483912, HEAP32[(r60 << 2 >> 2) + r31]);
                          r58 = r60 + 1 | 0;
                          if ((r58 | 0) == (r25 | 0)) {
                            break L805;
                          } else {
                            r60 = r58;
                          }
                        }
                      }
                    } while (0);
                    r61 = __gcry_mpi_get_nbits(r23);
                    r60 = __gcry_mpi_get_nbits(r59);
                    __gcry_log_debug(482980, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r61, HEAP32[tempInt + 4 >> 2] = r60, tempInt));
                    if (r21) {
                      r60 = __gcry_mpi_get_nbits(r27);
                      __gcry_log_debug(482316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r60, tempInt));
                    }
                    L812 : do {
                      if ((r25 | 0) != 0) {
                        r60 = 0;
                        while (1) {
                          r61 = __gcry_mpi_get_nbits(HEAP32[(r60 << 2 >> 2) + r31]);
                          __gcry_log_debug(481792, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r60, HEAP32[tempInt + 4 >> 2] = r61, tempInt));
                          r61 = r60 + 1 | 0;
                          if ((r61 | 0) == (r25 | 0)) {
                            break L812;
                          } else {
                            r60 = r61;
                          }
                        }
                      }
                    } while (0);
                    _progress(10);
                  }
                  L817 : do {
                    if ((r6 | 0) == 0) {
                      r86 = 0;
                    } else {
                      r60 = __gcry_calloc(r25 + 4 | 0, 4);
                      r61 = r60, r58 = r61 >> 2;
                      if ((r60 | 0) == 0) {
                        r65 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
                        r66 = r61;
                        r67 = r82;
                        break L797;
                      }
                      if ((r9 | 0) != 0) {
                        HEAP32[r58] = __gcry_mpi_set_ui(0, 2);
                        HEAP32[r60 + 4 >> 2] = __gcry_mpi_copy(r59);
                        if (r21) {
                          HEAP32[r60 + 8 >> 2] = __gcry_mpi_copy(r27);
                          r87 = 3;
                        } else {
                          r87 = 2;
                        }
                        if ((r25 | 0) == 0) {
                          r86 = r61;
                          break;
                        } else {
                          r88 = r87;
                          r89 = 0;
                        }
                        while (1) {
                          HEAP32[(r88 << 2 >> 2) + r58] = __gcry_mpi_copy(HEAP32[(r89 << 2 >> 2) + r31]);
                          r60 = r89 + 1 | 0;
                          if ((r60 | 0) == (r25 | 0)) {
                            r86 = r61;
                            break L817;
                          } else {
                            r88 = r88 + 1 | 0;
                            r89 = r60;
                          }
                        }
                      }
                      if (r21) {
                        HEAP32[r58] = __gcry_mpi_copy(r27);
                        if ((r25 | 0) == 0) {
                          r86 = r61;
                          break;
                        } else {
                          r90 = 1;
                        }
                        while (1) {
                          HEAP32[(r90 << 2 >> 2) + r58] = __gcry_mpi_copy(HEAP32[(r90 << 2 >> 2) + r31]);
                          r60 = r90 + 1 | 0;
                          if (r60 >>> 0 > r25 >>> 0) {
                            r86 = r61;
                            break L817;
                          } else {
                            r90 = r60;
                          }
                        }
                      } else {
                        if ((r25 | 0) == 0) {
                          r86 = r61;
                          break;
                        } else {
                          r91 = 0;
                        }
                        while (1) {
                          HEAP32[(r91 << 2 >> 2) + r58] = __gcry_mpi_copy(HEAP32[(r91 << 2 >> 2) + r31]);
                          r60 = r91 + 1 | 0;
                          if ((r60 | 0) == (r25 | 0)) {
                            r86 = r61;
                            break L817;
                          } else {
                            r91 = r60;
                          }
                        }
                      }
                    }
                  } while (0);
                  do {
                    if ((r5 | 0) == 0) {
                      r92 = 0;
                    } else {
                      r61 = (r23 + 4 | 0) >> 2;
                      r58 = __gcry_mpi_alloc(HEAP32[r61]);
                      r60 = __gcry_mpi_alloc(HEAP32[r61]);
                      r57 = __gcry_mpi_alloc(HEAP32[r61]);
                      if (r21) {
                        r92 = 69;
                        break;
                      }
                      HEAP32[(r25 << 2 >> 2) + r31] = r59;
                      r61 = (r25 + 1 << 2) + r30 | 0;
                      HEAP32[r61 >> 2] = __gcry_mpi_alloc_set_ui(2);
                      __gcry_mpi_sub_ui(r57, r23, 1);
                      __gcry_mpi_set_ui(r5, 2);
                      while (1) {
                        __gcry_mpi_add_ui(r5, r5, 1);
                        do {
                          if ((__gcry_get_debug_flag(1) | 0) == 0) {
                            _progress(94);
                            r93 = 0;
                            break;
                          } else {
                            __gcry_log_debug(471428, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
                            __gcry_mpi_dump(r5);
                            __gcry_log_printf(485292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
                            r93 = 0;
                            break;
                          }
                        } while (0);
                        while (1) {
                          r94 = r93 >>> 0 < r28 >>> 0;
                          if (!r94) {
                            break;
                          }
                          __gcry_mpi_fdiv_q(r58, r57, HEAP32[(r93 << 2 >> 2) + r31]);
                          __gcry_mpi_powm(r60, r5, r58, r23);
                          if ((__gcry_mpi_cmp_ui(r60, 1) | 0) == 0) {
                            break;
                          } else {
                            r93 = r93 + 1 | 0;
                          }
                        }
                        if ((__gcry_get_debug_flag(1) | 0) != 0) {
                          _progress(10);
                        }
                        if (!r94) {
                          break;
                        }
                      }
                      __gcry_mpi_free(HEAP32[r61 >> 2]);
                      __gcry_mpi_free(r58);
                      __gcry_mpi_free(r60);
                      __gcry_mpi_free(r57);
                      r92 = 0;
                    }
                  } while (0);
                  if ((__gcry_get_debug_flag(1) | 0) != 0) {
                    r65 = r92;
                    r66 = r86;
                    r67 = r82;
                    break;
                  }
                  _progress(10);
                  r65 = r92;
                  r66 = r86;
                  r67 = r82;
                }
              } while (0);
              if ((r39 | 0) == 0) {
                r46 = r65;
                r47 = r67;
                r48 = r59;
                r49 = r66;
                break;
              }
              r56 = (__gcry_ath_mutex_lock(440248) | 0) == 0;
              L858 : do {
                if ((r44 | 0) != 0) {
                  r52 = r56 ^ 1;
                  r54 = 0;
                  while (1) {
                    r53 = (r54 << 2) + r45 | 0;
                    do {
                      if ((HEAP32[r53 >> 2] | 0) != 0) {
                        r51 = 0;
                        while (1) {
                          if (r51 >>> 0 >= r25 >>> 0) {
                            break;
                          }
                          if ((HEAP32[(r51 << 2 >> 2) + r38] | 0) == (r54 | 0)) {
                            break;
                          } else {
                            r51 = r51 + 1 | 0;
                          }
                        }
                        r55 = HEAP32[r53 >> 2];
                        if ((r51 | 0) != (r25 | 0) | r52) {
                          __gcry_mpi_free(r55);
                          break;
                        } else {
                          _save_pool_prime(r55, r8);
                          break;
                        }
                      }
                    } while (0);
                    r53 = r54 + 1 | 0;
                    if (r53 >>> 0 < r44 >>> 0) {
                      r54 = r53;
                    } else {
                      break L858;
                    }
                  }
                }
              } while (0);
              if (r56) {
                r95 = (__gcry_ath_mutex_unlock(440248) | 0) == 0 ? r65 : 63;
              } else {
                r95 = r65;
              }
              __gcry_free(r39);
              r46 = r95;
              r47 = r67;
              r48 = r59;
              r49 = r66;
            }
          } while (0);
          __gcry_free(r32);
          if ((r29 | 0) == 0) {
            r96 = r49;
            r97 = r48;
            r98 = r47;
            r99 = r46;
            break;
          } else {
            r40 = r49;
            r41 = r48;
            r42 = r47;
            r43 = r46;
            r12 = 659;
            break;
          }
        }
      } while (0);
      if (r12 == 659) {
        __gcry_free(r29);
        r96 = r40;
        r97 = r41;
        r98 = r42;
        r99 = r43;
      }
      if ((r98 | 0) == 0) {
        r33 = r99;
        r34 = r27;
        r35 = r97;
        r36 = r23;
        r37 = r96;
        break;
      }
      __gcry_free(r98);
      r33 = r99;
      r34 = r27;
      r35 = r97;
      r36 = r23;
      r37 = r96;
      break;
    }
  } while (0);
  if (r12 == 657) {
    __gcry_free(0);
    r33 = 45;
    r34 = 0;
    r35 = 0;
    r36 = 0;
    r37 = 0;
  }
  __gcry_mpi_free(r20);
  __gcry_mpi_free(r35);
  __gcry_mpi_free(r34);
  if ((r33 | 0) == 0) {
    HEAP32[r2 >> 2] = r36;
    if ((r6 | 0) == 0) {
      r15 = 0;
      STACKTOP = r13;
      return r15;
    }
    HEAP32[r6 >> 2] = r37;
    r15 = 0;
    STACKTOP = r13;
    return r15;
  }
  if ((r37 | 0) != 0) {
    r6 = HEAP32[r37 >> 2];
    L894 : do {
      if ((r6 | 0) != 0) {
        r2 = 0;
        r34 = r6;
        while (1) {
          __gcry_mpi_free(r34);
          r35 = r2 + 1 | 0;
          r20 = HEAP32[r37 + (r35 << 2) >> 2];
          if ((r20 | 0) == 0) {
            break L894;
          } else {
            r2 = r35;
            r34 = r20;
          }
        }
      }
    } while (0);
    __gcry_free(r37);
  }
  __gcry_mpi_free(r36);
  r15 = r33;
  STACKTOP = r13;
  return r15;
}
function __gcry_prime_generate(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r9 = 0;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r11 = r10, r12 = r11 >> 2;
  r13 = r10 + 4, r14 = r13 >> 2;
  HEAP32[r12] = 0;
  HEAP32[r14] = 0;
  if ((r1 | 0) == 0) {
    r15 = _gpg_error602();
    STACKTOP = r10;
    return r15;
  }
  HEAP32[r1 >> 2] = 0;
  r16 = (r4 | 0) != 0;
  r17 = _prime_generate_internal(r8 >>> 1 & 1, r13, r2, r3, 0, r16 ? r11 : 0, r7, r8, 1, r5, r6);
  do {
    if ((r17 | 0) != 0 | (r5 | 0) == 0) {
      r9 = 683;
    } else {
      if ((FUNCTION_TABLE[r5](r6, 0, HEAP32[r14]) | 0) != 0) {
        r9 = 683;
        break;
      }
      __gcry_mpi_free(HEAP32[r14]);
      if (!r16) {
        r18 = 1;
        break;
      }
      r8 = HEAP32[r12];
      r7 = HEAP32[r8 >> 2];
      L909 : do {
        if ((r7 | 0) == 0) {
          r19 = r8;
        } else {
          r11 = 0;
          r3 = r7;
          while (1) {
            __gcry_mpi_free(r3);
            r2 = r11 + 1 | 0;
            r13 = HEAP32[r12];
            r20 = HEAP32[r13 + (r2 << 2) >> 2];
            if ((r20 | 0) == 0) {
              r19 = r13;
              break L909;
            } else {
              r11 = r2;
              r3 = r20;
            }
          }
        }
      } while (0);
      __gcry_free(r19);
      r18 = 1;
      break;
    }
  } while (0);
  do {
    if (r9 == 683) {
      if ((r17 | 0) != 0) {
        r18 = r17;
        break;
      }
      if (r16) {
        HEAP32[r4 >> 2] = HEAP32[r12];
      }
      HEAP32[r1 >> 2] = HEAP32[r14];
      r18 = r17;
    }
  } while (0);
  r15 = _gcry_error603(r18);
  STACKTOP = r10;
  return r15;
}
function _gpg_error602() {
  return _gpg_err_make612(1, 45);
}
function _gcry_error603(r1) {
  return _gcry_err_make611(r1);
}
function __gcry_prime_check(r1, r2) {
  var r3;
  r2 = __gcry_mpi_alloc_set_ui(2);
  r3 = (_check_prime(r1, r2, 64, 0, 0) | 0) == 0 ? 21 : 0;
  __gcry_mpi_free(r2);
  return _gcry_error603(r3);
}
function _check_prime(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r8 = r7;
  HEAP32[r8 >> 2] = 0;
  r9 = 0;
  while (1) {
    if ((r9 | 0) == 668) {
      r6 = 697;
      break;
    }
    if ((__gcry_mpi_divisible_ui(r1, HEAPU16[(r9 << 1) + 411568 >> 1]) | 0) == 0) {
      r9 = r9 + 1 | 0;
    } else {
      r10 = 0;
      break;
    }
  }
  L928 : do {
    if (r6 == 697) {
      r9 = __gcry_mpi_alloc_like(r1);
      r11 = __gcry_mpi_alloc_like(r1);
      __gcry_mpi_sub_ui(r11, r1, 1);
      __gcry_mpi_powm(r9, r2, r11, r1);
      __gcry_mpi_free(r11);
      r11 = (__gcry_mpi_cmp_ui(r9, 1) | 0) == 0;
      __gcry_mpi_free(r9);
      if (!r11) {
        _progress(46);
        r10 = 0;
        break;
      }
      r11 = (r4 | 0) != 0;
      do {
        if (r11) {
          if ((FUNCTION_TABLE[r4](r5, 2, r1) | 0) == 0) {
            break;
          } else {
            r6 = 701;
            break;
          }
        } else {
          r6 = 701;
        }
      } while (0);
      do {
        if (r6 == 701) {
          if ((_is_prime(r1, r3, r8) | 0) == 0) {
            break;
          }
          if (!r11) {
            r10 = 1;
            break L928;
          }
          if ((FUNCTION_TABLE[r4](r5, 1, r1) | 0) != 0) {
            r10 = 1;
            break L928;
          }
        }
      } while (0);
      _progress(46);
      r10 = 0;
    }
  } while (0);
  STACKTOP = r7;
  return r10;
}
function _gpg_err_code610(r1) {
  return r1 & 65535;
}
function _gpg_err_make612(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function __gcry_prime_group_generator(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12;
  r5 = STACKTOP;
  r6 = __gcry_mpi_new(0);
  r7 = __gcry_mpi_new(0);
  r8 = __gcry_mpi_new(0);
  if ((r4 | 0) == 0) {
    r9 = __gcry_mpi_set_ui(0, 3);
  } else {
    r9 = __gcry_mpi_copy(r4);
  }
  if ((r3 | 0) == 0 | (r1 | 0) == 0 | (r2 | 0) == 0) {
    r10 = _gpg_error602();
    STACKTOP = r5;
    return r10;
  }
  HEAP32[r1 >> 2] = 0;
  r4 = 0;
  while (1) {
    if ((HEAP32[r3 + (r4 << 2) >> 2] | 0) == 0) {
      break;
    } else {
      r4 = r4 + 1 | 0;
    }
  }
  if ((r4 | 0) < 2) {
    r10 = _gpg_error602();
    STACKTOP = r5;
    return r10;
  }
  __gcry_mpi_sub_ui(r8, r2, 1);
  while (1) {
    do {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        _progress(94);
        r11 = 0;
        break;
      } else {
        __gcry_log_debug(471428, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        __gcry_mpi_dump(r9);
        __gcry_log_debug(485292, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        r11 = 0;
        break;
      }
    } while (0);
    while (1) {
      r12 = (r11 | 0) < (r4 | 0);
      if (!r12) {
        break;
      }
      __gcry_mpi_fdiv_q(r6, r8, HEAP32[r3 + (r11 << 2) >> 2]);
      __gcry_mpi_powm(r7, r9, r6, r2);
      if ((__gcry_mpi_cmp_ui(r7, 1) | 0) == 0) {
        break;
      } else {
        r11 = r11 + 1 | 0;
      }
    }
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress(10);
    }
    if (!r12) {
      break;
    }
    __gcry_mpi_add_ui(r9, r9, 1);
  }
  __gcry_mpi_release(r6);
  __gcry_mpi_release(r7);
  __gcry_mpi_release(r8);
  HEAP32[r1 >> 2] = r9;
  r10 = 0;
  STACKTOP = r5;
  return r10;
}
function __gcry_prime_release_factors(r1) {
  var r2, r3, r4, r5, r6;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = HEAP32[r1 >> 2];
  L982 : do {
    if ((r2 | 0) != 0) {
      r3 = 0;
      r4 = r2;
      while (1) {
        __gcry_mpi_free(r4);
        r5 = r3 + 1 | 0;
        r6 = HEAP32[r1 + (r5 << 2) >> 2];
        if ((r6 | 0) == 0) {
          break L982;
        } else {
          r3 = r5;
          r4 = r6;
        }
      }
    }
  } while (0);
  __gcry_free(r1);
  return;
}
function __gcry_derive_x931_prime(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11;
  if ((r1 | 0) == 0 | (r2 | 0) == 0 | (r3 | 0) == 0 | (r4 | 0) == 0) {
    r7 = 0;
    return r7;
  }
  if ((__gcry_mpi_test_bit(r4, 0) | 0) == 0) {
    r7 = 0;
    return r7;
  }
  r8 = _find_x931_prime(r2);
  r2 = _find_x931_prime(r3);
  r3 = __gcry_mpi_alloc_like(r1);
  __gcry_mpi_mul(r3, r8, r2);
  r9 = __gcry_mpi_alloc_like(r8);
  __gcry_mpi_invm(r9, r2, r8);
  __gcry_mpi_mul(r9, r9, r2);
  r10 = __gcry_mpi_alloc_like(r2);
  __gcry_mpi_invm(r10, r8, r2);
  __gcry_mpi_mul(r10, r10, r8);
  __gcry_mpi_sub(r9, r9, r10);
  if ((HEAP32[r9 + 8 >> 2] | 0) != 0) {
    __gcry_mpi_add(r9, r9, r3);
  }
  __gcry_mpi_subm(r10, r9, r1, r3);
  __gcry_mpi_add(r10, r10, r1);
  __gcry_mpi_free(r9);
  if ((__gcry_mpi_cmp(r10, r1) | 0) < 0) {
    __gcry_mpi_add(r10, r10, r3);
  }
  r1 = __gcry_mpi_alloc_set_ui(2);
  r9 = __gcry_mpi_alloc_like(r10);
  __gcry_mpi_sub_ui(r3, r3, 1);
  __gcry_mpi_sub_ui(r10, r10, 1);
  while (1) {
    r11 = __gcry_mpi_gcd(r9, r4, r10);
    __gcry_mpi_add_ui(r10, r10, 1);
    if ((r11 | 0) == 0) {
      _progress(47);
    } else {
      if ((_check_prime(r10, r1, 64, 0, 0) | 0) != 0) {
        break;
      }
    }
    __gcry_mpi_add(r10, r10, r3);
  }
  __gcry_mpi_free(r9);
  __gcry_mpi_free(r1);
  __gcry_mpi_free(r3);
  _progress(10);
  if ((r5 | 0) == 0) {
    __gcry_mpi_free(r8);
  } else {
    HEAP32[r5 >> 2] = r8;
  }
  if ((r6 | 0) == 0) {
    __gcry_mpi_free(r2);
    r7 = r10;
    return r7;
  } else {
    HEAP32[r6 >> 2] = r2;
    r7 = r10;
    return r7;
  }
}
function _find_x931_prime(r1) {
  var r2, r3;
  r2 = __gcry_mpi_alloc_set_ui(2);
  r3 = __gcry_mpi_copy(r1);
  __gcry_mpi_set_bit(r3, 0);
  if ((_check_prime(r3, r2, 64, 0, 0) | 0) != 0) {
    __gcry_mpi_free(r2);
    return r3;
  }
  while (1) {
    __gcry_mpi_add_ui(r3, r3, 2);
    if ((_check_prime(r3, r2, 64, 0, 0) | 0) != 0) {
      break;
    }
  }
  __gcry_mpi_free(r2);
  return r3;
}
function __gcry_generate_fips186_2_prime(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 68 | 0;
  r11 = r10;
  r12 = r10 + 20;
  r13 = r10 + 40, r14 = r13 >> 2;
  r15 = r10 + 44;
  r16 = r10 + 64, r17 = r16 >> 2;
  HEAP32[r14] = 0;
  HEAP32[r17] = 0;
  if (!((r1 | 0) == 1024 & (r2 | 0) == 160)) {
    r18 = 44;
    STACKTOP = r10;
    return r18;
  }
  r19 = (r3 | 0) != 0;
  do {
    if (!((r4 | 0) == 0 & (r19 ^ 1))) {
      if (!r19) {
        r18 = 45;
        STACKTOP = r10;
        return r18;
      }
      if (r2 >>> 3 >>> 0 > r4 >>> 0) {
        r18 = 45;
      } else {
        break;
      }
      STACKTOP = r10;
      return r18;
    }
  } while (0);
  r19 = __gcry_malloc(r4 >>> 0 < 20 ? 20 : r4);
  L1033 : do {
    if ((r19 | 0) == 0) {
      r20 = 0;
      r21 = 0;
      r22 = 0;
      r23 = 0;
      r24 = 0;
      r25 = _gpg_err_code_from_syserror();
    } else {
      r26 = __gcry_mpi_alloc_set_ui(2);
      r27 = r1 - 1 | 0;
      r28 = Math.floor((r27 >>> 0) / (r2 >>> 0));
      r29 = r27 - Math.imul(r28, r2) | 0;
      r30 = __gcry_mpi_new(r1);
      r31 = __gcry_mpi_new(r1);
      r32 = r11 | 0;
      r33 = r15 | 0;
      r34 = r12 | 0;
      r35 = r2 - 1 | 0;
      r36 = (r28 | 0) < 0;
      r37 = 0;
      r38 = r3;
      r39 = r4;
      L1036 : while (1) {
        r40 = r38;
        r41 = r39;
        while (1) {
          if ((r40 | 0) == 0) {
            __gcry_create_nonce(r32, 20);
            r42 = r32;
            r43 = 20;
          } else {
            r42 = r40;
            r43 = r41;
          }
          _memcpy(r19, r42, r43);
          r44 = r43 - 1 | 0;
          r45 = r44;
          while (1) {
            if ((r45 | 0) <= -1) {
              break;
            }
            r46 = r19 + r45 | 0;
            r47 = HEAP8[r46] + 1 & 255;
            HEAP8[r46] = r47;
            if (r47 << 24 >> 24 == 0) {
              r45 = r45 - 1 | 0;
            } else {
              break;
            }
          }
          __gcry_md_hash_buffer(2, r33, r42, r43);
          __gcry_md_hash_buffer(2, r34, r19, r43);
          r45 = 0;
          while (1) {
            r47 = r15 + r45 | 0;
            HEAP8[r47] = HEAP8[r47] ^ HEAP8[r12 + r45 | 0];
            r47 = r45 + 1 | 0;
            if ((r47 | 0) == 20) {
              break;
            } else {
              r45 = r47;
            }
          }
          __gcry_mpi_release(HEAP32[r17]);
          HEAP32[r17] = 0;
          r48 = _gpg_err_code610(__gcry_mpi_scan(r16, 5, r33, 20, 0));
          if ((r48 | 0) != 0) {
            r20 = r37;
            r21 = r31;
            r22 = r30;
            r23 = r26;
            r24 = r19;
            r25 = r48;
            break L1033;
          }
          __gcry_mpi_set_highbit(HEAP32[r17], r35);
          __gcry_mpi_set_bit(HEAP32[r17], 0);
          if ((_check_prime(HEAP32[r17], r26, 64, 0, 0) | 0) == 0) {
            r40 = 0;
            r41 = r43;
          } else {
            break;
          }
        }
        r49 = __gcry_mpi_new(r1);
        r50 = 0;
        r41 = r48;
        while (1) {
          __gcry_mpi_set_ui(r30, 0);
          L1054 : do {
            if (r36) {
              r51 = r41;
            } else {
              r40 = 0;
              while (1) {
                r45 = r44;
                while (1) {
                  if ((r45 | 0) <= -1) {
                    break;
                  }
                  r47 = r19 + r45 | 0;
                  r46 = HEAP8[r47] + 1 & 255;
                  HEAP8[r47] = r46;
                  if (r46 << 24 >> 24 == 0) {
                    r45 = r45 - 1 | 0;
                  } else {
                    break;
                  }
                }
                __gcry_md_hash_buffer(2, r34, r19, r43);
                __gcry_mpi_release(HEAP32[r14]);
                HEAP32[r14] = 0;
                r45 = _gpg_err_code610(__gcry_mpi_scan(r13, 5, r34, 20, 0));
                if ((r45 | 0) != 0) {
                  r20 = r49;
                  r21 = r31;
                  r22 = r30;
                  r23 = r26;
                  r24 = r19;
                  r25 = r45;
                  break L1033;
                }
                if ((r40 | 0) == (r28 | 0)) {
                  __gcry_mpi_clear_highbit(HEAP32[r14], r29);
                }
                r46 = HEAP32[r14];
                __gcry_mpi_lshift(r46, r46, Math.imul(r40, r2));
                __gcry_mpi_add(r30, r30, HEAP32[r14]);
                r46 = r40 + 1 | 0;
                if ((r46 | 0) > (r28 | 0)) {
                  r51 = r45;
                  break L1054;
                } else {
                  r40 = r46;
                }
              }
            }
          } while (0);
          __gcry_mpi_set_ui(r31, 0);
          __gcry_mpi_set_highbit(r31, r27);
          __gcry_mpi_add(r31, r31, r30);
          __gcry_mpi_mul_2exp(HEAP32[r14], HEAP32[r17], 1);
          r40 = HEAP32[r14];
          __gcry_mpi_mod(r40, r31, r40);
          r40 = HEAP32[r14];
          __gcry_mpi_sub_ui(r40, r40, 1);
          __gcry_mpi_sub(r49, r31, HEAP32[r14]);
          if (__gcry_mpi_get_nbits(r49) >>> 0 >= r27 >>> 0) {
            if ((_check_prime(r49, r26, 64, 0, 0) | 0) != 0) {
              break L1036;
            }
          }
          r40 = r50 + 1 | 0;
          if ((r40 | 0) > 4095) {
            r37 = r49;
            r38 = r42;
            r39 = r43;
            continue L1036;
          } else {
            r50 = r40;
            r41 = r51;
          }
        }
      }
      if ((r5 | 0) != 0) {
        HEAP32[r5 >> 2] = HEAP32[r17];
        HEAP32[r17] = 0;
      }
      if ((r6 | 0) == 0) {
        r52 = r49;
      } else {
        HEAP32[r6 >> 2] = r49;
        r52 = 0;
      }
      if ((r7 | 0) != 0) {
        HEAP32[r7 >> 2] = r50;
      }
      if ((r8 | 0) == 0 | (r9 | 0) == 0) {
        r20 = r52;
        r21 = r31;
        r22 = r30;
        r23 = r26;
        r24 = r19;
        r25 = r51;
        break;
      }
      _memcpy(r19, r42, r43);
      HEAP32[r8 >> 2] = r19;
      HEAP32[r9 >> 2] = r43;
      r20 = r52;
      r21 = r31;
      r22 = r30;
      r23 = r26;
      r24 = 0;
      r25 = r51;
    }
  } while (0);
  __gcry_mpi_release(HEAP32[r14]);
  __gcry_mpi_release(r21);
  __gcry_mpi_release(r22);
  __gcry_mpi_release(r20);
  __gcry_mpi_release(HEAP32[r17]);
  __gcry_free(r24);
  __gcry_mpi_release(r23);
  r18 = r25;
  STACKTOP = r10;
  return r18;
}
function _gcry_err_make611(r1) {
  return _gpg_err_make612(32, r1);
}
function __gcry_generate_fips186_3_prime(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10) {
  var r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61;
  r11 = 0;
  r12 = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  r13 = r12;
  r14 = r12 + 32;
  r15 = r12 + 64, r16 = r15 >> 2;
  r17 = r12 + 68;
  r18 = r12 + 100, r19 = r18 >> 2;
  HEAP32[r16] = 0;
  HEAP32[r19] = 0;
  do {
    if ((r1 | 0) == 1024 & (r2 | 0) == 160) {
      r20 = 2;
    } else {
      r21 = (r1 | 0) == 2048;
      if (r21 & (r2 | 0) == 224) {
        r20 = 11;
        break;
      }
      if ((r21 | (r1 | 0) == 3072) & (r2 | 0) == 256) {
        r20 = 8;
        break;
      } else {
        r22 = 44;
      }
      STACKTOP = r12;
      return r22;
    }
  } while (0);
  r21 = _gpg_err_code610(__gcry_md_algo_info(r20, 8, 0, 0));
  if ((r21 | 0) != 0) {
    r22 = r21;
    STACKTOP = r12;
    return r22;
  }
  r21 = r2 >>> 3;
  r23 = r2 >>> 0 < 264;
  if (!r23) {
    __gcry_assert_failed(478948, 475808, 1684, 495804);
  }
  if ((__gcry_md_get_algo_dlen(r20) | 0) != (r21 | 0)) {
    __gcry_assert_failed(473232, 475808, 1685, 495804);
  }
  r24 = (r3 | 0) == 0;
  do {
    if (!(r24 & (r4 | 0) == 0)) {
      if (r24 | r21 >>> 0 > r4 >>> 0) {
        r22 = 45;
      } else {
        break;
      }
      STACKTOP = r12;
      return r22;
    }
  } while (0);
  r24 = __gcry_malloc(r4 >>> 0 < 32 ? 32 : r4);
  L1102 : do {
    if ((r24 | 0) == 0) {
      r25 = 0;
      r26 = 0;
      r27 = 0;
      r28 = 0;
      r29 = 0;
      r30 = _gpg_err_code_from_syserror();
    } else {
      r31 = __gcry_mpi_alloc_set_ui(2);
      r32 = __gcry_mpi_new(r1);
      r33 = __gcry_mpi_new(r1);
      r34 = Math.floor(((r1 - 1 + r2 | 0) >>> 0) / (r2 >>> 0)) - 1 | 0;
      r35 = r1 - 1 | 0;
      r36 = r35 - Math.imul(r34, r2) | 0;
      r37 = r13 | 0;
      r38 = r17 | 0;
      r39 = r21 - 1 | 0;
      r40 = r17 + r39 | 0;
      r41 = r2 - 1 | 0;
      r42 = (r34 | 0) < 0;
      r43 = r1 << 2;
      r44 = r14 | 0;
      r45 = 0;
      r46 = r3;
      r47 = r4;
      L1104 : while (1) {
        r48 = r46;
        r49 = r47;
        while (1) {
          if ((r48 | 0) == 0) {
            if (!r23) {
              r11 = 830;
              break L1104;
            }
            __gcry_create_nonce(r37, r21);
            r50 = r37;
            r51 = r21;
          } else {
            r50 = r48;
            r51 = r49;
          }
          __gcry_md_hash_buffer(r20, r38, r50, r51);
          L1112 : do {
            if ((HEAP8[r40] & 1) << 24 >> 24 == 0) {
              r52 = r39;
              while (1) {
                if ((r52 | 0) <= -1) {
                  break L1112;
                }
                r53 = r17 + r52 | 0;
                r54 = HEAP8[r53] + 1 & 255;
                HEAP8[r53] = r54;
                if (r54 << 24 >> 24 == 0) {
                  r52 = r52 - 1 | 0;
                } else {
                  break L1112;
                }
              }
            }
          } while (0);
          __gcry_mpi_release(HEAP32[r19]);
          HEAP32[r19] = 0;
          r55 = _gpg_err_code610(__gcry_mpi_scan(r18, 5, r38, 32, 0));
          if ((r55 | 0) != 0) {
            r25 = r45;
            r26 = r33;
            r27 = r32;
            r28 = r31;
            r29 = r24;
            r30 = r55;
            break L1102;
          }
          __gcry_mpi_set_highbit(HEAP32[r19], r41);
          if ((_check_prime(HEAP32[r19], r31, 64, 0, 0) | 0) == 0) {
            r48 = 0;
            r49 = r51;
          } else {
            break;
          }
        }
        _memcpy(r24, r50, r51);
        r56 = __gcry_mpi_new(r1);
        r57 = 0;
        r49 = r55;
        while (1) {
          __gcry_mpi_set_ui(r32, 0);
          L1121 : do {
            if (r42) {
              r58 = r49;
            } else {
              r48 = 0;
              while (1) {
                r52 = r51;
                while (1) {
                  r54 = r52 - 1 | 0;
                  if ((r54 | 0) <= -1) {
                    break;
                  }
                  r53 = r24 + r54 | 0;
                  r59 = HEAP8[r53] + 1 & 255;
                  HEAP8[r53] = r59;
                  if (r59 << 24 >> 24 == 0) {
                    r52 = r54;
                  } else {
                    break;
                  }
                }
                __gcry_md_hash_buffer(2, r44, r24, r51);
                __gcry_mpi_release(HEAP32[r16]);
                HEAP32[r16] = 0;
                r52 = _gpg_err_code610(__gcry_mpi_scan(r15, 5, r44, 32, 0));
                if ((r52 | 0) != 0) {
                  r25 = r56;
                  r26 = r33;
                  r27 = r32;
                  r28 = r31;
                  r29 = r24;
                  r30 = r52;
                  break L1102;
                }
                if ((r48 | 0) == (r34 | 0)) {
                  __gcry_mpi_clear_highbit(HEAP32[r16], r36);
                }
                r54 = HEAP32[r16];
                __gcry_mpi_lshift(r54, r54, Math.imul(r48, r2));
                __gcry_mpi_add(r32, r32, HEAP32[r16]);
                r54 = r48 + 1 | 0;
                if ((r54 | 0) > (r34 | 0)) {
                  r58 = r52;
                  break L1121;
                } else {
                  r48 = r54;
                }
              }
            }
          } while (0);
          __gcry_mpi_set_ui(r33, 0);
          __gcry_mpi_set_highbit(r33, r35);
          __gcry_mpi_add(r33, r33, r32);
          __gcry_mpi_mul_2exp(HEAP32[r16], HEAP32[r19], 1);
          r48 = HEAP32[r16];
          __gcry_mpi_mod(r48, r33, r48);
          r48 = HEAP32[r16];
          __gcry_mpi_sub_ui(r48, r48, 1);
          __gcry_mpi_sub(r56, r33, HEAP32[r16]);
          if (__gcry_mpi_get_nbits(r56) >>> 0 >= r35 >>> 0) {
            if ((_check_prime(r56, r31, 64, 0, 0) | 0) != 0) {
              break L1104;
            }
          }
          r48 = r57 + 1 | 0;
          if (r48 >>> 0 < r43 >>> 0) {
            r57 = r48;
            r49 = r58;
          } else {
            r45 = r56;
            r46 = r50;
            r47 = r51;
            continue L1104;
          }
        }
      }
      if (r11 == 830) {
        __gcry_assert_failed(471680, 475808, 1720, 495804);
      }
      r47 = __gcry_mpi_get_nbits(r56);
      r46 = __gcry_mpi_get_nbits(HEAP32[r19]);
      __gcry_log_debug(470368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r47, HEAP32[tempInt + 4 >> 2] = r46, HEAP32[tempInt + 8 >> 2] = r57, tempInt));
      __gcry_log_printhex(468696, r50, r51);
      __gcry_log_mpidump(467008, r56);
      __gcry_log_mpidump(465200, HEAP32[r19]);
      if ((r5 | 0) != 0) {
        HEAP32[r5 >> 2] = HEAP32[r19];
        HEAP32[r19] = 0;
      }
      if ((r6 | 0) == 0) {
        r60 = r56;
      } else {
        HEAP32[r6 >> 2] = r56;
        r60 = 0;
      }
      if ((r7 | 0) != 0) {
        HEAP32[r7 >> 2] = r57;
      }
      if ((r8 | 0) == 0 | (r9 | 0) == 0) {
        r61 = r24;
      } else {
        _memcpy(r24, r50, r51);
        HEAP32[r8 >> 2] = r24;
        HEAP32[r9 >> 2] = r51;
        r61 = 0;
      }
      if ((r10 | 0) == 0) {
        r25 = r60;
        r26 = r33;
        r27 = r32;
        r28 = r31;
        r29 = r61;
        r30 = r58;
        break;
      }
      HEAP32[r10 >> 2] = r20;
      r25 = r60;
      r26 = r33;
      r27 = r32;
      r28 = r31;
      r29 = r61;
      r30 = r58;
    }
  } while (0);
  __gcry_mpi_release(HEAP32[r16]);
  __gcry_mpi_release(r26);
  __gcry_mpi_release(r27);
  __gcry_mpi_release(r25);
  __gcry_mpi_release(HEAP32[r19]);
  __gcry_free(r29);
  __gcry_mpi_release(r28);
  r22 = r30;
  STACKTOP = r12;
  return r22;
}
function _is_prime(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r4 = 0;
  r5 = (r1 + 4 | 0) >> 2;
  r6 = __gcry_mpi_alloc(HEAP32[r5]);
  r7 = __gcry_mpi_alloc(HEAP32[r5]);
  r8 = __gcry_mpi_alloc(HEAP32[r5]);
  r9 = __gcry_mpi_alloc(HEAP32[r5]);
  r5 = __gcry_mpi_alloc_set_ui(2);
  r10 = __gcry_mpi_get_nbits(r1);
  r11 = (r2 | 0) < 5 ? 5 : r2;
  __gcry_mpi_sub_ui(r9, r1, 1);
  r2 = __gcry_mpi_copy(r9);
  r12 = __gcry_mpi_trailing_zeros(r2);
  __gcry_mpi_tdiv_q_2exp(r2, r2, r12);
  L1156 : do {
    if ((r11 | 0) == 0) {
      r13 = 1;
    } else {
      r14 = r10 - 2 | 0;
      r15 = 0;
      while (1) {
        HEAP32[r3 >> 2] = HEAP32[r3 >> 2] + 1 | 0;
        if ((r15 | 0) == 0) {
          __gcry_mpi_set_ui(r6, 2);
        } else {
          __gcry_mpi_randomize(r6, r10, 0);
          r16 = (__gcry_mpi_test_bit(r6, r14) | 0) == 0;
          __gcry_mpi_set_highbit(r6, r14);
          if (r16) {
            __gcry_mpi_clear_bit(r6, r14);
          }
          if ((__gcry_mpi_cmp(r6, r9) | 0) >= 0) {
            r4 = 882;
            break;
          }
          if ((__gcry_mpi_cmp_ui(r6, 1) | 0) <= 0) {
            r4 = 883;
            break;
          }
        }
        __gcry_mpi_powm(r7, r6, r2, r1);
        do {
          if ((__gcry_mpi_cmp_ui(r7, 1) | 0) != 0) {
            if ((__gcry_mpi_cmp(r7, r9) | 0) == 0) {
              break;
            } else {
              r17 = 1;
            }
            while (1) {
              if (r17 >>> 0 >= r12 >>> 0) {
                break;
              }
              if ((__gcry_mpi_cmp(r7, r9) | 0) == 0) {
                break;
              }
              __gcry_mpi_powm(r7, r7, r5, r1);
              if ((__gcry_mpi_cmp_ui(r7, 1) | 0) == 0) {
                r13 = 0;
                break L1156;
              } else {
                r17 = r17 + 1 | 0;
              }
            }
            if ((__gcry_mpi_cmp(r7, r9) | 0) != 0) {
              r13 = 0;
              break L1156;
            }
          }
        } while (0);
        _progress(43);
        r16 = r15 + 1 | 0;
        if (r16 >>> 0 < r11 >>> 0) {
          r15 = r16;
        } else {
          r13 = 1;
          break L1156;
        }
      }
      if (r4 == 882) {
        __gcry_assert_failed(490512, 475808, 958, 494704);
      } else if (r4 == 883) {
        __gcry_assert_failed(490512, 475808, 958, 494704);
      }
    }
  } while (0);
  __gcry_mpi_free(r6);
  __gcry_mpi_free(r7);
  __gcry_mpi_free(r8);
  __gcry_mpi_free(r9);
  __gcry_mpi_free(r2);
  __gcry_mpi_free(r5);
  return r13;
}
function _init_encoding_ctx(r1, r2, r3) {
  var r4;
  r4 = r1 >> 2;
  HEAP32[r4] = r2;
  HEAP32[r4 + 1] = r3;
  HEAP32[r4 + 2] = 4;
  HEAP32[r4 + 3] = 0;
  HEAP32[r4 + 4] = 2;
  HEAP32[r4 + 5] = 0;
  HEAP32[r4 + 6] = 0;
  HEAP32[r4 + 7] = 20;
  HEAP32[r4 + 8] = 0;
  HEAP32[r4 + 9] = 0;
  return;
}
function _save_pool_prime(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = 0;
  r4 = HEAP32[110063];
  L1182 : do {
    if ((r4 | 0) == 0) {
      r3 = 895;
    } else {
      r5 = 0;
      r6 = r4;
      while (1) {
        if ((HEAP32[r6 + 4 >> 2] | 0) == 0) {
          r7 = r6, r8 = r7 >> 2;
          break L1182;
        }
        r9 = r5 + 1 | 0;
        r10 = HEAP32[r6 >> 2];
        if ((r10 | 0) == 0) {
          break;
        } else {
          r5 = r9;
          r6 = r10;
        }
      }
      if (r9 >>> 0 <= 100) {
        r3 = 895;
        break;
      }
      r6 = HEAP32[110063];
      if ((r6 | 0) == 0) {
        r3 = 895;
        break;
      }
      r5 = r9 >>> 0 < 3;
      r10 = 0;
      r11 = r6;
      while (1) {
        if (r5) {
          r6 = r11 + 4 | 0;
          __gcry_mpi_release(HEAP32[r6 >> 2]);
          HEAP32[r6 >> 2] = 0;
          r12 = (r10 | 0) == 0 ? r11 : r10;
        } else {
          r12 = r10;
        }
        r6 = HEAP32[r11 >> 2];
        if ((r6 | 0) == 0) {
          break;
        } else {
          r10 = r12;
          r11 = r6;
        }
      }
      if ((r12 | 0) == 0) {
        r3 = 895;
        break;
      } else {
        r7 = r12, r8 = r7 >> 2;
        break;
      }
    }
  } while (0);
  do {
    if (r3 == 895) {
      r12 = __gcry_calloc(1, 16);
      r9 = r12;
      if ((r12 | 0) != 0) {
        HEAP32[r12 >> 2] = HEAP32[110063];
        HEAP32[110063] = r9;
        r7 = r9, r8 = r7 >> 2;
        break;
      }
      __gcry_mpi_release(r1);
      return;
    }
  } while (0);
  HEAP32[r8 + 1] = r1;
  HEAP32[r8 + 2] = __gcry_mpi_get_nbits(r1);
  HEAP32[r8 + 3] = r2;
  return;
}
function __gcry_pk_register(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  if ((__gcry_fips_mode() | 0) != 0) {
    r7 = _gpg_error650(60);
    STACKTOP = r5;
    return r7;
  }
  __gcry_ath_mutex_lock(440016);
  r8 = __gcry_module_add(440020, 0, r1, (r2 | 0) != 0 ? r2 : 457372, r6);
  __gcry_ath_mutex_unlock(440016);
  if ((r8 | 0) != 0) {
    r7 = r8;
    STACKTOP = r5;
    return r7;
  }
  HEAP32[r4 >> 2] = HEAP32[r6 >> 2];
  HEAP32[r3 >> 2] = HEAP32[HEAP32[r6 >> 2] + 24 >> 2];
  r7 = 0;
  STACKTOP = r5;
  return r7;
}
function _gpg_error650(r1) {
  return _gpg_err_make695(1, r1);
}
function __gcry_pk_unregister(r1) {
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(r1);
  __gcry_ath_mutex_unlock(440016);
  return;
}
function __gcry_pk_map_name(r1) {
  var r2, r3, r4;
  if ((r1 | 0) == 0) {
    r2 = 0;
    return r2;
  }
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r3 = _gcry_pk_lookup_name(r1);
  if ((r3 | 0) == 0) {
    r4 = 0;
  } else {
    r1 = HEAP32[r3 + 24 >> 2];
    __gcry_module_release(r3);
    r4 = r1;
  }
  __gcry_ath_mutex_unlock(440016);
  r2 = r4;
  return r2;
}
function _gcry_pk_lookup_name(r1) {
  return __gcry_module_lookup(HEAP32[110005], r1, 120);
}
function __gcry_pk_algo_name(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r2 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r2 | 0) == 0) {
    r3 = 470920;
    r4 = __gcry_ath_mutex_unlock(440016);
    return r3;
  }
  r1 = HEAP32[HEAP32[r2 + 8 >> 2] >> 2];
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(440016);
  return r3;
}
function __gcry_pk_aliased_algo_name(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r3 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r3 | 0) == 0) {
    r4 = 0;
    r5 = __gcry_ath_mutex_unlock(440016);
    return r4;
  }
  r1 = HEAP32[r3 + 8 >> 2];
  r6 = HEAP32[r1 + 4 >> 2];
  do {
    if ((r6 | 0) == 0) {
      r2 = 935;
    } else {
      r7 = HEAP32[r6 >> 2];
      if ((r7 | 0) == 0) {
        r2 = 935;
        break;
      }
      if (HEAP8[r7] << 24 >> 24 == 0) {
        r2 = 935;
        break;
      } else {
        r8 = r7;
        break;
      }
    }
  } while (0);
  if (r2 == 935) {
    r8 = HEAP32[r1 >> 2];
  }
  __gcry_module_release(r3);
  r4 = r8;
  r5 = __gcry_ath_mutex_unlock(440016);
  return r4;
}
function _sexp_to_key(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r6 = 0;
  r7 = (r2 | 0) != 0;
  r2 = __gcry_sexp_find_token(r1, r7 ? 479304 : 479908, 0);
  if ((r2 | 0) == 0) {
    r8 = 65;
    return r8;
  }
  r1 = __gcry_sexp_cadr(r2);
  __gcry_sexp_release(r2);
  r2 = __gcry_sexp_nth_string(r1, 0);
  if ((r2 | 0) == 0) {
    __gcry_sexp_release(r1);
    r8 = 65;
    return r8;
  }
  __gcry_ath_mutex_lock(440016);
  r9 = _gcry_pk_lookup_name(r2);
  __gcry_ath_mutex_unlock(440016);
  do {
    if ((_strcmp(r2, 466924) | 0) == 0) {
      r10 = 1;
    } else {
      if ((_strcmp(r2, 466720) | 0) == 0) {
        r10 = 1;
        break;
      }
      r10 = (_strcmp(r2, 477708) | 0) == 0;
    }
  } while (0);
  __gcry_free(r2);
  if ((r9 | 0) == 0) {
    __gcry_sexp_release(r1);
    r8 = 4;
    return r8;
  }
  r2 = HEAP32[r9 + 8 >> 2] >> 2;
  r11 = HEAP32[r9 + 12 >> 2];
  do {
    if ((r3 | 0) == 0) {
      if (r7) {
        r12 = HEAP32[r2 + 3];
        break;
      } else {
        r12 = HEAP32[r2 + 2];
        break;
      }
    } else {
      r12 = r3;
    }
  } while (0);
  r3 = __gcry_calloc(_strlen(r12) + 1 | 0, 4);
  r7 = r3;
  do {
    if ((r3 | 0) == 0) {
      r13 = _gpg_err_code_from_syserror();
      if ((r13 | 0) == 0) {
        r6 = 955;
        break;
      }
      __gcry_sexp_release(r1);
      r14 = r13;
      break;
    } else {
      r6 = 955;
    }
  } while (0);
  do {
    if (r6 == 955) {
      if (r10) {
        r15 = _sexp_elements_extract_ecc(r1, r12, r7, r11);
      } else {
        r15 = _sexp_elements_extract(r1, r12, r7, HEAP32[r2]);
      }
      __gcry_sexp_release(r1);
      if ((r15 | 0) != 0) {
        r14 = r15;
        break;
      }
      HEAP32[r4 >> 2] = r7;
      HEAP32[r5 >> 2] = r9;
      r8 = 0;
      return r8;
    }
  } while (0);
  __gcry_free(r3);
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(r9);
  __gcry_ath_mutex_unlock(440016);
  r8 = r14;
  return r8;
}
function _get_pool_prime(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = 0;
  r4 = HEAP32[110063];
  if ((r4 | 0) == 0) {
    r5 = 0;
    return r5;
  } else {
    r6 = r4, r7 = r6 >> 2;
  }
  L1286 : while (1) {
    r8 = r6 + 4 | 0;
    r9 = HEAP32[r8 >> 2];
    do {
      if ((r9 | 0) != 0) {
        if ((HEAP32[r7 + 2] | 0) != (r1 | 0)) {
          break;
        }
        if ((HEAP32[r7 + 3] | 0) == (r2 | 0)) {
          break L1286;
        }
      }
    } while (0);
    r4 = HEAP32[r7];
    if ((r4 | 0) == 0) {
      r5 = 0;
      r3 = 976;
      break;
    } else {
      r6 = r4, r7 = r6 >> 2;
    }
  }
  if (r3 == 976) {
    return r5;
  }
  HEAP32[r8 >> 2] = 0;
  if ((__gcry_mpi_get_nbits(r9) | 0) == (r1 | 0)) {
    r5 = r9;
    return r5;
  } else {
    __gcry_assert_failed(481044, 475808, 210, 494740);
  }
}
function _m_out_of_n(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = 0;
  if (!((r2 | 0) != 0 & (r2 | 0) < (r3 | 0))) {
    return;
  }
  if ((r2 | 0) == 1) {
    r5 = 0;
    while (1) {
      if ((r5 | 0) >= (r3 | 0)) {
        r4 = 984;
        break;
      }
      r6 = r1 + r5 | 0;
      r7 = r5 + 1 | 0;
      if (HEAP8[r6] << 24 >> 24 == 0) {
        r5 = r7;
      } else {
        break;
      }
    }
    if (r4 == 984) {
      __gcry_bug(475808, 1025, 494692);
    }
    HEAP8[r6] = 0;
    HEAP8[r1 + ((r7 | 0) < (r3 | 0) ? r7 : 0) | 0] = 1;
    return;
  }
  r7 = r1 + (r3 - 1) | 0;
  r6 = r3 - 1 | 0;
  r5 = 1;
  while (1) {
    if ((r5 | 0) >= (r3 | 0)) {
      r8 = 0;
      break;
    }
    if (HEAP8[r7] << 24 >> 24 == HEAP8[r1 + (r6 - r5) | 0] << 24 >> 24) {
      r5 = r5 + 1 | 0;
    } else {
      r8 = r5;
      break;
    }
  }
  r5 = HEAP8[r1 + (r3 - 1) | 0] << 24 >> 24 != 0;
  do {
    if ((r2 & 1 | 0) == 0) {
      if (!r5) {
        r6 = r3 - r8 | 0;
        r9 = r6 + 1 | 0;
        r10 = r6;
        break;
      }
      if ((r8 & 1 | 0) != 0) {
        r4 = 999;
        break;
      }
      r6 = r3 - r8 | 0;
      r7 = r6 + 2 | 0;
      r9 = (r7 | 0) > (r3 | 0) ? r3 : r7;
      r10 = r6;
      break;
    } else {
      if (r5) {
        if ((r8 & 1 | 0) == 0) {
          r4 = 999;
          break;
        }
        r6 = r3 - r8 | 0;
        r7 = r6 + 2 | 0;
        r9 = (r7 | 0) > (r3 | 0) ? r3 : r7;
        r10 = r6;
        break;
      }
      r6 = r3 - r8 | 0;
      r7 = r6 - 1 | 0;
      if ((r7 | 0) == 0) {
        r9 = r6;
        r10 = 0;
        break;
      }
      if (HEAP8[r1 + r7 | 0] << 24 >> 24 != 0) {
        if (HEAP8[r1 + (r6 - 2) | 0] << 24 >> 24 != 0) {
          r9 = r7;
          r10 = r3;
          break;
        }
      }
      r9 = r7;
      r10 = r6;
      break;
    }
  } while (0);
  do {
    if (r4 == 999) {
      r5 = r3 - r8 | 0;
      r6 = r5 - 1 | 0;
      r7 = r5 + 1 | 0;
      r11 = 1;
      while (1) {
        if ((r11 | 0) > (r6 | 0)) {
          r4 = 1004;
          break;
        }
        r12 = r7 - r11 | 0;
        r13 = r12 - 1 | 0;
        if (HEAP8[r1 + r13 | 0] << 24 >> 24 == 0) {
          r11 = r11 + 1 | 0;
        } else {
          break;
        }
      }
      if (r4 == 1004) {
        r9 = 1 - r2 + r3 | 0;
        r10 = 1;
        break;
      }
      if (HEAP8[r1 + (r12 - 2) | 0] << 24 >> 24 != 0) {
        r9 = r5;
        r10 = r13;
        break;
      }
      r9 = r3 + 1 - r8 | 0;
      r10 = r13;
    }
  } while (0);
  r13 = r1 + (r10 - 1) | 0;
  HEAP8[r13] = HEAP8[r13] << 24 >> 24 == 0 & 1;
  r13 = r1 + (r9 - 1) | 0;
  HEAP8[r13] = HEAP8[r13] << 24 >> 24 == 0 & 1;
  return;
}
function _pk_register_default() {
  var r1, r2, r3, r4;
  r1 = 0;
  r2 = 0;
  while (1) {
    r3 = ((r2 << 4) + 440024 | 0) >> 2;
    if ((r2 | 0) == 6) {
      r1 = 1028;
      break;
    }
    r4 = HEAP32[r3] + 32 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 262;
    }
    r4 = HEAP32[r3] + 36 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 190;
    }
    r4 = HEAP32[r3] + 40 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 244;
    }
    r4 = HEAP32[r3] + 44 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 56;
    }
    r4 = HEAP32[r3] + 48 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 322;
    }
    r4 = HEAP32[r3] + 52 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 314;
    }
    r4 = HEAP32[r3] + 56 | 0;
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      HEAP32[r4 >> 2] = 384;
    }
    if ((__gcry_module_add(440020, HEAP32[(r2 << 4) + 440032 >> 2], HEAP32[r3], HEAP32[(r2 << 4) + 440028 >> 2], 0) | 0) == 0) {
      r2 = r2 + 1 | 0;
    } else {
      r1 = 1027;
      break;
    }
  }
  if (r1 == 1028) {
    return;
  } else if (r1 == 1027) {
    __gcry_bug(478868, 226, 494584);
  }
}
function __gcry_pk_encrypt(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4, r9 = r8 >> 2;
  r10 = r5 + 8, r11 = r10 >> 2;
  r12 = r5 + 48, r13 = r12 >> 2;
  r14 = r5 + 52;
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  HEAP32[r13] = 0;
  HEAP32[r1 >> 2] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r15 = _sexp_to_key(r3, 0, 0, r6, r12);
  do {
    if ((r15 | 0) == 0) {
      r12 = HEAP32[r13];
      if ((r12 | 0) == 0) {
        __gcry_assert_failed(485028, 478868, 2861, 495640);
      }
      r6 = HEAP32[r12 + 8 >> 2] >> 2;
      r12 = HEAP32[r6 + 1];
      do {
        if ((r12 | 0) == 0) {
          r4 = 1037;
        } else {
          r16 = HEAP32[r12 >> 2];
          if ((r16 | 0) == 0) {
            r4 = 1037;
            break;
          }
          if (HEAP8[r16] << 24 >> 24 == 0) {
            r4 = 1037;
            break;
          } else {
            r17 = r16;
            break;
          }
        }
      } while (0);
      if (r4 == 1037) {
        r17 = HEAP32[r6];
      }
      r12 = HEAP32[r6 + 4];
      _init_encoding_ctx(r10, 0, __gcry_pk_get_nbits(r3));
      r16 = _sexp_data_to_mpi(r2, r8, r10);
      if ((r16 | 0) != 0) {
        r18 = 0;
        r19 = r16;
        break;
      }
      r16 = __gcry_calloc(_strlen(r12) + 1 | 0, 4);
      r20 = r16;
      if ((r16 | 0) == 0) {
        r18 = r20;
        r19 = _gpg_err_code_from_syserror();
        break;
      }
      r16 = _pubkey_encrypt(HEAP32[HEAP32[r13] + 24 >> 2], r20, HEAP32[r9], HEAP32[r7], HEAP32[r11 + 3]);
      __gcry_mpi_free(HEAP32[r9]);
      HEAP32[r9] = 0;
      if ((r16 | 0) != 0) {
        r18 = r20;
        r19 = r16;
        break;
      }
      if ((HEAP32[r11 + 2] - 1 | 0) >>> 0 < 2) {
        r16 = (HEAP32[r11 + 1] + 7 | 0) >>> 3;
        r21 = _octet_string_from_mpi(r14, 0, HEAP32[r20 >> 2], r16);
        if ((r21 | 0) != 0) {
          r18 = r20;
          r19 = r21;
          break;
        }
        r21 = HEAP32[r14 >> 2];
        r22 = _gcry_err_code663(__gcry_sexp_build(r1, 0, 475672, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r17, HEAP32[tempInt + 4 >> 2] = r16, HEAP32[tempInt + 8 >> 2] = r21, tempInt)));
        __gcry_free(HEAP32[r14 >> 2]);
        r18 = r20;
        r19 = r22;
        break;
      }
      r22 = _strlen(r12);
      r21 = __gcry_malloc(_strlen(r17) + (r22 * 5 & -1) + 19 | 0);
      if ((r21 | 0) == 0) {
        r18 = r20;
        r19 = _gpg_err_code_from_syserror();
        break;
      }
      _memcpy(r21, 473108, 10);
      r16 = _stpcpy(r21 + 9 | 0, r17);
      L1396 : do {
        if (HEAP8[r12] << 24 >> 24 == 0) {
          r23 = r16;
        } else {
          r24 = r16;
          r25 = 0;
          r26 = r12;
          while (1) {
            HEAP8[r24] = 40;
            HEAP8[r24 + 1 | 0] = HEAP8[r26];
            r27 = r24 + 5 | 0;
            r28 = r24 + 2 | 0;
            tempBigInt = 2714917;
            HEAP8[r28] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r28 + 1 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r28 + 2 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r28 + 3 | 0] = tempBigInt & 255;
            r28 = r25 + 1 | 0;
            r29 = r12 + r28 | 0;
            if (HEAP8[r29] << 24 >> 24 == 0) {
              r23 = r27;
              break L1396;
            } else {
              r24 = r27;
              r25 = r28;
              r26 = r29;
            }
          }
        }
      } while (0);
      HEAP8[r23] = HEAP8[470288];
      HEAP8[r23 + 1 | 0] = HEAP8[470289 | 0];
      HEAP8[r23 + 2 | 0] = HEAP8[470290 | 0];
      r12 = _malloc(r22 << 2);
      r16 = r12;
      if ((r12 | 0) == 0) {
        r18 = r20;
        r19 = _gpg_err_code_from_syserror();
        break;
      }
      L1403 : do {
        if ((r22 | 0) != 0) {
          r6 = 0;
          while (1) {
            HEAP32[r16 + (r6 << 2) >> 2] = (r6 << 2) + r20 | 0;
            r26 = r6 + 1 | 0;
            if ((r26 | 0) == (r22 | 0)) {
              break L1403;
            } else {
              r6 = r26;
            }
          }
        }
      } while (0);
      r22 = __gcry_sexp_build_array(r1, 0, r21, r16);
      _free(r12);
      if ((r22 | 0) == 0) {
        __gcry_free(r21);
        r18 = r20;
        r19 = 0;
        break;
      } else {
        __gcry_bug(478868, 2957, 495640);
      }
    } else {
      r18 = 0;
      r19 = r15;
    }
  } while (0);
  r15 = HEAP32[r7];
  if ((r15 | 0) != 0) {
    _release_mpi_array(r15);
    __gcry_free(HEAP32[r7]);
  }
  if ((r18 | 0) != 0) {
    _release_mpi_array(r18);
    __gcry_free(r18);
  }
  if ((HEAP32[r13] | 0) == 0) {
    r30 = r10 + 20 | 0;
    r31 = HEAP32[r30 >> 2];
    __gcry_free(r31);
    r32 = _gcry_error664(r19);
    STACKTOP = r5;
    return r32;
  }
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(HEAP32[r13]);
  __gcry_ath_mutex_unlock(440016);
  r30 = r10 + 20 | 0;
  r31 = HEAP32[r30 >> 2];
  __gcry_free(r31);
  r32 = _gcry_error664(r19);
  STACKTOP = r5;
  return r32;
}
function __gcry_pk_get_nbits(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r2, r4 = r3 >> 2;
  r5 = r2 + 4, r6 = r5 >> 2;
  HEAP32[r4] = 0;
  HEAP32[r6] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r7 = _sexp_to_key(r1, 0, 0, r5, r3);
  if ((r7 | 0) == 65) {
    r8 = _sexp_to_key(r1, 1, 0, r5, r3);
  } else {
    r8 = r7;
  }
  if ((r8 | 0) != 0) {
    r9 = 0;
    STACKTOP = r2;
    return r9;
  }
  r8 = HEAP32[r4];
  r7 = FUNCTION_TABLE[HEAP32[HEAP32[r8 + 8 >> 2] + 56 >> 2]](HEAP32[r8 + 24 >> 2], HEAP32[r6]);
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(HEAP32[r4]);
  __gcry_ath_mutex_unlock(440016);
  _release_mpi_array(HEAP32[r6]);
  __gcry_free(HEAP32[r6]);
  r9 = r7;
  STACKTOP = r2;
  return r9;
}
function _sexp_data_to_mpi(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48;
  r4 = r3 >> 2;
  r5 = r2 >> 2;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r8 = r7, r9 = r8 >> 2;
  r10 = r7 + 4;
  r11 = r7 + 8;
  r12 = r7 + 12;
  r13 = r7 + 16;
  HEAP32[r5] = 0;
  r14 = __gcry_sexp_find_token(r1, 468796, 0);
  if ((r14 | 0) == 0) {
    r15 = __gcry_sexp_nth_mpi(r1, 0, 0);
    HEAP32[r5] = r15;
    r16 = (r15 | 0) != 0 ? 0 : 65;
    STACKTOP = r7;
    return r16;
  }
  r15 = __gcry_sexp_find_token(r14, 475064, 0);
  if ((r15 | 0) == 0) {
    r17 = 0;
    r18 = 0;
  } else {
    r1 = r3 + 8 | 0;
    r19 = r3 + 8 | 0;
    r20 = r3 + 8 | 0;
    r21 = r3 + 8 | 0;
    r22 = __gcry_sexp_length(r15);
    r23 = 0;
    r24 = 0;
    L1439 : while (1) {
      r25 = r22;
      r26 = r23;
      while (1) {
        r27 = r25 - 1 | 0;
        if ((r27 | 0) > 0) {
          r28 = r27;
        } else {
          break L1439;
        }
        L1443 : while (1) {
          r29 = __gcry_sexp_nth_data(r15, r28, r8);
          L1445 : do {
            if ((r29 | 0) != 0) {
              r27 = HEAP32[r9];
              if ((r27 | 0) == 3) {
                do {
                  if ((_memcmp(r29, 472168, 3) | 0) == 0) {
                    if ((HEAP32[r1 >> 2] | 0) != 4) {
                      break;
                    }
                    HEAP32[r1 >> 2] = 0;
                    break L1445;
                  }
                } while (0);
                r30 = HEAP32[r9];
              } else {
                r30 = r27;
              }
              do {
                if ((r30 | 0) == 5) {
                  if ((_memcmp(r29, 472068, 5) | 0) != 0) {
                    break;
                  }
                  if ((HEAP32[r19 >> 2] | 0) != 4) {
                    break;
                  }
                  HEAP32[r19 >> 2] = 1;
                  break L1445;
                }
              } while (0);
              r27 = HEAP32[r9];
              if ((r27 | 0) == 4) {
                do {
                  if ((_memcmp(r29, 471884, 4) | 0) == 0) {
                    if ((HEAP32[r20 >> 2] | 0) != 4) {
                      break;
                    }
                    HEAP32[r20 >> 2] = 2;
                    break L1445;
                  }
                } while (0);
                r31 = HEAP32[r9];
              } else {
                r31 = r27;
              }
              if ((r31 | 0) != 3) {
                break L1443;
              }
              if ((_memcmp(r29, 471768, 3) | 0) != 0) {
                break L1443;
              }
              if ((HEAP32[r21 >> 2] | 0) != 4) {
                break L1443;
              }
              HEAP32[r21 >> 2] = 3;
            }
          } while (0);
          r32 = r28 - 1 | 0;
          if ((r32 | 0) > 0) {
            r28 = r32;
          } else {
            break L1439;
          }
        }
        if ((HEAP32[r9] | 0) == 11) {
          break;
        } else {
          r25 = r28;
          r26 = 1;
        }
      }
      r25 = (_memcmp(r29, 471640, 11) | 0) == 0;
      r22 = r28;
      r23 = r25 ? r26 : 1;
      r24 = r25 & 1 | r24;
    }
    __gcry_sexp_release(r15);
    r17 = r26;
    r18 = r24;
  }
  r24 = (r3 + 8 | 0) >> 2;
  if ((HEAP32[r24] | 0) == 4) {
    HEAP32[r24] = 0;
  }
  r26 = __gcry_sexp_find_token(r14, 468688, 0);
  r15 = (r26 | 0) != 0;
  do {
    if (r15) {
      r33 = 0;
      r34 = 0;
      r6 = 1107;
    } else {
      r23 = __gcry_sexp_find_token(r14, 468584, 0);
      r28 = (r23 | 0) != 0;
      if (r15 ^ r28) {
        r33 = r23;
        r34 = r28;
        r6 = 1107;
        break;
      } else {
        r35 = 65;
        r36 = r23;
        break;
      }
    }
  } while (0);
  L1479 : do {
    if (r6 == 1107) {
      if ((r17 | 0) != 0) {
        r35 = 72;
        r36 = r33;
        break;
      }
      r23 = HEAP32[r24];
      r28 = r34 ^ 1;
      if (!((r23 | 0) != 0 | r28)) {
        r22 = __gcry_sexp_nth_mpi(r33, 1, 5);
        HEAP32[r5] = r22;
        r35 = (r22 | 0) == 0 ? 65 : 0;
        r36 = r33;
        break;
      }
      do {
        if (!((r23 | 0) != 1 | r28)) {
          if ((HEAP32[r4] | 0) != 0) {
            break;
          }
          r22 = __gcry_sexp_nth_data(r33, 1, r10);
          if (!((r22 | 0) != 0 & (HEAP32[r10 >> 2] | 0) != 0)) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r29 = __gcry_sexp_find_token(r14, 471240, 0);
          L1489 : do {
            if ((r29 | 0) == 0) {
              r37 = 0;
              r38 = 0;
            } else {
              r21 = __gcry_sexp_nth_data(r29, 1, r8);
              if ((r21 | 0) == 0) {
                __gcry_sexp_release(r29);
                r35 = 68;
                r36 = r33;
                break L1479;
              }
              r31 = HEAP32[r9];
              do {
                if ((r31 | 0) == 0) {
                  r39 = 0;
                  r40 = 0;
                } else {
                  r20 = __gcry_malloc(r31);
                  if ((r20 | 0) == 0) {
                    r19 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release(r29);
                    if ((r19 | 0) == 0) {
                      r37 = 0;
                      r38 = 0;
                      break L1489;
                    } else {
                      r35 = r19;
                      r36 = r33;
                      break L1479;
                    }
                  } else {
                    _memcpy(r20, r21, HEAP32[r9]);
                    r39 = HEAP32[r9];
                    r40 = r20;
                    break;
                  }
                }
              } while (0);
              __gcry_sexp_release(r29);
              r37 = r39;
              r38 = r40;
            }
          } while (0);
          r29 = _pkcs1_encode_for_encryption(r2, HEAP32[r4 + 1], r22, HEAP32[r10 >> 2], r38, r37);
          __gcry_free(r38);
          r35 = r29;
          r36 = r33;
          break L1479;
        }
      } while (0);
      r23 = r15 ^ 1;
      do {
        if (!((HEAP32[r24] | 0) != 1 | r23)) {
          if ((HEAP32[r4] - 2 | 0) >>> 0 >= 2) {
            break;
          }
          if ((__gcry_sexp_length(r26) | 0) != 3) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r29 = __gcry_sexp_nth_data(r26, 1, r8);
          r21 = HEAP32[r9];
          if (!((r29 | 0) != 0 & (r21 | 0) != 0)) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r31 = _get_hash_algo(r29, r21);
          r21 = r3 + 16 | 0;
          HEAP32[r21 >> 2] = r31;
          if ((r31 | 0) == 0) {
            r35 = 5;
            r36 = r33;
            break L1479;
          }
          r31 = __gcry_sexp_nth_data(r26, 2, r11);
          r29 = HEAP32[r11 >> 2];
          if (!((r31 | 0) != 0 & (r29 | 0) != 0)) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r35 = _pkcs1_encode_for_signature(r2, HEAP32[r4 + 1], r31, r29, HEAP32[r21 >> 2]);
          r36 = r33;
          break L1479;
        }
      } while (0);
      do {
        if (!((HEAP32[r24] | 0) != 2 | r28)) {
          if ((HEAP32[r4] | 0) != 0) {
            break;
          }
          r21 = __gcry_sexp_nth_data(r33, 1, r12);
          if (!((r21 | 0) != 0 & (HEAP32[r12 >> 2] | 0) != 0)) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r29 = __gcry_sexp_find_token(r14, 471556, 0);
          do {
            if ((r29 | 0) != 0) {
              r31 = __gcry_sexp_nth_data(r29, 1, r8);
              if ((r31 | 0) == 0) {
                __gcry_sexp_release(r29);
                r35 = 68;
                r36 = r33;
                break L1479;
              } else {
                r20 = _get_hash_algo(r31, HEAP32[r9]);
                HEAP32[r4 + 4] = r20;
                r31 = (r20 | 0) == 0;
                __gcry_sexp_release(r29);
                if (r31) {
                  r35 = r31 ? 5 : 0;
                  r36 = r33;
                  break L1479;
                } else {
                  break;
                }
              }
            }
          } while (0);
          r29 = __gcry_sexp_find_token(r14, 471388, 0);
          L1520 : do {
            if ((r29 | 0) != 0) {
              r22 = __gcry_sexp_nth_data(r29, 1, r8);
              if ((r22 | 0) == 0) {
                __gcry_sexp_release(r29);
                r35 = 68;
                r36 = r33;
                break L1479;
              }
              r31 = HEAP32[r9];
              do {
                if ((r31 | 0) != 0) {
                  r20 = __gcry_malloc(r31);
                  HEAP32[r4 + 5] = r20;
                  if ((r20 | 0) == 0) {
                    r19 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release(r29);
                    if ((r19 | 0) == 0) {
                      break L1520;
                    } else {
                      r35 = r19;
                      r36 = r33;
                      break L1479;
                    }
                  } else {
                    _memcpy(r20, r22, HEAP32[r9]);
                    HEAP32[r4 + 6] = HEAP32[r9];
                    break;
                  }
                }
              } while (0);
              __gcry_sexp_release(r29);
            }
          } while (0);
          r29 = __gcry_sexp_find_token(r14, 471240, 0);
          L1532 : do {
            if ((r29 | 0) == 0) {
              r41 = 0;
              r42 = 0;
            } else {
              r22 = __gcry_sexp_nth_data(r29, 1, r8);
              if ((r22 | 0) == 0) {
                __gcry_sexp_release(r29);
                r35 = 68;
                r36 = r33;
                break L1479;
              }
              r31 = HEAP32[r9];
              do {
                if ((r31 | 0) == 0) {
                  r43 = 0;
                  r44 = 0;
                } else {
                  r20 = __gcry_malloc(r31);
                  if ((r20 | 0) == 0) {
                    r19 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release(r29);
                    if ((r19 | 0) == 0) {
                      r41 = 0;
                      r42 = 0;
                      break L1532;
                    } else {
                      r35 = r19;
                      r36 = r33;
                      break L1479;
                    }
                  } else {
                    _memcpy(r20, r22, HEAP32[r9]);
                    r43 = HEAP32[r9];
                    r44 = r20;
                    break;
                  }
                }
              } while (0);
              __gcry_sexp_release(r29);
              r41 = r43;
              r42 = r44;
            }
          } while (0);
          r29 = _oaep_encode(r2, HEAP32[r4 + 1], HEAP32[r4 + 4], r21, HEAP32[r12 >> 2], HEAP32[r4 + 5], HEAP32[r4 + 6], r42, r41);
          __gcry_free(r42);
          r35 = r29;
          r36 = r33;
          break L1479;
        }
      } while (0);
      do {
        if (!((HEAP32[r24] | 0) != 3 | r23)) {
          if ((HEAP32[r4] | 0) != 2) {
            break;
          }
          if ((__gcry_sexp_length(r26) | 0) != 3) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r28 = __gcry_sexp_nth_data(r26, 1, r8);
          r29 = HEAP32[r9];
          if (!((r28 | 0) != 0 & (r29 | 0) != 0)) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r22 = _get_hash_algo(r28, r29);
          r29 = r3 + 16 | 0;
          HEAP32[r29 >> 2] = r22;
          if ((r22 | 0) == 0) {
            r35 = 5;
            r36 = r33;
            break L1479;
          }
          r22 = __gcry_sexp_nth_data(r26, 2, r13);
          if (!((r22 | 0) != 0 & (HEAP32[r13 >> 2] | 0) != 0)) {
            r35 = 65;
            r36 = r33;
            break L1479;
          }
          r28 = __gcry_sexp_find_token(r14, 468300, 0);
          if ((r28 | 0) != 0) {
            r31 = __gcry_sexp_nth_data(r28, 1, r8);
            if ((r31 | 0) == 0) {
              r35 = 68;
              r36 = r33;
              break L1479;
            }
            HEAP32[r4 + 7] = _strtoul(r31, 0, 10);
            __gcry_sexp_release(r28);
          }
          r28 = __gcry_sexp_find_token(r14, 471240, 0);
          L1556 : do {
            if ((r28 | 0) == 0) {
              r45 = 0;
              r46 = 0;
            } else {
              r31 = __gcry_sexp_nth_data(r28, 1, r8);
              if ((r31 | 0) == 0) {
                __gcry_sexp_release(r28);
                r35 = 68;
                r36 = r33;
                break L1479;
              }
              r20 = HEAP32[r9];
              do {
                if ((r20 | 0) == 0) {
                  r47 = 0;
                  r48 = 0;
                } else {
                  r19 = __gcry_malloc(r20);
                  if ((r19 | 0) == 0) {
                    r30 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release(r28);
                    if ((r30 | 0) == 0) {
                      r45 = 0;
                      r46 = 0;
                      break L1556;
                    } else {
                      r35 = r30;
                      r36 = r33;
                      break L1479;
                    }
                  } else {
                    _memcpy(r19, r31, HEAP32[r9]);
                    r47 = HEAP32[r9];
                    r48 = r19;
                    break;
                  }
                }
              } while (0);
              __gcry_sexp_release(r28);
              r45 = r47;
              r46 = r48;
            }
          } while (0);
          r28 = _pss_encode(r2, HEAP32[r4 + 1] - 1 | 0, HEAP32[r29 >> 2], r22, HEAP32[r13 >> 2], HEAP32[r4 + 7], r46, r45);
          __gcry_free(r46);
          r35 = r28;
          r36 = r33;
          break L1479;
        }
      } while (0);
      if ((HEAP32[r24] | 0) != 3 | r23) {
        r35 = 70;
        r36 = r33;
        break;
      }
      if ((HEAP32[r4] | 0) != 3) {
        r35 = 70;
        r36 = r33;
        break;
      }
      if ((__gcry_sexp_length(r26) | 0) != 3) {
        r35 = 65;
        r36 = r33;
        break;
      }
      r28 = __gcry_sexp_nth_data(r26, 1, r8);
      r21 = HEAP32[r9];
      if (!((r28 | 0) != 0 & (r21 | 0) != 0)) {
        r35 = 65;
        r36 = r33;
        break;
      }
      r31 = _get_hash_algo(r28, r21);
      HEAP32[r4 + 4] = r31;
      if ((r31 | 0) == 0) {
        r35 = 5;
        r36 = r33;
        break;
      }
      r31 = __gcry_sexp_nth_mpi(r26, 2, 5);
      HEAP32[r5] = r31;
      HEAP32[r4 + 8] = 284;
      HEAP32[r4 + 9] = HEAP32[r5];
      r35 = (r31 | 0) == 0 ? 65 : 0;
      r36 = r33;
    }
  } while (0);
  __gcry_sexp_release(r14);
  __gcry_sexp_release(r26);
  __gcry_sexp_release(r36);
  if ((r35 | 0) == 0) {
    HEAP32[r4 + 3] = r18;
    r16 = 0;
    STACKTOP = r7;
    return r16;
  } else {
    r18 = r3 + 20 | 0;
    __gcry_free(HEAP32[r18 >> 2]);
    HEAP32[r18 >> 2] = 0;
    r16 = r35;
    STACKTOP = r7;
    return r16;
  }
}
function _pubkey_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10;
  r6 = STACKTOP;
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(469224, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
      L1584 : do {
        if ((_pubkey_get_npkey(r1) | 0) > 0) {
          r7 = 0;
          while (1) {
            __gcry_log_mpidump(469008, HEAP32[r4 + (r7 << 2) >> 2]);
            r8 = r7 + 1 | 0;
            if ((r8 | 0) < (_pubkey_get_npkey(r1) | 0)) {
              r7 = r8;
            } else {
              break L1584;
            }
          }
        }
      } while (0);
      __gcry_log_mpidump(473492, r3);
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  r7 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r7 | 0) == 0) {
    __gcry_ath_mutex_unlock(440016);
    r9 = 4;
    STACKTOP = r6;
    return r9;
  }
  r8 = FUNCTION_TABLE[HEAP32[HEAP32[r7 + 8 >> 2] + 40 >> 2]](r1, r2, r3, r4, r5);
  __gcry_module_release(r7);
  __gcry_ath_mutex_unlock(440016);
  if ((r8 | 0) != 0) {
    r9 = r8;
    STACKTOP = r6;
    return r9;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    r9 = 0;
    STACKTOP = r6;
    return r9;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    r9 = r8;
    STACKTOP = r6;
    return r9;
  }
  if ((_pubkey_get_nenc(r1) | 0) > 0) {
    r10 = 0;
  } else {
    r9 = r8;
    STACKTOP = r6;
    return r9;
  }
  while (1) {
    __gcry_log_mpidump(468968, HEAP32[r2 + (r10 << 2) >> 2]);
    r7 = r10 + 1 | 0;
    if ((r7 | 0) < (_pubkey_get_nenc(r1) | 0)) {
      r10 = r7;
    } else {
      r9 = r8;
      break;
    }
  }
  STACKTOP = r6;
  return r9;
}
function _octet_string_from_mpi(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = (r1 | 0) != 0;
  r10 = (r2 | 0) != 0;
  L1608 : do {
    if (r9 ^ r10) {
      if (r9) {
        HEAP32[r1 >> 2] = 0;
      }
      r11 = _gcry_err_code663(__gcry_mpi_print(5, 0, 0, r7, r3));
      if ((r11 | 0) != 0) {
        r12 = r11;
        break;
      }
      r11 = HEAP32[r8];
      if (r11 >>> 0 > r4 >>> 0) {
        r12 = 67;
        break;
      }
      r13 = r11 >>> 0 < r4 >>> 0 ? r4 - r11 | 0 : 0;
      r14 = r13 + r11 | 0;
      do {
        if (r10) {
          r15 = r2;
        } else {
          do {
            if ((r3 | 0) == 0) {
              r5 = 1212;
            } else {
              if ((HEAP32[r3 + 12 >> 2] & 1 | 0) == 0) {
                r5 = 1212;
                break;
              }
              r16 = __gcry_malloc_secure(r14);
              break;
            }
          } while (0);
          if (r5 == 1212) {
            r16 = __gcry_malloc(r14);
          }
          if ((r16 | 0) != 0) {
            r15 = r16;
            break;
          }
          r12 = _gpg_err_code_from_syserror();
          break L1608;
        }
      } while (0);
      if ((r13 | 0) != 0) {
        _memset(r15, 0, r13);
      }
      r14 = HEAP32[r8];
      HEAP32[r8] = r14 + r13 | 0;
      r11 = _gcry_err_code663(__gcry_mpi_print(5, r15 + r13 | 0, r14, 0, r3));
      if ((r11 | 0) != 0) {
        __gcry_free(r15);
        r12 = r11;
        break;
      }
      if (!r9) {
        r12 = 0;
        break;
      }
      HEAP32[r1 >> 2] = r15;
      r12 = 0;
    } else {
      r12 = 45;
    }
  } while (0);
  STACKTOP = r6;
  return r12;
}
function _gcry_err_code663(r1) {
  return _gpg_err_code693(r1);
}
function _release_mpi_array(r1) {
  var r2, r3, r4;
  r2 = HEAP32[r1 >> 2];
  if ((r2 | 0) == 0) {
    return;
  } else {
    r3 = r1;
    r4 = r2;
  }
  while (1) {
    __gcry_mpi_free(r4);
    HEAP32[r3 >> 2] = 0;
    r2 = r3 + 4 | 0;
    r1 = HEAP32[r2 >> 2];
    if ((r1 | 0) == 0) {
      break;
    } else {
      r3 = r2;
      r4 = r1;
    }
  }
  return;
}
function _gcry_error664(r1) {
  return _gcry_err_make694(r1);
}
function __gcry_pk_decrypt(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  r9 = r4 + 8, r10 = r9 >> 2;
  r11 = r4 + 12, r12 = r11 >> 2;
  r13 = r4 + 16, r14 = r13 >> 2;
  r15 = r4 + 20;
  r16 = r4 + 24;
  r17 = r4 + 28, r18 = r17 >> 2;
  r19 = r4 + 68, r20 = r19 >> 2;
  r21 = r4 + 72, r22 = r21 >> 2;
  HEAP32[r6] = 0;
  HEAP32[r8] = 0;
  HEAP32[r10] = 0;
  HEAP32[r12] = 0;
  HEAP32[r14] = 0;
  HEAP32[r20] = 0;
  HEAP32[r22] = 0;
  HEAP32[r1 >> 2] = 0;
  r23 = (r17 + 20 | 0) >> 2;
  HEAP32[r23] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r24 = _sexp_to_key(r3, 1, 0, r5, r21);
  do {
    if ((r24 | 0) == 0) {
      _init_encoding_ctx(r17, 1, __gcry_pk_get_nbits(r3));
      r21 = _sexp_to_enc(r2, r7, r19, r15, r16, r17);
      if ((r21 | 0) != 0) {
        r25 = r21;
        break;
      }
      r21 = HEAP32[HEAP32[r22] + 24 >> 2];
      if ((r21 | 0) != (HEAP32[HEAP32[r20] + 24 >> 2] | 0)) {
        r25 = 70;
        break;
      }
      r5 = _pubkey_decrypt(r21, r9, HEAP32[r8], HEAP32[r6], HEAP32[r16 >> 2]);
      if ((r5 | 0) != 0) {
        r25 = r5;
        break;
      }
      r5 = HEAP32[r18 + 2];
      if ((r5 | 0) == 1) {
        r21 = _pkcs1_decode_for_encryption(r11, r13, __gcry_pk_get_nbits(r3), HEAP32[r10]);
        __gcry_mpi_free(HEAP32[r10]);
        HEAP32[r10] = 0;
        if ((r21 | 0) != 0) {
          r25 = r21;
          break;
        }
        r21 = HEAP32[r12];
        r25 = _gcry_err_code663(__gcry_sexp_build(r1, 0, 468592, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r14], HEAP32[tempInt + 4 >> 2] = r21, tempInt)));
        break;
      } else if ((r5 | 0) == 2) {
        r5 = _oaep_decode(r11, r13, __gcry_pk_get_nbits(r3), HEAP32[r18 + 4], HEAP32[r10], HEAP32[r23], HEAP32[r18 + 6]);
        __gcry_mpi_free(HEAP32[r10]);
        HEAP32[r10] = 0;
        if ((r5 | 0) != 0) {
          r25 = r5;
          break;
        }
        r5 = HEAP32[r12];
        r25 = _gcry_err_code663(__gcry_sexp_build(r1, 0, 468592, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[r14], HEAP32[tempInt + 4 >> 2] = r5, tempInt)));
        break;
      } else {
        r25 = _gcry_err_code663(__gcry_sexp_build(r1, 0, (HEAP32[r15 >> 2] | 0) != 0 ? 466944 : 465176, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r10], tempInt)));
        break;
      }
    } else {
      r25 = r24;
    }
  } while (0);
  __gcry_free(HEAP32[r12]);
  r12 = HEAP32[r6];
  if ((r12 | 0) != 0) {
    _release_mpi_array(r12);
    __gcry_free(HEAP32[r6]);
  }
  __gcry_mpi_free(HEAP32[r10]);
  r10 = HEAP32[r8];
  if ((r10 | 0) != 0) {
    _release_mpi_array(r10);
    __gcry_free(HEAP32[r8]);
  }
  do {
    if ((HEAP32[r22] | 0) == 0) {
      if ((HEAP32[r20] | 0) != 0) {
        break;
      }
      r26 = HEAP32[r23];
      __gcry_free(r26);
      r27 = _gcry_error664(r25);
      STACKTOP = r4;
      return r27;
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  r8 = HEAP32[r22];
  if ((r8 | 0) != 0) {
    __gcry_module_release(r8);
  }
  r8 = HEAP32[r20];
  if ((r8 | 0) != 0) {
    __gcry_module_release(r8);
  }
  __gcry_ath_mutex_unlock(440016);
  r26 = HEAP32[r23];
  __gcry_free(r26);
  r27 = _gcry_error664(r25);
  STACKTOP = r4;
  return r27;
}
function _sexp_to_enc(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37;
  r7 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8, r10 = r9 >> 2;
  HEAP32[r4 >> 2] = 0;
  r11 = __gcry_sexp_find_token(r1, 472460, 0);
  L1675 : do {
    if ((r11 | 0) == 0) {
      r12 = 0;
      r13 = 65;
      r14 = 0;
      r15 = 0;
      r16 = 0;
      r17 = 0;
      r18 = 0;
    } else {
      r1 = __gcry_sexp_nth(r11, 1);
      if ((r1 | 0) == 0) {
        r12 = 0;
        r13 = 68;
        r14 = 0;
        r15 = 0;
        r16 = 0;
        r17 = 0;
        r18 = r11;
        break;
      }
      r19 = __gcry_sexp_nth_string(r1, 0);
      if ((r19 | 0) == 0) {
        r12 = 0;
        r13 = 65;
        r14 = 0;
        r15 = 0;
        r16 = 0;
        r17 = r1;
        r18 = r11;
        break;
      }
      if ((_strcmp(r19, 475064) | 0) == 0) {
        HEAP32[r4 >> 2] = 1;
        r20 = r6 + 8 | 0;
        r21 = r6 + 8 | 0;
        r22 = r6 + 8 | 0;
        r23 = r6 + 8 | 0;
        r24 = __gcry_sexp_length(r1);
        r25 = 0;
        L1681 : while (1) {
          r26 = r24 - 1 | 0;
          if ((r26 | 0) > 0) {
            r27 = r26;
          } else {
            break;
          }
          L1683 : while (1) {
            r28 = __gcry_sexp_nth_data(r1, r27, r9);
            L1685 : do {
              if ((r28 | 0) != 0) {
                r26 = HEAP32[r10];
                if ((r26 | 0) == 3) {
                  do {
                    if ((_memcmp(r28, 472168, 3) | 0) == 0) {
                      if ((HEAP32[r20 >> 2] | 0) != 4) {
                        break;
                      }
                      HEAP32[r20 >> 2] = 0;
                      break L1685;
                    }
                  } while (0);
                  r29 = HEAP32[r10];
                } else {
                  r29 = r26;
                }
                do {
                  if ((r29 | 0) == 5) {
                    if ((_memcmp(r28, 472068, 5) | 0) != 0) {
                      break;
                    }
                    if ((HEAP32[r21 >> 2] | 0) != 4) {
                      break;
                    }
                    HEAP32[r21 >> 2] = 1;
                    break L1685;
                  }
                } while (0);
                r26 = HEAP32[r10];
                if ((r26 | 0) != 4) {
                  r30 = r26;
                  break L1683;
                }
                if ((_memcmp(r28, 471884, 4) | 0) != 0) {
                  r7 = 1276;
                  break L1683;
                }
                if ((HEAP32[r22 >> 2] | 0) != 4) {
                  r7 = 1276;
                  break L1683;
                }
                HEAP32[r22 >> 2] = 2;
              }
            } while (0);
            r26 = r27 - 1 | 0;
            if ((r26 | 0) > 0) {
              r27 = r26;
            } else {
              break L1681;
            }
          }
          if (r7 == 1276) {
            r7 = 0;
            r30 = HEAP32[r10];
          }
          do {
            if ((r30 | 0) == 3) {
              if ((_memcmp(r28, 471768, 3) | 0) != 0) {
                break;
              }
              if ((HEAP32[r23 >> 2] | 0) == 4) {
                r12 = 0;
                r13 = 70;
                r14 = r25;
                r15 = r19;
                r16 = 0;
                r17 = r1;
                r18 = r11;
                break L1675;
              }
            }
          } while (0);
          if ((HEAP32[r10] | 0) != 11) {
            r12 = 0;
            r13 = 72;
            r14 = r25;
            r15 = r19;
            r16 = 0;
            r17 = r1;
            r18 = r11;
            break L1675;
          }
          if ((_memcmp(r28, 471640, 11) | 0) == 0) {
            r24 = r27;
            r25 = r25 | 1;
          } else {
            r12 = 0;
            r13 = 72;
            r14 = r25;
            r15 = r19;
            r16 = 0;
            r17 = r1;
            r18 = r11;
            break L1675;
          }
        }
        __gcry_sexp_release(r1);
        L1712 : do {
          if ((HEAP32[r6 + 8 >> 2] | 0) == 2) {
            r24 = __gcry_sexp_find_token(r11, 471556, 0);
            do {
              if ((r24 | 0) != 0) {
                r23 = __gcry_sexp_nth_data(r24, 1, r9);
                if ((r23 | 0) == 0) {
                  __gcry_sexp_release(r24);
                  r12 = 0;
                  r13 = 68;
                  r14 = r25;
                  r15 = r19;
                  r16 = 0;
                  r17 = r24;
                  r18 = r11;
                  break L1675;
                } else {
                  r22 = _get_hash_algo(r23, HEAP32[r10]);
                  HEAP32[r6 + 16 >> 2] = r22;
                  r23 = (r22 | 0) == 0;
                  __gcry_sexp_release(r24);
                  if (r23) {
                    r12 = 0;
                    r13 = r23 ? 5 : 0;
                    r14 = r25;
                    r15 = r19;
                    r16 = 0;
                    r17 = r24;
                    r18 = r11;
                    break L1675;
                  } else {
                    break;
                  }
                }
              }
            } while (0);
            r24 = __gcry_sexp_find_token(r11, 471388, 0);
            if ((r24 | 0) == 0) {
              break;
            }
            r23 = __gcry_sexp_nth_data(r24, 1, r9);
            if ((r23 | 0) == 0) {
              __gcry_sexp_release(r24);
              r12 = 0;
              r13 = 68;
              r14 = r25;
              r15 = r19;
              r16 = 0;
              r17 = r24;
              r18 = r11;
              break L1675;
            }
            r22 = HEAP32[r10];
            do {
              if ((r22 | 0) != 0) {
                r21 = __gcry_malloc(r22);
                HEAP32[r6 + 20 >> 2] = r21;
                if ((r21 | 0) == 0) {
                  r20 = _gpg_err_code_from_syserror();
                  __gcry_sexp_release(r24);
                  if ((r20 | 0) == 0) {
                    break L1712;
                  } else {
                    r12 = 0;
                    r13 = r20;
                    r14 = r25;
                    r15 = r19;
                    r16 = 0;
                    r17 = r24;
                    r18 = r11;
                    break L1675;
                  }
                } else {
                  _memcpy(r21, r23, HEAP32[r10]);
                  HEAP32[r6 + 24 >> 2] = HEAP32[r10];
                  break;
                }
              }
            } while (0);
            __gcry_sexp_release(r24);
          }
        } while (0);
        r23 = __gcry_sexp_nth(r11, 2);
        if ((r23 | 0) == 0) {
          r12 = 0;
          r13 = 68;
          r14 = r25;
          r15 = r19;
          r16 = 0;
          r17 = 0;
          r18 = r11;
          break;
        } else {
          r31 = 2;
          r32 = r23;
        }
        L1731 : while (1) {
          r23 = __gcry_sexp_nth_data(r32, 0, r9);
          r22 = HEAP32[r10];
          do {
            if ((r22 | 0) == 9) {
              if ((_memcmp(r23, 471556, 9) | 0) == 0) {
                break;
              }
              r33 = HEAP32[r10];
              r7 = 1299;
              break;
            } else {
              r33 = r22;
              r7 = 1299;
            }
          } while (0);
          do {
            if (r7 == 1299) {
              r7 = 0;
              if ((r33 | 0) == 5) {
                if ((_memcmp(r23, 471388, 5) | 0) == 0) {
                  break;
                }
              }
              if ((HEAP32[r10] | 0) != 15) {
                break L1731;
              }
              if ((_memcmp(r23, 471240, 15) | 0) != 0) {
                break L1731;
              }
            }
          } while (0);
          __gcry_sexp_release(r32);
          r23 = r31 + 1 | 0;
          r22 = __gcry_sexp_nth(r11, r23);
          if ((r22 | 0) == 0) {
            r12 = 0;
            r13 = 68;
            r14 = r25;
            r15 = r19;
            r16 = 0;
            r17 = 0;
            r18 = r11;
            break L1675;
          } else {
            r31 = r23;
            r32 = r22;
          }
        }
        __gcry_free(r19);
        r22 = __gcry_sexp_nth_string(r32, 0);
        if ((r22 | 0) == 0) {
          r12 = 0;
          r13 = 65;
          r14 = r25;
          r15 = 0;
          r16 = 0;
          r17 = r32;
          r18 = r11;
          break;
        }
        __gcry_sexp_release(r11);
        r34 = r25;
        r35 = r22;
        r36 = 0;
        r37 = r32;
      } else {
        r34 = 0;
        r35 = r19;
        r36 = r1;
        r37 = r11;
      }
      __gcry_ath_mutex_lock(440016);
      r22 = _gcry_pk_lookup_name(r35);
      __gcry_ath_mutex_unlock(440016);
      if ((r22 | 0) == 0) {
        r12 = 0;
        r13 = 4;
        r14 = r34;
        r15 = r35;
        r16 = 0;
        r17 = r36;
        r18 = r37;
        break;
      }
      r23 = HEAP32[HEAP32[r22 + 8 >> 2] + 16 >> 2];
      r24 = __gcry_calloc(_strlen(r23) + 1 | 0, 4);
      r21 = r24;
      if ((r24 | 0) == 0) {
        r12 = r21;
        r13 = _gpg_err_code_from_syserror();
        r14 = r34;
        r15 = r35;
        r16 = r22;
        r17 = r36;
        r18 = r37;
        break;
      } else {
        r12 = r21;
        r13 = _sexp_elements_extract(r37, r23, r21, 0);
        r14 = r34;
        r15 = r35;
        r16 = r22;
        r17 = r36;
        r18 = r37;
        break;
      }
    }
  } while (0);
  __gcry_sexp_release(r18);
  __gcry_sexp_release(r17);
  __gcry_free(r15);
  if ((r13 | 0) == 0) {
    HEAP32[r2 >> 2] = r12;
    HEAP32[r3 >> 2] = r16;
    HEAP32[r5 >> 2] = r14;
    STACKTOP = r8;
    return r13;
  } else {
    __gcry_ath_mutex_lock(440016);
    __gcry_module_release(r16);
    __gcry_ath_mutex_unlock(440016);
    __gcry_free(r12);
    r12 = r6 + 20 | 0;
    __gcry_free(HEAP32[r12 >> 2]);
    HEAP32[r12 >> 2] = 0;
    STACKTOP = r8;
    return r13;
  }
}
function _pubkey_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10;
  r6 = STACKTOP;
  HEAP32[r2 >> 2] = 0;
  L1757 : do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(472688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
      L1760 : do {
        if ((_pubkey_get_nskey(r1) | 0) > 0) {
          r7 = 0;
          while (1) {
            __gcry_log_mpidump(473712, HEAP32[r4 + (r7 << 2) >> 2]);
            r8 = r7 + 1 | 0;
            if ((r8 | 0) < (_pubkey_get_nskey(r1) | 0)) {
              r7 = r8;
            } else {
              break L1760;
            }
          }
        }
      } while (0);
      if ((_pubkey_get_nenc(r1) | 0) > 0) {
        r9 = 0;
      } else {
        break;
      }
      while (1) {
        __gcry_log_mpidump(473492, HEAP32[r3 + (r9 << 2) >> 2]);
        r7 = r9 + 1 | 0;
        if ((r7 | 0) < (_pubkey_get_nenc(r1) | 0)) {
          r9 = r7;
        } else {
          break L1757;
        }
      }
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  r9 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r9 | 0) == 0) {
    __gcry_ath_mutex_unlock(440016);
    r10 = 4;
    STACKTOP = r6;
    return r10;
  }
  r7 = FUNCTION_TABLE[HEAP32[HEAP32[r9 + 8 >> 2] + 44 >> 2]](r1, r2, r3, r4, r5);
  __gcry_module_release(r9);
  __gcry_ath_mutex_unlock(440016);
  if ((r7 | 0) != 0) {
    r10 = r7;
    STACKTOP = r6;
    return r10;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    r10 = 0;
    STACKTOP = r6;
    return r10;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    r10 = r7;
    STACKTOP = r6;
    return r10;
  }
  __gcry_log_mpidump(472524, HEAP32[r2 >> 2]);
  r10 = r7;
  STACKTOP = r6;
  return r10;
}
function _pkcs1_decode_for_encryption(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = (r3 + 7 | 0) >>> 3;
  HEAP32[r1 >> 2] = 0;
  r3 = __gcry_malloc_secure(r8);
  if ((r3 | 0) == 0) {
    r9 = _gpg_err_code_from_syserror();
    STACKTOP = r5;
    return r9;
  }
  r10 = __gcry_mpi_print(5, r3, r8, r6, r4);
  if ((r10 | 0) != 0) {
    __gcry_free(r3);
    r9 = _gcry_err_code663(r10);
    STACKTOP = r5;
    return r9;
  }
  r10 = HEAP32[r7];
  if (r10 >>> 0 < 4) {
    __gcry_free(r3);
    r9 = 155;
    STACKTOP = r5;
    return r9;
  }
  HEAP32[r7] = 0;
  if (HEAP8[r3] << 24 >> 24 == 0) {
    HEAP32[r7] = 1;
  }
  r4 = HEAP32[r7];
  HEAP32[r7] = r4 + 1 | 0;
  if (HEAP8[r3 + r4 | 0] << 24 >> 24 != 2) {
    __gcry_free(r3);
    r9 = 155;
    STACKTOP = r5;
    return r9;
  }
  r4 = HEAP32[r7];
  L1801 : do {
    if (r4 >>> 0 < r10 >>> 0) {
      r6 = r4;
      while (1) {
        if (HEAP8[r3 + r6 | 0] << 24 >> 24 == 0) {
          break L1801;
        }
        r8 = r6 + 1 | 0;
        HEAP32[r7] = r8;
        if (r8 >>> 0 < r10 >>> 0) {
          r6 = r8;
        } else {
          break L1801;
        }
      }
    }
  } while (0);
  r4 = HEAP32[r7] + 1 | 0;
  if (r4 >>> 0 >= r10 >>> 0) {
    __gcry_free(r3);
    r9 = 155;
    STACKTOP = r5;
    return r9;
  }
  HEAP32[r7] = r4;
  _memmove(r3, r3 + r4 | 0, r10 - r4 | 0, 1, 0);
  HEAP32[r1 >> 2] = r3;
  r3 = r10 - HEAP32[r7] | 0;
  HEAP32[r2 >> 2] = r3;
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    r9 = 0;
    STACKTOP = r5;
    return r9;
  }
  __gcry_log_printhex(472848, HEAP32[r1 >> 2], r3);
  r9 = 0;
  STACKTOP = r5;
  return r9;
}
function _oaep_decode(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8, r10 = r9 >> 2;
  HEAP32[r10] = 0;
  r11 = (r3 + 7 | 0) >>> 3;
  HEAP32[r1 >> 2] = 0;
  r3 = (r6 | 0) == 0 | (r7 | 0) == 0;
  r12 = __gcry_md_get_algo_dlen(r4);
  r13 = __gcry_malloc(r12);
  if ((r13 | 0) == 0) {
    r14 = _gpg_err_code_from_syserror();
    STACKTOP = r8;
    return r14;
  }
  __gcry_md_hash_buffer(r4, r13, r3 ? 473192 : r6, r3 ? 0 : r7);
  if ((_octet_string_from_mpi(r9, 0, r5, r11) | 0) != 0) {
    __gcry_free(r13);
    r14 = 155;
    STACKTOP = r8;
    return r14;
  }
  if (r11 >>> 0 < ((r12 << 1) + 2 | 0) >>> 0) {
    __gcry_free(HEAP32[r10]);
    __gcry_free(r13);
    r14 = 155;
    STACKTOP = r8;
    return r14;
  }
  r5 = r11 - 1 | 0;
  r11 = __gcry_malloc_secure(r5);
  if ((r11 | 0) == 0) {
    r9 = _gpg_err_code_from_syserror();
    __gcry_free(HEAP32[r10]);
    __gcry_free(r13);
    r14 = r9;
    STACKTOP = r8;
    return r14;
  }
  r9 = r11 + r12 | 0;
  r7 = HEAP32[r10];
  r3 = r12 + 1 | 0;
  r6 = r5 - r12 | 0;
  r15 = (_mgf1(r11, r12, r7 + r3 | 0, r6, r4) | 0) != 0 & 1;
  L1831 : do {
    if ((r12 | 0) != 0) {
      r16 = 0;
      while (1) {
        r17 = r16 + 1 | 0;
        r18 = r11 + r16 | 0;
        HEAP8[r18] = HEAP8[r18] ^ HEAP8[r7 + r17 | 0];
        if ((r17 | 0) == (r12 | 0)) {
          break L1831;
        } else {
          r16 = r17;
        }
      }
    }
  } while (0);
  r16 = (_mgf1(r9, r6, r11, r12, r4) | 0) == 0 ? r15 : 1;
  L1835 : do {
    if ((r5 | 0) != (r12 | 0)) {
      r15 = 0;
      while (1) {
        r4 = r11 + r15 + r12 | 0;
        HEAP8[r4] = HEAP8[r4] ^ HEAP8[r7 + r15 + r3 | 0];
        r4 = r15 + 1 | 0;
        if (r4 >>> 0 < r6 >>> 0) {
          r15 = r4;
        } else {
          break L1835;
        }
      }
    }
  } while (0);
  r3 = _memcmp(r13, r9, r12);
  r9 = r12;
  while (1) {
    if (r9 >>> 0 >= r6 >>> 0) {
      break;
    }
    if (HEAP8[r11 + r9 + r12 | 0] << 24 >> 24 == 1) {
      break;
    } else {
      r9 = r9 + 1 | 0;
    }
  }
  r7 = HEAP8[HEAP32[r10]] << 24 >> 24 == 0;
  __gcry_free(r13);
  __gcry_free(HEAP32[r10]);
  if (!(r7 & ((r3 | r16 | 0) == 0 & (r9 | 0) != (r6 | 0)))) {
    __gcry_free(r11);
    r14 = 155;
    STACKTOP = r8;
    return r14;
  }
  r16 = r9 + 1 | 0;
  r9 = r6 - r16 | 0;
  _memmove(r11, r11 + r16 + r12 | 0, r9, 1, 0);
  HEAP32[r1 >> 2] = r11;
  HEAP32[r2 >> 2] = r9;
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    r14 = 0;
    STACKTOP = r8;
    return r14;
  }
  __gcry_log_printhex(473032, HEAP32[r1 >> 2], r9);
  r14 = 0;
  STACKTOP = r8;
  return r14;
}
function _pubkey_sign(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = STACKTOP;
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(473752, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
      L1855 : do {
        if ((_pubkey_get_nskey(r1) | 0) > 0) {
          r6 = 0;
          while (1) {
            __gcry_log_mpidump(473712, HEAP32[r4 + (r6 << 2) >> 2]);
            r7 = r6 + 1 | 0;
            if ((r7 | 0) < (_pubkey_get_nskey(r1) | 0)) {
              r6 = r7;
            } else {
              break L1855;
            }
          }
        }
      } while (0);
      __gcry_log_mpidump(473492, r3);
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  r6 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r6 | 0) == 0) {
    __gcry_ath_mutex_unlock(440016);
    r8 = 4;
    STACKTOP = r5;
    return r8;
  }
  r7 = FUNCTION_TABLE[HEAP32[HEAP32[r6 + 8 >> 2] + 48 >> 2]](r1, r2, r3, r4);
  __gcry_module_release(r6);
  __gcry_ath_mutex_unlock(440016);
  if ((r7 | 0) != 0) {
    r8 = r7;
    STACKTOP = r5;
    return r8;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    r8 = r7;
    STACKTOP = r5;
    return r8;
  }
  if ((_pubkey_get_nsig(r1) | 0) > 0) {
    r9 = 0;
  } else {
    r8 = r7;
    STACKTOP = r5;
    return r8;
  }
  while (1) {
    __gcry_log_mpidump(473340, HEAP32[r2 + (r9 << 2) >> 2]);
    r6 = r9 + 1 | 0;
    if ((r6 | 0) < (_pubkey_get_nsig(r1) | 0)) {
      r9 = r6;
    } else {
      r8 = r7;
      break;
    }
  }
  STACKTOP = r5;
  return r8;
}
function __gcry_pk_verify(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  r9 = r4 + 8, r10 = r9 >> 2;
  r11 = r4 + 12, r12 = r11 >> 2;
  r13 = r4 + 16, r14 = r13 >> 2;
  r15 = r4 + 20;
  HEAP32[r6] = 0;
  HEAP32[r8] = 0;
  HEAP32[r10] = 0;
  HEAP32[r12] = 0;
  HEAP32[r14] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r16 = _sexp_to_key(r3, 0, 0, r9, r5);
  do {
    if ((r16 | 0) == 0) {
      r5 = _sexp_to_sig(r1, r13, r7);
      if ((r5 | 0) != 0) {
        r17 = r5;
        break;
      }
      if ((HEAP32[HEAP32[r6] + 24 >> 2] | 0) != (HEAP32[HEAP32[r8] + 24 >> 2] | 0)) {
        r17 = 70;
        break;
      }
      _init_encoding_ctx(r15, 3, __gcry_pk_get_nbits(r3));
      r5 = _sexp_data_to_mpi(r2, r11, r15);
      if ((r5 | 0) != 0) {
        r17 = r5;
        break;
      }
      r17 = _pubkey_verify(HEAP32[HEAP32[r6] + 24 >> 2], HEAP32[r12], HEAP32[r14], HEAP32[r10], HEAP32[r15 + 32 >> 2], r15);
    } else {
      r17 = r16;
    }
  } while (0);
  r16 = HEAP32[r10];
  if ((r16 | 0) != 0) {
    _release_mpi_array(r16);
    __gcry_free(HEAP32[r10]);
  }
  r10 = HEAP32[r14];
  if ((r10 | 0) != 0) {
    _release_mpi_array(r10);
    __gcry_free(HEAP32[r14]);
  }
  r14 = HEAP32[r12];
  if ((r14 | 0) != 0) {
    __gcry_mpi_free(r14);
  }
  do {
    if ((HEAP32[r6] | 0) == 0) {
      if ((HEAP32[r8] | 0) != 0) {
        break;
      }
      r18 = _gcry_error664(r17);
      STACKTOP = r4;
      return r18;
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  r14 = HEAP32[r6];
  if ((r14 | 0) != 0) {
    __gcry_module_release(r14);
  }
  r14 = HEAP32[r8];
  if ((r14 | 0) != 0) {
    __gcry_module_release(r14);
  }
  __gcry_ath_mutex_unlock(440016);
  r18 = _gcry_error664(r17);
  STACKTOP = r4;
  return r18;
}
function _sexp_to_sig(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  r5 = __gcry_sexp_find_token(r1, 475340, 0);
  if ((r5 | 0) == 0) {
    r6 = 65;
    return r6;
  }
  r1 = __gcry_sexp_nth(r5, 1);
  if ((r1 | 0) == 0) {
    __gcry_sexp_release(r5);
    r6 = 68;
    return r6;
  }
  r7 = __gcry_sexp_nth_string(r1, 0);
  if ((r7 | 0) == 0) {
    __gcry_sexp_release(r5);
    __gcry_sexp_release(r1);
    r6 = 65;
    return r6;
  }
  do {
    if ((_strcmp(r7, 475064) | 0) == 0) {
      __gcry_free(r7);
      __gcry_sexp_release(r1);
      r8 = __gcry_sexp_nth(r5, 2);
      if ((r8 | 0) != 0) {
        r9 = r8;
        r10 = __gcry_sexp_nth_string(r8, 0);
        break;
      }
      __gcry_sexp_release(r5);
      r6 = 65;
      return r6;
    } else {
      r9 = r1;
      r10 = r7;
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  r7 = _gcry_pk_lookup_name(r10);
  __gcry_ath_mutex_unlock(440016);
  __gcry_free(r10);
  if ((r7 | 0) == 0) {
    __gcry_sexp_release(r9);
    __gcry_sexp_release(r5);
    r6 = 4;
    return r6;
  }
  r10 = HEAP32[HEAP32[r7 + 8 >> 2] + 20 >> 2];
  r1 = __gcry_calloc(_strlen(r10) + 1 | 0, 4);
  r8 = r1;
  do {
    if ((r1 | 0) == 0) {
      r11 = _gpg_err_code_from_syserror();
      if ((r11 | 0) == 0) {
        r4 = 1441;
        break;
      } else {
        r12 = r11;
        break;
      }
    } else {
      r4 = 1441;
    }
  } while (0);
  if (r4 == 1441) {
    r12 = _sexp_elements_extract(r5, r10, r8, 0);
  }
  __gcry_sexp_release(r9);
  __gcry_sexp_release(r5);
  if ((r12 | 0) == 0) {
    HEAP32[r2 >> 2] = r8;
    HEAP32[r3 >> 2] = r7;
    r6 = 0;
    return r6;
  } else {
    __gcry_ath_mutex_lock(440016);
    __gcry_module_release(r7);
    __gcry_ath_mutex_unlock(440016);
    __gcry_free(r1);
    r6 = r12;
    return r6;
  }
}
function _pubkey_verify(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11;
  r7 = STACKTOP;
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(476296, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
      L1945 : do {
        if ((_pubkey_get_npkey(r1) | 0) > 0) {
          r8 = 0;
          while (1) {
            __gcry_log_mpidump(476056, HEAP32[r4 + (r8 << 2) >> 2]);
            r9 = r8 + 1 | 0;
            if ((r9 | 0) < (_pubkey_get_npkey(r1) | 0)) {
              r8 = r9;
            } else {
              break L1945;
            }
          }
        }
      } while (0);
      L1949 : do {
        if ((_pubkey_get_nsig(r1) | 0) > 0) {
          r8 = 0;
          while (1) {
            __gcry_log_mpidump(475764, HEAP32[r3 + (r8 << 2) >> 2]);
            r9 = r8 + 1 | 0;
            if ((r9 | 0) < (_pubkey_get_nsig(r1) | 0)) {
              r8 = r9;
            } else {
              break L1949;
            }
          }
        }
      } while (0);
      __gcry_log_mpidump(475480, r2);
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  r8 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r8 | 0) == 0) {
    r10 = 4;
    r11 = __gcry_ath_mutex_unlock(440016);
    STACKTOP = r7;
    return r10;
  }
  r9 = FUNCTION_TABLE[HEAP32[HEAP32[r8 + 8 >> 2] + 52 >> 2]](r1, r2, r3, r4, r5, r6);
  __gcry_module_release(r8);
  r10 = r9;
  r11 = __gcry_ath_mutex_unlock(440016);
  STACKTOP = r7;
  return r10;
}
function __gcry_pk_testkey(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r3 = r2;
  r4 = r2 + 4, r5 = r4 >> 2;
  HEAP32[r3 >> 2] = 0;
  HEAP32[r5] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r6 = _sexp_to_key(r1, 1, 0, r4, r3);
  if ((r6 | 0) != 0) {
    r7 = r6;
    r8 = _gcry_error664(r7);
    STACKTOP = r2;
    return r8;
  }
  r6 = _pubkey_check_secret_key(HEAP32[HEAP32[r3 >> 2] + 24 >> 2], HEAP32[r5]);
  _release_mpi_array(HEAP32[r5]);
  __gcry_free(HEAP32[r5]);
  r7 = r6;
  r8 = _gcry_error664(r7);
  STACKTOP = r2;
  return r8;
}
function _pubkey_check_secret_key(r1, r2) {
  var r3, r4, r5, r6;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r3 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r3 | 0) == 0) {
    r4 = 4;
    r5 = __gcry_ath_mutex_unlock(440016);
    return r4;
  }
  r6 = FUNCTION_TABLE[HEAP32[HEAP32[r3 + 8 >> 2] + 36 >> 2]](r1, r2);
  __gcry_module_release(r3);
  r4 = r6;
  r5 = __gcry_ath_mutex_unlock(440016);
  return r4;
}
function __gcry_pk_sign(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4, r9 = r8 >> 2;
  r10 = r5 + 8, r11 = r10 >> 2;
  r12 = r5 + 12;
  r13 = r5 + 52;
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  HEAP32[r11] = 0;
  HEAP32[r1 >> 2] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r14 = _sexp_to_key(r3, 1, 0, r6, r10);
  do {
    if ((r14 | 0) == 0) {
      r10 = HEAP32[r11];
      if ((r10 | 0) == 0) {
        __gcry_assert_failed(485028, 478868, 3162, 495608);
      }
      r6 = HEAP32[r10 + 8 >> 2] >> 2;
      r10 = HEAP32[r6 + 1];
      do {
        if ((r10 | 0) == 0) {
          r4 = 1487;
        } else {
          r15 = HEAP32[r10 >> 2];
          if ((r15 | 0) == 0) {
            r4 = 1487;
            break;
          }
          if (HEAP8[r15] << 24 >> 24 == 0) {
            r4 = 1487;
            break;
          } else {
            r16 = r15;
            break;
          }
        }
      } while (0);
      if (r4 == 1487) {
        r16 = HEAP32[r6];
      }
      r10 = HEAP32[r6 + 5];
      _init_encoding_ctx(r12, 2, __gcry_pk_get_nbits(r3));
      r15 = _sexp_data_to_mpi(r2, r8, r12);
      if ((r15 | 0) != 0) {
        r17 = 0;
        r18 = r15;
        break;
      }
      r15 = __gcry_calloc(_strlen(r10) + 1 | 0, 4);
      r19 = r15;
      if ((r15 | 0) == 0) {
        r17 = r19;
        r18 = _gpg_err_code_from_syserror();
        break;
      }
      r15 = _pubkey_sign(HEAP32[HEAP32[r11] + 24 >> 2], r19, HEAP32[r9], HEAP32[r7]);
      if ((r15 | 0) != 0) {
        r17 = r19;
        r18 = r15;
        break;
      }
      r15 = HEAP32[r12 + 8 >> 2];
      if ((r15 | 0) == 3 | (r15 | 0) == 1) {
        r15 = (HEAP32[r12 + 4 >> 2] + 7 | 0) >>> 3;
        r20 = _octet_string_from_mpi(r13, 0, HEAP32[r19 >> 2], r15);
        if ((r20 | 0) != 0) {
          r17 = r19;
          r18 = r20;
          break;
        }
        r20 = HEAP32[r13 >> 2];
        r21 = _gcry_err_code663(__gcry_sexp_build(r1, 0, 490480, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r16, HEAP32[tempInt + 4 >> 2] = r15, HEAP32[tempInt + 8 >> 2] = r20, tempInt)));
        __gcry_free(HEAP32[r13 >> 2]);
        r17 = r19;
        r18 = r21;
        break;
      }
      r21 = _strlen(r16) + 20 | 0;
      r20 = _strlen(r10);
      r15 = __gcry_malloc(r21 + (r20 * 10 & -1) | 0);
      if ((r15 | 0) == 0) {
        r17 = r19;
        r18 = _gpg_err_code_from_syserror();
        break;
      }
      _memcpy(r15, 488880, 10);
      r21 = _stpcpy(r15 + 9 | 0, r16);
      L2001 : do {
        if (HEAP8[r10] << 24 >> 24 == 0) {
          r22 = r21;
        } else {
          r23 = 0;
          r24 = r21;
          r25 = r10;
          while (1) {
            HEAP8[r24] = 40;
            HEAP8[r24 + 1 | 0] = HEAP8[r25];
            r26 = r24 + 5 | 0;
            r27 = r24 + 2 | 0;
            tempBigInt = 2706725;
            HEAP8[r27] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r27 + 1 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r27 + 2 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r27 + 3 | 0] = tempBigInt & 255;
            r27 = r23 + 1 | 0;
            r28 = r10 + r27 | 0;
            if (HEAP8[r28] << 24 >> 24 == 0) {
              r22 = r26;
              break L2001;
            } else {
              r23 = r27;
              r24 = r26;
              r25 = r28;
            }
          }
        }
      } while (0);
      HEAP8[r22] = HEAP8[470288];
      HEAP8[r22 + 1 | 0] = HEAP8[470289 | 0];
      HEAP8[r22 + 2 | 0] = HEAP8[470290 | 0];
      r10 = _malloc(r20 << 2);
      r21 = r10;
      if ((r10 | 0) == 0) {
        r17 = r19;
        r18 = _gpg_err_code_from_syserror();
        break;
      }
      L2008 : do {
        if ((r20 | 0) != 0) {
          r6 = 0;
          while (1) {
            HEAP32[r21 + (r6 << 2) >> 2] = (r6 << 2) + r19 | 0;
            r25 = r6 + 1 | 0;
            if ((r25 | 0) == (r20 | 0)) {
              break L2008;
            } else {
              r6 = r25;
            }
          }
        }
      } while (0);
      r20 = __gcry_sexp_build_array(r1, 0, r15, r21);
      _free(r10);
      if ((r20 | 0) == 0) {
        __gcry_free(r15);
        r17 = r19;
        r18 = 0;
        break;
      } else {
        __gcry_bug(478868, 3249, 495608);
      }
    } else {
      r17 = 0;
      r18 = r14;
    }
  } while (0);
  r14 = HEAP32[r7];
  if ((r14 | 0) != 0) {
    _release_mpi_array(r14);
    __gcry_free(HEAP32[r7]);
  }
  r7 = HEAP32[r9];
  if ((r7 | 0) != 0) {
    __gcry_mpi_free(r7);
  }
  if ((r17 | 0) == 0) {
    r29 = _gcry_error664(r18);
    STACKTOP = r5;
    return r29;
  }
  _release_mpi_array(r17);
  __gcry_free(r17);
  r29 = _gcry_error664(r18);
  STACKTOP = r5;
  return r29;
}
function _pubkey_generate(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14;
  r8 = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r9 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r9 | 0) == 0) {
    r10 = 4;
    r11 = __gcry_ath_mutex_unlock(440016);
    return r10;
  }
  r12 = HEAP32[r9 + 12 >> 2];
  do {
    if ((r12 | 0) == 0) {
      r8 = 1521;
    } else {
      r13 = HEAP32[r12 + 4 >> 2];
      if ((r13 | 0) == 0) {
        r8 = 1521;
        break;
      }
      r14 = FUNCTION_TABLE[r13](r1, r2, r3, r4, r5, r6, r7);
      break;
    }
  } while (0);
  if (r8 == 1521) {
    r14 = FUNCTION_TABLE[HEAP32[HEAP32[r9 + 8 >> 2] + 32 >> 2]](r1, r2, r3, r5, r6);
  }
  __gcry_module_release(r9);
  r10 = r14;
  r11 = __gcry_ath_mutex_unlock(440016);
  return r10;
}
function __gcry_pk_get_keygrip(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4;
  r8 = r4 + 8;
  HEAP32[r6] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r9 = __gcry_sexp_find_token(r1, 479908, 0);
  do {
    if ((r9 | 0) == 0) {
      r10 = __gcry_sexp_find_token(r1, 479304, 0);
      if ((r10 | 0) != 0) {
        r11 = r10;
        break;
      }
      r10 = __gcry_sexp_find_token(r1, 479032, 0);
      if ((r10 | 0) != 0) {
        r11 = r10;
        break;
      }
      r10 = __gcry_sexp_find_token(r1, 478672, 0);
      if ((r10 | 0) == 0) {
        r12 = 0;
      } else {
        r11 = r10;
        break;
      }
      STACKTOP = r4;
      return r12;
    } else {
      r11 = r9;
    }
  } while (0);
  r9 = __gcry_sexp_cadr(r11);
  __gcry_sexp_release(r11);
  r11 = __gcry_sexp_nth_string(r9, 0);
  L2050 : do {
    if ((r11 | 0) == 0) {
      r13 = 0;
      r14 = 0;
    } else {
      __gcry_ath_mutex_lock(440016);
      r1 = _gcry_pk_lookup_name(r11);
      __gcry_ath_mutex_unlock(440016);
      if ((r1 | 0) == 0) {
        r13 = 0;
        r14 = 0;
        break;
      }
      r10 = HEAP32[r1 + 12 >> 2];
      r15 = HEAP32[HEAP32[r1 + 8 >> 2] + 24 >> 2];
      if ((r15 | 0) == 0) {
        r13 = 0;
        r14 = 0;
        break;
      }
      if ((__gcry_md_open(r5, 2, 0) | 0) != 0) {
        r13 = 0;
        r14 = 0;
        break;
      }
      do {
        if ((r10 | 0) == 0) {
          r3 = 1537;
        } else {
          r1 = HEAP32[r10 + 8 >> 2];
          if ((r1 | 0) == 0) {
            r3 = 1537;
            break;
          }
          if ((FUNCTION_TABLE[r1](HEAP32[r6], r9) | 0) == 0) {
            break;
          } else {
            r13 = 0;
            r14 = 0;
            break L2050;
          }
        }
      } while (0);
      L2058 : do {
        if (r3 == 1537) {
          if (HEAP8[r15] << 24 >> 24 == 0) {
            break;
          }
          r10 = r8 | 0;
          r1 = r15;
          while (1) {
            r16 = __gcry_sexp_find_token(r9, r1, 1);
            if ((r16 | 0) == 0) {
              r13 = 0;
              r14 = 0;
              break L2050;
            }
            r17 = __gcry_sexp_nth_data(r16, 1, r7);
            if ((r17 | 0) == 0) {
              r13 = 0;
              r14 = r16;
              break L2050;
            }
            r18 = HEAP32[r7 >> 2];
            _snprintf(r10, 30, 478360, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP8[r1] << 24 >> 24, HEAP32[tempInt + 4 >> 2] = r18, tempInt));
            __gcry_md_write(HEAP32[r6], r10, _strlen(r10));
            __gcry_md_write(HEAP32[r6], r17, HEAP32[r7 >> 2]);
            __gcry_sexp_release(r16);
            __gcry_md_write(HEAP32[r6], 480636, 1);
            r16 = r1 + 1 | 0;
            if (HEAP8[r16] << 24 >> 24 == 0) {
              break L2058;
            } else {
              r1 = r16;
            }
          }
        }
      } while (0);
      if ((r2 | 0) == 0) {
        r15 = __gcry_malloc(20);
        if ((r15 | 0) == 0) {
          r13 = 0;
          r14 = 0;
          break;
        } else {
          r19 = r15;
        }
      } else {
        r19 = r2;
      }
      _memcpy(r19, __gcry_md_read(HEAP32[r6], 2), 20);
      r13 = r19;
      r14 = 0;
    }
  } while (0);
  __gcry_free(r11);
  __gcry_sexp_release(r14);
  __gcry_md_close(HEAP32[r6]);
  __gcry_sexp_release(r9);
  r12 = r13;
  STACKTOP = r4;
  return r12;
}
function __gcry_pk_get_curve(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 4, r9 = r8 >> 2;
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  if ((r3 | 0) != 0) {
    HEAP32[r3 >> 2] = 0;
  }
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  do {
    if ((r1 | 0) == 0) {
      __gcry_ath_mutex_lock(440016);
      HEAP32[r9] = _gcry_pk_lookup_name(477708);
      __gcry_ath_mutex_unlock(440016);
      if ((HEAP32[r9] | 0) == 0) {
        r10 = 0;
        r11 = 0;
        r12 = 0;
        break;
      } else {
        r13 = 0;
        r14 = r2;
        r15 = 0;
        r4 = 1561;
        break;
      }
    } else {
      r16 = __gcry_sexp_find_token(r1, 479908, 0);
      r17 = (r16 | 0) != 0;
      r18 = r17 & 1 ^ 1;
      do {
        if (r17) {
          r19 = r16;
        } else {
          r20 = __gcry_sexp_find_token(r1, 479304, 0);
          if ((r20 | 0) == 0) {
            r21 = 0;
          } else {
            r19 = r20;
            break;
          }
          STACKTOP = r5;
          return r21;
        }
      } while (0);
      r16 = __gcry_sexp_cadr(r19);
      __gcry_sexp_release(r19);
      r17 = __gcry_sexp_nth_string(r16, 0);
      if ((r17 | 0) == 0) {
        r10 = 0;
        r11 = 0;
        r12 = r16;
        break;
      }
      if ((_sexp_to_key(r1, r18, 478028, r6, r8) | 0) == 0) {
        r13 = r17;
        r14 = 0;
        r15 = r16;
        r4 = 1561;
        break;
      } else {
        r10 = 0;
        r11 = r17;
        r12 = r16;
        break;
      }
    }
  } while (0);
  do {
    if (r4 == 1561) {
      r8 = HEAP32[HEAP32[r9] + 12 >> 2];
      if ((r8 | 0) == 0) {
        r10 = 0;
        r11 = r13;
        r12 = r15;
        break;
      }
      r6 = HEAP32[r8 + 16 >> 2];
      if ((r6 | 0) == 0) {
        r10 = 0;
        r11 = r13;
        r12 = r15;
        break;
      }
      r10 = FUNCTION_TABLE[r6](HEAP32[r7], r14, r3);
      r11 = r13;
      r12 = r15;
    }
  } while (0);
  r15 = HEAP32[r7];
  if ((r15 | 0) != 0) {
    _release_mpi_array(r15);
    __gcry_free(HEAP32[r7]);
  }
  if ((HEAP32[r9] | 0) != 0) {
    __gcry_ath_mutex_lock(440016);
    __gcry_module_release(HEAP32[r9]);
    __gcry_ath_mutex_unlock(440016);
  }
  __gcry_free(r11);
  __gcry_sexp_release(r12);
  r21 = r10;
  STACKTOP = r5;
  return r21;
}
function __gcry_pk_get_param(r1, r2) {
  var r3, r4, r5, r6;
  if ((r1 - 301 | 0) >>> 0 > 1) {
    r3 = 0;
    return r3;
  }
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r1 = _gcry_pk_lookup_name(477708);
  __gcry_ath_mutex_unlock(440016);
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = HEAP32[r1 + 12 >> 2];
  do {
    if ((r4 | 0) == 0) {
      r5 = 0;
    } else {
      r6 = HEAP32[r4 + 20 >> 2];
      if ((r6 | 0) == 0) {
        r5 = 0;
        break;
      }
      r5 = FUNCTION_TABLE[r6](r2);
    }
  } while (0);
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(r1);
  __gcry_ath_mutex_unlock(440016);
  r3 = r5;
  return r3;
}
function __gcry_pk_ctl(r1, r2, r3) {
  var r4;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  do {
    if ((r1 | 0) == 12) {
      if (!((r2 | 0) != 0 & (r3 | 0) == 4)) {
        r4 = 45;
        break;
      }
      _disable_pubkey_algo(HEAP32[r2 >> 2]);
      r4 = 0;
    } else {
      r4 = 61;
    }
  } while (0);
  return _gcry_error664(r4);
}
function _disable_pubkey_algo(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(440016);
  r2 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r2 | 0) == 0) {
    r3 = __gcry_ath_mutex_unlock(440016);
    return;
  }
  r1 = r2 + 16 | 0;
  r4 = HEAP32[r1 >> 2];
  if ((r4 & 1 | 0) == 0) {
    HEAP32[r1 >> 2] = r4 | 1;
  }
  __gcry_module_release(r2);
  r3 = __gcry_ath_mutex_unlock(440016);
  return;
}
function __gcry_pk_genkey(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 284 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  r9 = r4 + 52, r10 = r9 >> 2;
  r11 = r4 + 56, r12 = r11 >> 2;
  r13 = r4 + 60;
  r14 = r4 + 112;
  r15 = r4 + 164, r16 = r15 >> 2;
  HEAP32[r10] = 0;
  HEAP32[r12] = 0;
  r17 = r7 | 0;
  HEAP32[r17 >> 2] = 0;
  HEAP32[r1 >> 2] = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r7 = __gcry_sexp_find_token(r2, 487192, 0);
  do {
    if ((r7 | 0) == 0) {
      r18 = 0;
      r19 = 0;
      r20 = 0;
      r21 = 65;
    } else {
      r2 = __gcry_sexp_cadr(r7);
      __gcry_sexp_release(r7);
      if ((r2 | 0) == 0) {
        r18 = 0;
        r19 = 0;
        r20 = 0;
        r21 = 68;
        break;
      }
      r22 = __gcry_sexp_nth_string(r2, 0);
      if ((r22 | 0) == 0) {
        r18 = 0;
        r19 = r2;
        r20 = 0;
        r21 = 65;
        break;
      }
      __gcry_ath_mutex_lock(440016);
      r23 = _gcry_pk_lookup_name(r22);
      __gcry_ath_mutex_unlock(440016);
      __gcry_free(r22);
      if ((r23 | 0) == 0) {
        r18 = 0;
        r19 = r2;
        r20 = 0;
        r21 = 4;
        break;
      }
      r22 = HEAP32[r23 + 8 >> 2] >> 2;
      r24 = r23 + 24 | 0;
      r25 = HEAP32[r24 >> 2];
      r26 = HEAP32[r22 + 1];
      do {
        if ((r26 | 0) == 0) {
          r3 = 1606;
        } else {
          r27 = HEAP32[r26 >> 2];
          if ((r27 | 0) == 0) {
            r3 = 1606;
            break;
          }
          if (HEAP8[r27] << 24 >> 24 == 0) {
            r3 = 1606;
            break;
          } else {
            r28 = r27;
            break;
          }
        }
      } while (0);
      if (r3 == 1606) {
        r28 = HEAP32[r22];
      }
      r26 = HEAP32[r22 + 2];
      r27 = HEAP32[r22 + 3];
      if (_strlen(r27) >>> 0 > 11) {
        __gcry_bug(478868, 3476, 495624);
      }
      r29 = __gcry_sexp_find_token(r2, 486308, 0);
      if ((r29 | 0) == 0) {
        r30 = 65537;
      } else {
        r31 = __gcry_sexp_nth_data(r29, 1, r5);
        if ((r31 | 0) == 0) {
          r18 = r23;
          r19 = r2;
          r20 = r29;
          r21 = 65;
          break;
        }
        r32 = HEAP32[r6];
        if (r32 >>> 0 > 48) {
          r18 = r23;
          r19 = r2;
          r20 = r29;
          r21 = 65;
          break;
        }
        r33 = r13 | 0;
        _memcpy(r33, r31, r32);
        HEAP8[r13 + HEAP32[r6] | 0] = 0;
        r32 = _strtoul(r33, 0, 0);
        __gcry_sexp_release(r29);
        r30 = r32;
      }
      r32 = __gcry_sexp_find_token(r2, 485408, 0);
      if ((r32 | 0) == 0) {
        r34 = 0;
      } else {
        r29 = __gcry_sexp_nth_data(r32, 1, r5);
        if ((r29 | 0) == 0) {
          r18 = r23;
          r19 = r2;
          r20 = r32;
          r21 = 65;
          break;
        }
        r33 = HEAP32[r6];
        if (r33 >>> 0 > 48) {
          r18 = r23;
          r19 = r2;
          r20 = r32;
          r21 = 65;
          break;
        }
        r31 = r14 | 0;
        _memcpy(r31, r29, r33);
        HEAP8[r14 + HEAP32[r6] | 0] = 0;
        r33 = _strtoul(r31, 0, 0);
        __gcry_sexp_release(r32);
        r34 = r33;
      }
      r33 = _pubkey_generate(HEAP32[r24 >> 2], r34, r30, r2, r17, r9, r11);
      __gcry_sexp_release(r2);
      if ((r33 | 0) != 0) {
        r18 = r23;
        r19 = 0;
        r20 = 0;
        r21 = r33;
        break;
      }
      r33 = _strlen(r26) + _strlen(r27) | 0;
      L2158 : do {
        if ((HEAP32[r10] | 0) == 0) {
          r35 = r33;
        } else {
          if ((HEAP32[HEAP32[r10] >> 2] | 0) == 0) {
            r35 = r33;
            break;
          }
          r32 = HEAP32[r10];
          r31 = 0;
          r29 = r33;
          while (1) {
            r36 = r29 + 1 | 0;
            r37 = r31 + 1 | 0;
            if ((HEAP32[r32 + (r37 << 2) >> 2] | 0) == 0) {
              r35 = r36;
              break L2158;
            } else {
              r31 = r37;
              r29 = r36;
            }
          }
        }
      } while (0);
      r33 = (_strlen(r28) << 1) + (r35 * 10 & -1) + 305 | 0;
      if (r35 >>> 0 > 30) {
        __gcry_bug(478868, 3551, 495624);
      }
      r2 = __gcry_malloc(r33);
      if ((r2 | 0) == 0) {
        r18 = r23;
        r19 = 0;
        r20 = 0;
        r21 = _gpg_err_code_from_syserror();
        break;
      }
      _memcpy(r2, 484488, 9);
      _memcpy(r2 + 9 | 0, 483896, 13);
      r24 = _stpcpy(r2 + 21 | 0, r28);
      L2170 : do {
        if (HEAP8[r26] << 24 >> 24 == 0) {
          r38 = r24;
          r39 = 0;
        } else {
          r22 = r24;
          r29 = 0;
          r31 = r26;
          while (1) {
            HEAP8[r22] = 40;
            HEAP8[r22 + 1 | 0] = HEAP8[r31];
            r32 = r22 + 5 | 0;
            r36 = r22 + 2 | 0;
            tempBigInt = 2714917;
            HEAP8[r36] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r36 + 1 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r36 + 2 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r36 + 3 | 0] = tempBigInt & 255;
            r36 = r29 + 1 | 0;
            HEAP32[(r29 << 2 >> 2) + r16] = HEAP32[(r29 << 2 >> 2) + r8];
            r37 = r26 + r36 | 0;
            if (HEAP8[r37] << 24 >> 24 == 0) {
              r38 = r32;
              r39 = r36;
              break L2170;
            } else {
              r22 = r32;
              r29 = r36;
              r31 = r37;
            }
          }
        }
      } while (0);
      do {
        if ((HEAP32[r12] | 0) == 0) {
          r40 = -1;
          r41 = r38;
        } else {
          if ((r25 - 301 | 0) >>> 0 >= 2) {
            r40 = -1;
            r41 = r38;
            break;
          }
          HEAP8[r38] = HEAP8[482972];
          HEAP8[r38 + 1 | 0] = HEAP8[482973 | 0];
          HEAP8[r38 + 2 | 0] = HEAP8[482974 | 0];
          r40 = r39;
          r41 = r38 + 2 | 0;
        }
      } while (0);
      HEAP8[r41] = HEAP8[470288];
      HEAP8[r41 + 1 | 0] = HEAP8[470289 | 0];
      HEAP8[r41 + 2 | 0] = HEAP8[470290 | 0];
      _memcpy(r41 + 2 | 0, 482264, 14);
      r25 = _stpcpy(r41 + 15 | 0, r28);
      L2178 : do {
        if (HEAP8[r27] << 24 >> 24 == 0) {
          r42 = 0;
          r43 = r25;
          r44 = r39;
        } else {
          r24 = 0;
          r31 = r25;
          r29 = r39;
          r22 = r27;
          while (1) {
            HEAP8[r31] = 40;
            HEAP8[r31 + 1 | 0] = HEAP8[r22];
            r37 = r31 + 5 | 0;
            r36 = r31 + 2 | 0;
            tempBigInt = 2714917;
            HEAP8[r36] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r36 + 1 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r36 + 2 | 0] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r36 + 3 | 0] = tempBigInt & 255;
            r36 = r29 + 1 | 0;
            HEAP32[(r29 << 2 >> 2) + r16] = HEAP32[(r24 << 2 >> 2) + r8];
            r32 = r24 + 1 | 0;
            r45 = r27 + r32 | 0;
            if (HEAP8[r45] << 24 >> 24 == 0) {
              r42 = r32;
              r43 = r37;
              r44 = r36;
              break L2178;
            } else {
              r24 = r32;
              r31 = r37;
              r29 = r36;
              r22 = r45;
            }
          }
        }
      } while (0);
      r25 = r43 + 2 | 0;
      HEAP8[r43] = HEAP8[470288];
      HEAP8[r43 + 1 | 0] = HEAP8[470289 | 0];
      HEAP8[r43 + 2 | 0] = HEAP8[470290 | 0];
      HEAP32[(r42 << 2 >> 2) + r8] = 0;
      r22 = (r40 | 0) == -1;
      do {
        if ((HEAP32[r12] | 0) != 0 & r22) {
          HEAP8[r25] = HEAP8[482972];
          HEAP8[r25 + 1 | 0] = HEAP8[482973 | 0];
          HEAP8[r25 + 2 | 0] = HEAP8[482974 | 0];
          r46 = r44;
          r47 = r43 + 4 | 0;
        } else {
          r29 = HEAP32[r10];
          if ((r29 | 0) == 0) {
            r46 = r44;
            r47 = r25;
            break;
          }
          if ((HEAP32[r29 >> 2] | 0) == 0) {
            r46 = r44;
            r47 = r25;
            break;
          }
          r29 = r43 + 28 | 0;
          _memcpy(r25, 481752, 27);
          r31 = r43 + 30 | 0;
          L2186 : do {
            if ((HEAP32[HEAP32[r10] >> 2] | 0) == 0) {
              r48 = r29;
              r49 = r44;
              r50 = r31;
            } else {
              r24 = 0;
              r45 = r29;
              r36 = r44;
              r37 = r31;
              while (1) {
                HEAP8[r45] = HEAP8[465176];
                HEAP8[r45 + 1 | 0] = HEAP8[465177 | 0];
                HEAP8[r45 + 2 | 0] = HEAP8[465178 | 0];
                r32 = r36 + 1 | 0;
                HEAP32[(r36 << 2 >> 2) + r16] = HEAP32[HEAP32[r10] + (r24 << 2) >> 2];
                r51 = r24 + 1 | 0;
                r52 = r37 + 2 | 0;
                if ((HEAP32[HEAP32[r10] + (r51 << 2) >> 2] | 0) == 0) {
                  r48 = r37;
                  r49 = r32;
                  r50 = r52;
                  break L2186;
                } else {
                  r24 = r51;
                  r45 = r37;
                  r36 = r32;
                  r37 = r52;
                }
              }
            }
          } while (0);
          HEAP8[r48] = HEAP8[470288];
          HEAP8[r48 + 1 | 0] = HEAP8[470289 | 0];
          HEAP8[r48 + 2 | 0] = HEAP8[470290 | 0];
          r46 = r49;
          r47 = r50;
        }
      } while (0);
      r25 = r47;
      tempBigInt = 41;
      HEAP8[r25] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r25 + 1 | 0] = tempBigInt & 255;
      if ((r47 - r2 | 0) >>> 0 >= r33 >>> 0) {
        __gcry_assert_failed(480124, 478868, 3609, 495624);
      }
      if (r46 >>> 0 < 30) {
        _memset((r46 << 2) + r15 | 0, 0, 120 - (r46 << 2) | 0);
      }
      r25 = _strlen(r26);
      r31 = _strlen(r27);
      r29 = r31 + r25 | 0;
      r37 = __gcry_calloc(r35 + 1 | 0, 4);
      r36 = r37, r45 = r36 >> 2;
      if ((r37 | 0) == 0) {
        r18 = r23;
        r19 = 0;
        r20 = 0;
        r21 = _gpg_err_code_from_syserror();
        break;
      }
      L2201 : do {
        if ((r29 | 0) > 0) {
          r24 = r11;
          r52 = r31 + r25 | 0;
          r32 = 0;
          r51 = 0;
          while (1) {
            if ((r32 | 0) == (r40 | 0)) {
              HEAP32[(r51 << 2 >> 2) + r45] = r24;
              r53 = r51 + 1 | 0;
            } else {
              r53 = r51;
            }
            r54 = r53 + 1 | 0;
            HEAP32[(r53 << 2 >> 2) + r45] = (r32 << 2) + r15 | 0;
            r55 = r32 + 1 | 0;
            if ((r55 | 0) == (r52 | 0)) {
              r56 = r52;
              r57 = r54;
              break L2201;
            } else {
              r32 = r55;
              r51 = r54;
            }
          }
        } else {
          r56 = 0;
          r57 = 0;
        }
      } while (0);
      L2209 : do {
        if ((HEAP32[r12] | 0) != 0 & r22) {
          HEAP32[(r57 << 2 >> 2) + r45] = r11;
        } else {
          r25 = HEAP32[r10];
          if ((r25 | 0) == 0) {
            break;
          }
          if (!((HEAP32[r25 >> 2] | 0) != 0 & r56 >>> 0 < r35 >>> 0)) {
            break;
          }
          r25 = HEAP32[r10];
          r31 = r35 + r57 - r56 | 0;
          r27 = r56;
          r26 = r57;
          while (1) {
            r33 = r26 + 1 | 0;
            HEAP32[(r26 << 2 >> 2) + r45] = (r27 - r29 << 2) + r25 | 0;
            if ((r33 | 0) == (r31 | 0)) {
              break L2209;
            } else {
              r27 = r27 + 1 | 0;
              r26 = r33;
            }
          }
        }
      } while (0);
      r29 = __gcry_sexp_build_array(r1, 0, r2, r36);
      __gcry_free(r37);
      if ((r29 | 0) == 0) {
        __gcry_free(r2);
        r18 = r23;
        r19 = 0;
        r20 = 0;
        r21 = 0;
        break;
      } else {
        __gcry_bug(478868, 3641, 495624);
      }
    }
  } while (0);
  __gcry_free(0);
  __gcry_sexp_release(HEAP32[r12]);
  _release_mpi_array(r17);
  r17 = HEAP32[r10];
  if ((r17 | 0) != 0) {
    _release_mpi_array(r17);
    __gcry_free(HEAP32[r10]);
  }
  __gcry_sexp_release(0);
  __gcry_sexp_release(r20);
  __gcry_sexp_release(r19);
  if ((r18 | 0) == 0) {
    r58 = _gcry_error664(r21);
    STACKTOP = r4;
    return r58;
  }
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(r18);
  __gcry_ath_mutex_unlock(440016);
  r58 = _gcry_error664(r21);
  STACKTOP = r4;
  return r58;
}
function _gpg_err_code693(r1) {
  return r1 & 65535;
}
function _gpg_err_make695(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function __gcry_pk_algo_info(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = r4 >> 2;
  do {
    if ((r2 | 0) == 34) {
      __gcry_ath_mutex_lock(440016);
      if (!HEAP8[458216]) {
        _pk_register_default();
        HEAP8[458216] = 1;
      }
      __gcry_ath_mutex_unlock(440016);
      __gcry_ath_mutex_lock(440016);
      r6 = __gcry_module_lookup_id(HEAP32[110005], r1);
      if ((r6 | 0) == 0) {
        r7 = 0;
      } else {
        r8 = HEAP32[HEAP32[r6 + 8 >> 2] + 28 >> 2];
        __gcry_module_release(r6);
        r7 = r8;
      }
      __gcry_ath_mutex_unlock(440016);
      HEAP32[r5] = r7;
      r9 = 0;
    } else if ((r2 | 0) == 8) {
      if ((r4 | 0) == 0) {
        r10 = 0;
      } else {
        r10 = HEAP32[r5];
      }
      if ((r3 | 0) != 0) {
        r9 = 45;
        break;
      }
      r9 = (_check_pubkey_algo(r1, r10) | 0) == 0 ? 0 : 4;
    } else if ((r2 | 0) == 16) {
      HEAP32[r5] = _pubkey_get_nskey(r1);
      r9 = 0;
    } else if ((r2 | 0) == 18) {
      HEAP32[r5] = _pubkey_get_nenc(r1);
      r9 = 0;
    } else if ((r2 | 0) == 17) {
      HEAP32[r5] = _pubkey_get_nsig(r1);
      r9 = 0;
    } else if ((r2 | 0) == 15) {
      HEAP32[r5] = _pubkey_get_npkey(r1);
      r9 = 0;
    } else {
      r9 = 61;
    }
  } while (0);
  return _gcry_error664(r9);
}
function _check_pubkey_algo(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r4 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r4 | 0) == 0) {
    r5 = 4;
    r6 = __gcry_ath_mutex_unlock(440016);
    return r5;
  }
  r1 = HEAP32[r4 + 8 >> 2];
  do {
    if ((r2 & 1 | 0) == 0) {
      r3 = 1693;
    } else {
      if ((HEAP32[r1 + 28 >> 2] & 1 | 0) == 0) {
        r7 = 41;
        break;
      } else {
        r3 = 1693;
        break;
      }
    }
  } while (0);
  do {
    if (r3 == 1693) {
      if ((r2 & 2 | 0) != 0) {
        if ((HEAP32[r1 + 28 >> 2] & 2 | 0) == 0) {
          r7 = 41;
          break;
        }
      }
      r7 = HEAP32[r4 + 16 >> 2] << 2 & 4;
    }
  } while (0);
  __gcry_module_release(r4);
  r5 = r7;
  r6 = __gcry_ath_mutex_unlock(440016);
  return r5;
}
function _pubkey_get_npkey(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r2 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    r4 = __gcry_ath_mutex_unlock(440016);
    return r3;
  }
  r1 = _strlen(HEAP32[HEAP32[r2 + 8 >> 2] + 8 >> 2]);
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(440016);
  return r3;
}
function _pubkey_get_nskey(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r2 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    r4 = __gcry_ath_mutex_unlock(440016);
    return r3;
  }
  r1 = _strlen(HEAP32[HEAP32[r2 + 8 >> 2] + 12 >> 2]);
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(440016);
  return r3;
}
function _pubkey_get_nsig(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r2 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    r4 = __gcry_ath_mutex_unlock(440016);
    return r3;
  }
  r1 = _strlen(HEAP32[HEAP32[r2 + 8 >> 2] + 20 >> 2]);
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(440016);
  return r3;
}
function _pubkey_get_nenc(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r2 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    r4 = __gcry_ath_mutex_unlock(440016);
    return r3;
  }
  r1 = _strlen(HEAP32[HEAP32[r2 + 8 >> 2] + 16 >> 2]);
  __gcry_module_release(r2);
  r3 = r1;
  r4 = __gcry_ath_mutex_unlock(440016);
  return r3;
}
function __gcry_pk_init() {
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  return 0;
}
function __gcry_pk_module_lookup(r1, r2) {
  var r3, r4, r5;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r3 = __gcry_module_lookup_id(HEAP32[110005], r1);
  if ((r3 | 0) == 0) {
    r4 = 4;
    r5 = __gcry_ath_mutex_unlock(440016);
    return r4;
  }
  HEAP32[r2 >> 2] = r3;
  r4 = 0;
  r5 = __gcry_ath_mutex_unlock(440016);
  return r4;
}
function __gcry_pk_module_release(r1) {
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(r1);
  __gcry_ath_mutex_unlock(440016);
  return;
}
function __gcry_pk_list(r1, r2) {
  __gcry_ath_mutex_lock(440016);
  __gcry_module_list(HEAP32[110005], r1, r2);
  __gcry_ath_mutex_unlock(440016);
  return 0;
}
function __gcry_pk_selftest(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  __gcry_ath_mutex_lock(440016);
  r5 = __gcry_module_lookup_id(HEAP32[110005], r1), r6 = r5 >> 2;
  r7 = (r5 | 0) != 0;
  do {
    if (r7) {
      if ((HEAP32[r6 + 4] & 1 | 0) != 0) {
        r4 = 1744;
        break;
      }
      r8 = HEAP32[r6 + 3];
      __gcry_ath_mutex_unlock(440016);
      if ((r8 | 0) == 0) {
        r4 = 1748;
        break;
      }
      r9 = HEAP32[r8 >> 2];
      if ((r9 | 0) == 0) {
        r4 = 1748;
        break;
      }
      r10 = FUNCTION_TABLE[r9](r1, r2, r3);
      break;
    } else {
      r4 = 1744;
    }
  } while (0);
  do {
    if (r4 == 1744) {
      __gcry_ath_mutex_unlock(440016);
      r4 = 1748;
      break;
    }
  } while (0);
  do {
    if (r4 == 1748) {
      if ((r3 | 0) == 0) {
        r10 = 4;
        break;
      }
      do {
        if (r7) {
          if ((HEAP32[r6 + 4] & 1 | 0) == 0) {
            r11 = 476988;
            break;
          } else {
            r4 = 1751;
            break;
          }
        } else {
          r4 = 1751;
        }
      } while (0);
      if (r4 == 1751) {
        r11 = r7 ? 476716 : 476500;
      }
      FUNCTION_TABLE[r3](477552, r1, 485028, r11);
      r10 = 4;
    }
  } while (0);
  if (!r7) {
    r12 = _gpg_error650(r10);
    return r12;
  }
  __gcry_ath_mutex_lock(440016);
  __gcry_module_release(r5);
  __gcry_ath_mutex_unlock(440016);
  r12 = _gpg_error650(r10);
  return r12;
}
function __gcry_pk_get_elements(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = 0;
  __gcry_ath_mutex_lock(440016);
  if (!HEAP8[458216]) {
    _pk_register_default();
    HEAP8[458216] = 1;
  }
  __gcry_ath_mutex_unlock(440016);
  r5 = __gcry_module_lookup_id(HEAP32[110005], r1);
  do {
    if ((r5 | 0) == 0) {
      __gcry_module_release(r5);
      r6 = 63;
      r7 = 0;
    } else {
      r1 = HEAP32[r5 + 8 >> 2];
      r8 = (r2 | 0) != 0;
      do {
        if (r8) {
          r9 = _strdup(HEAP32[r1 + 16 >> 2]);
          if ((r9 | 0) != 0) {
            r10 = r9;
            r4 = 1765;
            break;
          }
          r11 = 0;
          r12 = _gpg_err_code_from_syserror();
          break;
        } else {
          r10 = 0;
          r4 = 1765;
        }
      } while (0);
      L2348 : do {
        if (r4 == 1765) {
          r9 = (r3 | 0) != 0;
          do {
            if (r9) {
              r13 = _strdup(HEAP32[r1 + 20 >> 2]);
              if ((r13 | 0) != 0) {
                r14 = r13;
                break;
              }
              r11 = r10;
              r12 = _gpg_err_code_from_syserror();
              break L2348;
            } else {
              r14 = 0;
            }
          } while (0);
          if (r8) {
            HEAP32[r2 >> 2] = r10;
          }
          if (r9) {
            HEAP32[r3 >> 2] = r14;
          }
          __gcry_module_release(r5);
          r15 = 0;
          return r15;
        }
      } while (0);
      __gcry_module_release(r5);
      if ((r12 | 0) == 0) {
        r15 = 0;
      } else {
        r6 = r12;
        r7 = r11;
        break;
      }
      return r15;
    }
  } while (0);
  _free(r7);
  _free(0);
  r15 = r6;
  return r15;
}
function _sexp_elements_extract(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r5 = r3 >> 2;
  if (HEAP8[r2] << 24 >> 24 == 0) {
    r6 = 0;
    return r6;
  } else {
    r7 = 0;
    r8 = r2;
    r9 = 0;
  }
  while (1) {
    r10 = __gcry_sexp_find_token(r1, r8, 1);
    if ((r10 | 0) == 0) {
      HEAP32[(r7 << 2 >> 2) + r5] = 0;
      r11 = r9;
    } else {
      r12 = (r7 << 2) + r3 | 0;
      HEAP32[r12 >> 2] = __gcry_sexp_nth_mpi(r10, 1, 5);
      __gcry_sexp_release(r10);
      r11 = (HEAP32[r12 >> 2] | 0) == 0 ? 65 : r9;
    }
    r12 = r8 + 1 | 0;
    r13 = r7 + 1 | 0;
    r14 = (r11 | 0) == 0;
    if (HEAP8[r12] << 24 >> 24 != 0 & r14) {
      r7 = r13;
      r8 = r12;
      r9 = r11;
    } else {
      break;
    }
  }
  L2376 : do {
    if (r14) {
      L2378 : do {
        if (HEAP8[r2] << 24 >> 24 == 0) {
          r15 = 0;
          r16 = 0;
        } else {
          r9 = 0;
          r8 = r2;
          while (1) {
            if ((HEAP32[(r9 << 2 >> 2) + r5] | 0) == 0) {
              break;
            }
            r7 = r8 + 1 | 0;
            r3 = r9 + 1 | 0;
            if (HEAP8[r7] << 24 >> 24 == 0) {
              r15 = r11;
              r16 = r3;
              break L2378;
            } else {
              r9 = r3;
              r8 = r7;
            }
          }
          if (HEAP8[r8] << 24 >> 24 == 0) {
            r15 = r11;
            r16 = r9;
            break;
          }
          if ((r4 | 0) == 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          if ((_strcmp(r4, 474760) | 0) != 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          if ((_strcmp(r2, 474532) | 0) != 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          if ((HEAP32[r5] | 0) == 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          if ((HEAP32[r5 + 1] | 0) == 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          if ((HEAP32[r5 + 2] | 0) == 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          if ((HEAP32[r5 + 3] | 0) != 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          if ((HEAP32[r5 + 4] | 0) != 0) {
            r17 = r9;
            r18 = 68;
            break L2376;
          }
          r15 = (HEAP32[r5 + 5] | 0) == 0 ? 0 : 68;
          r16 = r9;
        }
      } while (0);
      if ((r15 | 0) == 0) {
        r6 = 0;
      } else {
        r17 = r16;
        r18 = r15;
        break;
      }
      return r6;
    } else {
      r17 = r13;
      r18 = r11;
    }
  } while (0);
  if ((r17 | 0) > 0) {
    r19 = 0;
  } else {
    r6 = r18;
    return r6;
  }
  while (1) {
    r11 = HEAP32[(r19 << 2 >> 2) + r5];
    if ((r11 | 0) != 0) {
      __gcry_free(r11);
    }
    r11 = r19 + 1 | 0;
    if ((r11 | 0) == (r17 | 0)) {
      r6 = r18;
      break;
    } else {
      r19 = r11;
    }
  }
  return r6;
}
function _mgf1(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6;
  r8 = r6 + 4;
  r9 = __gcry_md_open(r7, r5, 0);
  if ((r9 | 0) != 0) {
    r10 = _gpg_err_code693(r9);
    STACKTOP = r6;
    return r10;
  }
  r9 = __gcry_md_get_algo_dlen(r5);
  L2408 : do {
    if ((r2 | 0) != 0) {
      r5 = r8 | 0;
      r11 = r8 + 1 | 0;
      r12 = r8 + 2 | 0;
      r13 = r8 + 3 | 0;
      r14 = HEAP32[r7 >> 2];
      r15 = 0;
      r16 = 0;
      while (1) {
        if ((r15 | 0) != 0) {
          __gcry_md_reset(r14);
        }
        HEAP8[r5] = r15 >>> 24 & 255;
        HEAP8[r11] = r15 >>> 16 & 255;
        HEAP8[r12] = r15 >>> 8 & 255;
        HEAP8[r13] = r15 & 255;
        __gcry_md_write(r14, r3, r4);
        __gcry_md_write(r14, r5, 4);
        r17 = r2 - r16 | 0;
        r18 = r17 >>> 0 < r9 >>> 0 ? r17 : r9;
        _memcpy(r1 + r16 | 0, __gcry_md_read(r14, 0), r18);
        r17 = r18 + r16 | 0;
        if (r17 >>> 0 < r2 >>> 0) {
          r15 = r15 + 1 | 0;
          r16 = r17;
        } else {
          break L2408;
        }
      }
    }
  } while (0);
  __gcry_md_close(HEAP32[r7 >> 2]);
  r10 = 0;
  STACKTOP = r6;
  return r10;
}
function _get_hash_algo(r1, r2) {
  var r3, r4, r5, r6;
  r3 = 0;
  r4 = 0;
  while (1) {
    r5 = HEAP32[(r4 << 3) + 455604 >> 2];
    if ((_strlen(r5) | 0) == (r2 | 0)) {
      if ((_memcmp(r5, r1, r2) | 0) == 0) {
        r3 = 1823;
        break;
      }
    }
    r5 = r4 + 1 | 0;
    if ((r5 | 0) == 12) {
      break;
    } else {
      r4 = r5;
    }
  }
  if (r3 == 1823) {
    r6 = HEAP32[(r4 << 3) + 455608 >> 2];
    return r6;
  }
  r4 = __gcry_malloc(r2 + 1 | 0);
  if ((r4 | 0) == 0) {
    r6 = 0;
    return r6;
  }
  _memcpy(r4, r1, r2);
  HEAP8[r4 + r2 | 0] = 0;
  r2 = __gcry_md_map_name(r4);
  __gcry_free(r4);
  r6 = r2;
  return r6;
}
function _gcry_err_make694(r1) {
  return _gpg_err_make695(32, r1);
}
function _pkcs1_encode_for_encryption(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r7 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8, r10 = r9 >> 2;
  r11 = (r2 + 7 | 0) >>> 3;
  HEAP32[r10] = r11;
  if (!((r4 + 7 | 0) >>> 0 <= r11 >>> 0 & (r11 | 0) != 0)) {
    r12 = 66;
    STACKTOP = r8;
    return r12;
  }
  r2 = __gcry_malloc_secure(r11);
  if ((r2 | 0) == 0) {
    r12 = _gpg_err_code_from_syserror();
    STACKTOP = r8;
    return r12;
  }
  HEAP8[r2] = 0;
  HEAP8[r2 + 1 | 0] = 2;
  r11 = -3 - r4 + HEAP32[r10] | 0;
  if ((r11 | 0) <= 0) {
    __gcry_assert_failed(467148, 478868, 893, 494556);
  }
  do {
    if ((r5 | 0) == 0) {
      r13 = __gcry_random_bytes_secure(r11, 1);
      r14 = (r11 | 0) < 1;
      r15 = 0;
      r16 = 0;
      while (1) {
        if ((r16 | 0) < (r11 | 0)) {
          r15 = (HEAP8[r13 + r16 | 0] << 24 >> 24 == 0 & 1) + r15 | 0;
          r16 = r16 + 1 | 0;
          continue;
        }
        if ((r15 | 0) == 0) {
          break;
        }
        r17 = r15 + ((r15 | 0) / 128 & -1) + 3 | 0;
        r18 = __gcry_random_bytes_secure(r17, 1);
        L2462 : do {
          if (!(r14 | (r17 | 0) == 0)) {
            r19 = 0;
            r20 = r17;
            while (1) {
              r21 = r13 + r19 | 0;
              if (HEAP8[r21] << 24 >> 24 == 0) {
                r22 = r20 - 1 | 0;
                HEAP8[r21] = HEAP8[r18 + r22 | 0];
                r23 = r22;
              } else {
                r23 = r20;
              }
              r22 = (HEAP8[r21] << 24 >> 24 != 0 & 1) + r19 | 0;
              if ((r22 | 0) >= (r11 | 0) | (r23 | 0) == 0) {
                break L2462;
              } else {
                r19 = r22;
                r20 = r23;
              }
            }
          }
        } while (0);
        __gcry_free(r18);
        r15 = 0;
        r16 = 0;
      }
      _memcpy(r2 + 2 | 0, r13, r11);
      __gcry_free(r13);
      r24 = r11;
    } else {
      if ((r11 | 0) == (r6 | 0)) {
        r25 = 0;
      } else {
        __gcry_free(r2);
        r12 = 45;
        STACKTOP = r8;
        return r12;
      }
      while (1) {
        if (r25 >>> 0 >= r6 >>> 0) {
          r7 = 1842;
          break;
        }
        if (HEAP8[r5 + r25 | 0] << 24 >> 24 == 0) {
          break;
        } else {
          r25 = r25 + 1 | 0;
        }
      }
      if (r7 == 1842) {
        _memcpy(r2 + 2 | 0, r5, r6);
        r24 = r6;
        break;
      }
      __gcry_free(r2);
      r12 = 45;
      STACKTOP = r8;
      return r12;
    }
  } while (0);
  r6 = r24 + 3 | 0;
  HEAP8[r24 + (r2 + 2) | 0] = 0;
  _memcpy(r2 + r6 | 0, r3, r4);
  r3 = r6 + r4 | 0;
  if ((r3 | 0) != (HEAP32[r10] | 0)) {
    __gcry_assert_failed(467520, 478868, 951, 494556);
  }
  r10 = __gcry_mpi_scan(r1, 5, r2, r3, r9);
  do {
    if ((r10 | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        r26 = 0;
        break;
      }
      __gcry_log_mpidump(466972, HEAP32[r1 >> 2]);
      r26 = 0;
    } else {
      r26 = _gcry_err_code663(r10);
    }
  } while (0);
  __gcry_free(r2);
  r12 = r26;
  STACKTOP = r8;
  return r12;
}
function _oaep_encode(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10, r11, r12, r13, r14, r15, r16, r17;
  r10 = (r2 + 7 | 0) >>> 3;
  HEAP32[r1 >> 2] = 0;
  r2 = (r6 | 0) == 0 | (r7 | 0) == 0;
  r11 = __gcry_md_get_algo_dlen(r3);
  if ((r10 - 2 - (r11 << 1) | 0) >>> 0 < r5 >>> 0 | (r10 | 0) == 0) {
    r12 = 66;
    return r12;
  }
  r13 = __gcry_calloc_secure(1, r10);
  if ((r13 | 0) == 0) {
    r12 = _gpg_err_code_from_syserror();
    return r12;
  }
  r14 = r13 + 1 | 0;
  r15 = r11 + 1 | 0;
  r16 = r13 + r15 | 0;
  __gcry_md_hash_buffer(r3, r16, r2 ? 473192 : r6, r2 ? 0 : r7);
  r7 = r10 - r5 | 0;
  HEAP8[r13 + (r7 - 1) | 0] = 1;
  _memcpy(r13 + r7 | 0, r4, r5);
  do {
    if ((r8 | 0) == 0) {
      __gcry_randomize(r14, r11, 1);
    } else {
      if ((r11 | 0) == (r9 | 0)) {
        _memcpy(r14, r8, r11);
        break;
      }
      __gcry_free(r13);
      r12 = 45;
      return r12;
    }
  } while (0);
  r8 = r10 - r11 - 1 | 0;
  r9 = __gcry_malloc_secure(r8);
  if ((r9 | 0) == 0) {
    r5 = _gpg_err_code_from_syserror();
    __gcry_free(r13);
    r12 = r5;
    return r12;
  }
  r5 = _mgf1(r9, r8, r14, r11, r3);
  if ((r5 | 0) != 0) {
    __gcry_free(r9);
    __gcry_free(r13);
    r12 = r5;
    return r12;
  }
  L2504 : do {
    if (r15 >>> 0 < r10 >>> 0) {
      r5 = r9;
      r14 = r15;
      while (1) {
        r4 = r13 + r14 | 0;
        HEAP8[r4] = HEAP8[r4] ^ HEAP8[r5];
        r4 = r14 + 1 | 0;
        if (r4 >>> 0 < r10 >>> 0) {
          r5 = r5 + 1 | 0;
          r14 = r4;
        } else {
          break L2504;
        }
      }
    }
  } while (0);
  __gcry_free(r9);
  r9 = __gcry_malloc_secure(r11);
  if ((r9 | 0) == 0) {
    r14 = _gpg_err_code_from_syserror();
    __gcry_free(r13);
    r12 = r14;
    return r12;
  }
  r14 = _mgf1(r9, r11, r16, r8, r3);
  if ((r14 | 0) != 0) {
    __gcry_free(r9);
    __gcry_free(r13);
    r12 = r14;
    return r12;
  }
  L2516 : do {
    if (r15 >>> 0 > 1) {
      r3 = r11 + 1 | 0;
      r8 = r9;
      r16 = 1;
      while (1) {
        r5 = r13 + r16 | 0;
        HEAP8[r5] = HEAP8[r5] ^ HEAP8[r8];
        r5 = r16 + 1 | 0;
        if ((r5 | 0) == (r3 | 0)) {
          break L2516;
        } else {
          r8 = r8 + 1 | 0;
          r16 = r5;
        }
      }
    }
  } while (0);
  __gcry_free(r9);
  r9 = __gcry_mpi_scan(r1, 5, r13, r10, 0);
  do {
    if ((r9 | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        r17 = r14;
        break;
      }
      __gcry_log_mpidump(468048, HEAP32[r1 >> 2]);
      r17 = r14;
    } else {
      r17 = _gcry_err_code663(r9);
    }
  } while (0);
  __gcry_free(r13);
  r12 = r17;
  return r12;
}
function _pss_verify_cmp(r1, r2) {
  return _pss_verify(HEAP32[r1 + 36 >> 2], r2, HEAP32[r1 + 4 >> 2] - 1 | 0, HEAP32[r1 + 16 >> 2], HEAP32[r1 + 28 >> 2]);
}
function _gcry_pk_lookup_func_name(r1, r2) {
  var r3, r4, r5;
  r3 = 0;
  if ((_strcasecmp(r2, HEAP32[r1 >> 2]) | 0) == 0) {
    r4 = 1;
    return r4;
  }
  r5 = HEAP32[r1 + 4 >> 2];
  while (1) {
    r1 = HEAP32[r5 >> 2];
    if ((r1 | 0) == 0) {
      r4 = 0;
      r3 = 1907;
      break;
    }
    if ((_strcasecmp(r2, r1) | 0) == 0) {
      r4 = 1;
      r3 = 1908;
      break;
    } else {
      r5 = r5 + 4 | 0;
    }
  }
  if (r3 == 1908) {
    return r4;
  } else if (r3 == 1907) {
    return r4;
  }
}
function _dummy_generate(r1, r2, r3, r4, r5) {
  __gcry_fips_signal_error(478868, 120, 495108, 0, 466008);
  return 69;
}
function _dummy_check_secret_key(r1, r2) {
  __gcry_fips_signal_error(478868, 129, 495244, 0, 466008);
  return 69;
}
function _dummy_encrypt(r1, r2, r3, r4, r5) {
  __gcry_fips_signal_error(478868, 142, 495168, 0, 466008);
  return 69;
}
function _dummy_decrypt(r1, r2, r3, r4, r5) {
  __gcry_fips_signal_error(478868, 155, 495228, 0, 466008);
  return 69;
}
function _dummy_sign(r1, r2, r3, r4) {
  __gcry_fips_signal_error(478868, 167, 495080, 0, 466008);
  return 69;
}
function _dummy_verify(r1, r2, r3, r4, r5, r6) {
  __gcry_fips_signal_error(478868, 182, 495064, 0, 466008);
  return 69;
}
function _dummy_get_nbits(r1, r2) {
  __gcry_fips_signal_error(478868, 191, 495092, 0, 466008);
  return 0;
}
function _do_setkey(r1, r2, r3) {
  return _setkey_core(r1, r2, r3, 1);
}
function _pkcs1_encode_for_signature(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  r7 = r6 + 100, r8 = r7 >> 2;
  r9 = r6 + 104, r10 = r9 >> 2;
  HEAP32[r8] = (r2 + 7 | 0) >>> 3;
  HEAP32[r10] = 100;
  r2 = __gcry_md_get_algo_dlen(r5);
  r11 = r6 | 0;
  if ((__gcry_md_algo_info(r5, 10, r11, r9) | 0) != 0) {
    r12 = 69;
    STACKTOP = r6;
    return r12;
  }
  if ((r2 | 0) != (r4 | 0)) {
    r12 = 70;
    STACKTOP = r6;
    return r12;
  }
  if ((r2 | 0) == 0) {
    r12 = 66;
    STACKTOP = r6;
    return r12;
  }
  r9 = HEAP32[r8];
  if ((r2 + HEAP32[r10] + 4 | 0) >>> 0 > r9 >>> 0) {
    r12 = 66;
    STACKTOP = r6;
    return r12;
  }
  r2 = __gcry_malloc(r9);
  if ((r2 | 0) == 0) {
    r12 = _gpg_err_code_from_syserror();
    STACKTOP = r6;
    return r12;
  }
  HEAP8[r2] = 0;
  HEAP8[r2 + 1 | 0] = 1;
  r9 = HEAP32[r8] - r4 - HEAP32[r10] | 0;
  r5 = r9 - 3 | 0;
  if ((r5 | 0) <= 1) {
    __gcry_assert_failed(467632, 478868, 1104, 494528);
  }
  _memset(r2 + 2 | 0, -1, r5);
  HEAP8[r2 + (r9 - 1) | 0] = 0;
  _memcpy(r2 + r9 | 0, r11, HEAP32[r10]);
  r11 = HEAP32[r10] + r9 | 0;
  _memcpy(r2 + r11 | 0, r3, r4);
  r3 = r11 + r4 | 0;
  if ((r3 | 0) != (HEAP32[r8] | 0)) {
    __gcry_assert_failed(467520, 478868, 1112, 494528);
  }
  r8 = __gcry_mpi_scan(r1, 5, r2, r3, r7);
  do {
    if ((r8 | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        r13 = 0;
        break;
      }
      __gcry_log_mpidump(467352, HEAP32[r1 >> 2]);
      r13 = 0;
    } else {
      r13 = _gcry_err_code663(r8);
    }
  } while (0);
  __gcry_free(r2);
  r12 = r13;
  STACKTOP = r6;
  return r12;
}
function _pss_encode(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r9 = 0;
  r10 = (r2 + 7 | 0) >>> 3;
  r11 = __gcry_md_get_algo_dlen(r3);
  if ((r11 | 0) == 0) {
    __gcry_assert_failed(468240, 478868, 1541, 494500);
  }
  r12 = r11 + 8 | 0;
  r13 = r12 + r6 | 0;
  r14 = r10 - r11 - 1 | 0;
  r15 = r13 + r14 | 0;
  r16 = __gcry_malloc(r15);
  r17 = (r16 | 0) != 0;
  if (!r17) {
    r18 = _gpg_err_code_from_syserror();
    return r18;
  }
  r19 = r16 + r12 | 0;
  r12 = r16 + r13 | 0;
  do {
    if ((r11 | 0) == (r5 | 0)) {
      _memcpy(r16 + 8 | 0, r4, r11);
      do {
        if (r10 >>> 0 < (r11 + (r6 + 2) | 0) >>> 0) {
          r20 = 66;
        } else {
          r21 = __gcry_malloc(r10);
          if ((r21 | 0) == 0) {
            r20 = _gpg_err_code_from_syserror();
            break;
          }
          r22 = r10 - 1 | 0;
          r23 = r22 - r11 | 0;
          r24 = r21 + r23 | 0;
          do {
            if ((r6 | 0) == 0) {
              r9 = 1953;
            } else {
              if ((r7 | 0) == 0) {
                __gcry_randomize(r19, r6, 1);
                r9 = 1953;
                break;
              }
              if ((r8 | 0) != (r6 | 0)) {
                r25 = 45;
                break;
              }
              _memcpy(r19, r7, r6);
              r9 = 1953;
              break;
            }
          } while (0);
          do {
            if (r9 == 1953) {
              r26 = r16;
              r27 = r26 | 0;
              tempBigInt = 0;
              HEAP8[r27] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[r27 + 1 | 0] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[r27 + 2 | 0] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[r27 + 3 | 0] = tempBigInt & 255;
              r27 = r26 + 4 | 0;
              tempBigInt = 0;
              HEAP8[r27] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[r27 + 1 | 0] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[r27 + 2 | 0] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[r27 + 3 | 0] = tempBigInt & 255;
              __gcry_md_hash_buffer(r3, r24, r16, r13);
              r27 = r23 - r6 | 0;
              r26 = r27 - 1 | 0;
              _memset(r21, 0, r26);
              HEAP8[r21 + r26 | 0] = 1;
              _memcpy(r21 + r27 | 0, r19, r6);
              _mgf1(r12, r14, r24, r11, r3);
              L2598 : do {
                if ((r14 | 0) != 0) {
                  r27 = r12;
                  r26 = 0;
                  while (1) {
                    r28 = r21 + r26 | 0;
                    HEAP8[r28] = HEAP8[r28] ^ HEAP8[r27];
                    r28 = r26 + 1 | 0;
                    if (r28 >>> 0 < r14 >>> 0) {
                      r27 = r27 + 1 | 0;
                      r26 = r28;
                    } else {
                      break L2598;
                    }
                  }
                }
              } while (0);
              HEAP8[r21] = HEAPU8[r21] & 255 >>> (((r10 << 3) - r2 | 0) >>> 0) & 255;
              HEAP8[r21 + r22 | 0] = -68;
              r26 = __gcry_mpi_scan(r1, 5, r21, r10, 0);
              if ((r26 | 0) != 0) {
                r25 = _gcry_err_code663(r26);
                break;
              }
              if ((__gcry_get_debug_flag(1) | 0) == 0) {
                r25 = 0;
                break;
              }
              __gcry_log_mpidump(468168, HEAP32[r1 >> 2]);
              r25 = 0;
            }
          } while (0);
          if ((r21 | 0) == 0) {
            r20 = r25;
            break;
          }
          L2608 : do {
            if ((r10 | 0) != 0) {
              r22 = r21;
              r24 = r10;
              while (1) {
                HEAP8[r22] = 0;
                r23 = r24 - 1 | 0;
                if ((r23 | 0) == 0) {
                  break L2608;
                } else {
                  r22 = r22 + 1 | 0;
                  r24 = r23;
                }
              }
            }
          } while (0);
          __gcry_free(r21);
          r20 = r25;
        }
      } while (0);
      if (r17) {
        r29 = r20;
        break;
      } else {
        r18 = r20;
      }
      return r18;
    } else {
      r29 = 139;
    }
  } while (0);
  L2615 : do {
    if ((r15 | 0) != 0) {
      r20 = r16;
      r17 = r15;
      while (1) {
        HEAP8[r20] = 0;
        r25 = r17 - 1 | 0;
        if ((r25 | 0) == 0) {
          break L2615;
        } else {
          r20 = r20 + 1 | 0;
          r17 = r25;
        }
      }
    }
  } while (0);
  __gcry_free(r16);
  r18 = r29;
  return r18;
}
function _pss_verify(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r8 = r7, r9 = r8 >> 2;
  HEAP32[r9] = 0;
  r10 = (r3 + 7 | 0) >>> 3;
  r11 = __gcry_md_get_algo_dlen(r4);
  if ((r11 | 0) == 0) {
    __gcry_assert_failed(468240, 478868, 1669, 494488);
  }
  r12 = r11 + 8 | 0;
  r13 = r12 + r5 | 0;
  r14 = r10 - r11 | 0;
  r15 = r14 - 1 | 0;
  r16 = r13 >>> 0 < r15 >>> 0 ? r15 : r13;
  r17 = r16 + r11 | 0;
  r18 = __gcry_malloc(r17);
  r19 = (r18 | 0) != 0;
  do {
    if (r19) {
      r20 = r18 + r16 | 0;
      r21 = _octet_string_from_mpi(0, r20, r1, r11);
      if ((r21 | 0) != 0) {
        r22 = r21;
        r6 = 1988;
        break;
      }
      r21 = _octet_string_from_mpi(r8, 0, r2, r10);
      if ((r21 | 0) != 0) {
        r22 = r21;
        r6 = 1988;
        break;
      }
      if (r10 >>> 0 < (r11 + (r5 + 2) | 0) >>> 0) {
        r22 = 66;
        r6 = 1988;
        break;
      }
      r21 = r10 - 1 | 0;
      r23 = HEAP32[r9];
      if (HEAP8[r23 + r21 | 0] << 24 >> 24 != -68) {
        r24 = 8;
        r25 = r23;
        break;
      }
      r26 = r23 + (r21 - r11) | 0;
      r21 = 255 >>> (((r10 << 3) - r3 | 0) >>> 0);
      if ((HEAPU8[r23] & (r21 ^ -1) | 0) != 0) {
        r22 = 8;
        r6 = 1988;
        break;
      }
      _mgf1(r18, r15, r26, r11, r4);
      L2631 : do {
        if ((r15 | 0) != 0) {
          r23 = r18;
          r27 = 0;
          while (1) {
            r28 = HEAP32[r9] + r27 | 0;
            HEAP8[r28] = HEAP8[r28] ^ HEAP8[r23];
            r28 = r27 + 1 | 0;
            if (r28 >>> 0 < r15 >>> 0) {
              r23 = r23 + 1 | 0;
              r27 = r28;
            } else {
              break L2631;
            }
          }
        }
      } while (0);
      r27 = HEAP32[r9];
      HEAP8[r27] = HEAPU8[r27] & r21 & 255;
      r27 = r14 - r5 - 2 | 0;
      r23 = HEAP32[r9];
      r28 = 0;
      while (1) {
        if (r28 >>> 0 >= r27 >>> 0) {
          break;
        }
        if (HEAP8[r23 + r28 | 0] << 24 >> 24 == 0) {
          r28 = r28 + 1 | 0;
        } else {
          break;
        }
      }
      if ((r28 | 0) != (r27 | 0)) {
        r22 = 8;
        r6 = 1988;
        break;
      }
      r23 = HEAP32[r9];
      if (HEAP8[r23 + r28 | 0] << 24 >> 24 != 1) {
        r24 = 8;
        r25 = r23;
        break;
      }
      r21 = r18;
      r29 = r21 | 0;
      tempBigInt = 0;
      HEAP8[r29] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r29 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r29 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r29 + 3 | 0] = tempBigInt & 255;
      r29 = r21 + 4 | 0;
      tempBigInt = 0;
      HEAP8[r29] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r29 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r29 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r29 + 3 | 0] = tempBigInt & 255;
      _memcpy(r18 + 8 | 0, r20, r11);
      _memcpy(r18 + r12 | 0, r28 + (r23 + 1) | 0, r5);
      __gcry_md_hash_buffer(r4, r18, r18, r13);
      r22 = (_memcmp(r26, r18, r11) | 0) != 0 ? 8 : 0;
      r6 = 1988;
      break;
    } else {
      r22 = _gpg_err_code_from_syserror();
      r6 = 1988;
      break;
    }
  } while (0);
  if (r6 == 1988) {
    r24 = r22;
    r25 = HEAP32[r9];
  }
  if ((r25 | 0) != 0) {
    L2647 : do {
      if ((r10 | 0) != 0) {
        r22 = r25;
        r6 = r10;
        while (1) {
          HEAP8[r22] = 0;
          r11 = r6 - 1 | 0;
          if ((r11 | 0) == 0) {
            break L2647;
          } else {
            r22 = r22 + 1 | 0;
            r6 = r11;
          }
        }
      }
    } while (0);
    __gcry_free(HEAP32[r9]);
  }
  if (!r19) {
    STACKTOP = r7;
    return r24;
  }
  L2655 : do {
    if ((r17 | 0) != 0) {
      r19 = r18;
      r9 = r17;
      while (1) {
        HEAP8[r19] = 0;
        r10 = r9 - 1 | 0;
        if ((r10 | 0) == 0) {
          break L2655;
        } else {
          r19 = r19 + 1 | 0;
          r9 = r10;
        }
      }
    }
  } while (0);
  __gcry_free(r18);
  STACKTOP = r7;
  return r24;
}
function _sexp_elements_extract_ecc(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r5 = r3 >> 2;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r8 = r7, r9 = r8 >> 2;
  r10 = r8 >> 2;
  if (HEAP8[r2] << 24 >> 24 == 0) {
    __gcry_assert_failed(466508, 478868, 1872, 494416);
  } else {
    r11 = 0;
    r12 = r2;
  }
  while (1) {
    HEAP32[(r11 << 2 >> 2) + r5] = 0;
    r13 = r12 + 1 | 0;
    r14 = r11 + 1 | 0;
    if (HEAP8[r13] << 24 >> 24 == 0) {
      break;
    } else {
      r11 = r14;
      r12 = r13;
    }
  }
  if ((r14 | 0) <= 4) {
    __gcry_assert_failed(466508, 478868, 1872, 494416);
  }
  if ((r14 | 0) == 5) {
    HEAP32[r5 + 5] = 0;
  }
  L2672 : do {
    if (HEAP8[r2] << 24 >> 24 == 0) {
      r6 = 2011;
    } else {
      r14 = 0;
      r12 = r2;
      while (1) {
        r11 = __gcry_sexp_find_token(r1, r12, 1);
        if ((r11 | 0) == 0) {
          HEAP32[(r14 << 2 >> 2) + r5] = 0;
        } else {
          r13 = (r14 << 2) + r3 | 0;
          HEAP32[r13 >> 2] = __gcry_sexp_nth_mpi(r11, 1, 5);
          __gcry_sexp_release(r11);
          if ((HEAP32[r13 >> 2] | 0) == 0) {
            r15 = 65;
            break L2672;
          }
        }
        r13 = r12 + 1 | 0;
        if (HEAP8[r13] << 24 >> 24 == 0) {
          r6 = 2011;
          break L2672;
        } else {
          r14 = r14 + 1 | 0;
          r12 = r13;
        }
      }
    }
  } while (0);
  L2679 : do {
    if (r6 == 2011) {
      r12 = __gcry_sexp_find_token(r1, 466180, 5);
      do {
        if ((r12 | 0) == 0) {
          r16 = 0;
        } else {
          r14 = r4 + 12 | 0;
          if ((HEAP32[r14 >> 2] | 0) == 0) {
            __gcry_sexp_release(r12);
            r15 = 65;
            break L2679;
          }
          HEAP32[r10] = 0;
          HEAP32[r10 + 1] = 0;
          HEAP32[r10 + 2] = 0;
          HEAP32[r10 + 3] = 0;
          HEAP32[r10 + 4] = 0;
          HEAP32[r10 + 5] = 0;
          r13 = __gcry_sexp_nth_string(r12, 1);
          __gcry_sexp_release(r12);
          if ((r13 | 0) == 0) {
            r15 = 65;
            break L2679;
          }
          r11 = FUNCTION_TABLE[HEAP32[r14 >> 2]](r13, r8 | 0);
          __gcry_free(r13);
          if ((r11 | 0) != 0) {
            r15 = r11;
            break L2679;
          }
          r13 = HEAP32[r9];
          if ((HEAP32[r5] | 0) == 0) {
            HEAP32[r5] = r13;
          } else {
            __gcry_mpi_free(r13);
          }
          r13 = r3 + 4 | 0;
          r14 = HEAP32[r9 + 1];
          if ((HEAP32[r13 >> 2] | 0) == 0) {
            HEAP32[r13 >> 2] = r14;
          } else {
            __gcry_mpi_free(r14);
          }
          r14 = r3 + 8 | 0;
          r13 = HEAP32[r9 + 2];
          if ((HEAP32[r14 >> 2] | 0) == 0) {
            HEAP32[r14 >> 2] = r13;
          } else {
            __gcry_mpi_free(r13);
          }
          r13 = r3 + 12 | 0;
          r14 = HEAP32[r9 + 3];
          if ((HEAP32[r13 >> 2] | 0) == 0) {
            HEAP32[r13 >> 2] = r14;
          } else {
            __gcry_mpi_free(r14);
          }
          r14 = r3 + 16 | 0;
          r13 = HEAP32[r9 + 4];
          if ((HEAP32[r14 >> 2] | 0) == 0) {
            HEAP32[r14 >> 2] = r13;
          } else {
            __gcry_mpi_free(r13);
          }
          r13 = r3 + 20 | 0;
          r14 = HEAP32[r9 + 5];
          if ((HEAP32[r13 >> 2] | 0) == 0) {
            HEAP32[r13 >> 2] = r14;
            r16 = r11;
            break;
          } else {
            __gcry_mpi_free(r14);
            r16 = r11;
            break;
          }
        }
      } while (0);
      L2712 : do {
        if (HEAP8[r2] << 24 >> 24 != 0) {
          r12 = 0;
          r11 = r2;
          while (1) {
            if ((HEAP32[(r12 << 2 >> 2) + r5] | 0) == 0) {
              r15 = 68;
              break L2679;
            }
            r14 = r11 + 1 | 0;
            if (HEAP8[r14] << 24 >> 24 == 0) {
              break L2712;
            } else {
              r12 = r12 + 1 | 0;
              r11 = r14;
            }
          }
        }
      } while (0);
      if ((r16 | 0) == 0) {
        r17 = 0;
      } else {
        r15 = r16;
        break;
      }
      STACKTOP = r7;
      return r17;
    }
  } while (0);
  if (HEAP8[r2] << 24 >> 24 == 0) {
    r17 = r15;
    STACKTOP = r7;
    return r17;
  } else {
    r18 = 0;
    r19 = r2;
  }
  while (1) {
    r2 = HEAP32[(r18 << 2 >> 2) + r5];
    if ((r2 | 0) != 0) {
      __gcry_free(r2);
    }
    r2 = r19 + 1 | 0;
    if (HEAP8[r2] << 24 >> 24 == 0) {
      r17 = r15;
      break;
    } else {
      r18 = r18 + 1 | 0;
      r19 = r2;
    }
  }
  STACKTOP = r7;
  return r17;
}
function _do_encrypt(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = r1 >> 1;
  r1 = 0;
  r5 = HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3];
  r6 = HEAPU8[r3 + 3 | 0] << 8 | HEAPU8[r3 + 2 | 0];
  r7 = HEAPU8[r3 + 5 | 0] << 8 | HEAPU8[r3 + 4 | 0];
  r8 = HEAPU8[r3 + 7 | 0] << 8 | HEAPU8[r3 + 6 | 0];
  while (1) {
    r3 = r1 << 2;
    r9 = (((r8 & r7) + r5 & 65535) + (r6 & (r8 ^ -1)) & 65535) + HEAP16[(r3 << 1 >> 1) + r4] & 65535;
    r10 = r9 << 1 | (r9 & 65535) >>> 15;
    r9 = ((HEAP16[((r3 | 1) << 1 >> 1) + r4] + r6 & 65535) + (r10 & r8) & 65535) + (r7 & (r10 ^ -1)) & 65535;
    r11 = r9 << 2 | (r9 & 65535) >>> 14;
    r9 = ((HEAP16[((r3 | 2) << 1 >> 1) + r4] + r7 & 65535) + (r11 & r10) & 65535) + (r8 & (r11 ^ -1)) & 65535;
    r12 = r9 << 3 | (r9 & 65535) >>> 13;
    r9 = ((HEAP16[((r3 | 3) << 1 >> 1) + r4] + r8 & 65535) + (r12 & r11) & 65535) + (r10 & (r12 ^ -1)) & 65535;
    r3 = r9 << 5 | (r9 & 65535) >>> 11;
    if ((r1 | 0) == 10 | (r1 | 0) == 4) {
      r9 = HEAP16[((r3 & 63) << 1 >> 1) + r4] + r10 & 65535;
      r13 = HEAP16[((r9 & 63) << 1 >> 1) + r4] + r11 & 65535;
      r14 = HEAP16[((r13 & 63) << 1 >> 1) + r4] + r12 & 65535;
      r15 = HEAP16[((r14 & 63) << 1 >> 1) + r4] + r3 & 65535;
      r16 = r14;
      r17 = r13;
      r18 = r9;
    } else {
      r15 = r3;
      r16 = r12;
      r17 = r11;
      r18 = r10;
    }
    r10 = r1 + 1 | 0;
    if ((r10 | 0) == 16) {
      break;
    } else {
      r1 = r10;
      r5 = r18;
      r6 = r17;
      r7 = r16;
      r8 = r15;
    }
  }
  HEAP8[r2] = r18 & 255;
  HEAP8[r2 + 1 | 0] = (r18 & 65535) >>> 8 & 255;
  HEAP8[r2 + 2 | 0] = r17 & 255;
  HEAP8[r2 + 3 | 0] = (r17 & 65535) >>> 8 & 255;
  HEAP8[r2 + 4 | 0] = r16 & 255;
  HEAP8[r2 + 5 | 0] = (r16 & 65535) >>> 8 & 255;
  HEAP8[r2 + 6 | 0] = r15 & 255;
  HEAP8[r2 + 7 | 0] = (r15 & 65535) >>> 8 & 255;
  return;
}
function _do_decrypt(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = r1 >> 1;
  r1 = 15;
  r5 = HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3];
  r6 = HEAPU8[r3 + 3 | 0] << 8 | HEAPU8[r3 + 2 | 0];
  r7 = HEAPU8[r3 + 5 | 0] << 8 | HEAPU8[r3 + 4 | 0];
  r8 = HEAPU8[r3 + 7 | 0] << 8 | HEAPU8[r3 + 6 | 0];
  while (1) {
    r3 = r1 << 2;
    r9 = (((r8 & 65535) >>> 5 | r8 << 11) - ((r5 & (r7 ^ -1)) + (r7 & r6) & 65535) & 65535) - HEAP16[((r3 | 3) << 1 >> 1) + r4] & 65535;
    r10 = ((((r7 & 65535) >>> 3 | r7 << 13) - (r6 & r5) & 65535) - HEAP16[((r3 | 2) << 1 >> 1) + r4] & 65535) - (r9 & (r6 ^ -1)) & 65535;
    r11 = ((((r6 & 65535) >>> 2 | r6 << 14) - (r9 & r5) & 65535) - HEAP16[((r3 | 1) << 1 >> 1) + r4] & 65535) - (r10 & (r5 ^ -1)) & 65535;
    r12 = ((((r5 & 65535) >>> 1 | r5 << 15) - HEAP16[(r3 << 1 >> 1) + r4] & 65535) - (r10 & r9) & 65535) - (r11 & (r9 ^ -1)) & 65535;
    if ((r1 | 0) == 11 | (r1 | 0) == 5) {
      r3 = r9 - HEAP16[((r10 & 63) << 1 >> 1) + r4] & 65535;
      r1 = r1 - 1 | 0;
      r5 = r12 - HEAP16[((r3 & 63) << 1 >> 1) + r4] & 65535;
      r6 = r11 - HEAP16[((r12 & 63) << 1 >> 1) + r4] & 65535;
      r7 = r10 - HEAP16[((r11 & 63) << 1 >> 1) + r4] & 65535;
      r8 = r3;
      continue;
    } else {
      if ((r1 | 0) > 0) {
        r1 = r1 - 1 | 0;
        r5 = r12;
        r6 = r11;
        r7 = r10;
        r8 = r9;
        continue;
      } else {
        break;
      }
    }
  }
  HEAP8[r2] = r12 & 255;
  HEAP8[r2 + 1 | 0] = (r12 & 65535) >>> 8 & 255;
  HEAP8[r2 + 2 | 0] = r11 & 255;
  HEAP8[r2 + 3 | 0] = (r11 & 65535) >>> 8 & 255;
  HEAP8[r2 + 4 | 0] = r10 & 255;
  HEAP8[r2 + 5 | 0] = (r10 & 65535) >>> 8 & 255;
  HEAP8[r2 + 6 | 0] = r9 & 255;
  HEAP8[r2 + 7 | 0] = (r9 & 65535) >>> 8 & 255;
  return;
}
function _setkey_core(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r5 = 0;
  r6 = STACKTOP;
  r7 = r3 << 3;
  do {
    if (HEAP8[412960]) {
      r5 = 2061;
    } else {
      HEAP8[412960] = 1;
      r8 = _selftest707();
      HEAP32[103239] = r8;
      if ((r8 | 0) == 0) {
        break;
      }
      __gcry_log_error(484384, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r8, tempInt));
      r5 = 2061;
      break;
    }
  } while (0);
  do {
    if (r5 == 2061) {
      if ((HEAP32[103239] | 0) == 0) {
        break;
      } else {
        r9 = 50;
      }
      STACKTOP = r6;
      return r9;
    }
  } while (0);
  if (r3 >>> 0 < 5) {
    r9 = 44;
    STACKTOP = r6;
    return r9;
  }
  r5 = r1;
  r8 = 0;
  while (1) {
    HEAP8[r1 + r8 | 0] = HEAP8[r2 + r8 | 0];
    r10 = r8 + 1 | 0;
    if ((r10 | 0) == (r3 | 0)) {
      break;
    } else {
      r8 = r10;
    }
  }
  L2755 : do {
    if (r3 >>> 0 < 128) {
      r8 = r3;
      while (1) {
        HEAP8[r1 + r8 | 0] = HEAP8[(HEAPU8[r1 + (r8 - 1) | 0] + HEAPU8[r1 + (r8 - r3) | 0] & 255) + 438964 | 0];
        r2 = r8 + 1 | 0;
        if ((r2 | 0) == 128) {
          break L2755;
        } else {
          r8 = r2;
        }
      }
    }
  } while (0);
  HEAP8[r1] = HEAP8[HEAPU8[r1] + 438964 | 0];
  L2759 : do {
    if ((r4 | 0) == 0) {
      r11 = 0;
    } else {
      r3 = r7 >> 3;
      r8 = 128 - r3 | 0;
      r2 = r1 + r8 | 0;
      r10 = HEAP8[HEAPU8[r2] + 438964 | 0];
      HEAP8[r2] = r10;
      if ((r3 | 0) == 128) {
        r11 = 0;
        break;
      } else {
        r12 = r10;
        r13 = r8;
      }
      while (1) {
        r8 = r13 - 1 | 0;
        r10 = HEAP8[((HEAP8[r1 + r8 + r3 | 0] ^ r12) & 255) + 438964 | 0];
        HEAP8[r1 + r8 | 0] = r10;
        if ((r8 | 0) == 0) {
          r11 = 0;
          break L2759;
        } else {
          r12 = r10;
          r13 = r8;
        }
      }
    }
  } while (0);
  while (1) {
    r13 = r11 << 1;
    HEAP16[r5 + (r11 << 1) >> 1] = HEAPU8[r1 + (r13 | 1) | 0] << 8 | HEAPU8[r1 + r13 | 0];
    r13 = r11 + 1 | 0;
    if ((r13 | 0) == 64) {
      r9 = 0;
      break;
    } else {
      r11 = r13;
    }
  }
  STACKTOP = r6;
  return r9;
}
function _selftest707() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 144 | 0;
  r2 = r1;
  _setkey_core(r2, 415832, 16, 0);
  r3 = r1 + 128 | 0;
  _do_encrypt(r2, r3, 415604);
  do {
    if ((_memcmp(r3, 416648, 8) | 0) == 0) {
      _setkey_core(r2, 415832, 16, 0);
      _do_decrypt(r2, r3, r3);
      if ((_memcmp(r3, 415604, 8) | 0) != 0) {
        r4 = 475444;
        break;
      }
      _setkey_core(r2, 415768, 16, 0);
      _do_encrypt(r2, r3, 415588);
      if ((_memcmp(r3, 416600, 8) | 0) != 0) {
        r4 = 472996;
        break;
      }
      _setkey_core(r2, 415768, 16, 0);
      _do_decrypt(r2, r3, r3);
      if ((_memcmp(r3, 415588, 8) | 0) != 0) {
        r4 = 471516;
        break;
      }
      _setkey_core(r2, 415688, 16, 0);
      _do_encrypt(r2, r3, 415564);
      if ((_memcmp(r3, 416560, 8) | 0) != 0) {
        r4 = 470244;
        break;
      }
      _setkey_core(r2, 415688, 16, 0);
      _do_decrypt(r2, r3, r3);
      r4 = (_memcmp(r3, 415564, 8) | 0) == 0 ? 0 : 468548;
    } else {
      r4 = 478580;
    }
  } while (0);
  STACKTOP = r1;
  return r4;
}
function __gcry_aes_cfb_enc(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = r1;
  if ((r5 | 0) == 0) {
    __gcry_burn_stack(56);
    return;
  } else {
    r7 = r5;
    r8 = r3;
    r9 = r4;
  }
  while (1) {
    _do_encrypt_aligned(r6, r2, r2);
    r4 = r2 + 1 | 0;
    r3 = HEAP8[r2] ^ HEAP8[r9];
    HEAP8[r2] = r3;
    HEAP8[r8] = r3;
    r3 = r2 + 2 | 0;
    r5 = HEAP8[r4] ^ HEAP8[r9 + 1 | 0];
    HEAP8[r4] = r5;
    HEAP8[r8 + 1 | 0] = r5;
    r5 = r2 + 3 | 0;
    r4 = HEAP8[r3] ^ HEAP8[r9 + 2 | 0];
    HEAP8[r3] = r4;
    HEAP8[r8 + 2 | 0] = r4;
    r4 = r2 + 4 | 0;
    r3 = HEAP8[r5] ^ HEAP8[r9 + 3 | 0];
    HEAP8[r5] = r3;
    HEAP8[r8 + 3 | 0] = r3;
    r3 = r2 + 5 | 0;
    r5 = HEAP8[r4] ^ HEAP8[r9 + 4 | 0];
    HEAP8[r4] = r5;
    HEAP8[r8 + 4 | 0] = r5;
    r5 = r2 + 6 | 0;
    r4 = HEAP8[r3] ^ HEAP8[r9 + 5 | 0];
    HEAP8[r3] = r4;
    HEAP8[r8 + 5 | 0] = r4;
    r4 = r2 + 7 | 0;
    r3 = HEAP8[r5] ^ HEAP8[r9 + 6 | 0];
    HEAP8[r5] = r3;
    HEAP8[r8 + 6 | 0] = r3;
    r3 = r2 + 8 | 0;
    r5 = HEAP8[r4] ^ HEAP8[r9 + 7 | 0];
    HEAP8[r4] = r5;
    HEAP8[r8 + 7 | 0] = r5;
    r5 = r2 + 9 | 0;
    r4 = HEAP8[r3] ^ HEAP8[r9 + 8 | 0];
    HEAP8[r3] = r4;
    HEAP8[r8 + 8 | 0] = r4;
    r4 = r2 + 10 | 0;
    r3 = HEAP8[r5] ^ HEAP8[r9 + 9 | 0];
    HEAP8[r5] = r3;
    HEAP8[r8 + 9 | 0] = r3;
    r3 = r2 + 11 | 0;
    r5 = HEAP8[r4] ^ HEAP8[r9 + 10 | 0];
    HEAP8[r4] = r5;
    HEAP8[r8 + 10 | 0] = r5;
    r5 = r2 + 12 | 0;
    r4 = HEAP8[r3] ^ HEAP8[r9 + 11 | 0];
    HEAP8[r3] = r4;
    HEAP8[r8 + 11 | 0] = r4;
    r4 = r2 + 13 | 0;
    r3 = HEAP8[r5] ^ HEAP8[r9 + 12 | 0];
    HEAP8[r5] = r3;
    HEAP8[r8 + 12 | 0] = r3;
    r3 = r2 + 14 | 0;
    r5 = HEAP8[r4] ^ HEAP8[r9 + 13 | 0];
    HEAP8[r4] = r5;
    HEAP8[r8 + 13 | 0] = r5;
    r5 = r2 + 15 | 0;
    r4 = HEAP8[r3] ^ HEAP8[r9 + 14 | 0];
    HEAP8[r3] = r4;
    HEAP8[r8 + 14 | 0] = r4;
    r4 = HEAP8[r5] ^ HEAP8[r9 + 15 | 0];
    HEAP8[r5] = r4;
    HEAP8[r8 + 15 | 0] = r4;
    r4 = r7 - 1 | 0;
    if ((r4 | 0) == 0) {
      break;
    } else {
      r7 = r4;
      r8 = r8 + 16 | 0;
      r9 = r9 + 16 | 0;
    }
  }
  __gcry_burn_stack(56);
  return;
}
function _do_encrypt_aligned(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r4 = r1 >> 2;
  r5 = HEAP32[r4 + 120];
  r6 = r1 >> 2;
  r1 = HEAP32[r4] ^ HEAP32[r3 >> 2];
  r7 = HEAP32[r4 + 1] ^ HEAP32[r3 + 4 >> 2];
  r8 = HEAP32[r4 + 2] ^ HEAP32[r3 + 8 >> 2];
  r9 = HEAP32[r4 + 3] ^ HEAP32[r3 + 12 >> 2];
  r3 = r2 >> 2;
  HEAP32[r3] = HEAP32[((r7 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r1 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 504252 >> 2];
  r4 = r2 + 4 | 0;
  r10 = r4 >> 2;
  HEAP32[r10] = HEAP32[((r8 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r7 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 504252 >> 2];
  r11 = r2 + 8 | 0;
  r12 = r11 >> 2;
  HEAP32[r12] = HEAP32[((r9 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r8 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 504252 >> 2];
  r13 = r2 + 12 | 0;
  r14 = r13 >> 2;
  HEAP32[r14] = HEAP32[((r1 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r9 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 504252 >> 2];
  r8 = r5 - 1 | 0;
  r7 = HEAP32[r3];
  L2781 : do {
    if ((r8 | 0) > 1) {
      r9 = r5 - 1 | 0;
      r1 = 1;
      r15 = r7;
      while (1) {
        r16 = HEAP32[(r1 << 4 >> 2) + r6] ^ r15;
        r17 = HEAP32[((r1 << 4) + 4 >> 2) + r6] ^ HEAP32[r10];
        r18 = HEAP32[((r1 << 4) + 8 >> 2) + r6] ^ HEAP32[r12];
        r19 = HEAP32[((r1 << 4) + 12 >> 2) + r6] ^ HEAP32[r14];
        HEAP32[r3] = HEAP32[((r17 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r16 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r18 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r19 >>> 24 << 2) + 504252 >> 2];
        HEAP32[r10] = HEAP32[((r18 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r17 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r19 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r16 >>> 24 << 2) + 504252 >> 2];
        HEAP32[r12] = HEAP32[((r19 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r18 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r16 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r17 >>> 24 << 2) + 504252 >> 2];
        HEAP32[r14] = HEAP32[((r16 >>> 8 & 255) << 2) + 506300 >> 2] ^ HEAP32[((r19 & 255) << 2) + 507324 >> 2] ^ HEAP32[((r17 >>> 16 & 255) << 2) + 505276 >> 2] ^ HEAP32[(r18 >>> 24 << 2) + 504252 >> 2];
        r18 = r1 + 1 | 0;
        r17 = HEAP32[r3];
        if ((r18 | 0) == (r9 | 0)) {
          r20 = r17;
          break L2781;
        } else {
          r1 = r18;
          r15 = r17;
        }
      }
    } else {
      r20 = r7;
    }
  } while (0);
  r7 = HEAP32[(r8 << 4 >> 2) + r6] ^ r20;
  r20 = HEAP32[((r8 << 4) + 4 >> 2) + r6] ^ HEAP32[r10];
  r15 = HEAP32[((r8 << 4) + 8 >> 2) + r6] ^ HEAP32[r12];
  r1 = HEAP32[((r8 << 4) + 12 >> 2) + r6] ^ HEAP32[r14];
  HEAP8[r2] = HEAP8[((r7 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 1 | 0] = HEAP8[((r20 >>> 8 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 2 | 0] = HEAP8[((r15 >>> 16 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 3 | 0] = HEAP8[(r1 >>> 24 << 2) + 507325 | 0];
  HEAP8[r4] = HEAP8[((r20 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 5 | 0] = HEAP8[((r15 >>> 8 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 6 | 0] = HEAP8[((r1 >>> 16 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 7 | 0] = HEAP8[(r7 >>> 24 << 2) + 507325 | 0];
  HEAP8[r11] = HEAP8[((r15 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 9 | 0] = HEAP8[((r1 >>> 8 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 10 | 0] = HEAP8[((r7 >>> 16 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 11 | 0] = HEAP8[(r20 >>> 24 << 2) + 507325 | 0];
  HEAP8[r13] = HEAP8[((r1 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 13 | 0] = HEAP8[((r7 >>> 8 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 14 | 0] = HEAP8[((r20 >>> 16 & 255) << 2) + 507325 | 0];
  HEAP8[r2 + 15 | 0] = HEAP8[(r15 >>> 24 << 2) + 507325 | 0];
  HEAP32[r3] = HEAP32[r3] ^ HEAP32[(r5 << 4 >> 2) + r6];
  HEAP32[r10] = HEAP32[r10] ^ HEAP32[((r5 << 4) + 4 >> 2) + r6];
  HEAP32[r12] = HEAP32[r12] ^ HEAP32[((r5 << 4) + 8 >> 2) + r6];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[((r5 << 4) + 12 >> 2) + r6];
  return;
}
function __gcry_aes_cbc_enc(r1, r2, r3, r4, r5, r6) {
  var r7;
  r7 = r1;
  if ((r5 | 0) == 0) {
    __gcry_burn_stack(56);
    return;
  }
  r1 = (r6 | 0) == 0;
  r6 = r5;
  r5 = r3;
  r3 = r4;
  while (1) {
    HEAP8[r5] = HEAP8[r2] ^ HEAP8[r3];
    HEAP8[r5 + 1 | 0] = HEAP8[r2 + 1 | 0] ^ HEAP8[r3 + 1 | 0];
    HEAP8[r5 + 2 | 0] = HEAP8[r2 + 2 | 0] ^ HEAP8[r3 + 2 | 0];
    HEAP8[r5 + 3 | 0] = HEAP8[r2 + 3 | 0] ^ HEAP8[r3 + 3 | 0];
    HEAP8[r5 + 4 | 0] = HEAP8[r2 + 4 | 0] ^ HEAP8[r3 + 4 | 0];
    HEAP8[r5 + 5 | 0] = HEAP8[r2 + 5 | 0] ^ HEAP8[r3 + 5 | 0];
    HEAP8[r5 + 6 | 0] = HEAP8[r2 + 6 | 0] ^ HEAP8[r3 + 6 | 0];
    HEAP8[r5 + 7 | 0] = HEAP8[r2 + 7 | 0] ^ HEAP8[r3 + 7 | 0];
    HEAP8[r5 + 8 | 0] = HEAP8[r2 + 8 | 0] ^ HEAP8[r3 + 8 | 0];
    HEAP8[r5 + 9 | 0] = HEAP8[r2 + 9 | 0] ^ HEAP8[r3 + 9 | 0];
    HEAP8[r5 + 10 | 0] = HEAP8[r2 + 10 | 0] ^ HEAP8[r3 + 10 | 0];
    HEAP8[r5 + 11 | 0] = HEAP8[r2 + 11 | 0] ^ HEAP8[r3 + 11 | 0];
    HEAP8[r5 + 12 | 0] = HEAP8[r2 + 12 | 0] ^ HEAP8[r3 + 12 | 0];
    HEAP8[r5 + 13 | 0] = HEAP8[r2 + 13 | 0] ^ HEAP8[r3 + 13 | 0];
    HEAP8[r5 + 14 | 0] = HEAP8[r2 + 14 | 0] ^ HEAP8[r3 + 14 | 0];
    HEAP8[r5 + 15 | 0] = HEAP8[r2 + 15 | 0] ^ HEAP8[r3 + 15 | 0];
    _do_encrypt765(r7, r5, r5);
    _memcpy(r2, r5, 16);
    r4 = r6 - 1 | 0;
    if ((r4 | 0) == 0) {
      break;
    } else {
      r6 = r4;
      r5 = r1 ? r5 + 16 | 0 : r5;
      r3 = r3 + 16 | 0;
    }
  }
  __gcry_burn_stack(56);
  return;
}
function _do_encrypt765(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r4;
  r6 = r4 + 16;
  do {
    if ((r3 & 15 | 0) == 0) {
      if ((r2 & 15 | 0) != 0) {
        break;
      }
      _do_encrypt_aligned(r1, r2, r3);
      STACKTOP = r4;
      return;
    }
  } while (0);
  r7 = r5;
  _memcpy(r7, r3, 16);
  r3 = r6;
  _do_encrypt_aligned(r1, r3, r7);
  _memcpy(r2, r3, 16);
  STACKTOP = r4;
  return;
}
function __gcry_aes_ctr_enc(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r7 = r6;
  r8 = r1;
  if ((r5 | 0) == 0) {
    __gcry_burn_stack(56);
    STACKTOP = r6;
    return;
  }
  r1 = r7;
  r9 = r5;
  r5 = r3;
  r3 = r4;
  while (1) {
    _do_encrypt_aligned(r8, r1, r2);
    r4 = r5 + 16 | 0;
    r10 = r1 + 1 | 0;
    r11 = HEAP8[r1] ^ HEAP8[r3];
    HEAP8[r1] = r11;
    HEAP8[r5] = r11;
    r11 = r1 + 2 | 0;
    r12 = HEAP8[r10] ^ HEAP8[r3 + 1 | 0];
    HEAP8[r10] = r12;
    HEAP8[r5 + 1 | 0] = r12;
    r12 = r1 + 3 | 0;
    r10 = HEAP8[r11] ^ HEAP8[r3 + 2 | 0];
    HEAP8[r11] = r10;
    HEAP8[r5 + 2 | 0] = r10;
    r10 = r7 + 4 | 0;
    r11 = HEAP8[r12] ^ HEAP8[r3 + 3 | 0];
    HEAP8[r12] = r11;
    HEAP8[r5 + 3 | 0] = r11;
    r11 = r10 + 1 | 0;
    r12 = HEAP8[r10] ^ HEAP8[r3 + 4 | 0];
    HEAP8[r10] = r12;
    HEAP8[r5 + 4 | 0] = r12;
    r12 = r10 + 2 | 0;
    r13 = HEAP8[r11] ^ HEAP8[r3 + 5 | 0];
    HEAP8[r11] = r13;
    HEAP8[r5 + 5 | 0] = r13;
    r13 = r10 + 3 | 0;
    r10 = HEAP8[r12] ^ HEAP8[r3 + 6 | 0];
    HEAP8[r12] = r10;
    HEAP8[r5 + 6 | 0] = r10;
    r10 = r7 + 8 | 0;
    r12 = HEAP8[r13] ^ HEAP8[r3 + 7 | 0];
    HEAP8[r13] = r12;
    HEAP8[r5 + 7 | 0] = r12;
    r12 = r10 + 1 | 0;
    r13 = HEAP8[r10] ^ HEAP8[r3 + 8 | 0];
    HEAP8[r10] = r13;
    HEAP8[r5 + 8 | 0] = r13;
    r13 = r10 + 2 | 0;
    r11 = HEAP8[r12] ^ HEAP8[r3 + 9 | 0];
    HEAP8[r12] = r11;
    HEAP8[r5 + 9 | 0] = r11;
    r11 = r10 + 3 | 0;
    r10 = HEAP8[r13] ^ HEAP8[r3 + 10 | 0];
    HEAP8[r13] = r10;
    HEAP8[r5 + 10 | 0] = r10;
    r10 = r7 + 12 | 0;
    r13 = HEAP8[r11] ^ HEAP8[r3 + 11 | 0];
    HEAP8[r11] = r13;
    HEAP8[r5 + 11 | 0] = r13;
    r13 = r10 + 1 | 0;
    r11 = HEAP8[r10] ^ HEAP8[r3 + 12 | 0];
    HEAP8[r10] = r11;
    HEAP8[r5 + 12 | 0] = r11;
    r11 = r10 + 2 | 0;
    r12 = HEAP8[r13] ^ HEAP8[r3 + 13 | 0];
    HEAP8[r13] = r12;
    HEAP8[r5 + 13 | 0] = r12;
    r12 = r10 + 3 | 0;
    r10 = HEAP8[r11] ^ HEAP8[r3 + 14 | 0];
    HEAP8[r11] = r10;
    HEAP8[r5 + 14 | 0] = r10;
    r10 = HEAP8[r12] ^ HEAP8[r3 + 15 | 0];
    HEAP8[r12] = r10;
    HEAP8[r5 + 15 | 0] = r10;
    r10 = r3 + 16 | 0;
    r12 = 16;
    while (1) {
      if ((r12 | 0) <= 0) {
        break;
      }
      r11 = r12 - 1 | 0;
      r13 = r2 + r11 | 0;
      r14 = HEAP8[r13] + 1 & 255;
      HEAP8[r13] = r14;
      if (r14 << 24 >> 24 == 0) {
        r12 = r11;
      } else {
        break;
      }
    }
    r12 = r9 - 1 | 0;
    if ((r12 | 0) == 0) {
      break;
    } else {
      r9 = r12;
      r5 = r4;
      r3 = r10;
    }
  }
  __gcry_burn_stack(56);
  STACKTOP = r6;
  return;
}
function __gcry_aes_cfb_dec(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = r1;
  if ((r5 | 0) == 0) {
    __gcry_burn_stack(56);
    return;
  } else {
    r7 = r3;
    r8 = r4;
    r9 = r5;
  }
  while (1) {
    _do_encrypt_aligned(r6, r2, r2);
    r5 = HEAP8[r8];
    HEAP8[r7] = HEAP8[r2] ^ r5;
    r4 = r2 + 1 | 0;
    HEAP8[r2] = r5;
    r5 = HEAP8[r8 + 1 | 0];
    HEAP8[r7 + 1 | 0] = HEAP8[r4] ^ r5;
    r3 = r2 + 2 | 0;
    HEAP8[r4] = r5;
    r5 = HEAP8[r8 + 2 | 0];
    HEAP8[r7 + 2 | 0] = HEAP8[r3] ^ r5;
    r4 = r2 + 3 | 0;
    HEAP8[r3] = r5;
    r5 = HEAP8[r8 + 3 | 0];
    HEAP8[r7 + 3 | 0] = HEAP8[r4] ^ r5;
    r3 = r2 + 4 | 0;
    HEAP8[r4] = r5;
    r5 = HEAP8[r8 + 4 | 0];
    HEAP8[r7 + 4 | 0] = HEAP8[r3] ^ r5;
    r4 = r2 + 5 | 0;
    HEAP8[r3] = r5;
    r5 = HEAP8[r8 + 5 | 0];
    HEAP8[r7 + 5 | 0] = HEAP8[r4] ^ r5;
    r3 = r2 + 6 | 0;
    HEAP8[r4] = r5;
    r5 = HEAP8[r8 + 6 | 0];
    HEAP8[r7 + 6 | 0] = HEAP8[r3] ^ r5;
    r4 = r2 + 7 | 0;
    HEAP8[r3] = r5;
    r5 = HEAP8[r8 + 7 | 0];
    HEAP8[r7 + 7 | 0] = HEAP8[r4] ^ r5;
    r3 = r2 + 8 | 0;
    HEAP8[r4] = r5;
    r5 = HEAP8[r8 + 8 | 0];
    HEAP8[r7 + 8 | 0] = HEAP8[r3] ^ r5;
    r4 = r2 + 9 | 0;
    HEAP8[r3] = r5;
    r5 = HEAP8[r8 + 9 | 0];
    HEAP8[r7 + 9 | 0] = HEAP8[r4] ^ r5;
    r3 = r2 + 10 | 0;
    HEAP8[r4] = r5;
    r5 = HEAP8[r8 + 10 | 0];
    HEAP8[r7 + 10 | 0] = HEAP8[r3] ^ r5;
    r4 = r2 + 11 | 0;
    HEAP8[r3] = r5;
    r5 = HEAP8[r8 + 11 | 0];
    HEAP8[r7 + 11 | 0] = HEAP8[r4] ^ r5;
    r3 = r2 + 12 | 0;
    HEAP8[r4] = r5;
    r5 = HEAP8[r8 + 12 | 0];
    HEAP8[r7 + 12 | 0] = HEAP8[r3] ^ r5;
    r4 = r2 + 13 | 0;
    HEAP8[r3] = r5;
    r5 = HEAP8[r8 + 13 | 0];
    HEAP8[r7 + 13 | 0] = HEAP8[r4] ^ r5;
    r3 = r2 + 14 | 0;
    HEAP8[r4] = r5;
    r5 = HEAP8[r8 + 14 | 0];
    HEAP8[r7 + 14 | 0] = HEAP8[r3] ^ r5;
    r4 = r2 + 15 | 0;
    HEAP8[r3] = r5;
    r5 = HEAP8[r8 + 15 | 0];
    HEAP8[r7 + 15 | 0] = HEAP8[r4] ^ r5;
    HEAP8[r4] = r5;
    r5 = r9 - 1 | 0;
    if ((r5 | 0) == 0) {
      break;
    } else {
      r7 = r7 + 16 | 0;
      r8 = r8 + 16 | 0;
      r9 = r5;
    }
  }
  __gcry_burn_stack(56);
  return;
}
function __gcry_aes_cbc_dec(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r7 = r1;
  if ((r5 | 0) == 0) {
    __gcry_burn_stack(88);
    STACKTOP = r6;
    return;
  }
  r1 = r6 | 0;
  r8 = r2 + 1 | 0;
  r9 = r5;
  r5 = r3;
  r3 = r4;
  while (1) {
    _memcpy(r1, r3, 16);
    _do_decrypt772(r7, r5, r3);
    HEAP8[r5] = HEAP8[r5] ^ HEAP8[r2];
    r4 = r5 + 1 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r8];
    r4 = r5 + 2 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 2 | 0];
    r4 = r5 + 3 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 3 | 0];
    r4 = r5 + 4 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 4 | 0];
    r4 = r5 + 5 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 5 | 0];
    r4 = r5 + 6 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 6 | 0];
    r4 = r5 + 7 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 7 | 0];
    r4 = r5 + 8 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 8 | 0];
    r4 = r5 + 9 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 9 | 0];
    r4 = r5 + 10 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 10 | 0];
    r4 = r5 + 11 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 11 | 0];
    r4 = r5 + 12 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 12 | 0];
    r4 = r5 + 13 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 13 | 0];
    r4 = r5 + 14 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 14 | 0];
    r4 = r5 + 15 | 0;
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[r2 + 15 | 0];
    _memcpy(r2, r1, 16);
    r4 = r9 - 1 | 0;
    if ((r4 | 0) == 0) {
      break;
    } else {
      r9 = r4;
      r5 = r5 + 16 | 0;
      r3 = r3 + 16 | 0;
    }
  }
  __gcry_burn_stack(88);
  STACKTOP = r6;
  return;
}
function _prepare_decryption(r1) {
  var r2, r3, r4, r5;
  r2 = r1 >> 2;
  r3 = (r1 + 240 | 0) >> 2;
  r4 = 0;
  while (1) {
    HEAP32[(r4 << 4 >> 2) + r3] = HEAP32[(r4 << 4 >> 2) + r2];
    HEAP32[((r4 << 4) + 4 >> 2) + r3] = HEAP32[((r4 << 4) + 4 >> 2) + r2];
    HEAP32[((r4 << 4) + 8 >> 2) + r3] = HEAP32[((r4 << 4) + 8 >> 2) + r2];
    HEAP32[((r4 << 4) + 12 >> 2) + r3] = HEAP32[((r4 << 4) + 12 >> 2) + r2];
    r5 = r4 + 1 | 0;
    if ((r5 | 0) == 15) {
      break;
    } else {
      r4 = r5;
    }
  }
  r4 = r1 + 480 | 0;
  if ((HEAP32[r4 >> 2] | 0) <= 1) {
    return;
  }
  r2 = r1 + 240 | 0;
  r1 = 1;
  while (1) {
    r3 = (r1 << 4) + r2 | 0;
    HEAP32[r3 >> 2] = HEAP32[(HEAPU8[(r1 << 4) + r2 + 1 | 0] << 2) + 498108 >> 2] ^ HEAP32[(HEAPU8[r3 | 0] << 2) + 499132 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 2 | 0] << 2) + 497084 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 3 | 0] << 2) + 496060 >> 2];
    r3 = (r1 << 4) + r2 + 4 | 0;
    HEAP32[r3 >> 2] = HEAP32[(HEAPU8[(r1 << 4) + r2 + 5 | 0] << 2) + 498108 >> 2] ^ HEAP32[(HEAPU8[r3] << 2) + 499132 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 6 | 0] << 2) + 497084 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 7 | 0] << 2) + 496060 >> 2];
    r3 = (r1 << 4) + r2 + 8 | 0;
    HEAP32[r3 >> 2] = HEAP32[(HEAPU8[(r1 << 4) + r2 + 9 | 0] << 2) + 498108 >> 2] ^ HEAP32[(HEAPU8[r3] << 2) + 499132 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 10 | 0] << 2) + 497084 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 11 | 0] << 2) + 496060 >> 2];
    r3 = (r1 << 4) + r2 + 12 | 0;
    HEAP32[r3 >> 2] = HEAP32[(HEAPU8[(r1 << 4) + r2 + 13 | 0] << 2) + 498108 >> 2] ^ HEAP32[(HEAPU8[r3] << 2) + 499132 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 14 | 0] << 2) + 497084 >> 2] ^ HEAP32[(HEAPU8[(r1 << 4) + r2 + 15 | 0] << 2) + 496060 >> 2];
    r3 = r1 + 1 | 0;
    if ((r3 | 0) < (HEAP32[r4 >> 2] | 0)) {
      r1 = r3;
    } else {
      break;
    }
  }
  return;
}
function _do_decrypt772(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r4;
  r6 = r4 + 16;
  r7 = r1 + 484 | 0;
  if ((HEAP32[r7 >> 2] | 0) == 0) {
    _prepare_decryption(r1);
    __gcry_burn_stack(64);
    HEAP32[r7 >> 2] = 1;
  }
  do {
    if ((r3 & 15 | 0) == 0) {
      if ((r2 & 15 | 0) != 0) {
        break;
      }
      _do_decrypt_aligned(r1, r2, r3);
      STACKTOP = r4;
      return;
    }
  } while (0);
  r7 = r5;
  _memcpy(r7, r3, 16);
  r3 = r6;
  _do_decrypt_aligned(r1, r3, r7);
  _memcpy(r2, r3, 16);
  STACKTOP = r4;
  return;
}
function _rijndael_setkey(r1, r2, r3) {
  var r4;
  r4 = _do_setkey774(r1, r2, r3);
  __gcry_burn_stack(164);
  return r4;
}
function _rijndael_encrypt(r1, r2, r3) {
  _do_encrypt765(r1, r2, r3);
  __gcry_burn_stack(64);
  return;
}
function _rijndael_decrypt(r1, r2, r3) {
  _do_decrypt772(r1, r2, r3);
  __gcry_burn_stack(64);
  return;
}
function _run_selftests773(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 8) {
    r4 = _selftest_fips_192(r3);
  } else if ((r1 | 0) == 9) {
    r4 = _selftest_fips_256(r3);
  } else if ((r1 | 0) == 7) {
    r4 = _selftest_fips_128(r2, r3);
  } else {
    r4 = 12;
  }
  return r4;
}
function _selftest_fips_128(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = _selftest_basic_128();
  do {
    if ((r3 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r4 = 0;
        return r4;
      }
      r5 = _selftest_fips_128_38a(2);
      if ((r5 | 0) != 0) {
        r6 = r5;
        r7 = 480596;
        break;
      }
      r5 = _selftest_fips_128_38a(5);
      if ((r5 | 0) == 0) {
        r4 = 0;
      } else {
        r6 = r5;
        r7 = 480112;
        break;
      }
      return r4;
    } else {
      r6 = r3;
      r7 = 485328;
    }
  } while (0);
  if ((r2 | 0) == 0) {
    r4 = 50;
    return r4;
  }
  FUNCTION_TABLE[r2](484472, 7, r7, r6);
  r4 = 50;
  return r4;
}
function _selftest_fips_192(r1) {
  var r2, r3;
  r2 = _selftest_basic_192();
  do {
    if ((r2 | 0) == 0) {
      r3 = 0;
    } else {
      if ((r1 | 0) == 0) {
        r3 = 50;
        break;
      }
      FUNCTION_TABLE[r1](484472, 8, 485328, r2);
      r3 = 50;
    }
  } while (0);
  return r3;
}
function _selftest_fips_256(r1) {
  var r2, r3;
  r2 = _selftest_basic_256();
  do {
    if ((r2 | 0) == 0) {
      r3 = 0;
    } else {
      if ((r1 | 0) == 0) {
        r3 = 50;
        break;
      }
      FUNCTION_TABLE[r1](484472, 9, 485328, r2);
      r3 = 50;
    }
  } while (0);
  return r3;
}
function _selftest_basic_256() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 504 | 0;
  r2 = r1;
  _rijndael_setkey(r2, 416720, 32);
  r3 = r1 + 488 | 0;
  _rijndael_encrypt(r2, r3, 416704);
  if ((_memcmp(r3, 416752, 16) | 0) != 0) {
    r4 = 483864;
    STACKTOP = r1;
    return r4;
  }
  _rijndael_decrypt(r2, r3, r3);
  r4 = (_memcmp(r3, 416704, 16) | 0) == 0 ? 0 : 482928;
  STACKTOP = r1;
  return r4;
}
function _selftest_basic_192() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 504 | 0;
  r2 = r1;
  _rijndael_setkey(r2, 416784, 24);
  r3 = r1 + 488 | 0;
  _rijndael_encrypt(r2, r3, 416768);
  if ((_memcmp(r3, 416808, 16) | 0) != 0) {
    r4 = 482224;
    STACKTOP = r1;
    return r4;
  }
  _rijndael_decrypt(r2, r3, r3);
  r4 = (_memcmp(r3, 416768, 16) | 0) == 0 ? 0 : 481720;
  STACKTOP = r1;
  return r4;
}
function _selftest_basic_128() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 504 | 0;
  r2 = r1;
  _rijndael_setkey(r2, 416840, 16);
  r3 = r1 + 488 | 0;
  _rijndael_encrypt(r2, r3, 416824);
  if ((_memcmp(r3, 416856, 16) | 0) != 0) {
    r4 = 476936;
    STACKTOP = r1;
    return r4;
  }
  _rijndael_decrypt(r2, r3, r3);
  r4 = (_memcmp(r3, 416824, 16) | 0) == 0 ? 0 : 476524;
  STACKTOP = r1;
  return r4;
}
function _selftest_fips_128_38a(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r2 = 0;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 352 | 0;
  r4 = r3;
  r5 = r3 + 328;
  r6 = r3 + 344, r7 = r6 >> 2;
  r8 = r3 + 348, r9 = r8 >> 2;
  _memcpy(r4, 416232, 328);
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  r10 = 0;
  while (1) {
    if (r10 >>> 0 >= 2) {
      break;
    }
    if ((HEAP32[r4 + (r10 * 164 & -1) >> 2] | 0) == (r1 | 0)) {
      break;
    } else {
      r10 = r10 + 1 | 0;
    }
  }
  if ((r10 | 0) == 2) {
    __gcry_cipher_close(HEAP32[r7]);
    __gcry_cipher_close(HEAP32[r9]);
    r11 = 479844;
    STACKTOP = r3;
    return r11;
  }
  r1 = r4 + (r10 * 164 & -1) | 0;
  if ((__gcry_cipher_open(r6, 7, HEAP32[r1 >> 2], 0) | 0) != 0) {
    __gcry_cipher_close(HEAP32[r7]);
    __gcry_cipher_close(HEAP32[r9]);
    r11 = 479276;
    STACKTOP = r3;
    return r11;
  }
  r6 = (__gcry_cipher_open(r8, 7, HEAP32[r1 >> 2], 0) | 0) == 0;
  r1 = HEAP32[r7];
  if (!r6) {
    __gcry_cipher_close(r1);
    __gcry_cipher_close(HEAP32[r9]);
    r11 = 479276;
    STACKTOP = r3;
    return r11;
  }
  r6 = r4 + (r10 * 164 & -1) + 4 | 0;
  do {
    if ((__gcry_cipher_setkey(r1, r6, 16) | 0) == 0) {
      r8 = (__gcry_cipher_setkey(HEAP32[r9], r6, 16) | 0) == 0;
      r12 = HEAP32[r7];
      if (!r8) {
        r13 = r12;
        break;
      }
      r8 = r4 + (r10 * 164 & -1) + 20 | 0;
      __gcry_cipher_setiv(r12, r8, 16);
      __gcry_cipher_setiv(HEAP32[r9], r8, 16);
      r8 = HEAP32[r7];
      r12 = r5 | 0;
      r14 = HEAP32[r9];
      r15 = 0;
      while (1) {
        if (r15 >>> 0 >= 4) {
          r2 = 2206;
          break;
        }
        r16 = (r15 << 5) + r4 + (r10 * 164 & -1) + 36 | 0;
        if ((__gcry_cipher_encrypt(r8, r12, 16, r16, 16) | 0) != 0) {
          r2 = 2199;
          break;
        }
        r17 = (r15 << 5) + r4 + (r10 * 164 & -1) + 52 | 0;
        if ((_memcmp(r12, r17, 16) | 0) != 0) {
          r2 = 2201;
          break;
        }
        if ((__gcry_cipher_decrypt(r14, r12, 16, r17, 16) | 0) != 0) {
          r2 = 2203;
          break;
        }
        if ((_memcmp(r12, r16, 16) | 0) == 0) {
          r15 = r15 + 1 | 0;
        } else {
          r2 = 2205;
          break;
        }
      }
      if (r2 == 2201) {
        __gcry_cipher_close(HEAP32[r7]);
        __gcry_cipher_close(HEAP32[r9]);
        r11 = 477996;
        STACKTOP = r3;
        return r11;
      } else if (r2 == 2203) {
        __gcry_cipher_close(HEAP32[r7]);
        __gcry_cipher_close(HEAP32[r9]);
        r11 = 477684;
        STACKTOP = r3;
        return r11;
      } else if (r2 == 2199) {
        __gcry_cipher_close(HEAP32[r7]);
        __gcry_cipher_close(HEAP32[r9]);
        r11 = 478312;
        STACKTOP = r3;
        return r11;
      } else if (r2 == 2205) {
        __gcry_cipher_close(HEAP32[r7]);
        __gcry_cipher_close(HEAP32[r9]);
        r11 = 477532;
        STACKTOP = r3;
        return r11;
      } else if (r2 == 2206) {
        __gcry_cipher_close(r8);
        __gcry_cipher_close(HEAP32[r9]);
        r11 = 0;
        STACKTOP = r3;
        return r11;
      }
    } else {
      r13 = HEAP32[r7];
    }
  } while (0);
  __gcry_cipher_close(r13);
  __gcry_cipher_close(HEAP32[r9]);
  r11 = 478996;
  STACKTOP = r3;
  return r11;
}
function _do_setkey774(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33;
  r4 = 0;
  r5 = STACKTOP;
  r6 = r1;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r9 = r8;
  do {
    if ((__gcry_fips_mode() | 0) != 0 | HEAP8[457904]) {
      r4 = 2220;
    } else {
      HEAP8[457904] = 1;
      r10 = _selftest775();
      HEAP32[114475] = r10;
      if ((r10 | 0) == 0) {
        break;
      }
      __gcry_log_error(476324, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r10, tempInt));
      r4 = 2220;
      break;
    }
  } while (0);
  do {
    if (r4 == 2220) {
      if ((HEAP32[114475] | 0) == 0) {
        break;
      } else {
        r11 = 50;
      }
      STACKTOP = r5;
      return r11;
    }
  } while (0);
  HEAP32[r1 + 484 >> 2] = 0;
  if ((r3 | 0) == 32) {
    r12 = 8;
    r13 = 14;
  } else if ((r3 | 0) == 16) {
    r12 = 4;
    r13 = 10;
  } else if ((r3 | 0) == 24) {
    r12 = 6;
    r13 = 12;
  } else {
    r11 = 44;
    STACKTOP = r5;
    return r11;
  }
  HEAP32[r1 + 480 >> 2] = r13;
  r1 = r7;
  r4 = 0;
  while (1) {
    HEAP8[(r4 >> 2 << 2) + (r4 & 3) + r1 | 0] = HEAP8[r2 + r4 | 0];
    r10 = r4 + 1 | 0;
    if ((r10 | 0) == (r3 | 0)) {
      break;
    } else {
      r4 = r10;
    }
  }
  r4 = r12 - 1 | 0;
  r3 = r7;
  r7 = r8;
  r2 = r4;
  while (1) {
    HEAP32[r7 + (r2 << 2) >> 2] = HEAP32[r3 + (r2 << 2) >> 2];
    if ((r2 | 0) > 0) {
      r2 = r2 - 1 | 0;
    } else {
      break;
    }
  }
  r2 = r13 | 1;
  r3 = 0;
  r7 = 0;
  r1 = 0;
  while (1) {
    if ((r3 | 0) < (r12 | 0) & (r1 | 0) < 4) {
      r10 = r3 - r12 | 0;
      r14 = r1 - 4 | 0;
      r15 = r10 >>> 0 > r14 >>> 0 ? r10 : r14;
      r14 = r3 - r12 | 0;
      r10 = r1 - 4 | 0;
      _memcpy((r7 << 4) + (r1 << 2) + r6 | 0, (r3 << 2) + r9 | 0, (r14 >>> 0 > r10 >>> 0 ? r14 : r10) * -4 & -1);
      r16 = r3 - r15 | 0;
      r17 = r1 - r15 | 0;
    } else {
      r16 = r3;
      r17 = r1;
    }
    r15 = (r17 | 0) == 4;
    r18 = (r15 & 1) + r7 | 0;
    r19 = r15 ? 0 : r17;
    if ((r16 | 0) < (r12 | 0) & (r18 | 0) < (r2 | 0)) {
      r3 = r16;
      r7 = r18;
      r1 = r19;
    } else {
      break;
    }
  }
  r1 = r13 | 1;
  if ((r18 | 0) >= (r1 | 0)) {
    r11 = 0;
    STACKTOP = r5;
    return r11;
  }
  r13 = r8, r7 = r13 >> 2;
  r16 = (r4 << 2) + r13 + 1 | 0;
  r3 = r8;
  r8 = (r4 << 2) + r13 + 2 | 0;
  r2 = r3 + 1 | 0;
  r17 = (r4 << 2) + r13 + 3 | 0;
  r15 = r3 + 2 | 0;
  r10 = (r4 << 2) + r13 | 0;
  r4 = r3 + 3 | 0;
  r3 = (r12 | 0) == 8;
  r14 = r12 >>> 1;
  r20 = r18;
  r18 = r19;
  r19 = 0;
  while (1) {
    HEAP8[r9] = HEAP8[r9] ^ HEAP8[HEAPU8[r16] + 512716 | 0];
    HEAP8[r2] = HEAP8[r2] ^ HEAP8[HEAPU8[r8] + 512716 | 0];
    HEAP8[r15] = HEAP8[r15] ^ HEAP8[HEAPU8[r17] + 512716 | 0];
    HEAP8[r4] = HEAP8[r4] ^ HEAP8[HEAPU8[r10] + 512716 | 0];
    r21 = r19 + 1 | 0;
    HEAP8[r9] = (HEAPU8[r9] ^ HEAP32[(r19 << 2) + 439300 >> 2]) & 255;
    L2961 : do {
      if (r3) {
        r22 = 1;
        while (1) {
          r23 = (r22 << 2) + r13 | 0;
          HEAP32[r23 >> 2] = HEAP32[r23 >> 2] ^ HEAP32[(r22 - 1 << 2 >> 2) + r7];
          r23 = r22 + 1 | 0;
          if ((r23 | 0) < (r14 | 0)) {
            r22 = r23;
          } else {
            break;
          }
        }
        r22 = r14 - 1 | 0;
        r23 = (r14 << 2) + r13 | 0;
        HEAP8[r23] = HEAP8[r23] ^ HEAP8[HEAPU8[(r22 << 2) + r13 | 0] + 512716 | 0];
        r23 = (r14 << 2) + r13 + 1 | 0;
        HEAP8[r23] = HEAP8[r23] ^ HEAP8[HEAPU8[(r22 << 2) + r13 + 1 | 0] + 512716 | 0];
        r23 = (r14 << 2) + r13 + 2 | 0;
        HEAP8[r23] = HEAP8[r23] ^ HEAP8[HEAPU8[(r22 << 2) + r13 + 2 | 0] + 512716 | 0];
        r23 = (r14 << 2) + r13 + 3 | 0;
        HEAP8[r23] = HEAP8[r23] ^ HEAP8[HEAPU8[(r22 << 2) + r13 + 3 | 0] + 512716 | 0];
        r22 = r14 + 1 | 0;
        if (r22 >>> 0 < r12 >>> 0) {
          r24 = r14;
          r25 = r22;
        } else {
          break;
        }
        while (1) {
          r22 = (r25 << 2) + r13 | 0;
          HEAP32[r22 >> 2] = HEAP32[r22 >> 2] ^ HEAP32[(r24 << 2 >> 2) + r7];
          r22 = r25 + 1 | 0;
          if ((r22 | 0) < (r12 | 0)) {
            r24 = r25;
            r25 = r22;
          } else {
            break L2961;
          }
        }
      } else {
        r22 = 1;
        while (1) {
          r23 = (r22 << 2) + r13 | 0;
          HEAP32[r23 >> 2] = HEAP32[r23 >> 2] ^ HEAP32[(r22 - 1 << 2 >> 2) + r7];
          r23 = r22 + 1 | 0;
          if ((r23 | 0) < (r12 | 0)) {
            r22 = r23;
          } else {
            break L2961;
          }
        }
      }
    } while (0);
    L2970 : do {
      if ((r20 | 0) < (r1 | 0)) {
        r22 = 0;
        r23 = r20;
        r26 = r18;
        while (1) {
          if ((r22 | 0) < (r12 | 0) & (r26 | 0) < 4) {
            r27 = r22 - r12 | 0;
            r28 = r26 - 4 | 0;
            r29 = r27 >>> 0 > r28 >>> 0 ? r27 : r28;
            r28 = r22 - r12 | 0;
            r27 = r26 - 4 | 0;
            _memcpy((r23 << 4) + (r26 << 2) + r6 | 0, (r22 << 2) + r9 | 0, (r28 >>> 0 > r27 >>> 0 ? r28 : r27) * -4 & -1);
            r30 = r22 - r29 | 0;
            r31 = r26 - r29 | 0;
          } else {
            r30 = r22;
            r31 = r26;
          }
          r29 = (r31 | 0) == 4;
          r27 = (r29 & 1) + r23 | 0;
          r28 = r29 ? 0 : r31;
          if ((r30 | 0) < (r12 | 0) & (r27 | 0) < (r1 | 0)) {
            r22 = r30;
            r23 = r27;
            r26 = r28;
          } else {
            r32 = r27;
            r33 = r28;
            break L2970;
          }
        }
      } else {
        r32 = r20;
        r33 = r18;
      }
    } while (0);
    if ((r32 | 0) < (r1 | 0)) {
      r20 = r32;
      r18 = r33;
      r19 = r21;
    } else {
      r11 = 0;
      break;
    }
  }
  STACKTOP = r5;
  return r11;
}
function _selftest775() {
  var r1, r2;
  r1 = _selftest_basic_128();
  if ((r1 | 0) != 0) {
    r2 = r1;
    return r2;
  }
  r1 = _selftest_basic_192();
  if ((r1 | 0) == 0) {
    return _selftest_basic_256();
  } else {
    r2 = r1;
    return r2;
  }
}
function _do_decrypt_aligned(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24;
  r4 = r1 >> 2;
  r5 = HEAP32[r4 + 120];
  r6 = r1 + 240 | 0;
  r1 = r6 >> 2;
  r7 = HEAP32[(r5 << 4 >> 2) + r1] ^ HEAP32[r3 >> 2];
  r8 = HEAP32[((r5 << 4) + 4 >> 2) + r1] ^ HEAP32[r3 + 4 >> 2];
  r9 = HEAP32[((r5 << 4) + 8 >> 2) + r1] ^ HEAP32[r3 + 8 >> 2];
  r10 = HEAP32[((r5 << 4) + 12 >> 2) + r1] ^ HEAP32[r3 + 12 >> 2];
  r3 = r2 >> 2;
  HEAP32[r3] = HEAP32[((r10 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r7 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 500156 >> 2];
  r11 = r2 + 4 | 0;
  r12 = r11 >> 2;
  HEAP32[r12] = HEAP32[((r7 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r8 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r10 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 500156 >> 2];
  r13 = r2 + 8 | 0;
  r14 = r13 >> 2;
  HEAP32[r14] = HEAP32[((r8 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r9 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r10 >>> 24 << 2) + 500156 >> 2];
  r15 = HEAP32[((r9 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r10 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 500156 >> 2];
  r7 = r2 + 12 | 0;
  r8 = r7 >> 2;
  HEAP32[r8] = r15;
  r10 = r5 - 1 | 0;
  r5 = HEAP32[r3];
  L2986 : do {
    if ((r10 | 0) > 1) {
      r9 = r15;
      r16 = r10;
      r17 = r5;
      while (1) {
        r18 = HEAP32[(r16 << 4 >> 2) + r1] ^ r17;
        r19 = HEAP32[((r16 << 4) + 4 >> 2) + r1] ^ HEAP32[r12];
        r20 = HEAP32[((r16 << 4) + 8 >> 2) + r1] ^ HEAP32[r14];
        r21 = HEAP32[((r16 << 4) + 12 >> 2) + r1] ^ r9;
        HEAP32[r3] = HEAP32[((r21 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r18 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r20 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r19 >>> 24 << 2) + 500156 >> 2];
        HEAP32[r12] = HEAP32[((r18 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r19 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r21 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r20 >>> 24 << 2) + 500156 >> 2];
        HEAP32[r14] = HEAP32[((r19 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r20 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r18 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r21 >>> 24 << 2) + 500156 >> 2];
        r22 = HEAP32[((r20 >>> 8 & 255) << 2) + 502204 >> 2] ^ HEAP32[((r21 & 255) << 2) + 503228 >> 2] ^ HEAP32[((r19 >>> 16 & 255) << 2) + 501180 >> 2] ^ HEAP32[(r18 >>> 24 << 2) + 500156 >> 2];
        HEAP32[r8] = r22;
        r18 = r16 - 1 | 0;
        r19 = HEAP32[r3];
        if ((r18 | 0) > 1) {
          r9 = r22;
          r16 = r18;
          r17 = r19;
        } else {
          r23 = r22;
          r24 = r19;
          break L2986;
        }
      }
    } else {
      r23 = r15;
      r24 = r5;
    }
  } while (0);
  r5 = HEAP32[r4 + 64] ^ r24;
  r24 = HEAP32[r4 + 65] ^ HEAP32[r12];
  r15 = HEAP32[r4 + 66] ^ HEAP32[r14];
  r1 = HEAP32[r4 + 67] ^ r23;
  HEAP8[r2] = HEAP8[(r5 & 255) + 512460 | 0];
  HEAP8[r2 + 1 | 0] = HEAP8[(r1 >>> 8 & 255) + 512460 | 0];
  HEAP8[r2 + 2 | 0] = HEAP8[(r15 >>> 16 & 255) + 512460 | 0];
  HEAP8[r2 + 3 | 0] = HEAP8[(r24 >>> 24) + 512460 | 0];
  HEAP8[r11] = HEAP8[(r24 & 255) + 512460 | 0];
  HEAP8[r2 + 5 | 0] = HEAP8[(r5 >>> 8 & 255) + 512460 | 0];
  HEAP8[r2 + 6 | 0] = HEAP8[(r1 >>> 16 & 255) + 512460 | 0];
  HEAP8[r2 + 7 | 0] = HEAP8[(r15 >>> 24) + 512460 | 0];
  HEAP8[r13] = HEAP8[(r15 & 255) + 512460 | 0];
  HEAP8[r2 + 9 | 0] = HEAP8[(r24 >>> 8 & 255) + 512460 | 0];
  HEAP8[r2 + 10 | 0] = HEAP8[(r5 >>> 16 & 255) + 512460 | 0];
  HEAP8[r2 + 11 | 0] = HEAP8[(r1 >>> 24) + 512460 | 0];
  HEAP8[r7] = HEAP8[(r1 & 255) + 512460 | 0];
  HEAP8[r2 + 13 | 0] = HEAP8[(r15 >>> 8 & 255) + 512460 | 0];
  HEAP8[r2 + 14 | 0] = HEAP8[(r24 >>> 16 & 255) + 512460 | 0];
  HEAP8[r2 + 15 | 0] = HEAP8[(r5 >>> 24) + 512460 | 0];
  HEAP32[r3] = HEAP32[r3] ^ HEAP32[r6 >> 2];
  HEAP32[r12] = HEAP32[r12] ^ HEAP32[r6 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r4 + 62];
  HEAP32[r8] = HEAP32[r8] ^ HEAP32[r4 + 63];
  return;
}
function __gcry_rmd160_init(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP32[r2] = 1732584193;
  HEAP32[r2 + 1] = -271733879;
  HEAP32[r2 + 2] = -1732584194;
  HEAP32[r2 + 3] = 271733878;
  HEAP32[r2 + 4] = -1009589776;
  HEAP32[r2 + 5] = 0;
  HEAP32[r2 + 22] = 0;
  return;
}
function __gcry_rmd160_mixblock(r1, r2) {
  var r3, r4;
  r3 = r2 >> 2;
  r4 = r1 >> 2;
  _transform782(r1, r2);
  HEAP32[r3] = HEAP32[r4];
  HEAP32[r3 + 1] = HEAP32[r4 + 1];
  HEAP32[r3 + 2] = HEAP32[r4 + 2];
  HEAP32[r3 + 3] = HEAP32[r4 + 3];
  HEAP32[r3 + 4] = HEAP32[r4 + 4];
  return;
}
function _transform782(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r3 = r2;
  r4 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 4 | 0;
  r5 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 8 | 0;
  r6 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 12 | 0;
  r7 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 16 | 0;
  r8 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 20 | 0;
  r9 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 24 | 0;
  r10 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 28 | 0;
  r11 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 32 | 0;
  r12 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 36 | 0;
  r13 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 40 | 0;
  r14 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 44 | 0;
  r15 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 48 | 0;
  r16 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 52 | 0;
  r17 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 56 | 0;
  r18 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = r2 + 60 | 0;
  r2 = HEAPU8[r3] | HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24 | 0;
  r3 = (r1 | 0) >> 2;
  r19 = HEAP32[r3];
  r20 = r1 + 4 | 0;
  r21 = HEAP32[r20 >> 2];
  r22 = r1 + 8 | 0;
  r23 = HEAP32[r22 >> 2];
  r24 = (r1 + 12 | 0) >> 2;
  r25 = HEAP32[r24];
  r26 = (r1 + 16 | 0) >> 2;
  r1 = HEAP32[r26];
  r27 = r19 + r4 + (r23 ^ r21 ^ r25) | 0;
  r28 = (r27 << 11 | r27 >>> 21) + r1 | 0;
  r27 = r23 << 10 | r23 >>> 22;
  r29 = r1 + r5 + (r27 ^ r21 ^ r28) | 0;
  r30 = (r29 << 14 | r29 >>> 18) + r25 | 0;
  r29 = r21 << 10 | r21 >>> 22;
  r31 = r25 + r6 + (r28 ^ r29 ^ r30) | 0;
  r32 = (r31 << 15 | r31 >>> 17) + r27 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r27 + r7 + (r30 ^ r31 ^ r32) | 0;
  r33 = (r28 << 12 | r28 >>> 20) + r29 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r29 + r8 + (r32 ^ r28 ^ r33) | 0;
  r34 = (r30 << 5 | r30 >>> 27) + r31 | 0;
  r30 = r32 << 10 | r32 >>> 22;
  r32 = r31 + r9 + (r33 ^ r30 ^ r34) | 0;
  r31 = (r32 << 8 | r32 >>> 24) + r28 | 0;
  r32 = r33 << 10 | r33 >>> 22;
  r33 = r28 + r10 + (r34 ^ r32 ^ r31) | 0;
  r28 = (r33 << 7 | r33 >>> 25) + r30 | 0;
  r33 = r34 << 10 | r34 >>> 22;
  r34 = r30 + r11 + (r31 ^ r33 ^ r28) | 0;
  r30 = (r34 << 9 | r34 >>> 23) + r32 | 0;
  r34 = r31 << 10 | r31 >>> 22;
  r31 = r32 + r12 + (r28 ^ r34 ^ r30) | 0;
  r32 = (r31 << 11 | r31 >>> 21) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r33 + r13 + (r30 ^ r31 ^ r32) | 0;
  r33 = (r28 << 13 | r28 >>> 19) + r34 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r34 + r14 + (r32 ^ r28 ^ r33) | 0;
  r34 = (r30 << 14 | r30 >>> 18) + r31 | 0;
  r30 = r32 << 10 | r32 >>> 22;
  r32 = r31 + r15 + (r33 ^ r30 ^ r34) | 0;
  r31 = (r32 << 15 | r32 >>> 17) + r28 | 0;
  r32 = r33 << 10 | r33 >>> 22;
  r33 = r28 + r16 + (r34 ^ r32 ^ r31) | 0;
  r28 = (r33 << 6 | r33 >>> 26) + r30 | 0;
  r33 = r34 << 10 | r34 >>> 22;
  r34 = r30 + r17 + (r31 ^ r33 ^ r28) | 0;
  r30 = (r34 << 7 | r34 >>> 25) + r32 | 0;
  r34 = r31 << 10 | r31 >>> 22;
  r31 = r32 + r18 + (r28 ^ r34 ^ r30) | 0;
  r32 = (r31 << 9 | r31 >>> 23) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r33 + r2 + (r30 ^ r31 ^ r32) | 0;
  r33 = (r28 << 8 | r28 >>> 24) + r34 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r11 + r34 + (r33 & r32 | r28 & (r33 ^ -1)) + 1518500249 | 0;
  r34 = (r30 << 7 | r30 >>> 25) + r31 | 0;
  r30 = r32 << 10 | r32 >>> 22;
  r32 = r8 + r31 + (r34 & r33 | r30 & (r34 ^ -1)) + 1518500249 | 0;
  r31 = (r32 << 6 | r32 >>> 26) + r28 | 0;
  r32 = r33 << 10 | r33 >>> 22;
  r33 = r17 + r28 + (r31 & r34 | r32 & (r31 ^ -1)) + 1518500249 | 0;
  r28 = (r33 << 8 | r33 >>> 24) + r30 | 0;
  r33 = r34 << 10 | r34 >>> 22;
  r34 = r5 + r30 + (r28 & r31 | r33 & (r28 ^ -1)) + 1518500249 | 0;
  r30 = (r34 << 13 | r34 >>> 19) + r32 | 0;
  r34 = r31 << 10 | r31 >>> 22;
  r31 = r14 + r32 + (r30 & r28 | r34 & (r30 ^ -1)) + 1518500249 | 0;
  r32 = (r31 << 11 | r31 >>> 21) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r10 + r33 + (r32 & r30 | r31 & (r32 ^ -1)) + 1518500249 | 0;
  r33 = (r28 << 9 | r28 >>> 23) + r34 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r2 + r34 + (r33 & r32 | r28 & (r33 ^ -1)) + 1518500249 | 0;
  r34 = (r30 << 7 | r30 >>> 25) + r31 | 0;
  r30 = r32 << 10 | r32 >>> 22;
  r32 = r7 + r31 + (r34 & r33 | r30 & (r34 ^ -1)) + 1518500249 | 0;
  r31 = (r32 << 15 | r32 >>> 17) + r28 | 0;
  r32 = r33 << 10 | r33 >>> 22;
  r33 = r16 + r28 + (r31 & r34 | r32 & (r31 ^ -1)) + 1518500249 | 0;
  r28 = (r33 << 7 | r33 >>> 25) + r30 | 0;
  r33 = r34 << 10 | r34 >>> 22;
  r34 = r4 + r30 + (r28 & r31 | r33 & (r28 ^ -1)) + 1518500249 | 0;
  r30 = (r34 << 12 | r34 >>> 20) + r32 | 0;
  r34 = r31 << 10 | r31 >>> 22;
  r31 = r13 + r32 + (r30 & r28 | r34 & (r30 ^ -1)) + 1518500249 | 0;
  r32 = (r31 << 15 | r31 >>> 17) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r9 + r33 + (r32 & r30 | r31 & (r32 ^ -1)) + 1518500249 | 0;
  r33 = (r28 << 9 | r28 >>> 23) + r34 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r6 + r34 + (r33 & r32 | r28 & (r33 ^ -1)) + 1518500249 | 0;
  r34 = (r30 << 11 | r30 >>> 21) + r31 | 0;
  r30 = r32 << 10 | r32 >>> 22;
  r32 = r18 + r31 + (r34 & r33 | r30 & (r34 ^ -1)) + 1518500249 | 0;
  r31 = (r32 << 7 | r32 >>> 25) + r28 | 0;
  r32 = r33 << 10 | r33 >>> 22;
  r33 = r15 + r28 + (r31 & r34 | r32 & (r31 ^ -1)) + 1518500249 | 0;
  r28 = (r33 << 13 | r33 >>> 19) + r30 | 0;
  r33 = r34 << 10 | r34 >>> 22;
  r34 = r28 ^ -1;
  r35 = r12 + r30 + (r28 & r31 | r33 & r34) + 1518500249 | 0;
  r30 = (r35 << 12 | r35 >>> 20) + r32 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r7 + r32 + ((r30 | r34) ^ r35) + 1859775393 | 0;
  r34 = (r31 << 11 | r31 >>> 21) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r14 + r33 + ((r34 | r30 ^ -1) ^ r31) + 1859775393 | 0;
  r33 = (r28 << 13 | r28 >>> 19) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r18 + r35 + ((r33 | r34 ^ -1) ^ r28) + 1859775393 | 0;
  r35 = (r30 << 6 | r30 >>> 26) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r8 + r31 + ((r35 | r33 ^ -1) ^ r30) + 1859775393 | 0;
  r31 = (r34 << 7 | r34 >>> 25) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r13 + r28 + ((r31 | r35 ^ -1) ^ r34) + 1859775393 | 0;
  r28 = (r33 << 14 | r33 >>> 18) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r2 + r30 + ((r28 | r31 ^ -1) ^ r33) + 1859775393 | 0;
  r30 = (r35 << 9 | r35 >>> 23) + r34 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r12 + r34 + ((r30 | r28 ^ -1) ^ r35) + 1859775393 | 0;
  r34 = (r31 << 13 | r31 >>> 19) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r5 + r33 + ((r34 | r30 ^ -1) ^ r31) + 1859775393 | 0;
  r33 = (r28 << 15 | r28 >>> 17) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r6 + r35 + ((r33 | r34 ^ -1) ^ r28) + 1859775393 | 0;
  r35 = (r30 << 14 | r30 >>> 18) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r11 + r31 + ((r35 | r33 ^ -1) ^ r30) + 1859775393 | 0;
  r31 = (r34 << 8 | r34 >>> 24) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r4 + r28 + ((r31 | r35 ^ -1) ^ r34) + 1859775393 | 0;
  r28 = (r33 << 13 | r33 >>> 19) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r10 + r30 + ((r28 | r31 ^ -1) ^ r33) + 1859775393 | 0;
  r30 = (r35 << 6 | r35 >>> 26) + r34 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r17 + r34 + ((r30 | r28 ^ -1) ^ r35) + 1859775393 | 0;
  r34 = (r31 << 5 | r31 >>> 27) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r15 + r33 + ((r34 | r30 ^ -1) ^ r31) + 1859775393 | 0;
  r33 = (r28 << 12 | r28 >>> 20) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r9 + r35 + ((r33 | r34 ^ -1) ^ r28) + 1859775393 | 0;
  r35 = (r30 << 7 | r30 >>> 25) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r16 + r31 + ((r35 | r33 ^ -1) ^ r30) + 1859775393 | 0;
  r31 = (r34 << 5 | r34 >>> 27) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r5 - 1894007588 + r28 + (r31 & r34 | r35 & (r34 ^ -1)) | 0;
  r28 = (r33 << 11 | r33 >>> 21) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r13 - 1894007588 + r30 + (r28 & r33 | r31 & (r33 ^ -1)) | 0;
  r30 = (r35 << 12 | r35 >>> 20) + r34 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r15 - 1894007588 + r34 + (r30 & r35 | r28 & (r35 ^ -1)) | 0;
  r34 = (r31 << 14 | r31 >>> 18) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r14 - 1894007588 + r33 + (r34 & r31 | r30 & (r31 ^ -1)) | 0;
  r33 = (r28 << 15 | r28 >>> 17) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r4 - 1894007588 + r35 + (r33 & r28 | r34 & (r28 ^ -1)) | 0;
  r35 = (r30 << 14 | r30 >>> 18) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r12 - 1894007588 + r31 + (r35 & r30 | r33 & (r30 ^ -1)) | 0;
  r31 = (r34 << 15 | r34 >>> 17) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r16 - 1894007588 + r28 + (r31 & r34 | r35 & (r34 ^ -1)) | 0;
  r28 = (r33 << 9 | r33 >>> 23) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r8 - 1894007588 + r30 + (r28 & r33 | r31 & (r33 ^ -1)) | 0;
  r30 = (r35 << 8 | r35 >>> 24) + r34 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r17 - 1894007588 + r34 + (r30 & r35 | r28 & (r35 ^ -1)) | 0;
  r34 = (r31 << 9 | r31 >>> 23) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r7 - 1894007588 + r33 + (r34 & r31 | r30 & (r31 ^ -1)) | 0;
  r33 = (r28 << 14 | r28 >>> 18) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r11 - 1894007588 + r35 + (r33 & r28 | r34 & (r28 ^ -1)) | 0;
  r35 = (r30 << 5 | r30 >>> 27) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r2 - 1894007588 + r31 + (r35 & r30 | r33 & (r30 ^ -1)) | 0;
  r31 = (r34 << 6 | r34 >>> 26) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r18 - 1894007588 + r28 + (r31 & r34 | r35 & (r34 ^ -1)) | 0;
  r28 = (r33 << 8 | r33 >>> 24) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r9 - 1894007588 + r30 + (r28 & r33 | r31 & (r33 ^ -1)) | 0;
  r30 = (r35 << 6 | r35 >>> 26) + r34 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r10 - 1894007588 + r34 + (r30 & r35 | r28 & (r35 ^ -1)) | 0;
  r34 = (r31 << 5 | r31 >>> 27) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r6 - 1894007588 + r33 + (r34 & r31 | r30 & (r31 ^ -1)) | 0;
  r33 = (r28 << 12 | r28 >>> 20) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r8 - 1454113458 + r35 + (r33 ^ (r34 | r28 ^ -1)) | 0;
  r35 = (r30 << 9 | r30 >>> 23) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r4 - 1454113458 + r31 + (r35 ^ (r33 | r30 ^ -1)) | 0;
  r31 = (r34 << 15 | r34 >>> 17) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r9 - 1454113458 + r28 + (r31 ^ (r35 | r34 ^ -1)) | 0;
  r28 = (r33 << 5 | r33 >>> 27) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r13 - 1454113458 + r30 + (r28 ^ (r31 | r33 ^ -1)) | 0;
  r30 = (r35 << 11 | r35 >>> 21) + r34 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r11 - 1454113458 + r34 + (r30 ^ (r28 | r35 ^ -1)) | 0;
  r34 = (r31 << 6 | r31 >>> 26) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r16 - 1454113458 + r33 + (r34 ^ (r30 | r31 ^ -1)) | 0;
  r33 = (r28 << 8 | r28 >>> 24) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r6 - 1454113458 + r35 + (r33 ^ (r34 | r28 ^ -1)) | 0;
  r35 = (r30 << 13 | r30 >>> 19) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r14 - 1454113458 + r31 + (r35 ^ (r33 | r30 ^ -1)) | 0;
  r31 = (r34 << 12 | r34 >>> 20) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r18 - 1454113458 + r28 + (r31 ^ (r35 | r34 ^ -1)) | 0;
  r28 = (r33 << 5 | r33 >>> 27) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r5 - 1454113458 + r30 + (r28 ^ (r31 | r33 ^ -1)) | 0;
  r30 = (r35 << 12 | r35 >>> 20) + r34 | 0;
  r35 = r31 << 10 | r31 >>> 22;
  r31 = r7 - 1454113458 + r34 + (r30 ^ (r28 | r35 ^ -1)) | 0;
  r34 = (r31 << 13 | r31 >>> 19) + r33 | 0;
  r31 = r28 << 10 | r28 >>> 22;
  r28 = r12 - 1454113458 + r33 + (r34 ^ (r30 | r31 ^ -1)) | 0;
  r33 = (r28 << 14 | r28 >>> 18) + r35 | 0;
  r28 = r30 << 10 | r30 >>> 22;
  r30 = r15 - 1454113458 + r35 + (r33 ^ (r34 | r28 ^ -1)) | 0;
  r35 = (r30 << 11 | r30 >>> 21) + r31 | 0;
  r30 = r34 << 10 | r34 >>> 22;
  r34 = r10 - 1454113458 + r31 + (r35 ^ (r33 | r30 ^ -1)) | 0;
  r31 = (r34 << 8 | r34 >>> 24) + r28 | 0;
  r34 = r33 << 10 | r33 >>> 22;
  r33 = r2 - 1454113458 + r28 + (r31 ^ (r35 | r34 ^ -1)) | 0;
  r28 = (r33 << 5 | r33 >>> 27) + r30 | 0;
  r33 = r35 << 10 | r35 >>> 22;
  r35 = r17 - 1454113458 + r30 + (r28 ^ (r31 | r33 ^ -1)) | 0;
  r30 = r9 + r19 + ((r23 | r25 ^ -1) ^ r21) + 1352829926 | 0;
  r19 = (r30 << 8 | r30 >>> 24) + r1 | 0;
  r30 = r18 + r1 + (r19 ^ (r21 | r27 ^ -1)) + 1352829926 | 0;
  r1 = (r30 << 9 | r30 >>> 23) + r25 | 0;
  r30 = r11 + r25 + (r1 ^ (r19 | r29 ^ -1)) + 1352829926 | 0;
  r25 = (r30 << 9 | r30 >>> 23) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r4 + r27 + (r25 ^ (r1 | r30 ^ -1)) + 1352829926 | 0;
  r27 = (r19 << 11 | r19 >>> 21) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r13 + r29 + (r27 ^ (r25 | r19 ^ -1)) + 1352829926 | 0;
  r29 = (r1 << 13 | r1 >>> 19) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r6 + r30 + (r29 ^ (r27 | r1 ^ -1)) + 1352829926 | 0;
  r30 = (r25 << 15 | r25 >>> 17) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r15 + r19 + (r30 ^ (r29 | r25 ^ -1)) + 1352829926 | 0;
  r19 = (r27 << 15 | r27 >>> 17) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r8 + r1 + (r19 ^ (r30 | r27 ^ -1)) + 1352829926 | 0;
  r1 = (r29 << 5 | r29 >>> 27) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r17 + r25 + (r1 ^ (r19 | r29 ^ -1)) + 1352829926 | 0;
  r25 = (r30 << 7 | r30 >>> 25) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r10 + r27 + (r25 ^ (r1 | r30 ^ -1)) + 1352829926 | 0;
  r27 = (r19 << 7 | r19 >>> 25) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r2 + r29 + (r27 ^ (r25 | r19 ^ -1)) + 1352829926 | 0;
  r29 = (r1 << 8 | r1 >>> 24) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r12 + r30 + (r29 ^ (r27 | r1 ^ -1)) + 1352829926 | 0;
  r30 = (r25 << 11 | r25 >>> 21) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r5 + r19 + (r30 ^ (r29 | r25 ^ -1)) + 1352829926 | 0;
  r19 = (r27 << 14 | r27 >>> 18) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r14 + r1 + (r19 ^ (r30 | r27 ^ -1)) + 1352829926 | 0;
  r1 = (r29 << 14 | r29 >>> 18) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r7 + r25 + (r1 ^ (r19 | r29 ^ -1)) + 1352829926 | 0;
  r25 = (r30 << 12 | r30 >>> 20) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r16 + r27 + (r25 ^ (r1 | r30 ^ -1)) + 1352829926 | 0;
  r27 = (r19 << 6 | r19 >>> 26) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r10 + r29 + (r27 & r19 | r25 & (r19 ^ -1)) + 1548603684 | 0;
  r29 = (r1 << 9 | r1 >>> 23) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r15 + r30 + (r29 & r1 | r27 & (r1 ^ -1)) + 1548603684 | 0;
  r30 = (r25 << 13 | r25 >>> 19) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r7 + r19 + (r30 & r25 | r29 & (r25 ^ -1)) + 1548603684 | 0;
  r19 = (r27 << 15 | r27 >>> 17) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r11 + r1 + (r19 & r27 | r30 & (r27 ^ -1)) + 1548603684 | 0;
  r1 = (r29 << 7 | r29 >>> 25) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r4 + r25 + (r1 & r29 | r19 & (r29 ^ -1)) + 1548603684 | 0;
  r25 = (r30 << 12 | r30 >>> 20) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r17 + r27 + (r25 & r30 | r1 & (r30 ^ -1)) + 1548603684 | 0;
  r27 = (r19 << 8 | r19 >>> 24) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r9 + r29 + (r27 & r19 | r25 & (r19 ^ -1)) + 1548603684 | 0;
  r29 = (r1 << 9 | r1 >>> 23) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r14 + r30 + (r29 & r1 | r27 & (r1 ^ -1)) + 1548603684 | 0;
  r30 = (r25 << 11 | r25 >>> 21) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r18 + r19 + (r30 & r25 | r29 & (r25 ^ -1)) + 1548603684 | 0;
  r19 = (r27 << 7 | r27 >>> 25) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r2 + r1 + (r19 & r27 | r30 & (r27 ^ -1)) + 1548603684 | 0;
  r1 = (r29 << 7 | r29 >>> 25) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r12 + r25 + (r1 & r29 | r19 & (r29 ^ -1)) + 1548603684 | 0;
  r25 = (r30 << 12 | r30 >>> 20) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r16 + r27 + (r25 & r30 | r1 & (r30 ^ -1)) + 1548603684 | 0;
  r27 = (r19 << 7 | r19 >>> 25) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r8 + r29 + (r27 & r19 | r25 & (r19 ^ -1)) + 1548603684 | 0;
  r29 = (r1 << 6 | r1 >>> 26) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r13 + r30 + (r29 & r1 | r27 & (r1 ^ -1)) + 1548603684 | 0;
  r30 = (r25 << 15 | r25 >>> 17) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r5 + r19 + (r30 & r25 | r29 & (r25 ^ -1)) + 1548603684 | 0;
  r19 = (r27 << 13 | r27 >>> 19) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r6 + r1 + (r19 & r27 | r30 & (r27 ^ -1)) + 1548603684 | 0;
  r1 = (r29 << 11 | r29 >>> 21) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r2 + r25 + ((r1 | r19 ^ -1) ^ r29) + 1836072691 | 0;
  r25 = (r30 << 9 | r30 >>> 23) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r9 + r27 + ((r25 | r1 ^ -1) ^ r30) + 1836072691 | 0;
  r27 = (r19 << 7 | r19 >>> 25) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r5 + r29 + ((r27 | r25 ^ -1) ^ r19) + 1836072691 | 0;
  r29 = (r1 << 15 | r1 >>> 17) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r7 + r30 + ((r29 | r27 ^ -1) ^ r1) + 1836072691 | 0;
  r30 = (r25 << 11 | r25 >>> 21) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r11 + r19 + ((r30 | r29 ^ -1) ^ r25) + 1836072691 | 0;
  r19 = (r27 << 8 | r27 >>> 24) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r18 + r1 + ((r19 | r30 ^ -1) ^ r27) + 1836072691 | 0;
  r1 = (r29 << 6 | r29 >>> 26) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r10 + r25 + ((r1 | r19 ^ -1) ^ r29) + 1836072691 | 0;
  r25 = (r30 << 6 | r30 >>> 26) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r13 + r27 + ((r25 | r1 ^ -1) ^ r30) + 1836072691 | 0;
  r27 = (r19 << 14 | r19 >>> 18) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r15 + r29 + ((r27 | r25 ^ -1) ^ r19) + 1836072691 | 0;
  r29 = (r1 << 12 | r1 >>> 20) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r12 + r30 + ((r29 | r27 ^ -1) ^ r1) + 1836072691 | 0;
  r30 = (r25 << 13 | r25 >>> 19) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r16 + r19 + ((r30 | r29 ^ -1) ^ r25) + 1836072691 | 0;
  r19 = (r27 << 5 | r27 >>> 27) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r6 + r1 + ((r19 | r30 ^ -1) ^ r27) + 1836072691 | 0;
  r1 = (r29 << 14 | r29 >>> 18) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r14 + r25 + ((r1 | r19 ^ -1) ^ r29) + 1836072691 | 0;
  r25 = (r30 << 13 | r30 >>> 19) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r4 + r27 + ((r25 | r1 ^ -1) ^ r30) + 1836072691 | 0;
  r27 = (r19 << 13 | r19 >>> 19) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r8 + r29 + ((r27 | r25 ^ -1) ^ r19) + 1836072691 | 0;
  r29 = (r1 << 7 | r1 >>> 25) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r17 + r30 + ((r29 | r27 ^ -1) ^ r1) + 1836072691 | 0;
  r30 = (r25 << 5 | r25 >>> 27) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r12 + r19 + (r30 & r29 | r25 & (r30 ^ -1)) + 2053994217 | 0;
  r19 = (r27 << 15 | r27 >>> 17) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r10 + r1 + (r19 & r30 | r27 & (r19 ^ -1)) + 2053994217 | 0;
  r1 = (r29 << 5 | r29 >>> 27) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r8 + r25 + (r1 & r19 | r29 & (r1 ^ -1)) + 2053994217 | 0;
  r25 = (r30 << 8 | r30 >>> 24) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r5 + r27 + (r25 & r1 | r30 & (r25 ^ -1)) + 2053994217 | 0;
  r27 = (r19 << 11 | r19 >>> 21) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r7 + r29 + (r27 & r25 | r19 & (r27 ^ -1)) + 2053994217 | 0;
  r29 = (r1 << 14 | r1 >>> 18) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r15 + r30 + (r29 & r27 | r1 & (r29 ^ -1)) + 2053994217 | 0;
  r30 = (r25 << 14 | r25 >>> 18) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r2 + r19 + (r30 & r29 | r25 & (r30 ^ -1)) + 2053994217 | 0;
  r19 = (r27 << 6 | r27 >>> 26) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r4 + r1 + (r19 & r30 | r27 & (r19 ^ -1)) + 2053994217 | 0;
  r1 = (r29 << 14 | r29 >>> 18) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r9 + r25 + (r1 & r19 | r29 & (r1 ^ -1)) + 2053994217 | 0;
  r25 = (r30 << 6 | r30 >>> 26) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r16 + r27 + (r25 & r1 | r30 & (r25 ^ -1)) + 2053994217 | 0;
  r27 = (r19 << 9 | r19 >>> 23) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r6 + r29 + (r27 & r25 | r19 & (r27 ^ -1)) + 2053994217 | 0;
  r29 = (r1 << 12 | r1 >>> 20) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r17 + r30 + (r29 & r27 | r1 & (r29 ^ -1)) + 2053994217 | 0;
  r30 = (r25 << 9 | r25 >>> 23) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r13 + r19 + (r30 & r29 | r25 & (r30 ^ -1)) + 2053994217 | 0;
  r19 = (r27 << 12 | r27 >>> 20) + r1 | 0;
  r27 = r29 << 10 | r29 >>> 22;
  r29 = r11 + r1 + (r19 & r30 | r27 & (r19 ^ -1)) + 2053994217 | 0;
  r1 = (r29 << 5 | r29 >>> 27) + r25 | 0;
  r29 = r30 << 10 | r30 >>> 22;
  r30 = r14 + r25 + (r1 & r19 | r29 & (r1 ^ -1)) + 2053994217 | 0;
  r25 = (r30 << 15 | r30 >>> 17) + r27 | 0;
  r30 = r19 << 10 | r19 >>> 22;
  r19 = r18 + r27 + (r25 & r1 | r30 & (r25 ^ -1)) + 2053994217 | 0;
  r27 = (r19 << 8 | r19 >>> 24) + r29 | 0;
  r19 = r1 << 10 | r1 >>> 22;
  r1 = r29 + r16 + (r25 ^ r19 ^ r27) | 0;
  r16 = (r1 << 8 | r1 >>> 24) + r30 | 0;
  r1 = r25 << 10 | r25 >>> 22;
  r25 = r30 + r2 + (r27 ^ r1 ^ r16) | 0;
  r2 = (r25 << 5 | r25 >>> 27) + r19 | 0;
  r25 = r27 << 10 | r27 >>> 22;
  r27 = r19 + r14 + (r16 ^ r25 ^ r2) | 0;
  r14 = (r27 << 12 | r27 >>> 20) + r1 | 0;
  r27 = r16 << 10 | r16 >>> 22;
  r16 = r1 + r8 + (r2 ^ r27 ^ r14) | 0;
  r8 = (r16 << 9 | r16 >>> 23) + r25 | 0;
  r16 = r2 << 10 | r2 >>> 22;
  r2 = r25 + r5 + (r14 ^ r16 ^ r8) | 0;
  r5 = (r2 << 12 | r2 >>> 20) + r27 | 0;
  r2 = r14 << 10 | r14 >>> 22;
  r14 = r27 + r9 + (r8 ^ r2 ^ r5) | 0;
  r9 = (r14 << 5 | r14 >>> 27) + r16 | 0;
  r14 = r8 << 10 | r8 >>> 22;
  r8 = r16 + r12 + (r5 ^ r14 ^ r9) | 0;
  r12 = (r8 << 14 | r8 >>> 18) + r2 | 0;
  r8 = r5 << 10 | r5 >>> 22;
  r5 = r2 + r11 + (r9 ^ r8 ^ r12) | 0;
  r11 = (r5 << 6 | r5 >>> 26) + r14 | 0;
  r5 = r9 << 10 | r9 >>> 22;
  r9 = r14 + r10 + (r12 ^ r5 ^ r11) | 0;
  r10 = (r9 << 8 | r9 >>> 24) + r8 | 0;
  r9 = r12 << 10 | r12 >>> 22;
  r12 = r8 + r6 + (r11 ^ r9 ^ r10) | 0;
  r6 = (r12 << 13 | r12 >>> 19) + r5 | 0;
  r12 = r11 << 10 | r11 >>> 22;
  r11 = r5 + r17 + (r10 ^ r12 ^ r6) | 0;
  r17 = (r11 << 6 | r11 >>> 26) + r9 | 0;
  r11 = r10 << 10 | r10 >>> 22;
  r10 = r9 + r18 + (r6 ^ r11 ^ r17) | 0;
  r18 = (r10 << 5 | r10 >>> 27) + r12 | 0;
  r10 = r6 << 10 | r6 >>> 22;
  r6 = r12 + r4 + (r17 ^ r10 ^ r18) | 0;
  r4 = (r6 << 15 | r6 >>> 17) + r11 | 0;
  r6 = r17 << 10 | r17 >>> 22;
  r17 = r11 + r7 + (r18 ^ r6 ^ r4) | 0;
  r7 = (r17 << 13 | r17 >>> 19) + r10 | 0;
  r17 = r18 << 10 | r18 >>> 22;
  r18 = r10 + r13 + (r4 ^ r17 ^ r7) | 0;
  r13 = (r18 << 11 | r18 >>> 21) + r6 | 0;
  r18 = r4 << 10 | r4 >>> 22;
  r4 = r6 + r15 + (r7 ^ r18 ^ r13) | 0;
  HEAP32[r20 >> 2] = r18 + r23 + (r31 << 10 | r31 >>> 22) | 0;
  HEAP32[r22 >> 2] = r17 + HEAP32[r24] + r33 | 0;
  HEAP32[r24] = r34 + HEAP32[r26] + r17 + (r4 << 11 | r4 >>> 21) | 0;
  HEAP32[r26] = r34 + HEAP32[r3] + r13 + (r35 << 6 | r35 >>> 26) | 0;
  HEAP32[r3] = (r7 << 10 | r7 >>> 22) + r21 + r28 | 0;
  return;
}
function _rmd160_read(r1) {
  return r1 + 24 | 0;
}
function __gcry_rmd160_hash_buffer(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  r5 = r4;
  r6 = r5;
  __gcry_rmd160_init(r6);
  _rmd160_write(r6, r2, r3);
  _rmd160_final(r6);
  _memcpy(r1, r5 + 24 | 0, 20);
  STACKTOP = r4;
  return;
}
function _rmd160_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1;
  r6 = (r1 + 88 | 0) >> 2;
  r7 = r1 + 24 | 0;
  r8 = r1 + 20 | 0;
  r9 = r3;
  r3 = r2;
  L2996 : while (1) {
    if ((HEAP32[r6] | 0) == 64) {
      _transform782(r5, r7);
      __gcry_burn_stack(128);
      HEAP32[r6] = 0;
      HEAP32[r8 >> 2] = HEAP32[r8 >> 2] + 1 | 0;
    }
    if ((r3 | 0) == 0) {
      r4 = 2279;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r3;
      break;
    }
    if ((r9 | 0) == 0) {
      r9 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r3;
      r13 = r9;
    }
    while (1) {
      r2 = HEAP32[r6];
      if ((r2 | 0) >= 64) {
        r4 = 2270;
        break L2996;
      }
      r14 = HEAP8[r12];
      HEAP32[r6] = r2 + 1 | 0;
      HEAP8[r2 + (r1 + 24) | 0] = r14;
      r14 = r13 - 1 | 0;
      if ((r14 | 0) == 0) {
        r9 = 0;
        r3 = 0;
        continue L2996;
      } else {
        r12 = r12 + 1 | 0;
        r13 = r14;
      }
    }
  }
  if (r4 == 2270) {
    _rmd160_write(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  } else if (r4 == 2279) {
    return;
  }
  L3010 : do {
    if (r10 >>> 0 > 63) {
      r12 = r1 + 20 | 0;
      r13 = r11;
      r3 = r10;
      while (1) {
        _transform782(r5, r13);
        HEAP32[r6] = 0;
        HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
        r9 = r3 - 64 | 0;
        r8 = r13 + 64 | 0;
        if (r9 >>> 0 > 63) {
          r13 = r8;
          r3 = r9;
        } else {
          r15 = r8;
          r16 = r9;
          break L3010;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  __gcry_burn_stack(128);
  if ((r16 | 0) == 0) {
    return;
  } else {
    r17 = r15;
    r18 = r16;
  }
  while (1) {
    r16 = HEAP32[r6];
    if ((r16 | 0) >= 64) {
      r4 = 2281;
      break;
    }
    r15 = HEAP8[r17];
    HEAP32[r6] = r16 + 1 | 0;
    HEAP8[r16 + (r1 + 24) | 0] = r15;
    r15 = r18 - 1 | 0;
    if ((r15 | 0) == 0) {
      r4 = 2282;
      break;
    } else {
      r17 = r17 + 1 | 0;
      r18 = r15;
    }
  }
  if (r4 == 2282) {
    return;
  } else if (r4 == 2281) {
    return;
  }
}
function _rmd160_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r2 = r1 >> 2;
  r3 = r1;
  _rmd160_write(r1, 0, 0);
  r4 = HEAP32[r2 + 5];
  r5 = (r1 + 88 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = _llvm_uadd_with_overflow_i32(r4 << 6, r6);
  r8 = (tempRet0 & 1) + (r4 >>> 26) | 0;
  r4 = r7 << 3;
  r9 = r8 << 3 | r7 >>> 29;
  HEAP32[r5] = r6 + 1 | 0;
  r10 = r1 + 24 | 0;
  HEAP8[r6 + (r1 + 24) | 0] = -128;
  r11 = HEAP32[r5];
  L3024 : do {
    if ((r6 | 0) < 56) {
      if ((r11 | 0) < 56) {
        r12 = r11;
      } else {
        break;
      }
      while (1) {
        HEAP32[r5] = r12 + 1 | 0;
        HEAP8[r12 + (r1 + 24) | 0] = 0;
        r13 = HEAP32[r5];
        if ((r13 | 0) < 56) {
          r12 = r13;
        } else {
          break L3024;
        }
      }
    } else {
      L3029 : do {
        if ((r11 | 0) < 64) {
          r13 = r11;
          while (1) {
            HEAP32[r5] = r13 + 1 | 0;
            HEAP8[r13 + (r1 + 24) | 0] = 0;
            r14 = HEAP32[r5];
            if ((r14 | 0) < 64) {
              r13 = r14;
            } else {
              break L3029;
            }
          }
        }
      } while (0);
      _rmd160_write(r1, 0, 0);
      _memset(r10, 0, 56);
    }
  } while (0);
  HEAP8[r1 + 80 | 0] = r4 & 255;
  HEAP8[r1 + 81 | 0] = r7 >>> 5 & 255;
  HEAP8[r1 + 82 | 0] = r7 >>> 13 & 255;
  HEAP8[r1 + 83 | 0] = r7 >>> 21 & 255;
  HEAP8[r1 + 84 | 0] = r9 & 255;
  HEAP8[r1 + 85 | 0] = r8 >>> 5 & 255;
  HEAP8[r1 + 86 | 0] = r8 >>> 13 & 255;
  HEAP8[r1 + 87 | 0] = r8 >>> 21 & 255;
  _transform782(r3, r10);
  __gcry_burn_stack(128);
  HEAP32[r10 >> 2] = HEAP32[r2];
  HEAP32[r2 + 7] = HEAP32[r2 + 1];
  HEAP32[r2 + 8] = HEAP32[r2 + 2];
  HEAP32[r2 + 9] = HEAP32[r2 + 3];
  HEAP32[r2 + 10] = HEAP32[r2 + 4];
  return;
}
function _rsa_generate(r1, r2, r3, r4, r5) {
  return _rsa_generate_ext(r1, r2, r3, 0, r4, r5, 0);
}
function _rsa_check_secret_key(r1, r2) {
  var r3, r4, r5, r6, r7;
  r1 = r2 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r3 = r2, r4 = r3 >> 2;
  HEAP32[r4] = HEAP32[r1];
  HEAP32[r4 + 1] = HEAP32[r1 + 1];
  HEAP32[r4 + 2] = HEAP32[r1 + 2];
  r5 = r3 + 12 | 0;
  HEAP32[r5 >> 2] = HEAP32[r1 + 3];
  r6 = r3 + 16 | 0;
  HEAP32[r6 >> 2] = HEAP32[r1 + 4];
  r7 = HEAP32[r1 + 5];
  HEAP32[r4 + 5] = r7;
  if ((HEAP32[r5 >> 2] | 0) == 0) {
    STACKTOP = r2;
    return 68;
  }
  if ((HEAP32[r6 >> 2] | 0) == 0 | (r7 | 0) == 0) {
    STACKTOP = r2;
    return 68;
  } else {
    r7 = (_check_secret_key(r3) | 0) == 0 ? 7 : 0;
    STACKTOP = r2;
    return r7;
  }
}
function _rsa_encrypt(r1, r2, r3, r4, r5) {
  var r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r1 = r5;
  r6 = r1 | 0;
  HEAP32[r6 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r1 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = __gcry_mpi_alloc(HEAP32[HEAP32[r6 >> 2] + 4 >> 2]);
  HEAP32[r2 >> 2] = r4;
  _public(r4, r3, r1);
  STACKTOP = r5;
  return 0;
}
function _rsa_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r1 = r4 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r6 = r4, r7 = r6 >> 2;
  r8 = (r6 | 0) >> 2;
  HEAP32[r8] = HEAP32[r1];
  r9 = r6 + 4 | 0;
  HEAP32[r9 >> 2] = HEAP32[r1 + 1];
  HEAP32[r7 + 2] = HEAP32[r1 + 2];
  HEAP32[r7 + 3] = HEAP32[r1 + 3];
  HEAP32[r7 + 4] = HEAP32[r1 + 4];
  HEAP32[r7 + 5] = HEAP32[r1 + 5];
  r1 = __gcry_mpi_snew(__gcry_mpi_get_nbits(HEAP32[r8]));
  if ((r5 & 1 | 0) == 0) {
    r5 = __gcry_mpi_snew(__gcry_mpi_get_nbits(HEAP32[r8]));
    r7 = __gcry_mpi_snew(__gcry_mpi_get_nbits(HEAP32[r8]));
    __gcry_mpi_randomize(r5, __gcry_mpi_get_nbits(HEAP32[r8]), 0);
    __gcry_mpi_mod(r5, r5, HEAP32[r8]);
    __gcry_mpi_invm(r7, r5, HEAP32[r8]);
    r10 = _rsa_blind(HEAP32[r3 >> 2], r5, HEAP32[r9 >> 2], HEAP32[r8]);
    _secret(r1, r10, r6);
    r9 = __gcry_mpi_copy(r1);
    __gcry_mpi_release(r1);
    r11 = _rsa_unblind(r9, r7, HEAP32[r8]);
    __gcry_mpi_release(r9);
    __gcry_mpi_release(r10);
    __gcry_mpi_release(r5);
    __gcry_mpi_release(r7);
    r7 = r11;
    HEAP32[r2 >> 2] = r7;
    STACKTOP = r4;
    return 0;
  } else {
    _secret(r1, HEAP32[r3 >> 2], r6);
    r7 = r1;
    HEAP32[r2 >> 2] = r7;
    STACKTOP = r4;
    return 0;
  }
}
function _rsa_sign(r1, r2, r3, r4) {
  var r5, r6, r7;
  r1 = r4 >> 2;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r5 | 0;
  HEAP32[r7 >> 2] = HEAP32[r1];
  HEAP32[r6 + 1] = HEAP32[r1 + 1];
  HEAP32[r6 + 2] = HEAP32[r1 + 2];
  HEAP32[r6 + 3] = HEAP32[r1 + 3];
  HEAP32[r6 + 4] = HEAP32[r1 + 4];
  HEAP32[r6 + 5] = HEAP32[r1 + 5];
  r1 = __gcry_mpi_alloc(HEAP32[HEAP32[r7 >> 2] + 4 >> 2]);
  HEAP32[r2 >> 2] = r1;
  _secret(r1, r3, r5);
  STACKTOP = r4;
  return 0;
}
function _rsa_verify(r1, r2, r3, r4, r5, r6) {
  var r7;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r1;
  HEAP32[r7 >> 2] = HEAP32[r4 >> 2];
  HEAP32[r7 + 4 >> 2] = HEAP32[r4 + 4 >> 2];
  r4 = __gcry_mpi_new(160);
  _public(r4, HEAP32[r3 >> 2], r7);
  if ((r5 | 0) == 0) {
    r7 = (__gcry_mpi_cmp(r4, r2) | 0) != 0 ? 8 : 0;
    __gcry_mpi_release(r4);
    STACKTOP = r1;
    return r7;
  } else {
    r7 = FUNCTION_TABLE[r5](r6, r4);
    __gcry_mpi_release(r4);
    STACKTOP = r1;
    return r7;
  }
}
function _rsa_get_nbits(r1, r2) {
  return __gcry_mpi_get_nbits(HEAP32[r2 >> 2]);
}
function _run_selftests847(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 1) {
    r4 = _selftests_rsa(r3);
  } else {
    r4 = 4;
  }
  return r4;
}
function _rsa_generate_ext(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15;
  r1 = r5 >> 2;
  r5 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r9 = r8, r10 = r9 >> 2;
  r11 = r8 + 24;
  HEAP32[r6 >> 2] = 0;
  do {
    if ((r4 | 0) == 0) {
      r5 = 2317;
    } else {
      r6 = __gcry_sexp_find_token(r4, 470136, 0);
      if ((r6 | 0) == 0) {
        r5 = 2317;
        break;
      } else {
        r12 = r6;
        r5 = 2320;
        break;
      }
    }
  } while (0);
  do {
    if (r5 == 2317) {
      r6 = __gcry_sexp_find_token(r4, 468428, 0);
      if ((r6 | 0) != 0) {
        __gcry_sexp_release(r6);
        r12 = 0;
        r5 = 2320;
        break;
      }
      if ((__gcry_fips_mode() | 0) != 0) {
        r12 = 0;
        r5 = 2320;
        break;
      }
      r6 = __gcry_sexp_find_token(r4, 465112, 0);
      if ((r6 | 0) == 0) {
        r13 = 0;
      } else {
        __gcry_sexp_release(r6);
        r13 = 1;
      }
      r14 = _generate_std(r9, r2, r3, r13);
      r5 = 2326;
      break;
    }
  } while (0);
  do {
    if (r5 == 2320) {
      r13 = _generate_x931(r9, r2, r3, r12, r11);
      __gcry_sexp_release(r12);
      if ((r13 | 0) != 0 | (r7 | 0) == 0 | (HEAP32[r11 >> 2] | 0) == 0) {
        r14 = r13;
        r5 = 2326;
        break;
      }
      r13 = __gcry_sexp_new(r7, 466728, 0, 1);
      if ((r13 | 0) == 0) {
        break;
      }
      r4 = r9 | 0;
      __gcry_mpi_release(HEAP32[r4 >> 2]);
      HEAP32[r4 >> 2] = 0;
      r4 = r9 + 4 | 0;
      __gcry_mpi_release(HEAP32[r4 >> 2]);
      HEAP32[r4 >> 2] = 0;
      r4 = r9 + 12 | 0;
      __gcry_mpi_release(HEAP32[r4 >> 2]);
      HEAP32[r4 >> 2] = 0;
      r4 = r9 + 16 | 0;
      __gcry_mpi_release(HEAP32[r4 >> 2]);
      HEAP32[r4 >> 2] = 0;
      r4 = r9 + 8 | 0;
      __gcry_mpi_release(HEAP32[r4 >> 2]);
      HEAP32[r4 >> 2] = 0;
      r4 = r9 + 20 | 0;
      __gcry_mpi_release(HEAP32[r4 >> 2]);
      HEAP32[r4 >> 2] = 0;
      r15 = r13;
      STACKTOP = r8;
      return r15;
    }
  } while (0);
  do {
    if (r5 == 2326) {
      if ((r14 | 0) == 0) {
        break;
      } else {
        r15 = r14;
      }
      STACKTOP = r8;
      return r15;
    }
  } while (0);
  HEAP32[r1] = HEAP32[r10];
  HEAP32[r1 + 1] = HEAP32[r10 + 1];
  HEAP32[r1 + 2] = HEAP32[r10 + 2];
  HEAP32[r1 + 3] = HEAP32[r10 + 3];
  HEAP32[r1 + 4] = HEAP32[r10 + 4];
  HEAP32[r1 + 5] = HEAP32[r10 + 5];
  r15 = 0;
  STACKTOP = r8;
  return r15;
}
function _compute_keygrip(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  r5 = __gcry_sexp_find_token(r2, 471396, 1);
  do {
    if ((r5 | 0) == 0) {
      r6 = 68;
    } else {
      r2 = __gcry_sexp_nth_data(r5, 1, r4);
      if ((r2 | 0) == 0) {
        __gcry_sexp_release(r5);
        r6 = 68;
        break;
      } else {
        __gcry_md_write(r1, r2, HEAP32[r4 >> 2]);
        __gcry_sexp_release(r5);
        r6 = 0;
        break;
      }
    }
  } while (0);
  STACKTOP = r3;
  return r6;
}
function _generate_x931(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  r11 = r6 + 8, r12 = r11 >> 2;
  r13 = r6 + 12, r14 = r13 >> 2;
  r15 = r6 + 16, r16 = r15 >> 2;
  r17 = r6 + 20, r18 = r17 >> 2;
  r19 = r6 + 24, r20 = r19 >> 2;
  HEAP32[r5 >> 2] = 0;
  r21 = (r3 | 0) == 1 ? 65537 : r3;
  if ((r2 & 255 | 0) != 0 | r2 >>> 0 < 1024 | r21 >>> 0 < 3 | (r21 & 1 | 0) == 0) {
    r22 = 55;
    STACKTOP = r6;
    return r22;
  }
  HEAP32[r8] = 0;
  HEAP32[r10] = 0;
  HEAP32[r12] = 0;
  HEAP32[r14] = 0;
  HEAP32[r16] = 0;
  HEAP32[r18] = 0;
  L3094 : do {
    if ((r4 | 0) == 0) {
      r3 = r2 >>> 1;
      HEAP32[r12] = _gen_x931_parm_xp(r3);
      r23 = __gcry_mpi_snew(r3);
      r24 = r3 - 100 | 0;
      while (1) {
        __gcry_mpi_release(HEAP32[r18]);
        r25 = _gen_x931_parm_xp(r3);
        HEAP32[r18] = r25;
        __gcry_mpi_sub(r23, HEAP32[r12], r25);
        if (__gcry_mpi_get_nbits(r23) >>> 0 > r24 >>> 0) {
          break;
        }
      }
      __gcry_mpi_release(r23);
      HEAP32[r8] = _gen_x931_parm_xi();
      HEAP32[r10] = _gen_x931_parm_xi();
      HEAP32[r14] = _gen_x931_parm_xi();
      HEAP32[r16] = _gen_x931_parm_xi();
    } else {
      _memset(r19, 0, 56);
      HEAP32[r20] = 480584;
      HEAP32[r20 + 2] = 480108;
      HEAP32[r20 + 4] = 479840;
      HEAP32[r20 + 6] = 479272;
      HEAP32[r20 + 8] = 478944;
      HEAP32[r20 + 10] = 478636;
      HEAP32[r20 + 1] = r7;
      HEAP32[r20 + 3] = r9;
      HEAP32[r20 + 5] = r11;
      HEAP32[r20 + 7] = r13;
      HEAP32[r20 + 9] = r15;
      HEAP32[r20 + 11] = r17;
      r24 = HEAP32[r20];
      L3096 : do {
        if ((r24 | 0) == 0) {
          r26 = 0;
        } else {
          r3 = 0;
          r25 = r24;
          while (1) {
            r27 = __gcry_sexp_find_token(r4, r25, 0);
            if ((r27 | 0) != 0) {
              r28 = __gcry_sexp_nth_mpi(r27, 1, 5);
              HEAP32[HEAP32[((r3 << 3) + 4 >> 2) + r20] >> 2] = r28;
              __gcry_sexp_release(r27);
            }
            r27 = r3 + 1 | 0;
            r28 = HEAP32[(r27 << 3 >> 2) + r20];
            if ((r28 | 0) == 0) {
              r26 = 0;
              break L3096;
            } else {
              r3 = r27;
              r25 = r28;
            }
          }
        }
      } while (0);
      while (1) {
        r29 = (r26 << 3) + r19 | 0;
        if ((HEAP32[r29 >> 2] | 0) == 0) {
          break L3094;
        }
        if ((HEAP32[HEAP32[((r26 << 3) + 4 >> 2) + r20] >> 2] | 0) == 0) {
          break;
        } else {
          r26 = r26 + 1 | 0;
        }
      }
      if ((HEAP32[r29 >> 2] | 0) == 0) {
        break;
      }
      if ((HEAP32[r20] | 0) == 0) {
        r22 = 128;
        STACKTOP = r6;
        return r22;
      } else {
        r30 = 0;
      }
      while (1) {
        __gcry_mpi_release(HEAP32[HEAP32[((r30 << 3) + 4 >> 2) + r20] >> 2]);
        r24 = r30 + 1 | 0;
        if ((HEAP32[(r24 << 3 >> 2) + r20] | 0) == 0) {
          r22 = 128;
          break;
        } else {
          r30 = r24;
        }
      }
      STACKTOP = r6;
      return r22;
    }
  } while (0);
  r30 = __gcry_mpi_alloc_set_ui(r21);
  r21 = __gcry_derive_x931_prime(HEAP32[r12], HEAP32[r8], HEAP32[r10], r30, 0, 0);
  r20 = __gcry_derive_x931_prime(HEAP32[r18], HEAP32[r14], HEAP32[r16], r30, 0, 0);
  __gcry_mpi_release(HEAP32[r12]);
  HEAP32[r12] = 0;
  __gcry_mpi_release(HEAP32[r8]);
  HEAP32[r8] = 0;
  __gcry_mpi_release(HEAP32[r10]);
  HEAP32[r10] = 0;
  __gcry_mpi_release(HEAP32[r18]);
  HEAP32[r18] = 0;
  __gcry_mpi_release(HEAP32[r14]);
  HEAP32[r14] = 0;
  __gcry_mpi_release(HEAP32[r16]);
  HEAP32[r16] = 0;
  if ((r21 | 0) == 0 | (r20 | 0) == 0) {
    __gcry_mpi_release(r21);
    __gcry_mpi_release(r20);
    __gcry_mpi_release(r30);
    r22 = 21;
    STACKTOP = r6;
    return r22;
  }
  if ((__gcry_mpi_cmp(r21, r20) | 0) > 0) {
    __gcry_mpi_swap(r21, r20);
    HEAP32[r5 >> 2] = 1;
  }
  r16 = __gcry_mpi_new(r2);
  __gcry_mpi_mul(r16, r21, r20);
  r14 = r2 >>> 1;
  r18 = __gcry_mpi_snew(r14);
  r10 = __gcry_mpi_snew(r14);
  r14 = __gcry_mpi_snew(r2);
  __gcry_mpi_sub_ui(r18, r21, 1);
  __gcry_mpi_sub_ui(r10, r20, 1);
  __gcry_mpi_mul(r14, r18, r10);
  r8 = __gcry_mpi_snew(r2);
  if ((__gcry_mpi_gcd(r8, r30, r14) | 0) == 0) {
    __gcry_assert_failed(478268, 490416, 531, 494768);
  }
  __gcry_mpi_gcd(r8, r18, r10);
  __gcry_mpi_release(r10);
  __gcry_mpi_fdiv_q(r18, r14, r8);
  __gcry_mpi_release(r14);
  __gcry_mpi_invm(r8, r30, r18);
  __gcry_mpi_invm(r18, r21, r20);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    if ((HEAP32[r5 >> 2] | 0) != 0) {
      __gcry_log_debug(477972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    __gcry_log_mpidump(477680, r21);
    __gcry_log_mpidump(477528, r20);
    __gcry_log_mpidump(476928, r16);
    __gcry_log_mpidump(476520, r30);
    __gcry_log_mpidump(476320, r8);
    __gcry_log_mpidump(476076, r18);
  }
  r5 = (r1 | 0) >> 2;
  HEAP32[r5] = r16;
  r16 = (r1 + 4 | 0) >> 2;
  HEAP32[r16] = r30;
  r30 = (r1 + 12 | 0) >> 2;
  HEAP32[r30] = r21;
  r21 = (r1 + 16 | 0) >> 2;
  HEAP32[r21] = r20;
  r20 = (r1 + 8 | 0) >> 2;
  HEAP32[r20] = r8;
  r8 = (r1 + 20 | 0) >> 2;
  HEAP32[r8] = r18;
  if ((_test_keys(r1, r2 - 64 | 0) | 0) == 0) {
    r22 = 0;
    STACKTOP = r6;
    return r22;
  }
  __gcry_mpi_release(HEAP32[r5]);
  HEAP32[r5] = 0;
  __gcry_mpi_release(HEAP32[r16]);
  HEAP32[r16] = 0;
  __gcry_mpi_release(HEAP32[r30]);
  HEAP32[r30] = 0;
  __gcry_mpi_release(HEAP32[r21]);
  HEAP32[r21] = 0;
  __gcry_mpi_release(HEAP32[r20]);
  HEAP32[r20] = 0;
  __gcry_mpi_release(HEAP32[r8]);
  HEAP32[r8] = 0;
  __gcry_fips_signal_error(490416, 576, 494768, 0, 481680);
  r22 = 50;
  STACKTOP = r6;
  return r22;
}
function _gpg_err_code849(r1) {
  return r1 & 65535;
}
function _check_exponent(r1, r2) {
  var r3, r4;
  __gcry_mpi_sub_ui(r2, r2, 1);
  r3 = __gcry_mpi_alloc_like(r2);
  r4 = (__gcry_mpi_gcd(r3, r1, r2) | 0) == 0 & 1;
  __gcry_mpi_release(r3);
  __gcry_mpi_add_ui(r2, r2, 1);
  return r4;
}
function _test_keys(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  r5 = __gcry_mpi_new(r2);
  r6 = __gcry_mpi_new(r2);
  r7 = __gcry_mpi_new(r2);
  r8 = __gcry_mpi_new(r2);
  HEAP32[r4 >> 2] = HEAP32[r1 >> 2];
  HEAP32[r4 + 4 >> 2] = HEAP32[r1 + 4 >> 2];
  __gcry_mpi_randomize(r5, r2, 0);
  _public(r6, r5, r4);
  do {
    if ((__gcry_mpi_cmp(r6, r5) | 0) == 0) {
      r9 = -1;
    } else {
      _secret(r7, r6, r1);
      if ((__gcry_mpi_cmp(r7, r5) | 0) != 0) {
        r9 = -1;
        break;
      }
      __gcry_mpi_randomize(r5, r2, 0);
      _secret(r8, r5, r1);
      _public(r7, r8, r4);
      if ((__gcry_mpi_cmp(r7, r5) | 0) != 0) {
        r9 = -1;
        break;
      }
      __gcry_mpi_add_ui(r8, r8, 1);
      _public(r7, r8, r4);
      r9 = ((__gcry_mpi_cmp(r7, r5) | 0) == 0) << 31 >> 31;
    }
  } while (0);
  __gcry_mpi_release(r8);
  __gcry_mpi_release(r7);
  __gcry_mpi_release(r6);
  __gcry_mpi_release(r5);
  STACKTOP = r3;
  return r9;
}
function _public(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == (r2 | 0)) {
    r4 = __gcry_mpi_alloc(HEAP32[r2 + 4 >> 2] << 1);
    __gcry_mpi_powm(r4, r2, HEAP32[r3 + 4 >> 2], HEAP32[r3 >> 2]);
    __gcry_mpi_set(r1, r4);
    __gcry_mpi_free(r4);
    return;
  } else {
    __gcry_mpi_powm(r1, r2, HEAP32[r3 + 4 >> 2], HEAP32[r3 >> 2]);
    return;
  }
}
function _secret(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = (r3 + 12 | 0) >> 2;
  do {
    if ((HEAP32[r4] | 0) != 0) {
      r5 = (r3 + 16 | 0) >> 2;
      if ((HEAP32[r5] | 0) == 0) {
        break;
      }
      r6 = r3 + 20 | 0;
      if ((HEAP32[r6 >> 2] | 0) == 0) {
        break;
      }
      r7 = (r3 | 0) >> 2;
      r8 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[r7] + 4 >> 2] + 1 | 0);
      r9 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[r7] + 4 >> 2] + 1 | 0);
      r10 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[r7] + 4 >> 2] + 1 | 0);
      __gcry_mpi_sub_ui(r10, HEAP32[r4], 1);
      r7 = r3 + 8 | 0;
      __gcry_mpi_fdiv_r(r10, HEAP32[r7 >> 2], r10);
      __gcry_mpi_powm(r8, r2, r10, HEAP32[r4]);
      __gcry_mpi_sub_ui(r10, HEAP32[r5], 1);
      __gcry_mpi_fdiv_r(r10, HEAP32[r7 >> 2], r10);
      __gcry_mpi_powm(r9, r2, r10, HEAP32[r5]);
      __gcry_mpi_sub(r10, r9, r8);
      if ((HEAP32[r10 + 8 >> 2] | 0) != 0) {
        __gcry_mpi_add(r10, r10, HEAP32[r5]);
      }
      __gcry_mpi_mulm(r10, HEAP32[r6 >> 2], r10, HEAP32[r5]);
      __gcry_mpi_mul(r10, r10, HEAP32[r4]);
      __gcry_mpi_add(r1, r8, r10);
      __gcry_mpi_free(r10);
      __gcry_mpi_free(r8);
      __gcry_mpi_free(r9);
      return;
    }
  } while (0);
  __gcry_mpi_powm(r1, r2, HEAP32[r3 + 8 >> 2], HEAP32[r3 >> 2]);
  return;
}
function _selftests_rsa(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r2 = 0;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 4, r7 = r6 >> 2;
  HEAP32[r5] = 0;
  HEAP32[r7] = 0;
  r8 = __gcry_sexp_sscan(r4, 0, 428132, 1029);
  do {
    if ((r8 | 0) == 0) {
      r4 = __gcry_sexp_sscan(r6, 0, 430084, 316);
      if ((r4 | 0) != 0) {
        r9 = r4;
        r2 = 2395;
        break;
      }
      r4 = __gcry_pk_testkey(HEAP32[r5]);
      if ((r4 | 0) != 0) {
        r10 = __gcry_strerror(r4);
        r11 = 475096;
        break;
      }
      r4 = _selftest_sign_1024(HEAP32[r7], HEAP32[r5]);
      if ((r4 | 0) != 0) {
        r10 = r4;
        r11 = 474808;
        break;
      }
      r4 = _selftest_encr_1024(HEAP32[r7], HEAP32[r5]);
      if ((r4 | 0) != 0) {
        r10 = r4;
        r11 = 474540;
        break;
      }
      __gcry_sexp_release(HEAP32[r7]);
      __gcry_sexp_release(HEAP32[r5]);
      r12 = 0;
      STACKTOP = r3;
      return r12;
    } else {
      r9 = r8;
      r2 = 2395;
    }
  } while (0);
  if (r2 == 2395) {
    r10 = __gcry_strerror(r9);
    r11 = 475352;
  }
  __gcry_sexp_release(HEAP32[r7]);
  __gcry_sexp_release(HEAP32[r5]);
  if ((r1 | 0) == 0) {
    r12 = 50;
    STACKTOP = r3;
    return r12;
  }
  FUNCTION_TABLE[r1](474140, 1, r11, r10);
  r12 = 50;
  STACKTOP = r3;
  return r12;
}
function _selftest_sign_1024(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 4, r7 = r6 >> 2;
  r8 = r3 + 8, r9 = r8 >> 2;
  HEAP32[r5] = 0;
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  do {
    if ((__gcry_sexp_sscan(r4, 0, 415472, 75) | 0) == 0) {
      if ((__gcry_sexp_sscan(r6, 0, 415324, 75) | 0) != 0) {
        r10 = 473500;
        break;
      }
      if ((__gcry_pk_sign(r8, HEAP32[r5], r2) | 0) != 0) {
        r10 = 471892;
        break;
      }
      if ((__gcry_pk_verify(HEAP32[r9], HEAP32[r5], r1) | 0) != 0) {
        r10 = 471780;
        break;
      }
      r10 = (_gcry_err_code848(__gcry_pk_verify(HEAP32[r9], HEAP32[r7], r1)) | 0) == 8 ? 0 : 471652;
    } else {
      r10 = 473500;
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r9]);
  __gcry_sexp_release(HEAP32[r7]);
  __gcry_sexp_release(HEAP32[r5]);
  STACKTOP = r3;
  return r10;
}
function _selftest_encr_1024(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 4, r7 = r6 >> 2;
  r8 = r3 + 8, r9 = r8 >> 2;
  HEAP32[r5] = 0;
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  r10 = __gcry_mpi_new(1e3);
  __gcry_mpi_randomize(r10, 1e3, 0);
  do {
    if ((__gcry_sexp_build(r4, 0, 473720, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r10, tempInt)) | 0) == 0) {
      if ((__gcry_pk_encrypt(r6, HEAP32[r5], r1) | 0) != 0) {
        r11 = 0;
        r12 = 0;
        r13 = 0;
        r14 = 473384;
        break;
      }
      r15 = _extract_a_from_sexp(HEAP32[r7]);
      if ((r15 | 0) == 0) {
        r11 = 0;
        r12 = 0;
        r13 = 0;
        r14 = 473196;
        break;
      }
      if ((__gcry_mpi_cmp(r10, r15) | 0) == 0) {
        r11 = 0;
        r12 = 0;
        r13 = r15;
        r14 = 473072;
        break;
      }
      if ((__gcry_pk_decrypt(r8, HEAP32[r7], r2) | 0) != 0) {
        r11 = 0;
        r12 = 0;
        r13 = r15;
        r14 = 472908;
        break;
      }
      r16 = __gcry_sexp_find_token(HEAP32[r9], 472728, 0);
      if ((r16 | 0) == 0) {
        r17 = __gcry_sexp_nth_mpi(HEAP32[r9], 0, 5);
      } else {
        r17 = __gcry_sexp_nth_mpi(r16, 1, 5);
      }
      if ((r17 | 0) == 0) {
        r11 = r16;
        r12 = 0;
        r13 = r15;
        r14 = 472576;
        break;
      }
      r11 = r16;
      r12 = r17;
      r13 = r15;
      r14 = (__gcry_mpi_cmp(r10, r17) | 0) == 0 ? 0 : 472468;
    } else {
      r11 = 0;
      r12 = 0;
      r13 = 0;
      r14 = 473500;
    }
  } while (0);
  __gcry_sexp_release(r11);
  __gcry_mpi_release(r12);
  __gcry_sexp_release(HEAP32[r9]);
  __gcry_mpi_release(r13);
  __gcry_sexp_release(HEAP32[r7]);
  __gcry_sexp_release(HEAP32[r5]);
  __gcry_mpi_release(r10);
  STACKTOP = r3;
  return r14;
}
function _extract_a_from_sexp(r1) {
  var r2, r3;
  r2 = __gcry_sexp_find_token(r1, 472264, 0);
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r1 = __gcry_sexp_find_token(r2, 472076, 0);
  __gcry_sexp_release(r2);
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r2 = __gcry_sexp_find_token(r1, 475348, 0);
  __gcry_sexp_release(r1);
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r1 = __gcry_sexp_nth_mpi(r2, 1, 0);
  __gcry_sexp_release(r2);
  r3 = r1;
  return r3;
}
function _gcry_err_code848(r1) {
  return _gpg_err_code849(r1);
}
function _rsa_blind(r1, r2, r3, r4) {
  var r5, r6;
  r5 = __gcry_mpi_snew(__gcry_mpi_get_nbits(r4));
  r6 = __gcry_mpi_snew(__gcry_mpi_get_nbits(r4));
  __gcry_mpi_powm(r5, r2, r3, r4);
  __gcry_mpi_mulm(r6, r5, r1, r4);
  __gcry_mpi_release(r5);
  return r6;
}
function _rsa_unblind(r1, r2, r3) {
  var r4;
  r4 = __gcry_mpi_snew(__gcry_mpi_get_nbits(r3));
  __gcry_mpi_mulm(r4, r2, r1, r3);
  return r4;
}
function _check_secret_key(r1) {
  var r2, r3;
  r2 = r1 + 12 | 0;
  r3 = __gcry_mpi_alloc(HEAP32[HEAP32[r2 >> 2] + 4 >> 2] << 1);
  __gcry_mpi_mul(r3, HEAP32[r2 >> 2], HEAP32[r1 + 16 >> 2]);
  r2 = __gcry_mpi_cmp(r3, HEAP32[r1 >> 2]);
  __gcry_mpi_free(r3);
  return (r2 | 0) == 0 & 1;
}
function _seed_setkey(r1, r2, r3) {
  var r4;
  r4 = _do_setkey866(r1, r2, r3);
  __gcry_burn_stack(40);
  return r4;
}
function _seed_encrypt(r1, r2, r3) {
  _do_encrypt865(r1, r2, r3);
  __gcry_burn_stack(24);
  return;
}
function _seed_decrypt(r1, r2, r3) {
  _do_decrypt864(r1, r2, r3);
  __gcry_burn_stack(24);
  return;
}
function _generate_std(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  do {
    if ((__gcry_fips_mode() | 0) != 0) {
      if (r2 >>> 0 > 1023 & (r4 | 0) == 0) {
        break;
      } else {
        r5 = 55;
      }
      return r5;
    }
  } while (0);
  r6 = (r4 | 0) != 0 ? 1 : 2;
  r4 = (r2 & 1) + r2 | 0;
  r2 = (r3 | 0) == 1 ? 65537 : r3;
  r3 = __gcry_mpi_alloc(1);
  if ((r2 | 0) == 0) {
    __gcry_mpi_set_ui(r3, 41);
    r7 = 0;
  } else {
    __gcry_mpi_set_ui(r3, r2 | 1);
    r7 = 1;
  }
  r2 = __gcry_mpi_new(r4);
  r8 = r4 >>> 1;
  r9 = r3;
  r10 = 0;
  r11 = 0;
  while (1) {
    if ((r10 | 0) != 0) {
      __gcry_mpi_release(r10);
    }
    if ((r11 | 0) != 0) {
      __gcry_mpi_release(r11);
    }
    if (r7) {
      r12 = __gcry_generate_secret_prime(r8, r6, 226, r9);
      r13 = __gcry_generate_secret_prime(r8, r6, 226, r9);
    } else {
      r12 = __gcry_generate_secret_prime(r8, r6, 0, 0);
      r13 = __gcry_generate_secret_prime(r8, r6, 0, 0);
    }
    if ((__gcry_mpi_cmp(r12, r13) | 0) > 0) {
      __gcry_mpi_swap(r12, r13);
    }
    __gcry_mpi_mul(r2, r12, r13);
    if ((__gcry_mpi_get_nbits(r2) | 0) == (r4 | 0)) {
      break;
    } else {
      r10 = r12;
      r11 = r13;
    }
  }
  r11 = r12 + 4 | 0;
  r10 = __gcry_mpi_alloc_secure(HEAP32[r11 >> 2]);
  r6 = __gcry_mpi_alloc_secure(HEAP32[r11 >> 2]);
  r11 = __gcry_mpi_snew(r4);
  r8 = __gcry_mpi_snew(r4);
  r9 = __gcry_mpi_snew(r4);
  __gcry_mpi_sub_ui(r10, r12, 1);
  __gcry_mpi_sub_ui(r6, r13, 1);
  __gcry_mpi_mul(r11, r10, r6);
  __gcry_mpi_gcd(r8, r10, r6);
  __gcry_mpi_fdiv_q(r9, r11, r8);
  L3242 : do {
    if ((__gcry_mpi_gcd(r10, r3, r11) | 0) == 0) {
      if (r7) {
        __gcry_bug(490416, 276, 494784);
      } else {
        while (1) {
          __gcry_mpi_add_ui(r3, r3, 2);
          if ((__gcry_mpi_gcd(r10, r3, r11) | 0) != 0) {
            break L3242;
          }
        }
      }
    }
  } while (0);
  r7 = __gcry_mpi_snew(r4);
  __gcry_mpi_invm(r7, r3, r9);
  r14 = __gcry_mpi_snew(r4);
  __gcry_mpi_invm(r14, r12, r13);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_mpidump(488788, r12);
    __gcry_log_mpidump(487852, r13);
    __gcry_log_mpidump(487100, r11);
    __gcry_log_mpidump(486240, r8);
    __gcry_log_mpidump(485276, r9);
    __gcry_log_mpidump(484464, r2);
    __gcry_log_mpidump(483840, r3);
    __gcry_log_mpidump(482920, r7);
    __gcry_log_mpidump(482216, r14);
  }
  __gcry_mpi_release(r10);
  __gcry_mpi_release(r6);
  __gcry_mpi_release(r11);
  __gcry_mpi_release(r9);
  __gcry_mpi_release(r8);
  r8 = (r1 | 0) >> 2;
  HEAP32[r8] = r2;
  r2 = (r1 + 4 | 0) >> 2;
  HEAP32[r2] = r3;
  r3 = (r1 + 12 | 0) >> 2;
  HEAP32[r3] = r12;
  r12 = (r1 + 16 | 0) >> 2;
  HEAP32[r12] = r13;
  r13 = (r1 + 8 | 0) >> 2;
  HEAP32[r13] = r7;
  r7 = (r1 + 20 | 0) >> 2;
  HEAP32[r7] = r14;
  if ((_test_keys(r1, r4 - 64 | 0) | 0) == 0) {
    r5 = 0;
    return r5;
  }
  __gcry_mpi_release(HEAP32[r8]);
  HEAP32[r8] = 0;
  __gcry_mpi_release(HEAP32[r2]);
  HEAP32[r2] = 0;
  __gcry_mpi_release(HEAP32[r3]);
  HEAP32[r3] = 0;
  __gcry_mpi_release(HEAP32[r12]);
  HEAP32[r12] = 0;
  __gcry_mpi_release(HEAP32[r13]);
  HEAP32[r13] = 0;
  __gcry_mpi_release(HEAP32[r7]);
  HEAP32[r7] = 0;
  __gcry_fips_signal_error(490416, 323, 494784, 0, 481680);
  r5 = 50;
  return r5;
}
function _gen_x931_parm_xp(r1) {
  var r2;
  r2 = __gcry_mpi_snew(r1);
  __gcry_mpi_randomize(r2, r1, 2);
  __gcry_mpi_set_highbit(r2, r1 - 1 | 0);
  __gcry_mpi_set_bit(r2, r1 - 2 | 0);
  if ((__gcry_mpi_get_nbits(r2) | 0) == (r1 | 0)) {
    return r2;
  } else {
    __gcry_assert_failed(475488, 490416, 349, 494844);
  }
}
function _gen_x931_parm_xi() {
  var r1;
  r1 = __gcry_mpi_snew(101);
  __gcry_mpi_randomize(r1, 101, 2);
  __gcry_mpi_set_highbit(r1, 100);
  if ((__gcry_mpi_get_nbits(r1) | 0) == 101) {
    return r1;
  } else {
    __gcry_assert_failed(475772, 490416, 364, 494864);
  }
}
function _do_decrypt864(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = r1 >> 2;
  r1 = HEAPU8[r3 + 9 | 0] << 16 | HEAPU8[r3 + 8 | 0] << 24 | HEAPU8[r3 + 10 | 0] << 8 | HEAPU8[r3 + 11 | 0];
  r5 = HEAPU8[r3 + 13 | 0] << 16 | HEAPU8[r3 + 12 | 0] << 24 | HEAPU8[r3 + 14 | 0] << 8 | HEAPU8[r3 + 15 | 0];
  r6 = HEAP32[r4 + 30] ^ r1;
  r7 = r6 ^ HEAP32[r4 + 31] ^ r5;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r6 | 0;
  r6 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r6 + r8 | 0;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r6 ^ (HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0]);
  r6 = r8 ^ (HEAPU8[r3 + 5 | 0] << 16 | HEAPU8[r3 + 4 | 0] << 24 | HEAPU8[r3 + 6 | 0] << 8 | HEAPU8[r3 + 7 | 0]);
  r3 = r7 ^ HEAP32[r4 + 28];
  r8 = r6 ^ HEAP32[r4 + 29] ^ r3;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 | 0;
  r3 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r3 + r9 | 0;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 ^ r1;
  r1 = r9 ^ r5;
  r5 = r8 ^ HEAP32[r4 + 26];
  r9 = r1 ^ HEAP32[r4 + 27] ^ r5;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 | 0;
  r5 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r5 + r3 | 0;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 ^ r7;
  r7 = r3 ^ r6;
  r6 = r9 ^ HEAP32[r4 + 24];
  r3 = r7 ^ HEAP32[r4 + 25] ^ r6;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 | 0;
  r6 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r6 + r5 | 0;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 ^ r8;
  r8 = r5 ^ r1;
  r1 = r3 ^ HEAP32[r4 + 22];
  r5 = r8 ^ HEAP32[r4 + 23] ^ r1;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 | 0;
  r1 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r1 + r6 | 0;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 ^ r9;
  r9 = r6 ^ r7;
  r7 = r5 ^ HEAP32[r4 + 20];
  r6 = r9 ^ HEAP32[r4 + 21] ^ r7;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 | 0;
  r7 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r7 + r1 | 0;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 ^ r3;
  r3 = r1 ^ r8;
  r8 = r6 ^ HEAP32[r4 + 18];
  r1 = r3 ^ HEAP32[r4 + 19] ^ r8;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 | 0;
  r8 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r8 + r7 | 0;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 ^ r5;
  r5 = r7 ^ r9;
  r9 = r1 ^ HEAP32[r4 + 16];
  r7 = r5 ^ HEAP32[r4 + 17] ^ r9;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 | 0;
  r9 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r9 + r8 | 0;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 ^ r6;
  r6 = r8 ^ r3;
  r3 = r7 ^ HEAP32[r4 + 14];
  r8 = r6 ^ HEAP32[r4 + 15] ^ r3;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 | 0;
  r3 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r3 + r9 | 0;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 ^ r1;
  r1 = r9 ^ r5;
  r5 = r8 ^ HEAP32[r4 + 12];
  r9 = r1 ^ HEAP32[r4 + 13] ^ r5;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 | 0;
  r5 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r5 + r3 | 0;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 ^ r7;
  r7 = r3 ^ r6;
  r6 = r9 ^ HEAP32[r4 + 10];
  r3 = r7 ^ HEAP32[r4 + 11] ^ r6;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 | 0;
  r6 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r6 + r5 | 0;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 ^ r8;
  r8 = r5 ^ r1;
  r1 = r3 ^ HEAP32[r4 + 8];
  r5 = r8 ^ HEAP32[r4 + 9] ^ r1;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 | 0;
  r1 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r1 + r6 | 0;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 ^ r9;
  r9 = r6 ^ r7;
  r7 = r5 ^ HEAP32[r4 + 6];
  r6 = r9 ^ HEAP32[r4 + 7] ^ r7;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 | 0;
  r7 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r7 + r1 | 0;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 ^ r3;
  r3 = r1 ^ r8;
  r8 = r6 ^ HEAP32[r4 + 4];
  r1 = r3 ^ HEAP32[r4 + 5] ^ r8;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 | 0;
  r8 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r8 + r7 | 0;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 ^ r5;
  r5 = r7 ^ r9;
  r9 = r1 ^ HEAP32[r4 + 2];
  r7 = r5 ^ HEAP32[r4 + 3] ^ r9;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 | 0;
  r9 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r9 + r8 | 0;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 ^ r6;
  r6 = r8 ^ r3;
  r3 = r7 ^ HEAP32[r4];
  r8 = r6 ^ HEAP32[r4 + 1] ^ r3;
  r4 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r4 + r3 | 0;
  r3 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r3 + r4 | 0;
  r4 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r4 + r3 ^ r1;
  r1 = r4 ^ r5;
  HEAP8[r2] = r8 >>> 24 & 255;
  HEAP8[r2 + 1 | 0] = r8 >>> 16 & 255;
  HEAP8[r2 + 2 | 0] = r8 >>> 8 & 255;
  HEAP8[r2 + 3 | 0] = r8 & 255;
  HEAP8[r2 + 4 | 0] = r1 >>> 24 & 255;
  HEAP8[r2 + 5 | 0] = r1 >>> 16 & 255;
  HEAP8[r2 + 6 | 0] = r1 >>> 8 & 255;
  HEAP8[r2 + 7 | 0] = r1 & 255;
  HEAP8[r2 + 8 | 0] = r7 >>> 24 & 255;
  HEAP8[r2 + 9 | 0] = r7 >>> 16 & 255;
  HEAP8[r2 + 10 | 0] = r7 >>> 8 & 255;
  HEAP8[r2 + 11 | 0] = r7 & 255;
  HEAP8[r2 + 12 | 0] = r6 >>> 24 & 255;
  HEAP8[r2 + 13 | 0] = r6 >>> 16 & 255;
  HEAP8[r2 + 14 | 0] = r6 >>> 8 & 255;
  HEAP8[r2 + 15 | 0] = r6 & 255;
  return;
}
function _do_encrypt865(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = r1 >> 2;
  r1 = HEAPU8[r3 + 9 | 0] << 16 | HEAPU8[r3 + 8 | 0] << 24 | HEAPU8[r3 + 10 | 0] << 8 | HEAPU8[r3 + 11 | 0];
  r5 = HEAPU8[r3 + 13 | 0] << 16 | HEAPU8[r3 + 12 | 0] << 24 | HEAPU8[r3 + 14 | 0] << 8 | HEAPU8[r3 + 15 | 0];
  r6 = HEAP32[r4] ^ r1;
  r7 = r6 ^ HEAP32[r4 + 1] ^ r5;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r6 | 0;
  r6 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r6 + r8 | 0;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r6 ^ (HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0]);
  r6 = r8 ^ (HEAPU8[r3 + 5 | 0] << 16 | HEAPU8[r3 + 4 | 0] << 24 | HEAPU8[r3 + 6 | 0] << 8 | HEAPU8[r3 + 7 | 0]);
  r3 = r7 ^ HEAP32[r4 + 2];
  r8 = r6 ^ HEAP32[r4 + 3] ^ r3;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 | 0;
  r3 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r3 + r9 | 0;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 ^ r1;
  r1 = r9 ^ r5;
  r5 = r8 ^ HEAP32[r4 + 4];
  r9 = r1 ^ HEAP32[r4 + 5] ^ r5;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 | 0;
  r5 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r5 + r3 | 0;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 ^ r7;
  r7 = r3 ^ r6;
  r6 = r9 ^ HEAP32[r4 + 6];
  r3 = r7 ^ HEAP32[r4 + 7] ^ r6;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 | 0;
  r6 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r6 + r5 | 0;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 ^ r8;
  r8 = r5 ^ r1;
  r1 = r3 ^ HEAP32[r4 + 8];
  r5 = r8 ^ HEAP32[r4 + 9] ^ r1;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 | 0;
  r1 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r1 + r6 | 0;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 ^ r9;
  r9 = r6 ^ r7;
  r7 = r5 ^ HEAP32[r4 + 10];
  r6 = r9 ^ HEAP32[r4 + 11] ^ r7;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 | 0;
  r7 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r7 + r1 | 0;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 ^ r3;
  r3 = r1 ^ r8;
  r8 = r6 ^ HEAP32[r4 + 12];
  r1 = r3 ^ HEAP32[r4 + 13] ^ r8;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 | 0;
  r8 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r8 + r7 | 0;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 ^ r5;
  r5 = r7 ^ r9;
  r9 = r1 ^ HEAP32[r4 + 14];
  r7 = r5 ^ HEAP32[r4 + 15] ^ r9;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 | 0;
  r9 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r9 + r8 | 0;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 ^ r6;
  r6 = r8 ^ r3;
  r3 = r7 ^ HEAP32[r4 + 16];
  r8 = r6 ^ HEAP32[r4 + 17] ^ r3;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 | 0;
  r3 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r3 + r9 | 0;
  r9 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r9 + r3 ^ r1;
  r1 = r9 ^ r5;
  r5 = r8 ^ HEAP32[r4 + 18];
  r9 = r1 ^ HEAP32[r4 + 19] ^ r5;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 | 0;
  r5 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r5 + r3 | 0;
  r3 = HEAP32[((r9 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r9 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 508348 >> 2];
  r9 = r3 + r5 ^ r7;
  r7 = r3 ^ r6;
  r6 = r9 ^ HEAP32[r4 + 20];
  r3 = r7 ^ HEAP32[r4 + 21] ^ r6;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 | 0;
  r6 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r6 + r5 | 0;
  r5 = HEAP32[((r3 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r3 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 508348 >> 2];
  r3 = r5 + r6 ^ r8;
  r8 = r5 ^ r1;
  r1 = r3 ^ HEAP32[r4 + 22];
  r5 = r8 ^ HEAP32[r4 + 23] ^ r1;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 | 0;
  r1 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r1 + r6 | 0;
  r6 = HEAP32[((r5 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r5 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 508348 >> 2];
  r5 = r6 + r1 ^ r9;
  r9 = r6 ^ r7;
  r7 = r5 ^ HEAP32[r4 + 24];
  r6 = r9 ^ HEAP32[r4 + 25] ^ r7;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 | 0;
  r7 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r7 + r1 | 0;
  r1 = HEAP32[((r6 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r6 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 508348 >> 2];
  r6 = r1 + r7 ^ r3;
  r3 = r1 ^ r8;
  r8 = r6 ^ HEAP32[r4 + 26];
  r1 = r3 ^ HEAP32[r4 + 27] ^ r8;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 | 0;
  r8 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r8 + r7 | 0;
  r7 = HEAP32[((r1 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r1 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r1 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 508348 >> 2];
  r1 = r7 + r8 ^ r5;
  r5 = r7 ^ r9;
  r9 = r1 ^ HEAP32[r4 + 28];
  r7 = r5 ^ HEAP32[r4 + 29] ^ r9;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 | 0;
  r9 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r9 + r8 | 0;
  r8 = HEAP32[((r7 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r7 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r7 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 508348 >> 2];
  r7 = r8 + r9 ^ r6;
  r6 = r8 ^ r3;
  r3 = r7 ^ HEAP32[r4 + 30];
  r8 = r6 ^ HEAP32[r4 + 31] ^ r3;
  r4 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r4 + r3 | 0;
  r3 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r3 + r4 | 0;
  r4 = HEAP32[((r8 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r8 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 508348 >> 2];
  r8 = r4 + r3 ^ r1;
  r1 = r4 ^ r5;
  HEAP8[r2] = r8 >>> 24 & 255;
  HEAP8[r2 + 1 | 0] = r8 >>> 16 & 255;
  HEAP8[r2 + 2 | 0] = r8 >>> 8 & 255;
  HEAP8[r2 + 3 | 0] = r8 & 255;
  HEAP8[r2 + 4 | 0] = r1 >>> 24 & 255;
  HEAP8[r2 + 5 | 0] = r1 >>> 16 & 255;
  HEAP8[r2 + 6 | 0] = r1 >>> 8 & 255;
  HEAP8[r2 + 7 | 0] = r1 & 255;
  HEAP8[r2 + 8 | 0] = r7 >>> 24 & 255;
  HEAP8[r2 + 9 | 0] = r7 >>> 16 & 255;
  HEAP8[r2 + 10 | 0] = r7 >>> 8 & 255;
  HEAP8[r2 + 11 | 0] = r7 & 255;
  HEAP8[r2 + 12 | 0] = r6 >>> 24 & 255;
  HEAP8[r2 + 13 | 0] = r6 >>> 16 & 255;
  HEAP8[r2 + 14 | 0] = r6 >>> 8 & 255;
  HEAP8[r2 + 15 | 0] = r6 & 255;
  return;
}
function _do_setkey866(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = 0;
  r5 = STACKTOP;
  r6 = r1 | 0;
  do {
    if (HEAP8[457908]) {
      r4 = 2479;
    } else {
      HEAP8[457908] = 1;
      r1 = _selftest867();
      HEAP32[114474] = r1;
      if ((r1 | 0) == 0) {
        break;
      }
      __gcry_log_error(483008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
      r4 = 2479;
      break;
    }
  } while (0);
  do {
    if (r4 == 2479) {
      if ((HEAP32[114474] | 0) == 0) {
        break;
      } else {
        r7 = 50;
      }
      STACKTOP = r5;
      return r7;
    }
  } while (0);
  if ((r3 | 0) != 16) {
    r7 = 44;
    STACKTOP = r5;
    return r7;
  }
  r3 = HEAPU8[r2 + 13 | 0] << 16 | HEAPU8[r2 + 12 | 0] << 24 | HEAPU8[r2 + 14 | 0] << 8 | HEAPU8[r2 + 15 | 0];
  r4 = HEAPU8[r2 + 9 | 0] << 16 | HEAPU8[r2 + 8 | 0] << 24 | HEAPU8[r2 + 10 | 0] << 8 | HEAPU8[r2 + 11 | 0];
  r1 = HEAPU8[r2 + 5 | 0] << 16 | HEAPU8[r2 + 4 | 0] << 24 | HEAPU8[r2 + 6 | 0] << 8 | HEAPU8[r2 + 7 | 0];
  r8 = HEAPU8[r2 + 1 | 0] << 16 | HEAPU8[r2] << 24 | HEAPU8[r2 + 2 | 0] << 8 | HEAPU8[r2 + 3 | 0];
  r2 = r6;
  r6 = 0;
  while (1) {
    r9 = HEAP32[(r6 << 2) + 512972 >> 2];
    r10 = r8 + r4 - r9 | 0;
    r11 = r1 - r3 + r9 | 0;
    HEAP32[r2 >> 2] = HEAP32[((r10 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r10 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r10 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r10 >>> 24 << 2) + 508348 >> 2];
    HEAP32[r2 + 4 >> 2] = HEAP32[((r11 >>> 8 & 255) << 2) + 510396 >> 2] ^ HEAP32[((r11 & 255) << 2) + 511420 >> 2] ^ HEAP32[((r11 >>> 16 & 255) << 2) + 509372 >> 2] ^ HEAP32[(r11 >>> 24 << 2) + 508348 >> 2];
    if ((r6 & 1 | 0) == 0) {
      r12 = r8 >>> 8 | r1 << 24;
      r13 = r8 << 24 | r1 >>> 8;
      r14 = r4;
      r15 = r3;
    } else {
      r12 = r8;
      r13 = r1;
      r14 = r4 << 8 | r3 >>> 24;
      r15 = r4 >>> 24 | r3 << 8;
    }
    r11 = r6 + 1 | 0;
    if ((r11 | 0) == 16) {
      r7 = 0;
      break;
    } else {
      r3 = r15;
      r4 = r14;
      r1 = r13;
      r8 = r12;
      r2 = r2 + 8 | 0;
      r6 = r11;
    }
  }
  STACKTOP = r5;
  return r7;
}
function _selftest867() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 144 | 0;
  r2 = r1;
  _seed_setkey(r2, 415864, 16);
  r3 = r1 + 128 | 0;
  _seed_encrypt(r2, r3, 415644);
  if ((_memcmp(r3, 416672, 16) | 0) != 0) {
    r4 = 478040;
    STACKTOP = r1;
    return r4;
  }
  _seed_decrypt(r2, r3, r3);
  r4 = (_memcmp(r3, 415644, 16) | 0) == 0 ? 0 : 475152;
  STACKTOP = r1;
  return r4;
}
function _serpent_setkey(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  r5 = r1;
  if (!HEAP8[413308]) {
    r1 = _serpent_test();
    HEAP32[103326] = r1;
    if ((r1 | 0) != 0) {
      __gcry_log_error(475112, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
    }
    HEAP8[413308] = 1;
  }
  if ((HEAP32[103326] | 0) != 0) {
    r6 = 50;
    STACKTOP = r4;
    return r6;
  }
  _serpent_setkey_internal(r5, r2, r3);
  __gcry_burn_stack(32);
  r6 = 0;
  STACKTOP = r4;
  return r6;
}
function _serpent_encrypt(r1, r2, r3) {
  _serpent_encrypt_internal(r1, r3, r2);
  __gcry_burn_stack(32);
  return;
}
function _serpent_decrypt(r1, r2, r3) {
  _serpent_decrypt_internal(r1, r3, r2);
  __gcry_burn_stack(32);
  return;
}
function _serpent_decrypt_internal(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = r1 >> 2;
  r1 = HEAP32[r4 + 128] ^ HEAP32[r2 >> 2];
  r5 = HEAP32[r4 + 129] ^ HEAP32[r2 + 4 >> 2];
  r6 = HEAP32[r4 + 130] ^ HEAP32[r2 + 8 >> 2];
  r7 = HEAP32[r4 + 131] ^ HEAP32[r2 + 12 >> 2];
  r2 = r5 & r1;
  r8 = r7 & (r5 | r1);
  r9 = r8 ^ (r6 | r2);
  r10 = r8 ^ r5;
  r8 = (r9 ^ (r7 ^ -1) | r10) ^ r1;
  r11 = HEAP32[r4 + 124] ^ r6 ^ r10 ^ (r8 | r7);
  r10 = r8 ^ HEAP32[r4 + 125];
  r8 = (r7 | r1) & r6 ^ (r7 ^ r5 | r2) ^ HEAP32[r4 + 126];
  r2 = HEAP32[r4 + 127] ^ r9;
  r9 = (r8 >>> 22 | r8 << 10) ^ r2 ^ r10 << 7;
  r8 = r10 ^ r2 ^ (r11 >>> 5 | r11 << 27);
  r11 = r9 ^ (r2 >>> 7 | r2 << 25) ^ r8 << 3;
  r2 = r9 ^ (r10 >>> 1 | r10 << 31) ^ r8;
  r10 = r9 >>> 3 | r9 << 29;
  r9 = r8 >>> 13 | r8 << 19;
  r8 = r9 ^ r10;
  r5 = r10 ^ -1;
  r10 = r8 & r2 | r11;
  r7 = r9 & (r2 | r5);
  r6 = r11 ^ r2 ^ (r9 | r5);
  r1 = r10 ^ (r7 ^ -1);
  r12 = r1 ^ HEAP32[r4 + 120];
  r13 = r6 ^ HEAP32[r4 + 121];
  r14 = r8 ^ HEAP32[r4 + 122] ^ (r11 | r5) ^ r1 & r2;
  r2 = r9 ^ HEAP32[r4 + 123] ^ r7 ^ r6 ^ r10 & r8;
  r8 = r2 ^ r13 << 7 ^ (r14 >>> 22 | r14 << 10);
  r14 = r2 ^ r13 ^ (r12 >>> 5 | r12 << 27);
  r12 = r8 ^ (r2 >>> 7 | r2 << 25) ^ r14 << 3;
  r2 = r14 ^ (r13 >>> 1 | r13 << 31) ^ r8;
  r13 = r8 >>> 3 | r8 << 29;
  r8 = r14 >>> 13 | r14 << 19;
  r14 = r12 & r8;
  r10 = r14 ^ r13;
  r6 = r12 ^ r8 ^ r10 & r2;
  r7 = (r13 & r8 | r2) ^ r14;
  r14 = r6 ^ HEAP32[r4 + 116];
  r13 = r7 ^ r6 ^ HEAP32[r4 + 117];
  r9 = r2 ^ HEAP32[r4 + 118] ^ r12 ^ r10 ^ (r7 | r6);
  r7 = r10 ^ HEAP32[r4 + 119] ^ (r6 & r8 | r2 ^ -1);
  r2 = r13 << 7 ^ r7 ^ (r9 >>> 22 | r9 << 10);
  r9 = (r14 >>> 5 | r14 << 27) ^ r13 ^ r7;
  r14 = r2 ^ (r7 >>> 7 | r7 << 25) ^ r9 << 3;
  r7 = r9 ^ (r13 >>> 1 | r13 << 31) ^ r2;
  r13 = r2 >>> 3 | r2 << 29;
  r2 = r9 >>> 13 | r9 << 19;
  r9 = r14 | r7;
  r8 = r9 & r2;
  r6 = (r13 | r14) ^ r7;
  r7 = r6 & r2;
  r10 = r13 ^ r14 ^ r7;
  r12 = r10 | r8 ^ -1;
  r1 = r2 ^ HEAP32[r4 + 112] ^ r6 ^ r12;
  r5 = r10 ^ HEAP32[r4 + 113];
  r10 = r9 ^ HEAP32[r4 + 114] ^ r12 ^ (r7 ^ r2 | r13);
  r13 = r14 ^ HEAP32[r4 + 115] ^ r6 ^ r8;
  r8 = r5 << 7 ^ r13 ^ (r10 >>> 22 | r10 << 10);
  r10 = r5 ^ r13 ^ (r1 >>> 5 | r1 << 27);
  r1 = r8 ^ (r13 >>> 7 | r13 << 25) ^ r10 << 3;
  r13 = r10 ^ (r5 >>> 1 | r5 << 31) ^ r8;
  r5 = r8 >>> 3 | r8 << 29;
  r8 = r10 >>> 13 | r10 << 19;
  r10 = r5 | r1;
  r6 = r1 | r8;
  r14 = r6 ^ r5;
  r5 = r1 ^ r8;
  r1 = (r6 ^ r13) & r14 ^ r5;
  r6 = r10 & r13 ^ r14;
  r2 = r6 ^ HEAP32[r4 + 108];
  r7 = r13 ^ HEAP32[r4 + 109] ^ (r6 | r5) & (r14 ^ r8);
  r14 = r1 ^ HEAP32[r4 + 110];
  r6 = r5 ^ HEAP32[r4 + 111] ^ r10 ^ (r1 & r8 | r13);
  r13 = (r14 >>> 22 | r14 << 10) ^ r6 ^ r7 << 7;
  r14 = (r2 >>> 5 | r2 << 27) ^ r7 ^ r6;
  r2 = (r6 >>> 7 | r6 << 25) ^ r13 ^ r14 << 3;
  r6 = (r7 >>> 1 | r7 << 31) ^ r14 ^ r13;
  r7 = r13 >>> 3 | r13 << 29;
  r13 = r14 >>> 13 | r14 << 19;
  r14 = r7 ^ r2;
  r8 = r2 ^ r13 ^ (r14 | r6);
  r1 = r7 | r13;
  r10 = r7 & r13 | r2 ^ -1;
  r13 = r1 & r6 ^ r10;
  r5 = (r8 | r2) & r6 ^ r1 & r14;
  r14 = r8 ^ HEAP32[r4 + 104];
  r1 = r5 ^ HEAP32[r4 + 105];
  r6 = r10 ^ HEAP32[r4 + 106] ^ r8 ^ r13 & r7 ^ r5;
  r5 = r13 ^ HEAP32[r4 + 107];
  r13 = r1 << 7 ^ r5 ^ (r6 >>> 22 | r6 << 10);
  r6 = (r14 >>> 5 | r14 << 27) ^ r5 ^ r1;
  r14 = r6 << 3 ^ (r5 >>> 7 | r5 << 25) ^ r13;
  r5 = (r1 >>> 1 | r1 << 31) ^ r6 ^ r13;
  r1 = r13 >>> 3 | r13 << 29;
  r13 = r6 >>> 13 | r6 << 19;
  r6 = r5 ^ r13;
  r7 = r1 & r13;
  r8 = r1 ^ (r5 | r14);
  r10 = (r8 | r13) & r6;
  r2 = r10 ^ ((r7 | r14) ^ -1);
  r12 = (r10 ^ r5) & r14 ^ (r8 | r7);
  r7 = r1 ^ HEAP32[r4 + 100] ^ r10 ^ (r2 | r13) ^ r12;
  r13 = r12 ^ HEAP32[r4 + 101];
  r12 = r2 ^ HEAP32[r4 + 102];
  r2 = r6 ^ HEAP32[r4 + 103] ^ r8;
  r8 = (r12 >>> 22 | r12 << 10) ^ r2 ^ r13 << 7;
  r12 = r13 ^ r2 ^ (r7 >>> 5 | r7 << 27);
  r7 = r8 ^ (r2 >>> 7 | r2 << 25) ^ r12 << 3;
  r2 = r8 ^ (r13 >>> 1 | r13 << 31) ^ r12;
  r13 = r8 >>> 3 | r8 << 29;
  r8 = r12 >>> 13 | r12 << 19;
  r12 = r7 ^ r13;
  r6 = r2 | r13;
  r10 = (r8 | r2) ^ r12;
  r1 = r10 ^ -1;
  r14 = (r12 & r13 | r8) ^ (r7 ^ r2) & r6;
  r2 = r14 ^ (r10 | r8);
  r12 = (r7 | r1) ^ r6;
  r6 = r13 ^ HEAP32[r4 + 96] ^ r8 ^ (r2 & r10 | r12);
  r10 = r14 ^ HEAP32[r4 + 97];
  r14 = HEAP32[r4 + 98] ^ r1;
  r1 = r12 ^ HEAP32[r4 + 99] ^ r2;
  r2 = r1 ^ (r14 >>> 22 | r14 << 10) ^ r10 << 7;
  r14 = r1 ^ r10 ^ (r6 >>> 5 | r6 << 27);
  r6 = (r1 >>> 7 | r1 << 25) ^ r2 ^ r14 << 3;
  r1 = r2 ^ (r10 >>> 1 | r10 << 31) ^ r14;
  r10 = r2 >>> 3 | r2 << 29;
  r2 = r14 >>> 13 | r14 << 19;
  r14 = r2 & r1;
  r12 = (r2 | r1) & r6;
  r8 = (r14 | r10) ^ r12;
  r13 = r12 ^ r1;
  r12 = (r8 ^ (r6 ^ -1) | r13) ^ r2;
  r7 = r10 ^ HEAP32[r4 + 92] ^ r13 ^ (r12 | r6);
  r13 = r12 ^ HEAP32[r4 + 93];
  r12 = (r14 | r6 ^ r1) ^ HEAP32[r4 + 94] ^ (r2 | r6) & r10;
  r10 = r8 ^ HEAP32[r4 + 95];
  r8 = (r12 >>> 22 | r12 << 10) ^ r10 ^ r13 << 7;
  r12 = r13 ^ r10 ^ (r7 >>> 5 | r7 << 27);
  r7 = r8 ^ (r10 >>> 7 | r10 << 25) ^ r12 << 3;
  r10 = r8 ^ (r13 >>> 1 | r13 << 31) ^ r12;
  r13 = r8 >>> 3 | r8 << 29;
  r8 = r12 >>> 13 | r12 << 19;
  r12 = r8 ^ r13;
  r6 = r13 ^ -1;
  r13 = r12 & r10 | r7;
  r2 = r8 & (r10 | r6);
  r1 = r7 ^ r10 ^ (r8 | r6);
  r14 = r13 ^ (r2 ^ -1);
  r5 = r14 ^ HEAP32[r4 + 88];
  r9 = r1 ^ HEAP32[r4 + 89];
  r11 = r12 ^ HEAP32[r4 + 90] ^ (r7 | r6) ^ r14 & r10;
  r10 = r8 ^ HEAP32[r4 + 91] ^ r2 ^ r1 ^ r13 & r12;
  r12 = r10 ^ r9 << 7 ^ (r11 >>> 22 | r11 << 10);
  r11 = r10 ^ r9 ^ (r5 >>> 5 | r5 << 27);
  r5 = r12 ^ (r10 >>> 7 | r10 << 25) ^ r11 << 3;
  r10 = r11 ^ (r9 >>> 1 | r9 << 31) ^ r12;
  r9 = r12 >>> 3 | r12 << 29;
  r12 = r11 >>> 13 | r11 << 19;
  r11 = r5 & r12;
  r13 = r11 ^ r9;
  r1 = r5 ^ r12 ^ r13 & r10;
  r2 = (r9 & r12 | r10) ^ r11;
  r11 = r1 ^ HEAP32[r4 + 84];
  r9 = r2 ^ r1 ^ HEAP32[r4 + 85];
  r8 = r10 ^ HEAP32[r4 + 86] ^ r5 ^ r13 ^ (r2 | r1);
  r2 = r13 ^ HEAP32[r4 + 87] ^ (r1 & r12 | r10 ^ -1);
  r10 = r9 << 7 ^ r2 ^ (r8 >>> 22 | r8 << 10);
  r8 = (r11 >>> 5 | r11 << 27) ^ r9 ^ r2;
  r11 = r10 ^ (r2 >>> 7 | r2 << 25) ^ r8 << 3;
  r2 = r8 ^ (r9 >>> 1 | r9 << 31) ^ r10;
  r9 = r10 >>> 3 | r10 << 29;
  r10 = r8 >>> 13 | r8 << 19;
  r8 = r11 | r2;
  r12 = r8 & r10;
  r1 = (r9 | r11) ^ r2;
  r2 = r1 & r10;
  r13 = r9 ^ r11 ^ r2;
  r5 = r13 | r12 ^ -1;
  r14 = r10 ^ HEAP32[r4 + 80] ^ r1 ^ r5;
  r6 = r13 ^ HEAP32[r4 + 81];
  r13 = r8 ^ HEAP32[r4 + 82] ^ r5 ^ (r2 ^ r10 | r9);
  r9 = r11 ^ HEAP32[r4 + 83] ^ r1 ^ r12;
  r12 = r6 << 7 ^ r9 ^ (r13 >>> 22 | r13 << 10);
  r13 = r6 ^ r9 ^ (r14 >>> 5 | r14 << 27);
  r14 = r12 ^ (r9 >>> 7 | r9 << 25) ^ r13 << 3;
  r9 = r13 ^ (r6 >>> 1 | r6 << 31) ^ r12;
  r6 = r12 >>> 3 | r12 << 29;
  r12 = r13 >>> 13 | r13 << 19;
  r13 = r6 | r14;
  r1 = r14 | r12;
  r11 = r1 ^ r6;
  r6 = r14 ^ r12;
  r14 = (r1 ^ r9) & r11 ^ r6;
  r1 = r13 & r9 ^ r11;
  r10 = r1 ^ HEAP32[r4 + 76];
  r2 = r9 ^ HEAP32[r4 + 77] ^ (r1 | r6) & (r11 ^ r12);
  r11 = r14 ^ HEAP32[r4 + 78];
  r1 = r6 ^ HEAP32[r4 + 79] ^ r13 ^ (r14 & r12 | r9);
  r9 = (r11 >>> 22 | r11 << 10) ^ r1 ^ r2 << 7;
  r11 = (r10 >>> 5 | r10 << 27) ^ r2 ^ r1;
  r10 = (r1 >>> 7 | r1 << 25) ^ r9 ^ r11 << 3;
  r1 = (r2 >>> 1 | r2 << 31) ^ r11 ^ r9;
  r2 = r9 >>> 3 | r9 << 29;
  r9 = r11 >>> 13 | r11 << 19;
  r11 = r2 ^ r10;
  r12 = r10 ^ r9 ^ (r11 | r1);
  r14 = r2 | r9;
  r13 = r2 & r9 | r10 ^ -1;
  r9 = r14 & r1 ^ r13;
  r6 = (r12 | r10) & r1 ^ r14 & r11;
  r11 = r12 ^ HEAP32[r4 + 72];
  r14 = r6 ^ HEAP32[r4 + 73];
  r1 = r13 ^ HEAP32[r4 + 74] ^ r12 ^ r9 & r2 ^ r6;
  r6 = r9 ^ HEAP32[r4 + 75];
  r9 = r14 << 7 ^ r6 ^ (r1 >>> 22 | r1 << 10);
  r1 = (r11 >>> 5 | r11 << 27) ^ r6 ^ r14;
  r11 = r1 << 3 ^ (r6 >>> 7 | r6 << 25) ^ r9;
  r6 = (r14 >>> 1 | r14 << 31) ^ r1 ^ r9;
  r14 = r9 >>> 3 | r9 << 29;
  r9 = r1 >>> 13 | r1 << 19;
  r1 = r6 ^ r9;
  r2 = r14 & r9;
  r12 = r14 ^ (r6 | r11);
  r13 = (r12 | r9) & r1;
  r10 = r13 ^ ((r2 | r11) ^ -1);
  r5 = (r13 ^ r6) & r11 ^ (r12 | r2);
  r2 = r14 ^ HEAP32[r4 + 68] ^ r13 ^ (r10 | r9) ^ r5;
  r9 = r5 ^ HEAP32[r4 + 69];
  r5 = r10 ^ HEAP32[r4 + 70];
  r10 = r1 ^ HEAP32[r4 + 71] ^ r12;
  r12 = (r5 >>> 22 | r5 << 10) ^ r10 ^ r9 << 7;
  r5 = r9 ^ r10 ^ (r2 >>> 5 | r2 << 27);
  r2 = r12 ^ (r10 >>> 7 | r10 << 25) ^ r5 << 3;
  r10 = r12 ^ (r9 >>> 1 | r9 << 31) ^ r5;
  r9 = r12 >>> 3 | r12 << 29;
  r12 = r5 >>> 13 | r5 << 19;
  r5 = r2 ^ r9;
  r1 = r10 | r9;
  r13 = (r12 | r10) ^ r5;
  r14 = r13 ^ -1;
  r11 = (r5 & r9 | r12) ^ (r2 ^ r10) & r1;
  r10 = r11 ^ (r13 | r12);
  r5 = (r2 | r14) ^ r1;
  r1 = r9 ^ HEAP32[r4 + 64] ^ r12 ^ (r10 & r13 | r5);
  r13 = r11 ^ HEAP32[r4 + 65];
  r11 = HEAP32[r4 + 66] ^ r14;
  r14 = r5 ^ HEAP32[r4 + 67] ^ r10;
  r10 = r14 ^ (r11 >>> 22 | r11 << 10) ^ r13 << 7;
  r11 = r14 ^ r13 ^ (r1 >>> 5 | r1 << 27);
  r1 = (r14 >>> 7 | r14 << 25) ^ r10 ^ r11 << 3;
  r14 = r10 ^ (r13 >>> 1 | r13 << 31) ^ r11;
  r13 = r10 >>> 3 | r10 << 29;
  r10 = r11 >>> 13 | r11 << 19;
  r11 = r10 & r14;
  r5 = (r10 | r14) & r1;
  r12 = (r11 | r13) ^ r5;
  r9 = r5 ^ r14;
  r5 = (r12 ^ (r1 ^ -1) | r9) ^ r10;
  r2 = r13 ^ HEAP32[r4 + 60] ^ r9 ^ (r5 | r1);
  r9 = r5 ^ HEAP32[r4 + 61];
  r5 = (r11 | r1 ^ r14) ^ HEAP32[r4 + 62] ^ (r10 | r1) & r13;
  r13 = r12 ^ HEAP32[r4 + 63];
  r12 = (r5 >>> 22 | r5 << 10) ^ r13 ^ r9 << 7;
  r5 = r9 ^ r13 ^ (r2 >>> 5 | r2 << 27);
  r2 = r12 ^ (r13 >>> 7 | r13 << 25) ^ r5 << 3;
  r13 = r12 ^ (r9 >>> 1 | r9 << 31) ^ r5;
  r9 = r12 >>> 3 | r12 << 29;
  r12 = r5 >>> 13 | r5 << 19;
  r5 = r12 ^ r9;
  r1 = r9 ^ -1;
  r9 = r5 & r13 | r2;
  r10 = r12 & (r13 | r1);
  r14 = r2 ^ r13 ^ (r12 | r1);
  r11 = r9 ^ (r10 ^ -1);
  r6 = r11 ^ HEAP32[r4 + 56];
  r8 = r14 ^ HEAP32[r4 + 57];
  r7 = r5 ^ HEAP32[r4 + 58] ^ (r2 | r1) ^ r11 & r13;
  r13 = r12 ^ HEAP32[r4 + 59] ^ r10 ^ r14 ^ r9 & r5;
  r5 = r13 ^ r8 << 7 ^ (r7 >>> 22 | r7 << 10);
  r7 = r13 ^ r8 ^ (r6 >>> 5 | r6 << 27);
  r6 = r5 ^ (r13 >>> 7 | r13 << 25) ^ r7 << 3;
  r13 = r7 ^ (r8 >>> 1 | r8 << 31) ^ r5;
  r8 = r5 >>> 3 | r5 << 29;
  r5 = r7 >>> 13 | r7 << 19;
  r7 = r6 & r5;
  r9 = r7 ^ r8;
  r14 = r6 ^ r5 ^ r9 & r13;
  r10 = (r8 & r5 | r13) ^ r7;
  r7 = r14 ^ HEAP32[r4 + 52];
  r8 = r10 ^ r14 ^ HEAP32[r4 + 53];
  r12 = r13 ^ HEAP32[r4 + 54] ^ r6 ^ r9 ^ (r10 | r14);
  r10 = r9 ^ HEAP32[r4 + 55] ^ (r14 & r5 | r13 ^ -1);
  r13 = r8 << 7 ^ r10 ^ (r12 >>> 22 | r12 << 10);
  r12 = (r7 >>> 5 | r7 << 27) ^ r8 ^ r10;
  r7 = r13 ^ (r10 >>> 7 | r10 << 25) ^ r12 << 3;
  r10 = r12 ^ (r8 >>> 1 | r8 << 31) ^ r13;
  r8 = r13 >>> 3 | r13 << 29;
  r13 = r12 >>> 13 | r12 << 19;
  r12 = r7 | r10;
  r5 = r12 & r13;
  r14 = (r8 | r7) ^ r10;
  r10 = r14 & r13;
  r9 = r8 ^ r7 ^ r10;
  r6 = r9 | r5 ^ -1;
  r11 = r13 ^ HEAP32[r4 + 48] ^ r14 ^ r6;
  r1 = r9 ^ HEAP32[r4 + 49];
  r9 = r12 ^ HEAP32[r4 + 50] ^ r6 ^ (r10 ^ r13 | r8);
  r8 = r7 ^ HEAP32[r4 + 51] ^ r14 ^ r5;
  r5 = r1 << 7 ^ r8 ^ (r9 >>> 22 | r9 << 10);
  r9 = r1 ^ r8 ^ (r11 >>> 5 | r11 << 27);
  r11 = r5 ^ (r8 >>> 7 | r8 << 25) ^ r9 << 3;
  r8 = r9 ^ (r1 >>> 1 | r1 << 31) ^ r5;
  r1 = r5 >>> 3 | r5 << 29;
  r5 = r9 >>> 13 | r9 << 19;
  r9 = r1 | r11;
  r14 = r11 | r5;
  r7 = r14 ^ r1;
  r1 = r11 ^ r5;
  r11 = (r14 ^ r8) & r7 ^ r1;
  r14 = r9 & r8 ^ r7;
  r13 = r14 ^ HEAP32[r4 + 44];
  r10 = r8 ^ HEAP32[r4 + 45] ^ (r14 | r1) & (r7 ^ r5);
  r7 = r11 ^ HEAP32[r4 + 46];
  r14 = r1 ^ HEAP32[r4 + 47] ^ r9 ^ (r11 & r5 | r8);
  r8 = (r7 >>> 22 | r7 << 10) ^ r14 ^ r10 << 7;
  r7 = (r13 >>> 5 | r13 << 27) ^ r10 ^ r14;
  r13 = (r14 >>> 7 | r14 << 25) ^ r8 ^ r7 << 3;
  r14 = (r10 >>> 1 | r10 << 31) ^ r7 ^ r8;
  r10 = r8 >>> 3 | r8 << 29;
  r8 = r7 >>> 13 | r7 << 19;
  r7 = r10 ^ r13;
  r5 = r13 ^ r8 ^ (r7 | r14);
  r11 = r10 | r8;
  r9 = r10 & r8 | r13 ^ -1;
  r8 = r11 & r14 ^ r9;
  r1 = (r5 | r13) & r14 ^ r11 & r7;
  r7 = r5 ^ HEAP32[r4 + 40];
  r11 = r1 ^ HEAP32[r4 + 41];
  r14 = r9 ^ HEAP32[r4 + 42] ^ r5 ^ r8 & r10 ^ r1;
  r1 = r8 ^ HEAP32[r4 + 43];
  r8 = r11 << 7 ^ r1 ^ (r14 >>> 22 | r14 << 10);
  r14 = (r7 >>> 5 | r7 << 27) ^ r1 ^ r11;
  r7 = r14 << 3 ^ (r1 >>> 7 | r1 << 25) ^ r8;
  r1 = (r11 >>> 1 | r11 << 31) ^ r14 ^ r8;
  r11 = r8 >>> 3 | r8 << 29;
  r8 = r14 >>> 13 | r14 << 19;
  r14 = r1 ^ r8;
  r10 = r11 & r8;
  r5 = r11 ^ (r1 | r7);
  r9 = (r5 | r8) & r14;
  r13 = r9 ^ ((r10 | r7) ^ -1);
  r6 = (r9 ^ r1) & r7 ^ (r5 | r10);
  r10 = r11 ^ HEAP32[r4 + 36] ^ r9 ^ (r13 | r8) ^ r6;
  r8 = r6 ^ HEAP32[r4 + 37];
  r6 = r13 ^ HEAP32[r4 + 38];
  r13 = r14 ^ HEAP32[r4 + 39] ^ r5;
  r5 = (r6 >>> 22 | r6 << 10) ^ r13 ^ r8 << 7;
  r6 = r8 ^ r13 ^ (r10 >>> 5 | r10 << 27);
  r10 = r5 ^ (r13 >>> 7 | r13 << 25) ^ r6 << 3;
  r13 = r5 ^ (r8 >>> 1 | r8 << 31) ^ r6;
  r8 = r5 >>> 3 | r5 << 29;
  r5 = r6 >>> 13 | r6 << 19;
  r6 = r10 ^ r8;
  r14 = r13 | r8;
  r9 = (r5 | r13) ^ r6;
  r11 = r9 ^ -1;
  r7 = (r6 & r8 | r5) ^ (r10 ^ r13) & r14;
  r13 = r7 ^ (r9 | r5);
  r6 = (r10 | r11) ^ r14;
  r14 = r8 ^ HEAP32[r4 + 32] ^ r5 ^ (r13 & r9 | r6);
  r9 = r7 ^ HEAP32[r4 + 33];
  r7 = HEAP32[r4 + 34] ^ r11;
  r11 = r6 ^ HEAP32[r4 + 35] ^ r13;
  r13 = r11 ^ (r7 >>> 22 | r7 << 10) ^ r9 << 7;
  r7 = r11 ^ r9 ^ (r14 >>> 5 | r14 << 27);
  r14 = (r11 >>> 7 | r11 << 25) ^ r13 ^ r7 << 3;
  r11 = r13 ^ (r9 >>> 1 | r9 << 31) ^ r7;
  r9 = r13 >>> 3 | r13 << 29;
  r13 = r7 >>> 13 | r7 << 19;
  r7 = r13 & r11;
  r6 = (r13 | r11) & r14;
  r5 = (r7 | r9) ^ r6;
  r8 = r6 ^ r11;
  r6 = (r5 ^ (r14 ^ -1) | r8) ^ r13;
  r10 = r9 ^ HEAP32[r4 + 28] ^ r8 ^ (r6 | r14);
  r8 = r6 ^ HEAP32[r4 + 29];
  r6 = (r7 | r14 ^ r11) ^ HEAP32[r4 + 30] ^ (r13 | r14) & r9;
  r9 = r5 ^ HEAP32[r4 + 31];
  r5 = (r6 >>> 22 | r6 << 10) ^ r9 ^ r8 << 7;
  r6 = r8 ^ r9 ^ (r10 >>> 5 | r10 << 27);
  r10 = r5 ^ (r9 >>> 7 | r9 << 25) ^ r6 << 3;
  r9 = r5 ^ (r8 >>> 1 | r8 << 31) ^ r6;
  r8 = r5 >>> 3 | r5 << 29;
  r5 = r6 >>> 13 | r6 << 19;
  r6 = r5 ^ r8;
  r14 = r8 ^ -1;
  r8 = r6 & r9 | r10;
  r13 = r5 & (r9 | r14);
  r11 = r10 ^ r9 ^ (r5 | r14);
  r7 = r8 ^ (r13 ^ -1);
  r1 = r7 ^ HEAP32[r4 + 24];
  r12 = r11 ^ HEAP32[r4 + 25];
  r2 = r6 ^ HEAP32[r4 + 26] ^ (r10 | r14) ^ r7 & r9;
  r9 = r5 ^ HEAP32[r4 + 27] ^ r13 ^ r11 ^ r8 & r6;
  r6 = r9 ^ r12 << 7 ^ (r2 >>> 22 | r2 << 10);
  r2 = r9 ^ r12 ^ (r1 >>> 5 | r1 << 27);
  r1 = r6 ^ (r9 >>> 7 | r9 << 25) ^ r2 << 3;
  r9 = r2 ^ (r12 >>> 1 | r12 << 31) ^ r6;
  r12 = r6 >>> 3 | r6 << 29;
  r6 = r2 >>> 13 | r2 << 19;
  r2 = r1 & r6;
  r8 = r2 ^ r12;
  r11 = r1 ^ r6 ^ r8 & r9;
  r13 = (r12 & r6 | r9) ^ r2;
  r2 = r11 ^ HEAP32[r4 + 20];
  r12 = r13 ^ r11 ^ HEAP32[r4 + 21];
  r5 = r9 ^ HEAP32[r4 + 22] ^ r1 ^ r8 ^ (r13 | r11);
  r13 = r8 ^ HEAP32[r4 + 23] ^ (r11 & r6 | r9 ^ -1);
  r9 = r12 << 7 ^ r13 ^ (r5 >>> 22 | r5 << 10);
  r5 = (r2 >>> 5 | r2 << 27) ^ r12 ^ r13;
  r2 = r9 ^ (r13 >>> 7 | r13 << 25) ^ r5 << 3;
  r13 = r5 ^ (r12 >>> 1 | r12 << 31) ^ r9;
  r12 = r9 >>> 3 | r9 << 29;
  r9 = r5 >>> 13 | r5 << 19;
  r5 = r2 | r13;
  r6 = r5 & r9;
  r11 = (r12 | r2) ^ r13;
  r13 = r11 & r9;
  r8 = r12 ^ r2 ^ r13;
  r1 = r8 | r6 ^ -1;
  r7 = r9 ^ HEAP32[r4 + 16] ^ r11 ^ r1;
  r14 = r8 ^ HEAP32[r4 + 17];
  r8 = r5 ^ HEAP32[r4 + 18] ^ r1 ^ (r13 ^ r9 | r12);
  r12 = r2 ^ HEAP32[r4 + 19] ^ r11 ^ r6;
  r6 = r14 << 7 ^ r12 ^ (r8 >>> 22 | r8 << 10);
  r8 = r14 ^ r12 ^ (r7 >>> 5 | r7 << 27);
  r7 = r6 ^ (r12 >>> 7 | r12 << 25) ^ r8 << 3;
  r12 = r8 ^ (r14 >>> 1 | r14 << 31) ^ r6;
  r14 = r6 >>> 3 | r6 << 29;
  r6 = r8 >>> 13 | r8 << 19;
  r8 = r14 | r7;
  r11 = r7 | r6;
  r2 = r11 ^ r14;
  r14 = r7 ^ r6;
  r7 = (r11 ^ r12) & r2 ^ r14;
  r11 = r8 & r12 ^ r2;
  r9 = r11 ^ HEAP32[r4 + 12];
  r13 = r12 ^ HEAP32[r4 + 13] ^ (r11 | r14) & (r2 ^ r6);
  r2 = r7 ^ HEAP32[r4 + 14];
  r11 = r14 ^ HEAP32[r4 + 15] ^ r8 ^ (r7 & r6 | r12);
  r12 = (r2 >>> 22 | r2 << 10) ^ r11 ^ r13 << 7;
  r2 = (r9 >>> 5 | r9 << 27) ^ r13 ^ r11;
  r9 = (r11 >>> 7 | r11 << 25) ^ r12 ^ r2 << 3;
  r11 = (r13 >>> 1 | r13 << 31) ^ r2 ^ r12;
  r13 = r12 >>> 3 | r12 << 29;
  r12 = r2 >>> 13 | r2 << 19;
  r2 = r13 ^ r9;
  r6 = r9 ^ r12 ^ (r2 | r11);
  r7 = r13 | r12;
  r8 = r13 & r12 | r9 ^ -1;
  r12 = r7 & r11 ^ r8;
  r14 = (r6 | r9) & r11 ^ r7 & r2;
  r2 = r6 ^ HEAP32[r4 + 8];
  r7 = r14 ^ HEAP32[r4 + 9];
  r11 = r8 ^ HEAP32[r4 + 10] ^ r6 ^ r12 & r13 ^ r14;
  r14 = r12 ^ HEAP32[r4 + 11];
  r12 = r7 << 7 ^ r14 ^ (r11 >>> 22 | r11 << 10);
  r11 = (r2 >>> 5 | r2 << 27) ^ r14 ^ r7;
  r2 = r11 << 3 ^ (r14 >>> 7 | r14 << 25) ^ r12;
  r14 = (r7 >>> 1 | r7 << 31) ^ r11 ^ r12;
  r7 = r12 >>> 3 | r12 << 29;
  r12 = r11 >>> 13 | r11 << 19;
  r11 = r14 ^ r12;
  r13 = r7 & r12;
  r6 = r7 ^ (r14 | r2);
  r8 = (r6 | r12) & r11;
  r9 = r8 ^ ((r13 | r2) ^ -1);
  r1 = (r8 ^ r14) & r2 ^ (r6 | r13);
  r13 = r7 ^ HEAP32[r4 + 4] ^ r8 ^ (r9 | r12) ^ r1;
  r12 = r1 ^ HEAP32[r4 + 5];
  r1 = r9 ^ HEAP32[r4 + 6];
  r9 = r11 ^ HEAP32[r4 + 7] ^ r6;
  r6 = (r1 >>> 22 | r1 << 10) ^ r9 ^ r12 << 7;
  r1 = r12 ^ r9 ^ (r13 >>> 5 | r13 << 27);
  r13 = r6 ^ (r9 >>> 7 | r9 << 25) ^ r1 << 3;
  r9 = r6 ^ (r12 >>> 1 | r12 << 31) ^ r1;
  r12 = r6 >>> 3 | r6 << 29;
  r6 = r1 >>> 13 | r1 << 19;
  r1 = r13 ^ r12;
  r11 = r9 | r12;
  r8 = (r6 | r9) ^ r1;
  r7 = r8 ^ -1;
  r2 = (r1 & r12 | r6) ^ (r13 ^ r9) & r11;
  r9 = r2 ^ (r8 | r6);
  r1 = (r13 | r7) ^ r11;
  r11 = r2 ^ HEAP32[r4 + 1];
  r2 = HEAP32[r4 + 2] ^ r7;
  r7 = r1 ^ HEAP32[r4 + 3] ^ r9;
  HEAP32[r3 >> 2] = r12 ^ HEAP32[r4] ^ r6 ^ (r9 & r8 | r1);
  HEAP32[r3 + 4 >> 2] = r11;
  HEAP32[r3 + 8 >> 2] = r2;
  HEAP32[r3 + 12 >> 2] = r7;
  return;
}
function _serpent_encrypt_internal(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = r1 >> 2;
  r1 = HEAP32[r4] ^ HEAP32[r2 >> 2];
  r5 = HEAP32[r4 + 1] ^ HEAP32[r2 + 4 >> 2];
  r6 = HEAP32[r4 + 2] ^ HEAP32[r2 + 8 >> 2];
  r7 = HEAP32[r4 + 3] ^ HEAP32[r2 + 12 >> 2];
  r2 = r6 ^ r5 ^ (r7 | r1);
  r8 = r7 ^ r1;
  r9 = r6 | r5;
  r10 = r9 & (r5 ^ r1);
  r1 = (r2 | r6) & r7 ^ r10;
  r11 = r8 ^ (r9 ^ -1) ^ r1 & r10;
  r10 = r11 << 13 | r11 >>> 19;
  r9 = r1 << 3 | r1 >>> 29;
  r1 = r7 ^ r6 ^ r8 & r5 ^ r11 ^ r9 ^ r10;
  r11 = r9 ^ r2 ^ r10 << 3;
  r2 = r1 << 1 | r1 >>> 31;
  r1 = r11 << 7 | r11 >>> 25;
  r11 = r2 ^ r10 ^ r1;
  r10 = r1 ^ r9 ^ r2 << 7;
  r9 = (r11 << 5 | r11 >>> 27) ^ HEAP32[r4 + 4];
  r11 = r2 ^ HEAP32[r4 + 5];
  r2 = (r10 << 22 | r10 >>> 10) ^ HEAP32[r4 + 6];
  r10 = r1 ^ HEAP32[r4 + 7];
  r1 = r9 | r10;
  r5 = r2 ^ r10;
  r8 = r9 | r11 ^ -1;
  r6 = r5 ^ r8;
  r7 = ((r2 ^ r9) & r10 | r11) ^ r5 & r1;
  r5 = r1 ^ r10 & r11 ^ r6;
  r11 = (r5 | r7) & r8 ^ r2;
  r2 = r11 << 13 | r11 >>> 19;
  r11 = r6 << 3 | r6 >>> 29;
  r6 = r5 ^ r7 ^ r11 ^ r2;
  r5 = r11 ^ (r7 ^ -1) ^ r2 << 3;
  r7 = r6 << 1 | r6 >>> 31;
  r6 = r5 << 7 | r5 >>> 25;
  r5 = r7 ^ r2 ^ r6;
  r2 = r6 ^ r11 ^ r7 << 7;
  r11 = (r5 << 5 | r5 >>> 27) ^ HEAP32[r4 + 8];
  r5 = r7 ^ HEAP32[r4 + 9];
  r7 = (r2 << 22 | r2 >>> 10) ^ HEAP32[r4 + 10];
  r2 = r6 ^ HEAP32[r4 + 11];
  r6 = r7 | r11;
  r8 = r11 ^ r5;
  r10 = r6 ^ r2;
  r1 = r10 ^ r8;
  r9 = r1 ^ r7;
  r7 = (r9 | r5) ^ r10;
  r10 = (r7 | r8) ^ (r9 ^ r5) & r6;
  r6 = (r11 | r2) ^ r5 ^ r7 ^ r10;
  r5 = r1 << 13 | r1 >>> 19;
  r1 = r6 << 3 | r6 >>> 29;
  r6 = r10 ^ r5 ^ r1;
  r10 = r5 << 3 ^ (r7 ^ -1) ^ r1;
  r7 = r6 << 1 | r6 >>> 31;
  r6 = r10 << 7 | r10 >>> 25;
  r10 = r7 ^ r5 ^ r6;
  r5 = r6 ^ r1 ^ r7 << 7;
  r1 = (r10 << 5 | r10 >>> 27) ^ HEAP32[r4 + 12];
  r10 = r7 ^ HEAP32[r4 + 13];
  r7 = (r5 << 22 | r5 >>> 10) ^ HEAP32[r4 + 14];
  r5 = r6 ^ HEAP32[r4 + 15];
  r6 = r1 | r5;
  r2 = (r1 ^ r7) & r6;
  r11 = r1 & r5 | r10;
  r9 = r2 ^ r5;
  r8 = r1 & r10 | r7;
  r7 = r8 ^ r10 ^ r9;
  r12 = r8 ^ r6 ^ r11 & r5;
  r6 = (r7 | r5) & r10 ^ (r9 | r1);
  r1 = r6 << 13 | r6 >>> 19;
  r6 = r12 << 3 | r12 >>> 29;
  r12 = r11 ^ r2 ^ r6 ^ r1;
  r2 = r6 ^ r7 ^ r1 << 3;
  r7 = r12 << 1 | r12 >>> 31;
  r12 = r2 << 7 | r2 >>> 25;
  r2 = r7 ^ r1 ^ r12;
  r1 = r12 ^ r6 ^ r7 << 7;
  r6 = (r2 << 5 | r2 >>> 27) ^ HEAP32[r4 + 16];
  r2 = r7 ^ HEAP32[r4 + 17];
  r7 = (r1 << 22 | r1 >>> 10) ^ HEAP32[r4 + 18];
  r1 = r12 ^ HEAP32[r4 + 19];
  r12 = (r7 | r2) ^ r6;
  r11 = r1 ^ r2;
  r9 = r12 | r1;
  r10 = (r6 | r2) & r1;
  r1 = r12 ^ r10;
  r5 = r1 & r11;
  r8 = r7 & r2;
  r2 = r5 ^ (r12 | r8);
  r12 = r10 ^ (r7 ^ -1) ^ r9 & r11;
  r7 = r12 << 13 | r12 >>> 19;
  r12 = r2 << 3 | r2 >>> 29;
  r2 = (r5 ^ r11 | r8) ^ r9 & r6 ^ r7 ^ r12;
  r6 = r12 ^ r1 ^ r7 << 3;
  r1 = r2 << 1 | r2 >>> 31;
  r2 = r6 << 7 | r6 >>> 25;
  r6 = r1 ^ r7 ^ r2;
  r7 = r2 ^ r12 ^ r1 << 7;
  r12 = (r6 << 5 | r6 >>> 27) ^ HEAP32[r4 + 20];
  r6 = r1 ^ HEAP32[r4 + 21];
  r1 = r2 ^ HEAP32[r4 + 23];
  r2 = r6 ^ r1;
  r9 = r12 & r2;
  r8 = (r6 | r1) ^ HEAP32[r4 + 22] ^ (r7 << 22 | r7 >>> 10) ^ r9;
  r7 = r8 ^ -1;
  r11 = r12 ^ r2;
  r12 = r1 | r7;
  r5 = (r12 ^ r1 | r11) ^ (r8 | r6);
  r8 = r7 << 13 | r7 >>> 19;
  r1 = r5 << 3 | r5 >>> 29;
  r5 = r12 ^ r11 ^ r8 ^ r1;
  r12 = (r11 | r6) ^ r2 ^ (r9 | r7) ^ r8 << 3 ^ r1;
  r7 = r5 << 1 | r5 >>> 31;
  r5 = r12 << 7 | r12 >>> 25;
  r12 = r7 ^ r8 ^ r5;
  r8 = r5 ^ r1 ^ r7 << 7;
  r1 = (r12 << 5 | r12 >>> 27) ^ HEAP32[r4 + 24];
  r12 = r7 ^ HEAP32[r4 + 25];
  r7 = (r8 << 22 | r8 >>> 10) ^ HEAP32[r4 + 26];
  r8 = r5 ^ HEAP32[r4 + 27];
  r5 = r1 ^ r8;
  r9 = r7 ^ (r12 ^ -1) ^ r1 & r8;
  r2 = r5 & (r7 | r12);
  r6 = r2 ^ ((r1 | r7) ^ -1) ^ r9 & r12;
  r11 = r1 ^ r12 ^ r9 & r5 ^ r6;
  r5 = r11 << 13 | r11 >>> 19;
  r11 = r6 << 3 | r6 >>> 29;
  r6 = r11 ^ r9 ^ r5;
  r9 = r7 ^ (r12 | r8) ^ r2 ^ r11 ^ r5 << 3;
  r2 = r6 << 1 | r6 >>> 31;
  r6 = r9 << 7 | r9 >>> 25;
  r9 = r2 ^ r5 ^ r6;
  r5 = r6 ^ r11 ^ r2 << 7;
  r11 = (r9 << 5 | r9 >>> 27) ^ HEAP32[r4 + 28];
  r9 = r2 ^ HEAP32[r4 + 29];
  r2 = (r5 << 22 | r5 >>> 10) ^ HEAP32[r4 + 30];
  r5 = r6 ^ HEAP32[r4 + 31];
  r6 = r2 & r11;
  r8 = r5 ^ -1;
  r12 = r6 | r9;
  r7 = r11 & r9;
  r1 = r11 & r8 ^ r2 ^ r12;
  r10 = (r7 | r5) ^ r11 ^ (r1 | r2);
  r5 = r2 ^ r7 ^ (r10 ^ r6 | r8);
  r8 = (r10 ^ r9 | r1 & r12) ^ r11;
  r11 = r5 << 13 | r5 >>> 19;
  r5 = r8 << 3 | r8 >>> 29;
  r8 = r11 ^ r10 ^ r5;
  r10 = r5 ^ r1 ^ r11 << 3;
  r1 = r8 << 1 | r8 >>> 31;
  r8 = r10 << 7 | r10 >>> 25;
  r10 = r1 ^ r11 ^ r8;
  r11 = r8 ^ r5 ^ r1 << 7;
  r5 = (r10 << 5 | r10 >>> 27) ^ HEAP32[r4 + 32];
  r10 = r1 ^ HEAP32[r4 + 33];
  r1 = (r11 << 22 | r11 >>> 10) ^ HEAP32[r4 + 34];
  r11 = r8 ^ HEAP32[r4 + 35];
  r8 = r1 ^ r10 ^ (r5 | r11);
  r12 = r5 ^ r11;
  r9 = r1 | r10;
  r6 = (r5 ^ r10) & r9;
  r5 = (r8 | r1) & r11 ^ r6;
  r7 = r12 ^ (r9 ^ -1) ^ r5 & r6;
  r6 = r7 << 13 | r7 >>> 19;
  r9 = r5 << 3 | r5 >>> 29;
  r5 = r1 ^ r11 ^ r12 & r10 ^ r7 ^ r9 ^ r6;
  r7 = r9 ^ r8 ^ r6 << 3;
  r8 = r5 << 1 | r5 >>> 31;
  r5 = r7 << 7 | r7 >>> 25;
  r7 = r8 ^ r6 ^ r5;
  r6 = r5 ^ r9 ^ r8 << 7;
  r9 = (r7 << 5 | r7 >>> 27) ^ HEAP32[r4 + 36];
  r7 = r8 ^ HEAP32[r4 + 37];
  r8 = (r6 << 22 | r6 >>> 10) ^ HEAP32[r4 + 38];
  r6 = r5 ^ HEAP32[r4 + 39];
  r5 = r9 | r6;
  r10 = r8 ^ r6;
  r12 = r9 | r7 ^ -1;
  r11 = r10 ^ r12;
  r1 = ((r8 ^ r9) & r6 | r7) ^ r10 & r5;
  r10 = r5 ^ r6 & r7 ^ r11;
  r7 = (r10 | r1) & r12 ^ r8;
  r8 = r7 << 13 | r7 >>> 19;
  r7 = r11 << 3 | r11 >>> 29;
  r11 = r10 ^ r1 ^ r7 ^ r8;
  r10 = r7 ^ (r1 ^ -1) ^ r8 << 3;
  r1 = r11 << 1 | r11 >>> 31;
  r11 = r10 << 7 | r10 >>> 25;
  r10 = r1 ^ r8 ^ r11;
  r8 = r11 ^ r7 ^ r1 << 7;
  r7 = (r10 << 5 | r10 >>> 27) ^ HEAP32[r4 + 40];
  r10 = r1 ^ HEAP32[r4 + 41];
  r1 = (r8 << 22 | r8 >>> 10) ^ HEAP32[r4 + 42];
  r8 = r11 ^ HEAP32[r4 + 43];
  r11 = r1 | r7;
  r12 = r7 ^ r10;
  r6 = r11 ^ r8;
  r5 = r6 ^ r12;
  r9 = r5 ^ r1;
  r1 = (r9 | r10) ^ r6;
  r6 = (r1 | r12) ^ (r9 ^ r10) & r11;
  r11 = (r7 | r8) ^ r10 ^ r1 ^ r6;
  r10 = r5 << 13 | r5 >>> 19;
  r5 = r11 << 3 | r11 >>> 29;
  r11 = r6 ^ r10 ^ r5;
  r6 = r10 << 3 ^ (r1 ^ -1) ^ r5;
  r1 = r11 << 1 | r11 >>> 31;
  r11 = r6 << 7 | r6 >>> 25;
  r6 = r1 ^ r10 ^ r11;
  r10 = r11 ^ r5 ^ r1 << 7;
  r5 = (r6 << 5 | r6 >>> 27) ^ HEAP32[r4 + 44];
  r6 = r1 ^ HEAP32[r4 + 45];
  r1 = (r10 << 22 | r10 >>> 10) ^ HEAP32[r4 + 46];
  r10 = r11 ^ HEAP32[r4 + 47];
  r11 = r5 | r10;
  r8 = (r5 ^ r1) & r11;
  r7 = r5 & r10 | r6;
  r9 = r8 ^ r10;
  r12 = r5 & r6 | r1;
  r1 = r12 ^ r6 ^ r9;
  r2 = r12 ^ r11 ^ r7 & r10;
  r11 = (r1 | r10) & r6 ^ (r9 | r5);
  r5 = r11 << 13 | r11 >>> 19;
  r11 = r2 << 3 | r2 >>> 29;
  r2 = r7 ^ r8 ^ r11 ^ r5;
  r8 = r11 ^ r1 ^ r5 << 3;
  r1 = r2 << 1 | r2 >>> 31;
  r2 = r8 << 7 | r8 >>> 25;
  r8 = r1 ^ r5 ^ r2;
  r5 = r2 ^ r11 ^ r1 << 7;
  r11 = (r8 << 5 | r8 >>> 27) ^ HEAP32[r4 + 48];
  r8 = r1 ^ HEAP32[r4 + 49];
  r1 = (r5 << 22 | r5 >>> 10) ^ HEAP32[r4 + 50];
  r5 = r2 ^ HEAP32[r4 + 51];
  r2 = (r1 | r8) ^ r11;
  r7 = r5 ^ r8;
  r9 = r2 | r5;
  r6 = (r11 | r8) & r5;
  r5 = r2 ^ r6;
  r10 = r5 & r7;
  r12 = r1 & r8;
  r8 = r10 ^ (r2 | r12);
  r2 = r6 ^ (r1 ^ -1) ^ r9 & r7;
  r1 = r2 << 13 | r2 >>> 19;
  r2 = r8 << 3 | r8 >>> 29;
  r8 = (r10 ^ r7 | r12) ^ r9 & r11 ^ r1 ^ r2;
  r11 = r2 ^ r5 ^ r1 << 3;
  r5 = r8 << 1 | r8 >>> 31;
  r8 = r11 << 7 | r11 >>> 25;
  r11 = r5 ^ r1 ^ r8;
  r1 = r8 ^ r2 ^ r5 << 7;
  r2 = (r11 << 5 | r11 >>> 27) ^ HEAP32[r4 + 52];
  r11 = r5 ^ HEAP32[r4 + 53];
  r5 = r8 ^ HEAP32[r4 + 55];
  r8 = r11 ^ r5;
  r9 = r2 & r8;
  r12 = (r11 | r5) ^ HEAP32[r4 + 54] ^ (r1 << 22 | r1 >>> 10) ^ r9;
  r1 = r12 ^ -1;
  r7 = r2 ^ r8;
  r2 = r5 | r1;
  r10 = (r2 ^ r5 | r7) ^ (r12 | r11);
  r12 = r1 << 13 | r1 >>> 19;
  r5 = r10 << 3 | r10 >>> 29;
  r10 = r2 ^ r7 ^ r12 ^ r5;
  r2 = (r7 | r11) ^ r8 ^ (r9 | r1) ^ r12 << 3 ^ r5;
  r1 = r10 << 1 | r10 >>> 31;
  r10 = r2 << 7 | r2 >>> 25;
  r2 = r1 ^ r12 ^ r10;
  r12 = r10 ^ r5 ^ r1 << 7;
  r5 = (r2 << 5 | r2 >>> 27) ^ HEAP32[r4 + 56];
  r2 = r1 ^ HEAP32[r4 + 57];
  r1 = (r12 << 22 | r12 >>> 10) ^ HEAP32[r4 + 58];
  r12 = r10 ^ HEAP32[r4 + 59];
  r10 = r5 ^ r12;
  r9 = r1 ^ (r2 ^ -1) ^ r5 & r12;
  r8 = r10 & (r1 | r2);
  r11 = r8 ^ ((r5 | r1) ^ -1) ^ r9 & r2;
  r7 = r5 ^ r2 ^ r9 & r10 ^ r11;
  r10 = r7 << 13 | r7 >>> 19;
  r7 = r11 << 3 | r11 >>> 29;
  r11 = r7 ^ r9 ^ r10;
  r9 = r1 ^ (r2 | r12) ^ r8 ^ r7 ^ r10 << 3;
  r8 = r11 << 1 | r11 >>> 31;
  r11 = r9 << 7 | r9 >>> 25;
  r9 = r8 ^ r10 ^ r11;
  r10 = r11 ^ r7 ^ r8 << 7;
  r7 = (r9 << 5 | r9 >>> 27) ^ HEAP32[r4 + 60];
  r9 = r8 ^ HEAP32[r4 + 61];
  r8 = (r10 << 22 | r10 >>> 10) ^ HEAP32[r4 + 62];
  r10 = r11 ^ HEAP32[r4 + 63];
  r11 = r8 & r7;
  r12 = r10 ^ -1;
  r2 = r11 | r9;
  r1 = r7 & r9;
  r5 = r7 & r12 ^ r8 ^ r2;
  r6 = (r1 | r10) ^ r7 ^ (r5 | r8);
  r10 = r8 ^ r1 ^ (r6 ^ r11 | r12);
  r12 = (r6 ^ r9 | r5 & r2) ^ r7;
  r7 = r10 << 13 | r10 >>> 19;
  r10 = r12 << 3 | r12 >>> 29;
  r12 = r7 ^ r6 ^ r10;
  r6 = r10 ^ r5 ^ r7 << 3;
  r5 = r12 << 1 | r12 >>> 31;
  r12 = r6 << 7 | r6 >>> 25;
  r6 = r5 ^ r7 ^ r12;
  r7 = r12 ^ r10 ^ r5 << 7;
  r10 = (r6 << 5 | r6 >>> 27) ^ HEAP32[r4 + 64];
  r6 = r5 ^ HEAP32[r4 + 65];
  r5 = (r7 << 22 | r7 >>> 10) ^ HEAP32[r4 + 66];
  r7 = r12 ^ HEAP32[r4 + 67];
  r12 = r5 ^ r6 ^ (r10 | r7);
  r2 = r10 ^ r7;
  r9 = r5 | r6;
  r11 = (r10 ^ r6) & r9;
  r10 = (r12 | r5) & r7 ^ r11;
  r1 = r2 ^ (r9 ^ -1) ^ r10 & r11;
  r11 = r1 << 13 | r1 >>> 19;
  r9 = r10 << 3 | r10 >>> 29;
  r10 = r5 ^ r7 ^ r2 & r6 ^ r1 ^ r9 ^ r11;
  r1 = r9 ^ r12 ^ r11 << 3;
  r12 = r10 << 1 | r10 >>> 31;
  r10 = r1 << 7 | r1 >>> 25;
  r1 = r12 ^ r11 ^ r10;
  r11 = r10 ^ r9 ^ r12 << 7;
  r9 = (r1 << 5 | r1 >>> 27) ^ HEAP32[r4 + 68];
  r1 = r12 ^ HEAP32[r4 + 69];
  r12 = (r11 << 22 | r11 >>> 10) ^ HEAP32[r4 + 70];
  r11 = r10 ^ HEAP32[r4 + 71];
  r10 = r9 | r11;
  r6 = r12 ^ r11;
  r2 = r9 | r1 ^ -1;
  r7 = r6 ^ r2;
  r5 = ((r12 ^ r9) & r11 | r1) ^ r6 & r10;
  r6 = r10 ^ r11 & r1 ^ r7;
  r1 = (r6 | r5) & r2 ^ r12;
  r12 = r1 << 13 | r1 >>> 19;
  r1 = r7 << 3 | r7 >>> 29;
  r7 = r6 ^ r5 ^ r1 ^ r12;
  r6 = r1 ^ (r5 ^ -1) ^ r12 << 3;
  r5 = r7 << 1 | r7 >>> 31;
  r7 = r6 << 7 | r6 >>> 25;
  r6 = r5 ^ r12 ^ r7;
  r12 = r7 ^ r1 ^ r5 << 7;
  r1 = (r6 << 5 | r6 >>> 27) ^ HEAP32[r4 + 72];
  r6 = r5 ^ HEAP32[r4 + 73];
  r5 = (r12 << 22 | r12 >>> 10) ^ HEAP32[r4 + 74];
  r12 = r7 ^ HEAP32[r4 + 75];
  r7 = r5 | r1;
  r2 = r1 ^ r6;
  r11 = r7 ^ r12;
  r10 = r11 ^ r2;
  r9 = r10 ^ r5;
  r5 = (r9 | r6) ^ r11;
  r11 = (r5 | r2) ^ (r9 ^ r6) & r7;
  r7 = (r1 | r12) ^ r6 ^ r5 ^ r11;
  r6 = r10 << 13 | r10 >>> 19;
  r10 = r7 << 3 | r7 >>> 29;
  r7 = r11 ^ r6 ^ r10;
  r11 = r6 << 3 ^ (r5 ^ -1) ^ r10;
  r5 = r7 << 1 | r7 >>> 31;
  r7 = r11 << 7 | r11 >>> 25;
  r11 = r5 ^ r6 ^ r7;
  r6 = r7 ^ r10 ^ r5 << 7;
  r10 = (r11 << 5 | r11 >>> 27) ^ HEAP32[r4 + 76];
  r11 = r5 ^ HEAP32[r4 + 77];
  r5 = (r6 << 22 | r6 >>> 10) ^ HEAP32[r4 + 78];
  r6 = r7 ^ HEAP32[r4 + 79];
  r7 = r10 | r6;
  r12 = (r10 ^ r5) & r7;
  r1 = r10 & r6 | r11;
  r9 = r12 ^ r6;
  r2 = r10 & r11 | r5;
  r5 = r2 ^ r11 ^ r9;
  r8 = r2 ^ r7 ^ r1 & r6;
  r7 = (r5 | r6) & r11 ^ (r9 | r10);
  r10 = r7 << 13 | r7 >>> 19;
  r7 = r8 << 3 | r8 >>> 29;
  r8 = r1 ^ r12 ^ r7 ^ r10;
  r12 = r7 ^ r5 ^ r10 << 3;
  r5 = r8 << 1 | r8 >>> 31;
  r8 = r12 << 7 | r12 >>> 25;
  r12 = r5 ^ r10 ^ r8;
  r10 = r8 ^ r7 ^ r5 << 7;
  r7 = (r12 << 5 | r12 >>> 27) ^ HEAP32[r4 + 80];
  r12 = r5 ^ HEAP32[r4 + 81];
  r5 = (r10 << 22 | r10 >>> 10) ^ HEAP32[r4 + 82];
  r10 = r8 ^ HEAP32[r4 + 83];
  r8 = (r5 | r12) ^ r7;
  r1 = r10 ^ r12;
  r9 = r8 | r10;
  r11 = (r7 | r12) & r10;
  r10 = r8 ^ r11;
  r6 = r10 & r1;
  r2 = r5 & r12;
  r12 = r6 ^ (r8 | r2);
  r8 = r11 ^ (r5 ^ -1) ^ r9 & r1;
  r5 = r8 << 13 | r8 >>> 19;
  r8 = r12 << 3 | r12 >>> 29;
  r12 = (r6 ^ r1 | r2) ^ r9 & r7 ^ r5 ^ r8;
  r7 = r8 ^ r10 ^ r5 << 3;
  r10 = r12 << 1 | r12 >>> 31;
  r12 = r7 << 7 | r7 >>> 25;
  r7 = r10 ^ r5 ^ r12;
  r5 = r12 ^ r8 ^ r10 << 7;
  r8 = (r7 << 5 | r7 >>> 27) ^ HEAP32[r4 + 84];
  r7 = r10 ^ HEAP32[r4 + 85];
  r10 = r12 ^ HEAP32[r4 + 87];
  r12 = r7 ^ r10;
  r9 = r8 & r12;
  r2 = (r7 | r10) ^ HEAP32[r4 + 86] ^ (r5 << 22 | r5 >>> 10) ^ r9;
  r5 = r2 ^ -1;
  r1 = r8 ^ r12;
  r8 = r10 | r5;
  r6 = (r8 ^ r10 | r1) ^ (r2 | r7);
  r2 = r5 << 13 | r5 >>> 19;
  r10 = r6 << 3 | r6 >>> 29;
  r6 = r8 ^ r1 ^ r2 ^ r10;
  r8 = (r1 | r7) ^ r12 ^ (r9 | r5) ^ r2 << 3 ^ r10;
  r5 = r6 << 1 | r6 >>> 31;
  r6 = r8 << 7 | r8 >>> 25;
  r8 = r5 ^ r2 ^ r6;
  r2 = r6 ^ r10 ^ r5 << 7;
  r10 = (r8 << 5 | r8 >>> 27) ^ HEAP32[r4 + 88];
  r8 = r5 ^ HEAP32[r4 + 89];
  r5 = (r2 << 22 | r2 >>> 10) ^ HEAP32[r4 + 90];
  r2 = r6 ^ HEAP32[r4 + 91];
  r6 = r10 ^ r2;
  r9 = r5 ^ (r8 ^ -1) ^ r10 & r2;
  r12 = r6 & (r5 | r8);
  r7 = r12 ^ ((r10 | r5) ^ -1) ^ r9 & r8;
  r1 = r10 ^ r8 ^ r9 & r6 ^ r7;
  r6 = r1 << 13 | r1 >>> 19;
  r1 = r7 << 3 | r7 >>> 29;
  r7 = r1 ^ r9 ^ r6;
  r9 = r5 ^ (r8 | r2) ^ r12 ^ r1 ^ r6 << 3;
  r12 = r7 << 1 | r7 >>> 31;
  r7 = r9 << 7 | r9 >>> 25;
  r9 = r12 ^ r6 ^ r7;
  r6 = r7 ^ r1 ^ r12 << 7;
  r1 = (r9 << 5 | r9 >>> 27) ^ HEAP32[r4 + 92];
  r9 = r12 ^ HEAP32[r4 + 93];
  r12 = (r6 << 22 | r6 >>> 10) ^ HEAP32[r4 + 94];
  r6 = r7 ^ HEAP32[r4 + 95];
  r7 = r12 & r1;
  r2 = r6 ^ -1;
  r8 = r7 | r9;
  r5 = r1 & r9;
  r10 = r1 & r2 ^ r12 ^ r8;
  r11 = (r5 | r6) ^ r1 ^ (r10 | r12);
  r6 = r12 ^ r5 ^ (r11 ^ r7 | r2);
  r2 = (r11 ^ r9 | r10 & r8) ^ r1;
  r1 = r6 << 13 | r6 >>> 19;
  r6 = r2 << 3 | r2 >>> 29;
  r2 = r1 ^ r11 ^ r6;
  r11 = r6 ^ r10 ^ r1 << 3;
  r10 = r2 << 1 | r2 >>> 31;
  r2 = r11 << 7 | r11 >>> 25;
  r11 = r10 ^ r1 ^ r2;
  r1 = r2 ^ r6 ^ r10 << 7;
  r6 = (r11 << 5 | r11 >>> 27) ^ HEAP32[r4 + 96];
  r11 = r10 ^ HEAP32[r4 + 97];
  r10 = (r1 << 22 | r1 >>> 10) ^ HEAP32[r4 + 98];
  r1 = r2 ^ HEAP32[r4 + 99];
  r2 = r10 ^ r11 ^ (r6 | r1);
  r8 = r6 ^ r1;
  r9 = r10 | r11;
  r7 = (r6 ^ r11) & r9;
  r6 = (r2 | r10) & r1 ^ r7;
  r5 = r8 ^ (r9 ^ -1) ^ r6 & r7;
  r7 = r5 << 13 | r5 >>> 19;
  r9 = r6 << 3 | r6 >>> 29;
  r6 = r10 ^ r1 ^ r8 & r11 ^ r5 ^ r9 ^ r7;
  r5 = r9 ^ r2 ^ r7 << 3;
  r2 = r6 << 1 | r6 >>> 31;
  r6 = r5 << 7 | r5 >>> 25;
  r5 = r2 ^ r7 ^ r6;
  r7 = r6 ^ r9 ^ r2 << 7;
  r9 = (r5 << 5 | r5 >>> 27) ^ HEAP32[r4 + 100];
  r5 = r2 ^ HEAP32[r4 + 101];
  r2 = (r7 << 22 | r7 >>> 10) ^ HEAP32[r4 + 102];
  r7 = r6 ^ HEAP32[r4 + 103];
  r6 = r9 | r7;
  r11 = r2 ^ r7;
  r8 = r9 | r5 ^ -1;
  r1 = r11 ^ r8;
  r10 = ((r2 ^ r9) & r7 | r5) ^ r11 & r6;
  r11 = r6 ^ r7 & r5 ^ r1;
  r5 = (r11 | r10) & r8 ^ r2;
  r2 = r5 << 13 | r5 >>> 19;
  r5 = r1 << 3 | r1 >>> 29;
  r1 = r11 ^ r10 ^ r5 ^ r2;
  r11 = r5 ^ (r10 ^ -1) ^ r2 << 3;
  r10 = r1 << 1 | r1 >>> 31;
  r1 = r11 << 7 | r11 >>> 25;
  r11 = r10 ^ r2 ^ r1;
  r2 = r1 ^ r5 ^ r10 << 7;
  r5 = (r11 << 5 | r11 >>> 27) ^ HEAP32[r4 + 104];
  r11 = r10 ^ HEAP32[r4 + 105];
  r10 = (r2 << 22 | r2 >>> 10) ^ HEAP32[r4 + 106];
  r2 = r1 ^ HEAP32[r4 + 107];
  r1 = r10 | r5;
  r8 = r5 ^ r11;
  r7 = r1 ^ r2;
  r6 = r7 ^ r8;
  r9 = r6 ^ r10;
  r10 = (r9 | r11) ^ r7;
  r7 = (r10 | r8) ^ (r9 ^ r11) & r1;
  r1 = (r5 | r2) ^ r11 ^ r10 ^ r7;
  r11 = r6 << 13 | r6 >>> 19;
  r6 = r1 << 3 | r1 >>> 29;
  r1 = r7 ^ r11 ^ r6;
  r7 = r11 << 3 ^ (r10 ^ -1) ^ r6;
  r10 = r1 << 1 | r1 >>> 31;
  r1 = r7 << 7 | r7 >>> 25;
  r7 = r10 ^ r11 ^ r1;
  r11 = r1 ^ r6 ^ r10 << 7;
  r6 = (r7 << 5 | r7 >>> 27) ^ HEAP32[r4 + 108];
  r7 = r10 ^ HEAP32[r4 + 109];
  r10 = (r11 << 22 | r11 >>> 10) ^ HEAP32[r4 + 110];
  r11 = r1 ^ HEAP32[r4 + 111];
  r1 = r6 | r11;
  r2 = (r6 ^ r10) & r1;
  r5 = r6 & r11 | r7;
  r9 = r2 ^ r11;
  r8 = r6 & r7 | r10;
  r10 = r8 ^ r7 ^ r9;
  r12 = r8 ^ r1 ^ r5 & r11;
  r1 = (r10 | r11) & r7 ^ (r9 | r6);
  r6 = r1 << 13 | r1 >>> 19;
  r1 = r12 << 3 | r12 >>> 29;
  r12 = r5 ^ r2 ^ r1 ^ r6;
  r2 = r1 ^ r10 ^ r6 << 3;
  r10 = r12 << 1 | r12 >>> 31;
  r12 = r2 << 7 | r2 >>> 25;
  r2 = r10 ^ r6 ^ r12;
  r6 = r12 ^ r1 ^ r10 << 7;
  r1 = (r2 << 5 | r2 >>> 27) ^ HEAP32[r4 + 112];
  r2 = r10 ^ HEAP32[r4 + 113];
  r10 = (r6 << 22 | r6 >>> 10) ^ HEAP32[r4 + 114];
  r6 = r12 ^ HEAP32[r4 + 115];
  r12 = (r10 | r2) ^ r1;
  r5 = r6 ^ r2;
  r9 = r12 | r6;
  r7 = (r1 | r2) & r6;
  r6 = r12 ^ r7;
  r11 = r6 & r5;
  r8 = r10 & r2;
  r2 = r11 ^ (r12 | r8);
  r12 = r7 ^ (r10 ^ -1) ^ r9 & r5;
  r10 = r12 << 13 | r12 >>> 19;
  r12 = r2 << 3 | r2 >>> 29;
  r2 = (r11 ^ r5 | r8) ^ r9 & r1 ^ r10 ^ r12;
  r1 = r12 ^ r6 ^ r10 << 3;
  r6 = r2 << 1 | r2 >>> 31;
  r2 = r1 << 7 | r1 >>> 25;
  r1 = r6 ^ r10 ^ r2;
  r10 = r2 ^ r12 ^ r6 << 7;
  r12 = (r1 << 5 | r1 >>> 27) ^ HEAP32[r4 + 116];
  r1 = r6 ^ HEAP32[r4 + 117];
  r6 = r2 ^ HEAP32[r4 + 119];
  r2 = r1 ^ r6;
  r9 = r12 & r2;
  r8 = (r1 | r6) ^ HEAP32[r4 + 118] ^ (r10 << 22 | r10 >>> 10) ^ r9;
  r10 = r8 ^ -1;
  r5 = r12 ^ r2;
  r12 = r6 | r10;
  r11 = (r12 ^ r6 | r5) ^ (r8 | r1);
  r8 = r10 << 13 | r10 >>> 19;
  r6 = r11 << 3 | r11 >>> 29;
  r11 = r12 ^ r5 ^ r8 ^ r6;
  r12 = (r5 | r1) ^ r2 ^ (r9 | r10) ^ r8 << 3 ^ r6;
  r10 = r11 << 1 | r11 >>> 31;
  r11 = r12 << 7 | r12 >>> 25;
  r12 = r10 ^ r8 ^ r11;
  r8 = r11 ^ r6 ^ r10 << 7;
  r6 = (r12 << 5 | r12 >>> 27) ^ HEAP32[r4 + 120];
  r12 = r10 ^ HEAP32[r4 + 121];
  r10 = (r8 << 22 | r8 >>> 10) ^ HEAP32[r4 + 122];
  r8 = r11 ^ HEAP32[r4 + 123];
  r11 = r6 ^ r8;
  r9 = r10 ^ (r12 ^ -1) ^ r6 & r8;
  r2 = r11 & (r10 | r12);
  r1 = r2 ^ ((r6 | r10) ^ -1) ^ r9 & r12;
  r5 = r6 ^ r12 ^ r9 & r11 ^ r1;
  r11 = r5 << 13 | r5 >>> 19;
  r5 = r1 << 3 | r1 >>> 29;
  r1 = r5 ^ r9 ^ r11;
  r9 = r10 ^ (r12 | r8) ^ r2 ^ r5 ^ r11 << 3;
  r2 = r1 << 1 | r1 >>> 31;
  r1 = r9 << 7 | r9 >>> 25;
  r9 = r2 ^ r11 ^ r1;
  r11 = r1 ^ r5 ^ r2 << 7;
  r5 = (r9 << 5 | r9 >>> 27) ^ HEAP32[r4 + 124];
  r9 = r2 ^ HEAP32[r4 + 125];
  r2 = (r11 << 22 | r11 >>> 10) ^ HEAP32[r4 + 126];
  r11 = r1 ^ HEAP32[r4 + 127];
  r1 = r2 & r5;
  r8 = r11 ^ -1;
  r12 = r1 | r9;
  r10 = r5 & r9;
  r6 = r5 & r8 ^ r2 ^ r12;
  r7 = (r10 | r11) ^ r5 ^ (r6 | r2);
  r11 = r7 ^ HEAP32[r4 + 129];
  r13 = r5 ^ HEAP32[r4 + 130] ^ (r7 ^ r9 | r6 & r12);
  r12 = r6 ^ HEAP32[r4 + 131];
  HEAP32[r3 >> 2] = r10 ^ HEAP32[r4 + 128] ^ r2 ^ (r7 ^ r1 | r8);
  HEAP32[r3 + 4 >> 2] = r11;
  HEAP32[r3 + 8 >> 2] = r13;
  HEAP32[r3 + 12 >> 2] = r12;
  return;
}
function _serpent_test() {
  var r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r1 = 0;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 544 | 0;
  r3 = r2;
  r4 = r2 + 528;
  r5 = r4 | 0;
  r6 = HEAP32[103241];
  L3305 : do {
    if ((r6 | 0) == 0) {
      r7 = 0;
      r1 = 2517;
    } else {
      r8 = r4;
      r9 = 0;
      r10 = 412964;
      r11 = r6;
      while (1) {
        _serpent_setkey_internal(r3, (r9 * 68 & -1) + 412968 | 0, r11);
        r12 = (r9 * 68 & -1) + 413e3 | 0;
        _serpent_encrypt_internal(r3, r12, r5);
        r13 = (r9 * 68 & -1) + 413016 | 0;
        if ((_memcmp(r8, r13, 16) | 0) != 0) {
          r14 = HEAP32[r10 >> 2];
          if ((r14 | 0) == 24) {
            r15 = 471316;
            break L3305;
          } else if ((r14 | 0) == 16) {
            r7 = 472736;
            r1 = 2517;
            break L3305;
          } else if ((r14 | 0) == 32) {
            r1 = 2512;
            break;
          }
        }
        _serpent_decrypt_internal(r3, r13, r5);
        if ((_memcmp(r8, r12, 16) | 0) != 0) {
          r12 = HEAP32[r10 >> 2];
          if ((r12 | 0) == 24) {
            r15 = 466544;
            break L3305;
          } else if ((r12 | 0) == 16) {
            r7 = 468264;
            r1 = 2517;
            break L3305;
          } else if ((r12 | 0) == 32) {
            r1 = 2515;
            break;
          }
        }
        r12 = r9 + 1 | 0;
        r13 = (r12 * 68 & -1) + 412964 | 0;
        r14 = HEAP32[r13 >> 2];
        if ((r14 | 0) == 0) {
          r7 = 0;
          r1 = 2517;
          break L3305;
        } else {
          r9 = r12;
          r10 = r13;
          r11 = r14;
        }
      }
      if (r1 == 2515) {
        r15 = 465056;
        break;
      } else if (r1 == 2512) {
        r15 = 470008;
        break;
      }
    }
  } while (0);
  if (r1 == 2517) {
    r15 = r7;
  }
  STACKTOP = r2;
  return r15;
}
function _serpent_setkey_internal(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r5 = r4 | 0;
  _serpent_key_prepare(r2, r3, r5);
  _serpent_subkeys_generate(r5, r1 | 0);
  __gcry_burn_stack(1088);
  STACKTOP = r4;
  return;
}
function _serpent_key_prepare(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = r2 >>> 2;
  do {
    if ((r4 | 0) == 0) {
      HEAP32[r3 >> 2] = 1;
      r5 = 0;
    } else {
      r6 = r1;
      r7 = 0;
      while (1) {
        HEAP32[r3 + (r7 << 2) >> 2] = HEAP32[r6 + (r7 << 2) >> 2];
        r8 = r7 + 1 | 0;
        if (r8 >>> 0 < r4 >>> 0) {
          r7 = r8;
        } else {
          break;
        }
      }
      r7 = r2 >>> 2;
      if (r2 >>> 0 >= 32) {
        return;
      }
      HEAP32[r3 + (r7 << 2) >> 2] = 1;
      if ((r7 + 1 | 0) >>> 0 < 8) {
        r5 = r7;
        break;
      }
      return;
    }
  } while (0);
  _memset((r5 + 1 << 2) + r3 | 0, 0, 28 - (r5 << 2) | 0);
  return;
}
function _serpent_subkeys_generate(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r3 = STACKTOP;
  r4 = STACKTOP, r5 = r4 >> 2;
  STACKTOP = STACKTOP + 560 | 0;
  r6 = STACKTOP, r7 = r6 >> 2;
  STACKTOP = STACKTOP + 528 | 0;
  _memcpy(r4, r1, 32);
  r1 = r4 + 32 | 0;
  r8 = 0;
  while (1) {
    r9 = r8 ^ -1640531527 ^ HEAP32[(r8 << 2 >> 2) + r5] ^ HEAP32[(r8 + 3 << 2 >> 2) + r5] ^ HEAP32[(r8 + 5 << 2 >> 2) + r5] ^ HEAP32[(r8 + 7 << 2 >> 2) + r5];
    HEAP32[(r8 + 8 << 2 >> 2) + r5] = r9 << 11 | r9 >>> 21;
    r9 = r8 + 1 | 0;
    if ((r9 | 0) == 132) {
      break;
    } else {
      r8 = r9;
    }
  }
  r8 = HEAP32[r1 >> 2];
  r9 = HEAP32[r5 + 10];
  r10 = r4 + 44 | 0;
  r11 = HEAP32[r10 >> 2];
  r12 = r11 | r8;
  r13 = r12 & (r9 ^ r8);
  r14 = r4 + 36 | 0;
  r15 = HEAP32[r14 >> 2];
  r16 = r15 | r11 & r8;
  r17 = r13 ^ r11;
  r18 = r15 & r8 | r9;
  r9 = r17 ^ r15 ^ r18;
  HEAP32[r7 + 3] = r9;
  r15 = HEAP32[r1 >> 2] | r17;
  r17 = (r9 | HEAP32[r10 >> 2]) & HEAP32[r14 >> 2];
  HEAP32[r7 + 2] = r16 & r11 ^ r12 ^ r18;
  HEAP32[r7] = r17 ^ r15;
  HEAP32[r7 + 1] = r16 ^ r13;
  r13 = r4 + 48 | 0;
  r16 = HEAP32[r13 >> 2];
  r15 = r4 + 56 | 0;
  r17 = HEAP32[r15 >> 2] | r16;
  r18 = (r4 + 52 | 0) >> 2;
  r12 = HEAP32[r18] ^ r16;
  r16 = r4 + 60 | 0;
  r11 = HEAP32[r16 >> 2] ^ r17;
  r14 = r11 ^ r12;
  HEAP32[r7 + 4] = r14;
  r10 = r14 ^ HEAP32[r15 >> 2];
  r15 = HEAP32[r18];
  r14 = (r10 | r15) ^ r11;
  r11 = (r14 | r12) ^ (r10 ^ r15) & r17;
  HEAP32[r7 + 5] = r11;
  r17 = HEAP32[r16 >> 2] | HEAP32[r13 >> 2];
  r13 = HEAP32[r18];
  HEAP32[r7 + 7] = r14 ^ -1;
  HEAP32[r7 + 6] = r13 ^ r14 ^ r17 ^ r11;
  r11 = HEAP32[r5 + 16];
  r17 = r4 + 76 | 0;
  r14 = HEAP32[r17 >> 2];
  r13 = r14 | r11;
  r18 = r4 + 72 | 0;
  r16 = HEAP32[r18 >> 2];
  r15 = r16 ^ r14;
  r10 = r4 + 68 | 0;
  r12 = HEAP32[r10 >> 2];
  r9 = r11 | r12 ^ -1;
  r1 = r9 ^ r15;
  HEAP32[r7 + 10] = r1;
  r8 = ((r16 ^ r11) & r14 | r12) ^ r15 & r13;
  r15 = HEAP32[r17 >> 2] & HEAP32[r10 >> 2];
  HEAP32[r7 + 11] = r8 ^ -1;
  r10 = r1 ^ r13 ^ r8 ^ r15;
  HEAP32[r7 + 9] = r10;
  HEAP32[r7 + 8] = (r10 | r8) & r9 ^ HEAP32[r18 >> 2];
  r18 = (r4 + 84 | 0) >> 2;
  r9 = HEAP32[r18];
  r8 = (r4 + 88 | 0) >> 2;
  r10 = r4 + 80 | 0;
  r15 = HEAP32[r10 >> 2];
  r13 = (r4 + 92 | 0) >> 2;
  r1 = HEAP32[r8] ^ r9 ^ (HEAP32[r13] | r15);
  HEAP32[r7 + 15] = r1;
  r17 = HEAP32[r8];
  r12 = HEAP32[r13];
  r14 = r12 ^ HEAP32[r10 >> 2];
  r10 = HEAP32[r18] | r17;
  r11 = r10 & (r15 ^ r9);
  r9 = r11 ^ r12 & (r1 | r17);
  HEAP32[r7 + 14] = r9;
  r17 = HEAP32[r8];
  r8 = HEAP32[r13];
  r13 = HEAP32[r18] & r14;
  r18 = r10 ^ (r14 ^ -1) ^ r9 & r11;
  HEAP32[r7 + 12] = r18;
  HEAP32[r7 + 13] = r8 ^ r17 ^ r13 ^ r18;
  r18 = (r4 + 96 | 0) >> 2;
  r13 = HEAP32[r18];
  r17 = (r4 + 104 | 0) >> 2;
  r8 = HEAP32[r17];
  r11 = r8 & r13;
  r9 = r4 + 108 | 0;
  r14 = HEAP32[r9 >> 2] ^ -1;
  r10 = r4 + 100 | 0;
  r1 = HEAP32[r10 >> 2];
  r12 = r1 | r11;
  r15 = r1 & r13;
  r1 = r13 & r14 ^ r8 ^ r12;
  HEAP32[r7 + 19] = r1;
  r8 = HEAP32[r18] ^ (r1 | HEAP32[r17]) ^ (HEAP32[r9 >> 2] | r15);
  HEAP32[r7 + 17] = r8;
  r9 = r8 ^ HEAP32[r10 >> 2] | r1 & r12;
  HEAP32[r7 + 16] = HEAP32[r17] ^ r15 ^ (r8 ^ r11 | r14);
  HEAP32[r7 + 18] = r9 ^ HEAP32[r18];
  r18 = (r4 + 112 | 0) >> 2;
  r9 = HEAP32[r18];
  r14 = r4 + 124 | 0;
  r11 = HEAP32[r14 >> 2];
  r8 = (r4 + 116 | 0) >> 2;
  r15 = HEAP32[r8];
  r17 = r4 + 120 | 0;
  r12 = HEAP32[r17 >> 2];
  r1 = r11 ^ r9;
  r10 = r11 & r9 ^ (r15 ^ -1) ^ r12;
  r9 = r6 + 84 | 0;
  HEAP32[r9 >> 2] = r10;
  r11 = (r12 | r15) & r1;
  r15 = HEAP32[r8];
  r12 = HEAP32[r17 >> 2];
  r17 = HEAP32[r14 >> 2] | r15;
  r14 = r6 + 88 | 0;
  HEAP32[r14 >> 2] = r11 ^ (r15 & r10 ^ -1) ^ (r12 | HEAP32[r18]);
  r10 = HEAP32[r9 >> 2] & r1;
  HEAP32[r7 + 23] = r12 ^ r11 ^ r17;
  HEAP32[r7 + 20] = r10 ^ HEAP32[r18] ^ HEAP32[r8] ^ HEAP32[r14 >> 2];
  r14 = r4 + 132 | 0;
  r8 = HEAP32[r14 >> 2];
  r18 = r4 + 140 | 0;
  r10 = HEAP32[r18 >> 2];
  r17 = r10 ^ r8;
  r11 = r4 + 128 | 0;
  r12 = HEAP32[r11 >> 2] & r17;
  r1 = HEAP32[r5 + 34] ^ (r10 | r8) ^ r12;
  r8 = r1 ^ -1;
  HEAP32[r7 + 24] = r8;
  r10 = HEAP32[r11 >> 2] ^ r17;
  r11 = HEAP32[r18 >> 2];
  r18 = r11 | r8;
  r9 = HEAP32[r14 >> 2];
  HEAP32[r7 + 26] = (r18 ^ r11 | r10) ^ (r9 | r1);
  HEAP32[r7 + 25] = r18 ^ r10;
  HEAP32[r7 + 27] = (r12 | r8) ^ r17 ^ (r9 | r10);
  r10 = r4 + 144 | 0;
  r9 = HEAP32[r10 >> 2];
  r17 = r4 + 148 | 0;
  r8 = HEAP32[r17 >> 2];
  r12 = r4 + 152 | 0;
  r18 = (HEAP32[r12 >> 2] | r8) ^ r9;
  r1 = HEAP32[r5 + 39];
  r11 = r1 ^ r8;
  r14 = r18 | r1;
  r15 = r1 & (r8 | r9);
  r9 = r18 ^ r15;
  HEAP32[r7 + 31] = r9;
  r8 = r9 & r11;
  r9 = HEAP32[r12 >> 2];
  r12 = HEAP32[r17 >> 2] & r9;
  r17 = HEAP32[r10 >> 2] & r14;
  HEAP32[r7 + 30] = (r12 | r18) ^ r8;
  HEAP32[r7 + 29] = (r8 ^ r11 | r12) ^ r17;
  HEAP32[r7 + 28] = r9 ^ (r15 ^ -1) ^ r14 & r11;
  r11 = r4 + 160 | 0;
  r14 = HEAP32[r11 >> 2];
  r15 = HEAP32[r5 + 42];
  r9 = r4 + 172 | 0;
  r17 = HEAP32[r9 >> 2];
  r12 = r17 | r14;
  r8 = r12 & (r15 ^ r14);
  r18 = r4 + 164 | 0;
  r10 = HEAP32[r18 >> 2];
  r1 = r10 | r17 & r14;
  r13 = r8 ^ r17;
  r16 = r10 & r14 | r15;
  r15 = r13 ^ r10 ^ r16;
  HEAP32[r7 + 35] = r15;
  r10 = HEAP32[r11 >> 2] | r13;
  r13 = (r15 | HEAP32[r9 >> 2]) & HEAP32[r18 >> 2];
  HEAP32[r7 + 34] = r1 & r17 ^ r12 ^ r16;
  HEAP32[r7 + 32] = r13 ^ r10;
  HEAP32[r7 + 33] = r1 ^ r8;
  r8 = r4 + 176 | 0;
  r1 = HEAP32[r8 >> 2];
  r10 = r4 + 184 | 0;
  r13 = HEAP32[r10 >> 2] | r1;
  r16 = (r4 + 180 | 0) >> 2;
  r12 = HEAP32[r16] ^ r1;
  r1 = r4 + 188 | 0;
  r17 = HEAP32[r1 >> 2] ^ r13;
  r18 = r17 ^ r12;
  HEAP32[r7 + 36] = r18;
  r9 = r18 ^ HEAP32[r10 >> 2];
  r10 = HEAP32[r16];
  r18 = (r9 | r10) ^ r17;
  r17 = (r18 | r12) ^ (r9 ^ r10) & r13;
  HEAP32[r7 + 37] = r17;
  r13 = HEAP32[r1 >> 2] | HEAP32[r8 >> 2];
  r8 = HEAP32[r16];
  HEAP32[r7 + 39] = r18 ^ -1;
  HEAP32[r7 + 38] = r8 ^ r18 ^ r13 ^ r17;
  r17 = HEAP32[r5 + 48];
  r13 = r4 + 204 | 0;
  r18 = HEAP32[r13 >> 2];
  r8 = r18 | r17;
  r16 = r4 + 200 | 0;
  r1 = HEAP32[r16 >> 2];
  r10 = r1 ^ r18;
  r9 = r4 + 196 | 0;
  r12 = HEAP32[r9 >> 2];
  r15 = r17 | r12 ^ -1;
  r11 = r15 ^ r10;
  HEAP32[r7 + 42] = r11;
  r14 = ((r1 ^ r17) & r18 | r12) ^ r10 & r8;
  r10 = HEAP32[r13 >> 2] & HEAP32[r9 >> 2];
  HEAP32[r7 + 43] = r14 ^ -1;
  r9 = r11 ^ r8 ^ r14 ^ r10;
  HEAP32[r7 + 41] = r9;
  HEAP32[r7 + 40] = (r9 | r14) & r15 ^ HEAP32[r16 >> 2];
  r16 = (r4 + 212 | 0) >> 2;
  r15 = HEAP32[r16];
  r14 = (r4 + 216 | 0) >> 2;
  r9 = r4 + 208 | 0;
  r10 = HEAP32[r9 >> 2];
  r8 = (r4 + 220 | 0) >> 2;
  r11 = HEAP32[r14] ^ r15 ^ (HEAP32[r8] | r10);
  HEAP32[r7 + 47] = r11;
  r13 = HEAP32[r14];
  r12 = HEAP32[r8];
  r18 = r12 ^ HEAP32[r9 >> 2];
  r9 = HEAP32[r16] | r13;
  r17 = r9 & (r10 ^ r15);
  r15 = r17 ^ r12 & (r11 | r13);
  HEAP32[r7 + 46] = r15;
  r13 = HEAP32[r14];
  r14 = HEAP32[r8];
  r8 = HEAP32[r16] & r18;
  r16 = r9 ^ (r18 ^ -1) ^ r15 & r17;
  HEAP32[r7 + 44] = r16;
  HEAP32[r7 + 45] = r14 ^ r13 ^ r8 ^ r16;
  r16 = (r4 + 224 | 0) >> 2;
  r8 = HEAP32[r16];
  r13 = (r4 + 232 | 0) >> 2;
  r14 = HEAP32[r13];
  r17 = r14 & r8;
  r15 = r4 + 236 | 0;
  r18 = HEAP32[r15 >> 2] ^ -1;
  r9 = r4 + 228 | 0;
  r11 = HEAP32[r9 >> 2];
  r12 = r11 | r17;
  r10 = r11 & r8;
  r11 = r8 & r18 ^ r14 ^ r12;
  HEAP32[r7 + 51] = r11;
  r14 = HEAP32[r16] ^ (r11 | HEAP32[r13]) ^ (HEAP32[r15 >> 2] | r10);
  HEAP32[r7 + 49] = r14;
  r15 = r14 ^ HEAP32[r9 >> 2] | r11 & r12;
  HEAP32[r7 + 48] = HEAP32[r13] ^ r10 ^ (r14 ^ r17 | r18);
  HEAP32[r7 + 50] = r15 ^ HEAP32[r16];
  r16 = (r4 + 240 | 0) >> 2;
  r15 = HEAP32[r16];
  r18 = r4 + 252 | 0;
  r17 = HEAP32[r18 >> 2];
  r14 = (r4 + 244 | 0) >> 2;
  r10 = HEAP32[r14];
  r13 = r4 + 248 | 0;
  r12 = HEAP32[r13 >> 2];
  r11 = r17 ^ r15;
  r9 = r17 & r15 ^ (r10 ^ -1) ^ r12;
  r15 = r6 + 212 | 0;
  HEAP32[r15 >> 2] = r9;
  r17 = (r12 | r10) & r11;
  r10 = HEAP32[r14];
  r12 = HEAP32[r13 >> 2];
  r13 = HEAP32[r18 >> 2] | r10;
  r18 = r6 + 216 | 0;
  HEAP32[r18 >> 2] = r17 ^ (r10 & r9 ^ -1) ^ (r12 | HEAP32[r16]);
  r9 = HEAP32[r15 >> 2] & r11;
  HEAP32[r7 + 55] = r12 ^ r17 ^ r13;
  HEAP32[r7 + 52] = r9 ^ HEAP32[r16] ^ HEAP32[r14] ^ HEAP32[r18 >> 2];
  r18 = r4 + 260 | 0;
  r14 = HEAP32[r18 >> 2];
  r16 = r4 + 268 | 0;
  r9 = HEAP32[r16 >> 2];
  r13 = r9 ^ r14;
  r17 = r4 + 256 | 0;
  r12 = HEAP32[r17 >> 2] & r13;
  r11 = HEAP32[r5 + 66] ^ (r9 | r14) ^ r12;
  r14 = r11 ^ -1;
  HEAP32[r7 + 56] = r14;
  r9 = HEAP32[r17 >> 2] ^ r13;
  r17 = HEAP32[r16 >> 2];
  r16 = r17 | r14;
  r15 = HEAP32[r18 >> 2];
  HEAP32[r7 + 58] = (r16 ^ r17 | r9) ^ (r15 | r11);
  HEAP32[r7 + 57] = r16 ^ r9;
  HEAP32[r7 + 59] = (r12 | r14) ^ r13 ^ (r15 | r9);
  r9 = r4 + 272 | 0;
  r15 = HEAP32[r9 >> 2];
  r13 = r4 + 276 | 0;
  r14 = HEAP32[r13 >> 2];
  r12 = r4 + 280 | 0;
  r16 = (HEAP32[r12 >> 2] | r14) ^ r15;
  r11 = HEAP32[r5 + 71];
  r17 = r11 ^ r14;
  r18 = r16 | r11;
  r10 = r11 & (r14 | r15);
  r15 = r16 ^ r10;
  HEAP32[r7 + 63] = r15;
  r14 = r15 & r17;
  r15 = HEAP32[r12 >> 2];
  r12 = HEAP32[r13 >> 2] & r15;
  r13 = HEAP32[r9 >> 2] & r18;
  HEAP32[r7 + 62] = (r12 | r16) ^ r14;
  HEAP32[r7 + 61] = (r14 ^ r17 | r12) ^ r13;
  HEAP32[r7 + 60] = r15 ^ (r10 ^ -1) ^ r18 & r17;
  r17 = r4 + 288 | 0;
  r18 = HEAP32[r17 >> 2];
  r10 = HEAP32[r5 + 74];
  r15 = r4 + 300 | 0;
  r13 = HEAP32[r15 >> 2];
  r12 = r13 | r18;
  r14 = r12 & (r10 ^ r18);
  r16 = r4 + 292 | 0;
  r9 = HEAP32[r16 >> 2];
  r11 = r9 | r13 & r18;
  r8 = r14 ^ r13;
  r1 = r9 & r18 | r10;
  r10 = r8 ^ r9 ^ r1;
  HEAP32[r7 + 67] = r10;
  r9 = HEAP32[r17 >> 2] | r8;
  r8 = (r10 | HEAP32[r15 >> 2]) & HEAP32[r16 >> 2];
  HEAP32[r7 + 66] = r11 & r13 ^ r12 ^ r1;
  HEAP32[r7 + 64] = r8 ^ r9;
  HEAP32[r7 + 65] = r11 ^ r14;
  r14 = r4 + 304 | 0;
  r11 = HEAP32[r14 >> 2];
  r9 = r4 + 312 | 0;
  r8 = HEAP32[r9 >> 2] | r11;
  r1 = (r4 + 308 | 0) >> 2;
  r12 = HEAP32[r1] ^ r11;
  r11 = r4 + 316 | 0;
  r13 = HEAP32[r11 >> 2] ^ r8;
  r16 = r13 ^ r12;
  HEAP32[r7 + 68] = r16;
  r15 = r16 ^ HEAP32[r9 >> 2];
  r9 = HEAP32[r1];
  r16 = (r15 | r9) ^ r13;
  r13 = (r16 | r12) ^ (r15 ^ r9) & r8;
  HEAP32[r7 + 69] = r13;
  r8 = HEAP32[r11 >> 2] | HEAP32[r14 >> 2];
  r14 = HEAP32[r1];
  HEAP32[r7 + 71] = r16 ^ -1;
  HEAP32[r7 + 70] = r14 ^ r16 ^ r8 ^ r13;
  r13 = HEAP32[r5 + 80];
  r8 = r4 + 332 | 0;
  r16 = HEAP32[r8 >> 2];
  r14 = r16 | r13;
  r1 = r4 + 328 | 0;
  r11 = HEAP32[r1 >> 2];
  r9 = r11 ^ r16;
  r15 = r4 + 324 | 0;
  r12 = HEAP32[r15 >> 2];
  r10 = r13 | r12 ^ -1;
  r17 = r10 ^ r9;
  HEAP32[r7 + 74] = r17;
  r18 = ((r11 ^ r13) & r16 | r12) ^ r9 & r14;
  r9 = HEAP32[r8 >> 2] & HEAP32[r15 >> 2];
  HEAP32[r7 + 75] = r18 ^ -1;
  r15 = r17 ^ r14 ^ r18 ^ r9;
  HEAP32[r7 + 73] = r15;
  HEAP32[r7 + 72] = (r15 | r18) & r10 ^ HEAP32[r1 >> 2];
  r1 = (r4 + 340 | 0) >> 2;
  r10 = HEAP32[r1];
  r18 = (r4 + 344 | 0) >> 2;
  r15 = r4 + 336 | 0;
  r9 = HEAP32[r15 >> 2];
  r14 = (r4 + 348 | 0) >> 2;
  r17 = HEAP32[r18] ^ r10 ^ (HEAP32[r14] | r9);
  HEAP32[r7 + 79] = r17;
  r8 = HEAP32[r18];
  r12 = HEAP32[r14];
  r16 = r12 ^ HEAP32[r15 >> 2];
  r15 = HEAP32[r1] | r8;
  r13 = r15 & (r9 ^ r10);
  r10 = r13 ^ r12 & (r17 | r8);
  HEAP32[r7 + 78] = r10;
  r8 = HEAP32[r18];
  r18 = HEAP32[r14];
  r14 = HEAP32[r1] & r16;
  r1 = r15 ^ (r16 ^ -1) ^ r10 & r13;
  HEAP32[r7 + 76] = r1;
  HEAP32[r7 + 77] = r18 ^ r8 ^ r14 ^ r1;
  r1 = (r4 + 352 | 0) >> 2;
  r14 = HEAP32[r1];
  r8 = (r4 + 360 | 0) >> 2;
  r18 = HEAP32[r8];
  r13 = r18 & r14;
  r10 = r4 + 364 | 0;
  r16 = HEAP32[r10 >> 2] ^ -1;
  r15 = r4 + 356 | 0;
  r17 = HEAP32[r15 >> 2];
  r12 = r17 | r13;
  r9 = r17 & r14;
  r17 = r14 & r16 ^ r18 ^ r12;
  HEAP32[r7 + 83] = r17;
  r18 = HEAP32[r1] ^ (r17 | HEAP32[r8]) ^ (HEAP32[r10 >> 2] | r9);
  HEAP32[r7 + 81] = r18;
  r10 = r18 ^ HEAP32[r15 >> 2] | r17 & r12;
  HEAP32[r7 + 80] = HEAP32[r8] ^ r9 ^ (r18 ^ r13 | r16);
  HEAP32[r7 + 82] = r10 ^ HEAP32[r1];
  r1 = (r4 + 368 | 0) >> 2;
  r10 = HEAP32[r1];
  r16 = r4 + 380 | 0;
  r13 = HEAP32[r16 >> 2];
  r18 = (r4 + 372 | 0) >> 2;
  r9 = HEAP32[r18];
  r8 = r4 + 376 | 0;
  r12 = HEAP32[r8 >> 2];
  r17 = r13 ^ r10;
  r15 = r13 & r10 ^ (r9 ^ -1) ^ r12;
  r10 = r6 + 340 | 0;
  HEAP32[r10 >> 2] = r15;
  r13 = (r12 | r9) & r17;
  r9 = HEAP32[r18];
  r12 = HEAP32[r8 >> 2];
  r8 = HEAP32[r16 >> 2] | r9;
  r16 = r6 + 344 | 0;
  HEAP32[r16 >> 2] = r13 ^ (r9 & r15 ^ -1) ^ (r12 | HEAP32[r1]);
  r15 = HEAP32[r10 >> 2] & r17;
  HEAP32[r7 + 87] = r12 ^ r13 ^ r8;
  HEAP32[r7 + 84] = r15 ^ HEAP32[r1] ^ HEAP32[r18] ^ HEAP32[r16 >> 2];
  r16 = r4 + 388 | 0;
  r18 = HEAP32[r16 >> 2];
  r1 = r4 + 396 | 0;
  r15 = HEAP32[r1 >> 2];
  r8 = r15 ^ r18;
  r13 = r4 + 384 | 0;
  r12 = HEAP32[r13 >> 2] & r8;
  r17 = HEAP32[r5 + 98] ^ (r15 | r18) ^ r12;
  r18 = r17 ^ -1;
  HEAP32[r7 + 88] = r18;
  r15 = HEAP32[r13 >> 2] ^ r8;
  r13 = HEAP32[r1 >> 2];
  r1 = r13 | r18;
  r10 = HEAP32[r16 >> 2];
  HEAP32[r7 + 90] = (r1 ^ r13 | r15) ^ (r10 | r17);
  HEAP32[r7 + 89] = r1 ^ r15;
  HEAP32[r7 + 91] = (r12 | r18) ^ r8 ^ (r10 | r15);
  r15 = r4 + 400 | 0;
  r10 = HEAP32[r15 >> 2];
  r8 = r4 + 404 | 0;
  r18 = HEAP32[r8 >> 2];
  r12 = r4 + 408 | 0;
  r1 = (HEAP32[r12 >> 2] | r18) ^ r10;
  r17 = HEAP32[r5 + 103];
  r13 = r17 ^ r18;
  r16 = r1 | r17;
  r9 = r17 & (r18 | r10);
  r10 = r1 ^ r9;
  HEAP32[r7 + 95] = r10;
  r18 = r10 & r13;
  r10 = HEAP32[r12 >> 2];
  r12 = HEAP32[r8 >> 2] & r10;
  r8 = HEAP32[r15 >> 2] & r16;
  HEAP32[r7 + 94] = (r12 | r1) ^ r18;
  HEAP32[r7 + 93] = (r18 ^ r13 | r12) ^ r8;
  HEAP32[r7 + 92] = r10 ^ (r9 ^ -1) ^ r16 & r13;
  r13 = r4 + 416 | 0;
  r16 = HEAP32[r13 >> 2];
  r9 = HEAP32[r5 + 106];
  r10 = r4 + 428 | 0;
  r8 = HEAP32[r10 >> 2];
  r12 = r8 | r16;
  r18 = r12 & (r9 ^ r16);
  r1 = r4 + 420 | 0;
  r15 = HEAP32[r1 >> 2];
  r17 = r15 | r8 & r16;
  r14 = r18 ^ r8;
  r11 = r15 & r16 | r9;
  r9 = r14 ^ r15 ^ r11;
  HEAP32[r7 + 99] = r9;
  r15 = HEAP32[r13 >> 2] | r14;
  r14 = (r9 | HEAP32[r10 >> 2]) & HEAP32[r1 >> 2];
  HEAP32[r7 + 98] = r17 & r8 ^ r12 ^ r11;
  HEAP32[r7 + 96] = r14 ^ r15;
  HEAP32[r7 + 97] = r17 ^ r18;
  r18 = r4 + 432 | 0;
  r17 = HEAP32[r18 >> 2];
  r15 = r4 + 440 | 0;
  r14 = HEAP32[r15 >> 2] | r17;
  r11 = (r4 + 436 | 0) >> 2;
  r12 = HEAP32[r11] ^ r17;
  r17 = r4 + 444 | 0;
  r8 = HEAP32[r17 >> 2] ^ r14;
  r1 = r8 ^ r12;
  HEAP32[r7 + 100] = r1;
  r10 = r1 ^ HEAP32[r15 >> 2];
  r15 = HEAP32[r11];
  r1 = (r10 | r15) ^ r8;
  r8 = (r1 | r12) ^ (r10 ^ r15) & r14;
  HEAP32[r7 + 101] = r8;
  r14 = HEAP32[r17 >> 2] | HEAP32[r18 >> 2];
  r18 = HEAP32[r11];
  HEAP32[r7 + 103] = r1 ^ -1;
  HEAP32[r7 + 102] = r18 ^ r1 ^ r14 ^ r8;
  r8 = HEAP32[r5 + 112];
  r14 = r4 + 460 | 0;
  r1 = HEAP32[r14 >> 2];
  r18 = r1 | r8;
  r11 = r4 + 456 | 0;
  r17 = HEAP32[r11 >> 2];
  r15 = r17 ^ r1;
  r10 = r4 + 452 | 0;
  r12 = HEAP32[r10 >> 2];
  r9 = r8 | r12 ^ -1;
  r13 = r9 ^ r15;
  HEAP32[r7 + 106] = r13;
  r16 = ((r17 ^ r8) & r1 | r12) ^ r15 & r18;
  r15 = HEAP32[r14 >> 2] & HEAP32[r10 >> 2];
  HEAP32[r7 + 107] = r16 ^ -1;
  r10 = r13 ^ r18 ^ r16 ^ r15;
  HEAP32[r7 + 105] = r10;
  HEAP32[r7 + 104] = (r10 | r16) & r9 ^ HEAP32[r11 >> 2];
  r11 = (r4 + 468 | 0) >> 2;
  r9 = HEAP32[r11];
  r16 = (r4 + 472 | 0) >> 2;
  r10 = r4 + 464 | 0;
  r15 = HEAP32[r10 >> 2];
  r18 = (r4 + 476 | 0) >> 2;
  r13 = HEAP32[r16] ^ r9 ^ (HEAP32[r18] | r15);
  HEAP32[r7 + 111] = r13;
  r14 = HEAP32[r16];
  r12 = HEAP32[r18];
  r1 = r12 ^ HEAP32[r10 >> 2];
  r10 = HEAP32[r11] | r14;
  r8 = r10 & (r15 ^ r9);
  r9 = r8 ^ r12 & (r13 | r14);
  HEAP32[r7 + 110] = r9;
  r14 = HEAP32[r16];
  r16 = HEAP32[r18];
  r18 = HEAP32[r11] & r1;
  r11 = r10 ^ (r1 ^ -1) ^ r9 & r8;
  HEAP32[r7 + 108] = r11;
  HEAP32[r7 + 109] = r16 ^ r14 ^ r18 ^ r11;
  r11 = (r4 + 480 | 0) >> 2;
  r18 = HEAP32[r11];
  r14 = (r4 + 488 | 0) >> 2;
  r16 = HEAP32[r14];
  r8 = r16 & r18;
  r9 = r4 + 492 | 0;
  r1 = HEAP32[r9 >> 2] ^ -1;
  r10 = r4 + 484 | 0;
  r13 = HEAP32[r10 >> 2];
  r12 = r13 | r8;
  r15 = r13 & r18;
  r13 = r18 & r1 ^ r16 ^ r12;
  HEAP32[r7 + 115] = r13;
  r16 = HEAP32[r11] ^ (r13 | HEAP32[r14]) ^ (HEAP32[r9 >> 2] | r15);
  HEAP32[r7 + 113] = r16;
  r9 = r16 ^ HEAP32[r10 >> 2] | r13 & r12;
  HEAP32[r7 + 112] = HEAP32[r14] ^ r15 ^ (r16 ^ r8 | r1);
  HEAP32[r7 + 114] = r9 ^ HEAP32[r11];
  r11 = (r4 + 496 | 0) >> 2;
  r9 = HEAP32[r11];
  r1 = r4 + 508 | 0;
  r8 = HEAP32[r1 >> 2];
  r16 = (r4 + 500 | 0) >> 2;
  r15 = HEAP32[r16];
  r14 = r4 + 504 | 0;
  r12 = HEAP32[r14 >> 2];
  r13 = r8 ^ r9;
  r10 = r8 & r9 ^ (r15 ^ -1) ^ r12;
  r9 = r6 + 468 | 0;
  HEAP32[r9 >> 2] = r10;
  r8 = (r12 | r15) & r13;
  r15 = HEAP32[r16];
  r12 = HEAP32[r14 >> 2];
  r14 = HEAP32[r1 >> 2] | r15;
  r1 = r6 + 472 | 0;
  HEAP32[r1 >> 2] = r8 ^ (r15 & r10 ^ -1) ^ (r12 | HEAP32[r11]);
  r10 = HEAP32[r9 >> 2] & r13;
  HEAP32[r7 + 119] = r12 ^ r8 ^ r14;
  HEAP32[r7 + 116] = r10 ^ HEAP32[r11] ^ HEAP32[r16] ^ HEAP32[r1 >> 2];
  r1 = r4 + 516 | 0;
  r16 = HEAP32[r1 >> 2];
  r11 = r4 + 524 | 0;
  r10 = HEAP32[r11 >> 2];
  r14 = r10 ^ r16;
  r8 = r4 + 512 | 0;
  r12 = HEAP32[r8 >> 2] & r14;
  r13 = HEAP32[r5 + 130] ^ (r10 | r16) ^ r12;
  r16 = r13 ^ -1;
  HEAP32[r7 + 120] = r16;
  r10 = HEAP32[r8 >> 2] ^ r14;
  r8 = HEAP32[r11 >> 2];
  r11 = r8 | r16;
  r9 = HEAP32[r1 >> 2];
  HEAP32[r7 + 122] = (r11 ^ r8 | r10) ^ (r9 | r13);
  HEAP32[r7 + 121] = r11 ^ r10;
  HEAP32[r7 + 123] = (r12 | r16) ^ r14 ^ (r9 | r10);
  r10 = r4 + 528 | 0;
  r9 = HEAP32[r10 >> 2];
  r14 = r4 + 532 | 0;
  r16 = HEAP32[r14 >> 2];
  r12 = r4 + 536 | 0;
  r11 = (HEAP32[r12 >> 2] | r16) ^ r9;
  r13 = HEAP32[r5 + 135];
  r8 = r13 ^ r16;
  r1 = r11 | r13;
  r15 = r13 & (r16 | r9);
  r9 = r11 ^ r15;
  HEAP32[r7 + 127] = r9;
  r16 = r9 & r8;
  r9 = HEAP32[r12 >> 2];
  r12 = HEAP32[r14 >> 2] & r9;
  r14 = HEAP32[r10 >> 2] & r1;
  HEAP32[r7 + 126] = (r12 | r11) ^ r16;
  HEAP32[r7 + 125] = (r16 ^ r8 | r12) ^ r14;
  HEAP32[r7 + 124] = r9 ^ (r15 ^ -1) ^ r1 & r8;
  r8 = r4 + 544 | 0;
  r1 = HEAP32[r8 >> 2];
  r15 = HEAP32[r5 + 138];
  r5 = r4 + 556 | 0;
  r9 = HEAP32[r5 >> 2];
  r14 = r9 | r1;
  r12 = r14 & (r15 ^ r1);
  r16 = r4 + 548 | 0;
  r4 = HEAP32[r16 >> 2];
  r11 = r4 | r9 & r1;
  r10 = r12 ^ r9;
  r13 = r4 & r1 | r15;
  r15 = r10 ^ r4 ^ r13;
  HEAP32[r7 + 131] = r15;
  r4 = HEAP32[r8 >> 2] | r10;
  r10 = (r15 | HEAP32[r5 >> 2]) & HEAP32[r16 >> 2];
  HEAP32[r7 + 130] = r11 & r9 ^ r14 ^ r13;
  HEAP32[r7 + 128] = r10 ^ r4;
  HEAP32[r7 + 129] = r11 ^ r12;
  r12 = 0;
  while (1) {
    r11 = ((r12 << 4) + r2 | 0) >> 2;
    r7 = ((r12 << 4) + r6 | 0) >> 2;
    HEAP32[r11] = HEAP32[r7];
    HEAP32[r11 + 1] = HEAP32[r7 + 1];
    HEAP32[r11 + 2] = HEAP32[r7 + 2];
    HEAP32[r11 + 3] = HEAP32[r7 + 3];
    r7 = r12 + 1 | 0;
    if ((r7 | 0) == 33) {
      break;
    } else {
      r12 = r7;
    }
  }
  STACKTOP = r3;
  return;
}
function _sha1_init(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP32[r2] = 1732584193;
  HEAP32[r2 + 1] = -271733879;
  HEAP32[r2 + 2] = -1732584194;
  HEAP32[r2 + 3] = 271733878;
  HEAP32[r2 + 4] = -1009589776;
  HEAP32[r2 + 5] = 0;
  HEAP32[r2 + 22] = 0;
  return;
}
function _sha1_read(r1) {
  return r1 + 24 | 0;
}
function __gcry_sha1_hash_buffer(r1, r2, r3) {
  var r4, r5, r6;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  r5 = r4;
  r6 = r5;
  _sha1_init(r6);
  _sha1_write(r6, r2, r3);
  _sha1_final(r6);
  _memcpy(r1, r5 + 24 | 0, 20);
  STACKTOP = r4;
  return;
}
function _sha1_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1;
  r6 = (r1 + 88 | 0) >> 2;
  r7 = r1 + 24 | 0;
  r8 = r1 + 20 | 0;
  r9 = r3;
  r3 = r2;
  L3346 : while (1) {
    if ((HEAP32[r6] | 0) == 64) {
      _transform908(r5, r7, 1);
      __gcry_burn_stack(104);
      HEAP32[r6] = 0;
      HEAP32[r8 >> 2] = HEAP32[r8 >> 2] + 1 | 0;
    }
    if ((r3 | 0) == 0) {
      r4 = 2554;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r3;
      break;
    }
    if ((r9 | 0) == 0) {
      r9 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r3;
      r13 = r9;
    }
    while (1) {
      r2 = HEAP32[r6];
      if ((r2 | 0) >= 64) {
        r4 = 2546;
        break L3346;
      }
      r14 = HEAP8[r12];
      HEAP32[r6] = r2 + 1 | 0;
      HEAP8[r2 + (r1 + 24) | 0] = r14;
      r14 = r13 - 1 | 0;
      if ((r14 | 0) == 0) {
        r9 = 0;
        r3 = 0;
        continue L3346;
      } else {
        r12 = r12 + 1 | 0;
        r13 = r14;
      }
    }
  }
  if (r4 == 2554) {
    return;
  } else if (r4 == 2546) {
    _sha1_write(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  }
  r12 = r10 >>> 6;
  if ((r12 | 0) == 0) {
    r15 = r10;
    r16 = r11;
  } else {
    _transform908(r5, r11, r12);
    HEAP32[r6] = 0;
    r5 = r1 + 20 | 0;
    HEAP32[r5 >> 2] = HEAP32[r5 >> 2] + r12 | 0;
    r5 = r12 << 6;
    r15 = r10 - r5 | 0;
    r16 = r11 + r5 | 0;
  }
  __gcry_burn_stack(104);
  if ((r15 | 0) == 0) {
    return;
  } else {
    r17 = r16;
    r18 = r15;
  }
  while (1) {
    r15 = HEAP32[r6];
    if ((r15 | 0) >= 64) {
      r4 = 2555;
      break;
    }
    r16 = HEAP8[r17];
    HEAP32[r6] = r15 + 1 | 0;
    HEAP8[r15 + (r1 + 24) | 0] = r16;
    r16 = r18 - 1 | 0;
    if ((r16 | 0) == 0) {
      r4 = 2557;
      break;
    } else {
      r17 = r17 + 1 | 0;
      r18 = r16;
    }
  }
  if (r4 == 2555) {
    return;
  } else if (r4 == 2557) {
    return;
  }
}
function _sha1_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r2 = r1;
  _sha1_write(r1, 0, 0);
  r3 = HEAP32[r1 + 20 >> 2];
  r4 = (r1 + 88 | 0) >> 2;
  r5 = HEAP32[r4];
  r6 = _llvm_uadd_with_overflow_i32(r3 << 6, r5);
  r7 = (tempRet0 & 1) + (r3 >>> 26) | 0;
  r3 = r6 << 3;
  r8 = r7 << 3 | r6 >>> 29;
  HEAP32[r4] = r5 + 1 | 0;
  r9 = r1 + 24 | 0;
  HEAP8[r5 + (r1 + 24) | 0] = -128;
  r10 = HEAP32[r4];
  L3372 : do {
    if ((r5 | 0) < 56) {
      if ((r10 | 0) < 56) {
        r11 = r10;
      } else {
        break;
      }
      while (1) {
        HEAP32[r4] = r11 + 1 | 0;
        HEAP8[r11 + (r1 + 24) | 0] = 0;
        r12 = HEAP32[r4];
        if ((r12 | 0) < 56) {
          r11 = r12;
        } else {
          break L3372;
        }
      }
    } else {
      L3374 : do {
        if ((r10 | 0) < 64) {
          r12 = r10;
          while (1) {
            HEAP32[r4] = r12 + 1 | 0;
            HEAP8[r12 + (r1 + 24) | 0] = 0;
            r13 = HEAP32[r4];
            if ((r13 | 0) < 64) {
              r12 = r13;
            } else {
              break L3374;
            }
          }
        }
      } while (0);
      _sha1_write(r1, 0, 0);
      _memset(r9, 0, 56);
    }
  } while (0);
  HEAP8[r1 + 80 | 0] = r7 >>> 21 & 255;
  HEAP8[r1 + 81 | 0] = r7 >>> 13 & 255;
  HEAP8[r1 + 82 | 0] = r7 >>> 5 & 255;
  HEAP8[r1 + 83 | 0] = r8 & 255;
  HEAP8[r1 + 84 | 0] = r6 >>> 21 & 255;
  HEAP8[r1 + 85 | 0] = r6 >>> 13 & 255;
  HEAP8[r1 + 86 | 0] = r6 >>> 5 & 255;
  HEAP8[r1 + 87 | 0] = r3 & 255;
  _transform908(r2, r9, 1);
  __gcry_burn_stack(104);
  r2 = r1 >> 2;
  HEAP8[r9] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 25 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 26 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 27 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 4 | 0) >> 2;
  HEAP8[r1 + 28 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 29 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 30 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 31 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 8 | 0) >> 2;
  HEAP8[r1 + 32 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 33 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 34 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 35 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 12 | 0) >> 2;
  HEAP8[r1 + 36 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 37 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 38 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 39 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 16 | 0) >> 2;
  HEAP8[r1 + 40 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 41 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 42 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 43 | 0] = HEAP32[r2] & 255;
  return;
}
function _run_selftests907(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 2) {
    r4 = _selftests_sha1(r2, r3);
  } else {
    r4 = 5;
  }
  return r4;
}
function _selftests_sha1(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = __gcry_hash_selftest_check_one(2, 0, 477968, 3, 475072, 20);
  do {
    if ((r3 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r4 = 0;
        return r4;
      }
      r5 = __gcry_hash_selftest_check_one(2, 0, 471256, 56, 469984, 20);
      if ((r5 | 0) != 0) {
        r6 = r5;
        r7 = 472716;
        break;
      }
      r5 = __gcry_hash_selftest_check_one(2, 1, 0, 0, 466520, 20);
      if ((r5 | 0) == 0) {
        r4 = 0;
      } else {
        r6 = r5;
        r7 = 468248;
        break;
      }
      return r4;
    } else {
      r6 = r3;
      r7 = 482904;
    }
  } while (0);
  if ((r2 | 0) == 0) {
    r4 = 50;
    return r4;
  }
  FUNCTION_TABLE[r2](465048, 2, r7, r6);
  r4 = 50;
  return r4;
}
function _transform908(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r5 = r4;
  if ((r3 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  r6 = (r5 | 0) >> 2;
  r7 = r5;
  r8 = (r1 | 0) >> 2;
  r9 = (r1 + 4 | 0) >> 2;
  r10 = (r1 + 8 | 0) >> 2;
  r11 = (r1 + 12 | 0) >> 2;
  r12 = (r1 + 16 | 0) >> 2;
  r1 = (r5 + 4 | 0) >> 2;
  r13 = (r5 + 8 | 0) >> 2;
  r14 = (r5 + 12 | 0) >> 2;
  r15 = (r5 + 16 | 0) >> 2;
  r16 = (r5 + 20 | 0) >> 2;
  r17 = (r5 + 24 | 0) >> 2;
  r18 = (r5 + 28 | 0) >> 2;
  r19 = (r5 + 32 | 0) >> 2;
  r20 = (r5 + 36 | 0) >> 2;
  r21 = (r5 + 40 | 0) >> 2;
  r22 = (r5 + 44 | 0) >> 2;
  r23 = (r5 + 48 | 0) >> 2;
  r24 = (r5 + 52 | 0) >> 2;
  r25 = (r5 + 56 | 0) >> 2;
  r26 = (r5 + 60 | 0) >> 2;
  r5 = r3;
  r3 = r2;
  while (1) {
    r2 = r3;
    r27 = 0;
    r28 = r7;
    while (1) {
      HEAP8[r28 + 3 | 0] = HEAP8[r2];
      HEAP8[r28 + 2 | 0] = HEAP8[r2 + 1 | 0];
      HEAP8[r28 + 1 | 0] = HEAP8[r2 + 2 | 0];
      HEAP8[r28] = HEAP8[r2 + 3 | 0];
      r29 = r27 + 1 | 0;
      if ((r29 | 0) == 16) {
        break;
      } else {
        r2 = r2 + 4 | 0;
        r27 = r29;
        r28 = r28 + 4 | 0;
      }
    }
    r28 = HEAP32[r8];
    r27 = HEAP32[r9];
    r2 = HEAP32[r10];
    r29 = HEAP32[r11];
    r30 = HEAP32[r6];
    r31 = (r28 << 5 | r28 >>> 27) + HEAP32[r12] + r30 + ((r29 ^ r2) & r27 ^ r29) + 1518500249 | 0;
    r32 = r27 << 30 | r27 >>> 2;
    r27 = r29 + ((r32 ^ r2) & r28 ^ r2) + HEAP32[r1] + (r31 << 5 | r31 >>> 27) + 1518500249 | 0;
    r29 = r28 << 30 | r28 >>> 2;
    r28 = HEAP32[r13];
    r33 = r2 + r28 + (r31 & (r32 ^ r29) ^ r32) + (r27 << 5 | r27 >>> 27) + 1518500249 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = r32 + HEAP32[r14] + (r27 & (r2 ^ r29) ^ r29) + (r33 << 5 | r33 >>> 27) + 1518500249 | 0;
    r32 = r27 << 30 | r27 >>> 2;
    r27 = r29 + HEAP32[r15] + (r33 & (r32 ^ r2) ^ r2) + (r31 << 5 | r31 >>> 27) + 1518500249 | 0;
    r29 = r33 << 30 | r33 >>> 2;
    r33 = r2 + HEAP32[r16] + (r31 & (r29 ^ r32) ^ r32) + (r27 << 5 | r27 >>> 27) + 1518500249 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r17] + r32 + (r27 & (r2 ^ r29) ^ r29) + (r33 << 5 | r33 >>> 27) + 1518500249 | 0;
    r32 = r27 << 30 | r27 >>> 2;
    r27 = HEAP32[r18] + r29 + (r33 & (r32 ^ r2) ^ r2) + (r31 << 5 | r31 >>> 27) + 1518500249 | 0;
    r29 = r33 << 30 | r33 >>> 2;
    r33 = HEAP32[r19];
    r34 = r33 + r2 + (r31 & (r29 ^ r32) ^ r32) + (r27 << 5 | r27 >>> 27) + 1518500249 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r20] + r32 + (r27 & (r2 ^ r29) ^ r29) + (r34 << 5 | r34 >>> 27) + 1518500249 | 0;
    r32 = r27 << 30 | r27 >>> 2;
    r27 = HEAP32[r21] + r29 + (r34 & (r32 ^ r2) ^ r2) + (r31 << 5 | r31 >>> 27) + 1518500249 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r22] + r2 + (r31 & (r29 ^ r32) ^ r32) + (r27 << 5 | r27 >>> 27) + 1518500249 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r23] + r32 + (r27 & (r2 ^ r29) ^ r29) + (r34 << 5 | r34 >>> 27) + 1518500249 | 0;
    r32 = r27 << 30 | r27 >>> 2;
    r27 = HEAP32[r24];
    r35 = r27 + r29 + (r34 & (r32 ^ r2) ^ r2) + (r31 << 5 | r31 >>> 27) + 1518500249 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r25] + r2 + (r31 & (r29 ^ r32) ^ r32) + (r35 << 5 | r35 >>> 27) + 1518500249 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r26] + r32 + (r35 & (r2 ^ r29) ^ r29) + (r34 << 5 | r34 >>> 27) + 1518500249 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = r28 ^ r30 ^ r33 ^ r27;
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r6] = r27;
    r35 = r27 + r29 + (r34 & (r32 ^ r2) ^ r2) + (r31 << 5 | r31 >>> 27) + 1518500249 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r14] ^ HEAP32[r1] ^ HEAP32[r20] ^ HEAP32[r25];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r1] = r27;
    r34 = r27 + r2 + (r31 & (r29 ^ r32) ^ r32) + (r35 << 5 | r35 >>> 27) + 1518500249 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r15] ^ HEAP32[r13] ^ HEAP32[r21] ^ HEAP32[r26];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r13] = r27;
    r31 = r27 + r32 + (r35 & (r2 ^ r29) ^ r29) + (r34 << 5 | r34 >>> 27) + 1518500249 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r16] ^ HEAP32[r14] ^ HEAP32[r22] ^ HEAP32[r6];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r14] = r27;
    r35 = r27 + r29 + (r34 & (r32 ^ r2) ^ r2) + (r31 << 5 | r31 >>> 27) + 1518500249 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r17] ^ HEAP32[r15] ^ HEAP32[r23] ^ HEAP32[r1];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r15] = r27;
    r34 = r27 + r2 + (r29 ^ r32 ^ r31) + (r35 << 5 | r35 >>> 27) + 1859775393 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r18] ^ HEAP32[r16] ^ HEAP32[r24] ^ HEAP32[r13];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r16] = r27;
    r31 = r27 + r32 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + 1859775393 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r19] ^ HEAP32[r17] ^ HEAP32[r25] ^ HEAP32[r14];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r17] = r27;
    r35 = r27 + r29 + (r32 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + 1859775393 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r20] ^ HEAP32[r18] ^ HEAP32[r26] ^ HEAP32[r15];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r18] = r27;
    r34 = r27 + r2 + (r29 ^ r32 ^ r31) + (r35 << 5 | r35 >>> 27) + 1859775393 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r21] ^ HEAP32[r19] ^ HEAP32[r6] ^ HEAP32[r16];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r19] = r27;
    r31 = r27 + r32 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + 1859775393 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r22] ^ HEAP32[r20] ^ HEAP32[r1] ^ HEAP32[r17];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r20] = r27;
    r35 = r27 + r29 + (r32 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + 1859775393 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r23] ^ HEAP32[r21] ^ HEAP32[r13] ^ HEAP32[r18];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r21] = r27;
    r34 = r27 + r2 + (r29 ^ r32 ^ r31) + (r35 << 5 | r35 >>> 27) + 1859775393 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r24] ^ HEAP32[r22] ^ HEAP32[r14] ^ HEAP32[r19];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r22] = r27;
    r31 = r27 + r32 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + 1859775393 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r25] ^ HEAP32[r23] ^ HEAP32[r15] ^ HEAP32[r20];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r23] = r27;
    r35 = r27 + r29 + (r32 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + 1859775393 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r26] ^ HEAP32[r24] ^ HEAP32[r16] ^ HEAP32[r21];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r24] = r27;
    r34 = r27 + r2 + (r29 ^ r32 ^ r31) + (r35 << 5 | r35 >>> 27) + 1859775393 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r6] ^ HEAP32[r25] ^ HEAP32[r17] ^ HEAP32[r22];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r25] = r27;
    r31 = r27 + r32 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + 1859775393 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r1] ^ HEAP32[r26] ^ HEAP32[r18] ^ HEAP32[r23];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r26] = r27;
    r35 = r27 + r29 + (r32 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + 1859775393 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r13] ^ HEAP32[r6] ^ HEAP32[r19] ^ HEAP32[r24];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r6] = r27;
    r34 = r27 + r2 + (r29 ^ r32 ^ r31) + (r35 << 5 | r35 >>> 27) + 1859775393 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r14] ^ HEAP32[r1] ^ HEAP32[r20] ^ HEAP32[r25];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r1] = r27;
    r31 = r27 + r32 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + 1859775393 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r15] ^ HEAP32[r13] ^ HEAP32[r21] ^ HEAP32[r26];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r13] = r27;
    r35 = r27 + r29 + (r32 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + 1859775393 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r16] ^ HEAP32[r14] ^ HEAP32[r22] ^ HEAP32[r6];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r14] = r27;
    r34 = r27 + r2 + (r29 ^ r32 ^ r31) + (r35 << 5 | r35 >>> 27) + 1859775393 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r17] ^ HEAP32[r15] ^ HEAP32[r23] ^ HEAP32[r1];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r15] = r27;
    r31 = r32 + r27 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + 1859775393 | 0;
    r27 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r18] ^ HEAP32[r16] ^ HEAP32[r24] ^ HEAP32[r13];
    r32 = r35 << 1 | r35 >>> 31;
    HEAP32[r16] = r32;
    r35 = r29 + r32 + (r27 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + 1859775393 | 0;
    r32 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r19] ^ HEAP32[r17] ^ HEAP32[r25] ^ HEAP32[r14];
    r29 = r34 << 1 | r34 >>> 31;
    HEAP32[r17] = r29;
    r34 = r2 + r29 + (r32 ^ r27 ^ r31) + (r35 << 5 | r35 >>> 27) + 1859775393 | 0;
    r29 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r20] ^ HEAP32[r18] ^ HEAP32[r26] ^ HEAP32[r15];
    r2 = r31 << 1 | r31 >>> 31;
    HEAP32[r18] = r2;
    r31 = r27 + r2 + (r29 ^ r32 ^ r35) + (r34 << 5 | r34 >>> 27) + 1859775393 | 0;
    r2 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r21] ^ HEAP32[r19] ^ HEAP32[r6] ^ HEAP32[r16];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r19] = r27;
    r35 = r32 - 1894007588 + r27 + ((r34 | r2) & r29 | r34 & r2) + (r31 << 5 | r31 >>> 27) | 0;
    r27 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r22] ^ HEAP32[r20] ^ HEAP32[r1] ^ HEAP32[r17];
    r32 = r34 << 1 | r34 >>> 31;
    HEAP32[r20] = r32;
    r34 = r29 - 1894007588 + r32 + ((r31 | r27) & r2 | r31 & r27) + (r35 << 5 | r35 >>> 27) | 0;
    r32 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r23] ^ HEAP32[r21] ^ HEAP32[r13] ^ HEAP32[r18];
    r29 = r31 << 1 | r31 >>> 31;
    HEAP32[r21] = r29;
    r31 = r2 - 1894007588 + r29 + ((r35 | r32) & r27 | r35 & r32) + (r34 << 5 | r34 >>> 27) | 0;
    r29 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r24] ^ HEAP32[r22] ^ HEAP32[r14] ^ HEAP32[r19];
    r2 = r35 << 1 | r35 >>> 31;
    HEAP32[r22] = r2;
    r35 = r27 - 1894007588 + r2 + ((r34 | r29) & r32 | r34 & r29) + (r31 << 5 | r31 >>> 27) | 0;
    r2 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r25] ^ HEAP32[r23] ^ HEAP32[r15] ^ HEAP32[r20];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r23] = r27;
    r34 = r32 - 1894007588 + r27 + ((r31 | r2) & r29 | r31 & r2) + (r35 << 5 | r35 >>> 27) | 0;
    r27 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r26] ^ HEAP32[r24] ^ HEAP32[r16] ^ HEAP32[r21];
    r32 = r31 << 1 | r31 >>> 31;
    HEAP32[r24] = r32;
    r31 = r29 - 1894007588 + ((r35 | r27) & r2 | r35 & r27) + r32 + (r34 << 5 | r34 >>> 27) | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r6] ^ HEAP32[r25] ^ HEAP32[r17] ^ HEAP32[r22];
    r29 = r35 << 1 | r35 >>> 31;
    HEAP32[r25] = r29;
    r35 = r2 - 1894007588 + ((r34 | r32) & r27 | r34 & r32) + r29 + (r31 << 5 | r31 >>> 27) | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r1] ^ HEAP32[r26] ^ HEAP32[r18] ^ HEAP32[r23];
    r2 = r34 << 1 | r34 >>> 31;
    HEAP32[r26] = r2;
    r34 = r27 - 1894007588 + ((r31 | r29) & r32 | r31 & r29) + (r35 << 5 | r35 >>> 27) + r2 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r13] ^ HEAP32[r6] ^ HEAP32[r19] ^ HEAP32[r24];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r6] = r27;
    r31 = r32 - 1894007588 + ((r35 | r2) & r29 | r35 & r2) + (r34 << 5 | r34 >>> 27) + r27 | 0;
    r27 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r14] ^ HEAP32[r1] ^ HEAP32[r20] ^ HEAP32[r25];
    r32 = r35 << 1 | r35 >>> 31;
    HEAP32[r1] = r32;
    r35 = r29 - 1894007588 + ((r34 | r27) & r2 | r34 & r27) + (r31 << 5 | r31 >>> 27) + r32 | 0;
    r32 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r15] ^ HEAP32[r13] ^ HEAP32[r21] ^ HEAP32[r26];
    r29 = r34 << 1 | r34 >>> 31;
    HEAP32[r13] = r29;
    r34 = r2 - 1894007588 + ((r31 | r32) & r27 | r31 & r32) + (r35 << 5 | r35 >>> 27) + r29 | 0;
    r29 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r16] ^ HEAP32[r14] ^ HEAP32[r22] ^ HEAP32[r6];
    r2 = r31 << 1 | r31 >>> 31;
    HEAP32[r14] = r2;
    r31 = r27 - 1894007588 + ((r35 | r29) & r32 | r35 & r29) + (r34 << 5 | r34 >>> 27) + r2 | 0;
    r2 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r17] ^ HEAP32[r15] ^ HEAP32[r23] ^ HEAP32[r1];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r15] = r27;
    r35 = r32 - 1894007588 + ((r34 | r2) & r29 | r34 & r2) + (r31 << 5 | r31 >>> 27) + r27 | 0;
    r27 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r18] ^ HEAP32[r16] ^ HEAP32[r24] ^ HEAP32[r13];
    r32 = r34 << 1 | r34 >>> 31;
    HEAP32[r16] = r32;
    r34 = r29 - 1894007588 + ((r31 | r27) & r2 | r31 & r27) + (r35 << 5 | r35 >>> 27) + r32 | 0;
    r32 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r19] ^ HEAP32[r17] ^ HEAP32[r25] ^ HEAP32[r14];
    r29 = r31 << 1 | r31 >>> 31;
    HEAP32[r17] = r29;
    r31 = r2 - 1894007588 + ((r35 | r32) & r27 | r35 & r32) + (r34 << 5 | r34 >>> 27) + r29 | 0;
    r29 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r20] ^ HEAP32[r18] ^ HEAP32[r26] ^ HEAP32[r15];
    r2 = r35 << 1 | r35 >>> 31;
    HEAP32[r18] = r2;
    r35 = r27 - 1894007588 + ((r34 | r29) & r32 | r34 & r29) + (r31 << 5 | r31 >>> 27) + r2 | 0;
    r2 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r21] ^ HEAP32[r19] ^ HEAP32[r6] ^ HEAP32[r16];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r19] = r27;
    r34 = r32 - 1894007588 + ((r31 | r2) & r29 | r31 & r2) + (r35 << 5 | r35 >>> 27) + r27 | 0;
    r27 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r22] ^ HEAP32[r20] ^ HEAP32[r1] ^ HEAP32[r17];
    r32 = r31 << 1 | r31 >>> 31;
    HEAP32[r20] = r32;
    r31 = r29 - 1894007588 + ((r35 | r27) & r2 | r35 & r27) + (r34 << 5 | r34 >>> 27) + r32 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r23] ^ HEAP32[r21] ^ HEAP32[r13] ^ HEAP32[r18];
    r29 = r35 << 1 | r35 >>> 31;
    HEAP32[r21] = r29;
    r35 = r2 - 1894007588 + ((r34 | r32) & r27 | r34 & r32) + (r31 << 5 | r31 >>> 27) + r29 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r24] ^ HEAP32[r22] ^ HEAP32[r14] ^ HEAP32[r19];
    r2 = r34 << 1 | r34 >>> 31;
    HEAP32[r22] = r2;
    r34 = r27 - 1894007588 + ((r31 | r29) & r32 | r31 & r29) + (r35 << 5 | r35 >>> 27) + r2 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r25] ^ HEAP32[r23] ^ HEAP32[r15] ^ HEAP32[r20];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r23] = r27;
    r31 = r32 - 899497514 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + r27 | 0;
    r27 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r26] ^ HEAP32[r24] ^ HEAP32[r16] ^ HEAP32[r21];
    r32 = r35 << 1 | r35 >>> 31;
    HEAP32[r24] = r32;
    r35 = r29 - 899497514 + (r27 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + r32 | 0;
    r32 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r6] ^ HEAP32[r25] ^ HEAP32[r17] ^ HEAP32[r22];
    r29 = r34 << 1 | r34 >>> 31;
    HEAP32[r25] = r29;
    r34 = r2 - 899497514 + (r32 ^ r27 ^ r31) + (r35 << 5 | r35 >>> 27) + r29 | 0;
    r29 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r1] ^ HEAP32[r26] ^ HEAP32[r18] ^ HEAP32[r23];
    r2 = r31 << 1 | r31 >>> 31;
    HEAP32[r26] = r2;
    r31 = r27 - 899497514 + (r29 ^ r32 ^ r35) + (r34 << 5 | r34 >>> 27) + r2 | 0;
    r2 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r13] ^ HEAP32[r6] ^ HEAP32[r19] ^ HEAP32[r24];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r6] = r27;
    r35 = r32 - 899497514 + (r2 ^ r29 ^ r34) + (r31 << 5 | r31 >>> 27) + r27 | 0;
    r27 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r14] ^ HEAP32[r1] ^ HEAP32[r20] ^ HEAP32[r25];
    r32 = r34 << 1 | r34 >>> 31;
    HEAP32[r1] = r32;
    r34 = r29 - 899497514 + (r27 ^ r2 ^ r31) + (r35 << 5 | r35 >>> 27) + r32 | 0;
    r32 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r15] ^ HEAP32[r13] ^ HEAP32[r21] ^ HEAP32[r26];
    r29 = r31 << 1 | r31 >>> 31;
    HEAP32[r13] = r29;
    r31 = r2 - 899497514 + (r32 ^ r27 ^ r35) + (r34 << 5 | r34 >>> 27) + r29 | 0;
    r29 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r16] ^ HEAP32[r14] ^ HEAP32[r22] ^ HEAP32[r6];
    r2 = r35 << 1 | r35 >>> 31;
    HEAP32[r14] = r2;
    r35 = r27 - 899497514 + (r29 ^ r32 ^ r34) + (r31 << 5 | r31 >>> 27) + r2 | 0;
    r2 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r17] ^ HEAP32[r15] ^ HEAP32[r23] ^ HEAP32[r1];
    r27 = r34 << 1 | r34 >>> 31;
    HEAP32[r15] = r27;
    r34 = r32 - 899497514 + (r2 ^ r29 ^ r31) + (r35 << 5 | r35 >>> 27) + r27 | 0;
    r27 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r18] ^ HEAP32[r16] ^ HEAP32[r24] ^ HEAP32[r13];
    r32 = r31 << 1 | r31 >>> 31;
    HEAP32[r16] = r32;
    r31 = r29 - 899497514 + (r27 ^ r2 ^ r35) + (r34 << 5 | r34 >>> 27) + r32 | 0;
    r32 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r19] ^ HEAP32[r17] ^ HEAP32[r25] ^ HEAP32[r14];
    r29 = r35 << 1 | r35 >>> 31;
    HEAP32[r17] = r29;
    r35 = r2 - 899497514 + (r32 ^ r27 ^ r34) + (r31 << 5 | r31 >>> 27) + r29 | 0;
    r29 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r20] ^ HEAP32[r18] ^ HEAP32[r26] ^ HEAP32[r15];
    r2 = r34 << 1 | r34 >>> 31;
    HEAP32[r18] = r2;
    r34 = r27 - 899497514 + (r29 ^ r32 ^ r31) + (r35 << 5 | r35 >>> 27) + r2 | 0;
    r2 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r21] ^ HEAP32[r19] ^ HEAP32[r6] ^ HEAP32[r16];
    r27 = r31 << 1 | r31 >>> 31;
    HEAP32[r19] = r27;
    r31 = r32 - 899497514 + (r2 ^ r29 ^ r35) + (r34 << 5 | r34 >>> 27) + r27 | 0;
    r27 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r22] ^ HEAP32[r20] ^ HEAP32[r1] ^ HEAP32[r17];
    r32 = r35 << 1 | r35 >>> 31;
    HEAP32[r20] = r32;
    r35 = r29 - 899497514 + (r27 ^ r2 ^ r34) + (r31 << 5 | r31 >>> 27) + r32 | 0;
    r32 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r23] ^ HEAP32[r21] ^ HEAP32[r13] ^ HEAP32[r18];
    r29 = r34 << 1 | r34 >>> 31;
    HEAP32[r21] = r29;
    r34 = r2 - 899497514 + (r32 ^ r27 ^ r31) + (r35 << 5 | r35 >>> 27) + r29 | 0;
    r29 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r24] ^ HEAP32[r22] ^ HEAP32[r14] ^ HEAP32[r19];
    r2 = r31 << 1 | r31 >>> 31;
    HEAP32[r22] = r2;
    r31 = r27 - 899497514 + (r29 ^ r32 ^ r35) + (r34 << 5 | r34 >>> 27) + r2 | 0;
    r2 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r25] ^ HEAP32[r23] ^ HEAP32[r15] ^ HEAP32[r20];
    r27 = r35 << 1 | r35 >>> 31;
    HEAP32[r23] = r27;
    r35 = r32 - 899497514 + (r2 ^ r29 ^ r34) + (r31 << 5 | r31 >>> 27) + r27 | 0;
    r27 = r34 << 30 | r34 >>> 2;
    r34 = HEAP32[r26] ^ HEAP32[r24] ^ HEAP32[r16] ^ HEAP32[r21];
    r32 = r34 << 1 | r34 >>> 31;
    HEAP32[r24] = r32;
    r34 = r29 - 899497514 + (r27 ^ r2 ^ r31) + (r35 << 5 | r35 >>> 27) + r32 | 0;
    r32 = r31 << 30 | r31 >>> 2;
    r31 = HEAP32[r6] ^ HEAP32[r25] ^ HEAP32[r17] ^ HEAP32[r22];
    r29 = r31 << 1 | r31 >>> 31;
    HEAP32[r25] = r29;
    r31 = r2 - 899497514 + (r32 ^ r27 ^ r35) + (r34 << 5 | r34 >>> 27) + r29 | 0;
    r29 = r35 << 30 | r35 >>> 2;
    r35 = HEAP32[r1] ^ HEAP32[r26] ^ HEAP32[r18] ^ HEAP32[r23];
    r2 = r35 << 1 | r35 >>> 31;
    HEAP32[r26] = r2;
    HEAP32[r8] = r27 - 899497514 + (r29 ^ r32 ^ r34) + HEAP32[r8] + (r31 << 5 | r31 >>> 27) + r2 | 0;
    HEAP32[r9] = HEAP32[r9] + r31 | 0;
    HEAP32[r10] = HEAP32[r10] + (r34 << 30 | r34 >>> 2) | 0;
    HEAP32[r11] = HEAP32[r11] + r29 | 0;
    HEAP32[r12] = HEAP32[r12] + r32 | 0;
    r32 = r5 - 1 | 0;
    if ((r32 | 0) == 0) {
      break;
    } else {
      r5 = r32;
      r3 = r3 + 64 | 0;
    }
  }
  STACKTOP = r4;
  return;
}
function _Sum1(r1) {
  return (r1 >>> 6 | r1 << 26) ^ (r1 >>> 11 | r1 << 21) ^ (r1 >>> 25 | r1 << 7);
}
function _Cho(r1, r2, r3) {
  return (r3 ^ r2) & r1 ^ r3;
}
function _Sum0(r1) {
  return (r1 >>> 2 | r1 << 30) ^ (r1 >>> 13 | r1 << 19) ^ (r1 >>> 22 | r1 << 10);
}
function _Maj(r1, r2, r3) {
  return (r2 | r1) & r3 | r2 & r1;
}
function _sha224_init(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP32[r2] = -1056596264;
  HEAP32[r2 + 1] = 914150663;
  HEAP32[r2 + 2] = 812702999;
  HEAP32[r2 + 3] = -150054599;
  HEAP32[r2 + 4] = -4191439;
  HEAP32[r2 + 5] = 1750603025;
  HEAP32[r2 + 6] = 1694076839;
  HEAP32[r2 + 7] = -1090891868;
  HEAP32[r2 + 8] = 0;
  HEAP32[r2 + 25] = 0;
  return;
}
function _sha256_read(r1) {
  return r1 + 36 | 0;
}
function _sha256_init(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP32[r2] = 1779033703;
  HEAP32[r2 + 1] = -1150833019;
  HEAP32[r2 + 2] = 1013904242;
  HEAP32[r2 + 3] = -1521486534;
  HEAP32[r2 + 4] = 1359893119;
  HEAP32[r2 + 5] = -1694144372;
  HEAP32[r2 + 6] = 528734635;
  HEAP32[r2 + 7] = 1541459225;
  HEAP32[r2 + 8] = 0;
  HEAP32[r2 + 25] = 0;
  return;
}
function _sha512_init(r1) {
  var r2;
  r2 = r1;
  HEAP32[r2 >> 2] = -205731576;
  HEAP32[r2 + 4 >> 2] = 1779033703;
  r2 = r1 + 8 | 0;
  HEAP32[r2 >> 2] = -2067093701;
  HEAP32[r2 + 4 >> 2] = -1150833019;
  r2 = r1 + 16 | 0;
  HEAP32[r2 >> 2] = -23791573;
  HEAP32[r2 + 4 >> 2] = 1013904242;
  r2 = r1 + 24 | 0;
  HEAP32[r2 >> 2] = 1595750129;
  HEAP32[r2 + 4 >> 2] = -1521486534;
  r2 = r1 + 32 | 0;
  HEAP32[r2 >> 2] = -1377402159;
  HEAP32[r2 + 4 >> 2] = 1359893119;
  r2 = r1 + 40 | 0;
  HEAP32[r2 >> 2] = 725511199;
  HEAP32[r2 + 4 >> 2] = -1694144372;
  r2 = r1 + 48 | 0;
  HEAP32[r2 >> 2] = -79577749;
  HEAP32[r2 + 4 >> 2] = 528734635;
  r2 = r1 + 56 | 0;
  HEAP32[r2 >> 2] = 327033209;
  HEAP32[r2 + 4 >> 2] = 1541459225;
  r2 = r1 + 64 | 0;
  HEAP32[r2 >> 2] = 0;
  HEAP32[r2 + 4 >> 2] = 0;
  HEAP32[r1 + 200 >> 2] = 0;
  return;
}
function _sha256_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1;
  r6 = (r1 + 100 | 0) >> 2;
  r7 = r1 + 36 | 0;
  r8 = r1 + 32 | 0;
  r9 = r3;
  r3 = r2;
  L3418 : while (1) {
    if ((HEAP32[r6] | 0) == 64) {
      _transform935(r5, r7);
      __gcry_burn_stack(328);
      HEAP32[r6] = 0;
      HEAP32[r8 >> 2] = HEAP32[r8 >> 2] + 1 | 0;
    }
    if ((r3 | 0) == 0) {
      r4 = 2611;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r3;
      break;
    }
    if ((r9 | 0) == 0) {
      r9 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r3;
      r13 = r9;
    }
    while (1) {
      r2 = HEAP32[r6];
      if ((r2 | 0) >= 64) {
        r4 = 2602;
        break L3418;
      }
      r14 = HEAP8[r12];
      HEAP32[r6] = r2 + 1 | 0;
      HEAP8[r2 + (r1 + 36) | 0] = r14;
      r14 = r13 - 1 | 0;
      if ((r14 | 0) == 0) {
        r9 = 0;
        r3 = 0;
        continue L3418;
      } else {
        r12 = r12 + 1 | 0;
        r13 = r14;
      }
    }
  }
  if (r4 == 2602) {
    _sha256_write(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  } else if (r4 == 2611) {
    return;
  }
  L3432 : do {
    if (r10 >>> 0 > 63) {
      r12 = r1 + 32 | 0;
      r13 = r11;
      r3 = r10;
      while (1) {
        _transform935(r5, r13);
        HEAP32[r6] = 0;
        HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
        r9 = r3 - 64 | 0;
        r8 = r13 + 64 | 0;
        if (r9 >>> 0 > 63) {
          r13 = r8;
          r3 = r9;
        } else {
          r15 = r8;
          r16 = r9;
          break L3432;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  __gcry_burn_stack(328);
  if ((r16 | 0) == 0) {
    return;
  } else {
    r17 = r15;
    r18 = r16;
  }
  while (1) {
    r16 = HEAP32[r6];
    if ((r16 | 0) >= 64) {
      r4 = 2613;
      break;
    }
    r15 = HEAP8[r17];
    HEAP32[r6] = r16 + 1 | 0;
    HEAP8[r16 + (r1 + 36) | 0] = r15;
    r15 = r18 - 1 | 0;
    if ((r15 | 0) == 0) {
      r4 = 2614;
      break;
    } else {
      r17 = r17 + 1 | 0;
      r18 = r15;
    }
  }
  if (r4 == 2613) {
    return;
  } else if (r4 == 2614) {
    return;
  }
}
function _sha256_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r2 = r1;
  _sha256_write(r1, 0, 0);
  r3 = HEAP32[r1 + 32 >> 2];
  r4 = (r1 + 100 | 0) >> 2;
  r5 = HEAP32[r4];
  r6 = _llvm_uadd_with_overflow_i32(r3 << 6, r5);
  r7 = (tempRet0 & 1) + (r3 >>> 26) | 0;
  r3 = r6 << 3;
  r8 = r7 << 3 | r6 >>> 29;
  HEAP32[r4] = r5 + 1 | 0;
  r9 = r1 + 36 | 0;
  HEAP8[r5 + (r1 + 36) | 0] = -128;
  r10 = HEAP32[r4];
  L3446 : do {
    if ((r5 | 0) < 56) {
      if ((r10 | 0) < 56) {
        r11 = r10;
      } else {
        break;
      }
      while (1) {
        HEAP32[r4] = r11 + 1 | 0;
        HEAP8[r11 + (r1 + 36) | 0] = 0;
        r12 = HEAP32[r4];
        if ((r12 | 0) < 56) {
          r11 = r12;
        } else {
          break L3446;
        }
      }
    } else {
      L3448 : do {
        if ((r10 | 0) < 64) {
          r12 = r10;
          while (1) {
            HEAP32[r4] = r12 + 1 | 0;
            HEAP8[r12 + (r1 + 36) | 0] = 0;
            r13 = HEAP32[r4];
            if ((r13 | 0) < 64) {
              r12 = r13;
            } else {
              break L3448;
            }
          }
        }
      } while (0);
      _sha256_write(r1, 0, 0);
      _memset(r9, 0, 56);
    }
  } while (0);
  HEAP8[r1 + 92 | 0] = r7 >>> 21 & 255;
  HEAP8[r1 + 93 | 0] = r7 >>> 13 & 255;
  HEAP8[r1 + 94 | 0] = r7 >>> 5 & 255;
  HEAP8[r1 + 95 | 0] = r8 & 255;
  HEAP8[r1 + 96 | 0] = r6 >>> 21 & 255;
  HEAP8[r1 + 97 | 0] = r6 >>> 13 & 255;
  HEAP8[r1 + 98 | 0] = r6 >>> 5 & 255;
  HEAP8[r1 + 99 | 0] = r3 & 255;
  _transform935(r2, r9);
  __gcry_burn_stack(328);
  r2 = r1 >> 2;
  HEAP8[r9] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 37 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 38 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 39 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 4 | 0) >> 2;
  HEAP8[r1 + 40 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 41 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 42 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 43 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 8 | 0) >> 2;
  HEAP8[r1 + 44 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 45 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 46 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 47 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 12 | 0) >> 2;
  HEAP8[r1 + 48 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 49 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 50 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 51 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 16 | 0) >> 2;
  HEAP8[r1 + 52 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 53 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 54 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 55 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 20 | 0) >> 2;
  HEAP8[r1 + 56 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 57 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 58 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 59 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 24 | 0) >> 2;
  HEAP8[r1 + 60 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 61 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 62 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 63 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 28 | 0) >> 2;
  HEAP8[r1 + 64 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 65 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 66 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 67 | 0] = HEAP32[r2] & 255;
  return;
}
function _run_selftests934(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 8) {
    r4 = _selftests_sha256(r2, r3);
  } else if ((r1 | 0) == 11) {
    r4 = _selftests_sha224(r2, r3);
  } else {
    r4 = 5;
  }
  return r4;
}
function _selftests_sha224(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = __gcry_hash_selftest_check_one(11, 0, 471176, 3, 487016, 28);
  do {
    if ((r3 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r4 = 0;
        return r4;
      }
      r5 = __gcry_hash_selftest_check_one(11, 0, 466316, 56, 486136, 28);
      if ((r5 | 0) != 0) {
        r6 = r5;
        r7 = 468212;
        break;
      }
      r5 = __gcry_hash_selftest_check_one(11, 1, 0, 0, 485232, 28);
      if ((r5 | 0) == 0) {
        r4 = 0;
      } else {
        r6 = r5;
        r7 = 490320;
        break;
      }
      return r4;
    } else {
      r6 = r3;
      r7 = 472624;
    }
  } while (0);
  if ((r2 | 0) == 0) {
    r4 = 50;
    return r4;
  }
  FUNCTION_TABLE[r2](487812, 11, r7, r6);
  r4 = 50;
  return r4;
}
function _selftests_sha256(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = __gcry_hash_selftest_check_one(8, 0, 471176, 3, 469876, 32);
  do {
    if ((r3 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r4 = 0;
        return r4;
      }
      r5 = __gcry_hash_selftest_check_one(8, 0, 466316, 56, 465e3, 32);
      if ((r5 | 0) != 0) {
        r6 = r5;
        r7 = 468212;
        break;
      }
      r5 = __gcry_hash_selftest_check_one(8, 1, 0, 0, 488632, 32);
      if ((r5 | 0) == 0) {
        r4 = 0;
      } else {
        r6 = r5;
        r7 = 490320;
        break;
      }
      return r4;
    } else {
      r6 = r3;
      r7 = 472624;
    }
  } while (0);
  if ((r2 | 0) == 0) {
    r4 = 50;
    return r4;
  }
  FUNCTION_TABLE[r2](487812, 8, r7, r6);
  r4 = 50;
  return r4;
}
function _transform935(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r4 = r3;
  r5 = STACKTOP, r6 = r5 >> 2;
  STACKTOP = STACKTOP + 256 | 0;
  r7 = (r1 | 0) >> 2;
  r8 = HEAP32[r7];
  r9 = (r1 + 4 | 0) >> 2;
  r10 = HEAP32[r9];
  r11 = (r1 + 8 | 0) >> 2;
  r12 = HEAP32[r11];
  r13 = (r1 + 12 | 0) >> 2;
  r14 = HEAP32[r13];
  r15 = (r1 + 16 | 0) >> 2;
  r16 = HEAP32[r15];
  r17 = (r1 + 20 | 0) >> 2;
  r18 = HEAP32[r17];
  r19 = (r1 + 24 | 0) >> 2;
  r20 = HEAP32[r19];
  r21 = (r1 + 28 | 0) >> 2;
  r1 = HEAP32[r21];
  r22 = r2;
  r2 = 0;
  r23 = r4;
  while (1) {
    HEAP8[r23 + 3 | 0] = HEAP8[r22];
    HEAP8[r23 + 2 | 0] = HEAP8[r22 + 1 | 0];
    HEAP8[r23 + 1 | 0] = HEAP8[r22 + 2 | 0];
    HEAP8[r23] = HEAP8[r22 + 3 | 0];
    r24 = r2 + 1 | 0;
    if ((r24 | 0) == 16) {
      break;
    } else {
      r22 = r22 + 4 | 0;
      r2 = r24;
      r23 = r23 + 4 | 0;
    }
  }
  _memcpy(r5, r4, 64);
  r4 = 16;
  while (1) {
    r5 = HEAP32[(r4 - 2 << 2 >> 2) + r6];
    r23 = HEAP32[(r4 - 15 << 2 >> 2) + r6];
    HEAP32[(r4 << 2 >> 2) + r6] = HEAP32[(r4 - 16 << 2 >> 2) + r6] + HEAP32[(r4 - 7 << 2 >> 2) + r6] + ((r5 >>> 19 | r5 << 13) ^ r5 >>> 10 ^ (r5 >>> 17 | r5 << 15)) + ((r23 >>> 18 | r23 << 14) ^ r23 >>> 3 ^ (r23 >>> 7 | r23 << 25)) | 0;
    r23 = r4 + 1 | 0;
    if ((r23 | 0) == 64) {
      r25 = r10;
      r26 = r12;
      r27 = r14;
      r28 = r16;
      r29 = r18;
      r30 = r20;
      r31 = r1;
      r32 = r8;
      r33 = 0;
      break;
    } else {
      r4 = r23;
    }
  }
  while (1) {
    r4 = ((_Sum1(r28) + r31 | 0) + _Cho(r28, r29, r30) | 0) + HEAP32[(r33 << 2) + 411296 >> 2] + HEAP32[(r33 << 2 >> 2) + r6] | 0;
    r8 = r4 + r27 | 0;
    r1 = r4 + _Sum0(r32) + _Maj(r32, r25, r26) | 0;
    r4 = r33 | 1;
    r20 = ((_Sum1(r8) + r30 | 0) + _Cho(r8, r28, r29) | 0) + HEAP32[(r4 << 2) + 411296 >> 2] + HEAP32[(r4 << 2 >> 2) + r6] | 0;
    r4 = r20 + r26 | 0;
    r18 = r20 + _Sum0(r1) + _Maj(r1, r32, r25) | 0;
    r20 = r33 | 2;
    r16 = ((_Sum1(r4) + r29 | 0) + _Cho(r4, r8, r28) | 0) + HEAP32[(r20 << 2) + 411296 >> 2] + HEAP32[(r20 << 2 >> 2) + r6] | 0;
    r20 = r16 + r25 | 0;
    r14 = r16 + _Sum0(r18) + _Maj(r18, r1, r32) | 0;
    r16 = r33 | 3;
    r12 = ((_Sum1(r20) + r28 | 0) + _Cho(r20, r4, r8) | 0) + HEAP32[(r16 << 2) + 411296 >> 2] + HEAP32[(r16 << 2 >> 2) + r6] | 0;
    r16 = r12 + r32 | 0;
    r10 = r12 + _Sum0(r14) + _Maj(r14, r18, r1) | 0;
    r12 = r33 | 4;
    r23 = ((_Sum1(r16) + r8 | 0) + _Cho(r16, r20, r4) | 0) + HEAP32[(r12 << 2) + 411296 >> 2] + HEAP32[(r12 << 2 >> 2) + r6] | 0;
    r34 = r23 + r1 | 0;
    r35 = r23 + _Sum0(r10) + _Maj(r10, r14, r18) | 0;
    r23 = r33 | 5;
    r1 = ((_Sum1(r34) + r4 | 0) + _Cho(r34, r16, r20) | 0) + HEAP32[(r23 << 2) + 411296 >> 2] + HEAP32[(r23 << 2 >> 2) + r6] | 0;
    r36 = r1 + r18 | 0;
    r37 = r1 + _Sum0(r35) + _Maj(r35, r10, r14) | 0;
    r1 = r33 | 6;
    r18 = ((_Sum1(r36) + r20 | 0) + _Cho(r36, r34, r16) | 0) + HEAP32[(r1 << 2) + 411296 >> 2] + HEAP32[(r1 << 2 >> 2) + r6] | 0;
    r38 = r18 + r14 | 0;
    r39 = r18 + _Sum0(r37) + _Maj(r37, r35, r10) | 0;
    r18 = r33 | 7;
    r14 = ((_Sum1(r38) + r16 | 0) + _Cho(r38, r36, r34) | 0) + HEAP32[(r18 << 2) + 411296 >> 2] + HEAP32[(r18 << 2 >> 2) + r6] | 0;
    r40 = r14 + r10 | 0;
    r41 = r14 + _Sum0(r39) + _Maj(r39, r37, r35) | 0;
    r14 = r33 + 8 | 0;
    if ((r14 | 0) < 64) {
      r25 = r39;
      r26 = r37;
      r27 = r35;
      r28 = r40;
      r29 = r38;
      r30 = r36;
      r31 = r34;
      r32 = r41;
      r33 = r14;
    } else {
      break;
    }
  }
  HEAP32[r7] = HEAP32[r7] + r41 | 0;
  HEAP32[r9] = HEAP32[r9] + r39 | 0;
  HEAP32[r11] = HEAP32[r11] + r37 | 0;
  HEAP32[r13] = HEAP32[r13] + r35 | 0;
  HEAP32[r15] = HEAP32[r15] + r40 | 0;
  HEAP32[r17] = HEAP32[r17] + r38 | 0;
  HEAP32[r19] = HEAP32[r19] + r36 | 0;
  HEAP32[r21] = HEAP32[r21] + r34 | 0;
  STACKTOP = r3;
  return;
}
function _sha512_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1;
  r6 = (r1 + 200 | 0) >> 2;
  r7 = r1 + 72 | 0;
  r8 = (r1 + 64 | 0) >> 2;
  r9 = r3;
  r3 = r2;
  L3497 : while (1) {
    if ((HEAP32[r6] | 0) == 128) {
      _transform963(r5, r7);
      __gcry_burn_stack(768);
      HEAP32[r6] = 0;
      HEAP32[r8] = _i64Add(HEAP32[r8], HEAP32[r8 + 1], 1, 0);
      HEAP32[r8 + 1] = tempRet0;
    }
    if ((r3 | 0) == 0) {
      r4 = 2670;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r3;
      break;
    }
    if ((r9 | 0) == 0) {
      r9 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r3;
      r13 = r9;
    }
    while (1) {
      r2 = HEAP32[r6];
      if ((r2 | 0) >= 128) {
        r4 = 2661;
        break L3497;
      }
      r14 = HEAP8[r12];
      HEAP32[r6] = r2 + 1 | 0;
      HEAP8[r2 + (r1 + 72) | 0] = r14;
      r14 = r13 - 1 | 0;
      if ((r14 | 0) == 0) {
        r9 = 0;
        r3 = 0;
        continue L3497;
      } else {
        r12 = r12 + 1 | 0;
        r13 = r14;
      }
    }
  }
  if (r4 == 2670) {
    return;
  } else if (r4 == 2661) {
    _sha512_write(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  }
  L3511 : do {
    if (r10 >>> 0 > 127) {
      r12 = (r1 + 64 | 0) >> 2;
      r13 = r11;
      r3 = r10;
      while (1) {
        _transform963(r5, r13);
        HEAP32[r6] = 0;
        HEAP32[r12] = _i64Add(HEAP32[r12], HEAP32[r12 + 1], 1, 0);
        HEAP32[r12 + 1] = tempRet0;
        r9 = r3 - 128 | 0;
        r8 = r13 + 128 | 0;
        if (r9 >>> 0 > 127) {
          r13 = r8;
          r3 = r9;
        } else {
          r15 = r8;
          r16 = r9;
          break L3511;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  __gcry_burn_stack(768);
  if ((r16 | 0) == 0) {
    return;
  } else {
    r17 = r15;
    r18 = r16;
  }
  while (1) {
    r16 = HEAP32[r6];
    if ((r16 | 0) >= 128) {
      r4 = 2672;
      break;
    }
    r15 = HEAP8[r17];
    HEAP32[r6] = r16 + 1 | 0;
    HEAP8[r16 + (r1 + 72) | 0] = r15;
    r15 = r18 - 1 | 0;
    if ((r15 | 0) == 0) {
      r4 = 2673;
      break;
    } else {
      r17 = r17 + 1 | 0;
      r18 = r15;
    }
  }
  if (r4 == 2672) {
    return;
  } else if (r4 == 2673) {
    return;
  }
}
function _ROTR(r1, r2, r3, r4) {
  var r5, r6, r7;
  r5 = _bitshift64Lshr(r1, r2, r3);
  r6 = tempRet0;
  r7 = _bitshift64Shl(r1, r2, (i64Math.subtract(64, 0, r3, r4), HEAP32[tempDoublePtr >> 2]));
  return tempRet0 = tempRet0 | r6, r7 | r5;
}
function _Ch(r1, r2, r3, r4, r5, r6) {
  return tempRet0 = r6 & (r2 ^ -1) ^ r4 & r2, r5 & (r1 ^ -1) ^ r3 & r1;
}
function _Maj966(r1, r2, r3, r4, r5, r6) {
  return tempRet0 = (r6 ^ r4) & r2 ^ r6 & r4, (r5 ^ r3) & r1 ^ r5 & r3;
}
function _sha512_read(r1) {
  return r1 + 72 | 0;
}
function _sha384_init(r1) {
  var r2;
  r2 = r1;
  HEAP32[r2 >> 2] = -1056596264;
  HEAP32[r2 + 4 >> 2] = -876896931;
  r2 = r1 + 8 | 0;
  HEAP32[r2 >> 2] = 914150663;
  HEAP32[r2 + 4 >> 2] = 1654270250;
  r2 = r1 + 16 | 0;
  HEAP32[r2 >> 2] = 812702999;
  HEAP32[r2 + 4 >> 2] = -1856437926;
  r2 = r1 + 24 | 0;
  HEAP32[r2 >> 2] = -150054599;
  HEAP32[r2 + 4 >> 2] = 355462360;
  r2 = r1 + 32 | 0;
  HEAP32[r2 >> 2] = -4191439;
  HEAP32[r2 + 4 >> 2] = 1731405415;
  r2 = r1 + 40 | 0;
  HEAP32[r2 >> 2] = 1750603025;
  HEAP32[r2 + 4 >> 2] = -1900787065;
  r2 = r1 + 48 | 0;
  HEAP32[r2 >> 2] = 1694076839;
  HEAP32[r2 + 4 >> 2] = -619958771;
  r2 = r1 + 56 | 0;
  HEAP32[r2 >> 2] = -1090891868;
  HEAP32[r2 + 4 >> 2] = 1203062813;
  r2 = r1 + 64 | 0;
  HEAP32[r2 >> 2] = 0;
  HEAP32[r2 + 4 >> 2] = 0;
  HEAP32[r1 + 200 >> 2] = 0;
  return;
}
function _sha512_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r2 = r1;
  _sha512_write(r1, 0, 0);
  r3 = r1 + 64 | 0;
  r4 = HEAP32[r3 >> 2];
  r5 = HEAP32[r3 + 4 >> 2];
  r3 = (r1 + 200 | 0) >> 2;
  r6 = HEAP32[r3];
  r7 = _llvm_uadd_with_overflow_i64(r4 << 7 | 0 >>> 25, r5 << 7 | r4 >>> 25, r6, (r6 | 0) < 0 ? -1 : 0);
  r4 = tempRet0;
  r8 = _i64Add(tempRet1 & 1, 0, r5 >>> 25 | 0 << 7, 0 >>> 25 | 0 << 7);
  r5 = tempRet0;
  r9 = r7 << 3 | 0 >>> 29;
  r10 = r8 << 3 | 0 >>> 29 | (r4 >>> 29 | 0 << 3);
  HEAP32[r3] = r6 + 1 | 0;
  r11 = r1 + 72 | 0;
  HEAP8[r6 + (r1 + 72) | 0] = -128;
  r12 = HEAP32[r3];
  L6 : do {
    if ((r6 | 0) < 112) {
      if ((r12 | 0) < 112) {
        r13 = r12;
      } else {
        break;
      }
      while (1) {
        HEAP32[r3] = r13 + 1 | 0;
        HEAP8[r13 + (r1 + 72) | 0] = 0;
        r14 = HEAP32[r3];
        if ((r14 | 0) < 112) {
          r13 = r14;
        } else {
          break L6;
        }
      }
    } else {
      L8 : do {
        if ((r12 | 0) < 128) {
          r14 = r12;
          while (1) {
            HEAP32[r3] = r14 + 1 | 0;
            HEAP8[r14 + (r1 + 72) | 0] = 0;
            r15 = HEAP32[r3];
            if ((r15 | 0) < 128) {
              r14 = r15;
            } else {
              break L8;
            }
          }
        }
      } while (0);
      _sha512_write(r1, 0, 0);
      _memset(r11, 0, 112);
    }
  } while (0);
  HEAP8[r1 + 184 | 0] = (r5 >>> 21 | 0 << 11) & 255;
  HEAP8[r1 + 185 | 0] = (r5 >>> 13 | 0 << 19) & 255;
  HEAP8[r1 + 186 | 0] = (r5 >>> 5 | 0 << 27) & 255;
  HEAP8[r1 + 187 | 0] = (r8 >>> 29 | r5 << 3) & 255;
  HEAP8[r1 + 188 | 0] = (r8 >>> 21 | r5 << 11) & 255;
  HEAP8[r1 + 189 | 0] = (r8 >>> 13 | r5 << 19) & 255;
  HEAP8[r1 + 190 | 0] = (r8 >>> 5 | r5 << 27) & 255;
  HEAP8[r1 + 191 | 0] = r10 & 255;
  HEAP8[r1 + 192 | 0] = (r4 >>> 21 | 0 << 11) & 255;
  HEAP8[r1 + 193 | 0] = (r4 >>> 13 | 0 << 19) & 255;
  HEAP8[r1 + 194 | 0] = (r4 >>> 5 | 0 << 27) & 255;
  HEAP8[r1 + 195 | 0] = (r7 >>> 29 | r4 << 3) & 255;
  HEAP8[r1 + 196 | 0] = (r7 >>> 21 | r4 << 11) & 255;
  HEAP8[r1 + 197 | 0] = (r7 >>> 13 | r4 << 19) & 255;
  HEAP8[r1 + 198 | 0] = (r7 >>> 5 | r4 << 27) & 255;
  HEAP8[r1 + 199 | 0] = r9 & 255;
  _transform963(r2, r11);
  __gcry_burn_stack(768);
  r2 = r1 >> 2;
  HEAP8[r11] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 73 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 74 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 75 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 76 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 77 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 78 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 79 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 8 | 0) >> 2;
  HEAP8[r1 + 80 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 81 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 82 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 83 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 84 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 85 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 86 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 87 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 16 | 0) >> 2;
  HEAP8[r1 + 88 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 89 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 90 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 91 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 92 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 93 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 94 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 95 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 24 | 0) >> 2;
  HEAP8[r1 + 96 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 97 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 98 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 99 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 100 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 101 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 102 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 103 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 32 | 0) >> 2;
  HEAP8[r1 + 104 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 105 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 106 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 107 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 108 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 109 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 110 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 111 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 40 | 0) >> 2;
  HEAP8[r1 + 112 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 113 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 114 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 115 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 116 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 117 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 118 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 119 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 48 | 0) >> 2;
  HEAP8[r1 + 120 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 121 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 122 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 123 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 124 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 125 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 126 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 127 | 0] = HEAP32[r2] & 255;
  r2 = (r1 + 56 | 0) >> 2;
  HEAP8[r1 + 128 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[r1 + 129 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[r1 + 130 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[r1 + 131 | 0] = HEAP32[r2 + 1] & 255;
  HEAP8[r1 + 132 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
  HEAP8[r1 + 133 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
  HEAP8[r1 + 134 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
  HEAP8[r1 + 135 | 0] = HEAP32[r2] & 255;
  return;
}
function _run_selftests962(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 9) {
    r4 = _selftests_sha384(r2, r3);
  } else if ((r1 | 0) == 10) {
    r4 = _selftests_sha512(r2, r3);
  } else {
    r4 = 5;
  }
  return r4;
}
function _selftests_sha384(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = __gcry_hash_selftest_check_one(9, 0, 471172, 3, 486964, 48);
  do {
    if ((r3 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r4 = 0;
        return r4;
      }
      r5 = __gcry_hash_selftest_check_one(9, 0, 466200, 112, 486084, 48);
      if ((r5 | 0) != 0) {
        r6 = r5;
        r7 = 468200;
        break;
      }
      r5 = __gcry_hash_selftest_check_one(9, 1, 0, 0, 485180, 48);
      if ((r5 | 0) == 0) {
        r4 = 0;
      } else {
        r6 = r5;
        r7 = 490304;
        break;
      }
      return r4;
    } else {
      r6 = r3;
      r7 = 472608;
    }
  } while (0);
  if ((r2 | 0) == 0) {
    r4 = 50;
    return r4;
  }
  FUNCTION_TABLE[r2](487804, 9, r7, r6);
  r4 = 50;
  return r4;
}
function _selftests_sha512(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = __gcry_hash_selftest_check_one(10, 0, 471172, 3, 469808, 64);
  do {
    if ((r3 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r4 = 0;
        return r4;
      }
      r5 = __gcry_hash_selftest_check_one(10, 0, 466200, 112, 464932, 64);
      if ((r5 | 0) != 0) {
        r6 = r5;
        r7 = 468200;
        break;
      }
      r5 = __gcry_hash_selftest_check_one(10, 1, 0, 0, 488564, 64);
      if ((r5 | 0) == 0) {
        r4 = 0;
      } else {
        r6 = r5;
        r7 = 490304;
        break;
      }
      return r4;
    } else {
      r6 = r3;
      r7 = 472608;
    }
  } while (0);
  if ((r2 | 0) == 0) {
    r4 = 50;
    return r4;
  }
  FUNCTION_TABLE[r2](487804, 10, r7, r6);
  r4 = 50;
  return r4;
}
function _transform963(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 640 | 0;
  r4 = r3;
  r5 = (r1 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = HEAP32[r5 + 1];
  r8 = (r1 + 8 | 0) >> 2;
  r9 = HEAP32[r8];
  r10 = HEAP32[r8 + 1];
  r11 = (r1 + 16 | 0) >> 2;
  r12 = HEAP32[r11];
  r13 = HEAP32[r11 + 1];
  r14 = (r1 + 24 | 0) >> 2;
  r15 = HEAP32[r14];
  r16 = HEAP32[r14 + 1];
  r17 = (r1 + 32 | 0) >> 2;
  r18 = HEAP32[r17];
  r19 = HEAP32[r17 + 1];
  r20 = (r1 + 40 | 0) >> 2;
  r21 = HEAP32[r20];
  r22 = HEAP32[r20 + 1];
  r23 = (r1 + 48 | 0) >> 2;
  r24 = HEAP32[r23];
  r25 = HEAP32[r23 + 1];
  r26 = (r1 + 56 | 0) >> 2;
  r1 = HEAP32[r26];
  r27 = HEAP32[r26 + 1];
  r28 = 0;
  r29 = r4;
  r30 = r2;
  while (1) {
    HEAP8[r29 + 7 | 0] = HEAP8[r30];
    HEAP8[r29 + 6 | 0] = HEAP8[r30 + 1 | 0];
    HEAP8[r29 + 5 | 0] = HEAP8[r30 + 2 | 0];
    HEAP8[r29 + 4 | 0] = HEAP8[r30 + 3 | 0];
    HEAP8[r29 + 3 | 0] = HEAP8[r30 + 4 | 0];
    HEAP8[r29 + 2 | 0] = HEAP8[r30 + 5 | 0];
    HEAP8[r29 + 1 | 0] = HEAP8[r30 + 6 | 0];
    HEAP8[r29] = HEAP8[r30 + 7 | 0];
    r2 = r28 + 1 | 0;
    if ((r2 | 0) == 16) {
      r31 = 16;
      break;
    } else {
      r28 = r2;
      r29 = r29 + 8 | 0;
      r30 = r30 + 8 | 0;
    }
  }
  while (1) {
    r30 = (r31 - 2 << 3) + r4 | 0;
    r29 = HEAP32[r30 >> 2];
    r28 = HEAP32[r30 + 4 >> 2];
    r30 = _ROTR(r29, r28, 19, 0);
    r2 = tempRet0;
    r32 = (r31 - 7 << 3) + r4 | 0;
    r33 = _i64Add(_ROTR(r29, r28, 61, 0) ^ ((r29 >>> 6 | r28 << 26) ^ r30), (r28 >>> 6 | 0 << 26) ^ r2 ^ tempRet0, HEAP32[r32 >> 2], HEAP32[r32 + 4 >> 2]);
    r32 = tempRet0;
    r2 = (r31 - 15 << 3) + r4 | 0;
    r28 = HEAP32[r2 >> 2];
    r30 = HEAP32[r2 + 4 >> 2];
    r2 = _ROTR(r28, r30, 1, 0);
    r29 = tempRet0;
    r34 = (r31 - 16 << 3) + r4 | 0;
    r35 = (r31 << 3) + r4 | 0;
    HEAP32[r35 >> 2] = _i64Add(_i64Add(r33, r32, _ROTR(r28, r30, 8, 0) ^ ((r28 >>> 7 | r30 << 25) ^ r2), (r30 >>> 7 | 0 << 25) ^ r29 ^ tempRet0), tempRet0, HEAP32[r34 >> 2], HEAP32[r34 + 4 >> 2]);
    HEAP32[r35 + 4 >> 2] = tempRet0;
    r35 = r31 + 1 | 0;
    if ((r35 | 0) == 80) {
      r36 = r10;
      r37 = r9;
      r38 = r13;
      r39 = r12;
      r40 = r16;
      r41 = r15;
      r42 = r19;
      r43 = r18;
      r44 = r22;
      r45 = r21;
      r46 = r25;
      r47 = r24;
      r48 = r27;
      r49 = r1;
      r50 = 0;
      r51 = r7;
      r52 = r6;
      break;
    } else {
      r31 = r35;
    }
  }
  while (1) {
    r31 = _i64Add(_Sum1964(r43, r42), tempRet0, r49, r48);
    r6 = tempRet0;
    r7 = (r50 << 3) + 410400 | 0;
    r1 = (r50 << 3) + r4 | 0;
    r27 = _i64Add(_i64Add(_i64Add(r31, r6, _Ch(r43, r42, r45, r44, r47, r46), tempRet0), tempRet0, HEAP32[r7 >> 2], HEAP32[r7 + 4 >> 2]), tempRet0, HEAP32[r1 >> 2], HEAP32[r1 + 4 >> 2]);
    r1 = tempRet0;
    r7 = _Sum0965(r52, r51);
    r6 = tempRet0;
    r31 = _Maj966(r52, r51, r37, r36, r39, r38);
    r24 = tempRet0;
    r25 = _i64Add(r27, r1, r41, r40);
    r21 = tempRet0;
    r22 = _i64Add(_i64Add(r27, r1, r7, r6), tempRet0, r31, r24);
    r24 = tempRet0;
    r31 = _i64Add(_Sum1964(r25, r21), tempRet0, r47, r46);
    r6 = tempRet0;
    r7 = r50 | 1;
    r1 = (r7 << 3) + 410400 | 0;
    r27 = (r7 << 3) + r4 | 0;
    r7 = _i64Add(_i64Add(_i64Add(r31, r6, _Ch(r25, r21, r43, r42, r45, r44), tempRet0), tempRet0, HEAP32[r1 >> 2], HEAP32[r1 + 4 >> 2]), tempRet0, HEAP32[r27 >> 2], HEAP32[r27 + 4 >> 2]);
    r27 = tempRet0;
    r1 = _Sum0965(r22, r24);
    r6 = tempRet0;
    r31 = _Maj966(r22, r24, r52, r51, r37, r36);
    r18 = tempRet0;
    r19 = _i64Add(r7, r27, r39, r38);
    r15 = tempRet0;
    r16 = _i64Add(_i64Add(r7, r27, r1, r6), tempRet0, r31, r18);
    r18 = tempRet0;
    r31 = _i64Add(_Sum1964(r19, r15), tempRet0, r45, r44);
    r6 = tempRet0;
    r1 = r50 | 2;
    r27 = (r1 << 3) + 410400 | 0;
    r7 = (r1 << 3) + r4 | 0;
    r1 = _i64Add(_i64Add(_i64Add(r31, r6, _Ch(r19, r15, r25, r21, r43, r42), tempRet0), tempRet0, HEAP32[r27 >> 2], HEAP32[r27 + 4 >> 2]), tempRet0, HEAP32[r7 >> 2], HEAP32[r7 + 4 >> 2]);
    r7 = tempRet0;
    r27 = _Sum0965(r16, r18);
    r6 = tempRet0;
    r31 = _Maj966(r16, r18, r22, r24, r52, r51);
    r12 = tempRet0;
    r13 = _i64Add(r1, r7, r37, r36);
    r9 = tempRet0;
    r10 = _i64Add(_i64Add(r1, r7, r27, r6), tempRet0, r31, r12);
    r12 = tempRet0;
    r31 = _i64Add(_Sum1964(r13, r9), tempRet0, r43, r42);
    r6 = tempRet0;
    r27 = r50 | 3;
    r7 = (r27 << 3) + 410400 | 0;
    r1 = (r27 << 3) + r4 | 0;
    r27 = _i64Add(_i64Add(_i64Add(r31, r6, _Ch(r13, r9, r19, r15, r25, r21), tempRet0), tempRet0, HEAP32[r7 >> 2], HEAP32[r7 + 4 >> 2]), tempRet0, HEAP32[r1 >> 2], HEAP32[r1 + 4 >> 2]);
    r1 = tempRet0;
    r7 = _Sum0965(r10, r12);
    r6 = tempRet0;
    r31 = _Maj966(r10, r12, r16, r18, r22, r24);
    r35 = tempRet0;
    r34 = _i64Add(r27, r1, r52, r51);
    r29 = tempRet0;
    r30 = _i64Add(_i64Add(r27, r1, r7, r6), tempRet0, r31, r35);
    r35 = tempRet0;
    r31 = _i64Add(_Sum1964(r34, r29), tempRet0, r25, r21);
    r21 = tempRet0;
    r25 = r50 | 4;
    r6 = (r25 << 3) + 410400 | 0;
    r7 = (r25 << 3) + r4 | 0;
    r25 = _i64Add(_i64Add(_i64Add(r31, r21, _Ch(r34, r29, r13, r9, r19, r15), tempRet0), tempRet0, HEAP32[r6 >> 2], HEAP32[r6 + 4 >> 2]), tempRet0, HEAP32[r7 >> 2], HEAP32[r7 + 4 >> 2]);
    r7 = tempRet0;
    r6 = _Sum0965(r30, r35);
    r21 = tempRet0;
    r31 = _Maj966(r30, r35, r10, r12, r16, r18);
    r1 = tempRet0;
    r53 = _i64Add(r25, r7, r22, r24);
    r54 = tempRet0;
    r55 = _i64Add(_i64Add(r25, r7, r6, r21), tempRet0, r31, r1);
    r56 = tempRet0;
    r1 = _i64Add(_Sum1964(r53, r54), tempRet0, r19, r15);
    r15 = tempRet0;
    r19 = r50 | 5;
    r31 = (r19 << 3) + 410400 | 0;
    r21 = (r19 << 3) + r4 | 0;
    r19 = _i64Add(_i64Add(_i64Add(r1, r15, _Ch(r53, r54, r34, r29, r13, r9), tempRet0), tempRet0, HEAP32[r31 >> 2], HEAP32[r31 + 4 >> 2]), tempRet0, HEAP32[r21 >> 2], HEAP32[r21 + 4 >> 2]);
    r21 = tempRet0;
    r31 = _Sum0965(r55, r56);
    r15 = tempRet0;
    r1 = _Maj966(r55, r56, r30, r35, r10, r12);
    r6 = tempRet0;
    r57 = _i64Add(r19, r21, r16, r18);
    r58 = tempRet0;
    r59 = _i64Add(_i64Add(r19, r21, r31, r15), tempRet0, r1, r6);
    r60 = tempRet0;
    r6 = _i64Add(_Sum1964(r57, r58), tempRet0, r13, r9);
    r9 = tempRet0;
    r13 = r50 | 6;
    r1 = (r13 << 3) + 410400 | 0;
    r15 = (r13 << 3) + r4 | 0;
    r13 = _i64Add(_i64Add(_i64Add(r6, r9, _Ch(r57, r58, r53, r54, r34, r29), tempRet0), tempRet0, HEAP32[r1 >> 2], HEAP32[r1 + 4 >> 2]), tempRet0, HEAP32[r15 >> 2], HEAP32[r15 + 4 >> 2]);
    r15 = tempRet0;
    r1 = _Sum0965(r59, r60);
    r9 = tempRet0;
    r6 = _Maj966(r59, r60, r55, r56, r30, r35);
    r31 = tempRet0;
    r61 = _i64Add(r13, r15, r10, r12);
    r62 = tempRet0;
    r63 = _i64Add(_i64Add(r13, r15, r1, r9), tempRet0, r6, r31);
    r64 = tempRet0;
    r31 = _i64Add(_Sum1964(r61, r62), tempRet0, r34, r29);
    r29 = tempRet0;
    r34 = r50 | 7;
    r6 = (r34 << 3) + 410400 | 0;
    r9 = (r34 << 3) + r4 | 0;
    r34 = _i64Add(_i64Add(_i64Add(r31, r29, _Ch(r61, r62, r57, r58, r53, r54), tempRet0), tempRet0, HEAP32[r6 >> 2], HEAP32[r6 + 4 >> 2]), tempRet0, HEAP32[r9 >> 2], HEAP32[r9 + 4 >> 2]);
    r9 = tempRet0;
    r6 = _Sum0965(r63, r64);
    r29 = tempRet0;
    r31 = _Maj966(r63, r64, r59, r60, r55, r56);
    r1 = tempRet0;
    r65 = _i64Add(r34, r9, r30, r35);
    r66 = tempRet0;
    r67 = _i64Add(_i64Add(r34, r9, r6, r29), tempRet0, r31, r1);
    r68 = tempRet0;
    r1 = r50 + 8 | 0;
    if ((r1 | 0) < 80) {
      r36 = r64;
      r37 = r63;
      r38 = r60;
      r39 = r59;
      r40 = r56;
      r41 = r55;
      r42 = r66;
      r43 = r65;
      r44 = r62;
      r45 = r61;
      r46 = r58;
      r47 = r57;
      r48 = r54;
      r49 = r53;
      r50 = r1;
      r51 = r68;
      r52 = r67;
    } else {
      break;
    }
  }
  HEAP32[r5] = _i64Add(HEAP32[r5], HEAP32[r5 + 1], r67, r68);
  HEAP32[r5 + 1] = tempRet0;
  HEAP32[r8] = _i64Add(HEAP32[r8], HEAP32[r8 + 1], r63, r64);
  HEAP32[r8 + 1] = tempRet0;
  HEAP32[r11] = _i64Add(HEAP32[r11], HEAP32[r11 + 1], r59, r60);
  HEAP32[r11 + 1] = tempRet0;
  HEAP32[r14] = _i64Add(HEAP32[r14], HEAP32[r14 + 1], r55, r56);
  HEAP32[r14 + 1] = tempRet0;
  HEAP32[r17] = _i64Add(HEAP32[r17], HEAP32[r17 + 1], r65, r66);
  HEAP32[r17 + 1] = tempRet0;
  HEAP32[r20] = _i64Add(HEAP32[r20], HEAP32[r20 + 1], r61, r62);
  HEAP32[r20 + 1] = tempRet0;
  HEAP32[r23] = _i64Add(HEAP32[r23], HEAP32[r23 + 1], r57, r58);
  HEAP32[r23 + 1] = tempRet0;
  HEAP32[r26] = _i64Add(HEAP32[r26], HEAP32[r26 + 1], r53, r54);
  HEAP32[r26 + 1] = tempRet0;
  STACKTOP = r3;
  return;
}
function _Sum1964(r1, r2) {
  var r3, r4, r5, r6;
  r3 = _ROTR(r1, r2, 14, 0);
  r4 = tempRet0;
  r5 = _ROTR(r1, r2, 18, 0);
  r6 = tempRet0 ^ r4;
  r4 = _ROTR(r1, r2, 41, 0);
  return tempRet0 = r6 ^ tempRet0, r5 ^ r3 ^ r4;
}
function _Sum0965(r1, r2) {
  var r3, r4, r5, r6;
  r3 = _ROTR(r1, r2, 28, 0);
  r4 = tempRet0;
  r5 = _ROTR(r1, r2, 34, 0);
  r6 = tempRet0 ^ r4;
  r4 = _ROTR(r1, r2, 39, 0);
  return tempRet0 = r6 ^ tempRet0, r5 ^ r3 ^ r4;
}
function _tiger_init(r1) {
  _do_init(r1, 0);
  return;
}
function _tiger_write(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1;
  r6 = (r1 + 88 | 0) >> 2;
  r7 = r1 + 24 | 0;
  r8 = r1 + 92 | 0;
  r9 = r3;
  r3 = r2;
  L59 : while (1) {
    if ((HEAP32[r6] | 0) == 64) {
      _transform981(r5, r7);
      __gcry_burn_stack(212);
      HEAP32[r6] = 0;
      HEAP32[r8 >> 2] = HEAP32[r8 >> 2] + 1 | 0;
    }
    if ((r3 | 0) == 0) {
      r4 = 63;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r3;
      break;
    }
    if ((r9 | 0) == 0) {
      r9 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r3;
      r13 = r9;
    }
    while (1) {
      r2 = HEAP32[r6];
      if ((r2 | 0) >= 64) {
        r4 = 54;
        break L59;
      }
      r14 = HEAP8[r12];
      HEAP32[r6] = r2 + 1 | 0;
      HEAP8[r2 + (r1 + 24) | 0] = r14;
      r14 = r13 - 1 | 0;
      if ((r14 | 0) == 0) {
        r9 = 0;
        r3 = 0;
        continue L59;
      } else {
        r12 = r12 + 1 | 0;
        r13 = r14;
      }
    }
  }
  if (r4 == 54) {
    _tiger_write(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  } else if (r4 == 63) {
    return;
  }
  L73 : do {
    if (r10 >>> 0 > 63) {
      r12 = r1 + 92 | 0;
      r13 = r11;
      r3 = r10;
      while (1) {
        _transform981(r5, r13);
        HEAP32[r6] = 0;
        HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
        r9 = r3 - 64 | 0;
        r8 = r13 + 64 | 0;
        if (r9 >>> 0 > 63) {
          r13 = r8;
          r3 = r9;
        } else {
          r15 = r8;
          r16 = r9;
          break L73;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  __gcry_burn_stack(212);
  if ((r16 | 0) == 0) {
    return;
  } else {
    r17 = r15;
    r18 = r16;
  }
  while (1) {
    r16 = HEAP32[r6];
    if ((r16 | 0) >= 64) {
      r4 = 65;
      break;
    }
    r15 = HEAP8[r17];
    HEAP32[r6] = r16 + 1 | 0;
    HEAP8[r16 + (r1 + 24) | 0] = r15;
    r15 = r18 - 1 | 0;
    if ((r15 | 0) == 0) {
      r4 = 66;
      break;
    } else {
      r17 = r17 + 1 | 0;
      r18 = r15;
    }
  }
  if (r4 == 65) {
    return;
  } else if (r4 == 66) {
    return;
  }
}
function _tiger_read(r1) {
  return r1 + 24 | 0;
}
function _do_init(r1, r2) {
  var r3;
  r3 = r1;
  HEAP32[r3 >> 2] = -1985229329;
  HEAP32[r3 + 4 >> 2] = 19088743;
  r3 = r1 + 8 | 0;
  HEAP32[r3 >> 2] = 1985229328;
  HEAP32[r3 + 4 >> 2] = -19088744;
  r3 = r1 + 16 | 0;
  HEAP32[r3 >> 2] = -1011687033;
  HEAP32[r3 + 4 >> 2] = -258562636;
  HEAP32[r1 + 92 >> 2] = 0;
  HEAP32[r1 + 88 >> 2] = 0;
  HEAP32[r1 + 96 >> 2] = r2;
  return;
}
function _key_schedule(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r2 = r1 >> 2;
  r3 = (r1 + 56 | 0) >> 2;
  r4 = (i64Math.subtract(HEAP32[r2], HEAP32[r2 + 1], HEAP32[r3] ^ -1515870811, HEAP32[r3 + 1] ^ -1515870811), HEAP32[tempDoublePtr >> 2]);
  r5 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r2] = r4;
  HEAP32[r2 + 1] = r5;
  r6 = (r1 + 8 | 0) >> 2;
  r7 = HEAP32[r6] ^ r4;
  r4 = HEAP32[r6 + 1] ^ r5;
  HEAP32[r6] = r7;
  HEAP32[r6 + 1] = r4;
  r5 = (r1 + 16 | 0) >> 2;
  r8 = _i64Add(HEAP32[r5], HEAP32[r5 + 1], r7, r4);
  r4 = tempRet0;
  HEAP32[r5] = r8;
  HEAP32[r5 + 1] = r4;
  r7 = HEAP32[r6];
  r9 = (r1 + 24 | 0) >> 2;
  r10 = (i64Math.subtract(HEAP32[r9], HEAP32[r9 + 1], r8 ^ -524288 ^ (r7 << 19 | 0 >>> 13), r4 ^ -1 ^ (HEAP32[r6 + 1] << 19 | r7 >>> 13)), HEAP32[tempDoublePtr >> 2]);
  r7 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r9] = r10;
  HEAP32[r9 + 1] = r7;
  r4 = (r1 + 32 | 0) >> 2;
  r8 = r10 ^ HEAP32[r4];
  r10 = r7 ^ HEAP32[r4 + 1];
  HEAP32[r4] = r8;
  HEAP32[r4 + 1] = r10;
  r7 = (r1 + 40 | 0) >> 2;
  r11 = _i64Add(r8, r10, HEAP32[r7], HEAP32[r7 + 1]);
  r10 = tempRet0;
  HEAP32[r7] = r11;
  HEAP32[r7 + 1] = r10;
  r8 = HEAP32[r4 + 1];
  r12 = (r1 + 48 | 0) >> 2;
  r1 = (i64Math.subtract(HEAP32[r12], HEAP32[r12 + 1], (HEAP32[r4] >>> 23 | r8 << 9) ^ -1 ^ r11, (r8 >>> 23 | 0 << 9) ^ 511 ^ r10), HEAP32[tempDoublePtr >> 2]);
  r10 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r12] = r1;
  HEAP32[r12 + 1] = r10;
  r8 = r1 ^ HEAP32[r3];
  r1 = r10 ^ HEAP32[r3 + 1];
  HEAP32[r3] = r8;
  HEAP32[r3 + 1] = r1;
  r10 = _i64Add(r8, r1, HEAP32[r2], HEAP32[r2 + 1]);
  r1 = tempRet0;
  HEAP32[r2] = r10;
  HEAP32[r2 + 1] = r1;
  r2 = HEAP32[r3];
  r8 = (i64Math.subtract(HEAP32[r6], HEAP32[r6 + 1], (r2 << 19 | 0 >>> 13) ^ -524288 ^ r10, (HEAP32[r3 + 1] << 19 | r2 >>> 13) ^ -1 ^ r1), HEAP32[tempDoublePtr >> 2]);
  r1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r6] = r8;
  HEAP32[r6 + 1] = r1;
  r6 = r8 ^ HEAP32[r5];
  r8 = r1 ^ HEAP32[r5 + 1];
  HEAP32[r5] = r6;
  HEAP32[r5 + 1] = r8;
  r1 = _i64Add(r6, r8, HEAP32[r9], HEAP32[r9 + 1]);
  r8 = tempRet0;
  HEAP32[r9] = r1;
  HEAP32[r9 + 1] = r8;
  r9 = HEAP32[r5 + 1];
  r6 = (i64Math.subtract(HEAP32[r4], HEAP32[r4 + 1], (HEAP32[r5] >>> 23 | r9 << 9) ^ -1 ^ r1, (r9 >>> 23 | 0 << 9) ^ 511 ^ r8), HEAP32[tempDoublePtr >> 2]);
  r8 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r4] = r6;
  HEAP32[r4 + 1] = r8;
  r4 = r6 ^ HEAP32[r7];
  r6 = r8 ^ HEAP32[r7 + 1];
  HEAP32[r7] = r4;
  HEAP32[r7 + 1] = r6;
  r7 = _i64Add(r4, r6, HEAP32[r12], HEAP32[r12 + 1]);
  r6 = tempRet0;
  HEAP32[r12] = r7;
  HEAP32[r12 + 1] = r6;
  r12 = (i64Math.subtract(HEAP32[r3], HEAP32[r3 + 1], r7 ^ -1985229329, r6 ^ 19088743), HEAP32[tempDoublePtr >> 2]);
  r6 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r3] = r12;
  HEAP32[r3 + 1] = r6;
  return;
}
function _tiger_round(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r7 = HEAP32[r2 >> 2];
  r8 = HEAP32[r2 + 4 >> 2];
  r9 = HEAP32[r3 >> 2] ^ r4;
  r4 = HEAP32[r3 + 4 >> 2] ^ r5;
  r5 = ((r9 & 255) << 3) + 424860 | 0;
  r10 = (((r9 >>> 16 | r4 << 16) & 255) << 3) + 422556 | 0;
  r11 = ((r4 & 255) << 3) + 420252 | 0;
  r12 = (((r4 >>> 16 | 0 << 16) & 255) << 3) + 417948 | 0;
  r13 = (i64Math.subtract(HEAP32[r1 >> 2], HEAP32[r1 + 4 >> 2], HEAP32[r10 >> 2] ^ HEAP32[r5 >> 2] ^ HEAP32[r11 >> 2] ^ HEAP32[r12 >> 2], HEAP32[r10 + 4 >> 2] ^ HEAP32[r5 + 4 >> 2] ^ HEAP32[r11 + 4 >> 2] ^ HEAP32[r12 + 4 >> 2]), HEAP32[tempDoublePtr >> 2]);
  r12 = HEAP32[tempDoublePtr + 4 >> 2];
  r11 = (((r9 >>> 8 | r4 << 24) & 255) << 3) + 417948 | 0;
  r5 = (((r9 >>> 24 | r4 << 8) & 255) << 3) + 420252 | 0;
  r10 = (((r4 >>> 8 | 0 << 24) & 255) << 3) + 422556 | 0;
  r14 = ((r4 >>> 24 | 0 << 8) << 3) + 424860 | 0;
  r15 = (i64Math.multiply(_i64Add(HEAP32[r5 >> 2] ^ HEAP32[r11 >> 2] ^ HEAP32[r10 >> 2] ^ HEAP32[r14 >> 2], HEAP32[r5 + 4 >> 2] ^ HEAP32[r11 + 4 >> 2] ^ HEAP32[r10 + 4 >> 2] ^ HEAP32[r14 + 4 >> 2], r7, r8), tempRet0, r6, (r6 | 0) < 0 ? -1 : 0), HEAP32[tempDoublePtr >> 2]);
  r6 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r1 >> 2] = r13;
  HEAP32[r1 + 4 >> 2] = r12;
  HEAP32[r2 >> 2] = r15;
  HEAP32[r2 + 4 >> 2] = r6;
  HEAP32[r3 >> 2] = r9;
  HEAP32[r3 + 4 >> 2] = r4;
  return;
}
function _tiger_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r2 = r1;
  r3 = r1 + 96 | 0;
  r4 = (HEAP32[r3 >> 2] | 0) == 2 ? -128 : 1;
  _tiger_write(r1, 0, 0);
  r5 = HEAP32[r1 + 92 >> 2];
  r6 = (r1 + 88 | 0) >> 2;
  r7 = HEAP32[r6];
  r8 = _llvm_uadd_with_overflow_i32(r5 << 6, r7);
  r9 = (tempRet0 & 1) + (r5 >>> 26) | 0;
  r5 = r8 << 3;
  r10 = r9 << 3 | r8 >>> 29;
  HEAP32[r6] = r7 + 1 | 0;
  r11 = r1 + 24 | 0;
  HEAP8[r7 + (r1 + 24) | 0] = r4;
  r4 = HEAP32[r6];
  L91 : do {
    if ((r7 | 0) < 56) {
      if ((r4 | 0) < 56) {
        r12 = r4;
      } else {
        break;
      }
      while (1) {
        HEAP32[r6] = r12 + 1 | 0;
        HEAP8[r12 + (r1 + 24) | 0] = 0;
        r13 = HEAP32[r6];
        if ((r13 | 0) < 56) {
          r12 = r13;
        } else {
          break L91;
        }
      }
    } else {
      L96 : do {
        if ((r4 | 0) < 64) {
          r13 = r4;
          while (1) {
            HEAP32[r6] = r13 + 1 | 0;
            HEAP8[r13 + (r1 + 24) | 0] = 0;
            r14 = HEAP32[r6];
            if ((r14 | 0) < 64) {
              r13 = r14;
            } else {
              break L96;
            }
          }
        }
      } while (0);
      _tiger_write(r1, 0, 0);
      _memset(r11, 0, 56);
    }
  } while (0);
  HEAP8[r1 + 80 | 0] = r5 & 255;
  HEAP8[r1 + 81 | 0] = r8 >>> 5 & 255;
  HEAP8[r1 + 82 | 0] = r8 >>> 13 & 255;
  HEAP8[r1 + 83 | 0] = r8 >>> 21 & 255;
  HEAP8[r1 + 84 | 0] = r10 & 255;
  HEAP8[r1 + 85 | 0] = r9 >>> 5 & 255;
  HEAP8[r1 + 86 | 0] = r9 >>> 13 & 255;
  HEAP8[r1 + 87 | 0] = r9 >>> 21 & 255;
  _transform981(r2, r11);
  __gcry_burn_stack(212);
  r2 = r1 >> 2;
  r9 = HEAP32[r2];
  if ((HEAP32[r3 >> 2] | 0) == 0) {
    HEAP8[r11] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
    HEAP8[r1 + 25 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[r1 + 26 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[r1 + 27 | 0] = HEAP32[r2 + 1] & 255;
    HEAP8[r1 + 28 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
    HEAP8[r1 + 29 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
    HEAP8[r1 + 30 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
    HEAP8[r1 + 31 | 0] = HEAP32[r2] & 255;
    r3 = (r1 + 8 | 0) >> 2;
    HEAP8[r1 + 32 | 0] = (HEAP32[r3 + 1] >>> 24 | 0 << 8) & 255;
    HEAP8[r1 + 33 | 0] = (HEAP32[r3 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[r1 + 34 | 0] = (HEAP32[r3 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[r1 + 35 | 0] = HEAP32[r3 + 1] & 255;
    HEAP8[r1 + 36 | 0] = (HEAP32[r3] >>> 24 | HEAP32[r3 + 1] << 8) & 255;
    HEAP8[r1 + 37 | 0] = (HEAP32[r3] >>> 16 | HEAP32[r3 + 1] << 16) & 255;
    HEAP8[r1 + 38 | 0] = (HEAP32[r3] >>> 8 | HEAP32[r3 + 1] << 24) & 255;
    HEAP8[r1 + 39 | 0] = HEAP32[r3] & 255;
    r3 = (r1 + 16 | 0) >> 2;
    HEAP8[r1 + 40 | 0] = (HEAP32[r3 + 1] >>> 24 | 0 << 8) & 255;
    HEAP8[r1 + 41 | 0] = (HEAP32[r3 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[r1 + 42 | 0] = (HEAP32[r3 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[r1 + 43 | 0] = HEAP32[r3 + 1] & 255;
    HEAP8[r1 + 44 | 0] = (HEAP32[r3] >>> 24 | HEAP32[r3 + 1] << 8) & 255;
    HEAP8[r1 + 45 | 0] = (HEAP32[r3] >>> 16 | HEAP32[r3 + 1] << 16) & 255;
    HEAP8[r1 + 46 | 0] = (HEAP32[r3] >>> 8 | HEAP32[r3 + 1] << 24) & 255;
    HEAP8[r1 + 47 | 0] = HEAP32[r3] & 255;
    return;
  } else {
    HEAP8[r11] = r9 & 255;
    HEAP8[r1 + 25 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
    HEAP8[r1 + 26 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
    HEAP8[r1 + 27 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
    HEAP8[r1 + 28 | 0] = HEAP32[r2 + 1] & 255;
    HEAP8[r1 + 29 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[r1 + 30 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[r1 + 31 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
    r2 = (r1 + 8 | 0) >> 2;
    HEAP8[r1 + 32 | 0] = HEAP32[r2] & 255;
    HEAP8[r1 + 33 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
    HEAP8[r1 + 34 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
    HEAP8[r1 + 35 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
    HEAP8[r1 + 36 | 0] = HEAP32[r2 + 1] & 255;
    HEAP8[r1 + 37 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[r1 + 38 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[r1 + 39 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
    r2 = (r1 + 16 | 0) >> 2;
    HEAP8[r1 + 40 | 0] = HEAP32[r2] & 255;
    HEAP8[r1 + 41 | 0] = (HEAP32[r2] >>> 8 | HEAP32[r2 + 1] << 24) & 255;
    HEAP8[r1 + 42 | 0] = (HEAP32[r2] >>> 16 | HEAP32[r2 + 1] << 16) & 255;
    HEAP8[r1 + 43 | 0] = (HEAP32[r2] >>> 24 | HEAP32[r2 + 1] << 8) & 255;
    HEAP8[r1 + 44 | 0] = HEAP32[r2 + 1] & 255;
    HEAP8[r1 + 45 | 0] = (HEAP32[r2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[r1 + 46 | 0] = (HEAP32[r2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[r1 + 47 | 0] = (HEAP32[r2 + 1] >>> 24 | 0 << 8) & 255;
    return;
  }
}
function _tiger1_init(r1) {
  _do_init(r1, 1);
  return;
}
function _tiger2_init(r1) {
  _do_init(r1, 2);
  return;
}
function _transform981(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 8, r7 = r6 >> 2;
  r8 = r3 + 16, r9 = r8 >> 2;
  r10 = r3 + 24;
  r11 = r10 | 0;
  _memcpy(r10, r2, 64);
  r2 = (r1 | 0) >> 2;
  r10 = HEAP32[r2];
  r12 = HEAP32[r2 + 1];
  HEAP32[r5] = r10;
  HEAP32[r5 + 1] = r12;
  r13 = (r1 + 8 | 0) >> 2;
  r14 = HEAP32[r13];
  r15 = HEAP32[r13 + 1];
  HEAP32[r7] = r14;
  HEAP32[r7 + 1] = r15;
  r16 = (r1 + 16 | 0) >> 2;
  r1 = HEAP32[r16];
  r17 = HEAP32[r16 + 1];
  HEAP32[r9] = r1;
  HEAP32[r9 + 1] = r17;
  _pass(r4, r6, r8, r11, 5);
  _key_schedule(r11);
  _pass(r8, r4, r6, r11, 7);
  _key_schedule(r11);
  _pass(r6, r8, r4, r11, 9);
  r11 = HEAP32[r5 + 1] ^ r12;
  HEAP32[r5] = HEAP32[r5] ^ r10;
  HEAP32[r5 + 1] = r11;
  r11 = (i64Math.subtract(HEAP32[r7], HEAP32[r7 + 1], r14, r15), HEAP32[tempDoublePtr >> 2]);
  r15 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[r7] = r11;
  HEAP32[r7 + 1] = r15;
  HEAP32[r9] = _i64Add(HEAP32[r9], HEAP32[r9 + 1], r1, r17);
  HEAP32[r9 + 1] = tempRet0;
  r17 = HEAP32[r5 + 1];
  HEAP32[r2] = HEAP32[r5];
  HEAP32[r2 + 1] = r17;
  r17 = HEAP32[r7 + 1];
  HEAP32[r13] = HEAP32[r7];
  HEAP32[r13 + 1] = r17;
  r17 = HEAP32[r9 + 1];
  HEAP32[r16] = HEAP32[r9];
  HEAP32[r16 + 1] = r17;
  STACKTOP = r3;
  return;
}
function _pass(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 8, r10 = r9 >> 2;
  r11 = r6 + 16, r12 = r11 >> 2;
  r13 = HEAP32[r1 + 4 >> 2];
  HEAP32[r8] = HEAP32[r1 >> 2];
  HEAP32[r8 + 1] = r13;
  r13 = HEAP32[r2 + 4 >> 2];
  HEAP32[r10] = HEAP32[r2 >> 2];
  HEAP32[r10 + 1] = r13;
  r13 = HEAP32[r3 + 4 >> 2];
  HEAP32[r12] = HEAP32[r3 >> 2];
  HEAP32[r12 + 1] = r13;
  _tiger_round(r7, r9, r11, HEAP32[r4 >> 2], HEAP32[r4 + 4 >> 2], r5);
  r13 = r4 + 8 | 0;
  _tiger_round(r9, r11, r7, HEAP32[r13 >> 2], HEAP32[r13 + 4 >> 2], r5);
  r13 = r4 + 16 | 0;
  _tiger_round(r11, r7, r9, HEAP32[r13 >> 2], HEAP32[r13 + 4 >> 2], r5);
  r13 = r4 + 24 | 0;
  _tiger_round(r7, r9, r11, HEAP32[r13 >> 2], HEAP32[r13 + 4 >> 2], r5);
  r13 = r4 + 32 | 0;
  _tiger_round(r9, r11, r7, HEAP32[r13 >> 2], HEAP32[r13 + 4 >> 2], r5);
  r13 = r4 + 40 | 0;
  _tiger_round(r11, r7, r9, HEAP32[r13 >> 2], HEAP32[r13 + 4 >> 2], r5);
  r13 = r4 + 48 | 0;
  _tiger_round(r7, r9, r11, HEAP32[r13 >> 2], HEAP32[r13 + 4 >> 2], r5);
  r13 = r4 + 56 | 0;
  _tiger_round(r9, r11, r7, HEAP32[r13 >> 2], HEAP32[r13 + 4 >> 2], r5);
  r5 = HEAP32[r8 + 1];
  HEAP32[r1 >> 2] = HEAP32[r8];
  HEAP32[r1 + 4 >> 2] = r5;
  r5 = HEAP32[r10 + 1];
  HEAP32[r2 >> 2] = HEAP32[r10];
  HEAP32[r2 + 4 >> 2] = r5;
  r5 = HEAP32[r12 + 1];
  HEAP32[r3 >> 2] = HEAP32[r12];
  HEAP32[r3 + 4 >> 2] = r5;
  STACKTOP = r6;
  return;
}
function _twofish_setkey(r1, r2, r3) {
  var r4;
  r4 = _do_twofish_setkey(r1, r2, r3);
  __gcry_burn_stack(47);
  return r4;
}
function _twofish_encrypt(r1, r2, r3) {
  _do_twofish_encrypt(r1, r2, r3);
  __gcry_burn_stack(36);
  return;
}
function _twofish_decrypt(r1, r2, r3) {
  _do_twofish_decrypt(r1, r2, r3);
  __gcry_burn_stack(36);
  return;
}
function _do_twofish_decrypt(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = r1 >> 2;
  r1 = (HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3] | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24) ^ HEAP32[r4 + 1028];
  r5 = (HEAPU8[r3 + 5 | 0] << 8 | HEAPU8[r3 + 4 | 0] | HEAPU8[r3 + 6 | 0] << 16 | HEAPU8[r3 + 7 | 0] << 24) ^ HEAP32[r4 + 1029];
  r6 = (HEAPU8[r3 + 9 | 0] << 8 | HEAPU8[r3 + 8 | 0] | HEAPU8[r3 + 10 | 0] << 16 | HEAPU8[r3 + 11 | 0] << 24) ^ HEAP32[r4 + 1030];
  r7 = HEAP32[(((r5 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r5 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r5 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r5 >>> 24 << 2 >> 2) + r4];
  r8 = r7 + (HEAP32[(((r1 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r1 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = (HEAPU8[r3 + 13 | 0] << 8 | HEAPU8[r3 + 12 | 0] | HEAPU8[r3 + 14 | 0] << 16 | HEAPU8[r3 + 15 | 0] << 24) ^ HEAP32[r4 + 1031] ^ HEAP32[r4 + 1063] + r7 + r8;
  r7 = r9 >>> 1;
  r3 = r7 | r9 << 31;
  r10 = r8 + HEAP32[r4 + 1062] ^ (r6 << 1 | r6 >>> 31);
  r6 = HEAP32[(((r9 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r7 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r3 >>> 24 << 2 >> 2) + r4];
  r9 = r6 + (HEAP32[(((r10 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r10 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r10 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r10 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r7 = HEAP32[r4 + 1061] + r6 + r9 ^ r5;
  r5 = r7 >>> 1;
  r6 = r5 | r7 << 31;
  r8 = r9 + HEAP32[r4 + 1060] ^ (r1 << 1 | r1 >>> 31);
  r1 = HEAP32[(((r7 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r5 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r7 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r6 >>> 24 << 2 >> 2) + r4];
  r7 = r1 + (HEAP32[(((r8 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r8 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r8 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r8 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r5 = HEAP32[r4 + 1059] + r1 + r7 ^ r3;
  r3 = r5 >>> 1;
  r1 = r3 | r5 << 31;
  r9 = r7 + HEAP32[r4 + 1058] ^ (r10 << 1 | r10 >>> 31);
  r10 = HEAP32[(((r5 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r3 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r5 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r1 >>> 24 << 2 >> 2) + r4];
  r5 = r10 + (HEAP32[(((r9 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r9 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r9 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r3 = HEAP32[r4 + 1057] + r10 + r5 ^ r6;
  r6 = r3 >>> 1;
  r10 = r6 | r3 << 31;
  r7 = r5 + HEAP32[r4 + 1056] ^ (r8 << 1 | r8 >>> 31);
  r8 = HEAP32[(((r3 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r6 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r3 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r10 >>> 24 << 2 >> 2) + r4];
  r3 = r8 + (HEAP32[(((r7 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r7 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r7 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r7 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r6 = HEAP32[r4 + 1055] + r8 + r3 ^ r1;
  r1 = r6 >>> 1;
  r8 = r1 | r6 << 31;
  r5 = r3 + HEAP32[r4 + 1054] ^ (r9 << 1 | r9 >>> 31);
  r9 = HEAP32[(((r6 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r1 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r6 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r8 >>> 24 << 2 >> 2) + r4];
  r6 = r9 + (HEAP32[(((r5 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r5 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r5 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r5 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r1 = HEAP32[r4 + 1053] + r9 + r6 ^ r10;
  r10 = r1 >>> 1;
  r9 = r10 | r1 << 31;
  r3 = r6 + HEAP32[r4 + 1052] ^ (r7 << 1 | r7 >>> 31);
  r7 = HEAP32[(((r1 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r10 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r1 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r9 >>> 24 << 2 >> 2) + r4];
  r1 = r7 + (HEAP32[(((r3 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r3 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r3 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r3 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r10 = HEAP32[r4 + 1051] + r7 + r1 ^ r8;
  r8 = r10 >>> 1;
  r7 = r8 | r10 << 31;
  r6 = r1 + HEAP32[r4 + 1050] ^ (r5 << 1 | r5 >>> 31);
  r5 = HEAP32[(((r10 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r10 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r7 >>> 24 << 2 >> 2) + r4];
  r10 = r5 + (HEAP32[(((r6 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r6 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r6 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r6 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r8 = HEAP32[r4 + 1049] + r5 + r10 ^ r9;
  r9 = r8 >>> 1;
  r5 = r9 | r8 << 31;
  r1 = r10 + HEAP32[r4 + 1048] ^ (r3 << 1 | r3 >>> 31);
  r3 = HEAP32[(((r8 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r8 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r5 >>> 24 << 2 >> 2) + r4];
  r8 = r3 + (HEAP32[(((r1 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r1 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = HEAP32[r4 + 1047] + r3 + r8 ^ r7;
  r7 = r9 >>> 1;
  r3 = r7 | r9 << 31;
  r10 = r8 + HEAP32[r4 + 1046] ^ (r6 << 1 | r6 >>> 31);
  r6 = HEAP32[(((r9 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r7 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r3 >>> 24 << 2 >> 2) + r4];
  r9 = r6 + (HEAP32[(((r10 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r10 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r10 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r10 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r7 = HEAP32[r4 + 1045] + r6 + r9 ^ r5;
  r5 = r7 >>> 1;
  r6 = r5 | r7 << 31;
  r8 = r9 + HEAP32[r4 + 1044] ^ (r1 << 1 | r1 >>> 31);
  r1 = HEAP32[(((r7 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r5 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r7 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r6 >>> 24 << 2 >> 2) + r4];
  r7 = r1 + (HEAP32[(((r8 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r8 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r8 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r8 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r5 = HEAP32[r4 + 1043] + r1 + r7 ^ r3;
  r3 = r5 >>> 1;
  r1 = r3 | r5 << 31;
  r9 = r7 + HEAP32[r4 + 1042] ^ (r10 << 1 | r10 >>> 31);
  r10 = HEAP32[(((r5 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r3 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r5 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r1 >>> 24 << 2 >> 2) + r4];
  r5 = r10 + (HEAP32[(((r9 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r9 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r9 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r3 = HEAP32[r4 + 1041] + r10 + r5 ^ r6;
  r6 = r3 >>> 1;
  r10 = r6 | r3 << 31;
  r7 = r5 + HEAP32[r4 + 1040] ^ (r8 << 1 | r8 >>> 31);
  r8 = HEAP32[(((r3 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r6 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r3 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r10 >>> 24 << 2 >> 2) + r4];
  r3 = r8 + (HEAP32[(((r7 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r7 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r7 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r7 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r6 = HEAP32[r4 + 1039] + r8 + r3 ^ r1;
  r1 = r6 >>> 1;
  r8 = r1 | r6 << 31;
  r5 = r3 + HEAP32[r4 + 1038] ^ (r9 << 1 | r9 >>> 31);
  r9 = HEAP32[(((r6 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r1 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r6 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r8 >>> 24 << 2 >> 2) + r4];
  r6 = r9 + (HEAP32[(((r5 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r5 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r5 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r5 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r1 = HEAP32[r4 + 1037] + r9 + r6 ^ r10;
  r10 = r1 >>> 1;
  r9 = r10 | r1 << 31;
  r3 = r6 + HEAP32[r4 + 1036] ^ (r7 << 1 | r7 >>> 31);
  r7 = HEAP32[(((r1 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r10 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r1 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r9 >>> 24 << 2 >> 2) + r4];
  r1 = r7 + (HEAP32[(((r3 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r3 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r3 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r3 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r10 = HEAP32[r4 + 1035] + r7 + r1 ^ r8;
  r8 = r10 >>> 1;
  r7 = r8 | r10 << 31;
  r6 = r1 + HEAP32[r4 + 1034] ^ (r5 << 1 | r5 >>> 31);
  r5 = HEAP32[(((r10 >>> 9 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r10 >>> 17 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r7 >>> 24 << 2 >> 2) + r4];
  r10 = r5 + (HEAP32[(((r6 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r6 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r6 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r6 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r8 = HEAP32[r4 + 1033] + r5 + r10 ^ r9;
  r9 = r10 + HEAP32[r4 + 1032] ^ (r3 << 1 | r3 >>> 31);
  r3 = HEAP32[r4 + 1024] ^ r6;
  HEAP8[r2] = r3 & 255;
  HEAP8[r2 + 1 | 0] = r3 >>> 8 & 255;
  HEAP8[r2 + 2 | 0] = r3 >>> 16 & 255;
  HEAP8[r2 + 3 | 0] = r3 >>> 24 & 255;
  r3 = HEAP32[r4 + 1025] ^ r7;
  HEAP8[r2 + 4 | 0] = r3 & 255;
  HEAP8[r2 + 5 | 0] = r3 >>> 8 & 255;
  HEAP8[r2 + 6 | 0] = r3 >>> 16 & 255;
  HEAP8[r2 + 7 | 0] = r3 >>> 24 & 255;
  r3 = r9 ^ HEAP32[r4 + 1026];
  HEAP8[r2 + 8 | 0] = r3 & 255;
  HEAP8[r2 + 9 | 0] = r3 >>> 8 & 255;
  HEAP8[r2 + 10 | 0] = r3 >>> 16 & 255;
  HEAP8[r2 + 11 | 0] = r3 >>> 24 & 255;
  r3 = (r8 >>> 1 | r8 << 31) ^ HEAP32[r4 + 1027];
  HEAP8[r2 + 12 | 0] = r3 & 255;
  HEAP8[r2 + 13 | 0] = r3 >>> 8 & 255;
  HEAP8[r2 + 14 | 0] = r3 >>> 16 & 255;
  HEAP8[r2 + 15 | 0] = r3 >>> 24 & 255;
  return;
}
function _do_twofish_encrypt(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = r1 >> 2;
  r1 = (HEAPU8[r3 + 1 | 0] << 8 | HEAPU8[r3] | HEAPU8[r3 + 2 | 0] << 16 | HEAPU8[r3 + 3 | 0] << 24) ^ HEAP32[r4 + 1024];
  r5 = (HEAPU8[r3 + 5 | 0] << 8 | HEAPU8[r3 + 4 | 0] | HEAPU8[r3 + 6 | 0] << 16 | HEAPU8[r3 + 7 | 0] << 24) ^ HEAP32[r4 + 1025];
  r6 = (HEAPU8[r3 + 13 | 0] << 8 | HEAPU8[r3 + 12 | 0] | HEAPU8[r3 + 14 | 0] << 16 | HEAPU8[r3 + 15 | 0] << 24) ^ HEAP32[r4 + 1027];
  r7 = HEAP32[(((r5 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r5 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r5 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r5 >>> 24 << 2 >> 2) + r4];
  r8 = r7 + (HEAP32[(((r1 >>> 8 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r1 >>> 16 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = (HEAPU8[r3 + 9 | 0] << 8 | HEAPU8[r3 + 8 | 0] | HEAPU8[r3 + 10 | 0] << 16 | HEAPU8[r3 + 11 | 0] << 24) ^ HEAP32[r4 + 1026] ^ r8 + HEAP32[r4 + 1032];
  r3 = r9 >>> 1;
  r10 = r3 | r9 << 31;
  r11 = r7 + HEAP32[r4 + 1033] + r8 ^ (r6 << 1 | r6 >>> 31);
  r6 = HEAP32[(((r11 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r11 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r11 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r11 >>> 24 << 2 >> 2) + r4];
  r8 = r6 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r3 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r10 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1034] ^ r1;
  r1 = r9 >>> 1;
  r3 = r1 | r9 << 31;
  r7 = r6 + HEAP32[r4 + 1035] + r8 ^ (r5 << 1 | r5 >>> 31);
  r5 = HEAP32[(((r7 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r7 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r7 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r7 >>> 24 << 2 >> 2) + r4];
  r8 = r5 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r3 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1036] ^ r10;
  r10 = r9 >>> 1;
  r1 = r10 | r9 << 31;
  r6 = r5 + HEAP32[r4 + 1037] + r8 ^ (r11 << 1 | r11 >>> 31);
  r11 = HEAP32[(((r6 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r6 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r6 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r6 >>> 24 << 2 >> 2) + r4];
  r8 = r11 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r10 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1038] ^ r3;
  r3 = r9 >>> 1;
  r10 = r3 | r9 << 31;
  r5 = r11 + HEAP32[r4 + 1039] + r8 ^ (r7 << 1 | r7 >>> 31);
  r7 = HEAP32[(((r5 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r5 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r5 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r5 >>> 24 << 2 >> 2) + r4];
  r8 = r7 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r3 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r10 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1040] ^ r1;
  r1 = r9 >>> 1;
  r3 = r1 | r9 << 31;
  r11 = r7 + HEAP32[r4 + 1041] + r8 ^ (r6 << 1 | r6 >>> 31);
  r6 = HEAP32[(((r11 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r11 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r11 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r11 >>> 24 << 2 >> 2) + r4];
  r8 = r6 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r3 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1042] ^ r10;
  r10 = r9 >>> 1;
  r1 = r10 | r9 << 31;
  r7 = r6 + HEAP32[r4 + 1043] + r8 ^ (r5 << 1 | r5 >>> 31);
  r5 = HEAP32[(((r7 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r7 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r7 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r7 >>> 24 << 2 >> 2) + r4];
  r8 = r5 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r10 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1044] ^ r3;
  r3 = r9 >>> 1;
  r10 = r3 | r9 << 31;
  r6 = r5 + HEAP32[r4 + 1045] + r8 ^ (r11 << 1 | r11 >>> 31);
  r11 = HEAP32[(((r6 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r6 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r6 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r6 >>> 24 << 2 >> 2) + r4];
  r8 = r11 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r3 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r10 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1046] ^ r1;
  r1 = r9 >>> 1;
  r3 = r1 | r9 << 31;
  r5 = r11 + HEAP32[r4 + 1047] + r8 ^ (r7 << 1 | r7 >>> 31);
  r7 = HEAP32[(((r5 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r5 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r5 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r5 >>> 24 << 2 >> 2) + r4];
  r8 = r7 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r3 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1048] ^ r10;
  r10 = r9 >>> 1;
  r1 = r10 | r9 << 31;
  r11 = r7 + HEAP32[r4 + 1049] + r8 ^ (r6 << 1 | r6 >>> 31);
  r6 = HEAP32[(((r11 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r11 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r11 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r11 >>> 24 << 2 >> 2) + r4];
  r8 = r6 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r10 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1050] ^ r3;
  r3 = r9 >>> 1;
  r10 = r3 | r9 << 31;
  r7 = r6 + HEAP32[r4 + 1051] + r8 ^ (r5 << 1 | r5 >>> 31);
  r5 = HEAP32[(((r7 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r7 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r7 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r7 >>> 24 << 2 >> 2) + r4];
  r8 = r5 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r3 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r10 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1052] ^ r1;
  r1 = r9 >>> 1;
  r3 = r1 | r9 << 31;
  r6 = r5 + HEAP32[r4 + 1053] + r8 ^ (r11 << 1 | r11 >>> 31);
  r11 = HEAP32[(((r6 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r6 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r6 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r6 >>> 24 << 2 >> 2) + r4];
  r8 = r11 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r3 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1054] ^ r10;
  r10 = r9 >>> 1;
  r1 = r10 | r9 << 31;
  r5 = r11 + HEAP32[r4 + 1055] + r8 ^ (r7 << 1 | r7 >>> 31);
  r7 = HEAP32[(((r5 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r5 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r5 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r5 >>> 24 << 2 >> 2) + r4];
  r8 = r7 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r10 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1056] ^ r3;
  r3 = r9 >>> 1;
  r10 = r3 | r9 << 31;
  r11 = r7 + HEAP32[r4 + 1057] + r8 ^ (r6 << 1 | r6 >>> 31);
  r6 = HEAP32[(((r11 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r11 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r11 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r11 >>> 24 << 2 >> 2) + r4];
  r8 = r6 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r3 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r10 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1058] ^ r1;
  r1 = r9 >>> 1;
  r3 = r1 | r9 << 31;
  r7 = r6 + HEAP32[r4 + 1059] + r8 ^ (r5 << 1 | r5 >>> 31);
  r5 = HEAP32[(((r7 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r7 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r7 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r7 >>> 24 << 2 >> 2) + r4];
  r8 = r5 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r1 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r3 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1060] ^ r10;
  r10 = r9 >>> 1;
  r1 = r10 | r9 << 31;
  r6 = r5 + HEAP32[r4 + 1061] + r8 ^ (r11 << 1 | r11 >>> 31);
  r11 = HEAP32[(((r6 >>> 8 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[(((r6 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[(((r6 >>> 16 & 255) << 2) + 3072 >> 2) + r4] ^ HEAP32[(r6 >>> 24 << 2 >> 2) + r4];
  r8 = r11 + (HEAP32[(((r9 >>> 9 & 255) << 2) + 1024 >> 2) + r4] ^ HEAP32[((r10 & 255) << 2 >> 2) + r4] ^ HEAP32[(((r9 >>> 17 & 255) << 2) + 2048 >> 2) + r4] ^ HEAP32[((r1 >>> 24 << 2) + 3072 >> 2) + r4]) | 0;
  r9 = r8 + HEAP32[r4 + 1062] ^ r3;
  r3 = r11 + HEAP32[r4 + 1063] + r8 ^ (r7 << 1 | r7 >>> 31);
  r7 = HEAP32[r4 + 1028] ^ r1;
  HEAP8[r2] = r7 & 255;
  HEAP8[r2 + 1 | 0] = r7 >>> 8 & 255;
  HEAP8[r2 + 2 | 0] = r7 >>> 16 & 255;
  HEAP8[r2 + 3 | 0] = r7 >>> 24 & 255;
  r7 = HEAP32[r4 + 1029] ^ r6;
  HEAP8[r2 + 4 | 0] = r7 & 255;
  HEAP8[r2 + 5 | 0] = r7 >>> 8 & 255;
  HEAP8[r2 + 6 | 0] = r7 >>> 16 & 255;
  HEAP8[r2 + 7 | 0] = r7 >>> 24 & 255;
  r7 = (r9 >>> 1 | r9 << 31) ^ HEAP32[r4 + 1030];
  HEAP8[r2 + 8 | 0] = r7 & 255;
  HEAP8[r2 + 9 | 0] = r7 >>> 8 & 255;
  HEAP8[r2 + 10 | 0] = r7 >>> 16 & 255;
  HEAP8[r2 + 11 | 0] = r7 >>> 24 & 255;
  r7 = r3 ^ HEAP32[r4 + 1031];
  HEAP8[r2 + 12 | 0] = r7 & 255;
  HEAP8[r2 + 13 | 0] = r7 >>> 8 & 255;
  HEAP8[r2 + 14 | 0] = r7 >>> 16 & 255;
  HEAP8[r2 + 15 | 0] = r7 >>> 24 & 255;
  return;
}
function _do_twofish_setkey(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131, r132;
  r4 = r1 >> 2;
  r1 = 0;
  r5 = STACKTOP;
  if ((r3 - 16 | 16 | 0) != 16) {
    r6 = 44;
    STACKTOP = r5;
    return r6;
  }
  do {
    if (HEAP8[457892]) {
      r1 = 96;
    } else {
      HEAP8[457892] = 1;
      r7 = _selftest996();
      HEAP32[114472] = r7;
      if ((r7 | 0) == 0) {
        break;
      }
      __gcry_log_error(477676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
      r1 = 96;
      break;
    }
  } while (0);
  do {
    if (r1 == 96) {
      if ((HEAP32[114472] | 0) == 0) {
        break;
      } else {
        r6 = 50;
      }
      STACKTOP = r5;
      return r6;
    }
  } while (0);
  r1 = HEAP8[r2];
  if (r1 << 24 >> 24 == 0) {
    r8 = 0;
    r9 = 0;
    r10 = 0;
  } else {
    r7 = HEAPU8[(r1 & 255) - 1 + 440372 | 0];
    r8 = HEAP8[r7 + 455741 | 0];
    r9 = HEAP8[r7 + 455785 | 0];
    r10 = HEAP8[r7 + 455740 | 0];
  }
  r7 = r2 + 1 | 0;
  r1 = HEAP8[r7];
  if (r1 << 24 >> 24 == 0) {
    r11 = r9;
    r12 = r8;
    r13 = r9;
    r14 = r10;
  } else {
    r15 = HEAPU8[(r1 & 255) - 1 + 440372 | 0];
    r11 = HEAP8[r15 + 455878 | 0] ^ r9;
    r12 = HEAP8[r15 + 455808 | 0] ^ r8;
    r13 = HEAP8[r15 + 455904 | 0] ^ r9;
    r14 = HEAP8[r15 + 455785 | 0] ^ r10;
  }
  r10 = r2 + 2 | 0;
  r15 = HEAP8[r10];
  if (r15 << 24 >> 24 == 0) {
    r16 = r11;
    r17 = r12;
    r18 = r13;
    r19 = r14;
  } else {
    r9 = HEAPU8[(r15 & 255) - 1 + 440372 | 0];
    r16 = HEAP8[r9 + 455949 | 0] ^ r11;
    r17 = HEAP8[r9 + 455931 | 0] ^ r12;
    r18 = HEAP8[r9 + 455953 | 0] ^ r13;
    r19 = HEAP8[r9 + 455878 | 0] ^ r14;
  }
  r14 = r2 + 3 | 0;
  r9 = HEAP8[r14];
  if (r9 << 24 >> 24 == 0) {
    r20 = r16;
    r21 = r17;
    r22 = r18;
    r23 = r19;
  } else {
    r13 = HEAPU8[(r9 & 255) - 1 + 440372 | 0];
    r20 = HEAP8[r13 + 455893 | 0] ^ r16;
    r21 = HEAP8[r13 + 455801 | 0] ^ r17;
    r22 = HEAP8[r13 + 455867 | 0] ^ r18;
    r23 = HEAP8[r13 + 455949 | 0] ^ r19;
  }
  r19 = r2 + 4 | 0;
  r13 = HEAP8[r19];
  if (r13 << 24 >> 24 == 0) {
    r24 = r20;
    r25 = r21;
    r26 = r22;
    r27 = r23;
  } else {
    r18 = HEAPU8[(r13 & 255) - 1 + 440372 | 0];
    r24 = HEAP8[r18 + 455890 | 0] ^ r20;
    r25 = HEAP8[r18 + 455842 | 0] ^ r21;
    r26 = HEAP8[r18 + 455810 | 0] ^ r22;
    r27 = HEAP8[r18 + 455893 | 0] ^ r23;
  }
  r23 = r2 + 5 | 0;
  r18 = HEAP8[r23];
  if (r18 << 24 >> 24 == 0) {
    r28 = r24;
    r29 = r25;
    r30 = r26;
    r31 = r27;
  } else {
    r22 = HEAPU8[(r18 & 255) - 1 + 440372 | 0];
    r28 = HEAP8[r22 + 455977 | 0] ^ r24;
    r29 = HEAP8[r22 + 455831 | 0] ^ r25;
    r30 = HEAP8[r22 + 455800 | 0] ^ r26;
    r31 = HEAP8[r22 + 455890 | 0] ^ r27;
  }
  r27 = r2 + 6 | 0;
  r22 = HEAP8[r27];
  if (r22 << 24 >> 24 == 0) {
    r32 = r28;
    r33 = r29;
    r34 = r30;
    r35 = r31;
  } else {
    r26 = HEAPU8[(r22 & 255) - 1 + 440372 | 0];
    r32 = HEAP8[r26 + 455964 | 0] ^ r28;
    r33 = HEAP8[r26 + 455819 | 0] ^ r29;
    r34 = HEAP8[r26 + 455795 | 0] ^ r30;
    r35 = HEAP8[r26 + 455977 | 0] ^ r31;
  }
  r31 = r2 + 7 | 0;
  r26 = HEAP8[r31];
  if (r26 << 24 >> 24 == 0) {
    r36 = r32;
    r37 = r33;
    r38 = r34;
    r39 = r35;
  } else {
    r30 = HEAPU8[(r26 & 255) - 1 + 440372 | 0];
    r36 = HEAP8[r30 + 455763 | 0] ^ r32;
    r37 = HEAP8[r30 + 455880 | 0] ^ r33;
    r38 = HEAP8[r30 + 455948 | 0] ^ r34;
    r39 = HEAP8[r30 + 455964 | 0] ^ r35;
  }
  r35 = r2 + 8 | 0;
  r30 = HEAP8[r35];
  if (r30 << 24 >> 24 == 0) {
    r40 = 0;
    r41 = 0;
    r42 = 0;
  } else {
    r34 = HEAPU8[(r30 & 255) - 1 + 440372 | 0];
    r40 = HEAP8[r34 + 455741 | 0];
    r41 = HEAP8[r34 + 455785 | 0];
    r42 = HEAP8[r34 + 455740 | 0];
  }
  r34 = r2 + 9 | 0;
  r30 = HEAP8[r34];
  if (r30 << 24 >> 24 == 0) {
    r43 = r41;
    r44 = r40;
    r45 = r41;
    r46 = r42;
  } else {
    r33 = HEAPU8[(r30 & 255) - 1 + 440372 | 0];
    r43 = HEAP8[r33 + 455878 | 0] ^ r41;
    r44 = HEAP8[r33 + 455808 | 0] ^ r40;
    r45 = HEAP8[r33 + 455904 | 0] ^ r41;
    r46 = HEAP8[r33 + 455785 | 0] ^ r42;
  }
  r42 = r2 + 10 | 0;
  r33 = HEAP8[r42];
  if (r33 << 24 >> 24 == 0) {
    r47 = r43;
    r48 = r44;
    r49 = r45;
    r50 = r46;
  } else {
    r41 = HEAPU8[(r33 & 255) - 1 + 440372 | 0];
    r47 = HEAP8[r41 + 455949 | 0] ^ r43;
    r48 = HEAP8[r41 + 455931 | 0] ^ r44;
    r49 = HEAP8[r41 + 455953 | 0] ^ r45;
    r50 = HEAP8[r41 + 455878 | 0] ^ r46;
  }
  r46 = r2 + 11 | 0;
  r41 = HEAP8[r46];
  if (r41 << 24 >> 24 == 0) {
    r51 = r47;
    r52 = r48;
    r53 = r49;
    r54 = r50;
  } else {
    r45 = HEAPU8[(r41 & 255) - 1 + 440372 | 0];
    r51 = HEAP8[r45 + 455893 | 0] ^ r47;
    r52 = HEAP8[r45 + 455801 | 0] ^ r48;
    r53 = HEAP8[r45 + 455867 | 0] ^ r49;
    r54 = HEAP8[r45 + 455949 | 0] ^ r50;
  }
  r50 = r2 + 12 | 0;
  r45 = HEAP8[r50];
  if (r45 << 24 >> 24 == 0) {
    r55 = r51;
    r56 = r52;
    r57 = r53;
    r58 = r54;
  } else {
    r49 = HEAPU8[(r45 & 255) - 1 + 440372 | 0];
    r55 = HEAP8[r49 + 455890 | 0] ^ r51;
    r56 = HEAP8[r49 + 455842 | 0] ^ r52;
    r57 = HEAP8[r49 + 455810 | 0] ^ r53;
    r58 = HEAP8[r49 + 455893 | 0] ^ r54;
  }
  r54 = r2 + 13 | 0;
  r49 = HEAP8[r54];
  if (r49 << 24 >> 24 == 0) {
    r59 = r55;
    r60 = r56;
    r61 = r57;
    r62 = r58;
  } else {
    r53 = HEAPU8[(r49 & 255) - 1 + 440372 | 0];
    r59 = HEAP8[r53 + 455977 | 0] ^ r55;
    r60 = HEAP8[r53 + 455831 | 0] ^ r56;
    r61 = HEAP8[r53 + 455800 | 0] ^ r57;
    r62 = HEAP8[r53 + 455890 | 0] ^ r58;
  }
  r58 = r2 + 14 | 0;
  r53 = HEAP8[r58];
  if (r53 << 24 >> 24 == 0) {
    r63 = r59;
    r64 = r60;
    r65 = r61;
    r66 = r62;
  } else {
    r57 = HEAPU8[(r53 & 255) - 1 + 440372 | 0];
    r63 = HEAP8[r57 + 455964 | 0] ^ r59;
    r64 = HEAP8[r57 + 455819 | 0] ^ r60;
    r65 = HEAP8[r57 + 455795 | 0] ^ r61;
    r66 = HEAP8[r57 + 455977 | 0] ^ r62;
  }
  r62 = r2 + 15 | 0;
  r57 = HEAP8[r62];
  if (r57 << 24 >> 24 == 0) {
    r67 = r63;
    r68 = r64;
    r69 = r65;
    r70 = r66;
  } else {
    r61 = HEAPU8[(r57 & 255) - 1 + 440372 | 0];
    r67 = HEAP8[r61 + 455763 | 0] ^ r63;
    r68 = HEAP8[r61 + 455880 | 0] ^ r64;
    r69 = HEAP8[r61 + 455948 | 0] ^ r65;
    r70 = HEAP8[r61 + 455964 | 0] ^ r66;
  }
  if ((r3 | 0) != 32) {
    r3 = 0;
    r66 = 0;
    r61 = 1;
    while (1) {
      r65 = r66 + 464136 | 0;
      HEAP32[(r3 << 2 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[r65] ^ r39) & 255) + 439760 | 0] ^ r70) & 255) << 2) + 447208 >> 2];
      r64 = r61 + 464136 | 0;
      HEAP32[((r3 << 2) + 1024 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[r64] ^ r38) & 255) + 439760 | 0] ^ r69) & 255) << 2) + 448232 >> 2];
      HEAP32[((r3 << 2) + 2048 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[r65] ^ r37) & 255) + 439504 | 0] ^ r68) & 255) << 2) + 449256 >> 2];
      HEAP32[((r3 << 2) + 3072 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[r64] ^ r36) & 255) + 439504 | 0] ^ r67) & 255) << 2) + 450280 >> 2];
      r64 = r3 + 1 | 0;
      if ((r64 | 0) == 256) {
        break;
      } else {
        r3 = r64;
        r66 = r66 + 2 | 0;
        r61 = r61 + 2 | 0;
      }
    }
    r61 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 243) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 103) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 103) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 243) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r66 = r61 << 8 | r61 >>> 24;
    r61 = r66 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 117) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 169) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 169) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 117) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r3 = r61 + r66 | 0;
    HEAP32[r4 + 1024] = r61;
    HEAP32[r4 + 1025] = r3 << 9 | r3 >>> 23;
    r3 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 244) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 232) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 232) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 244) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r61 = r3 << 8 | r3 >>> 24;
    r3 = r61 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 198) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 179) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 179) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 198) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r66 = r3 + r61 | 0;
    HEAP32[r4 + 1026] = r3;
    HEAP32[r4 + 1027] = r66 << 9 | r66 >>> 23;
    r66 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 123) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 253) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 253) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 123) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r3 = r66 << 8 | r66 >>> 24;
    r66 = r3 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 219) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 4) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 4) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 219) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r61 = r66 + r3 | 0;
    HEAP32[r4 + 1028] = r66;
    HEAP32[r4 + 1029] = r61 << 9 | r61 >>> 23;
    r61 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 200) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 118) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 118) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 200) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r66 = r61 << 8 | r61 >>> 24;
    r61 = r66 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 251) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 163) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 163) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 251) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r3 = r61 + r66 | 0;
    HEAP32[r4 + 1030] = r61;
    HEAP32[r4 + 1031] = r3 << 9 | r3 >>> 23;
    r3 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 211) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 146) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 146) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 211) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r61 = r3 << 8 | r3 >>> 24;
    r3 = r61 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 74) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 154) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 154) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 74) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r66 = r3 + r61 | 0;
    HEAP32[r4 + 1032] = r3;
    HEAP32[r4 + 1033] = r66 << 9 | r66 >>> 23;
    r66 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 107) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 120) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 120) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 107) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r3 = r66 << 8 | r66 >>> 24;
    r66 = r3 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 230) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 128) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 128) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 230) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r61 = r66 + r3 | 0;
    HEAP32[r4 + 1034] = r66;
    HEAP32[r4 + 1035] = r61 << 9 | r61 >>> 23;
    r61 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 125) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 221) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 221) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 125) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r66 = r61 << 8 | r61 >>> 24;
    r61 = r66 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 69) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 228) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 228) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 69) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r3 = r61 + r66 | 0;
    HEAP32[r4 + 1036] = r61;
    HEAP32[r4 + 1037] = r3 << 9 | r3 >>> 23;
    r3 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 75) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 56) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 56) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 75) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r61 = r3 << 8 | r3 >>> 24;
    r3 = r61 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 232) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 209) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 209) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 232) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r66 = r3 + r61 | 0;
    HEAP32[r4 + 1038] = r3;
    HEAP32[r4 + 1039] = r66 << 9 | r66 >>> 23;
    r66 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 50) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 198) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 198) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 50) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r3 = r66 << 8 | r66 >>> 24;
    r66 = r3 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 214) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 13) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 13) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 214) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r61 = r66 + r3 | 0;
    HEAP32[r4 + 1040] = r66;
    HEAP32[r4 + 1041] = r61 << 9 | r61 >>> 23;
    r61 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 253) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 152) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 152) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 253) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r66 = r61 << 8 | r61 >>> 24;
    r61 = r66 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 216) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 53) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 53) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 216) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r3 = r61 + r66 | 0;
    HEAP32[r4 + 1042] = r61;
    HEAP32[r4 + 1043] = r3 << 9 | r3 >>> 23;
    r3 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 113) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 247) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 247) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 113) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r61 = r3 << 8 | r3 >>> 24;
    r3 = r61 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 55) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 24) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 24) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 55) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r66 = r3 + r61 | 0;
    HEAP32[r4 + 1044] = r3;
    HEAP32[r4 + 1045] = r66 << 9 | r66 >>> 23;
    r66 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 225) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 108) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 108) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 225) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r3 = r66 << 8 | r66 >>> 24;
    r66 = r3 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 241) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 236) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 236) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 241) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r61 = r66 + r3 | 0;
    HEAP32[r4 + 1046] = r66;
    HEAP32[r4 + 1047] = r61 << 9 | r61 >>> 23;
    r61 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 15) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 117) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 117) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 15) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r66 = r61 << 8 | r61 >>> 24;
    r61 = r66 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 48) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 67) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 67) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 48) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r3 = r61 + r66 | 0;
    HEAP32[r4 + 1048] = r61;
    HEAP32[r4 + 1049] = r3 << 9 | r3 >>> 23;
    r3 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 27) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 38) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 38) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 27) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r61 = r3 << 8 | r3 >>> 24;
    r3 = r61 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 248) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 55) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 55) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 248) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r66 = r3 + r61 | 0;
    HEAP32[r4 + 1050] = r3;
    HEAP32[r4 + 1051] = r66 << 9 | r66 >>> 23;
    r66 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 250) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 19) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 19) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 250) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r3 = r66 << 8 | r66 >>> 24;
    r66 = r3 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 135) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 250) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 250) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 135) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r61 = r66 + r3 | 0;
    HEAP32[r4 + 1052] = r66;
    HEAP32[r4 + 1053] = r61 << 9 | r61 >>> 23;
    r61 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 63) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 72) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 72) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 63) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r66 = r61 << 8 | r61 >>> 24;
    r61 = r66 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 6) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 148) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 148) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 6) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r3 = r61 + r66 | 0;
    HEAP32[r4 + 1054] = r61;
    HEAP32[r4 + 1055] = r3 << 9 | r3 >>> 23;
    r3 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 186) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 208) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 208) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 186) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r61 = r3 << 8 | r3 >>> 24;
    r3 = r61 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 94) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 242) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 242) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 94) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r66 = r3 + r61 | 0;
    HEAP32[r4 + 1056] = r3;
    HEAP32[r4 + 1057] = r66 << 9 | r66 >>> 23;
    r66 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 91) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 48) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 48) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 91) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r3 = r66 << 8 | r66 >>> 24;
    r66 = r3 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 174) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 139) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 139) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 174) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r61 = r66 + r3 | 0;
    HEAP32[r4 + 1058] = r66;
    HEAP32[r4 + 1059] = r61 << 9 | r61 >>> 23;
    r61 = HEAP32[(((HEAP8[r23] ^ HEAP8[HEAPU8[r54] + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 84) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 84) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[HEAPU8[r62] + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r66 = r61 << 8 | r61 >>> 24;
    r61 = r66 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 138) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 132) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 132) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 138) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r3 = r61 + r66 | 0;
    HEAP32[r4 + 1060] = r61;
    HEAP32[r4 + 1061] = r3 << 9 | r3 >>> 23;
    r3 = HEAP32[(((HEAP8[r23] ^ HEAP8[(HEAPU8[r54] ^ 157) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[(HEAPU8[r50] ^ 35) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[(HEAPU8[r58] ^ 35) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[(HEAPU8[r62] ^ 157) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
    r61 = r3 << 8 | r3 >>> 24;
    r3 = r61 + (HEAP32[(((HEAP8[r7] ^ HEAP8[(HEAPU8[r34] ^ 188) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[(HEAPU8[r35] ^ 223) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[(HEAPU8[r42] ^ 223) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[(HEAPU8[r46] ^ 188) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
    r66 = r3 + r61 | 0;
    HEAP32[r4 + 1062] = r3;
    HEAP32[r4 + 1063] = r66 << 9 | r66 >>> 23;
    r6 = 0;
    STACKTOP = r5;
    return r6;
  }
  r66 = r2 + 16 | 0;
  r3 = HEAP8[r66];
  if (r3 << 24 >> 24 == 0) {
    r71 = 0;
    r72 = 0;
    r73 = 0;
  } else {
    r61 = HEAPU8[(r3 & 255) - 1 + 440372 | 0];
    r71 = HEAP8[r61 + 455741 | 0];
    r72 = HEAP8[r61 + 455785 | 0];
    r73 = HEAP8[r61 + 455740 | 0];
  }
  r61 = r2 + 17 | 0;
  r3 = HEAP8[r61];
  if (r3 << 24 >> 24 == 0) {
    r74 = r72;
    r75 = r71;
    r76 = r72;
    r77 = r73;
  } else {
    r64 = HEAPU8[(r3 & 255) - 1 + 440372 | 0];
    r74 = HEAP8[r64 + 455878 | 0] ^ r72;
    r75 = HEAP8[r64 + 455808 | 0] ^ r71;
    r76 = HEAP8[r64 + 455904 | 0] ^ r72;
    r77 = HEAP8[r64 + 455785 | 0] ^ r73;
  }
  r73 = r2 + 18 | 0;
  r64 = HEAP8[r73];
  if (r64 << 24 >> 24 == 0) {
    r78 = r74;
    r79 = r75;
    r80 = r76;
    r81 = r77;
  } else {
    r72 = HEAPU8[(r64 & 255) - 1 + 440372 | 0];
    r78 = HEAP8[r72 + 455949 | 0] ^ r74;
    r79 = HEAP8[r72 + 455931 | 0] ^ r75;
    r80 = HEAP8[r72 + 455953 | 0] ^ r76;
    r81 = HEAP8[r72 + 455878 | 0] ^ r77;
  }
  r77 = r2 + 19 | 0;
  r72 = HEAP8[r77];
  if (r72 << 24 >> 24 == 0) {
    r82 = r78;
    r83 = r79;
    r84 = r80;
    r85 = r81;
  } else {
    r76 = HEAPU8[(r72 & 255) - 1 + 440372 | 0];
    r82 = HEAP8[r76 + 455893 | 0] ^ r78;
    r83 = HEAP8[r76 + 455801 | 0] ^ r79;
    r84 = HEAP8[r76 + 455867 | 0] ^ r80;
    r85 = HEAP8[r76 + 455949 | 0] ^ r81;
  }
  r81 = r2 + 20 | 0;
  r76 = HEAP8[r81];
  if (r76 << 24 >> 24 == 0) {
    r86 = r82;
    r87 = r83;
    r88 = r84;
    r89 = r85;
  } else {
    r80 = HEAPU8[(r76 & 255) - 1 + 440372 | 0];
    r86 = HEAP8[r80 + 455890 | 0] ^ r82;
    r87 = HEAP8[r80 + 455842 | 0] ^ r83;
    r88 = HEAP8[r80 + 455810 | 0] ^ r84;
    r89 = HEAP8[r80 + 455893 | 0] ^ r85;
  }
  r85 = r2 + 21 | 0;
  r80 = HEAP8[r85];
  if (r80 << 24 >> 24 == 0) {
    r90 = r86;
    r91 = r87;
    r92 = r88;
    r93 = r89;
  } else {
    r84 = HEAPU8[(r80 & 255) - 1 + 440372 | 0];
    r90 = HEAP8[r84 + 455977 | 0] ^ r86;
    r91 = HEAP8[r84 + 455831 | 0] ^ r87;
    r92 = HEAP8[r84 + 455800 | 0] ^ r88;
    r93 = HEAP8[r84 + 455890 | 0] ^ r89;
  }
  r89 = r2 + 22 | 0;
  r84 = HEAP8[r89];
  if (r84 << 24 >> 24 == 0) {
    r94 = r90;
    r95 = r91;
    r96 = r92;
    r97 = r93;
  } else {
    r88 = HEAPU8[(r84 & 255) - 1 + 440372 | 0];
    r94 = HEAP8[r88 + 455964 | 0] ^ r90;
    r95 = HEAP8[r88 + 455819 | 0] ^ r91;
    r96 = HEAP8[r88 + 455795 | 0] ^ r92;
    r97 = HEAP8[r88 + 455977 | 0] ^ r93;
  }
  r93 = r2 + 23 | 0;
  r88 = HEAP8[r93];
  if (r88 << 24 >> 24 == 0) {
    r98 = r94;
    r99 = r95;
    r100 = r96;
    r101 = r97;
  } else {
    r92 = HEAPU8[(r88 & 255) - 1 + 440372 | 0];
    r98 = HEAP8[r92 + 455763 | 0] ^ r94;
    r99 = HEAP8[r92 + 455880 | 0] ^ r95;
    r100 = HEAP8[r92 + 455948 | 0] ^ r96;
    r101 = HEAP8[r92 + 455964 | 0] ^ r97;
  }
  r97 = r2 + 24 | 0;
  r92 = HEAP8[r97];
  if (r92 << 24 >> 24 == 0) {
    r102 = 0;
    r103 = 0;
    r104 = 0;
  } else {
    r96 = HEAPU8[(r92 & 255) - 1 + 440372 | 0];
    r102 = HEAP8[r96 + 455741 | 0];
    r103 = HEAP8[r96 + 455785 | 0];
    r104 = HEAP8[r96 + 455740 | 0];
  }
  r96 = r2 + 25 | 0;
  r92 = HEAP8[r96];
  if (r92 << 24 >> 24 == 0) {
    r105 = r103;
    r106 = r102;
    r107 = r103;
    r108 = r104;
  } else {
    r95 = HEAPU8[(r92 & 255) - 1 + 440372 | 0];
    r105 = HEAP8[r95 + 455878 | 0] ^ r103;
    r106 = HEAP8[r95 + 455808 | 0] ^ r102;
    r107 = HEAP8[r95 + 455904 | 0] ^ r103;
    r108 = HEAP8[r95 + 455785 | 0] ^ r104;
  }
  r104 = r2 + 26 | 0;
  r95 = HEAP8[r104];
  if (r95 << 24 >> 24 == 0) {
    r109 = r105;
    r110 = r106;
    r111 = r107;
    r112 = r108;
  } else {
    r103 = HEAPU8[(r95 & 255) - 1 + 440372 | 0];
    r109 = HEAP8[r103 + 455949 | 0] ^ r105;
    r110 = HEAP8[r103 + 455931 | 0] ^ r106;
    r111 = HEAP8[r103 + 455953 | 0] ^ r107;
    r112 = HEAP8[r103 + 455878 | 0] ^ r108;
  }
  r108 = r2 + 27 | 0;
  r103 = HEAP8[r108];
  if (r103 << 24 >> 24 == 0) {
    r113 = r109;
    r114 = r110;
    r115 = r111;
    r116 = r112;
  } else {
    r107 = HEAPU8[(r103 & 255) - 1 + 440372 | 0];
    r113 = HEAP8[r107 + 455893 | 0] ^ r109;
    r114 = HEAP8[r107 + 455801 | 0] ^ r110;
    r115 = HEAP8[r107 + 455867 | 0] ^ r111;
    r116 = HEAP8[r107 + 455949 | 0] ^ r112;
  }
  r112 = r2 + 28 | 0;
  r107 = HEAP8[r112];
  if (r107 << 24 >> 24 == 0) {
    r117 = r113;
    r118 = r114;
    r119 = r115;
    r120 = r116;
  } else {
    r111 = HEAPU8[(r107 & 255) - 1 + 440372 | 0];
    r117 = HEAP8[r111 + 455890 | 0] ^ r113;
    r118 = HEAP8[r111 + 455842 | 0] ^ r114;
    r119 = HEAP8[r111 + 455810 | 0] ^ r115;
    r120 = HEAP8[r111 + 455893 | 0] ^ r116;
  }
  r116 = r2 + 29 | 0;
  r111 = HEAP8[r116];
  if (r111 << 24 >> 24 == 0) {
    r121 = r117;
    r122 = r118;
    r123 = r119;
    r124 = r120;
  } else {
    r115 = HEAPU8[(r111 & 255) - 1 + 440372 | 0];
    r121 = HEAP8[r115 + 455977 | 0] ^ r117;
    r122 = HEAP8[r115 + 455831 | 0] ^ r118;
    r123 = HEAP8[r115 + 455800 | 0] ^ r119;
    r124 = HEAP8[r115 + 455890 | 0] ^ r120;
  }
  r120 = r2 + 30 | 0;
  r115 = HEAP8[r120];
  if (r115 << 24 >> 24 == 0) {
    r125 = r121;
    r126 = r122;
    r127 = r123;
    r128 = r124;
  } else {
    r119 = HEAPU8[(r115 & 255) - 1 + 440372 | 0];
    r125 = HEAP8[r119 + 455964 | 0] ^ r121;
    r126 = HEAP8[r119 + 455819 | 0] ^ r122;
    r127 = HEAP8[r119 + 455795 | 0] ^ r123;
    r128 = HEAP8[r119 + 455977 | 0] ^ r124;
  }
  r124 = r2 + 31 | 0;
  r119 = HEAP8[r124];
  if (r119 << 24 >> 24 == 0) {
    r129 = r125;
    r130 = r126;
    r131 = r127;
    r132 = r128;
  } else {
    r123 = HEAPU8[(r119 & 255) - 1 + 440372 | 0];
    r129 = HEAP8[r123 + 455763 | 0] ^ r125;
    r130 = HEAP8[r123 + 455880 | 0] ^ r126;
    r131 = HEAP8[r123 + 455948 | 0] ^ r127;
    r132 = HEAP8[r123 + 455964 | 0] ^ r128;
  }
  r128 = 0;
  r123 = 0;
  r127 = 1;
  while (1) {
    r126 = r127 + 464136 | 0;
    HEAP32[(r128 << 2 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[r126] ^ r39) & 255) + 439504 | 0] ^ r70) & 255) + 439760 | 0] ^ r101) & 255) + 439760 | 0] ^ r132) & 255) << 2) + 447208 >> 2];
    r125 = r123 + 464136 | 0;
    HEAP32[((r128 << 2) + 1024 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[r125] ^ r38) & 255) + 439504 | 0] ^ r69) & 255) + 439504 | 0] ^ r100) & 255) + 439760 | 0] ^ r131) & 255) << 2) + 448232 >> 2];
    HEAP32[((r128 << 2) + 2048 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[r125] ^ r37) & 255) + 439760 | 0] ^ r68) & 255) + 439760 | 0] ^ r99) & 255) + 439504 | 0] ^ r130) & 255) << 2) + 449256 >> 2];
    HEAP32[((r128 << 2) + 3072 >> 2) + r4] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[r126] ^ r36) & 255) + 439760 | 0] ^ r67) & 255) + 439504 | 0] ^ r98) & 255) + 439504 | 0] ^ r129) & 255) << 2) + 450280 >> 2];
    r126 = r128 + 1 | 0;
    if ((r126 | 0) == 256) {
      break;
    } else {
      r128 = r126;
      r123 = r123 + 2 | 0;
      r127 = r127 + 2 | 0;
    }
  }
  r127 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 103) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 243) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 103) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 243) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r123 = r127 << 8 | r127 >>> 24;
  r127 = r123 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 169) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 117) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 169) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 117) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r128 = r127 + r123 | 0;
  HEAP32[r4 + 1024] = r127;
  HEAP32[r4 + 1025] = r128 << 9 | r128 >>> 23;
  r128 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 232) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 244) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 232) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 244) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r127 = r128 << 8 | r128 >>> 24;
  r128 = r127 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 179) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 198) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 179) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 198) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r123 = r128 + r127 | 0;
  HEAP32[r4 + 1026] = r128;
  HEAP32[r4 + 1027] = r123 << 9 | r123 >>> 23;
  r123 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 253) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 123) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 253) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 123) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r128 = r123 << 8 | r123 >>> 24;
  r123 = r128 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 4) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 219) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 4) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 219) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r127 = r123 + r128 | 0;
  HEAP32[r4 + 1028] = r123;
  HEAP32[r4 + 1029] = r127 << 9 | r127 >>> 23;
  r127 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 118) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 200) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 118) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 200) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r123 = r127 << 8 | r127 >>> 24;
  r127 = r123 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 163) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 251) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 163) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 251) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r128 = r127 + r123 | 0;
  HEAP32[r4 + 1030] = r127;
  HEAP32[r4 + 1031] = r128 << 9 | r128 >>> 23;
  r128 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 146) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 211) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 146) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 211) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r127 = r128 << 8 | r128 >>> 24;
  r128 = r127 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 154) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 74) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 154) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 74) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r123 = r128 + r127 | 0;
  HEAP32[r4 + 1032] = r128;
  HEAP32[r4 + 1033] = r123 << 9 | r123 >>> 23;
  r123 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 120) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 107) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 120) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 107) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r128 = r123 << 8 | r123 >>> 24;
  r123 = r128 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 128) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 230) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 128) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 230) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r127 = r123 + r128 | 0;
  HEAP32[r4 + 1034] = r123;
  HEAP32[r4 + 1035] = r127 << 9 | r127 >>> 23;
  r127 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 221) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 125) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 221) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 125) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r123 = r127 << 8 | r127 >>> 24;
  r127 = r123 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 228) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 69) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 228) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 69) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r128 = r127 + r123 | 0;
  HEAP32[r4 + 1036] = r127;
  HEAP32[r4 + 1037] = r128 << 9 | r128 >>> 23;
  r128 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 56) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 75) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 56) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 75) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r127 = r128 << 8 | r128 >>> 24;
  r128 = r127 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 209) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 232) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 209) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 232) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r123 = r128 + r127 | 0;
  HEAP32[r4 + 1038] = r128;
  HEAP32[r4 + 1039] = r123 << 9 | r123 >>> 23;
  r123 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 198) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 50) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 198) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 50) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r128 = r123 << 8 | r123 >>> 24;
  r123 = r128 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 13) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 214) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 13) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 214) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r127 = r123 + r128 | 0;
  HEAP32[r4 + 1040] = r123;
  HEAP32[r4 + 1041] = r127 << 9 | r127 >>> 23;
  r127 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 152) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 253) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 152) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 253) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r123 = r127 << 8 | r127 >>> 24;
  r127 = r123 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 53) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 216) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 53) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 216) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r128 = r127 + r123 | 0;
  HEAP32[r4 + 1042] = r127;
  HEAP32[r4 + 1043] = r128 << 9 | r128 >>> 23;
  r128 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 247) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 113) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 247) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 113) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r127 = r128 << 8 | r128 >>> 24;
  r128 = r127 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 24) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 55) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 24) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 55) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r123 = r128 + r127 | 0;
  HEAP32[r4 + 1044] = r128;
  HEAP32[r4 + 1045] = r123 << 9 | r123 >>> 23;
  r123 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 108) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 225) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 108) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 225) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r128 = r123 << 8 | r123 >>> 24;
  r123 = r128 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 236) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 241) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 236) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 241) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r127 = r123 + r128 | 0;
  HEAP32[r4 + 1046] = r123;
  HEAP32[r4 + 1047] = r127 << 9 | r127 >>> 23;
  r127 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 117) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 15) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 117) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 15) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r123 = r127 << 8 | r127 >>> 24;
  r127 = r123 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 67) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 48) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 67) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 48) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r128 = r127 + r123 | 0;
  HEAP32[r4 + 1048] = r127;
  HEAP32[r4 + 1049] = r128 << 9 | r128 >>> 23;
  r128 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 38) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 27) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 38) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 27) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r127 = r128 << 8 | r128 >>> 24;
  r128 = r127 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 55) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 248) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 55) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 248) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r123 = r128 + r127 | 0;
  HEAP32[r4 + 1050] = r128;
  HEAP32[r4 + 1051] = r123 << 9 | r123 >>> 23;
  r123 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 19) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 250) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 19) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 250) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r128 = r123 << 8 | r123 >>> 24;
  r123 = r128 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 250) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 135) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 250) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 135) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r127 = r123 + r128 | 0;
  HEAP32[r4 + 1052] = r123;
  HEAP32[r4 + 1053] = r127 << 9 | r127 >>> 23;
  r127 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 72) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 63) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 72) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 63) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r123 = r127 << 8 | r127 >>> 24;
  r127 = r123 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 148) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 6) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 148) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 6) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r128 = r127 + r123 | 0;
  HEAP32[r4 + 1054] = r127;
  HEAP32[r4 + 1055] = r128 << 9 | r128 >>> 23;
  r128 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 208) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 186) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 208) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 186) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r127 = r128 << 8 | r128 >>> 24;
  r128 = r127 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 242) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 94) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 242) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 94) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r123 = r128 + r127 | 0;
  HEAP32[r4 + 1056] = r128;
  HEAP32[r4 + 1057] = r123 << 9 | r123 >>> 23;
  r123 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 48) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 91) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 48) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 91) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r128 = r123 << 8 | r123 >>> 24;
  r123 = r128 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 139) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 174) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 139) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 174) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r127 = r123 + r128 | 0;
  HEAP32[r4 + 1058] = r123;
  HEAP32[r4 + 1059] = r127 << 9 | r127 >>> 23;
  r127 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 84) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[HEAPU8[r112] + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 84) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[HEAPU8[r124] + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r123 = r127 << 8 | r127 >>> 24;
  r127 = r123 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 132) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 138) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 132) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 138) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r128 = r127 + r123 | 0;
  HEAP32[r4 + 1060] = r127;
  HEAP32[r4 + 1061] = r128 << 9 | r128 >>> 23;
  r128 = HEAP32[(((HEAP8[r23] ^ HEAP8[((HEAP8[r54] ^ HEAP8[((HEAP8[r85] ^ HEAP8[(HEAPU8[r116] ^ 35) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r19] ^ HEAP8[((HEAP8[r50] ^ HEAP8[((HEAP8[r81] ^ HEAP8[(HEAPU8[r112] ^ 157) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r27] ^ HEAP8[((HEAP8[r58] ^ HEAP8[((HEAP8[r89] ^ HEAP8[(HEAPU8[r120] ^ 35) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r31] ^ HEAP8[((HEAP8[r62] ^ HEAP8[((HEAP8[r93] ^ HEAP8[(HEAPU8[r124] ^ 157) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2];
  r124 = r128 << 8 | r128 >>> 24;
  r128 = r124 + (HEAP32[(((HEAP8[r7] ^ HEAP8[((HEAP8[r34] ^ HEAP8[((HEAP8[r61] ^ HEAP8[(HEAPU8[r96] ^ 223) + 439504 | 0]) & 255) + 439504 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 448232 >> 2] ^ HEAP32[(((HEAP8[r2] ^ HEAP8[((HEAP8[r35] ^ HEAP8[((HEAP8[r66] ^ HEAP8[(HEAPU8[r97] ^ 188) + 439504 | 0]) & 255) + 439760 | 0]) & 255) + 439760 | 0]) & 255) << 2) + 447208 >> 2] ^ HEAP32[(((HEAP8[r10] ^ HEAP8[((HEAP8[r42] ^ HEAP8[((HEAP8[r73] ^ HEAP8[(HEAPU8[r104] ^ 223) + 439760 | 0]) & 255) + 439760 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 449256 >> 2] ^ HEAP32[(((HEAP8[r14] ^ HEAP8[((HEAP8[r46] ^ HEAP8[((HEAP8[r77] ^ HEAP8[(HEAPU8[r108] ^ 188) + 439760 | 0]) & 255) + 439504 | 0]) & 255) + 439504 | 0]) & 255) << 2) + 450280 >> 2]) | 0;
  r108 = r128 + r124 | 0;
  HEAP32[r4 + 1062] = r128;
  HEAP32[r4 + 1063] = r108 << 9 | r108 >>> 23;
  r6 = 0;
  STACKTOP = r5;
  return r6;
}
function _whirlpool_read(r1) {
  return r1 + 64 | 0;
}
function _selftest996() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 4272 | 0;
  r2 = r1;
  _twofish_setkey(r2, 415848, 16);
  r3 = r1 + 4256 | 0;
  _twofish_encrypt(r2, r3, 415612);
  do {
    if ((_memcmp(r3, 416656, 16) | 0) == 0) {
      _twofish_decrypt(r2, r3, r3);
      if ((_memcmp(r3, 415612, 16) | 0) != 0) {
        r4 = 472540;
        break;
      }
      _twofish_setkey(r2, 415736, 32);
      _twofish_encrypt(r2, r3, 415572);
      if ((_memcmp(r3, 416584, 16) | 0) != 0) {
        r4 = 471136;
        break;
      }
      _twofish_decrypt(r2, r3, r3);
      r4 = (_memcmp(r3, 415572, 16) | 0) == 0 ? 0 : 469760;
    } else {
      r4 = 474772;
    }
  } while (0);
  STACKTOP = r1;
  return r4;
}
function _whirlpool_init(r1) {
  _memset(r1, 0, 164);
  return;
}
function _whirlpool_write(r1, r2, r3) {
  _whirlpool_add(r1, r2, r3);
  return;
}
function _whirlpool_final(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = 0;
  r3 = r1;
  _whirlpool_add(r3, 0, 0);
  r4 = (r1 + 128 | 0) >> 2;
  r5 = HEAP32[r4];
  HEAP32[r4] = r5 + 1 | 0;
  HEAP8[r5 + (r1 + 64) | 0] = -128;
  r5 = HEAP32[r4];
  do {
    if (r5 >>> 0 > 32) {
      L244 : do {
        if (r5 >>> 0 < 64) {
          r6 = r5;
          while (1) {
            HEAP32[r4] = r6 + 1 | 0;
            HEAP8[r6 + (r1 + 64) | 0] = 0;
            r7 = HEAP32[r4];
            if (r7 >>> 0 < 64) {
              r6 = r7;
            } else {
              break L244;
            }
          }
        }
      } while (0);
      _whirlpool_add(r3, 0, 0);
      r2 = 184;
      break;
    } else {
      r8 = r5;
    }
  } while (0);
  while (1) {
    if (r2 == 184) {
      r2 = 0;
      r8 = HEAP32[r4];
    }
    if (r8 >>> 0 >= 32) {
      break;
    }
    HEAP32[r4] = r8 + 1 | 0;
    HEAP8[r8 + (r1 + 64) | 0] = 0;
    r2 = 184;
    continue;
  }
  _memcpy(r8 + (r1 + 64) | 0, r1 + 132 | 0, 32);
  HEAP32[r4] = HEAP32[r4] + 32 | 0;
  _whirlpool_add(r3, 0, 0);
  r3 = r1;
  r4 = 0;
  while (1) {
    r8 = ((r4 << 3) + r3 | 0) >> 2;
    r2 = r4 << 3;
    HEAP8[r2 + (r1 + 64) | 0] = (HEAP32[r8 + 1] >>> 24 | 0 << 8) & 255;
    HEAP8[r1 + (r2 | 1) + 64 | 0] = (HEAP32[r8 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[r1 + (r2 | 2) + 64 | 0] = (HEAP32[r8 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[r1 + (r2 | 3) + 64 | 0] = HEAP32[r8 + 1] & 255;
    HEAP8[r1 + (r2 | 4) + 64 | 0] = (HEAP32[r8] >>> 24 | HEAP32[r8 + 1] << 8) & 255;
    HEAP8[r1 + (r2 | 5) + 64 | 0] = (HEAP32[r8] >>> 16 | HEAP32[r8 + 1] << 16) & 255;
    HEAP8[r1 + (r2 | 6) + 64 | 0] = (HEAP32[r8] >>> 8 | HEAP32[r8 + 1] << 24) & 255;
    HEAP8[r1 + (r2 | 7) + 64 | 0] = HEAP32[r8] & 255;
    r8 = r4 + 1 | 0;
    if ((r8 | 0) == 8) {
      break;
    } else {
      r4 = r8;
    }
  }
  return;
}
function _whirlpool_add(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = 0;
  r5 = (r1 + 128 | 0) >> 2;
  r6 = r1 + 64 | 0;
  r7 = r3;
  r3 = r2;
  L258 : while (1) {
    r8 = r7;
    r9 = 0;
    if ((HEAP32[r5] | 0) == 64) {
      _whirlpool_transform(r1, r6);
      HEAP32[r5] = 0;
    }
    if ((r3 | 0) == 0) {
      r4 = 210;
      break;
    }
    if ((HEAP32[r5] | 0) == 0) {
      r10 = r3;
      r11 = r7;
      break;
    }
    if ((r7 | 0) == 0) {
      r7 = 0;
      r3 = 0;
      continue;
    } else {
      r12 = r7;
      r13 = r3;
    }
    while (1) {
      r2 = HEAP32[r5];
      if (r2 >>> 0 >= 64) {
        r4 = 197;
        break L258;
      }
      r14 = HEAP8[r13];
      HEAP32[r5] = r2 + 1 | 0;
      HEAP8[r1 + (r2 + 64) | 0] = r14;
      r14 = r12 - 1 | 0;
      if ((r14 | 0) == 0) {
        r7 = 0;
        r3 = 0;
        continue L258;
      } else {
        r12 = r14;
        r13 = r13 + 1 | 0;
      }
    }
  }
  if (r4 == 197) {
    _whirlpool_add(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  } else if (r4 == 210) {
    return;
  }
  L272 : do {
    if (r11 >>> 0 > 63) {
      r4 = r11;
      r12 = r10;
      while (1) {
        _whirlpool_transform(r1, r12);
        HEAP32[r5] = 0;
        r13 = r4 - 64 | 0;
        r3 = r12 + 64 | 0;
        if (r13 >>> 0 > 63) {
          r4 = r13;
          r12 = r3;
        } else {
          r15 = r13;
          r16 = r3;
          break L272;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  L276 : do {
    if ((r15 | 0) != 0) {
      r10 = r15;
      r11 = r16;
      while (1) {
        r12 = HEAP32[r5];
        if (r12 >>> 0 >= 64) {
          break L276;
        }
        r4 = HEAP8[r11];
        HEAP32[r5] = r12 + 1 | 0;
        HEAP8[r1 + (r12 + 64) | 0] = r4;
        r4 = r10 - 1 | 0;
        if ((r4 | 0) == 0) {
          break L276;
        } else {
          r10 = r4;
          r11 = r11 + 1 | 0;
        }
      }
    }
  } while (0);
  r5 = r9 << 3 | r8 >>> 29;
  r9 = r8 << 3 | 0 >>> 29;
  r8 = 0;
  r16 = 1;
  while (1) {
    if ((r9 | 0) == 0 & (r5 | 0) == 0 & (r8 | 0) == 0) {
      r17 = r5;
      r18 = r9;
      r19 = r8;
      break;
    }
    r15 = 32 - r16 + r1 + 132 | 0;
    r11 = HEAPU8[r15];
    r10 = _i64Add(_i64Add(r8, 0, r9 & 255, r5 & 0), tempRet0, r11, 0);
    HEAP8[r15] = r10 & 255;
    r15 = r9 >>> 8 | r5 << 24;
    r11 = r5 >>> 8 | 0 << 24;
    r4 = r10 >>> 8;
    r10 = r16 + 1 | 0;
    if (r10 >>> 0 < 33) {
      r5 = r11;
      r9 = r15;
      r8 = r4;
      r16 = r10;
    } else {
      r17 = r11;
      r18 = r15;
      r19 = r4;
      break;
    }
  }
  if ((r18 | 0) == 0 & (r17 | 0) == 0 & (r19 | 0) == 0) {
    return;
  } else {
    __gcry_assert_failed(490248, 481656, 1351, 494388);
  }
}
function _whirlpool_transform(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  r4 = r3;
  r5 = r3 + 64;
  r6 = r3 + 128;
  r7 = r3 + 192;
  r8 = 0;
  while (1) {
    r9 = r8 << 3;
    r10 = HEAPU8[r2 + (r9 | 4) | 0];
    r11 = HEAPU8[r2 + (r9 | 5) | 0];
    r12 = HEAPU8[r2 + (r9 | 6) | 0];
    r13 = HEAPU8[r2 + (r9 | 1) | 0] << 16 | 0 >>> 16 | (HEAPU8[r2 + r9 | 0] << 24 | 0 >>> 8) | (HEAPU8[r2 + (r9 | 2) | 0] << 8 | 0 >>> 24) | HEAPU8[r2 + (r9 | 3) | 0] | (0 << 24 | r10 >>> 8) | (0 << 16 | r11 >>> 16) | (0 << 8 | r12 >>> 24) | 0;
    r14 = (r8 << 3) + r4 | 0;
    HEAP32[r14 >> 2] = 0 << 16 | 0 >>> 16 | (0 << 24 | 0 >>> 8) | (0 << 8 | 0 >>> 24) | (r10 << 24 | 0 >>> 8) | (r11 << 16 | 0 >>> 16) | (r12 << 8 | 0 >>> 24) | HEAPU8[r2 + (r9 | 7) | 0];
    HEAP32[r14 + 4 >> 2] = r13;
    r13 = r8 + 1 | 0;
    if ((r13 | 0) == 8) {
      break;
    } else {
      r8 = r13;
    }
  }
  r8 = r1;
  r2 = r5;
  r13 = r6;
  r14 = r7;
  _memcpy(r2, r8, 64);
  _memcpy(r13, r8, 64);
  r8 = r4 | 0;
  r9 = (r6 | 0) >> 2;
  r12 = HEAP32[r9 + 1] ^ HEAP32[r8 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r8 >> 2];
  HEAP32[r9 + 1] = r12;
  r12 = r4 + 8 | 0;
  r9 = (r6 + 8 | 0) >> 2;
  r8 = HEAP32[r9 + 1] ^ HEAP32[r12 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r12 >> 2];
  HEAP32[r9 + 1] = r8;
  r8 = r4 + 16 | 0;
  r9 = (r6 + 16 | 0) >> 2;
  r12 = HEAP32[r9 + 1] ^ HEAP32[r8 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r8 >> 2];
  HEAP32[r9 + 1] = r12;
  r12 = r4 + 24 | 0;
  r9 = (r6 + 24 | 0) >> 2;
  r8 = HEAP32[r9 + 1] ^ HEAP32[r12 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r12 >> 2];
  HEAP32[r9 + 1] = r8;
  r8 = r4 + 32 | 0;
  r9 = (r6 + 32 | 0) >> 2;
  r12 = HEAP32[r9 + 1] ^ HEAP32[r8 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r8 >> 2];
  HEAP32[r9 + 1] = r12;
  r12 = r4 + 40 | 0;
  r9 = (r6 + 40 | 0) >> 2;
  r8 = HEAP32[r9 + 1] ^ HEAP32[r12 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r12 >> 2];
  HEAP32[r9 + 1] = r8;
  r8 = r4 + 48 | 0;
  r9 = (r6 + 48 | 0) >> 2;
  r12 = HEAP32[r9 + 1] ^ HEAP32[r8 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r8 >> 2];
  HEAP32[r9 + 1] = r12;
  r12 = r4 + 56 | 0;
  r9 = (r6 + 56 | 0) >> 2;
  r8 = HEAP32[r9 + 1] ^ HEAP32[r12 + 4 >> 2];
  HEAP32[r9] = HEAP32[r9] ^ HEAP32[r12 >> 2];
  HEAP32[r9 + 1] = r8;
  r8 = (r5 | 0) >> 2;
  r9 = (r5 + 56 | 0) >> 2;
  r12 = (r5 + 48 | 0) >> 2;
  r11 = (r5 + 40 | 0) >> 2;
  r10 = (r5 + 32 | 0) >> 2;
  r15 = (r5 + 24 | 0) >> 2;
  r16 = (r5 + 16 | 0) >> 2;
  r17 = (r5 + 8 | 0) >> 2;
  r5 = (r7 | 0) >> 2;
  r18 = (r7 + 8 | 0) >> 2;
  r19 = (r7 + 16 | 0) >> 2;
  r20 = (r7 + 24 | 0) >> 2;
  r21 = (r7 + 32 | 0) >> 2;
  r22 = (r7 + 40 | 0) >> 2;
  r23 = (r7 + 48 | 0) >> 2;
  r24 = (r7 + 56 | 0) >> 2;
  r7 = (r6 | 0) >> 2;
  r25 = (r6 + 56 | 0) >> 2;
  r26 = (r6 + 48 | 0) >> 2;
  r27 = (r6 + 40 | 0) >> 2;
  r28 = (r6 + 32 | 0) >> 2;
  r29 = (r6 + 24 | 0) >> 2;
  r30 = (r6 + 16 | 0) >> 2;
  r31 = (r6 + 8 | 0) >> 2;
  r32 = 0;
  while (1) {
    r33 = ((HEAP32[r8 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r34 = (((HEAP32[r9 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r35 = (((HEAP32[r12 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r36 = ((HEAP32[r11 + 1] & 255) << 3) + 521240 | 0;
    r37 = (((HEAP32[r10] >>> 24 | HEAP32[r10 + 1] << 8) & 255) << 3) + 519192 | 0;
    r38 = (((HEAP32[r15] >>> 16 | HEAP32[r15 + 1] << 16) & 255) << 3) + 517144 | 0;
    r39 = (((HEAP32[r16] >>> 8 | HEAP32[r16 + 1] << 24) & 255) << 3) + 515096 | 0;
    r40 = ((HEAP32[r17] & 255) << 3) + 513048 | 0;
    r41 = (r32 << 3) + 439420 | 0;
    r42 = HEAP32[r34 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2];
    HEAP32[r5] = HEAP32[r34 >> 2] ^ HEAP32[r33 >> 2] ^ HEAP32[r35 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r41 >> 2];
    HEAP32[r5 + 1] = r42;
    r42 = ((HEAP32[r17 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r41 = (((HEAP32[r8 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r9 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r12 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r11] >>> 24 | HEAP32[r11 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r10] >>> 16 | HEAP32[r10 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r15] >>> 8 | HEAP32[r15 + 1] << 24) & 255) << 3) + 515096 | 0;
    r35 = ((HEAP32[r16] & 255) << 3) + 513048 | 0;
    r33 = HEAP32[r41 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2];
    HEAP32[r18] = HEAP32[r41 >> 2] ^ HEAP32[r42 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r35 >> 2];
    HEAP32[r18 + 1] = r33;
    r33 = ((HEAP32[r16 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r35 = (((HEAP32[r17 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r36 = (((HEAP32[r8 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r37 = ((HEAP32[r9 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r12] >>> 24 | HEAP32[r12 + 1] << 8) & 255) << 3) + 519192 | 0;
    r39 = (((HEAP32[r11] >>> 16 | HEAP32[r11 + 1] << 16) & 255) << 3) + 517144 | 0;
    r40 = (((HEAP32[r10] >>> 8 | HEAP32[r10 + 1] << 24) & 255) << 3) + 515096 | 0;
    r42 = ((HEAP32[r15] & 255) << 3) + 513048 | 0;
    r41 = HEAP32[r35 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2];
    HEAP32[r19] = HEAP32[r35 >> 2] ^ HEAP32[r33 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r42 >> 2];
    HEAP32[r19 + 1] = r41;
    r41 = ((HEAP32[r15 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r42 = (((HEAP32[r16 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r17 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r8 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r9] >>> 24 | HEAP32[r9 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r12] >>> 16 | HEAP32[r12 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r11] >>> 8 | HEAP32[r11 + 1] << 24) & 255) << 3) + 515096 | 0;
    r33 = ((HEAP32[r10] & 255) << 3) + 513048 | 0;
    r35 = HEAP32[r42 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2];
    HEAP32[r20] = HEAP32[r42 >> 2] ^ HEAP32[r41 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r33 >> 2];
    HEAP32[r20 + 1] = r35;
    r35 = ((HEAP32[r10 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r33 = (((HEAP32[r15 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r36 = (((HEAP32[r16 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r37 = ((HEAP32[r17 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r8] >>> 24 | HEAP32[r8 + 1] << 8) & 255) << 3) + 519192 | 0;
    r39 = (((HEAP32[r9] >>> 16 | HEAP32[r9 + 1] << 16) & 255) << 3) + 517144 | 0;
    r40 = (((HEAP32[r12] >>> 8 | HEAP32[r12 + 1] << 24) & 255) << 3) + 515096 | 0;
    r41 = ((HEAP32[r11] & 255) << 3) + 513048 | 0;
    r42 = HEAP32[r33 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2];
    HEAP32[r21] = HEAP32[r33 >> 2] ^ HEAP32[r35 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r41 >> 2];
    HEAP32[r21 + 1] = r42;
    r42 = ((HEAP32[r11 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r41 = (((HEAP32[r10 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r15 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r16 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r17] >>> 24 | HEAP32[r17 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r8] >>> 16 | HEAP32[r8 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r9] >>> 8 | HEAP32[r9 + 1] << 24) & 255) << 3) + 515096 | 0;
    r35 = ((HEAP32[r12] & 255) << 3) + 513048 | 0;
    r33 = HEAP32[r41 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2];
    HEAP32[r22] = HEAP32[r41 >> 2] ^ HEAP32[r42 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r35 >> 2];
    HEAP32[r22 + 1] = r33;
    r33 = ((HEAP32[r12 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r35 = (((HEAP32[r11 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r36 = (((HEAP32[r10 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r37 = ((HEAP32[r15 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r16] >>> 24 | HEAP32[r16 + 1] << 8) & 255) << 3) + 519192 | 0;
    r39 = (((HEAP32[r17] >>> 16 | HEAP32[r17 + 1] << 16) & 255) << 3) + 517144 | 0;
    r40 = (((HEAP32[r8] >>> 8 | HEAP32[r8 + 1] << 24) & 255) << 3) + 515096 | 0;
    r42 = ((HEAP32[r9] & 255) << 3) + 513048 | 0;
    r41 = HEAP32[r35 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2];
    HEAP32[r23] = HEAP32[r35 >> 2] ^ HEAP32[r33 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r42 >> 2];
    HEAP32[r23 + 1] = r41;
    r41 = ((HEAP32[r9 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r42 = (((HEAP32[r12 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r11 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r10 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r15] >>> 24 | HEAP32[r15 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r16] >>> 16 | HEAP32[r16 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r17] >>> 8 | HEAP32[r17 + 1] << 24) & 255) << 3) + 515096 | 0;
    r33 = ((HEAP32[r8] & 255) << 3) + 513048 | 0;
    r35 = HEAP32[r42 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2];
    HEAP32[r24] = HEAP32[r42 >> 2] ^ HEAP32[r41 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r33 >> 2];
    HEAP32[r24 + 1] = r35;
    _memcpy(r2, r14, 64);
    r35 = ((HEAP32[r7 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r33 = (((HEAP32[r25 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r36 = (((HEAP32[r26 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r37 = ((HEAP32[r27 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r28] >>> 24 | HEAP32[r28 + 1] << 8) & 255) << 3) + 519192 | 0;
    r39 = (((HEAP32[r29] >>> 16 | HEAP32[r29 + 1] << 16) & 255) << 3) + 517144 | 0;
    r40 = (((HEAP32[r30] >>> 8 | HEAP32[r30 + 1] << 24) & 255) << 3) + 515096 | 0;
    r41 = ((HEAP32[r31] & 255) << 3) + 513048 | 0;
    r42 = HEAP32[r33 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2] ^ HEAP32[r8 + 1];
    HEAP32[r5] = HEAP32[r33 >> 2] ^ HEAP32[r35 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r41 >> 2] ^ HEAP32[r8];
    HEAP32[r5 + 1] = r42;
    r42 = ((HEAP32[r31 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r41 = (((HEAP32[r7 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r25 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r26 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r27] >>> 24 | HEAP32[r27 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r28] >>> 16 | HEAP32[r28 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r29] >>> 8 | HEAP32[r29 + 1] << 24) & 255) << 3) + 515096 | 0;
    r35 = ((HEAP32[r30] & 255) << 3) + 513048 | 0;
    r33 = HEAP32[r41 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2] ^ HEAP32[r17 + 1];
    HEAP32[r18] = HEAP32[r41 >> 2] ^ HEAP32[r42 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r35 >> 2] ^ HEAP32[r17];
    HEAP32[r18 + 1] = r33;
    r33 = ((HEAP32[r30 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r35 = (((HEAP32[r31 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r36 = (((HEAP32[r7 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r37 = ((HEAP32[r25 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r26] >>> 24 | HEAP32[r26 + 1] << 8) & 255) << 3) + 519192 | 0;
    r39 = (((HEAP32[r27] >>> 16 | HEAP32[r27 + 1] << 16) & 255) << 3) + 517144 | 0;
    r40 = (((HEAP32[r28] >>> 8 | HEAP32[r28 + 1] << 24) & 255) << 3) + 515096 | 0;
    r42 = ((HEAP32[r29] & 255) << 3) + 513048 | 0;
    r41 = HEAP32[r35 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2] ^ HEAP32[r16 + 1];
    HEAP32[r19] = HEAP32[r35 >> 2] ^ HEAP32[r33 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r42 >> 2] ^ HEAP32[r16];
    HEAP32[r19 + 1] = r41;
    r41 = ((HEAP32[r29 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r42 = (((HEAP32[r30 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r31 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r7 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r25] >>> 24 | HEAP32[r25 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r26] >>> 16 | HEAP32[r26 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r27] >>> 8 | HEAP32[r27 + 1] << 24) & 255) << 3) + 515096 | 0;
    r33 = ((HEAP32[r28] & 255) << 3) + 513048 | 0;
    r35 = HEAP32[r42 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2] ^ HEAP32[r15 + 1];
    HEAP32[r20] = HEAP32[r42 >> 2] ^ HEAP32[r41 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r33 >> 2] ^ HEAP32[r15];
    HEAP32[r20 + 1] = r35;
    r35 = ((HEAP32[r28 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r33 = (((HEAP32[r29 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r36 = (((HEAP32[r30 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r37 = ((HEAP32[r31 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r7] >>> 24 | HEAP32[r7 + 1] << 8) & 255) << 3) + 519192 | 0;
    r39 = (((HEAP32[r25] >>> 16 | HEAP32[r25 + 1] << 16) & 255) << 3) + 517144 | 0;
    r40 = (((HEAP32[r26] >>> 8 | HEAP32[r26 + 1] << 24) & 255) << 3) + 515096 | 0;
    r41 = ((HEAP32[r27] & 255) << 3) + 513048 | 0;
    r42 = HEAP32[r33 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2] ^ HEAP32[r10 + 1];
    HEAP32[r21] = HEAP32[r33 >> 2] ^ HEAP32[r35 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r41 >> 2] ^ HEAP32[r10];
    HEAP32[r21 + 1] = r42;
    r42 = ((HEAP32[r27 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r41 = (((HEAP32[r28 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r29 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r30 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r31] >>> 24 | HEAP32[r31 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r7] >>> 16 | HEAP32[r7 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r25] >>> 8 | HEAP32[r25 + 1] << 24) & 255) << 3) + 515096 | 0;
    r35 = ((HEAP32[r26] & 255) << 3) + 513048 | 0;
    r33 = HEAP32[r41 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r35 + 4 >> 2] ^ HEAP32[r11 + 1];
    HEAP32[r22] = HEAP32[r41 >> 2] ^ HEAP32[r42 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r35 >> 2] ^ HEAP32[r11];
    HEAP32[r22 + 1] = r33;
    r33 = ((HEAP32[r26 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r35 = (((HEAP32[r27 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r36 = (((HEAP32[r28 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r37 = ((HEAP32[r29 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r30] >>> 24 | HEAP32[r30 + 1] << 8) & 255) << 3) + 519192 | 0;
    r39 = (((HEAP32[r31] >>> 16 | HEAP32[r31 + 1] << 16) & 255) << 3) + 517144 | 0;
    r40 = (((HEAP32[r7] >>> 8 | HEAP32[r7 + 1] << 24) & 255) << 3) + 515096 | 0;
    r42 = ((HEAP32[r25] & 255) << 3) + 513048 | 0;
    r41 = HEAP32[r35 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r42 + 4 >> 2] ^ HEAP32[r12 + 1];
    HEAP32[r23] = HEAP32[r35 >> 2] ^ HEAP32[r33 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r42 >> 2] ^ HEAP32[r12];
    HEAP32[r23 + 1] = r41;
    r41 = ((HEAP32[r25 + 1] >>> 24 | 0 << 8) << 3) + 527384 | 0;
    r42 = (((HEAP32[r26 + 1] >>> 16 | 0 << 16) & 255) << 3) + 525336 | 0;
    r40 = (((HEAP32[r27 + 1] >>> 8 | 0 << 24) & 255) << 3) + 523288 | 0;
    r39 = ((HEAP32[r28 + 1] & 255) << 3) + 521240 | 0;
    r38 = (((HEAP32[r29] >>> 24 | HEAP32[r29 + 1] << 8) & 255) << 3) + 519192 | 0;
    r37 = (((HEAP32[r30] >>> 16 | HEAP32[r30 + 1] << 16) & 255) << 3) + 517144 | 0;
    r36 = (((HEAP32[r31] >>> 8 | HEAP32[r31 + 1] << 24) & 255) << 3) + 515096 | 0;
    r33 = ((HEAP32[r7] & 255) << 3) + 513048 | 0;
    r35 = HEAP32[r42 + 4 >> 2] ^ HEAP32[r41 + 4 >> 2] ^ HEAP32[r40 + 4 >> 2] ^ HEAP32[r39 + 4 >> 2] ^ HEAP32[r38 + 4 >> 2] ^ HEAP32[r37 + 4 >> 2] ^ HEAP32[r36 + 4 >> 2] ^ HEAP32[r33 + 4 >> 2] ^ HEAP32[r9 + 1];
    HEAP32[r24] = HEAP32[r42 >> 2] ^ HEAP32[r41 >> 2] ^ HEAP32[r40 >> 2] ^ HEAP32[r39 >> 2] ^ HEAP32[r38 >> 2] ^ HEAP32[r37 >> 2] ^ HEAP32[r36 >> 2] ^ HEAP32[r33 >> 2] ^ HEAP32[r9];
    HEAP32[r24 + 1] = r35;
    _memcpy(r13, r14, 64);
    r35 = r32 + 1 | 0;
    if ((r35 | 0) == 10) {
      break;
    } else {
      r32 = r35;
    }
  }
  r32 = r4 | 0;
  r14 = (r1 | 0) >> 2;
  r13 = HEAP32[r14 + 1] ^ HEAP32[r32 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r32 >> 2];
  HEAP32[r14 + 1] = r13;
  r13 = r4 + 8 | 0;
  r14 = (r1 + 8 | 0) >> 2;
  r32 = HEAP32[r14 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r13 >> 2];
  HEAP32[r14 + 1] = r32;
  r32 = r4 + 16 | 0;
  r14 = (r1 + 16 | 0) >> 2;
  r13 = HEAP32[r14 + 1] ^ HEAP32[r32 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r32 >> 2];
  HEAP32[r14 + 1] = r13;
  r13 = r4 + 24 | 0;
  r14 = (r1 + 24 | 0) >> 2;
  r32 = HEAP32[r14 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r13 >> 2];
  HEAP32[r14 + 1] = r32;
  r32 = r4 + 32 | 0;
  r14 = (r1 + 32 | 0) >> 2;
  r13 = HEAP32[r14 + 1] ^ HEAP32[r32 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r32 >> 2];
  HEAP32[r14 + 1] = r13;
  r13 = r4 + 40 | 0;
  r14 = (r1 + 40 | 0) >> 2;
  r32 = HEAP32[r14 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r13 >> 2];
  HEAP32[r14 + 1] = r32;
  r32 = r4 + 48 | 0;
  r14 = (r1 + 48 | 0) >> 2;
  r13 = HEAP32[r14 + 1] ^ HEAP32[r32 + 4 >> 2];
  HEAP32[r14] = HEAP32[r14] ^ HEAP32[r32 >> 2];
  HEAP32[r14 + 1] = r13;
  r13 = r4 + 56 | 0;
  r4 = (r1 + 56 | 0) >> 2;
  r14 = HEAP32[r4 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r13 >> 2];
  HEAP32[r4 + 1] = r14;
  r14 = r6 | 0;
  r4 = (r1 | 0) >> 2;
  r13 = HEAP32[r4 + 1] ^ HEAP32[r14 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r14 >> 2];
  HEAP32[r4 + 1] = r13;
  r13 = r6 + 8 | 0;
  r4 = (r1 + 8 | 0) >> 2;
  r14 = HEAP32[r4 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r13 >> 2];
  HEAP32[r4 + 1] = r14;
  r14 = r6 + 16 | 0;
  r4 = (r1 + 16 | 0) >> 2;
  r13 = HEAP32[r4 + 1] ^ HEAP32[r14 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r14 >> 2];
  HEAP32[r4 + 1] = r13;
  r13 = r6 + 24 | 0;
  r4 = (r1 + 24 | 0) >> 2;
  r14 = HEAP32[r4 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r13 >> 2];
  HEAP32[r4 + 1] = r14;
  r14 = r6 + 32 | 0;
  r4 = (r1 + 32 | 0) >> 2;
  r13 = HEAP32[r4 + 1] ^ HEAP32[r14 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r14 >> 2];
  HEAP32[r4 + 1] = r13;
  r13 = r6 + 40 | 0;
  r4 = (r1 + 40 | 0) >> 2;
  r14 = HEAP32[r4 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r13 >> 2];
  HEAP32[r4 + 1] = r14;
  r14 = r6 + 48 | 0;
  r4 = (r1 + 48 | 0) >> 2;
  r13 = HEAP32[r4 + 1] ^ HEAP32[r14 + 4 >> 2];
  HEAP32[r4] = HEAP32[r4] ^ HEAP32[r14 >> 2];
  HEAP32[r4 + 1] = r13;
  r13 = r6 + 56 | 0;
  r6 = (r1 + 56 | 0) >> 2;
  r1 = HEAP32[r6 + 1] ^ HEAP32[r13 + 4 >> 2];
  HEAP32[r6] = HEAP32[r6] ^ HEAP32[r13 >> 2];
  HEAP32[r6 + 1] = r1;
  STACKTOP = r3;
  return;
}
function __gcry_mpi_normalize(r1) {
  var r2, r3, r4, r5;
  r2 = 0;
  do {
    if ((r1 | 0) != 0) {
      if ((HEAP32[r1 + 12 >> 2] & 4 | 0) == 0) {
        break;
      }
      return;
    }
  } while (0);
  r3 = r1 + 4 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 | 0) == 0) {
    return;
  }
  r5 = r1 + 16 | 0;
  r1 = r4;
  while (1) {
    r4 = r1 - 1 | 0;
    if ((HEAP32[HEAP32[r5 >> 2] + (r4 << 2) >> 2] | 0) != 0) {
      r2 = 226;
      break;
    }
    HEAP32[r3 >> 2] = r4;
    if ((r4 | 0) == 0) {
      r2 = 227;
      break;
    } else {
      r1 = r4;
    }
  }
  if (r2 == 226) {
    return;
  } else if (r2 == 227) {
    return;
  }
}
function __gcry_mpi_test_bit(r1, r2) {
  var r3, r4;
  r3 = r2 >>> 5;
  if (r3 >>> 0 >= HEAP32[r1 + 4 >> 2] >>> 0) {
    r4 = 0;
    return r4;
  }
  r4 = (HEAP32[HEAP32[r1 + 16 >> 2] + (r3 << 2) >> 2] & 1 << (r2 & 31) | 0) != 0 & 1;
  return r4;
}
function __gcry_mpi_clear_highbit(r1, r2) {
  var r3, r4, r5;
  r3 = r2 >>> 5;
  r4 = r1 + 4 | 0;
  if (r3 >>> 0 >= HEAP32[r4 >> 2] >>> 0) {
    return;
  }
  r5 = r1 + 16 | 0;
  r1 = r2 & 31;
  while (1) {
    r2 = (r3 << 2) + HEAP32[r5 >> 2] | 0;
    HEAP32[r2 >> 2] = HEAP32[r2 >> 2] & (1 << r1 ^ -1);
    r2 = r1 + 1 | 0;
    if ((r2 | 0) == 32) {
      break;
    } else {
      r1 = r2;
    }
  }
  HEAP32[r4 >> 2] = r3 + 1 | 0;
  return;
}
function __gcry_mpi_clear_bit(r1, r2) {
  var r3, r4;
  r3 = r2 >>> 5;
  if (r3 >>> 0 >= HEAP32[r1 + 4 >> 2] >>> 0) {
    return;
  }
  r4 = (r3 << 2) + HEAP32[r1 + 16 >> 2] | 0;
  HEAP32[r4 >> 2] = HEAP32[r4 >> 2] & (1 << (r2 & 31) ^ -1);
  return;
}
function __gcry_mpi_rshift_limbs(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = HEAP32[r1 + 16 >> 2] >> 2;
  r4 = (r1 + 4 | 0) >> 2;
  r1 = HEAP32[r4];
  if (r1 >>> 0 <= r2 >>> 0) {
    r5 = 0;
    HEAP32[r4] = r5;
    return;
  }
  L331 : do {
    if ((r1 | 0) == (r2 | 0)) {
      r6 = 0;
    } else {
      r7 = r1 - r2 | 0;
      r8 = 0;
      while (1) {
        HEAP32[(r8 << 2 >> 2) + r3] = HEAP32[(r8 + r2 << 2 >> 2) + r3];
        r9 = r8 + 1 | 0;
        if ((r9 | 0) == (r7 | 0)) {
          r6 = r7;
          break L331;
        } else {
          r8 = r9;
        }
      }
    }
  } while (0);
  HEAP32[(r6 << 2 >> 2) + r3] = 0;
  r5 = HEAP32[r4] - r2 | 0;
  HEAP32[r4] = r5;
  return;
}
function __gcry_mpi_add_ui(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = HEAP32[r2 + 4 >> 2];
  r5 = HEAP32[r2 + 8 >> 2];
  r6 = r4 + 1 | 0;
  if ((HEAP32[r1 >> 2] | 0) < (r6 | 0)) {
    __gcry_mpi_resize(r1, r6);
  }
  r6 = HEAP32[r2 + 16 >> 2];
  r2 = HEAP32[r1 + 16 >> 2], r7 = r2 >> 2;
  L341 : do {
    if ((r4 | 0) == 0) {
      HEAP32[r7] = r3;
      r8 = (r3 | 0) != 0 & 1;
      r9 = 0;
    } else {
      if ((r5 | 0) == 0) {
        r10 = __gcry_mpih_add_1(r2, r6, r4, r3);
        HEAP32[(r4 << 2 >> 2) + r7] = r10;
        r8 = r10 + r4 | 0;
        r9 = 0;
        break;
      }
      do {
        if ((r4 | 0) == 1) {
          r10 = HEAP32[r6 >> 2];
          if (r10 >>> 0 >= r3 >>> 0) {
            break;
          }
          HEAP32[r7] = r3 - r10 | 0;
          r8 = 1;
          r9 = 0;
          break L341;
        }
      } while (0);
      __gcry_mpih_sub_1(r2, r6, r4, r3);
      r8 = r4 - ((HEAP32[(r4 - 1 << 2 >> 2) + r7] | 0) == 0 & 1) | 0;
      r9 = 1;
    }
  } while (0);
  HEAP32[r1 + 4 >> 2] = r8;
  HEAP32[r1 + 8 >> 2] = r9;
  return;
}
function __gcry_mpi_add(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = r1 >> 2;
  r5 = HEAP32[r2 + 4 >> 2];
  r6 = HEAP32[r3 + 4 >> 2];
  do {
    if ((r5 | 0) < (r6 | 0)) {
      r7 = HEAP32[r3 + 8 >> 2];
      r8 = HEAP32[r2 + 8 >> 2];
      r9 = r6 + 1 | 0;
      if ((HEAP32[r4] | 0) >= (r9 | 0)) {
        r10 = r3;
        r11 = r8;
        r12 = r7;
        r13 = r5;
        r14 = r6;
        r15 = r2;
        break;
      }
      __gcry_mpi_resize(r1, r9);
      r10 = r3;
      r11 = r8;
      r12 = r7;
      r13 = r5;
      r14 = r6;
      r15 = r2;
    } else {
      r7 = HEAP32[r2 + 8 >> 2];
      r8 = HEAP32[r3 + 8 >> 2];
      r9 = r5 + 1 | 0;
      if ((HEAP32[r4] | 0) >= (r9 | 0)) {
        r10 = r2;
        r11 = r8;
        r12 = r7;
        r13 = r6;
        r14 = r5;
        r15 = r3;
        break;
      }
      __gcry_mpi_resize(r1, r9);
      r10 = r2;
      r11 = r8;
      r12 = r7;
      r13 = r6;
      r14 = r5;
      r15 = r3;
    }
  } while (0);
  r3 = HEAP32[r10 + 16 >> 2];
  r10 = HEAP32[r15 + 16 >> 2];
  r15 = HEAP32[r4 + 4], r5 = r15 >> 2;
  L359 : do {
    if ((r13 | 0) == 0) {
      if ((r14 | 0) > 0) {
        r16 = 0;
      } else {
        r17 = r12;
        r18 = r14;
        break;
      }
      while (1) {
        HEAP32[(r16 << 2 >> 2) + r5] = HEAP32[r3 + (r16 << 2) >> 2];
        r6 = r16 + 1 | 0;
        if ((r6 | 0) == (r14 | 0)) {
          r17 = r12;
          r18 = r14;
          break L359;
        } else {
          r16 = r6;
        }
      }
    } else {
      if ((r12 | 0) == (r11 | 0)) {
        r6 = __gcry_mpih_add(r15, r3, r14, r10, r13);
        HEAP32[(r14 << 2 >> 2) + r5] = r6;
        r17 = (r12 | 0) != 0 & 1;
        r18 = r6 + r14 | 0;
        break;
      }
      if ((r14 | 0) != (r13 | 0)) {
        __gcry_mpih_sub(r15, r3, r14, r10, r13);
        r6 = r14;
        while (1) {
          if ((r6 | 0) <= 0) {
            r17 = r12;
            r18 = r6;
            break L359;
          }
          r2 = r6 - 1 | 0;
          if ((HEAP32[(r2 << 2 >> 2) + r5] | 0) == 0) {
            r6 = r2;
          } else {
            r17 = r12;
            r18 = r6;
            break L359;
          }
        }
      }
      if ((__gcry_mpih_cmp(r3, r10, r14) | 0) < 0) {
        __gcry_mpih_sub_n(r15, r10, r3, r14);
        r6 = r14;
        while (1) {
          if ((r6 | 0) <= 0) {
            break;
          }
          r2 = r6 - 1 | 0;
          if ((HEAP32[(r2 << 2 >> 2) + r5] | 0) == 0) {
            r6 = r2;
          } else {
            break;
          }
        }
        r17 = (r12 | 0) == 0 & 1;
        r18 = r6;
        break;
      } else {
        __gcry_mpih_sub_n(r15, r3, r10, r14);
        r2 = r14;
        while (1) {
          if ((r2 | 0) <= 0) {
            break;
          }
          r1 = r2 - 1 | 0;
          if ((HEAP32[(r1 << 2 >> 2) + r5] | 0) == 0) {
            r2 = r1;
          } else {
            break;
          }
        }
        r17 = (r12 | 0) != 0 & 1;
        r18 = r2;
        break;
      }
    }
  } while (0);
  HEAP32[r4 + 1] = r18;
  HEAP32[r4 + 2] = r17;
  return;
}
function __gcry_mpi_sub_ui(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = HEAP32[r2 + 4 >> 2];
  r5 = HEAP32[r2 + 8 >> 2];
  r6 = r4 + 1 | 0;
  if ((HEAP32[r1 >> 2] | 0) < (r6 | 0)) {
    __gcry_mpi_resize(r1, r6);
  }
  r6 = HEAP32[r2 + 16 >> 2];
  r2 = HEAP32[r1 + 16 >> 2], r7 = r2 >> 2;
  L389 : do {
    if ((r4 | 0) == 0) {
      HEAP32[r7] = r3;
      r8 = (r3 | 0) != 0 & 1;
      r9 = 1;
    } else {
      if ((r5 | 0) != 0) {
        r10 = __gcry_mpih_add_1(r2, r6, r4, r3);
        HEAP32[(r4 << 2 >> 2) + r7] = r10;
        r8 = r10 + r4 | 0;
        r9 = 0;
        break;
      }
      do {
        if ((r4 | 0) == 1) {
          r10 = HEAP32[r6 >> 2];
          if (r10 >>> 0 >= r3 >>> 0) {
            break;
          }
          HEAP32[r7] = r3 - r10 | 0;
          r8 = 1;
          r9 = 1;
          break L389;
        }
      } while (0);
      __gcry_mpih_sub_1(r2, r6, r4, r3);
      r8 = r4 - ((HEAP32[(r4 - 1 << 2 >> 2) + r7] | 0) == 0 & 1) | 0;
      r9 = 0;
    }
  } while (0);
  HEAP32[r1 + 4 >> 2] = r8;
  HEAP32[r1 + 8 >> 2] = r9;
  return;
}
function __gcry_mpi_sub(r1, r2, r3) {
  var r4;
  r4 = __gcry_mpi_copy(r3);
  r3 = r4 + 8 | 0;
  HEAP32[r3 >> 2] = (HEAP32[r3 >> 2] | 0) == 0 & 1;
  __gcry_mpi_add(r1, r2, r4);
  __gcry_mpi_free(r4);
  return;
}
function __gcry_mpi_addm(r1, r2, r3, r4) {
  __gcry_mpi_add(r1, r2, r3);
  __gcry_mpi_fdiv_r(r1, r1, r4);
  return;
}
function __gcry_mpi_subm(r1, r2, r3, r4) {
  __gcry_mpi_sub(r1, r2, r3);
  __gcry_mpi_fdiv_r(r1, r1, r4);
  return;
}
function __gcry_mpi_get_nbits(r1) {
  var r2, r3, r4, r5, r6, r7;
  do {
    if ((r1 | 0) != 0) {
      if ((HEAP32[r1 + 12 >> 2] & 4 | 0) == 0) {
        break;
      }
      r2 = HEAP32[r1 + 8 >> 2];
      return r2;
    }
  } while (0);
  __gcry_mpi_normalize(r1);
  r3 = r1 + 4 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 | 0) == 0) {
    r2 = 0;
    return r2;
  }
  r5 = HEAP32[HEAP32[r1 + 16 >> 2] + (r4 - 1 << 2) >> 2];
  if ((r5 | 0) == 0) {
    r6 = 32;
  } else {
    if (r5 >>> 0 < 65536) {
      r7 = r5 >>> 0 < 256 ? 0 : 8;
    } else {
      r7 = r5 >>> 0 < 16777216 ? 16 : 24;
    }
    r6 = 32 - r7 - HEAPU8[(r5 >>> (r7 >>> 0)) + 492876 | 0] | 0;
  }
  r2 = (HEAP32[r3 >> 2] << 5) - r6 | 0;
  return r2;
}
function __gcry_mpi_set_bit(r1, r2) {
  var r3, r4, r5;
  r3 = r2 >>> 5;
  r4 = r1 + 4 | 0;
  if (r3 >>> 0 >= HEAP32[r4 >> 2] >>> 0) {
    r5 = r3 + 1 | 0;
    __gcry_mpi_resize(r1, r5);
    HEAP32[r4 >> 2] = r5;
  }
  r5 = (r3 << 2) + HEAP32[r1 + 16 >> 2] | 0;
  HEAP32[r5 >> 2] = HEAP32[r5 >> 2] | 1 << (r2 & 31);
  return;
}
function __gcry_mpi_set_highbit(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = r2 >>> 5;
  r4 = r2 & 31;
  r2 = (r1 + 4 | 0) >> 2;
  if (r3 >>> 0 >= HEAP32[r2] >>> 0) {
    r5 = r3 + 1 | 0;
    __gcry_mpi_resize(r1, r5);
    HEAP32[r2] = r5;
  }
  r5 = r1 + 16 | 0;
  r1 = (r3 << 2) + HEAP32[r5 >> 2] | 0;
  HEAP32[r1 >> 2] = HEAP32[r1 >> 2] | 1 << r4;
  r1 = r4 + 1 | 0;
  if (r1 >>> 0 < 32) {
    r6 = r1;
  } else {
    r7 = r3 + 1 | 0;
    HEAP32[r2] = r7;
    return;
  }
  while (1) {
    r1 = (r3 << 2) + HEAP32[r5 >> 2] | 0;
    HEAP32[r1 >> 2] = HEAP32[r1 >> 2] & (1 << r6 ^ -1);
    r1 = r6 + 1 | 0;
    if ((r1 | 0) == 32) {
      break;
    } else {
      r6 = r1;
    }
  }
  r7 = r3 + 1 | 0;
  HEAP32[r2] = r7;
  return;
}
function __gcry_mpi_rshift(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = r1 >> 2;
  r5 = 0;
  r6 = r3 >>> 5;
  r7 = r3 & 31;
  L434 : do {
    if ((r1 | 0) == (r2 | 0)) {
      r3 = (r1 + 4 | 0) >> 2;
      if (r6 >>> 0 >= HEAP32[r3] >>> 0) {
        HEAP32[r3] = 0;
        return;
      }
      if ((r6 | 0) != 0) {
        L442 : do {
          if ((HEAP32[r3] | 0) == (r6 | 0)) {
            r8 = 0;
          } else {
            r9 = r1 + 16 | 0;
            r10 = 0;
            while (1) {
              r11 = HEAP32[r9 >> 2];
              HEAP32[r11 + (r10 << 2) >> 2] = HEAP32[r11 + (r10 + r6 << 2) >> 2];
              r11 = r10 + 1 | 0;
              if (r11 >>> 0 < (HEAP32[r3] - r6 | 0) >>> 0) {
                r10 = r11;
              } else {
                r8 = r11;
                break L442;
              }
            }
          }
        } while (0);
        HEAP32[HEAP32[r4 + 4] + (r8 << 2) >> 2] = 0;
        HEAP32[r3] = HEAP32[r3] - r6 | 0;
      }
      r10 = HEAP32[r3];
      if ((r10 | 0) == 0 | (r7 | 0) == 0) {
        break;
      }
      r9 = HEAP32[r4 + 4];
      __gcry_mpih_rshift(r9, r9, r10, r7);
    } else {
      r10 = (r6 | 0) != 0;
      r9 = (r2 + 4 | 0) >> 2;
      r11 = HEAP32[r9];
      HEAP32[r4 + 2] = HEAP32[r2 + 8 >> 2];
      r12 = (HEAP32[r4] | 0) < (r11 | 0);
      if (!r10) {
        if (r12) {
          __gcry_mpi_resize(r1, r11);
        }
        r13 = (r1 + 4 | 0) >> 2;
        HEAP32[r13] = r11;
        if ((r11 | 0) == 0) {
          break;
        }
        if ((r7 | 0) != 0) {
          __gcry_mpih_rshift(HEAP32[r4 + 4], HEAP32[r2 + 16 >> 2], r11, r7);
          break;
        }
        if ((HEAP32[r13] | 0) == 0) {
          break;
        }
        r14 = r2 + 16 | 0;
        r15 = r1 + 16 | 0;
        r16 = 0;
        while (1) {
          HEAP32[HEAP32[r15 >> 2] + (r16 << 2) >> 2] = HEAP32[HEAP32[r14 >> 2] + (r16 << 2) >> 2];
          r17 = r16 + 1 | 0;
          if (r17 >>> 0 < HEAP32[r13] >>> 0) {
            r16 = r17;
          } else {
            break L434;
          }
        }
      }
      if (r12) {
        __gcry_mpi_resize(r1, r11);
      }
      r16 = (r1 + 4 | 0) >> 2;
      HEAP32[r16] = r11;
      L466 : do {
        if ((HEAP32[r9] | 0) == 0) {
          r18 = 0;
        } else {
          r13 = r2 + 16 | 0;
          r14 = r1 + 16 | 0;
          r15 = 0;
          while (1) {
            HEAP32[HEAP32[r14 >> 2] + (r15 << 2) >> 2] = HEAP32[HEAP32[r13 >> 2] + (r15 << 2) >> 2];
            r3 = r15 + 1 | 0;
            if (r3 >>> 0 < HEAP32[r9] >>> 0) {
              r15 = r3;
            } else {
              r18 = r3;
              break L466;
            }
          }
        }
      } while (0);
      HEAP32[r16] = r18;
      if (r6 >>> 0 >= r18 >>> 0) {
        HEAP32[r16] = 0;
        return;
      }
      if (r10) {
        L477 : do {
          if ((HEAP32[r16] | 0) == (r6 | 0)) {
            r19 = 0;
          } else {
            r9 = r1 + 16 | 0;
            r11 = 0;
            while (1) {
              r12 = HEAP32[r9 >> 2];
              HEAP32[r12 + (r11 << 2) >> 2] = HEAP32[r12 + (r11 + r6 << 2) >> 2];
              r12 = r11 + 1 | 0;
              if (r12 >>> 0 < (HEAP32[r16] - r6 | 0) >>> 0) {
                r11 = r12;
              } else {
                r19 = r12;
                break L477;
              }
            }
          }
        } while (0);
        HEAP32[HEAP32[r4 + 4] + (r19 << 2) >> 2] = 0;
        HEAP32[r16] = HEAP32[r16] - r6 | 0;
      }
      r10 = HEAP32[r16];
      if ((r10 | 0) == 0 | (r7 | 0) == 0) {
        break;
      }
      r11 = HEAP32[r4 + 4];
      __gcry_mpih_rshift(r11, r11, r10, r7);
    }
  } while (0);
  r7 = r1 + 4 | 0;
  r4 = HEAP32[r7 >> 2];
  if ((r4 | 0) <= 0) {
    return;
  }
  r6 = r1 + 16 | 0;
  r1 = r4;
  while (1) {
    r4 = r1 - 1 | 0;
    if ((HEAP32[HEAP32[r6 >> 2] + (r4 << 2) >> 2] | 0) != 0) {
      r5 = 366;
      break;
    }
    HEAP32[r7 >> 2] = r4;
    if ((r4 | 0) > 0) {
      r1 = r4;
    } else {
      r5 = 367;
      break;
    }
  }
  if (r5 == 366) {
    return;
  } else if (r5 == 367) {
    return;
  }
}
function __gcry_mpi_lshift_limbs(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = (r1 + 4 | 0) >> 2;
  r4 = HEAP32[r3];
  if ((r2 | 0) == 0 | (r4 | 0) == 0) {
    return;
  }
  r5 = r4 + r2 | 0;
  if (HEAP32[r1 >> 2] >>> 0 < r5 >>> 0) {
    __gcry_mpi_resize(r1, r5);
  }
  r5 = HEAP32[r1 + 16 >> 2];
  r1 = r5;
  L501 : do {
    if ((r4 | 0) > 0) {
      r6 = r4;
      while (1) {
        r7 = r6 - 1 | 0;
        HEAP32[r5 + (r7 + r2 << 2) >> 2] = HEAP32[r5 + (r7 << 2) >> 2];
        if ((r7 | 0) > 0) {
          r6 = r7;
        } else {
          break L501;
        }
      }
    }
  } while (0);
  if ((r2 | 0) != 0) {
    _memset(r1, 0, r2 << 2);
  }
  HEAP32[r3] = HEAP32[r3] + r2 | 0;
  return;
}
function __gcry_mpi_lshift(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = r1 >> 2;
  r5 = 0;
  r6 = r3 >>> 5;
  r7 = r3 & 31;
  r8 = (r1 | 0) == (r2 | 0);
  r9 = (r3 | 0) == 0;
  if (r8 & r9) {
    return;
  }
  if (!r8) {
    r8 = HEAP32[r2 + 4 >> 2];
    r3 = HEAP32[r2 + 8 >> 2];
    r10 = r8 + (r6 + 1) | 0;
    if (HEAP32[r4] >>> 0 < r10 >>> 0) {
      __gcry_mpi_resize(r1, r10);
    }
    r10 = HEAP32[r4 + 4];
    r11 = HEAP32[r2 + 16 >> 2];
    L518 : do {
      if ((r8 | 0) != 0) {
        r12 = 0;
        while (1) {
          HEAP32[r10 + (r12 << 2) >> 2] = HEAP32[r11 + (r12 << 2) >> 2];
          r13 = r12 + 1 | 0;
          if ((r13 | 0) == (r8 | 0)) {
            break L518;
          } else {
            r12 = r13;
          }
        }
      }
    } while (0);
    HEAP32[r4 + 1] = r8;
    HEAP32[r4 + 3] = HEAP32[r2 + 12 >> 2];
    HEAP32[r4 + 2] = r3;
  }
  do {
    if ((r6 | 0) != 0 & (r7 | 0) == 0) {
      __gcry_mpi_lshift_limbs(r1, r6);
    } else {
      if (r9) {
        break;
      }
      __gcry_mpi_lshift_limbs(r1, r6 + 1 | 0);
      __gcry_mpi_rshift(r1, r1, 32 - r7 | 0);
    }
  } while (0);
  r7 = r1 + 4 | 0;
  r6 = HEAP32[r7 >> 2];
  if ((r6 | 0) <= 0) {
    return;
  }
  r9 = r1 + 16 | 0;
  r1 = r6;
  while (1) {
    r6 = r1 - 1 | 0;
    if ((HEAP32[HEAP32[r9 >> 2] + (r6 << 2) >> 2] | 0) != 0) {
      r5 = 399;
      break;
    }
    HEAP32[r7 >> 2] = r6;
    if ((r6 | 0) > 0) {
      r1 = r6;
    } else {
      r5 = 396;
      break;
    }
  }
  if (r5 == 399) {
    return;
  } else if (r5 == 396) {
    return;
  }
}
function __gcry_mpi_cmp_ui(r1, r2) {
  var r3, r4;
  __gcry_mpi_normalize(r1);
  r3 = HEAP32[r1 + 4 >> 2];
  if ((r3 | 0) == 0) {
    r4 = -((r2 | 0) != 0 & 1) | 0;
    return r4;
  }
  if ((HEAP32[r1 + 8 >> 2] | 0) != 0) {
    r4 = -1;
    return r4;
  }
  if ((r3 | 0) != 1) {
    r4 = 1;
    return r4;
  }
  r3 = HEAP32[HEAP32[r1 + 16 >> 2] >> 2];
  if (r3 >>> 0 > r2 >>> 0) {
    r4 = 1;
    return r4;
  }
  r4 = (r3 >>> 0 < r2 >>> 0) << 31 >> 31;
  return r4;
}
function __gcry_mpi_cmp(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = r2 >> 2;
  r4 = 0;
  r5 = (r1 | 0) != 0;
  do {
    if (r5) {
      if ((HEAP32[r1 + 12 >> 2] & 4 | 0) == 0) {
        r4 = 414;
        break;
      } else {
        r4 = 417;
        break;
      }
    } else {
      r4 = 414;
    }
  } while (0);
  L555 : do {
    if (r4 == 414) {
      do {
        if ((r2 | 0) != 0) {
          if ((HEAP32[r3 + 3] & 4 | 0) == 0) {
            break;
          }
          if (r5) {
            r4 = 417;
            break L555;
          } else {
            r4 = 422;
            break L555;
          }
        }
      } while (0);
      __gcry_mpi_normalize(r1);
      __gcry_mpi_normalize(r2);
      r6 = HEAP32[r1 + 4 >> 2];
      r7 = HEAP32[r3 + 1];
      r8 = (r1 + 8 | 0) >> 2;
      do {
        if ((HEAP32[r8] | 0) == 0) {
          if ((HEAP32[r3 + 2] | 0) == 0) {
            if ((HEAP32[r8] | 0) == 0) {
              break;
            } else {
              r4 = 432;
              break;
            }
          } else {
            r9 = 1;
            return r9;
          }
        } else {
          r4 = 432;
        }
      } while (0);
      do {
        if (r4 == 432) {
          if ((HEAP32[r3 + 2] | 0) == 0) {
            r9 = -1;
          } else {
            break;
          }
          return r9;
        }
      } while (0);
      r10 = (r6 | 0) != (r7 | 0);
      L570 : do {
        if (r10) {
          do {
            if ((HEAP32[r8] | 0) == 0) {
              if ((HEAP32[r3 + 2] | 0) == 0) {
                r9 = r6 - r7 | 0;
                return r9;
              } else {
                if (!r10) {
                  break L570;
                }
                if ((HEAP32[r8] | 0) == 0) {
                  break L570;
                } else {
                  break;
                }
              }
            }
          } while (0);
          if ((HEAP32[r3 + 2] | 0) == 0) {
            break;
          }
          r9 = r7 + r6 | 0;
          return r9;
        }
      } while (0);
      if ((r6 | 0) == 0) {
        r9 = 0;
        return r9;
      }
      r7 = __gcry_mpih_cmp(HEAP32[r1 + 16 >> 2], HEAP32[r3 + 4], r6);
      if ((r7 | 0) == 0) {
        r9 = 0;
        return r9;
      }
      r9 = (r7 >>> 31 | 0) == ((HEAP32[r8] | 0) != 0 & 1 | 0) ? 1 : -1;
      return r9;
    }
  } while (0);
  L590 : do {
    if (r4 == 417) {
      r7 = r1 + 12 | 0;
      do {
        if ((HEAP32[r7 >> 2] & 4 | 0) != 0) {
          if ((r2 | 0) == 0) {
            r9 = -1;
            return r9;
          }
          if ((HEAP32[r3 + 3] & 4 | 0) == 0) {
            r9 = -1;
            return r9;
          } else {
            if (r5) {
              break;
            } else {
              r4 = 422;
              break L590;
            }
          }
        }
      } while (0);
      if ((HEAP32[r7 >> 2] & 4 | 0) != 0 | (r2 | 0) == 0) {
        break;
      } else {
        r4 = 423;
        break;
      }
    }
  } while (0);
  do {
    if (r4 == 422) {
      if ((r2 | 0) == 0) {
        break;
      } else {
        r4 = 423;
        break;
      }
    }
  } while (0);
  do {
    if (r4 == 423) {
      if ((HEAP32[r3 + 3] & 4 | 0) == 0) {
        break;
      } else {
        r9 = 1;
      }
      return r9;
    }
  } while (0);
  r4 = r1 + 8 | 0;
  do {
    if ((HEAP32[r4 >> 2] | 0) == 0) {
      if ((HEAP32[r3 + 2] | 0) == 0) {
        r9 = 0;
      } else {
        break;
      }
      return r9;
    }
  } while (0);
  r2 = HEAP32[r4 >> 2];
  r4 = HEAP32[r3 + 2];
  if ((r2 | 0) < (r4 | 0)) {
    r9 = -1;
    return r9;
  }
  if ((r2 | 0) > (r4 | 0)) {
    r9 = 1;
    return r9;
  }
  r9 = _memcmp(HEAP32[r1 + 16 >> 2], HEAP32[r3 + 4], (r2 + 7 | 0) / 8 & -1);
  return r9;
}
function __gcry_mpi_fdiv_r(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = HEAP32[r3 + 8 >> 2];
  if ((r1 | 0) == (r3 | 0)) {
    r5 = __gcry_mpi_copy(r3);
    r6 = r5;
    r7 = r5;
  } else {
    r6 = 0;
    r7 = r3;
  }
  __gcry_mpi_tdiv_r(r1, r2, r7);
  do {
    if ((r4 | 0) != 0 ^ (HEAP32[r2 + 8 >> 2] | 0) != 0) {
      if ((HEAP32[r1 + 4 >> 2] | 0) == 0) {
        break;
      }
      __gcry_mpi_add(r1, r1, r7);
    }
  } while (0);
  if ((r6 | 0) == 0) {
    return;
  }
  __gcry_mpi_free(r6);
  return;
}
function __gcry_mpi_tdiv_r(r1, r2, r3) {
  __gcry_mpi_tdiv_qr(0, r1, r2, r3);
  return;
}
function __gcry_mpi_fdiv_r_ui(r1, r2, r3) {
  var r4, r5;
  r4 = __gcry_mpih_mod_1(HEAP32[r2 + 16 >> 2], HEAP32[r2 + 4 >> 2], r3);
  if ((r4 | 0) == 0) {
    r5 = 0;
  } else {
    r5 = (HEAP32[r2 + 8 >> 2] | 0) == 0 ? r4 : r3 - r4 | 0;
  }
  if ((r1 | 0) == 0) {
    return r5;
  }
  HEAP32[HEAP32[r1 + 16 >> 2] >> 2] = r5;
  HEAP32[r1 + 4 >> 2] = (r5 | 0) != 0 & 1;
  return r5;
}
function __gcry_mpi_fdiv_q(r1, r2, r3) {
  var r4;
  r4 = __gcry_mpi_alloc(HEAP32[r1 + 4 >> 2]);
  __gcry_mpi_fdiv_qr(r1, r4, r2, r3);
  __gcry_mpi_free(r4);
  return;
}
function __gcry_mpi_fdiv_qr(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = HEAP32[r4 + 8 >> 2];
  if ((r1 | 0) == (r4 | 0) | (r2 | 0) == (r4 | 0)) {
    r6 = __gcry_mpi_copy(r4);
    r7 = r6;
    r8 = r6;
  } else {
    r7 = 0;
    r8 = r4;
  }
  __gcry_mpi_tdiv_qr(r1, r2, r3, r8);
  do {
    if ((r5 | 0) != (HEAP32[r3 + 8 >> 2] | 0)) {
      if ((HEAP32[r2 + 4 >> 2] | 0) == 0) {
        break;
      }
      __gcry_mpi_sub_ui(r1, r1, 1);
      __gcry_mpi_add(r2, r2, r8);
    }
  } while (0);
  if ((r7 | 0) == 0) {
    return;
  }
  __gcry_mpi_free(r7);
  return;
}
function __gcry_mpi_tdiv_qr(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42;
  r5 = r4 >> 2;
  r6 = r2 >> 2;
  r7 = r1 >> 2;
  r8 = 0;
  r9 = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  r10 = r9 >> 2;
  r11 = r9 + 20 >> 2;
  r12 = r3 + 4 | 0;
  r13 = HEAP32[r12 >> 2];
  r14 = HEAP32[r5 + 1];
  r15 = r3 + 8 | 0;
  r16 = HEAP32[r15 >> 2];
  r17 = HEAP32[r5 + 2] ^ r16;
  r18 = r13 + 1 | 0;
  __gcry_mpi_resize(r2, r18);
  r19 = r18 - r14 | 0;
  if ((r19 | 0) < 1) {
    L655 : do {
      if ((r3 | 0) != (r2 | 0)) {
        HEAP32[r6 + 1] = HEAP32[r12 >> 2];
        HEAP32[r6 + 2] = HEAP32[r15 >> 2];
        if ((r13 | 0) <= 0) {
          break;
        }
        r20 = r3 + 16 | 0;
        r21 = r2 + 16 | 0;
        r22 = 0;
        while (1) {
          HEAP32[HEAP32[r21 >> 2] + (r22 << 2) >> 2] = HEAP32[HEAP32[r20 >> 2] + (r22 << 2) >> 2];
          r23 = r22 + 1 | 0;
          if ((r23 | 0) == (r13 | 0)) {
            break L655;
          } else {
            r22 = r23;
          }
        }
      }
    } while (0);
    if ((r1 | 0) == 0) {
      STACKTOP = r9;
      return;
    }
    HEAP32[r7 + 1] = 0;
    HEAP32[r7 + 2] = 0;
    STACKTOP = r9;
    return;
  }
  r2 = (r1 | 0) != 0;
  if (r2) {
    __gcry_mpi_resize(r1, r19);
  }
  r1 = HEAP32[r3 + 16 >> 2];
  r3 = HEAP32[r5 + 4], r15 = r3 >> 2;
  r12 = HEAP32[r6 + 4], r22 = r12 >> 2;
  if ((r14 | 0) == 1) {
    if (r2) {
      r20 = HEAP32[r7 + 4];
      r21 = __gcry_mpih_divmod_1(r20, r1, r13, HEAP32[r15]);
      HEAP32[r7 + 1] = r19 - ((HEAP32[r20 + (r19 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
      HEAP32[r7 + 2] = r17;
      r24 = r21;
    } else {
      r24 = __gcry_mpih_mod_1(r1, r13, HEAP32[r15]);
    }
    HEAP32[r22] = r24;
    HEAP32[r6 + 1] = (r24 | 0) != 0 & 1;
    HEAP32[r6 + 2] = r16;
    STACKTOP = r9;
    return;
  }
  L677 : do {
    if (r2) {
      r24 = HEAP32[r7 + 4];
      if ((r24 | 0) != (r1 | 0)) {
        r25 = r1;
        r26 = r24;
        r27 = 0;
        break;
      }
      HEAP32[r11] = r13;
      r21 = __gcry_mpi_alloc_limb_space(r13, HEAP32[r7 + 3] & 1);
      HEAP32[r10] = r21;
      if ((r13 | 0) > 0) {
        r28 = 0;
      } else {
        r25 = r21;
        r26 = r24;
        r27 = 1;
        break;
      }
      while (1) {
        HEAP32[r21 + (r28 << 2) >> 2] = HEAP32[r24 + (r28 << 2) >> 2];
        r19 = r28 + 1 | 0;
        if ((r19 | 0) == (r13 | 0)) {
          r25 = r21;
          r26 = r24;
          r27 = 1;
          break L677;
        } else {
          r28 = r19;
        }
      }
    } else {
      r25 = r1;
      r26 = (r14 << 2) + r12 | 0;
      r27 = 0;
    }
  } while (0);
  r1 = HEAP32[(r14 - 1 << 2 >> 2) + r15];
  if (r1 >>> 0 < 65536) {
    r29 = r1 >>> 0 < 256 ? 0 : 8;
  } else {
    r29 = r1 >>> 0 < 16777216 ? 16 : 24;
  }
  r28 = HEAPU8[(r1 >>> (r29 >>> 0)) + 492876 | 0] + r29 | 0;
  r29 = 32 - r28 | 0;
  r1 = (r28 | 0) != 32;
  L688 : do {
    if (r1) {
      HEAP32[(r27 << 2 >> 2) + r11] = r14;
      if ((r4 | 0) == 0) {
        r30 = 0;
      } else {
        r30 = (HEAP32[r5 + 3] & 1 | 0) != 0;
      }
      r28 = __gcry_mpi_alloc_limb_space(r14, r30 & 1);
      r24 = r27 + 1 | 0;
      HEAP32[(r27 << 2 >> 2) + r10] = r28;
      __gcry_mpih_lshift(r28, r3, r14, r29);
      r21 = __gcry_mpih_lshift(r12, r25, r13, r29);
      if ((r21 | 0) == 0) {
        r31 = r28;
        r32 = r13;
        r33 = r24;
        break;
      }
      HEAP32[(r13 << 2 >> 2) + r22] = r21;
      r31 = r28;
      r32 = r18;
      r33 = r24;
    } else {
      do {
        if ((r3 | 0) == (r12 | 0)) {
          r8 = 517;
        } else {
          if (r2 & (r3 | 0) == (r26 | 0)) {
            r8 = 517;
            break;
          } else {
            r34 = r3;
            r35 = r27;
            break;
          }
        }
      } while (0);
      L692 : do {
        if (r8 == 517) {
          HEAP32[(r27 << 2 >> 2) + r11] = r14;
          if ((r4 | 0) == 0) {
            r36 = 0;
          } else {
            r36 = (HEAP32[r5 + 3] & 1 | 0) != 0;
          }
          r24 = __gcry_mpi_alloc_limb_space(r14, r36 & 1);
          r28 = r27 + 1 | 0;
          HEAP32[(r27 << 2 >> 2) + r10] = r24;
          if ((r14 | 0) > 0) {
            r37 = 0;
          } else {
            r34 = r24;
            r35 = r28;
            break;
          }
          while (1) {
            HEAP32[r24 + (r37 << 2) >> 2] = HEAP32[(r37 << 2 >> 2) + r15];
            r21 = r37 + 1 | 0;
            if ((r21 | 0) == (r14 | 0)) {
              r34 = r24;
              r35 = r28;
              break L692;
            } else {
              r37 = r21;
            }
          }
        }
      } while (0);
      if ((r12 | 0) != (r25 | 0) & (r13 | 0) > 0) {
        r38 = 0;
      } else {
        r31 = r34;
        r32 = r13;
        r33 = r35;
        break;
      }
      while (1) {
        HEAP32[(r38 << 2 >> 2) + r22] = HEAP32[r25 + (r38 << 2) >> 2];
        r28 = r38 + 1 | 0;
        if ((r28 | 0) == (r13 | 0)) {
          r31 = r34;
          r32 = r13;
          r33 = r35;
          break L688;
        } else {
          r38 = r28;
        }
      }
    }
  } while (0);
  r38 = __gcry_mpih_divrem(r26, 0, r12, r32, r31, r14);
  do {
    if (r2) {
      r31 = r32 - r14 | 0;
      if ((r38 | 0) == 0) {
        r39 = r31;
      } else {
        HEAP32[r26 + (r31 << 2) >> 2] = r38;
        r39 = r31 + 1 | 0;
      }
      HEAP32[r7 + 1] = r39;
      HEAP32[r7 + 2] = r17;
      r40 = r14;
      break;
    } else {
      r40 = r14;
    }
  } while (0);
  while (1) {
    if ((r40 | 0) <= 0) {
      break;
    }
    r14 = r40 - 1 | 0;
    if ((HEAP32[(r14 << 2 >> 2) + r22] | 0) == 0) {
      r40 = r14;
    } else {
      break;
    }
  }
  if ((r40 | 0) == 0 | r1 ^ 1) {
    r41 = r40;
  } else {
    __gcry_mpih_rshift(r12, r12, r40, r29);
    r41 = r40 - ((HEAP32[(r40 - 1 << 2 >> 2) + r22] | 0) == 0 & 1) | 0;
  }
  HEAP32[r6 + 1] = r41;
  HEAP32[r6 + 2] = r16;
  if ((r33 | 0) == 0) {
    STACKTOP = r9;
    return;
  } else {
    r42 = r33;
  }
  while (1) {
    r33 = r42 - 1 | 0;
    __gcry_mpi_free_limb_space(HEAP32[(r33 << 2 >> 2) + r10], HEAP32[(r33 << 2 >> 2) + r11]);
    if ((r33 | 0) == 0) {
      break;
    } else {
      r42 = r33;
    }
  }
  STACKTOP = r9;
  return;
}
function __gcry_mpi_tdiv_q_2exp(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = HEAP32[r2 + 4 >> 2];
  r5 = r3 >>> 5;
  r6 = r4 - r5 | 0;
  if ((r5 | 0) >= (r4 | 0)) {
    HEAP32[r1 + 4 >> 2] = 0;
    return;
  }
  if ((HEAP32[r1 >> 2] | 0) < (r6 | 0)) {
    __gcry_mpi_resize(r1, r6);
  }
  r4 = HEAP32[r1 + 16 >> 2];
  r7 = r3 & 31;
  if ((r7 | 0) == 0) {
    r8 = r6;
  } else {
    __gcry_mpih_rshift(r4, (r5 << 2) + HEAP32[r2 + 16 >> 2] | 0, r6, r7);
    r8 = r6 - ((HEAP32[r4 + (r6 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
  }
  HEAP32[r1 + 4 >> 2] = r8;
  return;
}
function __gcry_mpi_divisible_ui(r1, r2) {
  return (__gcry_mpih_mod_1(HEAP32[r1 + 16 >> 2], HEAP32[r1 + 4 >> 2], r2) | 0) == 0 & 1;
}
function __gcry_mpi_gcd(r1, r2, r3) {
  var r4;
  r4 = __gcry_mpi_copy(r2);
  r2 = __gcry_mpi_copy(r3);
  HEAP32[r4 + 8 >> 2] = 0;
  HEAP32[r2 + 8 >> 2] = 0;
  L739 : do {
    if ((__gcry_mpi_cmp_ui(r2, 0) | 0) != 0) {
      while (1) {
        __gcry_mpi_fdiv_r(r1, r4, r2);
        __gcry_mpi_set(r4, r2);
        __gcry_mpi_set(r2, r1);
        if ((__gcry_mpi_cmp_ui(r2, 0) | 0) == 0) {
          break L739;
        }
      }
    }
  } while (0);
  __gcry_mpi_set(r1, r4);
  __gcry_mpi_free(r4);
  __gcry_mpi_free(r2);
  return (__gcry_mpi_cmp_ui(r1, 1) | 0) == 0 & 1;
}
function __gcry_mpi_div(r1, r2, r3, r4, r5) {
  var r6, r7;
  r6 = STACKTOP;
  if ((r5 | 0) == 0) {
    if ((r2 | 0) == 0) {
      r7 = __gcry_mpi_alloc(HEAP32[r1 + 4 >> 2]);
      __gcry_mpi_tdiv_qr(r1, r7, r3, r4);
      __gcry_mpi_free(r7);
      STACKTOP = r6;
      return;
    } else {
      __gcry_mpi_tdiv_qr(r1, r2, r3, r4);
      STACKTOP = r6;
      return;
    }
  }
  if ((r5 | 0) >= 0) {
    __gcry_log_bug(490700, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((r2 | 0) == 0) {
    __gcry_mpi_fdiv_q(r1, r3, r4);
    STACKTOP = r6;
    return;
  }
  if ((r1 | 0) == 0) {
    __gcry_mpi_fdiv_r(r2, r3, r4);
    STACKTOP = r6;
    return;
  } else {
    __gcry_mpi_fdiv_qr(r1, r2, r3, r4);
    STACKTOP = r6;
    return;
  }
}
function __gcry_mpih_sub_1(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r5 = r2 + 4 | 0;
  r6 = HEAP32[r2 >> 2];
  r2 = r6 - r4 | 0;
  r4 = r1 + 4 | 0;
  HEAP32[r1 >> 2] = r2;
  L765 : do {
    if (r2 >>> 0 > r6 >>> 0) {
      r1 = r3;
      r7 = r5;
      r8 = r4;
      while (1) {
        r9 = r1 - 1 | 0;
        if ((r9 | 0) == 0) {
          r10 = 1;
          break;
        }
        r11 = r7 + 4 | 0;
        r12 = HEAP32[r7 >> 2];
        r13 = r8 + 4 | 0;
        HEAP32[r8 >> 2] = r12 - 1 | 0;
        if ((r12 | 0) == 0) {
          r1 = r9;
          r7 = r11;
          r8 = r13;
        } else {
          r14 = r9;
          r15 = r11;
          r16 = r13;
          break L765;
        }
      }
      return r10;
    } else {
      r14 = r3;
      r15 = r5;
      r16 = r4;
    }
  } while (0);
  if ((r16 | 0) == (r15 | 0)) {
    r10 = 0;
    return r10;
  }
  if ((r14 - 1 | 0) <= 0) {
    r10 = 0;
    return r10;
  }
  r4 = r14 - 1 | 0;
  r14 = 0;
  while (1) {
    HEAP32[r16 + (r14 << 2) >> 2] = HEAP32[r15 + (r14 << 2) >> 2];
    r5 = r14 + 1 | 0;
    if ((r5 | 0) == (r4 | 0)) {
      r10 = 0;
      break;
    } else {
      r14 = r5;
    }
  }
  return r10;
}
function __gcry_mpih_cmp(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = 0;
  r5 = r3;
  while (1) {
    r3 = r5 - 1 | 0;
    if ((r5 | 0) <= 0) {
      r6 = 0;
      r4 = 588;
      break;
    }
    r7 = HEAP32[r1 + (r3 << 2) >> 2];
    r8 = HEAP32[r2 + (r3 << 2) >> 2];
    if ((r7 | 0) == (r8 | 0)) {
      r5 = r3;
    } else {
      break;
    }
  }
  if (r4 == 588) {
    return r6;
  }
  r6 = r7 >>> 0 > r8 >>> 0 ? 1 : -1;
  return r6;
}
function __gcry_mpih_add_1(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = r2 + 4 | 0;
  r6 = r1 + 4 | 0;
  HEAP32[r1 >> 2] = _llvm_uadd_with_overflow_i32(HEAP32[r2 >> 2], r4);
  L789 : do {
    if (tempRet0) {
      r4 = r3;
      r2 = r5;
      r1 = r6;
      while (1) {
        r7 = r4 - 1 | 0;
        if ((r7 | 0) == 0) {
          r8 = 1;
          break;
        }
        r9 = r2 + 4 | 0;
        r10 = HEAP32[r2 >> 2] + 1 | 0;
        r11 = r1 + 4 | 0;
        HEAP32[r1 >> 2] = r10;
        if ((r10 | 0) == 0) {
          r4 = r7;
          r2 = r9;
          r1 = r11;
        } else {
          r12 = r7;
          r13 = r9;
          r14 = r11;
          break L789;
        }
      }
      return r8;
    } else {
      r12 = r3;
      r13 = r5;
      r14 = r6;
    }
  } while (0);
  if ((r14 | 0) == (r13 | 0)) {
    r8 = 0;
    return r8;
  }
  if ((r12 - 1 | 0) <= 0) {
    r8 = 0;
    return r8;
  }
  r6 = r12 - 1 | 0;
  r12 = 0;
  while (1) {
    HEAP32[r14 + (r12 << 2) >> 2] = HEAP32[r13 + (r12 << 2) >> 2];
    r5 = r12 + 1 | 0;
    if ((r5 | 0) == (r6 | 0)) {
      r8 = 0;
      break;
    } else {
      r12 = r5;
    }
  }
  return r8;
}
function __gcry_mpih_add(r1, r2, r3, r4, r5) {
  var r6, r7;
  if ((r5 | 0) == 0) {
    r6 = 0;
  } else {
    r6 = __gcry_mpih_add_n(r1, r2, r4, r5);
  }
  if ((r3 | 0) == (r5 | 0)) {
    r7 = r6;
    return r7;
  }
  r7 = __gcry_mpih_add_1((r5 << 2) + r1 | 0, (r5 << 2) + r2 | 0, r3 - r5 | 0, r6);
  return r7;
}
function __gcry_mpih_sub(r1, r2, r3, r4, r5) {
  var r6, r7;
  if ((r5 | 0) == 0) {
    r6 = 0;
  } else {
    r6 = __gcry_mpih_sub_n(r1, r2, r4, r5);
  }
  if ((r3 | 0) == (r5 | 0)) {
    r7 = r6;
    return r7;
  }
  r7 = __gcry_mpih_sub_1((r5 << 2) + r1 | 0, (r5 << 2) + r2 | 0, r3 - r5 | 0, r6);
  return r7;
}
function __gcry_mpi_invm(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  r4 = 0;
  r5 = __gcry_mpi_copy(r2);
  r2 = __gcry_mpi_copy(r3);
  L821 : do {
    if ((__gcry_mpi_test_bit(r5, 0) | 0) == 0) {
      while (1) {
        if ((__gcry_mpi_test_bit(r2, 0) | 0) != 0) {
          break L821;
        }
        __gcry_mpi_rshift(r5, r5, 1);
        __gcry_mpi_rshift(r2, r2, 1);
        if ((__gcry_mpi_test_bit(r5, 0) | 0) != 0) {
          break L821;
        }
      }
    }
  } while (0);
  r3 = __gcry_mpi_test_bit(r2, 0);
  r6 = __gcry_mpi_alloc_set_ui(1);
  r7 = (r3 | 0) != 0;
  if (r7) {
    r8 = 0;
  } else {
    r8 = __gcry_mpi_alloc_set_ui(0);
  }
  r3 = __gcry_mpi_copy(r5);
  r9 = __gcry_mpi_copy(r2);
  if (r7) {
    r10 = 0;
  } else {
    r11 = __gcry_mpi_alloc(HEAP32[r5 + 4 >> 2]);
    __gcry_mpi_sub(r11, r6, r5);
    r10 = r11;
  }
  r11 = __gcry_mpi_copy(r2);
  do {
    if ((__gcry_mpi_test_bit(r5, 0) | 0) == 0) {
      r12 = __gcry_mpi_alloc_set_ui(1);
      if (r7) {
        r13 = 0;
      } else {
        r13 = __gcry_mpi_alloc_set_ui(0);
      }
      r14 = __gcry_mpi_copy(r5);
      r15 = r13;
      r16 = r12;
      r4 = 629;
      break;
    } else {
      r12 = __gcry_mpi_alloc_set_ui(0);
      if (r7) {
        r17 = 0;
      } else {
        r18 = __gcry_mpi_alloc_set_ui(1);
        HEAP32[r18 + 8 >> 2] = 1;
        r17 = r18;
      }
      r18 = __gcry_mpi_copy(r2);
      r19 = r18 + 8 | 0;
      HEAP32[r19 >> 2] = (HEAP32[r19 >> 2] | 0) == 0 & 1;
      r20 = r18;
      r21 = r17;
      r22 = r12;
      break;
    }
  } while (0);
  while (1) {
    if (r4 == 629) {
      r4 = 0;
      r17 = (__gcry_mpi_test_bit(r16, 0) | 0) != 0;
      if (r7) {
        if (r17) {
          __gcry_mpi_add(r16, r16, r2);
        }
        __gcry_mpi_rshift(r16, r16, 1);
        __gcry_mpi_rshift(r14, r14, 1);
        r20 = r14;
        r21 = r15;
        r22 = r16;
        continue;
      }
      do {
        if (r17) {
          r4 = 632;
        } else {
          if ((__gcry_mpi_test_bit(r15, 0) | 0) == 0) {
            break;
          } else {
            r4 = 632;
            break;
          }
        }
      } while (0);
      if (r4 == 632) {
        r4 = 0;
        __gcry_mpi_add(r16, r16, r2);
        __gcry_mpi_sub(r15, r15, r5);
      }
      __gcry_mpi_rshift(r16, r16, 1);
      __gcry_mpi_rshift(r15, r15, 1);
      __gcry_mpi_rshift(r14, r14, 1);
      r20 = r14;
      r21 = r15;
      r22 = r16;
    }
    if ((__gcry_mpi_test_bit(r20, 0) | 0) == 0) {
      r14 = r20;
      r15 = r21;
      r16 = r22;
      r4 = 629;
      continue;
    }
    r17 = (r20 + 8 | 0) >> 2;
    if ((HEAP32[r17] | 0) == 0) {
      __gcry_mpi_set(r6, r22);
      if (!r7) {
        __gcry_mpi_set(r8, r21);
      }
      __gcry_mpi_set(r3, r20);
    } else {
      __gcry_mpi_sub(r9, r2, r22);
      r13 = (r5 + 8 | 0) >> 2;
      r12 = HEAP32[r13];
      HEAP32[r13] = (r12 | 0) == 0 & 1;
      if (!r7) {
        __gcry_mpi_sub(r10, r5, r21);
      }
      HEAP32[r13] = r12;
      r12 = HEAP32[r17];
      HEAP32[r17] = (r12 | 0) == 0 & 1;
      __gcry_mpi_set(r11, r20);
      HEAP32[r17] = r12;
    }
    __gcry_mpi_sub(r22, r6, r9);
    if (!r7) {
      __gcry_mpi_sub(r21, r8, r10);
    }
    __gcry_mpi_sub(r20, r3, r11);
    do {
      if ((HEAP32[r22 + 8 >> 2] | 0) != 0) {
        __gcry_mpi_add(r22, r22, r2);
        if (r7) {
          break;
        }
        __gcry_mpi_sub(r21, r21, r5);
      }
    } while (0);
    if ((__gcry_mpi_cmp_ui(r20, 0) | 0) == 0) {
      break;
    } else {
      r14 = r20;
      r15 = r21;
      r16 = r22;
      r4 = 629;
      continue;
    }
  }
  __gcry_mpi_set(r1, r6);
  __gcry_mpi_free(r6);
  __gcry_mpi_free(r9);
  __gcry_mpi_free(r22);
  if (r7) {
    __gcry_mpi_free(r3);
    __gcry_mpi_free(r11);
    __gcry_mpi_free(r20);
    __gcry_mpi_free(r5);
    __gcry_mpi_free(r2);
    return 1;
  }
  __gcry_mpi_free(r8);
  __gcry_mpi_free(r10);
  __gcry_mpi_free(r21);
  __gcry_mpi_free(r3);
  __gcry_mpi_free(r11);
  __gcry_mpi_free(r20);
  __gcry_mpi_free(r5);
  __gcry_mpi_free(r2);
  return 1;
}
function __gcry_mpi_mod(r1, r2, r3) {
  __gcry_mpi_fdiv_r(r1, r2, r3);
  HEAP32[r1 + 8 >> 2] = 0;
  return;
}
function __gcry_mpi_barrett_init(r1, r2) {
  var r3, r4, r5, r6;
  __gcry_mpi_normalize(r1);
  r3 = __gcry_xcalloc(1, 28), r4 = r3 >> 2;
  if ((r2 | 0) == 0) {
    HEAP32[r4] = r1;
  } else {
    HEAP32[r4] = __gcry_mpi_copy(r1);
    HEAP32[r4 + 1] = 1;
  }
  r2 = HEAP32[r1 + 4 >> 2];
  r5 = (r3 + 8 | 0) >> 2;
  HEAP32[r5] = r2;
  r6 = __gcry_mpi_alloc(r2 + 1 | 0);
  __gcry_mpi_set_ui(r6, 1);
  __gcry_mpi_lshift_limbs(r6, HEAP32[r5] << 1);
  __gcry_mpi_fdiv_q(r6, r6, r1);
  HEAP32[r4 + 3] = r6;
  HEAP32[r4 + 4] = __gcry_mpi_alloc(HEAP32[r5] << 1 | 1);
  HEAP32[r4 + 5] = __gcry_mpi_alloc(HEAP32[r5] << 1 | 1);
  return r3;
}
function __gcry_mpi_barrett_free(r1) {
  var r2, r3;
  r2 = r1 >> 2;
  if ((r1 | 0) == 0) {
    return;
  }
  __gcry_mpi_free(HEAP32[r2 + 3]);
  __gcry_mpi_free(HEAP32[r2 + 4]);
  __gcry_mpi_free(HEAP32[r2 + 5]);
  r3 = HEAP32[r2 + 6];
  if ((r3 | 0) != 0) {
    __gcry_mpi_free(r3);
  }
  if ((HEAP32[r2 + 1] | 0) != 0) {
    __gcry_mpi_free(HEAP32[r2]);
  }
  __gcry_free(r1);
  return;
}
function __gcry_mpi_mod_barrett(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = r3 >> 2;
  r5 = HEAP32[r4];
  r6 = HEAP32[r4 + 2];
  r7 = HEAP32[r4 + 3];
  r8 = HEAP32[r4 + 4];
  r9 = HEAP32[r4 + 5];
  __gcry_mpi_normalize(r2);
  if ((HEAP32[r2 + 4 >> 2] | 0) > (r6 << 1 | 0)) {
    __gcry_mpi_mod(r1, r2, r5);
    return;
  }
  __gcry_mpi_set(r9, r2);
  __gcry_mpi_rshift_limbs(r9, r6 - 1 | 0);
  __gcry_mpi_mul(r9, r9, r7);
  r7 = r6 + 1 | 0;
  __gcry_mpi_rshift_limbs(r9, r7);
  __gcry_mpi_set(r8, r2);
  r2 = r8 + 4 | 0;
  if ((HEAP32[r2 >> 2] | 0) > (r7 | 0)) {
    HEAP32[r2 >> 2] = r7;
  }
  __gcry_mpi_mul(r9, r9, r5);
  r2 = r9 + 4 | 0;
  if ((HEAP32[r2 >> 2] | 0) > (r7 | 0)) {
    HEAP32[r2 >> 2] = r7;
  }
  __gcry_mpi_sub(r1, r8, r9);
  if ((HEAP32[r1 + 8 >> 2] | 0) != 0) {
    r9 = (r3 + 24 | 0) >> 2;
    if ((HEAP32[r9] | 0) == 0) {
      r3 = __gcry_mpi_alloc(r6 + 2 | 0);
      HEAP32[r9] = r3;
      __gcry_mpi_set_ui(r3, 1);
      __gcry_mpi_lshift_limbs(HEAP32[r9], r7);
    }
    __gcry_mpi_add(r1, r1, HEAP32[r9]);
  }
  if ((__gcry_mpi_cmp(r1, r5) | 0) <= -1) {
    return;
  }
  while (1) {
    __gcry_mpi_sub(r1, r1, r5);
    if ((__gcry_mpi_cmp(r1, r5) | 0) <= -1) {
      break;
    }
  }
  return;
}
function __gcry_mpi_mul_barrett(r1, r2, r3, r4) {
  __gcry_mpi_mul(r1, r2, r3);
  __gcry_mpi_mod_barrett(r1, r1, r4);
  return;
}
function __gcry_mpi_mul_ui(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9;
  r4 = r1 >> 2;
  r5 = HEAP32[r2 + 4 >> 2];
  r6 = HEAP32[r2 + 8 >> 2];
  if ((r5 | 0) == 0 | (r3 | 0) == 0) {
    HEAP32[r4 + 1] = 0;
    HEAP32[r4 + 2] = 0;
    return;
  }
  r7 = r5 + 1 | 0;
  if ((HEAP32[r4] | 0) < (r7 | 0)) {
    __gcry_mpi_resize(r1, r7);
  }
  r1 = HEAP32[r4 + 4];
  r8 = __gcry_mpih_mul_1(r1, HEAP32[r2 + 16 >> 2], r5, r3);
  if ((r8 | 0) == 0) {
    r9 = r5;
  } else {
    HEAP32[r1 + (r5 << 2) >> 2] = r8;
    r9 = r7;
  }
  HEAP32[r4 + 1] = r9;
  HEAP32[r4 + 2] = r6;
  return;
}
function __gcry_mpi_mul_2exp(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r4 = r1 >> 2;
  r5 = HEAP32[r2 + 4 >> 2];
  r6 = HEAP32[r2 + 8 >> 2];
  if ((r5 | 0) == 0) {
    HEAP32[r4 + 1] = 0;
    HEAP32[r4 + 2] = 0;
    return;
  }
  r7 = r3 >>> 5;
  r8 = r5 + r7 | 0;
  r9 = r8 + 1 | 0;
  if ((HEAP32[r4] | 0) < (r9 | 0)) {
    __gcry_mpi_resize(r1, r9);
  }
  r1 = HEAP32[r4 + 4];
  r10 = r1;
  r11 = r3 & 31;
  L939 : do {
    if ((r11 | 0) == 0) {
      if ((r5 | 0) <= 0) {
        r12 = r8;
        break;
      }
      r13 = r2 + 16 | 0;
      r14 = r5;
      while (1) {
        r15 = r14 - 1 | 0;
        HEAP32[r1 + (r15 + r7 << 2) >> 2] = HEAP32[HEAP32[r13 >> 2] + (r15 << 2) >> 2];
        if ((r15 | 0) > 0) {
          r14 = r15;
        } else {
          r12 = r8;
          break L939;
        }
      }
    } else {
      r14 = __gcry_mpih_lshift((r7 << 2) + r1 | 0, HEAP32[r2 + 16 >> 2], r5, r11);
      if ((r14 | 0) == 0) {
        r12 = r8;
        break;
      }
      HEAP32[r1 + (r8 << 2) >> 2] = r14;
      r12 = r9;
    }
  } while (0);
  if ((r7 | 0) != 0) {
    _memset(r10, 0, r3 >>> 0 > 63 ? r3 >>> 5 << 2 : 4);
  }
  HEAP32[r4 + 1] = r12;
  HEAP32[r4 + 2] = r6;
  return;
}
function __gcry_mpi_mul(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28;
  r4 = r1 >> 2;
  r5 = 0;
  r6 = r2 + 4 | 0;
  r7 = HEAP32[r6 >> 2];
  r8 = r3 + 4 | 0;
  r9 = HEAP32[r8 >> 2];
  r10 = (r7 | 0) < (r9 | 0);
  r11 = (r10 ? r2 : r3) >> 2;
  r12 = (r10 ? r3 : r2) >> 2;
  r13 = r10 ? r9 : r7;
  r7 = HEAP32[r12 + 3] & 1;
  r9 = r10 ? HEAP32[r6 >> 2] : HEAP32[r8 >> 2];
  r8 = HEAP32[r12 + 4];
  r6 = HEAP32[r11 + 3] & 1;
  r10 = HEAP32[r11 + 4];
  r14 = HEAP32[r12 + 2] ^ HEAP32[r11 + 2];
  r11 = r1 + 16 | 0;
  r12 = HEAP32[r11 >> 2];
  r15 = r13 + r9 | 0;
  r16 = (r1 | 0) != 0;
  do {
    if (r16) {
      if ((HEAP32[r4 + 3] & 1 | 0) != 0) {
        r5 = 720;
        break;
      }
      if ((r2 | 0) == 0) {
        r5 = 717;
        break;
      } else {
        r5 = 716;
        break;
      }
    } else {
      r5 = 716;
    }
  } while (0);
  do {
    if (r5 == 716) {
      if ((HEAP32[r2 + 12 >> 2] & 1 | 0) == 0) {
        r5 = 717;
        break;
      } else {
        r5 = 719;
        break;
      }
    }
  } while (0);
  do {
    if (r5 == 717) {
      if ((r3 | 0) == 0) {
        r5 = 720;
        break;
      }
      if ((HEAP32[r3 + 12 >> 2] & 1 | 0) == 0) {
        r5 = 720;
        break;
      } else {
        r5 = 719;
        break;
      }
    }
  } while (0);
  L960 : do {
    if (r5 == 720) {
      r3 = (r12 | 0) == (r8 | 0);
      if ((HEAP32[r4] | 0) < (r15 | 0)) {
        if (!(r3 | (r12 | 0) == (r10 | 0))) {
          __gcry_mpi_resize(r1, r15);
          r17 = 0;
          r18 = 0;
          r19 = 0;
          r20 = HEAP32[r11 >> 2];
          r21 = r10;
          r22 = r8;
          break;
        }
        if (r16) {
          r23 = (HEAP32[r4 + 3] & 1 | 0) != 0;
        } else {
          r23 = 0;
        }
        r17 = 0;
        r18 = 0;
        r19 = 1;
        r20 = __gcry_mpi_alloc_limb_space(r15, r23 & 1);
        r21 = r10;
        r22 = r8;
        break;
      }
      if (r3) {
        r3 = __gcry_mpi_alloc_limb_space(r13, r7);
        r2 = (r12 | 0) == (r10 | 0) ? r3 : r10;
        if ((r13 | 0) > 0) {
          r24 = 0;
        } else {
          r17 = r13;
          r18 = r3;
          r19 = 0;
          r20 = r12;
          r21 = r2;
          r22 = r3;
          break;
        }
        while (1) {
          HEAP32[r3 + (r24 << 2) >> 2] = HEAP32[r12 + (r24 << 2) >> 2];
          r25 = r24 + 1 | 0;
          if ((r25 | 0) < (r13 | 0)) {
            r24 = r25;
          } else {
            r17 = r13;
            r18 = r3;
            r19 = 0;
            r20 = r12;
            r21 = r2;
            r22 = r3;
            break L960;
          }
        }
      }
      if ((r12 | 0) != (r10 | 0)) {
        r17 = 0;
        r18 = 0;
        r19 = 0;
        r20 = r12;
        r21 = r10;
        r22 = r8;
        break;
      }
      r3 = __gcry_mpi_alloc_limb_space(r9, r6);
      if ((r9 | 0) > 0) {
        r26 = 0;
      } else {
        r17 = r9;
        r18 = r3;
        r19 = 0;
        r20 = r12;
        r21 = r3;
        r22 = r8;
        break;
      }
      while (1) {
        HEAP32[r3 + (r26 << 2) >> 2] = HEAP32[r12 + (r26 << 2) >> 2];
        r2 = r26 + 1 | 0;
        if ((r2 | 0) == (r9 | 0)) {
          r17 = r9;
          r18 = r3;
          r19 = 0;
          r20 = r12;
          r21 = r3;
          r22 = r8;
          break L960;
        } else {
          r26 = r2;
        }
      }
    } else if (r5 == 719) {
      r17 = 0;
      r18 = 0;
      r19 = 2;
      r20 = __gcry_mpi_alloc_limb_space(r15, 1);
      r21 = r10;
      r22 = r8;
    }
  } while (0);
  if ((r9 | 0) == 0) {
    r27 = 0;
  } else {
    r27 = r15 - ((__gcry_mpih_mul(r20, r22, r13, r21, r9) | 0) == 0 & 1) | 0;
  }
  do {
    if ((r19 | 0) == 2) {
      r9 = __gcry_mpi_alloc_limb_space(r27, 0);
      L986 : do {
        if ((r27 | 0) > 0) {
          r21 = 0;
          while (1) {
            HEAP32[r9 + (r21 << 2) >> 2] = HEAP32[r20 + (r21 << 2) >> 2];
            r13 = r21 + 1 | 0;
            if ((r13 | 0) == (r27 | 0)) {
              break L986;
            } else {
              r21 = r13;
            }
          }
        }
      } while (0);
      __gcry_mpi_free_limb_space(r20, 0);
      r28 = r9;
      r5 = 738;
      break;
    } else if ((r19 | 0) != 0) {
      r28 = r20;
      r5 = 738;
    }
  } while (0);
  if (r5 == 738) {
    __gcry_mpi_assign_limb_space(r1, r28, r27);
  }
  HEAP32[r4 + 1] = r27;
  HEAP32[r4 + 2] = r14;
  if ((r18 | 0) == 0) {
    return;
  }
  __gcry_mpi_free_limb_space(r18, r17);
  return;
}
function __gcry_mpi_mulm(r1, r2, r3, r4) {
  __gcry_mpi_mul(r1, r2, r3);
  __gcry_mpi_fdiv_r(r1, r1, r4);
  return;
}
function __gcry_mpi_getbyte(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  r4 = HEAP32[r1 + 16 >> 2];
  r5 = r1 + 4 | 0;
  if ((HEAP32[r5 >> 2] | 0) > 0) {
    r6 = 0;
    r7 = 0;
  } else {
    r8 = -1;
    return r8;
  }
  while (1) {
    r9 = HEAP32[r4 + (r7 << 2) >> 2];
    if ((r6 | 0) == (r2 | 0)) {
      r10 = 0;
      break;
    }
    if ((r6 | 1 | 0) == (r2 | 0)) {
      r10 = 8;
      break;
    }
    if ((r6 | 2 | 0) == (r2 | 0)) {
      r10 = 16;
      break;
    }
    if ((r6 | 3 | 0) == (r2 | 0)) {
      r10 = 24;
      break;
    }
    r1 = r7 + 1 | 0;
    if ((r1 | 0) < (HEAP32[r5 >> 2] | 0)) {
      r6 = r6 + 4 | 0;
      r7 = r1;
    } else {
      r8 = -1;
      r3 = 754;
      break;
    }
  }
  if (r3 == 754) {
    return r8;
  }
  r8 = r9 >>> (r10 >>> 0) & 255;
  return r8;
}
function __gcry_mpi_trailing_zeros(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10;
  r2 = 0;
  r3 = r1 + 4 | 0;
  if ((HEAP32[r3 >> 2] | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = HEAP32[r1 + 16 >> 2];
  r1 = 0;
  r6 = 0;
  while (1) {
    r7 = HEAP32[r5 + (r6 << 2) >> 2];
    if ((r7 | 0) != 0) {
      break;
    }
    r8 = r1 + 32 | 0;
    r9 = r6 + 1 | 0;
    if (r9 >>> 0 < HEAP32[r3 >> 2] >>> 0) {
      r1 = r8;
      r6 = r9;
    } else {
      r4 = r8;
      r2 = 767;
      break;
    }
  }
  if (r2 == 767) {
    return r4;
  }
  r2 = r7 & -r7;
  if (r2 >>> 0 < 65536) {
    r10 = r2 >>> 0 < 256 ? 0 : 8;
  } else {
    r10 = r2 >>> 0 < 16777216 ? 16 : 24;
  }
  r4 = r1 - 1 + r10 + HEAPU8[(r2 >>> (r10 >>> 0)) + 492876 | 0] | 0;
  return r4;
}
function __gcry_mpi_dump(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10;
  r2 = STACKTOP;
  __gcry_log_printf(490424, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  if ((r1 | 0) == 0) {
    __gcry_log_printf(490208, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = r2;
    return;
  }
  if ((HEAP32[r1 + 8 >> 2] | 0) != 0) {
    __gcry_log_printf(481628, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r3 = r1 + 4 | 0;
  r4 = HEAP32[r3 >> 2];
  L1034 : do {
    if ((r4 | 0) > 0) {
      r5 = r1 + 16 | 0;
      r6 = r4;
      r7 = r4;
      while (1) {
        r8 = r7 - 1 | 0;
        __gcry_log_printf((r7 | 0) != (r6 | 0) ? 477472 : 474512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[HEAP32[r5 >> 2] + (r8 << 2) >> 2], tempInt));
        r9 = HEAP32[r3 >> 2];
        if ((r8 | 0) > 0) {
          r6 = r9;
          r7 = r8;
        } else {
          r10 = r9;
          break L1034;
        }
      }
    } else {
      r10 = r4;
    }
  } while (0);
  if ((r10 | 0) != 0) {
    STACKTOP = r2;
    return;
  }
  __gcry_log_printf(472452, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r2;
  return;
}
function __gcry_log_mpidump(r1, r2) {
  var r3;
  r3 = STACKTOP;
  __gcry_log_printf(471048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  __gcry_mpi_dump(r2);
  __gcry_log_printf(469656, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r3;
  return;
}
function __gcry_mpi_get_buffer(r1, r2, r3) {
  return _do_get_buffer(r1, r2, r3, 0);
}
function __gcry_mpi_powm(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81;
  r5 = r1 >> 2;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r8 = r7;
  r9 = HEAP32[r3 + 4 >> 2];
  r10 = HEAP32[r4 + 4 >> 2];
  r11 = r10 << 1;
  r12 = HEAP32[r4 + 8 >> 2];
  if ((r3 | 0) == 0) {
    r13 = 0;
  } else {
    r13 = (HEAP32[r3 + 12 >> 2] & 1 | 0) != 0;
  }
  r14 = r13 & 1;
  r15 = HEAP32[r4 + 12 >> 2] & 1;
  r16 = (r15 | 0) != 0;
  if ((r2 | 0) == 0) {
    r17 = 0;
  } else {
    r17 = (HEAP32[r2 + 12 >> 2] & 1 | 0) != 0;
  }
  r18 = r17 & 1;
  r19 = (r1 + 16 | 0) >> 2;
  r20 = HEAP32[r19], r21 = r20 >> 2;
  r22 = HEAP32[r3 + 16 >> 2];
  if ((r10 | 0) == 0) {
    r23 = 1 / (r10 | 0) & -1;
  } else {
    r23 = r10;
  }
  if ((r9 | 0) == 0) {
    HEAP32[r21] = 1;
    if ((r23 | 0) == 1) {
      r24 = (HEAP32[HEAP32[r4 + 16 >> 2] >> 2] | 0) == 1;
    } else {
      r24 = 0;
    }
    HEAP32[r5 + 1] = r24 & 1 ^ 1;
    HEAP32[r5 + 2] = 0;
    STACKTOP = r7;
    return;
  }
  r24 = r16 ? r23 : 0;
  r10 = __gcry_mpi_alloc_limb_space(r23, r15);
  r3 = (r4 + 16 | 0) >> 2;
  r4 = HEAP32[HEAP32[r3] + (r23 - 1 << 2) >> 2];
  if (r4 >>> 0 < 65536) {
    r25 = r4 >>> 0 < 256 ? 0 : 8;
  } else {
    r25 = r4 >>> 0 < 16777216 ? 16 : 24;
  }
  r26 = HEAPU8[(r4 >>> (r25 >>> 0)) + 492876 | 0] + r25 | 0;
  r25 = 32 - r26 | 0;
  r4 = (r26 | 0) != 32;
  L1066 : do {
    if (r4) {
      __gcry_mpih_lshift(r10, HEAP32[r3], r23, r25);
    } else {
      if ((r23 | 0) > 0) {
        r27 = 0;
      } else {
        break;
      }
      while (1) {
        HEAP32[r10 + (r27 << 2) >> 2] = HEAP32[HEAP32[r3] + (r27 << 2) >> 2];
        r26 = r27 + 1 | 0;
        if ((r26 | 0) == (r23 | 0)) {
          break L1066;
        } else {
          r27 = r26;
        }
      }
    }
  } while (0);
  r27 = HEAP32[r2 + 4 >> 2];
  r3 = r2 + 8 | 0;
  r26 = HEAP32[r3 >> 2];
  L1072 : do {
    if ((r27 | 0) > (r23 | 0)) {
      r28 = r27 + 1 | 0;
      r29 = r17 ? r28 : 0;
      r30 = __gcry_mpi_alloc_limb_space(r28, r18);
      L1074 : do {
        if ((r27 | 0) > 0) {
          r28 = r2 + 16 | 0;
          r31 = 0;
          while (1) {
            HEAP32[r30 + (r31 << 2) >> 2] = HEAP32[HEAP32[r28 >> 2] + (r31 << 2) >> 2];
            r32 = r31 + 1 | 0;
            if ((r32 | 0) == (r27 | 0)) {
              break L1074;
            } else {
              r31 = r32;
            }
          }
        }
      } while (0);
      __gcry_mpih_divrem((r23 << 2) + r30 | 0, 0, r30, r27, r10, r23);
      r31 = r23;
      while (1) {
        if ((r31 | 0) <= 0) {
          r33 = r30;
          r34 = r29;
          r35 = r30;
          r36 = r31;
          r6 = 808;
          break L1072;
        }
        r28 = r31 - 1 | 0;
        if ((HEAP32[r30 + (r28 << 2) >> 2] | 0) == 0) {
          r31 = r28;
        } else {
          r37 = r31;
          r38 = r30;
          r39 = r29;
          r40 = r30;
          r6 = 810;
          break L1072;
        }
      }
    } else {
      r33 = HEAP32[r2 + 16 >> 2];
      r34 = 0;
      r35 = 0;
      r36 = r27;
      r6 = 808;
      break;
    }
  } while (0);
  do {
    if (r6 == 808) {
      if ((r36 | 0) != 0) {
        r37 = r36;
        r38 = r35;
        r39 = r34;
        r40 = r33;
        r6 = 810;
        break;
      }
      HEAP32[r5 + 1] = 0;
      HEAP32[r5 + 2] = 0;
      r41 = 0;
      r42 = 0;
      r43 = 0;
      r44 = r34;
      r45 = 0;
      r46 = 0;
      r47 = r35;
      r48 = r10;
      break;
    }
  } while (0);
  do {
    if (r6 == 810) {
      L1088 : do {
        if ((r20 | 0) == (r40 | 0)) {
          if ((r38 | 0) != 0) {
            __gcry_assert_failed(490452, 490220, 137, 495684);
          }
          r35 = r17 ? r37 : 0;
          r34 = __gcry_mpi_alloc_limb_space(r37, r18);
          if ((r37 | 0) > 0) {
            r49 = 0;
          } else {
            r50 = r34;
            r51 = r35;
            r52 = r34;
            break;
          }
          while (1) {
            HEAP32[r34 + (r49 << 2) >> 2] = HEAP32[(r49 << 2 >> 2) + r21];
            r33 = r49 + 1 | 0;
            if ((r33 | 0) == (r37 | 0)) {
              r50 = r34;
              r51 = r35;
              r52 = r34;
              break L1088;
            } else {
              r49 = r33;
            }
          }
        } else {
          r50 = r40;
          r51 = r39;
          r52 = r38;
        }
      } while (0);
      L1096 : do {
        if ((r20 | 0) == (r22 | 0)) {
          r34 = r13 ? r9 : 0;
          r35 = __gcry_mpi_alloc_limb_space(r9, r14);
          if ((r9 | 0) > 0) {
            r53 = 0;
          } else {
            r54 = r35, r55 = r54 >> 2;
            r56 = r34;
            r57 = r35;
            break;
          }
          while (1) {
            HEAP32[r35 + (r53 << 2) >> 2] = HEAP32[(r53 << 2 >> 2) + r21];
            r33 = r53 + 1 | 0;
            if ((r33 | 0) == (r9 | 0)) {
              r54 = r35, r55 = r54 >> 2;
              r56 = r34;
              r57 = r35;
              break L1096;
            } else {
              r53 = r33;
            }
          }
        } else {
          r54 = r22, r55 = r54 >> 2;
          r56 = 0;
          r57 = 0;
        }
      } while (0);
      L1101 : do {
        if ((r20 | 0) == (r10 | 0)) {
          if ((r10 | 0) != 0) {
            __gcry_assert_failed(481632, 490220, 152, 495684);
          }
          r35 = __gcry_mpi_alloc_limb_space(r23, r15);
          if ((r23 | 0) > 0) {
            r58 = 0;
          } else {
            r59 = r35;
            break;
          }
          while (1) {
            HEAP32[r35 + (r58 << 2) >> 2] = HEAP32[(r58 << 2 >> 2) + r21];
            r34 = r58 + 1 | 0;
            if ((r34 | 0) == (r23 | 0)) {
              r59 = r35;
              break L1101;
            } else {
              r58 = r34;
            }
          }
        } else {
          r59 = r10;
        }
      } while (0);
      if ((HEAP32[r5] | 0) < (r11 | 0)) {
        __gcry_mpi_resize(r1, r11);
        r60 = HEAP32[r19];
      } else {
        r60 = r20;
      }
      L1112 : do {
        if ((r37 | 0) > 0) {
          r35 = 0;
          while (1) {
            HEAP32[r60 + (r35 << 2) >> 2] = HEAP32[r50 + (r35 << 2) >> 2];
            r34 = r35 + 1 | 0;
            if ((r34 | 0) == (r37 | 0)) {
              break L1112;
            } else {
              r35 = r34;
            }
          }
        }
      } while (0);
      if (r16) {
        r61 = (r23 << 1) + 2 | 0;
      } else {
        r61 = 0;
      }
      r35 = __gcry_mpi_alloc_limb_space((r23 << 1) + 2 | 0, r15);
      r34 = r8 >> 2;
      HEAP32[r34] = 0;
      HEAP32[r34 + 1] = 0;
      HEAP32[r34 + 2] = 0;
      HEAP32[r34 + 3] = 0;
      HEAP32[r34 + 4] = 0;
      HEAP32[r34 + 5] = 0;
      HEAP32[r34 + 6] = 0;
      if ((HEAP32[r55] & 1 | 0) == 0) {
        r62 = 1;
      } else {
        r62 = (HEAP32[r3 >> 2] | 0) == 0;
      }
      r34 = r9 - 1 | 0;
      r33 = HEAP32[(r34 << 2 >> 2) + r55];
      if (r33 >>> 0 < 65536) {
        r63 = r33 >>> 0 < 256 ? 0 : 8;
      } else {
        r63 = r33 >>> 0 < 16777216 ? 16 : 24;
      }
      r36 = 32 - r63 - HEAPU8[(r33 >>> (r63 >>> 0)) + 492876 | 0] | 0;
      r27 = (r37 | 0) < 16;
      r2 = r60;
      r30 = r33 << r36;
      r33 = 31 - r36 | 0;
      r36 = r35;
      r29 = r34;
      r34 = 0;
      r31 = 0;
      r28 = r37;
      while (1) {
        r32 = r30 << 1;
        if ((r33 | 0) == 0) {
          r64 = r29 - 1 | 0;
          if ((r64 | 0) < 0) {
            break;
          }
          r65 = r64;
          r66 = 32;
          r67 = HEAP32[(r64 << 2 >> 2) + r55];
        } else {
          r65 = r29;
          r66 = r33;
          r67 = r32;
        }
        if ((r28 | 0) < 16) {
          __gcry_mpih_sqr_n_basecase(r36, r2, r28);
          r68 = r34;
          r69 = r31;
        } else {
          r32 = r28 << 1;
          do {
            if ((r31 | 0) == 0) {
              r70 = r32;
              r71 = __gcry_mpi_alloc_limb_space(r32, 0);
            } else {
              if ((r34 | 0) >= (r32 | 0)) {
                r70 = r34;
                r71 = r31;
                break;
              }
              __gcry_mpi_free_limb_space(r31, 0);
              r70 = r32;
              r71 = __gcry_mpi_alloc_limb_space(r32, 0);
            }
          } while (0);
          __gcry_mpih_sqr_n(r36, r2, r28, r71);
          r68 = r70;
          r69 = r71;
        }
        r32 = r28 << 1;
        if ((r32 | 0) > (r23 | 0)) {
          __gcry_mpih_divrem((r23 << 2) + r36 | 0, 0, r36, r32, r59, r23);
          r72 = r23;
        } else {
          r72 = r32;
        }
        do {
          if ((r67 | 0) < 0) {
            if (r27) {
              __gcry_mpih_mul(r2, r36, r72, r50, r37);
            } else {
              __gcry_mpih_mul_karatsuba_case(r2, r36, r72, r50, r37, r8);
            }
            r32 = r72 + r37 | 0;
            if ((r32 | 0) <= (r23 | 0)) {
              r73 = r2;
              r74 = r36;
              r75 = r32;
              break;
            }
            __gcry_mpih_divrem((r23 << 2) + r2 | 0, 0, r2, r32, r59, r23);
            r73 = r2;
            r74 = r36;
            r75 = r23;
          } else {
            r73 = r36;
            r74 = r2;
            r75 = r72;
          }
        } while (0);
        r2 = r73;
        r30 = r67;
        r33 = r66 - 1 | 0;
        r36 = r74;
        r29 = r65;
        r34 = r68;
        r31 = r69;
        r28 = r75;
      }
      r34 = HEAP32[r19];
      do {
        if (r4) {
          r29 = __gcry_mpih_lshift(r34, r2, r28, r25);
          r36 = HEAP32[r19];
          if ((r29 | 0) == 0) {
            r76 = r36;
            r77 = r28;
            break;
          }
          HEAP32[r36 + (r28 << 2) >> 2] = r29;
          r76 = r36;
          r77 = r28 + 1 | 0;
        } else {
          if ((r34 | 0) == (r2 | 0)) {
            r76 = r2;
            r77 = r28;
            break;
          }
          L1158 : do {
            if ((r28 | 0) > 0) {
              r36 = 0;
              while (1) {
                HEAP32[HEAP32[r19] + (r36 << 2) >> 2] = HEAP32[r2 + (r36 << 2) >> 2];
                r29 = r36 + 1 | 0;
                if ((r29 | 0) == (r28 | 0)) {
                  break L1158;
                } else {
                  r36 = r29;
                }
              }
            }
          } while (0);
          r76 = HEAP32[r19];
          r77 = r28;
        }
      } while (0);
      if ((r77 | 0) < (r23 | 0)) {
        r78 = r77;
      } else {
        __gcry_mpih_divrem((r23 << 2) + r76 | 0, 0, r76, r77, r59, r23);
        r78 = r23;
      }
      do {
        if (r4) {
          __gcry_mpih_rshift(r76, r76, r78, r25);
          r79 = r78;
          break;
        } else {
          r79 = r78;
        }
      } while (0);
      while (1) {
        if ((r79 | 0) <= 0) {
          break;
        }
        r28 = r79 - 1 | 0;
        if ((HEAP32[r76 + (r28 << 2) >> 2] | 0) == 0) {
          r79 = r28;
        } else {
          break;
        }
      }
      __gcry_mpih_release_karatsuba_ctx(r8);
      L1172 : do {
        if (r62 | (r79 | 0) == 0) {
          r80 = r79;
          r81 = r26;
        } else {
          if (r4) {
            __gcry_mpih_rshift(r59, r59, r23, r25);
          }
          __gcry_mpih_sub(r76, r59, r23, r76, r79);
          r28 = r23;
          while (1) {
            if ((r28 | 0) <= 0) {
              r80 = r28;
              r81 = r12;
              break L1172;
            }
            r2 = r28 - 1 | 0;
            if ((HEAP32[r76 + (r2 << 2) >> 2] | 0) == 0) {
              r28 = r2;
            } else {
              r80 = r28;
              r81 = r12;
              break L1172;
            }
          }
        }
      } while (0);
      if ((HEAP32[r19] | 0) == (r76 | 0)) {
        HEAP32[r5 + 1] = r80;
        HEAP32[r5 + 2] = r81;
        r41 = r31;
        r42 = r61;
        r43 = r56;
        r44 = r51;
        r45 = r35;
        r46 = r57;
        r47 = r52;
        r48 = r59;
        break;
      } else {
        __gcry_assert_failed(477480, 490220, 309, 495684);
      }
    }
  } while (0);
  if ((r48 | 0) != 0) {
    __gcry_mpi_free_limb_space(r48, r24);
  }
  if ((r47 | 0) != 0) {
    __gcry_mpi_free_limb_space(r47, r44);
  }
  if ((r46 | 0) != 0) {
    __gcry_mpi_free_limb_space(r46, r43);
  }
  if ((r45 | 0) != 0) {
    __gcry_mpi_free_limb_space(r45, r42);
  }
  if ((r41 | 0) == 0) {
    STACKTOP = r7;
    return;
  }
  __gcry_mpi_free_limb_space(r41, 0);
  STACKTOP = r7;
  return;
}
function __gcry_mpi_putbyte(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = 0;
  r5 = r3 & 255;
  r6 = HEAP32[r1 + 16 >> 2];
  r7 = r1 | 0;
  if ((HEAP32[r7 >> 2] | 0) > 0) {
    r8 = 0;
    r9 = 0;
  } else {
    _abort();
  }
  while (1) {
    r10 = ((r9 << 2) + r6 | 0) >> 2;
    r11 = HEAP32[r10];
    if ((r8 | 0) == (r2 | 0)) {
      r4 = 892;
      break;
    }
    if ((r8 | 1 | 0) == (r2 | 0)) {
      r4 = 893;
      break;
    }
    if ((r8 | 2 | 0) == (r2 | 0)) {
      r4 = 894;
      break;
    }
    if ((r8 | 3 | 0) == (r2 | 0)) {
      r4 = 895;
      break;
    }
    r12 = r9 + 1 | 0;
    if ((r12 | 0) < (HEAP32[r7 >> 2] | 0)) {
      r8 = r8 + 4 | 0;
      r9 = r12;
    } else {
      r4 = 906;
      break;
    }
  }
  if (r4 == 894) {
    r13 = r11 & -16711681 | r5 << 16;
  } else if (r4 == 893) {
    r13 = r11 & -65281 | r5 << 8;
  } else if (r4 == 892) {
    r13 = r11 & -256 | r5;
  } else if (r4 == 906) {
    _abort();
  } else if (r4 == 895) {
    r13 = r11 & 16777215 | r3 << 24;
  }
  r3 = r1 + 4 | 0;
  if ((HEAP32[r3 >> 2] | 0) > (r9 | 0)) {
    HEAP32[r10] = r13;
    return;
  }
  HEAP32[r3 >> 2] = r9 + 1 | 0;
  HEAP32[r10] = r13;
  return;
}
function _do_get_buffer(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = 0;
  if ((r3 | 0) != 0) {
    HEAP32[r3 >> 2] = HEAP32[r1 + 8 >> 2];
  }
  r3 = r1 + 4 | 0;
  r6 = HEAP32[r3 >> 2] << 2;
  HEAP32[r2 >> 2] = r6;
  r7 = (r6 | 0) == 0 ? 1 : r6;
  do {
    if ((r4 | 0) == 0) {
      if ((r1 | 0) != 0) {
        if ((HEAP32[r1 + 12 >> 2] & 1 | 0) != 0) {
          r5 = 913;
          break;
        }
      }
      r8 = __gcry_malloc(r7);
      break;
    } else {
      r5 = 913;
    }
  } while (0);
  if (r5 == 913) {
    r8 = __gcry_malloc_secure(r7);
  }
  if ((r8 | 0) == 0) {
    r9 = 0;
    return r9;
  }
  r7 = HEAP32[r3 >> 2];
  L1236 : do {
    if ((r7 | 0) > 0) {
      r3 = r1 + 16 | 0;
      r5 = r8;
      r4 = r7;
      while (1) {
        r6 = r4 - 1 | 0;
        r10 = HEAP32[HEAP32[r3 >> 2] + (r6 << 2) >> 2];
        HEAP8[r5] = r10 >>> 24 & 255;
        HEAP8[r5 + 1 | 0] = r10 >>> 16 & 255;
        HEAP8[r5 + 2 | 0] = r10 >>> 8 & 255;
        HEAP8[r5 + 3 | 0] = r10 & 255;
        if ((r6 | 0) > 0) {
          r5 = r5 + 4 | 0;
          r4 = r6;
        } else {
          break L1236;
        }
      }
    }
  } while (0);
  if (HEAP8[r8] << 24 >> 24 != 0) {
    r9 = r8;
    return r9;
  }
  r7 = r8;
  r1 = HEAP32[r2 >> 2];
  while (1) {
    if ((r1 | 0) == 0) {
      r11 = r7;
      break;
    }
    r4 = r7 + 1 | 0;
    r5 = r1 - 1 | 0;
    HEAP32[r2 >> 2] = r5;
    if (HEAP8[r4] << 24 >> 24 == 0) {
      r7 = r4;
      r1 = r5;
    } else {
      r11 = r4;
      break;
    }
  }
  if ((r11 | 0) == (r8 | 0)) {
    r9 = r8;
    return r9;
  }
  _memmove(r8, r11, HEAP32[r2 >> 2], 1, 0);
  r9 = r8;
  return r9;
}
function __gcry_mpi_get_secure_buffer(r1, r2, r3) {
  return _do_get_buffer(r1, r2, r3, 1);
}
function __gcry_mpi_scan(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r6 = r1 >> 2;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r8 = r7, r9 = r8 >> 2;
  if ((r3 | 0) == 0) {
    r10 = 0;
  } else {
    r10 = (__gcry_is_secure(r3) | 0) != 0;
  }
  r11 = (r2 | 0) == 3;
  r12 = r11 ? 0 : r4;
  HEAP32[r9] = r12;
  L1257 : do {
    if ((r2 | 0) == 1) {
      r13 = (r12 + 3 | 0) >>> 2;
      if (r10) {
        r14 = __gcry_mpi_alloc_secure(r13);
      } else {
        r14 = __gcry_mpi_alloc(r13);
      }
      do {
        if ((HEAP32[r9] | 0) != 0) {
          r13 = HEAP8[r3];
          HEAP32[r14 + 8 >> 2] = (r13 & 255) >>> 7 & 255;
          if (r13 << 24 >> 24 < 0) {
            __gcry_mpi_free(r14);
            r15 = _gcry_error1095(63);
            break L1257;
          } else {
            __gcry_mpi_set_buffer(r14, r3, HEAP32[r9], 0);
            break;
          }
        }
      } while (0);
      if ((r1 | 0) == 0) {
        __gcry_mpi_free(r14);
        r15 = 0;
        break;
      } else {
        __gcry_mpi_normalize(r14);
        HEAP32[r6] = r14;
        r15 = 0;
        break;
      }
    } else if ((r2 | 0) == 5) {
      r13 = (r12 + 3 | 0) >>> 2;
      if (r10) {
        r16 = __gcry_mpi_alloc_secure(r13);
      } else {
        r16 = __gcry_mpi_alloc(r13);
      }
      r13 = HEAP32[r9];
      if ((r13 | 0) != 0) {
        __gcry_mpi_set_buffer(r16, r3, r13, 0);
      }
      if ((r1 | 0) == 0) {
        __gcry_mpi_free(r16);
        r15 = 0;
        break;
      } else {
        __gcry_mpi_normalize(r16);
        HEAP32[r6] = r16;
        r15 = 0;
        break;
      }
    } else if ((r2 | 0) == 2) {
      r13 = _mpi_read_from_buffer(r3, r8, r10 & 1);
      if ((r5 | 0) != 0) {
        HEAP32[r5 >> 2] = HEAP32[r9];
      }
      r17 = (r13 | 0) == 0;
      do {
        if ((r1 | 0) == 0 | r17) {
          if (r17) {
            break;
          }
          __gcry_mpi_free(r13);
        } else {
          __gcry_mpi_normalize(r13);
          HEAP32[r6] = r13;
          if ((r13 | 0) != 0) {
            r15 = 0;
            break L1257;
          }
        }
      } while (0);
      r15 = _gcry_error1095(65);
    } else {
      if (!r11) {
        if ((r2 | 0) != 4) {
          r15 = _gcry_error1095(45);
          break;
        }
        if ((r4 | 0) != 0) {
          r15 = _gcry_error1095(45);
          break;
        }
        if (r10) {
          r18 = __gcry_mpi_alloc_secure(0);
        } else {
          r18 = __gcry_mpi_alloc(0);
        }
        if ((_mpi_fromstr(r18, r3) | 0) != 0) {
          __gcry_mpi_free(r18);
          r15 = _gcry_error1095(65);
          break;
        }
        if ((r1 | 0) == 0) {
          __gcry_mpi_free(r18);
          r15 = 0;
          break;
        } else {
          __gcry_mpi_normalize(r18);
          HEAP32[r6] = r18;
          r15 = 0;
          break;
        }
      }
      r13 = (r12 | 0) != 0;
      if (r13 & r12 >>> 0 < 4) {
        r15 = _gcry_error1095(66);
        break;
      }
      r17 = HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0];
      r19 = r3 + 4 | 0;
      if (r13) {
        HEAP32[r9] = r12 - 4 | 0;
      }
      r13 = HEAP32[r9];
      if ((r13 | 0) != 0 & r17 >>> 0 > r13 >>> 0) {
        r15 = _gcry_error1095(67);
        break;
      }
      r13 = r17 + 4 | 0;
      r20 = (r17 + 3 | 0) >>> 2;
      if (r10) {
        r21 = __gcry_mpi_alloc_secure(r20);
      } else {
        r21 = __gcry_mpi_alloc(r20);
      }
      do {
        if ((r17 | 0) != 0) {
          r20 = HEAP8[r19];
          HEAP32[r21 + 8 >> 2] = (r20 & 255) >>> 7 & 255;
          if (r20 << 24 >> 24 < 0) {
            __gcry_mpi_free(r21);
            r15 = _gcry_error1095(63);
            break L1257;
          } else {
            __gcry_mpi_set_buffer(r21, r19, r17, 0);
            break;
          }
        }
      } while (0);
      if ((r5 | 0) != 0) {
        HEAP32[r5 >> 2] = r13;
      }
      if ((r1 | 0) == 0) {
        __gcry_mpi_free(r21);
        r15 = 0;
        break;
      } else {
        __gcry_mpi_normalize(r21);
        HEAP32[r6] = r21;
        r15 = 0;
        break;
      }
    }
  } while (0);
  STACKTOP = r7;
  return r15;
}
function _gcry_error1095(r1) {
  return _gcry_err_make1102(r1);
}
function _mpi_read_from_buffer(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  L1340 : do {
    if (HEAP32[r2 >> 2] >>> 0 < 2) {
      r4 = 0;
      r5 = 0;
    } else {
      r6 = HEAPU8[r1] << 8 | HEAPU8[r1 + 1 | 0];
      if (r6 >>> 0 > 16384) {
        r4 = 0;
        r5 = 0;
        break;
      }
      r7 = (r6 + 7 | 0) >>> 3;
      r6 = (r7 + 3 | 0) >>> 2;
      if ((r3 | 0) == 0) {
        r8 = __gcry_mpi_alloc(r6);
      } else {
        r8 = __gcry_mpi_alloc_secure(r6);
      }
      HEAP32[r8 + 4 >> 2] = r6;
      HEAP32[r8 + 8 >> 2] = 0;
      if ((r6 | 0) == 0) {
        r4 = r8;
        r5 = 2;
        break;
      }
      r9 = r8 + 16 | 0;
      r10 = r6;
      r6 = -r7 & 3;
      r7 = r1 + 2 | 0;
      r11 = 2;
      L1348 : while (1) {
        r12 = HEAP32[r2 >> 2];
        r13 = r6;
        r14 = r7;
        r15 = r11;
        r16 = 0;
        while (1) {
          r17 = r15 + 1 | 0;
          if (r17 >>> 0 > r12 >>> 0) {
            break L1348;
          }
          r18 = r14 + 1 | 0;
          r19 = HEAPU8[r14] | r16 << 8;
          r20 = r13 + 1 | 0;
          if ((r20 | 0) < 4) {
            r13 = r20;
            r14 = r18;
            r15 = r17;
            r16 = r19;
          } else {
            break;
          }
        }
        r16 = r10 - 1 | 0;
        HEAP32[HEAP32[r9 >> 2] + (r16 << 2) >> 2] = r19;
        if ((r16 | 0) > 0) {
          r10 = r16;
          r6 = 0;
          r7 = r18;
          r11 = r17;
        } else {
          r4 = r8;
          r5 = r17;
          break L1340;
        }
      }
      __gcry_mpi_free(r8);
      r4 = 0;
      r5 = r17;
    }
  } while (0);
  HEAP32[r2 >> 2] = r5;
  return r4;
}
function _mpi_fromstr(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r3 = 0;
  r4 = HEAP8[r2] << 24 >> 24 == 45;
  r5 = r4 ? r2 + 1 | 0 : r2;
  if (HEAP8[r5] << 24 >> 24 == 48) {
    r6 = HEAP8[r5 + 1 | 0] << 24 >> 24 == 120 ? r5 + 2 | 0 : r5;
  } else {
    r6 = r5;
  }
  r5 = _strlen(r6);
  r2 = ((r5 << 2) + 7 | 0) >>> 3;
  r7 = (r2 + 3 | 0) >>> 2;
  if (HEAP32[r1 >> 2] >>> 0 < r7 >>> 0) {
    __gcry_mpi_resize(r1, r7);
  }
  HEAP32[r1 + 4 >> 2] = r7;
  HEAP32[r1 + 8 >> 2] = r4 & 1;
  if ((r7 | 0) == 0) {
    r8 = 0;
    return r8;
  }
  r4 = r1 + 16 | 0;
  r9 = -r2 & 3;
  r2 = r7;
  r7 = r5 & 1;
  r5 = r6;
  L1366 : while (1) {
    r6 = r9;
    r10 = r7;
    r11 = r5;
    r12 = 0;
    while (1) {
      if ((r10 | 0) == 0) {
        r13 = HEAP8[r11];
        if (r13 << 24 >> 24 == 0) {
          r3 = 1014;
          break L1366;
        } else {
          r14 = r13 << 24 >> 24;
          r15 = r11 + 1 | 0;
        }
      } else {
        r14 = 48;
        r15 = r11;
      }
      r16 = r15 + 1 | 0;
      r13 = HEAP8[r15];
      r17 = r13 << 24 >> 24;
      if (r13 << 24 >> 24 == 0) {
        r3 = 1016;
        break L1366;
      }
      do {
        if ((r14 - 48 | 0) >>> 0 < 10) {
          r18 = r14 - 48 | 0;
        } else {
          if ((r14 - 97 | 0) >>> 0 < 6) {
            r18 = r14 - 87 | 0;
            break;
          }
          if ((r14 - 65 | 0) >>> 0 >= 6) {
            r3 = 1023;
            break L1366;
          }
          r18 = r14 - 55 | 0;
        }
      } while (0);
      r19 = r18 << 4;
      do {
        if ((r13 - 48 & 255) < 10) {
          r20 = r17 - 48 | 0;
        } else {
          if ((r13 - 97 & 255) < 6) {
            r20 = r17 - 87 | 0;
            break;
          }
          if ((r13 - 65 & 255) >= 6) {
            r3 = 1030;
            break L1366;
          }
          r20 = r17 - 55 | 0;
        }
      } while (0);
      r21 = r19 | r12 << 8 | r20;
      r17 = r6 + 1 | 0;
      if ((r17 | 0) < 4) {
        r6 = r17;
        r10 = 0;
        r11 = r16;
        r12 = r21;
      } else {
        break;
      }
    }
    r12 = r2 - 1 | 0;
    HEAP32[HEAP32[r4 >> 2] + (r12 << 2) >> 2] = r21;
    if ((r12 | 0) > 0) {
      r9 = 0;
      r2 = r12;
      r7 = 0;
      r5 = r16;
    } else {
      r8 = 0;
      r3 = 1039;
      break;
    }
  }
  if (r3 == 1014) {
    __gcry_mpi_clear(r1);
    r8 = 1;
    return r8;
  } else if (r3 == 1016) {
    __gcry_mpi_clear(r1);
    r8 = 1;
    return r8;
  } else if (r3 == 1023) {
    __gcry_mpi_clear(r1);
    r8 = 1;
    return r8;
  } else if (r3 == 1030) {
    __gcry_mpi_clear(r1);
    r8 = 1;
    return r8;
  } else if (r3 == 1039) {
    return r8;
  }
}
function __gcry_mpi_set_buffer(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r5 = (r3 + 3 | 0) >>> 2;
  if ((HEAP32[r1 >> 2] | 0) < (r5 | 0)) {
    __gcry_mpi_resize(r1, r5);
  }
  HEAP32[r1 + 8 >> 2] = r4;
  r4 = r3 - 1 | 0;
  r3 = r2 + r4 | 0;
  r6 = r2 + 4 | 0;
  L1405 : do {
    if ((r4 | 0) < 4) {
      r7 = r3;
      r8 = 0;
    } else {
      r9 = r1 + 16 | 0;
      r10 = r3;
      r11 = 0;
      while (1) {
        r12 = r10 - 4 | 0;
        r13 = r11 + 1 | 0;
        HEAP32[HEAP32[r9 >> 2] + (r11 << 2) >> 2] = HEAPU8[r10 - 1 | 0] << 8 | HEAPU8[r10] | HEAPU8[r10 - 2 | 0] << 16 | HEAPU8[r10 - 3 | 0] << 24;
        if (r12 >>> 0 < r6 >>> 0) {
          r7 = r12;
          r8 = r13;
          break L1405;
        } else {
          r10 = r12;
          r11 = r13;
        }
      }
    }
  } while (0);
  if (r7 >>> 0 < r2 >>> 0) {
    r14 = r8;
  } else {
    r6 = r7 - 1 | 0;
    r3 = HEAPU8[r7];
    if (r6 >>> 0 < r2 >>> 0) {
      r15 = r6;
      r16 = r3;
    } else {
      r15 = r7 - 2 | 0;
      r16 = HEAPU8[r6] << 8 | r3;
    }
    if (r15 >>> 0 < r2 >>> 0) {
      r17 = r15;
      r18 = r16;
    } else {
      r17 = r15 - 1 | 0;
      r18 = HEAPU8[r15] << 16 | r16;
    }
    if (r17 >>> 0 < r2 >>> 0) {
      r19 = r18;
    } else {
      r19 = HEAPU8[r17] << 24 | r18;
    }
    HEAP32[HEAP32[r1 + 16 >> 2] + (r8 << 2) >> 2] = r19;
    r14 = r8 + 1 | 0;
  }
  HEAP32[r1 + 4 >> 2] = r14;
  if ((r14 | 0) == (r5 | 0)) {
    return;
  } else {
    __gcry_assert_failed(468036, 465996, 365, 495660);
  }
}
function _gpg_err_make1101(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function __gcry_mpi_print(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r6 = 0;
  r7 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r8 = r7 + 4, r9 = r8 >> 2;
  r10 = r7 + 8, r11 = r10 >> 2;
  r12 = r7 + 12, r13 = r12 >> 2;
  r14 = r7 + 16, r15 = r14 >> 2;
  r16 = r7 + 20, r17 = r16 >> 2;
  r18 = __gcry_mpi_get_nbits(r5);
  r19 = ((r4 | 0) == 0 ? r7 : r4) >> 2;
  HEAP32[r19] = 0;
  if ((r1 | 0) == 1) {
    if ((HEAP32[r5 + 8 >> 2] | 0) != 0) {
      r20 = _gcry_error1095(63);
      STACKTOP = r7;
      return r20;
    }
    r4 = __gcry_mpi_get_buffer(r5, r8, 0);
    if ((r4 | 0) == 0) {
      r20 = _gpg_error_from_syserror();
      STACKTOP = r7;
      return r20;
    }
    r8 = HEAP32[r9];
    do {
      if ((r8 | 0) == 0) {
        r21 = 0;
      } else {
        if (HEAP8[r4] << 24 >> 24 >= 0) {
          r21 = 0;
          break;
        }
        HEAP32[r9] = r8 + 1 | 0;
        r21 = 1;
      }
    } while (0);
    if ((r2 | 0) != 0) {
      if (HEAP32[r9] >>> 0 > r3 >>> 0) {
        __gcry_free(r4);
        r20 = _gcry_error1095(66);
        STACKTOP = r7;
        return r20;
      }
      if ((r21 | 0) == 0) {
        r22 = r2;
      } else {
        HEAP8[r2] = 0;
        r22 = r2 + 1 | 0;
      }
      _memcpy(r22, r4, HEAP32[r9] - r21 | 0);
    }
    __gcry_free(r4);
    HEAP32[r19] = HEAP32[r9];
    r20 = 0;
    STACKTOP = r7;
    return r20;
  } else if ((r1 | 0) == 5) {
    r9 = (r18 + 7 | 0) >>> 3;
    HEAP32[r11] = r9;
    r4 = (r2 | 0) != 0;
    if (r4 & r9 >>> 0 > r3 >>> 0) {
      r20 = _gcry_error1095(66);
      STACKTOP = r7;
      return r20;
    }
    do {
      if (r4) {
        r9 = __gcry_mpi_get_buffer(r5, r10, 0);
        if ((r9 | 0) != 0) {
          _memcpy(r2, r9, HEAP32[r11]);
          __gcry_free(r9);
          break;
        }
        r20 = _gpg_error_from_syserror();
        STACKTOP = r7;
        return r20;
      }
    } while (0);
    HEAP32[r19] = HEAP32[r11];
    r20 = 0;
    STACKTOP = r7;
    return r20;
  } else if ((r1 | 0) == 2) {
    r11 = (r18 + 7 | 0) >>> 3;
    HEAP32[r13] = r11;
    if ((HEAP32[r5 + 8 >> 2] | 0) != 0) {
      r20 = _gcry_error1095(45);
      STACKTOP = r7;
      return r20;
    }
    do {
      if ((r2 | 0) != 0) {
        if ((r11 + 2 | 0) >>> 0 > r3 >>> 0) {
          r20 = _gcry_error1095(66);
          STACKTOP = r7;
          return r20;
        }
        HEAP8[r2] = r18 >>> 8 & 255;
        HEAP8[r2 + 1 | 0] = r18 & 255;
        r10 = __gcry_mpi_get_buffer(r5, r12, 0);
        if ((r10 | 0) != 0) {
          _memcpy(r2 + 2 | 0, r10, HEAP32[r13]);
          __gcry_free(r10);
          break;
        }
        r20 = _gpg_error_from_syserror();
        STACKTOP = r7;
        return r20;
      }
    } while (0);
    HEAP32[r19] = HEAP32[r13] + 2 | 0;
    r20 = 0;
    STACKTOP = r7;
    return r20;
  } else if ((r1 | 0) == 3) {
    if ((HEAP32[r5 + 8 >> 2] | 0) != 0) {
      r20 = _gcry_error1095(63);
      STACKTOP = r7;
      return r20;
    }
    r13 = __gcry_mpi_get_buffer(r5, r14, 0);
    if ((r13 | 0) == 0) {
      r20 = _gpg_error_from_syserror();
      STACKTOP = r7;
      return r20;
    }
    r14 = HEAP32[r15];
    do {
      if ((r14 | 0) == 0) {
        r23 = 0;
      } else {
        if (HEAP8[r13] << 24 >> 24 >= 0) {
          r23 = 0;
          break;
        }
        HEAP32[r15] = r14 + 1 | 0;
        r23 = 1;
      }
    } while (0);
    if ((r2 | 0) != 0) {
      r14 = HEAP32[r15];
      if ((r14 + 4 | 0) >>> 0 > r3 >>> 0) {
        __gcry_free(r13);
        r20 = _gcry_error1095(66);
        STACKTOP = r7;
        return r20;
      }
      HEAP8[r2] = r14 >>> 24 & 255;
      HEAP8[r2 + 1 | 0] = HEAP32[r15] >>> 16 & 255;
      HEAP8[r2 + 2 | 0] = HEAP32[r15] >>> 8 & 255;
      r14 = r2 + 4 | 0;
      HEAP8[r2 + 3 | 0] = HEAP32[r15] & 255;
      if ((r23 | 0) == 0) {
        r24 = r14;
      } else {
        HEAP8[r14] = 0;
        r24 = r2 + 5 | 0;
      }
      _memcpy(r24, r13, HEAP32[r15] - r23 | 0);
    }
    __gcry_free(r13);
    HEAP32[r19] = HEAP32[r15] + 4 | 0;
    r20 = 0;
    STACKTOP = r7;
    return r20;
  } else if ((r1 | 0) == 4) {
    HEAP32[r17] = 0;
    r1 = __gcry_mpi_get_buffer(r5, r16, 0);
    if ((r1 | 0) == 0) {
      r20 = _gpg_error_from_syserror();
      STACKTOP = r7;
      return r20;
    }
    do {
      if ((HEAP32[r17] | 0) == 0) {
        r6 = 1110;
      } else {
        if (HEAP8[r1] << 24 >> 24 < 0) {
          r6 = 1110;
          break;
        } else {
          r25 = 0;
          break;
        }
      }
    } while (0);
    if (r6 == 1110) {
      r25 = 2;
    }
    r6 = HEAP32[r5 + 8 >> 2];
    r5 = ((r6 | 0) != 0 & 1 | (HEAP32[r17] << 1) + r25) + 1 | 0;
    if ((r2 | 0) == 0) {
      r26 = r5;
    } else {
      if (r5 >>> 0 > r3 >>> 0) {
        __gcry_free(r1);
        r20 = _gcry_error1095(66);
        STACKTOP = r7;
        return r20;
      }
      if ((r6 | 0) == 0) {
        r27 = r2;
      } else {
        HEAP8[r2] = 45;
        r27 = r2 + 1 | 0;
      }
      if ((r25 | 0) == 0) {
        r28 = r27;
      } else {
        HEAP8[r27] = 48;
        HEAP8[r27 + 1 | 0] = 48;
        r28 = r27 + 2 | 0;
      }
      L1532 : do {
        if ((HEAP32[r17] | 0) == 0) {
          r29 = r28;
        } else {
          r27 = 0;
          r25 = r28;
          while (1) {
            r6 = HEAP8[r1 + r27 | 0];
            r3 = r6 & 255;
            r5 = r3 >>> 4;
            HEAP8[r25] = ((r6 & 255) < 160 ? r5 | 48 : r5 + 55 | 0) & 255;
            r5 = r3 & 15;
            r3 = r25 + 2 | 0;
            HEAP8[r25 + 1 | 0] = (r5 >>> 0 < 10 ? r5 | 48 : r5 + 55 | 0) & 255;
            r5 = r27 + 1 | 0;
            if (r5 >>> 0 < HEAP32[r17] >>> 0) {
              r27 = r5;
              r25 = r3;
            } else {
              r29 = r3;
              break L1532;
            }
          }
        }
      } while (0);
      HEAP8[r29] = 0;
      r26 = r29 + 1 - r2 | 0;
    }
    HEAP32[r19] = r26;
    __gcry_free(r1);
    r20 = 0;
    STACKTOP = r7;
    return r20;
  } else {
    r20 = _gcry_error1095(45);
    STACKTOP = r7;
    return r20;
  }
}
function _gpg_error_from_syserror() {
  return _gpg_error1100(_gpg_err_code_from_syserror());
}
function __gcry_mpi_aprint(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6, r8 = r7 >> 2;
  HEAP32[r2 >> 2] = 0;
  r9 = __gcry_mpi_print(r1, 0, 0, r7, r4);
  do {
    if ((r9 | 0) == 0) {
      do {
        if ((r4 | 0) == 0) {
          r5 = 1148;
        } else {
          if ((HEAP32[r4 + 12 >> 2] & 1 | 0) == 0) {
            r5 = 1148;
            break;
          }
          r10 = __gcry_malloc_secure(HEAP32[r8]);
          break;
        }
      } while (0);
      if (r5 == 1148) {
        r10 = __gcry_malloc(HEAP32[r8]);
      }
      HEAP32[r2 >> 2] = r10;
      if ((r10 | 0) == 0) {
        r11 = _gpg_error_from_syserror();
        break;
      }
      r12 = __gcry_mpi_print(r1, r10, HEAP32[r8], r7, r4);
      if ((r12 | 0) != 0) {
        __gcry_free(HEAP32[r2 >> 2]);
        HEAP32[r2 >> 2] = 0;
        r11 = r12;
        break;
      }
      if ((r3 | 0) == 0) {
        r11 = 0;
        break;
      }
      HEAP32[r3 >> 2] = HEAP32[r8];
      r11 = 0;
    } else {
      r11 = r9;
    }
  } while (0);
  STACKTOP = r6;
  return r11;
}
function _gpg_error1100(r1) {
  return _gpg_err_make1101(1, r1);
}
function _gcry_err_make1102(r1) {
  return _gpg_err_make1101(32, r1);
}
function __gcry_mpih_add_n(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12;
  r5 = -r4 | 0;
  r6 = 0;
  while (1) {
    r7 = r5 + r4 | 0;
    r8 = HEAP32[r2 + (r7 << 2) >> 2];
    r9 = _llvm_uadd_with_overflow_i32(HEAP32[r3 + (r7 << 2) >> 2], r6);
    r10 = tempRet0 & 1;
    r11 = _llvm_uadd_with_overflow_i32(r9, r8);
    r12 = (tempRet0 & 1) + r10 | 0;
    HEAP32[r1 + (r7 << 2) >> 2] = r11;
    r11 = r5 + 1 | 0;
    if ((r11 | 0) == 0) {
      break;
    } else {
      r5 = r11;
      r6 = r12;
    }
  }
  return r12;
}
function __gcry_mpih_mod_1(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  if ((r2 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  if (r3 >>> 0 < 65536) {
    r5 = r3 >>> 0 < 256 ? 0 : 8;
  } else {
    r5 = r3 >>> 0 < 16777216 ? 16 : 24;
  }
  r6 = HEAPU8[(r3 >>> (r5 >>> 0)) + 492876 | 0] + r5 | 0;
  r5 = 32 - r6 | 0;
  if ((r6 | 0) == 32) {
    r7 = r2 - 1 | 0;
    r8 = HEAP32[r1 + (r7 << 2) >> 2];
    r9 = r8 >>> 0 < r3 >>> 0;
    r10 = r9 ? r8 : 0;
    r8 = r9 ? r2 - 2 | 0 : r7;
    if ((r8 | 0) <= -1) {
      r4 = r10;
      return r4;
    }
    r7 = r3 >>> 16;
    r9 = r3 & 65535;
    r11 = r10;
    r10 = r8;
    while (1) {
      r8 = HEAP32[r1 + (r10 << 2) >> 2];
      r12 = Math.imul(Math.floor((r11 >>> 0) / (r7 >>> 0)), r9);
      r13 = (r11 >>> 0) % (r7 >>> 0) << 16 | r8 >>> 16;
      do {
        if (r13 >>> 0 < r12 >>> 0) {
          r14 = _llvm_uadd_with_overflow_i32(r13, r3);
          if (!(r14 >>> 0 < r12 >>> 0 & (tempRet0 ^ 1))) {
            r15 = r14;
            break;
          }
          r15 = r14 + r3 | 0;
        } else {
          r15 = r13;
        }
      } while (0);
      r13 = r15 - r12 | 0;
      r14 = Math.imul(Math.floor((r13 >>> 0) / (r7 >>> 0)), r9);
      r16 = (r13 >>> 0) % (r7 >>> 0) << 16 | r8 & 65535;
      do {
        if (r16 >>> 0 < r14 >>> 0) {
          r13 = _llvm_uadd_with_overflow_i32(r16, r3);
          if (!(r13 >>> 0 < r14 >>> 0 & (tempRet0 ^ 1))) {
            r17 = r13;
            break;
          }
          r17 = r13 + r3 | 0;
        } else {
          r17 = r16;
        }
      } while (0);
      r16 = r17 - r14 | 0;
      if ((r10 | 0) > 0) {
        r11 = r16;
        r10 = r10 - 1 | 0;
      } else {
        r4 = r16;
        break;
      }
    }
    return r4;
  }
  r10 = r3 << r5;
  r3 = HEAP32[r1 + (r2 - 1 << 2) >> 2];
  r11 = r3 >>> (r6 >>> 0);
  r17 = r2 - 2 | 0;
  L1589 : do {
    if ((r17 | 0) > -1) {
      r2 = r10 >>> 16;
      r7 = r10 & 65535;
      r9 = r11;
      r15 = r3;
      r16 = r17;
      while (1) {
        r8 = HEAP32[r1 + (r16 << 2) >> 2];
        r12 = Math.imul(Math.floor((r9 >>> 0) / (r2 >>> 0)), r7);
        r13 = r8 >>> (r6 >>> 0) | r15 << r5;
        r18 = r13 >>> 16 | (r9 >>> 0) % (r2 >>> 0) << 16;
        do {
          if (r18 >>> 0 < r12 >>> 0) {
            r19 = _llvm_uadd_with_overflow_i32(r18, r10);
            if (!(r19 >>> 0 < r12 >>> 0 & (tempRet0 ^ 1))) {
              r20 = r19;
              break;
            }
            r20 = r19 + r10 | 0;
          } else {
            r20 = r18;
          }
        } while (0);
        r18 = r20 - r12 | 0;
        r19 = Math.imul(Math.floor((r18 >>> 0) / (r2 >>> 0)), r7);
        r21 = (r18 >>> 0) % (r2 >>> 0) << 16 | r13 & 65535;
        do {
          if (r21 >>> 0 < r19 >>> 0) {
            r18 = _llvm_uadd_with_overflow_i32(r21, r10);
            if (!(r18 >>> 0 < r19 >>> 0 & (tempRet0 ^ 1))) {
              r22 = r18;
              break;
            }
            r22 = r18 + r10 | 0;
          } else {
            r22 = r21;
          }
        } while (0);
        r21 = r22 - r19 | 0;
        if ((r16 | 0) > 0) {
          r9 = r21;
          r15 = r8;
          r16 = r16 - 1 | 0;
        } else {
          r23 = r21;
          r24 = r8;
          break L1589;
        }
      }
    } else {
      r23 = r11;
      r24 = r3;
    }
  } while (0);
  r3 = r10 >>> 16;
  r11 = r10 & 65535;
  r22 = Math.imul(Math.floor((r23 >>> 0) / (r3 >>> 0)), r11);
  r20 = r24 << r5;
  r24 = (r23 >>> 0) % (r3 >>> 0) << 16 | r20 >>> 16;
  do {
    if (r24 >>> 0 < r22 >>> 0) {
      r23 = _llvm_uadd_with_overflow_i32(r24, r10);
      if (!(r23 >>> 0 < r22 >>> 0 & (tempRet0 ^ 1))) {
        r25 = r23;
        break;
      }
      r25 = r23 + r10 | 0;
    } else {
      r25 = r24;
    }
  } while (0);
  r24 = r25 - r22 | 0;
  r22 = Math.imul(Math.floor((r24 >>> 0) / (r3 >>> 0)), r11);
  r11 = (r24 >>> 0) % (r3 >>> 0) << 16 | r20 & 65535;
  do {
    if (r11 >>> 0 < r22 >>> 0) {
      r20 = _llvm_uadd_with_overflow_i32(r11, r10);
      if (!(r20 >>> 0 < r22 >>> 0 & (tempRet0 ^ 1))) {
        r26 = r20;
        break;
      }
      r26 = r20 + r10 | 0;
    } else {
      r26 = r11;
    }
  } while (0);
  r4 = (r26 - r22 | 0) >>> (r5 >>> 0);
  return r4;
}
function __gcry_mpih_lshift(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = 32 - r4 | 0;
  r6 = r3 - 1 | 0;
  r7 = HEAP32[r2 + (r6 << 2) >> 2];
  r8 = r7 >>> (r5 >>> 0);
  L1612 : do {
    if ((r6 | 0) > 0) {
      r9 = r7;
      r10 = r6;
      r11 = r3 - 2 | 0;
      while (1) {
        r12 = HEAP32[r2 + (r11 << 2) >> 2];
        HEAP32[r1 + (r10 << 2) >> 2] = r12 >>> (r5 >>> 0) | r9 << r4;
        if ((r11 | 0) > 0) {
          r9 = r12;
          r10 = r11;
          r11 = r11 - 1 | 0;
        } else {
          r13 = r12;
          r14 = 0;
          break L1612;
        }
      }
    } else {
      r13 = r7;
      r14 = r6;
    }
  } while (0);
  HEAP32[r1 + (r14 << 2) >> 2] = r13 << r4;
  return r8;
}
function __gcry_mpih_divrem(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74;
  r7 = r5 >> 2;
  r8 = r1 >> 2;
  r1 = 0;
  if ((r6 | 0) == 0) {
    r9 = 1 / (r6 | 0) & -1;
    return r9;
  } else if ((r6 | 0) == 2) {
    r10 = (r4 - 2 << 2) + r3 | 0;
    r11 = HEAP32[r7 + 1];
    r12 = HEAP32[r7];
    r13 = -r12 | 0;
    r14 = HEAP32[r3 + (r4 - 1 << 2) >> 2];
    r15 = HEAP32[r10 >> 2];
    do {
      if (r14 >>> 0 < r11 >>> 0) {
        r16 = 0;
        r17 = r14;
        r18 = r15;
      } else {
        if (r14 >>> 0 <= r11 >>> 0 & r15 >>> 0 < r12 >>> 0) {
          r16 = 0;
          r17 = r14;
          r18 = r15;
          break;
        }
        r19 = r15 - r12 | 0;
        r16 = 1;
        r17 = r14 - r11 - (r19 >>> 0 > r15 >>> 0 & 1) | 0;
        r18 = r19;
      }
    } while (0);
    r15 = r2 - 3 + r4 | 0;
    L1626 : do {
      if ((r15 | 0) > -1) {
        r14 = r12 - ((r12 | 0) != 0 & 1) | 0;
        r19 = r11 >>> 16;
        r20 = r11 & 65535;
        r21 = r12 & 65535;
        r22 = r12 >>> 16;
        r23 = r18;
        r24 = r17;
        r25 = r15;
        r26 = r10;
        while (1) {
          if ((r25 | 0) < (r2 | 0)) {
            HEAP32[r26 >> 2] = 0;
            r27 = r26;
          } else {
            r27 = r26 - 4 | 0;
          }
          do {
            if ((r24 | 0) == (r11 | 0)) {
              r28 = _llvm_uadd_with_overflow_i32(r23, r11);
              if (!tempRet0) {
                r29 = r14;
                r30 = r13;
                r31 = -1;
                r32 = r28;
                r1 = 1239;
                break;
              }
              r33 = _llvm_uadd_with_overflow_i32(HEAP32[r27 >> 2], r12);
              HEAP32[(r25 << 2 >> 2) + r8] = -1;
              r34 = r28 - r12 + (tempRet0 & 1) | 0;
              r35 = r33;
              break;
            } else {
              r33 = Math.floor((r24 >>> 0) / (r19 >>> 0));
              r28 = Math.imul(r33, r20);
              r36 = (r24 >>> 0) % (r19 >>> 0) << 16 | r23 >>> 16;
              do {
                if (r36 >>> 0 < r28 >>> 0) {
                  r37 = _llvm_uadd_with_overflow_i32(r36, r11);
                  if (!(r37 >>> 0 < r28 >>> 0 & (tempRet0 ^ 1))) {
                    r38 = r33 - 1 | 0;
                    r39 = r37;
                    break;
                  }
                  r38 = r33 - 2 | 0;
                  r39 = r37 + r11 | 0;
                } else {
                  r38 = r33;
                  r39 = r36;
                }
              } while (0);
              r36 = r39 - r28 | 0;
              r33 = Math.floor((r36 >>> 0) / (r19 >>> 0));
              r37 = Math.imul(r33, r20);
              r40 = (r36 >>> 0) % (r19 >>> 0) << 16 | r23 & 65535;
              do {
                if (r40 >>> 0 < r37 >>> 0) {
                  r36 = _llvm_uadd_with_overflow_i32(r40, r11);
                  if (!(r36 >>> 0 < r37 >>> 0 & (tempRet0 ^ 1))) {
                    r41 = r33 - 1 | 0;
                    r42 = r36;
                    break;
                  }
                  r41 = r33 - 2 | 0;
                  r42 = r36 + r11 | 0;
                } else {
                  r41 = r33;
                  r42 = r40;
                }
              } while (0);
              r40 = r41 | r38 << 16;
              r33 = r41 & 65535;
              r28 = r40 >>> 16;
              r36 = Math.imul(r33, r21);
              r43 = Math.imul(r28, r21);
              r44 = Math.imul(r33, r22);
              r33 = Math.imul(r28, r22);
              r28 = _llvm_uadd_with_overflow_i32(r43 + (r36 >>> 16) | 0, r44);
              r29 = (tempRet0 ? r33 + 65536 | 0 : r33) + (r28 >>> 16) | 0;
              r30 = r28 << 16 | r36 & 65535;
              r31 = r40;
              r32 = r42 - r37 | 0;
              r1 = 1239;
              break;
            }
          } while (0);
          if (r1 == 1239) {
            r1 = 0;
            r40 = HEAP32[r27 >> 2];
            r36 = r29;
            r28 = r30;
            r33 = r31;
            r44 = r32;
            while (1) {
              if (r36 >>> 0 <= r44 >>> 0) {
                if (!((r36 | 0) == (r44 | 0) & r28 >>> 0 > r40 >>> 0)) {
                  r45 = r36;
                  r46 = r28;
                  r47 = r33;
                  r48 = r44;
                  break;
                }
              }
              r43 = r33 - 1 | 0;
              r49 = r28 - r12 | 0;
              r50 = r36 - (r49 >>> 0 > r28 >>> 0 & 1) | 0;
              r51 = _llvm_uadd_with_overflow_i32(r44, r11);
              if (tempRet0) {
                r45 = r50;
                r46 = r49;
                r47 = r43;
                r48 = r51;
                break;
              } else {
                r36 = r50;
                r28 = r49;
                r33 = r43;
                r44 = r51;
              }
            }
            HEAP32[(r25 << 2 >> 2) + r8] = r47;
            r44 = r40 - r46 | 0;
            r34 = r48 - r45 - (r44 >>> 0 > r40 >>> 0 & 1) | 0;
            r35 = r44;
          }
          if ((r25 | 0) > 0) {
            r23 = r35;
            r24 = r34;
            r25 = r25 - 1 | 0;
            r26 = r27;
          } else {
            r52 = r35;
            r53 = r34;
            r54 = r27;
            break L1626;
          }
        }
      } else {
        r52 = r18;
        r53 = r17;
        r54 = r10;
      }
    } while (0);
    HEAP32[r54 + 4 >> 2] = r53;
    HEAP32[r54 >> 2] = r52;
    r9 = r16;
    return r9;
  } else if ((r6 | 0) == 1) {
    r16 = HEAP32[r7];
    r52 = HEAP32[r3 + (r4 - 1 << 2) >> 2];
    r54 = r52 >>> 0 < r16 >>> 0;
    r53 = r52 - (r54 ? 0 : r16) | 0;
    r52 = r54 & 1 ^ 1;
    r54 = r4 - 2 | 0;
    L1700 : do {
      if ((r54 | 0) > -1) {
        r10 = r16 >>> 16;
        r17 = r16 & 65535;
        r18 = r53;
        r27 = r54;
        while (1) {
          r34 = Math.floor((r18 >>> 0) / (r10 >>> 0));
          r35 = Math.imul(r34, r17);
          r45 = (r27 << 2) + r3 | 0;
          r48 = HEAP32[r45 >> 2] >>> 16 | (r18 >>> 0) % (r10 >>> 0) << 16;
          do {
            if (r48 >>> 0 < r35 >>> 0) {
              r46 = _llvm_uadd_with_overflow_i32(r48, r16);
              if (!(r46 >>> 0 < r35 >>> 0 & (tempRet0 ^ 1))) {
                r55 = r34 - 1 | 0;
                r56 = r46;
                break;
              }
              r55 = r34 - 2 | 0;
              r56 = r46 + r16 | 0;
            } else {
              r55 = r34;
              r56 = r48;
            }
          } while (0);
          r48 = r56 - r35 | 0;
          r34 = Math.floor((r48 >>> 0) / (r10 >>> 0));
          r40 = Math.imul(r34, r17);
          r46 = HEAP32[r45 >> 2] & 65535 | (r48 >>> 0) % (r10 >>> 0) << 16;
          do {
            if (r46 >>> 0 < r40 >>> 0) {
              r48 = _llvm_uadd_with_overflow_i32(r46, r16);
              if (!(r48 >>> 0 < r40 >>> 0 & (tempRet0 ^ 1))) {
                r57 = r34 - 1 | 0;
                r58 = r48;
                break;
              }
              r57 = r34 - 2 | 0;
              r58 = r48 + r16 | 0;
            } else {
              r57 = r34;
              r58 = r46;
            }
          } while (0);
          r46 = r58 - r40 | 0;
          HEAP32[(r27 + r2 << 2 >> 2) + r8] = r57 | r55 << 16;
          if ((r27 | 0) > 0) {
            r18 = r46;
            r27 = r27 - 1 | 0;
          } else {
            r59 = r46;
            break L1700;
          }
        }
      } else {
        r59 = r53;
      }
    } while (0);
    L1713 : do {
      if ((r2 | 0) > 0) {
        r53 = r16 >>> 16;
        r55 = r16 & 65535;
        r57 = r59;
        r58 = r2;
        while (1) {
          r56 = r58 - 1 | 0;
          r54 = Math.floor((r57 >>> 0) / (r53 >>> 0));
          r27 = Math.imul(r54, r55);
          r18 = (r57 >>> 0) % (r53 >>> 0) << 16;
          do {
            if (r18 >>> 0 < r27 >>> 0) {
              r10 = _llvm_uadd_with_overflow_i32(r18, r16);
              if (!(r10 >>> 0 < r27 >>> 0 & (tempRet0 ^ 1))) {
                r60 = r54 - 1 | 0;
                r61 = r10;
                break;
              }
              r60 = r54 - 2 | 0;
              r61 = r10 + r16 | 0;
            } else {
              r60 = r54;
              r61 = r18;
            }
          } while (0);
          r18 = r61 - r27 | 0;
          r54 = Math.floor((r18 >>> 0) / (r53 >>> 0));
          r40 = Math.imul(r54, r55);
          r10 = (r18 >>> 0) % (r53 >>> 0) << 16;
          do {
            if (r10 >>> 0 < r40 >>> 0) {
              r18 = _llvm_uadd_with_overflow_i32(r10, r16);
              if (!(r18 >>> 0 < r40 >>> 0 & (tempRet0 ^ 1))) {
                r62 = r54 - 1 | 0;
                r63 = r18;
                break;
              }
              r62 = r54 - 2 | 0;
              r63 = r18 + r16 | 0;
            } else {
              r62 = r54;
              r63 = r10;
            }
          } while (0);
          r10 = r63 - r40 | 0;
          HEAP32[(r56 << 2 >> 2) + r8] = r62 | r60 << 16;
          if ((r56 | 0) > 0) {
            r57 = r10;
            r58 = r56;
          } else {
            r64 = r10;
            break L1713;
          }
        }
      } else {
        r64 = r59;
      }
    } while (0);
    HEAP32[r3 >> 2] = r64;
    r9 = r52;
    return r9;
  } else {
    r52 = (r4 - r6 << 2) + r3 | 0;
    r64 = r6 - 1 | 0;
    r59 = HEAP32[(r64 << 2 >> 2) + r7];
    r60 = r6 - 2 | 0;
    r62 = HEAP32[(r60 << 2 >> 2) + r7];
    r7 = (r4 - 1 << 2) + r3 | 0;
    r3 = HEAP32[r7 >> 2];
    do {
      if (r3 >>> 0 < r59 >>> 0) {
        r65 = 0;
        r66 = r3;
      } else {
        if (r3 >>> 0 <= r59 >>> 0) {
          if ((__gcry_mpih_cmp(r52, r5, r64) | 0) <= -1) {
            r65 = 0;
            r66 = r3;
            break;
          }
        }
        __gcry_mpih_sub_n(r52, r52, r5, r6);
        r65 = 1;
        r66 = HEAP32[r7 >> 2];
      }
    } while (0);
    r7 = r4 + r2 - r6 | 0;
    if ((r7 | 0) <= 0) {
      r9 = r65;
      return r9;
    }
    r4 = (r60 | 0) > -1;
    r3 = r59 >>> 16;
    r63 = r59 & 65535;
    r16 = r62 & 65535;
    r61 = r62 >>> 16;
    r58 = r6 - 1 | 0;
    r57 = r66;
    r66 = r52, r52 = r66 >> 2;
    r53 = r7;
    while (1) {
      r7 = r53 - 1 | 0;
      if ((r7 | 0) < (r2 | 0)) {
        r55 = HEAP32[(r64 << 2 >> 2) + r52];
        L1672 : do {
          if (r4) {
            r10 = r60;
            while (1) {
              HEAP32[(r10 + 1 << 2 >> 2) + r52] = HEAP32[(r10 << 2 >> 2) + r52];
              if ((r10 | 0) > 0) {
                r10 = r10 - 1 | 0;
              } else {
                break L1672;
              }
            }
          }
        } while (0);
        HEAP32[r52] = 0;
        r67 = r66;
        r68 = r55;
      } else {
        r67 = r66 - 4 | 0;
        r68 = HEAP32[(r58 << 2 >> 2) + r52];
      }
      L1677 : do {
        if ((r57 | 0) == (r59 | 0)) {
          r69 = -1;
        } else {
          r10 = Math.floor((r57 >>> 0) / (r3 >>> 0));
          r56 = Math.imul(r10, r63);
          r40 = (r64 << 2) + r67 | 0;
          r54 = HEAP32[r40 >> 2] >>> 16 | (r57 >>> 0) % (r3 >>> 0) << 16;
          do {
            if (r54 >>> 0 < r56 >>> 0) {
              r27 = _llvm_uadd_with_overflow_i32(r54, r59);
              if (!(r27 >>> 0 < r56 >>> 0 & (tempRet0 ^ 1))) {
                r70 = r27;
                r71 = r10 - 1 | 0;
                break;
              }
              r70 = r27 + r59 | 0;
              r71 = r10 - 2 | 0;
            } else {
              r70 = r54;
              r71 = r10;
            }
          } while (0);
          r10 = r70 - r56 | 0;
          r54 = Math.floor((r10 >>> 0) / (r3 >>> 0));
          r27 = Math.imul(r54, r63);
          r18 = HEAP32[r40 >> 2] & 65535 | (r10 >>> 0) % (r3 >>> 0) << 16;
          do {
            if (r18 >>> 0 < r27 >>> 0) {
              r10 = _llvm_uadd_with_overflow_i32(r18, r59);
              if (!(r10 >>> 0 < r27 >>> 0 & (tempRet0 ^ 1))) {
                r72 = r10;
                r73 = r54 - 1 | 0;
                break;
              }
              r72 = r10 + r59 | 0;
              r73 = r54 - 2 | 0;
            } else {
              r72 = r18;
              r73 = r54;
            }
          } while (0);
          r54 = r73 | r71 << 16;
          r18 = r73 & 65535;
          r40 = r54 >>> 16;
          r56 = Math.imul(r18, r16);
          r10 = Math.imul(r40, r16);
          r17 = Math.imul(r18, r61);
          r18 = Math.imul(r40, r61);
          r40 = _llvm_uadd_with_overflow_i32(r10 + (r56 >>> 16) | 0, r17);
          r17 = (r60 << 2) + r67 | 0;
          r10 = r72 - r27 | 0;
          r46 = (tempRet0 ? r18 + 65536 | 0 : r18) + (r40 >>> 16) | 0;
          r18 = r54;
          r54 = r40 << 16 | r56 & 65535;
          while (1) {
            if (r46 >>> 0 <= r10 >>> 0) {
              if ((r46 | 0) != (r10 | 0)) {
                r69 = r18;
                break L1677;
              }
              if (r54 >>> 0 <= HEAP32[r17 >> 2] >>> 0) {
                r69 = r18;
                break L1677;
              }
            }
            r56 = r18 - 1 | 0;
            r40 = _llvm_uadd_with_overflow_i32(r10, r59);
            if (tempRet0) {
              r69 = r56;
              break L1677;
            }
            r10 = r40;
            r46 = r46 - (r54 >>> 0 < r62 >>> 0 & 1) | 0;
            r18 = r56;
            r54 = r54 - r62 | 0;
          }
        }
      } while (0);
      if ((r68 | 0) == (__gcry_mpih_submul_1(r67, r5, r6, r69) | 0)) {
        r74 = r69;
      } else {
        __gcry_mpih_add_n(r67, r67, r5, r6);
        r74 = r69 - 1 | 0;
      }
      HEAP32[(r7 << 2 >> 2) + r8] = r74;
      if ((r7 | 0) > 0) {
        r57 = HEAP32[r67 + (r64 << 2) >> 2];
        r66 = r67, r52 = r66 >> 2;
        r53 = r7;
      } else {
        r9 = r65;
        break;
      }
    }
    return r9;
  }
}
function __gcry_mpih_divmod_1(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32;
  if ((r3 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  if (r4 >>> 0 < 65536) {
    r6 = r4 >>> 0 < 256 ? 0 : 8;
  } else {
    r6 = r4 >>> 0 < 16777216 ? 16 : 24;
  }
  r7 = HEAPU8[(r4 >>> (r6 >>> 0)) + 492876 | 0] + r6 | 0;
  r6 = 32 - r7 | 0;
  if ((r7 | 0) == 32) {
    r8 = r3 - 1 | 0;
    r9 = HEAP32[r2 + (r8 << 2) >> 2];
    if (r9 >>> 0 < r4 >>> 0) {
      HEAP32[r1 + (r8 << 2) >> 2] = 0;
      r10 = r3 - 2 | 0;
      r11 = r9;
    } else {
      r10 = r8;
      r11 = 0;
    }
    if ((r10 | 0) <= -1) {
      r5 = r11;
      return r5;
    }
    r8 = r4 >>> 16;
    r9 = r4 & 65535;
    r12 = r11;
    r11 = r10;
    while (1) {
      r10 = HEAP32[r2 + (r11 << 2) >> 2];
      r13 = Math.floor((r12 >>> 0) / (r8 >>> 0));
      r14 = Math.imul(r13, r9);
      r15 = (r12 >>> 0) % (r8 >>> 0) << 16 | r10 >>> 16;
      do {
        if (r15 >>> 0 < r14 >>> 0) {
          r16 = _llvm_uadd_with_overflow_i32(r15, r4);
          if (!(r16 >>> 0 < r14 >>> 0 & (tempRet0 ^ 1))) {
            r17 = r16;
            r18 = r13 - 1 | 0;
            break;
          }
          r17 = r16 + r4 | 0;
          r18 = r13 - 2 | 0;
        } else {
          r17 = r15;
          r18 = r13;
        }
      } while (0);
      r13 = r17 - r14 | 0;
      r15 = Math.floor((r13 >>> 0) / (r8 >>> 0));
      r16 = Math.imul(r15, r9);
      r19 = (r13 >>> 0) % (r8 >>> 0) << 16 | r10 & 65535;
      do {
        if (r19 >>> 0 < r16 >>> 0) {
          r13 = _llvm_uadd_with_overflow_i32(r19, r4);
          if (!(r13 >>> 0 < r16 >>> 0 & (tempRet0 ^ 1))) {
            r20 = r13;
            r21 = r15 - 1 | 0;
            break;
          }
          r20 = r13 + r4 | 0;
          r21 = r15 - 2 | 0;
        } else {
          r20 = r19;
          r21 = r15;
        }
      } while (0);
      r15 = r20 - r16 | 0;
      HEAP32[r1 + (r11 << 2) >> 2] = r21 | r18 << 16;
      if ((r11 | 0) > 0) {
        r12 = r15;
        r11 = r11 - 1 | 0;
      } else {
        r5 = r15;
        break;
      }
    }
    return r5;
  }
  r11 = r4 << r6;
  r4 = HEAP32[r2 + (r3 - 1 << 2) >> 2];
  r12 = r4 >>> (r7 >>> 0);
  r18 = r3 - 2 | 0;
  L1755 : do {
    if ((r18 | 0) > -1) {
      r3 = r11 >>> 16;
      r21 = r11 & 65535;
      r20 = r12;
      r8 = r4;
      r9 = r18;
      while (1) {
        r17 = HEAP32[r2 + (r9 << 2) >> 2];
        r15 = Math.floor((r20 >>> 0) / (r3 >>> 0));
        r19 = Math.imul(r15, r21);
        r10 = r17 >>> (r7 >>> 0) | r8 << r6;
        r14 = r10 >>> 16 | (r20 >>> 0) % (r3 >>> 0) << 16;
        do {
          if (r14 >>> 0 < r19 >>> 0) {
            r13 = _llvm_uadd_with_overflow_i32(r14, r11);
            if (!(r13 >>> 0 < r19 >>> 0 & (tempRet0 ^ 1))) {
              r22 = r13;
              r23 = r15 - 1 | 0;
              break;
            }
            r22 = r13 + r11 | 0;
            r23 = r15 - 2 | 0;
          } else {
            r22 = r14;
            r23 = r15;
          }
        } while (0);
        r15 = r22 - r19 | 0;
        r14 = Math.floor((r15 >>> 0) / (r3 >>> 0));
        r13 = Math.imul(r14, r21);
        r24 = (r15 >>> 0) % (r3 >>> 0) << 16 | r10 & 65535;
        do {
          if (r24 >>> 0 < r13 >>> 0) {
            r15 = _llvm_uadd_with_overflow_i32(r24, r11);
            if (!(r15 >>> 0 < r13 >>> 0 & (tempRet0 ^ 1))) {
              r25 = r15;
              r26 = r14 - 1 | 0;
              break;
            }
            r25 = r15 + r11 | 0;
            r26 = r14 - 2 | 0;
          } else {
            r25 = r24;
            r26 = r14;
          }
        } while (0);
        r14 = r25 - r13 | 0;
        HEAP32[r1 + (r9 + 1 << 2) >> 2] = r26 | r23 << 16;
        if ((r9 | 0) > 0) {
          r20 = r14;
          r8 = r17;
          r9 = r9 - 1 | 0;
        } else {
          r27 = r14;
          r28 = r17;
          break L1755;
        }
      }
    } else {
      r27 = r12;
      r28 = r4;
    }
  } while (0);
  r4 = r11 >>> 16;
  r12 = r11 & 65535;
  r23 = Math.floor((r27 >>> 0) / (r4 >>> 0));
  r26 = Math.imul(r23, r12);
  r25 = r28 << r6;
  r28 = (r27 >>> 0) % (r4 >>> 0) << 16 | r25 >>> 16;
  do {
    if (r28 >>> 0 < r26 >>> 0) {
      r27 = _llvm_uadd_with_overflow_i32(r28, r11);
      if (!(r27 >>> 0 < r26 >>> 0 & (tempRet0 ^ 1))) {
        r29 = r27;
        r30 = r23 - 1 | 0;
        break;
      }
      r29 = r27 + r11 | 0;
      r30 = r23 - 2 | 0;
    } else {
      r29 = r28;
      r30 = r23;
    }
  } while (0);
  r23 = r29 - r26 | 0;
  r26 = Math.floor((r23 >>> 0) / (r4 >>> 0));
  r29 = Math.imul(r26, r12);
  r12 = (r23 >>> 0) % (r4 >>> 0) << 16 | r25 & 65535;
  do {
    if (r12 >>> 0 < r29 >>> 0) {
      r25 = _llvm_uadd_with_overflow_i32(r12, r11);
      if (!(r25 >>> 0 < r29 >>> 0 & (tempRet0 ^ 1))) {
        r31 = r25;
        r32 = r26 - 1 | 0;
        break;
      }
      r31 = r25 + r11 | 0;
      r32 = r26 - 2 | 0;
    } else {
      r31 = r12;
      r32 = r26;
    }
  } while (0);
  HEAP32[r1 >> 2] = r32 | r30 << 16;
  r5 = (r31 - r29 | 0) >>> (r6 >>> 0);
  return r5;
}
function __gcry_mpih_sqr_n_basecase(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = r1;
  r5 = HEAP32[r2 >> 2];
  L1778 : do {
    if (r5 >>> 0 < 2) {
      r6 = (r3 | 0) > 0;
      do {
        if ((r5 | 0) == 1) {
          if (r6) {
            r7 = 0;
          } else {
            break;
          }
          while (1) {
            HEAP32[r1 + (r7 << 2) >> 2] = HEAP32[r2 + (r7 << 2) >> 2];
            r8 = r7 + 1 | 0;
            if ((r8 | 0) == (r3 | 0)) {
              r9 = 0;
              break L1778;
            } else {
              r7 = r8;
            }
          }
        } else {
          if (!r6) {
            break;
          }
          _memset(r4, 0, r3 << 2);
          r9 = 0;
          break L1778;
        }
      } while (0);
      HEAP32[r1 + (r3 << 2) >> 2] = 0;
      return;
    } else {
      r9 = __gcry_mpih_mul_1(r1, r2, r3, r5);
    }
  } while (0);
  HEAP32[r1 + (r3 << 2) >> 2] = r9;
  if ((r3 | 0) <= 1) {
    return;
  }
  r9 = r3 + 1 | 0;
  r5 = 1;
  r4 = r1;
  while (1) {
    r1 = r4 + 4 | 0;
    r7 = HEAP32[r2 + (r5 << 2) >> 2];
    do {
      if (r7 >>> 0 < 2) {
        if ((r7 | 0) != 1) {
          r10 = 0;
          break;
        }
        r10 = __gcry_mpih_add_n(r1, r1, r2, r3);
      } else {
        r10 = __gcry_mpih_addmul_1(r1, r2, r3, r7);
      }
    } while (0);
    HEAP32[r4 + (r9 << 2) >> 2] = r10;
    r7 = r5 + 1 | 0;
    if ((r7 | 0) == (r3 | 0)) {
      break;
    } else {
      r5 = r7;
      r4 = r1;
    }
  }
  return;
}
function __gcry_mpih_sqr_n(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = r1 >> 2;
  if ((r3 & 1 | 0) != 0) {
    r6 = r3 - 1 | 0;
    if ((r6 | 0) < 16) {
      __gcry_mpih_sqr_n_basecase(r1, r2, r6);
    } else {
      __gcry_mpih_sqr_n(r1, r2, r6, r4);
    }
    r7 = (r6 << 2) + r1 | 0;
    r8 = (r6 << 2) + r2 | 0;
    HEAP32[(r6 << 3 >> 2) + r5] = __gcry_mpih_addmul_1(r7, r2, r6, HEAP32[r8 >> 2]);
    HEAP32[(r6 + r3 << 2 >> 2) + r5] = __gcry_mpih_addmul_1(r7, r2, r3, HEAP32[r8 >> 2]);
    return;
  }
  r8 = r3 >> 1;
  r7 = (r8 | 0) < 16;
  r6 = (r3 << 2) + r1 | 0;
  r9 = (r8 << 2) + r2 | 0;
  if (r7) {
    __gcry_mpih_sqr_n_basecase(r6, r9, r8);
  } else {
    __gcry_mpih_sqr_n(r6, r9, r8, r4);
  }
  if ((__gcry_mpih_cmp(r9, r2, r8) | 0) > -1) {
    __gcry_mpih_sub_n(r1, r9, r2, r8);
  } else {
    __gcry_mpih_sub_n(r1, r2, r9, r8);
  }
  if (r7) {
    __gcry_mpih_sqr_n_basecase(r4, r1, r8);
  } else {
    __gcry_mpih_sqr_n(r4, r1, r8, (r3 << 2) + r4 | 0);
  }
  L1822 : do {
    if ((r8 | 0) > 0) {
      r9 = 0;
      while (1) {
        HEAP32[(r9 + r8 << 2 >> 2) + r5] = HEAP32[(r9 + r3 << 2 >> 2) + r5];
        r10 = r9 + 1 | 0;
        if ((r10 | 0) == (r8 | 0)) {
          break L1822;
        } else {
          r9 = r10;
        }
      }
    }
  } while (0);
  r9 = (r8 + r3 << 2) + r1 | 0;
  r10 = (r8 << 2) + r1 | 0;
  r1 = __gcry_mpih_add_n(r6, r6, r9, r8) - __gcry_mpih_sub_n(r10, r10, r4, r3) | 0;
  if (r7) {
    __gcry_mpih_sqr_n_basecase(r4, r2, r8);
  } else {
    __gcry_mpih_sqr_n(r4, r2, r8, (r3 << 2) + r4 | 0);
  }
  r2 = __gcry_mpih_add_n(r10, r10, r4, r3) + r1 | 0;
  if ((r2 | 0) != 0) {
    __gcry_mpih_add_1(r9, r9, r8, r2);
  }
  L1833 : do {
    if ((r8 | 0) > 0) {
      r2 = 0;
      while (1) {
        HEAP32[(r2 << 2 >> 2) + r5] = HEAP32[r4 + (r2 << 2) >> 2];
        r9 = r2 + 1 | 0;
        if ((r9 | 0) == (r8 | 0)) {
          break L1833;
        } else {
          r2 = r9;
        }
      }
    }
  } while (0);
  if ((__gcry_mpih_add_n(r10, r10, (r8 << 2) + r4 | 0, r8) | 0) == 0) {
    return;
  }
  __gcry_mpih_add_1(r6, r6, r3, 1);
  return;
}
function __gcry_mpih_mul_n(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = (r4 | 0) < 16;
  if ((r2 | 0) == (r3 | 0)) {
    if (r5) {
      __gcry_mpih_sqr_n_basecase(r1, r2, r4);
      return;
    } else {
      r6 = r4 << 1;
      r7 = __gcry_mpi_alloc_limb_space(r6, __gcry_is_secure(r2));
      __gcry_mpih_sqr_n(r1, r2, r4, r7);
      __gcry_mpi_free_limb_space(r7, r6);
      return;
    }
  }
  if (r5) {
    _mul_n_basecase(r1, r2, r3, r4);
    return;
  }
  if ((__gcry_is_secure(r2) | 0) == 0) {
    r8 = (__gcry_is_secure(r3) | 0) != 0;
  } else {
    r8 = 1;
  }
  r5 = r4 << 1;
  r6 = __gcry_mpi_alloc_limb_space(r5, r8 & 1);
  _mul_n(r1, r2, r3, r4, r6);
  __gcry_mpi_free_limb_space(r6, r5);
  return;
}
function _mul_n_basecase(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = r1;
  r6 = HEAP32[r3 >> 2];
  L1859 : do {
    if (r6 >>> 0 < 2) {
      r7 = (r4 | 0) > 0;
      do {
        if ((r6 | 0) == 1) {
          if (r7) {
            r8 = 0;
          } else {
            break;
          }
          while (1) {
            HEAP32[r1 + (r8 << 2) >> 2] = HEAP32[r2 + (r8 << 2) >> 2];
            r9 = r8 + 1 | 0;
            if ((r9 | 0) == (r4 | 0)) {
              r10 = 0;
              break L1859;
            } else {
              r8 = r9;
            }
          }
        } else {
          if (!r7) {
            break;
          }
          _memset(r5, 0, r4 << 2);
          r10 = 0;
          break L1859;
        }
      } while (0);
      HEAP32[r1 + (r4 << 2) >> 2] = 0;
      return;
    } else {
      r10 = __gcry_mpih_mul_1(r1, r2, r4, r6);
    }
  } while (0);
  HEAP32[r1 + (r4 << 2) >> 2] = r10;
  if ((r4 | 0) <= 1) {
    return;
  }
  r10 = r4 + 1 | 0;
  r6 = 1;
  r5 = r1;
  while (1) {
    r1 = r5 + 4 | 0;
    r8 = HEAP32[r3 + (r6 << 2) >> 2];
    do {
      if (r8 >>> 0 < 2) {
        if ((r8 | 0) != 1) {
          r11 = 0;
          break;
        }
        r11 = __gcry_mpih_add_n(r1, r1, r2, r4);
      } else {
        r11 = __gcry_mpih_addmul_1(r1, r2, r4, r8);
      }
    } while (0);
    HEAP32[r5 + (r10 << 2) >> 2] = r11;
    r8 = r6 + 1 | 0;
    if ((r8 | 0) == (r4 | 0)) {
      break;
    } else {
      r6 = r8;
      r5 = r1;
    }
  }
  return;
}
function _mul_n(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r6 = r1 >> 2;
  if ((r4 & 1 | 0) != 0) {
    r7 = r4 - 1 | 0;
    if ((r7 | 0) < 16) {
      _mul_n_basecase(r1, r2, r3, r7);
    } else {
      _mul_n(r1, r2, r3, r7, r5);
    }
    r8 = (r7 << 2) + r1 | 0;
    HEAP32[(r7 << 3 >> 2) + r6] = __gcry_mpih_addmul_1(r8, r2, r7, HEAP32[r3 + (r7 << 2) >> 2]);
    HEAP32[(r7 + r4 << 2 >> 2) + r6] = __gcry_mpih_addmul_1(r8, r3, r4, HEAP32[r2 + (r7 << 2) >> 2]);
    return;
  }
  r7 = r4 >> 1;
  r8 = (r7 | 0) < 16;
  r9 = (r4 << 2) + r1 | 0;
  r10 = (r7 << 2) + r2 | 0;
  r11 = (r7 << 2) + r3 | 0;
  if (r8) {
    _mul_n_basecase(r9, r10, r11, r7);
  } else {
    _mul_n(r9, r10, r11, r7, r5);
  }
  if ((__gcry_mpih_cmp(r10, r2, r7) | 0) > -1) {
    __gcry_mpih_sub_n(r1, r10, r2, r7);
    r12 = 0;
  } else {
    __gcry_mpih_sub_n(r1, r2, r10, r7);
    r12 = 1;
  }
  r10 = (r7 << 2) + r1 | 0;
  if ((__gcry_mpih_cmp(r11, r3, r7) | 0) > -1) {
    __gcry_mpih_sub_n(r10, r11, r3, r7);
    r13 = r12 ^ 1;
  } else {
    __gcry_mpih_sub_n(r10, r3, r11, r7);
    r13 = r12;
  }
  if (r8) {
    _mul_n_basecase(r5, r1, r10, r7);
  } else {
    _mul_n(r5, r1, r10, r7, (r4 << 2) + r5 | 0);
  }
  L1907 : do {
    if ((r7 | 0) > 0) {
      r12 = 0;
      while (1) {
        HEAP32[(r12 + r7 << 2 >> 2) + r6] = HEAP32[(r12 + r4 << 2 >> 2) + r6];
        r11 = r12 + 1 | 0;
        if ((r11 | 0) == (r7 | 0)) {
          break L1907;
        } else {
          r12 = r11;
        }
      }
    }
  } while (0);
  r12 = (r7 + r4 << 2) + r1 | 0;
  r1 = __gcry_mpih_add_n(r9, r9, r12, r7);
  if ((r13 | 0) == 0) {
    r14 = __gcry_mpih_add_n(r10, r10, r5, r4) + r1 | 0;
  } else {
    r14 = r1 - __gcry_mpih_sub_n(r10, r10, r5, r4) | 0;
  }
  if (r8) {
    _mul_n_basecase(r5, r2, r3, r7);
  } else {
    _mul_n(r5, r2, r3, r7, (r4 << 2) + r5 | 0);
  }
  r3 = __gcry_mpih_add_n(r10, r10, r5, r4) + r14 | 0;
  if ((r3 | 0) != 0) {
    __gcry_mpih_add_1(r12, r12, r7, r3);
  }
  L1922 : do {
    if ((r7 | 0) > 0) {
      r3 = 0;
      while (1) {
        HEAP32[(r3 << 2 >> 2) + r6] = HEAP32[r5 + (r3 << 2) >> 2];
        r12 = r3 + 1 | 0;
        if ((r12 | 0) == (r7 | 0)) {
          break L1922;
        } else {
          r3 = r12;
        }
      }
    }
  } while (0);
  if ((__gcry_mpih_add_n(r10, r10, (r7 << 2) + r5 | 0, r7) | 0) == 0) {
    return;
  }
  __gcry_mpih_add_1(r9, r9, r4, 1);
  return;
}
function __gcry_mpih_mul_karatsuba_case(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r7 = r6 >> 2;
  r8 = 0;
  r9 = (r6 + 4 | 0) >> 2;
  do {
    if ((HEAP32[r9] | 0) == 0) {
      r8 = 1436;
    } else {
      if ((HEAP32[r7 + 3] | 0) >= (r5 | 0)) {
        break;
      }
      r10 = HEAP32[r9];
      if ((r10 | 0) == 0) {
        r8 = 1436;
        break;
      }
      __gcry_mpi_free_limb_space(r10, HEAP32[r7 + 2]);
      r8 = 1436;
      break;
    }
  } while (0);
  if (r8 == 1436) {
    r10 = r5 << 1;
    HEAP32[r7 + 2] = r10;
    if ((__gcry_is_secure(r2) | 0) == 0) {
      r11 = (__gcry_is_secure(r4) | 0) != 0;
    } else {
      r11 = 1;
    }
    HEAP32[r9] = __gcry_mpi_alloc_limb_space(r10, r11 & 1);
    HEAP32[r7 + 3] = r5;
  }
  r11 = (r5 | 0) < 16;
  if (r11) {
    _mul_n_basecase(r1, r2, r4, r5);
  } else {
    _mul_n(r1, r2, r4, r5, HEAP32[r9]);
  }
  r10 = (r5 << 2) + r1 | 0;
  r1 = (r5 << 2) + r2 | 0;
  r2 = r3 - r5 | 0;
  L1945 : do {
    if ((r2 | 0) < (r5 | 0)) {
      r12 = r10;
      r13 = r1;
      r14 = r2;
    } else {
      r3 = (r6 + 16 | 0) >> 2;
      do {
        if ((HEAP32[r3] | 0) == 0) {
          r8 = 1447;
        } else {
          if ((HEAP32[r7 + 6] | 0) >= (r5 | 0)) {
            r15 = r10;
            r16 = r1;
            r17 = r2;
            break;
          }
          r18 = HEAP32[r3];
          if ((r18 | 0) == 0) {
            r8 = 1447;
            break;
          }
          __gcry_mpi_free_limb_space(r18, HEAP32[r7 + 5]);
          r8 = 1447;
          break;
        }
      } while (0);
      do {
        if (r8 == 1447) {
          r18 = r5 << 1;
          HEAP32[r7 + 5] = r18;
          if ((__gcry_is_secure(r1) | 0) == 0) {
            r19 = (__gcry_is_secure(r4) | 0) != 0;
          } else {
            r19 = 1;
          }
          HEAP32[r3] = __gcry_mpi_alloc_limb_space(r18, r19 & 1);
          HEAP32[r7 + 6] = r5;
          r15 = r10;
          r16 = r1;
          r17 = r2;
          break;
        }
      } while (0);
      while (1) {
        r18 = HEAP32[r3];
        if (r11) {
          _mul_n_basecase(r18, r16, r4, r5);
        } else {
          _mul_n(r18, r16, r4, r5, HEAP32[r9]);
        }
        r18 = __gcry_mpih_add_n(r15, r15, HEAP32[r3], r5);
        r20 = (r5 << 2) + r15 | 0;
        __gcry_mpih_add_1(r20, (r5 << 2) + HEAP32[r3] | 0, r5, r18);
        r18 = (r5 << 2) + r16 | 0;
        r21 = r17 - r5 | 0;
        if ((r21 | 0) < (r5 | 0)) {
          r12 = r20;
          r13 = r18;
          r14 = r21;
          break L1945;
        } else {
          r15 = r20;
          r16 = r18;
          r17 = r21;
        }
      }
    }
  } while (0);
  if ((r14 | 0) == 0) {
    return;
  }
  if ((r14 | 0) < 16) {
    __gcry_mpih_mul(HEAP32[r9], r4, r5, r13, r14);
  } else {
    r17 = (r6 | 0) >> 2;
    if ((HEAP32[r17] | 0) == 0) {
      HEAP32[r17] = __gcry_xcalloc(1, 28);
    }
    __gcry_mpih_mul_karatsuba_case(HEAP32[r9], r4, r5, r13, r14, HEAP32[r17]);
  }
  r17 = __gcry_mpih_add_n(r12, r12, HEAP32[r9], r5);
  __gcry_mpih_add_1((r5 << 2) + r12 | 0, (r5 << 2) + HEAP32[r9] | 0, r14, r17);
  return;
}
function __gcry_mpih_mul(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r6 = STACKTOP;
  r7 = r1;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r9 = (r3 << 2) + r1 | 0;
  if ((r5 | 0) >= 16) {
    r10 = r8 >> 2;
    HEAP32[r10] = 0;
    HEAP32[r10 + 1] = 0;
    HEAP32[r10 + 2] = 0;
    HEAP32[r10 + 3] = 0;
    HEAP32[r10 + 4] = 0;
    HEAP32[r10 + 5] = 0;
    HEAP32[r10 + 6] = 0;
    __gcry_mpih_mul_karatsuba_case(r1, r2, r3, r4, r5, r8);
    __gcry_mpih_release_karatsuba_ctx(r8);
    r11 = HEAP32[r1 + (r3 - 1 + r5 << 2) >> 2];
    STACKTOP = r6;
    return r11;
  }
  if ((r5 | 0) == 0) {
    r11 = 0;
    STACKTOP = r6;
    return r11;
  }
  r8 = HEAP32[r4 >> 2];
  L1982 : do {
    if (r8 >>> 0 < 2) {
      r10 = (r3 | 0) > 0;
      if ((r8 | 0) == 1) {
        if (r10) {
          r12 = 0;
        } else {
          r13 = 0;
          break;
        }
        while (1) {
          HEAP32[r1 + (r12 << 2) >> 2] = HEAP32[r2 + (r12 << 2) >> 2];
          r14 = r12 + 1 | 0;
          if ((r14 | 0) == (r3 | 0)) {
            r13 = 0;
            break L1982;
          } else {
            r12 = r14;
          }
        }
      } else {
        if (!r10) {
          r13 = 0;
          break;
        }
        _memset(r7, 0, r3 << 2);
        r13 = 0;
        break;
      }
    } else {
      r13 = __gcry_mpih_mul_1(r1, r2, r3, r8);
    }
  } while (0);
  HEAP32[r9 >> 2] = r13;
  if ((r5 | 0) <= 1) {
    r11 = r13;
    STACKTOP = r6;
    return r11;
  }
  r13 = r3 + 1 | 0;
  r9 = 1;
  r8 = r1;
  while (1) {
    r1 = r8 + 4 | 0;
    r7 = HEAP32[r4 + (r9 << 2) >> 2];
    do {
      if (r7 >>> 0 < 2) {
        if ((r7 | 0) != 1) {
          r15 = 0;
          break;
        }
        r15 = __gcry_mpih_add_n(r1, r1, r2, r3);
      } else {
        r15 = __gcry_mpih_addmul_1(r1, r2, r3, r7);
      }
    } while (0);
    HEAP32[r8 + (r13 << 2) >> 2] = r15;
    r7 = r9 + 1 | 0;
    if ((r7 | 0) == (r5 | 0)) {
      r11 = r15;
      break;
    } else {
      r9 = r7;
      r8 = r1;
    }
  }
  STACKTOP = r6;
  return r11;
}
function __gcry_mpih_release_karatsuba_ctx(r1) {
  var r2, r3, r4;
  r2 = r1 >> 2;
  r1 = HEAP32[r2 + 4];
  if ((r1 | 0) != 0) {
    __gcry_mpi_free_limb_space(r1, HEAP32[r2 + 5]);
  }
  r1 = HEAP32[r2 + 1];
  if ((r1 | 0) != 0) {
    __gcry_mpi_free_limb_space(r1, HEAP32[r2 + 2]);
  }
  r1 = HEAP32[r2];
  if ((r1 | 0) == 0) {
    return;
  } else {
    r3 = r1, r4 = r3 >> 2;
  }
  while (1) {
    r1 = HEAP32[r4];
    r2 = HEAP32[r4 + 4];
    if ((r2 | 0) != 0) {
      __gcry_mpi_free_limb_space(r2, HEAP32[r4 + 5]);
    }
    r2 = HEAP32[r4 + 1];
    if ((r2 | 0) != 0) {
      __gcry_mpi_free_limb_space(r2, HEAP32[r4 + 2]);
    }
    __gcry_free(r3);
    if ((r1 | 0) == 0) {
      break;
    } else {
      r3 = r1, r4 = r3 >> 2;
    }
  }
  return;
}
function __gcry_mpih_mul_1(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = r4 & 65535;
  r6 = r4 >>> 16;
  r4 = 0;
  r7 = -r3 | 0;
  while (1) {
    r8 = r7 + r3 | 0;
    r9 = HEAP32[r2 + (r8 << 2) >> 2];
    r10 = r9 & 65535;
    r11 = r9 >>> 16;
    r9 = Math.imul(r10, r5);
    r12 = Math.imul(r10, r6);
    r10 = Math.imul(r11, r5);
    r13 = Math.imul(r11, r6);
    r11 = _llvm_uadd_with_overflow_i32((r9 >>> 16) + r12 | 0, r10);
    r10 = (tempRet0 ? r13 + 65536 | 0 : r13) + (r11 >>> 16) | 0;
    r13 = _llvm_uadd_with_overflow_i32(r11 << 16 | r9 & 65535, r4);
    r14 = r10 + (tempRet0 & 1) | 0;
    HEAP32[r1 + (r8 << 2) >> 2] = r13;
    r13 = r7 + 1 | 0;
    if ((r13 | 0) == 0) {
      break;
    } else {
      r4 = r14;
      r7 = r13;
    }
  }
  return r14;
}
function __gcry_mpih_addmul_1(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = r4 & 65535;
  r6 = r4 >>> 16;
  r4 = 0;
  r7 = -r3 | 0;
  while (1) {
    r8 = r7 + r3 | 0;
    r9 = HEAP32[r2 + (r8 << 2) >> 2];
    r10 = r9 & 65535;
    r11 = r9 >>> 16;
    r9 = Math.imul(r10, r5);
    r12 = Math.imul(r10, r6);
    r10 = Math.imul(r11, r5);
    r13 = Math.imul(r11, r6);
    r11 = _llvm_uadd_with_overflow_i32((r9 >>> 16) + r12 | 0, r10);
    r10 = (tempRet0 ? r13 + 65536 | 0 : r13) + (r11 >>> 16) | 0;
    r13 = _llvm_uadd_with_overflow_i32(r11 << 16 | r9 & 65535, r4);
    r9 = r10 + (tempRet0 & 1) | 0;
    r10 = (r8 << 2) + r1 | 0;
    r8 = _llvm_uadd_with_overflow_i32(HEAP32[r10 >> 2], r13);
    r14 = r9 + (tempRet0 & 1) | 0;
    HEAP32[r10 >> 2] = r8;
    r8 = r7 + 1 | 0;
    if ((r8 | 0) == 0) {
      break;
    } else {
      r4 = r14;
      r7 = r8;
    }
  }
  return r14;
}
function __gcry_mpi_get_hw_config() {
  return 447037;
}
function __gcry_mpi_m_check(r1) {
  return;
}
function __gcry_register_random_progress(r1, r2) {
  HEAP32[110060] = r1;
  HEAP32[110055] = r2;
  return;
}
function __gcry_set_random_daemon_socket(r1) {
  return;
}
function __gcry_use_random_daemon(r1) {
  return 0;
}
function _gpg_err_make1189(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function __gcry_mpih_rshift(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r5 = 32 - r4 | 0;
  r6 = HEAP32[r2 >> 2];
  r7 = r6 << r5;
  if ((r3 | 0) > 1) {
    r8 = r6;
    r9 = 1;
    while (1) {
      r10 = HEAP32[r2 + (r9 << 2) >> 2];
      HEAP32[r1 + (r9 - 1 << 2) >> 2] = r10 << r5 | r8 >>> (r4 >>> 0);
      r11 = r9 + 1 | 0;
      if ((r11 | 0) == (r3 | 0)) {
        break;
      } else {
        r8 = r10;
        r9 = r11;
      }
    }
    r12 = r10;
    r13 = r3 - 1 | 0;
  } else {
    r12 = r6;
    r13 = 0;
  }
  HEAP32[r1 + (r13 << 2) >> 2] = r12 >>> (r4 >>> 0);
  return r7;
}
function __gcry_mpi_clear(r1) {
  HEAP32[r1 + 4 >> 2] = 0;
  HEAP32[r1 + 12 >> 2] = 0;
  return;
}
function __gcry_mpi_get_ui(r1, r2) {
  var r3, r4, r5;
  r3 = HEAP32[r1 + 4 >> 2];
  if ((r3 | 0) > 1) {
    r4 = 67;
    return r4;
  }
  if ((r3 | 0) == 1) {
    r5 = HEAP32[HEAP32[r1 + 16 >> 2] >> 2];
  } else {
    r5 = 0;
  }
  HEAP32[r2 >> 2] = r5;
  r4 = 0;
  return r4;
}
function __gcry_mpih_submul_1(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = r4 & 65535;
  r6 = r4 >>> 16;
  r4 = 0;
  r7 = -r3 | 0;
  while (1) {
    r8 = r7 + r3 | 0;
    r9 = HEAP32[r2 + (r8 << 2) >> 2];
    r10 = r9 & 65535;
    r11 = r9 >>> 16;
    r9 = Math.imul(r10, r5);
    r12 = Math.imul(r10, r6);
    r10 = Math.imul(r11, r5);
    r13 = Math.imul(r11, r6);
    r11 = _llvm_uadd_with_overflow_i32((r9 >>> 16) + r12 | 0, r10);
    r10 = (tempRet0 ? r13 + 65536 | 0 : r13) + (r11 >>> 16) | 0;
    r13 = _llvm_uadd_with_overflow_i32(r11 << 16 | r9 & 65535, r4);
    r9 = (r8 << 2) + r1 | 0;
    r8 = HEAP32[r9 >> 2];
    r11 = r8 - r13 | 0;
    r14 = r10 + (tempRet0 & 1) + (r11 >>> 0 > r8 >>> 0 & 1) | 0;
    HEAP32[r9 >> 2] = r11;
    r11 = r7 + 1 | 0;
    if ((r11 | 0) == 0) {
      break;
    } else {
      r4 = r14;
      r7 = r11;
    }
  }
  return r14;
}
function __gcry_mpih_sub_n(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = -r4 | 0;
  r6 = 0;
  while (1) {
    r7 = r5 + r4 | 0;
    r8 = HEAP32[r2 + (r7 << 2) >> 2];
    r9 = r8 - _llvm_uadd_with_overflow_i32(HEAP32[r3 + (r7 << 2) >> 2], r6) | 0;
    r10 = (r9 >>> 0 > r8 >>> 0 & 1) + (tempRet0 & 1) | 0;
    HEAP32[r1 + (r7 << 2) >> 2] = r9;
    r9 = r5 + 1 | 0;
    if ((r9 | 0) == 0) {
      break;
    } else {
      r5 = r9;
      r6 = r10;
    }
  }
  return r10;
}
function __gcry_mpi_alloc(r1) {
  var r2, r3, r4;
  r2 = __gcry_xmalloc(20), r3 = r2 >> 2;
  if ((r1 | 0) == 0) {
    r4 = 0;
  } else {
    r4 = __gcry_mpi_alloc_limb_space(r1, 0);
  }
  HEAP32[r3 + 4] = r4;
  HEAP32[r3] = r1;
  HEAP32[r3 + 1] = 0;
  HEAP32[r3 + 2] = 0;
  HEAP32[r3 + 3] = 0;
  return r2;
}
function __gcry_mpi_alloc_limb_space(r1, r2) {
  var r3, r4, r5;
  r3 = (r1 | 0) != 0;
  r4 = r3 ? r1 << 2 : 4;
  if ((r2 | 0) == 0) {
    r5 = __gcry_xmalloc(r4);
  } else {
    r5 = __gcry_xmalloc_secure(r4);
  }
  r4 = r5;
  if (r3) {
    return r4;
  }
  HEAP32[r4 >> 2] = 0;
  return r4;
}
function __gcry_mpi_alloc_secure(r1) {
  var r2, r3, r4;
  r2 = __gcry_xmalloc(20), r3 = r2 >> 2;
  if ((r1 | 0) == 0) {
    r4 = 0;
  } else {
    r4 = __gcry_mpi_alloc_limb_space(r1, 1);
  }
  HEAP32[r3 + 4] = r4;
  HEAP32[r3] = r1;
  HEAP32[r3 + 3] = 1;
  HEAP32[r3 + 1] = 0;
  HEAP32[r3 + 2] = 0;
  return r2;
}
function __gcry_mpi_free_limb_space(r1, r2) {
  var r3, r4, r5;
  if ((r1 | 0) == 0) {
    return;
  }
  r3 = r2 << 2;
  L2082 : do {
    if ((r3 | 0) != 0) {
      r2 = r1;
      r4 = r3;
      while (1) {
        HEAP8[r2] = 0;
        r5 = r4 - 1 | 0;
        if ((r5 | 0) == 0) {
          break L2082;
        } else {
          r2 = r2 + 1 | 0;
          r4 = r5;
        }
      }
    }
  } while (0);
  __gcry_free(r1);
  return;
}
function __gcry_mpi_assign_limb_space(r1, r2, r3) {
  var r4, r5;
  r4 = r1 + 16 | 0;
  r5 = r1 | 0;
  __gcry_mpi_free_limb_space(HEAP32[r4 >> 2], HEAP32[r5 >> 2]);
  HEAP32[r4 >> 2] = r2;
  HEAP32[r5 >> 2] = r3;
  return;
}
function __gcry_mpi_resize(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = (r1 | 0) >> 2;
  if (HEAP32[r3] >>> 0 >= r2 >>> 0) {
    r4 = HEAP32[r1 + 4 >> 2];
    if (r4 >>> 0 >= HEAP32[r3] >>> 0) {
      return;
    }
    r5 = r1 + 16 | 0;
    r6 = r4;
    while (1) {
      HEAP32[HEAP32[r5 >> 2] + (r6 << 2) >> 2] = 0;
      r4 = r6 + 1 | 0;
      if (r4 >>> 0 < HEAP32[r3] >>> 0) {
        r6 = r4;
      } else {
        break;
      }
    }
    return;
  }
  r6 = (r1 + 16 | 0) >> 2;
  r5 = HEAP32[r6];
  L2099 : do {
    if ((r5 | 0) == 0) {
      if ((HEAP32[r1 + 12 >> 2] & 1 | 0) == 0) {
        HEAP32[r6] = __gcry_xcalloc(r2, 4);
        break;
      } else {
        HEAP32[r6] = __gcry_xcalloc_secure(r2, 4);
        break;
      }
    } else {
      HEAP32[r6] = __gcry_xrealloc(r5, r2 << 2);
      r4 = HEAP32[r3];
      if (r4 >>> 0 < r2 >>> 0) {
        r7 = r4;
      } else {
        break;
      }
      while (1) {
        HEAP32[HEAP32[r6] + (r7 << 2) >> 2] = 0;
        r4 = r7 + 1 | 0;
        if ((r4 | 0) == (r2 | 0)) {
          break L2099;
        } else {
          r7 = r4;
        }
      }
    }
  } while (0);
  HEAP32[r3] = r2;
  return;
}
function __gcry_mpi_set_opaque(r1, r2, r3) {
  var r4, r5, r6, r7;
  if ((r1 | 0) == 0) {
    r4 = __gcry_mpi_alloc(0), r5 = r4 >> 2;
  } else {
    r4 = r1, r5 = r4 >> 2;
  }
  r1 = r4 + 12 | 0;
  r6 = r4 + 16 | 0;
  r7 = HEAP32[r6 >> 2];
  if ((HEAP32[r1 >> 2] & 4 | 0) == 0) {
    __gcry_mpi_free_limb_space(r7, HEAP32[r5]);
  } else {
    __gcry_free(r7);
  }
  HEAP32[r6 >> 2] = r2;
  HEAP32[r5] = 0;
  HEAP32[r5 + 1] = 0;
  HEAP32[r5 + 2] = r3;
  HEAP32[r1 >> 2] = 4;
  return r4;
}
function __gcry_mpi_copy(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
  if ((r1 | 0) == 0) {
    r2 = 0;
    return r2;
  }
  r3 = r1 + 12 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 & 4 | 0) != 0) {
    r5 = r1 + 16 | 0;
    r6 = (__gcry_is_secure(HEAP32[r5 >> 2]) | 0) == 0;
    r7 = (r1 + 8 | 0) >> 2;
    r8 = (HEAP32[r7] + 7 | 0) / 8 & -1;
    if (r6) {
      r9 = __gcry_xmalloc(r8);
    } else {
      r9 = __gcry_xmalloc_secure(r8);
    }
    _memcpy(r9, HEAP32[r5 >> 2], (HEAP32[r7] + 7 | 0) / 8 & -1);
    r2 = __gcry_mpi_set_opaque(0, r9, HEAP32[r7]);
    return r2;
  }
  r7 = r1 + 4 | 0;
  r9 = HEAP32[r7 >> 2];
  if ((r4 & 1 | 0) == 0) {
    r10 = __gcry_mpi_alloc(r9), r11 = r10 >> 2;
  } else {
    r10 = __gcry_mpi_alloc_secure(r9), r11 = r10 >> 2;
  }
  r9 = (r10 + 4 | 0) >> 2;
  HEAP32[r9] = HEAP32[r7 >> 2];
  HEAP32[r11 + 2] = HEAP32[r1 + 8 >> 2];
  HEAP32[r11 + 3] = HEAP32[r3 >> 2];
  if ((HEAP32[r9] | 0) <= 0) {
    r2 = r10;
    return r2;
  }
  r3 = r1 + 16 | 0;
  r1 = HEAP32[r11 + 4];
  r11 = HEAP32[r9];
  r9 = 0;
  while (1) {
    HEAP32[r1 + (r9 << 2) >> 2] = HEAP32[HEAP32[r3 >> 2] + (r9 << 2) >> 2];
    r7 = r9 + 1 | 0;
    if ((r7 | 0) < (r11 | 0)) {
      r9 = r7;
    } else {
      r2 = r10;
      break;
    }
  }
  return r2;
}
function __gcry_mpi_alloc_like(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  if ((r1 | 0) == 0) {
    r2 = 0;
    return r2;
  }
  r3 = r1 + 12 | 0;
  r4 = HEAP32[r3 >> 2];
  if ((r4 & 4 | 0) == 0) {
    r5 = HEAP32[r1 + 4 >> 2];
    if ((r4 & 1 | 0) == 0) {
      r6 = __gcry_mpi_alloc(r5), r7 = r6 >> 2;
    } else {
      r6 = __gcry_mpi_alloc_secure(r5), r7 = r6 >> 2;
    }
    HEAP32[r7 + 1] = 0;
    HEAP32[r7 + 2] = 0;
    HEAP32[r7 + 3] = HEAP32[r3 >> 2];
    r2 = r6;
    return r2;
  } else {
    r6 = r1 + 8 | 0;
    r3 = (HEAP32[r6 >> 2] + 7 | 0) / 8 & -1;
    r7 = r1 + 16 | 0;
    if ((__gcry_is_secure(HEAP32[r7 >> 2]) | 0) == 0) {
      r8 = __gcry_malloc(r3);
    } else {
      r8 = __gcry_malloc_secure(r3);
    }
    _memcpy(r8, HEAP32[r7 >> 2], r3);
    r2 = __gcry_mpi_set_opaque(0, r8, HEAP32[r6 >> 2]);
    return r2;
  }
}
function __gcry_mpi_set(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = HEAP32[r2 + 4 >> 2];
  r4 = HEAP32[r2 + 8 >> 2];
  if ((r1 | 0) == 0) {
    r5 = __gcry_mpi_alloc(r3), r6 = r5 >> 2;
  } else {
    r5 = r1, r6 = r5 >> 2;
  }
  if ((HEAP32[r6] | 0) < (r3 | 0)) {
    __gcry_mpi_resize(r5, r3);
  }
  r1 = HEAP32[r6 + 4];
  r7 = HEAP32[r2 + 16 >> 2];
  L2163 : do {
    if ((r3 | 0) > 0) {
      r8 = 0;
      while (1) {
        HEAP32[r1 + (r8 << 2) >> 2] = HEAP32[r7 + (r8 << 2) >> 2];
        r9 = r8 + 1 | 0;
        if ((r9 | 0) == (r3 | 0)) {
          break L2163;
        } else {
          r8 = r9;
        }
      }
    }
  } while (0);
  HEAP32[r6 + 1] = r3;
  HEAP32[r6 + 3] = HEAP32[r2 + 12 >> 2];
  HEAP32[r6 + 2] = r4;
  return r5;
}
function __gcry_mpi_set_ui(r1, r2) {
  var r3, r4;
  if ((r1 | 0) == 0) {
    r3 = __gcry_mpi_alloc(1), r4 = r3 >> 2;
  } else {
    r3 = r1, r4 = r3 >> 2;
  }
  if ((HEAP32[r4] | 0) < 1) {
    __gcry_mpi_resize(r3, 1);
  }
  HEAP32[HEAP32[r4 + 4] >> 2] = r2;
  HEAP32[r4 + 1] = (r2 | 0) != 0 & 1;
  HEAP32[r4 + 2] = 0;
  HEAP32[r4 + 3] = 0;
  return r3;
}
function _gcry_mpi_get_ui(r1, r2) {
  return _gcry_error1169(__gcry_mpi_get_ui(r1, r2));
}
function _gcry_error1169(r1) {
  return _gcry_err_make1188(r1);
}
function __gcry_mpi_alloc_set_ui(r1) {
  var r2, r3;
  r2 = __gcry_mpi_alloc(1), r3 = r2 >> 2;
  HEAP32[HEAP32[r3 + 4] >> 2] = r1;
  HEAP32[r3 + 1] = (r1 | 0) != 0 & 1;
  HEAP32[r3 + 2] = 0;
  return r2;
}
function __gcry_mpi_swap(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r4 = r3 >> 2;
  r5 = r1 >> 2;
  HEAP32[r4] = HEAP32[r5];
  HEAP32[r4 + 1] = HEAP32[r5 + 1];
  HEAP32[r4 + 2] = HEAP32[r5 + 2];
  HEAP32[r4 + 3] = HEAP32[r5 + 3];
  HEAP32[r4 + 4] = HEAP32[r5 + 4];
  r1 = r2 >> 2;
  HEAP32[r5] = HEAP32[r1];
  HEAP32[r5 + 1] = HEAP32[r1 + 1];
  HEAP32[r5 + 2] = HEAP32[r1 + 2];
  HEAP32[r5 + 3] = HEAP32[r1 + 3];
  HEAP32[r5 + 4] = HEAP32[r1 + 4];
  HEAP32[r1] = HEAP32[r4];
  HEAP32[r1 + 1] = HEAP32[r4 + 1];
  HEAP32[r1 + 2] = HEAP32[r4 + 2];
  HEAP32[r1 + 3] = HEAP32[r4 + 3];
  HEAP32[r1 + 4] = HEAP32[r4 + 4];
  STACKTOP = r3;
  return;
}
function __gcry_mpi_new(r1) {
  return __gcry_mpi_alloc((r1 + 31 | 0) >>> 5);
}
function __gcry_mpi_snew(r1) {
  return __gcry_mpi_alloc_secure((r1 + 31 | 0) >>> 5);
}
function __gcry_mpi_release(r1) {
  __gcry_mpi_free(r1);
  return;
}
function __gcry_mpi_randomize(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = 0;
  r5 = (r2 + 7 | 0) >>> 3;
  r2 = (r1 | 0) != 0;
  L2182 : do {
    if ((r3 | 0) == 0) {
      do {
        if (r2) {
          if ((HEAP32[r1 + 12 >> 2] & 1 | 0) == 0) {
            r4 = 1629;
            break;
          }
          r6 = __gcry_xmalloc_secure(r5);
          break;
        } else {
          r4 = 1629;
        }
      } while (0);
      if (r4 == 1629) {
        r6 = __gcry_xmalloc(r5);
      }
      __gcry_create_nonce(r6, r5);
      r7 = r6;
    } else {
      do {
        if (r2) {
          if ((HEAP32[r1 + 12 >> 2] & 1 | 0) == 0) {
            break;
          }
          r7 = __gcry_random_bytes_secure(r5, r3);
          break L2182;
        }
      } while (0);
      r7 = __gcry_random_bytes(r5, r3);
    }
  } while (0);
  __gcry_mpi_set_buffer(r1, r7, r5, 0);
  __gcry_free(r7);
  return;
}
function _gcry_err_make1188(r1) {
  return _gpg_err_make1189(r1);
}
function __gcry_random_progress(r1, r2, r3, r4) {
  var r5;
  r5 = HEAP32[110060];
  if ((r5 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r5](HEAP32[110055], r1, r2, r3, r4);
  return;
}
function __gcry_random_initialize(r1) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_rngcsprng_initialize(r1);
    return;
  } else {
    __gcry_rngfips_initialize(r1);
    return;
  }
}
function __gcry_random_dump_stats() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_dump_stats();
  return;
}
function __gcry_secure_random_alloc() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_secure_alloc();
  return;
}
function __gcry_enable_quick_random_gen() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_enable_quick_gen();
  return;
}
function __gcry_mpi_free(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  if ((r1 | 0) == 0) {
    STACKTOP = r2;
    return;
  }
  r3 = r1 + 12 | 0;
  r4 = HEAP32[r1 + 16 >> 2];
  if ((HEAP32[r3 >> 2] & 4 | 0) == 0) {
    __gcry_mpi_free_limb_space(r4, HEAP32[r1 >> 2]);
  } else {
    __gcry_free(r4);
  }
  if (HEAP32[r3 >> 2] >>> 0 > 7) {
    __gcry_log_bug(489728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_free(r1);
  STACKTOP = r2;
  return;
}
function __gcry_mpi_get_opaque(r1, r2) {
  var r3;
  r3 = STACKTOP;
  if ((HEAP32[r1 + 12 >> 2] & 4 | 0) == 0) {
    __gcry_log_bug(490072, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((r2 | 0) != 0) {
    HEAP32[r2 >> 2] = HEAP32[r1 + 8 >> 2];
  }
  STACKTOP = r3;
  return HEAP32[r1 + 16 >> 2];
}
function __gcry_mpi_set_flag(r1, r2) {
  var r3;
  r3 = STACKTOP;
  if ((r2 | 0) == 1) {
    _mpi_set_secure(r1);
    STACKTOP = r3;
    return;
  } else {
    __gcry_log_bug(481576, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
}
function _mpi_set_secure(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = r1 + 12 | 0;
  r3 = HEAP32[r2 >> 2];
  if ((r3 & 1 | 0) != 0) {
    return;
  }
  HEAP32[r2 >> 2] = r3 | 1;
  r3 = r1 + 16 | 0;
  r2 = HEAP32[r3 >> 2];
  r4 = (r1 + 4 | 0) >> 2;
  r5 = HEAP32[r4];
  if ((r5 | 0) == 0) {
    if ((r2 | 0) == 0) {
      return;
    } else {
      __gcry_assert_failed(477460, 474500, 197, 494604);
    }
  }
  r6 = __gcry_mpi_alloc_limb_space(r5, 1);
  L2256 : do {
    if ((HEAP32[r4] | 0) > 0) {
      r5 = 0;
      while (1) {
        HEAP32[r6 + (r5 << 2) >> 2] = HEAP32[r2 + (r5 << 2) >> 2];
        r7 = r5 + 1 | 0;
        if ((r7 | 0) < (HEAP32[r4] | 0)) {
          r5 = r7;
        } else {
          break L2256;
        }
      }
    }
  } while (0);
  HEAP32[r3 >> 2] = r6;
  __gcry_mpi_free_limb_space(r2, HEAP32[r1 >> 2]);
  return;
}
function __gcry_mpi_clear_flag(r1, r2) {
  __gcry_log_bug(481576, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
function __gcry_mpi_get_flag(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  if ((r2 | 0) == 1) {
    r4 = HEAP32[r1 + 12 >> 2] & 1;
    STACKTOP = r3;
    return r4;
  } else if ((r2 | 0) == 2) {
    r4 = HEAP32[r1 + 12 >> 2] & 4;
    STACKTOP = r3;
    return r4;
  } else {
    __gcry_log_bug(481576, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
}
function __gcry_fips_mode() {
  return HEAP8[440948] & 1 ^ 1;
}
function __gcry_enforced_fips_mode() {
  return HEAP8[457312] & 1;
}
function __gcry_random_is_faked() {
  var r1;
  if ((__gcry_fips_mode() | 0) == 0) {
    r1 = __gcry_rngcsprng_is_faked();
  } else {
    r1 = 0;
  }
  return r1;
}
function __gcry_random_add_bytes(r1, r2, r3) {
  var r4;
  if ((__gcry_fips_mode() | 0) != 0) {
    r4 = 0;
    return r4;
  }
  r4 = __gcry_rngcsprng_add_bytes(r1, r2, r3);
  return r4;
}
function __gcry_random_bytes(r1, r2) {
  var r3;
  r3 = __gcry_xmalloc(r1);
  _do_randomize(r3, r1, r2);
  return r3;
}
function _do_randomize(r1, r2, r3) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_rngcsprng_randomize(r1, r2, r3);
    return;
  } else {
    __gcry_rngfips_randomize(r1, r2, r3);
    return;
  }
}
function __gcry_random_bytes_secure(r1, r2) {
  var r3;
  r3 = __gcry_xmalloc_secure(r1);
  _do_randomize(r3, r1, r2);
  return r3;
}
function __gcry_randomize(r1, r2, r3) {
  _do_randomize(r1, r2, r3);
  return;
}
function __gcry_set_random_seed_file(r1) {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_set_seed_file(r1);
  return;
}
function __gcry_update_random_seed_file() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_update_seed_file();
  return;
}
function __gcry_fast_random_poll() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_fast_poll();
  return;
}
function __gcry_create_nonce(r1, r2) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_rngcsprng_create_nonce(r1, r2);
    return;
  } else {
    __gcry_rngfips_create_nonce(r1, r2);
    return;
  }
}
function __gcry_random_selftest(r1) {
  var r2;
  if ((__gcry_fips_mode() | 0) == 0) {
    r2 = 0;
    return r2;
  }
  r2 = __gcry_rngfips_selftest(r1);
  return r2;
}
function __gcry_random_init_external_test(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9;
  if ((__gcry_fips_mode() | 0) == 0) {
    r9 = 60;
    return r9;
  }
  r9 = __gcry_rngfips_init_external_test(r1, r2, r3, r4, r5, r6, r7, r8);
  return r9;
}
function __gcry_random_run_external_test(r1, r2, r3) {
  var r4;
  if ((__gcry_fips_mode() | 0) == 0) {
    r4 = 60;
    return r4;
  }
  r4 = __gcry_rngfips_run_external_test(r1, r2, r3);
  return r4;
}
function __gcry_random_deinit_external_test(r1) {
  if ((__gcry_fips_mode() | 0) == 0) {
    return;
  }
  __gcry_rngfips_deinit_external_test(r1);
  return;
}
function __gcry_ath_init() {
  var r1, r2, r3;
  if (!HEAP8[440664]) {
    r1 = 0;
    return r1;
  }
  r2 = HEAP32[110168];
  do {
    if ((r2 | 0) != 0) {
      r3 = FUNCTION_TABLE[r2]();
      if ((r3 | 0) == 0) {
        break;
      } else {
        r1 = r3;
      }
      return r1;
    }
  } while (0);
  r1 = FUNCTION_TABLE[HEAP32[110169]](459756);
  return r1;
}
function __gcry_ath_install(r1, r2) {
  var r3, r4, r5, r6;
  r3 = (r1 | 0) == 0;
  if ((r2 | 0) == 0) {
    do {
      if (r3) {
        r4 = 0;
      } else {
        if ((HEAP32[r1 + 8 >> 2] | 0) == 0) {
          r5 = 45;
          return r5;
        }
        if ((HEAP32[r1 + 16 >> 2] | 0) == 0) {
          r5 = 45;
          return r5;
        }
        if ((HEAP32[r1 + 20 >> 2] | 0) == 0) {
          r5 = 45;
          return r5;
        } else {
          _memcpy(440668, r1, 56);
          r4 = 1;
          break;
        }
      }
    } while (0);
    HEAP8[440664] = r4;
    r5 = 0;
    return r5;
  } else {
    if (r3) {
      r6 = 0;
    } else {
      r6 = HEAP32[r1 >> 2];
    }
    do {
      if (!HEAP8[440664]) {
        if ((r6 & 255 | 0) == 0) {
          break;
        } else {
          r5 = 60;
        }
        return r5;
      }
    } while (0);
    r1 = HEAP32[110167];
    r3 = r1 & 255;
    if ((r3 | 0) == 1) {
      r5 = 60;
      return r5;
    }
    r4 = r6 & 255;
    if ((r4 | 0) != 1 & (r3 | 0) == (r4 | 0)) {
      return ((r1 ^ r6) & 65280 | 0) == 0 ? 0 : 60;
    } else {
      r5 = 60;
      return r5;
    }
  }
}
function __gcry_ath_mutex_init(r1) {
  var r2;
  if (HEAP8[440664]) {
    r2 = _mutex_init(r1, 0);
  } else {
    HEAP32[r1 >> 2] = 0;
    r2 = 0;
  }
  return r2;
}
function _mutex_init(r1, r2) {
  var r3, r4, r5;
  r3 = (r2 | 0) != 0;
  if (!r3) {
    r4 = FUNCTION_TABLE[HEAP32[110169]](r1);
    return r4;
  }
  FUNCTION_TABLE[HEAP32[110171]](459756);
  if ((HEAP32[r1 >> 2] | 0) == 0 | r3 ^ 1) {
    r5 = FUNCTION_TABLE[HEAP32[110169]](r1);
  } else {
    r5 = 0;
  }
  FUNCTION_TABLE[HEAP32[110172]](459756);
  r4 = r5;
  return r4;
}
function __gcry_ath_mutex_destroy(r1) {
  var r2, r3;
  if (!HEAP8[440664]) {
    if ((HEAP32[r1 >> 2] | 0) != 0) {
      ___assert_func(488500, 173, 494284, 489840);
    }
    HEAP32[r1 >> 2] = 2;
    r2 = 0;
    return r2;
  }
  if ((HEAP32[110170] | 0) == 0) {
    r2 = 0;
    return r2;
  }
  FUNCTION_TABLE[HEAP32[110171]](459756);
  r3 = (HEAP32[r1 >> 2] | 0) == 0;
  FUNCTION_TABLE[HEAP32[110172]](459756);
  if (r3) {
    r2 = 0;
    return r2;
  }
  r2 = FUNCTION_TABLE[HEAP32[110170]](r1);
  return r2;
}
function __gcry_ath_mutex_lock(r1) {
  var r2, r3;
  if (HEAP8[440664]) {
    r2 = _mutex_init(r1, 1);
    if ((r2 | 0) != 0) {
      r3 = r2;
      return r3;
    }
    r3 = FUNCTION_TABLE[HEAP32[110171]](r1);
    return r3;
  } else {
    if ((HEAP32[r1 >> 2] | 0) != 0) {
      ___assert_func(488500, 193, 494260, 489840);
    }
    HEAP32[r1 >> 2] = 1;
    r3 = 0;
    return r3;
  }
}
function __gcry_ath_mutex_unlock(r1) {
  var r2, r3;
  if (HEAP8[440664]) {
    r2 = _mutex_init(r1, 1);
    if ((r2 | 0) != 0) {
      r3 = r2;
      return r3;
    }
    r3 = FUNCTION_TABLE[HEAP32[110172]](r1);
    return r3;
  } else {
    if ((HEAP32[r1 >> 2] | 0) != 1) {
      ___assert_func(488500, 213, 494236, 481348);
    }
    HEAP32[r1 >> 2] = 0;
    r3 = 0;
    return r3;
  }
}
function __gcry_ath_read(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[110173];
  if (HEAP8[440664] & (r4 | 0) != 0) {
    r5 = FUNCTION_TABLE[r4](r1, r2, r3);
    return r5;
  } else {
    r5 = _read(r1, r2, r3);
    return r5;
  }
}
function __gcry_ath_write(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[110174];
  if (HEAP8[440664] & (r4 | 0) != 0) {
    r5 = FUNCTION_TABLE[r4](r1, r2, r3);
    return r5;
  } else {
    r5 = _write(r1, r2, r3);
    return r5;
  }
}
function __gcry_ath_select(r1, r2, r3, r4, r5) {
  var r6, r7;
  r6 = HEAP32[110175];
  if (HEAP8[440664] & (r6 | 0) != 0) {
    r7 = FUNCTION_TABLE[r6](r1, r2, r3, r4, r5);
    return r7;
  } else {
    r7 = _select(r1, r2, r3, r4, r5);
    return r7;
  }
}
function __gcry_ath_waitpid(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[110176];
  if (HEAP8[440664] & (r4 | 0) != 0) {
    r5 = FUNCTION_TABLE[r4](r1, r2, r3);
    return r5;
  } else {
    r5 = _wait(r1, r2, r3);
    return r5;
  }
}
function __gcry_ath_accept(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[110177];
  if (HEAP8[440664] & (r4 | 0) != 0) {
    r5 = FUNCTION_TABLE[r4](r1, r2, r3);
    return r5;
  } else {
    r5 = _accept(r1, r2, r3);
    return r5;
  }
}
function __gcry_ath_connect(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[110178];
  if (HEAP8[440664] & (r4 | 0) != 0) {
    r5 = FUNCTION_TABLE[r4](r1, r2, r3);
    return r5;
  } else {
    r5 = _connect(r1, r2, r3);
    return r5;
  }
}
function __gcry_ath_sendmsg(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[110179];
  if (HEAP8[440664] & (r4 | 0) != 0) {
    r5 = FUNCTION_TABLE[r4](r1, r2, r3);
    return r5;
  } else {
    r5 = _sendmsg(r1, r2, r3);
    return r5;
  }
}
function __gcry_ath_recvmsg(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[110180];
  if (HEAP8[440664] & (r4 | 0) != 0) {
    r5 = FUNCTION_TABLE[r4](r1, r2, r3);
    return r5;
  } else {
    r5 = _recvmsg(r1, r2, r3);
    return r5;
  }
}
function __gcry_fips_signal_error(r1, r2, r3, r4, r5) {
  var r6, r7;
  r6 = STACKTOP;
  if ((__gcry_fips_mode() | 0) == 0) {
    STACKTOP = r6;
    return;
  }
  r7 = (r4 | 0) != 0;
  _fips_new_state(r7 ? 5 : 4);
  r4 = (r3 | 0) != 0;
  __gcry_log_info(465812, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = r7 ? 491012 : 490176, HEAP32[tempInt + 4 >> 2] = r1, HEAP32[tempInt + 8 >> 2] = r2, HEAP32[tempInt + 12 >> 2] = r4 ? 488432 : 490176, HEAP32[tempInt + 16 >> 2] = r4 ? r3 : 490176, HEAP32[tempInt + 20 >> 2] = (r5 | 0) != 0 ? r5 : 487716, tempInt));
  STACKTOP = r6;
  return;
}
function __gcry_is_fips_mode_inactive() {
  var r1, r2;
  if ((__gcry_fips_mode() | 0) == 0) {
    r1 = 0;
    return r1;
  }
  _lock_fsm();
  r2 = HEAP8[455496] & 1;
  _unlock_fsm();
  r1 = r2;
  return r1;
}
function __gcry_fips_is_operational() {
  var r1, r2;
  if ((__gcry_fips_mode() | 0) == 0) {
    r1 = 1;
    return r1;
  }
  _lock_fsm();
  if ((HEAP32[114598] | 0) == 1) {
    _unlock_fsm();
    __gcry_fips_run_selftests(0);
    _lock_fsm();
  }
  r2 = (HEAP32[114598] | 0) == 3 & 1;
  _unlock_fsm();
  r1 = r2;
  return r1;
}
function __gcry_fips_run_selftests(r1) {
  var r2, r3, r4;
  if ((__gcry_fips_mode() | 0) != 0) {
    _fips_new_state(2);
  }
  do {
    if ((_run_cipher_selftests(r1) | 0) == 0) {
      if ((_run_digest_selftests(r1) | 0) != 0) {
        r2 = 50;
        r3 = 4;
        break;
      }
      if ((_run_hmac_selftests(r1) | 0) != 0) {
        r2 = 50;
        r3 = 4;
        break;
      }
      if ((_run_random_selftests() | 0) != 0) {
        r2 = 50;
        r3 = 4;
        break;
      }
      r4 = (_run_pubkey_selftests(r1) | 0) == 0;
      r2 = r4 ? 0 : 50;
      r3 = r4 ? 3 : 4;
    } else {
      r2 = 50;
      r3 = 4;
    }
  } while (0);
  if ((__gcry_fips_mode() | 0) == 0) {
    return r2;
  }
  _fips_new_state(r3);
  return r2;
}
function __gcry_fips_test_operational() {
  var r1, r2;
  if ((__gcry_fips_mode() | 0) == 0) {
    r1 = 1;
    return r1;
  }
  _lock_fsm();
  r2 = (HEAP32[114598] | 0) == 3 & 1;
  _unlock_fsm();
  r1 = r2;
  return r1;
}
function __gcry_initialize_fips_mode(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 512 | 0;
  r3 = r2;
  r4 = r2 + 256;
  if (HEAP8[492092]) {
    if ((__gcry_fips_mode() | 0) == 0) {
      __gcry_assert_failed(488444, 489832, 115, 495748);
    } else {
      _fips_new_state(5);
      __gcry_fips_noreturn();
    }
  }
  HEAP8[492092] = 1;
  L2514 : do {
    if ((r1 | 0) == 0) {
      if ((_access(477240, 0) | 0) == 0) {
        if (!HEAP8[440948]) {
          break;
        }
        __gcry_assert_failed(481324, 489832, 133, 495748);
      }
      r5 = _fopen(492060, 474352);
      do {
        if ((r5 | 0) == 0) {
          r6 = HEAP32[___errno_location() >> 2];
          if ((r6 | 0) == 2 | (r6 | 0) == 13) {
            break;
          }
          if ((_access(472420, 0) | 0) != 0) {
            break;
          }
          r7 = _strerror(r6);
          __gcry_log_info(470944, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 492060, HEAP32[tempInt + 4 >> 2] = r7, tempInt));
          _abort();
        } else {
          r7 = r3 | 0;
          do {
            if ((_fgets(r7, 256, r5) | 0) != 0) {
              if ((_atoi(r7) | 0) == 0) {
                break;
              }
              _fclose(r5);
              if (!HEAP8[440948]) {
                break L2514;
              }
              __gcry_assert_failed(481324, 489832, 152, 495748);
            }
          } while (0);
          _fclose(r5);
        }
      } while (0);
      HEAP8[440948] = 1;
      STACKTOP = r2;
      return;
    } else {
      if (!HEAP8[440948]) {
        break;
      }
      __gcry_assert_failed(481324, 489832, 122, 495748);
    }
  } while (0);
  r3 = __gcry_ath_mutex_init(455712);
  if ((r3 | 0) != 0) {
    r1 = _strerror(r3);
    __gcry_log_info(469532, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
    _abort();
  }
  r1 = _fopen(477240, 474352);
  if ((r1 | 0) != 0) {
    r3 = r4 | 0;
    do {
      if ((_fgets(r3, 256, r1) | 0) != 0) {
        if ((_atoi(r3) | 0) == 0) {
          break;
        }
        HEAP8[457312] = 1;
      }
    } while (0);
    _fclose(r1);
  }
  _fips_new_state(1);
  STACKTOP = r2;
  return;
}
function _fips_new_state(r1) {
  var r2, r3, r4, r5;
  r2 = 0;
  r3 = STACKTOP;
  _lock_fsm();
  r4 = HEAP32[114598];
  do {
    if ((r4 | 0) == 4) {
      if ((r1 | 0) == 6 | (r1 | 0) == 5 | (r1 | 0) == 4 | (r1 | 0) == 2) {
        r2 = 1954;
        break;
      } else {
        r2 = 1955;
        break;
      }
    } else if ((r4 | 0) == 3) {
      if ((r1 | 0) == 6 | (r1 | 0) == 5 | (r1 | 0) == 4 | (r1 | 0) == 2) {
        r2 = 1954;
        break;
      } else {
        r2 = 1955;
        break;
      }
    } else if ((r4 | 0) == 0) {
      if ((r1 | 0) == 5 | (r1 | 0) == 4 | (r1 | 0) == 1) {
        r2 = 1954;
        break;
      } else {
        r2 = 1955;
        break;
      }
    } else if ((r4 | 0) == 5) {
      if ((r1 | 0) == 6) {
        r2 = 1954;
        break;
      } else {
        r2 = 1955;
        break;
      }
    } else if ((r4 | 0) == 2) {
      if ((r1 - 3 | 0) >>> 0 < 3) {
        r2 = 1954;
        break;
      } else {
        r2 = 1955;
        break;
      }
    } else if ((r4 | 0) == 1) {
      if ((r1 | 0) == 5 | (r1 | 0) == 4 | (r1 | 0) == 2) {
        r2 = 1954;
        break;
      } else {
        r2 = 1955;
        break;
      }
    } else {
      r2 = 1955;
    }
  } while (0);
  do {
    if (r2 == 1954) {
      HEAP32[114598] = r1;
      _unlock_fsm();
      if ((__gcry_log_verbosity(2) | 0) != 0) {
        r5 = 1;
        break;
      }
      STACKTOP = r3;
      return;
    } else if (r2 == 1955) {
      _unlock_fsm();
      r5 = 0;
    }
  } while (0);
  r2 = _state2str(r4);
  r4 = _state2str(r1);
  __gcry_log_info(486776, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r2, HEAP32[tempInt + 4 >> 2] = r4, HEAP32[tempInt + 8 >> 2] = r5 ? 485980 : 485056, tempInt));
  if (r5) {
    STACKTOP = r3;
    return;
  } else {
    __gcry_fips_noreturn();
  }
}
function __gcry_fips_noreturn() {
  _fflush(0);
  _abort();
}
function __gcry_inactivate_fips_mode(r1) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_assert_failed(467904, 489832, 288, 495776);
  }
  if ((__gcry_enforced_fips_mode() | 0) != 0) {
    __gcry_fips_signal_error(489832, 293, 495776, 0, r1);
    return;
  }
  _lock_fsm();
  if (HEAP8[455496]) {
    _unlock_fsm();
    return;
  } else {
    HEAP8[455496] = 1;
    _unlock_fsm();
    return;
  }
}
function _lock_fsm() {
  var r1, r2;
  r1 = STACKTOP;
  r2 = __gcry_ath_mutex_lock(455712);
  if ((r2 | 0) == 0) {
    STACKTOP = r1;
    return;
  } else {
    r1 = _strerror(r2);
    __gcry_log_info(475708, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
    _abort();
  }
}
function _unlock_fsm() {
  var r1, r2;
  r1 = STACKTOP;
  r2 = __gcry_ath_mutex_unlock(455712);
  if ((r2 | 0) == 0) {
    STACKTOP = r1;
    return;
  } else {
    r1 = _strerror(r2);
    __gcry_log_info(476e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
    _abort();
  }
}
function _state2str(r1) {
  var r2;
  if ((r1 | 0) == 4) {
    r2 = 481616;
  } else if ((r1 | 0) == 3) {
    r2 = 482076;
  } else if ((r1 | 0) == 5) {
    r2 = 480420;
  } else if ((r1 | 0) == 1) {
    r2 = 483408;
  } else if ((r1 | 0) == 0) {
    r2 = 484368;
  } else if ((r1 | 0) == 6) {
    r2 = 480084;
  } else if ((r1 | 0) == 2) {
    r2 = 482756;
  } else {
    r2 = 479812;
  }
  return r2;
}
function __gcry_fips_test_error_or_operational() {
  var r1, r2;
  if ((__gcry_fips_mode() | 0) == 0) {
    r1 = 1;
    return r1;
  }
  _lock_fsm();
  r2 = (HEAP32[114598] - 3 | 0) >>> 0 < 2 & 1;
  _unlock_fsm();
  r1 = r2;
  return r1;
}
function _run_cipher_selftests(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = __gcry_cipher_selftest(2, r1, 256);
  r3 = (r2 | 0) != 0;
  if (r3) {
    r4 = _gpg_strerror(r2);
  } else {
    r4 = 0;
  }
  _reporter(477652, 2, 0, r4);
  r4 = __gcry_cipher_selftest(7, r1, 256);
  r2 = (r4 | 0) != 0;
  if (r2) {
    r5 = _gpg_strerror(r4);
  } else {
    r5 = 0;
  }
  _reporter(477652, 7, 0, r5);
  r5 = __gcry_cipher_selftest(8, r1, 256);
  r4 = (r5 | 0) != 0;
  if (r4) {
    r6 = _gpg_strerror(r5);
  } else {
    r6 = 0;
  }
  _reporter(477652, 8, 0, r6);
  r6 = r4 ? 1 : r2 ? 1 : r3 & 1;
  r3 = __gcry_cipher_selftest(9, r1, 256);
  r1 = (r3 | 0) != 0;
  if (!r1) {
    r7 = 0;
    _reporter(477652, 9, 0, r7);
    r8 = r1 ? 1 : r6;
    return r8;
  }
  r7 = _gpg_strerror(r3);
  _reporter(477652, 9, 0, r7);
  r8 = r1 ? 1 : r6;
  return r8;
}
function _run_digest_selftests(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = __gcry_md_selftest(2, r1, 256);
  r3 = (r2 | 0) != 0;
  if (r3) {
    r4 = _gpg_strerror(r2);
  } else {
    r4 = 0;
  }
  _reporter(478236, 2, 0, r4);
  r4 = __gcry_md_selftest(11, r1, 256);
  r2 = (r4 | 0) != 0;
  if (r2) {
    r5 = _gpg_strerror(r4);
  } else {
    r5 = 0;
  }
  _reporter(478236, 11, 0, r5);
  r5 = __gcry_md_selftest(8, r1, 256);
  r4 = (r5 | 0) != 0;
  if (r4) {
    r6 = _gpg_strerror(r5);
  } else {
    r6 = 0;
  }
  _reporter(478236, 8, 0, r6);
  r6 = __gcry_md_selftest(9, r1, 256);
  r5 = (r6 | 0) != 0;
  if (r5) {
    r7 = _gpg_strerror(r6);
  } else {
    r7 = 0;
  }
  _reporter(478236, 9, 0, r7);
  r7 = r5 ? 1 : r4 ? 1 : r2 ? 1 : r3 & 1;
  r3 = __gcry_md_selftest(10, r1, 256);
  r1 = (r3 | 0) != 0;
  if (!r1) {
    r8 = 0;
    _reporter(478236, 10, 0, r8);
    r9 = r1 ? 1 : r7;
    return r9;
  }
  r8 = _gpg_strerror(r3);
  _reporter(478236, 10, 0, r8);
  r9 = r1 ? 1 : r7;
  return r9;
}
function _run_hmac_selftests(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = __gcry_hmac_selftest(2, r1, 256);
  r3 = (r2 | 0) != 0;
  if (r3) {
    r4 = _gpg_strerror(r2);
  } else {
    r4 = 0;
  }
  _reporter(478572, 2, 0, r4);
  r4 = __gcry_hmac_selftest(11, r1, 256);
  r2 = (r4 | 0) != 0;
  if (r2) {
    r5 = _gpg_strerror(r4);
  } else {
    r5 = 0;
  }
  _reporter(478572, 11, 0, r5);
  r5 = __gcry_hmac_selftest(8, r1, 256);
  r4 = (r5 | 0) != 0;
  if (r4) {
    r6 = _gpg_strerror(r5);
  } else {
    r6 = 0;
  }
  _reporter(478572, 8, 0, r6);
  r6 = __gcry_hmac_selftest(9, r1, 256);
  r5 = (r6 | 0) != 0;
  if (r5) {
    r7 = _gpg_strerror(r6);
  } else {
    r7 = 0;
  }
  _reporter(478572, 9, 0, r7);
  r7 = r5 ? 1 : r4 ? 1 : r2 ? 1 : r3 & 1;
  r3 = __gcry_hmac_selftest(10, r1, 256);
  r1 = (r3 | 0) != 0;
  if (!r1) {
    r8 = 0;
    _reporter(478572, 10, 0, r8);
    r9 = r1 ? 1 : r7;
    return r9;
  }
  r8 = _gpg_strerror(r3);
  _reporter(478572, 10, 0, r8);
  r9 = r1 ? 1 : r7;
  return r9;
}
function _run_random_selftests() {
  var r1, r2, r3;
  r1 = __gcry_random_selftest(256);
  r2 = (r1 | 0) != 0;
  if (r2) {
    r3 = _gpg_strerror(r1);
  } else {
    r3 = 0;
  }
  _reporter(476280, 0, 0, r3);
  return r2 & 1;
}
function _run_pubkey_selftests(r1) {
  var r2, r3, r4, r5;
  r2 = __gcry_pk_selftest(1, r1, 256);
  r3 = (r2 | 0) != 0;
  if (r3) {
    r4 = _gpg_strerror(r2);
  } else {
    r4 = 0;
  }
  _reporter(479220, 1, 0, r4);
  r4 = __gcry_pk_selftest(17, r1, 256);
  r1 = (r4 | 0) != 0;
  if (r1) {
    r5 = _gpg_strerror(r4);
  } else {
    r5 = 0;
  }
  _reporter(479220, 17, 0, r5);
  return r1 ? 1 : r3 & 1;
}
function _reporter(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10;
  r5 = STACKTOP;
  r6 = (r4 | 0) != 0;
  do {
    if (!r6) {
      if ((__gcry_log_verbosity(2) | 0) != 0) {
        break;
      }
      STACKTOP = r5;
      return;
    }
  } while (0);
  r7 = _strcmp(r1, 478572);
  r8 = (r7 | 0) != 0 ? r1 : 478236;
  r9 = (r7 | 0) == 0;
  r7 = r9 ? 477944 : 490176;
  do {
    if ((_strcmp(r1, 477652) | 0) == 0) {
      r10 = __gcry_cipher_algo_name(r2);
    } else {
      if ((_strcmp(r1, 478236) | 0) == 0) {
        r10 = __gcry_md_algo_name(r2);
        break;
      }
      if (r9) {
        r10 = __gcry_md_algo_name(r2);
        break;
      }
      if ((_strcmp(r1, 479220) | 0) != 0) {
        r10 = 490176;
        break;
      }
      r10 = __gcry_pk_algo_name(r2);
    }
  } while (0);
  r1 = (r3 | 0) != 0;
  __gcry_log_info(478880, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = r8, HEAP32[tempInt + 4 >> 2] = r7, HEAP32[tempInt + 8 >> 2] = r10, HEAP32[tempInt + 12 >> 2] = r2, HEAP32[tempInt + 16 >> 2] = r6 ? r4 : 477464, HEAP32[tempInt + 20 >> 2] = r1 ? 476692 : 490176, HEAP32[tempInt + 24 >> 2] = r1 ? r3 : 490176, HEAP32[tempInt + 28 >> 2] = r1 ? 476484 : 490176, tempInt));
  STACKTOP = r5;
  return;
}
function __gcry_global_is_operational() {
  if (!HEAP8[464780]) {
    _global_init();
  }
  return __gcry_fips_is_operational();
}
function __gcry_check_version(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r3 = r2, r4 = r3 >> 2;
  r5 = r2 + 4, r6 = r5 >> 2;
  r7 = r2 + 8;
  r8 = r2 + 12, r9 = r8 >> 2;
  r10 = r2 + 16, r11 = r10 >> 2;
  r12 = r2 + 20;
  _global_init();
  L2680 : do {
    if ((r1 | 0) == 0) {
      r13 = 487968;
    } else {
      if ((_parse_version_string(487968, r3, r5, r7) | 0) == 0) {
        r13 = 0;
        break;
      }
      if ((_parse_version_string(r1, r8, r10, r12) | 0) == 0) {
        r13 = 0;
        break;
      }
      r14 = HEAP32[r4];
      r15 = HEAP32[r9];
      if ((r14 | 0) > (r15 | 0)) {
        r13 = 487968;
        break;
      }
      if ((r14 | 0) == (r15 | 0)) {
        if ((HEAP32[r6] | 0) > (HEAP32[r11] | 0)) {
          r13 = 487968;
          break;
        }
      }
      do {
        if ((HEAP32[r4] | 0) == (HEAP32[r9] | 0)) {
          if ((HEAP32[r6] | 0) != (HEAP32[r11] | 0)) {
            break;
          }
          if ((HEAP32[r7 >> 2] | 0) > (HEAP32[r12 >> 2] | 0)) {
            r13 = 487968;
            break L2680;
          }
        }
      } while (0);
      do {
        if ((HEAP32[r4] | 0) == (HEAP32[r9] | 0)) {
          if ((HEAP32[r6] | 0) != (HEAP32[r11] | 0)) {
            break;
          }
          if ((HEAP32[r7 >> 2] | 0) == (HEAP32[r12 >> 2] | 0)) {
            r13 = 487968;
            break L2680;
          }
        }
      } while (0);
      r13 = 0;
    }
  } while (0);
  STACKTOP = r2;
  return r13;
}
function _parse_version_string(r1, r2, r3, r4) {
  var r5, r6;
  r5 = _parse_version_number(r1, r2);
  do {
    if ((r5 | 0) == 0) {
      r6 = 0;
    } else {
      if (HEAP8[r5] << 24 >> 24 != 46) {
        r6 = 0;
        break;
      }
      r2 = _parse_version_number(r5 + 1 | 0, r3);
      if ((r2 | 0) == 0) {
        r6 = 0;
        break;
      }
      if (HEAP8[r2] << 24 >> 24 != 46) {
        r6 = 0;
        break;
      }
      r6 = _parse_version_number(r2 + 1 | 0, r4);
    }
  } while (0);
  return r6;
}
function __gcry_vcontrol(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r3 = r2 >> 2;
  L2705 : do {
    if ((r1 | 0) == 24) {
      _global_init();
      __gcry_secmem_init(HEAP32[r3]);
      r4 = __gcry_secmem_get_flags() >>> 2 & 1;
    } else if ((r1 | 0) == 51) {
      r4 = (__gcry_random_is_faked() | 0) != 0 & 1;
    } else if ((r1 | 0) == 50) {
      __gcry_random_initialize(1);
      r4 = 0;
    } else if ((r1 | 0) == 53) {
      r2 = HEAP32[r3];
      _print_config((r2 | 0) != 0 ? 70 : 164, r2);
      r4 = 0;
    } else if ((r1 | 0) == 37) {
      _global_init();
      HEAP8[440944] = 1;
      r4 = 0;
    } else if ((r1 | 0) == 55) {
      if ((__gcry_fips_mode() | 0) == 0) {
        r4 = 0;
        break;
      }
      r4 = ((__gcry_is_fips_mode_inactive() | 0) != 0 | HEAP8[440944]) & 1 ^ 1;
    } else if ((r1 | 0) == 56) {
      if (!HEAP8[464780]) {
        HEAP8[455720] = 1;
        r4 = 0;
        break;
      }
      if ((__gcry_fips_test_error_or_operational() | 0) != 0) {
        __gcry_fips_run_selftests(1);
      }
      r4 = (__gcry_fips_is_operational() | 0) != 0 & 1;
    } else if ((r1 | 0) == 48) {
      __gcry_random_initialize(1);
      if ((__gcry_global_is_operational() | 0) == 0) {
        r4 = 0;
        break;
      }
      __gcry_fast_random_poll();
      r4 = 0;
    } else if ((r1 | 0) == 31) {
      __gcry_private_enable_m_guard();
      r4 = 0;
    } else if ((r1 | 0) == 54) {
      r4 = (__gcry_fips_test_operational() | 0) != 0 & 1;
    } else if ((r1 | 0) == 29) {
      __gcry_secmem_set_flags(__gcry_secmem_get_flags() & -3);
      r4 = 0;
    } else if ((r1 | 0) == 27) {
      __gcry_secmem_set_flags(__gcry_secmem_get_flags() | 1);
      r4 = 0;
    } else if ((r1 | 0) == 45) {
      __gcry_set_random_seed_file(HEAP32[r3]);
      r4 = 0;
    } else if ((r1 | 0) == 36) {
      _global_init();
      r4 = 0;
    } else if ((r1 | 0) == 40) {
      r4 = HEAP8[464780] & 1;
    } else if ((r1 | 0) == 57) {
      _global_init();
      r4 = __gcry_fips_run_selftests(1);
    } else if ((r1 | 0) == 58) {
      r2 = HEAP32[r3];
      r5 = HEAP32[r3 + 1];
      r6 = HEAP32[r3 + 2];
      r7 = HEAP32[r3 + 3];
      r8 = HEAP32[r3 + 4];
      r9 = HEAP32[r3 + 5];
      r10 = HEAP32[r3 + 6];
      r11 = HEAP32[r3 + 7];
      if ((__gcry_global_is_operational() | 0) == 0) {
        r4 = 176;
        break;
      }
      r4 = __gcry_random_init_external_test(r2, r5, r6, r7, r8, r9, r10, r11);
    } else if ((r1 | 0) == 60) {
      __gcry_random_deinit_external_test(HEAP32[r3]);
      r4 = 0;
    } else if ((r1 | 0) == 47) {
      r11 = __gcry_ath_install(HEAP32[r3], HEAP8[464780] & 1);
      if ((r11 | 0) != 0) {
        r4 = r11;
        break;
      }
      _global_init();
      r4 = 0;
    } else if ((r1 | 0) == 44) {
      __gcry_enable_quick_random_gen();
      r4 = 0;
    } else if ((r1 | 0) == 22) {
      _global_init();
      __gcry_secure_random_alloc();
      r4 = 0;
    } else if ((r1 | 0) == 25) {
      _global_init();
      __gcry_secmem_term();
      r4 = 0;
    } else if ((r1 | 0) == 20) {
      HEAP32[114557] = HEAP32[114557] | HEAP32[r3];
      r4 = 0;
    } else if ((r1 | 0) == 21) {
      HEAP32[114557] = HEAP32[114557] & (HEAP32[r3] ^ -1);
      r4 = 0;
    } else if ((r1 | 0) == 14) {
      __gcry_secmem_dump_stats();
      r4 = 0;
    } else if ((r1 | 0) == 46) {
      if ((__gcry_global_is_operational() | 0) == 0) {
        r4 = 0;
        break;
      }
      __gcry_update_random_seed_file();
      r4 = 0;
    } else if ((r1 | 0) == 23 | (r1 | 0) == 49 | (r1 | 0) == 61 | (r1 | 0) == 62) {
      r4 = 0;
    } else if ((r1 | 0) == 63) {
      r11 = HEAP32[r3];
      r10 = 0;
      while (1) {
        if ((r10 | 0) == 5) {
          r4 = 88;
          break L2705;
        }
        if ((_strcmp(HEAP32[(r10 << 3) + 455552 >> 2], r11) | 0) == 0) {
          break;
        } else {
          r10 = r10 + 1 | 0;
        }
      }
      HEAP32[114484] = HEAP32[114484] | HEAP32[(r10 << 3) + 455548 >> 2];
      r4 = 0;
    } else if ((r1 | 0) == 19) {
      __gcry_set_log_verbosity(HEAP32[r3]);
      r4 = 0;
    } else if ((r1 | 0) == 28) {
      __gcry_secmem_set_flags(__gcry_secmem_get_flags() | 2);
      r4 = 0;
    } else if ((r1 | 0) == 13) {
      __gcry_random_dump_stats();
      r4 = 0;
    } else if ((r1 | 0) == 52) {
      r4 = _gpg_error1287();
    } else if ((r1 | 0) == 59) {
      r11 = HEAP32[r3];
      r9 = HEAP32[r3 + 1];
      r8 = HEAP32[r3 + 2];
      if ((__gcry_global_is_operational() | 0) == 0) {
        r4 = 176;
        break;
      }
      r4 = __gcry_random_run_external_test(r11, r9, r8);
    } else if ((r1 | 0) == 39) {
      r4 = HEAP8[491612] & 1;
    } else if ((r1 | 0) == 38) {
      if (HEAP8[491612]) {
        r4 = 0;
        break;
      }
      _global_init();
      __gcry_random_initialize(0);
      HEAP8[491612] = 1;
      __gcry_global_is_operational();
      r4 = 0;
    } else if ((r1 | 0) == 30) {
      _global_init();
      __gcry_secmem_init(0);
      r4 = 0;
    } else {
      r4 = 61;
    }
  } while (0);
  return _gcry_error1288(r4);
}
function _gpg_error1287() {
  return _gpg_err_make1339(1, 60);
}
function _print_config(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  FUNCTION_TABLE[r1](r2, 465796, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 487968, tempInt));
  FUNCTION_TABLE[r1](r2, 490996, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 490104, tempInt));
  FUNCTION_TABLE[r1](r2, 488416, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 487696, tempInt));
  FUNCTION_TABLE[r1](r2, 486760, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 485924, tempInt));
  FUNCTION_TABLE[r1](r2, 485040, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  FUNCTION_TABLE[r1](r2, 484352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 447037, tempInt));
  FUNCTION_TABLE[r1](r2, 483396, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  FUNCTION_TABLE[r1](r2, 482072, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  r4 = (__gcry_fips_mode() | 0) != 0 ? 121 : 110;
  r5 = (__gcry_enforced_fips_mode() | 0) != 0 ? 121 : 110;
  FUNCTION_TABLE[r1](r2, 481596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
  STACKTOP = r3;
  return;
}
function _gcry_error1288(r1) {
  return _gcry_err_make1340(r1);
}
function __gcry_control(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  r2 = __gcry_vcontrol(r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return r2;
}
function __gcry_strerror(r1) {
  return _gpg_strerror(r1);
}
function __gcry_strsource(r1) {
  return _gpg_strsource(r1);
}
function __gcry_err_code_from_errno(r1) {
  return _gpg_err_code_from_errno(r1);
}
function __gcry_err_code_to_errno(r1) {
  return _gpg_err_code_from_errno(r1);
}
function __gcry_err_make_from_errno(r1, r2) {
  return _gpg_err_make_from_errno(r1, r2);
}
function _gpg_err_make_from_errno(r1, r2) {
  return _gpg_err_make1339(r1, _gpg_err_code_from_errno(r2));
}
function __gcry_error_from_errno(r1) {
  return _gcry_error1288(_gpg_err_code_from_errno(r1));
}
function __gcry_set_allocation_handler(r1, r2, r3, r4, r5) {
  _global_init();
  if ((__gcry_fips_mode() | 0) != 0) {
    __gcry_inactivate_fips_mode(489804);
  }
  HEAP32[116205] = r1;
  HEAP32[116204] = r2;
  HEAP32[113871] = r3;
  HEAP32[109823] = r4;
  HEAP32[113929] = r5;
  return;
}
function __gcry_set_outofcore_handler(r1, r2) {
  var r3;
  r3 = STACKTOP;
  _global_init();
  if ((__gcry_fips_mode() | 0) == 0) {
    HEAP32[110159] = r1;
    HEAP32[110158] = r2;
    STACKTOP = r3;
    return;
  } else {
    __gcry_log_info(481280, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = r3;
    return;
  }
}
function __gcry_malloc(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2;
  HEAP32[r3 >> 2] = 0;
  _do_malloc(r1, 0, r3);
  STACKTOP = r2;
  return HEAP32[r3 >> 2];
}
function _global_init() {
  if (HEAP8[464780]) {
    return;
  }
  HEAP8[464780] = 1;
  if ((__gcry_ath_init() | 0) != 0) {
    __gcry_bug(480408, 139, 494716);
  }
  __gcry_initialize_fips_mode(HEAP8[455720] & 1);
  __gcry_cipher_init();
  __gcry_md_init();
  __gcry_pk_init();
  return;
}
function __gcry_check_heap(r1) {
  return;
}
function __gcry_get_hw_features() {
  return 0;
}
function __gcry_detect_hw_features(r1) {
  return;
}
function __gcry_set_gettext_handler(r1) {
  HEAP32[102597] = r1;
  return;
}
function __gcry_set_fatalerror_handler(r1, r2) {
  HEAP32[113933] = r2;
  HEAP32[113934] = r1;
  return;
}
function __gcry_set_log_handler(r1, r2) {
  HEAP32[112828] = r1;
  HEAP32[112827] = r2;
  return;
}
function __gcry_set_log_verbosity(r1) {
  HEAP32[102596] = r1;
  return;
}
function _gpg_err_make1339(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r3 = r1 << 24 & 2130706432 | r2 & 65535;
  return r3;
}
function __gcry_log_verbosity(r1) {
  return (HEAP32[102596] | 0) >= (r1 | 0) & 1;
}
function _parse_version_number(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  do {
    if (HEAP8[r1] << 24 >> 24 == 48) {
      if (((HEAP8[r1 + 1 | 0] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
        r3 = 0;
      } else {
        break;
      }
      return r3;
    }
  } while (0);
  L2808 : do {
    if (((HEAP8[r1] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
      r4 = r1;
      r5 = 0;
      while (1) {
        r6 = (HEAP8[r4] << 24 >> 24) + ((r5 * 10 & -1) - 48) | 0;
        r7 = r4 + 1 | 0;
        if (((HEAP8[r7] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
          r4 = r7;
          r5 = r6;
        } else {
          r8 = r7;
          r9 = r6;
          break L2808;
        }
      }
    } else {
      r8 = r1;
      r9 = 0;
    }
  } while (0);
  HEAP32[r2 >> 2] = r9;
  r3 = (r9 | 0) < 0 ? 0 : r8;
  return r3;
}
function __gcry_module_id_new(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = 0;
  r4 = (r1 | 0) == 0;
  r5 = 600;
  L2814 : while (1) {
    if ((r5 | 0) == 1024) {
      r5 = 4096;
      continue;
    }
    if (r4) {
      break;
    } else {
      r6 = r1;
    }
    while (1) {
      if ((r5 | 0) == (HEAP32[r6 + 24 >> 2] | 0)) {
        break;
      }
      r7 = HEAP32[r6 >> 2];
      if ((r7 | 0) == 0) {
        break L2814;
      } else {
        r6 = r7;
      }
    }
    r7 = r5 + 1 | 0;
    if (r7 >>> 0 < 65500) {
      r5 = r7;
    } else {
      r8 = 63;
      r3 = 2185;
      break;
    }
  }
  if (r3 == 2185) {
    return r8;
  }
  HEAP32[r2 >> 2] = r5;
  r8 = 0;
  return r8;
}
function __gcry_module_lookup_id(r1, r2) {
  var r3, r4, r5;
  r3 = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  } else {
    r5 = r1;
  }
  while (1) {
    if ((HEAP32[r5 + 24 >> 2] | 0) == (r2 | 0)) {
      break;
    }
    r1 = HEAP32[r5 >> 2];
    if ((r1 | 0) == 0) {
      r4 = 0;
      r3 = 2191;
      break;
    } else {
      r5 = r1;
    }
  }
  if (r3 == 2191) {
    return r4;
  }
  r3 = r5 + 20 | 0;
  HEAP32[r3 >> 2] = HEAP32[r3 >> 2] + 1 | 0;
  r4 = r5;
  return r4;
}
function _do_malloc(r1, r2, r3) {
  var r4, r5, r6;
  r4 = 0;
  do {
    if ((r2 & 1 | 0) == 0) {
      r4 = 2199;
    } else {
      if ((_get_no_secure_memory() | 0) != 0) {
        r4 = 2199;
        break;
      }
      r5 = HEAP32[116204];
      if ((r5 | 0) == 0) {
        r6 = __gcry_private_malloc_secure(r1);
        break;
      } else {
        r6 = FUNCTION_TABLE[r5](r1);
        break;
      }
    }
  } while (0);
  do {
    if (r4 == 2199) {
      r2 = HEAP32[116205];
      if ((r2 | 0) == 0) {
        r6 = __gcry_private_malloc(r1);
        break;
      } else {
        r6 = FUNCTION_TABLE[r2](r1);
        break;
      }
    }
  } while (0);
  if ((r6 | 0) != 0) {
    HEAP32[r3 >> 2] = r6;
    return;
  }
  if ((HEAP32[___errno_location() >> 2] | 0) == 0) {
    _gpg_err_set_errno(12);
  }
  ___errno_location();
  return;
}
function __gcry_malloc_secure(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2;
  HEAP32[r3 >> 2] = 0;
  _do_malloc(r1, 1, r3);
  STACKTOP = r2;
  return HEAP32[r3 >> 2];
}
function __gcry_is_secure(r1) {
  var r2, r3;
  do {
    if ((_get_no_secure_memory() | 0) == 0) {
      r2 = HEAP32[113871];
      if ((r2 | 0) == 0) {
        r3 = __gcry_private_is_secure(r1);
        break;
      } else {
        r3 = FUNCTION_TABLE[r2](r1);
        break;
      }
    } else {
      r3 = 0;
    }
  } while (0);
  return r3;
}
function _get_no_secure_memory() {
  var r1, r2;
  r1 = HEAP8[440944];
  do {
    if (r1) {
      if ((__gcry_enforced_fips_mode() | 0) == 0) {
        r2 = r1 & 1;
        break;
      } else {
        HEAP8[440944] = 0;
        r2 = 0;
        break;
      }
    } else {
      r2 = 0;
    }
  } while (0);
  return r2;
}
function __gcry_realloc(r1, r2) {
  var r3, r4, r5;
  do {
    if ((r1 | 0) == 0) {
      r3 = __gcry_malloc(r2);
    } else {
      if ((r2 | 0) == 0) {
        __gcry_free(r1);
        r3 = 0;
        break;
      }
      r4 = HEAP32[109823];
      if ((r4 | 0) == 0) {
        r5 = __gcry_private_realloc(r1, r2);
      } else {
        r5 = FUNCTION_TABLE[r4](r1, r2);
      }
      if ((r5 | 0) != 0) {
        r3 = r5;
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) != 0) {
        r3 = 0;
        break;
      }
      _gpg_err_set_errno(12);
      r3 = 0;
    }
  } while (0);
  return r3;
}
function __gcry_free(r1) {
  var r2, r3;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = HEAP32[___errno_location() >> 2];
  r3 = HEAP32[113929];
  if ((r3 | 0) == 0) {
    __gcry_private_free(r1);
  } else {
    FUNCTION_TABLE[r3](r1);
  }
  if ((r2 | 0) == 0) {
    return;
  }
  _gpg_err_set_errno(r2);
  return;
}
function __gcry_calloc(r1, r2) {
  var r3, r4;
  r3 = Math.imul(r2, r1);
  do {
    if ((r2 | 0) != 0) {
      if ((Math.floor((r3 >>> 0) / (r2 >>> 0)) | 0) == (r1 | 0)) {
        break;
      }
      _gpg_err_set_errno(12);
      r4 = 0;
      return r4;
    }
  } while (0);
  r1 = __gcry_malloc(r3);
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  _memset(r1, 0, r3);
  r4 = r1;
  return r4;
}
function __gcry_calloc_secure(r1, r2) {
  var r3, r4;
  r3 = Math.imul(r2, r1);
  do {
    if ((r2 | 0) != 0) {
      if ((Math.floor((r3 >>> 0) / (r2 >>> 0)) | 0) == (r1 | 0)) {
        break;
      }
      _gpg_err_set_errno(12);
      r4 = 0;
      return r4;
    }
  } while (0);
  r1 = __gcry_malloc_secure(r3);
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  _memset(r1, 0, r3);
  r4 = r1;
  return r4;
}
function __gcry_strdup(r1) {
  var r2, r3;
  r2 = _strlen(r1) + 1 | 0;
  if ((__gcry_is_secure(r1) | 0) == 0) {
    r3 = __gcry_malloc(r2);
  } else {
    r3 = __gcry_malloc_secure(r2);
  }
  if ((r3 | 0) == 0) {
    return r3;
  }
  _strcpy(r3, r1);
  return r3;
}
function __gcry_get_debug_flag(r1) {
  var r2;
  if ((__gcry_fips_mode() | 0) != 0) {
    r2 = 0;
    return r2;
  }
  r2 = HEAP32[114557] & r1;
  return r2;
}
function __gcry_set_progress_handler(r1, r2) {
  __gcry_register_pk_dsa_progress(r1, r2);
  __gcry_register_pk_elg_progress(r1, r2);
  __gcry_register_primegen_progress(r1, r2);
  __gcry_register_random_progress(r1, r2);
  return;
}
function _gcry_err_make1340(r1) {
  return _gpg_err_make1339(32, r1);
}
function __gcry_gettext(r1) {
  var r2, r3;
  r2 = HEAP32[102597];
  if ((r2 | 0) == 0) {
    r3 = r1;
  } else {
    r3 = FUNCTION_TABLE[r2](r1);
  }
  return r3;
}
function _write2stderr(r1) {
  _write(2, r1, _strlen(r1));
  return;
}
function __gcry_log(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  HEAP32[r5 >> 2] = r3;
  __gcry_logv(r1, r2, HEAP32[r5 >> 2]);
  STACKTOP = r4;
  return;
}
function __gcry_log_info(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  __gcry_logv(10, r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return;
}
function __gcry_log_info_with_dummy_fp(r1, r2, r3) {
  var r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r1;
  HEAP32[r4 >> 2] = r3;
  __gcry_logv(10, r2, HEAP32[r4 >> 2]);
  STACKTOP = r1;
  return 0;
}
function __gcry_log_error(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  __gcry_logv(30, r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return;
}
function __gcry_log_debug(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  __gcry_logv(100, r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return;
}
function __gcry_log_printf(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  if ((r1 | 0) == 0) {
    STACKTOP = r3;
    return;
  }
  HEAP32[r4 >> 2] = r2;
  __gcry_logv(0, r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return;
}
function __gcry_log_printhex(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  r5 = (r1 | 0) != 0;
  do {
    if (r5) {
      if (HEAP8[r1] << 24 >> 24 == 0) {
        break;
      }
      __gcry_log_debug(472404, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
    }
  } while (0);
  L2953 : do {
    if ((r3 | 0) != 0) {
      __gcry_log_printf(470924, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r2], tempInt));
      r1 = r3 - 1 | 0;
      if ((r1 | 0) == 0) {
        break;
      } else {
        r6 = r2;
        r7 = r1;
      }
      while (1) {
        r1 = r6 + 1 | 0;
        __gcry_log_printf(469508, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r1], tempInt));
        r8 = r7 - 1 | 0;
        if ((r8 | 0) == 0) {
          break L2953;
        } else {
          r6 = r1;
          r7 = r8;
        }
      }
    }
  } while (0);
  if (!r5) {
    STACKTOP = r4;
    return;
  }
  __gcry_log_printf(481260, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r4;
  return;
}
function __gcry_burn_stack(r1) {
  var r2, r3, r4, r5;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r3 = r2 | 0;
  r4 = 64;
  while (1) {
    HEAP8[r3] = 0;
    r5 = r4 - 1 | 0;
    if ((r5 | 0) == 0) {
      break;
    } else {
      r3 = r3 + 1 | 0;
      r4 = r5;
    }
  }
  r4 = r1 - 64 | 0;
  if ((r4 | 0) <= 0) {
    STACKTOP = r2;
    return;
  }
  __gcry_burn_stack(r4);
  STACKTOP = r2;
  return;
}
function __gcry_module_add(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6;
  HEAP32[r7 >> 2] = r2;
  do {
    if ((r2 | 0) == 0) {
      r8 = __gcry_module_id_new(HEAP32[r1 >> 2], r7);
      if ((r8 | 0) == 0) {
        break;
      } else {
        r9 = r8;
      }
      STACKTOP = r6;
      return r9;
    }
  } while (0);
  r2 = __gcry_malloc(28), r8 = r2 >> 2;
  r10 = r2;
  do {
    if ((r2 | 0) == 0) {
      r11 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      if ((r11 | 0) == 0) {
        break;
      } else {
        r9 = r11;
      }
      STACKTOP = r6;
      return r9;
    }
  } while (0);
  HEAP32[r8 + 4] = 0;
  HEAP32[r8 + 5] = 1;
  HEAP32[r8 + 2] = r3;
  HEAP32[r8 + 3] = r4;
  HEAP32[r8 + 6] = HEAP32[r7 >> 2];
  r7 = r2;
  HEAP32[r7 >> 2] = HEAP32[r1 >> 2];
  HEAP32[r8 + 1] = r1;
  r8 = HEAP32[r1 >> 2];
  if ((r8 | 0) != 0) {
    HEAP32[r8 + 4 >> 2] = r7;
  }
  HEAP32[r1 >> 2] = r10;
  if ((r5 | 0) == 0) {
    r9 = 0;
    STACKTOP = r6;
    return r9;
  }
  HEAP32[r5 >> 2] = r10;
  r9 = 0;
  STACKTOP = r6;
  return r9;
}
function __gcry_xmalloc(r1) {
  var r2, r3, r4, r5;
  r2 = 0;
  while (1) {
    r3 = __gcry_malloc(r1);
    if ((r3 | 0) != 0) {
      r2 = 2325;
      break;
    }
    r4 = (__gcry_fips_mode() | 0) == 0;
    r5 = HEAP32[110159];
    if (!(r4 & (r5 | 0) != 0)) {
      r2 = 2324;
      break;
    }
    if ((FUNCTION_TABLE[r5](HEAP32[110158], r1, 0) | 0) == 0) {
      r2 = 2324;
      break;
    }
  }
  if (r2 == 2324) {
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
  } else if (r2 == 2325) {
    return r3;
  }
}
function __gcry_xrealloc(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = 0;
  while (1) {
    r4 = __gcry_realloc(r1, r2);
    if ((r4 | 0) != 0) {
      r3 = 2331;
      break;
    }
    r5 = (__gcry_fips_mode() | 0) == 0;
    r6 = HEAP32[110159];
    if (!(r5 & (r6 | 0) != 0)) {
      r3 = 2330;
      break;
    }
    r5 = HEAP32[110158];
    r7 = (__gcry_is_secure(r1) | 0) != 0 ? 3 : 2;
    if ((FUNCTION_TABLE[r6](r5, r2, r7) | 0) == 0) {
      r3 = 2330;
      break;
    }
  }
  if (r3 == 2330) {
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
  } else if (r3 == 2331) {
    return r4;
  }
}
function __gcry_xmalloc_secure(r1) {
  var r2, r3, r4, r5;
  r2 = 0;
  while (1) {
    r3 = __gcry_malloc_secure(r1);
    if ((r3 | 0) != 0) {
      r2 = 2337;
      break;
    }
    r4 = (__gcry_fips_mode() | 0) == 0;
    r5 = HEAP32[110159];
    if (!(r4 & (r5 | 0) != 0)) {
      r2 = 2336;
      break;
    }
    if ((FUNCTION_TABLE[r5](HEAP32[110158], r1, 1) | 0) == 0) {
      r2 = 2336;
      break;
    }
  }
  if (r2 == 2336) {
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), __gcry_gettext(477208));
  } else if (r2 == 2337) {
    return r3;
  }
}
function __gcry_xcalloc(r1, r2) {
  var r3, r4;
  r3 = Math.imul(r2, r1);
  if ((r2 | 0) == 0) {
    r4 = __gcry_xmalloc(r3);
    _memset(r4, 0, r3);
    return r4;
  }
  if ((Math.floor((r3 >>> 0) / (r2 >>> 0)) | 0) == (r1 | 0)) {
    r4 = __gcry_xmalloc(r3);
    _memset(r4, 0, r3);
    return r4;
  } else {
    _gpg_err_set_errno(12);
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
  }
}
function __gcry_xcalloc_secure(r1, r2) {
  var r3;
  r3 = Math.imul(r2, r1);
  do {
    if ((r2 | 0) != 0) {
      if ((Math.floor((r3 >>> 0) / (r2 >>> 0)) | 0) == (r1 | 0)) {
        break;
      }
      _gpg_err_set_errno(12);
      __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
    }
  } while (0);
  r1 = __gcry_xmalloc_secure(r3);
  _memset(r1, 0, r3);
  return r1;
}
function __gcry_xstrdup(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = 0;
  while (1) {
    r3 = __gcry_strdup(r1);
    if ((r3 | 0) != 0) {
      r2 = 2355;
      break;
    }
    r4 = (__gcry_is_secure(r1) | 0) != 0;
    r5 = (__gcry_fips_mode() | 0) == 0;
    r6 = HEAP32[110159];
    if (!(r5 & (r6 | 0) != 0)) {
      break;
    }
    r5 = _strlen(r1);
    if ((FUNCTION_TABLE[r6](HEAP32[110158], r5, r4 & 1) | 0) == 0) {
      break;
    }
  }
  if (r2 == 2355) {
    return r3;
  }
  r3 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
  if (!r4) {
    r7 = 0;
    __gcry_fatal_error(r3, r7);
  }
  r7 = __gcry_gettext(477208);
  __gcry_fatal_error(r3, r7);
}
function __gcry_fatal_error(r1, r2) {
  var r3;
  if ((r2 | 0) == 0) {
    r3 = _gpg_strerror(r1);
  } else {
    r3 = r2;
  }
  r2 = HEAP32[113934];
  do {
    if ((r2 | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      FUNCTION_TABLE[r2](HEAP32[113933], r1, r3);
    }
  } while (0);
  __gcry_fips_signal_error(487352, 84, 495836, 1, r3);
  _write2stderr(489712);
  _write2stderr(r3);
  _write2stderr(481260);
  __gcry_secmem_term();
  _abort();
}
function __gcry_logv(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = HEAP32[112828];
  if ((r5 | 0) == 0) {
    if ((r1 | 0) == 50) {
      _fwrite(465780, 13, 1, HEAP32[_stderr >> 2]);
    } else if ((r1 | 0) == 40) {
      _fwrite(467884, 7, 1, HEAP32[_stderr >> 2]);
    } else if ((r1 | 0) == 100) {
      _fwrite(490988, 5, 1, HEAP32[_stderr >> 2]);
    } else if (!((r1 | 0) == 0 | (r1 | 0) == 10 | (r1 | 0) == 20 | (r1 | 0) == 30)) {
      _fprintf(HEAP32[_stderr >> 2], 490044, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
    }
    _fprintf(HEAP32[_stderr >> 2], r2, r3);
  } else {
    FUNCTION_TABLE[r5](HEAP32[112827], r1, r2, r3);
  }
  if ((r1 | 0) == 50 | (r1 | 0) == 40) {
    __gcry_fips_signal_error(487352, 139, 495736, 1, 488384);
    __gcry_secmem_term();
    _abort();
  } else {
    STACKTOP = r4;
    return;
  }
}
function __gcry_bug(r1, r2, r3) {
  __gcry_log(50, 477176, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r2, HEAP32[tempInt + 8 >> 2] = r3, tempInt));
  _abort();
}
function __gcry_assert_failed(r1, r2, r3, r4) {
  __gcry_log(50, 474304, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r2, HEAP32[tempInt + 8 >> 2] = r3, HEAP32[tempInt + 12 >> 2] = r4, tempInt));
  _abort();
}
function __gcry_log_fatal(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  __gcry_logv(40, r1, HEAP32[r4 >> 2]);
  _abort();
}
function __gcry_log_bug(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  __gcry_logv(50, r1, HEAP32[r4 >> 2]);
  _abort();
}
function _ptr_into_pool_p(r1) {
  var r2, r3, r4;
  r2 = HEAP32[110092];
  if (r2 >>> 0 > r1 >>> 0) {
    r3 = 0;
    r4 = r3 & 1;
    return r4;
  }
  r3 = r1 >>> 0 < (HEAP32[110083] + r2 | 0) >>> 0;
  r4 = r3 & 1;
  return r4;
}
function _stats_update(r1, r2) {
  if ((r1 | 0) != 0) {
    HEAP32[114600] = HEAP32[114600] + r1 | 0;
    HEAP32[114599] = HEAP32[114599] + 1 | 0;
  }
  if ((r2 | 0) == 0) {
    return;
  }
  HEAP32[114600] = HEAP32[114600] - r2 | 0;
  HEAP32[114599] = HEAP32[114599] - 1 | 0;
  return;
}
function __gcry_module_use(r1) {
  var r2;
  r2 = r1 + 20 | 0;
  HEAP32[r2 >> 2] = HEAP32[r2 >> 2] + 1 | 0;
  return;
}
function __gcry_module_list(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  L3075 : do {
    if ((r1 | 0) == 0) {
      r4 = 0;
    } else {
      r5 = r1;
      r6 = 0;
      while (1) {
        r7 = HEAP32[r5 >> 2];
        r8 = r6 + 1 | 0;
        if ((r7 | 0) == 0) {
          r4 = r8;
          break L3075;
        } else {
          r5 = r7;
          r6 = r8;
        }
      }
    }
  } while (0);
  if ((r2 | 0) == 0) {
    HEAP32[r3 >> 2] = r4;
    return 0;
  }
  r6 = HEAP32[r3 >> 2];
  r5 = (r4 | 0) > (r6 | 0) ? r6 : r4;
  L3083 : do {
    if ((r5 | 0) > 0) {
      r8 = r4 ^ -1;
      r7 = r6 ^ -1;
      r9 = ((r8 | 0) > (r7 | 0) ? r8 : r7) ^ -1;
      r7 = r1;
      r8 = 0;
      while (1) {
        HEAP32[r2 + (r8 << 2) >> 2] = HEAP32[r7 + 24 >> 2];
        r10 = r8 + 1 | 0;
        if ((r10 | 0) == (r9 | 0)) {
          break L3083;
        } else {
          r7 = HEAP32[r7 >> 2];
          r8 = r10;
        }
      }
    }
  } while (0);
  if ((r5 | 0) >= (HEAP32[r3 >> 2] | 0)) {
    return 0;
  }
  HEAP32[r3 >> 2] = r5;
  return 0;
}
function __gcry_module_lookup(r1, r2, r3) {
  var r4, r5, r6;
  r4 = 0;
  if ((r1 | 0) == 0) {
    r5 = 0;
    return r5;
  } else {
    r6 = r1;
  }
  while (1) {
    if ((FUNCTION_TABLE[r3](HEAP32[r6 + 8 >> 2], r2) | 0) != 0) {
      break;
    }
    r1 = HEAP32[r6 >> 2];
    if ((r1 | 0) == 0) {
      r5 = 0;
      r4 = 2412;
      break;
    } else {
      r6 = r1;
    }
  }
  if (r4 == 2412) {
    return r5;
  }
  r4 = r6 + 20 | 0;
  HEAP32[r4 >> 2] = HEAP32[r4 >> 2] + 1 | 0;
  r5 = r6;
  return r5;
}
function __gcry_module_release(r1) {
  var r2, r3;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = r1 + 20 | 0;
  r3 = HEAP32[r2 >> 2] - 1 | 0;
  HEAP32[r2 >> 2] = r3;
  if ((r3 | 0) != 0) {
    return;
  }
  __gcry_module_drop(r1);
  return;
}
function __gcry_module_drop(r1) {
  var r2, r3, r4, r5;
  r2 = r1 | 0;
  r3 = r1 + 4 | 0;
  HEAP32[HEAP32[r3 >> 2] >> 2] = HEAP32[r2 >> 2];
  r4 = HEAP32[r2 >> 2];
  if ((r4 | 0) == 0) {
    r5 = r1;
    __gcry_free(r5);
    return;
  }
  HEAP32[r4 + 4 >> 2] = HEAP32[r3 >> 2];
  r5 = r1;
  __gcry_free(r5);
  return;
}
function __gcry_secmem_set_flags(r1) {
  var r2, r3, r4;
  __gcry_ath_mutex_lock(416920);
  r2 = HEAP32[102889];
  HEAP32[110235] = r1 & 1;
  r3 = r1 & 2;
  HEAP32[102889] = r3;
  if (!((r3 | 0) == 0 & (r2 | 0) != 0 & HEAP8[412912])) {
    r4 = __gcry_ath_mutex_unlock(416920);
    return;
  }
  HEAP8[412912] = 0;
  _print_warn();
  r4 = __gcry_ath_mutex_unlock(416920);
  return;
}
function _print_warn() {
  var r1;
  r1 = STACKTOP;
  if ((HEAP32[110235] | 0) != 0) {
    STACKTOP = r1;
    return;
  }
  __gcry_log_info(__gcry_gettext(490952), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r1;
  return;
}
function __gcry_secmem_get_flags() {
  var r1;
  __gcry_ath_mutex_lock(416920);
  r1 = ((HEAP32[102889] | 0) != 0 ? 2 : 0) | (HEAP32[110235] | 0) != 0 & 1 | (HEAP8[440880] ? 4 : 0);
  __gcry_ath_mutex_unlock(416920);
  return r1;
}
function __gcry_secmem_init(r1) {
  __gcry_ath_mutex_lock(416920);
  _secmem_init(r1);
  __gcry_ath_mutex_unlock(416920);
  return;
}
function __gcry_secmem_malloc(r1) {
  var r2;
  __gcry_ath_mutex_lock(416920);
  r2 = __gcry_secmem_malloc_internal(r1);
  __gcry_ath_mutex_unlock(416920);
  return r2;
}
function __gcry_secmem_malloc_internal(r1) {
  var r2, r3, r4, r5;
  r2 = STACKTOP;
  do {
    if ((HEAP32[110085] | 0) == 0) {
      _secmem_init(32768);
      if ((HEAP32[110085] | 0) != 0) {
        break;
      }
      __gcry_log_info(__gcry_gettext(489624), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      _gpg_err_set_errno(12);
      r3 = 0;
      STACKTOP = r2;
      return r3;
    }
  } while (0);
  do {
    if (HEAP8[440880]) {
      if ((__gcry_fips_mode() | 0) == 0) {
        break;
      }
      __gcry_log_info(__gcry_gettext(481204), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      _gpg_err_set_errno(12);
      r3 = 0;
      STACKTOP = r2;
      return r3;
    }
  } while (0);
  if (!((HEAP32[102889] | 0) != 0 | HEAP8[412912] ^ 1)) {
    HEAP8[412912] = 0;
    _print_warn();
  }
  r4 = r1 + 31 & -32;
  r1 = _mb_get_new(HEAP32[110092], r4);
  if ((r1 | 0) == 0) {
    r5 = 0;
  } else {
    _stats_update(r4, 0);
    r5 = r1 + 8 | 0;
  }
  r3 = r5 | 0;
  STACKTOP = r2;
  return r3;
}
function __gcry_secmem_free(r1) {
  __gcry_ath_mutex_lock(416920);
  __gcry_secmem_free_internal(r1);
  __gcry_ath_mutex_unlock(416920);
  return;
}
function __gcry_secmem_free_internal(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = r1 - 8 | 0;
  r3 = r2;
  r4 = HEAP32[r2 >> 2];
  L3151 : do {
    if ((r4 | 0) != 0) {
      r2 = r1;
      r5 = r4;
      while (1) {
        HEAP8[r2] = -1;
        r6 = r5 - 1 | 0;
        if ((r6 | 0) == 0) {
          break;
        } else {
          r2 = r2 + 1 | 0;
          r5 = r6;
        }
      }
      if ((r4 | 0) == 0) {
        break;
      } else {
        r7 = r1;
        r8 = r4;
      }
      while (1) {
        HEAP8[r7] = -86;
        r5 = r8 - 1 | 0;
        if ((r5 | 0) == 0) {
          break;
        } else {
          r7 = r7 + 1 | 0;
          r8 = r5;
        }
      }
      if ((r4 | 0) == 0) {
        break;
      } else {
        r9 = r1;
        r10 = r4;
      }
      while (1) {
        HEAP8[r9] = 85;
        r5 = r10 - 1 | 0;
        if ((r5 | 0) == 0) {
          break;
        } else {
          r9 = r9 + 1 | 0;
          r10 = r5;
        }
      }
      if ((r4 | 0) == 0) {
        break;
      } else {
        r11 = r1;
        r12 = r4;
      }
      while (1) {
        HEAP8[r11] = 0;
        r5 = r12 - 1 | 0;
        if ((r5 | 0) == 0) {
          break L3151;
        } else {
          r11 = r11 + 1 | 0;
          r12 = r5;
        }
      }
    }
  } while (0);
  _stats_update(0, r4);
  r4 = r1 - 4 | 0;
  HEAP32[r4 >> 2] = HEAP32[r4 >> 2] & -2;
  _mb_merge(r3);
  return;
}
function __gcry_secmem_realloc(r1, r2) {
  var r3, r4, r5;
  __gcry_ath_mutex_lock(416920);
  r3 = HEAP32[r1 - 8 >> 2];
  do {
    if (r3 >>> 0 > r2 >>> 0) {
      r4 = r1;
    } else {
      r5 = __gcry_secmem_malloc_internal(r2);
      if ((r5 | 0) == 0) {
        r4 = 0;
        break;
      }
      _memcpy(r5, r1, r3);
      _memset(r5 + r3 | 0, 0, r2 - r3 | 0);
      __gcry_secmem_free_internal(r1);
      r4 = r5;
    }
  } while (0);
  __gcry_ath_mutex_unlock(416920);
  return r4;
}
function __gcry_private_is_secure(r1) {
  var r2;
  if ((HEAP32[110085] | 0) == 0) {
    r2 = 0;
  } else {
    r2 = (_ptr_into_pool_p(r1) | 0) != 0;
  }
  return r2 & 1;
}
function __gcry_secmem_term() {
  var r1, r2, r3, r4;
  if ((HEAP32[110085] | 0) == 0) {
    return;
  }
  r1 = HEAP32[110083];
  L3178 : do {
    if ((r1 | 0) != 0) {
      r2 = HEAP32[110092];
      r3 = r1;
      while (1) {
        HEAP8[r2] = -1;
        r4 = r3 - 1 | 0;
        if ((r4 | 0) == 0) {
          break;
        } else {
          r2 = r2 + 1 | 0;
          r3 = r4;
        }
      }
      r3 = HEAP32[110083];
      if ((r3 | 0) == 0) {
        break;
      }
      r2 = HEAP32[110092];
      r4 = r3;
      while (1) {
        HEAP8[r2] = -86;
        r3 = r4 - 1 | 0;
        if ((r3 | 0) == 0) {
          break;
        } else {
          r2 = r2 + 1 | 0;
          r4 = r3;
        }
      }
      r4 = HEAP32[110083];
      if ((r4 | 0) == 0) {
        break;
      }
      r2 = HEAP32[110092];
      r3 = r4;
      while (1) {
        HEAP8[r2] = 85;
        r4 = r3 - 1 | 0;
        if ((r4 | 0) == 0) {
          break;
        } else {
          r2 = r2 + 1 | 0;
          r3 = r4;
        }
      }
      r3 = HEAP32[110083];
      if ((r3 | 0) == 0) {
        break;
      }
      r2 = HEAP32[110092];
      r4 = r3;
      while (1) {
        HEAP8[r2] = 0;
        r3 = r4 - 1 | 0;
        if ((r3 | 0) == 0) {
          break L3178;
        } else {
          r2 = r2 + 1 | 0;
          r4 = r3;
        }
      }
    }
  } while (0);
  if ((HEAP32[110087] | 0) != 0) {
    _munmap(HEAP32[110092], HEAP32[110083]);
  }
  HEAP32[110092] = 0;
  HEAP32[110085] = 0;
  HEAP32[110083] = 0;
  HEAP8[440880] = 0;
  return;
}
function __gcry_secmem_dump_stats() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  __gcry_ath_mutex_lock(416920);
  if ((HEAP32[110085] | 0) == 0) {
    r2 = __gcry_ath_mutex_unlock(416920);
    STACKTOP = r1;
    return;
  }
  r3 = HEAP32[110083];
  r4 = HEAP32[114599];
  __gcry_log_info(486864, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[114600], HEAP32[tempInt + 4 >> 2] = r3, HEAP32[tempInt + 8 >> 2] = r4, tempInt));
  r2 = __gcry_ath_mutex_unlock(416920);
  STACKTOP = r1;
  return;
}
function _mb_merge(r1) {
  var r2, r3, r4, r5;
  r2 = _mb_get_prev(r1);
  r3 = _mb_get_next(r1);
  do {
    if ((r2 | 0) == 0) {
      r4 = r1;
    } else {
      if ((HEAP32[r2 + 4 >> 2] & 1 | 0) != 0) {
        r4 = r1;
        break;
      }
      r5 = r2 | 0;
      HEAP32[r5 >> 2] = HEAP32[r1 >> 2] + HEAP32[r5 >> 2] + 8 | 0;
      r4 = r2;
    }
  } while (0);
  if ((r3 | 0) == 0) {
    return;
  }
  if ((HEAP32[r3 + 4 >> 2] & 1 | 0) != 0) {
    return;
  }
  r2 = r4 | 0;
  HEAP32[r2 >> 2] = HEAP32[r3 >> 2] + HEAP32[r2 >> 2] + 8 | 0;
  return;
}
function _mb_get_prev(r1) {
  var r2, r3, r4;
  r2 = HEAP32[110092];
  if ((r2 | 0) == (r1 | 0)) {
    r3 = 0;
    return r3;
  } else {
    r4 = r2;
  }
  while (1) {
    r2 = _mb_get_next(r4);
    if ((r2 | 0) == (r1 | 0)) {
      r3 = r4;
      break;
    } else {
      r4 = r2;
    }
  }
  return r3;
}
function _mb_get_next(r1) {
  var r2;
  r2 = r1 + HEAP32[r1 >> 2] + 8 | 0;
  return (_ptr_into_pool_p(r2) | 0) == 0 ? 0 : r2;
}
function _mb_get_new(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r3 = r1;
  L3224 : do {
    if ((_ptr_into_pool_p(r3) | 0) == 0) {
      r4 = r1;
      r5 = r3;
    } else {
      r6 = r1;
      r7 = r3;
      while (1) {
        r8 = r6 + 4 | 0;
        r9 = HEAP32[r8 >> 2];
        if ((r9 & 1 | 0) == 0) {
          r10 = (r6 | 0) >> 2;
          if (HEAP32[r10] >>> 0 >= r2 >>> 0) {
            break;
          }
        }
        r11 = _mb_get_next(r6);
        r12 = r11;
        if ((_ptr_into_pool_p(r12) | 0) == 0) {
          r4 = r11;
          r5 = r12;
          break L3224;
        } else {
          r6 = r11;
          r7 = r12;
        }
      }
      HEAP32[r8 >> 2] = r9 | 1;
      r12 = HEAP32[r10] - r2 | 0;
      if (r12 >>> 0 <= 8) {
        r4 = r6;
        r5 = r7;
        break;
      }
      r11 = r6 + 8 | 0;
      r13 = r11 + r2 | 0;
      HEAP32[r13 >> 2] = r12 - 8 | 0;
      HEAP32[r2 + (r11 + 4) >> 2] = 0;
      HEAP32[r10] = r2;
      _mb_merge(r13);
      r4 = r6;
      r5 = r7;
    }
  } while (0);
  if ((_ptr_into_pool_p(r5) | 0) != 0) {
    r14 = r4;
    return r14;
  }
  _gpg_err_set_errno(12);
  r14 = 0;
  return r14;
}
function __gcry_sexp_dump(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r2 = 0;
  r3 = STACKTOP;
  if ((r1 | 0) == 0) {
    __gcry_log_printf(486504, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = r3;
    return;
  }
  r4 = r1 | 0;
  r1 = HEAP8[r4];
  if (r1 << 24 >> 24 == 0) {
    STACKTOP = r3;
    return;
  } else {
    r5 = 0;
    r6 = r4;
    r7 = r1;
  }
  L3244 : while (1) {
    r1 = r5 << 1;
    r4 = r5 << 1;
    r8 = r6;
    r9 = r7;
    while (1) {
      r10 = r9 & 255;
      r11 = r8 + 1 | 0;
      if ((r10 | 0) == 4) {
        r2 = 2531;
        break;
      } else if ((r10 | 0) == 3) {
        r2 = 2530;
        break;
      } else if ((r10 | 0) == 1) {
        r12 = r11;
        r13 = (tempInt = HEAPU8[r12] | HEAPU8[r12 + 1 | 0] << 8, tempInt << 16 >> 16);
        __gcry_log_printf(474244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = 481200, tempInt));
        r12 = r13 & 65535;
        _dump_string(r8 + 3 | 0, r12);
        __gcry_log_printf(472372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        r14 = r12 + (r8 + 3) | 0;
      } else {
        __gcry_log_printf(470872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = 481200, HEAP32[tempInt + 8 >> 2] = r10, tempInt));
        r14 = r11;
      }
      r10 = HEAP8[r14];
      if (r10 << 24 >> 24 == 0) {
        r2 = 2540;
        break L3244;
      } else {
        r8 = r14;
        r9 = r10;
      }
    }
    if (r2 == 2531) {
      r2 = 0;
      r9 = (r5 | 0) == 0 ? 0 : r5 - 1 | 0;
      __gcry_log_printf(477096, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r9 << 1, HEAP32[tempInt + 4 >> 2] = 481200, tempInt));
      r15 = r9;
    } else if (r2 == 2530) {
      r2 = 0;
      __gcry_log_printf(489556, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r5 << 1, HEAP32[tempInt + 4 >> 2] = 481200, tempInt));
      r15 = r5 + 1 | 0;
    }
    r9 = HEAP8[r11];
    if (r9 << 24 >> 24 == 0) {
      r2 = 2539;
      break;
    } else {
      r5 = r15;
      r6 = r11;
      r7 = r9;
    }
  }
  if (r2 == 2540) {
    STACKTOP = r3;
    return;
  } else if (r2 == 2539) {
    STACKTOP = r3;
    return;
  }
}
function _secmem_init(r1) {
  var r2, r3;
  r2 = STACKTOP;
  if ((r1 | 0) != 0) {
    r3 = r1 >>> 0 < 16384 ? 16384 : r1;
    if ((HEAP32[110085] | 0) == 0) {
      _init_pool(r3);
      _lock_pool(HEAP32[110092], r3);
      STACKTOP = r2;
      return;
    } else {
      __gcry_log_error(474256, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      STACKTOP = r2;
      return;
    }
  }
  HEAP8[457940] = 1;
  r3 = _getgid();
  if ((r3 | 0) == (_getgid() | 0)) {
    STACKTOP = r2;
    return;
  }
  do {
    if ((_setgid(r3) | 0) == 0) {
      if ((_getgid() | 0) != (_getgid() | 0)) {
        break;
      }
      if ((_setgid(0) | 0) == 0) {
        break;
      }
      STACKTOP = r2;
      return;
    }
  } while (0);
  __gcry_log_fatal(477108, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
function _init_pool(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  r2 = STACKTOP;
  HEAP32[110083] = r1;
  if (HEAP8[457940]) {
    __gcry_log_bug(469480, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r1 = _sysconf(8);
  r3 = (r1 | 0) > 0 ? r1 : 4096;
  r1 = HEAP32[110083] - 1 + r3 & -r3;
  HEAP32[110083] = r1;
  r3 = _mmap(0, r1, 3, 4098, -1, 0);
  HEAP32[110092] = r3;
  if ((r3 | 0) == -1) {
    r3 = HEAP32[110083];
    r1 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_info(467836, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r1, tempInt));
  } else {
    HEAP32[110087] = 1;
    HEAP32[110085] = 1;
  }
  if ((HEAP32[110085] | 0) != 0) {
    r4 = HEAP32[110092];
    r5 = HEAP32[110083];
    r6 = r4;
    HEAP32[r6 >> 2] = r5;
    r7 = r4 + 4 | 0;
    r8 = r7;
    HEAP32[r8 >> 2] = 0;
    STACKTOP = r2;
    return;
  }
  r1 = _malloc(HEAP32[110083]);
  HEAP32[110092] = r1;
  if ((r1 | 0) == 0) {
    __gcry_log_fatal(465740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[110083], tempInt));
  }
  HEAP32[110085] = 1;
  r4 = HEAP32[110092];
  r5 = HEAP32[110083];
  r6 = r4;
  HEAP32[r6 >> 2] = r5;
  r7 = r4 + 4 | 0;
  r8 = r7;
  HEAP32[r8 >> 2] = 0;
  STACKTOP = r2;
  return;
}
function _lock_pool(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  r4 = STACKTOP;
  r5 = _getgid();
  r6 = (r5 | 0) != 0;
  do {
    if (r6) {
      HEAP32[___errno_location() >> 2] = 1;
      r7 = HEAP32[___errno_location() >> 2];
      r3 = 2573;
      break;
    } else {
      r8 = _mlock(r1, r2);
      if ((r8 | 0) == 0) {
        STACKTOP = r4;
        return;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) == 0) {
        r9 = r8;
      } else {
        r9 = HEAP32[___errno_location() >> 2];
      }
      if (r6) {
        r7 = r9;
        r3 = 2573;
        break;
      } else {
        r10 = r9;
        break;
      }
    }
  } while (0);
  L3301 : do {
    if (r3 == 2573) {
      if ((_getgid() | 0) != 0) {
        r10 = r7;
        break;
      }
      do {
        if ((_setgid(r5) | 0) == 0) {
          if ((_getgid() | 0) != (_getgid() | 0)) {
            break;
          }
          if ((_setgid(0) | 0) != 0) {
            r10 = r7;
            break L3301;
          }
        }
      } while (0);
      r9 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_fatal(472376, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
    }
  } while (0);
  if ((r10 | 0) == 0) {
    STACKTOP = r4;
    return;
  }
  do {
    if ((HEAP32[___errno_location() >> 2] | 0) != 1) {
      if ((HEAP32[___errno_location() >> 2] | 0) == 11) {
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) == 88) {
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) == 12) {
        break;
      }
      r7 = _strerror(r10);
      __gcry_log_error(470896, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
    }
  } while (0);
  HEAP8[412912] = 1;
  HEAP8[440880] = 1;
  STACKTOP = r4;
  return;
}
function __gcry_sexp_length(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r2 = 0;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = 0;
  r5 = 0;
  r6 = r1 | 0;
  L3323 : while (1) {
    r1 = r4;
    r7 = r6;
    L3325 : while (1) {
      r8 = r7;
      while (1) {
        r9 = HEAP8[r8];
        if (r9 << 24 >> 24 == 0) {
          r3 = r5;
          break L3323;
        }
        r10 = r8 + 1 | 0;
        if (r9 << 24 >> 24 == 1) {
          r2 = 2595;
          break L3325;
        } else if (r9 << 24 >> 24 == 3) {
          r2 = 2596;
          break L3325;
        } else if (r9 << 24 >> 24 == 4) {
          break;
        } else {
          r8 = r10;
        }
      }
      r1 = r1 - 1 | 0;
      r7 = r10;
    }
    if (r2 == 2595) {
      r2 = 0;
      r7 = r10;
      r11 = r1;
      r12 = (r1 | 0) == 1 & 1;
      r13 = r8 + ((tempInt = HEAPU8[r7] | HEAPU8[r7 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
    } else if (r2 == 2596) {
      r2 = 0;
      r11 = r1 + 1 | 0;
      r12 = (r1 | 0) == 1 & 1;
      r13 = r10;
    }
    r4 = r11;
    r5 = r12 + r5 | 0;
    r6 = r13;
  }
  return r3;
}
function _sexp_nth_data(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22;
  HEAP32[r3 >> 2] = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = r1 | 0;
  do {
    if (HEAP8[r5] << 24 >> 24 == 3) {
      r6 = r1 + 1 | 0;
      r7 = HEAP8[r6];
      r8 = r7 << 24 >> 24 == 1;
      L3347 : do {
        if ((r2 | 0) > 0) {
          r9 = r2;
          r10 = r6;
          r11 = 0;
          r12 = r7;
          r13 = r8;
          L3348 : while (1) {
            do {
              if (r13) {
                r14 = r10 + 1 | 0;
                r15 = r11;
                r16 = r10 + ((tempInt = HEAPU8[r14] | HEAPU8[r14 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 2 | 0;
                r17 = (((r11 | 0) == 0) << 31 >> 31) + r9 | 0;
              } else {
                if (r12 << 24 >> 24 == 4) {
                  r14 = r11 - 1 | 0;
                  r15 = r14;
                  r16 = r10;
                  r17 = (((r14 | 0) == 0) << 31 >> 31) + r9 | 0;
                  break;
                } else if (r12 << 24 >> 24 == 0) {
                  r4 = 0;
                  break L3348;
                } else if (r12 << 24 >> 24 == 3) {
                  r15 = r11 + 1 | 0;
                  r16 = r10;
                  r17 = r9;
                  break;
                } else {
                  r15 = r11;
                  r16 = r10;
                  r17 = r9;
                  break;
                }
              }
            } while (0);
            r14 = r16 + 1 | 0;
            r18 = HEAP8[r14];
            r19 = r18 << 24 >> 24 == 1;
            if ((r17 | 0) > 0) {
              r9 = r17;
              r10 = r14;
              r11 = r15;
              r12 = r18;
              r13 = r19;
            } else {
              r20 = r14;
              r21 = r19;
              break L3347;
            }
          }
          return r4;
        } else {
          r20 = r6;
          r21 = r8;
        }
      } while (0);
      if (r21) {
        r22 = r20;
        break;
      } else {
        r4 = 0;
      }
      return r4;
    } else {
      if ((r2 | 0) != 0) {
        r4 = 0;
        return r4;
      }
      if (HEAP8[r5] << 24 >> 24 == 1) {
        r22 = r5;
        break;
      } else {
        r4 = 0;
      }
      return r4;
    }
  } while (0);
  r5 = r22 + 1 | 0;
  HEAP32[r3 >> 2] = (tempInt = HEAPU8[r5] | HEAPU8[r5 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535;
  r4 = r22 + 3 | 0;
  return r4;
}
function _dump_string(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  r4 = STACKTOP;
  if ((r2 | 0) == 0) {
    STACKTOP = r4;
    return;
  } else {
    r5 = r2;
    r6 = r1;
  }
  while (1) {
    r1 = HEAP8[r6];
    r2 = r1 & 255;
    do {
      if ((r2 & 128 | 0) == 0) {
        r7 = (_iscntrl(r2) | 0) == 0;
        r8 = HEAP8[r6];
        if (!r7) {
          r9 = r8;
          r3 = 2626;
          break;
        }
        r7 = r8 & 255;
        if (r8 << 24 >> 24 == 34) {
          r10 = r7;
          r3 = 2633;
          break;
        }
        __gcry_log_printf(480404, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
        break;
      } else {
        r9 = r1;
        r3 = 2626;
      }
    } while (0);
    do {
      if (r3 == 2626) {
        r3 = 0;
        r1 = r9 & 255;
        if (r9 << 24 >> 24 == 11) {
          __gcry_log_printf(482740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if (r9 << 24 >> 24 == 13) {
          __gcry_log_printf(484340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if (r9 << 24 >> 24 == 12) {
          __gcry_log_printf(483392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if (r9 << 24 >> 24 == 8) {
          __gcry_log_printf(482068, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if (r9 << 24 >> 24 == 10) {
          __gcry_log_printf(485036, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if (r9 << 24 >> 24 == 0) {
          __gcry_log_printf(481572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else {
          r10 = r1;
          r3 = 2633;
          break;
        }
      }
    } while (0);
    if (r3 == 2633) {
      r3 = 0;
      __gcry_log_printf(490944, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r10, tempInt));
    }
    r1 = r5 - 1 | 0;
    if ((r1 | 0) == 0) {
      break;
    } else {
      r5 = r1;
      r6 = r6 + 1 | 0;
    }
  }
  STACKTOP = r4;
  return;
}
function __gcry_sexp_create(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6;
  r8 = r6 + 4;
  if ((r1 | 0) == 0) {
    r9 = _gcry_error1456(45);
    STACKTOP = r6;
    return r9;
  }
  HEAP32[r1 >> 2] = 0;
  if (r4 >>> 0 > 1 | (r2 | 0) == 0) {
    r9 = _gcry_error1456(45);
    STACKTOP = r6;
    return r9;
  }
  r10 = (r3 | 0) != 0;
  r11 = (r4 | 0) == 0;
  do {
    if (r11 & (r10 ^ 1)) {
      r4 = __gcry_sexp_canon_len(r2, 0, 0, r7);
      if ((r4 | 0) != 0) {
        r12 = r4;
        break;
      }
      r9 = HEAP32[r7 >> 2];
      STACKTOP = r6;
      return r9;
    } else {
      if (r10 | r11) {
        r12 = r3;
        break;
      }
      r12 = _strlen(r2);
    }
  } while (0);
  r3 = _sexp_sscan(r8, 0, r2, r12, 0, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  HEAP32[r7 >> 2] = r3;
  if ((r3 | 0) != 0) {
    r9 = r3;
    STACKTOP = r6;
    return r9;
  }
  HEAP32[r1 >> 2] = HEAP32[r8 >> 2];
  if ((r5 | 0) != 0) {
    FUNCTION_TABLE[r5](r2);
  }
  r9 = _gcry_error1456(0);
  STACKTOP = r6;
  return r9;
}
function _gcry_error1456(r1) {
  return _gcry_err_make1499(r1);
}
function __gcry_sexp_canon_len(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = ((r3 | 0) == 0 ? r6 : r3) >> 2;
  r3 = ((r4 | 0) == 0 ? r6 + 4 : r4) >> 2;
  HEAP32[r3] = _gcry_error1456(0);
  HEAP32[r7] = 0;
  L3409 : do {
    if ((r1 | 0) == 0) {
      r8 = 0;
    } else {
      if (HEAP8[r1] << 24 >> 24 != 40) {
        HEAP32[r3] = _gcry_error1456(204);
        r8 = 0;
        break;
      }
      r4 = (r2 | 0) != 0;
      r9 = r4 ^ 1;
      L3414 : do {
        if ((r2 | 0) != 0 | r9) {
          r10 = r1;
          r11 = 0;
          r12 = 0;
          r13 = 0;
          r14 = 0;
          L3415 : while (1) {
            r15 = HEAP8[r10];
            r16 = r15 & 255;
            do {
              if ((r12 | 0) == 0) {
                if (r15 << 24 >> 24 == 41) {
                  if ((r14 | 0) == 0) {
                    r5 = 2678;
                    break L3415;
                  }
                  if ((r11 | 0) != 0) {
                    r5 = 2680;
                    break L3415;
                  }
                  r17 = r14 - 1 | 0;
                  if ((r17 | 0) == 0) {
                    r5 = 2682;
                    break L3415;
                  } else {
                    r18 = r17;
                    r19 = r13;
                    r20 = r12;
                    r21 = 0;
                    r22 = r10;
                    break;
                  }
                } else if (r15 << 24 >> 24 == 40) {
                  if ((r11 | 0) != 0) {
                    r5 = 2675;
                    break L3415;
                  }
                  r18 = r14 + 1 | 0;
                  r19 = r13;
                  r20 = r12;
                  r21 = 0;
                  r22 = r10;
                  break;
                } else if (r15 << 24 >> 24 == 93) {
                  if ((r11 | 0) == 0) {
                    r5 = 2686;
                    break L3415;
                  } else {
                    r18 = r14;
                    r19 = r13;
                    r20 = r12;
                    r21 = 0;
                    r22 = r10;
                    break;
                  }
                } else if (r15 << 24 >> 24 == 91) {
                  if ((r11 | 0) == 0) {
                    r18 = r14;
                    r19 = r13;
                    r20 = 0;
                    r21 = r10;
                    r22 = r10;
                    break;
                  } else {
                    r5 = 2684;
                    break L3415;
                  }
                } else {
                  if ((r15 - 48 & 255) >= 10) {
                    r5 = 2691;
                    break L3415;
                  }
                  if (r15 << 24 >> 24 == 48) {
                    r5 = 2689;
                    break L3415;
                  }
                  r18 = r14;
                  r19 = r13;
                  r20 = r16 - 48 | 0;
                  r21 = r11;
                  r22 = r10;
                  break;
                }
              } else {
                if (r15 << 24 >> 24 != 58) {
                  if ((r15 - 48 & 255) >= 10) {
                    r5 = 2672;
                    break L3415;
                  }
                  r18 = r14;
                  r19 = r13;
                  r20 = (r12 * 10 & -1) - 48 + r16 | 0;
                  r21 = r11;
                  r22 = r10;
                  break;
                }
                if (r4) {
                  if ((r13 + r12 | 0) >>> 0 >= r2 >>> 0) {
                    r5 = 2668;
                    break L3415;
                  }
                }
                r18 = r14;
                r19 = r13 + r12 | 0;
                r20 = 0;
                r21 = r11;
                r22 = r10 + r12 | 0;
              }
            } while (0);
            r16 = r19 + 1 | 0;
            if (r16 >>> 0 < r2 >>> 0 | r9) {
              r10 = r22 + 1 | 0;
              r11 = r21;
              r12 = r20;
              r13 = r16;
              r14 = r18;
            } else {
              r23 = r16;
              break L3414;
            }
          }
          if (r5 == 2668) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(202);
            r8 = 0;
            break L3409;
          } else if (r5 == 2675) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(209);
            r8 = 0;
            break L3409;
          } else if (r5 == 2686) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(209);
            r8 = 0;
            break L3409;
          } else if (r5 == 2678) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(203);
            r8 = 0;
            break L3409;
          } else if (r5 == 2691) {
            if (r15 << 24 >> 24 == 38 | r15 << 24 >> 24 == 92) {
              HEAP32[r7] = r13;
              HEAP32[r3] = _gcry_error1456(210);
              r8 = 0;
              break L3409;
            } else {
              HEAP32[r7] = r13;
              HEAP32[r3] = _gcry_error1456(205);
              r8 = 0;
              break L3409;
            }
          } else if (r5 == 2682) {
            r8 = r13 + 1 | 0;
            break L3409;
          } else if (r5 == 2672) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(201);
            r8 = 0;
            break L3409;
          } else if (r5 == 2684) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(208);
            r8 = 0;
            break L3409;
          } else if (r5 == 2689) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(207);
            r8 = 0;
            break L3409;
          } else if (r5 == 2680) {
            HEAP32[r7] = r13;
            HEAP32[r3] = _gcry_error1456(209);
            r8 = 0;
            break L3409;
          }
        } else {
          r23 = 0;
        }
      } while (0);
      HEAP32[r7] = r23;
      HEAP32[r3] = _gcry_error1456(202);
      r8 = 0;
    }
  } while (0);
  STACKTOP = r6;
  return r8;
}
function _sexp_sscan(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8;
  HEAP32[r9 >> 2] = r7;
  r7 = _vsexp_sscan(r1, r2, r3, r4, r5, r6, HEAP32[r9 >> 2]);
  STACKTOP = r8;
  return r7;
}
function __gcry_sexp_new(r1, r2, r3, r4) {
  return __gcry_sexp_create(r1, r2, r3, r4, 0);
}
function __gcry_sexp_release(r1) {
  var r2, r3, r4, r5, r6, r7, r8;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = r1 | 0;
  L3461 : do {
    if ((__gcry_is_secure(r2) | 0) != 0) {
      r3 = HEAP8[r2];
      if (r3 << 24 >> 24 == 0) {
        break;
      } else {
        r4 = r2;
        r5 = r3;
      }
      while (1) {
        r3 = r4 + 1 | 0;
        if (r5 << 24 >> 24 == 1) {
          r6 = r3;
          r7 = r4 + ((tempInt = HEAPU8[r6] | HEAPU8[r6 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
        } else {
          r7 = r3;
        }
        r3 = HEAP8[r7];
        if (r3 << 24 >> 24 == 0) {
          break;
        } else {
          r4 = r7;
          r5 = r3;
        }
      }
      if ((r7 | 0) == (r1 | 0)) {
        break;
      }
      r3 = r2;
      r6 = r7 - r1 | 0;
      while (1) {
        HEAP8[r3] = 0;
        r8 = r6 - 1 | 0;
        if ((r8 | 0) == 0) {
          break L3461;
        } else {
          r3 = r3 + 1 | 0;
          r6 = r8;
        }
      }
    }
  } while (0);
  __gcry_free(r2);
  return;
}
function _normalize(r1) {
  var r2, r3;
  do {
    if ((r1 | 0) == 0) {
      r2 = 0;
    } else {
      r3 = HEAP8[r1 | 0];
      if (r3 << 24 >> 24 == 0) {
        __gcry_sexp_release(r1);
        r2 = 0;
        break;
      } else if (r3 << 24 >> 24 != 3) {
        r2 = r1;
        break;
      }
      if (HEAP8[r1 + 1 | 0] << 24 >> 24 != 4) {
        r2 = r1;
        break;
      }
      __gcry_sexp_release(r1);
      r2 = 0;
    }
  } while (0);
  return r2;
}
function __gcry_sexp_car(r1) {
  return __gcry_sexp_nth(r1, 0);
}
function __gcry_sexp_nth_data(r1, r2, r3) {
  return _sexp_nth_data(r1, r2, r3);
}
function __gcry_sexp_nth_string(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = _sexp_nth_data(r1, r2, r4);
  do {
    if ((r6 | 0) == 0) {
      r7 = 0;
    } else {
      r4 = HEAP32[r5];
      if ((r4 | 0) == 0) {
        r7 = 0;
        break;
      }
      r2 = r4 + 1 | 0;
      if ((r2 | 0) == 0) {
        r7 = 0;
        break;
      }
      r4 = __gcry_malloc(r2);
      if ((r4 | 0) == 0) {
        r7 = 0;
        break;
      }
      _memcpy(r4, r6, HEAP32[r5]);
      HEAP8[r4 + HEAP32[r5] | 0] = 0;
      r7 = r4;
    }
  } while (0);
  STACKTOP = r3;
  return r7;
}
function __gcry_sexp_nth_mpi(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4;
  r6 = r4 + 4;
  r7 = _sexp_nth_data(r1, r2, r5);
  if ((r7 | 0) == 0) {
    STACKTOP = r4;
    return 0;
  } else {
    r2 = (__gcry_mpi_scan(r6, (r3 | 0) == 0 ? 1 : r3, r7, HEAP32[r5 >> 2], 0) | 0) == 0;
    STACKTOP = r4;
    return r2 ? HEAP32[r6 >> 2] : 0;
  }
}
function __gcry_sexp_cons(r1, r2) {
  __gcry_bug(469472, 318, 495492);
  return 0;
}
function __gcry_sexp_alist(r1) {
  __gcry_bug(469472, 334, 495528);
  return 0;
}
function __gcry_sexp_vlist(r1, r2) {
  __gcry_bug(469472, 347, 495392);
  return 0;
}
function __gcry_sexp_append(r1, r2) {
  __gcry_bug(469472, 363, 495508);
  return 0;
}
function __gcry_sexp_prepend(r1, r2) {
  __gcry_bug(469472, 374, 495432);
  return 0;
}
function __gcry_sexp_find_token(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = 0;
  if ((r1 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  if ((r3 | 0) == 0) {
    r6 = _strlen(r2);
  } else {
    r6 = r3;
  }
  r3 = r1 | 0;
  L3507 : while (1) {
    r1 = HEAP8[r3];
    do {
      if (r1 << 24 >> 24 == 0) {
        r5 = 0;
        r4 = 2758;
        break L3507;
      } else if (r1 << 24 >> 24 == 3) {
        if (HEAP8[r3 + 1 | 0] << 24 >> 24 != 1) {
          r7 = HEAP8[r3];
          break;
        }
        r8 = r3 + 2 | 0;
        r9 = (tempInt = HEAPU8[r8] | HEAPU8[r8 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535;
        if ((r9 | 0) == (r6 | 0)) {
          if ((_memcmp(r3 + 4 | 0, r2, r6) | 0) == 0) {
            break L3507;
          }
        }
        r3 = r9 + (r3 + 4) | 0;
        continue L3507;
      } else {
        r7 = r1;
      }
    } while (0);
    r1 = r3 + 1 | 0;
    if (r7 << 24 >> 24 != 1) {
      r3 = r1;
      continue;
    }
    r8 = r1;
    r3 = r3 + ((tempInt = HEAPU8[r8] | HEAPU8[r8 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
  }
  if (r4 == 2758) {
    return r5;
  }
  r7 = r9 + (r3 + 4) | 0;
  r9 = 1;
  while (1) {
    r6 = HEAP8[r7];
    if (r6 << 24 >> 24 == 3) {
      r10 = r9 + 1 | 0;
      r11 = r7;
    } else if (r6 << 24 >> 24 == 1) {
      r2 = r7 + 1 | 0;
      r10 = r9;
      r11 = r7 + ((tempInt = HEAPU8[r2] | HEAPU8[r2 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 2 | 0;
    } else if (r6 << 24 >> 24 == 4) {
      r10 = r9 - 1 | 0;
      r11 = r7;
    } else if (r6 << 24 >> 24 == 0) {
      r4 = 2746;
      break;
    } else {
      r10 = r9;
      r11 = r7;
    }
    r12 = r11 + 1 | 0;
    if ((r10 | 0) == 0) {
      break;
    } else {
      r7 = r12;
      r9 = r10;
    }
  }
  if (r4 == 2746) {
    __gcry_bug(469472, 431, 495468);
  }
  r4 = r12 - r3 & 65535;
  r12 = __gcry_malloc(r4 + 1 | 0);
  if ((r12 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  _memcpy(r12, r3, r4);
  HEAP8[r12 + r4 | 0] = 0;
  r5 = _normalize(r12);
  return r5;
}
function __gcry_sexp_nth(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r3 = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = r1 | 0;
  if (HEAP8[r5] << 24 >> 24 == 3) {
    r6 = 0;
    r7 = r5;
    r8 = r2;
  } else {
    r4 = 0;
    return r4;
  }
  L3542 : while (1) {
    r2 = (r8 | 0) > 0;
    r5 = r6;
    r1 = r7;
    L3544 : while (1) {
      r9 = r1;
      while (1) {
        r10 = r9 + 1 | 0;
        r11 = HEAP8[r10];
        r12 = r11 << 24 >> 24 == 1;
        if (!r2) {
          break L3542;
        }
        if (r12) {
          r3 = 2765;
          break L3544;
        }
        if (r11 << 24 >> 24 == 0) {
          r4 = 0;
          r3 = 2784;
          break L3542;
        } else if (r11 << 24 >> 24 == 3) {
          break;
        } else if (r11 << 24 >> 24 == 4) {
          r3 = 2769;
          break L3544;
        } else {
          r9 = r10;
        }
      }
      r5 = r5 + 1 | 0;
      r1 = r10;
    }
    if (r3 == 2769) {
      r3 = 0;
      r1 = r5 - 1 | 0;
      r13 = r1;
      r14 = r10;
      r15 = r1;
    } else if (r3 == 2765) {
      r3 = 0;
      r1 = r9 + 2 | 0;
      r13 = r5;
      r14 = r9 + ((tempInt = HEAPU8[r1] | HEAPU8[r1 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
      r15 = r5;
    }
    r6 = r13;
    r7 = r14;
    r8 = (((r15 | 0) == 0) << 31 >> 31) + r8 | 0;
  }
  if (r3 == 2784) {
    return r4;
  }
  do {
    if (r12) {
      r8 = r10;
      r15 = (tempInt = HEAPU8[r8] | HEAPU8[r8 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535;
      r8 = __gcry_malloc(r15 + 2 | 0);
      if ((r8 | 0) == 0) {
        r4 = 0;
        return r4;
      } else {
        _memcpy(r8, r9 + 3 | 0, r15);
        HEAP8[r8 + r15 | 0] = 0;
        r16 = r8;
        break;
      }
    } else {
      if (r11 << 24 >> 24 == 3) {
        r17 = 1;
        r18 = r10;
      } else {
        r16 = 0;
        break;
      }
      while (1) {
        r8 = r18 + 1 | 0;
        r15 = HEAP8[r8];
        if (r15 << 24 >> 24 == 3) {
          r19 = r17 + 1 | 0;
          r20 = r8;
        } else if (r15 << 24 >> 24 == 0) {
          r3 = 2778;
          break;
        } else if (r15 << 24 >> 24 == 1) {
          r14 = r18 + 2 | 0;
          r19 = r17;
          r20 = r18 + ((tempInt = HEAPU8[r14] | HEAPU8[r14 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
        } else if (r15 << 24 >> 24 == 4) {
          r19 = r17 - 1 | 0;
          r20 = r8;
        } else {
          r19 = r17;
          r20 = r8;
        }
        if ((r19 | 0) == 0) {
          break;
        } else {
          r17 = r19;
          r18 = r20;
        }
      }
      if (r3 == 2778) {
        __gcry_bug(469472, 605, 495452);
      }
      r5 = r20 + 1 - r10 & 65535;
      r8 = __gcry_malloc(r5 + 1 | 0);
      if ((r8 | 0) == 0) {
        r4 = 0;
        return r4;
      } else {
        _memcpy(r8, r10, r5);
        HEAP8[r8 + r5 | 0] = 0;
        r16 = r8;
        break;
      }
    }
  } while (0);
  r4 = _normalize(r16);
  return r4;
}
function __gcry_sexp_cdr(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r2 = 0;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = r1 | 0;
  if (HEAP8[r4] << 24 >> 24 == 3) {
    r5 = 1;
    r6 = 0;
    r7 = r4;
  } else {
    r3 = 0;
    return r3;
  }
  L3585 : while (1) {
    r4 = ((r6 | 0) == 0) << 31 >> 31;
    r1 = r5;
    r8 = r7;
    L3587 : while (1) {
      r9 = (r1 | 0) > 0;
      r10 = r8;
      while (1) {
        r11 = r10 + 1 | 0;
        if (!r9) {
          r12 = 0;
          r13 = r11;
          break L3585;
        }
        r14 = HEAP8[r11];
        if (r14 << 24 >> 24 == 4) {
          r2 = 2798;
          break L3587;
        } else if (r14 << 24 >> 24 == 3) {
          r2 = 2797;
          break L3587;
        } else if (r14 << 24 >> 24 == 1) {
          break;
        } else if (r14 << 24 >> 24 == 0) {
          r3 = 0;
          r2 = 2812;
          break L3585;
        } else {
          r10 = r11;
        }
      }
      r9 = r10 + 2 | 0;
      r1 = r4 + r1 | 0;
      r8 = r10 + ((tempInt = HEAPU8[r9] | HEAPU8[r9 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
    }
    if (r2 == 2798) {
      r2 = 0;
      r8 = r6 - 1 | 0;
      r5 = (((r8 | 0) == 0) << 31 >> 31) + r1 | 0;
      r6 = r8;
      r7 = r11;
      continue;
    } else if (r2 == 2797) {
      r2 = 0;
      r5 = r1;
      r6 = r6 + 1 | 0;
      r7 = r11;
      continue;
    }
  }
  if (r2 == 2812) {
    return r3;
  }
  while (1) {
    r7 = HEAP8[r13];
    if (r7 << 24 >> 24 == 4) {
      r15 = r12 - 1 | 0;
      r16 = r13;
    } else if (r7 << 24 >> 24 == 0) {
      r3 = 0;
      r2 = 2811;
      break;
    } else if (r7 << 24 >> 24 == 1) {
      r6 = r13 + 1 | 0;
      r15 = r12;
      r16 = r13 + ((tempInt = HEAPU8[r6] | HEAPU8[r6 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 2 | 0;
    } else if (r7 << 24 >> 24 == 3) {
      r15 = r12 + 1 | 0;
      r16 = r13;
    } else {
      r15 = r12;
      r16 = r13;
    }
    r17 = r16 + 1 | 0;
    if ((r15 | 0) == 0) {
      break;
    } else {
      r12 = r15;
      r13 = r17;
    }
  }
  if (r2 == 2811) {
    return r3;
  }
  r2 = r17 - r11 & 65535;
  r17 = __gcry_malloc(r2 + 3 | 0);
  if ((r17 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  HEAP8[r17] = 3;
  _memcpy(r17 + 1 | 0, r11, r2);
  HEAP8[r2 + (r17 + 1) | 0] = 4;
  HEAP8[r2 + (r17 + 2) | 0] = 0;
  r3 = _normalize(r17);
  return r3;
}
function __gcry_sexp_cadr(r1) {
  var r2;
  r2 = __gcry_sexp_cdr(r1);
  r1 = __gcry_sexp_car(r2);
  __gcry_sexp_release(r2);
  return r1;
}
function __gcry_sexp_build(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r6 = r5;
  HEAP32[r6 >> 2] = r4;
  r4 = _vsexp_sscan(r1, r2, r3, _strlen(r3), 1, 0, HEAP32[r6 >> 2]);
  STACKTOP = r5;
  return r4;
}
function _vsexp_sscan(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116;
  r8 = r6 >> 2;
  r9 = 0;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  r11 = r10 + 4;
  r12 = r10 + 16, r13 = r12 >> 2;
  r14 = r10 + 20;
  r15 = r10 + 24;
  r16 = r10 + 60;
  r17 = r10 + 96;
  r18 = ((r2 | 0) == 0 ? r10 : r2) >> 2;
  r2 = r4 + 2 | 0;
  r19 = (r11 + 4 | 0) >> 2;
  HEAP32[r19] = r2;
  do {
    if ((r3 | 0) == 0 | (r4 | 0) == 0) {
      r9 = 2818;
    } else {
      if ((__gcry_is_secure(r3) | 0) == 0) {
        r9 = 2818;
        break;
      }
      HEAP32[r11 >> 2] = __gcry_malloc_secure(r2);
      break;
    }
  } while (0);
  if (r9 == 2818) {
    HEAP32[r11 >> 2] = __gcry_malloc(HEAP32[r19]);
  }
  r2 = (r11 | 0) >> 2;
  r20 = HEAP32[r2];
  L3621 : do {
    if ((r20 | 0) == 0) {
      r21 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      HEAP32[r18] = 0;
      r22 = r21;
      r9 = 2974;
      break;
    } else {
      r21 = (r11 + 8 | 0) >> 2;
      HEAP32[r21] = r20 | 0;
      L3623 : do {
        if ((r4 | 0) == 0) {
          r23 = 0;
          r24 = r3;
          r9 = 2970;
        } else {
          r25 = (r5 | 0) != 0;
          r26 = (r6 | 0) == 0;
          r27 = (r6 | 0) == 0;
          r28 = (r6 | 0) == 0;
          r29 = (r6 | 0) == 0;
          r30 = r15 | 0;
          r31 = (r6 | 0) == 0;
          r32 = r16 | 0;
          r33 = (r6 | 0) == 0;
          r34 = 0;
          r35 = 0;
          r36 = 0;
          r37 = 0;
          r38 = 0;
          r39 = 0;
          r40 = 0;
          r41 = 0;
          r42 = 0;
          r43 = 0;
          r44 = 0;
          r45 = r4;
          r46 = r3;
          r47 = r7;
          L3625 : while (1) {
            r48 = (r41 | 0) == 0;
            do {
              if ((r42 | 0) != 0 & r48) {
                if ((_memchr(410312, HEAP8[r46] << 24 >> 24, 71) | 0) != 0) {
                  r49 = r47;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = r43;
                  r54 = r42;
                  r55 = r41;
                  r56 = r40;
                  r57 = r39;
                  r58 = r38;
                  r59 = r37;
                  r60 = r36;
                  r61 = r35;
                  r62 = r34;
                  break;
                }
                r63 = r46;
                r64 = r63 - r42 | 0;
                r65 = _make_space(r11, r64);
                if ((r65 | 0) != 0) {
                  r9 = 2826;
                  break L3625;
                }
                r66 = HEAP32[r21];
                HEAP32[r21] = r66 + 1 | 0;
                HEAP8[r66] = 1;
                r66 = HEAP32[r21];
                tempBigInt = r64 & 65535;
                HEAP8[r66] = tempBigInt & 255;
                tempBigInt = tempBigInt >> 8;
                HEAP8[r66 + 1 | 0] = tempBigInt & 255;
                r66 = HEAP32[r21] + 2 | 0;
                HEAP32[r21] = r66;
                _memcpy(r66, r42, r64);
                HEAP32[r21] = HEAP32[r21] + r64 | 0;
                r67 = 0;
                r9 = 2828;
                break;
              } else {
                r67 = r42;
                r9 = 2828;
              }
            } while (0);
            L3631 : do {
              if (r9 == 2828) {
                r9 = 0;
                if ((r43 | 0) != 0) {
                  r64 = HEAP8[r46];
                  if ((r36 | 0) == 0) {
                    if (r64 << 24 >> 24 == 92) {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = r39;
                      r58 = r38;
                      r59 = r37;
                      r60 = 1;
                      r61 = r35;
                      r62 = r34;
                      break;
                    }
                    if (r64 << 24 >> 24 != 34) {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = r39;
                      r58 = r38;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break;
                    }
                    r66 = r43 + 1 | 0;
                    r68 = r46;
                    r69 = r68 - r66 | 0;
                    r70 = _make_space(r11, r69);
                    if ((r70 | 0) != 0) {
                      r9 = 2847;
                      break L3625;
                    }
                    r71 = HEAP32[r21];
                    HEAP32[r21] = r71 + 1 | 0;
                    HEAP8[r71] = 1;
                    r71 = HEAP32[r21];
                    tempBigInt = 0;
                    HEAP8[r71] = tempBigInt & 255;
                    tempBigInt = tempBigInt >> 8;
                    HEAP8[r71 + 1 | 0] = tempBigInt & 255;
                    r72 = HEAP32[r21] + 2 | 0;
                    HEAP32[r21] = r72;
                    r73 = _unquote_string(r66, r69, r72);
                    HEAP32[r21] = HEAP32[r21] + r73 | 0;
                    tempBigInt = r73 & 65535;
                    HEAP8[r71] = tempBigInt & 255;
                    tempBigInt = tempBigInt >> 8;
                    HEAP8[r71 + 1 | 0] = tempBigInt & 255;
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = 0;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  }
                  r71 = r64 << 24 >> 24;
                  if ((r71 | 0) == 48 | (r71 | 0) == 49 | (r71 | 0) == 50 | (r71 | 0) == 51 | (r71 | 0) == 52 | (r71 | 0) == 53 | (r71 | 0) == 54 | (r71 | 0) == 55) {
                    if (r45 >>> 0 <= 2) {
                      r9 = 2834;
                      break L3625;
                    }
                    if ((HEAP8[r46 + 1 | 0] - 48 & 255) >= 8) {
                      r9 = 2834;
                      break L3625;
                    }
                    r64 = r46 + 2 | 0;
                    if ((HEAP8[r64] - 48 & 255) >= 8) {
                      r9 = 2834;
                      break L3625;
                    }
                    r49 = r47;
                    r50 = r64;
                    r51 = r45 - 2 | 0;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = 0;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if ((r71 | 0) == 13) {
                    r64 = r46 + 1 | 0;
                    r73 = HEAP8[r64] << 24 >> 24 == 10;
                    r49 = r47;
                    r50 = r73 ? r64 : r46;
                    r51 = (r73 << 31 >> 31) + r45 | 0;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = 0;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if ((r71 | 0) == 98 | (r71 | 0) == 116 | (r71 | 0) == 118 | (r71 | 0) == 110 | (r71 | 0) == 102 | (r71 | 0) == 114 | (r71 | 0) == 34 | (r71 | 0) == 39 | (r71 | 0) == 92) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = 0;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if ((r71 | 0) == 10) {
                    r73 = r46 + 1 | 0;
                    r64 = HEAP8[r73] << 24 >> 24 == 13;
                    r49 = r47;
                    r50 = r64 ? r73 : r46;
                    r51 = (r64 << 31 >> 31) + r45 | 0;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = 0;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if ((r71 | 0) == 120) {
                    if (r45 >>> 0 <= 2) {
                      r9 = 2839;
                      break L3625;
                    }
                    r71 = HEAP8[r46 + 1 | 0];
                    if (!((r71 - 48 & 255) < 10 | (r71 - 65 & 255) < 6 | (r71 - 97 & 255) < 6)) {
                      r9 = 2839;
                      break L3625;
                    }
                    r71 = r46 + 2 | 0;
                    r64 = HEAP8[r71];
                    if (!((r64 - 48 & 255) < 10 | (r64 - 65 & 255) < 6 | (r64 - 97 & 255) < 6)) {
                      r9 = 2839;
                      break L3625;
                    }
                    r49 = r47;
                    r50 = r71;
                    r51 = r45 - 2 | 0;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = 0;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else {
                    r9 = 2843;
                    break L3625;
                  }
                }
                if (!r48) {
                  if ((_isxdigit(HEAP8[r46] << 24 >> 24) | 0) != 0) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = 0;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37 + 1 | 0;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  }
                  if (HEAP8[r46] << 24 >> 24 != 35) {
                    if ((_whitespacep(r46) | 0) == 0) {
                      r9 = 2862;
                      break L3625;
                    } else {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = r39;
                      r58 = r38;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break;
                    }
                  }
                  if ((r37 & 1 | 0) != 0) {
                    r9 = 2854;
                    break L3625;
                  }
                  r71 = (r37 | 0) / 2 & -1;
                  r74 = _make_space(r11, r71);
                  if ((r74 | 0) != 0) {
                    r9 = 2856;
                    break L3625;
                  }
                  r64 = HEAP32[r21];
                  HEAP32[r21] = r64 + 1 | 0;
                  HEAP8[r64] = 1;
                  r64 = HEAP32[r21];
                  tempBigInt = r71 & 65535;
                  HEAP8[r64] = tempBigInt & 255;
                  tempBigInt = tempBigInt >> 8;
                  HEAP8[r64 + 1 | 0] = tempBigInt & 255;
                  HEAP32[r21] = HEAP32[r21] + 2 | 0;
                  r64 = r41 + 1 | 0;
                  if (r64 >>> 0 < r46 >>> 0) {
                    r75 = r41;
                    r76 = r64;
                  } else {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = 0;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  }
                  while (1) {
                    if ((_whitespacep(r76) | 0) == 0) {
                      r64 = _hextobyte(r76) & 255;
                      r71 = HEAP32[r21];
                      HEAP32[r21] = r71 + 1 | 0;
                      HEAP8[r71] = r64;
                      r77 = r75 + 2 | 0;
                    } else {
                      r77 = r76;
                    }
                    r64 = r77 + 1 | 0;
                    if (r64 >>> 0 < r46 >>> 0) {
                      r75 = r77;
                      r76 = r64;
                    } else {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = 0;
                      r56 = r40;
                      r57 = r39;
                      r58 = r38;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break L3631;
                    }
                  }
                }
                if ((r40 | 0) != 0) {
                  r49 = r47;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = 0;
                  r54 = r67;
                  r55 = 0;
                  r56 = HEAP8[r46] << 24 >> 24 == 124 ? 0 : r40;
                  r57 = r39;
                  r58 = r38;
                  r59 = r37;
                  r60 = r36;
                  r61 = r35;
                  r62 = r34;
                  break;
                }
                if ((r44 | 0) != 0) {
                  r64 = HEAP8[r46];
                  if ((r64 - 48 & 255) < 10) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = 0;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  }
                  if (r64 << 24 >> 24 == 58) {
                    r71 = _atoi(r44);
                    if (r71 >>> 0 > (r45 - 1 | 0) >>> 0) {
                      r9 = 2869;
                      break L3625;
                    }
                    r78 = _make_space(r11, r71);
                    if ((r78 | 0) != 0) {
                      r9 = 2871;
                      break L3625;
                    }
                    r73 = HEAP32[r21];
                    HEAP32[r21] = r73 + 1 | 0;
                    HEAP8[r73] = 1;
                    r73 = HEAP32[r21];
                    tempBigInt = r71 & 65535;
                    HEAP8[r73] = tempBigInt & 255;
                    tempBigInt = tempBigInt >> 8;
                    HEAP8[r73 + 1 | 0] = tempBigInt & 255;
                    r73 = HEAP32[r21] + 2 | 0;
                    HEAP32[r21] = r73;
                    _memcpy(r73, r46 + 1 | 0, r71);
                    HEAP32[r21] = HEAP32[r21] + r71 | 0;
                    r49 = r47;
                    r50 = r46 + r71 | 0;
                    r51 = r45 - r71 | 0;
                    r52 = 0;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if (r64 << 24 >> 24 == 34) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = 0;
                    r53 = r46;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = 0;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if (r64 << 24 >> 24 == 35) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = 0;
                    r53 = r43;
                    r54 = r67;
                    r55 = r46;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = 0;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if (r64 << 24 >> 24 == 124) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = 0;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r46;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else {
                    r9 = 2875;
                    break L3625;
                  }
                }
                r64 = HEAP8[r46];
                if ((r38 | 0) == 0) {
                  if (r64 << 24 >> 24 == 40) {
                    if ((r39 | 0) != 0) {
                      r9 = 2943;
                      break L3625;
                    }
                    r79 = _make_space(r11, 0);
                    if ((r79 | 0) != 0) {
                      r9 = 2945;
                      break L3625;
                    }
                    r71 = HEAP32[r21];
                    HEAP32[r21] = r71 + 1 | 0;
                    HEAP8[r71] = 3;
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34 + 1 | 0;
                    break;
                  } else if (r64 << 24 >> 24 == 41) {
                    if ((r39 | 0) != 0) {
                      r9 = 2948;
                      break L3625;
                    }
                    r80 = _make_space(r11, 0);
                    if ((r80 | 0) != 0) {
                      r9 = 2950;
                      break L3625;
                    }
                    r71 = HEAP32[r21];
                    HEAP32[r21] = r71 + 1 | 0;
                    HEAP8[r71] = 4;
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = r38;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34 - 1 | 0;
                    break;
                  } else if (r64 << 24 >> 24 == 35) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r46;
                    r56 = r40;
                    r57 = r39;
                    r58 = 0;
                    r59 = 0;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if (r64 << 24 >> 24 == 124) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r46;
                    r57 = r39;
                    r58 = 0;
                    r59 = r37;
                    r60 = r36;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else if (r64 << 24 >> 24 == 91) {
                    if ((r39 | 0) == 0) {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = r46;
                      r58 = 0;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break;
                    } else {
                      r9 = 2955;
                      break L3625;
                    }
                  } else if (r64 << 24 >> 24 == 93) {
                    if ((r39 | 0) == 0) {
                      r9 = 2957;
                      break L3625;
                    } else {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = 0;
                      r58 = 0;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break;
                    }
                  } else if (r64 << 24 >> 24 == 34) {
                    r49 = r47;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r46;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = 0;
                    r59 = r37;
                    r60 = 0;
                    r61 = r35;
                    r62 = r34;
                    break;
                  } else {
                    if ((r64 - 48 & 255) < 10) {
                      if (r64 << 24 >> 24 == 48) {
                        r9 = 2960;
                        break L3625;
                      } else {
                        r49 = r47;
                        r50 = r46;
                        r51 = r45;
                        r52 = r46;
                        r53 = r43;
                        r54 = r67;
                        r55 = r41;
                        r56 = r40;
                        r57 = r39;
                        r58 = r38;
                        r59 = r37;
                        r60 = r36;
                        r61 = r35;
                        r62 = r34;
                        break;
                      }
                    }
                    r71 = r64 << 24 >> 24;
                    if ((_memchr(410312, r71, 71) | 0) != 0) {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r46;
                      r55 = r41;
                      r56 = r40;
                      r57 = r39;
                      r58 = r38;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break;
                    }
                    if ((_whitespacep(r46) | 0) != 0) {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = r39;
                      r58 = r38;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break;
                    }
                    if (r64 << 24 >> 24 == 123) {
                      r9 = 2964;
                      break L3625;
                    }
                    if ((_memchr(485912, r71, 3) | 0) != 0) {
                      r9 = 2966;
                      break L3625;
                    }
                    if (r25 & r64 << 24 >> 24 == 37) {
                      r49 = r47;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = r39;
                      r58 = r46;
                      r59 = r37;
                      r60 = r36;
                      r61 = r35;
                      r62 = r34;
                      break;
                    } else {
                      r9 = 2968;
                      break L3625;
                    }
                  }
                }
                if (r64 << 24 >> 24 == 98) {
                  if (r28) {
                    r81 = r47 + 8 | 0;
                    r82 = r47 + 4 | 0;
                    r83 = r35;
                    r84 = r47;
                  } else {
                    r81 = r47;
                    r82 = HEAP32[(r35 + 1 << 2 >> 2) + r8];
                    r83 = r35 + 2 | 0;
                    r84 = HEAP32[(r35 << 2 >> 2) + r8];
                  }
                  r71 = HEAP32[r84 >> 2];
                  r73 = HEAP32[r82 >> 2];
                  r85 = _make_space(r11, r71);
                  if ((r85 | 0) != 0) {
                    r9 = 2913;
                    break L3625;
                  }
                  do {
                    if ((r71 | 0) != 0) {
                      if ((__gcry_is_secure(HEAP32[r2] | 0) | 0) != 0) {
                        break;
                      }
                      if ((__gcry_is_secure(r73) | 0) == 0) {
                        break;
                      }
                      r72 = __gcry_malloc_secure(HEAP32[r19]);
                      if ((r72 | 0) == 0) {
                        r9 = 2918;
                        break L3625;
                      }
                      r69 = HEAP32[r2];
                      _memcpy(r72, r69 | 0, HEAP32[r21] - r69 | 0);
                      HEAP32[r21] = r72 + (HEAP32[r21] - HEAP32[r2]) | 0;
                      __gcry_free(HEAP32[r2] | 0);
                      HEAP32[r2] = r72;
                    }
                  } while (0);
                  r72 = HEAP32[r21];
                  HEAP32[r21] = r72 + 1 | 0;
                  HEAP8[r72] = 1;
                  r72 = HEAP32[r21];
                  tempBigInt = r71 & 65535;
                  HEAP8[r72] = tempBigInt & 255;
                  tempBigInt = tempBigInt >> 8;
                  HEAP8[r72 + 1 | 0] = tempBigInt & 255;
                  r72 = HEAP32[r21] + 2 | 0;
                  HEAP32[r21] = r72;
                  _memcpy(r72, r73, r71);
                  HEAP32[r21] = HEAP32[r21] + r71 | 0;
                  r49 = r81;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = r43;
                  r54 = r67;
                  r55 = r41;
                  r56 = r40;
                  r57 = r39;
                  r58 = 0;
                  r59 = r37;
                  r60 = r36;
                  r61 = r83;
                  r62 = r34;
                  break;
                } else if (r64 << 24 >> 24 == 115) {
                  if (r27) {
                    r86 = r47 + 4 | 0;
                    r87 = r35;
                    r88 = r47;
                  } else {
                    r86 = r47;
                    r87 = r35 + 1 | 0;
                    r88 = HEAP32[(r35 << 2 >> 2) + r8];
                  }
                  r72 = HEAP32[r88 >> 2];
                  r69 = _strlen(r72);
                  r89 = _make_space(r11, r69);
                  if ((r89 | 0) != 0) {
                    r9 = 2907;
                    break L3625;
                  }
                  r66 = HEAP32[r21];
                  HEAP32[r21] = r66 + 1 | 0;
                  HEAP8[r66] = 1;
                  r66 = HEAP32[r21];
                  tempBigInt = r69 & 65535;
                  HEAP8[r66] = tempBigInt & 255;
                  tempBigInt = tempBigInt >> 8;
                  HEAP8[r66 + 1 | 0] = tempBigInt & 255;
                  r66 = HEAP32[r21] + 2 | 0;
                  HEAP32[r21] = r66;
                  _memcpy(r66, r72, r69);
                  HEAP32[r21] = HEAP32[r21] + r69 | 0;
                  r49 = r86;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = r43;
                  r54 = r67;
                  r55 = r41;
                  r56 = r40;
                  r57 = r39;
                  r58 = 0;
                  r59 = r37;
                  r60 = r36;
                  r61 = r87;
                  r62 = r34;
                  break;
                } else if (r64 << 24 >> 24 == 117) {
                  if (r31) {
                    r90 = r47 + 4 | 0;
                    r91 = r47;
                    r92 = r35;
                  } else {
                    r90 = r47;
                    r91 = HEAP32[(r35 << 2 >> 2) + r8];
                    r92 = r35 + 1 | 0;
                  }
                  _sprintf(r32, 486756, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r91 >> 2], tempInt));
                  r69 = _strlen(r32);
                  r93 = _make_space(r11, r69);
                  if ((r93 | 0) != 0) {
                    r9 = 2931;
                    break L3625;
                  }
                  r72 = HEAP32[r21];
                  HEAP32[r21] = r72 + 1 | 0;
                  HEAP8[r72] = 1;
                  r72 = HEAP32[r21];
                  tempBigInt = r69 & 65535;
                  HEAP8[r72] = tempBigInt & 255;
                  tempBigInt = tempBigInt >> 8;
                  HEAP8[r72 + 1 | 0] = tempBigInt & 255;
                  r72 = HEAP32[r21] + 2 | 0;
                  HEAP32[r21] = r72;
                  _memcpy(r72, r32, r69);
                  HEAP32[r21] = HEAP32[r21] + r69 | 0;
                  r49 = r90;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = r43;
                  r54 = r67;
                  r55 = r41;
                  r56 = r40;
                  r57 = r39;
                  r58 = 0;
                  r59 = r37;
                  r60 = r36;
                  r61 = r92;
                  r62 = r34;
                  break;
                } else if (r64 << 24 >> 24 == 83) {
                  if (r33) {
                    r94 = r47 + 4 | 0;
                    r95 = r47;
                    r96 = r35;
                  } else {
                    r94 = r47;
                    r95 = HEAP32[(r35 << 2 >> 2) + r8];
                    r96 = r35 + 1 | 0;
                  }
                  r69 = HEAP32[r95 >> 2];
                  r72 = _get_internal_buffer(r69, r17);
                  if ((r72 | 0) == 0) {
                    r49 = r94;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = 0;
                    r59 = r37;
                    r60 = r36;
                    r61 = r96;
                    r62 = r34;
                    break;
                  }
                  r97 = _make_space(r11, r72);
                  if ((r97 | 0) != 0) {
                    r9 = 2938;
                    break L3625;
                  }
                  _memcpy(HEAP32[r21], r69 + HEAP32[r17 >> 2] | 0, r72);
                  HEAP32[r21] = HEAP32[r21] + r72 | 0;
                  r49 = r94;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = r43;
                  r54 = r67;
                  r55 = r41;
                  r56 = r40;
                  r57 = r39;
                  r58 = 0;
                  r59 = r37;
                  r60 = r36;
                  r61 = r96;
                  r62 = r34;
                  break;
                } else if (r64 << 24 >> 24 == 109 | r64 << 24 >> 24 == 77) {
                  HEAP32[r13] = 0;
                  r72 = HEAP8[r46] << 24 >> 24 == 109 ? 1 : 5;
                  if (r26) {
                    r98 = r47 + 4 | 0;
                    r99 = r35;
                    r100 = r47;
                  } else {
                    r98 = r47;
                    r99 = r35 + 1 | 0;
                    r100 = HEAP32[(r35 << 2 >> 2) + r8];
                  }
                  r69 = HEAP32[r100 >> 2];
                  if ((__gcry_mpi_get_flag(r69, 2) | 0) != 0) {
                    r66 = __gcry_mpi_get_opaque(r69, r14);
                    r101 = (HEAP32[r14 >> 2] + 7 | 0) >>> 3;
                    HEAP32[r13] = r101;
                    if ((r66 | 0) == 0 | (r101 | 0) == 0) {
                      r49 = r98;
                      r50 = r46;
                      r51 = r45;
                      r52 = r44;
                      r53 = r43;
                      r54 = r67;
                      r55 = r41;
                      r56 = r40;
                      r57 = r39;
                      r58 = 0;
                      r59 = r37;
                      r60 = r36;
                      r61 = r99;
                      r62 = r34;
                      break;
                    }
                    r102 = _make_space(r11, r101);
                    if ((r102 | 0) != 0) {
                      r9 = 2884;
                      break L3625;
                    }
                    do {
                      if ((__gcry_is_secure(HEAP32[r2] | 0) | 0) == 0) {
                        if ((__gcry_mpi_get_flag(r69, 1) | 0) == 0) {
                          break;
                        }
                        r101 = __gcry_malloc_secure(HEAP32[r19]);
                        if ((r101 | 0) == 0) {
                          r9 = 2888;
                          break L3625;
                        }
                        r103 = HEAP32[r2];
                        _memcpy(r101, r103 | 0, HEAP32[r21] - r103 | 0);
                        HEAP32[r21] = r101 + (HEAP32[r21] - HEAP32[r2]) | 0;
                        __gcry_free(HEAP32[r2] | 0);
                        HEAP32[r2] = r101;
                      }
                    } while (0);
                    r71 = HEAP32[r21];
                    HEAP32[r21] = r71 + 1 | 0;
                    HEAP8[r71] = 1;
                    r71 = HEAP32[r21];
                    tempBigInt = HEAP32[r13] & 65535;
                    HEAP8[r71] = tempBigInt & 255;
                    tempBigInt = tempBigInt >> 8;
                    HEAP8[r71 + 1 | 0] = tempBigInt & 255;
                    r71 = HEAP32[r21] + 2 | 0;
                    HEAP32[r21] = r71;
                    _memcpy(r71, r66, HEAP32[r13]);
                    HEAP32[r21] = HEAP32[r21] + HEAP32[r13] | 0;
                    r49 = r98;
                    r50 = r46;
                    r51 = r45;
                    r52 = r44;
                    r53 = r43;
                    r54 = r67;
                    r55 = r41;
                    r56 = r40;
                    r57 = r39;
                    r58 = 0;
                    r59 = r37;
                    r60 = r36;
                    r61 = r99;
                    r62 = r34;
                    break;
                  }
                  if ((__gcry_mpi_print(r72, 0, 0, r12, r69) | 0) != 0) {
                    r9 = 2892;
                    break L3625;
                  }
                  r104 = _make_space(r11, HEAP32[r13]);
                  if ((r104 | 0) != 0) {
                    r9 = 2894;
                    break L3625;
                  }
                  do {
                    if ((__gcry_is_secure(HEAP32[r2] | 0) | 0) == 0) {
                      if ((__gcry_mpi_get_flag(r69, 1) | 0) == 0) {
                        break;
                      }
                      r71 = __gcry_malloc_secure(HEAP32[r19]);
                      if ((r71 | 0) == 0) {
                        r9 = 2898;
                        break L3625;
                      }
                      r73 = HEAP32[r2];
                      _memcpy(r71, r73 | 0, HEAP32[r21] - r73 | 0);
                      HEAP32[r21] = r71 + (HEAP32[r21] - HEAP32[r2]) | 0;
                      __gcry_free(HEAP32[r2] | 0);
                      HEAP32[r2] = r71;
                    }
                  } while (0);
                  r66 = HEAP32[r21];
                  HEAP32[r21] = r66 + 1 | 0;
                  HEAP8[r66] = 1;
                  r66 = HEAP32[r21];
                  tempBigInt = HEAP32[r13] & 65535;
                  HEAP8[r66] = tempBigInt & 255;
                  tempBigInt = tempBigInt >> 8;
                  HEAP8[r66 + 1 | 0] = tempBigInt & 255;
                  r66 = HEAP32[r21] + 2 | 0;
                  HEAP32[r21] = r66;
                  if ((__gcry_mpi_print(r72, r66, HEAP32[r13], r12, r69) | 0) != 0) {
                    r9 = 2901;
                    break L3625;
                  }
                  HEAP32[r21] = HEAP32[r21] + HEAP32[r13] | 0;
                  r49 = r98;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = r43;
                  r54 = r67;
                  r55 = r41;
                  r56 = r40;
                  r57 = r39;
                  r58 = 0;
                  r59 = r37;
                  r60 = r36;
                  r61 = r99;
                  r62 = r34;
                  break;
                } else if (r64 << 24 >> 24 == 100) {
                  if (r29) {
                    r105 = r47 + 4 | 0;
                    r106 = r47;
                    r107 = r35;
                  } else {
                    r105 = r47;
                    r106 = HEAP32[(r35 << 2 >> 2) + r8];
                    r107 = r35 + 1 | 0;
                  }
                  _sprintf(r30, 487692, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[r106 >> 2], tempInt));
                  r66 = _strlen(r30);
                  r108 = _make_space(r11, r66);
                  if ((r108 | 0) != 0) {
                    r9 = 2925;
                    break L3625;
                  }
                  r71 = HEAP32[r21];
                  HEAP32[r21] = r71 + 1 | 0;
                  HEAP8[r71] = 1;
                  r71 = HEAP32[r21];
                  tempBigInt = r66 & 65535;
                  HEAP8[r71] = tempBigInt & 255;
                  tempBigInt = tempBigInt >> 8;
                  HEAP8[r71 + 1 | 0] = tempBigInt & 255;
                  r71 = HEAP32[r21] + 2 | 0;
                  HEAP32[r21] = r71;
                  _memcpy(r71, r30, r66);
                  HEAP32[r21] = HEAP32[r21] + r66 | 0;
                  r49 = r105;
                  r50 = r46;
                  r51 = r45;
                  r52 = r44;
                  r53 = r43;
                  r54 = r67;
                  r55 = r41;
                  r56 = r40;
                  r57 = r39;
                  r58 = 0;
                  r59 = r37;
                  r60 = r36;
                  r61 = r107;
                  r62 = r34;
                  break;
                } else {
                  r9 = 2940;
                  break L3625;
                }
              }
            } while (0);
            r48 = r50 + 1 | 0;
            r66 = r51 - 1 | 0;
            if ((r66 | 0) == 0) {
              r23 = r62;
              r24 = r48;
              r9 = 2970;
              break L3623;
            } else {
              r34 = r62;
              r35 = r61;
              r36 = r60;
              r37 = r59;
              r38 = r58;
              r39 = r57;
              r40 = r56;
              r41 = r55;
              r42 = r54;
              r43 = r53;
              r44 = r52;
              r45 = r66;
              r46 = r48;
              r47 = r49;
            }
          }
          if (r9 == 2960) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 207;
            break;
          } else if (r9 == 2964) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 210;
            break;
          } else if (r9 == 2843) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 206;
            break;
          } else if (r9 == 2901) {
            __gcry_bug(469472, 1328, 494404);
          } else if (r9 == 2931) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r93;
            break;
          } else if (r9 == 2907) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r89;
            break;
          } else if (r9 == 2869) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 202;
            break;
          } else if (r9 == 2938) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r97;
            break;
          } else if (r9 == 2862) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 211;
            break;
          } else if (r9 == 2898) {
            r22 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
            r9 = 2974;
            break L3621;
          } else if (r9 == 2854) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 212;
            break;
          } else if (r9 == 2943) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 209;
            break;
          } else if (r9 == 2945) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r79;
            break;
          } else if (r9 == 2918) {
            r22 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
            r9 = 2974;
            break L3621;
          } else if (r9 == 2948) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 209;
            break;
          } else if (r9 == 2847) {
            HEAP32[r18] = r68 - r3 | 0;
            r109 = r70;
            break;
          } else if (r9 == 2950) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r80;
            break;
          } else if (r9 == 2955) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 208;
            break;
          } else if (r9 == 2957) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 209;
            break;
          } else if (r9 == 2925) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r108;
            break;
          } else if (r9 == 2940) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 201;
            break;
          } else if (r9 == 2966) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 210;
            break;
          } else if (r9 == 2968) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 205;
            break;
          } else if (r9 == 2888) {
            r22 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
            r9 = 2974;
            break L3621;
          } else if (r9 == 2834) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 206;
            break;
          } else if (r9 == 2892) {
            __gcry_bug(469472, 1301, 494404);
          } else if (r9 == 2894) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r104;
            break;
          } else if (r9 == 2875) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 201;
            break;
          } else if (r9 == 2856) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r74;
            break;
          } else if (r9 == 2839) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = 206;
            break;
          } else if (r9 == 2871) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r78;
            break;
          } else if (r9 == 2884) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r102;
            break;
          } else if (r9 == 2913) {
            HEAP32[r18] = r46 - r3 | 0;
            r109 = r85;
            break;
          } else if (r9 == 2826) {
            HEAP32[r18] = r63 - r3 | 0;
            r109 = r65;
            break;
          }
        }
      } while (0);
      do {
        if (r9 == 2970) {
          r47 = _make_space(r11, 0);
          if ((r47 | 0) == 0) {
            r45 = HEAP32[r21];
            HEAP32[r21] = r45 + 1 | 0;
            HEAP8[r45] = 0;
            r22 = (r23 | 0) == 0 ? 0 : 203;
            r9 = 2974;
            break L3621;
          } else {
            HEAP32[r18] = r24 - r3 | 0;
            r109 = r47;
            break;
          }
        }
      } while (0);
      r110 = r109;
      r111 = HEAP32[r2];
      break;
    }
  } while (0);
  do {
    if (r9 == 2974) {
      r109 = HEAP32[r2];
      if ((r22 | 0) != 0) {
        r110 = r22;
        r111 = r109;
        break;
      }
      r112 = _normalize(r109);
      r113 = 0;
      HEAP32[r1 >> 2] = r112;
      r114 = _gcry_error1456(r113);
      STACKTOP = r10;
      return r114;
    }
  } while (0);
  if ((r111 | 0) == 0) {
    r112 = 0;
    r113 = r110;
    HEAP32[r1 >> 2] = r112;
    r114 = _gcry_error1456(r113);
    STACKTOP = r10;
    return r114;
  }
  r22 = r111 | 0;
  L3816 : do {
    if ((__gcry_is_secure(r22) | 0) != 0) {
      r111 = HEAP32[r19];
      if ((r111 | 0) == 0) {
        break;
      } else {
        r115 = r22;
        r116 = r111;
      }
      while (1) {
        HEAP8[r115] = 0;
        r111 = r116 - 1 | 0;
        if ((r111 | 0) == 0) {
          break L3816;
        } else {
          r115 = r115 + 1 | 0;
          r116 = r111;
        }
      }
    }
  } while (0);
  __gcry_free(HEAP32[r2] | 0);
  r112 = 0;
  r113 = r110;
  HEAP32[r1 >> 2] = r112;
  r114 = _gcry_error1456(r113);
  STACKTOP = r10;
  return r114;
}
function _whitespacep(r1) {
  var r2, r3;
  r2 = HEAP8[r1] << 24 >> 24;
  if ((r2 | 0) == 32 | (r2 | 0) == 9 | (r2 | 0) == 11 | (r2 | 0) == 12 | (r2 | 0) == 13 | (r2 | 0) == 10) {
    r3 = 1;
  } else {
    r3 = 0;
  }
  return r3;
}
function _unquote_string(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  if ((r2 | 0) == 0) {
    r4 = r3;
    r5 = r4;
    r6 = r3;
    r7 = r5 - r6 | 0;
    return r7;
  } else {
    r8 = 0;
    r9 = r1;
    r10 = r3;
    r11 = r2;
  }
  while (1) {
    r2 = HEAP8[r9];
    do {
      if ((r8 | 0) == 0) {
        if (r2 << 24 >> 24 == 92) {
          r12 = r11;
          r13 = r10;
          r14 = r9;
          r15 = 1;
          break;
        }
        HEAP8[r10] = r2;
        r12 = r11;
        r13 = r10 + 1 | 0;
        r14 = r9;
        r15 = r8;
      } else {
        r1 = r2 & 255;
        if ((r1 | 0) == 39) {
          HEAP8[r10] = 39;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 116) {
          HEAP8[r10] = 9;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 98) {
          HEAP8[r10] = 8;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 10) {
          if (r11 >>> 0 <= 1) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          r16 = r9 + 1 | 0;
          r17 = HEAP8[r16] << 24 >> 24 == 13;
          r12 = (r17 << 31 >> 31) + r11 | 0;
          r13 = r10;
          r14 = r17 ? r16 : r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 34) {
          HEAP8[r10] = 34;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 120) {
          if (r11 >>> 0 <= 2) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          r16 = r9 + 1 | 0;
          r17 = HEAP8[r16];
          if (!((r17 - 48 & 255) < 10 | (r17 - 65 & 255) < 6 | (r17 - 97 & 255) < 6)) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          r17 = r9 + 2 | 0;
          r18 = HEAP8[r17];
          if (!((r18 - 48 & 255) < 10 | (r18 - 65 & 255) < 6 | (r18 - 97 & 255) < 6)) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          r18 = HEAP8[r16];
          if ((r18 & 255) < 58) {
            r19 = r18 - 48 & 255;
          } else {
            r19 = (r18 + 10 & 255) + ((r18 & 255) < 71 ? -65 : -97) & 255;
          }
          r18 = HEAP8[r17];
          if ((r18 & 255) < 58) {
            r20 = r18 - 48 & 255;
          } else {
            r20 = (r18 + 10 & 255) + ((r18 & 255) < 71 ? -65 : -97) & 255;
          }
          HEAP8[r10] = (r19 << 4) + r20 & 255;
          r12 = r11 - 2 | 0;
          r13 = r10 + 1 | 0;
          r14 = r17;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 114) {
          HEAP8[r10] = 13;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 118) {
          HEAP8[r10] = 11;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 13) {
          if (r11 >>> 0 <= 1) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          r17 = r9 + 1 | 0;
          r18 = HEAP8[r17] << 24 >> 24 == 10;
          r12 = (r18 << 31 >> 31) + r11 | 0;
          r13 = r10;
          r14 = r18 ? r17 : r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 92) {
          HEAP8[r10] = 92;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 110) {
          HEAP8[r10] = 10;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else if ((r1 | 0) == 102) {
          HEAP8[r10] = 12;
          r12 = r11;
          r13 = r10 + 1 | 0;
          r14 = r9;
          r15 = 0;
          break;
        } else {
          if (!(r11 >>> 0 > 2 & (r2 & 255) > 47 & (r2 & 255) < 56)) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          r1 = HEAP8[r9 + 1 | 0];
          if ((r1 - 48 & 255) >= 8) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          r17 = r9 + 2 | 0;
          r18 = HEAP8[r17];
          if ((r18 - 48 & 255) >= 8) {
            r12 = r11;
            r13 = r10;
            r14 = r9;
            r15 = 0;
            break;
          }
          HEAP8[r10] = ((r1 << 3) + ((r2 << 6) + 80 & 255) & 255) + r18 & 255;
          r12 = r11 - 2 | 0;
          r13 = r10 + 1 | 0;
          r14 = r17;
          r15 = 0;
          break;
        }
      }
    } while (0);
    r2 = r12 - 1 | 0;
    if ((r2 | 0) == 0) {
      r4 = r13;
      break;
    } else {
      r8 = r15;
      r9 = r14 + 1 | 0;
      r10 = r13;
      r11 = r2;
    }
  }
  r5 = r4;
  r6 = r3;
  r7 = r5 - r6 | 0;
  return r7;
}
function _hextobyte(r1) {
  var r2, r3, r4, r5;
  r2 = HEAP8[r1];
  r3 = r2 & 255;
  do {
    if ((r2 - 48 & 255) < 10) {
      r4 = (r3 << 4) - 768 | 0;
    } else {
      if ((r2 - 65 & 255) < 6) {
        r4 = (r3 << 4) - 880 | 0;
        break;
      }
      if ((r2 - 97 & 255) >= 6) {
        r4 = 0;
        break;
      }
      r4 = (r3 << 4) - 1392 | 0;
    }
  } while (0);
  r3 = HEAP8[r1 + 1 | 0];
  r1 = r3 & 255;
  if ((r3 - 48 & 255) < 10) {
    r5 = r4 - 48 + r1 | 0;
    return r5;
  }
  if ((r3 - 65 & 255) < 6) {
    r5 = r4 - 55 + r1 | 0;
    return r5;
  }
  if ((r3 - 97 & 255) >= 6) {
    r5 = r4;
    return r5;
  }
  r5 = r4 - 87 + r1 | 0;
  return r5;
}
function __gcry_sexp_vbuild(r1, r2, r3, r4) {
  return _vsexp_sscan(r1, r2, r3, _strlen(r3), 1, 0, r4);
}
function __gcry_sexp_build_array(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  r6 = _sexp_sscan(r1, r2, r3, _strlen(r3), 1, r4, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r5;
  return r6;
}
function __gcry_sexp_sscan(r1, r2, r3, r4) {
  var r5, r6;
  r5 = STACKTOP;
  r6 = _sexp_sscan(r1, r2, r3, r4, 0, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = r5;
  return r6;
}
function _suitable_encoding(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = 0;
  if ((r2 | 0) == 0) {
    r4 = 1;
    return r4;
  } else {
    r5 = r2;
    r6 = r1;
    r7 = 1;
  }
  while (1) {
    r2 = HEAP8[r6];
    if ((r2 & 255) < 32 | (r2 - 127 & 255) < 34) {
      if ((_memchr(490032, HEAPU8[r6], 10) | 0) == 0) {
        r4 = 0;
        r3 = 3056;
        break;
      }
    }
    do {
      if ((r7 | 0) == 0) {
        r8 = 0;
      } else {
        r2 = HEAP8[r6];
        if ((r2 - 65 & 255) < 26 | (r2 - 97 & 255) < 26 | (r2 - 48 & 255) < 10) {
          r8 = r7;
          break;
        }
        r8 = (_memchr(488372, r2 & 255, 9) | 0) == 0 ? 0 : r7;
      }
    } while (0);
    r2 = r5 - 1 | 0;
    if ((r2 | 0) == 0) {
      break;
    } else {
      r5 = r2;
      r6 = r6 + 1 | 0;
      r7 = r8;
    }
  }
  if (r3 == 3056) {
    return r4;
  }
  do {
    if ((r8 | 0) != 0) {
      if ((HEAP8[r1] - 48 & 255) < 10) {
        break;
      } else {
        r4 = 2;
      }
      return r4;
    }
  } while (0);
  r4 = 1;
  return r4;
}
function _convert_to_string(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r4 = STACKTOP;
  if ((r3 | 0) == 0) {
    if ((r2 | 0) == 0) {
      r5 = 2;
      STACKTOP = r4;
      return r5;
    } else {
      r6 = r1;
      r7 = r2;
      r8 = 2;
    }
    while (1) {
      r9 = HEAP8[r6];
      r10 = r9 & 255;
      do {
        if ((r10 | 0) == 8 | (r10 | 0) == 9 | (r10 | 0) == 11 | (r10 | 0) == 10 | (r10 | 0) == 12 | (r10 | 0) == 13 | (r10 | 0) == 34 | (r10 | 0) == 39 | (r10 | 0) == 92) {
          r11 = r8 + 2 | 0;
        } else {
          if ((r9 & 255) < 32 | (r9 - 127 & 255) < 34) {
            r11 = r8 + 4 | 0;
            break;
          } else {
            r11 = r8 + 1 | 0;
            break;
          }
        }
      } while (0);
      r9 = r7 - 1 | 0;
      if ((r9 | 0) == 0) {
        r5 = r11;
        break;
      } else {
        r6 = r6 + 1 | 0;
        r7 = r9;
        r8 = r11;
      }
    }
    STACKTOP = r4;
    return r5;
  }
  r11 = r3 + 1 | 0;
  HEAP8[r3] = 34;
  L3927 : do {
    if ((r2 | 0) == 0) {
      r12 = r11;
    } else {
      r8 = r1;
      r7 = r2;
      r6 = r11;
      while (1) {
        r9 = HEAP8[r8];
        r10 = r9 & 255;
        do {
          if ((r10 | 0) == 13) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 114;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 92) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 92;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 8) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 98;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 39) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 39;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 11) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 118;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 10) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 110;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 34) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 34;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 12) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 102;
            r13 = r6 + 2 | 0;
          } else if ((r10 | 0) == 9) {
            HEAP8[r6] = 92;
            HEAP8[r6 + 1 | 0] = 116;
            r13 = r6 + 2 | 0;
          } else {
            if ((r9 & 255) < 32 | (r9 - 127 & 255) < 34) {
              _sprintf(r6, 490944, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r8], tempInt));
              r13 = r6 + 4 | 0;
              break;
            } else {
              HEAP8[r6] = r9;
              r13 = r6 + 1 | 0;
              break;
            }
          }
        } while (0);
        r9 = r7 - 1 | 0;
        if ((r9 | 0) == 0) {
          r12 = r13;
          break L3927;
        } else {
          r8 = r8 + 1 | 0;
          r7 = r9;
          r6 = r13;
        }
      }
    }
  } while (0);
  HEAP8[r12] = 34;
  r5 = r12 + 1 - r3 | 0;
  STACKTOP = r4;
  return r5;
}
function _convert_to_token(r1, r2, r3) {
  if ((r3 | 0) != 0) {
    _memcpy(r3, r1, r2);
  }
  return r2;
}
function _convert_to_hex(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  if ((r3 | 0) == 0) {
    r5 = r2 << 1;
    r6 = r5 + 2 | 0;
    STACKTOP = r4;
    return r6;
  }
  r7 = r3 + 1 | 0;
  HEAP8[r3] = 35;
  if ((r2 | 0) == 0) {
    r8 = r7;
  } else {
    r9 = r2 << 1 | 1;
    r10 = r7;
    r7 = 0;
    while (1) {
      _sprintf(r10, 465732, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[r1 + r7 | 0], tempInt));
      r11 = r7 + 1 | 0;
      if ((r11 | 0) == (r2 | 0)) {
        break;
      } else {
        r10 = r10 + 2 | 0;
        r7 = r11;
      }
    }
    r8 = r3 + r9 | 0;
  }
  HEAP8[r8] = 35;
  r5 = r2 << 1;
  r6 = r5 + 2 | 0;
  STACKTOP = r4;
  return r6;
}
function _make_space(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = r1 + 8 | 0;
  r4 = r1 | 0;
  r5 = HEAP32[r4 >> 2];
  r6 = HEAP32[r3 >> 2] - r5 | 0;
  r7 = r1 + 4 | 0;
  r1 = HEAP32[r7 >> 2];
  if ((r6 + (r2 + 3) | 0) >>> 0 < r1 >>> 0) {
    r8 = 0;
    return r8;
  }
  r9 = (r2 << 1) + r1 + 6 | 0;
  if (r9 >>> 0 <= r1 >>> 0) {
    r8 = 67;
    return r8;
  }
  r1 = __gcry_realloc(r5 | 0, r9);
  if ((r1 | 0) == 0) {
    r8 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
    return r8;
  } else {
    HEAP32[r7 >> 2] = r9;
    HEAP32[r3 >> 2] = r1 + r6 | 0;
    HEAP32[r4 >> 2] = r1;
    r8 = 0;
    return r8;
  }
}
function __gcry_sexp_sprint(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r7 = (r1 | 0) == 0 ? 491616 : r1 | 0;
  r1 = HEAP8[r7];
  L3975 : do {
    if (r1 << 24 >> 24 == 0) {
      r8 = r3;
      r9 = 0;
    } else {
      r10 = (r2 | 0) == 3;
      r11 = (r3 | 0) != 0;
      r12 = r6 | 0;
      r13 = (r3 | 0) == 0;
      r14 = (r2 | 0) != 1;
      r15 = (r3 | 0) == 0;
      r16 = (r3 | 0) != 0;
      r17 = (r2 | 0) == 1;
      r18 = r3;
      r19 = r7;
      r20 = 0;
      r21 = 0;
      r22 = r1;
      L3977 : while (1) {
        r23 = r18;
        r24 = r19;
        r25 = r20;
        r26 = r22;
        while (1) {
          r27 = r26 & 255;
          if ((r27 | 0) == 4) {
            r5 = 3123;
            break;
          } else if ((r27 | 0) == 3) {
            r5 = 3114;
            break;
          } else if ((r27 | 0) != 1) {
            r5 = 3152;
            break L3977;
          }
          r27 = r24 + 1 | 0;
          r28 = (tempInt = HEAPU8[r27] | HEAPU8[r27 + 1 | 0] << 8, tempInt << 16 >> 16);
          r27 = r24 + 3 | 0;
          r29 = r28 & 65535;
          do {
            if (r10) {
              r30 = _suitable_encoding(r27, r29);
              if ((r30 | 0) == 1) {
                r31 = _convert_to_string(r27, r29, 0);
              } else if ((r30 | 0) == 2) {
                r31 = _convert_to_token(r27, r29, 0);
              } else {
                r31 = _convert_to_hex(r27, r29, 0);
              }
              r32 = r31 + r25 | 0;
              if (r11) {
                if (r32 >>> 0 >= r4 >>> 0) {
                  r33 = 0;
                  r5 = 3163;
                  break L3977;
                }
                if ((r30 | 0) == 1) {
                  _convert_to_string(r27, r29, r23);
                } else if ((r30 | 0) == 2) {
                  _convert_to_token(r27, r29, r23);
                } else {
                  _convert_to_hex(r27, r29, r23);
                }
                r34 = r23 + r31 | 0;
              } else {
                r34 = r23;
              }
              if (HEAP8[r29 + (r24 + 3) | 0] << 24 >> 24 == 4) {
                r35 = r32;
                r36 = r34;
                break;
              }
              r30 = r32 + 1 | 0;
              if (!r11) {
                r35 = r30;
                r36 = r34;
                break;
              }
              if (r30 >>> 0 >= r4 >>> 0) {
                r33 = 0;
                r5 = 3162;
                break L3977;
              }
              HEAP8[r34] = 32;
              r35 = r30;
              r36 = r34 + 1 | 0;
            } else {
              _sprintf(r12, 467832, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r29, tempInt));
              r30 = r29 + r25 + _strlen(r12) | 0;
              if (r13) {
                r35 = r30;
                r36 = r23;
                break;
              }
              if (r30 >>> 0 >= r4 >>> 0) {
                r33 = 0;
                r5 = 3167;
                break L3977;
              }
              r32 = _stpcpy(r23, r12);
              _memcpy(r32, r27, r29);
              r35 = r30;
              r36 = r32 + r29 | 0;
            }
          } while (0);
          r29 = r24 + (r28 & 65535) + 3 | 0;
          r27 = HEAP8[r29];
          if (r27 << 24 >> 24 == 0) {
            r8 = r36;
            r9 = r35;
            break L3975;
          } else {
            r23 = r36;
            r24 = r29;
            r25 = r35;
            r26 = r27;
          }
        }
        do {
          if (r5 == 3123) {
            r5 = 0;
            r26 = r24 + 1 | 0;
            r27 = r25 + 1 | 0;
            if (r16) {
              if (r27 >>> 0 >= r4 >>> 0) {
                r33 = 0;
                r5 = 3171;
                break L3977;
              }
              HEAP8[r23] = 41;
              r37 = r23 + 1 | 0;
            } else {
              r37 = r23;
            }
            r29 = r21 - 1 | 0;
            r32 = HEAP8[r26];
            if (r32 << 24 >> 24 == 3 | r32 << 24 >> 24 == 0) {
              r38 = r29;
              r39 = r27;
              r40 = r26;
              r41 = r37;
              break;
            }
            if (r17) {
              r38 = r29;
              r39 = r27;
              r40 = r26;
              r41 = r37;
              break;
            }
            r27 = r29 + (r25 + 2) | 0;
            if (!r16) {
              r38 = r29;
              r39 = r27;
              r40 = r26;
              r41 = r37;
              break;
            }
            if (r27 >>> 0 >= r4 >>> 0) {
              r33 = 0;
              r5 = 3169;
              break L3977;
            }
            HEAP8[r37] = 10;
            if ((r29 | 0) <= 0) {
              r38 = r29;
              r39 = r27;
              r40 = r26;
              r41 = r37 + 1 | 0;
              break;
            }
            _memset(r37 + 1 | 0, 32, r21 - 1 | 0);
            r38 = r29;
            r39 = r27;
            r40 = r26;
            r41 = r37 + r21 | 0;
          } else if (r5 == 3114) {
            r5 = 0;
            r26 = r24 + 1 | 0;
            if (r14) {
              r42 = r21 + r25 + ((r21 | 0) != 0 & 1) | 0;
            } else {
              r42 = r25;
            }
            r27 = r42 + 1 | 0;
            if (r15) {
              r43 = r23;
            } else {
              if (r27 >>> 0 >= r4 >>> 0) {
                r33 = 0;
                r5 = 3166;
                break L3977;
              }
              do {
                if ((r21 | 0) == 0 | r14 ^ 1) {
                  r44 = r23;
                } else {
                  r29 = r23 + 1 | 0;
                  HEAP8[r23] = 10;
                  if ((r21 | 0) <= 0) {
                    r44 = r29;
                    break;
                  }
                  _memset(r29, 32, r21);
                  r44 = r21 + (r23 + 1) | 0;
                }
              } while (0);
              HEAP8[r44] = 40;
              r43 = r44 + 1 | 0;
            }
            r38 = r21 + 1 | 0;
            r39 = r27;
            r40 = r26;
            r41 = r43;
          }
        } while (0);
        r23 = HEAP8[r40];
        if (r23 << 24 >> 24 == 0) {
          r8 = r41;
          r9 = r39;
          break L3975;
        } else {
          r18 = r41;
          r19 = r40;
          r20 = r39;
          r21 = r38;
          r22 = r23;
        }
      }
      if (r5 == 3162) {
        STACKTOP = r6;
        return r33;
      } else if (r5 == 3163) {
        STACKTOP = r6;
        return r33;
      } else if (r5 == 3166) {
        STACKTOP = r6;
        return r33;
      } else if (r5 == 3167) {
        STACKTOP = r6;
        return r33;
      } else if (r5 == 3152) {
        __gcry_bug(469472, 1872, 495412);
      } else if (r5 == 3169) {
        STACKTOP = r6;
        return r33;
      } else if (r5 == 3171) {
        STACKTOP = r6;
        return r33;
      }
    }
  } while (0);
  do {
    if ((r2 | 0) == 1) {
      r45 = r9;
      r46 = r8;
      r5 = 3157;
    } else {
      r38 = r9 + 1 | 0;
      if ((r3 | 0) == 0) {
        r47 = r38;
        break;
      }
      if (r38 >>> 0 < r4 >>> 0) {
        HEAP8[r8] = 10;
        r45 = r38;
        r46 = r8 + 1 | 0;
        r5 = 3157;
        break;
      } else {
        r33 = 0;
        STACKTOP = r6;
        return r33;
      }
    }
  } while (0);
  do {
    if (r5 == 3157) {
      if ((r3 | 0) == 0) {
        r47 = r45;
        break;
      }
      if (r45 >>> 0 >= r4 >>> 0) {
        r33 = 0;
        STACKTOP = r6;
        return r33;
      }
      HEAP8[r46] = 0;
      r33 = r45;
      STACKTOP = r6;
      return r33;
    }
  } while (0);
  r33 = r47 + 1 | 0;
  STACKTOP = r6;
  return r33;
}
function __gcry_private_enable_m_guard() {
  HEAP8[410392] = 1;
  return;
}
function _gpg_err_make1500(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 536870912;
  }
  return r2;
}
function _get_internal_buffer(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r3 = 0;
  HEAP32[r2 >> 2] = 0;
  if ((r1 | 0) == 0) {
    r4 = 0;
    return r4;
  }
  r5 = r1 | 0;
  r6 = HEAP8[r5];
  if (r6 << 24 >> 24 == 0) {
    r4 = 0;
    return r4;
  }
  r7 = r1;
  r8 = r5;
  r5 = 0;
  r9 = r6;
  L4065 : while (1) {
    r6 = r8;
    r10 = r9;
    while (1) {
      r11 = r6 + 1 | 0;
      if (r10 << 24 >> 24 == 1) {
        r12 = r11;
        r13 = r6 + ((tempInt = HEAPU8[r12] | HEAPU8[r12 + 1 | 0] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
      } else if (r10 << 24 >> 24 == 4) {
        r3 = 3187;
        break;
      } else if (r10 << 24 >> 24 == 3) {
        r3 = 3183;
        break;
      } else {
        r13 = r11;
      }
      r12 = HEAP8[r13];
      if (r12 << 24 >> 24 == 0) {
        r4 = 0;
        r3 = 3192;
        break L4065;
      } else {
        r6 = r13;
        r10 = r12;
      }
    }
    if (r3 == 3187) {
      r3 = 0;
      r10 = r5 - 1 | 0;
      if ((r10 | 0) == 0) {
        r3 = 3188;
        break;
      } else {
        r14 = r10;
      }
    } else if (r3 == 3183) {
      r3 = 0;
      if ((r5 | 0) == 0) {
        HEAP32[r2 >> 2] = r6 - r7 | 0;
      }
      r14 = r5 + 1 | 0;
    }
    r10 = HEAP8[r11];
    if (r10 << 24 >> 24 == 0) {
      r4 = 0;
      r3 = 3191;
      break;
    } else {
      r8 = r11;
      r5 = r14;
      r9 = r10;
    }
  }
  if (r3 == 3192) {
    return r4;
  } else if (r3 == 3188) {
    r4 = r11 - r1 | 0;
    return r4;
  } else if (r3 == 3191) {
    return r4;
  }
}
function _do_encrypt_stream(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r5 = (r1 | 0) >> 2;
  r6 = HEAP32[r5];
  r7 = (r1 + 4 | 0) >> 2;
  r8 = HEAP32[r7];
  if ((r4 | 0) == 0) {
    r9 = r6;
    r10 = r8;
    HEAP32[r5] = r9;
    HEAP32[r7] = r10;
    return;
  } else {
    r11 = r4;
    r12 = r6;
    r13 = r8;
    r14 = r3;
    r15 = r2;
  }
  while (1) {
    r2 = r11 - 1 | 0;
    r3 = r12 + 1 & 255;
    r8 = r1 + (r3 + 8) | 0;
    r6 = HEAP8[r8];
    r4 = r6 & 255;
    r16 = r4 + r13 & 255;
    r17 = r1 + (r16 + 8) | 0;
    HEAP8[r8] = HEAP8[r17];
    HEAP8[r17] = r6;
    HEAP8[r15] = HEAP8[(HEAPU8[r8] + r4 & 255) + r1 + 8 | 0] ^ HEAP8[r14];
    if ((r2 | 0) == 0) {
      r9 = r3;
      r10 = r16;
      break;
    } else {
      r11 = r2;
      r12 = r3;
      r13 = r16;
      r14 = r14 + 1 | 0;
      r15 = r15 + 1 | 0;
    }
  }
  HEAP32[r5] = r9;
  HEAP32[r7] = r10;
  return;
}
function _gcry_err_make1499(r1) {
  return _gpg_err_make1500(r1);
}
function __gcry_private_malloc(r1) {
  var r2, r3;
  if ((r1 | 0) == 0) {
    _gpg_err_set_errno(22);
    r2 = 0;
    return r2;
  }
  if (!HEAP8[410392]) {
    r2 = _malloc(r1);
    return r2;
  }
  r3 = _malloc(r1 + 5 | 0);
  if ((r3 | 0) == 0) {
    r2 = 0;
    return r2;
  }
  HEAP8[r3] = r1 & 255;
  HEAP8[r3 + 1 | 0] = r1 >>> 8 & 255;
  HEAP8[r3 + 2 | 0] = r1 >>> 16 & 255;
  HEAP8[r3 + 3 | 0] = 85;
  HEAP8[r1 + (r3 + 4) | 0] = -86;
  r2 = r3 + 4 | 0;
  return r2;
}
function __gcry_private_malloc_secure(r1) {
  var r2, r3;
  if ((r1 | 0) == 0) {
    _gpg_err_set_errno(22);
    r2 = 0;
    return r2;
  }
  if (!HEAP8[410392]) {
    r2 = __gcry_secmem_malloc(r1);
    return r2;
  }
  r3 = __gcry_secmem_malloc(r1 + 5 | 0);
  if ((r3 | 0) == 0) {
    r2 = 0;
    return r2;
  }
  HEAP8[r3] = r1 & 255;
  HEAP8[r3 + 1 | 0] = r1 >>> 8 & 255;
  HEAP8[r3 + 2 | 0] = r1 >>> 16 & 255;
  HEAP8[r3 + 3 | 0] = -52;
  HEAP8[r1 + (r3 + 4) | 0] = -86;
  r2 = r3 + 4 | 0;
  return r2;
}
function __gcry_private_realloc(r1, r2) {
  var r3, r4, r5;
  if (!HEAP8[410392]) {
    if ((__gcry_private_is_secure(r1) | 0) == 0) {
      r3 = _realloc(r1, r2);
      return r3;
    } else {
      r3 = __gcry_secmem_realloc(r1, r2);
      return r3;
    }
  }
  if ((r1 | 0) == 0) {
    r3 = __gcry_private_malloc(r2);
    return r3;
  }
  __gcry_private_check_heap(r1);
  r4 = HEAPU8[r1 - 3 | 0] << 8 | HEAPU8[r1 - 4 | 0] | HEAPU8[r1 - 2 | 0] << 16;
  if (r4 >>> 0 >= r2 >>> 0) {
    r3 = r1;
    return r3;
  }
  if (HEAP8[r1 - 1 | 0] << 24 >> 24 == -52) {
    r5 = __gcry_private_malloc_secure(r2);
  } else {
    r5 = __gcry_private_malloc(r2);
  }
  if ((r5 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  _memcpy(r5, r1, r4);
  _memset(r5 + r4 | 0, 0, r2 - r4 | 0);
  __gcry_private_free(r1);
  r3 = r5;
  return r3;
}
function __gcry_private_free(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    return;
  }
  if (HEAP8[410392]) {
    __gcry_private_check_heap(r1);
    r2 = r1 - 4 | 0;
    if ((__gcry_private_is_secure(r1) | 0) == 0) {
      _free(r2);
      return;
    } else {
      __gcry_secmem_free(r2);
      return;
    }
  } else {
    if ((__gcry_private_is_secure(r1) | 0) == 0) {
      _free(r1);
      return;
    } else {
      __gcry_secmem_free(r1);
      return;
    }
  }
}
function _arcfour_setkey(r1, r2, r3) {
  var r4;
  r4 = _do_arcfour_setkey(r1, r2, r3);
  __gcry_burn_stack(300);
  return r4;
}
function _encrypt_stream(r1, r2, r3, r4) {
  _do_encrypt_stream(r1, r2, r3, r4);
  __gcry_burn_stack(64);
  return;
}
function _do_arcfour_setkey(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  r6 = r5;
  do {
    if (HEAP8[457932]) {
      r4 = 3261;
    } else {
      HEAP8[457932] = 1;
      r7 = _selftest1523();
      HEAP32[114482] = r7;
      if ((r7 | 0) == 0) {
        break;
      }
      __gcry_log_error(489432, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
      r4 = 3261;
      break;
    }
  } while (0);
  do {
    if (r4 == 3261) {
      if ((HEAP32[114482] | 0) == 0) {
        break;
      } else {
        r8 = 50;
      }
      STACKTOP = r5;
      return r8;
    }
  } while (0);
  if (r3 >>> 0 < 5) {
    r8 = 44;
    STACKTOP = r5;
    return r8;
  }
  HEAP32[r1 + 4 >> 2] = 0;
  HEAP32[r1 >> 2] = 0;
  r4 = 0;
  while (1) {
    HEAP8[r4 + (r1 + 8) | 0] = r4 & 255;
    r7 = r4 + 1 | 0;
    if ((r7 | 0) == 256) {
      r9 = 0;
      break;
    } else {
      r4 = r7;
    }
  }
  while (1) {
    HEAP8[r6 + r9 | 0] = HEAP8[r2 + (r9 >>> 0) % (r3 >>> 0) | 0];
    r4 = r9 + 1 | 0;
    if ((r4 | 0) == 256) {
      r10 = 0;
      r11 = 0;
      break;
    } else {
      r9 = r4;
    }
  }
  while (1) {
    r9 = r11 + (r1 + 8) | 0;
    r3 = HEAP8[r9];
    r2 = ((r3 & 255) + r10 + HEAPU8[r6 + r11 | 0] | 0) % 256;
    r4 = r2 + (r1 + 8) | 0;
    HEAP8[r9] = HEAP8[r4];
    HEAP8[r4] = r3;
    r3 = r11 + 1 | 0;
    if ((r3 | 0) == 256) {
      break;
    } else {
      r10 = r2;
      r11 = r3;
    }
  }
  _memset(r6 | 0, 0, 256);
  r8 = 0;
  STACKTOP = r5;
  return r8;
}
function _selftest1523() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 280 | 0;
  r2 = r1;
  _arcfour_setkey(r2, 415824, 5);
  r3 = r1 + 264 | 0;
  _encrypt_stream(r2, r3, 415596, 5);
  if ((_memcmp(r3, 416640, 5) | 0) != 0) {
    r4 = 481144;
    STACKTOP = r1;
    return r4;
  }
  _arcfour_setkey(r2, 415824, 5);
  _encrypt_stream(r2, r3, r3, 5);
  r4 = (_memcmp(r3, 415596, 5) | 0) == 0 ? 0 : 477060;
  STACKTOP = r1;
  return r4;
}
function _bf_setkey(r1, r2, r3) {
  var r4;
  r4 = _do_bf_setkey(r1, r2, r3);
  __gcry_burn_stack(64);
  return r4;
}
function _encrypt_block(r1, r2, r3) {
  _do_encrypt_block(r1, r2, r3);
  __gcry_burn_stack(64);
  return;
}
function _decrypt_block(r1, r2, r3) {
  _do_decrypt_block(r1, r2, r3);
  __gcry_burn_stack(64);
  return;
}
function _do_decrypt_block(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  HEAP32[r6] = HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0];
  HEAP32[r8] = HEAPU8[r3 + 5 | 0] << 16 | HEAPU8[r3 + 4 | 0] << 24 | HEAPU8[r3 + 6 | 0] << 8 | HEAPU8[r3 + 7 | 0];
  _decrypt(r1, r5, r7);
  HEAP8[r2] = HEAP32[r6] >>> 24 & 255;
  HEAP8[r2 + 1 | 0] = HEAP32[r6] >>> 16 & 255;
  HEAP8[r2 + 2 | 0] = HEAP32[r6] >>> 8 & 255;
  HEAP8[r2 + 3 | 0] = HEAP32[r6] & 255;
  HEAP8[r2 + 4 | 0] = HEAP32[r8] >>> 24 & 255;
  HEAP8[r2 + 5 | 0] = HEAP32[r8] >>> 16 & 255;
  HEAP8[r2 + 6 | 0] = HEAP32[r8] >>> 8 & 255;
  HEAP8[r2 + 7 | 0] = HEAP32[r8] & 255;
  STACKTOP = r4;
  return;
}
function __gcry_private_check_heap(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  if ((r1 | 0) == 0 | HEAP8[410392] ^ 1) {
    STACKTOP = r2;
    return;
  }
  r3 = r1 - 1 | 0;
  r4 = HEAP8[r3];
  if (!(r4 << 24 >> 24 == 85 | r4 << 24 >> 24 == -52)) {
    __gcry_log_fatal(486012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r4 & 255, tempInt));
  }
  if (HEAP8[r1 + (HEAPU8[r1 - 3 | 0] << 8 | HEAPU8[r1 - 4 | 0] | HEAPU8[r1 - 2 | 0] << 16) | 0] << 24 >> 24 == -86) {
    STACKTOP = r2;
    return;
  } else {
    r2 = HEAPU8[r3];
    __gcry_log_fatal(489464, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r2, tempInt));
  }
}
function _decrypt(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = r1 >> 2;
  r1 = HEAP32[r4 + 1041] ^ HEAP32[r2 >> 2];
  r5 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r7 = r1 >>> 8 & 255;
  r8 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r5 << 2 >> 2) + r4] ^ HEAP32[((r7 << 2) + 2048 >> 2) + r4]) + HEAP32[((r8 << 2) + 3072 >> 2) + r4] ^ HEAP32[r3 >> 2] ^ HEAP32[r4 + 1040];
  r9 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r11 = r1 >>> 8 & 255;
  r12 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r9 << 2 >> 2) + r4] ^ HEAP32[((r11 << 2) + 2048 >> 2) + r4]) + HEAP32[((r12 << 2) + 3072 >> 2) + r4] ^ (r5 << 24 | r8 | r6 << 16 | r7 << 8) ^ HEAP32[r4 + 1039];
  r7 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r8 = r1 >>> 8 & 255;
  r5 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r7 << 2 >> 2) + r4] ^ HEAP32[((r8 << 2) + 2048 >> 2) + r4]) + HEAP32[((r5 << 2) + 3072 >> 2) + r4] ^ (r9 << 24 | r12 | r10 << 16 | r11 << 8) ^ HEAP32[r4 + 1038];
  r11 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r12 = r1 >>> 8 & 255;
  r9 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r11 << 2 >> 2) + r4] ^ HEAP32[((r12 << 2) + 2048 >> 2) + r4]) + HEAP32[((r9 << 2) + 3072 >> 2) + r4] ^ (r7 << 24 | r5 | r6 << 16 | r8 << 8) ^ HEAP32[r4 + 1037];
  r8 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r5 = r1 >>> 8 & 255;
  r7 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r8 << 2 >> 2) + r4] ^ HEAP32[((r5 << 2) + 2048 >> 2) + r4]) + HEAP32[((r7 << 2) + 3072 >> 2) + r4] ^ (r11 << 24 | r9 | r10 << 16 | r12 << 8) ^ HEAP32[r4 + 1036];
  r12 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r9 = r1 >>> 8 & 255;
  r11 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r12 << 2 >> 2) + r4] ^ HEAP32[((r9 << 2) + 2048 >> 2) + r4]) + HEAP32[((r11 << 2) + 3072 >> 2) + r4] ^ (r8 << 24 | r7 | r6 << 16 | r5 << 8) ^ HEAP32[r4 + 1035];
  r5 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r7 = r1 >>> 8 & 255;
  r8 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r5 << 2 >> 2) + r4] ^ HEAP32[((r7 << 2) + 2048 >> 2) + r4]) + HEAP32[((r8 << 2) + 3072 >> 2) + r4] ^ (r12 << 24 | r11 | r10 << 16 | r9 << 8) ^ HEAP32[r4 + 1034];
  r9 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r11 = r1 >>> 8 & 255;
  r12 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r9 << 2 >> 2) + r4] ^ HEAP32[((r11 << 2) + 2048 >> 2) + r4]) + HEAP32[((r12 << 2) + 3072 >> 2) + r4] ^ (r5 << 24 | r8 | r6 << 16 | r7 << 8) ^ HEAP32[r4 + 1033];
  r7 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r8 = r1 >>> 8 & 255;
  r5 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r7 << 2 >> 2) + r4] ^ HEAP32[((r8 << 2) + 2048 >> 2) + r4]) + HEAP32[((r5 << 2) + 3072 >> 2) + r4] ^ (r9 << 24 | r12 | r10 << 16 | r11 << 8) ^ HEAP32[r4 + 1032];
  r11 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r12 = r1 >>> 8 & 255;
  r9 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r11 << 2 >> 2) + r4] ^ HEAP32[((r12 << 2) + 2048 >> 2) + r4]) + HEAP32[((r9 << 2) + 3072 >> 2) + r4] ^ (r7 << 24 | r5 | r6 << 16 | r8 << 8) ^ HEAP32[r4 + 1031];
  r8 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r5 = r1 >>> 8 & 255;
  r7 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r8 << 2 >> 2) + r4] ^ HEAP32[((r5 << 2) + 2048 >> 2) + r4]) + HEAP32[((r7 << 2) + 3072 >> 2) + r4] ^ (r11 << 24 | r9 | r10 << 16 | r12 << 8) ^ HEAP32[r4 + 1030];
  r12 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r9 = r1 >>> 8 & 255;
  r11 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r12 << 2 >> 2) + r4] ^ HEAP32[((r9 << 2) + 2048 >> 2) + r4]) + HEAP32[((r11 << 2) + 3072 >> 2) + r4] ^ (r8 << 24 | r7 | r6 << 16 | r5 << 8) ^ HEAP32[r4 + 1029];
  r5 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r7 = r1 >>> 8 & 255;
  r8 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r5 << 2 >> 2) + r4] ^ HEAP32[((r7 << 2) + 2048 >> 2) + r4]) + HEAP32[((r8 << 2) + 3072 >> 2) + r4] ^ (r12 << 24 | r11 | r10 << 16 | r9 << 8) ^ HEAP32[r4 + 1028];
  r9 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r11 = r1 >>> 8 & 255;
  r12 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r9 << 2 >> 2) + r4] ^ HEAP32[((r11 << 2) + 2048 >> 2) + r4]) + HEAP32[((r12 << 2) + 3072 >> 2) + r4] ^ (r5 << 24 | r8 | r6 << 16 | r7 << 8) ^ HEAP32[r4 + 1027];
  r7 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r8 = r1 >>> 8 & 255;
  r5 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r7 << 2 >> 2) + r4] ^ HEAP32[((r8 << 2) + 2048 >> 2) + r4]) + HEAP32[((r5 << 2) + 3072 >> 2) + r4] ^ (r9 << 24 | r12 | r10 << 16 | r11 << 8) ^ HEAP32[r4 + 1026];
  r11 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r12 = r1 >>> 8 & 255;
  r9 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r11 << 2 >> 2) + r4] ^ HEAP32[((r12 << 2) + 2048 >> 2) + r4]) + HEAP32[((r9 << 2) + 3072 >> 2) + r4] ^ (r7 << 24 | r5 | r6 << 16 | r8 << 8) ^ HEAP32[r4 + 1025];
  HEAP32[r2 >> 2] = (r11 << 24 | r9 | r10 << 16 | r12 << 8) ^ HEAP32[r4 + 1024];
  HEAP32[r3 >> 2] = r1;
  return;
}
function _do_encrypt1534(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = r1 >> 2;
  r1 = HEAP32[r4 + 1024] ^ HEAP32[r2 >> 2];
  r5 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r7 = r1 >>> 8 & 255;
  r8 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r5 << 2 >> 2) + r4] ^ HEAP32[((r7 << 2) + 2048 >> 2) + r4]) + HEAP32[((r8 << 2) + 3072 >> 2) + r4] ^ HEAP32[r3 >> 2] ^ HEAP32[r4 + 1025];
  r9 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r11 = r1 >>> 8 & 255;
  r12 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r9 << 2 >> 2) + r4] ^ HEAP32[((r11 << 2) + 2048 >> 2) + r4]) + HEAP32[((r12 << 2) + 3072 >> 2) + r4] ^ (r5 << 24 | r8 | r6 << 16 | r7 << 8) ^ HEAP32[r4 + 1026];
  r7 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r8 = r1 >>> 8 & 255;
  r5 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r7 << 2 >> 2) + r4] ^ HEAP32[((r8 << 2) + 2048 >> 2) + r4]) + HEAP32[((r5 << 2) + 3072 >> 2) + r4] ^ (r9 << 24 | r12 | r10 << 16 | r11 << 8) ^ HEAP32[r4 + 1027];
  r11 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r12 = r1 >>> 8 & 255;
  r9 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r11 << 2 >> 2) + r4] ^ HEAP32[((r12 << 2) + 2048 >> 2) + r4]) + HEAP32[((r9 << 2) + 3072 >> 2) + r4] ^ (r7 << 24 | r5 | r6 << 16 | r8 << 8) ^ HEAP32[r4 + 1028];
  r8 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r5 = r1 >>> 8 & 255;
  r7 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r8 << 2 >> 2) + r4] ^ HEAP32[((r5 << 2) + 2048 >> 2) + r4]) + HEAP32[((r7 << 2) + 3072 >> 2) + r4] ^ (r11 << 24 | r9 | r10 << 16 | r12 << 8) ^ HEAP32[r4 + 1029];
  r12 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r9 = r1 >>> 8 & 255;
  r11 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r12 << 2 >> 2) + r4] ^ HEAP32[((r9 << 2) + 2048 >> 2) + r4]) + HEAP32[((r11 << 2) + 3072 >> 2) + r4] ^ (r8 << 24 | r7 | r6 << 16 | r5 << 8) ^ HEAP32[r4 + 1030];
  r5 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r7 = r1 >>> 8 & 255;
  r8 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r5 << 2 >> 2) + r4] ^ HEAP32[((r7 << 2) + 2048 >> 2) + r4]) + HEAP32[((r8 << 2) + 3072 >> 2) + r4] ^ (r12 << 24 | r11 | r10 << 16 | r9 << 8) ^ HEAP32[r4 + 1031];
  r9 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r11 = r1 >>> 8 & 255;
  r12 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r9 << 2 >> 2) + r4] ^ HEAP32[((r11 << 2) + 2048 >> 2) + r4]) + HEAP32[((r12 << 2) + 3072 >> 2) + r4] ^ (r5 << 24 | r8 | r6 << 16 | r7 << 8) ^ HEAP32[r4 + 1032];
  r7 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r8 = r1 >>> 8 & 255;
  r5 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r7 << 2 >> 2) + r4] ^ HEAP32[((r8 << 2) + 2048 >> 2) + r4]) + HEAP32[((r5 << 2) + 3072 >> 2) + r4] ^ (r9 << 24 | r12 | r10 << 16 | r11 << 8) ^ HEAP32[r4 + 1033];
  r11 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r12 = r1 >>> 8 & 255;
  r9 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r11 << 2 >> 2) + r4] ^ HEAP32[((r12 << 2) + 2048 >> 2) + r4]) + HEAP32[((r9 << 2) + 3072 >> 2) + r4] ^ (r7 << 24 | r5 | r6 << 16 | r8 << 8) ^ HEAP32[r4 + 1034];
  r8 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r5 = r1 >>> 8 & 255;
  r7 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r8 << 2 >> 2) + r4] ^ HEAP32[((r5 << 2) + 2048 >> 2) + r4]) + HEAP32[((r7 << 2) + 3072 >> 2) + r4] ^ (r11 << 24 | r9 | r10 << 16 | r12 << 8) ^ HEAP32[r4 + 1035];
  r12 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r9 = r1 >>> 8 & 255;
  r11 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r12 << 2 >> 2) + r4] ^ HEAP32[((r9 << 2) + 2048 >> 2) + r4]) + HEAP32[((r11 << 2) + 3072 >> 2) + r4] ^ (r8 << 24 | r7 | r6 << 16 | r5 << 8) ^ HEAP32[r4 + 1036];
  r5 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r7 = r1 >>> 8 & 255;
  r8 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r5 << 2 >> 2) + r4] ^ HEAP32[((r7 << 2) + 2048 >> 2) + r4]) + HEAP32[((r8 << 2) + 3072 >> 2) + r4] ^ (r12 << 24 | r11 | r10 << 16 | r9 << 8) ^ HEAP32[r4 + 1037];
  r9 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r11 = r1 >>> 8 & 255;
  r12 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r9 << 2 >> 2) + r4] ^ HEAP32[((r11 << 2) + 2048 >> 2) + r4]) + HEAP32[((r12 << 2) + 3072 >> 2) + r4] ^ (r5 << 24 | r8 | r6 << 16 | r7 << 8) ^ HEAP32[r4 + 1038];
  r7 = r1 >>> 24;
  r6 = r1 >>> 16 & 255;
  r8 = r1 >>> 8 & 255;
  r5 = r1 & 255;
  r1 = (HEAP32[((r6 << 2) + 1024 >> 2) + r4] + HEAP32[(r7 << 2 >> 2) + r4] ^ HEAP32[((r8 << 2) + 2048 >> 2) + r4]) + HEAP32[((r5 << 2) + 3072 >> 2) + r4] ^ (r9 << 24 | r12 | r10 << 16 | r11 << 8) ^ HEAP32[r4 + 1039];
  r11 = r1 >>> 24;
  r10 = r1 >>> 16 & 255;
  r12 = r1 >>> 8 & 255;
  r9 = r1 & 255;
  r1 = (HEAP32[((r10 << 2) + 1024 >> 2) + r4] + HEAP32[(r11 << 2 >> 2) + r4] ^ HEAP32[((r12 << 2) + 2048 >> 2) + r4]) + HEAP32[((r9 << 2) + 3072 >> 2) + r4] ^ (r7 << 24 | r5 | r6 << 16 | r8 << 8) ^ HEAP32[r4 + 1040];
  HEAP32[r2 >> 2] = (r11 << 24 | r9 | r10 << 16 | r12 << 8) ^ HEAP32[r4 + 1041];
  HEAP32[r3 >> 2] = r1;
  return;
}
function _do_encrypt_block(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4, r8 = r7 >> 2;
  HEAP32[r6] = HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0];
  HEAP32[r8] = HEAPU8[r3 + 5 | 0] << 16 | HEAPU8[r3 + 4 | 0] << 24 | HEAPU8[r3 + 6 | 0] << 8 | HEAPU8[r3 + 7 | 0];
  _do_encrypt1534(r1, r5, r7);
  HEAP8[r2] = HEAP32[r6] >>> 24 & 255;
  HEAP8[r2 + 1 | 0] = HEAP32[r6] >>> 16 & 255;
  HEAP8[r2 + 2 | 0] = HEAP32[r6] >>> 8 & 255;
  HEAP8[r2 + 3 | 0] = HEAP32[r6] & 255;
  HEAP8[r2 + 4 | 0] = HEAP32[r8] >>> 24 & 255;
  HEAP8[r2 + 5 | 0] = HEAP32[r8] >>> 16 & 255;
  HEAP8[r2 + 6 | 0] = HEAP32[r8] >>> 8 & 255;
  HEAP8[r2 + 7 | 0] = HEAP32[r8] & 255;
  STACKTOP = r4;
  return;
}
function _do_bf_setkey(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = r1 >> 2;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r7 = r6, r8 = r7 >> 2;
  r9 = r6 + 4, r10 = r9 >> 2;
  do {
    if (HEAP8[457924]) {
      r5 = 3295;
    } else {
      HEAP8[457924] = 1;
      r11 = _selftest1535();
      HEAP32[114480] = r11;
      if ((r11 | 0) == 0) {
        break;
      }
      __gcry_log_error(489428, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r11, tempInt));
      r5 = 3295;
      break;
    }
  } while (0);
  do {
    if (r5 == 3295) {
      if ((HEAP32[114480] | 0) == 0) {
        break;
      } else {
        r12 = 50;
      }
      STACKTOP = r6;
      return r12;
    }
  } while (0);
  HEAP32[r4 + 1024] = 608135816;
  HEAP32[r4 + 1025] = -2052912941;
  HEAP32[r4 + 1026] = 320440878;
  HEAP32[r4 + 1027] = 57701188;
  HEAP32[r4 + 1028] = -1542899678;
  HEAP32[r4 + 1029] = 698298832;
  HEAP32[r4 + 1030] = 137296536;
  HEAP32[r4 + 1031] = -330404727;
  HEAP32[r4 + 1032] = 1160258022;
  HEAP32[r4 + 1033] = 953160567;
  HEAP32[r4 + 1034] = -1101764913;
  HEAP32[r4 + 1035] = 887688300;
  HEAP32[r4 + 1036] = -1062458953;
  HEAP32[r4 + 1037] = -914599715;
  HEAP32[r4 + 1038] = 1065670069;
  HEAP32[r4 + 1039] = -1253635817;
  HEAP32[r4 + 1040] = -1843997223;
  HEAP32[r4 + 1041] = -1988494565;
  r11 = 0;
  while (1) {
    HEAP32[(r11 << 2 >> 2) + r4] = HEAP32[(r11 << 2) + 454452 >> 2];
    HEAP32[((r11 << 2) + 1024 >> 2) + r4] = HEAP32[(r11 << 2) + 453428 >> 2];
    HEAP32[((r11 << 2) + 2048 >> 2) + r4] = HEAP32[(r11 << 2) + 452404 >> 2];
    HEAP32[((r11 << 2) + 3072 >> 2) + r4] = HEAP32[(r11 << 2) + 451380 >> 2];
    r13 = r11 + 1 | 0;
    if ((r13 | 0) == 256) {
      r14 = 0;
      r15 = 0;
      break;
    } else {
      r11 = r13;
    }
  }
  while (1) {
    r11 = (r15 << 2) + r1 + 4096 | 0;
    HEAP32[r11 >> 2] = (HEAPU8[r2 + ((r14 + 1 | 0) >>> 0) % (r3 >>> 0) | 0] << 16 | HEAPU8[r2 + r14 | 0] << 24 | HEAPU8[r2 + ((r14 + 2 | 0) >>> 0) % (r3 >>> 0) | 0] << 8 | HEAPU8[r2 + ((r14 + 3 | 0) >>> 0) % (r3 >>> 0) | 0]) ^ HEAP32[r11 >> 2];
    r11 = r15 + 1 | 0;
    if ((r11 | 0) == 18) {
      break;
    } else {
      r14 = ((r14 + 4 | 0) >>> 0) % (r3 >>> 0);
      r15 = r11;
    }
  }
  HEAP32[r10] = 0;
  HEAP32[r8] = 0;
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1024] = HEAP32[r8];
  HEAP32[r4 + 1025] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1026] = HEAP32[r8];
  HEAP32[r4 + 1027] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1028] = HEAP32[r8];
  HEAP32[r4 + 1029] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1030] = HEAP32[r8];
  HEAP32[r4 + 1031] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1032] = HEAP32[r8];
  HEAP32[r4 + 1033] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1034] = HEAP32[r8];
  HEAP32[r4 + 1035] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1036] = HEAP32[r8];
  HEAP32[r4 + 1037] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1038] = HEAP32[r8];
  HEAP32[r4 + 1039] = HEAP32[r10];
  _do_encrypt1534(r1, r7, r9);
  HEAP32[r4 + 1040] = HEAP32[r8];
  HEAP32[r4 + 1041] = HEAP32[r10];
  r15 = 0;
  while (1) {
    _do_encrypt1534(r1, r7, r9);
    HEAP32[(r15 << 2 >> 2) + r4] = HEAP32[r8];
    HEAP32[((r15 | 1) << 2 >> 2) + r4] = HEAP32[r10];
    r3 = r15 + 2 | 0;
    if ((r3 | 0) < 256) {
      r15 = r3;
    } else {
      r16 = 0;
      break;
    }
  }
  while (1) {
    _do_encrypt1534(r1, r7, r9);
    HEAP32[((r16 << 2) + 1024 >> 2) + r4] = HEAP32[r8];
    HEAP32[(((r16 | 1) << 2) + 1024 >> 2) + r4] = HEAP32[r10];
    r15 = r16 + 2 | 0;
    if ((r15 | 0) < 256) {
      r16 = r15;
    } else {
      r17 = 0;
      break;
    }
  }
  while (1) {
    _do_encrypt1534(r1, r7, r9);
    HEAP32[((r17 << 2) + 2048 >> 2) + r4] = HEAP32[r8];
    HEAP32[(((r17 | 1) << 2) + 2048 >> 2) + r4] = HEAP32[r10];
    r16 = r17 + 2 | 0;
    if ((r16 | 0) < 256) {
      r17 = r16;
    } else {
      r18 = 0;
      break;
    }
  }
  while (1) {
    _do_encrypt1534(r1, r7, r9);
    HEAP32[((r18 << 2) + 3072 >> 2) + r4] = HEAP32[r8];
    HEAP32[(((r18 | 1) << 2) + 3072 >> 2) + r4] = HEAP32[r10];
    r17 = r18 + 2 | 0;
    if ((r17 | 0) < 256) {
      r18 = r17;
    } else {
      r19 = 0;
      break;
    }
  }
  L4222 : while (1) {
    r18 = r19 + 1 | 0;
    r10 = (r19 << 2) + r1 | 0;
    r8 = (r19 << 2) + r1 + 1024 | 0;
    r9 = (r19 << 2) + r1 + 2048 | 0;
    r7 = (r19 << 2) + r1 + 3072 | 0;
    r17 = r18;
    while (1) {
      if ((r17 | 0) >= 256) {
        break;
      }
      if ((HEAP32[r10 >> 2] | 0) == (HEAP32[(r17 << 2 >> 2) + r4] | 0)) {
        r12 = 43;
        r5 = 3315;
        break L4222;
      }
      if ((HEAP32[r8 >> 2] | 0) == (HEAP32[((r17 << 2) + 1024 >> 2) + r4] | 0)) {
        r12 = 43;
        r5 = 3314;
        break L4222;
      }
      if ((HEAP32[r9 >> 2] | 0) == (HEAP32[((r17 << 2) + 2048 >> 2) + r4] | 0)) {
        r12 = 43;
        r5 = 3317;
        break L4222;
      }
      if ((HEAP32[r7 >> 2] | 0) == (HEAP32[((r17 << 2) + 3072 >> 2) + r4] | 0)) {
        r12 = 43;
        r5 = 3316;
        break L4222;
      } else {
        r17 = r17 + 1 | 0;
      }
    }
    if ((r18 | 0) < 255) {
      r19 = r18;
    } else {
      r12 = 0;
      r5 = 3313;
      break;
    }
  }
  if (r5 == 3317) {
    STACKTOP = r6;
    return r12;
  } else if (r5 == 3316) {
    STACKTOP = r6;
    return r12;
  } else if (r5 == 3315) {
    STACKTOP = r6;
    return r12;
  } else if (r5 == 3314) {
    STACKTOP = r6;
    return r12;
  } else if (r5 == 3313) {
    STACKTOP = r6;
    return r12;
  }
}
function _selftest1535() {
  var r1, r2, r3, r4, r5, r6, r7, r8;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 4212 | 0;
  r2 = r1 + 4188;
  r3 = r1 + 4196;
  r4 = r1 + 4204;
  r5 = r1 + 4168 | 0;
  _memcpy(r5, 415676, 9);
  HEAP32[r2 >> 2] = -1732584194;
  HEAP32[r2 + 4 >> 2] = 271733878;
  HEAP32[r3 >> 2] = -1603372735;
  HEAP32[r3 + 4 >> 2] = -462528174;
  HEAP32[r4 >> 2] = 284431329;
  HEAP32[r4 + 4 >> 2] = 1137638444;
  r6 = r1;
  _bf_setkey(r6, 481116, 26);
  r7 = r1 + 4180 | 0;
  _encrypt_block(r6, r7, r5);
  if ((_memcmp(r7, 477048, 8) | 0) != 0) {
    r8 = 474212;
    STACKTOP = r1;
    return r8;
  }
  _decrypt_block(r6, r7, r7);
  if ((_memcmp(r7, r5, 8) | 0) != 0) {
    r8 = 472340;
    STACKTOP = r1;
    return r8;
  }
  _bf_setkey(r6, r3, 8);
  r3 = r2;
  _encrypt_block(r6, r7, r3);
  if ((_memcmp(r7, r4, 8) | 0) != 0) {
    r8 = 470840;
    STACKTOP = r1;
    return r8;
  }
  _decrypt_block(r6, r7, r7);
  r8 = (_memcmp(r7, r3, 8) | 0) == 0 ? 0 : 469440;
  STACKTOP = r1;
  return r8;
}
function _camellia_setkey(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = 0;
  r5 = STACKTOP;
  if (!((r3 | 0) == 32 | (r3 | 0) == 24 | (r3 | 0) == 16)) {
    r6 = 44;
    STACKTOP = r5;
    return r6;
  }
  do {
    if (HEAP8[464012]) {
      r4 = 3331;
    } else {
      HEAP8[464012] = 1;
      r7 = _selftest1567();
      HEAP32[116002] = r7;
      if ((r7 | 0) == 0) {
        break;
      }
      __gcry_log_error(490028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
      r4 = 3331;
      break;
    }
  } while (0);
  do {
    if (r4 == 3331) {
      if ((HEAP32[116002] | 0) == 0) {
        break;
      } else {
        r6 = 50;
      }
      STACKTOP = r5;
      return r6;
    }
  } while (0);
  r4 = r3 << 3;
  HEAP32[r1 >> 2] = r4;
  __gcry_Camellia_Ekeygen(r4, r2, r1 + 4 | 0);
  __gcry_burn_stack(544);
  r6 = 0;
  STACKTOP = r5;
  return r6;
}
function _camellia_encrypt(r1, r2, r3) {
  __gcry_Camellia_EncryptBlock(HEAP32[r1 >> 2], r3, r1 + 4 | 0, r2);
  __gcry_burn_stack(340);
  return;
}
function _camellia_decrypt(r1, r2, r3) {
  __gcry_Camellia_DecryptBlock(HEAP32[r1 >> 2], r3, r1 + 4 | 0, r2);
  __gcry_burn_stack(340);
  return;
}
function _selftest1567() {
  var r1, r2, r3, r4;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 292 | 0;
  r2 = r1;
  _camellia_setkey(r2, 415808, 16);
  r3 = r1 + 276 | 0;
  _camellia_encrypt(r2, r3, 415628);
  do {
    if ((_memcmp(r3, 416624, 16) | 0) == 0) {
      _camellia_decrypt(r2, r3, r3);
      if ((_memcmp(r3, 415628, 16) | 0) != 0) {
        r4 = 487652;
        break;
      }
      _camellia_setkey(r2, 415784, 24);
      _camellia_encrypt(r2, r3, 415628);
      if ((_memcmp(r3, 416608, 16) | 0) != 0) {
        r4 = 486716;
        break;
      }
      _camellia_decrypt(r2, r3, r3);
      if ((_memcmp(r3, 415628, 16) | 0) != 0) {
        r4 = 485872;
        break;
      }
      _camellia_setkey(r2, 415704, 32);
      _camellia_encrypt(r2, r3, 415628);
      if ((_memcmp(r3, 416568, 16) | 0) != 0) {
        r4 = 484988;
        break;
      }
      _camellia_decrypt(r2, r3, r3);
      r4 = (_memcmp(r3, 415628, 16) | 0) == 0 ? 0 : 484300;
    } else {
      r4 = 488332;
    }
  } while (0);
  STACKTOP = r1;
  return r4;
}
function __gcry_camellia_setup128(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64;
  r3 = r2 >> 2;
  r4 = HEAPU8[r1 + 1 | 0] << 16 | HEAPU8[r1] << 24;
  r5 = r4 | HEAPU8[r1 + 2 | 0] << 8 | HEAPU8[r1 + 3 | 0];
  r6 = HEAPU8[r1 + 5 | 0] << 16 | HEAPU8[r1 + 4 | 0] << 24;
  r7 = r6 | HEAPU8[r1 + 6 | 0] << 8 | HEAPU8[r1 + 7 | 0];
  r8 = HEAPU8[r1 + 9 | 0] << 16 | HEAPU8[r1 + 8 | 0] << 24;
  r9 = r8 | HEAPU8[r1 + 10 | 0] << 8 | HEAPU8[r1 + 11 | 0];
  r10 = HEAPU8[r1 + 13 | 0] << 16 | HEAPU8[r1 + 12 | 0] << 24;
  r11 = r10 | HEAPU8[r1 + 14 | 0] << 8 | HEAPU8[r1 + 15 | 0];
  r1 = r6 >>> 17;
  r6 = r1 | r5 << 15;
  r12 = r8 >>> 17;
  r8 = r12 | r7 << 15;
  r13 = r10 >>> 17;
  r10 = r13 | r9 << 15;
  r14 = r4 >>> 17;
  r4 = r11 << 15 | r14;
  r15 = r8 >>> 2;
  r16 = r15 | r1 << 30;
  r1 = r10 >>> 2;
  r17 = r1 | r12 << 30;
  r12 = r4 >>> 2;
  r18 = r12 | r13 << 30;
  r13 = r6 >>> 2;
  r19 = r13 | r14 << 30;
  r14 = r19 >>> 17;
  r20 = r12 << 15 | r14;
  r21 = r16 >>> 17;
  r22 = r21 | r13 << 15;
  r23 = r14 << 17 | r13 & 131071;
  r14 = r21 << 17 | r15 & 131071;
  r21 = r18 >>> 15;
  r24 = r21 | r1 << 17;
  r1 = r23 >>> 15;
  r25 = r12 << 17 | r1;
  r12 = r14 >>> 15;
  r26 = r12 | r13 << 17;
  r13 = r17 >>> 15;
  r27 = r13 | r15 << 17;
  r15 = r21 << 17 | r25 >>> 15;
  r21 = r26 >>> 15 | r1 << 17;
  r1 = r27 >>> 15 | r12 << 17;
  r12 = r24 >>> 15 | r13 << 17;
  r13 = r5 ^ -1600231809;
  r28 = r7 ^ 1003262091;
  r29 = HEAP32[((r13 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r13 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r13 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r13 & 255) << 2) + 459912 >> 2];
  r13 = HEAP32[(r28 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r28 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r28 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r28 >>> 8 & 255) << 2) + 459912 >> 2] ^ r29;
  r28 = (r29 >>> 8 | r29 << 24) ^ r13;
  r29 = r9 ^ -1233459112 ^ r13;
  r30 = r11 ^ 1286239154 ^ r28;
  r31 = HEAP32[((r29 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r29 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r29 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r29 & 255) << 2) + 459912 >> 2];
  r29 = HEAP32[(r30 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r30 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r30 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r30 >>> 8 & 255) << 2) + 459912 >> 2] ^ r31;
  r30 = (r31 >>> 8 | r31 << 24) ^ r29;
  r31 = r29 ^ -957401297;
  r32 = r30 ^ -380665154;
  r33 = HEAP32[((r31 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r31 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r31 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r31 & 255) << 2) + 459912 >> 2];
  r31 = HEAP32[(r32 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r32 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r32 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r32 >>> 8 & 255) << 2) + 459912 >> 2] ^ r33;
  r32 = r31 ^ r13;
  r13 = r31 ^ r28 ^ (r33 >>> 8 | r33 << 24);
  r33 = r32 ^ 1426019237;
  r28 = r13 ^ -237801700;
  r31 = HEAP32[((r33 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r33 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r33 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r33 & 255) << 2) + 459912 >> 2];
  r33 = HEAP32[(r28 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r28 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r28 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r28 >>> 8 & 255) << 2) + 459912 >> 2] ^ r31;
  r28 = r33 ^ r29;
  r29 = r33 ^ r30 ^ (r31 >>> 8 | r31 << 24);
  r31 = r29 >>> 17 | r28 << 15;
  r30 = r29 << 15 | r32 >>> 17;
  r33 = r13 >>> 17 | r32 << 15;
  r34 = r28 >>> 17 | r13 << 15;
  r35 = r29 >>> 2;
  r36 = r31 << 15 | r35 & 32767;
  r37 = r32 >>> 2;
  r38 = r30 << 15 | r37 & 32767;
  r39 = r13 >>> 2;
  r40 = r33 << 15 | r39 & 32767;
  r41 = r28 >>> 2;
  r42 = r34 << 15 | r41 & 32767;
  r43 = r36 << 15 | r30 >>> 2 & 32767;
  r44 = r38 << 15 | r33 >>> 2 & 32767;
  r45 = r43 << 15 | r38 >>> 2 & 32767;
  r46 = r44 << 15 | r40 >>> 2 & 32767;
  r47 = (r34 >>> 2 & 32767 | r39 << 15) << 15 | r42 >>> 2 & 32767;
  r48 = (r31 >>> 2 & 32767 | r41 << 15) << 15 | r36 >>> 2 & 32767;
  r49 = r46 << 2 | r39 & 3;
  r39 = r47 << 2 | r41 & 3;
  r41 = r48 << 2 | r35 & 3;
  r35 = r45 << 2 | r37 & 3;
  r37 = r41 << 17 | r45 >>> 13 & 131071;
  r50 = r35 << 17 | r46 >>> 13 & 131071;
  r51 = r34 ^ r11;
  r52 = r42 ^ -1;
  r53 = r11 & r52 ^ r9;
  r54 = r53 & r40;
  r55 = (r54 << 1 | r54 >>> 31) ^ r11;
  r54 = r14 ^ -1;
  r56 = r55 & r54 ^ r53;
  r57 = r56 & r23;
  r58 = r50 ^ r25;
  r59 = r18 ^ -1;
  r60 = r50 & r59 ^ r37;
  r61 = r60 & r17;
  r62 = (r61 << 1 | r61 >>> 31) ^ r50;
  r61 = r38 ^ -1;
  r63 = r62 & r61 ^ r60;
  r64 = r63 & r36;
  HEAP32[r3] = r28 ^ r5;
  HEAP32[r3 + 1] = r29 ^ r7;
  r7 = (r2 + 16 | 0) >> 2;
  HEAP32[r7] = r32 ^ r9;
  r5 = (r2 + 20 | 0) >> 2;
  HEAP32[r5] = r13 ^ r11;
  r11 = (r2 + 24 | 0) >> 2;
  HEAP32[r11] = r28 ^ r6;
  r28 = (r2 + 28 | 0) >> 2;
  HEAP32[r28] = r29 ^ r8;
  r29 = (r2 + 32 | 0) >> 2;
  HEAP32[r29] = r32 ^ r10;
  r32 = (r2 + 36 | 0) >> 2;
  HEAP32[r32] = r13 ^ r4;
  r13 = (r2 + 40 | 0) >> 2;
  HEAP32[r13] = r31 ^ r6;
  r6 = (r2 + 44 | 0) >> 2;
  HEAP32[r6] = r30 ^ r8;
  r8 = (r2 + 48 | 0) >> 2;
  HEAP32[r8] = r33 ^ r10;
  r10 = (r2 + 52 | 0) >> 2;
  HEAP32[r10] = r34 ^ r4;
  r4 = r60 ^ r16 ^ (r62 ^ r17) & r61;
  r61 = r4 & r36;
  r34 = (r2 + 56 | 0) >> 2;
  HEAP32[r34] = r63 ^ r31 ^ r4;
  r4 = (r2 + 60 | 0) >> 2;
  HEAP32[r4] = r30 ^ r17 ^ (r64 << 1 | r64 >>> 31) ^ (r61 << 1 | r61 >>> 31);
  HEAP32[r3 + 16] = r36;
  HEAP32[r3 + 17] = r38;
  HEAP32[r3 + 18] = r40;
  HEAP32[r3 + 19] = r42;
  r42 = r33 ^ r9 ^ r51 & r52;
  r52 = r42 & r40;
  r40 = (r2 + 80 | 0) >> 2;
  HEAP32[r40] = r53 ^ r18 ^ r42;
  r42 = (r2 + 84 | 0) >> 2;
  HEAP32[r42] = r51 ^ r19 ^ (r52 << 1 | r52 >>> 31) ^ r55;
  r52 = (r2 + 88 | 0) >> 2;
  HEAP32[r52] = r43 ^ r16;
  r16 = (r2 + 92 | 0) >> 2;
  HEAP32[r16] = r44 ^ r17;
  r51 = (r2 + 96 | 0) >> 2;
  HEAP32[r51] = r20 ^ r18;
  r9 = (r2 + 100 | 0) >> 2;
  HEAP32[r9] = r22 ^ r19;
  r19 = (r2 + 104 | 0) >> 2;
  HEAP32[r19] = r45 ^ r43;
  r43 = (r2 + 108 | 0) >> 2;
  HEAP32[r43] = r46 ^ r44;
  r44 = (r2 + 112 | 0) >> 2;
  HEAP32[r44] = r47 ^ r20;
  r20 = (r2 + 116 | 0) >> 2;
  HEAP32[r20] = r48 ^ r22;
  r22 = r37 ^ r24 ^ r58 & r59;
  r59 = r22 & r17;
  r33 = (r2 + 120 | 0) >> 2;
  HEAP32[r33] = r60 ^ r45 ^ r22;
  r22 = (r2 + 124 | 0) >> 2;
  HEAP32[r22] = r58 ^ r46 ^ r62 ^ (r59 << 1 | r59 >>> 31);
  HEAP32[r3 + 32] = r17;
  HEAP32[r3 + 33] = r18;
  HEAP32[r3 + 34] = r23;
  HEAP32[r3 + 35] = r14;
  r14 = r47 ^ r53 ^ (r55 ^ r48) & r54;
  r54 = r14 & r23;
  r23 = (r2 + 144 | 0) >> 2;
  HEAP32[r23] = r56 ^ r26 ^ r14;
  r14 = (r2 + 148 | 0) >> 2;
  HEAP32[r14] = r27 ^ r48 ^ (r57 << 1 | r57 >>> 31) ^ (r54 << 1 | r54 >>> 31);
  r54 = (r2 + 152 | 0) >> 2;
  HEAP32[r54] = r49 ^ r24;
  r24 = (r2 + 156 | 0) >> 2;
  HEAP32[r24] = r39 ^ r25;
  r25 = (r2 + 160 | 0) >> 2;
  HEAP32[r25] = r41 ^ r26;
  r26 = (r2 + 164 | 0) >> 2;
  HEAP32[r26] = r35 ^ r27;
  r27 = (r2 + 168 | 0) >> 2;
  HEAP32[r27] = r49 ^ r15;
  r57 = (r2 + 172 | 0) >> 2;
  HEAP32[r57] = r39 ^ r21;
  r56 = (r2 + 176 | 0) >> 2;
  HEAP32[r56] = r41 ^ r1;
  r41 = (r2 + 180 | 0) >> 2;
  HEAP32[r41] = r35 ^ r12;
  r35 = (r2 + 184 | 0) >> 2;
  HEAP32[r35] = r37 ^ r15;
  r15 = (r2 + 188 | 0) >> 2;
  HEAP32[r15] = r50 ^ r21;
  HEAP32[r3 + 48] = (r49 << 17 | r47 >>> 13 & 131071) ^ r1;
  HEAP32[r3 + 49] = (r39 << 17 | r48 >>> 13 & 131071) ^ r12;
  r12 = HEAP32[r7];
  r48 = HEAP32[r5] ^ r12;
  r39 = r48 << 8 | r48 >>> 24;
  HEAP32[r5] = r39 ^ r12;
  HEAP32[r7] = r39;
  r39 = HEAP32[r11];
  r7 = HEAP32[r28] ^ r39;
  r12 = r7 << 8 | r7 >>> 24;
  HEAP32[r28] = r12 ^ r39;
  HEAP32[r11] = r12;
  r12 = HEAP32[r29];
  r11 = HEAP32[r32] ^ r12;
  r39 = r11 << 8 | r11 >>> 24;
  HEAP32[r32] = r39 ^ r12;
  HEAP32[r29] = r39;
  r39 = HEAP32[r13];
  r29 = HEAP32[r6] ^ r39;
  r12 = r29 << 8 | r29 >>> 24;
  HEAP32[r6] = r12 ^ r39;
  HEAP32[r13] = r12;
  r12 = HEAP32[r8];
  r13 = HEAP32[r10] ^ r12;
  r39 = r13 << 8 | r13 >>> 24;
  HEAP32[r10] = r39 ^ r12;
  HEAP32[r8] = r39;
  r39 = HEAP32[r34];
  r8 = HEAP32[r4] ^ r39;
  r12 = r8 << 8 | r8 >>> 24;
  HEAP32[r4] = r12 ^ r39;
  HEAP32[r34] = r12;
  r12 = HEAP32[r40];
  r34 = HEAP32[r42] ^ r12;
  r39 = r34 << 8 | r34 >>> 24;
  HEAP32[r42] = r39 ^ r12;
  HEAP32[r40] = r39;
  r39 = HEAP32[r52];
  r40 = HEAP32[r16] ^ r39;
  r12 = r40 << 8 | r40 >>> 24;
  HEAP32[r16] = r12 ^ r39;
  HEAP32[r52] = r12;
  r12 = HEAP32[r51];
  r52 = HEAP32[r9] ^ r12;
  r39 = r52 << 8 | r52 >>> 24;
  HEAP32[r9] = r39 ^ r12;
  HEAP32[r51] = r39;
  r39 = HEAP32[r19];
  r51 = HEAP32[r43] ^ r39;
  r12 = r51 << 8 | r51 >>> 24;
  HEAP32[r43] = r12 ^ r39;
  HEAP32[r19] = r12;
  r12 = HEAP32[r44];
  r19 = HEAP32[r20] ^ r12;
  r39 = r19 << 8 | r19 >>> 24;
  HEAP32[r20] = r39 ^ r12;
  HEAP32[r44] = r39;
  r39 = HEAP32[r33];
  r44 = HEAP32[r22] ^ r39;
  r12 = r44 << 8 | r44 >>> 24;
  HEAP32[r22] = r12 ^ r39;
  HEAP32[r33] = r12;
  r12 = HEAP32[r23];
  r33 = HEAP32[r14] ^ r12;
  r39 = r33 << 8 | r33 >>> 24;
  HEAP32[r14] = r39 ^ r12;
  HEAP32[r23] = r39;
  r39 = HEAP32[r54];
  r23 = HEAP32[r24] ^ r39;
  r12 = r23 << 8 | r23 >>> 24;
  HEAP32[r24] = r12 ^ r39;
  HEAP32[r54] = r12;
  r12 = HEAP32[r25];
  r54 = HEAP32[r26] ^ r12;
  r39 = r54 << 8 | r54 >>> 24;
  HEAP32[r26] = r39 ^ r12;
  HEAP32[r25] = r39;
  r39 = HEAP32[r27];
  r25 = HEAP32[r57] ^ r39;
  r12 = r25 << 8 | r25 >>> 24;
  HEAP32[r57] = r12 ^ r39;
  HEAP32[r27] = r12;
  r12 = HEAP32[r56];
  r27 = HEAP32[r41] ^ r12;
  r39 = r27 << 8 | r27 >>> 24;
  HEAP32[r41] = r39 ^ r12;
  HEAP32[r56] = r39;
  r39 = HEAP32[r35];
  r56 = HEAP32[r15] ^ r39;
  r12 = r56 << 8 | r56 >>> 24;
  HEAP32[r15] = r12 ^ r39;
  HEAP32[r35] = r12;
  return;
}
function __gcry_camellia_setup256(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89;
  r3 = r2 >> 2;
  r4 = HEAPU8[r1 + 1 | 0];
  r5 = r4 << 16 | HEAPU8[r1] << 24;
  r6 = r5 | HEAPU8[r1 + 2 | 0] << 8 | HEAPU8[r1 + 3 | 0];
  r7 = HEAPU8[r1 + 5 | 0];
  r8 = r7 << 16 | HEAPU8[r1 + 4 | 0] << 24;
  r9 = r8 | HEAPU8[r1 + 6 | 0] << 8 | HEAPU8[r1 + 7 | 0];
  r10 = HEAPU8[r1 + 9 | 0];
  r11 = r10 << 16 | HEAPU8[r1 + 8 | 0] << 24;
  r12 = r11 | HEAPU8[r1 + 10 | 0] << 8 | HEAPU8[r1 + 11 | 0];
  r13 = HEAPU8[r1 + 13 | 0];
  r14 = r13 << 16 | HEAPU8[r1 + 12 | 0] << 24;
  r15 = r14 | HEAPU8[r1 + 14 | 0] << 8 | HEAPU8[r1 + 15 | 0];
  r16 = HEAPU8[r1 + 17 | 0] << 16 | HEAPU8[r1 + 16 | 0] << 24;
  r17 = HEAPU8[r1 + 19 | 0];
  r18 = r16 | HEAPU8[r1 + 18 | 0] << 8 | r17;
  r19 = HEAPU8[r1 + 21 | 0] << 16;
  r20 = HEAPU8[r1 + 23 | 0];
  r21 = HEAPU8[r1 + 22 | 0] << 8 | r19 | r20;
  r22 = HEAPU8[r1 + 25 | 0] << 16;
  r23 = HEAPU8[r1 + 27 | 0];
  r24 = HEAPU8[r1 + 26 | 0] << 8 | r22 | r23;
  r25 = HEAPU8[r1 + 29 | 0] << 16;
  r26 = HEAPU8[r1 + 31 | 0];
  r27 = HEAPU8[r1 + 30 | 0] << 8 | r25 | r26;
  r28 = r11 >>> 19 | r9 << 13;
  r11 = r14 >>> 19 | r12 << 13;
  r14 = r15 << 13 | r5 >>> 19;
  r5 = r8 >>> 19 | r6 << 13;
  r8 = r12 >>> 4;
  r29 = r8 & 32767 | r28 << 15;
  r30 = r15 >>> 4;
  r31 = r30 & 32767 | r11 << 15;
  r32 = r6 >>> 4;
  r33 = r14 << 15 | r32 & 32767;
  r34 = r9 >>> 4;
  r35 = r34 & 32767 | r5 << 15;
  r36 = r11 & 131071 | r8 << 17;
  r8 = r14 & 131071 | r30 << 17;
  r30 = r5 & 131071 | r32 << 17;
  r32 = r28 & 131071 | r34 << 17;
  r34 = r8 << 2 | r4 >>> 1 & 3;
  r4 = r30 << 2 | r7 >>> 1 & 3;
  r7 = r32 << 2 | r10 >>> 1 & 3;
  r10 = r36 << 2 | r13 >>> 1 & 3;
  r13 = (r19 | HEAPU8[r1 + 20 | 0] << 24) >>> 17 | r18 << 15;
  r19 = (r22 | HEAPU8[r1 + 24 | 0] << 24) >>> 17 | r21 << 15;
  r22 = (r25 | HEAPU8[r1 + 28 | 0] << 24) >>> 17 | r24 << 15;
  r1 = r27 << 15 | r16 >>> 17;
  r16 = r21 >>> 2;
  r21 = r16 & 32767 | r13 << 15;
  r25 = r24 >>> 2;
  r24 = r25 & 32767 | r19 << 15;
  r37 = r27 >>> 2;
  r27 = r37 & 32767 | r22 << 15;
  r38 = r18 >>> 2;
  r18 = r1 << 15 | r38 & 32767;
  r39 = r24 >>> 2;
  r40 = r39 | r16 << 30;
  r41 = r27 >>> 2;
  r42 = r41 | r25 << 30;
  r43 = r18 >>> 2;
  r44 = r43 | r37 << 30;
  r45 = r21 >>> 2;
  r46 = r45 | r38 << 30;
  r47 = r41 << 2 | r37 & 3;
  r37 = r43 << 2 | r38 & 3;
  r38 = r45 << 2 | r16 & 3;
  r16 = r39 << 2 | r25 & 3;
  r25 = r37 << 2 | r17 & 3;
  r17 = r38 << 2 | r20 & 3;
  r20 = r16 << 2 | r23 & 3;
  r23 = r47 << 2 | r26 & 3;
  r26 = r6 ^ -1600231809 ^ r25;
  r39 = r9 ^ 1003262091 ^ r17;
  r45 = HEAP32[((r26 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r26 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r26 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r26 & 255) << 2) + 459912 >> 2];
  r26 = HEAP32[(r39 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r39 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r39 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r39 >>> 8 & 255) << 2) + 459912 >> 2] ^ r45;
  r39 = (r45 >>> 8 | r45 << 24) ^ r26;
  r45 = r12 ^ -1233459112 ^ r20 ^ r26;
  r43 = r15 ^ 1286239154 ^ r23 ^ r39;
  r41 = HEAP32[((r45 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r45 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r45 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r45 & 255) << 2) + 459912 >> 2];
  r45 = HEAP32[(r43 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r43 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r43 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r43 >>> 8 & 255) << 2) + 459912 >> 2] ^ r41;
  r43 = (r41 >>> 8 | r41 << 24) ^ r45;
  r41 = r45 ^ r25;
  r25 = r43 ^ r17;
  r17 = r41 ^ -957401297;
  r48 = r25 ^ -380665154;
  r49 = HEAP32[((r17 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r17 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r17 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r17 & 255) << 2) + 459912 >> 2];
  r17 = HEAP32[(r48 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r48 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r48 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r48 >>> 8 & 255) << 2) + 459912 >> 2] ^ r49;
  r48 = (r49 >>> 8 | r49 << 24) ^ r17;
  r49 = r26 ^ r20 ^ r17;
  r20 = r39 ^ r23 ^ r48;
  r23 = r49 ^ 1426019237;
  r50 = r20 ^ -237801700;
  r51 = HEAP32[((r23 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r23 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r23 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r23 & 255) << 2) + 459912 >> 2];
  r23 = HEAP32[(r50 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r50 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r50 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r50 >>> 8 & 255) << 2) + 459912 >> 2] ^ r51;
  r50 = (r51 >>> 8 | r51 << 24) ^ r23;
  r51 = r23 ^ r41;
  r41 = r50 ^ r25;
  r25 = r23 ^ r45;
  r45 = r50 ^ r43;
  r43 = r25 ^ 283453434;
  r50 = r45 ^ -563598051;
  r23 = HEAP32[((r43 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r43 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r43 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r43 & 255) << 2) + 459912 >> 2];
  r43 = HEAP32[(r50 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r50 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r50 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r50 >>> 8 & 255) << 2) + 459912 >> 2] ^ r23;
  r50 = r17 ^ r26 ^ r43;
  r26 = r48 ^ r39 ^ r43 ^ (r23 >>> 8 | r23 << 24);
  r23 = r50 ^ -1336506174;
  r43 = r26 ^ -1276722691;
  r39 = HEAP32[((r23 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r23 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r23 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r23 & 255) << 2) + 459912 >> 2];
  r23 = HEAP32[(r43 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r43 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r43 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r43 >>> 8 & 255) << 2) + 459912 >> 2] ^ r39;
  r43 = r23 ^ r25;
  r25 = r23 ^ r45 ^ (r39 >>> 8 | r39 << 24);
  r39 = r41 >>> 17;
  r45 = r39 | r51 << 15;
  r23 = r49 >>> 17;
  r48 = r41 << 15 | r23;
  r41 = r20 >>> 17;
  r17 = r41 | r49 << 15;
  r49 = r51 >>> 17;
  r51 = r49 | r20 << 15;
  r20 = r48 >>> 2;
  r52 = r20 | r39 << 30;
  r39 = r17 >>> 2;
  r53 = r39 | r23 << 30;
  r23 = r51 >>> 2;
  r54 = r23 | r41 << 30;
  r41 = r45 >>> 2;
  r55 = r41 | r49 << 30;
  r49 = r54 >>> 15 | r39 << 17;
  r39 = r55 >>> 15 | r23 << 17;
  r23 = r52 >>> 15 | r41 << 17;
  r41 = r20 << 17 | r53 >>> 15;
  r20 = r25 >>> 2;
  r56 = r20 | r43 << 30;
  r57 = r50 >>> 2;
  r58 = r25 << 30 | r57;
  r59 = r26 >>> 2;
  r60 = r59 | r50 << 30;
  r61 = r43 >>> 2;
  r62 = r61 | r26 << 30;
  r63 = r58 >>> 2;
  r64 = r63 | r20 << 30;
  r20 = r60 >>> 2;
  r65 = r20 | r57 << 30;
  r57 = r62 >>> 2;
  r66 = r57 | r59 << 30;
  r59 = r56 >>> 2;
  r67 = r59 | r61 << 30;
  r61 = r64 >>> 13 | r59 << 19;
  r59 = r63 << 19 | r65 >>> 13;
  r63 = r18 ^ -1;
  r68 = r15 & r63 ^ r12;
  r69 = r68 & r27;
  r70 = r69 << 1 | r69 >>> 31;
  r69 = r70 ^ r15;
  r71 = r55 ^ r69;
  r72 = r35 ^ -1;
  r73 = r69 & r72 ^ r68;
  r74 = r73 & r33;
  r75 = (r74 << 1 | r74 >>> 31) ^ r69;
  r69 = r52 ^ -1;
  r74 = r75 & r69 ^ r73;
  r76 = r74 & r55;
  r77 = r59 ^ r37;
  r78 = r54 ^ -1;
  r79 = r61 ^ r59 & r78;
  r80 = r79 & r53;
  r81 = (r80 << 1 | r80 >>> 31) ^ r59;
  r80 = r81 ^ r42;
  r82 = r31 ^ -1;
  r83 = r81 & r82 ^ r79;
  r84 = r83 & r29;
  r85 = (r84 << 1 | r84 >>> 31) ^ r81;
  r84 = r24 ^ -1;
  r86 = r85 & r84 ^ r83;
  r87 = r86 & r21;
  HEAP32[r3] = r43 ^ r6;
  HEAP32[r3 + 1] = r25 ^ r9;
  r9 = (r2 + 16 | 0) >> 2;
  HEAP32[r9] = r50 ^ r12;
  r6 = (r2 + 20 | 0) >> 2;
  HEAP32[r6] = r26 ^ r15;
  r88 = (r2 + 24 | 0) >> 2;
  HEAP32[r88] = r43 ^ r13;
  r43 = (r2 + 28 | 0) >> 2;
  HEAP32[r43] = r25 ^ r19;
  r25 = (r2 + 32 | 0) >> 2;
  HEAP32[r25] = r50 ^ r22;
  r50 = (r2 + 36 | 0) >> 2;
  HEAP32[r50] = r26 ^ r1;
  r26 = (r2 + 40 | 0) >> 2;
  HEAP32[r26] = r45 ^ r13;
  r13 = (r2 + 44 | 0) >> 2;
  HEAP32[r13] = r48 ^ r19;
  r19 = (r2 + 48 | 0) >> 2;
  HEAP32[r19] = r17 ^ r22;
  r22 = (r2 + 52 | 0) >> 2;
  HEAP32[r22] = r51 ^ r1;
  r1 = r83 ^ r56 ^ (r85 ^ r58) & r84;
  r84 = r1 & r21;
  r89 = (r2 + 56 | 0) >> 2;
  HEAP32[r89] = r86 ^ r45 ^ r1;
  r1 = (r2 + 60 | 0) >> 2;
  HEAP32[r1] = r48 ^ r58 ^ (r87 << 1 | r87 >>> 31) ^ (r84 << 1 | r84 >>> 31);
  HEAP32[r3 + 16] = r21;
  HEAP32[r3 + 17] = r24;
  HEAP32[r3 + 18] = r27;
  HEAP32[r3 + 19] = r18;
  r18 = r17 ^ r12 ^ (r51 ^ r15) & r63;
  r63 = r18 & r27;
  r27 = (r2 + 80 | 0) >> 2;
  HEAP32[r27] = r18 ^ r68 ^ r60;
  r18 = (r2 + 84 | 0) >> 2;
  HEAP32[r18] = r51 ^ r70 ^ (r63 << 1 | r63 >>> 31) ^ r62;
  r63 = (r2 + 88 | 0) >> 2;
  HEAP32[r63] = r56 ^ r28;
  r56 = (r2 + 92 | 0) >> 2;
  HEAP32[r56] = r58 ^ r11;
  r58 = (r2 + 96 | 0) >> 2;
  HEAP32[r58] = r60 ^ r14;
  r60 = (r2 + 100 | 0) >> 2;
  HEAP32[r60] = r62 ^ r5;
  r62 = (r2 + 104 | 0) >> 2;
  HEAP32[r62] = r52 ^ r28;
  r28 = (r2 + 108 | 0) >> 2;
  HEAP32[r28] = r53 ^ r11;
  r11 = (r2 + 112 | 0) >> 2;
  HEAP32[r11] = r54 ^ r14;
  r14 = (r2 + 116 | 0) >> 2;
  HEAP32[r14] = r55 ^ r5;
  r5 = r79 ^ r40 ^ r80 & r82;
  r82 = r5 & r29;
  r70 = (r2 + 120 | 0) >> 2;
  HEAP32[r70] = r83 ^ r52 ^ r5;
  r5 = (r2 + 124 | 0) >> 2;
  HEAP32[r5] = r80 ^ r53 ^ r85 ^ (r82 << 1 | r82 >>> 31);
  HEAP32[r3 + 32] = r29;
  HEAP32[r3 + 33] = r31;
  HEAP32[r3 + 34] = r33;
  HEAP32[r3 + 35] = r35;
  r35 = r54 ^ r68 ^ r71 & r72;
  r72 = r35 & r33;
  r33 = (r2 + 144 | 0) >> 2;
  HEAP32[r33] = r73 ^ r44 ^ r35;
  r35 = (r2 + 148 | 0) >> 2;
  HEAP32[r35] = r75 ^ r46 ^ r71 ^ (r72 << 1 | r72 >>> 31);
  r72 = (r2 + 152 | 0) >> 2;
  HEAP32[r72] = r64 ^ r40;
  r40 = (r2 + 156 | 0) >> 2;
  HEAP32[r40] = r65 ^ r42;
  r42 = (r2 + 160 | 0) >> 2;
  HEAP32[r42] = r66 ^ r44;
  r44 = (r2 + 164 | 0) >> 2;
  HEAP32[r44] = r67 ^ r46;
  r46 = (r2 + 168 | 0) >> 2;
  HEAP32[r46] = r64 ^ r36;
  r64 = (r2 + 172 | 0) >> 2;
  HEAP32[r64] = r65 ^ r8;
  r65 = (r2 + 176 | 0) >> 2;
  HEAP32[r65] = r66 ^ r30;
  r71 = (r2 + 180 | 0) >> 2;
  HEAP32[r71] = r67 ^ r32;
  r68 = r61 ^ r47 ^ r77 & r78;
  r78 = r68 & r53;
  r31 = (r2 + 184 | 0) >> 2;
  HEAP32[r31] = r79 ^ r36 ^ r68;
  r68 = (r2 + 188 | 0) >> 2;
  HEAP32[r68] = r77 ^ r8 ^ r81 ^ (r78 << 1 | r78 >>> 31);
  HEAP32[r3 + 48] = r53;
  HEAP32[r3 + 49] = r54;
  HEAP32[r3 + 50] = r55;
  HEAP32[r3 + 51] = r52;
  r52 = r73 ^ r30 ^ (r75 ^ r32) & r69;
  r69 = r52 & r55;
  r55 = (r2 + 208 | 0) >> 2;
  HEAP32[r55] = r74 ^ r38 ^ r52;
  r52 = (r2 + 212 | 0) >> 2;
  HEAP32[r52] = r16 ^ r32 ^ (r69 << 1 | r69 >>> 31) ^ (r76 << 1 | r76 >>> 31);
  r76 = (r2 + 216 | 0) >> 2;
  HEAP32[r76] = r49 ^ r47;
  r47 = (r2 + 220 | 0) >> 2;
  HEAP32[r47] = r39 ^ r37;
  r37 = (r2 + 224 | 0) >> 2;
  HEAP32[r37] = r23 ^ r38;
  r38 = (r2 + 228 | 0) >> 2;
  HEAP32[r38] = r41 ^ r16;
  r16 = (r2 + 232 | 0) >> 2;
  HEAP32[r16] = r49 ^ r34;
  r49 = (r2 + 236 | 0) >> 2;
  HEAP32[r49] = r39 ^ r4;
  r39 = (r2 + 240 | 0) >> 2;
  HEAP32[r39] = r23 ^ r7;
  r23 = (r2 + 244 | 0) >> 2;
  HEAP32[r23] = r41 ^ r10;
  r41 = (r2 + 248 | 0) >> 2;
  HEAP32[r41] = r61 ^ r34;
  r34 = (r2 + 252 | 0) >> 2;
  HEAP32[r34] = r59 ^ r4;
  HEAP32[r3 + 64] = (r66 >>> 13 | r20 << 19) ^ r7;
  HEAP32[r3 + 65] = (r67 >>> 13 | r57 << 19) ^ r10;
  r10 = HEAP32[r9];
  r57 = HEAP32[r6] ^ r10;
  r67 = r57 << 8 | r57 >>> 24;
  HEAP32[r6] = r67 ^ r10;
  HEAP32[r9] = r67;
  r67 = HEAP32[r88];
  r9 = HEAP32[r43] ^ r67;
  r10 = r9 << 8 | r9 >>> 24;
  HEAP32[r43] = r10 ^ r67;
  HEAP32[r88] = r10;
  r10 = HEAP32[r25];
  r88 = HEAP32[r50] ^ r10;
  r67 = r88 << 8 | r88 >>> 24;
  HEAP32[r50] = r67 ^ r10;
  HEAP32[r25] = r67;
  r67 = HEAP32[r26];
  r25 = HEAP32[r13] ^ r67;
  r10 = r25 << 8 | r25 >>> 24;
  HEAP32[r13] = r10 ^ r67;
  HEAP32[r26] = r10;
  r10 = HEAP32[r19];
  r26 = HEAP32[r22] ^ r10;
  r67 = r26 << 8 | r26 >>> 24;
  HEAP32[r22] = r67 ^ r10;
  HEAP32[r19] = r67;
  r67 = HEAP32[r89];
  r19 = HEAP32[r1] ^ r67;
  r10 = r19 << 8 | r19 >>> 24;
  HEAP32[r1] = r10 ^ r67;
  HEAP32[r89] = r10;
  r10 = HEAP32[r27];
  r89 = HEAP32[r18] ^ r10;
  r67 = r89 << 8 | r89 >>> 24;
  HEAP32[r18] = r67 ^ r10;
  HEAP32[r27] = r67;
  r67 = HEAP32[r63];
  r27 = HEAP32[r56] ^ r67;
  r10 = r27 << 8 | r27 >>> 24;
  HEAP32[r56] = r10 ^ r67;
  HEAP32[r63] = r10;
  r10 = HEAP32[r58];
  r63 = HEAP32[r60] ^ r10;
  r67 = r63 << 8 | r63 >>> 24;
  HEAP32[r60] = r67 ^ r10;
  HEAP32[r58] = r67;
  r67 = HEAP32[r62];
  r58 = HEAP32[r28] ^ r67;
  r10 = r58 << 8 | r58 >>> 24;
  HEAP32[r28] = r10 ^ r67;
  HEAP32[r62] = r10;
  r10 = HEAP32[r11];
  r62 = HEAP32[r14] ^ r10;
  r67 = r62 << 8 | r62 >>> 24;
  HEAP32[r14] = r67 ^ r10;
  HEAP32[r11] = r67;
  r67 = HEAP32[r70];
  r11 = HEAP32[r5] ^ r67;
  r10 = r11 << 8 | r11 >>> 24;
  HEAP32[r5] = r10 ^ r67;
  HEAP32[r70] = r10;
  r10 = HEAP32[r33];
  r70 = HEAP32[r35] ^ r10;
  r67 = r70 << 8 | r70 >>> 24;
  HEAP32[r35] = r67 ^ r10;
  HEAP32[r33] = r67;
  r67 = HEAP32[r72];
  r33 = HEAP32[r40] ^ r67;
  r10 = r33 << 8 | r33 >>> 24;
  HEAP32[r40] = r10 ^ r67;
  HEAP32[r72] = r10;
  r10 = HEAP32[r42];
  r72 = HEAP32[r44] ^ r10;
  r67 = r72 << 8 | r72 >>> 24;
  HEAP32[r44] = r67 ^ r10;
  HEAP32[r42] = r67;
  r67 = HEAP32[r46];
  r42 = HEAP32[r64] ^ r67;
  r10 = r42 << 8 | r42 >>> 24;
  HEAP32[r64] = r10 ^ r67;
  HEAP32[r46] = r10;
  r10 = HEAP32[r65];
  r46 = HEAP32[r71] ^ r10;
  r67 = r46 << 8 | r46 >>> 24;
  HEAP32[r71] = r67 ^ r10;
  HEAP32[r65] = r67;
  r67 = HEAP32[r31];
  r65 = HEAP32[r68] ^ r67;
  r10 = r65 << 8 | r65 >>> 24;
  HEAP32[r68] = r10 ^ r67;
  HEAP32[r31] = r10;
  r10 = HEAP32[r55];
  r31 = HEAP32[r52] ^ r10;
  r67 = r31 << 8 | r31 >>> 24;
  HEAP32[r52] = r67 ^ r10;
  HEAP32[r55] = r67;
  r67 = HEAP32[r76];
  r55 = HEAP32[r47] ^ r67;
  r10 = r55 << 8 | r55 >>> 24;
  HEAP32[r47] = r10 ^ r67;
  HEAP32[r76] = r10;
  r10 = HEAP32[r37];
  r76 = HEAP32[r38] ^ r10;
  r67 = r76 << 8 | r76 >>> 24;
  HEAP32[r38] = r67 ^ r10;
  HEAP32[r37] = r67;
  r67 = HEAP32[r16];
  r37 = HEAP32[r49] ^ r67;
  r10 = r37 << 8 | r37 >>> 24;
  HEAP32[r49] = r10 ^ r67;
  HEAP32[r16] = r10;
  r10 = HEAP32[r39];
  r16 = HEAP32[r23] ^ r10;
  r67 = r16 << 8 | r16 >>> 24;
  HEAP32[r23] = r67 ^ r10;
  HEAP32[r39] = r67;
  r67 = HEAP32[r41];
  r39 = HEAP32[r34] ^ r67;
  r10 = r39 << 8 | r39 >>> 24;
  HEAP32[r34] = r10 ^ r67;
  HEAP32[r41] = r10;
  return;
}
function __gcry_camellia_setup192(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r4 = r3;
  r5 = r4 | 0;
  _memcpy(r5, r1, 24);
  r6 = r1 + 16 | 0;
  r7 = r1 + 20 | 0;
  r1 = (HEAPU8[r7] | HEAPU8[r7 + 1 | 0] << 8 | HEAPU8[r7 + 2 | 0] << 16 | HEAPU8[r7 + 3 | 0] << 24) ^ -1;
  r7 = r4 + 24 | 0;
  tempBigInt = (HEAPU8[r6] | HEAPU8[r6 + 1 | 0] << 8 | HEAPU8[r6 + 2 | 0] << 16 | HEAPU8[r6 + 3 | 0] << 24) ^ -1;
  HEAP8[r7] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r7 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r7 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r7 + 3 | 0] = tempBigInt & 255;
  r7 = r4 + 28 | 0;
  tempBigInt = r1;
  HEAP8[r7] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r7 + 1 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r7 + 2 | 0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[r7 + 3 | 0] = tempBigInt & 255;
  __gcry_camellia_setup256(r5, r2);
  STACKTOP = r3;
  return;
}
function __gcry_camellia_encrypt128(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r2 >> 2;
  r4 = r1 >> 2;
  HEAP32[r3] = HEAP32[r3] ^ HEAP32[r4];
  r1 = (r2 + 4 | 0) >> 2;
  r5 = HEAP32[r1] ^ HEAP32[r4 + 1];
  HEAP32[r1] = r5;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 4];
  r6 = HEAP32[(r5 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r5 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r5 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 5] ^ r7;
  r5 = (r2 + 8 | 0) >> 2;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r8 = (r2 + 12 | 0) >> 2;
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 6];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 7] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 8];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 9] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 10];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 11] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 12];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 13] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 14];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 15] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3] & HEAP32[r4 + 16];
  r7 = (r6 << 1 | r6 >>> 31) ^ r2;
  HEAP32[r1] = r7;
  HEAP32[r3] = (r7 | HEAP32[r4 + 17]) ^ HEAP32[r3];
  r7 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 19]);
  HEAP32[r5] = r7;
  r2 = HEAP32[r4 + 18] & r7;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 20];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 21] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 22];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 23] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 24];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 25] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 26];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 27] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 28];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 29] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 30];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 31] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3] & HEAP32[r4 + 32];
  r6 = (r7 << 1 | r7 >>> 31) ^ r2;
  HEAP32[r1] = r6;
  HEAP32[r3] = (r6 | HEAP32[r4 + 33]) ^ HEAP32[r3];
  r6 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 35]);
  HEAP32[r5] = r6;
  r2 = HEAP32[r4 + 34] & r6;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 36];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 37] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 38];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 39] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 40];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 41] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 42];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 43] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 44];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 45] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 46];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 47] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  HEAP32[r1] = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r5] = HEAP32[r5] ^ HEAP32[r4 + 48];
  HEAP32[r8] = HEAP32[r8] ^ HEAP32[r4 + 49];
  r4 = HEAP32[r3];
  r6 = HEAP32[r1];
  HEAP32[r3] = HEAP32[r5];
  HEAP32[r1] = HEAP32[r8];
  HEAP32[r5] = r4;
  HEAP32[r8] = r6;
  return;
}
function __gcry_camellia_decrypt128(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r2 >> 2;
  r4 = r1 >> 2;
  HEAP32[r3] = HEAP32[r3] ^ HEAP32[r4 + 48];
  r1 = (r2 + 4 | 0) >> 2;
  r5 = HEAP32[r1] ^ HEAP32[r4 + 49];
  HEAP32[r1] = r5;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 46];
  r6 = HEAP32[(r5 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r5 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r5 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 47] ^ r7;
  r5 = (r2 + 8 | 0) >> 2;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r8 = (r2 + 12 | 0) >> 2;
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 44];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 45] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 42];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 43] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 40];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 41] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 38];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 39] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 36];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 37] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3] & HEAP32[r4 + 34];
  r7 = (r6 << 1 | r6 >>> 31) ^ r2;
  HEAP32[r1] = r7;
  HEAP32[r3] = (r7 | HEAP32[r4 + 35]) ^ HEAP32[r3];
  r7 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 33]);
  HEAP32[r5] = r7;
  r2 = HEAP32[r4 + 32] & r7;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 30];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 31] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 28];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 29] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 26];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 27] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 24];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 25] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 22];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 23] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 20];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 21] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3] & HEAP32[r4 + 18];
  r6 = (r7 << 1 | r7 >>> 31) ^ r2;
  HEAP32[r1] = r6;
  HEAP32[r3] = (r6 | HEAP32[r4 + 19]) ^ HEAP32[r3];
  r6 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 17]);
  HEAP32[r5] = r6;
  r2 = HEAP32[r4 + 16] & r6;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 14];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 15] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 12];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 13] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 10];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 11] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 8];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 9] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 6];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 7] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 4];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 5] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  HEAP32[r1] = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r5] = HEAP32[r5] ^ HEAP32[r4];
  HEAP32[r8] = HEAP32[r8] ^ HEAP32[r4 + 1];
  r4 = HEAP32[r3];
  r6 = HEAP32[r1];
  HEAP32[r3] = HEAP32[r5];
  HEAP32[r1] = HEAP32[r8];
  HEAP32[r5] = r4;
  HEAP32[r8] = r6;
  return;
}
function __gcry_camellia_encrypt256(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r2 >> 2;
  r4 = r1 >> 2;
  HEAP32[r3] = HEAP32[r3] ^ HEAP32[r4];
  r1 = (r2 + 4 | 0) >> 2;
  r5 = HEAP32[r1] ^ HEAP32[r4 + 1];
  HEAP32[r1] = r5;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 4];
  r6 = HEAP32[(r5 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r5 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r5 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 5] ^ r7;
  r5 = (r2 + 8 | 0) >> 2;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r8 = (r2 + 12 | 0) >> 2;
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 6];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 7] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 8];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 9] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 10];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 11] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 12];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 13] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 14];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 15] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3] & HEAP32[r4 + 16];
  r7 = (r6 << 1 | r6 >>> 31) ^ r2;
  HEAP32[r1] = r7;
  HEAP32[r3] = (r7 | HEAP32[r4 + 17]) ^ HEAP32[r3];
  r7 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 19]);
  HEAP32[r5] = r7;
  r2 = HEAP32[r4 + 18] & r7;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 20];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 21] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 22];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 23] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 24];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 25] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 26];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 27] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 28];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 29] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 30];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 31] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3] & HEAP32[r4 + 32];
  r6 = (r7 << 1 | r7 >>> 31) ^ r2;
  HEAP32[r1] = r6;
  HEAP32[r3] = (r6 | HEAP32[r4 + 33]) ^ HEAP32[r3];
  r6 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 35]);
  HEAP32[r5] = r6;
  r2 = HEAP32[r4 + 34] & r6;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 36];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 37] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 38];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 39] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 40];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 41] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 42];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 43] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 44];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 45] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 46];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 47] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3] & HEAP32[r4 + 48];
  r7 = (r6 << 1 | r6 >>> 31) ^ r2;
  HEAP32[r1] = r7;
  HEAP32[r3] = (r7 | HEAP32[r4 + 49]) ^ HEAP32[r3];
  r7 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 51]);
  HEAP32[r5] = r7;
  r2 = HEAP32[r4 + 50] & r7;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 52];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 53] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 54];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 55] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 56];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 57] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 58];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 59] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 60];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 61] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 62];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 63] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  HEAP32[r1] = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r5] = HEAP32[r5] ^ HEAP32[r4 + 64];
  HEAP32[r8] = HEAP32[r8] ^ HEAP32[r4 + 65];
  r4 = HEAP32[r3];
  r7 = HEAP32[r1];
  HEAP32[r3] = HEAP32[r5];
  HEAP32[r1] = HEAP32[r8];
  HEAP32[r5] = r4;
  HEAP32[r8] = r7;
  return;
}
function __gcry_camellia_decrypt256(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r3 = r2 >> 2;
  r4 = r1 >> 2;
  HEAP32[r3] = HEAP32[r3] ^ HEAP32[r4 + 64];
  r1 = (r2 + 4 | 0) >> 2;
  r5 = HEAP32[r1] ^ HEAP32[r4 + 65];
  HEAP32[r1] = r5;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 62];
  r6 = HEAP32[(r5 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r5 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r5 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r5 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 63] ^ r7;
  r5 = (r2 + 8 | 0) >> 2;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r8 = (r2 + 12 | 0) >> 2;
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 60];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 61] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 58];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 59] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 56];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 57] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 54];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 55] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 52];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 53] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3] & HEAP32[r4 + 50];
  r7 = (r6 << 1 | r6 >>> 31) ^ r2;
  HEAP32[r1] = r7;
  HEAP32[r3] = (r7 | HEAP32[r4 + 51]) ^ HEAP32[r3];
  r7 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 49]);
  HEAP32[r5] = r7;
  r2 = HEAP32[r4 + 48] & r7;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 46];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 47] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 44];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 45] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 42];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 43] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 40];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 41] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 38];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 39] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 36];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 37] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3] & HEAP32[r4 + 34];
  r6 = (r7 << 1 | r7 >>> 31) ^ r2;
  HEAP32[r1] = r6;
  HEAP32[r3] = (r6 | HEAP32[r4 + 35]) ^ HEAP32[r3];
  r6 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 33]);
  HEAP32[r5] = r6;
  r2 = HEAP32[r4 + 32] & r6;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 30];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 31] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 28];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 29] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 26];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 27] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 24];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 25] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 22];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 23] ^ r7;
  HEAP32[r5] = r6 ^ HEAP32[r5];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r6 = HEAP32[r5];
  r7 = HEAP32[((r6 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r6 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 20];
  r6 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 21] ^ r7;
  HEAP32[r3] = r6 ^ HEAP32[r3];
  r2 = (r7 >>> 8 | r7 << 24) ^ r6 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r6 = HEAP32[r3] & HEAP32[r4 + 18];
  r7 = (r6 << 1 | r6 >>> 31) ^ r2;
  HEAP32[r1] = r7;
  HEAP32[r3] = (r7 | HEAP32[r4 + 19]) ^ HEAP32[r3];
  r7 = HEAP32[r5] ^ (HEAP32[r8] | HEAP32[r4 + 17]);
  HEAP32[r5] = r7;
  r2 = HEAP32[r4 + 16] & r7;
  HEAP32[r8] = (r2 << 1 | r2 >>> 31) ^ HEAP32[r8];
  r2 = HEAP32[r1];
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 14];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 15] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 12];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 13] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 10];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 11] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 8];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 9] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r1] = r2;
  r7 = HEAP32[r3];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 6];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 7] ^ r6;
  HEAP32[r5] = r7 ^ HEAP32[r5];
  r2 = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r8];
  HEAP32[r8] = r2;
  r7 = HEAP32[r5];
  r6 = HEAP32[((r7 >>> 16 & 255) << 2) + 462984 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 461960 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r7 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 4];
  r7 = HEAP32[(r2 >>> 24 << 2) + 462984 >> 2] ^ HEAP32[((r2 & 255) << 2) + 461960 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 460936 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 459912 >> 2] ^ HEAP32[r4 + 5] ^ r6;
  HEAP32[r3] = r7 ^ HEAP32[r3];
  HEAP32[r1] = (r6 >>> 8 | r6 << 24) ^ r7 ^ HEAP32[r1];
  HEAP32[r5] = HEAP32[r5] ^ HEAP32[r4];
  HEAP32[r8] = HEAP32[r8] ^ HEAP32[r4 + 1];
  r4 = HEAP32[r3];
  r7 = HEAP32[r1];
  HEAP32[r3] = HEAP32[r5];
  HEAP32[r1] = HEAP32[r8];
  HEAP32[r5] = r4;
  HEAP32[r8] = r7;
  return;
}
function _do_decrypt_block1585(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = r1 >> 2;
  r5 = HEAPU8[r3 + 5 | 0] << 16 | HEAPU8[r3 + 4 | 0] << 24 | HEAPU8[r3 + 6 | 0] << 8 | HEAPU8[r3 + 7 | 0];
  r6 = r5 + HEAP32[r4 + 15] | 0;
  r7 = HEAPU8[r1 + 79 | 0];
  r8 = r6 << r7 | r6 >>> ((32 - r7 | 0) >>> 0);
  r7 = (HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ (HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0]);
  r3 = HEAP32[r4 + 14] - r7 | 0;
  r8 = HEAPU8[r1 + 78 | 0];
  r6 = r3 >>> ((32 - r8 | 0) >>> 0) | r3 << r8;
  r8 = (HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r6 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r5;
  r5 = r8 ^ HEAP32[r4 + 13];
  r6 = HEAPU8[r1 + 77 | 0];
  r3 = r5 >>> ((32 - r6 | 0) >>> 0) | r5 << r6;
  r6 = HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r7 ^ HEAP32[(r3 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2];
  r3 = r6 + HEAP32[r4 + 12] | 0;
  r7 = HEAPU8[r1 + 76 | 0];
  r5 = r3 >>> ((32 - r7 | 0) >>> 0) | r3 << r7;
  r7 = (HEAP32[((r5 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r5 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r5 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r5 & 255) << 2) + 434500 >> 2] ^ r8;
  r8 = HEAP32[r4 + 11] - r7 | 0;
  r5 = HEAPU8[r1 + 75 | 0];
  r3 = r8 >>> ((32 - r5 | 0) >>> 0) | r8 << r5;
  r5 = (HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r3 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r6;
  r6 = r5 ^ HEAP32[r4 + 10];
  r3 = HEAPU8[r1 + 74 | 0];
  r8 = r6 >>> ((32 - r3 | 0) >>> 0) | r6 << r3;
  r3 = HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ r7 ^ HEAP32[(r8 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2];
  r8 = r3 + HEAP32[r4 + 9] | 0;
  r7 = HEAPU8[r1 + 73 | 0];
  r6 = r8 >>> ((32 - r7 | 0) >>> 0) | r8 << r7;
  r7 = (HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r5;
  r5 = HEAP32[r4 + 8] - r7 | 0;
  r6 = HEAPU8[r1 + 72 | 0];
  r8 = r5 >>> ((32 - r6 | 0) >>> 0) | r5 << r6;
  r6 = (HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r8 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ r3;
  r3 = r6 ^ HEAP32[r4 + 7];
  r8 = HEAPU8[r1 + 71 | 0];
  r5 = r3 >>> ((32 - r8 | 0) >>> 0) | r3 << r8;
  r8 = HEAP32[((r5 & 255) << 2) + 434500 >> 2] ^ r7 ^ HEAP32[(r5 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r5 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r5 >>> 8 & 255) << 2) + 435524 >> 2];
  r5 = r8 + HEAP32[r4 + 6] | 0;
  r7 = HEAPU8[r1 + 70 | 0];
  r3 = r5 >>> ((32 - r7 | 0) >>> 0) | r5 << r7;
  r7 = (HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r6;
  r6 = HEAP32[r4 + 5] - r7 | 0;
  r3 = HEAPU8[r1 + 69 | 0];
  r5 = r6 >>> ((32 - r3 | 0) >>> 0) | r6 << r3;
  r3 = (HEAP32[((r5 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r5 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r5 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r5 & 255) << 2) + 434500 >> 2] ^ r8;
  r8 = r3 ^ HEAP32[r4 + 4];
  r5 = HEAPU8[r1 + 68 | 0];
  r6 = r8 >>> ((32 - r5 | 0) >>> 0) | r8 << r5;
  r5 = HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r7 ^ HEAP32[(r6 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2];
  r6 = r5 + HEAP32[r4 + 3] | 0;
  r7 = HEAPU8[r1 + 67 | 0];
  r8 = r6 >>> ((32 - r7 | 0) >>> 0) | r6 << r7;
  r7 = (HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ r3;
  r3 = HEAP32[r4 + 2] - r7 | 0;
  r8 = HEAPU8[r1 + 66 | 0];
  r6 = r3 >>> ((32 - r8 | 0) >>> 0) | r3 << r8;
  r8 = (HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r6 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r5;
  r5 = r8 ^ HEAP32[r4 + 1];
  r6 = HEAPU8[r1 + 65 | 0];
  r3 = r5 >>> ((32 - r6 | 0) >>> 0) | r5 << r6;
  r6 = HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r7 ^ HEAP32[(r3 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2];
  r3 = r6 + HEAP32[r4] | 0;
  r4 = HEAPU8[r1 + 64 | 0];
  r1 = r3 >>> ((32 - r4 | 0) >>> 0) | r3 << r4;
  r4 = (HEAP32[((r1 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r1 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r1 & 255) << 2) + 434500 >> 2] ^ r8;
  HEAP8[r2] = r4 >>> 24 & 255;
  HEAP8[r2 + 1 | 0] = r4 >>> 16 & 255;
  HEAP8[r2 + 2 | 0] = r4 >>> 8 & 255;
  HEAP8[r2 + 3 | 0] = r4 & 255;
  HEAP8[r2 + 4 | 0] = r6 >>> 24 & 255;
  HEAP8[r2 + 5 | 0] = r6 >>> 16 & 255;
  HEAP8[r2 + 6 | 0] = r6 >>> 8 & 255;
  HEAP8[r2 + 7 | 0] = r6 & 255;
  return;
}
function __gcry_Camellia_Ekeygen(r1, r2, r3) {
  if ((r1 | 0) == 128) {
    __gcry_camellia_setup128(r2, r3);
    return;
  } else if ((r1 | 0) == 192) {
    __gcry_camellia_setup192(r2, r3);
    return;
  } else if ((r1 | 0) == 256) {
    __gcry_camellia_setup256(r2, r3);
    return;
  } else {
    return;
  }
}
function __gcry_Camellia_EncryptBlock(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r5;
  r7 = r6 | 0, r8 = r7 >> 2;
  HEAP32[r8] = HEAPU8[r2 + 1 | 0] << 16 | HEAPU8[r2] << 24 | HEAPU8[r2 + 2 | 0] << 8 | HEAPU8[r2 + 3 | 0];
  r9 = (r6 + 4 | 0) >> 2;
  HEAP32[r9] = HEAPU8[r2 + 5 | 0] << 16 | HEAPU8[r2 + 4 | 0] << 24 | HEAPU8[r2 + 6 | 0] << 8 | HEAPU8[r2 + 7 | 0];
  r10 = (r6 + 8 | 0) >> 2;
  HEAP32[r10] = HEAPU8[r2 + 9 | 0] << 16 | HEAPU8[r2 + 8 | 0] << 24 | HEAPU8[r2 + 10 | 0] << 8 | HEAPU8[r2 + 11 | 0];
  r11 = (r6 + 12 | 0) >> 2;
  HEAP32[r11] = HEAPU8[r2 + 13 | 0] << 16 | HEAPU8[r2 + 12 | 0] << 24 | HEAPU8[r2 + 14 | 0] << 8 | HEAPU8[r2 + 15 | 0];
  if ((r1 | 0) == 192 | (r1 | 0) == 256) {
    __gcry_camellia_encrypt256(r3, r7);
  } else if ((r1 | 0) == 128) {
    __gcry_camellia_encrypt128(r3, r7);
  }
  HEAP8[r4] = HEAP32[r8] >>> 24 & 255;
  HEAP8[r4 + 1 | 0] = HEAP32[r8] >>> 16 & 255;
  HEAP8[r4 + 2 | 0] = HEAP32[r8] >>> 8 & 255;
  HEAP8[r4 + 3 | 0] = HEAP32[r8] & 255;
  HEAP8[r4 + 4 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r4 + 5 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r4 + 6 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r4 + 7 | 0] = HEAP32[r9] & 255;
  HEAP8[r4 + 8 | 0] = HEAP32[r10] >>> 24 & 255;
  HEAP8[r4 + 9 | 0] = HEAP32[r10] >>> 16 & 255;
  HEAP8[r4 + 10 | 0] = HEAP32[r10] >>> 8 & 255;
  HEAP8[r4 + 11 | 0] = HEAP32[r10] & 255;
  HEAP8[r4 + 12 | 0] = HEAP32[r11] >>> 24 & 255;
  HEAP8[r4 + 13 | 0] = HEAP32[r11] >>> 16 & 255;
  HEAP8[r4 + 14 | 0] = HEAP32[r11] >>> 8 & 255;
  HEAP8[r4 + 15 | 0] = HEAP32[r11] & 255;
  STACKTOP = r5;
  return;
}
function __gcry_Camellia_DecryptBlock(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r6 = r5;
  r7 = r6 | 0, r8 = r7 >> 2;
  HEAP32[r8] = HEAPU8[r2 + 1 | 0] << 16 | HEAPU8[r2] << 24 | HEAPU8[r2 + 2 | 0] << 8 | HEAPU8[r2 + 3 | 0];
  r9 = (r6 + 4 | 0) >> 2;
  HEAP32[r9] = HEAPU8[r2 + 5 | 0] << 16 | HEAPU8[r2 + 4 | 0] << 24 | HEAPU8[r2 + 6 | 0] << 8 | HEAPU8[r2 + 7 | 0];
  r10 = (r6 + 8 | 0) >> 2;
  HEAP32[r10] = HEAPU8[r2 + 9 | 0] << 16 | HEAPU8[r2 + 8 | 0] << 24 | HEAPU8[r2 + 10 | 0] << 8 | HEAPU8[r2 + 11 | 0];
  r11 = (r6 + 12 | 0) >> 2;
  HEAP32[r11] = HEAPU8[r2 + 13 | 0] << 16 | HEAPU8[r2 + 12 | 0] << 24 | HEAPU8[r2 + 14 | 0] << 8 | HEAPU8[r2 + 15 | 0];
  if ((r1 | 0) == 128) {
    __gcry_camellia_decrypt128(r3, r7);
  } else if ((r1 | 0) == 192 | (r1 | 0) == 256) {
    __gcry_camellia_decrypt256(r3, r7);
  }
  HEAP8[r4] = HEAP32[r8] >>> 24 & 255;
  HEAP8[r4 + 1 | 0] = HEAP32[r8] >>> 16 & 255;
  HEAP8[r4 + 2 | 0] = HEAP32[r8] >>> 8 & 255;
  HEAP8[r4 + 3 | 0] = HEAP32[r8] & 255;
  HEAP8[r4 + 4 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r4 + 5 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r4 + 6 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r4 + 7 | 0] = HEAP32[r9] & 255;
  HEAP8[r4 + 8 | 0] = HEAP32[r10] >>> 24 & 255;
  HEAP8[r4 + 9 | 0] = HEAP32[r10] >>> 16 & 255;
  HEAP8[r4 + 10 | 0] = HEAP32[r10] >>> 8 & 255;
  HEAP8[r4 + 11 | 0] = HEAP32[r10] & 255;
  HEAP8[r4 + 12 | 0] = HEAP32[r11] >>> 24 & 255;
  HEAP8[r4 + 13 | 0] = HEAP32[r11] >>> 16 & 255;
  HEAP8[r4 + 14 | 0] = HEAP32[r11] >>> 8 & 255;
  HEAP8[r4 + 15 | 0] = HEAP32[r11] & 255;
  STACKTOP = r5;
  return;
}
function _cast_setkey(r1, r2, r3) {
  var r4;
  r4 = _do_cast_setkey(r1, r2, r3);
  __gcry_burn_stack(124);
  return r4;
}
function _encrypt_block1583(r1, r2, r3) {
  _do_encrypt_block1586(r1, r2, r3);
  __gcry_burn_stack(36);
  return;
}
function _decrypt_block1584(r1, r2, r3) {
  _do_decrypt_block1585(r1, r2, r3);
  __gcry_burn_stack(36);
  return;
}
function _do_encrypt_block1586(r1, r2, r3) {
  var r4, r5, r6, r7, r8;
  r4 = r1 >> 2;
  r5 = HEAPU8[r3 + 5 | 0] << 16 | HEAPU8[r3 + 4 | 0] << 24 | HEAPU8[r3 + 6 | 0] << 8 | HEAPU8[r3 + 7 | 0];
  r6 = r5 + HEAP32[r4] | 0;
  r7 = HEAPU8[r1 + 64 | 0];
  r8 = r6 << r7 | r6 >>> ((32 - r7 | 0) >>> 0);
  r7 = (HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ (HEAPU8[r3 + 1 | 0] << 16 | HEAPU8[r3] << 24 | HEAPU8[r3 + 2 | 0] << 8 | HEAPU8[r3 + 3 | 0]);
  r3 = r7 ^ HEAP32[r4 + 1];
  r8 = HEAPU8[r1 + 65 | 0];
  r6 = r3 >>> ((32 - r8 | 0) >>> 0) | r3 << r8;
  r8 = HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r5 ^ HEAP32[(r6 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2];
  r6 = HEAP32[r4 + 2] - r8 | 0;
  r5 = HEAPU8[r1 + 66 | 0];
  r3 = r6 >>> ((32 - r5 | 0) >>> 0) | r6 << r5;
  r5 = (HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r3 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r7;
  r7 = r5 + HEAP32[r4 + 3] | 0;
  r3 = HEAPU8[r1 + 67 | 0];
  r6 = r7 >>> ((32 - r3 | 0) >>> 0) | r7 << r3;
  r3 = (HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r8;
  r8 = r3 ^ HEAP32[r4 + 4];
  r6 = HEAPU8[r1 + 68 | 0];
  r7 = r8 >>> ((32 - r6 | 0) >>> 0) | r8 << r6;
  r6 = HEAP32[((r7 & 255) << 2) + 434500 >> 2] ^ r5 ^ HEAP32[(r7 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r7 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r7 >>> 8 & 255) << 2) + 435524 >> 2];
  r7 = HEAP32[r4 + 5] - r6 | 0;
  r5 = HEAPU8[r1 + 69 | 0];
  r8 = r7 >>> ((32 - r5 | 0) >>> 0) | r7 << r5;
  r5 = (HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r8 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ r3;
  r3 = r5 + HEAP32[r4 + 6] | 0;
  r8 = HEAPU8[r1 + 70 | 0];
  r7 = r3 >>> ((32 - r8 | 0) >>> 0) | r3 << r8;
  r8 = (HEAP32[((r7 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r7 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r7 & 255) << 2) + 434500 >> 2] ^ r6;
  r6 = r8 ^ HEAP32[r4 + 7];
  r7 = HEAPU8[r1 + 71 | 0];
  r3 = r6 >>> ((32 - r7 | 0) >>> 0) | r6 << r7;
  r7 = HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r5 ^ HEAP32[(r3 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2];
  r3 = HEAP32[r4 + 8] - r7 | 0;
  r5 = HEAPU8[r1 + 72 | 0];
  r6 = r3 >>> ((32 - r5 | 0) >>> 0) | r3 << r5;
  r5 = (HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r6 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r8;
  r8 = r5 + HEAP32[r4 + 9] | 0;
  r6 = HEAPU8[r1 + 73 | 0];
  r3 = r8 >>> ((32 - r6 | 0) >>> 0) | r8 << r6;
  r6 = (HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r7;
  r7 = r6 ^ HEAP32[r4 + 10];
  r3 = HEAPU8[r1 + 74 | 0];
  r8 = r7 >>> ((32 - r3 | 0) >>> 0) | r7 << r3;
  r3 = HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ r5 ^ HEAP32[(r8 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2];
  r8 = HEAP32[r4 + 11] - r3 | 0;
  r5 = HEAPU8[r1 + 75 | 0];
  r7 = r8 >>> ((32 - r5 | 0) >>> 0) | r8 << r5;
  r5 = (HEAP32[((r7 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r7 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r7 & 255) << 2) + 434500 >> 2] ^ r6;
  r6 = r5 + HEAP32[r4 + 12] | 0;
  r7 = HEAPU8[r1 + 76 | 0];
  r8 = r6 >>> ((32 - r7 | 0) >>> 0) | r6 << r7;
  r7 = (HEAP32[((r8 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r8 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r8 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r8 & 255) << 2) + 434500 >> 2] ^ r3;
  r3 = r7 ^ HEAP32[r4 + 13];
  r8 = HEAPU8[r1 + 77 | 0];
  r6 = r3 >>> ((32 - r8 | 0) >>> 0) | r3 << r8;
  r8 = HEAP32[((r6 & 255) << 2) + 434500 >> 2] ^ r5 ^ HEAP32[(r6 >>> 24 << 2) + 437572 >> 2] - HEAP32[((r6 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[((r6 >>> 8 & 255) << 2) + 435524 >> 2];
  r6 = HEAP32[r4 + 14] - r8 | 0;
  r5 = HEAPU8[r1 + 78 | 0];
  r3 = r6 >>> ((32 - r5 | 0) >>> 0) | r6 << r5;
  r5 = (HEAP32[((r3 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(r3 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[((r3 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[((r3 & 255) << 2) + 434500 >> 2] ^ r7;
  r7 = r5 + HEAP32[r4 + 15] | 0;
  r4 = HEAPU8[r1 + 79 | 0];
  r1 = r7 >>> ((32 - r4 | 0) >>> 0) | r7 << r4;
  r4 = (HEAP32[((r1 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[(r1 >>> 24 << 2) + 437572 >> 2]) - HEAP32[((r1 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[((r1 & 255) << 2) + 434500 >> 2] ^ r8;
  HEAP8[r2] = r4 >>> 24 & 255;
  HEAP8[r2 + 1 | 0] = r4 >>> 16 & 255;
  HEAP8[r2 + 2 | 0] = r4 >>> 8 & 255;
  HEAP8[r2 + 3 | 0] = r4 & 255;
  HEAP8[r2 + 4 | 0] = r5 >>> 24 & 255;
  HEAP8[r2 + 5 | 0] = r5 >>> 16 & 255;
  HEAP8[r2 + 6 | 0] = r5 >>> 8 & 255;
  HEAP8[r2 + 7 | 0] = r5 & 255;
  return;
}
function _do_cast_setkey(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r4 = 0;
  r5 = STACKTOP;
  r6 = r1;
  r7 = STACKTOP, r8 = r7 >> 2;
  STACKTOP = STACKTOP + 16 | 0;
  r9 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r10 = STACKTOP, r11 = r10 >> 2;
  STACKTOP = STACKTOP + 64 | 0;
  r12 = r10;
  do {
    if (HEAP8[457916]) {
      r4 = 32;
    } else {
      HEAP8[457916] = 1;
      r13 = _selftest1587();
      HEAP32[114478] = r13;
      if ((r13 | 0) == 0) {
        break;
      }
      __gcry_log_error(489376, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r13, tempInt));
      r4 = 32;
      break;
    }
  } while (0);
  do {
    if (r4 == 32) {
      if ((HEAP32[114478] | 0) == 0) {
        break;
      } else {
        r14 = 50;
      }
      STACKTOP = r5;
      return r14;
    }
  } while (0);
  if ((r3 | 0) != 16) {
    r14 = 44;
    STACKTOP = r5;
    return r14;
  }
  r3 = r7 | 0;
  HEAP32[r3 >> 2] = HEAPU8[r2 + 1 | 0] << 16 | HEAPU8[r2] << 24 | HEAPU8[r2 + 2 | 0] << 8 | HEAPU8[r2 + 3 | 0];
  HEAP32[r8 + 1] = HEAPU8[r2 + 5 | 0] << 16 | HEAPU8[r2 + 4 | 0] << 24 | HEAPU8[r2 + 6 | 0] << 8 | HEAPU8[r2 + 7 | 0];
  HEAP32[r8 + 2] = HEAPU8[r2 + 9 | 0] << 16 | HEAPU8[r2 + 8 | 0] << 24 | HEAPU8[r2 + 10 | 0] << 8 | HEAPU8[r2 + 11 | 0];
  HEAP32[r8 + 3] = HEAPU8[r2 + 13 | 0] << 16 | HEAPU8[r2 + 12 | 0] << 24 | HEAPU8[r2 + 14 | 0] << 8 | HEAPU8[r2 + 15 | 0];
  r2 = r9 | 0;
  r8 = r10 | 0;
  _key_schedule1588(r3, r2, r8);
  _memcpy(r6, r12, 64);
  _key_schedule1588(r3, r2, r8);
  HEAP8[r1 + 64 | 0] = HEAP32[r11] & 31;
  HEAP8[r1 + 65 | 0] = HEAP32[r11 + 1] & 31;
  HEAP8[r1 + 66 | 0] = HEAP32[r11 + 2] & 31;
  HEAP8[r1 + 67 | 0] = HEAP32[r11 + 3] & 31;
  HEAP8[r1 + 68 | 0] = HEAP32[r11 + 4] & 31;
  HEAP8[r1 + 69 | 0] = HEAP32[r11 + 5] & 31;
  HEAP8[r1 + 70 | 0] = HEAP32[r11 + 6] & 31;
  HEAP8[r1 + 71 | 0] = HEAP32[r11 + 7] & 31;
  HEAP8[r1 + 72 | 0] = HEAP32[r11 + 8] & 31;
  HEAP8[r1 + 73 | 0] = HEAP32[r11 + 9] & 31;
  HEAP8[r1 + 74 | 0] = HEAP32[r11 + 10] & 31;
  HEAP8[r1 + 75 | 0] = HEAP32[r11 + 11] & 31;
  HEAP8[r1 + 76 | 0] = HEAP32[r11 + 12] & 31;
  HEAP8[r1 + 77 | 0] = HEAP32[r11 + 13] & 31;
  HEAP8[r1 + 78 | 0] = HEAP32[r11 + 14] & 31;
  HEAP8[r1 + 79 | 0] = HEAP32[r11 + 15] & 31;
  r11 = r7 >> 2;
  HEAP32[r11] = 0;
  HEAP32[r11 + 1] = 0;
  HEAP32[r11 + 2] = 0;
  HEAP32[r11 + 3] = 0;
  r11 = r9 >> 2;
  HEAP32[r11] = 0;
  HEAP32[r11 + 1] = 0;
  HEAP32[r11 + 2] = 0;
  HEAP32[r11 + 3] = 0;
  _memset(r12, 0, 64);
  r14 = 0;
  STACKTOP = r5;
  return r14;
}
function _selftest1587() {
  var r1, r2, r3, r4, r5, r6, r7;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  r2 = r1 + 96;
  r3 = r1 + 104;
  r4 = r1 + 80 | 0;
  _memcpy(r4, 415896, 16);
  HEAP32[r2 >> 2] = 1732584193;
  HEAP32[r2 + 4 >> 2] = -271733879;
  HEAP32[r3 >> 2] = -447771869;
  HEAP32[r3 + 4 >> 2] = -1304134012;
  r5 = r1;
  _cast_setkey(r5, r4, 16);
  r4 = r1 + 112 | 0;
  r6 = r2;
  _encrypt_block1583(r5, r4, r6);
  if ((_memcmp(r4, r3, 8) | 0) != 0) {
    r7 = 481100;
    STACKTOP = r1;
    return r7;
  }
  _decrypt_block1584(r5, r4, r4);
  r7 = (_memcmp(r4, r6, 8) | 0) == 0 ? 0 : 477016;
  STACKTOP = r1;
  return r7;
}
function _crc32_init(r1) {
  HEAP32[r1 >> 2] = -1;
  return;
}
function _crc32rfc1510_init(r1) {
  HEAP32[r1 >> 2] = 0;
  return;
}
function _crc24rfc2440_init(r1) {
  HEAP32[r1 >> 2] = 11994318;
  return;
}
function _key_schedule1588(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = r3 >> 2;
  r3 = r2 >> 2;
  r5 = r1 >> 2;
  r6 = (r1 + 12 | 0) >> 2;
  r7 = HEAP32[r6];
  r8 = (r1 + 8 | 0) >> 2;
  r9 = HEAP32[((r7 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[r5] ^ HEAP32[((r7 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r7 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[r8] >>> 24 << 2) + 431428 >> 2];
  HEAP32[r3] = r9;
  r7 = HEAP32[r8];
  r10 = HEAP32[(r9 >>> 24 << 2) + 433476 >> 2] ^ r7 ^ HEAP32[((r9 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r9 & 255) << 2) + 430404 >> 2] ^ HEAP32[((r7 >>> 8 & 255) << 2) + 430404 >> 2];
  r7 = (r2 + 4 | 0) >> 2;
  HEAP32[r7] = r10;
  r9 = HEAP32[((r10 & 255) << 2) + 433476 >> 2] ^ HEAP32[r6] ^ HEAP32[((r10 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r10 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r10 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r8] >>> 16 & 255) << 2) + 433476 >> 2];
  r10 = (r2 + 8 | 0) >> 2;
  HEAP32[r10] = r9;
  r11 = (r1 + 4 | 0) >> 2;
  r1 = (r2 + 12 | 0) >> 2;
  HEAP32[r1] = HEAP32[((r9 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[r11] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r9 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r8] & 255) << 2) + 432452 >> 2];
  r9 = HEAP32[r10];
  r2 = HEAP32[r7];
  HEAP32[r4] = HEAP32[((r9 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[((r2 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r3] >>> 8 & 255) << 2) + 433476 >> 2];
  r2 = HEAP32[r10];
  r9 = HEAP32[r7];
  HEAP32[r4 + 1] = HEAP32[((r2 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 432452 >> 2];
  r9 = HEAP32[r1];
  r2 = HEAP32[r3];
  HEAP32[r4 + 2] = HEAP32[((r9 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[((r2 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r10] >>> 16 & 255) << 2) + 431428 >> 2];
  r2 = HEAP32[r1];
  r9 = HEAP32[r3];
  HEAP32[r4 + 3] = HEAP32[((r2 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[(r2 >>> 24 << 2) + 430404 >> 2];
  r2 = HEAP32[r7];
  r9 = HEAP32[((r2 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[r10] ^ HEAP32[((r2 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r2 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[r3] >>> 24 << 2) + 431428 >> 2];
  HEAP32[r5] = r9;
  r2 = HEAP32[r3];
  r12 = HEAP32[(r9 >>> 24 << 2) + 433476 >> 2] ^ r2 ^ HEAP32[((r9 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r9 & 255) << 2) + 430404 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 430404 >> 2];
  HEAP32[r11] = r12;
  r2 = HEAP32[((r12 & 255) << 2) + 433476 >> 2] ^ HEAP32[r7] ^ HEAP32[((r12 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r12 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r12 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r3] >>> 16 & 255) << 2) + 433476 >> 2];
  HEAP32[r8] = r2;
  r12 = HEAP32[((r2 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[r1] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r2 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r2 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r3] & 255) << 2) + 432452 >> 2];
  HEAP32[r6] = r12;
  r2 = HEAP32[r5];
  HEAP32[r4 + 4] = HEAP32[((r2 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r2 & 255) << 2) + 433476 >> 2] ^ HEAP32[(r12 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r12 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[r8] >>> 24 << 2) + 433476 >> 2];
  r12 = HEAP32[r5];
  r2 = HEAP32[r6];
  HEAP32[r4 + 5] = HEAP32[(r12 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[((r12 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r2 & 255) << 2) + 430404 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 432452 >> 2];
  r2 = HEAP32[r11];
  r12 = HEAP32[r8];
  HEAP32[r4 + 6] = HEAP32[((r2 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r2 & 255) << 2) + 433476 >> 2] ^ HEAP32[(r12 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r12 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r5] & 255) << 2) + 431428 >> 2];
  r12 = HEAP32[r11];
  r2 = HEAP32[r8];
  HEAP32[r4 + 7] = HEAP32[(r12 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[((r12 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r2 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r2 & 255) << 2) + 430404 >> 2] ^ HEAP32[((r12 & 255) << 2) + 430404 >> 2];
  r12 = HEAP32[r6];
  r2 = HEAP32[((r12 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[r5] ^ HEAP32[((r12 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r12 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r12 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[r8] >>> 24 << 2) + 431428 >> 2];
  HEAP32[r3] = r2;
  r12 = HEAP32[r8];
  r9 = HEAP32[(r2 >>> 24 << 2) + 433476 >> 2] ^ r12 ^ HEAP32[((r2 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r2 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r2 & 255) << 2) + 430404 >> 2] ^ HEAP32[((r12 >>> 8 & 255) << 2) + 430404 >> 2];
  HEAP32[r7] = r9;
  r12 = HEAP32[((r9 & 255) << 2) + 433476 >> 2] ^ HEAP32[r6] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r8] >>> 16 & 255) << 2) + 433476 >> 2];
  HEAP32[r10] = r12;
  r9 = HEAP32[((r12 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[r11] ^ HEAP32[((r12 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r12 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r12 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r8] & 255) << 2) + 432452 >> 2];
  HEAP32[r1] = r9;
  r12 = HEAP32[r3];
  HEAP32[r4 + 8] = HEAP32[((r12 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r12 & 255) << 2) + 433476 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r10] >>> 16 & 255) << 2) + 433476 >> 2];
  r9 = HEAP32[r3];
  r12 = HEAP32[r1];
  HEAP32[r4 + 9] = HEAP32[(r9 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r12 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r12 & 255) << 2) + 430404 >> 2] ^ HEAP32[(r12 >>> 24 << 2) + 432452 >> 2];
  r12 = HEAP32[r7];
  r9 = HEAP32[r10];
  HEAP32[r4 + 10] = HEAP32[((r12 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r12 & 255) << 2) + 433476 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r3] >>> 8 & 255) << 2) + 431428 >> 2];
  r9 = HEAP32[r7];
  r12 = HEAP32[r10];
  HEAP32[r4 + 11] = HEAP32[(r9 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r12 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r12 & 255) << 2) + 430404 >> 2] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 430404 >> 2];
  r9 = HEAP32[r7];
  r12 = HEAP32[((r9 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[r10] ^ HEAP32[((r9 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[r3] >>> 24 << 2) + 431428 >> 2];
  HEAP32[r5] = r12;
  r9 = HEAP32[r3];
  r10 = HEAP32[(r12 >>> 24 << 2) + 433476 >> 2] ^ r9 ^ HEAP32[((r12 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r12 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r12 & 255) << 2) + 430404 >> 2] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 430404 >> 2];
  HEAP32[r11] = r10;
  r9 = HEAP32[((r10 & 255) << 2) + 433476 >> 2] ^ HEAP32[r7] ^ HEAP32[((r10 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r10 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r10 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r3] >>> 16 & 255) << 2) + 433476 >> 2];
  HEAP32[r8] = r9;
  HEAP32[r6] = HEAP32[((r9 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[r1] ^ HEAP32[((r9 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r9 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r9 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r3] & 255) << 2) + 432452 >> 2];
  r3 = HEAP32[r8];
  r9 = HEAP32[r11];
  HEAP32[r4 + 12] = HEAP32[((r3 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[((r9 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[r5] & 255) << 2) + 433476 >> 2];
  r9 = HEAP32[r8];
  r3 = HEAP32[r11];
  HEAP32[r4 + 13] = HEAP32[((r9 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r3 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((r3 & 255) << 2) + 432452 >> 2];
  r3 = HEAP32[r6];
  r9 = HEAP32[r5];
  HEAP32[r4 + 14] = HEAP32[((r3 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(r3 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[((r9 & 255) << 2) + 431428 >> 2] ^ HEAP32[((r9 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[r8] >>> 24 << 2) + 431428 >> 2];
  r8 = HEAP32[r6];
  r6 = HEAP32[r5];
  HEAP32[r4 + 15] = HEAP32[((r8 & 255) << 2) + 432452 >> 2] ^ HEAP32[((r8 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[((r6 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(r6 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((r8 >>> 16 & 255) << 2) + 430404 >> 2];
  return;
}
function _crc32_final(r1) {
  var r2, r3;
  r2 = r1 >> 2;
  r3 = HEAP32[r2] ^ -1;
  HEAP32[r2] = r3;
  HEAP8[r1 + 4 | 0] = r3 >>> 24 & 255;
  HEAP8[r1 + 5 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 6 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 7 | 0] = HEAP32[r2] & 255;
  return;
}
function _crc32_read(r1) {
  return r1 + 4 | 0;
}
function _crc32rfc1510_final(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP8[r1 + 4 | 0] = HEAP32[r2] >>> 24 & 255;
  HEAP8[r1 + 5 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 6 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 7 | 0] = HEAP32[r2] & 255;
  return;
}
function _crc24rfc2440_write(r1, r2, r3) {
  var r4, r5, r6;
  if ((r2 | 0) == 0 | (r3 | 0) == 0) {
    return;
  }
  r4 = r1;
  r1 = r2;
  r2 = r3;
  while (1) {
    r3 = r2 - 1 | 0;
    r5 = (HEAPU8[r1] << 16 ^ HEAP32[r4 >> 2]) << 1;
    r6 = ((r5 & 16777216 | 0) == 0 ? r5 : r5 ^ 25578747) << 1;
    r5 = ((r6 & 16777216 | 0) == 0 ? r6 : r6 ^ 25578747) << 1;
    r6 = ((r5 & 16777216 | 0) == 0 ? r5 : r5 ^ 25578747) << 1;
    r5 = ((r6 & 16777216 | 0) == 0 ? r6 : r6 ^ 25578747) << 1;
    r6 = ((r5 & 16777216 | 0) == 0 ? r5 : r5 ^ 25578747) << 1;
    r5 = ((r6 & 16777216 | 0) == 0 ? r6 : r6 ^ 25578747) << 1;
    r6 = ((r5 & 16777216 | 0) == 0 ? r5 : r5 ^ 25578747) << 1;
    HEAP32[r4 >> 2] = (r6 & 16777216 | 0) == 0 ? r6 : r6 ^ 25578747;
    if ((r3 | 0) == 0) {
      break;
    } else {
      r1 = r1 + 1 | 0;
      r2 = r3;
    }
  }
  return;
}
function _crc24rfc2440_final(r1) {
  var r2;
  r2 = r1 >> 2;
  HEAP8[r1 + 4 | 0] = HEAP32[r2] >>> 16 & 255;
  HEAP8[r1 + 5 | 0] = HEAP32[r2] >>> 8 & 255;
  HEAP8[r1 + 6 | 0] = HEAP32[r2] & 255;
  return;
}
function _crc32_write(r1, r2, r3) {
  var r4;
  if ((r2 | 0) == 0) {
    return;
  }
  r4 = r1;
  HEAP32[r4 >> 2] = _update_crc32(HEAP32[r4 >> 2], r2, r3);
  return;
}
function __gcry_register_pk_dsa_progress(r1, r2) {
  HEAP32[110059] = r1;
  HEAP32[110054] = r2;
  return;
}
function _gpg_err_code1660(r1) {
  return r1 & 65535;
}
function _update_crc32(r1, r2, r3) {
  var r4, r5, r6, r7;
  if ((r3 | 0) == 0) {
    r4 = r1;
    return r4;
  } else {
    r5 = r1;
    r6 = 0;
  }
  while (1) {
    r1 = HEAP32[((HEAPU8[r2 + r6 | 0] ^ r5 & 255) << 2) + 458404 >> 2] ^ r5 >>> 8;
    r7 = r6 + 1 | 0;
    if ((r7 | 0) == (r3 | 0)) {
      r4 = r1;
      break;
    } else {
      r5 = r1;
      r6 = r7;
    }
  }
  return r4;
}
function _dsa_generate(r1, r2, r3, r4, r5) {
  return _dsa_generate_ext(r1, r2, 0, 0, r4, r5, 0);
}
function _dsa_check_secret_key(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r3 = r1, r4 = r3 >> 2;
  r5 = HEAP32[r2 >> 2];
  if ((r5 | 0) == 0) {
    STACKTOP = r1;
    return 30;
  }
  r6 = r2 + 4 | 0;
  if ((HEAP32[r6 >> 2] | 0) == 0) {
    STACKTOP = r1;
    return 30;
  }
  r7 = r2 + 8 | 0;
  if ((HEAP32[r7 >> 2] | 0) == 0) {
    STACKTOP = r1;
    return 30;
  }
  r8 = r2 + 12 | 0;
  if ((HEAP32[r8 >> 2] | 0) == 0) {
    STACKTOP = r1;
    return 30;
  }
  r9 = r2 + 16 | 0;
  if ((HEAP32[r9 >> 2] | 0) == 0) {
    STACKTOP = r1;
    return 30;
  } else {
    HEAP32[r4] = r5;
    HEAP32[r4 + 1] = HEAP32[r6 >> 2];
    HEAP32[r4 + 2] = HEAP32[r7 >> 2];
    HEAP32[r4 + 3] = HEAP32[r8 >> 2];
    HEAP32[r4 + 4] = HEAP32[r9 >> 2];
    r9 = (_check_secret_key1665(r3) | 0) == 0 ? 7 : 0;
    STACKTOP = r1;
    return r9;
  }
}
function _dsa_sign(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r5 = r1, r6 = r5 >> 2;
  do {
    if ((r3 | 0) == 0) {
      r7 = 30;
    } else {
      r8 = HEAP32[r4 >> 2];
      if ((r8 | 0) == 0) {
        r7 = 30;
        break;
      }
      r9 = r4 + 4 | 0;
      if ((HEAP32[r9 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r10 = r4 + 8 | 0;
      if ((HEAP32[r10 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r11 = r4 + 12 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r12 = r4 + 16 | 0;
      if ((HEAP32[r12 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r13 = (r5 | 0) >> 2;
      HEAP32[r13] = r8;
      HEAP32[r6 + 1] = HEAP32[r9 >> 2];
      HEAP32[r6 + 2] = HEAP32[r10 >> 2];
      HEAP32[r6 + 3] = HEAP32[r11 >> 2];
      HEAP32[r6 + 4] = HEAP32[r12 >> 2];
      HEAP32[r2 >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[r13] + 4 >> 2]);
      r12 = __gcry_mpi_alloc(HEAP32[HEAP32[r13] + 4 >> 2]);
      HEAP32[r2 + 4 >> 2] = r12;
      _sign(HEAP32[r2 >> 2], r12, r3, r5);
      r7 = 0;
    }
  } while (0);
  STACKTOP = r1;
  return r7;
}
function _dsa_verify(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r6, r1 = r5 >> 2;
  if ((HEAP32[r3 >> 2] | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r7 = r3 + 4 | 0;
  if ((HEAP32[r7 >> 2] | 0) == 0 | (r2 | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r8 = HEAP32[r4 >> 2];
  if ((r8 | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r9 = r4 + 4 | 0;
  if ((HEAP32[r9 >> 2] | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r10 = r4 + 8 | 0;
  if ((HEAP32[r10 >> 2] | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r11 = r4 + 12 | 0;
  if ((HEAP32[r11 >> 2] | 0) == 0) {
    STACKTOP = r6;
    return 30;
  } else {
    HEAP32[r1] = r8;
    HEAP32[r1 + 1] = HEAP32[r9 >> 2];
    HEAP32[r1 + 2] = HEAP32[r10 >> 2];
    HEAP32[r1 + 3] = HEAP32[r11 >> 2];
    r11 = (_verify(HEAP32[r3 >> 2], HEAP32[r7 >> 2], r2, r5) | 0) == 0 ? 8 : 0;
    STACKTOP = r6;
    return r11;
  }
}
function _dsa_get_nbits(r1, r2) {
  return __gcry_mpi_get_nbits(HEAP32[r2 >> 2]);
}
function _run_selftests1659(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 17) {
    r4 = _selftests_dsa(r3);
  } else {
    r4 = 4;
  }
  return r4;
}
function _dsa_generate_ext(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52;
  r3 = r6 >> 2;
  r1 = r5 >> 2;
  r8 = 0;
  r9 = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  r10 = r9, r11 = r10 >> 2;
  r12 = r9 + 20, r13 = r12 >> 2;
  r14 = r9 + 24, r15 = r14 >> 2;
  r16 = r9 + 36;
  r17 = r9 + 88;
  r18 = r9 + 92;
  r19 = r9 + 96;
  r20 = r9 + 100;
  r21 = r9 + 104;
  HEAP32[r13] = 0;
  r22 = r14 >> 2;
  HEAP32[r22] = 0;
  HEAP32[r22 + 1] = 0;
  HEAP32[r22 + 2] = 0;
  L126 : do {
    if ((r4 | 0) == 0) {
      r23 = r2;
      r24 = 0;
      r25 = 0;
      r26 = 0;
      r27 = 0;
      r28 = 0;
    } else {
      r22 = __gcry_sexp_find_token(r4, 472312, 0);
      L128 : do {
        if ((r22 | 0) == 0) {
          r29 = 0;
        } else {
          r30 = __gcry_sexp_nth_data(r22, 1, r17);
          do {
            if ((r30 | 0) != 0) {
              r31 = HEAP32[r17 >> 2];
              if (r31 >>> 0 > 48) {
                break;
              }
              r32 = r16 | 0;
              _memcpy(r32, r30, r31);
              HEAP8[r16 + HEAP32[r17 >> 2] | 0] = 0;
              r31 = _strtoul(r32, 0, 0);
              __gcry_sexp_release(r22);
              r29 = r31;
              break L128;
            }
          } while (0);
          __gcry_sexp_release(r22);
          r33 = 65;
          STACKTOP = r9;
          return r33;
        }
      } while (0);
      r22 = __gcry_sexp_find_token(r4, 470804, 0);
      if ((r22 | 0) == 0) {
        r34 = 0;
      } else {
        __gcry_sexp_release(r22);
        r34 = 1;
      }
      r22 = __gcry_sexp_find_token(r4, 469396, 0);
      r30 = __gcry_sexp_find_token(r4, 467800, 0);
      if ((r30 | 0) == 0) {
        r35 = 0;
      } else {
        __gcry_sexp_release(r30);
        r35 = 1;
      }
      r30 = __gcry_sexp_find_token(r4, 465696, 0);
      if ((r30 | 0) == 0) {
        r36 = 0;
      } else {
        __gcry_sexp_release(r30);
        r36 = 1;
      }
      r30 = __gcry_sexp_find_token(r4, 490916, 0);
      if ((r30 | 0) == 0) {
        r23 = r2;
        r24 = r35;
        r25 = r36;
        r26 = r34;
        r27 = r22;
        r28 = r29;
        break;
      }
      if (!((r22 | 0) == 0 & (r29 | 0) == 0 & (r2 | 0) == 0)) {
        __gcry_sexp_release(r30);
        __gcry_sexp_release(r22);
        r33 = 55;
        STACKTOP = r9;
        return r33;
      }
      r31 = __gcry_sexp_find_token(r30, 490024, 0);
      r32 = (r14 | 0) >> 2;
      HEAP32[r32] = __gcry_sexp_nth_mpi(r31, 1, 5);
      __gcry_sexp_release(r31);
      r31 = __gcry_sexp_find_token(r30, 488328, 0);
      r37 = (r14 + 4 | 0) >> 2;
      HEAP32[r37] = __gcry_sexp_nth_mpi(r31, 1, 5);
      __gcry_sexp_release(r31);
      r31 = __gcry_sexp_find_token(r30, 487648, 0);
      r38 = (r14 + 8 | 0) >> 2;
      HEAP32[r38] = __gcry_sexp_nth_mpi(r31, 1, 5);
      __gcry_sexp_release(r31);
      __gcry_sexp_release(r30);
      r30 = HEAP32[r32];
      do {
        if ((r30 | 0) != 0) {
          if ((HEAP32[r37] | 0) == 0) {
            break;
          }
          if ((HEAP32[r38] | 0) == 0) {
            break;
          }
          r23 = __gcry_mpi_get_nbits(r30);
          r24 = r35;
          r25 = r36;
          r26 = r34;
          r27 = r22;
          r28 = __gcry_mpi_get_nbits(HEAP32[r37]);
          break L126;
        }
      } while (0);
      __gcry_mpi_release(HEAP32[r32]);
      __gcry_mpi_release(HEAP32[r37]);
      __gcry_mpi_release(HEAP32[r38]);
      __gcry_sexp_release(r22);
      r33 = 128;
      STACKTOP = r9;
      return r33;
    }
  } while (0);
  do {
    if ((r27 | 0) == 0 & (r24 | 0) == 0 & (r25 | 0) == 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        r8 = 131;
        break;
      }
      r39 = _generate(r10, r23, r28, r26, r14, r6);
      break;
    } else {
      r8 = 131;
    }
  } while (0);
  do {
    if (r8 == 131) {
      r6 = _generate_fips186(r10, r23, r28, r27, r14, r18, r19, r20, r21);
      __gcry_sexp_release(r27);
      if ((r6 | 0) != 0) {
        r39 = r6;
        break;
      }
      r6 = HEAP32[r21 >> 2];
      if ((r6 | 0) == 0) {
        r39 = 0;
        break;
      }
      r26 = HEAP32[r20 >> 2];
      r25 = HEAP32[r19 >> 2];
      r24 = _gpg_err_code1660(__gcry_sexp_build(r12, 0, 486672, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[r18 >> 2], HEAP32[tempInt + 4 >> 2] = r26, HEAP32[tempInt + 8 >> 2] = r25, HEAP32[tempInt + 12 >> 2] = r6, tempInt)));
      if ((r24 | 0) != 0) {
        r6 = r10 | 0;
        __gcry_mpi_release(HEAP32[r6 >> 2]);
        HEAP32[r6 >> 2] = 0;
        r6 = r10 + 4 | 0;
        __gcry_mpi_release(HEAP32[r6 >> 2]);
        HEAP32[r6 >> 2] = 0;
        r6 = r10 + 8 | 0;
        __gcry_mpi_release(HEAP32[r6 >> 2]);
        HEAP32[r6 >> 2] = 0;
        r6 = r10 + 12 | 0;
        __gcry_mpi_release(HEAP32[r6 >> 2]);
        HEAP32[r6 >> 2] = 0;
        r6 = r10 + 16 | 0;
        __gcry_mpi_release(HEAP32[r6 >> 2]);
        HEAP32[r6 >> 2] = 0;
      }
      __gcry_free(HEAP32[r19 >> 2]);
      __gcry_mpi_release(HEAP32[r21 >> 2]);
      r39 = r24;
    }
  } while (0);
  __gcry_mpi_release(HEAP32[r15]);
  __gcry_mpi_release(HEAP32[r15 + 1]);
  __gcry_mpi_release(HEAP32[r15 + 2]);
  L168 : do {
    if ((r39 | 0) == 0) {
      HEAP32[r1] = HEAP32[r11];
      HEAP32[r1 + 1] = HEAP32[r11 + 1];
      HEAP32[r1 + 2] = HEAP32[r11 + 2];
      HEAP32[r1 + 3] = HEAP32[r11 + 3];
      HEAP32[r1 + 4] = HEAP32[r11 + 4];
      if ((r7 | 0) == 0) {
        r40 = 0;
        break;
      }
      r15 = HEAP32[r3];
      do {
        if ((r15 | 0) == 0) {
          if ((HEAP32[r13] | 0) != 0) {
            r41 = 0;
            r8 = 142;
            break;
          }
          HEAP32[r7 >> 2] = 0;
          r40 = r39;
          break L168;
        } else {
          r42 = r15;
          r43 = 0;
        }
      } while (0);
      while (1) {
        if (r8 == 142) {
          r8 = 0;
          r15 = HEAP32[r3];
          if ((r15 | 0) == 0) {
            r44 = r41;
            break;
          } else {
            r42 = r15;
            r43 = r41;
          }
        }
        if ((HEAP32[r42 + (r43 << 2) >> 2] | 0) == 0) {
          r44 = r43;
          break;
        }
        r41 = r43 + 1 | 0;
        r8 = 142;
        continue;
      }
      r15 = __gcry_malloc((r44 << 1) + 50 | 0);
      do {
        if ((r15 | 0) == 0) {
          r45 = 0;
          r46 = _gpg_err_code_from_syserror();
        } else {
          r22 = r15 + 14 | 0;
          _memcpy(r15, 485856, 15);
          if ((HEAP32[r13] | 0) == 0) {
            r47 = r22;
          } else {
            HEAP8[r22] = HEAP8[484984];
            HEAP8[r22 + 1 | 0] = HEAP8[484985 | 0];
            HEAP8[r22 + 2 | 0] = HEAP8[484986 | 0];
            r47 = r15 + 16 | 0;
          }
          if ((r44 | 0) == 0) {
            r48 = r47;
          } else {
            r22 = r47 + 12 | 0;
            _memcpy(r47, 484284, 13);
            if ((r44 | 0) > 0) {
              r38 = (r44 << 1) + 12 | 0;
              r37 = 0;
              r32 = r22;
              while (1) {
                HEAP8[r32] = HEAP8[483360];
                HEAP8[r32 + 1 | 0] = HEAP8[483361 | 0];
                HEAP8[r32 + 2 | 0] = HEAP8[483362 | 0];
                r21 = r37 + 1 | 0;
                if ((r21 | 0) == (r44 | 0)) {
                  break;
                } else {
                  r37 = r21;
                  r32 = r32 + 2 | 0;
                }
              }
              r49 = r47 + r38 | 0;
            } else {
              r49 = r22;
            }
            r32 = r49;
            tempBigInt = 41;
            HEAP8[r32] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[r32 + 1 | 0] = tempBigInt & 255;
            r48 = r49 + 1 | 0;
          }
          r32 = r48;
          tempBigInt = 41;
          HEAP8[r32] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r32 + 1 | 0] = tempBigInt & 255;
          r32 = __gcry_calloc(r44 + 2 | 0, 4);
          r37 = r32, r21 = r37 >> 2;
          if ((r32 | 0) == 0) {
            r45 = r37;
            r46 = _gpg_err_code_from_syserror();
            break;
          }
          if ((HEAP32[r13] | 0) == 0) {
            r50 = 0;
          } else {
            HEAP32[r21] = r12;
            r50 = 1;
          }
          if ((r44 | 0) > 0) {
            r32 = HEAP32[r3];
            r19 = r50;
            r10 = 0;
            while (1) {
              HEAP32[(r19 << 2 >> 2) + r21] = (r10 << 2) + r32 | 0;
              r18 = r10 + 1 | 0;
              if ((r18 | 0) == (r44 | 0)) {
                break;
              } else {
                r19 = r19 + 1 | 0;
                r10 = r18;
              }
            }
            r51 = r44 + r50 | 0;
          } else {
            r51 = r50;
          }
          HEAP32[(r51 << 2 >> 2) + r21] = 0;
          r45 = r37;
          r46 = _gpg_err_code1660(__gcry_sexp_build_array(r7, 0, r15, r37));
        }
      } while (0);
      __gcry_free(r45);
      __gcry_free(r15);
      r10 = HEAP32[r3];
      L208 : do {
        if ((r44 | 0) > 0) {
          r19 = 0;
          r32 = r10;
          while (1) {
            __gcry_mpi_release(HEAP32[r32 + (r19 << 2) >> 2]);
            HEAP32[HEAP32[r3] + (r19 << 2) >> 2] = 0;
            r22 = r19 + 1 | 0;
            r38 = HEAP32[r3];
            if ((r22 | 0) == (r44 | 0)) {
              r52 = r38;
              break L208;
            } else {
              r19 = r22;
              r32 = r38;
            }
          }
        } else {
          r52 = r10;
        }
      } while (0);
      __gcry_free(r52);
      HEAP32[r3] = 0;
      if ((r46 | 0) == 0) {
        r40 = 0;
        break;
      }
      __gcry_mpi_release(HEAP32[r1]);
      HEAP32[r1] = 0;
      r10 = r5 + 4 | 0;
      __gcry_mpi_release(HEAP32[r10 >> 2]);
      HEAP32[r10 >> 2] = 0;
      r10 = r5 + 8 | 0;
      __gcry_mpi_release(HEAP32[r10 >> 2]);
      HEAP32[r10 >> 2] = 0;
      r10 = r5 + 12 | 0;
      __gcry_mpi_release(HEAP32[r10 >> 2]);
      HEAP32[r10 >> 2] = 0;
      r10 = r5 + 16 | 0;
      __gcry_mpi_release(HEAP32[r10 >> 2]);
      HEAP32[r10 >> 2] = 0;
      r40 = r46;
    } else {
      r40 = r39;
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r13]);
  r33 = r40;
  STACKTOP = r9;
  return r33;
}
function _generate_fips186(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30;
  r10 = r1 >> 2;
  r11 = 0;
  r12 = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  r13 = r12, r14 = r13 >> 2;
  r15 = r12 + 12, r16 = r15 >> 2;
  r17 = r12 + 16, r18 = r17 >> 2;
  r19 = r13 >> 2;
  HEAP32[r19] = 0;
  HEAP32[r19 + 1] = 0;
  HEAP32[r19 + 2] = 0;
  HEAP32[r16] = 0;
  HEAP32[r18] = 0;
  HEAP32[r6 >> 2] = 0;
  HEAP32[r7 >> 2] = 0;
  HEAP32[r8 >> 2] = 0;
  HEAP32[r9 >> 2] = 0;
  do {
    if ((r3 | 0) == 0) {
      if ((r2 | 0) == 1024) {
        r20 = 160;
        r11 = 177;
        break;
      } else if ((r2 | 0) == 2048) {
        r21 = 224;
        r11 = 178;
        break;
      }
      r20 = (r2 | 0) == 3072 ? 256 : r3;
      r11 = 177;
      break;
    } else {
      r20 = r3;
      r11 = 177;
    }
  } while (0);
  do {
    if (r11 == 177) {
      if ((r2 | 0) == 1024 & (r20 | 0) == 160) {
        r22 = r20;
        break;
      } else {
        r21 = r20;
        r11 = 178;
        break;
      }
    }
  } while (0);
  do {
    if (r11 == 178) {
      r20 = (r21 | 0) == 256;
      if ((r2 | 0) == 2048 & ((r21 | 0) == 224 | r20) | (r2 | 0) == 3072 & r20) {
        r22 = r21;
        break;
      } else {
        r23 = 55;
      }
      STACKTOP = r12;
      return r23;
    }
  } while (0);
  r21 = HEAP32[r5 >> 2];
  do {
    if ((r21 | 0) == 0) {
      r11 = 188;
    } else {
      r20 = r5 + 4 | 0;
      if ((HEAP32[r20 >> 2] | 0) == 0) {
        r11 = 188;
        break;
      }
      r3 = r5 + 8 | 0;
      if ((HEAP32[r3 >> 2] | 0) == 0) {
        r11 = 188;
        break;
      }
      HEAP32[r18] = __gcry_mpi_copy(r21);
      HEAP32[r16] = __gcry_mpi_copy(HEAP32[r20 >> 2]);
      r20 = __gcry_mpi_copy(HEAP32[r3 >> 2]);
      if ((__gcry_mpi_get_nbits(HEAP32[r18]) | 0) != (r2 | 0)) {
        __gcry_assert_failed(476236, 481544, 465, 494800);
      }
      if ((__gcry_mpi_get_nbits(HEAP32[r16]) | 0) != (r22 | 0)) {
        __gcry_assert_failed(475956, 481544, 466, 494800);
      }
      if ((r4 | 0) == 0) {
        r24 = 0;
        r25 = 0;
        r26 = r20;
        r27 = 0;
        r11 = 194;
        break;
      }
      __gcry_assert_failed(475692, 481544, 467, 494800);
    }
  } while (0);
  L236 : do {
    if (r11 == 188) {
      do {
        if ((r4 | 0) != 0) {
          r21 = __gcry_sexp_find_token(r4, 475436, 0);
          HEAP32[r14] = r21;
          if ((r21 | 0) == 0) {
            break;
          }
          HEAP32[r14 + 1] = __gcry_sexp_nth_data(r21, 1, r13 + 8 | 0);
        }
      } while (0);
      r21 = __gcry_generate_fips186_2_prime(r2, r22, HEAP32[r14 + 1], HEAP32[r14 + 2], r15, r17, r6, r7, r8);
      __gcry_sexp_release(HEAP32[r14]);
      if ((r21 | 0) != 0) {
        r28 = 0;
        r29 = r21;
        break;
      }
      r5 = __gcry_mpi_alloc_like(HEAP32[r18]);
      __gcry_mpi_sub_ui(r5, HEAP32[r18], 1);
      __gcry_mpi_fdiv_q(r5, r5, HEAP32[r16]);
      r20 = __gcry_mpi_alloc_like(HEAP32[r18]);
      r3 = __gcry_mpi_alloc_set_ui(1);
      while (1) {
        __gcry_mpi_add_ui(r3, r3, 1);
        __gcry_mpi_powm(r20, r3, r5, HEAP32[r18]);
        if ((__gcry_mpi_cmp_ui(r20, 1) | 0) != 0) {
          r24 = r5;
          r25 = r3;
          r26 = r20;
          r27 = r21;
          r11 = 194;
          break L236;
        }
      }
    }
  } while (0);
  if (r11 == 194) {
    r11 = __gcry_mpi_snew(r22);
    r14 = r22 + 1 | 0;
    while (1) {
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        _progress1661(46);
      }
      __gcry_mpi_randomize(r11, r22, 2);
      __gcry_mpi_clear_highbit(r11, r14);
      if ((__gcry_mpi_cmp_ui(r11, 0) | 0) <= 0) {
        continue;
      }
      if ((__gcry_mpi_cmp(r11, HEAP32[r16]) | 0) <= -1) {
        break;
      }
    }
    r14 = __gcry_mpi_alloc_like(HEAP32[r18]);
    __gcry_mpi_powm(r14, r26, r11, HEAP32[r18]);
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1661(10);
      __gcry_log_mpidump(478860, HEAP32[r18]);
      __gcry_log_mpidump(478564, HEAP32[r16]);
      __gcry_log_mpidump(478228, r26);
      __gcry_log_mpidump(477936, r14);
      __gcry_log_mpidump(477644, r11);
      __gcry_log_mpidump(475332, r25);
    }
    HEAP32[r10] = HEAP32[r18];
    HEAP32[r18] = 0;
    HEAP32[r10 + 1] = HEAP32[r16];
    HEAP32[r16] = 0;
    HEAP32[r10 + 2] = r26;
    HEAP32[r10 + 3] = r14;
    HEAP32[r10 + 4] = r11;
    HEAP32[r9 >> 2] = r25;
    r28 = r24;
    r29 = r27;
  }
  __gcry_mpi_release(HEAP32[r18]);
  __gcry_mpi_release(HEAP32[r16]);
  __gcry_mpi_release(0);
  __gcry_mpi_release(0);
  __gcry_mpi_release(0);
  __gcry_mpi_release(0);
  __gcry_mpi_release(r28);
  do {
    if ((r29 | 0) == 0) {
      if ((_test_keys1662(r1, r22) | 0) == 0) {
        r23 = 0;
        STACKTOP = r12;
        return r23;
      } else {
        r28 = r1 | 0;
        __gcry_mpi_release(HEAP32[r28 >> 2]);
        HEAP32[r28 >> 2] = 0;
        r28 = r1 + 4 | 0;
        __gcry_mpi_release(HEAP32[r28 >> 2]);
        HEAP32[r28 >> 2] = 0;
        r28 = r1 + 8 | 0;
        __gcry_mpi_release(HEAP32[r28 >> 2]);
        HEAP32[r28 >> 2] = 0;
        r28 = r1 + 12 | 0;
        __gcry_mpi_release(HEAP32[r28 >> 2]);
        HEAP32[r28 >> 2] = 0;
        r28 = r1 + 16 | 0;
        __gcry_mpi_release(HEAP32[r28 >> 2]);
        HEAP32[r28 >> 2] = 0;
        __gcry_fips_signal_error(481544, 570, 494800, 0, 477420);
        r30 = 50;
        break;
      }
    } else {
      r30 = r29;
    }
  } while (0);
  HEAP32[r6 >> 2] = 0;
  __gcry_free(HEAP32[r7 >> 2]);
  HEAP32[r7 >> 2] = 0;
  HEAP32[r8 >> 2] = 0;
  __gcry_mpi_release(HEAP32[r9 >> 2]);
  HEAP32[r9 >> 2] = 0;
  r23 = r30;
  STACKTOP = r12;
  return r23;
}
function __gcry_register_pk_ecc_progress(r1, r2) {
  HEAP32[110058] = r1;
  HEAP32[110053] = r2;
  return;
}
function _progress1661(r1) {
  var r2;
  r2 = HEAP32[110059];
  if ((r2 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r2](HEAP32[110054], 476476, r1, 0, 0);
  return;
}
function _test_keys1662(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = __gcry_mpi_new(r2);
  r7 = __gcry_mpi_new(r2);
  r8 = __gcry_mpi_new(r2);
  HEAP32[r5] = HEAP32[r1 >> 2];
  HEAP32[r5 + 1] = HEAP32[r1 + 4 >> 2];
  HEAP32[r5 + 2] = HEAP32[r1 + 8 >> 2];
  HEAP32[r5 + 3] = HEAP32[r1 + 12 >> 2];
  __gcry_mpi_randomize(r6, r2, 0);
  _sign(r7, r8, r6, r1);
  if ((_verify(r7, r8, r6, r4) | 0) == 0) {
    r9 = -1;
    __gcry_mpi_release(r8);
    __gcry_mpi_release(r7);
    __gcry_mpi_release(r6);
    STACKTOP = r3;
    return r9;
  }
  __gcry_mpi_add_ui(r6, r6, 1);
  r9 = ((_verify(r7, r8, r6, r4) | 0) != 0) << 31 >> 31;
  __gcry_mpi_release(r8);
  __gcry_mpi_release(r7);
  __gcry_mpi_release(r6);
  STACKTOP = r3;
  return r9;
}
function _sign(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = (r4 + 4 | 0) >> 2;
  r6 = _gen_k(HEAP32[r5]);
  r7 = r4 | 0;
  __gcry_mpi_powm(r1, HEAP32[r4 + 8 >> 2], r6, HEAP32[r7 >> 2]);
  __gcry_mpi_fdiv_r(r1, r1, HEAP32[r5]);
  r8 = __gcry_mpi_alloc(HEAP32[r6 + 4 >> 2]);
  __gcry_mpi_invm(r8, r6, HEAP32[r5]);
  r9 = __gcry_mpi_alloc(HEAP32[HEAP32[r7 >> 2] + 4 >> 2]);
  __gcry_mpi_mul(r9, HEAP32[r4 + 16 >> 2], r1);
  __gcry_mpi_add(r9, r9, r3);
  __gcry_mpi_mulm(r2, r8, r9, HEAP32[r5]);
  __gcry_mpi_free(r6);
  __gcry_mpi_free(r8);
  __gcry_mpi_free(r9);
  return;
}
function _verify(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r6 = r5;
  r7 = r5 + 12;
  if ((__gcry_mpi_cmp_ui(r1, 0) | 0) <= 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r9 = (r4 + 4 | 0) >> 2;
  if ((__gcry_mpi_cmp(r1, HEAP32[r9]) | 0) >= 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  if ((__gcry_mpi_cmp_ui(r2, 0) | 0) <= 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  if ((__gcry_mpi_cmp(r2, HEAP32[r9]) | 0) >= 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r10 = __gcry_mpi_alloc(HEAP32[HEAP32[r9] + 4 >> 2]);
  r11 = __gcry_mpi_alloc(HEAP32[HEAP32[r9] + 4 >> 2]);
  r12 = __gcry_mpi_alloc(HEAP32[HEAP32[r9] + 4 >> 2]);
  r13 = r4 | 0;
  r14 = __gcry_mpi_alloc(HEAP32[HEAP32[r13 >> 2] + 4 >> 2]);
  __gcry_mpi_invm(r10, r2, HEAP32[r9]);
  __gcry_mpi_mulm(r11, r3, r10, HEAP32[r9]);
  __gcry_mpi_mulm(r12, r1, r10, HEAP32[r9]);
  r3 = r6 | 0;
  HEAP32[r3 >> 2] = HEAP32[r4 + 8 >> 2];
  r2 = r7 | 0;
  HEAP32[r2 >> 2] = r11;
  HEAP32[r6 + 4 >> 2] = HEAP32[r4 + 12 >> 2];
  HEAP32[r7 + 4 >> 2] = r12;
  HEAP32[r6 + 8 >> 2] = 0;
  HEAP32[r7 + 8 >> 2] = 0;
  __gcry_mpi_mulpowm(r14, r3, r2, HEAP32[r13 >> 2]);
  __gcry_mpi_fdiv_r(r14, r14, HEAP32[r9]);
  r9 = (__gcry_mpi_cmp(r14, r1) | 0) == 0 & 1;
  __gcry_mpi_free(r10);
  __gcry_mpi_free(r11);
  __gcry_mpi_free(r12);
  __gcry_mpi_free(r14);
  r8 = r9;
  STACKTOP = r5;
  return r8;
}
function _gen_k(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r2 = STACKTOP;
  r3 = __gcry_mpi_alloc_secure(HEAP32[r1 + 4 >> 2]);
  r4 = __gcry_mpi_get_nbits(r1);
  r5 = (r4 + 7 | 0) >>> 3;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(476668, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r6 = r4 >>> 0 < 32;
  r7 = r4 - 1 | 0;
  r4 = 0;
  while (1) {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1661(46);
    }
    if ((r4 | 0) == 0 | r6) {
      __gcry_free(r4);
      r8 = __gcry_random_bytes_secure(r5, 1);
    } else {
      r9 = __gcry_random_bytes_secure(4, 1);
      r10 = r9;
      r11 = r4;
      tempBigInt = HEAPU8[r10] | HEAPU8[r10 + 1 | 0] << 8 | HEAPU8[r10 + 2 | 0] << 16 | HEAPU8[r10 + 3 | 0] << 24 | 0;
      HEAP8[r11] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r11 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r11 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r11 + 3 | 0] = tempBigInt & 255;
      __gcry_free(r9);
      r8 = r4;
    }
    __gcry_mpi_set_buffer(r3, r8, r5, 0);
    r9 = (__gcry_mpi_test_bit(r3, r7) | 0) == 0;
    __gcry_mpi_set_highbit(r3, r7);
    if (r9) {
      __gcry_mpi_clear_bit(r3, r7);
    }
    if ((__gcry_mpi_cmp(r3, r1) | 0) >= 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        r4 = r8;
        continue;
      }
      _progress1661(43);
      r4 = r8;
      continue;
    }
    if ((__gcry_mpi_cmp_ui(r3, 0) | 0) > 0) {
      break;
    }
    if ((__gcry_get_debug_flag(1) | 0) == 0) {
      r4 = r8;
      continue;
    }
    _progress1661(45);
    r4 = r8;
  }
  __gcry_free(r8);
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    STACKTOP = r2;
    return r3;
  }
  _progress1661(10);
  STACKTOP = r2;
  return r3;
}
function _selftests_dsa(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r2 = 0;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 4, r7 = r6 >> 2;
  HEAP32[r5] = 0;
  HEAP32[r7] = 0;
  r8 = __gcry_sexp_sscan(r4, 0, 427164, 965);
  do {
    if ((r8 | 0) == 0) {
      r4 = __gcry_sexp_sscan(r6, 0, 429164, 916);
      if ((r4 | 0) != 0) {
        r9 = r4;
        r2 = 256;
        break;
      }
      r4 = __gcry_pk_testkey(HEAP32[r5]);
      if ((r4 | 0) != 0) {
        r10 = __gcry_strerror(r4);
        r11 = 474744;
        break;
      }
      r4 = _selftest_sign_10241663(HEAP32[r7], HEAP32[r5]);
      if ((r4 | 0) != 0) {
        r10 = r4;
        r11 = 474492;
        break;
      }
      __gcry_sexp_release(HEAP32[r7]);
      __gcry_sexp_release(HEAP32[r5]);
      r12 = 0;
      STACKTOP = r3;
      return r12;
    } else {
      r9 = r8;
      r2 = 256;
    }
  } while (0);
  if (r2 == 256) {
    r10 = __gcry_strerror(r9);
    r11 = 475056;
  }
  __gcry_sexp_release(HEAP32[r7]);
  __gcry_sexp_release(HEAP32[r5]);
  if ((r1 | 0) == 0) {
    r12 = 50;
    STACKTOP = r3;
    return r12;
  }
  FUNCTION_TABLE[r1](473912, 17, r11, r10);
  r12 = 50;
  STACKTOP = r3;
  return r12;
}
function _selftest_sign_10241663(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 4, r7 = r6 >> 2;
  r8 = r3 + 8, r9 = r8 >> 2;
  HEAP32[r5] = 0;
  HEAP32[r7] = 0;
  HEAP32[r9] = 0;
  do {
    if ((__gcry_sexp_sscan(r4, 0, 415400, 69) | 0) == 0) {
      if ((__gcry_sexp_sscan(r6, 0, 415252, 69) | 0) != 0) {
        r10 = 473684;
        break;
      }
      if ((__gcry_pk_sign(r8, HEAP32[r5], r2) | 0) != 0) {
        r10 = 473468;
        break;
      }
      if ((__gcry_pk_verify(HEAP32[r9], HEAP32[r5], r1) | 0) != 0) {
        r10 = 473324;
        break;
      }
      r10 = (_gcry_err_code1664(__gcry_pk_verify(HEAP32[r9], HEAP32[r7], r1)) | 0) == 8 ? 0 : 473164;
    } else {
      r10 = 473684;
    }
  } while (0);
  __gcry_sexp_release(HEAP32[r9]);
  __gcry_sexp_release(HEAP32[r7]);
  __gcry_sexp_release(HEAP32[r5]);
  STACKTOP = r3;
  return r10;
}
function _gcry_err_code1664(r1) {
  return _gpg_err_code1660(r1);
}
function _check_secret_key1665(r1) {
  var r2, r3;
  r2 = r1 + 12 | 0;
  r3 = __gcry_mpi_alloc(HEAP32[HEAP32[r2 >> 2] + 4 >> 2]);
  __gcry_mpi_powm(r3, HEAP32[r1 + 8 >> 2], HEAP32[r1 + 16 >> 2], HEAP32[r1 >> 2]);
  r1 = (__gcry_mpi_cmp(r3, HEAP32[r2 >> 2]) | 0) == 0 & 1;
  __gcry_mpi_free(r3);
  return r1;
}
function _ecc_generate(r1, r2, r3, r4, r5) {
  return _ecc_generate_ext(r1, r2, 0, 0, r4, r5, 0);
}
function _ecc_check_secret_key(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r3 = r1, r4 = r3 >> 2;
  r5 = HEAP32[r2 >> 2];
  do {
    if ((r5 | 0) == 0) {
      r6 = 30;
    } else {
      r7 = r2 + 4 | 0;
      if ((HEAP32[r7 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      r8 = r2 + 8 | 0;
      if ((HEAP32[r8 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      r9 = r2 + 12 | 0;
      if ((HEAP32[r9 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      r10 = r2 + 16 | 0;
      if ((HEAP32[r10 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      r11 = r2 + 20 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      r12 = r2 + 24 | 0;
      if ((HEAP32[r12 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      HEAP32[r4] = r5;
      HEAP32[r4 + 1] = HEAP32[r7 >> 2];
      HEAP32[r4 + 2] = HEAP32[r8 >> 2];
      r8 = r3 + 12 | 0;
      __gcry_mpi_ec_point_init(r8);
      r7 = _os2ec(r8, HEAP32[r9 >> 2]);
      if ((r7 | 0) != 0) {
        __gcry_mpi_ec_point_free(r8);
        r6 = r7;
        break;
      }
      HEAP32[r4 + 6] = HEAP32[r10 >> 2];
      r10 = r3 + 32 | 0;
      __gcry_mpi_ec_point_init(r10);
      r7 = _os2ec(r10, HEAP32[r11 >> 2]);
      if ((r7 | 0) == 0) {
        HEAP32[r4 + 11] = HEAP32[r12 >> 2];
        r12 = (_check_secret_key1778(r3) | 0) == 0;
        __gcry_mpi_ec_point_free(r8);
        __gcry_mpi_ec_point_free(r10);
        r6 = r12 ? 0 : 7;
        break;
      } else {
        __gcry_mpi_ec_point_free(r8);
        __gcry_mpi_ec_point_free(r10);
        r6 = r7;
        break;
      }
    }
  } while (0);
  STACKTOP = r1;
  return r6;
}
function _ecc_sign(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r5 = r1, r6 = r5 >> 2;
  do {
    if ((r3 | 0) == 0) {
      r7 = 30;
    } else {
      r8 = HEAP32[r4 >> 2];
      if ((r8 | 0) == 0) {
        r7 = 30;
        break;
      }
      r9 = r4 + 4 | 0;
      if ((HEAP32[r9 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r10 = r4 + 8 | 0;
      if ((HEAP32[r10 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r11 = r4 + 12 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r12 = r4 + 16 | 0;
      if ((HEAP32[r12 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r13 = r4 + 20 | 0;
      if ((HEAP32[r13 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r14 = r4 + 24 | 0;
      if ((HEAP32[r14 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r15 = (r5 | 0) >> 2;
      HEAP32[r15] = r8;
      HEAP32[r6 + 1] = HEAP32[r9 >> 2];
      HEAP32[r6 + 2] = HEAP32[r10 >> 2];
      r10 = r5 + 12 | 0;
      __gcry_mpi_ec_point_init(r10);
      r9 = _os2ec(r10, HEAP32[r11 >> 2]);
      if ((r9 | 0) != 0) {
        __gcry_mpi_ec_point_free(r10);
        r7 = r9;
        break;
      }
      HEAP32[r6 + 6] = HEAP32[r12 >> 2];
      r12 = r5 + 32 | 0;
      __gcry_mpi_ec_point_init(r12);
      r9 = _os2ec(r12, HEAP32[r13 >> 2]);
      if ((r9 | 0) != 0) {
        __gcry_mpi_ec_point_free(r10);
        __gcry_mpi_ec_point_free(r12);
        r7 = r9;
        break;
      }
      HEAP32[r6 + 11] = HEAP32[r14 >> 2];
      HEAP32[r2 >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[r15] + 4 >> 2]);
      r14 = __gcry_mpi_alloc(HEAP32[HEAP32[r15] + 4 >> 2]);
      r15 = r2 + 4 | 0;
      HEAP32[r15 >> 2] = r14;
      r9 = _sign1776(r3, r5, HEAP32[r2 >> 2], r14);
      if ((r9 | 0) != 0) {
        __gcry_mpi_free(HEAP32[r2 >> 2]);
        __gcry_mpi_free(HEAP32[r15 >> 2]);
        HEAP32[r2 >> 2] = 0;
      }
      __gcry_mpi_ec_point_free(r10);
      __gcry_mpi_ec_point_free(r12);
      r7 = r9;
    }
  } while (0);
  STACKTOP = r1;
  return r7;
}
function _ecc_verify(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  r5 = r6, r1 = r5 >> 2;
  do {
    if ((HEAP32[r3 >> 2] | 0) == 0) {
      r7 = 30;
    } else {
      r8 = r3 + 4 | 0;
      if ((HEAP32[r8 >> 2] | 0) == 0 | (r2 | 0) == 0) {
        r7 = 30;
        break;
      }
      r9 = HEAP32[r4 >> 2];
      if ((r9 | 0) == 0) {
        r7 = 30;
        break;
      }
      r10 = r4 + 4 | 0;
      if ((HEAP32[r10 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r11 = r4 + 8 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r12 = r4 + 12 | 0;
      if ((HEAP32[r12 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r13 = r4 + 16 | 0;
      if ((HEAP32[r13 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r14 = r4 + 20 | 0;
      if ((HEAP32[r14 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      HEAP32[r1] = r9;
      HEAP32[r1 + 1] = HEAP32[r10 >> 2];
      HEAP32[r1 + 2] = HEAP32[r11 >> 2];
      r11 = r5 + 12 | 0;
      __gcry_mpi_ec_point_init(r11);
      r10 = _os2ec(r11, HEAP32[r12 >> 2]);
      if ((r10 | 0) != 0) {
        __gcry_mpi_ec_point_free(r11);
        r7 = r10;
        break;
      }
      HEAP32[r1 + 6] = HEAP32[r13 >> 2];
      r13 = r5 + 32 | 0;
      __gcry_mpi_ec_point_init(r13);
      r10 = _os2ec(r13, HEAP32[r14 >> 2]);
      if ((r10 | 0) == 0) {
        r14 = _verify1777(r2, r5, HEAP32[r3 >> 2], HEAP32[r8 >> 2]);
        __gcry_mpi_ec_point_free(r11);
        __gcry_mpi_ec_point_free(r13);
        r7 = r14;
        break;
      } else {
        __gcry_mpi_ec_point_free(r11);
        __gcry_mpi_ec_point_free(r13);
        r7 = r10;
        break;
      }
    }
  } while (0);
  STACKTOP = r6;
  return r7;
}
function _ecc_get_nbits(r1, r2) {
  return __gcry_mpi_get_nbits(HEAP32[r2 >> 2]);
}
function _generate(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  r7 = 0;
  r8 = STACKTOP;
  do {
    if ((r3 | 0) == 0) {
      if ((r2 - 512 | 0) >>> 0 < 513) {
        r9 = 160;
        break;
      }
      if ((r2 | 0) == 2048) {
        r9 = 224;
        break;
      } else if ((r2 | 0) == 3072) {
        r9 = 256;
        break;
      } else if ((r2 | 0) == 7680) {
        r9 = 384;
        break;
      } else if ((r2 | 0) == 15360) {
        r9 = 512;
        break;
      } else {
        r10 = 55;
        STACKTOP = r8;
        return r10;
      }
    } else {
      r9 = r3;
    }
  } while (0);
  if (!((r9 - 160 | 0) >>> 0 < 353 & (r9 & 7 | 0) == 0)) {
    r10 = 55;
    STACKTOP = r8;
    return r10;
  }
  if (r9 << 1 >>> 0 > r2 >>> 0 | r2 >>> 0 > 15360) {
    r10 = 55;
    STACKTOP = r8;
    return r10;
  }
  do {
    if ((__gcry_fips_mode() | 0) != 0) {
      if (r2 >>> 0 > 1023 & (r4 | 0) == 0) {
        break;
      } else {
        r10 = 55;
      }
      STACKTOP = r8;
      return r10;
    }
  } while (0);
  r3 = HEAP32[r5 >> 2];
  do {
    if ((r3 | 0) == 0) {
      r7 = 338;
    } else {
      r11 = r5 + 4 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r7 = 338;
        break;
      }
      r12 = r5 + 8 | 0;
      if ((HEAP32[r12 >> 2] | 0) == 0) {
        r7 = 338;
        break;
      }
      r13 = __gcry_mpi_copy(r3);
      r14 = __gcry_mpi_copy(HEAP32[r11 >> 2]);
      r11 = __gcry_mpi_copy(HEAP32[r12 >> 2]);
      if ((__gcry_mpi_get_nbits(r13) | 0) != (r2 | 0)) {
        __gcry_assert_failed(482012, 481544, 305, 494832);
      }
      if ((__gcry_mpi_get_nbits(r14) | 0) == (r9 | 0)) {
        r15 = 0;
        r16 = __gcry_mpi_alloc(0);
        r17 = r13;
        r18 = r14;
        r19 = r11;
        break;
      } else {
        __gcry_assert_failed(480368, 481544, 306, 494832);
      }
    }
  } while (0);
  L428 : do {
    if (r7 == 338) {
      r3 = __gcry_generate_elg_prime(1, r2, r9, 0, r6);
      r5 = __gcry_mpi_copy(HEAP32[HEAP32[r6 >> 2] >> 2]);
      if ((__gcry_mpi_get_nbits(r5) | 0) != (r9 | 0)) {
        __gcry_assert_failed(480368, 481544, 316, 494832);
      }
      r11 = r3 + 4 | 0;
      r14 = __gcry_mpi_alloc(HEAP32[r11 >> 2]);
      __gcry_mpi_sub_ui(r14, r3, 1);
      __gcry_mpi_fdiv_q(r14, r14, r5);
      r13 = __gcry_mpi_alloc(HEAP32[r11 >> 2]);
      r11 = __gcry_mpi_alloc_set_ui(1);
      while (1) {
        __gcry_mpi_add_ui(r11, r11, 1);
        __gcry_mpi_powm(r13, r11, r14, r3);
        if ((__gcry_mpi_cmp_ui(r13, 1) | 0) != 0) {
          r15 = r14;
          r16 = r11;
          r17 = r3;
          r18 = r5;
          r19 = r13;
          break L428;
        }
      }
    }
  } while (0);
  r6 = (r4 | 0) != 0;
  r4 = r6 ? 1 : 2;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(480060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6 ? 479792 : 477012, tempInt));
  }
  if (r9 >>> 0 <= 159) {
    __gcry_assert_failed(479204, 481544, 341, 494832);
  }
  r6 = __gcry_mpi_alloc_secure(HEAP32[r18 + 4 >> 2]);
  __gcry_mpi_sub_ui(r16, r18, 1);
  r2 = (r9 + 7 | 0) >>> 3;
  r7 = (r9 + 7 | 0) >>> 3;
  r13 = r9 + 1 | 0;
  r5 = 0;
  while (1) {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1661(46);
    }
    if ((r5 | 0) == 0) {
      r20 = __gcry_random_bytes_secure(r2, r4);
    } else {
      r3 = __gcry_random_bytes_secure(2, r4);
      r11 = r3;
      r14 = r5;
      tempBigInt = (tempInt = HEAPU8[r11] | HEAPU8[r11 + 1 | 0] << 8, tempInt << 16 >> 16);
      HEAP8[r14] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r14 + 1 | 0] = tempBigInt & 255;
      __gcry_free(r3);
      r20 = r5;
    }
    __gcry_mpi_set_buffer(r6, r20, r7, 0);
    __gcry_mpi_clear_highbit(r6, r13);
    if ((__gcry_mpi_cmp_ui(r6, 0) | 0) <= 0) {
      r5 = r20;
      continue;
    }
    if ((__gcry_mpi_cmp(r6, r16) | 0) > -1) {
      r5 = r20;
    } else {
      break;
    }
  }
  __gcry_free(r20);
  __gcry_mpi_free(r15);
  __gcry_mpi_free(r16);
  r16 = __gcry_mpi_alloc(HEAP32[r17 + 4 >> 2]);
  __gcry_mpi_powm(r16, r19, r6, r17);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    _progress1661(10);
    __gcry_log_mpidump(478860, r17);
    __gcry_log_mpidump(478564, r18);
    __gcry_log_mpidump(478228, r19);
    __gcry_log_mpidump(477936, r16);
    __gcry_log_mpidump(477644, r6);
  }
  r15 = (r1 | 0) >> 2;
  HEAP32[r15] = r17;
  r17 = (r1 + 4 | 0) >> 2;
  HEAP32[r17] = r18;
  r18 = (r1 + 8 | 0) >> 2;
  HEAP32[r18] = r19;
  r19 = (r1 + 12 | 0) >> 2;
  HEAP32[r19] = r16;
  r16 = (r1 + 16 | 0) >> 2;
  HEAP32[r16] = r6;
  if ((_test_keys1662(r1, r9) | 0) == 0) {
    r10 = 0;
    STACKTOP = r8;
    return r10;
  }
  __gcry_mpi_release(HEAP32[r15]);
  HEAP32[r15] = 0;
  __gcry_mpi_release(HEAP32[r17]);
  HEAP32[r17] = 0;
  __gcry_mpi_release(HEAP32[r18]);
  HEAP32[r18] = 0;
  __gcry_mpi_release(HEAP32[r19]);
  HEAP32[r19] = 0;
  __gcry_mpi_release(HEAP32[r16]);
  HEAP32[r16] = 0;
  __gcry_fips_signal_error(481544, 395, 494832, 0, 477420);
  r10 = 50;
  STACKTOP = r8;
  return r10;
}
function _run_selftests1772(r1, r2, r3) {
  return (r1 | 0) == 301 ? 0 : 4;
}
function _ecc_generate_ext(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 52 | 0;
  r1 = r3, r8 = r1 >> 2;
  r9 = r3 + 48;
  HEAP32[r9 >> 2] = 0;
  do {
    if ((r4 | 0) == 0) {
      r10 = 0;
      r11 = 0;
    } else {
      r12 = __gcry_sexp_find_token(r4, 489524, 0);
      do {
        if ((r12 | 0) == 0) {
          r13 = 0;
        } else {
          r14 = __gcry_sexp_nth_string(r12, 1);
          __gcry_sexp_release(r12);
          if ((r14 | 0) == 0) {
            r15 = 65;
          } else {
            r13 = r14;
            break;
          }
          STACKTOP = r3;
          return r15;
        }
      } while (0);
      r12 = __gcry_sexp_find_token(r4, 488796, 0);
      if ((r12 | 0) == 0) {
        r10 = 0;
        r11 = r13;
        break;
      }
      __gcry_sexp_release(r12);
      r10 = 1;
      r11 = r13;
    }
  } while (0);
  if ((r2 | 0) == 0 & (r11 | 0) == 0) {
    r15 = 68;
    STACKTOP = r3;
    return r15;
  }
  r13 = __gcry_mpi_new(0);
  r4 = __gcry_mpi_new(0);
  r12 = __gcry_mpi_new(0);
  r14 = __gcry_mpi_new(0);
  r16 = _generate_key(r1, r2, r11, r10, r13, r4, r12, r14, r9);
  __gcry_free(r11);
  if ((r16 | 0) != 0) {
    r15 = r16;
    STACKTOP = r3;
    return r15;
  }
  r16 = HEAP32[r9 >> 2];
  if ((r16 | 0) != 0) {
    __gcry_sexp_build(r7, 0, 488712, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r16, tempInt));
  }
  r16 = (r1 | 0) >> 2;
  HEAP32[r5 >> 2] = HEAP32[r16];
  r7 = r5 + 4 | 0;
  HEAP32[r7 >> 2] = HEAP32[r8 + 1];
  r9 = r5 + 8 | 0;
  HEAP32[r9 >> 2] = HEAP32[r8 + 2];
  r11 = r5 + 12 | 0;
  HEAP32[r11 >> 2] = _ec2os(r13, r4, HEAP32[r16]);
  r10 = r5 + 16 | 0;
  HEAP32[r10 >> 2] = HEAP32[r8 + 6];
  r2 = r5 + 20 | 0;
  HEAP32[r2 >> 2] = _ec2os(r12, r14, HEAP32[r16]);
  r16 = r5 + 24 | 0;
  HEAP32[r16 >> 2] = HEAP32[r8 + 11];
  __gcry_mpi_free(r13);
  __gcry_mpi_free(r4);
  __gcry_mpi_free(r12);
  __gcry_mpi_free(r14);
  __gcry_mpi_ec_point_free(r1 + 12 | 0);
  __gcry_mpi_ec_point_free(r1 + 32 | 0);
  r1 = __gcry_calloc(1, 4);
  HEAP32[r6 >> 2] = r1;
  if ((r1 | 0) == 0) {
    r15 = _gpg_err_code_from_syserror();
    STACKTOP = r3;
    return r15;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    r15 = 0;
    STACKTOP = r3;
    return r15;
  }
  __gcry_log_mpidump(488528, HEAP32[r5 >> 2]);
  __gcry_log_mpidump(488452, HEAP32[r7 >> 2]);
  __gcry_log_mpidump(488136, HEAP32[r9 >> 2]);
  __gcry_log_mpidump(488120, HEAP32[r11 >> 2]);
  __gcry_log_mpidump(488092, HEAP32[r10 >> 2]);
  __gcry_log_mpidump(487996, HEAP32[r2 >> 2]);
  __gcry_log_mpidump(487920, HEAP32[r16 >> 2]);
  r15 = 0;
  STACKTOP = r3;
  return r15;
}
function _compute_keygrip1773(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r5 >> 2;
  r8 = STACKTOP, r9 = r8 >> 2;
  STACKTOP = STACKTOP + 24 | 0;
  r10 = STACKTOP;
  STACKTOP = STACKTOP + 30 | 0;
  STACKTOP = STACKTOP + 3 >> 2 << 2;
  r11 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  HEAP32[r7] = 0;
  HEAP32[r7 + 1] = 0;
  HEAP32[r7 + 2] = 0;
  HEAP32[r7 + 3] = 0;
  HEAP32[r7 + 4] = 0;
  HEAP32[r7 + 5] = 0;
  r7 = r8 >> 2;
  r12 = __gcry_sexp_find_token(r2, 459428, 1);
  do {
    if ((r12 | 0) == 0) {
      r3 = 388;
    } else {
      r13 = r5 | 0;
      HEAP32[r13 >> 2] = __gcry_sexp_nth_mpi(r12, 1, 5);
      __gcry_sexp_release(r12);
      if ((HEAP32[r13 >> 2] | 0) == 0) {
        r14 = 65;
        break;
      } else {
        r3 = 388;
        break;
      }
    }
  } while (0);
  L490 : do {
    if (r3 == 388) {
      r12 = __gcry_sexp_find_token(r2, 459429, 1);
      if ((r12 | 0) != 0) {
        r13 = r5 + 4 | 0;
        HEAP32[r13 >> 2] = __gcry_sexp_nth_mpi(r12, 1, 5);
        __gcry_sexp_release(r12);
        if ((HEAP32[r13 >> 2] | 0) == 0) {
          r14 = 65;
          break;
        }
      }
      r13 = __gcry_sexp_find_token(r2, 459430, 1);
      if ((r13 | 0) != 0) {
        r12 = r5 + 8 | 0;
        HEAP32[r12 >> 2] = __gcry_sexp_nth_mpi(r13, 1, 5);
        __gcry_sexp_release(r13);
        if ((HEAP32[r12 >> 2] | 0) == 0) {
          r14 = 65;
          break;
        }
      }
      r12 = __gcry_sexp_find_token(r2, 459431, 1);
      if ((r12 | 0) != 0) {
        r13 = r5 + 12 | 0;
        HEAP32[r13 >> 2] = __gcry_sexp_nth_mpi(r12, 1, 5);
        __gcry_sexp_release(r12);
        if ((HEAP32[r13 >> 2] | 0) == 0) {
          r14 = 65;
          break;
        }
      }
      r13 = __gcry_sexp_find_token(r2, 459432, 1);
      if ((r13 | 0) != 0) {
        r12 = r5 + 16 | 0;
        HEAP32[r12 >> 2] = __gcry_sexp_nth_mpi(r13, 1, 5);
        __gcry_sexp_release(r13);
        if ((HEAP32[r12 >> 2] | 0) == 0) {
          r14 = 65;
          break;
        }
      }
      r12 = __gcry_sexp_find_token(r2, 459433, 1);
      if ((r12 | 0) != 0) {
        r13 = r5 + 20 | 0;
        HEAP32[r13 >> 2] = __gcry_sexp_nth_mpi(r12, 1, 5);
        __gcry_sexp_release(r12);
        if ((HEAP32[r13 >> 2] | 0) == 0) {
          r14 = 65;
          break;
        }
      }
      r13 = __gcry_sexp_find_token(r2, 489524, 5);
      do {
        if ((r13 | 0) == 0) {
          r15 = 0;
        } else {
          HEAP32[r7] = 0;
          HEAP32[r7 + 1] = 0;
          HEAP32[r7 + 2] = 0;
          HEAP32[r7 + 3] = 0;
          HEAP32[r7 + 4] = 0;
          HEAP32[r7 + 5] = 0;
          r12 = __gcry_sexp_nth_string(r13, 1);
          __gcry_sexp_release(r13);
          if ((r12 | 0) == 0) {
            r14 = 65;
            break L490;
          }
          r16 = _ecc_get_param(r12, r8 | 0);
          __gcry_free(r12);
          if ((r16 | 0) != 0) {
            r14 = r16;
            break L490;
          }
          r12 = r5 | 0;
          r17 = HEAP32[r9];
          if ((HEAP32[r12 >> 2] | 0) == 0) {
            HEAP32[r12 >> 2] = r17;
          } else {
            __gcry_mpi_free(r17);
          }
          r17 = r5 + 4 | 0;
          r12 = HEAP32[r9 + 1];
          if ((HEAP32[r17 >> 2] | 0) == 0) {
            HEAP32[r17 >> 2] = r12;
          } else {
            __gcry_mpi_free(r12);
          }
          r12 = r5 + 8 | 0;
          r17 = HEAP32[r9 + 2];
          if ((HEAP32[r12 >> 2] | 0) == 0) {
            HEAP32[r12 >> 2] = r17;
          } else {
            __gcry_mpi_free(r17);
          }
          r17 = r5 + 12 | 0;
          r12 = HEAP32[r9 + 3];
          if ((HEAP32[r17 >> 2] | 0) == 0) {
            HEAP32[r17 >> 2] = r12;
          } else {
            __gcry_mpi_free(r12);
          }
          r12 = r5 + 16 | 0;
          r17 = HEAP32[r9 + 4];
          if ((HEAP32[r12 >> 2] | 0) == 0) {
            HEAP32[r12 >> 2] = r17;
          } else {
            __gcry_mpi_free(r17);
          }
          r17 = r5 + 20 | 0;
          r12 = HEAP32[r9 + 5];
          if ((HEAP32[r17 >> 2] | 0) == 0) {
            HEAP32[r17 >> 2] = r12;
            r15 = r16;
            break;
          } else {
            __gcry_mpi_free(r12);
            r15 = r16;
            break;
          }
        }
      } while (0);
      r13 = HEAP32[r6];
      if ((r13 | 0) == 0) {
        r14 = 68;
        break;
      }
      __gcry_mpi_normalize(r13);
      r13 = HEAP32[r6 + 1];
      if ((r13 | 0) == 0) {
        r14 = 68;
        break;
      }
      __gcry_mpi_normalize(r13);
      r13 = HEAP32[r6 + 2];
      if ((r13 | 0) == 0) {
        r14 = 68;
        break;
      }
      __gcry_mpi_normalize(r13);
      r13 = HEAP32[r6 + 3];
      if ((r13 | 0) == 0) {
        r14 = 68;
        break;
      }
      __gcry_mpi_normalize(r13);
      r13 = HEAP32[r6 + 4];
      if ((r13 | 0) == 0) {
        r14 = 68;
        break;
      }
      __gcry_mpi_normalize(r13);
      r13 = HEAP32[r6 + 5];
      if ((r13 | 0) == 0) {
        r14 = 68;
        break;
      }
      __gcry_mpi_normalize(r13);
      r13 = r10 | 0;
      r16 = 0;
      while (1) {
        r12 = __gcry_mpi_get_buffer(HEAP32[(r16 << 2 >> 2) + r6], r11, 0);
        if ((r12 | 0) == 0) {
          break;
        }
        r17 = HEAP32[r11 >> 2];
        _snprintf(r13, 30, 488892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP8[r16 + 459428 | 0] << 24 >> 24, HEAP32[tempInt + 4 >> 2] = r17, tempInt));
        __gcry_md_write(r1, r13, _strlen(r13));
        __gcry_md_write(r1, r12, HEAP32[r11 >> 2]);
        __gcry_md_write(r1, 488840, 1);
        __gcry_free(r12);
        r12 = r16 + 1 | 0;
        if ((r12 | 0) < 6) {
          r16 = r12;
        } else {
          r14 = r15;
          break L490;
        }
      }
      r14 = _gpg_err_code_from_syserror();
    }
  } while (0);
  __gcry_mpi_release(HEAP32[r6]);
  __gcry_mpi_release(HEAP32[r6 + 1]);
  __gcry_mpi_release(HEAP32[r6 + 2]);
  __gcry_mpi_release(HEAP32[r6 + 3]);
  __gcry_mpi_release(HEAP32[r6 + 4]);
  __gcry_mpi_release(HEAP32[r6 + 5]);
  STACKTOP = r4;
  return r14;
}
function _ecc_get_curve(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r6 = r5;
  r7 = (r3 | 0) != 0;
  if (r7) {
    HEAP32[r3 >> 2] = 0;
  }
  if ((r1 | 0) == 0) {
    if (!((r2 | 0) > -1 & r2 >>> 0 < 13)) {
      r8 = 0;
      STACKTOP = r5;
      return r8;
    }
    r9 = HEAP32[(r2 * 36 & -1) + 457420 >> 2];
    if (!r7) {
      r8 = r9;
      STACKTOP = r5;
      return r8;
    }
    HEAP32[r3 >> 2] = HEAP32[(r2 * 36 & -1) + 457424 >> 2];
    r8 = r9;
    STACKTOP = r5;
    return r8;
  }
  r9 = HEAP32[r1 >> 2];
  if ((r9 | 0) == 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r2 = r1 + 4 | 0;
  if ((HEAP32[r2 >> 2] | 0) == 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r10 = r1 + 8 | 0;
  if ((HEAP32[r10 >> 2] | 0) == 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r11 = r1 + 12 | 0;
  if ((HEAP32[r11 >> 2] | 0) == 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r12 = r1 + 16 | 0;
  if ((HEAP32[r12 >> 2] | 0) == 0) {
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r1 = r6 | 0;
  HEAP32[r1 >> 2] = r9;
  r9 = r6 + 4 | 0;
  HEAP32[r9 >> 2] = HEAP32[r2 >> 2];
  r2 = r6 + 8 | 0;
  HEAP32[r2 >> 2] = HEAP32[r10 >> 2];
  r10 = r6 + 12 | 0;
  __gcry_mpi_ec_point_init(r10);
  if ((_os2ec(r10, HEAP32[r11 >> 2]) | 0) != 0) {
    __gcry_mpi_ec_point_free(r10);
    r8 = 0;
    STACKTOP = r5;
    return r8;
  }
  r11 = HEAP32[r12 >> 2];
  HEAP32[r6 + 24 >> 2] = r11;
  r12 = HEAP32[r1 >> 2];
  r1 = HEAP32[r9 >> 2];
  r9 = HEAP32[r2 >> 2];
  r2 = HEAP32[r10 >> 2];
  r13 = HEAP32[r6 + 16 >> 2];
  r6 = 0;
  r14 = 457420;
  L579 : while (1) {
    r15 = _scanval(HEAP32[(r6 * 36 & -1) + 457432 >> 2]);
    do {
      if ((__gcry_mpi_cmp(r15, r12) | 0) == 0) {
        __gcry_mpi_free(r15);
        r16 = _scanval(HEAP32[(r6 * 36 & -1) + 457436 >> 2]);
        if ((__gcry_mpi_cmp(r16, r1) | 0) != 0) {
          r17 = r16;
          break;
        }
        __gcry_mpi_free(r16);
        r16 = _scanval(HEAP32[(r6 * 36 & -1) + 457440 >> 2]);
        if ((__gcry_mpi_cmp(r16, r9) | 0) != 0) {
          r17 = r16;
          break;
        }
        __gcry_mpi_free(r16);
        r16 = _scanval(HEAP32[(r6 * 36 & -1) + 457444 >> 2]);
        if ((__gcry_mpi_cmp(r16, r11) | 0) != 0) {
          r17 = r16;
          break;
        }
        __gcry_mpi_free(r16);
        r16 = _scanval(HEAP32[(r6 * 36 & -1) + 457448 >> 2]);
        if ((__gcry_mpi_cmp(r16, r2) | 0) != 0) {
          r17 = r16;
          break;
        }
        __gcry_mpi_free(r16);
        r16 = _scanval(HEAP32[(r6 * 36 & -1) + 457452 >> 2]);
        if ((__gcry_mpi_cmp(r16, r13) | 0) == 0) {
          r4 = 450;
          break L579;
        } else {
          r17 = r16;
        }
      } else {
        r17 = r15;
      }
    } while (0);
    __gcry_mpi_free(r17);
    r15 = r6 + 1 | 0;
    if ((r15 | 0) == 12) {
      r18 = 0;
      break;
    } else {
      r6 = r15;
      r14 = (r15 * 36 & -1) + 457420 | 0;
    }
  }
  do {
    if (r4 == 450) {
      r17 = HEAP32[r14 >> 2];
      if (!r7) {
        r18 = r17;
        break;
      }
      HEAP32[r3 >> 2] = HEAP32[(r6 * 36 & -1) + 457424 >> 2];
      r18 = r17;
    }
  } while (0);
  __gcry_mpi_ec_point_free(r10);
  r8 = r18;
  STACKTOP = r5;
  return r8;
}
function _ecc_get_param_sexp(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  r3 = r2, r4 = r3 >> 2;
  r5 = r2 + 24;
  r6 = r3 | 0;
  if ((_ecc_get_param(r1, r6) | 0) != 0) {
    r7 = 0;
    STACKTOP = r2;
    return r7;
  }
  r1 = HEAP32[r4 + 1];
  r3 = HEAP32[r4 + 2];
  r8 = HEAP32[r4 + 3];
  r9 = HEAP32[r4 + 4];
  if ((__gcry_sexp_build(r5, 0, 469352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = HEAP32[r6 >> 2], HEAP32[tempInt + 4 >> 2] = r1, HEAP32[tempInt + 8 >> 2] = r3, HEAP32[tempInt + 12 >> 2] = r8, HEAP32[tempInt + 16 >> 2] = r9, tempInt)) | 0) != 0) {
    HEAP32[r5 >> 2] = 0;
  }
  r9 = HEAP32[r4];
  L600 : do {
    if ((r9 | 0) != 0) {
      r8 = 0;
      r3 = r9;
      while (1) {
        __gcry_mpi_release(r3);
        r1 = r8 + 1 | 0;
        r6 = HEAP32[(r1 << 2 >> 2) + r4];
        if ((r6 | 0) == 0) {
          break L600;
        } else {
          r8 = r1;
          r3 = r6;
        }
      }
    }
  } while (0);
  r7 = HEAP32[r5 >> 2];
  STACKTOP = r2;
  return r7;
}
function _ecc_encrypt_raw(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  r1 = r5;
  r6 = r5 + 44;
  if ((r3 | 0) == 0) {
    r7 = 30;
    STACKTOP = r5;
    return r7;
  }
  r8 = HEAP32[r4 >> 2];
  if ((r8 | 0) == 0) {
    r7 = 30;
    STACKTOP = r5;
    return r7;
  }
  r9 = r4 + 4 | 0;
  if ((HEAP32[r9 >> 2] | 0) == 0) {
    r7 = 30;
    STACKTOP = r5;
    return r7;
  }
  r10 = r4 + 8 | 0;
  if ((HEAP32[r10 >> 2] | 0) == 0) {
    r7 = 30;
    STACKTOP = r5;
    return r7;
  }
  r11 = r4 + 12 | 0;
  if ((HEAP32[r11 >> 2] | 0) == 0) {
    r7 = 30;
    STACKTOP = r5;
    return r7;
  }
  r12 = r4 + 16 | 0;
  if ((HEAP32[r12 >> 2] | 0) == 0) {
    r7 = 30;
    STACKTOP = r5;
    return r7;
  }
  r13 = r4 + 20 | 0;
  if ((HEAP32[r13 >> 2] | 0) == 0) {
    r7 = 30;
    STACKTOP = r5;
    return r7;
  }
  r4 = (r1 | 0) >> 2;
  HEAP32[r4] = r8;
  r8 = r1 + 4 | 0;
  HEAP32[r8 >> 2] = HEAP32[r9 >> 2];
  HEAP32[r1 + 8 >> 2] = HEAP32[r10 >> 2];
  r10 = r1 + 12 | 0;
  __gcry_mpi_ec_point_init(r10);
  r9 = _os2ec(r10, HEAP32[r11 >> 2]);
  if ((r9 | 0) != 0) {
    __gcry_mpi_ec_point_free(r10);
    r7 = r9;
    STACKTOP = r5;
    return r7;
  }
  HEAP32[r1 + 24 >> 2] = HEAP32[r12 >> 2];
  r12 = r1 + 32 | 0;
  __gcry_mpi_ec_point_init(r12);
  r1 = _os2ec(r12, HEAP32[r13 >> 2]);
  if ((r1 | 0) != 0) {
    __gcry_mpi_ec_point_free(r10);
    __gcry_mpi_ec_point_free(r12);
    r7 = r1;
    STACKTOP = r5;
    return r7;
  }
  r1 = __gcry_mpi_ec_init(HEAP32[r4], HEAP32[r8 >> 2]);
  r8 = __gcry_mpi_new(0);
  r13 = __gcry_mpi_new(0);
  __gcry_mpi_ec_point_init(r6);
  __gcry_mpi_ec_mul_point(r6, r3, r12, r1);
  if ((__gcry_mpi_ec_get_affine(r8, r13, r6, r1) | 0) != 0) {
    __gcry_log_fatal(485416, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r9 = _ec2os(r8, r13, HEAP32[r4]);
  __gcry_mpi_ec_mul_point(r6, r3, r10, r1);
  if ((__gcry_mpi_ec_get_affine(r8, r13, r6, r1) | 0) != 0) {
    __gcry_log_fatal(485340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  r3 = _ec2os(r8, r13, HEAP32[r4]);
  __gcry_mpi_free(r8);
  __gcry_mpi_free(r13);
  __gcry_mpi_ec_point_free(r6);
  __gcry_mpi_ec_free(r1);
  __gcry_mpi_ec_point_free(r10);
  __gcry_mpi_ec_point_free(r12);
  if ((r9 | 0) == 0 | (r3 | 0) == 0) {
    __gcry_mpi_free(r9);
    __gcry_mpi_free(r3);
    r7 = 32854;
    STACKTOP = r5;
    return r7;
  } else {
    HEAP32[r2 >> 2] = r9;
    HEAP32[r2 + 4 >> 2] = r3;
    r7 = 0;
    STACKTOP = r5;
    return r7;
  }
}
function _ecc_decrypt_raw(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  r1 = r5;
  r6 = r5 + 48;
  r7 = r5 + 60;
  HEAP32[r2 >> 2] = 0;
  do {
    if ((r3 | 0) == 0) {
      r8 = 30;
    } else {
      if ((HEAP32[r3 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      if ((HEAP32[r4 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      r9 = r4 + 4 | 0;
      if ((HEAP32[r9 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      r10 = r4 + 8 | 0;
      if ((HEAP32[r10 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      r11 = r4 + 12 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      r12 = r4 + 16 | 0;
      if ((HEAP32[r12 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      r13 = r4 + 20 | 0;
      if ((HEAP32[r13 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      r14 = r4 + 24 | 0;
      if ((HEAP32[r14 >> 2] | 0) == 0) {
        r8 = 30;
        break;
      }
      __gcry_mpi_ec_point_init(r7);
      r15 = _os2ec(r7, HEAP32[r3 >> 2]);
      if ((r15 | 0) != 0) {
        __gcry_mpi_ec_point_free(r7);
        r8 = r15;
        break;
      }
      r15 = (r1 | 0) >> 2;
      HEAP32[r15] = HEAP32[r4 >> 2];
      r16 = r1 + 4 | 0;
      HEAP32[r16 >> 2] = HEAP32[r9 >> 2];
      HEAP32[r1 + 8 >> 2] = HEAP32[r10 >> 2];
      r10 = r1 + 12 | 0;
      __gcry_mpi_ec_point_init(r10);
      r9 = _os2ec(r10, HEAP32[r11 >> 2]);
      if ((r9 | 0) != 0) {
        __gcry_mpi_ec_point_free(r7);
        __gcry_mpi_ec_point_free(r10);
        r8 = r9;
        break;
      }
      HEAP32[r1 + 24 >> 2] = HEAP32[r12 >> 2];
      r12 = r1 + 32 | 0;
      __gcry_mpi_ec_point_init(r12);
      r9 = _os2ec(r12, HEAP32[r13 >> 2]);
      if ((r9 | 0) != 0) {
        __gcry_mpi_ec_point_free(r7);
        __gcry_mpi_ec_point_free(r10);
        __gcry_mpi_ec_point_free(r12);
        r8 = r9;
        break;
      }
      r9 = r1 + 44 | 0;
      HEAP32[r9 >> 2] = HEAP32[r14 >> 2];
      r14 = __gcry_mpi_ec_init(HEAP32[r15], HEAP32[r16 >> 2]);
      __gcry_mpi_ec_point_init(r6);
      __gcry_mpi_ec_mul_point(r6, HEAP32[r9 >> 2], r7, r14);
      __gcry_mpi_ec_point_free(r7);
      r9 = __gcry_mpi_new(0);
      r16 = __gcry_mpi_new(0);
      if ((__gcry_mpi_ec_get_affine(r9, r16, r6, r14) | 0) != 0) {
        __gcry_log_fatal(485512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      }
      r13 = _ec2os(r9, r16, HEAP32[r15]);
      __gcry_mpi_free(r9);
      __gcry_mpi_free(r16);
      __gcry_mpi_ec_point_free(r6);
      __gcry_mpi_ec_free(r14);
      __gcry_mpi_ec_point_free(r7);
      __gcry_mpi_ec_point_free(r10);
      __gcry_mpi_ec_point_free(r12);
      if ((r13 | 0) == 0) {
        r8 = 32854;
        break;
      }
      HEAP32[r2 >> 2] = r13;
      r8 = 0;
    }
  } while (0);
  STACKTOP = r5;
  return r8;
}
function _ecc_get_param(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = r2 >> 2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  r4 = r2 + 4;
  r5 = _fill_in_curve(0, r1, r4, r2);
  if ((r5 | 0) != 0) {
    r6 = r5;
    STACKTOP = r2;
    return r6;
  }
  r5 = __gcry_mpi_new(0);
  r1 = __gcry_mpi_new(0);
  r7 = (r4 | 0) >> 2;
  r8 = r4 + 4 | 0;
  r9 = __gcry_mpi_ec_init(HEAP32[r7], HEAP32[r8 >> 2]);
  r10 = r4 + 12 | 0;
  if ((__gcry_mpi_ec_get_affine(r5, r1, r10, r9) | 0) != 0) {
    __gcry_log_fatal(465392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_mpi_ec_free(r9);
  __gcry_mpi_ec_point_free(r10);
  HEAP32[r3] = HEAP32[r7];
  HEAP32[r3 + 1] = HEAP32[r8 >> 2];
  HEAP32[r3 + 2] = HEAP32[r4 + 8 >> 2];
  HEAP32[r3 + 3] = _ec2os(r5, r1, HEAP32[r7]);
  HEAP32[r3 + 4] = HEAP32[r4 + 24 >> 2];
  HEAP32[r3 + 5] = 0;
  __gcry_mpi_free(r5);
  __gcry_mpi_free(r1);
  r6 = 0;
  STACKTOP = r2;
  return r6;
}
function __gcry_register_pk_elg_progress(r1, r2) {
  HEAP32[110057] = r1;
  HEAP32[110052] = r2;
  return;
}
function _os2ec(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r4 = r3, r5 = r4 >> 2;
  r6 = r3 + 4, r7 = r6 >> 2;
  r8 = r3 + 8;
  r9 = (__gcry_mpi_get_nbits(r2) + 7 | 0) >>> 3;
  HEAP32[r5] = r9;
  r10 = __gcry_xmalloc(r9);
  r9 = __gcry_mpi_print(5, r10, HEAP32[r5], r4, r2);
  do {
    if ((r9 | 0) == 0) {
      r2 = HEAP32[r5];
      if ((r2 | 0) == 0) {
        __gcry_free(r10);
        r11 = 65;
        break;
      }
      if (HEAP8[r10] << 24 >> 24 != 4) {
        __gcry_free(r10);
        r11 = 69;
        break;
      }
      r4 = r2 - 1 | 0;
      if ((r4 & 1 | 0) != 0) {
        __gcry_free(r10);
        r11 = 65;
        break;
      }
      r2 = r4 >>> 1;
      HEAP32[r5] = r2;
      r4 = __gcry_mpi_scan(r6, 5, r10 + 1 | 0, r2, 0);
      if ((r4 | 0) != 0) {
        __gcry_free(r10);
        r11 = r4;
        break;
      }
      r4 = HEAP32[r5];
      r2 = __gcry_mpi_scan(r8, 5, r4 + (r10 + 1) | 0, r4, 0);
      __gcry_free(r10);
      if ((r2 | 0) == 0) {
        __gcry_mpi_set(HEAP32[r1 >> 2], HEAP32[r7]);
        __gcry_mpi_set(HEAP32[r1 + 4 >> 2], HEAP32[r8 >> 2]);
        __gcry_mpi_set_ui(HEAP32[r1 + 8 >> 2], 1);
        __gcry_mpi_free(HEAP32[r7]);
        __gcry_mpi_free(HEAP32[r8 >> 2]);
        r11 = 0;
        break;
      } else {
        __gcry_mpi_free(HEAP32[r7]);
        r11 = r2;
        break;
      }
    } else {
      __gcry_free(r10);
      r11 = r9;
    }
  } while (0);
  STACKTOP = r3;
  return r11;
}
function _fill_in_curve(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12;
  r5 = r3 >> 2;
  L701 : do {
    if ((r2 | 0) == 0) {
      r3 = 0;
      while (1) {
        if ((r3 | 0) == 12) {
          r6 = 55;
          break;
        }
        if ((HEAP32[(r3 * 36 & -1) + 457424 >> 2] | 0) == (r1 | 0)) {
          r7 = 0;
          r8 = r3;
          break L701;
        } else {
          r3 = r3 + 1 | 0;
        }
      }
      return r6;
    } else {
      r3 = 0;
      while (1) {
        if ((r3 | 0) == 12) {
          r9 = 0;
          break;
        }
        r10 = HEAP32[(r3 * 36 & -1) + 457420 >> 2];
        if ((_strcmp(r2, r10) | 0) == 0) {
          r7 = r10;
          r8 = r3;
          break L701;
        } else {
          r3 = r3 + 1 | 0;
        }
      }
      while (1) {
        if ((r9 | 0) == 19) {
          r7 = 0;
          r8 = r3;
          break L701;
        }
        r11 = (r9 << 3) + 458232 | 0;
        if ((_strcmp(r2, HEAP32[(r9 << 3) + 458236 >> 2]) | 0) == 0) {
          r12 = 0;
          break;
        } else {
          r9 = r9 + 1 | 0;
        }
      }
      while (1) {
        if ((r12 | 0) == 12) {
          r6 = 55;
          break;
        }
        r3 = HEAP32[(r12 * 36 & -1) + 457420 >> 2];
        if ((_strcmp(HEAP32[r11 >> 2], r3) | 0) == 0) {
          r7 = r3;
          r8 = r12;
          break L701;
        } else {
          r12 = r12 + 1 | 0;
        }
      }
      return r6;
    }
  } while (0);
  if ((r8 | 0) == 12) {
    r6 = 55;
    return r6;
  }
  do {
    if ((__gcry_fips_mode() | 0) != 0) {
      if ((HEAP32[(r8 * 36 & -1) + 457428 >> 2] & 1 | 0) == 0) {
        r6 = 60;
      } else {
        break;
      }
      return r6;
    }
  } while (0);
  HEAP32[r4 >> 2] = HEAP32[(r8 * 36 & -1) + 457424 >> 2];
  HEAP32[r5] = _scanval(HEAP32[(r8 * 36 & -1) + 457432 >> 2]);
  HEAP32[r5 + 1] = _scanval(HEAP32[(r8 * 36 & -1) + 457436 >> 2]);
  HEAP32[r5 + 2] = _scanval(HEAP32[(r8 * 36 & -1) + 457440 >> 2]);
  HEAP32[r5 + 6] = _scanval(HEAP32[(r8 * 36 & -1) + 457444 >> 2]);
  HEAP32[r5 + 3] = _scanval(HEAP32[(r8 * 36 & -1) + 457448 >> 2]);
  HEAP32[r5 + 4] = _scanval(HEAP32[(r8 * 36 & -1) + 457452 >> 2]);
  HEAP32[r5 + 5] = __gcry_mpi_alloc_set_ui(1);
  HEAP32[r5 + 7] = r7;
  r6 = 0;
  return r6;
}
function _gen_k1774(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = __gcry_mpi_get_nbits(r1);
  r5 = __gcry_mpi_snew(r4);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(485656, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r2, tempInt));
  }
  __gcry_mpi_randomize(r5, r4, r2);
  __gcry_mpi_mod(r5, r5, r1);
  STACKTOP = r3;
  return r5;
}
function _point_set(r1, r2) {
  __gcry_mpi_set(HEAP32[r1 >> 2], HEAP32[r2 >> 2]);
  __gcry_mpi_set(HEAP32[r1 + 4 >> 2], HEAP32[r2 + 4 >> 2]);
  __gcry_mpi_set(HEAP32[r1 + 8 >> 2], HEAP32[r2 + 8 >> 2]);
  return;
}
function _curve_free(r1) {
  var r2;
  r2 = r1 | 0;
  __gcry_mpi_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  r2 = r1 + 4 | 0;
  __gcry_mpi_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  r2 = r1 + 8 | 0;
  __gcry_mpi_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  __gcry_mpi_ec_point_free(r1 + 12 | 0);
  r2 = r1 + 24 | 0;
  __gcry_mpi_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  return;
}
function _curve_copy(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r4 = r2;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  _memcpy(r2, r4, 32);
  r4 = r3, r5 = r4 >> 2;
  HEAP32[r5] = __gcry_mpi_copy(HEAP32[r2 >> 2]);
  HEAP32[r5 + 1] = __gcry_mpi_copy(HEAP32[r2 + 4 >> 2]);
  HEAP32[r5 + 2] = __gcry_mpi_copy(HEAP32[r2 + 8 >> 2]);
  r6 = r4 + 12 | 0;
  __gcry_mpi_ec_point_init(r6);
  _point_set(r6, r2 + 12 | 0);
  HEAP32[r5 + 6] = __gcry_mpi_copy(HEAP32[r2 + 24 >> 2]);
  _memcpy(r1, r4, 32);
  STACKTOP = r3;
  return;
}
function _sign1776(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r7 = r6;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_mpidump(486248, r1);
  }
  r8 = __gcry_mpi_alloc(0);
  r9 = __gcry_mpi_alloc(0);
  r10 = __gcry_mpi_alloc(0);
  r11 = __gcry_mpi_alloc(0);
  __gcry_mpi_ec_point_init(r7);
  __gcry_mpi_set_ui(r4, 0);
  __gcry_mpi_set_ui(r3, 0);
  r12 = __gcry_mpi_ec_init(HEAP32[r2 >> 2], HEAP32[r2 + 4 >> 2]);
  L736 : do {
    if ((__gcry_mpi_cmp_ui(r4, 0) | 0) == 0) {
      r13 = r2 + 44 | 0;
      r14 = (r2 + 24 | 0) >> 2;
      r15 = r2 + 24 | 0;
      r16 = r2 + 12 | 0;
      r17 = 0;
      L738 : while (1) {
        L740 : do {
          if ((__gcry_mpi_cmp_ui(r3, 0) | 0) == 0) {
            r18 = r17;
            while (1) {
              __gcry_mpi_free(r18);
              r19 = _gen_k1774(HEAP32[r15 >> 2], 1);
              __gcry_mpi_ec_mul_point(r7, r19, r16, r12);
              if ((__gcry_mpi_ec_get_affine(r11, 0, r7, r12) | 0) != 0) {
                break L738;
              }
              __gcry_mpi_mod(r3, r11, HEAP32[r15 >> 2]);
              if ((__gcry_mpi_cmp_ui(r3, 0) | 0) == 0) {
                r18 = r19;
              } else {
                r20 = r19;
                break L740;
              }
            }
          } else {
            r20 = r17;
          }
        } while (0);
        __gcry_mpi_mulm(r8, HEAP32[r13 >> 2], r3, HEAP32[r14]);
        __gcry_mpi_addm(r9, r1, r8, HEAP32[r14]);
        __gcry_mpi_invm(r10, r20, HEAP32[r14]);
        __gcry_mpi_mulm(r4, r10, r9, HEAP32[r14]);
        if ((__gcry_mpi_cmp_ui(r4, 0) | 0) == 0) {
          r17 = r20;
        } else {
          r21 = r20;
          r5 = 581;
          break L736;
        }
      }
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        r22 = 8;
        r23 = r19;
        break;
      }
      __gcry_log_debug(486196, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      r22 = 8;
      r23 = r19;
      break;
    } else {
      r21 = 0;
      r5 = 581;
    }
  } while (0);
  do {
    if (r5 == 581) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        r22 = 0;
        r23 = r21;
        break;
      }
      __gcry_log_mpidump(486056, r3);
      __gcry_log_mpidump(485988, r4);
      r22 = 0;
      r23 = r21;
    }
  } while (0);
  __gcry_mpi_ec_free(r12);
  __gcry_mpi_ec_point_free(r7);
  __gcry_mpi_free(r11);
  __gcry_mpi_free(r10);
  __gcry_mpi_free(r9);
  __gcry_mpi_free(r8);
  __gcry_mpi_free(r23);
  STACKTOP = r6;
  return r22;
}
function _verify1777(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  r6 = r5;
  r7 = r5 + 12;
  r8 = r5 + 24;
  if ((__gcry_mpi_cmp_ui(r3, 0) | 0) <= 0) {
    r9 = 8;
    STACKTOP = r5;
    return r9;
  }
  r10 = (r2 + 24 | 0) >> 2;
  if ((__gcry_mpi_cmp(r3, HEAP32[r10]) | 0) >= 0) {
    r9 = 8;
    STACKTOP = r5;
    return r9;
  }
  if ((__gcry_mpi_cmp_ui(r4, 0) | 0) <= 0) {
    r9 = 8;
    STACKTOP = r5;
    return r9;
  }
  if ((__gcry_mpi_cmp(r4, HEAP32[r10]) | 0) >= 0) {
    r9 = 8;
    STACKTOP = r5;
    return r9;
  }
  r11 = __gcry_mpi_alloc(0);
  r12 = __gcry_mpi_alloc(0);
  r13 = __gcry_mpi_alloc(0);
  r14 = __gcry_mpi_alloc(0);
  r15 = __gcry_mpi_alloc(0);
  __gcry_mpi_ec_point_init(r6);
  __gcry_mpi_ec_point_init(r7);
  __gcry_mpi_ec_point_init(r8);
  r16 = __gcry_mpi_ec_init(HEAP32[r2 >> 2], HEAP32[r2 + 4 >> 2]);
  __gcry_mpi_invm(r11, r4, HEAP32[r10]);
  __gcry_mpi_mulm(r12, r1, r11, HEAP32[r10]);
  __gcry_mpi_ec_mul_point(r7, r12, r2 + 12 | 0, r16);
  __gcry_mpi_mulm(r13, r3, r11, HEAP32[r10]);
  __gcry_mpi_ec_mul_point(r8, r13, r2 + 32 | 0, r16);
  __gcry_mpi_ec_add_points(r6, r7, r8, r16);
  do {
    if ((__gcry_mpi_cmp_ui(HEAP32[r6 + 8 >> 2], 0) | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        r17 = 8;
        break;
      }
      __gcry_log_debug(486936, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      r17 = 8;
    } else {
      if ((__gcry_mpi_ec_get_affine(r14, r15, r6, r16) | 0) != 0) {
        if ((__gcry_get_debug_flag(1) | 0) == 0) {
          r17 = 8;
          break;
        }
        __gcry_log_debug(486816, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        r17 = 8;
        break;
      }
      __gcry_mpi_mod(r14, r14, HEAP32[r10]);
      r2 = (__gcry_mpi_cmp(r14, r3) | 0) == 0;
      r1 = (__gcry_get_debug_flag(1) | 0) != 0;
      if (r2) {
        if (!r1) {
          r17 = 0;
          break;
        }
        __gcry_log_debug(486276, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        r17 = 0;
        break;
      } else {
        if (!r1) {
          r17 = 8;
          break;
        }
        __gcry_log_mpidump(486512, r14);
        __gcry_log_mpidump(486488, r15);
        __gcry_log_mpidump(486472, r3);
        __gcry_log_mpidump(486404, r4);
        __gcry_log_debug(486320, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        r17 = 8;
        break;
      }
    }
  } while (0);
  __gcry_mpi_ec_free(r16);
  __gcry_mpi_ec_point_free(r8);
  __gcry_mpi_ec_point_free(r7);
  __gcry_mpi_ec_point_free(r6);
  __gcry_mpi_free(r15);
  __gcry_mpi_free(r14);
  __gcry_mpi_free(r13);
  __gcry_mpi_free(r12);
  __gcry_mpi_free(r11);
  r9 = r17;
  STACKTOP = r5;
  return r9;
}
function _check_secret_key1778(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10;
  r2 = r1 >> 2;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r4 = r3;
  r5 = __gcry_mpi_alloc(0);
  r6 = r1 + 12 | 0;
  r7 = _gen_y_2(HEAP32[r6 >> 2], r1 | 0);
  r8 = HEAP32[r2 + 4];
  r9 = r1 | 0;
  __gcry_mpi_mulm(r5, r8, r8, HEAP32[r9 >> 2]);
  if ((__gcry_mpi_cmp(r7, r5) | 0) != 0) {
    if ((__gcry_get_debug_flag(1) | 0) == 0) {
      r10 = 1;
      STACKTOP = r3;
      return r10;
    }
    __gcry_log_debug(485112, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    r10 = 1;
    STACKTOP = r3;
    return r10;
  }
  if ((__gcry_mpi_cmp_ui(HEAP32[r2 + 5], 0) | 0) == 0) {
    if ((__gcry_get_debug_flag(1) | 0) == 0) {
      r10 = 1;
      STACKTOP = r3;
      return r10;
    }
    __gcry_log_debug(485064, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    r10 = 1;
    STACKTOP = r3;
    return r10;
  }
  __gcry_mpi_ec_point_init(r4);
  r5 = __gcry_mpi_ec_init(HEAP32[r9 >> 2], HEAP32[r2 + 1]);
  __gcry_mpi_ec_mul_point(r4, HEAP32[r2 + 6], r6, r5);
  r9 = r4 + 8 | 0;
  if ((__gcry_mpi_cmp_ui(HEAP32[r9 >> 2], 0) | 0) != 0) {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      __gcry_log_debug(484784, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    __gcry_mpi_ec_point_free(r4);
    __gcry_mpi_ec_free(r5);
    r10 = 1;
    STACKTOP = r3;
    return r10;
  }
  r7 = r1 + 40 | 0;
  if ((__gcry_mpi_cmp_ui(HEAP32[r7 >> 2], 0) | 0) == 0) {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      __gcry_log_debug(484736, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    __gcry_mpi_ec_free(r5);
    r10 = 1;
    STACKTOP = r3;
    return r10;
  }
  __gcry_mpi_ec_mul_point(r4, HEAP32[r2 + 11], r6, r5);
  do {
    if ((HEAP32[r4 >> 2] | 0) == (HEAP32[r2 + 8] | 0)) {
      if ((HEAP32[r4 + 4 >> 2] | 0) != (HEAP32[r2 + 9] | 0)) {
        break;
      }
      if ((HEAP32[r9 >> 2] | 0) != (HEAP32[r7 >> 2] | 0)) {
        break;
      }
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        __gcry_log_debug(484668, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      }
      __gcry_mpi_ec_free(r5);
      r10 = 1;
      STACKTOP = r3;
      return r10;
    }
  } while (0);
  __gcry_mpi_ec_free(r5);
  __gcry_mpi_ec_point_free(r4);
  r10 = 0;
  STACKTOP = r3;
  return r10;
}
function _gen_y_2(r1, r2) {
  var r3, r4, r5, r6, r7;
  r3 = __gcry_mpi_alloc_set_ui(3);
  r4 = __gcry_mpi_new(0);
  r5 = __gcry_mpi_new(0);
  r6 = __gcry_mpi_new(0);
  r7 = (r2 | 0) >> 2;
  __gcry_mpi_powm(r4, r1, r3, HEAP32[r7]);
  __gcry_mpi_mulm(r5, HEAP32[r2 + 4 >> 2], r1, HEAP32[r7]);
  __gcry_mpi_addm(r5, r5, HEAP32[r2 + 8 >> 2], HEAP32[r7]);
  __gcry_mpi_addm(r6, r4, r5, HEAP32[r7]);
  __gcry_mpi_free(r4);
  __gcry_mpi_free(r5);
  __gcry_mpi_free(r3);
  return r6;
}
function _scanval(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2;
  r4 = __gcry_mpi_scan(r3, 4, r1, 0, 0);
  if ((r4 | 0) == 0) {
    STACKTOP = r2;
    return HEAP32[r3 >> 2];
  } else {
    r3 = _gpg_strerror(r4);
    __gcry_log_fatal(467764, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
  }
}
function _ec2os(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = r4 + 4;
  r8 = (__gcry_mpi_get_nbits(r3) + 7 | 0) >>> 3;
  r3 = r8 << 1 | 1;
  r9 = __gcry_xmalloc(r3);
  HEAP8[r9] = 4;
  r10 = r9 + 1 | 0;
  r11 = __gcry_mpi_print(5, r10, r8, r5, r1);
  if ((r11 | 0) != 0) {
    r1 = _gpg_strerror(r11);
    __gcry_log_fatal(465352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
  r1 = HEAP32[r6];
  if (r1 >>> 0 < r8 >>> 0) {
    _memmove(r9 + (r8 + 1 - r1) | 0, r10, r1, 1, 0);
    _memset(r10, 0, r8 - HEAP32[r6] | 0);
  }
  r10 = r8 + 1 | 0;
  r1 = r9 + r10 | 0;
  r11 = __gcry_mpi_print(5, r1, r8, r5, r2);
  if ((r11 | 0) != 0) {
    r2 = _gpg_strerror(r11);
    __gcry_log_fatal(465352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
  }
  r2 = HEAP32[r6];
  if (r2 >>> 0 < r8 >>> 0) {
    _memmove(r9 + (r10 + r8 - r2) | 0, r1, r2, 1, 0);
    _memset(r1, 0, r8 - HEAP32[r6] | 0);
  }
  r6 = __gcry_mpi_scan(r7, 5, r9, r3, 0);
  if ((r6 | 0) == 0) {
    __gcry_free(r9);
    STACKTOP = r4;
    return HEAP32[r7 >> 2];
  } else {
    r7 = _gpg_strerror(r6);
    __gcry_log_fatal(465252, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
  }
}
function _generate_key(r1, r2, r3, r4, r5, r6, r7, r8, r9) {
  var r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r10 = r1 >> 2;
  r11 = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  r12 = r11, r13 = r12 >> 2;
  r14 = r11 + 4, r15 = r14 >> 2;
  r16 = r11 + 36;
  HEAP32[r13] = r2;
  HEAP32[r9 >> 2] = 0;
  r2 = _fill_in_curve(HEAP32[r13], r3, r14, r12);
  if ((r2 | 0) != 0) {
    r17 = r2;
    STACKTOP = r11;
    return r17;
  }
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      __gcry_log_mpidump(487900, HEAP32[r15]);
      __gcry_log_mpidump(487860, HEAP32[r15 + 1]);
      __gcry_log_mpidump(487836, HEAP32[r15 + 2]);
      __gcry_log_mpidump(487776, HEAP32[r15 + 6]);
      __gcry_log_mpidump(487744, HEAP32[r15 + 3]);
      __gcry_log_mpidump(487448, HEAP32[r15 + 4]);
      __gcry_log_mpidump(487424, HEAP32[r15 + 5]);
      r2 = HEAP32[r15 + 7];
      if ((r2 | 0) == 0) {
        break;
      }
      __gcry_log_debug(487392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
    }
  } while (0);
  r2 = r14 + 24 | 0;
  r12 = _gen_k1774(HEAP32[r2 >> 2], (r4 | 0) != 0 ? 1 : 2);
  __gcry_mpi_ec_point_init(r16);
  r4 = r14 | 0;
  r3 = r14 + 4 | 0;
  r18 = __gcry_mpi_ec_init(HEAP32[r4 >> 2], HEAP32[r3 >> 2]);
  r19 = r14 + 12 | 0;
  __gcry_mpi_ec_mul_point(r16, r12, r19, r18);
  HEAP32[r10] = __gcry_mpi_copy(HEAP32[r4 >> 2]);
  HEAP32[r10 + 1] = __gcry_mpi_copy(HEAP32[r3 >> 2]);
  HEAP32[r10 + 2] = __gcry_mpi_copy(HEAP32[r15 + 2]);
  r3 = r1 + 12 | 0;
  __gcry_mpi_ec_point_init(r3);
  _point_set(r3, r19);
  HEAP32[r10 + 6] = __gcry_mpi_copy(HEAP32[r2 >> 2]);
  r2 = r1 + 32 | 0;
  __gcry_mpi_ec_point_init(r2);
  _point_set(r2, r16);
  HEAP32[r10 + 11] = __gcry_mpi_copy(r12);
  do {
    if (!((r5 | 0) == 0 | (r6 | 0) == 0)) {
      if ((__gcry_mpi_ec_get_affine(r5, r6, r3, r18) | 0) == 0) {
        break;
      }
      __gcry_log_fatal(487304, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
  } while (0);
  do {
    if (!((r7 | 0) == 0 | (r8 | 0) == 0)) {
      if ((__gcry_mpi_ec_get_affine(r7, r8, r2, r18) | 0) == 0) {
        break;
      }
      __gcry_log_fatal(487304, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
  } while (0);
  __gcry_mpi_ec_free(r18);
  __gcry_mpi_ec_point_free(r16);
  __gcry_mpi_free(r12);
  HEAP32[r9 >> 2] = HEAP32[r15 + 7];
  _curve_free(r14);
  _test_keys1775(r1, HEAP32[r13] - 64 | 0);
  r17 = 0;
  STACKTOP = r11;
  return r17;
}
function _test_keys1775(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  r4 = r3;
  r5 = r3 + 44;
  r6 = __gcry_mpi_new(r2);
  r7 = __gcry_mpi_new(r2);
  r8 = __gcry_mpi_new(r2);
  r9 = __gcry_mpi_new(r2);
  r10 = __gcry_mpi_new(r2);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(487200, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_mpi_ec_point_init(r5);
  r11 = r4 | 0;
  _curve_copy(r4 | 0, r1 | 0);
  r12 = r4 + 32 | 0;
  __gcry_mpi_ec_point_init(r12);
  _point_set(r12, r1 + 32 | 0);
  __gcry_mpi_randomize(r6, r2, 0);
  if ((_sign1776(r6, r1, r9, r10) | 0) != 0) {
    __gcry_log_fatal(487160, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((_verify1777(r6, r4, r9, r10) | 0) != 0) {
    __gcry_log_fatal(487108, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    __gcry_mpi_ec_point_free(r12);
    _curve_free(r11);
    __gcry_mpi_ec_point_free(r5);
    __gcry_mpi_free(r10);
    __gcry_mpi_free(r9);
    __gcry_mpi_free(r8);
    __gcry_mpi_free(r7);
    __gcry_mpi_free(r6);
    STACKTOP = r3;
    return;
  }
  __gcry_log_debug(487064, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __gcry_mpi_ec_point_free(r12);
  _curve_free(r11);
  __gcry_mpi_ec_point_free(r5);
  __gcry_mpi_free(r10);
  __gcry_mpi_free(r9);
  __gcry_mpi_free(r8);
  __gcry_mpi_free(r7);
  __gcry_mpi_free(r6);
  STACKTOP = r3;
  return;
}
function _wiener_map(r1) {
  var r2, r3, r4;
  r2 = 0;
  r3 = 0;
  while (1) {
    if ((r3 | 0) == 19) {
      r2 = 680;
      break;
    }
    if (HEAP32[(r3 << 3) + 409620 >> 2] >>> 0 < r1 >>> 0) {
      r3 = r3 + 1 | 0;
    } else {
      r2 = 679;
      break;
    }
  }
  if (r2 == 679) {
    r4 = HEAP32[(r3 << 3) + 409624 >> 2];
    return r4;
  } else if (r2 == 680) {
    r4 = (r1 >>> 3) + 200 | 0;
    return r4;
  }
}
function _elg_generate(r1, r2, r3, r4, r5) {
  var r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r1 = r3, r6 = r1 >> 2;
  _generate1810(r1, r2, r5);
  HEAP32[r4 >> 2] = HEAP32[r6];
  HEAP32[r4 + 4 >> 2] = HEAP32[r6 + 1];
  HEAP32[r4 + 8 >> 2] = HEAP32[r6 + 2];
  HEAP32[r4 + 12 >> 2] = HEAP32[r6 + 3];
  STACKTOP = r3;
  return 0;
}
function _elg_check_secret_key(r1, r2) {
  var r3, r4, r5, r6, r7, r8;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r3 = r1, r4 = r3 >> 2;
  r5 = HEAP32[r2 >> 2];
  if ((r5 | 0) == 0) {
    STACKTOP = r1;
    return 30;
  }
  r6 = r2 + 4 | 0;
  if ((HEAP32[r6 >> 2] | 0) == 0) {
    STACKTOP = r1;
    return 30;
  }
  r7 = r2 + 8 | 0;
  if ((HEAP32[r7 >> 2] | 0) == 0) {
    STACKTOP = r1;
    return 30;
  }
  r8 = r2 + 12 | 0;
  if ((HEAP32[r8 >> 2] | 0) == 0) {
    STACKTOP = r1;
    return 30;
  } else {
    HEAP32[r4] = r5;
    HEAP32[r4 + 1] = HEAP32[r6 >> 2];
    HEAP32[r4 + 2] = HEAP32[r7 >> 2];
    HEAP32[r4 + 3] = HEAP32[r8 >> 2];
    r8 = (_check_secret_key1818(r3) | 0) == 0 ? 7 : 0;
    STACKTOP = r1;
    return r8;
  }
}
function _elg_encrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r1 = r5;
  do {
    if ((r3 | 0) == 0) {
      r6 = 30;
    } else {
      r7 = HEAP32[r4 >> 2];
      if ((r7 | 0) == 0) {
        r6 = 30;
        break;
      }
      r8 = r4 + 4 | 0;
      if ((HEAP32[r8 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      r9 = r4 + 8 | 0;
      if ((HEAP32[r9 >> 2] | 0) == 0) {
        r6 = 30;
        break;
      }
      r10 = (r1 | 0) >> 2;
      HEAP32[r10] = r7;
      HEAP32[r1 + 4 >> 2] = HEAP32[r8 >> 2];
      HEAP32[r1 + 8 >> 2] = HEAP32[r9 >> 2];
      HEAP32[r2 >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[r10] + 4 >> 2]);
      r9 = __gcry_mpi_alloc(HEAP32[HEAP32[r10] + 4 >> 2]);
      HEAP32[r2 + 4 >> 2] = r9;
      _do_encrypt1813(HEAP32[r2 >> 2], r9, r3, r1);
      r6 = 0;
    }
  } while (0);
  STACKTOP = r5;
  return r6;
}
function _elg_decrypt(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r1 = r5, r6 = r1 >> 2;
  do {
    if ((HEAP32[r3 >> 2] | 0) == 0) {
      r7 = 30;
    } else {
      r8 = r3 + 4 | 0;
      if ((HEAP32[r8 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r9 = HEAP32[r4 >> 2];
      if ((r9 | 0) == 0) {
        r7 = 30;
        break;
      }
      r10 = r4 + 4 | 0;
      if ((HEAP32[r10 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r11 = r4 + 8 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r12 = r4 + 12 | 0;
      if ((HEAP32[r12 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r13 = r1 | 0;
      HEAP32[r13 >> 2] = r9;
      HEAP32[r6 + 1] = HEAP32[r10 >> 2];
      HEAP32[r6 + 2] = HEAP32[r11 >> 2];
      HEAP32[r6 + 3] = HEAP32[r12 >> 2];
      r12 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[r13 >> 2] + 4 >> 2]);
      HEAP32[r2 >> 2] = r12;
      _decrypt1814(r12, HEAP32[r3 >> 2], HEAP32[r8 >> 2], r1);
      r7 = 0;
    }
  } while (0);
  STACKTOP = r5;
  return r7;
}
function _elg_sign(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r5 = r1, r6 = r5 >> 2;
  do {
    if ((r3 | 0) == 0) {
      r7 = 30;
    } else {
      r8 = HEAP32[r4 >> 2];
      if ((r8 | 0) == 0) {
        r7 = 30;
        break;
      }
      r9 = r4 + 4 | 0;
      if ((HEAP32[r9 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r10 = r4 + 8 | 0;
      if ((HEAP32[r10 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r11 = r4 + 12 | 0;
      if ((HEAP32[r11 >> 2] | 0) == 0) {
        r7 = 30;
        break;
      }
      r12 = (r5 | 0) >> 2;
      HEAP32[r12] = r8;
      HEAP32[r6 + 1] = HEAP32[r9 >> 2];
      HEAP32[r6 + 2] = HEAP32[r10 >> 2];
      HEAP32[r6 + 3] = HEAP32[r11 >> 2];
      HEAP32[r2 >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[r12] + 4 >> 2]);
      r11 = __gcry_mpi_alloc(HEAP32[HEAP32[r12] + 4 >> 2]);
      HEAP32[r2 + 4 >> 2] = r11;
      _sign1815(HEAP32[r2 >> 2], r11, r3, r5);
      r7 = 0;
    }
  } while (0);
  STACKTOP = r1;
  return r7;
}
function _elg_verify(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r6, r1 = r5 >> 2;
  if ((HEAP32[r3 >> 2] | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r7 = r3 + 4 | 0;
  if ((HEAP32[r7 >> 2] | 0) == 0 | (r2 | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r8 = HEAP32[r4 >> 2];
  if ((r8 | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r9 = r4 + 4 | 0;
  if ((HEAP32[r9 >> 2] | 0) == 0) {
    STACKTOP = r6;
    return 30;
  }
  r10 = r4 + 8 | 0;
  if ((HEAP32[r10 >> 2] | 0) == 0) {
    STACKTOP = r6;
    return 30;
  } else {
    HEAP32[r1] = r8;
    HEAP32[r1 + 1] = HEAP32[r9 >> 2];
    HEAP32[r1 + 2] = HEAP32[r10 >> 2];
    r10 = (_verify1816(HEAP32[r3 >> 2], HEAP32[r7 >> 2], r2, r5) | 0) == 0 ? 8 : 0;
    STACKTOP = r6;
    return r10;
  }
}
function _elg_get_nbits(r1, r2) {
  return __gcry_mpi_get_nbits(HEAP32[r2 >> 2]);
}
function _elg_generate_ext(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12;
  r7 = 0;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  r1 = r3, r8 = r1 >> 2;
  do {
    if ((r4 | 0) == 0) {
      r7 = 733;
    } else {
      r9 = __gcry_sexp_find_token(r4, 472280, 0);
      if ((r9 | 0) == 0) {
        r7 = 733;
        break;
      }
      r10 = __gcry_sexp_nth_mpi(r9, 1, 0);
      __gcry_sexp_release(r9);
      if ((r10 | 0) == 0) {
        r11 = 30;
        STACKTOP = r3;
        return r11;
      } else {
        r12 = _generate_using_x(r1, r2, r10, r6);
        break;
      }
    }
  } while (0);
  if (r7 == 733) {
    _generate1810(r1, r2, r6);
    r12 = 0;
  }
  HEAP32[r5 >> 2] = HEAP32[r8];
  HEAP32[r5 + 4 >> 2] = HEAP32[r8 + 1];
  HEAP32[r5 + 8 >> 2] = HEAP32[r8 + 2];
  HEAP32[r5 + 12 >> 2] = HEAP32[r8 + 3];
  r11 = r12;
  STACKTOP = r3;
  return r11;
}
function _generate_using_x(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r5 = STACKTOP;
  r6 = (r1 | 0) >> 2;
  r7 = (r1 + 4 | 0) >> 2;
  r8 = (r1 + 8 | 0) >> 2;
  r9 = (r1 + 12 | 0) >> 2;
  r10 = r1 >> 2;
  HEAP32[r10] = 0;
  HEAP32[r10 + 1] = 0;
  HEAP32[r10 + 2] = 0;
  HEAP32[r10 + 3] = 0;
  r10 = __gcry_mpi_get_nbits(r3);
  if (!(r10 >>> 0 > 63 & r10 >>> 0 < r2 >>> 0)) {
    r11 = 55;
    STACKTOP = r5;
    return r11;
  }
  r12 = __gcry_mpi_new(r2);
  r13 = _wiener_map(r2);
  r14 = __gcry_mpi_alloc(1);
  r15 = __gcry_generate_elg_prime(0, r2, (r13 & 1) + r13 | 0, r14, r4);
  __gcry_mpi_sub_ui(r12, r15, 1);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(483268, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r10, tempInt));
  }
  do {
    if ((__gcry_mpi_cmp_ui(r3, 0) | 0) > 0) {
      if ((__gcry_mpi_cmp(r3, r12) | 0) >= 0) {
        break;
      }
      r10 = __gcry_mpi_new(r2);
      __gcry_mpi_powm(r10, r14, r3, r15);
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        _progress1811(10);
        __gcry_log_mpidump(467752, r15);
        __gcry_log_mpidump(465664, r14);
        __gcry_log_mpidump(490852, r10);
        __gcry_log_mpidump(489948, r3);
      }
      HEAP32[r6] = r15;
      HEAP32[r7] = r14;
      HEAP32[r8] = r10;
      HEAP32[r9] = __gcry_mpi_copy(r3);
      __gcry_mpi_release(r12);
      if ((_test_keys1812(r1, r2 - 64 | 0, 1) | 0) == 0) {
        r11 = 0;
        STACKTOP = r5;
        return r11;
      }
      __gcry_mpi_release(HEAP32[r6]);
      HEAP32[r6] = 0;
      __gcry_mpi_release(HEAP32[r7]);
      HEAP32[r7] = 0;
      __gcry_mpi_release(HEAP32[r8]);
      HEAP32[r8] = 0;
      __gcry_mpi_release(HEAP32[r9]);
      HEAP32[r9] = 0;
      r11 = 7;
      STACKTOP = r5;
      return r11;
    }
  } while (0);
  __gcry_mpi_release(r12);
  __gcry_mpi_release(r15);
  __gcry_mpi_release(r14);
  r11 = 55;
  STACKTOP = r5;
  return r11;
}
function _progress1811(r1) {
  var r2;
  r2 = HEAP32[110057];
  if ((r2 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[r2](HEAP32[110052], 484216, r1, 0, 0);
  return;
}
function _do_encrypt1813(r1, r2, r3, r4) {
  var r5, r6;
  r5 = (r4 | 0) >> 2;
  r6 = _gen_k1817(HEAP32[r5], 1);
  __gcry_mpi_powm(r1, HEAP32[r4 + 4 >> 2], r6, HEAP32[r5]);
  __gcry_mpi_powm(r2, HEAP32[r4 + 8 >> 2], r6, HEAP32[r5]);
  __gcry_mpi_mulm(r2, r2, r3, HEAP32[r5]);
  __gcry_mpi_free(r6);
  return;
}
function _decrypt1814(r1, r2, r3, r4) {
  var r5, r6;
  r5 = (r4 | 0) >> 2;
  r6 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[r5] + 4 >> 2]);
  __gcry_mpi_powm(r6, r2, HEAP32[r4 + 12 >> 2], HEAP32[r5]);
  __gcry_mpi_invm(r6, r6, HEAP32[r5]);
  __gcry_mpi_mulm(r1, r3, r6, HEAP32[r5]);
  __gcry_mpi_free(r6);
  return;
}
function _sign1815(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9;
  r5 = r1 + 4 | 0;
  r6 = __gcry_mpi_alloc(HEAP32[r5 >> 2]);
  r7 = __gcry_mpi_alloc(HEAP32[r5 >> 2]);
  r5 = (r4 | 0) >> 2;
  r8 = __gcry_mpi_copy(HEAP32[r5]);
  __gcry_mpi_sub_ui(r8, r8, 1);
  r9 = _gen_k1817(HEAP32[r5], 0);
  __gcry_mpi_powm(r1, HEAP32[r4 + 4 >> 2], r9, HEAP32[r5]);
  __gcry_mpi_mul(r6, HEAP32[r4 + 12 >> 2], r1);
  __gcry_mpi_subm(r6, r3, r6, r8);
  __gcry_mpi_invm(r7, r9, r8);
  __gcry_mpi_mulm(r2, r6, r7, r8);
  __gcry_mpi_free(r9);
  __gcry_mpi_free(r6);
  __gcry_mpi_free(r7);
  __gcry_mpi_free(r8);
  return;
}
function _verify1816(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 16, r9 = r8 >> 2;
  if ((__gcry_mpi_cmp_ui(r1, 0) | 0) <= 0) {
    r10 = 0;
    STACKTOP = r5;
    return r10;
  }
  r11 = (r4 | 0) >> 2;
  if ((__gcry_mpi_cmp(r1, HEAP32[r11]) | 0) >= 0) {
    r10 = 0;
    STACKTOP = r5;
    return r10;
  }
  r12 = r1 + 4 | 0;
  r13 = __gcry_mpi_alloc(HEAP32[r12 >> 2]);
  r14 = __gcry_mpi_alloc(HEAP32[r12 >> 2]);
  __gcry_mpi_invm(r14, HEAP32[r4 + 4 >> 2], HEAP32[r11]);
  r12 = r6 | 0;
  HEAP32[r12 >> 2] = r14;
  r6 = r8 | 0;
  HEAP32[r6 >> 2] = r3;
  HEAP32[r7 + 1] = HEAP32[r4 + 8 >> 2];
  HEAP32[r9 + 1] = r1;
  HEAP32[r7 + 2] = r1;
  HEAP32[r9 + 2] = r2;
  HEAP32[r7 + 3] = 0;
  HEAP32[r9 + 3] = 0;
  __gcry_mpi_mulpowm(r13, r12, r6, HEAP32[r11]);
  r11 = (__gcry_mpi_cmp_ui(r13, 1) | 0) == 0 & 1;
  __gcry_mpi_free(r13);
  __gcry_mpi_free(r14);
  r10 = r11;
  STACKTOP = r5;
  return r10;
}
function _check_secret_key1818(r1) {
  var r2, r3;
  r2 = r1 + 8 | 0;
  r3 = __gcry_mpi_alloc(HEAP32[HEAP32[r2 >> 2] + 4 >> 2]);
  __gcry_mpi_powm(r3, HEAP32[r1 + 4 >> 2], HEAP32[r1 + 12 >> 2], HEAP32[r1 >> 2]);
  r1 = (__gcry_mpi_cmp(r3, HEAP32[r2 >> 2]) | 0) == 0 & 1;
  __gcry_mpi_free(r3);
  return r1;
}
function __gcry_hash_selftest_check_one(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r7 = 0;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 1004 | 0;
  r9 = r8, r10 = r9 >> 2;
  if ((__gcry_md_get_algo_dlen(r1) | 0) != (r6 | 0)) {
    r11 = 483204;
    STACKTOP = r8;
    return r11;
  }
  if ((__gcry_md_open(r9, r1, 0) | 0) != 0) {
    r11 = 488768;
    STACKTOP = r8;
    return r11;
  }
  L988 : do {
    if ((r2 | 0) == 1) {
      r9 = r8 + 4 | 0;
      _memset(r9, 97, 1e3);
      r12 = HEAP32[r10];
      r13 = 0;
      while (1) {
        __gcry_md_write(r12, r9, 1e3);
        r14 = r13 + 1 | 0;
        if ((r14 | 0) == 1e3) {
          r7 = 775;
          break L988;
        } else {
          r13 = r14;
        }
      }
    } else if ((r2 | 0) == 0) {
      __gcry_md_write(HEAP32[r10], r3, r4);
      r7 = 775;
      break;
    } else {
      r15 = 480564;
    }
  } while (0);
  if (r7 == 775) {
    r15 = (_memcmp(__gcry_md_read(HEAP32[r10], r1), r5, r6) | 0) == 0 ? 0 : 476912;
  }
  __gcry_md_close(HEAP32[r10]);
  r11 = r15;
  STACKTOP = r8;
  return r11;
}
function __gcry_hmac_selftest(r1, r2, r3) {
  var r4;
  do {
    if ((__gcry_md_algo_info(r1, 8, 0, 0) | 0) == 0) {
      r4 = _run_selftests1867(r1, r2, r3);
    } else {
      if ((r3 | 0) == 0) {
        r4 = 5;
        break;
      }
      FUNCTION_TABLE[r3](483112, r1, 488760, 480540);
      r4 = 5;
    }
  } while (0);
  return _gpg_error1868(r4);
}
function _generate1810(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23;
  r4 = STACKTOP;
  r5 = __gcry_mpi_new(r2);
  r6 = _wiener_map(r2);
  r7 = (r6 & 1) + r6 | 0;
  r6 = __gcry_mpi_alloc(1);
  r8 = __gcry_generate_elg_prime(0, r2, r7, r6, r3);
  __gcry_mpi_sub_ui(r5, r8, 1);
  r3 = r7 * 3 & -1;
  r7 = r3 >>> 1;
  if (r7 >>> 0 >= r2 >>> 0) {
    __gcry_bug(470788, 292, 494820);
  }
  r9 = __gcry_mpi_snew(r7);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(469320, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
  }
  r10 = (r7 + 7 | 0) >>> 3;
  r11 = (r7 + 7 | 0) >>> 3;
  r12 = r7 + 1 | 0;
  r13 = r3 >>> 0 < 32;
  r3 = (r7 + 7 | 0) >>> 3;
  r7 = 0;
  while (1) {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1811(46);
    }
    do {
      if ((r7 | 0) == 0) {
        r14 = __gcry_random_bytes_secure(r10, 2);
      } else {
        if (r13) {
          __gcry_free(r7);
          r14 = __gcry_random_bytes_secure(r3, 2);
          break;
        } else {
          r15 = __gcry_random_bytes_secure(2, 2);
          r16 = r15;
          r17 = r7;
          tempBigInt = (tempInt = HEAPU8[r16] | HEAPU8[r16 + 1 | 0] << 8, tempInt << 16 >> 16);
          HEAP8[r17] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[r17 + 1 | 0] = tempBigInt & 255;
          __gcry_free(r15);
          r14 = r7;
          break;
        }
      }
    } while (0);
    __gcry_mpi_set_buffer(r9, r14, r11, 0);
    __gcry_mpi_clear_highbit(r9, r12);
    if ((__gcry_mpi_cmp_ui(r9, 0) | 0) <= 0) {
      r7 = r14;
      continue;
    }
    if ((__gcry_mpi_cmp(r9, r5) | 0) > -1) {
      r7 = r14;
    } else {
      break;
    }
  }
  __gcry_free(r14);
  r14 = __gcry_mpi_new(r2);
  __gcry_mpi_powm(r14, r6, r9, r8);
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    r18 = r1 | 0;
    HEAP32[r18 >> 2] = r8;
    r19 = r1 + 4 | 0;
    HEAP32[r19 >> 2] = r6;
    r20 = r1 + 8 | 0;
    HEAP32[r20 >> 2] = r14;
    r21 = r1 + 12 | 0;
    HEAP32[r21 >> 2] = r9;
    __gcry_mpi_release(r5);
    r22 = r2 - 64 | 0;
    r23 = _test_keys1812(r1, r22, 0);
    STACKTOP = r4;
    return;
  }
  _progress1811(10);
  __gcry_log_mpidump(467752, r8);
  __gcry_log_mpidump(465664, r6);
  __gcry_log_mpidump(490852, r14);
  __gcry_log_mpidump(489948, r9);
  r18 = r1 | 0;
  HEAP32[r18 >> 2] = r8;
  r19 = r1 + 4 | 0;
  HEAP32[r19 >> 2] = r6;
  r20 = r1 + 8 | 0;
  HEAP32[r20 >> 2] = r14;
  r21 = r1 + 12 | 0;
  HEAP32[r21 >> 2] = r9;
  __gcry_mpi_release(r5);
  r22 = r2 - 64 | 0;
  r23 = _test_keys1812(r1, r22, 0);
  STACKTOP = r4;
  return;
}
function _test_keys1812(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r5 = r4, r6 = r5 >> 2;
  r7 = __gcry_mpi_new(0);
  r8 = __gcry_mpi_new(r2);
  r9 = __gcry_mpi_new(r2);
  r10 = __gcry_mpi_new(r2);
  HEAP32[r6] = HEAP32[r1 >> 2];
  HEAP32[r6 + 1] = HEAP32[r1 + 4 >> 2];
  HEAP32[r6 + 2] = HEAP32[r1 + 8 >> 2];
  __gcry_mpi_randomize(r7, r2, 0);
  _do_encrypt1813(r8, r9, r7, r5);
  _decrypt1814(r10, r8, r9, r1);
  r2 = (__gcry_mpi_cmp(r7, r10) | 0) != 0;
  r6 = r2 & 1;
  _sign1815(r8, r9, r7, r1);
  r1 = (_verify1816(r8, r9, r7, r5) | 0) == 0 ? r6 | 2 : r6;
  __gcry_mpi_release(r7);
  __gcry_mpi_release(r8);
  __gcry_mpi_release(r9);
  __gcry_mpi_release(r10);
  r10 = (r1 | 0) != 0;
  if (r10 & (r3 | 0) == 0) {
    __gcry_log_fatal(488240, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r2 ? 487580 : 486592, HEAP32[tempInt + 4 >> 2] = (r1 & 2 | 0) != 0 ? 485784 : 486592, tempInt));
  }
  if (!r10) {
    STACKTOP = r4;
    return r1;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    STACKTOP = r4;
    return r1;
  }
  __gcry_log_debug(488240, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r2 ? 487580 : 486592, HEAP32[tempInt + 4 >> 2] = (r1 & 2 | 0) != 0 ? 485784 : 486592, tempInt));
  STACKTOP = r4;
  return r1;
}
function _gen_k1817(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11;
  r3 = STACKTOP;
  r4 = __gcry_mpi_alloc_secure(0);
  r5 = __gcry_mpi_alloc(HEAP32[r1 + 4 >> 2]);
  r6 = __gcry_mpi_copy(r1);
  r7 = __gcry_mpi_get_nbits(r1);
  do {
    if ((r2 | 0) == 0) {
      r8 = r7;
    } else {
      r9 = (_wiener_map(r7) * 3 & -1) >>> 1;
      if (r9 >>> 0 < r7 >>> 0) {
        r8 = r9;
        break;
      }
      __gcry_bug(470788, 192, 494884);
    }
  } while (0);
  r7 = (r8 + 7 | 0) >>> 3;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(484944, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_mpi_sub_ui(r6, r1, 1);
  r1 = r8 >>> 0 < 32;
  r8 = 0;
  L1047 : while (1) {
    if ((r8 | 0) == 0 | r1) {
      __gcry_free(r8);
      r10 = __gcry_random_bytes_secure(r7, 1);
    } else {
      r2 = __gcry_random_bytes_secure(4, 1);
      r9 = r2;
      r11 = r8;
      tempBigInt = HEAPU8[r9] | HEAPU8[r9 + 1 | 0] << 8 | HEAPU8[r9 + 2 | 0] << 16 | HEAPU8[r9 + 3 | 0] << 24 | 0;
      HEAP8[r11] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r11 + 1 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r11 + 2 | 0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[r11 + 3 | 0] = tempBigInt & 255;
      __gcry_free(r2);
      r10 = r8;
    }
    __gcry_mpi_set_buffer(r4, r10, r7, 0);
    L1053 : do {
      if ((__gcry_mpi_cmp(r4, r6) | 0) < 0) {
        while (1) {
          if ((__gcry_mpi_cmp_ui(r4, 0) | 0) <= 0) {
            break;
          }
          if ((__gcry_mpi_gcd(r5, r4, r6) | 0) != 0) {
            break L1047;
          }
          __gcry_mpi_add_ui(r4, r4, 1);
          if ((__gcry_get_debug_flag(1) | 0) != 0) {
            _progress1811(46);
          }
          if ((__gcry_mpi_cmp(r4, r6) | 0) >= 0) {
            break L1053;
          }
        }
        if ((__gcry_get_debug_flag(1) | 0) == 0) {
          r8 = r10;
          continue L1047;
        }
        _progress1811(45);
        r8 = r10;
        continue L1047;
      }
    } while (0);
    if ((__gcry_get_debug_flag(1) | 0) == 0) {
      r8 = r10;
      continue;
    }
    _progress1811(43);
    r8 = r10;
  }
  __gcry_free(r10);
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    __gcry_mpi_free(r6);
    __gcry_mpi_free(r5);
    STACKTOP = r3;
    return r4;
  }
  _progress1811(10);
  __gcry_mpi_free(r6);
  __gcry_mpi_free(r5);
  STACKTOP = r3;
  return r4;
}
function __gcry_compat_identification() {
  return 492716;
}
function _gpg_err_make1869(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 16777216;
  }
  return r2;
}
function _run_selftests1867(r1, r2, r3) {
  var r4;
  if ((r1 | 0) == 2) {
    r4 = _selftests_sha11870(r2, r3);
  } else if ((r1 | 0) == 8) {
    r4 = _selftests_sha2561872(r2, r3);
  } else if ((r1 | 0) == 11) {
    r4 = _selftests_sha2241871(r2, r3);
  } else if ((r1 | 0) == 10) {
    r4 = _selftests_sha5121874(r2, r3);
  } else if ((r1 | 0) == 9) {
    r4 = _selftests_sha3841873(r2, r3);
  } else {
    r4 = 5;
  }
  return r4;
}
function _gpg_error1868(r1) {
  return _gpg_err_make1869(r1);
}
function _selftests_sha11870(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  r4 = r3;
  r5 = 0;
  while (1) {
    HEAP8[r4 + r5 | 0] = r5 & 255;
    r6 = r5 + 1 | 0;
    if ((r6 | 0) == 64) {
      break;
    } else {
      r5 = r6;
    }
  }
  r5 = r4 | 0;
  r6 = _check_one(2, 477856, 9, r5, 64, 477608, 20);
  do {
    if ((r6 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r7 = 0;
        STACKTOP = r3;
        return r7;
      }
      HEAP8[r4 | 0] = 48;
      HEAP8[r4 + 1 | 0] = 49;
      HEAP8[r4 + 2 | 0] = 50;
      HEAP8[r4 + 3 | 0] = 51;
      HEAP8[r4 + 4 | 0] = 52;
      HEAP8[r4 + 5 | 0] = 53;
      HEAP8[r4 + 6 | 0] = 54;
      HEAP8[r4 + 7 | 0] = 55;
      HEAP8[r4 + 8 | 0] = 56;
      HEAP8[r4 + 9 | 0] = 57;
      HEAP8[r4 + 10 | 0] = 58;
      HEAP8[r4 + 11 | 0] = 59;
      HEAP8[r4 + 12 | 0] = 60;
      HEAP8[r4 + 13 | 0] = 61;
      HEAP8[r4 + 14 | 0] = 62;
      HEAP8[r4 + 15 | 0] = 63;
      HEAP8[r4 + 16 | 0] = 64;
      HEAP8[r4 + 17 | 0] = 65;
      HEAP8[r4 + 18 | 0] = 66;
      HEAP8[r4 + 19 | 0] = 67;
      r8 = _check_one(2, 476556, 9, r5, 20, 476352, 20);
      if ((r8 | 0) == 0) {
        r9 = 0;
        r10 = 80;
      } else {
        r11 = r8;
        r12 = 477304;
        break;
      }
      while (1) {
        HEAP8[r4 + r9 | 0] = r10 & 255;
        r8 = r9 + 1 | 0;
        if ((r8 | 0) == 100) {
          break;
        } else {
          r9 = r8;
          r10 = r10 + 1 | 0;
        }
      }
      r8 = _check_one(2, 475844, 9, r5, 100, 475548, 20);
      if ((r8 | 0) == 0) {
        r13 = 0;
        r14 = 112;
      } else {
        r11 = r8;
        r12 = 476120;
        break;
      }
      while (1) {
        HEAP8[r4 + r13 | 0] = r14 & 255;
        r8 = r13 + 1 | 0;
        if ((r8 | 0) == 49) {
          break;
        } else {
          r13 = r8;
          r14 = r14 + 1 | 0;
        }
      }
      r8 = _check_one(2, 475184, 9, r5, 49, 474896, 20);
      if ((r8 | 0) == 0) {
        r7 = 0;
      } else {
        r11 = r8;
        r12 = 475408;
        break;
      }
      STACKTOP = r3;
      return r7;
    } else {
      r11 = r6;
      r12 = 478144;
    }
  } while (0);
  if ((r2 | 0) == 0) {
    r7 = 50;
    STACKTOP = r3;
    return r7;
  }
  FUNCTION_TABLE[r2](483112, 2, r12, r11);
  r7 = 50;
  STACKTOP = r3;
  return r7;
}
function _selftests_sha2241871(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  r4 = (r1 | 0) == 0;
  r1 = 0;
  while (1) {
    r5 = HEAP32[(r1 * 40 & -1) + 414572 >> 2];
    if ((r5 | 0) == 0) {
      r6 = 0;
      r3 = 874;
      break;
    }
    r7 = HEAP32[(r1 * 40 & -1) + 414576 >> 2];
    r8 = _strlen(r7);
    r9 = HEAP32[(r1 * 40 & -1) + 414580 >> 2];
    r10 = _check_one(11, r7, r8, r9, _strlen(r9), (r1 * 40 & -1) + 414584 | 0, 28);
    if ((r10 | 0) != 0) {
      r3 = 870;
      break;
    }
    if (r4) {
      r6 = 0;
      r3 = 873;
      break;
    } else {
      r1 = r1 + 1 | 0;
    }
  }
  if (r3 == 870) {
    if ((r2 | 0) == 0) {
      r6 = 50;
      return r6;
    }
    FUNCTION_TABLE[r2](483112, 11, r5, r10);
    r6 = 50;
    return r6;
  } else if (r3 == 874) {
    return r6;
  } else if (r3 == 873) {
    return r6;
  }
}
function _selftests_sha2561872(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
  r3 = 0;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  r6 = (r1 | 0) == 0;
  r1 = 0;
  while (1) {
    r7 = HEAP32[(r1 * 44 & -1) + 414264 >> 2];
    if ((r7 | 0) == 0) {
      r8 = 0;
      r3 = 890;
      break;
    }
    r9 = (r1 * 44 & -1) + 414268 | 0;
    r10 = HEAP32[r9 >> 2];
    r11 = _strlen(r10);
    r12 = (r1 * 44 & -1) + 414272 | 0;
    r13 = HEAP32[r12 >> 2];
    r14 = (r1 * 44 & -1) + 414276 | 0;
    r15 = _check_one(8, r10, r11, r13, _strlen(r13), r14, 32);
    if ((r15 | 0) != 0) {
      r16 = r15;
      break;
    }
    r15 = HEAP32[r12 >> 2];
    r17 = __gcry_hmac256_new(r15, _strlen(r15));
    if ((r17 | 0) == 0) {
      r16 = 479108;
      break;
    }
    r15 = HEAP32[r9 >> 2];
    __gcry_hmac256_update(r17, r15, _strlen(r15));
    r15 = __gcry_hmac256_finalize(r17, r5);
    if ((r15 | 0) == 0) {
      r3 = 882;
      break;
    }
    if ((HEAP32[r5 >> 2] | 0) != 32) {
      r3 = 885;
      break;
    }
    if ((_memcmp(r15, r14, 32) | 0) != 0) {
      r3 = 885;
      break;
    }
    __gcry_hmac256_release(r17);
    if (r6) {
      r8 = 0;
      r3 = 892;
      break;
    } else {
      r1 = r1 + 1 | 0;
    }
  }
  if (r3 == 885) {
    __gcry_hmac256_release(r17);
    r16 = 478448;
  } else if (r3 == 890) {
    STACKTOP = r4;
    return r8;
  } else if (r3 == 892) {
    STACKTOP = r4;
    return r8;
  } else if (r3 == 882) {
    __gcry_hmac256_release(r17);
    r16 = 478760;
  }
  if ((r2 | 0) == 0) {
    r8 = 50;
    STACKTOP = r4;
    return r8;
  }
  FUNCTION_TABLE[r2](483112, 8, r7, r16);
  r8 = 50;
  STACKTOP = r4;
  return r8;
}
function _selftests_sha3841873(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  r4 = (r1 | 0) == 0;
  r1 = 0;
  while (1) {
    r5 = HEAP32[(r1 * 60 & -1) + 413844 >> 2];
    if ((r5 | 0) == 0) {
      r6 = 0;
      r3 = 903;
      break;
    }
    r7 = HEAP32[(r1 * 60 & -1) + 413848 >> 2];
    r8 = _strlen(r7);
    r9 = HEAP32[(r1 * 60 & -1) + 413852 >> 2];
    r10 = _check_one(9, r7, r8, r9, _strlen(r9), (r1 * 60 & -1) + 413856 | 0, 48);
    if ((r10 | 0) != 0) {
      r3 = 898;
      break;
    }
    if (r4) {
      r6 = 0;
      r3 = 902;
      break;
    } else {
      r1 = r1 + 1 | 0;
    }
  }
  if (r3 == 902) {
    return r6;
  } else if (r3 == 898) {
    if ((r2 | 0) == 0) {
      r6 = 50;
      return r6;
    }
    FUNCTION_TABLE[r2](483112, 9, r5, r10);
    r6 = 50;
    return r6;
  } else if (r3 == 903) {
    return r6;
  }
}
function _selftests_sha5121874(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10;
  r3 = 0;
  r4 = (r1 | 0) == 0;
  r1 = 0;
  while (1) {
    r5 = HEAP32[(r1 * 76 & -1) + 413312 >> 2];
    if ((r5 | 0) == 0) {
      r6 = 0;
      r3 = 915;
      break;
    }
    r7 = HEAP32[(r1 * 76 & -1) + 413316 >> 2];
    r8 = _strlen(r7);
    r9 = HEAP32[(r1 * 76 & -1) + 413320 >> 2];
    r10 = _check_one(10, r7, r8, r9, _strlen(r9), (r1 * 76 & -1) + 413324 | 0, 64);
    if ((r10 | 0) != 0) {
      r3 = 909;
      break;
    }
    if (r4) {
      r6 = 0;
      r3 = 914;
      break;
    } else {
      r1 = r1 + 1 | 0;
    }
  }
  if (r3 == 915) {
    return r6;
  } else if (r3 == 914) {
    return r6;
  } else if (r3 == 909) {
    if ((r2 | 0) == 0) {
      r6 = 50;
      return r6;
    }
    FUNCTION_TABLE[r2](483112, 10, r5, r10);
    r6 = 50;
    return r6;
  }
}
function _check_one(r1, r2, r3, r4, r5, r6, r7) {
  var r8, r9, r10, r11, r12, r13;
  r8 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r9 = r8, r10 = r9 >> 2;
  do {
    if ((__gcry_md_get_algo_dlen(r1) | 0) == (r7 | 0)) {
      if ((__gcry_md_open(r9, r1, 2) | 0) != 0) {
        r11 = 481428;
        break;
      }
      r12 = (__gcry_md_setkey(HEAP32[r10], r4, r5) | 0) == 0;
      r13 = HEAP32[r10];
      if (!r12) {
        __gcry_md_close(r13);
        r11 = 480284;
        break;
      }
      __gcry_md_write(r13, r2, r3);
      r13 = __gcry_md_read(HEAP32[r10], r1);
      if ((r13 | 0) == 0) {
        __gcry_md_close(HEAP32[r10]);
        r11 = 480028;
        break;
      } else {
        r12 = (_memcmp(r13, r6, r7) | 0) == 0;
        __gcry_md_close(HEAP32[r10]);
        r11 = r12 ? 0 : 479700;
        break;
      }
    } else {
      r11 = 481908;
    }
  } while (0);
  STACKTOP = r8;
  return r11;
}
function __gcry_mpi_ec_point_init(r1) {
  HEAP32[r1 >> 2] = __gcry_mpi_new(0);
  HEAP32[r1 + 4 >> 2] = __gcry_mpi_new(0);
  HEAP32[r1 + 8 >> 2] = __gcry_mpi_new(0);
  return;
}
function __gcry_mpi_ec_point_free(r1) {
  var r2;
  r2 = r1 | 0;
  __gcry_mpi_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  r2 = r1 + 4 | 0;
  __gcry_mpi_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  r2 = r1 + 8 | 0;
  __gcry_mpi_free(HEAP32[r2 >> 2]);
  HEAP32[r2 >> 2] = 0;
  return;
}
function __gcry_mpi_ec_init(r1, r2) {
  var r3, r4, r5, r6;
  __gcry_mpi_normalize(r1);
  __gcry_mpi_normalize(r2);
  r3 = __gcry_xcalloc(1, 80), r4 = r3 >> 2;
  r5 = r3;
  r6 = r3 >> 2;
  HEAP32[r6] = __gcry_mpi_copy(r1);
  r1 = r3 + 4 | 0;
  HEAP32[r1 >> 2] = __gcry_mpi_copy(r2);
  r2 = __gcry_mpi_alloc_like(HEAP32[r6]);
  __gcry_mpi_sub_ui(r2, HEAP32[r6], 3);
  HEAP32[r4 + 2] = (__gcry_mpi_cmp(HEAP32[r1 >> 2], r2) | 0) == 0 & 1;
  __gcry_mpi_free(r2);
  HEAP32[r4 + 3] = __gcry_mpi_alloc_set_ui(1);
  r2 = r3 + 16 | 0;
  HEAP32[r2 >> 2] = __gcry_mpi_alloc_set_ui(2);
  HEAP32[r4 + 5] = __gcry_mpi_alloc_set_ui(3);
  HEAP32[r4 + 6] = __gcry_mpi_alloc_set_ui(4);
  HEAP32[r4 + 7] = __gcry_mpi_alloc_set_ui(8);
  r3 = __gcry_mpi_alloc(0);
  HEAP32[r4 + 8] = r3;
  _ec_invm(r3, HEAP32[r2 >> 2], r5);
  HEAP32[r4 + 9] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 10] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 11] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 12] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 13] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 14] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 15] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 16] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 17] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 18] = __gcry_mpi_alloc_like(HEAP32[r6]);
  HEAP32[r4 + 19] = __gcry_mpi_alloc_like(HEAP32[r6]);
  return r5;
}
function _ec_invm(r1, r2, r3) {
  __gcry_mpi_invm(r1, r2, HEAP32[r3 >> 2]);
  return;
}
function __gcry_mpi_ec_free(r1) {
  var r2;
  r2 = r1 >> 2;
  if ((r1 | 0) == 0) {
    return;
  }
  __gcry_mpi_free(HEAP32[r2]);
  __gcry_mpi_free(HEAP32[r2 + 1]);
  __gcry_mpi_free(HEAP32[r2 + 3]);
  __gcry_mpi_free(HEAP32[r2 + 4]);
  __gcry_mpi_free(HEAP32[r2 + 5]);
  __gcry_mpi_free(HEAP32[r2 + 6]);
  __gcry_mpi_free(HEAP32[r2 + 7]);
  __gcry_mpi_free(HEAP32[r2 + 8]);
  __gcry_mpi_free(HEAP32[r2 + 9]);
  __gcry_mpi_free(HEAP32[r2 + 10]);
  __gcry_mpi_free(HEAP32[r2 + 11]);
  __gcry_mpi_free(HEAP32[r2 + 12]);
  __gcry_mpi_free(HEAP32[r2 + 13]);
  __gcry_mpi_free(HEAP32[r2 + 14]);
  __gcry_mpi_free(HEAP32[r2 + 15]);
  __gcry_mpi_free(HEAP32[r2 + 16]);
  __gcry_mpi_free(HEAP32[r2 + 17]);
  __gcry_mpi_free(HEAP32[r2 + 18]);
  __gcry_mpi_free(HEAP32[r2 + 19]);
  __gcry_free(r1);
  return;
}
function __gcry_mpi_ec_get_affine(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = r3 + 8 | 0;
  if ((__gcry_mpi_cmp_ui(HEAP32[r5 >> 2], 0) | 0) == 0) {
    r6 = -1;
    return r6;
  }
  r7 = __gcry_mpi_new(0);
  r8 = __gcry_mpi_new(0);
  _ec_invm(r7, HEAP32[r5 >> 2], r4);
  _ec_mulm(r8, r7, r7, r4);
  if ((r1 | 0) != 0) {
    _ec_mulm(r1, HEAP32[r3 >> 2], r8, r4);
  }
  if ((r2 | 0) != 0) {
    r1 = __gcry_mpi_new(0);
    _ec_mulm(r1, r8, r7, r4);
    _ec_mulm(r2, HEAP32[r3 + 4 >> 2], r1, r4);
    __gcry_mpi_free(r1);
  }
  __gcry_mpi_free(r8);
  __gcry_mpi_free(r7);
  r6 = 0;
  return r6;
}
function _ec_mulm(r1, r2, r3, r4) {
  __gcry_mpi_mulm(r1, r2, r3, HEAP32[r4 >> 2]);
  return;
}
function __gcry_mpi_ec_dup_point(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r4 = r3 >> 2;
  r5 = (r2 + 4 | 0) >> 2;
  do {
    if ((__gcry_mpi_cmp_ui(HEAP32[r5], 0) | 0) != 0) {
      r6 = (r2 + 8 | 0) >> 2;
      if ((__gcry_mpi_cmp_ui(HEAP32[r6], 0) | 0) == 0) {
        break;
      }
      r7 = r3 + 36 | 0;
      if ((HEAP32[r4 + 2] | 0) == 0) {
        r8 = (r3 + 48 | 0) >> 2;
        _ec_powm(HEAP32[r8], HEAP32[r2 >> 2], HEAP32[r4 + 4], r3);
        r9 = HEAP32[r8];
        _ec_mulm(r9, r9, HEAP32[r4 + 5], r3);
        r9 = (r7 | 0) >> 2;
        _ec_powm(HEAP32[r9], HEAP32[r6], HEAP32[r4 + 6], r3);
        r10 = HEAP32[r9];
        _ec_mulm(r10, r10, HEAP32[r4 + 1], r3);
        r10 = HEAP32[r8];
        _ec_addm(r10, r10, HEAP32[r9], r3);
      } else {
        r9 = (r7 | 0) >> 2;
        _ec_powm(HEAP32[r9], HEAP32[r6], HEAP32[r4 + 4], r3);
        r10 = (r3 + 48 | 0) >> 2;
        r8 = r2 | 0;
        _ec_subm(HEAP32[r10], HEAP32[r8 >> 2], HEAP32[r9], r3);
        r11 = HEAP32[r10];
        _ec_mulm(r11, r11, HEAP32[r4 + 5], r3);
        r11 = r3 + 40 | 0;
        _ec_addm(HEAP32[r11 >> 2], HEAP32[r8 >> 2], HEAP32[r9], r3);
        r9 = HEAP32[r10];
        _ec_mulm(r9, r9, HEAP32[r11 >> 2], r3);
      }
      r11 = r1 + 8 | 0;
      _ec_mulm(HEAP32[r11 >> 2], HEAP32[r5], HEAP32[r6], r3);
      r6 = HEAP32[r11 >> 2];
      r11 = (r3 + 16 | 0) >> 2;
      _ec_mulm(r6, r6, HEAP32[r11], r3);
      r6 = (r3 + 40 | 0) >> 2;
      _ec_powm(HEAP32[r6], HEAP32[r5], HEAP32[r11], r3);
      r9 = (r3 + 52 | 0) >> 2;
      _ec_mulm(HEAP32[r9], HEAP32[r6], HEAP32[r2 >> 2], r3);
      r10 = HEAP32[r9];
      _ec_mulm(r10, r10, HEAP32[r4 + 6], r3);
      r10 = (r1 | 0) >> 2;
      r8 = r3 + 48 | 0;
      _ec_powm(HEAP32[r10], HEAP32[r8 >> 2], HEAP32[r11], r3);
      r12 = r7 | 0;
      _ec_mulm(HEAP32[r12 >> 2], HEAP32[r9], HEAP32[r11], r3);
      r7 = HEAP32[r10];
      _ec_subm(r7, r7, HEAP32[r12 >> 2], r3);
      r12 = HEAP32[r6];
      _ec_powm(r12, r12, HEAP32[r11], r3);
      r11 = r3 + 56 | 0;
      _ec_mulm(HEAP32[r11 >> 2], HEAP32[r6], HEAP32[r4 + 7], r3);
      r6 = (r1 + 4 | 0) >> 2;
      _ec_subm(HEAP32[r6], HEAP32[r9], HEAP32[r10], r3);
      r10 = HEAP32[r6];
      _ec_mulm(r10, r10, HEAP32[r8 >> 2], r3);
      r8 = HEAP32[r6];
      _ec_subm(r8, r8, HEAP32[r11 >> 2], r3);
      return;
    }
  } while (0);
  __gcry_mpi_set_ui(HEAP32[r1 >> 2], 1);
  __gcry_mpi_set_ui(HEAP32[r1 + 4 >> 2], 1);
  __gcry_mpi_set_ui(HEAP32[r1 + 8 >> 2], 0);
  return;
}
function _ec_powm(r1, r2, r3, r4) {
  __gcry_mpi_powm(r1, r2, r3, HEAP32[r4 >> 2]);
  return;
}
function _ec_subm(r1, r2, r3, r4) {
  __gcry_mpi_subm(r1, r2, r3, HEAP32[r4 >> 2]);
  return;
}
function _ec_addm(r1, r2, r3, r4) {
  __gcry_mpi_addm(r1, r2, r3, HEAP32[r4 >> 2]);
  return;
}
function __gcry_rngcsprng_secure_alloc() {
  HEAP8[416916] = 1;
  return;
}
function __gcry_rngcsprng_enable_quick_gen() {
  HEAP8[439500] = 1;
  return;
}
function __gcry_rngcsprng_set_daemon_socket(r1) {
  return;
}
function __gcry_rngcsprng_use_daemon(r1) {
  return 0;
}
function __gcry_mpi_ec_add_points(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r5 = r3 >> 2;
  r6 = r1 >> 2;
  r7 = (r2 | 0) >> 2;
  r8 = (r3 | 0) >> 2;
  do {
    if ((__gcry_mpi_cmp(HEAP32[r7], HEAP32[r8]) | 0) == 0) {
      if ((__gcry_mpi_cmp(HEAP32[r2 + 4 >> 2], HEAP32[r5 + 1]) | 0) != 0) {
        break;
      }
      if ((__gcry_mpi_cmp(HEAP32[r2 + 8 >> 2], HEAP32[r5 + 2]) | 0) != 0) {
        break;
      }
      __gcry_mpi_ec_dup_point(r1, r2, r4);
      return;
    }
  } while (0);
  r9 = (r2 + 8 | 0) >> 2;
  if ((__gcry_mpi_cmp_ui(HEAP32[r9], 0) | 0) == 0) {
    __gcry_mpi_set(HEAP32[r6], HEAP32[r8]);
    __gcry_mpi_set(HEAP32[r6 + 1], HEAP32[r5 + 1]);
    __gcry_mpi_set(HEAP32[r6 + 2], HEAP32[r5 + 2]);
    return;
  }
  r10 = (r3 + 8 | 0) >> 2;
  if ((__gcry_mpi_cmp_ui(HEAP32[r10], 0) | 0) == 0) {
    __gcry_mpi_set(HEAP32[r6], HEAP32[r7]);
    __gcry_mpi_set(HEAP32[r6 + 1], HEAP32[r2 + 4 >> 2]);
    __gcry_mpi_set(HEAP32[r6 + 2], HEAP32[r9]);
    return;
  }
  r3 = (__gcry_mpi_cmp_ui(HEAP32[r9], 1) | 0) == 0;
  r11 = (__gcry_mpi_cmp_ui(HEAP32[r10], 1) | 0) == 0;
  r12 = (r4 + 36 | 0) >> 2;
  r13 = HEAP32[r12];
  if (r11) {
    __gcry_mpi_set(r13, HEAP32[r7]);
  } else {
    _ec_powm(r13, HEAP32[r10], HEAP32[r4 + 16 >> 2], r4);
    r13 = HEAP32[r12];
    _ec_mulm(r13, r13, HEAP32[r7], r4);
  }
  r13 = (r4 + 40 | 0) >> 2;
  r11 = HEAP32[r13];
  if (r3) {
    __gcry_mpi_set(r11, HEAP32[r7]);
  } else {
    _ec_powm(r11, HEAP32[r9], HEAP32[r4 + 16 >> 2], r4);
    r11 = HEAP32[r13];
    _ec_mulm(r11, r11, HEAP32[r8], r4);
  }
  r8 = (r4 + 44 | 0) >> 2;
  _ec_subm(HEAP32[r8], HEAP32[r12], HEAP32[r13], r4);
  r11 = (r4 + 48 | 0) >> 2;
  r7 = (r4 + 20 | 0) >> 2;
  _ec_powm(HEAP32[r11], HEAP32[r10], HEAP32[r7], r4);
  r3 = HEAP32[r11];
  _ec_mulm(r3, r3, HEAP32[r2 + 4 >> 2], r4);
  r3 = (r4 + 52 | 0) >> 2;
  _ec_powm(HEAP32[r3], HEAP32[r9], HEAP32[r7], r4);
  r14 = HEAP32[r3];
  _ec_mulm(r14, r14, HEAP32[r5 + 1], r4);
  r5 = (r4 + 56 | 0) >> 2;
  _ec_subm(HEAP32[r5], HEAP32[r11], HEAP32[r3], r4);
  if ((__gcry_mpi_cmp_ui(HEAP32[r8], 0) | 0) != 0) {
    r14 = r4 + 60 | 0;
    _ec_addm(HEAP32[r14 >> 2], HEAP32[r12], HEAP32[r13], r4);
    r13 = r4 + 64 | 0;
    _ec_addm(HEAP32[r13 >> 2], HEAP32[r11], HEAP32[r3], r4);
    r3 = r1 + 8 | 0;
    _ec_mulm(HEAP32[r3 >> 2], HEAP32[r9], HEAP32[r10], r4);
    r10 = HEAP32[r3 >> 2];
    _ec_mulm(r10, r10, HEAP32[r8], r4);
    r10 = (r4 + 72 | 0) >> 2;
    r3 = (r4 + 16 | 0) >> 2;
    _ec_powm(HEAP32[r10], HEAP32[r5], HEAP32[r3], r4);
    r9 = (r4 + 76 | 0) >> 2;
    _ec_powm(HEAP32[r9], HEAP32[r8], HEAP32[r3], r4);
    r11 = HEAP32[r9];
    _ec_mulm(r11, r11, HEAP32[r14 >> 2], r4);
    r14 = r1 | 0;
    _ec_subm(HEAP32[r14 >> 2], HEAP32[r10], HEAP32[r9], r4);
    _ec_mulm(HEAP32[r10], HEAP32[r14 >> 2], HEAP32[r3], r4);
    r3 = (r4 + 68 | 0) >> 2;
    _ec_subm(HEAP32[r3], HEAP32[r9], HEAP32[r10], r4);
    r9 = HEAP32[r3];
    _ec_mulm(r9, r9, HEAP32[r5], r4);
    _ec_powm(HEAP32[r10], HEAP32[r8], HEAP32[r7], r4);
    r7 = HEAP32[r10];
    _ec_mulm(r7, r7, HEAP32[r13 >> 2], r4);
    r13 = r1 + 4 | 0;
    _ec_subm(HEAP32[r13 >> 2], HEAP32[r3], HEAP32[r10], r4);
    r10 = HEAP32[r13 >> 2];
    _ec_mulm(r10, r10, HEAP32[r4 + 32 >> 2], r4);
    return;
  }
  if ((__gcry_mpi_cmp_ui(HEAP32[r5], 0) | 0) == 0) {
    __gcry_mpi_ec_dup_point(r1, r2, r4);
    return;
  } else {
    __gcry_mpi_set_ui(HEAP32[r6], 1);
    __gcry_mpi_set_ui(HEAP32[r6 + 1], 1);
    __gcry_mpi_set_ui(HEAP32[r6 + 2], 0);
    return;
  }
}
function __gcry_mpi_ec_mul_point(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  r6 = r5, r7 = r6 >> 2;
  r8 = r5 + 12;
  r9 = r5 + 24;
  r10 = (r4 | 0) >> 2;
  r11 = __gcry_mpi_alloc_like(HEAP32[r10]);
  r12 = __gcry_mpi_alloc_like(HEAP32[r10]);
  r13 = __gcry_mpi_alloc_like(HEAP32[r10]);
  r14 = __gcry_mpi_copy(r2);
  r2 = __gcry_mpi_copy(HEAP32[r3 + 4 >> 2]);
  r15 = r14 + 8 | 0;
  if ((HEAP32[r15 >> 2] | 0) != 0) {
    HEAP32[r15 >> 2] = 0;
    _ec_invm(r2, r2, r4);
  }
  r15 = (r3 + 8 | 0) >> 2;
  if ((__gcry_mpi_cmp_ui(HEAP32[r15], 1) | 0) == 0) {
    __gcry_mpi_set(r11, HEAP32[r3 >> 2]);
    __gcry_mpi_set(r12, r2);
  } else {
    r16 = __gcry_mpi_alloc_like(HEAP32[r10]);
    r17 = __gcry_mpi_alloc_like(HEAP32[r10]);
    r18 = HEAP32[r15];
    _ec_mulm(r16, r18, r18, r4);
    _ec_mulm(r17, HEAP32[r15], r16, r4);
    _ec_invm(r16, r16, r4);
    _ec_mulm(r11, HEAP32[r3 >> 2], r16, r4);
    _ec_invm(r17, r17, r4);
    _ec_mulm(r12, r2, r17, r4);
    __gcry_mpi_free(r16);
    __gcry_mpi_free(r17);
  }
  r17 = __gcry_mpi_copy(HEAP32[r4 + 12 >> 2]);
  __gcry_mpi_mul(r13, r14, HEAP32[r4 + 20 >> 2]);
  r16 = __gcry_mpi_get_nbits(r13);
  __gcry_mpi_set(HEAP32[r1 >> 2], HEAP32[r3 >> 2]);
  __gcry_mpi_set(HEAP32[r1 + 4 >> 2], r2);
  __gcry_mpi_free(r2);
  __gcry_mpi_set(HEAP32[r1 + 8 >> 2], HEAP32[r15]);
  HEAP32[r7] = r11;
  HEAP32[r7 + 1] = r12;
  HEAP32[r7 + 2] = r17;
  __gcry_mpi_ec_point_init(r8);
  __gcry_mpi_ec_point_init(r9);
  r17 = r16 - 2 | 0;
  if ((r17 | 0) == 0) {
    __gcry_mpi_ec_point_free(r6);
    __gcry_mpi_ec_point_free(r8);
    __gcry_mpi_ec_point_free(r9);
    __gcry_mpi_free(r13);
    __gcry_mpi_free(r14);
    STACKTOP = r5;
    return;
  }
  r16 = r9 + 4 | 0;
  r7 = r17;
  while (1) {
    __gcry_mpi_ec_dup_point(r1, r1, r4);
    do {
      if ((__gcry_mpi_test_bit(r13, r7) | 0) == 1) {
        if ((__gcry_mpi_test_bit(r14, r7) | 0) != 0) {
          break;
        }
        _point_set1891(r8, r1);
        __gcry_mpi_ec_add_points(r1, r8, r6, r4);
      }
    } while (0);
    do {
      if ((__gcry_mpi_test_bit(r13, r7) | 0) == 0) {
        if ((__gcry_mpi_test_bit(r14, r7) | 0) != 1) {
          break;
        }
        _point_set1891(r8, r1);
        _point_set1891(r9, r6);
        r17 = HEAP32[r16 >> 2];
        _ec_subm(r17, HEAP32[r10], r17, r4);
        __gcry_mpi_ec_add_points(r1, r8, r9, r4);
      }
    } while (0);
    r17 = r7 - 1 | 0;
    if ((r17 | 0) == 0) {
      break;
    } else {
      r7 = r17;
    }
  }
  __gcry_mpi_ec_point_free(r6);
  __gcry_mpi_ec_point_free(r8);
  __gcry_mpi_ec_point_free(r9);
  __gcry_mpi_free(r13);
  __gcry_mpi_free(r14);
  STACKTOP = r5;
  return;
}
function _point_set1891(r1, r2) {
  __gcry_mpi_set(HEAP32[r1 >> 2], HEAP32[r2 >> 2]);
  __gcry_mpi_set(HEAP32[r1 + 4 >> 2], HEAP32[r2 + 4 >> 2]);
  __gcry_mpi_set(HEAP32[r1 + 8 >> 2], HEAP32[r2 + 8 >> 2]);
  return;
}
function _build_index(r1, r2, r3, r4) {
  var r5, r6, r7, r8;
  r5 = r4 - r3 | 0;
  if ((r2 | 0) > 0) {
    r6 = 0;
    r7 = r2;
  } else {
    r8 = 0;
    return r8;
  }
  while (1) {
    r2 = r7 - 1 | 0;
    r3 = (__gcry_mpi_test_bit(HEAP32[r1 + (r2 << 2) >> 2], r5) | 0) != 0 & 1 | r6 << 1;
    if ((r2 | 0) > 0) {
      r6 = r3;
      r7 = r2;
    } else {
      r8 = r3;
      break;
    }
  }
  return r8;
}
function __gcry_rngcsprng_initialize(r1) {
  if ((r1 | 0) == 0) {
    _initialize_basics();
    return;
  } else {
    _initialize();
    return;
  }
}
function _initialize() {
  var r1, r2;
  _initialize_basics();
  _lock_pool1948();
  if ((HEAP32[109684] | 0) != 0) {
    _unlock_pool();
    return;
  }
  if (HEAP8[416916]) {
    r1 = __gcry_xcalloc_secure(1, 664);
  } else {
    r1 = __gcry_xcalloc(1, 664);
  }
  HEAP32[109684] = r1;
  if (HEAP8[416916]) {
    r2 = __gcry_xcalloc_secure(1, 664);
  } else {
    r2 = __gcry_xcalloc(1, 664);
  }
  HEAP32[113869] = r2;
  _getfnc_gather_random();
  HEAP32[103227] = 298;
  _unlock_pool();
  return;
}
function __gcry_rngcsprng_dump_stats() {
  var r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
  r1 = STACKTOP;
  r2 = HEAP32[109683];
  r3 = HEAP32[109681];
  r4 = HEAP32[109680];
  r5 = HEAP32[109674];
  r6 = HEAP32[109675];
  r7 = HEAP32[109682];
  r8 = HEAP32[109678];
  r9 = HEAP32[109679];
  r10 = HEAP32[109676];
  r11 = HEAP32[109677];
  r12 = (__gcry_rndhw_failed_p() | 0) != 0 ? 488676 : 480528;
  __gcry_log_info(482768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 48 | 0, HEAP32[tempInt >> 2] = 600, HEAP32[tempInt + 4 >> 2] = r2, HEAP32[tempInt + 8 >> 2] = r3, HEAP32[tempInt + 12 >> 2] = r4, HEAP32[tempInt + 16 >> 2] = r5, HEAP32[tempInt + 20 >> 2] = r6, HEAP32[tempInt + 24 >> 2] = r7, HEAP32[tempInt + 28 >> 2] = r8, HEAP32[tempInt + 32 >> 2] = r9, HEAP32[tempInt + 36 >> 2] = r10, HEAP32[tempInt + 40 >> 2] = r11, HEAP32[tempInt + 44 >> 2] = r12, tempInt));
  STACKTOP = r1;
  return;
}
function __gcry_rngcsprng_is_faked() {
  _initialize();
  return HEAP8[439500] & 1;
}
function __gcry_rngcsprng_add_bytes(r1, r2, r3) {
  var r4, r5, r6, r7;
  do {
    if ((r3 | 0) == -1) {
      r4 = 35;
    } else {
      if ((r3 | 0) > 100) {
        r4 = 100;
        break;
      }
      r4 = (r3 | 0) < 0 ? 0 : r3;
    }
  } while (0);
  if ((r1 | 0) == 0) {
    r5 = 16777261;
    return r5;
  }
  if ((r2 | 0) == 0 | (r4 | 0) < 10) {
    r5 = 0;
    return r5;
  }
  _initialize_basics();
  if ((r2 | 0) == 0) {
    r5 = 0;
    return r5;
  } else {
    r6 = r2;
    r7 = r1;
  }
  while (1) {
    r1 = r6 >>> 0 > 600 ? 600 : r6;
    _lock_pool1948();
    if ((HEAP32[109684] | 0) != 0) {
      _add_randomness(r7, r1, 1);
    }
    _unlock_pool();
    if ((r6 | 0) == (r1 | 0)) {
      r5 = 0;
      break;
    } else {
      r6 = r6 - r1 | 0;
      r7 = r7 + r1 | 0;
    }
  }
  return r5;
}
function __gcry_rngcsprng_randomize(r1, r2, r3) {
  var r4, r5, r6;
  _initialize();
  r4 = HEAP8[439500] & r3 >>> 0 > 1 ? 1 : r3 & 3;
  _lock_pool1948();
  if (r4 >>> 0 > 1) {
    HEAP32[109677] = HEAP32[109677] + r2 | 0;
    HEAP32[109676] = HEAP32[109676] + 1 | 0;
  } else {
    HEAP32[109679] = HEAP32[109679] + r2 | 0;
    HEAP32[109678] = HEAP32[109678] + 1 | 0;
  }
  if ((r2 | 0) == 0) {
    _unlock_pool();
    return;
  } else {
    r5 = r1;
    r6 = r2;
  }
  while (1) {
    r2 = r6 >>> 0 > 600 ? 600 : r6;
    _read_pool(r5, r2, r4);
    if ((r6 | 0) == (r2 | 0)) {
      break;
    } else {
      r5 = r5 + r2 | 0;
      r6 = r6 - r2 | 0;
    }
  }
  _unlock_pool();
  return;
}
function __gcry_mpi_mulpowm(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r5 = 0;
  while (1) {
    if ((HEAP32[r2 + (r5 << 2) >> 2] | 0) == 0) {
      break;
    } else {
      r5 = r5 + 1 | 0;
    }
  }
  if ((r5 | 0) == 0) {
    __gcry_assert_failed(482900, 488724, 80, 495700);
  }
  r6 = HEAP32[r3 >> 2];
  L1331 : do {
    if ((r6 | 0) == 0) {
      r7 = 0;
      r8 = 0;
    } else {
      r9 = 0;
      r10 = 0;
      r11 = r6;
      while (1) {
        r12 = __gcry_mpi_get_nbits(r11);
        r13 = (r12 | 0) > (r10 | 0) ? r12 : r10;
        r12 = r9 + 1 | 0;
        r14 = HEAP32[r3 + (r12 << 2) >> 2];
        if ((r14 | 0) == 0) {
          r7 = r12;
          r8 = r13;
          break L1331;
        } else {
          r9 = r12;
          r10 = r13;
          r11 = r14;
        }
      }
    }
  } while (0);
  if ((r7 | 0) != (r5 | 0)) {
    __gcry_assert_failed(480532, 488724, 88, 495700);
  }
  if ((r8 | 0) == 0) {
    __gcry_assert_failed(476892, 488724, 89, 495700);
  }
  if ((r5 | 0) >= 10) {
    __gcry_assert_failed(474132, 488724, 90, 495700);
  }
  r7 = 1 << r5;
  r6 = __gcry_xcalloc(r7, 4);
  r11 = r6;
  r10 = __gcry_mpi_alloc(HEAP32[r4 + 4 >> 2] + 1 | 0);
  __gcry_mpi_set_ui(r1, 1);
  L1344 : do {
    if ((r8 | 0) >= 1) {
      r9 = (r5 | 0) > 0;
      r14 = 1;
      while (1) {
        __gcry_mpi_mulm(r10, r1, r1, r4);
        r13 = _build_index(r3, r5, r14, r8);
        if (!((r13 | 0) > -1 & (r13 | 0) < (r7 | 0))) {
          break;
        }
        r12 = ((r13 << 2) + r11 | 0) >> 2;
        do {
          if ((HEAP32[r12] | 0) == 0) {
            if ((r13 | 0) == 0) {
              HEAP32[r11 >> 2] = __gcry_mpi_alloc_set_ui(1);
              break;
            }
            L1354 : do {
              if (r9) {
                r15 = 0;
                while (1) {
                  do {
                    if ((1 << r15 & r13 | 0) != 0) {
                      r16 = HEAP32[r12];
                      r17 = HEAP32[r2 + (r15 << 2) >> 2];
                      if ((r16 | 0) == 0) {
                        HEAP32[r12] = __gcry_mpi_copy(r17);
                        break;
                      } else {
                        __gcry_mpi_mulm(r16, r16, r17, r4);
                        break;
                      }
                    }
                  } while (0);
                  r17 = r15 + 1 | 0;
                  if ((r17 | 0) == (r5 | 0)) {
                    break L1354;
                  } else {
                    r15 = r17;
                  }
                }
              }
            } while (0);
            if ((HEAP32[r12] | 0) != 0) {
              break;
            }
            HEAP32[r12] = __gcry_mpi_alloc(0);
          }
        } while (0);
        __gcry_mpi_mulm(r1, r10, HEAP32[r12], r4);
        r13 = r14 + 1 | 0;
        if ((r13 | 0) > (r8 | 0)) {
          break L1344;
        } else {
          r14 = r13;
        }
      }
      __gcry_assert_failed(472236, 488724, 103, 495700);
    }
  } while (0);
  __gcry_mpi_free(r10);
  if ((r7 | 0) > 0) {
    r18 = 0;
  } else {
    __gcry_free(r6);
    return;
  }
  while (1) {
    __gcry_mpi_free(HEAP32[r11 + (r18 << 2) >> 2]);
    r10 = r18 + 1 | 0;
    if ((r10 | 0) == (r7 | 0)) {
      break;
    } else {
      r18 = r10;
    }
  }
  __gcry_free(r6);
  return;
}
function _initialize_basics() {
  var r1, r2, r3;
  r1 = STACKTOP;
  if (HEAP8[455492]) {
    STACKTOP = r1;
    return;
  }
  HEAP8[455492] = 1;
  r2 = __gcry_ath_mutex_init(440344);
  if ((r2 | 0) != 0) {
    r3 = _strerror(r2);
    __gcry_log_fatal(478108, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
  }
  r3 = __gcry_ath_mutex_init(440896);
  if ((r3 | 0) == 0) {
    STACKTOP = r1;
    return;
  } else {
    r1 = _strerror(r3);
    __gcry_log_fatal(477788, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
}
function _lock_pool1948() {
  var r1, r2;
  r1 = STACKTOP;
  r2 = __gcry_ath_mutex_lock(440344);
  if ((r2 | 0) == 0) {
    HEAP8[440352] = 1;
    STACKTOP = r1;
    return;
  } else {
    r1 = _strerror(r2);
    __gcry_log_fatal(479988, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
}
function _add_randomness(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11;
  if (!HEAP8[440352]) {
    __gcry_assert_failed(490784, 476876, 1074, 495376);
  }
  HEAP32[109675] = HEAP32[109675] + r2 | 0;
  HEAP32[109674] = HEAP32[109674] + 1 | 0;
  if ((r2 | 0) == 0) {
    return;
  }
  r4 = r3 >>> 0 < 3;
  r3 = r1;
  r1 = 0;
  r5 = r2;
  while (1) {
    r2 = r5 - 1 | 0;
    r6 = r3 + 1 | 0;
    r7 = HEAP8[r3];
    r8 = HEAP32[110082];
    HEAP32[110082] = r8 + 1 | 0;
    r9 = HEAP32[109684] + r8 | 0;
    HEAP8[r9] = HEAP8[r9] ^ r7;
    r7 = r1 + 1 | 0;
    if (HEAP32[110082] >>> 0 > 599) {
      do {
        if (r4 | HEAP8[440360]) {
          r10 = r7;
        } else {
          r9 = HEAP32[110089] + r7 | 0;
          HEAP32[110089] = r9;
          if (r9 >>> 0 <= 599) {
            r10 = 0;
            break;
          }
          HEAP8[440360] = 1;
          r10 = 0;
        }
      } while (0);
      HEAP32[110082] = 0;
      _mix_pool(HEAP32[109684]);
      HEAP32[109683] = HEAP32[109683] + 1 | 0;
      HEAP32[113870] = (r2 | 0) == 0 & 1;
      r11 = r10;
    } else {
      r11 = r7;
    }
    if ((r2 | 0) == 0) {
      break;
    } else {
      r3 = r6;
      r1 = r11;
      r5 = r2;
    }
  }
  return;
}
function _unlock_pool() {
  var r1, r2;
  r1 = STACKTOP;
  HEAP8[440352] = 0;
  r2 = __gcry_ath_mutex_unlock(440344);
  if ((r2 | 0) == 0) {
    STACKTOP = r1;
    return;
  } else {
    r1 = _strerror(r2);
    __gcry_log_fatal(480244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
}
function __gcry_rngcsprng_update_seed_file() {
  var r1, r2, r3, r4, r5, r6;
  r1 = 0;
  r2 = STACKTOP;
  _initialize_basics();
  _lock_pool1948();
  r3 = HEAP32[109684];
  if (!((HEAP32[104228] | 0) != 0 & (r3 | 0) != 0 & HEAP8[440360])) {
    _unlock_pool();
    STACKTOP = r2;
    return;
  }
  if (!HEAP8[464812]) {
    _unlock_pool();
    __gcry_log_info(__gcry_gettext(474096), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = r2;
    return;
  }
  r4 = HEAP32[113869];
  r5 = r3;
  r3 = 0;
  while (1) {
    HEAP32[r4 >> 2] = HEAP32[r5 >> 2] - 1515870811 | 0;
    r6 = r3 + 1 | 0;
    if ((r6 | 0) == 150) {
      break;
    } else {
      r4 = r4 + 4 | 0;
      r5 = r5 + 4 | 0;
      r3 = r6;
    }
  }
  _mix_pool(HEAP32[109684]);
  HEAP32[109683] = HEAP32[109683] + 1 | 0;
  _mix_pool(HEAP32[113869]);
  HEAP32[109682] = HEAP32[109682] + 1 | 0;
  r3 = _open(HEAP32[104228], 513, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 384, tempInt));
  do {
    if ((r3 | 0) == -1) {
      r5 = __gcry_gettext(472212);
      r4 = HEAP32[104228];
      r6 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_info(r5, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
    } else {
      if ((_lock_seed_file(r3, HEAP32[104228], 1) | 0) != 0) {
        _close(r3);
        break;
      }
      if ((_ftruncate(r3, 0) | 0) != 0) {
        r6 = __gcry_gettext(470748);
        r4 = HEAP32[104228];
        r5 = _strerror(HEAP32[___errno_location() >> 2]);
        __gcry_log_info(r6, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
        _close(r3);
        break;
      }
      while (1) {
        r5 = _write(r3, HEAP32[113869], 600);
        if ((r5 | 0) == 600) {
          break;
        } else if ((r5 | 0) != -1) {
          r1 = 1124;
          break;
        }
        if ((HEAP32[___errno_location() >> 2] | 0) != 4) {
          r1 = 1124;
          break;
        }
      }
      if (r1 == 1124) {
        r5 = __gcry_gettext(470748);
        r4 = HEAP32[104228];
        r6 = _strerror(HEAP32[___errno_location() >> 2]);
        __gcry_log_info(r5, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r6, tempInt));
      }
      if ((_close(r3) | 0) == 0) {
        break;
      }
      r6 = __gcry_gettext(469284);
      r4 = HEAP32[104228];
      r5 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_info(r6, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r4, HEAP32[tempInt + 4 >> 2] = r5, tempInt));
    }
  } while (0);
  _unlock_pool();
  STACKTOP = r2;
  return;
}
function _lock_seed_file(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  r6 = r5;
  r7 = r5 + 16;
  r8 = r6 >> 2;
  HEAP32[r8] = 0;
  HEAP32[r8 + 1] = 0;
  HEAP32[r8 + 2] = 0;
  HEAP32[r8 + 3] = 0;
  HEAP16[r6 >> 1] = (r3 | 0) != 0 ? 2 : 1;
  HEAP16[r6 + 2 >> 1] = 0;
  if ((_fcntl(r1, 8, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt)) | 0) != -1) {
    r9 = 0;
    STACKTOP = r5;
    return r9;
  }
  r3 = r7 | 0;
  r8 = r7 + 4 | 0;
  r10 = 0;
  while (1) {
    if ((HEAP32[___errno_location() >> 2] | 0) != 11) {
      if ((HEAP32[___errno_location() >> 2] | 0) != 13) {
        break;
      }
    }
    if ((r10 | 0) > 2) {
      __gcry_log_info(__gcry_gettext(481396), (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
    }
    HEAP32[r3 >> 2] = r10;
    HEAP32[r8 >> 2] = 25e4;
    _select(0, 0, 0, 0, r7);
    if ((_fcntl(r1, 8, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r6, tempInt)) | 0) == -1) {
      r10 = ((r10 | 0) < 10 & 1) + r10 | 0;
    } else {
      r9 = 0;
      r4 = 1143;
      break;
    }
  }
  if (r4 == 1143) {
    STACKTOP = r5;
    return r9;
  }
  r4 = __gcry_gettext(481884);
  r10 = _strerror(HEAP32[___errno_location() >> 2]);
  __gcry_log_info(r4, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r2, HEAP32[tempInt + 4 >> 2] = r10, tempInt));
  r9 = -1;
  STACKTOP = r5;
  return r9;
}
function __gcry_rngcsprng_fast_poll() {
  _initialize_basics();
  _lock_pool1948();
  if ((HEAP32[109684] | 0) == 0) {
    _unlock_pool();
    return;
  }
  _do_fast_random_poll();
  _unlock_pool();
  return;
}
function _random_poll() {
  HEAP32[109681] = HEAP32[109681] + 1 | 0;
  _read_random_source(3, 120, 1);
  return;
}
function _gather_faked(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  if (!HEAP8[455708]) {
    __gcry_log_info(__gcry_gettext(479648), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    HEAP8[455708] = 1;
    _srand(Math.imul(_time(0), _getgid()));
  }
  r4 = __gcry_xmalloc(r2);
  r5 = r4;
  r6 = r2;
  while (1) {
    if ((r6 | 0) == 0) {
      break;
    }
    HEAP8[r5] = _rand() * 256 * 4.656612873077393e-10 & -1 & 255;
    r5 = r5 + 1 | 0;
    r6 = r6 - 1 | 0;
  }
  _add_randomness(r4, r2, r1);
  __gcry_free(r4);
  STACKTOP = r3;
  return;
}
function _read_pool(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  r6 = r5;
  r7 = r5 + 4;
  r8 = r5 + 8;
  if (!HEAP8[440352]) {
    __gcry_assert_failed(490784, 476876, 934, 494476);
  }
  r9 = (r3 | 0) != 2;
  r10 = (r3 | 0) == 2;
  r3 = r7;
  r11 = r8;
  r12 = r6;
  r13 = r1;
  r1 = r2;
  L1471 : while (1) {
    r2 = _getgid();
    if ((HEAP32[109824] | 0) == -1) {
      HEAP32[109824] = r2;
    }
    if ((HEAP32[109824] | 0) != (r2 | 0)) {
      HEAP32[109824] = r2;
      HEAP32[r6 >> 2] = HEAP32[109824];
      _add_randomness(r12, 4, 0);
      HEAP32[113870] = 0;
    }
    if (!HEAP8[440352]) {
      r4 = 1164;
      break;
    }
    r14 = r1 >>> 0 > 600;
    if (r14) {
      r4 = 1166;
      break;
    }
    do {
      if (!HEAP8[440360]) {
        if ((_read_seed_file() | 0) == 0) {
          break;
        }
        HEAP8[440360] = 1;
      }
    } while (0);
    if (!(r9 | HEAP8[458208])) {
      HEAP32[110091] = 0;
      r15 = r1 >>> 0 < 300;
      r16 = r15 ? 300 : r1;
      if (!(r15 | r14 ^ 1)) {
        r4 = 1172;
        break;
      }
      _read_random_source(4, r16, 2);
      HEAP32[110091] = HEAP32[110091] + r16 | 0;
      HEAP8[458208] = 1;
    }
    do {
      if (r10) {
        r16 = HEAP32[110091];
        if (r16 >>> 0 >= r1 >>> 0) {
          break;
        }
        if ((r16 | 0) < 0) {
          HEAP32[110091] = 0;
        }
        r16 = r1 - HEAP32[110091] | 0;
        if (r16 >>> 0 > 600) {
          r4 = 1179;
          break L1471;
        }
        _read_random_source(4, r16, 2);
        HEAP32[110091] = HEAP32[110091] + r16 | 0;
      }
    } while (0);
    L1497 : do {
      if (!HEAP8[440360]) {
        while (1) {
          _random_poll();
          if (HEAP8[440360]) {
            break L1497;
          }
        }
      }
    } while (0);
    _do_fast_random_poll();
    HEAP32[r7 >> 2] = HEAP32[109824];
    _add_randomness(r3, 4, 0);
    if ((HEAP32[113870] | 0) == 0) {
      _mix_pool(HEAP32[109684]);
      HEAP32[109683] = HEAP32[109683] + 1 | 0;
    }
    r14 = 0;
    r16 = HEAP32[109684];
    r15 = HEAP32[113869];
    while (1) {
      HEAP32[r15 >> 2] = HEAP32[r16 >> 2] - 1515870811 | 0;
      r17 = r14 + 1 | 0;
      if ((r17 | 0) == 150) {
        break;
      } else {
        r14 = r17;
        r16 = r16 + 4 | 0;
        r15 = r15 + 4 | 0;
      }
    }
    _mix_pool(HEAP32[109684]);
    HEAP32[109683] = HEAP32[109683] + 1 | 0;
    _mix_pool(HEAP32[113869]);
    HEAP32[109682] = HEAP32[109682] + 1 | 0;
    r15 = r1 - 1 | 0;
    if ((r1 | 0) == 0) {
      r18 = r13;
      r19 = r15;
    } else {
      r16 = r13;
      r14 = r15;
      while (1) {
        r15 = HEAP32[110084];
        HEAP32[110084] = r15 + 1 | 0;
        HEAP8[r16] = HEAP8[HEAP32[113869] + r15 | 0];
        if (HEAP32[110084] >>> 0 > 599) {
          HEAP32[110084] = 0;
        }
        HEAP32[110091] = HEAP32[110091] - 1 | 0;
        if ((r14 | 0) == 0) {
          break;
        } else {
          r16 = r16 + 1 | 0;
          r14 = r14 - 1 | 0;
        }
      }
      r18 = r13 + r1 | 0;
      r19 = -1;
    }
    if ((HEAP32[110091] | 0) < 0) {
      HEAP32[110091] = 0;
    }
    _memset(HEAP32[113869], 0, 600);
    if ((_getgid() | 0) == (r2 | 0)) {
      r4 = 1196;
      break;
    }
    HEAP32[r8 >> 2] = _getgid();
    _add_randomness(r11, 4, 0);
    HEAP32[113870] = 0;
    HEAP32[109824] = HEAP32[r8 >> 2];
    r13 = r18;
    r1 = r19;
  }
  if (r4 == 1164) {
    __gcry_assert_failed(490784, 476876, 953, 494476);
  } else if (r4 == 1196) {
    STACKTOP = r5;
    return;
  } else if (r4 == 1179) {
    __gcry_bug(476876, 995, 494476);
  } else if (r4 == 1166) {
    __gcry_log_bug(489892, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  } else if (r4 == 1172) {
    __gcry_bug(476876, 979, 494476);
  }
}
function __gcry_rngcsprng_set_seed_file(r1) {
  if ((HEAP32[104228] | 0) == 0) {
    HEAP32[104228] = __gcry_xstrdup(r1);
    return;
  } else {
    __gcry_bug(476876, 673, 495576);
  }
}
function _mix_pool(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  r3 = r2;
  r4 = r1 + 600 | 0;
  if (!HEAP8[440352]) {
    __gcry_assert_failed(490784, 476876, 615, 494620);
  }
  __gcry_rmd160_init(r3);
  _memcpy(r4, r1 + 580 | 0, 20);
  r5 = r1 + 620 | 0;
  _memcpy(r5, r1, 44);
  __gcry_rmd160_mixblock(r3, r4);
  _memcpy(r1, r4, 20);
  L1533 : do {
    if (HEAP8[447184] & (HEAP32[109684] | 0) == (r1 | 0)) {
      r6 = 0;
      while (1) {
        r7 = r1 + r6 | 0;
        HEAP8[r7] = HEAP8[r7] ^ HEAP8[r6 + 447188 | 0];
        r7 = r6 + 1 | 0;
        if ((r7 | 0) == 20) {
          r8 = r1;
          r9 = 1;
          break L1533;
        } else {
          r6 = r7;
        }
      }
    } else {
      r8 = r1;
      r9 = 1;
    }
  } while (0);
  while (1) {
    _memcpy(r4, r8, 20);
    r6 = r8 + 20 | 0;
    r7 = r8 + 40 | 0;
    L1538 : do {
      if ((r8 + 104 | 0) >>> 0 < r4 >>> 0) {
        _memcpy(r5, r7, 44);
      } else {
        r10 = 20;
        r11 = r7;
        while (1) {
          r12 = r11 >>> 0 < r4 >>> 0 ? r11 : r1;
          HEAP8[r10 + (r1 + 600) | 0] = HEAP8[r12];
          r13 = r10 + 1 | 0;
          if ((r13 | 0) == 64) {
            break L1538;
          } else {
            r10 = r13;
            r11 = r12 + 1 | 0;
          }
        }
      }
    } while (0);
    __gcry_rmd160_mixblock(r3, r4);
    _memcpy(r6, r4, 20);
    r7 = r9 + 1 | 0;
    if ((r7 | 0) == 30) {
      break;
    } else {
      r8 = r6;
      r9 = r7;
    }
  }
  if ((HEAP32[109684] | 0) != (r1 | 0)) {
    __gcry_burn_stack(384);
    STACKTOP = r2;
    return;
  }
  __gcry_rmd160_hash_buffer(447188, r1, 600);
  HEAP8[447184] = 1;
  __gcry_burn_stack(384);
  STACKTOP = r2;
  return;
}
function _do_fast_random_poll() {
  var r1, r2, r3, r4, r5;
  r1 = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  r2 = r1;
  r3 = r1 + 8;
  r4 = r1 + 80;
  r5 = r1 + 84;
  if (!HEAP8[440352]) {
    __gcry_assert_failed(490784, 476876, 1180, 495268);
  }
  HEAP32[109680] = HEAP32[109680] + 1 | 0;
  if ((_gettimeofday(r2, 0) | 0) == 0) {
    _add_randomness(r2, 4, 2);
    _add_randomness(r2 + 4 | 0, 4, 2);
    _getrusage(0, r3);
    r2 = r3;
    _add_randomness(r2, 72, 2);
    _memset(r2, 0, 72);
    HEAP32[r4 >> 2] = _time(0);
    _add_randomness(r4, 4, 2);
    HEAP32[r5 >> 2] = _clock();
    _add_randomness(r5, 4, 2);
    STACKTOP = r1;
    return;
  } else {
    __gcry_bug(476876, 1198, 495268);
  }
}
function __gcry_rngcsprng_create_nonce(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  _initialize();
  r4 = __gcry_ath_mutex_lock(440896);
  if ((r4 | 0) != 0) {
    r5 = _strerror(r4);
    __gcry_log_fatal(467680, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  }
  r5 = _getgid();
  do {
    if (HEAP8[491620]) {
      if ((HEAP32[122913] | 0) == (r5 | 0)) {
        break;
      }
      __gcry_randomize(491644, 8, 0);
      HEAP32[122913] = r5;
    } else {
      r4 = _time(0);
      HEAP32[122913] = r5;
      HEAP32[122906] = r5;
      HEAP32[122907] = r4;
      __gcry_randomize(491644, 8, 0);
      HEAP8[491620] = 1;
    }
  } while (0);
  L1564 : do {
    if ((r2 | 0) != 0) {
      r5 = r1;
      r4 = r2;
      while (1) {
        __gcry_sha1_hash_buffer(491624, 491624, 28);
        r6 = r4 >>> 0 > 20 ? 20 : r4;
        _memcpy(r5, 491624, r6);
        if ((r4 | 0) == (r6 | 0)) {
          break L1564;
        } else {
          r5 = r5 + r6 | 0;
          r4 = r4 - r6 | 0;
        }
      }
    }
  } while (0);
  r2 = __gcry_ath_mutex_unlock(440896);
  if ((r2 | 0) == 0) {
    STACKTOP = r3;
    return;
  } else {
    r3 = _strerror(r2);
    __gcry_log_fatal(465600, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
  }
}
function _read_seed_file() {
  var r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r1 = 0;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 684 | 0;
  r3 = r2;
  r4 = r2 + 72;
  r5 = r2 + 672;
  r6 = r2 + 676;
  r7 = r2 + 680;
  if (!HEAP8[440352]) {
    __gcry_assert_failed(490784, 476876, 743, 494460);
  }
  r8 = HEAP32[104228];
  if ((r8 | 0) == 0) {
    r9 = 0;
    STACKTOP = r2;
    return r9;
  }
  r10 = _open(r8, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  if ((r10 | 0) == -1) {
    if ((HEAP32[___errno_location() >> 2] | 0) == 2) {
      HEAP8[464812] = 1;
      r9 = 0;
      STACKTOP = r2;
      return r9;
    } else {
      r8 = __gcry_gettext(486540);
      r11 = HEAP32[104228];
      r12 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_info(r8, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r11, HEAP32[tempInt + 4 >> 2] = r12, tempInt));
      r9 = 0;
      STACKTOP = r2;
      return r9;
    }
  }
  if ((_lock_seed_file(r10, HEAP32[104228], 0) | 0) != 0) {
    _close(r10);
    r9 = 0;
    STACKTOP = r2;
    return r9;
  }
  if ((_fstat(r10, r3) | 0) != 0) {
    r12 = __gcry_gettext(485744);
    r11 = HEAP32[104228];
    r8 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_info(r12, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r11, HEAP32[tempInt + 4 >> 2] = r8, tempInt));
    _close(r10);
    r9 = 0;
    STACKTOP = r2;
    return r9;
  }
  if ((HEAP32[r3 + 8 >> 2] & 61440 | 0) != 32768) {
    __gcry_log_info(__gcry_gettext(484848), (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[104228], tempInt));
    _close(r10);
    r9 = 0;
    STACKTOP = r2;
    return r9;
  }
  r8 = HEAP32[r3 + 28 >> 2];
  if ((r8 | 0) == 0) {
    __gcry_log_info(__gcry_gettext(484048), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    _close(r10);
    HEAP8[464812] = 1;
    r9 = 0;
    STACKTOP = r2;
    return r9;
  } else if ((r8 | 0) == 600) {
    r8 = r4 | 0;
    while (1) {
      r4 = _read(r10, r8, 600);
      if ((r4 | 0) == 600) {
        r1 = 1249;
        break;
      } else if ((r4 | 0) != -1) {
        r1 = 1260;
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) != 4) {
        r1 = 1261;
        break;
      }
    }
    if (r1 == 1260) {
      r4 = __gcry_gettext(482464);
      r3 = HEAP32[104228];
      r11 = ___errno_location();
      r12 = HEAP32[r11 >> 2];
      r13 = _strerror(r12);
      __gcry_log_fatal(r4, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r13, tempInt));
    } else if (r1 == 1261) {
      r4 = __gcry_gettext(482464);
      r3 = HEAP32[104228];
      r11 = ___errno_location();
      r12 = HEAP32[r11 >> 2];
      r13 = _strerror(r12);
      __gcry_log_fatal(r4, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r13, tempInt));
    } else if (r1 == 1249) {
      _close(r10);
      _add_randomness(r8, 600, 0);
      HEAP32[r5 >> 2] = _getgid();
      _add_randomness(r5, 4, 0);
      HEAP32[r6 >> 2] = _time(0);
      _add_randomness(r6, 4, 0);
      HEAP32[r7 >> 2] = _clock();
      _add_randomness(r7, 4, 0);
      _read_random_source(0, 16, 0);
      HEAP8[464812] = 1;
      r9 = 1;
      STACKTOP = r2;
      return r9;
    }
  } else {
    __gcry_log_info(__gcry_gettext(483148), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    _close(r10);
    r9 = 0;
    STACKTOP = r2;
    return r9;
  }
}
function _read_random_source(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = HEAP32[103227];
  if ((r5 | 0) == 0) {
    __gcry_log_fatal(488172, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((FUNCTION_TABLE[r5](194, r1, r2, r3) | 0) < 0) {
    __gcry_log_fatal(487488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  } else {
    STACKTOP = r4;
    return;
  }
}
function _getfnc_gather_random() {
  var r1;
  r1 = STACKTOP;
  do {
    if ((_access(479096, 4) | 0) == 0) {
      if ((_access(478744, 4) | 0) != 0) {
        break;
      }
      STACKTOP = r1;
      return;
    }
  } while (0);
  __gcry_log_fatal(__gcry_gettext(478408), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
function __gcry_rngfips_dump_stats() {
  return;
}
function __gcry_rngfips_is_faked() {
  return 0;
}
function __gcry_rngfips_add_bytes(r1, r2, r3) {
  return 0;
}
function _gpg_err_code2012(r1) {
  return r1 & 65535;
}
function _gpg_err_make2013(r1) {
  var r2;
  if ((r1 | 0) == 0) {
    r2 = 0;
  } else {
    r2 = r1 & 65535 | 16777216;
  }
  return r2;
}
function _setup_guards(r1) {
  HEAP8[r1 | 0] = 17;
  HEAP8[r1 + 16 | 0] = 42;
  HEAP8[r1 + 33 | 0] = -119;
  HEAP8[r1 + 50 | 0] = -4;
  return;
}
function __gcry_rngfips_randomize(r1, r2, r3) {
  __gcry_rngfips_initialize(1);
  _lock_rng();
  if ((r3 | 0) == 2) {
    _get_random(r1, r2, HEAP32[102890]);
    _unlock_rng();
    return;
  } else {
    _get_random(r1, r2, HEAP32[102891]);
    _unlock_rng();
    return;
  }
}
function __gcry_rngfips_create_nonce(r1, r2) {
  __gcry_rngfips_initialize(1);
  _lock_rng();
  _get_random(r1, r2, HEAP32[110223]);
  _unlock_rng();
  return;
}
function __gcry_rngfips_selftest(r1) {
  var r2, r3;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  __gcry_randomize(r2 | 0, 8, 1);
  r3 = _gpg_error2004(_selftest_kat(r1));
  STACKTOP = r2;
  return r3;
}
function _gpg_error2004(r1) {
  return _gpg_err_make2013(r1);
}
function __gcry_rngfips_init_external_test(r1, r2, r3, r4, r5, r6, r7, r8) {
  var r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r9 = 0;
  __gcry_rngfips_initialize(1);
  if (!((r3 | 0) != 0 & (r1 | 0) != 0 & (r4 | 0) == 16 & (r5 | 0) != 0 & (r6 | 0) == 16 & (r7 | 0) != 0 & (r8 | 0) == 16)) {
    r10 = 45;
    return r10;
  }
  r11 = __gcry_calloc(1, r8 + 68 | 0), r12 = r11 >> 2;
  r13 = r11;
  if ((r11 | 0) == 0) {
    r10 = _gpg_err_code_from_syserror();
    return r10;
  }
  _setup_guards(r13);
  r14 = r11 + 4 | 0;
  r15 = __gcry_cipher_open(r14, 7, 1, 1);
  do {
    if ((r15 | 0) == 0) {
      r16 = __gcry_cipher_setkey(HEAP32[r14 >> 2], r3, r4);
      if ((r16 | 0) != 0) {
        r17 = r16;
        r9 = 1296;
        break;
      }
      HEAP32[r12 + 15] = _getgid();
      _memcpy(r11 + 17 | 0, r5, r6);
      r16 = r11 + 8 | 0;
      HEAP32[r16 >> 2] = HEAP32[r16 >> 2] | 1;
      HEAP32[r12 + 16] = _getgid();
      r16 = r11 + 68 | 0;
      _memcpy(r16, r7, r8);
      HEAP32[r12 + 13] = r16;
      HEAP32[r12 + 14] = HEAPU8[r11 + 81 | 0] << 16 | HEAPU8[r11 + 80 | 0] << 24 | HEAPU8[r11 + 82 | 0] << 8 | HEAPU8[r11 + 83 | 0];
      if ((r2 & 1 | 0) != 0) {
        HEAP8[r11 + 51 | 0] = 1;
      }
      _check_guards(r13);
      r18 = r11;
      r19 = 0;
      break;
    } else {
      r17 = r15;
      r9 = 1296;
    }
  } while (0);
  if (r9 == 1296) {
    __gcry_cipher_close(HEAP32[r14 >> 2]);
    __gcry_free(r11);
    r18 = 0;
    r19 = r17;
  }
  HEAP32[r1 >> 2] = r18;
  r10 = _gcry_err_code2007(r19);
  return r10;
}
function _gcry_err_code2007(r1) {
  return _gpg_err_code2012(r1);
}
function __gcry_rngfips_run_external_test(r1, r2, r3) {
  var r4;
  if (!((r2 | 0) != 0 & (r1 | 0) != 0 & (r3 | 0) == 16)) {
    r4 = 45;
    return r4;
  }
  _lock_rng();
  _get_random(r2, r3, r1);
  _unlock_rng();
  r4 = 0;
  return r4;
}
function __gcry_rngfips_deinit_external_test(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  __gcry_cipher_close(HEAP32[r1 + 4 >> 2]);
  __gcry_free(r1);
  return;
}
function __gcry_rngfips_initialize(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  _lock_rng();
  do {
    if ((HEAP32[102888] | 0) == 0) {
      HEAP32[102888] = __gcry_xmalloc_secure(48);
      r1 = __gcry_xcalloc(1, 68);
      HEAP32[110223] = r1;
      _setup_guards(r1);
      r1 = __gcry_xcalloc_secure(1, 68);
      HEAP32[102891] = r1;
      _setup_guards(r1);
      r1 = __gcry_xcalloc_secure(1, 68);
      HEAP32[102890] = r1;
      _setup_guards(r1);
    } else {
      r1 = HEAP32[110223];
      if ((HEAP32[r1 + 52 >> 2] | 0) != 0) {
        __gcry_assert_failed(482288, 488548, 772, 495548);
      }
      if ((HEAP32[HEAP32[102891] + 52 >> 2] | 0) != 0) {
        __gcry_assert_failed(480492, 488548, 773, 495548);
      }
      if ((HEAP32[HEAP32[102890] + 52 >> 2] | 0) == 0) {
        _check_guards(r1);
        _check_guards(HEAP32[102891]);
        _check_guards(HEAP32[102890]);
        break;
      } else {
        __gcry_assert_failed(476736, 488548, 774, 495548);
      }
    }
  } while (0);
  _unlock_rng();
  return;
}
function _lock_rng() {
  var r1, r2;
  r1 = STACKTOP;
  r2 = __gcry_ath_mutex_lock(455724);
  if ((r2 | 0) == 0) {
    HEAP8[455728] = 1;
    STACKTOP = r1;
    return;
  } else {
    r1 = _strerror(r2);
    __gcry_log_fatal(477572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
}
function _check_guards(r1) {
  var r2;
  r2 = STACKTOP;
  do {
    if (HEAP8[r1 | 0] << 24 >> 24 == 17) {
      if (HEAP8[r1 + 16 | 0] << 24 >> 24 != 42) {
        break;
      }
      if (HEAP8[r1 + 33 | 0] << 24 >> 24 != -119) {
        break;
      }
      if (HEAP8[r1 + 50 | 0] << 24 >> 24 != -4) {
        break;
      }
      STACKTOP = r2;
      return;
    }
  } while (0);
  __gcry_log_fatal(477740, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
}
function _unlock_rng() {
  var r1, r2;
  r1 = STACKTOP;
  HEAP8[455728] = 0;
  r2 = __gcry_ath_mutex_unlock(455724);
  if ((r2 | 0) == 0) {
    STACKTOP = r1;
    return;
  } else {
    r1 = _strerror(r2);
    __gcry_log_fatal(478072, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  }
}
function _get_random(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = 0;
  r5 = STACKTOP;
  if ((r1 | 0) == 0) {
    __gcry_assert_failed(480236, 488548, 690, 494728);
  }
  if ((r3 | 0) == 0) {
    __gcry_assert_failed(479980, 488548, 691, 494728);
  }
  _check_guards(r3);
  r6 = r3 + 4 | 0;
  do {
    if ((HEAP32[r6 >> 2] | 0) == 0) {
      if ((HEAP32[110223] | 0) == (r3 | 0)) {
        r7 = _x931_generate_key(1);
      } else {
        r7 = _x931_generate_key(0);
      }
      HEAP32[r6 >> 2] = r7;
      if ((r7 | 0) == 0) {
        break;
      }
      HEAP32[r3 + 60 >> 2] = _getgid();
      r4 = 1349;
      break;
    } else {
      r4 = 1349;
    }
  } while (0);
  L1718 : do {
    if (r4 == 1349) {
      if ((HEAP32[r3 + 8 >> 2] & 1 | 0) == 0) {
        _x931_reseed(r3);
      }
      do {
        if ((HEAP32[r3 + 60 >> 2] | 0) == (_getgid() | 0)) {
          if ((HEAP32[r3 + 64 >> 2] | 0) != (_getgid() | 0)) {
            break;
          }
          if ((_x931_aes_driver(r1, r2, r3) | 0) != 0) {
            break L1718;
          }
          _check_guards(r3);
          STACKTOP = r5;
          return;
        }
      } while (0);
      __gcry_fips_signal_error(488548, 719, 494728, 0, 479592);
    }
  } while (0);
  __gcry_log_fatal(479064, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
function _selftest_kat(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  if ((HEAP32[102888] | 0) == 0) {
    __gcry_assert_failed(474052, 488548, 904, 494444);
  }
  r3 = __gcry_xcalloc(1, 68);
  r4 = r3;
  _setup_guards(r4);
  _lock_rng();
  r5 = r3 + 4 | 0, r6 = r5 >> 2;
  r7 = r3 + 60 | 0;
  r8 = r3 + 17 | 0;
  r9 = (r3 + 8 | 0) >> 2;
  r10 = r3 + 64 | 0;
  r11 = r3 + 52 | 0;
  r12 = r3 + 56 | 0;
  r13 = r2 | 0;
  r14 = 0;
  L1733 : while (1) {
    if ((__gcry_cipher_open(r5, 7, 1, 1) | 0) != 0) {
      r15 = 472172;
      break;
    }
    if ((__gcry_cipher_setkey(HEAP32[r6], (r14 * 96 & -1) + 415928 | 0, 16) | 0) != 0) {
      r15 = 470720;
      break;
    }
    HEAP32[r7 >> 2] = _getgid();
    _memcpy(r8, (r14 * 96 & -1) + 415960 | 0, 16);
    HEAP32[r9] = HEAP32[r9] | 1;
    HEAP32[r10 >> 2] = _getgid();
    HEAP32[r11 >> 2] = (r14 * 96 & -1) + 415944 | 0;
    HEAP32[r12 >> 2] = HEAPU8[(r14 * 96 & -1) + 415957 | 0] << 16 | HEAPU8[(r14 * 96 & -1) + 415956 | 0] << 24 | HEAPU8[(r14 * 96 & -1) + 415958 | 0] << 8 | HEAPU8[(r14 * 96 & -1) + 415959 | 0];
    r16 = 0;
    while (1) {
      if ((r16 | 0) >= 3) {
        break;
      }
      if ((_x931_aes_driver(r13, 16, r4) | 0) != 0) {
        r15 = 469252;
        break L1733;
      }
      if ((_memcmp(r13, (r16 << 4) + (r14 * 96 & -1) + 415976 | 0, 16) | 0) == 0) {
        r16 = r16 + 1 | 0;
      } else {
        r15 = 467640;
        break L1733;
      }
    }
    if ((HEAP32[r7 >> 2] | 0) != (_getgid() | 0)) {
      r15 = 465576;
      break;
    }
    if ((HEAP32[r10 >> 2] | 0) != (_getgid() | 0)) {
      r15 = 465576;
      break;
    }
    __gcry_cipher_close(HEAP32[r6]);
    HEAP32[r6] = 0;
    HEAP32[r9] = HEAP32[r9] & -2;
    _check_guards(r4);
    r16 = r14 + 1 | 0;
    if (r16 >>> 0 < 3) {
      r14 = r16;
    } else {
      r15 = 0;
      break;
    }
  }
  _unlock_rng();
  __gcry_cipher_close(HEAP32[r3 + 4 >> 2]);
  _check_guards(r4);
  __gcry_free(r3);
  if ((r1 | 0) == 0 | (r15 | 0) == 0) {
    r17 = (r15 | 0) != 0;
    r18 = r17 ? 50 : 0;
    STACKTOP = r2;
    return r18;
  }
  FUNCTION_TABLE[r1](490776, 0, 489888, r15);
  r17 = (r15 | 0) != 0;
  r18 = r17 ? 50 : 0;
  STACKTOP = r2;
  return r18;
}
function _x931_aes_driver(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
  r4 = 0;
  r5 = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  if (!HEAP8[455728]) {
    __gcry_assert_failed(488152, 488548, 449, 494372);
  }
  r6 = r3 + 4 | 0;
  if ((HEAP32[r6 >> 2] | 0) == 0) {
    __gcry_assert_failed(487468, 488548, 450, 494372);
  }
  r7 = (r3 + 8 | 0) >> 2;
  if ((HEAP32[r7] & 1 | 0) == 0) {
    __gcry_assert_failed(486520, 488548, 451, 494372);
  }
  r8 = HEAP32[102888];
  if ((r8 | 0) == 0) {
    __gcry_assert_failed(474052, 488548, 453, 494372);
  }
  r9 = r8 + 16 | 0;
  r10 = r8 + 32 | 0;
  if ((r2 | 0) == 0) {
    r11 = 0;
    STACKTOP = r5;
    return r11;
  }
  r12 = r3 + 52 | 0;
  r13 = r3 + 12 | 0;
  r14 = r5 | 0;
  r15 = r3 + 17 | 0;
  r16 = r3 + 12 | 0;
  r17 = r3 + 51 | 0;
  r18 = r3 + 34 | 0;
  r19 = r2;
  r2 = r1;
  while (1) {
    r1 = r19 >>> 0 < 16 ? r19 : 16;
    while (1) {
      do {
        if ((HEAP32[r12 >> 2] | 0) == 0) {
          if (HEAP32[r13 >> 2] >>> 0 <= 1e3) {
            break;
          }
          _x931_reseed(r3);
          HEAP32[r13 >> 2] = 0;
        }
      } while (0);
      _x931_get_dt(r14, r3);
      _x931_aes(r10, r14, r15, HEAP32[r6 >> 2], r8, r9);
      HEAP32[r16 >> 2] = HEAP32[r16 >> 2] + 1 | 0;
      if (HEAP8[r17] << 24 >> 24 != 0) {
        if (!((HEAP32[r12 >> 2] | 0) == 0 | (HEAP32[110223] | 0) == (r3 | 0) | (HEAP32[102891] | 0) == (r3 | 0) | (HEAP32[102890] | 0) == (r3 | 0))) {
          break;
        }
      }
      if ((HEAP32[r7] & 2 | 0) != 0) {
        r4 = 1392;
        break;
      }
      _memcpy(r18, r10, 16);
      HEAP32[r7] = HEAP32[r7] | 2;
    }
    if (r4 == 1392) {
      r4 = 0;
      if ((_memcmp(r18, r10, 16) | 0) == 0) {
        break;
      }
      _memcpy(r18, r10, 16);
    }
    _memcpy(r2, r10, r1);
    HEAP8[r10] = 0;
    HEAP8[r8 + 33 | 0] = 0;
    HEAP8[r8 + 34 | 0] = 0;
    HEAP8[r8 + 35 | 0] = 0;
    HEAP8[r8 + 36 | 0] = 0;
    HEAP8[r8 + 37 | 0] = 0;
    HEAP8[r8 + 38 | 0] = 0;
    HEAP8[r8 + 39 | 0] = 0;
    HEAP8[r8 + 40 | 0] = 0;
    HEAP8[r8 + 41 | 0] = 0;
    HEAP8[r8 + 42 | 0] = 0;
    HEAP8[r8 + 43 | 0] = 0;
    HEAP8[r8 + 44 | 0] = 0;
    HEAP8[r8 + 45 | 0] = 0;
    HEAP8[r8 + 46 | 0] = 0;
    HEAP8[r8 + 47 | 0] = 0;
    if ((r19 | 0) == (r1 | 0)) {
      r11 = 0;
      r4 = 1399;
      break;
    } else {
      r19 = r19 - r1 | 0;
      r2 = r2 + r1 | 0;
    }
  }
  if (r4 == 1399) {
    STACKTOP = r5;
    return r11;
  }
  __gcry_fips_signal_error(488548, 507, 494372, 0, 485704);
  r11 = -1;
  STACKTOP = r5;
  return r11;
}
function _x931_reseed(r1) {
  var r2, r3;
  if (!HEAP8[455728]) {
    __gcry_assert_failed(488152, 488548, 663, 494308);
  }
  r2 = r1 + 17 | 0;
  if ((HEAP32[110223] | 0) == (r1 | 0)) {
    _get_random(r2, 16, HEAP32[102891]);
    r3 = r1 + 8 | 0;
    HEAP32[r3 >> 2] = HEAP32[r3 >> 2] | 1;
    HEAP32[r1 + 64 >> 2] = _getgid();
    return;
  } else {
    _x931_generate_seed(r2);
    r2 = r1 + 8 | 0;
    HEAP32[r2 >> 2] = HEAP32[r2 >> 2] | 1;
    HEAP32[r1 + 64 >> 2] = _getgid();
    return;
  }
}
function __gcry_rndhw_poll_fast(r1, r2) {
  return;
}
function __gcry_rndhw_poll_slow(r1, r2) {
  return 0;
}
function __gcry_rndhw_failed_p() {
  return HEAP32[109673];
}
function _xor_buffer(r1, r2, r3) {
  HEAP8[r1] = HEAP8[r3] ^ HEAP8[r2];
  HEAP8[r1 + 1 | 0] = HEAP8[r3 + 1 | 0] ^ HEAP8[r2 + 1 | 0];
  HEAP8[r1 + 2 | 0] = HEAP8[r3 + 2 | 0] ^ HEAP8[r2 + 2 | 0];
  HEAP8[r1 + 3 | 0] = HEAP8[r3 + 3 | 0] ^ HEAP8[r2 + 3 | 0];
  HEAP8[r1 + 4 | 0] = HEAP8[r3 + 4 | 0] ^ HEAP8[r2 + 4 | 0];
  HEAP8[r1 + 5 | 0] = HEAP8[r3 + 5 | 0] ^ HEAP8[r2 + 5 | 0];
  HEAP8[r1 + 6 | 0] = HEAP8[r3 + 6 | 0] ^ HEAP8[r2 + 6 | 0];
  HEAP8[r1 + 7 | 0] = HEAP8[r3 + 7 | 0] ^ HEAP8[r2 + 7 | 0];
  HEAP8[r1 + 8 | 0] = HEAP8[r3 + 8 | 0] ^ HEAP8[r2 + 8 | 0];
  HEAP8[r1 + 9 | 0] = HEAP8[r3 + 9 | 0] ^ HEAP8[r2 + 9 | 0];
  HEAP8[r1 + 10 | 0] = HEAP8[r3 + 10 | 0] ^ HEAP8[r2 + 10 | 0];
  HEAP8[r1 + 11 | 0] = HEAP8[r3 + 11 | 0] ^ HEAP8[r2 + 11 | 0];
  HEAP8[r1 + 12 | 0] = HEAP8[r3 + 12 | 0] ^ HEAP8[r2 + 12 | 0];
  HEAP8[r1 + 13 | 0] = HEAP8[r3 + 13 | 0] ^ HEAP8[r2 + 13 | 0];
  HEAP8[r1 + 14 | 0] = HEAP8[r3 + 14 | 0] ^ HEAP8[r2 + 14 | 0];
  HEAP8[r1 + 15 | 0] = HEAP8[r3 + 15 | 0] ^ HEAP8[r2 + 15 | 0];
  return;
}
function _x931_aes(r1, r2, r3, r4, r5, r6) {
  _encrypt_aes(r4, r5, r2);
  _xor_buffer(r6, r5, r3);
  _encrypt_aes(r4, r1, r6);
  _xor_buffer(r6, r1, r5);
  _encrypt_aes(r4, r3, r6);
  HEAP8[r5] = 0;
  HEAP8[r5 + 1 | 0] = 0;
  HEAP8[r5 + 2 | 0] = 0;
  HEAP8[r5 + 3 | 0] = 0;
  HEAP8[r5 + 4 | 0] = 0;
  HEAP8[r5 + 5 | 0] = 0;
  HEAP8[r5 + 6 | 0] = 0;
  HEAP8[r5 + 7 | 0] = 0;
  HEAP8[r5 + 8 | 0] = 0;
  HEAP8[r5 + 9 | 0] = 0;
  HEAP8[r5 + 10 | 0] = 0;
  HEAP8[r5 + 11 | 0] = 0;
  HEAP8[r5 + 12 | 0] = 0;
  HEAP8[r5 + 13 | 0] = 0;
  HEAP8[r5 + 14 | 0] = 0;
  HEAP8[r5 + 15 | 0] = 0;
  HEAP8[r6] = 0;
  HEAP8[r6 + 1 | 0] = 0;
  HEAP8[r6 + 2 | 0] = 0;
  HEAP8[r6 + 3 | 0] = 0;
  HEAP8[r6 + 4 | 0] = 0;
  HEAP8[r6 + 5 | 0] = 0;
  HEAP8[r6 + 6 | 0] = 0;
  HEAP8[r6 + 7 | 0] = 0;
  HEAP8[r6 + 8 | 0] = 0;
  HEAP8[r6 + 9 | 0] = 0;
  HEAP8[r6 + 10 | 0] = 0;
  HEAP8[r6 + 11 | 0] = 0;
  HEAP8[r6 + 12 | 0] = 0;
  HEAP8[r6 + 13 | 0] = 0;
  HEAP8[r6 + 14 | 0] = 0;
  HEAP8[r6 + 15 | 0] = 0;
  return;
}
function _set_cloexec_flag(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  r3 = _fcntl(r1, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt));
  if ((r3 | 0) < 0) {
    r4 = r3;
    STACKTOP = r2;
    return r4;
  }
  r4 = _fcntl(r1, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3 | 1, tempInt));
  STACKTOP = r2;
  return r4;
}
function __gcry_hmac256_new(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r4 = r3;
  r5 = _malloc(172), r6 = r5 >> 2;
  r7 = r5;
  if ((r5 | 0) == 0) {
    r8 = 0;
    STACKTOP = r3;
    return r8;
  }
  HEAP32[r6] = 1779033703;
  HEAP32[r6 + 1] = -1150833019;
  HEAP32[r6 + 2] = 1013904242;
  HEAP32[r6 + 3] = -1521486534;
  HEAP32[r6 + 4] = 1359893119;
  HEAP32[r6 + 5] = -1694144372;
  HEAP32[r6 + 6] = 528734635;
  HEAP32[r6 + 7] = 1541459225;
  HEAP32[r6 + 8] = 0;
  HEAP32[r6 + 9] = 0;
  r6 = (r5 + 40 | 0) >> 2;
  HEAP32[r6] = HEAP32[r6] & -4;
  if ((r1 | 0) == 0) {
    r8 = r7;
    STACKTOP = r3;
    return r8;
  }
  r9 = r4 | 0;
  _memset(r9, 0, 64);
  r10 = r5 + 105 | 0;
  _memset(r10, 0, 64);
  do {
    if (r2 >>> 0 < 65) {
      _memcpy(r9, r1, r2);
      _memcpy(r10, r1, r2);
      r11 = 0;
      break;
    } else {
      r12 = __gcry_hmac256_new(0, 0);
      if ((r12 | 0) != 0) {
        __gcry_hmac256_update(r12, r1, r2);
        _finalize(r12);
        r13 = r12 + 41 | 0;
        _memcpy(r9, r13, 32);
        _memcpy(r10, r13, 32);
        __gcry_hmac256_release(r12);
        r11 = 0;
        break;
      }
      _free(r5);
      r8 = 0;
      STACKTOP = r3;
      return r8;
    }
  } while (0);
  while (1) {
    r10 = r4 + r11 | 0;
    HEAP8[r10] = HEAP8[r10] ^ 54;
    r10 = r11 + (r5 + 105) | 0;
    HEAP8[r10] = HEAP8[r10] ^ 92;
    r10 = r11 + 1 | 0;
    if ((r10 | 0) == 64) {
      break;
    } else {
      r11 = r10;
    }
  }
  HEAP32[r6] = HEAP32[r6] | 2;
  __gcry_hmac256_update(r7, r9, 64);
  r6 = r9;
  r9 = 64;
  while (1) {
    HEAP8[r6] = 0;
    r11 = r9 - 1 | 0;
    if ((r11 | 0) == 0) {
      r8 = r7;
      break;
    } else {
      r6 = r6 + 1 | 0;
      r9 = r11;
    }
  }
  STACKTOP = r3;
  return r8;
}
function _x931_get_dt(r1, r2) {
  var r3, r4, r5, r6;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  r4 = r3;
  if (!HEAP8[455728]) {
    __gcry_assert_failed(488152, 488548, 279, 494320);
  }
  r5 = HEAP32[r2 + 52 >> 2];
  if (!((r5 | 0) == 0 | (HEAP32[110223] | 0) == (r2 | 0) | (HEAP32[102891] | 0) == (r2 | 0) | (HEAP32[102890] | 0) == (r2 | 0))) {
    _memcpy(r1, r5, 16);
    r5 = (r2 + 56 | 0) >> 2;
    HEAP8[r1 + 12 | 0] = HEAP32[r5] >>> 24 & 255;
    HEAP8[r1 + 13 | 0] = HEAP32[r5] >>> 16 & 255;
    HEAP8[r1 + 14 | 0] = HEAP32[r5] >>> 8 & 255;
    HEAP8[r1 + 15 | 0] = HEAP32[r5] & 255;
    HEAP32[r5] = HEAP32[r5] + 1 | 0;
    STACKTOP = r3;
    return;
  }
  if ((HEAP32[102401] | 0) == 0) {
    HEAP32[102403] = _getgid();
    HEAP32[102404] = _getgid();
  }
  if ((_gettimeofday(r4, 0) | 0) != 0) {
    r5 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_fatal(483120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  }
  r5 = HEAP32[r4 + 4 >> 2];
  r2 = r5 << 4;
  r6 = (r4 | 0) >> 2;
  if ((HEAP32[r6] | 0) == (HEAP32[102401] | 0) & (r2 | 0) == (HEAP32[102400] | 0)) {
    HEAP16[204804] = HEAP16[204804] + 1 & 4095;
  } else {
    HEAP16[204804] = 0;
    HEAP32[102401] = HEAP32[r6];
    HEAP32[102400] = r2;
  }
  HEAP8[r1] = HEAP32[r6] >>> 24 & 255;
  HEAP8[r1 + 1 | 0] = HEAP32[r6] >>> 16 & 255;
  HEAP8[r1 + 2 | 0] = HEAP32[r6] >>> 8 & 255;
  HEAP8[r1 + 3 | 0] = HEAP32[r6] & 255;
  HEAP8[r1 + 4 | 0] = r5 >>> 12 & 255;
  HEAP8[r1 + 5 | 0] = r5 >>> 4 & 255;
  HEAP8[r1 + 6 | 0] = (HEAPU16[204804] >>> 8 & 15 | r2) & 255;
  HEAP8[r1 + 7 | 0] = HEAP16[204804] & 255;
  HEAP8[r1 + 8 | 0] = HEAP32[102403] >>> 24 & 255;
  HEAP8[r1 + 9 | 0] = HEAP32[102403] >>> 16 & 255;
  HEAP8[r1 + 10 | 0] = HEAP32[102403] >>> 8 & 255;
  HEAP8[r1 + 11 | 0] = HEAP32[102403] & 255;
  HEAP8[r1 + 12 | 0] = HEAP32[102404] >>> 24 & 255;
  HEAP8[r1 + 13 | 0] = HEAP32[102404] >>> 16 & 255;
  HEAP8[r1 + 14 | 0] = HEAP32[102404] >>> 8 & 255;
  HEAP8[r1 + 15 | 0] = HEAP32[102404] & 255;
  r1 = HEAP32[102404] + 1 | 0;
  HEAP32[102404] = r1;
  if ((r1 | 0) != 0) {
    STACKTOP = r3;
    return;
  }
  HEAP32[102403] = HEAP32[102403] + 1 | 0;
  STACKTOP = r3;
  return;
}
function _encrypt_aes(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  r5 = __gcry_cipher_encrypt(r1, r2, 16, r3, 16);
  if ((r5 | 0) == 0) {
    STACKTOP = r4;
    return;
  } else {
    r4 = __gcry_strerror(r5);
    __gcry_log_fatal(484012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  }
}
function _x931_generate_seed(r1) {
  var r2;
  if (HEAP8[455728]) {
    r2 = _get_entropy();
    _memcpy(r1, r2, 16);
    HEAP8[r2] = 0;
    HEAP8[r2 + 1 | 0] = 0;
    HEAP8[r2 + 2 | 0] = 0;
    HEAP8[r2 + 3 | 0] = 0;
    HEAP8[r2 + 4 | 0] = 0;
    HEAP8[r2 + 5 | 0] = 0;
    HEAP8[r2 + 6 | 0] = 0;
    HEAP8[r2 + 7 | 0] = 0;
    HEAP8[r2 + 8 | 0] = 0;
    HEAP8[r2 + 9 | 0] = 0;
    HEAP8[r2 + 10 | 0] = 0;
    HEAP8[r2 + 11 | 0] = 0;
    HEAP8[r2 + 12 | 0] = 0;
    HEAP8[r2 + 13 | 0] = 0;
    HEAP8[r2 + 14 | 0] = 0;
    HEAP8[r2 + 15 | 0] = 0;
    __gcry_free(r2);
    return;
  } else {
    __gcry_assert_failed(488152, 488548, 647, 494332);
  }
}
function _get_entropy() {
  var r1, r2;
  r1 = STACKTOP;
  if ((HEAP32[114327] | 0) != 0) {
    __gcry_assert_failed(482440, 488548, 557, 494756);
  }
  HEAP32[114327] = __gcry_xmalloc_secure(16);
  HEAP32[114325] = 16;
  HEAP32[114326] = 0;
  __gcry_rndlinux_gather_random(90, 0, 16, 2);
  r2 = HEAP32[114327];
  if ((HEAP32[114326] | 0) == (HEAP32[114325] | 0)) {
    HEAP32[114327] = 0;
    STACKTOP = r1;
    return r2;
  } else {
    __gcry_free(r2);
    HEAP32[114327] = 0;
    __gcry_log_fatal(481856, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
}
function _entropy_collect_cb(r1, r2, r3) {
  var r4, r5, r6, r7;
  r3 = 0;
  if (!HEAP8[455728]) {
    __gcry_assert_failed(488152, 488548, 536, 495032);
  }
  if ((HEAP32[114327] | 0) == 0) {
    __gcry_assert_failed(481372, 488548, 537, 495032);
  }
  if ((r2 | 0) == 0) {
    return;
  } else {
    r4 = r1;
    r5 = r2;
  }
  while (1) {
    r2 = r5 - 1 | 0;
    r1 = HEAP32[114326];
    if (r1 >>> 0 >= HEAP32[114325] >>> 0) {
      r3 = 1470;
      break;
    }
    r6 = HEAP8[r4];
    HEAP32[114326] = r1 + 1 | 0;
    r7 = HEAP32[114327] + r1 | 0;
    HEAP8[r7] = HEAP8[r7] ^ r6;
    if ((r2 | 0) == 0) {
      r3 = 1471;
      break;
    } else {
      r4 = r4 + 1 | 0;
      r5 = r2;
    }
  }
  if (r3 == 1471) {
    return;
  } else if (r3 == 1470) {
    return;
  }
}
function _x931_generate_key(r1) {
  var r2, r3, r4, r5, r6, r7;
  r2 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r3 = r2, r4 = r3 >> 2;
  if (!HEAP8[455728]) {
    __gcry_assert_failed(488152, 488548, 601, 494352);
  }
  r5 = __gcry_cipher_open(r3, 7, 1, 1);
  if ((r5 | 0) != 0) {
    r3 = __gcry_strerror(r5);
    __gcry_log_error(478700, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
    r6 = 0;
    STACKTOP = r2;
    return r6;
  }
  if ((r1 | 0) == 0) {
    r7 = _get_entropy();
  } else {
    r1 = __gcry_xmalloc(16);
    _get_random(r1, 16, HEAP32[102891]);
    r7 = r1;
  }
  r1 = __gcry_cipher_setkey(HEAP32[r4], r7, 16);
  HEAP8[r7] = 0;
  HEAP8[r7 + 1 | 0] = 0;
  HEAP8[r7 + 2 | 0] = 0;
  HEAP8[r7 + 3 | 0] = 0;
  HEAP8[r7 + 4 | 0] = 0;
  HEAP8[r7 + 5 | 0] = 0;
  HEAP8[r7 + 6 | 0] = 0;
  HEAP8[r7 + 7 | 0] = 0;
  HEAP8[r7 + 8 | 0] = 0;
  HEAP8[r7 + 9 | 0] = 0;
  HEAP8[r7 + 10 | 0] = 0;
  HEAP8[r7 + 11 | 0] = 0;
  HEAP8[r7 + 12 | 0] = 0;
  HEAP8[r7 + 13 | 0] = 0;
  HEAP8[r7 + 14 | 0] = 0;
  HEAP8[r7 + 15 | 0] = 0;
  __gcry_free(r7);
  if ((r1 | 0) == 0) {
    r6 = HEAP32[r4];
    STACKTOP = r2;
    return r6;
  } else {
    r7 = __gcry_strerror(r1);
    __gcry_log_error(478376, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r7, tempInt));
    __gcry_cipher_close(HEAP32[r4]);
    r6 = 0;
    STACKTOP = r2;
    return r6;
  }
}
function __gcry_rndlinux_gather_random(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28;
  r5 = 0;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 784 | 0;
  r7 = r6;
  r8 = r6 + 768;
  r9 = r6 + 776;
  do {
    if ((r4 | 0) > 1) {
      if ((HEAP32[122915] | 0) != -1) {
        r10 = 491660;
        break;
      }
      HEAP32[122915] = _open_device(481940);
      r10 = 491660;
    } else {
      if ((HEAP32[122914] | 0) != -1) {
        r10 = 491656;
        break;
      }
      HEAP32[122914] = _open_device(488508);
      r10 = 491656;
    }
  } while (0);
  r4 = HEAP32[r10 >> 2];
  if ((r3 | 0) == 0) {
    _memset(r7 | 0, 0, 768);
    STACKTOP = r6;
    return 0;
  }
  r10 = 1 << (r4 & 31);
  r11 = (r4 >>> 5 << 2) + r8 | 0;
  r12 = r9 | 0;
  r13 = r9 + 4 | 0;
  r14 = r4 + 1 | 0;
  r15 = r7 | 0;
  r16 = 0;
  r17 = 1;
  r18 = 0;
  r19 = r3;
  L1904 : while (1) {
    r20 = r18;
    r21 = r19;
    while (1) {
      r22 = (r20 | 0) != 0;
      r23 = r22 ? 0 : 1e5;
      r24 = r21;
      while (1) {
        r25 = r8;
        HEAP32[r25 >> 2] = 0;
        HEAP32[r25 + 4 >> 2] = 0;
        HEAP32[r11 >> 2] = HEAP32[r11 >> 2] | r10;
        HEAP32[r12 >> 2] = r20;
        HEAP32[r13 >> 2] = r23;
        r25 = _select(r14, r8, 0, 0, r9);
        if ((r25 | 0) == 0) {
          r5 = 1498;
          break;
        } else if ((r25 | 0) == -1) {
          r5 = 1503;
          break;
        }
        r25 = r24 >>> 0 < 768 ? r24 : 768;
        while (1) {
          r26 = _read(r4, r15, r25);
          if ((r26 | 0) > -1 & (r26 | 0) > (r25 | 0)) {
            __gcry_log_error(473920, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r26, tempInt));
            r27 = r25;
          } else {
            r27 = r26;
          }
          if ((r27 | 0) != -1) {
            break;
          }
          if ((HEAP32[___errno_location() >> 2] | 0) != 4) {
            r5 = 1508;
            break L1904;
          }
        }
        FUNCTION_TABLE[r1](r15, r27, r2);
        if ((r24 | 0) == (r27 | 0)) {
          r5 = 1510;
          break L1904;
        } else {
          r24 = r24 - r27 | 0;
        }
      }
      if (r5 == 1498) {
        r5 = 0;
        if (r17) {
          break;
        }
        if ((r16 | 0) == (r3 - r24 | 0)) {
          r28 = 3;
        } else {
          break;
        }
      } else if (r5 == 1503) {
        r5 = 0;
        r23 = _strerror(HEAP32[___errno_location() >> 2]);
        __gcry_log_error(476696, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r23, tempInt));
        r28 = r22 ? r20 : 1;
      }
      if ((r24 | 0) == 0) {
        r5 = 1510;
        break L1904;
      } else {
        r20 = r28;
        r21 = r24;
      }
    }
    r21 = r3 - r24 | 0;
    __gcry_random_progress(480468, 88, r21, r3);
    if ((r24 | 0) == 0) {
      r5 = 1502;
      break;
    } else {
      r16 = r21;
      r17 = 0;
      r18 = 3;
      r19 = r24;
    }
  }
  do {
    if (r5 == 1510) {
      _memset(r7 | 0, 0, 768);
      if (!r17) {
        break;
      }
      STACKTOP = r6;
      return 0;
    } else if (r5 == 1502) {
      _memset(r7 | 0, 0, 768);
    } else if (r5 == 1508) {
      r24 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_fatal(472132, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r24, tempInt));
    }
  } while (0);
  __gcry_random_progress(480468, 88, r3, r3);
  STACKTOP = r6;
  return 0;
}
function _open_device(r1) {
  var r2, r3, r4;
  r2 = STACKTOP;
  r3 = _open(r1, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  if ((r3 | 0) == -1) {
    r4 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_fatal(470692, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r1, HEAP32[tempInt + 4 >> 2] = r4, tempInt));
  }
  if ((_set_cloexec_flag(r3) | 0) == 0) {
    STACKTOP = r2;
    return r3;
  }
  r4 = _strerror(HEAP32[___errno_location() >> 2]);
  __gcry_log_error(469184, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r3, HEAP32[tempInt + 4 >> 2] = r4, tempInt));
  STACKTOP = r2;
  return r3;
}
function _gpg_err_init() {
  return 0;
}
function _gpg_err_deinit(r1) {
  return;
}
function _gpg_err_code2047(r1) {
  return r1 & 65535;
}
function _msgidxof(r1) {
  var r2;
  if (r1 >>> 0 < 186) {
    r2 = r1;
    return r2;
  }
  if ((r1 - 198 | 0) >>> 0 < 16) {
    r2 = r1 - 12 | 0;
    return r2;
  }
  if ((r1 - 257 | 0) >>> 0 < 15) {
    r2 = r1 - 55 | 0;
    return r2;
  }
  if ((r1 - 273 | 0) >>> 0 < 9) {
    r2 = r1 - 56 | 0;
    return r2;
  }
  if ((r1 - 1024 | 0) >>> 0 >= 16) {
    return (r1 - 16381 | 0) >>> 0 < 3 ? r1 - 16139 | 0 : 245;
  }
  r2 = r1 - 798 | 0;
  return r2;
}
function _gpg_err_code_from_errno(r1) {
  var r2, r3, r4, r5;
  r2 = 0;
  if ((r1 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  do {
    if ((r1 - 1 | 0) >>> 0 < 11) {
      r4 = r1 - 1 | 0;
      r2 = 1552;
      break;
    } else {
      if ((r1 - 11 | 0) >>> 0 < 25) {
        r5 = r1;
        break;
      }
      if ((r1 - 35 | 0) >>> 0 < 6) {
        r4 = r1 + 1 | 0;
        r2 = 1552;
        break;
      }
      if ((r1 - 42 | 0) >>> 0 < 16) {
        r5 = r1;
        break;
      }
      if ((r1 - 59 | 0) >>> 0 < 37) {
        r4 = r1 - 1 | 0;
        r2 = 1552;
        break;
      } else {
        r4 = (r1 - 95 | 0) >>> 0 < 31 ? r1 : -1;
        r2 = 1552;
        break;
      }
    }
  } while (0);
  do {
    if (r2 == 1552) {
      if ((r4 | 0) < 0) {
        r3 = 16382;
      } else {
        r5 = r4;
        break;
      }
      return r3;
    }
  } while (0);
  r3 = HEAP32[(r5 << 2) + 456796 >> 2] | 32768;
  return r3;
}
function __gcry_hmac256_update(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  r4 = 0;
  r5 = r1 + 40 | 0;
  if ((HEAP32[r5 >> 2] & 1 | 0) != 0) {
    return;
  }
  r6 = (r1 + 36 | 0) >> 2;
  r7 = r1 + 41 | 0;
  r8 = r1 + 32 | 0;
  r9 = r2;
  r2 = r3;
  L1986 : while (1) {
    if ((HEAP32[r6] | 0) == 64) {
      _transform2036(r1, r7);
      HEAP32[r6] = 0;
      HEAP32[r8 >> 2] = HEAP32[r8 >> 2] + 1 | 0;
    }
    if ((r9 | 0) == 0) {
      r4 = 1576;
      break;
    }
    if ((HEAP32[r6] | 0) == 0) {
      r10 = r9;
      r11 = r2;
      break;
    }
    L1993 : do {
      if ((r2 | 0) != 0) {
        r12 = r2;
        r13 = r9;
        while (1) {
          r3 = HEAP32[r6];
          if ((r3 | 0) >= 64) {
            r4 = 1567;
            break L1986;
          }
          r14 = HEAP8[r13];
          HEAP32[r6] = r3 + 1 | 0;
          HEAP8[r1 + (r3 + 41) | 0] = r14;
          r14 = r12 - 1 | 0;
          if ((r14 | 0) == 0) {
            break L1993;
          } else {
            r12 = r14;
            r13 = r13 + 1 | 0;
          }
        }
      }
    } while (0);
    if ((HEAP32[r5 >> 2] & 1 | 0) == 0) {
      r9 = 0;
      r2 = 0;
    } else {
      r4 = 1579;
      break;
    }
  }
  if (r4 == 1567) {
    __gcry_hmac256_update(r1, 0, 0);
    r10 = r13;
    r11 = r12;
  } else if (r4 == 1576) {
    return;
  } else if (r4 == 1579) {
    return;
  }
  L2003 : do {
    if (r11 >>> 0 > 63) {
      r12 = r1 + 32 | 0;
      r13 = r11;
      r2 = r10;
      while (1) {
        _transform2036(r1, r2);
        HEAP32[r6] = 0;
        HEAP32[r12 >> 2] = HEAP32[r12 >> 2] + 1 | 0;
        r9 = r13 - 64 | 0;
        r5 = r2 + 64 | 0;
        if (r9 >>> 0 > 63) {
          r13 = r9;
          r2 = r5;
        } else {
          r15 = r9;
          r16 = r5;
          break L2003;
        }
      }
    } else {
      r15 = r11;
      r16 = r10;
    }
  } while (0);
  if ((r15 | 0) == 0) {
    return;
  } else {
    r17 = r15;
    r18 = r16;
  }
  while (1) {
    r16 = HEAP32[r6];
    if ((r16 | 0) >= 64) {
      r4 = 1580;
      break;
    }
    r15 = HEAP8[r18];
    HEAP32[r6] = r16 + 1 | 0;
    HEAP8[r1 + (r16 + 41) | 0] = r15;
    r15 = r17 - 1 | 0;
    if ((r15 | 0) == 0) {
      r4 = 1581;
      break;
    } else {
      r17 = r15;
      r18 = r18 + 1 | 0;
    }
  }
  if (r4 == 1580) {
    return;
  } else if (r4 == 1581) {
    return;
  }
}
function _finalize(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
  r2 = (r1 + 40 | 0) >> 2;
  if ((HEAP32[r2] & 1 | 0) != 0) {
    return;
  }
  __gcry_hmac256_update(r1, 0, 0);
  r3 = HEAP32[r1 + 32 >> 2];
  r4 = (r1 + 36 | 0) >> 2;
  r5 = HEAP32[r4];
  r6 = _llvm_uadd_with_overflow_i32(r3 << 6, r5);
  r7 = (tempRet0 & 1) + (r3 >>> 26) | 0;
  r3 = r6 << 3;
  r8 = r7 << 3 | r6 >>> 29;
  HEAP32[r4] = r5 + 1 | 0;
  r9 = r1 + 41 | 0;
  HEAP8[r1 + (r5 + 41) | 0] = -128;
  r10 = HEAP32[r4];
  L2020 : do {
    if ((r5 | 0) < 56) {
      if ((r10 | 0) < 56) {
        r11 = r10;
      } else {
        break;
      }
      while (1) {
        HEAP32[r4] = r11 + 1 | 0;
        HEAP8[r1 + (r11 + 41) | 0] = 0;
        r12 = HEAP32[r4];
        if ((r12 | 0) < 56) {
          r11 = r12;
        } else {
          break L2020;
        }
      }
    } else {
      L2025 : do {
        if ((r10 | 0) < 64) {
          r12 = r10;
          while (1) {
            HEAP32[r4] = r12 + 1 | 0;
            HEAP8[r1 + (r12 + 41) | 0] = 0;
            r13 = HEAP32[r4];
            if ((r13 | 0) < 64) {
              r12 = r13;
            } else {
              break L2025;
            }
          }
        }
      } while (0);
      __gcry_hmac256_update(r1, 0, 0);
      _memset(r9 | 0, 0, 56);
    }
  } while (0);
  HEAP8[r1 + 97 | 0] = r7 >>> 21 & 255;
  HEAP8[r1 + 98 | 0] = r7 >>> 13 & 255;
  HEAP8[r1 + 99 | 0] = r7 >>> 5 & 255;
  HEAP8[r1 + 100 | 0] = r8 & 255;
  HEAP8[r1 + 101 | 0] = r6 >>> 21 & 255;
  HEAP8[r1 + 102 | 0] = r6 >>> 13 & 255;
  HEAP8[r1 + 103 | 0] = r6 >>> 5 & 255;
  HEAP8[r1 + 104 | 0] = r3 & 255;
  r3 = r9 | 0;
  _transform2036(r1, r3);
  r9 = (r1 | 0) >> 2;
  HEAP8[r3] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 42 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 43 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 44 | 0] = HEAP32[r9] & 255;
  r9 = (r1 + 4 | 0) >> 2;
  HEAP8[r1 + 45 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 46 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 47 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 48 | 0] = HEAP32[r9] & 255;
  r9 = (r1 + 8 | 0) >> 2;
  HEAP8[r1 + 49 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 50 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 51 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 52 | 0] = HEAP32[r9] & 255;
  r9 = (r1 + 12 | 0) >> 2;
  HEAP8[r1 + 53 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 54 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 55 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 56 | 0] = HEAP32[r9] & 255;
  r9 = (r1 + 16 | 0) >> 2;
  HEAP8[r1 + 57 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 58 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 59 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 60 | 0] = HEAP32[r9] & 255;
  r9 = (r1 + 20 | 0) >> 2;
  HEAP8[r1 + 61 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 62 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 63 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 64 | 0] = HEAP32[r9] & 255;
  r9 = (r1 + 24 | 0) >> 2;
  HEAP8[r1 + 65 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 66 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 67 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 68 | 0] = HEAP32[r9] & 255;
  r9 = (r1 + 28 | 0) >> 2;
  HEAP8[r1 + 69 | 0] = HEAP32[r9] >>> 24 & 255;
  HEAP8[r1 + 70 | 0] = HEAP32[r9] >>> 16 & 255;
  HEAP8[r1 + 71 | 0] = HEAP32[r9] >>> 8 & 255;
  HEAP8[r1 + 72 | 0] = HEAP32[r9] & 255;
  HEAP32[r2] = HEAP32[r2] | 1;
  return;
}
function __gcry_hmac256_release(r1) {
  var r2, r3, r4, r5;
  if ((r1 | 0) == 0) {
    return;
  }
  r2 = r1;
  L2035 : do {
    if ((HEAP32[r1 + 40 >> 2] & 2 | 0) != 0) {
      r3 = r1 + 105 | 0;
      r4 = 64;
      while (1) {
        HEAP8[r3] = 0;
        r5 = r4 - 1 | 0;
        if ((r5 | 0) == 0) {
          break L2035;
        } else {
          r3 = r3 + 1 | 0;
          r4 = r5;
        }
      }
    }
  } while (0);
  _free(r2);
  return;
}
function _transform2036(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  r4 = r3;
  r5 = STACKTOP, r6 = r5 >> 2;
  STACKTOP = STACKTOP + 256 | 0;
  r7 = (r1 | 0) >> 2;
  r8 = HEAP32[r7];
  r9 = (r1 + 4 | 0) >> 2;
  r10 = HEAP32[r9];
  r11 = (r1 + 8 | 0) >> 2;
  r12 = HEAP32[r11];
  r13 = (r1 + 12 | 0) >> 2;
  r14 = HEAP32[r13];
  r15 = (r1 + 16 | 0) >> 2;
  r16 = HEAP32[r15];
  r17 = (r1 + 20 | 0) >> 2;
  r18 = HEAP32[r17];
  r19 = (r1 + 24 | 0) >> 2;
  r20 = HEAP32[r19];
  r21 = (r1 + 28 | 0) >> 2;
  r1 = HEAP32[r21];
  r22 = r2;
  r2 = 0;
  r23 = r4;
  while (1) {
    HEAP8[r23 + 3 | 0] = HEAP8[r22];
    HEAP8[r23 + 2 | 0] = HEAP8[r22 + 1 | 0];
    HEAP8[r23 + 1 | 0] = HEAP8[r22 + 2 | 0];
    HEAP8[r23] = HEAP8[r22 + 3 | 0];
    r24 = r2 + 1 | 0;
    if ((r24 | 0) == 16) {
      break;
    } else {
      r22 = r22 + 4 | 0;
      r2 = r24;
      r23 = r23 + 4 | 0;
    }
  }
  _memcpy(r5, r4, 64);
  r4 = 16;
  while (1) {
    r5 = HEAP32[(r4 - 2 << 2 >> 2) + r6];
    r23 = HEAP32[(r4 - 15 << 2 >> 2) + r6];
    HEAP32[(r4 << 2 >> 2) + r6] = HEAP32[(r4 - 16 << 2 >> 2) + r6] + HEAP32[(r4 - 7 << 2 >> 2) + r6] + ((r5 >>> 19 | r5 << 13) ^ r5 >>> 10 ^ (r5 >>> 17 | r5 << 15)) + ((r23 >>> 18 | r23 << 14) ^ r23 >>> 3 ^ (r23 >>> 7 | r23 << 25)) | 0;
    r23 = r4 + 1 | 0;
    if ((r23 | 0) == 64) {
      r25 = r10;
      r26 = r12;
      r27 = r14;
      r28 = r16;
      r29 = r18;
      r30 = r20;
      r31 = r1;
      r32 = r8;
      r33 = 0;
      break;
    } else {
      r4 = r23;
    }
  }
  while (1) {
    r4 = ((r28 >>> 6 | r28 << 26) ^ (r28 >>> 11 | r28 << 21) ^ (r28 >>> 25 | r28 << 7)) + r31 + ((r30 ^ r29) & r28 ^ r30) + HEAP32[(r33 << 2) + 411040 >> 2] + HEAP32[(r33 << 2 >> 2) + r6] | 0;
    r34 = r4 + r27 | 0;
    r35 = ((r32 >>> 2 | r32 << 30) ^ (r32 >>> 13 | r32 << 19) ^ (r32 >>> 22 | r32 << 10)) + ((r32 | r25) & r26 | r32 & r25) + r4 | 0;
    r4 = r33 + 1 | 0;
    if ((r4 | 0) == 64) {
      break;
    } else {
      r27 = r26;
      r26 = r25;
      r25 = r32;
      r31 = r30;
      r30 = r29;
      r29 = r28;
      r28 = r34;
      r32 = r35;
      r33 = r4;
    }
  }
  HEAP32[r7] = HEAP32[r7] + r35 | 0;
  HEAP32[r9] = HEAP32[r9] + r32 | 0;
  HEAP32[r11] = HEAP32[r11] + r25 | 0;
  HEAP32[r13] = HEAP32[r13] + r26 | 0;
  HEAP32[r15] = HEAP32[r15] + r34 | 0;
  HEAP32[r17] = HEAP32[r17] + r28 | 0;
  HEAP32[r19] = HEAP32[r19] + r29 | 0;
  HEAP32[r21] = HEAP32[r21] + r30 | 0;
  STACKTOP = r3;
  return;
}
function __gcry_hmac256_finalize(r1, r2) {
  var r3, r4, r5, r6;
  _finalize(r1);
  r3 = r1;
  do {
    if ((HEAP32[r1 + 40 >> 2] & 2 | 0) != 0) {
      r4 = __gcry_hmac256_new(0, 0);
      if ((r4 | 0) != 0) {
        __gcry_hmac256_update(r4, r1 + 105 | 0, 64);
        r5 = r1 + 41 | 0;
        __gcry_hmac256_update(r4, r5, 32);
        _finalize(r4);
        _memcpy(r5, r4 + 41 | 0, 32);
        __gcry_hmac256_release(r4);
        break;
      }
      _free(r3);
      r6 = 0;
      return r6;
    }
  } while (0);
  if ((r2 | 0) != 0) {
    HEAP32[r2 >> 2] = 32;
  }
  r6 = r1 + 41 | 0;
  return r6;
}
function __gcry_hmac256_file(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13;
  r6 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r7 = r6;
  r8 = _fopen(r3, 481852);
  do {
    if ((r8 | 0) == 0) {
      r9 = -1;
    } else {
      r3 = __gcry_hmac256_new(r4, r5);
      if ((r3 | 0) == 0) {
        _fclose(r8);
        r9 = -1;
        break;
      }
      r10 = _malloc(32768);
      if ((r10 | 0) == 0) {
        _fclose(r8);
        __gcry_hmac256_release(r3);
        r9 = -1;
        break;
      }
      r11 = _fread(r10, 1, 32768, r8);
      L2071 : do {
        if ((r11 | 0) != 0) {
          r12 = r11;
          while (1) {
            __gcry_hmac256_update(r3, r10, r12);
            r13 = _fread(r10, 1, 32768, r8);
            if ((r13 | 0) == 0) {
              break L2071;
            } else {
              r12 = r13;
            }
          }
        }
      } while (0);
      _free(r10);
      r11 = (_ferror(r8) | 0) == 0;
      _fclose(r8);
      if (!r11) {
        __gcry_hmac256_release(r3);
        r9 = -1;
        break;
      }
      r11 = __gcry_hmac256_finalize(r3, r7);
      if ((r11 | 0) == 0) {
        __gcry_hmac256_release(r3);
        r9 = -1;
        break;
      }
      r12 = HEAP32[r7 >> 2];
      if (r12 >>> 0 > r2 >>> 0) {
        __gcry_hmac256_release(r3);
        HEAP32[___errno_location() >> 2] = 22;
        r9 = -1;
        break;
      } else {
        _memcpy(r1, r11, r12);
        __gcry_hmac256_release(r3);
        r9 = HEAP32[r7 >> 2];
        break;
      }
    }
  } while (0);
  STACKTOP = r6;
  return r9;
}
function _gpg_err_code_from_syserror() {
  var r1, r2, r3, r4, r5;
  r1 = 0;
  r2 = HEAP32[___errno_location() >> 2];
  if ((r2 | 0) == 0) {
    r3 = 16381;
    return r3;
  }
  do {
    if ((r2 - 1 | 0) >>> 0 < 11) {
      r4 = r2 - 1 | 0;
      r1 = 1642;
      break;
    } else {
      if ((r2 - 11 | 0) >>> 0 < 25) {
        r5 = r2;
        break;
      }
      if ((r2 - 35 | 0) >>> 0 < 6) {
        r4 = r2 + 1 | 0;
        r1 = 1642;
        break;
      }
      if ((r2 - 42 | 0) >>> 0 < 16) {
        r5 = r2;
        break;
      }
      if ((r2 - 59 | 0) >>> 0 < 37) {
        r4 = r2 - 1 | 0;
        r1 = 1642;
        break;
      } else {
        r4 = (r2 - 95 | 0) >>> 0 < 31 ? r2 : -1;
        r1 = 1642;
        break;
      }
    }
  } while (0);
  do {
    if (r1 == 1642) {
      if ((r4 | 0) < 0) {
        r3 = 16382;
      } else {
        r5 = r4;
        break;
      }
      return r3;
    }
  } while (0);
  r3 = HEAP32[(r5 << 2) + 456796 >> 2] | 32768;
  return r3;
}
function _gpg_err_set_errno(r1) {
  HEAP32[___errno_location() >> 2] = r1;
  return;
}
function _gpg_strerror(r1) {
  var r2, r3, r4;
  r2 = _gpg_err_code2047(r1);
  do {
    if ((r2 & 32768 | 0) == 0) {
      r3 = r2;
    } else {
      r1 = _gpg_err_code_to_errno(r2);
      if ((r1 | 0) == 0) {
        r3 = 16382;
        break;
      }
      r4 = _strerror(r1);
      return r4;
    }
  } while (0);
  r4 = HEAP32[(_msgidxof(r3) << 2) + 446028 >> 2] + 441176 | 0;
  return r4;
}
function _gpg_strerror_r(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = _gpg_err_code2047(r1);
  do {
    if ((r4 & 32768 | 0) == 0) {
      r5 = r4;
    } else {
      r1 = _gpg_err_code_to_errno(r4);
      if ((r1 | 0) == 0) {
        r5 = 16382;
        break;
      }
      r6 = _system_strerror_r(r1, r2, r3);
      if ((r6 | 0) == 22) {
        r5 = 16382;
        break;
      }
      if ((r3 | 0) == 0) {
        r7 = r6;
        return r7;
      }
      HEAP8[r2 + (r3 - 1) | 0] = 0;
      r7 = r6;
      return r7;
    }
  } while (0);
  r4 = HEAP32[(_msgidxof(r5) << 2) + 446028 >> 2] + 441176 | 0;
  r5 = _strlen(r4) + 1 | 0;
  r6 = r5 >>> 0 < r3 >>> 0 ? r5 : r3;
  _memcpy(r2, r4, r6);
  if ((r3 | 0) != 0) {
    HEAP8[r2 + (r3 - 1) | 0] = 0;
  }
  r7 = (r6 | 0) == (r5 | 0) ? 0 : 34;
  return r7;
}
function _gpg_err_source(r1) {
  return r1 >>> 24 & 127;
}
function _msgidxof2052(r1) {
  if (r1 >>> 0 < 15) {
    return r1;
  } else {
    return (r1 - 31 | 0) >>> 0 < 5 ? r1 - 16 | 0 : 20;
  }
}
function _gpg_err_code_to_errno(r1) {
  var r2, r3;
  do {
    if ((r1 & 32768 | 0) == 0) {
      r2 = 0;
    } else {
      r3 = r1 & -32769;
      if (r3 >>> 0 >= 141) {
        r2 = 0;
        break;
      }
      r2 = HEAP32[(r3 << 2) + 456232 >> 2];
    }
  } while (0);
  return r2;
}
function _system_strerror_r(r1, r2, r3) {
  var r4, r5, r6, r7;
  r4 = _strerror_r(r1, r2, r3);
  if ((r4 | 0) == (r2 | 0)) {
    r1 = (_strlen(r2) + 1 | 0) >>> 0 < r3 >>> 0;
    r5 = r1 ? 0 : 34;
    return r5;
  } else {
    r6 = _strlen(r4) + 1 | 0;
    r7 = r6 >>> 0 < r3 >>> 0 ? r6 : r3;
    _memcpy(r2, r4, r7);
    r1 = (r7 | 0) == (r6 | 0);
    r5 = r1 ? 0 : 34;
    return r5;
  }
}
function _gpg_strsource(r1) {
  return HEAP32[(_msgidxof2052(_gpg_err_source(r1)) << 2) + 445944 >> 2] + 440952 | 0;
}
function _malloc(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18;
  do {
    if (r1 >>> 0 < 245) {
      if (r1 >>> 0 < 11) {
        r2 = 16;
      } else {
        r2 = r1 + 11 & -8;
      }
      r3 = r2 >>> 3;
      r4 = HEAP32[122785];
      r5 = r4 >>> (r3 >>> 0);
      if ((r5 & 3 | 0) != 0) {
        r6 = (r5 & 1 ^ 1) + r3 | 0;
        r7 = r6 << 1;
        r8 = (r7 << 2) + 491180 | 0;
        r9 = (r7 + 2 << 2) + 491180 | 0;
        r7 = HEAP32[r9 >> 2];
        r10 = r7 + 8 | 0;
        r11 = HEAP32[r10 >> 2];
        do {
          if ((r8 | 0) == (r11 | 0)) {
            HEAP32[122785] = r4 & (1 << r6 ^ -1);
          } else {
            if (r11 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            }
            r12 = r11 + 12 | 0;
            if ((HEAP32[r12 >> 2] | 0) == (r7 | 0)) {
              HEAP32[r12 >> 2] = r8;
              HEAP32[r9 >> 2] = r11;
              break;
            } else {
              _abort();
            }
          }
        } while (0);
        r11 = r6 << 3;
        HEAP32[r7 + 4 >> 2] = r11 | 3;
        r9 = r7 + (r11 | 4) | 0;
        HEAP32[r9 >> 2] = HEAP32[r9 >> 2] | 1;
        r13 = r10;
        return r13;
      }
      if (r2 >>> 0 <= HEAP32[122787] >>> 0) {
        r14 = r2;
        break;
      }
      if ((r5 | 0) == 0) {
        if ((HEAP32[122786] | 0) == 0) {
          r14 = r2;
          break;
        }
        r9 = _tmalloc_small(r2);
        if ((r9 | 0) == 0) {
          r14 = r2;
          break;
        } else {
          r13 = r9;
        }
        return r13;
      }
      r9 = 2 << r3;
      r11 = r5 << r3 & (r9 | -r9);
      r9 = (r11 & -r11) - 1 | 0;
      r11 = r9 >>> 12 & 16;
      r8 = r9 >>> (r11 >>> 0);
      r9 = r8 >>> 5 & 8;
      r12 = r8 >>> (r9 >>> 0);
      r8 = r12 >>> 2 & 4;
      r15 = r12 >>> (r8 >>> 0);
      r12 = r15 >>> 1 & 2;
      r16 = r15 >>> (r12 >>> 0);
      r15 = r16 >>> 1 & 1;
      r17 = (r9 | r11 | r8 | r12 | r15) + (r16 >>> (r15 >>> 0)) | 0;
      r15 = r17 << 1;
      r16 = (r15 << 2) + 491180 | 0;
      r12 = (r15 + 2 << 2) + 491180 | 0;
      r15 = HEAP32[r12 >> 2];
      r8 = r15 + 8 | 0;
      r11 = HEAP32[r8 >> 2];
      do {
        if ((r16 | 0) == (r11 | 0)) {
          HEAP32[122785] = r4 & (1 << r17 ^ -1);
        } else {
          if (r11 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          r9 = r11 + 12 | 0;
          if ((HEAP32[r9 >> 2] | 0) == (r15 | 0)) {
            HEAP32[r9 >> 2] = r16;
            HEAP32[r12 >> 2] = r11;
            break;
          } else {
            _abort();
          }
        }
      } while (0);
      r11 = r17 << 3;
      r12 = r11 - r2 | 0;
      HEAP32[r15 + 4 >> 2] = r2 | 3;
      r16 = r15;
      r4 = r16 + r2 | 0;
      HEAP32[r16 + (r2 | 4) >> 2] = r12 | 1;
      HEAP32[r16 + r11 >> 2] = r12;
      r11 = HEAP32[122787];
      if ((r11 | 0) != 0) {
        r16 = HEAP32[122790];
        r3 = r11 >>> 3;
        r11 = r3 << 1;
        r5 = (r11 << 2) + 491180 | 0;
        r10 = HEAP32[122785];
        r7 = 1 << r3;
        do {
          if ((r10 & r7 | 0) == 0) {
            HEAP32[122785] = r10 | r7;
            r18 = r5;
          } else {
            r3 = HEAP32[(r11 + 2 << 2) + 491180 >> 2];
            if (r3 >>> 0 >= HEAP32[122789] >>> 0) {
              r18 = r3;
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[(r11 + 2 << 2) + 491180 >> 2] = r16;
        HEAP32[r18 + 12 >> 2] = r16;
        HEAP32[r16 + 8 >> 2] = r18;
        HEAP32[r16 + 12 >> 2] = r5;
      }
      HEAP32[122787] = r12;
      HEAP32[122790] = r4;
      r13 = r8;
      return r13;
    } else {
      if (r1 >>> 0 > 4294967231) {
        r14 = -1;
        break;
      }
      r7 = r1 + 11 & -8;
      if ((HEAP32[122786] | 0) == 0) {
        r14 = r7;
        break;
      }
      r10 = _tmalloc_large(r7);
      if ((r10 | 0) == 0) {
        r14 = r7;
        break;
      } else {
        r13 = r10;
      }
      return r13;
    }
  } while (0);
  r1 = HEAP32[122787];
  if (r14 >>> 0 > r1 >>> 0) {
    r18 = HEAP32[122788];
    if (r14 >>> 0 < r18 >>> 0) {
      r2 = r18 - r14 | 0;
      HEAP32[122788] = r2;
      r18 = HEAP32[122791];
      r10 = r18;
      HEAP32[122791] = r10 + r14 | 0;
      HEAP32[r14 + (r10 + 4) >> 2] = r2 | 1;
      HEAP32[r18 + 4 >> 2] = r14 | 3;
      r13 = r18 + 8 | 0;
      return r13;
    } else {
      r13 = _sys_alloc(r14);
      return r13;
    }
  } else {
    r18 = r1 - r14 | 0;
    r2 = HEAP32[122790];
    if (r18 >>> 0 > 15) {
      r10 = r2;
      HEAP32[122790] = r10 + r14 | 0;
      HEAP32[122787] = r18;
      HEAP32[r14 + (r10 + 4) >> 2] = r18 | 1;
      HEAP32[r10 + r1 >> 2] = r18;
      HEAP32[r2 + 4 >> 2] = r14 | 3;
    } else {
      HEAP32[122787] = 0;
      HEAP32[122790] = 0;
      HEAP32[r2 + 4 >> 2] = r1 | 3;
      r14 = r1 + (r2 + 4) | 0;
      HEAP32[r14 >> 2] = HEAP32[r14 >> 2] | 1;
    }
    r13 = r2 + 8 | 0;
    return r13;
  }
}
function _tmalloc_small(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r2 = HEAP32[122786];
  r3 = (r2 & -r2) - 1 | 0;
  r2 = r3 >>> 12 & 16;
  r4 = r3 >>> (r2 >>> 0);
  r3 = r4 >>> 5 & 8;
  r5 = r4 >>> (r3 >>> 0);
  r4 = r5 >>> 2 & 4;
  r6 = r5 >>> (r4 >>> 0);
  r5 = r6 >>> 1 & 2;
  r7 = r6 >>> (r5 >>> 0);
  r6 = r7 >>> 1 & 1;
  r8 = HEAP32[((r3 | r2 | r4 | r5 | r6) + (r7 >>> (r6 >>> 0)) << 2) + 491444 >> 2];
  r6 = r8;
  r7 = r8, r5 = r7 >> 2;
  r4 = (HEAP32[r8 + 4 >> 2] & -8) - r1 | 0;
  while (1) {
    r8 = HEAP32[r6 + 16 >> 2];
    if ((r8 | 0) == 0) {
      r2 = HEAP32[r6 + 20 >> 2];
      if ((r2 | 0) == 0) {
        break;
      } else {
        r9 = r2;
      }
    } else {
      r9 = r8;
    }
    r8 = (HEAP32[r9 + 4 >> 2] & -8) - r1 | 0;
    r2 = r8 >>> 0 < r4 >>> 0;
    r6 = r9;
    r7 = r2 ? r9 : r7, r5 = r7 >> 2;
    r4 = r2 ? r8 : r4;
  }
  r9 = r7;
  r6 = HEAP32[122789];
  if (r9 >>> 0 < r6 >>> 0) {
    _abort();
  }
  r8 = r9 + r1 | 0;
  r2 = r8;
  if (r9 >>> 0 >= r8 >>> 0) {
    _abort();
  }
  r8 = HEAP32[r5 + 6];
  r3 = HEAP32[r5 + 3];
  L2220 : do {
    if ((r3 | 0) == (r7 | 0)) {
      r10 = r7 + 20 | 0;
      r11 = HEAP32[r10 >> 2];
      do {
        if ((r11 | 0) == 0) {
          r12 = r7 + 16 | 0;
          r13 = HEAP32[r12 >> 2];
          if ((r13 | 0) == 0) {
            r14 = 0, r15 = r14 >> 2;
            break L2220;
          } else {
            r16 = r13;
            r17 = r12;
            break;
          }
        } else {
          r16 = r11;
          r17 = r10;
        }
      } while (0);
      while (1) {
        r10 = r16 + 20 | 0;
        if ((HEAP32[r10 >> 2] | 0) == 0) {
          r11 = r16 + 16 | 0;
          if ((HEAP32[r11 >> 2] | 0) == 0) {
            break;
          } else {
            r18 = r11;
          }
        } else {
          r18 = r10;
        }
        r16 = HEAP32[r18 >> 2];
        r17 = r18;
      }
      if (r17 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      } else {
        HEAP32[r17 >> 2] = 0;
        r14 = r16, r15 = r14 >> 2;
        break;
      }
    } else {
      r10 = HEAP32[r5 + 2];
      if (r10 >>> 0 < r6 >>> 0) {
        _abort();
      }
      r11 = r10 + 12 | 0;
      if ((HEAP32[r11 >> 2] | 0) != (r7 | 0)) {
        _abort();
      }
      r12 = r3 + 8 | 0;
      if ((HEAP32[r12 >> 2] | 0) == (r7 | 0)) {
        HEAP32[r11 >> 2] = r3;
        HEAP32[r12 >> 2] = r10;
        r14 = r3, r15 = r14 >> 2;
        break;
      } else {
        _abort();
      }
    }
  } while (0);
  L2244 : do {
    if ((r8 | 0) != 0) {
      r3 = r7 + 28 | 0;
      r6 = (HEAP32[r3 >> 2] << 2) + 491444 | 0;
      do {
        if ((r7 | 0) == (HEAP32[r6 >> 2] | 0)) {
          HEAP32[r6 >> 2] = r14;
          if ((r14 | 0) != 0) {
            break;
          }
          HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r3 >> 2] ^ -1);
          break L2244;
        } else {
          if (r8 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          r16 = r8 + 16 | 0;
          if ((HEAP32[r16 >> 2] | 0) == (r7 | 0)) {
            HEAP32[r16 >> 2] = r14;
          } else {
            HEAP32[r8 + 20 >> 2] = r14;
          }
          if ((r14 | 0) == 0) {
            break L2244;
          }
        }
      } while (0);
      if (r14 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      }
      HEAP32[r15 + 6] = r8;
      r3 = HEAP32[r5 + 4];
      do {
        if ((r3 | 0) != 0) {
          if (r3 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r15 + 4] = r3;
            HEAP32[r3 + 24 >> 2] = r14;
            break;
          }
        }
      } while (0);
      r3 = HEAP32[r5 + 5];
      if ((r3 | 0) == 0) {
        break;
      }
      if (r3 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      } else {
        HEAP32[r15 + 5] = r3;
        HEAP32[r3 + 24 >> 2] = r14;
        break;
      }
    }
  } while (0);
  if (r4 >>> 0 < 16) {
    r14 = r4 + r1 | 0;
    HEAP32[r5 + 1] = r14 | 3;
    r15 = r14 + (r9 + 4) | 0;
    HEAP32[r15 >> 2] = HEAP32[r15 >> 2] | 1;
    r19 = r7 + 8 | 0;
    r20 = r19;
    return r20;
  }
  HEAP32[r5 + 1] = r1 | 3;
  HEAP32[r1 + (r9 + 4) >> 2] = r4 | 1;
  HEAP32[r9 + r4 + r1 >> 2] = r4;
  r1 = HEAP32[122787];
  if ((r1 | 0) != 0) {
    r9 = HEAP32[122790];
    r5 = r1 >>> 3;
    r1 = r5 << 1;
    r15 = (r1 << 2) + 491180 | 0;
    r14 = HEAP32[122785];
    r8 = 1 << r5;
    do {
      if ((r14 & r8 | 0) == 0) {
        HEAP32[122785] = r14 | r8;
        r21 = r15;
      } else {
        r5 = HEAP32[(r1 + 2 << 2) + 491180 >> 2];
        if (r5 >>> 0 >= HEAP32[122789] >>> 0) {
          r21 = r5;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[(r1 + 2 << 2) + 491180 >> 2] = r9;
    HEAP32[r21 + 12 >> 2] = r9;
    HEAP32[r9 + 8 >> 2] = r21;
    HEAP32[r9 + 12 >> 2] = r15;
  }
  HEAP32[122787] = r4;
  HEAP32[122790] = r2;
  r19 = r7 + 8 | 0;
  r20 = r19;
  return r20;
}
function _tmalloc_large(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35;
  r2 = r1 >> 2;
  r3 = 0;
  r4 = -r1 | 0;
  r5 = r1 >>> 8;
  do {
    if ((r5 | 0) == 0) {
      r6 = 0;
    } else {
      if (r1 >>> 0 > 16777215) {
        r6 = 31;
        break;
      }
      r7 = (r5 + 1048320 | 0) >>> 16 & 8;
      r8 = r5 << r7;
      r9 = (r8 + 520192 | 0) >>> 16 & 4;
      r10 = r8 << r9;
      r8 = (r10 + 245760 | 0) >>> 16 & 2;
      r11 = 14 - (r9 | r7 | r8) + (r10 << r8 >>> 15) | 0;
      r6 = r1 >>> ((r11 + 7 | 0) >>> 0) & 1 | r11 << 1;
    }
  } while (0);
  r5 = HEAP32[(r6 << 2) + 491444 >> 2];
  L2290 : do {
    if ((r5 | 0) == 0) {
      r12 = 0;
      r13 = r4;
      r14 = 0;
    } else {
      if ((r6 | 0) == 31) {
        r15 = 0;
      } else {
        r15 = 25 - (r6 >>> 1) | 0;
      }
      r11 = 0;
      r8 = r4;
      r10 = r5, r7 = r10 >> 2;
      r9 = r1 << r15;
      r16 = 0;
      while (1) {
        r17 = HEAP32[r7 + 1] & -8;
        r18 = r17 - r1 | 0;
        if (r18 >>> 0 < r8 >>> 0) {
          if ((r17 | 0) == (r1 | 0)) {
            r12 = r10;
            r13 = r18;
            r14 = r10;
            break L2290;
          } else {
            r19 = r10;
            r20 = r18;
          }
        } else {
          r19 = r11;
          r20 = r8;
        }
        r18 = HEAP32[r7 + 5];
        r17 = HEAP32[((r9 >>> 31 << 2) + 16 >> 2) + r7];
        r21 = (r18 | 0) == 0 | (r18 | 0) == (r17 | 0) ? r16 : r18;
        if ((r17 | 0) == 0) {
          r12 = r19;
          r13 = r20;
          r14 = r21;
          break L2290;
        } else {
          r11 = r19;
          r8 = r20;
          r10 = r17, r7 = r10 >> 2;
          r9 = r9 << 1;
          r16 = r21;
        }
      }
    }
  } while (0);
  do {
    if ((r14 | 0) == 0 & (r12 | 0) == 0) {
      r20 = 2 << r6;
      r19 = HEAP32[122786] & (r20 | -r20);
      if ((r19 | 0) == 0) {
        r22 = r14;
        break;
      }
      r20 = (r19 & -r19) - 1 | 0;
      r19 = r20 >>> 12 & 16;
      r15 = r20 >>> (r19 >>> 0);
      r20 = r15 >>> 5 & 8;
      r5 = r15 >>> (r20 >>> 0);
      r15 = r5 >>> 2 & 4;
      r4 = r5 >>> (r15 >>> 0);
      r5 = r4 >>> 1 & 2;
      r16 = r4 >>> (r5 >>> 0);
      r4 = r16 >>> 1 & 1;
      r22 = HEAP32[((r20 | r19 | r15 | r5 | r4) + (r16 >>> (r4 >>> 0)) << 2) + 491444 >> 2];
    } else {
      r22 = r14;
    }
  } while (0);
  L2305 : do {
    if ((r22 | 0) == 0) {
      r23 = r13;
      r24 = r12, r25 = r24 >> 2;
    } else {
      r14 = r22, r6 = r14 >> 2;
      r4 = r13;
      r16 = r12;
      while (1) {
        r5 = (HEAP32[r6 + 1] & -8) - r1 | 0;
        r15 = r5 >>> 0 < r4 >>> 0;
        r19 = r15 ? r5 : r4;
        r5 = r15 ? r14 : r16;
        r15 = HEAP32[r6 + 4];
        if ((r15 | 0) != 0) {
          r14 = r15, r6 = r14 >> 2;
          r4 = r19;
          r16 = r5;
          continue;
        }
        r15 = HEAP32[r6 + 5];
        if ((r15 | 0) == 0) {
          r23 = r19;
          r24 = r5, r25 = r24 >> 2;
          break L2305;
        } else {
          r14 = r15, r6 = r14 >> 2;
          r4 = r19;
          r16 = r5;
        }
      }
    }
  } while (0);
  if ((r24 | 0) == 0) {
    r26 = 0;
    return r26;
  }
  if (r23 >>> 0 >= (HEAP32[122787] - r1 | 0) >>> 0) {
    r26 = 0;
    return r26;
  }
  r12 = r24, r13 = r12 >> 2;
  r22 = HEAP32[122789];
  if (r12 >>> 0 < r22 >>> 0) {
    _abort();
  }
  r16 = r12 + r1 | 0;
  r4 = r16;
  if (r12 >>> 0 >= r16 >>> 0) {
    _abort();
  }
  r14 = HEAP32[r25 + 6];
  r6 = HEAP32[r25 + 3];
  L2322 : do {
    if ((r6 | 0) == (r24 | 0)) {
      r5 = r24 + 20 | 0;
      r19 = HEAP32[r5 >> 2];
      do {
        if ((r19 | 0) == 0) {
          r15 = r24 + 16 | 0;
          r20 = HEAP32[r15 >> 2];
          if ((r20 | 0) == 0) {
            r27 = 0, r28 = r27 >> 2;
            break L2322;
          } else {
            r29 = r20;
            r30 = r15;
            break;
          }
        } else {
          r29 = r19;
          r30 = r5;
        }
      } while (0);
      while (1) {
        r5 = r29 + 20 | 0;
        if ((HEAP32[r5 >> 2] | 0) == 0) {
          r19 = r29 + 16 | 0;
          if ((HEAP32[r19 >> 2] | 0) == 0) {
            break;
          } else {
            r31 = r19;
          }
        } else {
          r31 = r5;
        }
        r29 = HEAP32[r31 >> 2];
        r30 = r31;
      }
      if (r30 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      } else {
        HEAP32[r30 >> 2] = 0;
        r27 = r29, r28 = r27 >> 2;
        break;
      }
    } else {
      r5 = HEAP32[r25 + 2];
      if (r5 >>> 0 < r22 >>> 0) {
        _abort();
      }
      r19 = r5 + 12 | 0;
      if ((HEAP32[r19 >> 2] | 0) != (r24 | 0)) {
        _abort();
      }
      r15 = r6 + 8 | 0;
      if ((HEAP32[r15 >> 2] | 0) == (r24 | 0)) {
        HEAP32[r19 >> 2] = r6;
        HEAP32[r15 >> 2] = r5;
        r27 = r6, r28 = r27 >> 2;
        break;
      } else {
        _abort();
      }
    }
  } while (0);
  L2346 : do {
    if ((r14 | 0) != 0) {
      r6 = r24 + 28 | 0;
      r22 = (HEAP32[r6 >> 2] << 2) + 491444 | 0;
      do {
        if ((r24 | 0) == (HEAP32[r22 >> 2] | 0)) {
          HEAP32[r22 >> 2] = r27;
          if ((r27 | 0) != 0) {
            break;
          }
          HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r6 >> 2] ^ -1);
          break L2346;
        } else {
          if (r14 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          r29 = r14 + 16 | 0;
          if ((HEAP32[r29 >> 2] | 0) == (r24 | 0)) {
            HEAP32[r29 >> 2] = r27;
          } else {
            HEAP32[r14 + 20 >> 2] = r27;
          }
          if ((r27 | 0) == 0) {
            break L2346;
          }
        }
      } while (0);
      if (r27 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      }
      HEAP32[r28 + 6] = r14;
      r6 = HEAP32[r25 + 4];
      do {
        if ((r6 | 0) != 0) {
          if (r6 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r28 + 4] = r6;
            HEAP32[r6 + 24 >> 2] = r27;
            break;
          }
        }
      } while (0);
      r6 = HEAP32[r25 + 5];
      if ((r6 | 0) == 0) {
        break;
      }
      if (r6 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      } else {
        HEAP32[r28 + 5] = r6;
        HEAP32[r6 + 24 >> 2] = r27;
        break;
      }
    }
  } while (0);
  do {
    if (r23 >>> 0 < 16) {
      r27 = r23 + r1 | 0;
      HEAP32[r25 + 1] = r27 | 3;
      r28 = r27 + (r12 + 4) | 0;
      HEAP32[r28 >> 2] = HEAP32[r28 >> 2] | 1;
    } else {
      HEAP32[r25 + 1] = r1 | 3;
      HEAP32[r2 + (r13 + 1)] = r23 | 1;
      HEAP32[(r23 >> 2) + r13 + r2] = r23;
      r28 = r23 >>> 3;
      if (r23 >>> 0 < 256) {
        r27 = r28 << 1;
        r14 = (r27 << 2) + 491180 | 0;
        r6 = HEAP32[122785];
        r22 = 1 << r28;
        do {
          if ((r6 & r22 | 0) == 0) {
            HEAP32[122785] = r6 | r22;
            r32 = r14;
          } else {
            r28 = HEAP32[(r27 + 2 << 2) + 491180 >> 2];
            if (r28 >>> 0 >= HEAP32[122789] >>> 0) {
              r32 = r28;
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[(r27 + 2 << 2) + 491180 >> 2] = r4;
        HEAP32[r32 + 12 >> 2] = r4;
        HEAP32[r2 + (r13 + 2)] = r32;
        HEAP32[r2 + (r13 + 3)] = r14;
        break;
      }
      r22 = r16;
      r6 = r23 >>> 8;
      do {
        if ((r6 | 0) == 0) {
          r33 = 0;
        } else {
          if (r23 >>> 0 > 16777215) {
            r33 = 31;
            break;
          }
          r28 = (r6 + 1048320 | 0) >>> 16 & 8;
          r29 = r6 << r28;
          r30 = (r29 + 520192 | 0) >>> 16 & 4;
          r31 = r29 << r30;
          r29 = (r31 + 245760 | 0) >>> 16 & 2;
          r5 = 14 - (r30 | r28 | r29) + (r31 << r29 >>> 15) | 0;
          r33 = r23 >>> ((r5 + 7 | 0) >>> 0) & 1 | r5 << 1;
        }
      } while (0);
      r6 = (r33 << 2) + 491444 | 0;
      HEAP32[r2 + (r13 + 7)] = r33;
      HEAP32[r2 + (r13 + 5)] = 0;
      HEAP32[r2 + (r13 + 4)] = 0;
      r14 = HEAP32[122786];
      r27 = 1 << r33;
      if ((r14 & r27 | 0) == 0) {
        HEAP32[122786] = r14 | r27;
        HEAP32[r6 >> 2] = r22;
        HEAP32[r2 + (r13 + 6)] = r6;
        HEAP32[r2 + (r13 + 3)] = r22;
        HEAP32[r2 + (r13 + 2)] = r22;
        break;
      }
      if ((r33 | 0) == 31) {
        r34 = 0;
      } else {
        r34 = 25 - (r33 >>> 1) | 0;
      }
      r27 = r23 << r34;
      r14 = HEAP32[r6 >> 2];
      while (1) {
        if ((HEAP32[r14 + 4 >> 2] & -8 | 0) == (r23 | 0)) {
          break;
        }
        r35 = (r27 >>> 31 << 2) + r14 + 16 | 0;
        r6 = HEAP32[r35 >> 2];
        if ((r6 | 0) == 0) {
          r3 = 1864;
          break;
        } else {
          r27 = r27 << 1;
          r14 = r6;
        }
      }
      if (r3 == 1864) {
        if (r35 >>> 0 < HEAP32[122789] >>> 0) {
          _abort();
        } else {
          HEAP32[r35 >> 2] = r22;
          HEAP32[r2 + (r13 + 6)] = r14;
          HEAP32[r2 + (r13 + 3)] = r22;
          HEAP32[r2 + (r13 + 2)] = r22;
          break;
        }
      }
      r27 = r14 + 8 | 0;
      r6 = HEAP32[r27 >> 2];
      r5 = HEAP32[122789];
      if (r14 >>> 0 < r5 >>> 0) {
        _abort();
      }
      if (r6 >>> 0 < r5 >>> 0) {
        _abort();
      } else {
        HEAP32[r6 + 12 >> 2] = r22;
        HEAP32[r27 >> 2] = r22;
        HEAP32[r2 + (r13 + 2)] = r6;
        HEAP32[r2 + (r13 + 3)] = r14;
        HEAP32[r2 + (r13 + 6)] = 0;
        break;
      }
    }
  } while (0);
  r26 = r24 + 8 | 0;
  return r26;
}
function _sys_alloc(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26;
  r2 = 0;
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  r3 = r1 + 48 | 0;
  r4 = HEAP32[111755];
  r5 = r4 + (r1 + 47) & -r4;
  if (r5 >>> 0 <= r1 >>> 0) {
    r6 = 0;
    return r6;
  }
  r4 = HEAP32[122895];
  do {
    if ((r4 | 0) != 0) {
      r7 = HEAP32[122893];
      r8 = r7 + r5 | 0;
      if (r8 >>> 0 <= r7 >>> 0 | r8 >>> 0 > r4 >>> 0) {
        r6 = 0;
      } else {
        break;
      }
      return r6;
    }
  } while (0);
  L2423 : do {
    if ((HEAP32[122896] & 4 | 0) == 0) {
      r4 = HEAP32[122791];
      do {
        if ((r4 | 0) == 0) {
          r2 = 1892;
        } else {
          r8 = _segment_holding(r4);
          if ((r8 | 0) == 0) {
            r2 = 1892;
            break;
          }
          r7 = HEAP32[111755];
          r9 = r1 + 47 - HEAP32[122788] + r7 & -r7;
          if (r9 >>> 0 >= 2147483647) {
            r10 = 0;
            break;
          }
          r7 = _sbrk(r9);
          r11 = (r7 | 0) == (HEAP32[r8 >> 2] + HEAP32[r8 + 4 >> 2] | 0);
          r12 = r11 ? r7 : -1;
          r13 = r11 ? r9 : 0;
          r14 = r7;
          r15 = r9;
          r2 = 1901;
          break;
        }
      } while (0);
      do {
        if (r2 == 1892) {
          r4 = _sbrk(0);
          if ((r4 | 0) == -1) {
            r10 = 0;
            break;
          }
          r9 = r4;
          r7 = HEAP32[111754];
          r11 = r7 - 1 | 0;
          if ((r11 & r9 | 0) == 0) {
            r16 = r5;
          } else {
            r16 = r5 - r9 + (r11 + r9 & -r7) | 0;
          }
          r7 = HEAP32[122893];
          r9 = r7 + r16 | 0;
          if (!(r16 >>> 0 > r1 >>> 0 & r16 >>> 0 < 2147483647)) {
            r10 = 0;
            break;
          }
          r11 = HEAP32[122895];
          if ((r11 | 0) != 0) {
            if (r9 >>> 0 <= r7 >>> 0 | r9 >>> 0 > r11 >>> 0) {
              r10 = 0;
              break;
            }
          }
          r11 = _sbrk(r16);
          r9 = (r11 | 0) == (r4 | 0);
          r12 = r9 ? r4 : -1;
          r13 = r9 ? r16 : 0;
          r14 = r11;
          r15 = r16;
          r2 = 1901;
          break;
        }
      } while (0);
      L2439 : do {
        if (r2 == 1901) {
          r11 = -r15 | 0;
          if ((r12 | 0) != -1) {
            r17 = r13;
            r18 = r12;
            r2 = 1912;
            break L2423;
          }
          do {
            if ((r14 | 0) != -1 & r15 >>> 0 < 2147483647 & r15 >>> 0 < r3 >>> 0) {
              r9 = HEAP32[111755];
              r4 = r1 + 47 - r15 + r9 & -r9;
              if (r4 >>> 0 >= 2147483647) {
                r19 = r15;
                break;
              }
              if ((_sbrk(r4) | 0) == -1) {
                _sbrk(r11);
                r10 = r13;
                break L2439;
              } else {
                r19 = r4 + r15 | 0;
                break;
              }
            } else {
              r19 = r15;
            }
          } while (0);
          if ((r14 | 0) == -1) {
            r10 = r13;
          } else {
            r17 = r19;
            r18 = r14;
            r2 = 1912;
            break L2423;
          }
        }
      } while (0);
      HEAP32[122896] = HEAP32[122896] | 4;
      r20 = r10;
      r2 = 1909;
      break;
    } else {
      r20 = 0;
      r2 = 1909;
    }
  } while (0);
  do {
    if (r2 == 1909) {
      if (r5 >>> 0 >= 2147483647) {
        break;
      }
      r10 = _sbrk(r5);
      r14 = _sbrk(0);
      if (!((r14 | 0) != -1 & (r10 | 0) != -1 & r10 >>> 0 < r14 >>> 0)) {
        break;
      }
      r19 = r14 - r10 | 0;
      r14 = r19 >>> 0 > (r1 + 40 | 0) >>> 0;
      r13 = r14 ? r10 : -1;
      if ((r13 | 0) == -1) {
        break;
      } else {
        r17 = r14 ? r19 : r20;
        r18 = r13;
        r2 = 1912;
        break;
      }
    }
  } while (0);
  do {
    if (r2 == 1912) {
      r20 = HEAP32[122893] + r17 | 0;
      HEAP32[122893] = r20;
      if (r20 >>> 0 > HEAP32[122894] >>> 0) {
        HEAP32[122894] = r20;
      }
      L2459 : do {
        if ((HEAP32[122791] | 0) == 0) {
          r20 = HEAP32[122789];
          if ((r20 | 0) == 0 | r18 >>> 0 < r20 >>> 0) {
            HEAP32[122789] = r18;
          }
          HEAP32[122897] = r18;
          HEAP32[122898] = r17;
          HEAP32[122900] = 0;
          HEAP32[122794] = HEAP32[111753];
          HEAP32[122793] = -1;
          _init_bins();
          _init_top(r18, r17 - 40 | 0);
        } else {
          r20 = 491588, r5 = r20 >> 2;
          while (1) {
            r21 = HEAP32[r5];
            r22 = r20 + 4 | 0;
            r23 = HEAP32[r22 >> 2];
            r24 = r21 + r23 | 0;
            if ((r18 | 0) == (r24 | 0)) {
              r2 = 1920;
              break;
            }
            r13 = HEAP32[r5 + 2];
            if ((r13 | 0) == 0) {
              break;
            } else {
              r20 = r13, r5 = r20 >> 2;
            }
          }
          do {
            if (r2 == 1920) {
              if ((HEAP32[r5 + 3] & 8 | 0) != 0) {
                break;
              }
              r20 = HEAP32[122791];
              if (!(r20 >>> 0 >= r21 >>> 0 & r20 >>> 0 < r24 >>> 0)) {
                break;
              }
              HEAP32[r22 >> 2] = r23 + r17 | 0;
              _init_top(HEAP32[122791], HEAP32[122788] + r17 | 0);
              break L2459;
            }
          } while (0);
          if (r18 >>> 0 < HEAP32[122789] >>> 0) {
            HEAP32[122789] = r18;
          }
          r5 = r18 + r17 | 0;
          r20 = 491588;
          while (1) {
            r25 = r20 | 0;
            r26 = HEAP32[r25 >> 2];
            if ((r26 | 0) == (r5 | 0)) {
              r2 = 1928;
              break;
            }
            r13 = HEAP32[r20 + 8 >> 2];
            if ((r13 | 0) == 0) {
              break;
            } else {
              r20 = r13;
            }
          }
          do {
            if (r2 == 1928) {
              if ((HEAP32[r20 + 12 >> 2] & 8 | 0) != 0) {
                break;
              }
              HEAP32[r25 >> 2] = r18;
              r5 = r20 + 4 | 0;
              HEAP32[r5 >> 2] = HEAP32[r5 >> 2] + r17 | 0;
              r6 = _prepend_alloc(r18, r26, r1);
              return r6;
            }
          } while (0);
          _add_segment(r18, r17);
        }
      } while (0);
      r20 = HEAP32[122788];
      if (r20 >>> 0 <= r1 >>> 0) {
        break;
      }
      r5 = r20 - r1 | 0;
      HEAP32[122788] = r5;
      r20 = HEAP32[122791];
      r13 = r20;
      HEAP32[122791] = r13 + r1 | 0;
      HEAP32[r1 + (r13 + 4) >> 2] = r5 | 1;
      HEAP32[r20 + 4 >> 2] = r1 | 3;
      r6 = r20 + 8 | 0;
      return r6;
    }
  } while (0);
  HEAP32[___errno_location() >> 2] = 12;
  r6 = 0;
  return r6;
}
function _free(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44;
  r2 = r1 >> 2;
  r3 = 0;
  if ((r1 | 0) == 0) {
    return;
  }
  r4 = r1 - 8 | 0;
  r5 = r4;
  r6 = HEAP32[122789];
  if (r4 >>> 0 < r6 >>> 0) {
    _abort();
  }
  r7 = HEAP32[r1 - 4 >> 2];
  r8 = r7 & 3;
  if ((r8 | 0) == 1) {
    _abort();
  }
  r9 = r7 & -8, r10 = r9 >> 2;
  r11 = r1 + (r9 - 8) | 0;
  r12 = r11;
  L2498 : do {
    if ((r7 & 1 | 0) == 0) {
      r13 = HEAP32[r4 >> 2];
      if ((r8 | 0) == 0) {
        return;
      }
      r14 = -8 - r13 | 0, r15 = r14 >> 2;
      r16 = r1 + r14 | 0;
      r17 = r16;
      r18 = r13 + r9 | 0;
      if (r16 >>> 0 < r6 >>> 0) {
        _abort();
      }
      if ((r17 | 0) == (HEAP32[122790] | 0)) {
        r19 = (r1 + (r9 - 4) | 0) >> 2;
        if ((HEAP32[r19] & 3 | 0) != 3) {
          r20 = r17, r21 = r20 >> 2;
          r22 = r18;
          break;
        }
        HEAP32[122787] = r18;
        HEAP32[r19] = HEAP32[r19] & -2;
        HEAP32[r15 + (r2 + 1)] = r18 | 1;
        HEAP32[r11 >> 2] = r18;
        return;
      }
      r19 = r13 >>> 3;
      if (r13 >>> 0 < 256) {
        r13 = HEAP32[r15 + (r2 + 2)];
        r23 = HEAP32[r15 + (r2 + 3)];
        r24 = (r19 << 3) + 491180 | 0;
        do {
          if ((r13 | 0) != (r24 | 0)) {
            if (r13 >>> 0 < r6 >>> 0) {
              _abort();
            }
            if ((HEAP32[r13 + 12 >> 2] | 0) == (r17 | 0)) {
              break;
            }
            _abort();
          }
        } while (0);
        if ((r23 | 0) == (r13 | 0)) {
          HEAP32[122785] = HEAP32[122785] & (1 << r19 ^ -1);
          r20 = r17, r21 = r20 >> 2;
          r22 = r18;
          break;
        }
        do {
          if ((r23 | 0) != (r24 | 0)) {
            if (r23 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            }
            if ((HEAP32[r23 + 8 >> 2] | 0) == (r17 | 0)) {
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[r13 + 12 >> 2] = r23;
        HEAP32[r23 + 8 >> 2] = r13;
        r20 = r17, r21 = r20 >> 2;
        r22 = r18;
        break;
      }
      r24 = r16;
      r19 = HEAP32[r15 + (r2 + 6)];
      r25 = HEAP32[r15 + (r2 + 3)];
      L2531 : do {
        if ((r25 | 0) == (r24 | 0)) {
          r26 = r14 + (r1 + 20) | 0;
          r27 = HEAP32[r26 >> 2];
          do {
            if ((r27 | 0) == 0) {
              r28 = r14 + (r1 + 16) | 0;
              r29 = HEAP32[r28 >> 2];
              if ((r29 | 0) == 0) {
                r30 = 0, r31 = r30 >> 2;
                break L2531;
              } else {
                r32 = r29;
                r33 = r28;
                break;
              }
            } else {
              r32 = r27;
              r33 = r26;
            }
          } while (0);
          while (1) {
            r26 = r32 + 20 | 0;
            if ((HEAP32[r26 >> 2] | 0) == 0) {
              r27 = r32 + 16 | 0;
              if ((HEAP32[r27 >> 2] | 0) == 0) {
                break;
              } else {
                r34 = r27;
              }
            } else {
              r34 = r26;
            }
            r32 = HEAP32[r34 >> 2];
            r33 = r34;
          }
          if (r33 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r33 >> 2] = 0;
            r30 = r32, r31 = r30 >> 2;
            break;
          }
        } else {
          r26 = HEAP32[r15 + (r2 + 2)];
          if (r26 >>> 0 < r6 >>> 0) {
            _abort();
          }
          r27 = r26 + 12 | 0;
          if ((HEAP32[r27 >> 2] | 0) != (r24 | 0)) {
            _abort();
          }
          r28 = r25 + 8 | 0;
          if ((HEAP32[r28 >> 2] | 0) == (r24 | 0)) {
            HEAP32[r27 >> 2] = r25;
            HEAP32[r28 >> 2] = r26;
            r30 = r25, r31 = r30 >> 2;
            break;
          } else {
            _abort();
          }
        }
      } while (0);
      if ((r19 | 0) == 0) {
        r20 = r17, r21 = r20 >> 2;
        r22 = r18;
        break;
      }
      r25 = r14 + (r1 + 28) | 0;
      r16 = (HEAP32[r25 >> 2] << 2) + 491444 | 0;
      do {
        if ((r24 | 0) == (HEAP32[r16 >> 2] | 0)) {
          HEAP32[r16 >> 2] = r30;
          if ((r30 | 0) != 0) {
            break;
          }
          HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r25 >> 2] ^ -1);
          r20 = r17, r21 = r20 >> 2;
          r22 = r18;
          break L2498;
        } else {
          if (r19 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          r13 = r19 + 16 | 0;
          if ((HEAP32[r13 >> 2] | 0) == (r24 | 0)) {
            HEAP32[r13 >> 2] = r30;
          } else {
            HEAP32[r19 + 20 >> 2] = r30;
          }
          if ((r30 | 0) == 0) {
            r20 = r17, r21 = r20 >> 2;
            r22 = r18;
            break L2498;
          }
        }
      } while (0);
      if (r30 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      }
      HEAP32[r31 + 6] = r19;
      r24 = HEAP32[r15 + (r2 + 4)];
      do {
        if ((r24 | 0) != 0) {
          if (r24 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r31 + 4] = r24;
            HEAP32[r24 + 24 >> 2] = r30;
            break;
          }
        }
      } while (0);
      r24 = HEAP32[r15 + (r2 + 5)];
      if ((r24 | 0) == 0) {
        r20 = r17, r21 = r20 >> 2;
        r22 = r18;
        break;
      }
      if (r24 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      } else {
        HEAP32[r31 + 5] = r24;
        HEAP32[r24 + 24 >> 2] = r30;
        r20 = r17, r21 = r20 >> 2;
        r22 = r18;
        break;
      }
    } else {
      r20 = r5, r21 = r20 >> 2;
      r22 = r9;
    }
  } while (0);
  r5 = r20, r30 = r5 >> 2;
  if (r5 >>> 0 >= r11 >>> 0) {
    _abort();
  }
  r5 = r1 + (r9 - 4) | 0;
  r31 = HEAP32[r5 >> 2];
  if ((r31 & 1 | 0) == 0) {
    _abort();
  }
  do {
    if ((r31 & 2 | 0) == 0) {
      if ((r12 | 0) == (HEAP32[122791] | 0)) {
        r6 = HEAP32[122788] + r22 | 0;
        HEAP32[122788] = r6;
        HEAP32[122791] = r20;
        HEAP32[r21 + 1] = r6 | 1;
        if ((r20 | 0) == (HEAP32[122790] | 0)) {
          HEAP32[122790] = 0;
          HEAP32[122787] = 0;
        }
        if (r6 >>> 0 <= HEAP32[122792] >>> 0) {
          return;
        }
        _sys_trim(0);
        return;
      }
      if ((r12 | 0) == (HEAP32[122790] | 0)) {
        r6 = HEAP32[122787] + r22 | 0;
        HEAP32[122787] = r6;
        HEAP32[122790] = r20;
        HEAP32[r21 + 1] = r6 | 1;
        HEAP32[(r6 >> 2) + r30] = r6;
        return;
      }
      r6 = (r31 & -8) + r22 | 0;
      r32 = r31 >>> 3;
      L2604 : do {
        if (r31 >>> 0 < 256) {
          r33 = HEAP32[r2 + r10];
          r34 = HEAP32[((r9 | 4) >> 2) + r2];
          r8 = (r32 << 3) + 491180 | 0;
          do {
            if ((r33 | 0) != (r8 | 0)) {
              if (r33 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              }
              if ((HEAP32[r33 + 12 >> 2] | 0) == (r12 | 0)) {
                break;
              }
              _abort();
            }
          } while (0);
          if ((r34 | 0) == (r33 | 0)) {
            HEAP32[122785] = HEAP32[122785] & (1 << r32 ^ -1);
            break;
          }
          do {
            if ((r34 | 0) != (r8 | 0)) {
              if (r34 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              }
              if ((HEAP32[r34 + 8 >> 2] | 0) == (r12 | 0)) {
                break;
              }
              _abort();
            }
          } while (0);
          HEAP32[r33 + 12 >> 2] = r34;
          HEAP32[r34 + 8 >> 2] = r33;
        } else {
          r8 = r11;
          r4 = HEAP32[r10 + (r2 + 4)];
          r7 = HEAP32[((r9 | 4) >> 2) + r2];
          L2606 : do {
            if ((r7 | 0) == (r8 | 0)) {
              r24 = r9 + (r1 + 12) | 0;
              r19 = HEAP32[r24 >> 2];
              do {
                if ((r19 | 0) == 0) {
                  r25 = r9 + (r1 + 8) | 0;
                  r16 = HEAP32[r25 >> 2];
                  if ((r16 | 0) == 0) {
                    r35 = 0, r36 = r35 >> 2;
                    break L2606;
                  } else {
                    r37 = r16;
                    r38 = r25;
                    break;
                  }
                } else {
                  r37 = r19;
                  r38 = r24;
                }
              } while (0);
              while (1) {
                r24 = r37 + 20 | 0;
                if ((HEAP32[r24 >> 2] | 0) == 0) {
                  r19 = r37 + 16 | 0;
                  if ((HEAP32[r19 >> 2] | 0) == 0) {
                    break;
                  } else {
                    r39 = r19;
                  }
                } else {
                  r39 = r24;
                }
                r37 = HEAP32[r39 >> 2];
                r38 = r39;
              }
              if (r38 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              } else {
                HEAP32[r38 >> 2] = 0;
                r35 = r37, r36 = r35 >> 2;
                break;
              }
            } else {
              r24 = HEAP32[r2 + r10];
              if (r24 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              }
              r19 = r24 + 12 | 0;
              if ((HEAP32[r19 >> 2] | 0) != (r8 | 0)) {
                _abort();
              }
              r25 = r7 + 8 | 0;
              if ((HEAP32[r25 >> 2] | 0) == (r8 | 0)) {
                HEAP32[r19 >> 2] = r7;
                HEAP32[r25 >> 2] = r24;
                r35 = r7, r36 = r35 >> 2;
                break;
              } else {
                _abort();
              }
            }
          } while (0);
          if ((r4 | 0) == 0) {
            break;
          }
          r7 = r9 + (r1 + 20) | 0;
          r33 = (HEAP32[r7 >> 2] << 2) + 491444 | 0;
          do {
            if ((r8 | 0) == (HEAP32[r33 >> 2] | 0)) {
              HEAP32[r33 >> 2] = r35;
              if ((r35 | 0) != 0) {
                break;
              }
              HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r7 >> 2] ^ -1);
              break L2604;
            } else {
              if (r4 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              }
              r34 = r4 + 16 | 0;
              if ((HEAP32[r34 >> 2] | 0) == (r8 | 0)) {
                HEAP32[r34 >> 2] = r35;
              } else {
                HEAP32[r4 + 20 >> 2] = r35;
              }
              if ((r35 | 0) == 0) {
                break L2604;
              }
            }
          } while (0);
          if (r35 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          HEAP32[r36 + 6] = r4;
          r8 = HEAP32[r10 + (r2 + 2)];
          do {
            if ((r8 | 0) != 0) {
              if (r8 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              } else {
                HEAP32[r36 + 4] = r8;
                HEAP32[r8 + 24 >> 2] = r35;
                break;
              }
            }
          } while (0);
          r8 = HEAP32[r10 + (r2 + 3)];
          if ((r8 | 0) == 0) {
            break;
          }
          if (r8 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r36 + 5] = r8;
            HEAP32[r8 + 24 >> 2] = r35;
            break;
          }
        }
      } while (0);
      HEAP32[r21 + 1] = r6 | 1;
      HEAP32[(r6 >> 2) + r30] = r6;
      if ((r20 | 0) != (HEAP32[122790] | 0)) {
        r40 = r6;
        break;
      }
      HEAP32[122787] = r6;
      return;
    } else {
      HEAP32[r5 >> 2] = r31 & -2;
      HEAP32[r21 + 1] = r22 | 1;
      HEAP32[(r22 >> 2) + r30] = r22;
      r40 = r22;
    }
  } while (0);
  r22 = r40 >>> 3;
  if (r40 >>> 0 < 256) {
    r30 = r22 << 1;
    r31 = (r30 << 2) + 491180 | 0;
    r5 = HEAP32[122785];
    r35 = 1 << r22;
    do {
      if ((r5 & r35 | 0) == 0) {
        HEAP32[122785] = r5 | r35;
        r41 = r31;
      } else {
        r22 = HEAP32[(r30 + 2 << 2) + 491180 >> 2];
        if (r22 >>> 0 >= HEAP32[122789] >>> 0) {
          r41 = r22;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[(r30 + 2 << 2) + 491180 >> 2] = r20;
    HEAP32[r41 + 12 >> 2] = r20;
    HEAP32[r21 + 2] = r41;
    HEAP32[r21 + 3] = r31;
    return;
  }
  r31 = r20;
  r41 = r40 >>> 8;
  do {
    if ((r41 | 0) == 0) {
      r42 = 0;
    } else {
      if (r40 >>> 0 > 16777215) {
        r42 = 31;
        break;
      }
      r30 = (r41 + 1048320 | 0) >>> 16 & 8;
      r35 = r41 << r30;
      r5 = (r35 + 520192 | 0) >>> 16 & 4;
      r22 = r35 << r5;
      r35 = (r22 + 245760 | 0) >>> 16 & 2;
      r36 = 14 - (r5 | r30 | r35) + (r22 << r35 >>> 15) | 0;
      r42 = r40 >>> ((r36 + 7 | 0) >>> 0) & 1 | r36 << 1;
    }
  } while (0);
  r41 = (r42 << 2) + 491444 | 0;
  HEAP32[r21 + 7] = r42;
  HEAP32[r21 + 5] = 0;
  HEAP32[r21 + 4] = 0;
  r36 = HEAP32[122786];
  r35 = 1 << r42;
  do {
    if ((r36 & r35 | 0) == 0) {
      HEAP32[122786] = r36 | r35;
      HEAP32[r41 >> 2] = r31;
      HEAP32[r21 + 6] = r41;
      HEAP32[r21 + 3] = r20;
      HEAP32[r21 + 2] = r20;
    } else {
      if ((r42 | 0) == 31) {
        r43 = 0;
      } else {
        r43 = 25 - (r42 >>> 1) | 0;
      }
      r22 = r40 << r43;
      r30 = HEAP32[r41 >> 2];
      while (1) {
        if ((HEAP32[r30 + 4 >> 2] & -8 | 0) == (r40 | 0)) {
          break;
        }
        r44 = (r22 >>> 31 << 2) + r30 + 16 | 0;
        r5 = HEAP32[r44 >> 2];
        if ((r5 | 0) == 0) {
          r3 = 2070;
          break;
        } else {
          r22 = r22 << 1;
          r30 = r5;
        }
      }
      if (r3 == 2070) {
        if (r44 >>> 0 < HEAP32[122789] >>> 0) {
          _abort();
        } else {
          HEAP32[r44 >> 2] = r31;
          HEAP32[r21 + 6] = r30;
          HEAP32[r21 + 3] = r20;
          HEAP32[r21 + 2] = r20;
          break;
        }
      }
      r22 = r30 + 8 | 0;
      r6 = HEAP32[r22 >> 2];
      r5 = HEAP32[122789];
      if (r30 >>> 0 < r5 >>> 0) {
        _abort();
      }
      if (r6 >>> 0 < r5 >>> 0) {
        _abort();
      } else {
        HEAP32[r6 + 12 >> 2] = r31;
        HEAP32[r22 >> 2] = r31;
        HEAP32[r21 + 2] = r6;
        HEAP32[r21 + 3] = r30;
        HEAP32[r21 + 6] = 0;
        break;
      }
    }
  } while (0);
  r21 = HEAP32[122793] - 1 | 0;
  HEAP32[122793] = r21;
  if ((r21 | 0) != 0) {
    return;
  }
  _release_unused_segments();
  return;
}
function _release_unused_segments() {
  var r1, r2;
  r1 = 491596;
  while (1) {
    r2 = HEAP32[r1 >> 2];
    if ((r2 | 0) == 0) {
      break;
    } else {
      r1 = r2 + 8 | 0;
    }
  }
  HEAP32[122793] = -1;
  return;
}
function _sys_trim(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10;
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  if (r1 >>> 0 >= 4294967232) {
    r2 = 0;
    r3 = r2 & 1;
    return r3;
  }
  r4 = HEAP32[122791];
  if ((r4 | 0) == 0) {
    r2 = 0;
    r3 = r2 & 1;
    return r3;
  }
  r5 = HEAP32[122788];
  do {
    if (r5 >>> 0 > (r1 + 40 | 0) >>> 0) {
      r6 = HEAP32[111755];
      r7 = Math.imul(Math.floor(((-40 - r1 - 1 + r5 + r6 | 0) >>> 0) / (r6 >>> 0)) - 1 | 0, r6);
      r8 = _segment_holding(r4), r9 = r8 >> 2;
      if ((HEAP32[r9 + 3] & 8 | 0) != 0) {
        break;
      }
      r10 = _sbrk(0);
      if ((r10 | 0) != (HEAP32[r9] + HEAP32[r9 + 1] | 0)) {
        break;
      }
      r9 = _sbrk(-(r7 >>> 0 > 2147483646 ? -2147483648 - r6 | 0 : r7) | 0);
      r7 = _sbrk(0);
      if (!((r9 | 0) != -1 & r7 >>> 0 < r10 >>> 0)) {
        break;
      }
      r9 = r10 - r7 | 0;
      if ((r10 | 0) == (r7 | 0)) {
        break;
      }
      r6 = r8 + 4 | 0;
      HEAP32[r6 >> 2] = HEAP32[r6 >> 2] - r9 | 0;
      HEAP32[122893] = HEAP32[122893] - r9 | 0;
      _init_top(HEAP32[122791], HEAP32[122788] - r9 | 0);
      r2 = (r10 | 0) != (r7 | 0);
      r3 = r2 & 1;
      return r3;
    }
  } while (0);
  if (HEAP32[122788] >>> 0 <= HEAP32[122792] >>> 0) {
    r2 = 0;
    r3 = r2 & 1;
    return r3;
  }
  HEAP32[122792] = -1;
  r2 = 0;
  r3 = r2 & 1;
  return r3;
}
function _calloc(r1, r2) {
  var r3, r4;
  do {
    if ((r1 | 0) == 0) {
      r3 = 0;
    } else {
      r4 = Math.imul(r2, r1);
      if ((r2 | r1) >>> 0 <= 65535) {
        r3 = r4;
        break;
      }
      r3 = (Math.floor((r4 >>> 0) / (r1 >>> 0)) | 0) == (r2 | 0) ? r4 : -1;
    }
  } while (0);
  r2 = _malloc(r3);
  if ((r2 | 0) == 0) {
    return r2;
  }
  if ((HEAP32[r2 - 4 >> 2] & 3 | 0) == 0) {
    return r2;
  }
  _memset(r2, 0, r3);
  return r2;
}
function _realloc(r1, r2) {
  var r3, r4, r5, r6;
  if ((r1 | 0) == 0) {
    r3 = _malloc(r2);
    return r3;
  }
  if (r2 >>> 0 > 4294967231) {
    HEAP32[___errno_location() >> 2] = 12;
    r3 = 0;
    return r3;
  }
  if (r2 >>> 0 < 11) {
    r4 = 16;
  } else {
    r4 = r2 + 11 & -8;
  }
  r5 = _try_realloc_chunk(r1 - 8 | 0, r4);
  if ((r5 | 0) != 0) {
    r3 = r5 + 8 | 0;
    return r3;
  }
  r5 = _malloc(r2);
  if ((r5 | 0) == 0) {
    r3 = 0;
    return r3;
  }
  r4 = HEAP32[r1 - 4 >> 2];
  r6 = (r4 & -8) - ((r4 & 3 | 0) == 0 ? 8 : 4) | 0;
  _memcpy(r5, r1, r6 >>> 0 < r2 >>> 0 ? r6 : r2);
  _free(r1);
  r3 = r5;
  return r3;
}
function _realloc_in_place(r1, r2) {
  var r3;
  if ((r1 | 0) == 0) {
    return 0;
  }
  if (r2 >>> 0 > 4294967231) {
    HEAP32[___errno_location() >> 2] = 12;
    return 0;
  }
  if (r2 >>> 0 < 11) {
    r3 = 16;
  } else {
    r3 = r2 + 11 & -8;
  }
  r2 = r1 - 8 | 0;
  return (_try_realloc_chunk(r2, r3) | 0) == (r2 | 0) ? r1 : 0;
}
function _memalign(r1, r2) {
  var r3;
  if (r1 >>> 0 < 9) {
    r3 = _malloc(r2);
    return r3;
  } else {
    r3 = _internal_memalign(r1, r2);
    return r3;
  }
}
function _internal_memalign(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r3 = r1 >>> 0 < 16 ? 16 : r1;
  L2794 : do {
    if ((r3 - 1 & r3 | 0) == 0) {
      r4 = r3;
    } else {
      r1 = 16;
      while (1) {
        if (r1 >>> 0 < r3 >>> 0) {
          r1 = r1 << 1;
        } else {
          r4 = r1;
          break L2794;
        }
      }
    }
  } while (0);
  if ((-64 - r4 | 0) >>> 0 <= r2 >>> 0) {
    HEAP32[___errno_location() >> 2] = 12;
    r5 = 0;
    return r5;
  }
  if (r2 >>> 0 < 11) {
    r6 = 16;
  } else {
    r6 = r2 + 11 & -8;
  }
  r2 = _malloc(r6 + (r4 + 12) | 0);
  if ((r2 | 0) == 0) {
    r5 = 0;
    return r5;
  }
  r3 = r2 - 8 | 0;
  r1 = r3;
  r7 = r4 - 1 | 0;
  do {
    if ((r2 & r7 | 0) == 0) {
      r8 = r1;
    } else {
      r9 = r2 + r7 & -r4;
      r10 = r9 - 8 | 0;
      r11 = r3;
      if ((r10 - r11 | 0) >>> 0 > 15) {
        r12 = r10;
      } else {
        r12 = r9 + (r4 - 8) | 0;
      }
      r9 = r12;
      r10 = r12 - r11 | 0;
      r11 = (r2 - 4 | 0) >> 2;
      r13 = HEAP32[r11];
      r14 = (r13 & -8) - r10 | 0;
      if ((r13 & 3 | 0) == 0) {
        HEAP32[r12 >> 2] = HEAP32[r3 >> 2] + r10 | 0;
        HEAP32[r12 + 4 >> 2] = r14;
        r8 = r9;
        break;
      } else {
        r13 = r12 + 4 | 0;
        HEAP32[r13 >> 2] = r14 | HEAP32[r13 >> 2] & 1 | 2;
        r13 = r14 + (r12 + 4) | 0;
        HEAP32[r13 >> 2] = HEAP32[r13 >> 2] | 1;
        HEAP32[r11] = r10 | HEAP32[r11] & 1 | 2;
        r11 = r2 + (r10 - 4) | 0;
        HEAP32[r11 >> 2] = HEAP32[r11 >> 2] | 1;
        _dispose_chunk(r1, r10);
        r8 = r9;
        break;
      }
    }
  } while (0);
  r1 = r8 + 4 | 0;
  r2 = HEAP32[r1 >> 2];
  do {
    if ((r2 & 3 | 0) != 0) {
      r12 = r2 & -8;
      if (r12 >>> 0 <= (r6 + 16 | 0) >>> 0) {
        break;
      }
      r3 = r12 - r6 | 0;
      r4 = r8;
      HEAP32[r1 >> 2] = r6 | r2 & 1 | 2;
      HEAP32[r4 + (r6 | 4) >> 2] = r3 | 3;
      r7 = r4 + (r12 | 4) | 0;
      HEAP32[r7 >> 2] = HEAP32[r7 >> 2] | 1;
      _dispose_chunk(r4 + r6 | 0, r3);
    }
  } while (0);
  r5 = r8 + 8 | 0;
  return r5;
}
function _posix_memalign(r1, r2, r3) {
  var r4, r5, r6;
  do {
    if ((r2 | 0) == 8) {
      r4 = _malloc(r3);
    } else {
      r5 = r2 >>> 2;
      if ((r2 & 3 | 0) != 0 | (r5 | 0) == 0) {
        r6 = 22;
        return r6;
      }
      if ((r5 + 1073741823 & r5 | 0) != 0) {
        r6 = 22;
        return r6;
      }
      if ((-64 - r2 | 0) >>> 0 < r3 >>> 0) {
        r6 = 12;
        return r6;
      } else {
        r4 = _internal_memalign(r2 >>> 0 < 16 ? 16 : r2, r3);
        break;
      }
    }
  } while (0);
  if ((r4 | 0) == 0) {
    r6 = 12;
    return r6;
  }
  HEAP32[r1 >> 2] = r4;
  r6 = 0;
  return r6;
}
function _valloc(r1) {
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  return _memalign(HEAP32[111754], r1);
}
function _try_realloc_chunk(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29;
  r3 = (r1 + 4 | 0) >> 2;
  r4 = HEAP32[r3];
  r5 = r4 & -8, r6 = r5 >> 2;
  r7 = r1, r8 = r7 >> 2;
  r9 = r7 + r5 | 0;
  r10 = r9;
  r11 = HEAP32[122789];
  if (r7 >>> 0 < r11 >>> 0) {
    _abort();
  }
  r12 = r4 & 3;
  if (!((r12 | 0) != 1 & r7 >>> 0 < r9 >>> 0)) {
    _abort();
  }
  r13 = (r7 + (r5 | 4) | 0) >> 2;
  r14 = HEAP32[r13];
  if ((r14 & 1 | 0) == 0) {
    _abort();
  }
  if ((r12 | 0) == 0) {
    r15 = _mmap_resize(r1, r2);
    return r15;
  }
  if (r5 >>> 0 >= r2 >>> 0) {
    r12 = r5 - r2 | 0;
    if (r12 >>> 0 <= 15) {
      r15 = r1;
      return r15;
    }
    HEAP32[r3] = r4 & 1 | r2 | 2;
    HEAP32[(r2 + 4 >> 2) + r8] = r12 | 3;
    HEAP32[r13] = HEAP32[r13] | 1;
    _dispose_chunk(r7 + r2 | 0, r12);
    r15 = r1;
    return r15;
  }
  if ((r10 | 0) == (HEAP32[122791] | 0)) {
    r12 = HEAP32[122788] + r5 | 0;
    if (r12 >>> 0 <= r2 >>> 0) {
      r15 = 0;
      return r15;
    }
    r13 = r12 - r2 | 0;
    HEAP32[r3] = r4 & 1 | r2 | 2;
    HEAP32[(r2 + 4 >> 2) + r8] = r13 | 1;
    HEAP32[122791] = r7 + r2 | 0;
    HEAP32[122788] = r13;
    r15 = r1;
    return r15;
  }
  if ((r10 | 0) == (HEAP32[122790] | 0)) {
    r13 = HEAP32[122787] + r5 | 0;
    if (r13 >>> 0 < r2 >>> 0) {
      r15 = 0;
      return r15;
    }
    r12 = r13 - r2 | 0;
    if (r12 >>> 0 > 15) {
      HEAP32[r3] = r4 & 1 | r2 | 2;
      HEAP32[(r2 + 4 >> 2) + r8] = r12 | 1;
      HEAP32[(r13 >> 2) + r8] = r12;
      r16 = r13 + (r7 + 4) | 0;
      HEAP32[r16 >> 2] = HEAP32[r16 >> 2] & -2;
      r17 = r7 + r2 | 0;
      r18 = r12;
    } else {
      HEAP32[r3] = r4 & 1 | r13 | 2;
      r4 = r13 + (r7 + 4) | 0;
      HEAP32[r4 >> 2] = HEAP32[r4 >> 2] | 1;
      r17 = 0;
      r18 = 0;
    }
    HEAP32[122787] = r18;
    HEAP32[122790] = r17;
    r15 = r1;
    return r15;
  }
  if ((r14 & 2 | 0) != 0) {
    r15 = 0;
    return r15;
  }
  r17 = (r14 & -8) + r5 | 0;
  if (r17 >>> 0 < r2 >>> 0) {
    r15 = 0;
    return r15;
  }
  r18 = r17 - r2 | 0;
  r4 = r14 >>> 3;
  L2889 : do {
    if (r14 >>> 0 < 256) {
      r13 = HEAP32[r6 + (r8 + 2)];
      r12 = HEAP32[r6 + (r8 + 3)];
      r16 = (r4 << 3) + 491180 | 0;
      do {
        if ((r13 | 0) != (r16 | 0)) {
          if (r13 >>> 0 < r11 >>> 0) {
            _abort();
          }
          if ((HEAP32[r13 + 12 >> 2] | 0) == (r10 | 0)) {
            break;
          }
          _abort();
        }
      } while (0);
      if ((r12 | 0) == (r13 | 0)) {
        HEAP32[122785] = HEAP32[122785] & (1 << r4 ^ -1);
        break;
      }
      do {
        if ((r12 | 0) != (r16 | 0)) {
          if (r12 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          if ((HEAP32[r12 + 8 >> 2] | 0) == (r10 | 0)) {
            break;
          }
          _abort();
        }
      } while (0);
      HEAP32[r13 + 12 >> 2] = r12;
      HEAP32[r12 + 8 >> 2] = r13;
    } else {
      r16 = r9;
      r19 = HEAP32[r6 + (r8 + 6)];
      r20 = HEAP32[r6 + (r8 + 3)];
      L2891 : do {
        if ((r20 | 0) == (r16 | 0)) {
          r21 = r5 + (r7 + 20) | 0;
          r22 = HEAP32[r21 >> 2];
          do {
            if ((r22 | 0) == 0) {
              r23 = r5 + (r7 + 16) | 0;
              r24 = HEAP32[r23 >> 2];
              if ((r24 | 0) == 0) {
                r25 = 0, r26 = r25 >> 2;
                break L2891;
              } else {
                r27 = r24;
                r28 = r23;
                break;
              }
            } else {
              r27 = r22;
              r28 = r21;
            }
          } while (0);
          while (1) {
            r21 = r27 + 20 | 0;
            if ((HEAP32[r21 >> 2] | 0) == 0) {
              r22 = r27 + 16 | 0;
              if ((HEAP32[r22 >> 2] | 0) == 0) {
                break;
              } else {
                r29 = r22;
              }
            } else {
              r29 = r21;
            }
            r27 = HEAP32[r29 >> 2];
            r28 = r29;
          }
          if (r28 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r28 >> 2] = 0;
            r25 = r27, r26 = r25 >> 2;
            break;
          }
        } else {
          r21 = HEAP32[r6 + (r8 + 2)];
          if (r21 >>> 0 < r11 >>> 0) {
            _abort();
          }
          r22 = r21 + 12 | 0;
          if ((HEAP32[r22 >> 2] | 0) != (r16 | 0)) {
            _abort();
          }
          r23 = r20 + 8 | 0;
          if ((HEAP32[r23 >> 2] | 0) == (r16 | 0)) {
            HEAP32[r22 >> 2] = r20;
            HEAP32[r23 >> 2] = r21;
            r25 = r20, r26 = r25 >> 2;
            break;
          } else {
            _abort();
          }
        }
      } while (0);
      if ((r19 | 0) == 0) {
        break;
      }
      r20 = r5 + (r7 + 28) | 0;
      r13 = (HEAP32[r20 >> 2] << 2) + 491444 | 0;
      do {
        if ((r16 | 0) == (HEAP32[r13 >> 2] | 0)) {
          HEAP32[r13 >> 2] = r25;
          if ((r25 | 0) != 0) {
            break;
          }
          HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r20 >> 2] ^ -1);
          break L2889;
        } else {
          if (r19 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          r12 = r19 + 16 | 0;
          if ((HEAP32[r12 >> 2] | 0) == (r16 | 0)) {
            HEAP32[r12 >> 2] = r25;
          } else {
            HEAP32[r19 + 20 >> 2] = r25;
          }
          if ((r25 | 0) == 0) {
            break L2889;
          }
        }
      } while (0);
      if (r25 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      }
      HEAP32[r26 + 6] = r19;
      r16 = HEAP32[r6 + (r8 + 4)];
      do {
        if ((r16 | 0) != 0) {
          if (r16 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r26 + 4] = r16;
            HEAP32[r16 + 24 >> 2] = r25;
            break;
          }
        }
      } while (0);
      r16 = HEAP32[r6 + (r8 + 5)];
      if ((r16 | 0) == 0) {
        break;
      }
      if (r16 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      } else {
        HEAP32[r26 + 5] = r16;
        HEAP32[r16 + 24 >> 2] = r25;
        break;
      }
    }
  } while (0);
  if (r18 >>> 0 < 16) {
    HEAP32[r3] = r17 | HEAP32[r3] & 1 | 2;
    r25 = r7 + (r17 | 4) | 0;
    HEAP32[r25 >> 2] = HEAP32[r25 >> 2] | 1;
    r15 = r1;
    return r15;
  } else {
    HEAP32[r3] = HEAP32[r3] & 1 | r2 | 2;
    HEAP32[(r2 + 4 >> 2) + r8] = r18 | 3;
    r8 = r7 + (r17 | 4) | 0;
    HEAP32[r8 >> 2] = HEAP32[r8 >> 2] | 1;
    _dispose_chunk(r7 + r2 | 0, r18);
    r15 = r1;
    return r15;
  }
}
function _malloc_footprint() {
  return HEAP32[122893];
}
function _malloc_max_footprint() {
  return HEAP32[122894];
}
function _malloc_footprint_limit() {
  var r1;
  r1 = HEAP32[122895];
  return (r1 | 0) == 0 ? -1 : r1;
}
function _malloc_set_footprint_limit(r1) {
  var r2, r3;
  if ((r1 | 0) == -1) {
    r2 = 0;
  } else {
    r3 = HEAP32[111755];
    r2 = r1 - 1 + r3 & -r3;
  }
  HEAP32[122895] = r2;
  return r2;
}
function _malloc_usable_size(r1) {
  var r2, r3;
  if ((r1 | 0) == 0) {
    r2 = 0;
    return r2;
  }
  r3 = HEAP32[r1 - 4 >> 2];
  r1 = r3 & 3;
  if ((r1 | 0) == 1) {
    r2 = 0;
    return r2;
  }
  r2 = (r3 & -8) - ((r1 | 0) == 0 ? 8 : 4) | 0;
  return r2;
}
function _pvalloc(r1) {
  var r2;
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  r2 = HEAP32[111754];
  return _memalign(r2, r1 - 1 + r2 & -r2);
}
function _independent_calloc(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  HEAP32[r5 >> 2] = r2;
  r2 = _ialloc(r1, r5, 3, r3);
  STACKTOP = r4;
  return r2;
}
function _ialloc(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20;
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  r5 = (r1 | 0) == 0;
  do {
    if ((r4 | 0) == 0) {
      if (r5) {
        r6 = _malloc(0);
        return r6;
      } else {
        r7 = r1 << 2;
        if (r7 >>> 0 < 11) {
          r8 = 0;
          r9 = 16;
          break;
        }
        r8 = 0;
        r9 = r7 + 11 & -8;
        break;
      }
    } else {
      if (r5) {
        r6 = r4;
      } else {
        r8 = r4;
        r9 = 0;
        break;
      }
      return r6;
    }
  } while (0);
  L2999 : do {
    if ((r3 & 1 | 0) == 0) {
      if ((r1 | 0) == 0) {
        r10 = 0;
        r11 = 0;
        break;
      } else {
        r12 = 0;
        r13 = 0;
      }
      while (1) {
        r4 = HEAP32[r2 + (r13 << 2) >> 2];
        if (r4 >>> 0 < 11) {
          r14 = 16;
        } else {
          r14 = r4 + 11 & -8;
        }
        r4 = r14 + r12 | 0;
        r5 = r13 + 1 | 0;
        if ((r5 | 0) == (r1 | 0)) {
          r10 = 0;
          r11 = r4;
          break L2999;
        } else {
          r12 = r4;
          r13 = r5;
        }
      }
    } else {
      r5 = HEAP32[r2 >> 2];
      if (r5 >>> 0 < 11) {
        r15 = 16;
      } else {
        r15 = r5 + 11 & -8;
      }
      r10 = r15;
      r11 = Math.imul(r15, r1);
    }
  } while (0);
  r15 = _malloc(r9 - 4 + r11 | 0);
  if ((r15 | 0) == 0) {
    r6 = 0;
    return r6;
  }
  r13 = r15 - 8 | 0;
  r12 = HEAP32[r15 - 4 >> 2] & -8;
  if ((r3 & 2 | 0) != 0) {
    _memset(r15, 0, -4 - r9 + r12 | 0);
  }
  if ((r8 | 0) == 0) {
    HEAP32[r15 + (r11 - 4) >> 2] = r12 - r11 | 3;
    r16 = r15 + r11 | 0;
    r17 = r11;
  } else {
    r16 = r8;
    r17 = r12;
  }
  HEAP32[r16 >> 2] = r15;
  r15 = r1 - 1 | 0;
  L3020 : do {
    if ((r15 | 0) == 0) {
      r18 = r13;
      r19 = r17;
    } else {
      r1 = (r10 | 0) == 0;
      r12 = r13;
      r8 = r17;
      r11 = 0;
      while (1) {
        do {
          if (r1) {
            r9 = HEAP32[r2 + (r11 << 2) >> 2];
            if (r9 >>> 0 < 11) {
              r20 = 16;
              break;
            }
            r20 = r9 + 11 & -8;
          } else {
            r20 = r10;
          }
        } while (0);
        r9 = r8 - r20 | 0;
        HEAP32[r12 + 4 >> 2] = r20 | 3;
        r3 = r12 + r20 | 0;
        r14 = r11 + 1 | 0;
        HEAP32[r16 + (r14 << 2) >> 2] = r20 + (r12 + 8) | 0;
        if ((r14 | 0) == (r15 | 0)) {
          r18 = r3;
          r19 = r9;
          break L3020;
        } else {
          r12 = r3;
          r8 = r9;
          r11 = r14;
        }
      }
    }
  } while (0);
  HEAP32[r18 + 4 >> 2] = r19 | 3;
  r6 = r16;
  return r6;
}
function _independent_comalloc(r1, r2, r3) {
  return _ialloc(r1, r2, 0, r3);
}
function _bulk_free(r1, r2) {
  _internal_bulk_free(r1, r2);
  return 0;
}
function _malloc_trim(r1) {
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  return _sys_trim(r1);
}
function _mallinfo(r1) {
  _internal_mallinfo(r1);
  return;
}
function _internal_mallinfo(r1) {
  var r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33;
  r2 = r1 >> 2;
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  if ((HEAP32[122791] | 0) == 0) {
    r3 = 0;
    r4 = 0;
    r5 = 0;
    r6 = 0;
    r7 = 0;
    r8 = 0;
    r9 = 0;
  } else {
    r10 = HEAP32[122788] + 40 | 0;
    r11 = HEAP32[122791];
    r12 = 1;
    r13 = r10;
    r14 = r10;
    r10 = 491588;
    while (1) {
      r15 = (r10 | 0) >> 2;
      r16 = HEAP32[r15];
      r17 = r16 + 8 | 0;
      if ((r17 & 7 | 0) == 0) {
        r18 = 0;
      } else {
        r18 = -r17 & 7;
      }
      r17 = r16 + r18 | 0;
      r16 = HEAP32[r15];
      L3048 : do {
        if (r17 >>> 0 < r16 >>> 0) {
          r19 = r12;
          r20 = r13;
          r21 = r14;
        } else {
          r22 = HEAP32[r10 + 4 >> 2];
          r23 = r12;
          r24 = r13;
          r25 = r14;
          r26 = r17;
          r27 = r16;
          while (1) {
            if (r26 >>> 0 >= (r27 + r22 | 0) >>> 0 | (r26 | 0) == (r11 | 0)) {
              r19 = r23;
              r20 = r24;
              r21 = r25;
              break L3048;
            }
            r28 = r26 + 4 | 0;
            r29 = HEAP32[r28 >> 2];
            if ((r29 | 0) == 7) {
              r19 = r23;
              r20 = r24;
              r21 = r25;
              break L3048;
            }
            r30 = r29 & -8;
            r31 = r30 + r25 | 0;
            if ((r29 & 3 | 0) == 1) {
              r32 = r30 + r24 | 0;
              r33 = r23 + 1 | 0;
            } else {
              r32 = r24;
              r33 = r23;
            }
            r30 = r26 + (HEAP32[r28 >> 2] & -8) | 0;
            r28 = HEAP32[r15];
            if (r30 >>> 0 < r28 >>> 0) {
              r19 = r33;
              r20 = r32;
              r21 = r31;
              break L3048;
            } else {
              r23 = r33;
              r24 = r32;
              r25 = r31;
              r26 = r30;
              r27 = r28;
            }
          }
        }
      } while (0);
      r15 = HEAP32[r10 + 8 >> 2];
      if ((r15 | 0) == 0) {
        break;
      } else {
        r12 = r19;
        r13 = r20;
        r14 = r21;
        r10 = r15;
      }
    }
    r10 = HEAP32[122893];
    r3 = HEAP32[122788];
    r4 = r21;
    r5 = r19;
    r6 = r10 - r21 | 0;
    r7 = HEAP32[122894];
    r8 = r20;
    r9 = r10 - r20 | 0;
  }
  HEAP32[r2] = r4;
  HEAP32[r2 + 1] = r5;
  r5 = r1 + 8 | 0;
  HEAP32[r5 >> 2] = 0;
  HEAP32[r5 + 4 >> 2] = 0;
  HEAP32[r2 + 4] = r6;
  HEAP32[r2 + 5] = r7;
  HEAP32[r2 + 6] = 0;
  HEAP32[r2 + 7] = r9;
  HEAP32[r2 + 8] = r8;
  HEAP32[r2 + 9] = r3;
  return;
}
function _malloc_stats() {
  _internal_malloc_stats();
  return;
}
function _internal_malloc_stats() {
  var r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21;
  r1 = STACKTOP;
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  L3065 : do {
    if ((HEAP32[122791] | 0) == 0) {
      r2 = 0;
      r3 = 0;
      r4 = 0;
    } else {
      r5 = HEAP32[122894];
      r6 = HEAP32[122893];
      r7 = HEAP32[122791];
      r8 = r6 - 40 - HEAP32[122788] | 0;
      r9 = 491588;
      while (1) {
        r10 = (r9 | 0) >> 2;
        r11 = HEAP32[r10];
        r12 = r11 + 8 | 0;
        if ((r12 & 7 | 0) == 0) {
          r13 = 0;
        } else {
          r13 = -r12 & 7;
        }
        r12 = r11 + r13 | 0;
        r11 = HEAP32[r10];
        L3072 : do {
          if (r12 >>> 0 < r11 >>> 0) {
            r14 = r8;
          } else {
            r15 = HEAP32[r9 + 4 >> 2];
            r16 = r8;
            r17 = r12;
            r18 = r11;
            while (1) {
              if (r17 >>> 0 >= (r18 + r15 | 0) >>> 0 | (r17 | 0) == (r7 | 0)) {
                r14 = r16;
                break L3072;
              }
              r19 = r17 + 4 | 0;
              r20 = HEAP32[r19 >> 2];
              if ((r20 | 0) == 7) {
                r14 = r16;
                break L3072;
              }
              if ((r20 & 3 | 0) == 1) {
                r21 = r16 - (r20 & -8) | 0;
              } else {
                r21 = r16;
              }
              r20 = r17 + (HEAP32[r19 >> 2] & -8) | 0;
              r19 = HEAP32[r10];
              if (r20 >>> 0 < r19 >>> 0) {
                r14 = r21;
                break L3072;
              } else {
                r16 = r21;
                r17 = r20;
                r18 = r19;
              }
            }
          }
        } while (0);
        r10 = HEAP32[r9 + 8 >> 2];
        if ((r10 | 0) == 0) {
          r2 = r14;
          r3 = r6;
          r4 = r5;
          break L3065;
        } else {
          r8 = r14;
          r9 = r10;
        }
      }
    }
  } while (0);
  _fprintf(HEAP32[_stderr >> 2], 484500, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  _fprintf(HEAP32[_stderr >> 2], 488844, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r3, tempInt));
  _fprintf(HEAP32[_stderr >> 2], 480600, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
  STACKTOP = r1;
  return;
}
function _mallopt(r1, r2) {
  return _change_mparam(r1, r2);
}
function _change_mparam(r1, r2) {
  var r3;
  if ((HEAP32[111753] | 0) == 0) {
    _init_mparams();
  }
  do {
    if ((r1 | 0) == -1) {
      HEAP32[111757] = r2;
      r3 = 1;
    } else if ((r1 | 0) == -2) {
      if (HEAP32[111754] >>> 0 > r2 >>> 0) {
        r3 = 0;
        break;
      }
      if ((r2 - 1 & r2 | 0) != 0) {
        r3 = 0;
        break;
      }
      HEAP32[111755] = r2;
      r3 = 1;
    } else if ((r1 | 0) == -3) {
      HEAP32[111756] = r2;
      r3 = 1;
    } else {
      r3 = 0;
    }
  } while (0);
  return r3;
}
function _init_mparams() {
  var r1;
  if ((HEAP32[111753] | 0) != 0) {
    return;
  }
  r1 = _sysconf(8);
  if ((r1 - 1 & r1 | 0) != 0) {
    _abort();
  }
  HEAP32[111755] = r1;
  HEAP32[111754] = r1;
  HEAP32[111756] = -1;
  HEAP32[111757] = 2097152;
  HEAP32[111758] = 0;
  HEAP32[122896] = 0;
  HEAP32[111753] = _time(0) & -16 ^ 1431655768;
  return;
}
function _internal_bulk_free(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
  r3 = 0;
  r4 = (r2 << 2) + r1 | 0;
  L3104 : do {
    if ((r2 | 0) != 0) {
      r5 = r1;
      L3105 : while (1) {
        r6 = HEAP32[r5 >> 2];
        L3107 : do {
          if ((r6 | 0) != 0) {
            r7 = r6 - 8 | 0;
            r8 = r7;
            r9 = (r6 - 4 | 0) >> 2;
            r10 = HEAP32[r9] & -8;
            HEAP32[r5 >> 2] = 0;
            if (r7 >>> 0 < HEAP32[122789] >>> 0) {
              r3 = 2423;
              break L3105;
            }
            r7 = HEAP32[r9];
            if ((r7 & 3 | 0) == 1) {
              r3 = 2424;
              break L3105;
            }
            r11 = r5 + 4 | 0;
            r12 = r7 - 8 & -8;
            do {
              if ((r11 | 0) != (r4 | 0)) {
                if ((HEAP32[r11 >> 2] | 0) != (r12 + (r6 + 8) | 0)) {
                  break;
                }
                r13 = (HEAP32[r6 + (r12 | 4) >> 2] & -8) + r10 | 0;
                HEAP32[r9] = r7 & 1 | r13 | 2;
                r14 = r6 + (r13 - 4) | 0;
                HEAP32[r14 >> 2] = HEAP32[r14 >> 2] | 1;
                HEAP32[r11 >> 2] = r6;
                break L3107;
              }
            } while (0);
            _dispose_chunk(r8, r10);
          }
        } while (0);
        r6 = r5 + 4 | 0;
        if ((r6 | 0) == (r4 | 0)) {
          break L3104;
        } else {
          r5 = r6;
        }
      }
      if (r3 == 2423) {
        _abort();
      } else if (r3 == 2424) {
        _abort();
      }
    }
  } while (0);
  if (HEAP32[122788] >>> 0 <= HEAP32[122792] >>> 0) {
    return;
  }
  _sys_trim(0);
  return;
}
function _mmap_resize(r1, r2) {
  var r3, r4;
  r3 = HEAP32[r1 + 4 >> 2] & -8;
  if (r2 >>> 0 < 256) {
    r4 = 0;
    return r4;
  }
  do {
    if (r3 >>> 0 >= (r2 + 4 | 0) >>> 0) {
      if ((r3 - r2 | 0) >>> 0 > HEAP32[111755] << 1 >>> 0) {
        break;
      } else {
        r4 = r1;
      }
      return r4;
    }
  } while (0);
  r4 = 0;
  return r4;
}
function _segment_holding(r1) {
  var r2, r3, r4, r5, r6;
  r2 = 0;
  r3 = 491588, r4 = r3 >> 2;
  while (1) {
    r5 = HEAP32[r4];
    if (r5 >>> 0 <= r1 >>> 0) {
      if ((r5 + HEAP32[r4 + 1] | 0) >>> 0 > r1 >>> 0) {
        r6 = r3;
        r2 = 2438;
        break;
      }
    }
    r5 = HEAP32[r4 + 2];
    if ((r5 | 0) == 0) {
      r6 = 0;
      r2 = 2439;
      break;
    } else {
      r3 = r5, r4 = r3 >> 2;
    }
  }
  if (r2 == 2438) {
    return r6;
  } else if (r2 == 2439) {
    return r6;
  }
}
function _dispose_chunk(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42;
  r3 = r2 >> 2;
  r4 = 0;
  r5 = r1, r6 = r5 >> 2;
  r7 = r5 + r2 | 0;
  r8 = r7;
  r9 = HEAP32[r1 + 4 >> 2];
  L3143 : do {
    if ((r9 & 1 | 0) == 0) {
      r10 = HEAP32[r1 >> 2];
      if ((r9 & 3 | 0) == 0) {
        return;
      }
      r11 = r5 + -r10 | 0;
      r12 = r11;
      r13 = r10 + r2 | 0;
      r14 = HEAP32[122789];
      if (r11 >>> 0 < r14 >>> 0) {
        _abort();
      }
      if ((r12 | 0) == (HEAP32[122790] | 0)) {
        r15 = (r2 + (r5 + 4) | 0) >> 2;
        if ((HEAP32[r15] & 3 | 0) != 3) {
          r16 = r12, r17 = r16 >> 2;
          r18 = r13;
          break;
        }
        HEAP32[122787] = r13;
        HEAP32[r15] = HEAP32[r15] & -2;
        HEAP32[(4 - r10 >> 2) + r6] = r13 | 1;
        HEAP32[r7 >> 2] = r13;
        return;
      }
      r15 = r10 >>> 3;
      if (r10 >>> 0 < 256) {
        r19 = HEAP32[(8 - r10 >> 2) + r6];
        r20 = HEAP32[(12 - r10 >> 2) + r6];
        r21 = (r15 << 3) + 491180 | 0;
        do {
          if ((r19 | 0) != (r21 | 0)) {
            if (r19 >>> 0 < r14 >>> 0) {
              _abort();
            }
            if ((HEAP32[r19 + 12 >> 2] | 0) == (r12 | 0)) {
              break;
            }
            _abort();
          }
        } while (0);
        if ((r20 | 0) == (r19 | 0)) {
          HEAP32[122785] = HEAP32[122785] & (1 << r15 ^ -1);
          r16 = r12, r17 = r16 >> 2;
          r18 = r13;
          break;
        }
        do {
          if ((r20 | 0) != (r21 | 0)) {
            if (r20 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            }
            if ((HEAP32[r20 + 8 >> 2] | 0) == (r12 | 0)) {
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[r19 + 12 >> 2] = r20;
        HEAP32[r20 + 8 >> 2] = r19;
        r16 = r12, r17 = r16 >> 2;
        r18 = r13;
        break;
      }
      r21 = r11;
      r15 = HEAP32[(24 - r10 >> 2) + r6];
      r22 = HEAP32[(12 - r10 >> 2) + r6];
      L3176 : do {
        if ((r22 | 0) == (r21 | 0)) {
          r23 = 16 - r10 | 0;
          r24 = r23 + (r5 + 4) | 0;
          r25 = HEAP32[r24 >> 2];
          do {
            if ((r25 | 0) == 0) {
              r26 = r5 + r23 | 0;
              r27 = HEAP32[r26 >> 2];
              if ((r27 | 0) == 0) {
                r28 = 0, r29 = r28 >> 2;
                break L3176;
              } else {
                r30 = r27;
                r31 = r26;
                break;
              }
            } else {
              r30 = r25;
              r31 = r24;
            }
          } while (0);
          while (1) {
            r24 = r30 + 20 | 0;
            if ((HEAP32[r24 >> 2] | 0) == 0) {
              r25 = r30 + 16 | 0;
              if ((HEAP32[r25 >> 2] | 0) == 0) {
                break;
              } else {
                r32 = r25;
              }
            } else {
              r32 = r24;
            }
            r30 = HEAP32[r32 >> 2];
            r31 = r32;
          }
          if (r31 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r31 >> 2] = 0;
            r28 = r30, r29 = r28 >> 2;
            break;
          }
        } else {
          r24 = HEAP32[(8 - r10 >> 2) + r6];
          if (r24 >>> 0 < r14 >>> 0) {
            _abort();
          }
          r25 = r24 + 12 | 0;
          if ((HEAP32[r25 >> 2] | 0) != (r21 | 0)) {
            _abort();
          }
          r23 = r22 + 8 | 0;
          if ((HEAP32[r23 >> 2] | 0) == (r21 | 0)) {
            HEAP32[r25 >> 2] = r22;
            HEAP32[r23 >> 2] = r24;
            r28 = r22, r29 = r28 >> 2;
            break;
          } else {
            _abort();
          }
        }
      } while (0);
      if ((r15 | 0) == 0) {
        r16 = r12, r17 = r16 >> 2;
        r18 = r13;
        break;
      }
      r22 = r5 + (28 - r10) | 0;
      r14 = (HEAP32[r22 >> 2] << 2) + 491444 | 0;
      do {
        if ((r21 | 0) == (HEAP32[r14 >> 2] | 0)) {
          HEAP32[r14 >> 2] = r28;
          if ((r28 | 0) != 0) {
            break;
          }
          HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r22 >> 2] ^ -1);
          r16 = r12, r17 = r16 >> 2;
          r18 = r13;
          break L3143;
        } else {
          if (r15 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          r11 = r15 + 16 | 0;
          if ((HEAP32[r11 >> 2] | 0) == (r21 | 0)) {
            HEAP32[r11 >> 2] = r28;
          } else {
            HEAP32[r15 + 20 >> 2] = r28;
          }
          if ((r28 | 0) == 0) {
            r16 = r12, r17 = r16 >> 2;
            r18 = r13;
            break L3143;
          }
        }
      } while (0);
      if (r28 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      }
      HEAP32[r29 + 6] = r15;
      r21 = 16 - r10 | 0;
      r22 = HEAP32[(r21 >> 2) + r6];
      do {
        if ((r22 | 0) != 0) {
          if (r22 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r29 + 4] = r22;
            HEAP32[r22 + 24 >> 2] = r28;
            break;
          }
        }
      } while (0);
      r22 = HEAP32[(r21 + 4 >> 2) + r6];
      if ((r22 | 0) == 0) {
        r16 = r12, r17 = r16 >> 2;
        r18 = r13;
        break;
      }
      if (r22 >>> 0 < HEAP32[122789] >>> 0) {
        _abort();
      } else {
        HEAP32[r29 + 5] = r22;
        HEAP32[r22 + 24 >> 2] = r28;
        r16 = r12, r17 = r16 >> 2;
        r18 = r13;
        break;
      }
    } else {
      r16 = r1, r17 = r16 >> 2;
      r18 = r2;
    }
  } while (0);
  r1 = HEAP32[122789];
  if (r7 >>> 0 < r1 >>> 0) {
    _abort();
  }
  r28 = r2 + (r5 + 4) | 0;
  r29 = HEAP32[r28 >> 2];
  do {
    if ((r29 & 2 | 0) == 0) {
      if ((r8 | 0) == (HEAP32[122791] | 0)) {
        r30 = HEAP32[122788] + r18 | 0;
        HEAP32[122788] = r30;
        HEAP32[122791] = r16;
        HEAP32[r17 + 1] = r30 | 1;
        if ((r16 | 0) != (HEAP32[122790] | 0)) {
          return;
        }
        HEAP32[122790] = 0;
        HEAP32[122787] = 0;
        return;
      }
      if ((r8 | 0) == (HEAP32[122790] | 0)) {
        r30 = HEAP32[122787] + r18 | 0;
        HEAP32[122787] = r30;
        HEAP32[122790] = r16;
        HEAP32[r17 + 1] = r30 | 1;
        HEAP32[(r30 >> 2) + r17] = r30;
        return;
      }
      r30 = (r29 & -8) + r18 | 0;
      r31 = r29 >>> 3;
      L3244 : do {
        if (r29 >>> 0 < 256) {
          r32 = HEAP32[r3 + (r6 + 2)];
          r9 = HEAP32[r3 + (r6 + 3)];
          r22 = (r31 << 3) + 491180 | 0;
          do {
            if ((r32 | 0) != (r22 | 0)) {
              if (r32 >>> 0 < r1 >>> 0) {
                _abort();
              }
              if ((HEAP32[r32 + 12 >> 2] | 0) == (r8 | 0)) {
                break;
              }
              _abort();
            }
          } while (0);
          if ((r9 | 0) == (r32 | 0)) {
            HEAP32[122785] = HEAP32[122785] & (1 << r31 ^ -1);
            break;
          }
          do {
            if ((r9 | 0) != (r22 | 0)) {
              if (r9 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              }
              if ((HEAP32[r9 + 8 >> 2] | 0) == (r8 | 0)) {
                break;
              }
              _abort();
            }
          } while (0);
          HEAP32[r32 + 12 >> 2] = r9;
          HEAP32[r9 + 8 >> 2] = r32;
        } else {
          r22 = r7;
          r10 = HEAP32[r3 + (r6 + 6)];
          r15 = HEAP32[r3 + (r6 + 3)];
          L3246 : do {
            if ((r15 | 0) == (r22 | 0)) {
              r14 = r2 + (r5 + 20) | 0;
              r11 = HEAP32[r14 >> 2];
              do {
                if ((r11 | 0) == 0) {
                  r19 = r2 + (r5 + 16) | 0;
                  r20 = HEAP32[r19 >> 2];
                  if ((r20 | 0) == 0) {
                    r33 = 0, r34 = r33 >> 2;
                    break L3246;
                  } else {
                    r35 = r20;
                    r36 = r19;
                    break;
                  }
                } else {
                  r35 = r11;
                  r36 = r14;
                }
              } while (0);
              while (1) {
                r14 = r35 + 20 | 0;
                if ((HEAP32[r14 >> 2] | 0) == 0) {
                  r11 = r35 + 16 | 0;
                  if ((HEAP32[r11 >> 2] | 0) == 0) {
                    break;
                  } else {
                    r37 = r11;
                  }
                } else {
                  r37 = r14;
                }
                r35 = HEAP32[r37 >> 2];
                r36 = r37;
              }
              if (r36 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              } else {
                HEAP32[r36 >> 2] = 0;
                r33 = r35, r34 = r33 >> 2;
                break;
              }
            } else {
              r14 = HEAP32[r3 + (r6 + 2)];
              if (r14 >>> 0 < r1 >>> 0) {
                _abort();
              }
              r11 = r14 + 12 | 0;
              if ((HEAP32[r11 >> 2] | 0) != (r22 | 0)) {
                _abort();
              }
              r19 = r15 + 8 | 0;
              if ((HEAP32[r19 >> 2] | 0) == (r22 | 0)) {
                HEAP32[r11 >> 2] = r15;
                HEAP32[r19 >> 2] = r14;
                r33 = r15, r34 = r33 >> 2;
                break;
              } else {
                _abort();
              }
            }
          } while (0);
          if ((r10 | 0) == 0) {
            break;
          }
          r15 = r2 + (r5 + 28) | 0;
          r32 = (HEAP32[r15 >> 2] << 2) + 491444 | 0;
          do {
            if ((r22 | 0) == (HEAP32[r32 >> 2] | 0)) {
              HEAP32[r32 >> 2] = r33;
              if ((r33 | 0) != 0) {
                break;
              }
              HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r15 >> 2] ^ -1);
              break L3244;
            } else {
              if (r10 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              }
              r9 = r10 + 16 | 0;
              if ((HEAP32[r9 >> 2] | 0) == (r22 | 0)) {
                HEAP32[r9 >> 2] = r33;
              } else {
                HEAP32[r10 + 20 >> 2] = r33;
              }
              if ((r33 | 0) == 0) {
                break L3244;
              }
            }
          } while (0);
          if (r33 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          }
          HEAP32[r34 + 6] = r10;
          r22 = HEAP32[r3 + (r6 + 4)];
          do {
            if ((r22 | 0) != 0) {
              if (r22 >>> 0 < HEAP32[122789] >>> 0) {
                _abort();
              } else {
                HEAP32[r34 + 4] = r22;
                HEAP32[r22 + 24 >> 2] = r33;
                break;
              }
            }
          } while (0);
          r22 = HEAP32[r3 + (r6 + 5)];
          if ((r22 | 0) == 0) {
            break;
          }
          if (r22 >>> 0 < HEAP32[122789] >>> 0) {
            _abort();
          } else {
            HEAP32[r34 + 5] = r22;
            HEAP32[r22 + 24 >> 2] = r33;
            break;
          }
        }
      } while (0);
      HEAP32[r17 + 1] = r30 | 1;
      HEAP32[(r30 >> 2) + r17] = r30;
      if ((r16 | 0) != (HEAP32[122790] | 0)) {
        r38 = r30;
        break;
      }
      HEAP32[122787] = r30;
      return;
    } else {
      HEAP32[r28 >> 2] = r29 & -2;
      HEAP32[r17 + 1] = r18 | 1;
      HEAP32[(r18 >> 2) + r17] = r18;
      r38 = r18;
    }
  } while (0);
  r18 = r38 >>> 3;
  if (r38 >>> 0 < 256) {
    r29 = r18 << 1;
    r28 = (r29 << 2) + 491180 | 0;
    r33 = HEAP32[122785];
    r34 = 1 << r18;
    do {
      if ((r33 & r34 | 0) == 0) {
        HEAP32[122785] = r33 | r34;
        r39 = r28;
      } else {
        r18 = HEAP32[(r29 + 2 << 2) + 491180 >> 2];
        if (r18 >>> 0 >= HEAP32[122789] >>> 0) {
          r39 = r18;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[(r29 + 2 << 2) + 491180 >> 2] = r16;
    HEAP32[r39 + 12 >> 2] = r16;
    HEAP32[r17 + 2] = r39;
    HEAP32[r17 + 3] = r28;
    return;
  }
  r28 = r16;
  r39 = r38 >>> 8;
  do {
    if ((r39 | 0) == 0) {
      r40 = 0;
    } else {
      if (r38 >>> 0 > 16777215) {
        r40 = 31;
        break;
      }
      r29 = (r39 + 1048320 | 0) >>> 16 & 8;
      r34 = r39 << r29;
      r33 = (r34 + 520192 | 0) >>> 16 & 4;
      r18 = r34 << r33;
      r34 = (r18 + 245760 | 0) >>> 16 & 2;
      r6 = 14 - (r33 | r29 | r34) + (r18 << r34 >>> 15) | 0;
      r40 = r38 >>> ((r6 + 7 | 0) >>> 0) & 1 | r6 << 1;
    }
  } while (0);
  r39 = (r40 << 2) + 491444 | 0;
  HEAP32[r17 + 7] = r40;
  HEAP32[r17 + 5] = 0;
  HEAP32[r17 + 4] = 0;
  r6 = HEAP32[122786];
  r34 = 1 << r40;
  if ((r6 & r34 | 0) == 0) {
    HEAP32[122786] = r6 | r34;
    HEAP32[r39 >> 2] = r28;
    HEAP32[r17 + 6] = r39;
    HEAP32[r17 + 3] = r16;
    HEAP32[r17 + 2] = r16;
    return;
  }
  if ((r40 | 0) == 31) {
    r41 = 0;
  } else {
    r41 = 25 - (r40 >>> 1) | 0;
  }
  r40 = r38 << r41;
  r41 = HEAP32[r39 >> 2];
  while (1) {
    if ((HEAP32[r41 + 4 >> 2] & -8 | 0) == (r38 | 0)) {
      break;
    }
    r42 = (r40 >>> 31 << 2) + r41 + 16 | 0;
    r39 = HEAP32[r42 >> 2];
    if ((r39 | 0) == 0) {
      r4 = 2565;
      break;
    } else {
      r40 = r40 << 1;
      r41 = r39;
    }
  }
  if (r4 == 2565) {
    if (r42 >>> 0 < HEAP32[122789] >>> 0) {
      _abort();
    }
    HEAP32[r42 >> 2] = r28;
    HEAP32[r17 + 6] = r41;
    HEAP32[r17 + 3] = r16;
    HEAP32[r17 + 2] = r16;
    return;
  }
  r16 = r41 + 8 | 0;
  r42 = HEAP32[r16 >> 2];
  r4 = HEAP32[122789];
  if (r41 >>> 0 < r4 >>> 0) {
    _abort();
  }
  if (r42 >>> 0 < r4 >>> 0) {
    _abort();
  }
  HEAP32[r42 + 12 >> 2] = r28;
  HEAP32[r16 >> 2] = r28;
  HEAP32[r17 + 2] = r42;
  HEAP32[r17 + 3] = r41;
  HEAP32[r17 + 6] = 0;
  return;
}
function _init_top(r1, r2) {
  var r3, r4, r5;
  r3 = r1;
  r4 = r1 + 8 | 0;
  if ((r4 & 7 | 0) == 0) {
    r5 = 0;
  } else {
    r5 = -r4 & 7;
  }
  r4 = r2 - r5 | 0;
  HEAP32[122791] = r3 + r5 | 0;
  HEAP32[122788] = r4;
  HEAP32[r5 + (r3 + 4) >> 2] = r4 | 1;
  HEAP32[r2 + (r3 + 4) >> 2] = 40;
  HEAP32[122792] = HEAP32[111757];
  return;
}
function _init_bins() {
  var r1, r2, r3;
  r1 = 0;
  while (1) {
    r2 = r1 << 1;
    r3 = (r2 << 2) + 491180 | 0;
    HEAP32[(r2 + 3 << 2) + 491180 >> 2] = r3;
    HEAP32[(r2 + 2 << 2) + 491180 >> 2] = r3;
    r3 = r1 + 1 | 0;
    if ((r3 | 0) == 32) {
      break;
    } else {
      r1 = r3;
    }
  }
  return;
}
function _mmap_alloc() {}
function _prepend_alloc(r1, r2, r3) {
  var r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40;
  r4 = r2 >> 2;
  r5 = r1 >> 2;
  r6 = 0;
  r7 = r1 + 8 | 0;
  if ((r7 & 7 | 0) == 0) {
    r8 = 0;
  } else {
    r8 = -r7 & 7;
  }
  r7 = r2 + 8 | 0;
  if ((r7 & 7 | 0) == 0) {
    r9 = 0, r10 = r9 >> 2;
  } else {
    r9 = -r7 & 7, r10 = r9 >> 2;
  }
  r7 = r2 + r9 | 0;
  r11 = r7;
  r12 = r8 + r3 | 0, r13 = r12 >> 2;
  r14 = r1 + r12 | 0;
  r12 = r14;
  r15 = r7 - (r1 + r8) - r3 | 0;
  HEAP32[(r8 + 4 >> 2) + r5] = r3 | 3;
  if ((r11 | 0) == (HEAP32[122791] | 0)) {
    r3 = HEAP32[122788] + r15 | 0;
    HEAP32[122788] = r3;
    HEAP32[122791] = r12;
    HEAP32[r13 + (r5 + 1)] = r3 | 1;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  if ((r11 | 0) == (HEAP32[122790] | 0)) {
    r3 = HEAP32[122787] + r15 | 0;
    HEAP32[122787] = r3;
    HEAP32[122790] = r12;
    HEAP32[r13 + (r5 + 1)] = r3 | 1;
    HEAP32[(r3 >> 2) + r5 + r13] = r3;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  r3 = HEAP32[r10 + (r4 + 1)];
  if ((r3 & 3 | 0) == 1) {
    r18 = r3 & -8;
    r19 = r3 >>> 3;
    L3381 : do {
      if (r3 >>> 0 < 256) {
        r20 = HEAP32[((r9 | 8) >> 2) + r4];
        r21 = HEAP32[r10 + (r4 + 3)];
        r22 = (r19 << 3) + 491180 | 0;
        do {
          if ((r20 | 0) != (r22 | 0)) {
            if (r20 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            }
            if ((HEAP32[r20 + 12 >> 2] | 0) == (r11 | 0)) {
              break;
            }
            _abort();
          }
        } while (0);
        if ((r21 | 0) == (r20 | 0)) {
          HEAP32[122785] = HEAP32[122785] & (1 << r19 ^ -1);
          break;
        }
        do {
          if ((r21 | 0) != (r22 | 0)) {
            if (r21 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            }
            if ((HEAP32[r21 + 8 >> 2] | 0) == (r11 | 0)) {
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[r20 + 12 >> 2] = r21;
        HEAP32[r21 + 8 >> 2] = r20;
      } else {
        r22 = r7;
        r23 = HEAP32[((r9 | 24) >> 2) + r4];
        r24 = HEAP32[r10 + (r4 + 3)];
        L3383 : do {
          if ((r24 | 0) == (r22 | 0)) {
            r25 = r9 | 16;
            r26 = r25 + (r2 + 4) | 0;
            r27 = HEAP32[r26 >> 2];
            do {
              if ((r27 | 0) == 0) {
                r28 = r2 + r25 | 0;
                r29 = HEAP32[r28 >> 2];
                if ((r29 | 0) == 0) {
                  r30 = 0, r31 = r30 >> 2;
                  break L3383;
                } else {
                  r32 = r29;
                  r33 = r28;
                  break;
                }
              } else {
                r32 = r27;
                r33 = r26;
              }
            } while (0);
            while (1) {
              r26 = r32 + 20 | 0;
              if ((HEAP32[r26 >> 2] | 0) == 0) {
                r27 = r32 + 16 | 0;
                if ((HEAP32[r27 >> 2] | 0) == 0) {
                  break;
                } else {
                  r34 = r27;
                }
              } else {
                r34 = r26;
              }
              r32 = HEAP32[r34 >> 2];
              r33 = r34;
            }
            if (r33 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            } else {
              HEAP32[r33 >> 2] = 0;
              r30 = r32, r31 = r30 >> 2;
              break;
            }
          } else {
            r26 = HEAP32[((r9 | 8) >> 2) + r4];
            if (r26 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            }
            r27 = r26 + 12 | 0;
            if ((HEAP32[r27 >> 2] | 0) != (r22 | 0)) {
              _abort();
            }
            r25 = r24 + 8 | 0;
            if ((HEAP32[r25 >> 2] | 0) == (r22 | 0)) {
              HEAP32[r27 >> 2] = r24;
              HEAP32[r25 >> 2] = r26;
              r30 = r24, r31 = r30 >> 2;
              break;
            } else {
              _abort();
            }
          }
        } while (0);
        if ((r23 | 0) == 0) {
          break;
        }
        r24 = r9 + (r2 + 28) | 0;
        r20 = (HEAP32[r24 >> 2] << 2) + 491444 | 0;
        do {
          if ((r22 | 0) == (HEAP32[r20 >> 2] | 0)) {
            HEAP32[r20 >> 2] = r30;
            if ((r30 | 0) != 0) {
              break;
            }
            HEAP32[122786] = HEAP32[122786] & (1 << HEAP32[r24 >> 2] ^ -1);
            break L3381;
          } else {
            if (r23 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            }
            r21 = r23 + 16 | 0;
            if ((HEAP32[r21 >> 2] | 0) == (r22 | 0)) {
              HEAP32[r21 >> 2] = r30;
            } else {
              HEAP32[r23 + 20 >> 2] = r30;
            }
            if ((r30 | 0) == 0) {
              break L3381;
            }
          }
        } while (0);
        if (r30 >>> 0 < HEAP32[122789] >>> 0) {
          _abort();
        }
        HEAP32[r31 + 6] = r23;
        r22 = r9 | 16;
        r24 = HEAP32[(r22 >> 2) + r4];
        do {
          if ((r24 | 0) != 0) {
            if (r24 >>> 0 < HEAP32[122789] >>> 0) {
              _abort();
            } else {
              HEAP32[r31 + 4] = r24;
              HEAP32[r24 + 24 >> 2] = r30;
              break;
            }
          }
        } while (0);
        r24 = HEAP32[(r22 + 4 >> 2) + r4];
        if ((r24 | 0) == 0) {
          break;
        }
        if (r24 >>> 0 < HEAP32[122789] >>> 0) {
          _abort();
        } else {
          HEAP32[r31 + 5] = r24;
          HEAP32[r24 + 24 >> 2] = r30;
          break;
        }
      }
    } while (0);
    r35 = r2 + (r18 | r9) | 0;
    r36 = r18 + r15 | 0;
  } else {
    r35 = r11;
    r36 = r15;
  }
  r15 = r35 + 4 | 0;
  HEAP32[r15 >> 2] = HEAP32[r15 >> 2] & -2;
  HEAP32[r13 + (r5 + 1)] = r36 | 1;
  HEAP32[(r36 >> 2) + r5 + r13] = r36;
  r15 = r36 >>> 3;
  if (r36 >>> 0 < 256) {
    r35 = r15 << 1;
    r11 = (r35 << 2) + 491180 | 0;
    r18 = HEAP32[122785];
    r9 = 1 << r15;
    do {
      if ((r18 & r9 | 0) == 0) {
        HEAP32[122785] = r18 | r9;
        r37 = r11;
      } else {
        r15 = HEAP32[(r35 + 2 << 2) + 491180 >> 2];
        if (r15 >>> 0 >= HEAP32[122789] >>> 0) {
          r37 = r15;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[(r35 + 2 << 2) + 491180 >> 2] = r12;
    HEAP32[r37 + 12 >> 2] = r12;
    HEAP32[r13 + (r5 + 2)] = r37;
    HEAP32[r13 + (r5 + 3)] = r11;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  r11 = r14;
  r14 = r36 >>> 8;
  do {
    if ((r14 | 0) == 0) {
      r38 = 0;
    } else {
      if (r36 >>> 0 > 16777215) {
        r38 = 31;
        break;
      }
      r37 = (r14 + 1048320 | 0) >>> 16 & 8;
      r12 = r14 << r37;
      r35 = (r12 + 520192 | 0) >>> 16 & 4;
      r9 = r12 << r35;
      r12 = (r9 + 245760 | 0) >>> 16 & 2;
      r18 = 14 - (r35 | r37 | r12) + (r9 << r12 >>> 15) | 0;
      r38 = r36 >>> ((r18 + 7 | 0) >>> 0) & 1 | r18 << 1;
    }
  } while (0);
  r14 = (r38 << 2) + 491444 | 0;
  HEAP32[r13 + (r5 + 7)] = r38;
  HEAP32[r13 + (r5 + 5)] = 0;
  HEAP32[r13 + (r5 + 4)] = 0;
  r18 = HEAP32[122786];
  r12 = 1 << r38;
  if ((r18 & r12 | 0) == 0) {
    HEAP32[122786] = r18 | r12;
    HEAP32[r14 >> 2] = r11;
    HEAP32[r13 + (r5 + 6)] = r14;
    HEAP32[r13 + (r5 + 3)] = r11;
    HEAP32[r13 + (r5 + 2)] = r11;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  if ((r38 | 0) == 31) {
    r39 = 0;
  } else {
    r39 = 25 - (r38 >>> 1) | 0;
  }
  r38 = r36 << r39;
  r39 = HEAP32[r14 >> 2];
  while (1) {
    if ((HEAP32[r39 + 4 >> 2] & -8 | 0) == (r36 | 0)) {
      break;
    }
    r40 = (r38 >>> 31 << 2) + r39 + 16 | 0;
    r14 = HEAP32[r40 >> 2];
    if ((r14 | 0) == 0) {
      r6 = 2679;
      break;
    } else {
      r38 = r38 << 1;
      r39 = r14;
    }
  }
  if (r6 == 2679) {
    if (r40 >>> 0 < HEAP32[122789] >>> 0) {
      _abort();
    }
    HEAP32[r40 >> 2] = r11;
    HEAP32[r13 + (r5 + 6)] = r39;
    HEAP32[r13 + (r5 + 3)] = r11;
    HEAP32[r13 + (r5 + 2)] = r11;
    r16 = r8 | 8;
    r17 = r1 + r16 | 0;
    return r17;
  }
  r40 = r39 + 8 | 0;
  r6 = HEAP32[r40 >> 2];
  r38 = HEAP32[122789];
  if (r39 >>> 0 < r38 >>> 0) {
    _abort();
  }
  if (r6 >>> 0 < r38 >>> 0) {
    _abort();
  }
  HEAP32[r6 + 12 >> 2] = r11;
  HEAP32[r40 >> 2] = r11;
  HEAP32[r13 + (r5 + 2)] = r6;
  HEAP32[r13 + (r5 + 3)] = r39;
  HEAP32[r13 + (r5 + 6)] = 0;
  r16 = r8 | 8;
  r17 = r1 + r16 | 0;
  return r17;
}
function _add_segment(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r3 = 0;
  r4 = HEAP32[122791], r5 = r4 >> 2;
  r6 = r4;
  r7 = _segment_holding(r6);
  r8 = HEAP32[r7 >> 2];
  r9 = HEAP32[r7 + 4 >> 2];
  r7 = r8 + r9 | 0;
  r10 = r8 + (r9 - 39) | 0;
  if ((r10 & 7 | 0) == 0) {
    r11 = 0;
  } else {
    r11 = -r10 & 7;
  }
  r10 = r8 + (r9 - 47) + r11 | 0;
  r11 = r10 >>> 0 < (r4 + 16 | 0) >>> 0 ? r6 : r10;
  r10 = r11 + 8 | 0, r9 = r10 >> 2;
  _init_top(r1, r2 - 40 | 0);
  HEAP32[r11 + 4 >> 2] = 27;
  HEAP32[r9] = HEAP32[122897];
  HEAP32[r9 + 1] = HEAP32[122898];
  HEAP32[r9 + 2] = HEAP32[122899];
  HEAP32[r9 + 3] = HEAP32[122900];
  HEAP32[122897] = r1;
  HEAP32[122898] = r2;
  HEAP32[122900] = 0;
  HEAP32[122899] = r10;
  r10 = r11 + 28 | 0;
  HEAP32[r10 >> 2] = 7;
  L3494 : do {
    if ((r11 + 32 | 0) >>> 0 < r7 >>> 0) {
      r2 = r10;
      while (1) {
        r1 = r2 + 4 | 0;
        HEAP32[r1 >> 2] = 7;
        if ((r2 + 8 | 0) >>> 0 < r7 >>> 0) {
          r2 = r1;
        } else {
          break L3494;
        }
      }
    }
  } while (0);
  if ((r11 | 0) == (r6 | 0)) {
    return;
  }
  r7 = r11 - r4 | 0;
  r11 = r7 + (r6 + 4) | 0;
  HEAP32[r11 >> 2] = HEAP32[r11 >> 2] & -2;
  HEAP32[r5 + 1] = r7 | 1;
  HEAP32[r6 + r7 >> 2] = r7;
  r6 = r7 >>> 3;
  if (r7 >>> 0 < 256) {
    r11 = r6 << 1;
    r10 = (r11 << 2) + 491180 | 0;
    r2 = HEAP32[122785];
    r1 = 1 << r6;
    do {
      if ((r2 & r1 | 0) == 0) {
        HEAP32[122785] = r2 | r1;
        r12 = r10;
      } else {
        r6 = HEAP32[(r11 + 2 << 2) + 491180 >> 2];
        if (r6 >>> 0 >= HEAP32[122789] >>> 0) {
          r12 = r6;
          break;
        }
        _abort();
      }
    } while (0);
    HEAP32[(r11 + 2 << 2) + 491180 >> 2] = r4;
    HEAP32[r12 + 12 >> 2] = r4;
    HEAP32[r5 + 2] = r12;
    HEAP32[r5 + 3] = r10;
    return;
  }
  r10 = r4;
  r12 = r7 >>> 8;
  do {
    if ((r12 | 0) == 0) {
      r13 = 0;
    } else {
      if (r7 >>> 0 > 16777215) {
        r13 = 31;
        break;
      }
      r11 = (r12 + 1048320 | 0) >>> 16 & 8;
      r1 = r12 << r11;
      r2 = (r1 + 520192 | 0) >>> 16 & 4;
      r6 = r1 << r2;
      r1 = (r6 + 245760 | 0) >>> 16 & 2;
      r9 = 14 - (r2 | r11 | r1) + (r6 << r1 >>> 15) | 0;
      r13 = r7 >>> ((r9 + 7 | 0) >>> 0) & 1 | r9 << 1;
    }
  } while (0);
  r12 = (r13 << 2) + 491444 | 0;
  HEAP32[r5 + 7] = r13;
  HEAP32[r5 + 5] = 0;
  HEAP32[r5 + 4] = 0;
  r9 = HEAP32[122786];
  r1 = 1 << r13;
  if ((r9 & r1 | 0) == 0) {
    HEAP32[122786] = r9 | r1;
    HEAP32[r12 >> 2] = r10;
    HEAP32[r5 + 6] = r12;
    HEAP32[r5 + 3] = r4;
    HEAP32[r5 + 2] = r4;
    return;
  }
  if ((r13 | 0) == 31) {
    r14 = 0;
  } else {
    r14 = 25 - (r13 >>> 1) | 0;
  }
  r13 = r7 << r14;
  r14 = HEAP32[r12 >> 2];
  while (1) {
    if ((HEAP32[r14 + 4 >> 2] & -8 | 0) == (r7 | 0)) {
      break;
    }
    r15 = (r13 >>> 31 << 2) + r14 + 16 | 0;
    r12 = HEAP32[r15 >> 2];
    if ((r12 | 0) == 0) {
      r3 = 2723;
      break;
    } else {
      r13 = r13 << 1;
      r14 = r12;
    }
  }
  if (r3 == 2723) {
    if (r15 >>> 0 < HEAP32[122789] >>> 0) {
      _abort();
    }
    HEAP32[r15 >> 2] = r10;
    HEAP32[r5 + 6] = r14;
    HEAP32[r5 + 3] = r4;
    HEAP32[r5 + 2] = r4;
    return;
  }
  r4 = r14 + 8 | 0;
  r15 = HEAP32[r4 >> 2];
  r3 = HEAP32[122789];
  if (r14 >>> 0 < r3 >>> 0) {
    _abort();
  }
  if (r15 >>> 0 < r3 >>> 0) {
    _abort();
  }
  HEAP32[r15 + 12 >> 2] = r10;
  HEAP32[r4 >> 2] = r10;
  HEAP32[r5 + 2] = r15;
  HEAP32[r5 + 3] = r14;
  HEAP32[r5 + 6] = 0;
  return;
}
function __ZNKSt9bad_alloc4whatEv(r1) {
  return 476968;
}
function __ZNKSt20bad_array_new_length4whatEv(r1) {
  return 486596;
}
function __ZSt15get_new_handlerv() {
  return tempValue = HEAP32[124014], HEAP32[124014] = tempValue, tempValue;
}
function __ZSt15set_new_handlerPFvvE(r1) {
  return tempValue = HEAP32[124014], HEAP32[124014] = r1, tempValue;
}
function __ZNSt9bad_allocC2Ev(r1) {
  HEAP32[r1 >> 2] = 495944;
  return;
}
function __ZdlPv(r1) {
  if ((r1 | 0) == 0) {
    return;
  }
  _free(r1);
  return;
}
function __ZdlPvRKSt9nothrow_t(r1, r2) {
  __ZdlPv(r1);
  return;
}
function __ZdaPv(r1) {
  __ZdlPv(r1);
  return;
}
function __ZdaPvRKSt9nothrow_t(r1, r2) {
  __ZdaPv(r1);
  return;
}
function __ZNSt9bad_allocD0Ev(r1) {
  __ZNSt9bad_allocD2Ev(r1);
  __ZdlPv(r1);
  return;
}
function __ZNSt9bad_allocD2Ev(r1) {
  return;
}
function __ZNSt20bad_array_new_lengthC2Ev(r1) {
  __ZNSt9bad_allocC2Ev(r1 | 0);
  HEAP32[r1 >> 2] = 495968;
  return;
}
function __ZNSt20bad_array_new_lengthD0Ev(r1) {
  __ZNSt9bad_allocD2Ev(r1 | 0);
  __ZdlPv(r1);
  return;
}
function _getopt(r1, r2, r3) {
  return _getopt_internal(r1, r2, r3, 0, 0, 0);
}
function _getopt_internal(r1, r2, r3, r4, r5, r6) {
  var r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r7 = r2 >> 2;
  r8 = 0;
  r9 = STACKTOP;
  if ((r3 | 0) == 0) {
    r10 = -1;
    STACKTOP = r9;
    return r10;
  }
  if ((HEAP32[110163] | 0) == 0) {
    HEAP32[110161] = 1;
    HEAP32[110163] = 1;
  }
  if ((HEAP32[113900] | 0) == -1 | (HEAP32[110161] | 0) != 0) {
    HEAP32[113900] = (_getenv(472288) | 0) != 0 & 1;
  }
  r11 = HEAP8[r3];
  if (r11 << 24 >> 24 == 45) {
    r12 = r6 | 2;
  } else {
    r12 = (HEAP32[113900] | 0) != 0 | r11 << 24 >> 24 == 43 ? r6 & -2 : r6;
  }
  r6 = HEAP8[r3];
  if (r6 << 24 >> 24 == 43 | r6 << 24 >> 24 == 45) {
    r13 = r3 + 1 | 0;
  } else {
    r13 = r3;
  }
  HEAP32[110165] = 0;
  do {
    if ((HEAP32[110161] | 0) == 0) {
      r8 = 2769;
    } else {
      HEAP32[110222] = -1;
      HEAP32[110221] = -1;
      r8 = 2768;
      break;
    }
  } while (0);
  while (1) {
    if (r8 == 2769) {
      r8 = 0;
      if (HEAP8[HEAP32[110157]] << 24 >> 24 != 0) {
        break;
      }
    } else if (r8 == 2768) {
      r8 = 0;
      if ((HEAP32[110161] | 0) == 0) {
        r8 = 2769;
        continue;
      }
    }
    HEAP32[110161] = 0;
    r3 = HEAP32[110163];
    if ((r3 | 0) >= (r1 | 0)) {
      r8 = 2771;
      break;
    }
    r6 = HEAP32[(r3 << 2 >> 2) + r7];
    HEAP32[110157] = r6;
    if (HEAP8[r6] << 24 >> 24 == 45) {
      if (HEAP8[r6 + 1 | 0] << 24 >> 24 != 0) {
        r8 = 2787;
        break;
      }
      if ((_strchr(r13, 45) | 0) != 0) {
        r8 = 2787;
        break;
      }
    }
    HEAP32[110157] = 484968;
    if ((r12 & 2 | 0) != 0) {
      r8 = 2780;
      break;
    }
    if ((r12 & 1 | 0) == 0) {
      r10 = -1;
      r8 = 2843;
      break;
    }
    r6 = HEAP32[110221];
    do {
      if ((r6 | 0) == -1) {
        HEAP32[110221] = HEAP32[110163];
      } else {
        r3 = HEAP32[110222];
        if ((r3 | 0) == -1) {
          break;
        }
        _permute_args(r6, r3, HEAP32[110163], r2);
        HEAP32[110221] = HEAP32[110163] - HEAP32[110222] + HEAP32[110221] | 0;
        HEAP32[110222] = -1;
      }
    } while (0);
    HEAP32[110163] = HEAP32[110163] + 1 | 0;
    r8 = 2768;
    continue;
  }
  do {
    if (r8 == 2780) {
      r6 = HEAP32[110163];
      HEAP32[110163] = r6 + 1 | 0;
      HEAP32[110165] = HEAP32[(r6 << 2 >> 2) + r7];
      r10 = 1;
      STACKTOP = r9;
      return r10;
    } else if (r8 == 2787) {
      if ((HEAP32[110221] | 0) != -1 & (HEAP32[110222] | 0) == -1) {
        HEAP32[110222] = HEAP32[110163];
      }
      r6 = HEAP32[110157];
      r3 = r6 + 1 | 0;
      if (HEAP8[r3] << 24 >> 24 == 0) {
        break;
      }
      HEAP32[110157] = r3;
      if (HEAP8[r3] << 24 >> 24 != 45) {
        break;
      }
      if (HEAP8[r6 + 2 | 0] << 24 >> 24 != 0) {
        break;
      }
      HEAP32[110163] = HEAP32[110163] + 1 | 0;
      HEAP32[110157] = 484968;
      r6 = HEAP32[110222];
      if ((r6 | 0) != -1) {
        _permute_args(HEAP32[110221], r6, HEAP32[110163], r2);
        HEAP32[110163] = HEAP32[110221] - HEAP32[110222] + HEAP32[110163] | 0;
      }
      HEAP32[110222] = -1;
      HEAP32[110221] = -1;
      r10 = -1;
      STACKTOP = r9;
      return r10;
    } else if (r8 == 2843) {
      STACKTOP = r9;
      return r10;
    } else if (r8 == 2771) {
      HEAP32[110157] = 484968;
      r6 = HEAP32[110222];
      r3 = HEAP32[110221];
      do {
        if ((r6 | 0) == -1) {
          if ((r3 | 0) == -1) {
            break;
          }
          HEAP32[110163] = r3;
        } else {
          _permute_args(r3, r6, HEAP32[110163], r2);
          HEAP32[110163] = HEAP32[110221] - HEAP32[110222] + HEAP32[110163] | 0;
        }
      } while (0);
      HEAP32[110222] = -1;
      HEAP32[110221] = -1;
      r10 = -1;
      STACKTOP = r9;
      return r10;
    }
  } while (0);
  r6 = (r4 | 0) != 0;
  do {
    if (r6) {
      r3 = HEAP32[110157];
      if ((r3 | 0) == (HEAP32[(HEAP32[110163] << 2 >> 2) + r7] | 0)) {
        break;
      }
      if (HEAP8[r3] << 24 >> 24 != 45) {
        if ((r12 & 4 | 0) == 0) {
          break;
        }
      }
      r3 = HEAP32[110157];
      r11 = HEAP8[r3];
      if (r11 << 24 >> 24 == 45) {
        HEAP32[110157] = r3 + 1 | 0;
        r14 = 0;
      } else if (r11 << 24 >> 24 == 58) {
        r14 = 0;
      } else {
        r14 = (_strchr(r13, r11 << 24 >> 24) | 0) != 0 & 1;
      }
      r11 = _parse_long_options(r2, r13, r4, r5, r14);
      if ((r11 | 0) == -1) {
        break;
      }
      HEAP32[110157] = 484968;
      r10 = r11;
      STACKTOP = r9;
      return r10;
    }
  } while (0);
  r14 = HEAP32[110157];
  r12 = r14 + 1 | 0;
  HEAP32[110157] = r12;
  r11 = HEAP8[r14];
  r14 = r11 << 24 >> 24;
  do {
    if (r11 << 24 >> 24 == 45) {
      if (HEAP8[r12] << 24 >> 24 == 0) {
        r8 = 2806;
        break;
      } else {
        r8 = 2808;
        break;
      }
    } else if (r11 << 24 >> 24 != 58) {
      r8 = 2806;
    }
  } while (0);
  do {
    if (r8 == 2806) {
      r12 = _strchr(r13, r14);
      if ((r12 | 0) == 0) {
        if (r11 << 24 >> 24 == 45) {
          r8 = 2808;
          break;
        } else {
          break;
        }
      }
      do {
        if (r6 & r11 << 24 >> 24 == 87) {
          if (HEAP8[r12 + 1 | 0] << 24 >> 24 != 59) {
            break;
          }
          do {
            if (HEAP8[HEAP32[110157]] << 24 >> 24 == 0) {
              r3 = HEAP32[110163] + 1 | 0;
              HEAP32[110163] = r3;
              if ((r3 | 0) < (r1 | 0)) {
                HEAP32[110157] = HEAP32[(r3 << 2 >> 2) + r7];
                break;
              }
              HEAP32[110157] = 484968;
              do {
                if ((HEAP32[110164] | 0) != 0) {
                  if (HEAP8[r13] << 24 >> 24 == 58) {
                    break;
                  }
                  __warnx(439256, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r14, tempInt));
                }
              } while (0);
              HEAP32[110162] = r14;
              r10 = HEAP8[r13] << 24 >> 24 == 58 ? 58 : 63;
              STACKTOP = r9;
              return r10;
            }
          } while (0);
          r3 = _parse_long_options(r2, r13, r4, r5, 0);
          HEAP32[110157] = 484968;
          r10 = r3;
          STACKTOP = r9;
          return r10;
        }
      } while (0);
      if (HEAP8[r12 + 1 | 0] << 24 >> 24 != 58) {
        if (HEAP8[HEAP32[110157]] << 24 >> 24 != 0) {
          r10 = r14;
          STACKTOP = r9;
          return r10;
        }
        HEAP32[110163] = HEAP32[110163] + 1 | 0;
        r10 = r14;
        STACKTOP = r9;
        return r10;
      }
      HEAP32[110165] = 0;
      r3 = HEAP32[110157];
      do {
        if (HEAP8[r3] << 24 >> 24 == 0) {
          if (HEAP8[r12 + 2 | 0] << 24 >> 24 == 58) {
            break;
          }
          r15 = HEAP32[110163] + 1 | 0;
          HEAP32[110163] = r15;
          if ((r15 | 0) < (r1 | 0)) {
            HEAP32[110165] = HEAP32[(r15 << 2 >> 2) + r7];
            break;
          }
          HEAP32[110157] = 484968;
          do {
            if ((HEAP32[110164] | 0) != 0) {
              if (HEAP8[r13] << 24 >> 24 == 58) {
                break;
              }
              __warnx(439256, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r14, tempInt));
            }
          } while (0);
          HEAP32[110162] = r14;
          r10 = HEAP8[r13] << 24 >> 24 == 58 ? 58 : 63;
          STACKTOP = r9;
          return r10;
        } else {
          HEAP32[110165] = r3;
        }
      } while (0);
      HEAP32[110157] = 484968;
      HEAP32[110163] = HEAP32[110163] + 1 | 0;
      r10 = r14;
      STACKTOP = r9;
      return r10;
    }
  } while (0);
  do {
    if (r8 == 2808) {
      if (HEAP8[HEAP32[110157]] << 24 >> 24 == 0) {
        r10 = -1;
      } else {
        break;
      }
      STACKTOP = r9;
      return r10;
    }
  } while (0);
  if (HEAP8[HEAP32[110157]] << 24 >> 24 == 0) {
    HEAP32[110163] = HEAP32[110163] + 1 | 0;
  }
  do {
    if ((HEAP32[110164] | 0) != 0) {
      if (HEAP8[r13] << 24 >> 24 == 58) {
        break;
      }
      __warnx(455524, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r14, tempInt));
    }
  } while (0);
  HEAP32[110162] = r14;
  r10 = 63;
  STACKTOP = r9;
  return r10;
}
function _getopt_long(r1, r2, r3, r4, r5) {
  return _getopt_internal(r1, r2, r3, r4, r5, 1);
}
function _getopt_long_only(r1, r2, r3, r4, r5) {
  return _getopt_internal(r1, r2, r3, r4, r5, 5);
}
function _permute_args(r1, r2, r3, r4) {
  var r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
  r5 = r2 - r1 | 0;
  r6 = r3 - r2 | 0;
  r7 = _gcd(r5, r6);
  r8 = (r3 - r1 | 0) / (r7 | 0) & -1;
  if ((r7 | 0) <= 0) {
    return;
  }
  r1 = (r8 | 0) > 0;
  r3 = -r5 | 0;
  r5 = 0;
  while (1) {
    r9 = r5 + r2 | 0;
    L3692 : do {
      if (r1) {
        r10 = (r9 << 2) + r4 | 0;
        r11 = 0;
        r12 = r9;
        while (1) {
          r13 = ((r12 | 0) < (r2 | 0) ? r6 : r3) + r12 | 0;
          r14 = (r13 << 2) + r4 | 0;
          r15 = HEAP32[r14 >> 2];
          HEAP32[r14 >> 2] = HEAP32[r10 >> 2];
          HEAP32[r10 >> 2] = r15;
          r15 = r11 + 1 | 0;
          if ((r15 | 0) == (r8 | 0)) {
            break L3692;
          } else {
            r11 = r15;
            r12 = r13;
          }
        }
      }
    } while (0);
    r9 = r5 + 1 | 0;
    if ((r9 | 0) == (r7 | 0)) {
      break;
    } else {
      r5 = r9;
    }
  }
  return;
}
function __Znwj(r1) {
  var r2, r3, r4;
  r2 = 0;
  r3 = (r1 | 0) == 0 ? 1 : r1;
  while (1) {
    r4 = _malloc(r3);
    if ((r4 | 0) != 0) {
      r2 = 2873;
      break;
    }
    r1 = __ZSt15get_new_handlerv();
    if ((r1 | 0) == 0) {
      break;
    }
    FUNCTION_TABLE[r1]();
  }
  if (r2 == 2873) {
    return r4;
  }
  r4 = ___cxa_allocate_exception(4);
  __ZNSt9bad_allocC2Ev(r4);
  ___cxa_throw(r4, 496028, 148);
}
function __ZnwjRKSt9nothrow_t(r1, r2) {
  return __Znwj(r1);
}
function __Znaj(r1) {
  return __Znwj(r1);
}
function __ZnajRKSt9nothrow_t(r1, r2) {
  return __Znaj(r1);
}
function __ZSt17__throw_bad_allocv() {
  var r1;
  r1 = ___cxa_allocate_exception(4);
  __ZNSt9bad_allocC2Ev(r1);
  ___cxa_throw(r1, 496028, 148);
}
function _gcd(r1, r2) {
  var r3, r4, r5, r6;
  r3 = (r1 | 0) % (r2 | 0);
  if ((r3 | 0) == 0) {
    r4 = r2;
    return r4;
  } else {
    r5 = r2;
    r6 = r3;
  }
  while (1) {
    r3 = (r5 | 0) % (r6 | 0);
    if ((r3 | 0) == 0) {
      r4 = r6;
      break;
    } else {
      r5 = r6;
      r6 = r3;
    }
  }
  return r4;
}
function _parse_long_options(r1, r2, r3, r4, r5) {
  var r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23;
  r6 = r3 >> 2;
  r7 = 0;
  r8 = STACKTOP;
  r9 = HEAP32[110157];
  HEAP32[110163] = HEAP32[110163] + 1 | 0;
  r10 = _strchr(r9, 61);
  if ((r10 | 0) == 0) {
    r11 = _strlen(r9);
    r12 = 0;
  } else {
    r11 = r10 - r9 | 0;
    r12 = r10 + 1 | 0;
  }
  r10 = HEAP32[r6];
  do {
    if ((r10 | 0) != 0) {
      r13 = (r5 | 0) != 0 & (r11 | 0) == 1;
      r14 = 0;
      r15 = -1;
      r16 = r10;
      L3727 : while (1) {
        do {
          if ((_strncmp(r9, r16, r11) | 0) == 0) {
            if ((_strlen(r16) | 0) == (r11 | 0)) {
              r17 = r14;
              break L3727;
            }
            if (r13) {
              r18 = r15;
              break;
            }
            if ((r15 | 0) == -1) {
              r18 = r14;
            } else {
              r7 = 2904;
              break L3727;
            }
          } else {
            r18 = r15;
          }
        } while (0);
        r19 = r14 + 1 | 0;
        r20 = HEAP32[(r19 << 4 >> 2) + r6];
        if ((r20 | 0) == 0) {
          r17 = r18;
          break;
        } else {
          r14 = r19;
          r15 = r18;
          r16 = r20;
        }
      }
      if (r7 == 2904) {
        do {
          if ((HEAP32[110164] | 0) != 0) {
            if (HEAP8[r2] << 24 >> 24 == 58) {
              break;
            }
            __warnx(464784, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r11, HEAP32[tempInt + 4 >> 2] = r9, tempInt));
          }
        } while (0);
        HEAP32[110162] = 0;
        r21 = 63;
        STACKTOP = r8;
        return r21;
      }
      if ((r17 | 0) == -1) {
        break;
      }
      r16 = (r17 << 4) + r3 + 4 | 0;
      r15 = HEAP32[r16 >> 2];
      r14 = (r12 | 0) == 0;
      if (!((r15 | 0) != 0 | r14)) {
        do {
          if ((HEAP32[110164] | 0) != 0) {
            if (HEAP8[r2] << 24 >> 24 == 58) {
              break;
            }
            __warnx(440900, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = r11, HEAP32[tempInt + 4 >> 2] = r9, tempInt));
          }
        } while (0);
        if ((HEAP32[((r17 << 4) + 8 >> 2) + r6] | 0) == 0) {
          r22 = HEAP32[((r17 << 4) + 12 >> 2) + r6];
        } else {
          r22 = 0;
        }
        HEAP32[110162] = r22;
        r21 = HEAP8[r2] << 24 >> 24 == 58 ? 58 : 63;
        STACKTOP = r8;
        return r21;
      }
      do {
        if ((r15 - 1 | 0) >>> 0 < 2) {
          if (!r14) {
            HEAP32[110165] = r12;
            break;
          }
          if ((r15 | 0) != 1) {
            break;
          }
          r13 = HEAP32[110163];
          HEAP32[110163] = r13 + 1 | 0;
          HEAP32[110165] = HEAP32[r1 + (r13 << 2) >> 2];
        }
      } while (0);
      if (!((HEAP32[r16 >> 2] | 0) == 1 & (HEAP32[110165] | 0) == 0)) {
        if ((r4 | 0) != 0) {
          HEAP32[r4 >> 2] = r17;
        }
        r15 = HEAP32[((r17 << 4) + 8 >> 2) + r6];
        r14 = HEAP32[((r17 << 4) + 12 >> 2) + r6];
        if ((r15 | 0) == 0) {
          r21 = r14;
          STACKTOP = r8;
          return r21;
        }
        HEAP32[r15 >> 2] = r14;
        r21 = 0;
        STACKTOP = r8;
        return r21;
      }
      do {
        if ((HEAP32[110164] | 0) != 0) {
          if (HEAP8[r2] << 24 >> 24 == 58) {
            break;
          }
          __warnx(439220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
        }
      } while (0);
      if ((HEAP32[((r17 << 4) + 8 >> 2) + r6] | 0) == 0) {
        r23 = HEAP32[((r17 << 4) + 12 >> 2) + r6];
      } else {
        r23 = 0;
      }
      HEAP32[110162] = r23;
      HEAP32[110163] = HEAP32[110163] - 1 | 0;
      r21 = HEAP8[r2] << 24 >> 24 == 58 ? 58 : 63;
      STACKTOP = r8;
      return r21;
    }
  } while (0);
  if ((r5 | 0) != 0) {
    HEAP32[110163] = HEAP32[110163] - 1 | 0;
    r21 = -1;
    STACKTOP = r8;
    return r21;
  }
  do {
    if ((HEAP32[110164] | 0) != 0) {
      if (HEAP8[r2] << 24 >> 24 == 58) {
        break;
      }
      __warnx(455500, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r9, tempInt));
    }
  } while (0);
  HEAP32[110162] = 0;
  r21 = 63;
  STACKTOP = r8;
  return r21;
}
function __warn(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  __vwarn(r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return;
}
function __warnx(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r4 = r3;
  HEAP32[r4 >> 2] = r2;
  __vwarnx(r1, HEAP32[r4 >> 2]);
  STACKTOP = r3;
  return;
}
function __vwarn(r1, r2) {
  var r3, r4, r5;
  r3 = STACKTOP;
  r4 = HEAP32[___errno_location() >> 2];
  r5 = HEAP32[___progname >> 2];
  _fprintf(HEAP32[_stderr >> 2], 482648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((r1 | 0) != 0) {
    _fprintf(HEAP32[_stderr >> 2], r1, r2);
    _fwrite(488524, 2, 1, HEAP32[_stderr >> 2]);
  }
  r2 = HEAP32[_stderr >> 2];
  r1 = _strerror(r4);
  _fprintf(r2, 480432, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r1, tempInt));
  STACKTOP = r3;
  return;
}
function __vwarnx(r1, r2) {
  var r3, r4;
  r3 = STACKTOP;
  r4 = HEAP32[___progname >> 2];
  _fprintf(HEAP32[_stderr >> 2], 479716, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  if ((r1 | 0) != 0) {
    _fprintf(HEAP32[_stderr >> 2], r1, r2);
  }
  _fputc(10, HEAP32[_stderr >> 2]);
  STACKTOP = r3;
  return;
}
function _strtod(r1, r2) {
  var r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39;
  r3 = 0;
  r4 = r1;
  while (1) {
    if ((_isspace(HEAP8[r4] << 24 >> 24) | 0) == 0) {
      break;
    } else {
      r4 = r4 + 1 | 0;
    }
  }
  r5 = HEAP8[r4];
  if (r5 << 24 >> 24 == 45) {
    r6 = r4 + 1 | 0;
    r7 = 1;
  } else if (r5 << 24 >> 24 == 43) {
    r6 = r4 + 1 | 0;
    r7 = 0;
  } else {
    r6 = r4;
    r7 = 0;
  }
  r4 = -1;
  r5 = 0;
  r8 = r6;
  while (1) {
    r6 = HEAP8[r8];
    if (((r6 << 24 >> 24) - 48 | 0) >>> 0 < 10) {
      r9 = r4;
    } else {
      if (r6 << 24 >> 24 != 46 | (r4 | 0) > -1) {
        break;
      } else {
        r9 = r5;
      }
    }
    r4 = r9;
    r5 = r5 + 1 | 0;
    r8 = r8 + 1 | 0;
  }
  r9 = r8 + -r5 | 0;
  r6 = (r4 | 0) < 0;
  r10 = ((r6 ^ 1) << 31 >> 31) + r5 | 0;
  r11 = (r10 | 0) > 18;
  r12 = (r11 ? -18 : -r10 | 0) + (r6 ? r5 : r4) | 0;
  r4 = r11 ? 18 : r10;
  do {
    if ((r4 | 0) == 0) {
      r13 = r1;
      r14 = 0;
    } else {
      do {
        if ((r4 | 0) > 9) {
          r10 = r9;
          r11 = r4;
          r5 = 0;
          while (1) {
            r6 = HEAP8[r10];
            r15 = r10 + 1 | 0;
            if (r6 << 24 >> 24 == 46) {
              r16 = HEAP8[r15];
              r17 = r10 + 2 | 0;
            } else {
              r16 = r6;
              r17 = r15;
            }
            r18 = (r16 << 24 >> 24) + ((r5 * 10 & -1) - 48) | 0;
            r15 = r11 - 1 | 0;
            if ((r15 | 0) > 9) {
              r10 = r17;
              r11 = r15;
              r5 = r18;
            } else {
              break;
            }
          }
          r19 = (r18 | 0) * 1e9;
          r20 = 9;
          r21 = r17;
          r3 = 2968;
          break;
        } else {
          if ((r4 | 0) > 0) {
            r19 = 0;
            r20 = r4;
            r21 = r9;
            r3 = 2968;
            break;
          } else {
            r22 = 0;
            r23 = 0;
            break;
          }
        }
      } while (0);
      if (r3 == 2968) {
        r5 = r21;
        r11 = r20;
        r10 = 0;
        while (1) {
          r15 = HEAP8[r5];
          r6 = r5 + 1 | 0;
          if (r15 << 24 >> 24 == 46) {
            r24 = HEAP8[r6];
            r25 = r5 + 2 | 0;
          } else {
            r24 = r15;
            r25 = r6;
          }
          r26 = (r24 << 24 >> 24) + ((r10 * 10 & -1) - 48) | 0;
          r6 = r11 - 1 | 0;
          if ((r6 | 0) > 0) {
            r5 = r25;
            r11 = r6;
            r10 = r26;
          } else {
            break;
          }
        }
        r22 = r26 | 0;
        r23 = r19;
      }
      r10 = r23 + r22;
      r11 = HEAP8[r8];
      L3832 : do {
        if (r11 << 24 >> 24 == 69 | r11 << 24 >> 24 == 101) {
          r5 = r8 + 1 | 0;
          r6 = HEAP8[r5];
          if (r6 << 24 >> 24 == 45) {
            r27 = r8 + 2 | 0;
            r28 = 1;
          } else if (r6 << 24 >> 24 == 43) {
            r27 = r8 + 2 | 0;
            r28 = 0;
          } else {
            r27 = r5;
            r28 = 0;
          }
          if (((HEAP8[r27] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
            r29 = r27;
            r30 = 0;
          } else {
            r31 = 0;
            r32 = r27;
            r33 = r28;
            break;
          }
          while (1) {
            r5 = (HEAP8[r29] << 24 >> 24) + ((r30 * 10 & -1) - 48) | 0;
            r6 = r29 + 1 | 0;
            if (((HEAP8[r6] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
              r29 = r6;
              r30 = r5;
            } else {
              r31 = r5;
              r32 = r6;
              r33 = r28;
              break L3832;
            }
          }
        } else {
          r31 = 0;
          r32 = r8;
          r33 = 0;
        }
      } while (0);
      r11 = r12 + ((r33 | 0) == 0 ? r31 : -r31 | 0) | 0;
      r6 = (r11 | 0) < 0 ? -r11 | 0 : r11;
      do {
        if ((r6 | 0) > 511) {
          HEAP32[___errno_location() >> 2] = 34;
          r34 = 1;
          r35 = 440256;
          r36 = 511;
          r3 = 2985;
          break;
        } else {
          if ((r6 | 0) == 0) {
            r37 = 1;
            break;
          } else {
            r34 = 1;
            r35 = 440256;
            r36 = r6;
            r3 = 2985;
            break;
          }
        }
      } while (0);
      L3844 : do {
        if (r3 == 2985) {
          while (1) {
            r3 = 0;
            if ((r36 & 1 | 0) == 0) {
              r38 = r34;
            } else {
              r38 = r34 * (HEAP32[tempDoublePtr >> 2] = HEAP32[r35 >> 2], HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[r35 + 4 >> 2], HEAPF64[tempDoublePtr >> 3]);
            }
            r6 = r36 >> 1;
            if ((r6 | 0) == 0) {
              r37 = r38;
              break L3844;
            } else {
              r34 = r38;
              r35 = r35 + 8 | 0;
              r36 = r6;
              r3 = 2985;
            }
          }
        }
      } while (0);
      if ((r11 | 0) > -1) {
        r13 = r32;
        r14 = r10 * r37;
        break;
      } else {
        r13 = r32;
        r14 = r10 / r37;
        break;
      }
    }
  } while (0);
  if ((r2 | 0) != 0) {
    HEAP32[r2 >> 2] = r13;
  }
  if ((r7 | 0) == 0) {
    r39 = r14;
    return r39;
  }
  r39 = -r14;
  return r39;
}
function _strtold(r1, r2) {
  return _strtod(r1, r2);
}
function _strtof(r1, r2) {
  return _strtod(r1, r2);
}
function _strtod_l(r1, r2, r3) {
  return _strtod(r1, r2);
}
function _strtold_l(r1, r2, r3) {
  return _strtold(r1, r2);
}
function _atof(r1) {
  return _strtod(r1, 0);
}
function __err(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  HEAP32[r5 >> 2] = r3;
  __verr(r1, r2, HEAP32[r5 >> 2]);
}
function __errx(r1, r2, r3) {
  var r4, r5;
  r4 = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  r5 = r4;
  HEAP32[r5 >> 2] = r3;
  __verrx(r1, r2, HEAP32[r5 >> 2]);
}
function __verr(r1, r2, r3) {
  var r4, r5;
  r4 = HEAP32[___errno_location() >> 2];
  r5 = HEAP32[___progname >> 2];
  _fprintf(HEAP32[_stderr >> 2], 465676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r5, tempInt));
  if ((r2 | 0) != 0) {
    _fprintf(HEAP32[_stderr >> 2], r2, r3);
    _fwrite(490244, 2, 1, HEAP32[_stderr >> 2]);
  }
  r3 = HEAP32[_stderr >> 2];
  r2 = _strerror(r4);
  _fprintf(r3, 481624, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r2, tempInt));
  _exit(r1);
}
function __verrx(r1, r2, r3) {
  var r4;
  r4 = HEAP32[___progname >> 2];
  _fprintf(HEAP32[_stderr >> 2], 485796, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = r4, tempInt));
  if ((r2 | 0) != 0) {
    _fprintf(HEAP32[_stderr >> 2], r2, r3);
  }
  _fputc(10, HEAP32[_stderr >> 2]);
  _exit(r1);
}
function _i64Add(r1, r2, r3, r4) {
  var r5, r6;
  r1 = r1 | 0;
  r2 = r2 | 0;
  r3 = r3 | 0;
  r4 = r4 | 0;
  r5 = 0, r6 = 0;
  r5 = r1 + r3 >>> 0;
  r6 = r2 + r4 >>> 0;
  if (r5 >>> 0 < r1 >>> 0) {
    r6 = r6 + 1 >>> 0;
  }
  return tempRet0 = r6, r5 | 0;
}
function _bitshift64Shl(r1, r2, r3) {
  var r4;
  r1 = r1 | 0;
  r2 = r2 | 0;
  r3 = r3 | 0;
  r4 = 0;
  if ((r3 | 0) < 32) {
    r4 = (1 << r3) - 1 | 0;
    tempRet0 = r2 << r3 | (r1 & r4 << 32 - r3) >>> 32 - r3;
    return r1 << r3;
  }
  tempRet0 = r1 << r3 - 32;
  return 0;
}
function _bitshift64Lshr(r1, r2, r3) {
  var r4;
  r1 = r1 | 0;
  r2 = r2 | 0;
  r3 = r3 | 0;
  r4 = 0;
  if ((r3 | 0) < 32) {
    r4 = (1 << r3) - 1 | 0;
    tempRet0 = r2 >>> r3;
    return r1 >>> r3 | (r2 & r4) << 32 - r3;
  }
  tempRet0 = 0;
  return r2 >>> r3 - 32 | 0;
}
function _bitshift64Ashr(r1, r2, r3) {
  var r4;
  r1 = r1 | 0;
  r2 = r2 | 0;
  r3 = r3 | 0;
  r4 = 0;
  if ((r3 | 0) < 32) {
    r4 = (1 << r3) - 1 | 0;
    tempRet0 = r2 >> r3;
    return r1 >>> r3 | (r2 & r4) << 32 - r3;
  }
  tempRet0 = (r2 | 0) < 0 ? -1 : 0;
  return r2 >> r3 - 32 | 0;
}
// EMSCRIPTEN_END_FUNCS
Module["_jsapi_userstate_get_privkey_root"] = _jsapi_userstate_get_privkey_root;
Module["_jsapi_privkey_get_next"] = _jsapi_privkey_get_next;
Module["_jsapi_privkey_get_accountname"] = _jsapi_privkey_get_accountname;
Module["_jsapi_privkey_get_protocol"] = _jsapi_privkey_get_protocol;
Module["_jsapi_conncontext_get_protocol"] = _jsapi_conncontext_get_protocol;
Module["_jsapi_conncontext_get_username"] = _jsapi_conncontext_get_username;
Module["_jsapi_conncontext_get_accountname"] = _jsapi_conncontext_get_accountname;
Module["_jsapi_conncontext_get_msgstate"] = _jsapi_conncontext_get_msgstate;
Module["_jsapi_conncontext_get_protocol_version"] = _jsapi_conncontext_get_protocol_version;
Module["_jsapi_conncontext_get_smstate"] = _jsapi_conncontext_get_smstate;
Module["_jsapi_conncontext_get_trust"] = _jsapi_conncontext_get_trust;
Module["_jsapi_conncontext_get_their_instance"] = _jsapi_conncontext_get_their_instance;
Module["_jsapi_conncontext_get_our_instance"] = _jsapi_conncontext_get_our_instance;
Module["_jsapi_conncontext_get_master"] = _jsapi_conncontext_get_master;
Module["_jsapi_instag_get_tag"] = _jsapi_instag_get_tag;
Module["_jsapi_privkey_write_trusted_fingerprints"] = _jsapi_privkey_write_trusted_fingerprints;
Module["_jsapi_userstate_write_to_file"] = _jsapi_userstate_write_to_file;
Module["_jsapi_privkey_delete"] = _jsapi_privkey_delete;
Module["_jsapi_privkey_get_dsa_token"] = _jsapi_privkey_get_dsa_token;
Module["_jsapi_userstate_import_privkey"] = _jsapi_userstate_import_privkey;
Module["_jsapi_conncontext_get_active_fingerprint"] = _jsapi_conncontext_get_active_fingerprint;
Module["_jsapi_initialise"] = _jsapi_initialise;
Module["_jsapi_can_start_smp"] = _jsapi_can_start_smp;
Module["_jsapi_messageappops_new"] = _jsapi_messageappops_new;
Module["_otrl_privkey_fingerprint"] = _otrl_privkey_fingerprint;
Module["_otrl_privkey_find"] = _otrl_privkey_find;
Module["_otrl_privkey_read"] = _otrl_privkey_read;
Module["_otrl_privkey_forget_all"] = _otrl_privkey_forget_all;
Module["_otrl_privkey_forget"] = _otrl_privkey_forget;
Module["_otrl_privkey_generate"] = _otrl_privkey_generate;
Module["_otrl_privkey_read_fingerprints"] = _otrl_privkey_read_fingerprints;
Module["_otrl_privkey_write_fingerprints"] = _otrl_privkey_write_fingerprints;
Module["_otrl_version"] = _otrl_version;
Module["_otrl_context_find"] = _otrl_context_find;
Module["_otrl_message_free"] = _otrl_message_free;
Module["_otrl_message_sending"] = _otrl_message_sending;
Module["_otrl_message_initiate_smp"] = _otrl_message_initiate_smp;
Module["_otrl_message_initiate_smp_q"] = _otrl_message_initiate_smp_q;
Module["_otrl_message_respond_smp"] = _otrl_message_respond_smp;
Module["_otrl_message_abort_smp"] = _otrl_message_abort_smp;
Module["_otrl_message_receiving"] = _otrl_message_receiving;
Module["_otrl_message_disconnect"] = _otrl_message_disconnect;
Module["_otrl_message_symkey"] = _otrl_message_symkey;
Module["_otrl_tlv_find"] = _otrl_tlv_find;
Module["_otrl_userstate_create"] = _otrl_userstate_create;
Module["_otrl_userstate_free"] = _otrl_userstate_free;
Module["_otrl_tlv_free"] = _otrl_tlv_free;
Module["_otrl_instag_find"] = _otrl_instag_find;
Module["_otrl_instag_read"] = _otrl_instag_read;
Module["_otrl_instag_generate"] = _otrl_instag_generate;
Module["_otrl_instag_write"] = _otrl_instag_write;
Module["_gcry_strerror"] = _gcry_strerror;
Module["__gcry_mpi_scan"] = __gcry_mpi_scan;
Module["__gcry_mpi_print"] = __gcry_mpi_print;
Module["__gcry_mpi_set"] = __gcry_mpi_set;
Module["__gcry_mpi_new"] = __gcry_mpi_new;
Module["__gcry_mpi_release"] = __gcry_mpi_release;
Module["_malloc"] = _malloc;
Module["_free"] = _free;
Module["_calloc"] = _calloc;
Module["_realloc"] = _realloc;
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    subtract: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.subtract(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    multiply: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.multiply(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    divide: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.div(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, z, null);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    modulo: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.modulo(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, null, z);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
initRuntime();
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
if (shouldRunNow) {
  run();
}
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
}).call(this);
