;(function () {

    var root = this;

    if (typeof exports !== 'undefined'){

	    module.exports.getModule=function(){
		    return root.Module;
    	};
        
    }else{
    	this.getModule = function(){
            return root.Module;
        }
    }

// -- code generated by emscripten will follow ---
var Module = {};

Module["preRun"]=[];

Module["MPI_HOOK"] = {};

if (typeof exports !== 'undefined') {
    Module["MPI_HOOK"]["BigInt"]= require("./bigint");
}else{
    Module["MPI_HOOK"]["BigInt"] = this["BigInt"];
}

/* emcc is generating this code when libgpg-error is compiled to js.. :(
__ATINIT__ = __ATINIT__.concat([
  { func: _i32______gpg_err_init_to_void_____ }
]);
*/
function _i32______gpg_err_init_to_void_____(){};//workaround.. TODO:investigate

var _static_buffer_ptr;
var _static_new_mpi_ptr_ptr;
var _static_otr_error_message_str;
var gcry_ = {};
var jsapi_ = {};
var otrl_ = {};
var helper_ = {};

Module['preRun'].push(function(){

    Module["malloc"]=_malloc;
    Module["free"]=_free;
    Module["FS"]=FS;

    //select doesn't really have a place in node environment.. since i/o is non-blocking
    _select = (function() {
      return 3;//this means all the three socket sets passed to the function are have sockets ready for reading.
    });
    
    Module['FS_createDevice']("/dev/","random",(function(){
      return Math.floor(Math.random() * 256);
    }));

    Module['FS_createDevice']("/dev/","urandom",(function(){
      return Math.floor(Math.random() * 256);
    }));
    console.error("created virtual /dev/random devices.");
    
    _static_buffer_ptr = allocate(4096,"i8",ALLOC_STATIC); 
    _static_new_mpi_ptr_ptr = allocate(4,"i8",ALLOC_STATIC);
    _static_otr_error_message_str = allocate(512,"i8",ALLOC_STATIC);

    Module["libgcrypt"] = {};
    Module["libgcrypt"]["mpi_new"] = gcry_.mpi_new = cwrap('_gcry_mpi_new','number',['number']);
    Module["libgcrypt"]["mpi_set"] = gcry_.mpi_set = cwrap('_gcry_mpi_set','number',['number','number']);
    Module["libgcrypt"]["mpi_release"] = gcry_.mpi_release = cwrap('_gcry_mpi_release','',['number']);
    Module["libgcrypt"]["mpi_scan"] = gcry_.mpi_scan = cwrap('_gcry_mpi_scan','number',['number','number','string','number','number']);
    Module["libgcrypt"]["mpi_print"] = gcry_.mpi_print = cwrap('_gcry_mpi_print','number',['number','number','number','number','number']);
    Module["libgcrypt"]["strerror"] = gcry_.strerror = cwrap('gcry_strerror','string',['number']);
    
    Module["libotrl"] = {};
    Module["libotrl"]["version"] = otrl_.version = cwrap('otrl_version','string');    
    Module["libotrl"]["userstate_create"]=otrl_.userstate_create=cwrap('otrl_userstate_create','',['number']);
    Module["libotrl"]["userstate_free"]=otrl_.userstate_free=cwrap('otrl_userstate_free','',['number']);
    Module["libotrl"]["privkey_read"]=otrl_.privkey_read=cwrap('otrl_privkey_read','number',['number','string']);
    Module["libotrl"]["privkey_fingerprint"]=otrl_.privkey_fingerprint=cwrap('otrl_privkey_fingerprint','number',['number','number','string','string']);
    Module["libotrl"]["privkey_read_fingerprints"]=otrl_.privkey_read_fingerprints=cwrap('otrl_privkey_read_fingerprints','number',['number','string','number','number']);
    Module["libotrl"]["privkey_write_fingerprints"]=otrl_.privkey_write_fingerprints=cwrap('otrl_privkey_write_fingerprints','number',['number','string']);
    Module["libotrl"]["privkey_generate"]=otrl_.privkey_generate=cwrap('otrl_privkey_generate','number',['number','string','string','string']);
    Module["libotrl"]["privkey_forget"]=otrl_.privkey_forget=cwrap('otrl_privkey_forget','',['number']);
    Module["libotrl"]["privkey_forget_all"]=otrl_.privkey_forget_all=cwrap('otrl_privkey_forget_all','',['number']);
    Module["libotrl"]["privkey_find"]=otrl_.privkey_find=cwrap('otrl_privkey_find','number',['number','string','string']);
    Module["libotrl"]["context_find"]=otrl_.context_find=cwrap('otrl_context_find','number',['number','string','string','string','number','number','number','number','number']);
    Module["libotrl"]["message_sending"]=otrl_.message_sending=cwrap('otrl_message_sending','number',['number','number','number','string','string','string',
                                                                                                    'number','string','number','number','number','number','number','number']);
    Module["libotrl"]["message_free"]=otrl_.message_free=cwrap('otrl_message_free','',['number']);
    Module["libotrl"]["message_disconnect"]=otrl_.message_disconnect = cwrap('otrl_message_disconnect','',['number','number','number','string','string','string','number']);
    Module["libotrl"]["message_initiate_smp_q"]=otrl_.message_initiate_smp_q=cwrap('otrl_message_initiate_smp_q','',['number','number','number','number','string','string','number']);
    Module["libotrl"]["message_initiate_smp"]=otrl_.message_initiate_smp=cwrap('otrl_message_initiate_smp','',['number','number','number','number','string','number']);
    Module["libotrl"]["message_respond_smp"]=otrl_.message_respond_smp=cwrap('otrl_message_respond_smp','',['number','number','number','number','string','number']);
    Module["libotrl"]["message_abort_smp"]=otrl_.message_abort_smp=cwrap('otrl_message_abort_smp','',['number','number','number','number']);
    Module["libotrl"]["message_receiving"]=otrl_.message_receiving=cwrap('otrl_message_receiving','number',['number','number','number','string','string','string','string','number','number','number','number','number']);
    Module["libotrl"]["instag_generate"]=otrl_.instag_generate=cwrap('otrl_instag_generate','number',['number','string','string','string']);
    Module["libotrl"]["instag_read"]=otrl_.instag_read=cwrap('otrl_instag_read','number',['number','string']);
    Module["libotrl"]["instag_write"]=otrl_.instag_write=cwrap('otrl_instag_write','number',['number','string']);
    Module["libotrl"]["instag_find"]=otrl_.instag_find=cwrap('otrl_instag_find','number',['number','string','string']);
    Module["libotrl"]["message_symkey"]=otrl_.message_symkey = cwrap('otrl_message_symkey','number',['number','number','number','number','number','number','number','number']);
    Module["libotrl"]["tlv_free"]=otrl_.tlv_free = cwrap('otrl_tlv_free','',['number']);
    Module["libotrl"]["tlv_find"]=otrl_.tlv_find = cwrap('otrl_tlv_find','number',['number','number']);

    Module["jsapi"]={};    
    Module["jsapi"]["can_start_smp"]=jsapi_.can_start_smp = cwrap('jsapi_can_start_smp','number',['number']);
    Module["jsapi"]["privkey_get_next"]=jsapi_.privkey_get_next = cwrap("jsapi_privkey_get_next",'number',['number']);
    Module["jsapi"]["privkey_get_accountname"]=jsapi_.privkey_get_accountname = cwrap("jsapi_privkey_get_accountname",'string',['number']);
    Module["jsapi"]["privkey_get_protocol"]=jsapi_.privkey_get_protocol = cwrap("jsapi_privkey_get_protocol",'string',['number']);
    Module["jsapi"]["privkey_delete"]=jsapi_.privkey_delete = cwrap('jsapi_privkey_delete','',['number','string','string','string']);
    Module["jsapi"]["privkey_get_dsa_token"]=jsapi_.privkey_get_dsa_token = cwrap('jsapi_privkey_get_dsa_token','number',['number','string','number','number']);
    Module["jsapi"]["privkey_write_trusted_fingerprints"]=jsapi_.privkey_write_trusted_fingerprints = cwrap("jsapi_privkey_write_trusted_fingerprints",'number',['number','string']);
    Module["jsapi"]["userstate_import_privkey"]=jsapi_.userstate_import_privkey = cwrap('jsapi_userstate_import_privkey','number',['number','string','string','number','number','number','number','number']);
    Module["jsapi"]["userstate_write_to_file"]=jsapi_.userstate_write_to_file = cwrap('jsapi_userstate_write_to_file','number',['number','string']);
    Module["jsapi"]["userstate_get_privkey_root"]=jsapi_.userstate_get_privkey_root = cwrap("jsapi_userstate_get_privkey_root","number",["number"]);
    Module["jsapi"]["conncontext_get_protocol"]=jsapi_.conncontext_get_protocol =cwrap('jsapi_conncontext_get_protocol','string',['number']);
    Module["jsapi"]["conncontext_get_username"]=jsapi_.conncontext_get_username =cwrap('jsapi_conncontext_get_username','string',['number']);
    Module["jsapi"]["conncontext_get_accountname"]=jsapi_.conncontext_get_accountname =cwrap('jsapi_conncontext_get_accountname','string',['number']);
    Module["jsapi"]["conncontext_get_msgstate"]=jsapi_.conncontext_get_msgstate =cwrap('jsapi_conncontext_get_msgstate','number',['number']);
    Module["jsapi"]["conncontext_get_protocol_version"]=jsapi_.conncontext_get_protocol_version =cwrap('jsapi_conncontext_get_protocol_version','number',['number']);
    Module["jsapi"]["conncontext_get_smstate"]=jsapi_.conncontext_get_smstate =cwrap('jsapi_conncontext_get_smstate','number',['number']);
    Module["jsapi"]["conncontext_get_active_fingerprint"]=jsapi_.conncontext_get_active_fingerprint =cwrap('jsapi_conncontext_get_active_fingerprint','',['number','number']);
    Module["jsapi"]["conncontext_get_trust"]=jsapi_.conncontext_get_trust = cwrap('jsapi_conncontext_get_trust','string',['number']);
    Module["jsapi"]["conncontext_get_their_instance"]=jsapi_.conncontext_get_their_instance = cwrap('jsapi_conncontext_get_their_instance','number',['number']);
    Module["jsapi"]["conncontext_get_our_instance"]=jsapi_.conncontext_get_our_instance = cwrap('jsapi_conncontext_get_our_instance','number',['number']);
    Module["jsapi"]["conncontext_get_master"]=jsapi_.conncontext_get_master = cwrap('jsapi_conncontext_get_master','number',['number']);
    Module["jsapi"]["messageappops_new"]=jsapi_.messageappops_new = cwrap('jsapi_messageappops_new','number');
    Module["jsapi"]["instag_get_tag"]=jsapi_.instag_get_tag = cwrap('jsapi_instag_get_tag','number',['number']);
    Module["jsapi"]["initialise"]=jsapi_.initialise = cwrap('jsapi_initialise');

    Module["helper"]={};
    Module["helper"]["mpi2bigint"] = helper_.mpi2bigint = __mpi2bigint;
    Module["helper"]["bigint2mpi"] = helper_.bigint2mpi = __bigint2mpi;
    Module["helper"]["ptr_to_ArrayBuffer"] = helper_.ptr_to_ArrayBuffer = ptr_to_ArrayBuffer;
    Module["helper"]["ptr_to_HexString"] = helper_.ptr_to_HexString = ptr_to_HexString;
    Module["helper"]["unsigned_char"] = helper_.unsigned_char = unsigned_char;
    Module["helper"]["unsigned_int32"] = helper_.unsigned_int32 = unsigned_int32;
    Module["helper"]["str2ab"] = helper_.str2ab = str2ab;
    Module["helper"]["ab2str"] = helper_.ab2str = ab2str;


// some of the MPI calculations are slow
// can we use pure javascript crypto and still preserve the libgcrypt API?
/* native alot faster don't override
        __gcry_mpi_add = function BigInt_MPI_ADD(w,u,v){
            var ww = BI.add( __mpi2bigint(u), __mpi2bigint(v) );
            __bigint2mpi(w,ww);
        };
*/
/* not tested but my guess is it wont significantly increase performance
        __gcry_mpi_sub = function BigInt_MPI_SUB(w,u,v){
            var ww = BI.sub( __mpi2bigint(u), __mpi2bigint(v) );
            __bigint2mpi(w,ww);
        };
*/
/*native is faster, but its still quite fast!
        __gcry_mpi_mul = function BigInt_MPI_MULT(w,u,v){
            var ww = BI.mult( __mpi2bigint(u), __mpi2bigint(v) );
            __bigint2mpi(w,ww);
        };
*/
/*
//void gcry_mpi_mul_2exp (gcry_mpi_t w, gcry_mpi_t u, unsigned long e)
//w = u * 2^e.

    __gcry_mpi_mul2exp = function BigInt_MPI_MUL2EXP(mpi_w, mpi_u, e){
       
    };
*/
//_gcry_mpi_tdiv_qr( gcry_mpi_t quot, gcry_mpi_t rem, gcry_mpi_t num, gcry_mpi_t den)
/** !!!!!!! EL GAMAL FAILS in pubkey.js test!!!! so does ECC DSA!!
    __gcry_mpi_tdiv_qr = function BigInt_MPI_DIVIDE_(mpi_quot,mpi_rem,mpi_num,mpi_den){
        var q = BI.str2bigInt("0",16,512);//should have enough elements to store Q
        var r = BI.str2bigInt("0",16,512);//what is the best size determined from sizes of num and den?
        var num = __mpi2bigint(mpi_num);
        var den = __mpi2bigint(mpi_den);
        BI.divide_(num,den,q,r);
        if(mpi_quot) __bigint2mpi(mpi_quot,q);
        if(mpi_rem) __bigint2mpi(mpi_rem, r);
    };
*/      
/* GCD causing problems with some libgcrypt tests...
        console.log("overriding __gcry_mpi_gcd");
        __gcry_mpi_gcd = function BigInt_MPI_GCD(mpi_g, mpi_a, mpi_b){
            //console.log(">__gcry_mpi_gcd()");
            var a = __mpi2bigint(mpi_a);
            var b = __mpi2bigint(mpi_b);
            //assert a.length == b.length
            var g = Module["MPI_HOOK"]["BigInt"]["GCD"](a,b);
            __bigint2mpi(mpi_g, g);
            if( Module["MPI_HOOK"]["BigInt"]["equalsInt"](g,1) ) return 1;
            return 0;
        };
*/
      //console.log("overriding __gcry_mpi_mod");
/*perf boost not tested but it should be enhancing..*/
        __gcry_mpi_mod = function BigInt_MPI_MOD(mpi_r,mpi_x,mpi_n){
            //console.log(">__gcry_mpi_mod()");
            //r = x mod n
            var x = __mpi2bigint(mpi_x);
            var n = __mpi2bigint(mpi_n);
            __bigint2mpi(mpi_r, Module["MPI_HOOK"]["BigInt"]["mod"](x,n));
        };
        
        //console.log("overriding __gcry_mpi_powm");

//confirmed bigint mulpowm, powm and invm, gcd  enhance performance..
        __gcry_mpi_powm = function BigInt_MPI_POWMOD(w, b, e, m){
            //console.log(">__gcry_mpi_powm()");
          var bi_base = __mpi2bigint(b);
          var bi_expo = __mpi2bigint(e);
          var bi_mod  = __mpi2bigint(m);
          var result = Module["MPI_HOOK"]["BigInt"]["powMod"](bi_base,bi_expo,bi_mod);
          __bigint2mpi(w,result);
        };

      //console.log("overriding __gcry_mpi_invm");

        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null
        __gcry_mpi_invm = function BigInt_MPI_INVERSEMOD(x,a,m){
            //console.log(">__gcry_mpi_invm()");
            var bi_a = __mpi2bigint(a);
            var bi_m = __mpi2bigint(m);
            var result = Module["MPI_HOOK"]["BigInt"]["inverseMod"](bi_a,bi_m);
            if(result){
                __bigint2mpi(x,result);
                return 1;
            }else{
                return 0;//no inverse mod exists
            }
        };
/*
//no significant improvement, but if enabled without mulpowm -- degrades performance!
        // w = u * v mod m --> (u*v) mod m  ===  u * (v mod m) ? 
        __gcry_mpi_mulm = function BigInt_MPI_MULTMOD(w, u, v, m){
          var bi_u = __mpi2bigint(u);
          var bi_v = __mpi2bigint(v);
          var bi_m = __mpi2bigint(m);
          //faster when v < u (and gives correct value!)
          var result = BI.greater(bi_u,bi_v) ? BI.multMod(bi_u,bi_v,bi_m) :BI.multMod(bi_v,bi_u,bi_m);
          __bigint2mpi(w,result);
        };
*/
      //console.log("overriding __gcry_mpi_mulpowm");
        __gcry_mpi_mulpowm = function BigInt_MPI_MULPOWM(mpi_r,mpi_array_base,mpi_array_exp,mpi_m){
            //console.log(">__gcry_mpi_mulpowm()");
            var indexer = 1;
            var mpi1, mpi2, bi_m,bi_result;
            mpi1 = getValue(mpi_array_base,"i32");
            mpi2 = getValue(mpi_array_exp,"i32");
            bi_m = __mpi2bigint(mpi_m);
            var BE = [];
            var O = [];
            while(mpi1 && mpi2){
                BE.push({b:__mpi2bigint(mpi1),e:__mpi2bigint(mpi2)});
                mpi1 = getValue(mpi_array_base+(indexer*4),"i32");
                mpi2 = getValue(mpi_array_exp+ (indexer*4),"i32");
                indexer++;
            }
            if(BE.length){
                BE.forEach(function(be){
                    O.push(Module["MPI_HOOK"]["BigInt"]["powMod"](be.b,be.e,bi_m));
                });
                bi_result = Module["MPI_HOOK"]["BigInt"]["str2bigInt"]("1",16);
                O.forEach(function(k){
                    bi_result = Module["MPI_HOOK"]["BigInt"]["mult"](bi_result,k);
                });
            }
            bi_result = Module["MPI_HOOK"]["BigInt"]["mod"](bi_result,bi_m);
            __bigint2mpi(mpi_r,bi_result);
        };

//TODO: _gcry_generate_fips186_2_prime
//      _gcry_generate_elg_prime


      //console.log("overriding _gen_prime");

/*static gcry_mpi_t gen_prime (unsigned int nbits, int secret, int randomlevel,
                             int (*extra_check)(void *, gcry_mpi_t),
                             void *extra_check_arg);*/
    _gen_prime = function BigInt_Prime(nbits,secretlevel,randomlevel,xtracheck,xtracheck_args){
        var mpi_prime = gcry_.mpi_new ( nbits );
        for(;;){
            var bi_prime = Module["MPI_HOOK"]["BigInt"]["randTruePrime"](nbits);
            __bigint2mpi(mpi_prime,bi_prime);
            if(xtracheck && FUNCTION_TABLE[xtracheck](xtracheck_args,mpi_prime)){                
                   continue;//prime rejected!                
            }
            return mpi_prime;
        }
    };

});//preRun


// __msgops_callback_ functions are called from jsapi.c to bubble up to 
// to eventually fire the corresponding event emitted by otr.Session()

function __msgops_callback_smp_request($opdata,$context,$question){
    var obj = (new Module["ConnContext"]($context))["obj"]();
    if($question!=0) obj["question"] = Module["Pointer_stringify"]($question);
    Module["ops_event"]($opdata, obj, "smp_request");
}
function __msgops_callback_smp_failed($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_failed");
}
function __msgops_callback_smp_aborted($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_aborted");
}
function __msgops_callback_smp_complete($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_complete");
}
function __msgops_callback_smp_error($opdata,$context){
    Module["ops_event"]($opdata, (new Module["ConnContext"]($context))["obj"](),"smp_error");    
}

function __msgops_callback_policy($opdata, $context) {
  return Module["ops_event"]($opdata,{},"policy");
}

function __msgops_callback_create_privkey($opdata,$accountname,$protocol){
  Module["ops_event"]($opdata,{
    "accountname":Module["Pointer_stringify"]($accountname),
    "protocol":Module["Pointer_stringify"]($protocol)
  },"create_privkey");
}

function __msgops_callback_is_logged_in($opdata,$accountname,$protocol,$recipient){
  return Module["ops_event"]($opdata,{},"is_logged_in");
}

function __msgops_callback_inject_message($opdata,$accountname,$protocol,$recipient,$message){
    Module["ops_event"]($opdata,{
        "message":Module["Pointer_stringify"]($message)
    },"inject_message");
}

function __msgops_callback_update_context_list($opdata){
    Module["ops_event"]($opdata,{},"update_context_list");
}

function __msgops_callback_new_fingerprint($opdata,$userstate,$accountname,$protocol,$username,$fingerprint_human){
    Module["ops_event"]($opdata,{
        "fingerprint":Module["Pointer_stringify"]($fingerprint_human)
    },"new_fingerprint")    
}
function __msgops_callback_write_fingerprints($opdata){
    Module["ops_event"]($opdata,{},"write_fingerprints");
}
function __msgops_callback_gone_secure($opdata,$context){
    Module["ops_event"]($opdata,{},"gone_secure");
}
function __msgops_callback_gone_insecure($opdata,$context){
    Module["ops_event"]($opdata,{},"gone_insecure");
}
function __msgops_callback_still_secure($opdata,$context,$is_reply){
    Module["ops_event"]($opdata,{},"still_secure");
}
function __msgops_callback_max_message_size($opdata,$context){
    return Module["ops_event"]($opdata,{},"max_message_size");
}

//new ops in libotr4
function __msgops_callback_received_symkey($opdata,$context,$use,$usedata,$usedatalen,$symkey){
    Module["ops_event"]($opdata,{
        "use": $use,
        "usedata":ptr_to_ArrayBuffer($usedata,$usedatalen),
        "key":ptr_to_ArrayBuffer($symkey,32)
    },"received_symkey")

/* for debugging..
    Module["ops_event"]($opdata,{
        "use": $use,
        "usedata":ab2str(ptr_to_ArrayBuffer($usedata,$usedatalen)),
        "key":ptr_to_HexString($symkey,32)
    },"received_symkey")
*/
}

/*const char * msgops_callback_otr_error_message(void *opdata, ConnContext *context, OtrlErrorCode err_code){}*/
function __msgops_callback_otr_error_message($opdata, $context, $err_code){
    //TODO:write error string into _static_otr_error_message_str
    //for now this is implemented in jsapi.c
    return _static_otr_error_message_str;
}

/*void msgops_callback_otr_error_message_free(void *opdata, const char *err_msg){}*/
function __msgops_callback_otr_error_message_free($opdata, $err_msg){
    //no need to free anything.. we are using a statically allocated shared memory location.
}

function __msgops_callback_handle_msg_event($opdata, $msg_event,$context, $message, $err){
    Module["ops_event"]($opdata,{
        "event":$msg_event,
        "message":Module["Pointer_stringify"]($message),
        "err": ($err? new GcryptError($err):null)
    },"msg_event");
}

function __msgops_callback_create_instag($opdata, $accountname, $protocol){
    Module["ops_event"]($opdata,{
        "accountname":Module["Pointer_stringify"]($accountname),
        "protocol":Module["Pointer_stringify"]($protocol)
    },"create_instag");
}
/* TODO
void msgops_callback_convert_msg(void *opdata, ConnContext *context,
        OtrlConvertType convert_type, char ** dest, const char *src){
    _msgops_callback_convert_msg(opdata, context, convert_type, dest, src);
}
void msgops_callback_convert_free(void *opdata, ConnContext *context, char *dest){
    _msgops_callback_convert_free(opdata, context, dest);
}
void msgops_callback_timer_control(void *opdata, unsigned int interval){
    _msgops_callback_timer_control(opdata,interval);
}
*/

//todo:copy directly between memory and bigint array.. (faster than string conversions?..)
function __mpi2bigint(mpi_ptr){
    var GCRYMPI_FMT_HEX = 4; //gcrypt.h:    GCRYMPI_FMT_HEX = 4,    /* Hex format. */
    //gcry_error_t gcry_mpi_print (enum gcry_mpi_format format, unsigned char *buffer, size_t buflen, size_t *nwritten, const gcry_mpi_t a)
    var err = gcry_.mpi_print(GCRYMPI_FMT_HEX,_static_buffer_ptr,4096,0,mpi_ptr);

    if(err) {
        throw new GcryptError(err);
    }
    var mpi_str_ptr = _static_buffer_ptr;
    var mpi_str = Module['Pointer_stringify'](mpi_str_ptr);

    return Module["MPI_HOOK"]["BigInt"]["str2bigInt"](mpi_str,16);   
}

function __bigint2mpi(mpi_ptr,bi_num){
    var new_mpi_ptr_ptr = _static_new_mpi_ptr_ptr;
    var bi_num_str = Module["MPI_HOOK"]["BigInt"]["bigInt2str"](bi_num,16);
    //gcry_error_t gcry_mpi_scan (gcry_mpi_t *r_mpi, enum gcry_mpi_format format, const unsigned char *buffer, size_t buflen, size_t *nscanned)
    var err = gcry_.mpi_scan(new_mpi_ptr_ptr,4,bi_num_str,0,0);
    if(err){
        throw new GcryptError(err);
    }
    var scanned_mpi_ptr = getValue(new_mpi_ptr_ptr,"i32");
    if(scanned_mpi_ptr==0){
        throw("NULL scanned MPI in __bigint2mpi() otr_pre.js");
    }
    //gcry_mpi_t gcry_mpi_set (gcry_mpi_t w, const gcry_mpi_t u)
    var same = gcry_.mpi_set(mpi_ptr,scanned_mpi_ptr);

    gcry_.mpi_release(scanned_mpi_ptr);
    if(same && same != mpi_ptr){
        return same;
    }        
}

function GcryptError( num ) {
    this.num = num || 0;
    this.message = gcry_.strerror(num || 0);
}
GcryptError.prototype = new Error();
GcryptError.prototype.constructor = GcryptError;


var hexDigit = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'];

function hexString( val ){
    return hexDigit[(val & 0xF0) >> 4] + hexDigit[val & 0x0F];
}

function ptr_to_HexString(ptr,len){     
    var hex = "";
    for(var i=0; i<len; i++){
        hex = hex + hexString( unsigned_char( getValue( ptr + i,"i8")));
    }
    return hex;
}

function ptr_to_ArrayBuffer(ptr,len){
    var buf = new ArrayBuffer(len);
    var u8 = new Uint8Array(buf);
    for(var i=0; i<len; i++){
        u8[i]= unsigned_char( getValue( ptr + i,"i8"));
    }
    return buf;    
}

function unsigned_char( c ){
    c = c & 0xFF;
    return ( c < 0 ? (0xFF+1)+c : c );
}

function unsigned_int32( i ){
    //i must be in the range of a signed 32-bit integer!
    i = i & 0xFFFFFFFF;//truncate so we dont return values larger than an unsigned 32-bit int.
    return ( i < 0 ? (0xFFFFFFFF+1)+i : i );
}

// http://updates.html5rocks.com/2012/06/How-to-convert-ArrayBuffer-to-and-from-String
function ab2str(buf) {
  return String.fromCharCode.apply(null, new Uint16Array(buf));
}

function str2ab(str) {
  var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char
  var bufView = new Uint16Array(buf);
  for (var i=0, strLen=str.length; i<strLen; i++) {
    bufView[i] = str.charCodeAt(i);
  }
  return buf;
}

// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    assert(sig);
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}




var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[(ptr++)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 409600;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 1048576;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 119448;

assert(STATICTOP < TOTAL_MEMORY);




















var _stderr;


































































































































































































__ATINIT__ = __ATINIT__.concat([
  { func: function() { _i32______gpg_err_init_to_void_____() } }
]);
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































var __ZTVSt9exception;


var __ZTVN10__cxxabiv120__si_class_type_infoE;


var __ZTISt9exception;






































var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
allocate(4, "i8", ALLOC_NONE, 409600);
allocate(4, "i8", ALLOC_NONE, 409604);
allocate(4, "i8", ALLOC_NONE, 409608);
allocate(4, "i8", ALLOC_NONE, 409612);
allocate(4, "i8", ALLOC_NONE, 409616);
allocate([0,2,0,0,119,0,0,0,0,3,0,0,145,0,0,0,0,4,0,0,165,0,0,0,0,5,0,0,183,0,0,0,0,6,0,0,198,0,0,0,0,7,0,0,212,0,0,0,0,8,0,0,225,0,0,0,0,9,0,0,237,0,0,0,0,10,0,0,249,0,0,0,0,11,0,0,3,1,0,0,0,12,0,0,13,1,0,0,0,13,0,0,23,1,0,0,0,14,0,0,32,1,0,0,0,15,0,0,40,1,0,0,0,16,0,0,49,1,0,0,0,17,0,0,57,1,0,0,0,18,0,0,64,1,0,0,0,19,0,0,72,1,0,0,0,20,0,0,79,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 409620);
allocate([208,207,7,56,147,112,138,131,125,215,138,54,101,41,108,31,124,63,211,65] /* \D0\CF\078\93p\8A\83 */, "i8", ALLOC_NONE, 409780);
allocate([0,0,0,0,0,0,0,0,0,0,30,30,0,0,14,14,0,0,224,224,0,0,240,240,0,0,254,254,0,0,254,254,0,30,0,30,0,14,0,14,0,30,30,0,0,14,14,0,0,30,224,254,0,14,240,254,0,30,254,224,0,14,254,240,0,224,0,224,0,240,0,240,0,224,30,254,0,240,14,254,0,224,224,0,0,240,240,0,0,224,254,30,0,240,254,14,0,254,0,254,0,254,0,254,0,254,30,224,0,254,14,240,0,254,224,30,0,254,240,14,0,254,254,0,0,254,254,0,30,0,0,30,14,0,0,14,30,0,30,0,14,0,14,0,30,0,224,254,14,0,240,254,30,0,254,224,14,0,254,240,30,30,0,0,14,14,0,0,30,30,30,30,14,14,14,14,30,30,224,224,14,14,240,240,30,30,254,254,14,14,254,254,30,224,0,254,14,240,0,254,30,224,30,224,14,240,14,240,30,224,224,30,14,240,240,14,30,224,254,0,14,240,254,0,30,254,0,224,14,254,0,240,30,254,30,254,14,254,14,254,30,254,224,0,14,254,240,0,30,254,254,30,14,254,254,14,224,0,0,224,240,0,0,240,224,0,30,254,240,0,14,254,224,0,224,0,240,0,240,0,224,0,254,30,240,0,254,14,224,30,0,254,240,14,0,254,224,30,30,224,240,14,14,240,224,30,224,30,240,14,240,14,224,30,254,0,240,14,254,0,224,224,0,0,240,240,0,0,224,224,30,30,240,240,14,14,224,224,224,224,240,240,240,240,224,224,254,254,240,240,254,254,224,254,0,30,240,254,0,14,224,254,30,0,240,254,14,0,224,254,224,254,240,254,240,254,224,254,254,224,240,254,254,240,254,0,0,254,254,0,0,254,254,0,30,224,254,0,14,240,254,0,224,30,254,0,240,14,254,0,254,0,254,0,254,0,254,30,0,224,254,14,0,240,254,30,30,254,254,14,14,254,254,30,224,0,254,14,240,0,254,30,254,30,254,14,254,14,254,224,0,30,254,240,0,14,254,224,30,0,254,240,14,0,254,224,224,254,254,240,240,254,254,224,254,224,254,240,254,240,254,254,0,0,254,254,0,0,254,254,30,30,254,254,14,14,254,254,224,224,254,254,240,240,254,254,254,254,254,254,254,254], "i8", ALLOC_NONE, 409800);
allocate([97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,48,49,50,51,52,53,54,55,56,57,45,46,47,95,58,42,43,61,0] /* abcdefghijklmnopqrst */, "i8", ALLOC_NONE, 410312);
allocate(4, "i8", ALLOC_NONE, 410384);
allocate(4, "i8", ALLOC_NONE, 410388);
allocate(4, "i8", ALLOC_NONE, 410392);
allocate(4, "i8", ALLOC_NONE, 410396);
allocate([34,174,40,215,152,47,138,66,205,101,239,35,145,68,55,113,47,59,77,236,207,251,192,181,188,219,137,129,165,219,181,233,56,181,72,243,91,194,86,57,25,208,5,182,241,17,241,89,155,79,25,175,164,130,63,146,24,129,109,218,213,94,28,171,66,2,3,163,152,170,7,216,190,111,112,69,1,91,131,18,140,178,228,78,190,133,49,36,226,180,255,213,195,125,12,85,111,137,123,242,116,93,190,114,177,150,22,59,254,177,222,128,53,18,199,37,167,6,220,155,148,38,105,207,116,241,155,193,210,74,241,158,193,105,155,228,227,37,79,56,134,71,190,239,181,213,140,139,198,157,193,15,101,156,172,119,204,161,12,36,117,2,43,89,111,44,233,45,131,228,166,110,170,132,116,74,212,251,65,189,220,169,176,92,181,83,17,131,218,136,249,118,171,223,102,238,82,81,62,152,16,50,180,45,109,198,49,168,63,33,251,152,200,39,3,176,228,14,239,190,199,127,89,191,194,143,168,61,243,11,224,198,37,167,10,147,71,145,167,213,111,130,3,224,81,99,202,6,112,110,14,10,103,41,41,20,252,47,210,70,133,10,183,39,38,201,38,92,56,33,27,46,237,42,196,90,252,109,44,77,223,179,149,157,19,13,56,83,222,99,175,139,84,115,10,101,168,178,119,60,187,10,106,118,230,174,237,71,46,201,194,129,59,53,130,20,133,44,114,146,100,3,241,76,161,232,191,162,1,48,66,188,75,102,26,168,145,151,248,208,112,139,75,194,48,190,84,6,163,81,108,199,24,82,239,214,25,232,146,209,16,169,101,85,36,6,153,214,42,32,113,87,133,53,14,244,184,209,187,50,112,160,106,16,200,208,210,184,22,193,164,25,83,171,65,81,8,108,55,30,153,235,142,223,76,119,72,39,168,72,155,225,181,188,176,52,99,90,201,197,179,12,28,57,203,138,65,227,74,170,216,78,115,227,99,119,79,202,156,91,163,184,178,214,243,111,46,104,252,178,239,93,238,130,143,116,96,47,23,67,111,99,165,120,114,171,240,161,20,120,200,132,236,57,100,26,8,2,199,140,40,30,99,35,250,255,190,144,233,189,130,222,235,108,80,164,21,121,198,178,247,163,249,190,43,83,114,227,242,120,113,198,156,97,38,234,206,62,39,202,7,194,192,33,199,184,134,209,30,235,224,205,214,125,218,234,120,209,110,238,127,79,125,245,186,111,23,114,170,103,240,6,166,152,200,162,197,125,99,10,174,13,249,190,4,152,63,17,27,71,28,19,53,11,113,27,132,125,4,35,245,119,219,40,147,36,199,64,123,171,202,50,188,190,201,21,10,190,158,60,76,13,16,156,196,103,29,67,182,66,62,203,190,212,197,76,42,126,101,252,156,41,127,89,236,250,214,58,171,111,203,95,23,88,71,74,140,25,68,108], "i8", ALLOC_NONE, 410400);
allocate([152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198], "i8", ALLOC_NONE, 411040);
allocate([152,47,138,66,145,68,55,113,207,251,192,181,165,219,181,233,91,194,86,57,241,17,241,89,164,130,63,146,213,94,28,171,152,170,7,216,1,91,131,18,190,133,49,36,195,125,12,85,116,93,190,114,254,177,222,128,167,6,220,155,116,241,155,193,193,105,155,228,134,71,190,239,198,157,193,15,204,161,12,36,111,44,233,45,170,132,116,74,220,169,176,92,218,136,249,118,82,81,62,152,109,198,49,168,200,39,3,176,199,127,89,191,243,11,224,198,71,145,167,213,81,99,202,6,103,41,41,20,133,10,183,39,56,33,27,46,252,109,44,77,19,13,56,83,84,115,10,101,187,10,106,118,46,201,194,129,133,44,114,146,161,232,191,162,75,102,26,168,112,139,75,194,163,81,108,199,25,232,146,209,36,6,153,214,133,53,14,244,112,160,106,16,22,193,164,25,8,108,55,30,76,119,72,39,181,188,176,52,179,12,28,57,74,170,216,78,79,202,156,91,243,111,46,104,238,130,143,116,111,99,165,120,20,120,200,132,8,2,199,140,250,255,190,144,235,108,80,164,247,163,249,190,242,120,113,198], "i8", ALLOC_NONE, 411296);
allocate(4, "i8", ALLOC_NONE, 411552);
allocate(4, "i8", ALLOC_NONE, 411556);
allocate(4, "i8", ALLOC_NONE, 411560);
allocate(4, "i8", ALLOC_NONE, 411564);
allocate([3,0,5,0,7,0,11,0,13,0,17,0,19,0,23,0,29,0,31,0,37,0,41,0,43,0,47,0,53,0,59,0,61,0,67,0,71,0,73,0,79,0,83,0,89,0,97,0,101,0,103,0,107,0,109,0,113,0,127,0,131,0,137,0,139,0,149,0,151,0,157,0,163,0,167,0,173,0,179,0,181,0,191,0,193,0,197,0,199,0,211,0,223,0,227,0,229,0,233,0,239,0,241,0,251,0,1,1,7,1,13,1,15,1,21,1,25,1,27,1,37,1,51,1,55,1,57,1,61,1,75,1,81,1,91,1,93,1,97,1,103,1,111,1,117,1,123,1,127,1,133,1,141,1,145,1,153,1,163,1,165,1,175,1,177,1,183,1,187,1,193,1,201,1,205,1,207,1,211,1,223,1,231,1,235,1,243,1,247,1,253,1,9,2,11,2,29,2,35,2,45,2,51,2,57,2,59,2,65,2,75,2,81,2,87,2,89,2,95,2,101,2,105,2,107,2,119,2,129,2,131,2,135,2,141,2,147,2,149,2,161,2,165,2,171,2,179,2,189,2,197,2,207,2,215,2,221,2,227,2,231,2,239,2,245,2,249,2,1,3,5,3,19,3,29,3,41,3,43,3,53,3,55,3,59,3,61,3,71,3,85,3,89,3,91,3,95,3,109,3,113,3,115,3,119,3,139,3,143,3,151,3,161,3,169,3,173,3,179,3,185,3,199,3,203,3,209,3,215,3,223,3,229,3,241,3,245,3,251,3,253,3,7,4,9,4,15,4,25,4,27,4,37,4,39,4,45,4,63,4,67,4,69,4,73,4,79,4,85,4,93,4,99,4,105,4,127,4,129,4,139,4,147,4,157,4,163,4,169,4,177,4,189,4,193,4,199,4,205,4,207,4,213,4,225,4,235,4,253,4,255,4,3,5,9,5,11,5,17,5,21,5,23,5,27,5,39,5,41,5,47,5,81,5,87,5,93,5,101,5,119,5,129,5,143,5,147,5,149,5,153,5,159,5,167,5,171,5,173,5,179,5,191,5,201,5,203,5,207,5,209,5,213,5,219,5,231,5,243,5,251,5,7,6,13,6,17,6,23,6,31,6,35,6,43,6,47,6,61,6,65,6,71,6,73,6,77,6,83,6,85,6,91,6,101,6,121,6,127,6,131,6,133,6,157,6,161,6,163,6,173,6,185,6,187,6,197,6,205,6,211,6,217,6,223,6,241,6,247,6,251,6,253,6,9,7,19,7,31,7,39,7,55,7,69,7,75,7,79,7,81,7,85,7,87,7,97,7,109,7,115,7,121,7,139,7,141,7,157,7,159,7,181,7,187,7,195,7,201,7,205,7,207,7,211,7,219,7,225,7,235,7,237,7,247,7,5,8,15,8,21,8,33,8,35,8,39,8,41,8,51,8,63,8,65,8,81,8,83,8,89,8,93,8,95,8,105,8,113,8,131,8,155,8,159,8,165,8,173,8,189,8,191,8,195,8,203,8,219,8,221,8,225,8,233,8,239,8,245,8,249,8,5,9,7,9,29,9,35,9,37,9,43,9,47,9,53,9,67,9,73,9,77,9,79,9,85,9,89,9,95,9,107,9,113,9,119,9,133,9,137,9,143,9,155,9,163,9,169,9,173,9,199,9,217,9,227,9,235,9,239,9,245,9,247,9,253,9,19,10,31,10,33,10,49,10,57,10,61,10,73,10,87,10,97,10,99,10,103,10,111,10,117,10,123,10,127,10,129,10,133,10,139,10,147,10,151,10,153,10,159,10,169,10,171,10,181,10,189,10,193,10,207,10,217,10,229,10,231,10,237,10,241,10,243,10,3,11,17,11,21,11,27,11,35,11,41,11,45,11,63,11,71,11,81,11,87,11,93,11,101,11,111,11,123,11,137,11,141,11,147,11,153,11,155,11,183,11,185,11,195,11,203,11,207,11,221,11,225,11,233,11,245,11,251,11,7,12,11,12,17,12,37,12,47,12,49,12,65,12,91,12,95,12,97,12,109,12,115,12,119,12,131,12,137,12,145,12,149,12,157,12,179,12,181,12,185,12,187,12,199,12,227,12,229,12,235,12,241,12,247,12,251,12,1,13,3,13,15,13,19,13,31,13,33,13,43,13,45,13,61,13,63,13,79,13,85,13,105,13,121,13,129,13,133,13,135,13,139,13,141,13,163,13,171,13,183,13,189,13,199,13,201,13,205,13,211,13,213,13,219,13,229,13,231,13,243,13,253,13,255,13,9,14,23,14,29,14,33,14,39,14,47,14,53,14,59,14,75,14,87,14,89,14,93,14,107,14,113,14,117,14,125,14,135,14,143,14,149,14,155,14,177,14,183,14,185,14,195,14,209,14,213,14,219,14,237,14,239,14,249,14,7,15,11,15,13,15,23,15,37,15,41,15,49,15,67,15,71,15,77,15,79,15,83,15,89,15,91,15,103,15,107,15,127,15,149,15,161,15,163,15,167,15,173,15,179,15,181,15,187,15,209,15,211,15,217,15,233,15,239,15,251,15,253,15,3,16,15,16,31,16,33,16,37,16,43,16,57,16,61,16,63,16,81,16,105,16,115,16,121,16,123,16,133,16,135,16,145,16,147,16,157,16,163,16,165,16,175,16,177,16,187,16,193,16,201,16,231,16,241,16,243,16,253,16,5,17,11,17,21,17,39,17,45,17,57,17,69,17,71,17,89,17,95,17,99,17,105,17,111,17,129,17,131,17,141,17,155,17,161,17,165,17,167,17,171,17,195,17,197,17,209,17,215,17,231,17,239,17,245,17,251,17,13,18,29,18,31,18,35,18,41,18,43,18,49,18,55,18,65,18,71,18,83,18,95,18,113,18,115,18,121,18,125,18,143,18,151,18,175,18,179,18,181,18,185,18,191,18,193,18,205,18,209,18,223,18,253,18,7,19,13,19,25,19,39,19,45,19,55,19,67,19,69,19,73,19,79,19,87,19,93,19,103,19,105,19,109,19,123,19,129,19,135,19,0,0], "i8", ALLOC_NONE, 411568);
allocate(4, "i8", ALLOC_NONE, 412908);
allocate(4, "i8", ALLOC_NONE, 412912);
allocate([48,81,48,13,6,9,96,134,72,1,101,3,4,2,3,5,0,4,64] /* 0Q0\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 412916);
allocate([48,65,48,13,6,9,96,134,72,1,101,3,4,2,2,5,0,4,48] /* 0A0\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 412936);
allocate(4, "i8", ALLOC_NONE, 412956);
allocate(4, "i8", ALLOC_NONE, 412960);
allocate([16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,157,87,111,206,163,163,167,237,144,153,242,146,115,215,142,178,40,139,150,138,232,176,134,72,209,206,150,6,253,153,45,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,157,87,111,206,171,163,167,237,152,153,242,146,123,215,142,19,14,53,62,16,55,194,36,5,232,250,239,178,195,195,233,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,149,87,111,206,163,227,167,237,152,217,242,144,115,215,142,185,14,229,134,45,230,145,104,242,189,213,18,91,69,71,43,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,32,97,164,39,130,189,82,236,105,30,195,131,176,59,167,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 412964);
allocate(4, "i8", ALLOC_NONE, 413304);
allocate(4, "i8", ALLOC_NONE, 413308);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,22,75,122,123,252,248,25,226,227,149,251,231,59,86,224,163,135,189,100,34,46,131,31,214,16,39,12,215,234,37,5,84,151,88,191,117,192,90,153,74,109,3,79,101,248,240,230,253,202,234,177,163,77,74,107,75,99,110,7,10,56,188,231,55,0,0,0,0,0,0,0,0,0,0,0,0,135,170,124,222,165,239,97,157,79,240,180,36,26,29,108,176,35,121,244,226,206,78,194,120,122,208,179,5,69,225,124,222,218,168,51,183,214,184,167,2,3,139,39,78,174,163,244,228,190,157,145,78,235,97,241,112,46,105,108,32,58,18,104,84,0,0,0,0,0,0,0,0,0,0,0,0,250,115,176,8,157,86,162,132,239,176,240,117,108,137,11,233,177,181,219,221,142,232,26,54,85,248,62,51,178,39,157,57,191,62,132,130,121,167,34,200,6,180,133,164,126,103,200,7,185,70,163,55,190,232,148,38,116,39,136,89,225,50,146,251,0,0,0,0,0,0,0,0,0,0,0,0,176,186,70,86,55,69,140,105,144,229,168,197,246,29,74,247,229,118,217,127,249,75,135,45,231,111,128,80,54,30,227,219,169,28,165,193,26,162,94,180,214,121,39,92,197,120,128,99,165,241,151,65,18,12,79,45,226,173,235,235,16,162,152,221,0,0,0,0,0,0,0,0,0,0,0,0,128,178,66,99,199,193,163,235,183,20,147,193,221,123,232,180,155,70,209,244,27,74,238,193,18,27,1,55,131,248,243,82,107,86,208,55,224,95,37,152,189,15,210,33,93,106,30,82,149,230,79,115,246,63,10,236,139,145,90,152,93,120,101,152,0,0,0,0,0,0,0,0,0,0,0,0,227,123,106,119,93,200,125,186,164,223,169,249,110,94,63,253,222,189,113,248,134,114,137,134,93,245,163,45,32,205,201,68,182,2,44,172,60,73,130,177,13,94,235,85,195,228,222,21,19,70,118,251,109,224,68,96,101,201,116,64,250,140,106,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 413312);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,175,69,210,227,118,72,64,49,97,127,120,210,181,138,107,27,156,126,244,100,245,160,27,71,228,46,195,115,99,34,68,94,142,34,64,202,94,105,226,199,139,50,57,236,250,178,22,73,0,0,0,0,0,0,0,0,0,0,0,0,175,208,57,68,216,72,149,98,107,8,37,244,171,70,144,127,21,249,218,219,228,16,30,198,130,170,3,76,124,235,197,156,250,234,158,169,7,110,222,127,74,241,82,232,178,250,156,182,0,0,0,0,0,0,0,0,0,0,0,0,136,6,38,8,211,230,173,138,10,162,172,224,20,200,168,111,10,166,53,217,71,172,159,235,232,62,244,229,89,102,20,75,42,90,179,157,193,56,20,185,78,58,182,225,1,163,79,39,0,0,0,0,0,0,0,0,0,0,0,0,62,138,105,183,120,60,37,133,25,51,171,98,144,175,108,167,122,153,129,72,8,80,0,156,197,87,124,110,31,87,59,78,104,1,221,35,196,167,214,121,204,248,163,134,198,116,207,251,0,0,0,0,0,0,0,0,0,0,0,0,78,206,8,68,133,129,62,144,136,210,198,58,4,27,197,180,79,158,241,1,42,43,88,143,60,209,31,5,3,58,196,198,12,46,246,171,64,48,254,130,150,36,141,241,99,244,73,82,0,0,0,0,0,0,0,0,0,0,0,0,102,23,23,142,148,31,2,13,53,30,47,37,78,143,211,44,96,36,32,254,176,184,251,154,220,206,187,130,70,30,153,197,166,120,204,49,231,153,23,109,56,96,230,17,12,70,82,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 413844);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,91,220,193,70,191,96,117,78,106,4,36,38,8,149,117,199,90,0,63,8,157,39,57,131,157,236,88,185,100,236,56,67,0,0,0,0,0,0,0,0,0,0,0,0,176,52,76,97,216,219,56,83,92,168,175,206,175,11,241,43,136,29,194,0,201,131,61,167,38,233,55,108,46,50,207,247,0,0,0,0,0,0,0,0,0,0,0,0,119,62,169,30,54,128,14,70,133,77,184,235,208,145,129,167,41,89,9,139,62,248,193,34,217,99,85,20,206,213,101,254,0,0,0,0,0,0,0,0,0,0,0,0,130,85,138,56,154,68,60,14,164,204,129,152,153,242,8,58,133,240,250,163,229,120,248,7,122,46,63,244,103,41,102,91,0,0,0,0,0,0,0,0,0,0,0,0,96,228,49,89,30,224,182,127,13,138,38,170,203,245,183,127,142,11,198,33,55,40,197,20,5,70,4,15,14,227,127,84,0,0,0,0,0,0,0,0,0,0,0,0,155,9,255,167,27,148,47,203,39,99,95,188,213,176,233,68,191,220,99,100,79,7,19,147,138,127,81,83,92,58,53,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 414264);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,163,14,1,9,139,198,219,191,69,105,15,58,126,158,109,15,139,190,162,163,158,97,72,0,143,208,94,68,0,0,0,0,0,0,0,0,0,0,0,0,137,111,177,18,138,187,223,25,104,50,16,124,212,157,243,63,71,180,177,22,153,18,186,79,83,104,75,34,0,0,0,0,0,0,0,0,0,0,0,0,127,179,203,53,136,198,193,246,255,169,105,77,125,106,210,100,147,101,176,193,246,93,105,209,236,131,51,234,0,0,0,0,0,0,0,0,0,0,0,0,108,17,80,104,116,1,60,172,106,42,188,27,179,130,98,124,236,106,144,216,110,252,1,45,231,175,236,90,0,0,0,0,0,0,0,0,0,0,0,0,149,233,160,219,150,32,149,173,174,190,155,45,111,13,188,226,212,153,241,18,242,210,183,39,63,166,135,14,0,0,0,0,0,0,0,0,0,0,0,0,58,133,65,102,172,93,159,2,63,84,213,23,208,179,157,189,148,103,112,219,156,43,149,201,246,245,101,209,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 414572);
allocate([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,149,248,165,229,221,49,217,0,128,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,157,100,85,90,154,16,184,82,0,0,0,16,0,0,0,0,56,73,103,76,38,2,49,158,56,73,103,76,38,2,49,158,56,73,103,76,38,2,49,158,81,69,75,88,45,223,68,10,113,120,135,110,1,241,155,42,4,185,21,186,67,254,181,182,4,185,21,186,67,254,181,182,4,185,21,186,67,254,181,182,66,253,68,48,89,87,127,162,175,55,251,66,31,140,64,149,1,35,69,103,137,171,205,239,1,35,69,103,137,171,205,239,1,35,69,103,137,171,205,239,115,111,109,101,100,97,116,97,61,18,79,226,25,139,163,24,1,35,69,103,137,171,205,239,85,85,85,85,85,85,85,85,1,35,69,103,137,171,205,239,115,111,109,101,100,97,116,97,251,171,161,255,157,5,233,177,1,35,69,103,137,171,205,239,85,85,85,85,85,85,85,85,254,220,186,152,118,84,50,16,115,111,109,101,100,97,116,97,24,215,72,229,99,98,5,114,3,82,2,7,103,32,130,23,134,2,135,102,89,8,33,152,100,5,106,189,254,169,52,87,115,113,117,105,103,103,108,101,192,125,42,15,165,102,250,48,1,1,1,1,1,1,1,1,128,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,230,230,221,91,126,114,41,116,16,70,16,52,137,152,128,32,145,7,208,21,137,25,1,1,25,7,146,16,152,26,1,1,0,0,0,0,0,0,0,0,225,239,98,195,50,254,130,91], "i8", ALLOC_NONE, 414852);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,114,97,119,41,32,40,118,97,108,117,101,32,35,97,48,98,49,99,50,100,51,101,52,102,53,49,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,48,97,49,98,50,99,51,100,52,35,41,41,0] /* (data (flags raw) (v */, "i8", ALLOC_NONE, 415252);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,112,107,99,115,49,41,32,40,104,97,115,104,32,115,104,97,49,32,35,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,48,48,97,97,98,98,99,99,100,100,101,101,102,102,56,48,50,48,51,48,52,48,35,41,41,0] /* (data (flags pkcs1)  */, "i8", ALLOC_NONE, 415324);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,114,97,119,41,32,40,118,97,108,117,101,32,35,97,48,98,49,99,50,100,51,101,52,102,53,48,48,49,48,50,48,51,48,52,48,53,48,54,48,55,48,56,48,57,48,97,49,98,50,99,51,100,52,35,41,41,0] /* (data (flags raw) (v */, "i8", ALLOC_NONE, 415400);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,112,107,99,115,49,41,32,40,104,97,115,104,32,115,104,97,49,32,35,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,48,48,97,97,98,98,99,99,100,100,101,101,102,102,49,48,50,48,51,48,52,48,35,41,41,0] /* (data (flags pkcs1)  */, "i8", ALLOC_NONE, 415472);
allocate([123,56,59,35,162,125,38,211] /* {8;#\A2}&\D3 */, "i8", ALLOC_NONE, 415548);
allocate([36,110,157,185,197,80,56,26] /* $n\9D\B9\C5P8\1A */, "i8", ALLOC_NONE, 415556);
allocate([16,0,0,0,0,0,0,0] /* \10\00\00\00\00\00\0 */, "i8", ALLOC_NONE, 415564);
allocate([144,175,233,27,178,136,84,79,44,50,220,35,155,38,53,230] /* \90\AF\E9\1B\B2\88TO */, "i8", ALLOC_NONE, 415572);
allocate(8, "i8", ALLOC_NONE, 415588);
allocate([220,238,76,249,44] /* \DC\EEL\F9, */, "i8", ALLOC_NONE, 415596);
allocate(8, "i8", ALLOC_NONE, 415604);
allocate([212,145,219,22,231,177,195,158,134,203,8,107,120,159,84,25] /* \D4\91\DB\16\E7\B1\C */, "i8", ALLOC_NONE, 415612);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415628);
allocate([131,162,248,162,136,100,31,185,164,233,165,204,47,19,28,125] /* \83\A2\F8\A2\88d\1F\ */, "i8", ALLOC_NONE, 415644);
allocate([254,220,186,152,118,84,50,16] /* \FE\DC\BA\98vT2\10 */, "i8", ALLOC_NONE, 415660);
allocate([1,35,69,103,137,171,205,239] /* \01#Eg\89\AB\CD\EF */, "i8", ALLOC_NONE, 415668);
allocate([66,76,79,87,70,73,83,72,0] /* BLOWFISH\00 */, "i8", ALLOC_NONE, 415676);
allocate([48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /* 0\00\00\00\00\00\00\ */, "i8", ALLOC_NONE, 415688);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16,0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415704);
allocate([212,59,183,85,110,163,46,70,242,162,130,183,212,91,78,13,87,255,115,157,77,201,44,27,215,252,1,112,12,200,33,111] /* \D4;\B7Un\A3.F\F2\A2 */, "i8", ALLOC_NONE, 415736);
allocate([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] /* \00\01\02\03\04\05\0 */, "i8", ALLOC_NONE, 415768);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16,0,17,34,51,68,85,102,119] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415784);
allocate([1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,16] /* \01#Eg\89\AB\CD\EF\F */, "i8", ALLOC_NONE, 415808);
allocate([97,138,99,210,251] /* a\8Ac\D2\FB */, "i8", ALLOC_NONE, 415824);
allocate(16, "i8", ALLOC_NONE, 415832);
allocate([159,88,159,92,246,18,44,50,182,191,236,47,42,232,195,90] /* \9FX\9F\5C\F6\12,2\B */, "i8", ALLOC_NONE, 415848);
allocate([71,6,72,8,81,230,27,232,93,116,191,179,253,149,97,133] /* G\06H\08Q\E6\1B\E8]t */, "i8", ALLOC_NONE, 415864);
allocate([65,121,110,160,82,97,110,228] /* Ayn\A0Ran\E4 */, "i8", ALLOC_NONE, 415880);
allocate([17,34,51,68,255,170,204,221] /* \11\223D\FF\AA\CC\DD */, "i8", ALLOC_NONE, 415888);
allocate([1,35,69,103,18,52,86,120,35,69,103,137,52,86,120,154] /* \01#Eg\124Vx#Eg\894V */, "i8", ALLOC_NONE, 415896);
allocate([18,52,86,120,154,188,222,240] /* \124Vx\9A\BC\DE\F0 */, "i8", ALLOC_NONE, 415912);
allocate([85,85,85,85,85,85,85,85] /* UUUUUUUU */, "i8", ALLOC_NONE, 415920);
allocate([185,202,127,214,160,245,211,66,25,109,132,145,118,28,59,190,72,178,130,152,104,194,128,0,0,0,40,24,0,0,37,0,82,23,141,41,162,213,132,18,157,137,154,69,130,2,247,119,66,156,8,61,130,244,138,64,102,181,73,39,171,66,199,195,14,183,97,60,254,176,190,115,247,110,109,111,29,163,20,250,187,75,193,14,197,251,205,70,190,40,97,231,3,43,55,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,149,189,74,82,226,158,215,19,211,19,250,32,233,141,188,200,209,229,17,89,82,247,250,55,56,180,197,206,178,176,154,13,156,197,13,22,225,188,237,207,96,98,9,157,32,131,126,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,128,0,129,1,130,2,131,3,160,32,161,33,162,34,163,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,150,237,204,195,221,4,127,117,99,25,55,111,21,34,87,86,122,20,118,119,149,23,126,200,146,232,221,21,203,31,188,177,37,62,46,162,65,27,221,245,33,72,65,113,179,141,47,76], "i8", ALLOC_NONE, 415928);
allocate([254,220,186,152,118,84,50,16] /* \FE\DC\BA\98vT2\10 */, "i8", ALLOC_NONE, 416216);
allocate([255,255,255,255,255,255,255,255] /* \FF\FF\FF\FF\FF\FF\F */, "i8", ALLOC_NONE, 416224);
allocate([2,0,0,0,43,126,21,22,40,174,210,166,171,247,21,136,9,207,79,60,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,107,193,190,226,46,64,159,150,233,61,126,17,115,147,23,42,59,63,217,46,183,45,173,32,51,52,73,248,232,60,251,74,174,45,138,87,30,3,172,156,158,183,111,172,69,175,142,81,200,166,69,55,160,179,169,63,205,227,205,173,159,28,229,139,48,200,28,70,163,92,228,17,229,251,193,25,26,10,82,239,38,117,31,103,163,203,177,64,177,128,140,241,135,164,244,223,246,159,36,69,223,79,155,23,173,43,65,123,230,108,55,16,192,75,5,53,124,93,28,14,234,196,198,111,159,247,242,230,5,0,0,0,43,126,21,22,40,174,210,166,171,247,21,136,9,207,79,60,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,107,193,190,226,46,64,159,150,233,61,126,17,115,147,23,42,59,63,217,46,183,45,173,32,51,52,73,248,232,60,251,74,174,45,138,87,30,3,172,156,158,183,111,172,69,175,142,81,119,137,80,141,22,145,143,3,245,60,82,218,197,78,216,37,48,200,28,70,163,92,228,17,229,251,193,25,26,10,82,239,151,64,5,30,156,95,236,246,67,68,247,168,34,96,237,204,246,159,36,69,223,79,155,23,173,43,65,123,230,108,55,16,48,76,101,40,246,89,199,120,102,165,16,217,193,214,174,94], "i8", ALLOC_NONE, 416232);
allocate([143,209,3,137,51,107,249,94] /* \8F\D1\03\893k\F9^ */, "i8", ALLOC_NONE, 416560);
allocate([154,204,35,125,255,22,215,108,32,239,124,145,158,58,117,9] /* \9A\CC#}\FF\16\D7l \ */, "i8", ALLOC_NONE, 416568);
allocate([108,180,86,28,64,191,10,151,5,147,28,182,212,8,231,250] /* l\B4V\1C@\BF\0A\97\0 */, "i8", ALLOC_NONE, 416584);
allocate([80,220,1,98,189,117,127,49] /* P\DC\01b\BDu\7F1 */, "i8", ALLOC_NONE, 416600);
allocate([180,153,52,1,179,233,150,248,78,229,206,231,215,155,9,185] /* \B4\994\01\B3\E9\96\ */, "i8", ALLOC_NONE, 416608);
allocate([103,103,49,56,84,150,105,115,8,87,6,86,72,234,190,67] /* gg18T\96is\08W\06VH\ */, "i8", ALLOC_NONE, 416624);
allocate([241,56,41,201,222] /* \F18)\C9\DE */, "i8", ALLOC_NONE, 416640);
allocate([28,25,138,131,141,240,40,183] /* \1C\19\8A\83\8D\F0(\ */, "i8", ALLOC_NONE, 416648);
allocate([1,159,152,9,222,23,17,133,143,170,195,163,186,32,251,195] /* \01\9F\98\09\DE\17\1 */, "i8", ALLOC_NONE, 416656);
allocate([238,84,209,62,188,174,112,109,34,107,195,20,44,212,13,74] /* \EET\D1_\BC\AEpm\22k */, "i8", ALLOC_NONE, 416672);
allocate([225,19,244,16,44,252,206,67] /* \E1\13\F4\10,\FC\CEC */, "i8", ALLOC_NONE, 416688);
allocate([35,139,79,229,132,126,68,178] /* #\8BO\E5\84~D\B2 */, "i8", ALLOC_NONE, 416696);
allocate([6,154,0,127,199,106,69,159,152,186,249,23,254,223,149,33] /* \06\9A\00\7F\C7jE\9F */, "i8", ALLOC_NONE, 416704);
allocate([8,9,10,11,13,14,15,16,18,19,20,21,23,24,25,26,28,29,30,31,33,34,35,36,38,39,40,41,43,44,45,46] /* \08\09\0A\0B\0D\0E\0 */, "i8", ALLOC_NONE, 416720);
allocate([8,14,149,23,235,22,119,113,154,207,114,128,134,4,10,227] /* \08\0E\95\17\EB\16wq */, "i8", ALLOC_NONE, 416752);
allocate([118,119,116,117,241,242,243,244,248,249,230,231,119,112,113,114] /* vwtu\F1\F2\F3\F4\F8\ */, "i8", ALLOC_NONE, 416768);
allocate([4,5,6,7,9,10,11,12,14,15,16,17,19,20,21,22,24,25,26,27,29,30,31,32] /* \04\05\06\07\09\0A\0 */, "i8", ALLOC_NONE, 416784);
allocate([93,30,242,13,206,214,188,188,18,19,26,199,197,71,136,170] /* ]\1E\F2\0D\CE\D6\BC\ */, "i8", ALLOC_NONE, 416808);
allocate([1,75,175,34,120,166,157,51,29,81,128,16,54,67,233,154] /* \01K\AF\22x\A6\9D3\1 */, "i8", ALLOC_NONE, 416824);
allocate([232,233,234,235,237,238,239,240,242,243,244,245,247,248,249,250] /* \E8\E9\EA\EB\ED\EE\E */, "i8", ALLOC_NONE, 416840);
allocate([103,67,195,209,81,154,180,242,205,154,120,171,9,165,17,189] /* gC\C3\D1Q\9A\B4\F2\C */, "i8", ALLOC_NONE, 416856);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 416872);
allocate(4, "i8", ALLOC_NONE, 416912);
allocate(4, "i8", ALLOC_NONE, 416916);
allocate(4, "i8", ALLOC_NONE, 416920);
allocate([64,16,0,16,0,16,0,0,0,0,4,0,64,16,4,16,0,0,0,16,64,16,0,16,64,0,0,0,0,0,0,16,64,0,4,0,0,0,4,16,64,16,4,16,0,16,4,0,0,16,4,16,64,16,4,0,0,16,0,0,64,0,0,0,0,0,4,16,64,0,0,16,0,16,0,16,64,16,0,0,0,16,4,0,64,0,4,0,64,0,4,16,0,16,4,16,64,16,0,0,0,0,0,0,0,0,0,0,64,0,4,16,64,0,0,16,0,16,0,16,64,16,4,0,0,0,4,0,64,16,4,0,0,0,4,0,0,16,4,16,0,16,0,0,64,0,0,0,64,0,4,16,0,16,0,0,64,16,4,0,0,16,0,16,64,0,0,0,64,0,0,16,0,0,4,16,64,0,4,16,0,0,0,16,0,0,4,0,64,16,0,16,0,0,0,0,64,16,4,16,64,0,4,0,64,0,0,16,0,0,4,16,0,16,0,16,64,16,0,16,0,0,0,0,64,16,4,16,0,16,4,0,0,16,4,0,64,16,0,0,64,16,0,0,64,0,4,0,0,0,0,16,0,16,4,16], "i8", ALLOC_NONE, 416924);
allocate([0,0,32,0,2,0,32,4,2,8,0,4,0,0,0,0,0,8,0,0,2,8,0,4,2,8,32,0,0,8,32,4,2,8,32,4,0,0,32,0,0,0,0,0,2,0,0,4,2,0,0,0,0,0,0,4,2,0,32,4,2,8,0,0,0,8,0,4,2,8,32,0,2,0,32,0,0,8,0,4,2,0,0,4,0,0,32,4,0,8,32,4,2,0,32,0,0,0,32,4,0,8,0,0,2,8,0,0,2,8,32,4,0,8,32,0,2,0,0,0,0,0,0,4,0,8,32,0,0,0,0,4,0,8,32,0,0,0,32,0,2,8,0,4,2,8,0,4,2,0,32,4,2,0,32,4,2,0,0,0,2,0,32,0,0,0,0,4,0,8,0,4,0,0,32,0,0,8,32,4,2,8,0,0,2,8,32,0,0,8,32,4,2,8,0,0,2,0,0,4,2,8,32,4,0,0,32,4,0,8,32,0,0,0,0,0,2,0,0,0,2,8,32,4,0,0,0,0,2,8,32,0,0,0,32,4,0,8,0,0,2,0,0,4,0,8,0,4,0,8,0,0,2,0,32,0], "i8", ALLOC_NONE, 417180);
allocate([16,0,0,32,0,0,64,32,0,64,0,0,16,64,64,32,0,0,64,32,16,0,0,0,16,64,64,32,0,0,64,0,0,64,0,32,16,64,64,0,0,0,64,0,16,0,0,32,16,0,64,0,0,64,0,32,0,0,0,32,16,64,0,0,0,0,0,0,16,0,64,0,16,64,0,32,0,64,0,0,0,64,64,0,16,64,0,32,16,0,0,0,16,0,64,32,16,0,64,32,0,0,0,0,16,64,64,0,0,64,64,32,16,64,0,0,0,64,64,0,0,64,64,32,0,0,0,32,0,64,0,32,16,0,0,0,16,0,64,32,0,64,64,0,16,64,64,32,0,0,64,0,16,64,0,0,16,0,0,32,0,0,64,0,0,64,0,32,0,0,0,32,16,64,0,0,16,0,0,32,16,64,64,32,0,64,64,0,0,0,64,32,16,64,64,0,0,64,64,32,0,0,0,0,16,0,64,32,16,0,0,0,0,64,0,0,0,0,64,32,16,64,64,0,0,64,0,0,16,0,64,0,16,64,0,32,0,0,0,0,0,64,64,32,0,0,0,32,16,0,64,0,16,64,0,32], "i8", ALLOC_NONE, 417436);
allocate([0,1,0,0,0,1,8,2,0,0,8,2,0,1,0,66,0,0,8,0,0,1,0,0,0,0,0,64,0,0,8,2,0,1,8,64,0,0,8,0,0,1,0,2,0,1,8,64,0,1,0,66,0,0,8,66,0,1,8,0,0,0,0,64,0,0,0,2,0,0,8,64,0,0,8,64,0,0,0,0,0,1,0,64,0,1,8,66,0,1,8,66,0,1,0,2,0,0,8,66,0,1,0,64,0,0,0,0,0,0,0,66,0,1,8,2,0,0,0,2,0,0,0,66,0,1,8,0,0,0,8,0,0,1,0,66,0,1,0,0,0,0,0,2,0,0,0,64,0,0,8,2,0,1,0,66,0,1,8,64,0,1,0,2,0,0,0,64,0,0,8,66,0,1,8,2,0,1,8,64,0,1,0,0,0,0,0,2,0,0,8,66,0,1,8,66,0,1,8,0,0,0,0,66,0,1,8,66,0,0,8,2,0,0,0,0,0,0,8,64,0,0,0,66,0,1,8,0,0,1,0,2,0,1,0,64,0,0,8,0,0,0,0,0,0,0,8,64,0,1,8,2,0,1,0,64], "i8", ALLOC_NONE, 417692);
allocate([85,60,50,38,133,96,14,91,245,89,27,250,169,193,70,26,250,143,76,124,161,69,226,169,215,85,41,219,89,81,202,101,194,175,53,206,118,10,219,5,69,61,17,169,126,199,234,129,13,10,172,182,138,248,142,82,255,227,123,89,83,162,158,160,86,205,72,172,179,223,13,67,111,228,92,244,122,166,179,196,94,208,226,251,216,207,206,78,240,53,153,179,16,111,245,62,198,25,214,156,130,214,34,11,105,32,223,116,10,70,253,23,64,237,16,133,142,204,248,108,167,202,110,58,191,36,200,214,73,112,129,26,88,61,36,97,162,99,193,187,182,172,139,4,50,204,68,125,194,138,163,217,171,16,244,170,91,255,221,127,75,130,4,168,90,73,109,173,148,159,140,45,79,167,166,225,227,232,222,53,18,133,247,212,147,216,64,101,136,127,75,253,218,191,164,42,4,32,124,36,124,50,209,23,197,161,110,9,133,102,26,54,180,102,105,213,125,5,33,18,195,165,125,39,247,207,58,164,147,152,213,148,129,34,192,205,28,197,240,100,219,137,97,255,196,188,51,61,241,106,230,76,24,203,5,224,234,155,185,29,29,205,92,255,15,152,66,254,167,84,184,176,159,75,141,113,106,106,212,123,140,253,165,34,204,168,15,209,49,189,228,43,149,132,20,211,71,56,36,203,95,151,250,199,7,196,70,88,30,237,134,72,4,11,183,30,121,219,205,40,127,65,115,245,226,11,176,194,119,248,128,33,69,144,149,92,0,235,112,243,255,221,107,122,164,214,217,214,56,158,80,206,2,167,127,100,0,15,235,235,6,111,96,118,207,6,204,29,10,255,134,162,139,242,217,228,98,194,24,201,93,48,90,216,84,95,34,50,135,29,91,71,254,181,204,104,22,181,79,45,32,186,43,215,217,185,121,166,165,67,45,145,13,28,132,83,232,164,18,191,72,170,126,59,223,29,47,242,71,14,30,120,115,9,181,10,230,12,242,239,66,183,255,157,209,97,210,32,57,46,42,6,3,43,161,22,149,4,101,57,34,235,96,25,184,184,14,213,254,22,28,37,110,1,38,248,48,195,192,154,113,118,62,149,101,38,21,237,112,149,54,166,148,49,214,2,135,201,177,148,131,240,116,80,225,92,178,144,140,89,186,112,246,66,151,11,129,21,74,121,108,140,175,252,233,37,89,13,78,116,104,216,108,113,103,48,27,115,215,232,119,176,10,145,97,47,196,90,219,187,97,106,103,21,133,240,251,62,81,147,213,233,131,158,75,114,148,244,141,100,9,92,152,225,135,232,253,12,55,117,198,211,177,52,93,37,13,188,51,228,53,220,224,27,19,52,66,184,170,208,175,126,139,180,80,42,4,8,53,171,163,68,238,196,151,153,208,153,23,32,73,123,154,130,65,68,197,183,7,131,59,38,166,108,106,253,244,149,47,117,229,198,8,44,64,23,114,146,238,217,149,167,84,183,138,42,61,148,114,47,85,247,66,164,8,18,120,25,78,51,49,44,145,98,238,234,124,141,169,79,9,179,93,102,47,134,195,85,243,177,83,93,23,16,6,189,39,63,65,64,184,108,254,70,89,250,12,223,146,55,224,63,143,94,184,46,55,0,231,207,24,225,188,173,231,41,190,167,221,49,132,222,92,238,68,229,62,135,241,65,27,27,120,138,231,240,210,160,120,76,201,165,40,7,182,119,40,46,65,57,44,166,201,175,243,94,38,161,197,6,37,106,12,119,194,188,18,206,225,220,213,109,182,58,55,91,103,74,208,153,84,230,22,210,191,129,52,82,143,125,137,243,21,236,252,100,111,15,200,19,91,139,97,190,239,116,29,62,39,20,183,130,220,172,23,157,25,3,224,191,64,221,248,97,224,231,87,146,233,55,170,90,119,4,105,98,82,250,249,86,61,70,58,246,187,139,100,110,162,67,21,63,1,240,152,200,158,135,159,126,48,168,204,119,1,21,164,39,76,204,72,51,29,202,44,47,67,27,19,160,111,159,143,31,29,222,214,221,167,71,160,2,102,96,199,178,28,204,100,171,55,210,211,209,252,37,114,142,147,155,118,244,15,142,112,3,78,236,45,193,3,61,218,251,178,254,154,136,67,238,210,206,11,174,67,79,251,235,35,137,203,34,109,57,247,60,1,13,54,105,34,224,212,210,2,54,94,133,76,120,31,208,186,5,56,7,70,245,82,56,19,122,225,51,56,182,199,138,5,116,72,223,74,161,138,103,156,178,146,186,205,173,250,108,199,159,232,12,52,158,51,8,9,78,157,95,185,35,89,31,41,233,175,241,95,38,74,15,246,128,52,110,28,132,155,178,42,58,191,238,173,180,145,143,168,56,25,226,195,211,198,69,248,239,223,87,242,170,44,246,11,107,0,47,120,238,117,111,239,121,244,98,169,22,137,28,212,90,165,17,83,212,254,132,144,210,41,242,230,0,176,22,123,194,241,66,116,192,35,152,116,118,31,43,96,83,116,194,163,236,118,75,189,145,22,185,99,244,152,140,106,230,173,241,60,201,188,20,151,131,69,109,62,33,133,136,17,71,77,39,240,125,23,142,81,41,63,80,181,115,155,180,107,107,249,195,104,129,22,16,174,176,202,99,59,150,61,14,20,219,161,85,86,75,252,141,92,222,20,110,53,241,137,247,193,218,81,78,175,104,62,104,217,15,75,141,157,79,168,201,209,249,160,82,63,224,145,54,128,142,135,225,70,110,216,94,80,113,208,153,14,26,113,60,16,147,78,12,178,101,8,90,46,104,240,228,31,252,251,86,155,223,94,16,227,93,141,234,122,24,121,35,177,253,171,113,156,123,231,190,225,157,185,46,35,69,207,51,234,192,236,33,161,199,5,24,82,215,164,89,114,124,174,86,235,245,150,56,220,117,143,177,61,143,99,170,142,128,233,171,141,53,57,159,172,114,11,192,145,250,222,183,146,45,73,98,253,65,85,107,91,77,46,249,232,222,198,109,126,234,190,196,171,87,63,53,206,144,86,218,214,105,87,115,132,20,57,66,166,74,35,10,157,13,248,40,128,80,249,246,21,242,179,122,162,25,227,184,77,26,52,81,17,156,173,49,5,88,239,123,165,34,60,119,51,134,150,7,26,86,199,69,54,190,157,36,158,218,19,249,104,76,166,120,155,45,101,218,239,52,195,59,127,169,39,76,244,23,107,230,32,18,98,118,11,125,205,154,137,67,119,150,130,103,237,224,202,91,238,243,252,121,200,0,54,117,159,64,182,109,146,181,57,154,208,6,136,197,122,49,176,174,131,111,33,31,56,134,74,202,230,1,37,48,159,209,98,52,255,102,251,59,253,221,36,124,32,114,235,226,236,226,211,182,246,74,222,8,234,199,190,77,153,156,196,139,154,176,151,229,172,73,186,151,7,207,102,71,140,179,117,42,124,197,115,147,27,19,88,30,147,97,206,44,130,177,12,28,186,9,185,85,117,157,210,17,125,147,221,175,127,18,228,146,109,198,173,59,218,41,188,236,194,84,113,213,193,162,36,254,246,130,77,19,197,88,79,39,98,91,81,227,58,28,38,129,203,1,46,200,7,233,203,127,227,19,25,9,237,248,201,70,0,200,249,216,73,50,99,251,136,227,237,155,207,128,158,241,108,17,154,83,129,24,87,36,213,107,247,243,3,81,168,247,71,174,245,230,183,21,207,156,126,212,222,198,215,219,26,187,40,2,65,92,229,68,153,78,219,94,37,212,71,182,48,252,170,184,43,136,17,93,42,33,211,41,187,139,9,245,179,150,2,233,20,234,181,143,90,2,221,87,33,148,123,103,181,172,144,163,192,231,88,251,1,74,189,131,76,103,211,137,59,185,243,75,223,164,45,158,41,72,171,140,50,30,196,252,82,44,88,186,150,140,243,3,178,93,216,127,189,189,209,202,131,174,130,96,193,66,180,187,176,154,218,165,107,232,95,185,63,169,113,55,103,4,46,178,216,82,49,73,201,88,83,132,30,84,180,151,134,72,42,190,102,105,142,211,45,220,162,149,43,133,60,146,172,17,44,192,123,168,242,13,153,177,136,35,190,55,79,27,250,8,128,124,3,229,84,77,200,208,112,31,212,87,206,126,236,173,144,84,58,58,6,217,39,60,43,0,191,162,48,128,132,163,174,126,192,3,32,237,109,50,2,198,134,64,169,105,125,40,167,131,138,122,245,48,203,95,122,197,121,231,235,121,228,68,104,181,233,188,220,5,15,180,115,163,226,14,87,136,110,120,26,215,160,246,232,189,205,186,156,135,47,163,100,193,188,209,106,151,139,215,102,150,94,226,33,171,60,195,229,229,170,99,16,144,144,141,105,72,68,179,24,152,187,138,30,62,174,135,100,227,180,220,59,137,49,249,189,175,25,213,187,95,220,160,69,99,202,101,148,155,38,254,40,134,236,81,156,63,96,1,93,30,183,73,80,161,6,64,228,77,177,203,118,247,229,112,108,191,237,43,85,239,242,24,18,65,163,54,90,112,8,7,12,203,68,96,152,79,117,20,77,231,14,40,168,14,67,217,86,205,101,80,95,83,215,145,37,193,150,239,10,114,241,35,50,200,31,165,99,115,111,57,160,195], "i8", ALLOC_NONE, 417948);
allocate([1,32,128,0,129,32,0,0,129,32,0,0,128,0,0,0,128,32,128,0,129,0,128,0,1,0,128,0,1,32,0,0,0,0,0,0,0,32,128,0,0,32,128,0,129,32,128,0,129,0,0,0,0,0,0,0,128,0,128,0,1,0,128,0,1,0,0,0,0,32,0,0,0,0,128,0,1,32,128,0,128,0,0,0,0,0,128,0,1,32,0,0,128,32,0,0,129,0,128,0,1,0,0,0,128,32,0,0,128,0,128,0,0,32,0,0,128,32,128,0,129,32,128,0,129,0,0,0,128,0,128,0,1,0,128,0,0,32,128,0,129,32,128,0,129,0,0,0,0,0,0,0,0,0,0,0,0,32,128,0,128,32,0,0,128,0,128,0,129,0,128,0,1,0,0,0,1,32,128,0,129,32,0,0,129,32,0,0,128,0,0,0,129,32,128,0,129,0,0,0,1,0,0,0,0,32,0,0,1,0,128,0,1,32,0,0,128,32,128,0,129,0,128,0,1,32,0,0,128,32,0,0,0,0,128,0,1,32,128,0,128,0,0,0,0,0,128,0,0,32,0,0,128,32,128,0], "i8", ALLOC_NONE, 419996);
allocate([155,243,218,241,47,204,159,244,129,146,242,111,198,213,127,72,63,168,220,252,103,6,163,232,99,206,252,210,227,75,155,44,194,187,251,147,75,247,63,218,102,186,112,254,210,101,161,47,212,147,14,151,121,226,3,161,113,94,228,176,119,236,205,190,151,228,133,57,114,30,180,207,23,80,247,94,2,170,10,183,224,184,64,56,240,9,35,212,121,133,137,53,208,26,252,142,197,171,178,226,11,146,198,150,114,145,90,55,99,65,175,102,251,39,113,202,220,171,116,33,65,255,114,74,166,206,60,179,165,102,48,8,51,73,74,240,245,154,40,215,205,10,151,141,94,194,200,49,224,232,150,143,71,93,135,118,34,192,254,243,221,144,97,5,16,243,123,236,145,20,15,187,174,176,173,245,146,136,213,15,133,248,80,155,232,77,183,88,131,72,117,73,97,28,83,145,246,79,53,163,238,198,210,129,228,187,2,7,152,237,237,125,5,36,251,137,2,233,150,133,19,117,48,172,237,114,39,23,128,53,45,29,13,195,107,142,194,143,115,235,38,67,4,99,143,239,84,88,190,59,221,90,50,82,92,158,35,70,92,50,207,83,170,144,103,208,157,52,81,77,210,193,36,166,158,166,238,207,81,32,79,126,46,134,10,15,34,19,100,72,224,4,148,57,57,206,183,252,134,112,164,44,196,217,204,231,3,138,35,210,90,104,219,241,47,171,178,132,100,6,236,121,191,239,112,93,157,254,84,24,72,156,221,185,19,91,173,9,21,237,117,212,240,21,81,152,199,14,6,205,235,11,248,183,58,24,145,103,140,213,228,238,243,82,80,124,24,209,255,130,78,229,146,17,93,201,162,108,172,185,76,161,238,134,93,125,103,83,177,190,133,52,42,73,140,31,120,29,25,221,249,235,132,167,186,102,8,246,116,140,208,162,59,100,143,81,34,124,8,225,86,233,82,136,141,174,16,196,141,203,104,167,26,142,236,191,38,119,4,56,170,69,59,205,180,56,119,166,25,222,13,236,28,105,22,173,7,46,70,128,147,49,212,198,56,25,166,11,109,135,165,197,64,216,143,165,31,250,185,22,24,79,167,60,23,177,138,24,31,2,156,201,152,47,218,171,22,232,74,19,171,128,5,62,187,90,100,115,183,5,59,95,246,242,117,85,190,162,1,37,169,139,126,78,0,116,47,27,83,217,232,113,3,88,215,28,48,78,118,98,149,216,110,127,61,0,111,89,255,38,89,177,185,214,197,168,61,41,101,159,76,248,144,214,77,240,206,110,136,175,51,255,95,39,130,71,1,8,130,63,8,51,20,228,181,249,26,154,64,254,13,253,107,57,219,44,52,163,37,67,82,178,1,179,98,126,231,138,90,97,85,102,159,158,111,195,9,44,211,146,45,90,69,133,133,116,71,73,169,222,199,242,186,158,163,51,193,180,207,99,98,84,188,110,204,64,176,131,176,38,179,253,200,84,148,59,140,215,255,135,158,106,245,86,198,43,244,153,13,148,194,45,45,110,9,107,9,223,247,152,191,82,216,58,30,224,166,25,11,180,212,219,203,156,169,66,89,197,233,69,175,152,153,165,134,49,217,7,232,149,98,54,115,247,161,250,27,24,72,107,29,10,122,21,226,87,236,31,213,26,32,246,106,68,103,70,117,240,176,207,202,235,21,230,120,7,41,104,79,31,243,184,30,209,34,206,214,62,113,34,59,201,195,46,167,193,87,48,47,31,63,124,195,172,70,203,14,245,170,2,253,147,184,219,207,159,11,96,46,217,31,51,214,58,234,72,97,249,152,164,234,131,106,139,110,66,216,168,220,92,115,183,116,178,137,160,17,74,82,30,115,179,246,135,73,103,201,203,229,8,136,17,148,211,155,177,199,228,6,153,12,162,36,155,126,127,237,175,167,68,54,235,222,234,9,101,222,14,239,232,211,241,30,108,180,143,121,233,67,125,201,185,163,40,12,116,132,215,242,162,111,86,151,97,71,150,132,123,157,6,95,182,230,227,91,122,16,111,190,120,237,48,99,249,21,106,7,122,231,13,230,238,208,155,139,160,74,238,75,43,78,137,184,199,62,166,86,106,244,254,52,186,89,19,18,2,252,3,55,40,248,153,191,76,200,48,175,12,53,113,128,57,122,104,23,240,137,122,167,208,105,53,66,158,235,169,193,241,153,129,238,45,40,118,121,140,189,122,31,221,165,55,23,93,128,250,169,9,60,67,83,79,217,161,124,223,83,12,139,250,119,203,108,136,188,220,217,63,32,71,27,169,124,145,64,192,223,220,209,249,66,1,208,125,88,123,56,79,29,252,118,132,3,101,49,243,197,231,248,35,57,115,227,231,68,34,42,3,75,167,245,80,215,165,135,92,46,153,152,54,196,76,43,8,60,246,88,184,236,123,145,223,218,109,248,91,252,184,112,50,118,221,181,41,187,114,174,16,43,54,0,119,78,201,106,87,143,251,30,198,218,18,209,26,39,164,250,197,14,195,27,105,67,113,50,204,17,99,36,255,6,50,229,48,142,54,66,49,150,163,44,224,49,14,56,113,241,118,173,10,150,92,141,149,54,165,109,193,48,244,214,248,210,225,231,27,63,209,255,200,225,219,77,0,102,174,120,117,70,230,123,6,1,63,131,5,109,88,254,59,173,181,52,187,240,151,43,161,201,52,95,9,168,12,214,37,69,182,122,36,209,119,116,1,243,198,219,220,77,210,202,222,212,20,46,74,235,30,10,190,217,230,181,189,171,1,67,121,247,112,126,42,253,64,5,39,138,45,244,222,193,34,76,163,192,142,7,1,135,99,193,244,26,81,222,229,10,51,154,189,82,58,187,126,53,100,125,170,87,120,105,119,50,76,174,3,22,131,78,0,18,227,120,173,32,16,162,231,242,32,180,106,12,167,65,157,230,65,17,234,24,108,224,40,40,107,79,152,189,140,178,210,131,157,110,68,108,95,183,38,127,141,65,77,140,86,71,186,142,61,24,230,191,173,11,216,68,96,22,95,127,109,32,14,62,202,203,17,57,164,88,226,188,192,29,178,70,23,58,114,211,205,215,245,84,168,202,199,156,29,38,61,136,50,172,124,44,148,186,35,100,194,144,118,184,66,128,71,36,85,229,23,159,56,162,86,118,71,190,224,160,45,171,103,94,155,40,77,49,253,187,143,156,43,134,68,101,19,20,157,4,200,124,180,147,199,145,43,54,27,44,130,216,223,19,251,85,70,177,78,123,169,226,20,7,186,203,30,20,95,222,92,157,69,67,97,137,172,240,213,241,251,168,83,0,91,94,28,216,4,234,151,243,179,253,212,168,129,33,98,8,18,42,87,65,211,188,233,138,229,204,67,134,37,17,20,164,224,198,164,254,197,68,145,15,98,207,101,101,208,51,13,161,156,33,159,72,141,164,84,33,200,99,109,172,94,62,196,175,13,119,114,58,139,114,169,239,135,223,32,123,78,147,215,229,134,62,26,182,3,85,227,4,213,25,200,251,33,227,202,166,191,96,172,179,80,154,18,195,182,159,126,234,104,94,205,199,177,131,148,25,144,28,176,108,55,149,194,213,60,233,61,19,173,185,42,223,46,213,174,132,120,160,192,18,245,96,46,201,16,98,227,163,134,61,188,206,81,57,22,155,157,38,53,250,181,205,208,42,110,125,12,51,87,127,216,151,98,232,89,231,176,141,137,33,242,142,41,126,170,165,209,41,0,0,85,69,27,6,181,225,138,192,139,58,112,146,108,43,28,195,194,66,239,37,175,107,89,204,148,86,4,84,34,219,115,29,10,154,23,196,217,249,160,182,4,96,60,61,174,162,175,253,239,196,150,148,180,91,7,200,247,227,212,28,29,20,199,197,156,52,85,142,33,56,22,189,120,106,36,80,248,104,21,241,178,41,188,2,149,250,188,250,237,27,5,35,218,242,229,108,121,124,83,147,220,176,40,225,170,174,41,75,238,160,61,73,58,215,149,104,65,44,107,223,181,55,127,45,18,37,189,171,252,177,196,93,16,88,11,129,112,144,42,136,247,55,221,15,225,92,63,138,81,181,202,77,82,91,37,81,132,135,133,158,60,226,52,189,25,129,130,41,64,203,236,60,93,111,91,160,116,202,62,225,66,21,2,16,182,172,226,89,47,209,121,249,15,80,204,249,228,39,218,55,96,125,132,241,13,90,151,146,94,254,35,230,211,144,225,109,214,72,128,86,123,184,214,50,80,110,33,53,130,206,183,54,154,74,75,246,36,122,42,39,128,247,22,105,140,139,237,239,147,85,21,206,76,244,191,221,55,37,189,153,75,93,219,149,75,192,47,129,105,161,253,211,146,182,11,102,144,154,74,26,251,178,185,164,70,105,25,12,115,104,218,73,127,170,137,226,129,95,160,177,131,15,154,102,100,139,244,68,150,125,255,179,39,179,117,182,141,92,97,107,204,149,190,235,188,185,32,79,103,130,89,101,117,130,35,49,111,5,207,69,62,113,136,228,90,87,17,194,84,153,159,97,191,233,234,168,64,96,196,186,234,205,193,192,242,233,111,76,69,28,105,18,100,73,246,156,65,112,15,91,38,239,59,220,211,158,138,87,195,245,96,14,109], "i8", ALLOC_NONE, 420252);
allocate([8,2,0,0,0,2,2,8,0,0,0,0,8,0,2,8,0,2,0,8,0,0,0,0,8,2,2,0,0,2,0,8,8,0,2,0,8,0,0,8,8,0,0,8,0,0,2,0,8,2,2,8,8,0,2,0,0,0,2,8,8,2,0,0,0,0,0,8,8,0,0,0,0,2,2,8,0,2,0,0,0,2,2,0,0,0,2,8,8,0,2,8,8,2,2,0,8,2,0,8,0,2,2,0,0,0,2,0,8,2,0,8,8,0,0,0,8,2,2,8,0,2,0,0,0,0,0,8,0,2,2,8,0,0,0,8,8,0,2,0,8,2,0,0,0,0,2,0,0,2,2,8,0,2,0,8,0,0,0,0,0,2,0,0,8,0,2,0,8,2,2,8,0,2,0,8,8,0,0,8,0,2,0,0,0,0,0,0,8,0,2,8,8,2,0,8,0,0,2,0,0,0,0,8,8,2,2,8,8,0,0,0,8,2,2,0,0,2,2,0,8,0,0,8,0,0,2,8,8,2,0,8,8,2,0,0,0,0,2,8,8,2,2,0,8,0,0,0,8,0,2,8,0,2,2,0], "i8", ALLOC_NONE, 422300);
allocate([56,33,161,5,90,190,166,230,152,124,248,180,165,34,161,181,144,105,11,20,137,96,60,86,213,93,31,57,46,203,70,76,52,148,183,201,219,173,50,217,245,175,21,32,228,112,234,8,241,140,71,62,103,166,101,215,153,141,39,171,126,117,251,196,146,6,110,45,134,198,17,223,22,59,127,13,241,132,235,221,4,234,101,166,4,246,46,111,179,223,224,240,15,15,142,74,81,186,188,61,248,238,237,165,30,55,164,14,42,10,79,252,41,132,179,92,168,29,62,232,226,28,27,186,130,248,143,220,13,232,83,131,94,80,69,205,23,7,219,212,0,154,209,24,1,129,243,165,237,207,160,52,242,202,135,136,81,126,231,11,54,81,196,179,56,20,52,30,249,204,137,144,244,151,87,224,20,29,89,242,157,63,210,255,205,197,149,133,34,218,61,84,51,42,5,153,253,129,31,102,118,123,15,219,65,230,54,135,7,83,142,65,37,119,34,21,250,178,46,22,70,127,95,226,254,217,19,108,18,178,168,72,234,110,231,146,23,84,220,175,143,137,209,198,191,18,217,3,27,245,131,27,250,170,177,49,217,183,42,228,150,39,172,241,172,235,210,252,215,167,163,64,197,188,251,10,109,19,86,16,133,12,109,154,221,225,137,120,170,116,121,42,120,37,53,211,155,192,138,7,9,93,226,167,208,237,198,234,179,56,65,189,112,158,235,113,190,191,10,146,92,98,194,79,245,208,165,162,163,144,18,11,107,227,84,192,43,147,254,98,255,89,221,246,125,172,168,17,69,53,55,53,212,220,250,114,145,94,132,202,220,32,157,50,96,43,248,132,24,47,103,205,225,44,198,121,44,100,36,209,173,162,9,139,38,231,217,25,106,233,193,208,12,80,169,75,155,106,120,90,243,67,76,99,54,3,2,14,34,216,102,235,74,71,123,193,194,170,155,236,227,26,115,106,88,2,132,224,122,102,38,130,165,236,202,145,118,86,212,103,181,173,117,72,92,21,148,29,223,63,129,91,152,253,0,109,6,205,116,183,252,110,40,81,175,68,167,31,71,52,136,94,46,174,97,231,174,160,44,247,154,224,232,174,205,228,64,190,101,246,24,81,187,11,151,233,100,25,223,51,235,75,110,114,98,151,25,41,7,0,59,112,167,48,239,245,22,216,49,70,190,166,4,21,181,181,128,184,108,75,216,126,195,147,23,100,150,125,233,246,119,237,33,123,115,107,249,46,49,6,99,119,244,243,111,232,72,137,82,174,248,248,163,134,242,215,219,83,99,16,252,76,231,220,202,22,221,198,82,250,189,25,92,0,211,106,212,100,93,143,134,104,106,24,30,207,44,81,157,58,174,96,86,56,194,98,126,54,215,177,220,119,234,231,89,227,110,190,154,116,115,7,108,82,75,115,159,208,249,229,90,115,168,139,85,138,204,199,63,73,69,171,65,48,83,193,185,176,189,89,10,71,186,88,25,50,147,195,70,95,11,176,45,133,229,176,54,211,43,155,32,145,159,241,158,101,125,79,96,110,36,203,44,120,226,138,154,185,199,196,20,200,182,42,245,204,123,114,17,190,175,217,39,71,77,179,33,1,12,13,149,126,31,71,173,112,86,67,111,117,73,104,90,97,66,212,173,245,122,149,185,128,153,224,135,78,85,227,174,80,223,161,207,42,86,213,47,253,58,38,152,216,214,143,12,216,77,146,244,200,58,23,74,117,61,202,153,207,60,191,145,175,172,123,71,254,45,193,144,214,246,113,83,237,148,112,104,94,40,92,26,131,164,160,8,55,10,201,211,197,128,101,208,23,55,144,127,15,127,242,253,184,19,187,249,25,67,40,80,77,27,111,189,177,18,64,255,143,163,27,118,28,59,31,226,226,196,48,21,13,138,44,55,167,105,206,67,137,102,206,181,254,17,78,24,229,33,102,115,189,128,219,139,97,11,77,87,139,214,186,41,125,91,254,230,37,62,97,187,129,63,145,7,188,16,156,28,7,151,45,172,9,121,235,190,199,87,215,197,59,53,141,229,195,232,97,143,243,146,120,1,235,26,194,28,155,156,251,239,212,171,247,148,244,38,125,114,153,3,62,107,149,162,99,224,163,48,156,160,74,154,139,74,157,180,15,9,0,213,183,106,63,192,138,38,87,160,242,192,156,209,66,191,237,45,157,238,61,114,169,96,121,200,73,15,51,65,27,66,135,2,114,178,198,156,54,0,124,192,158,197,10,37,52,53,203,73,172,78,239,216,41,1,239,78,36,80,244,182,222,244,202,229,70,204,138,247,99,146,152,99,171,254,47,120,69,122,93,254,185,124,143,53,70,99,78,100,247,216,91,0,201,45,191,21,115,122,66,28,38,37,33,170,196,208,23,80,142,81,147,108,72,146,57,195,212,215,162,224,254,203,180,141,221,93,44,32,214,117,124,97,108,91,227,216,149,194,219,25,43,3,2,211,105,179,96,50,65,228,220,95,104,66,206,16,86,246,221,185,221,243,6,240,72,225,181,29,210,164,142,111,73,205,47,230,252,176,32,49,238,176,88,35,145,27,44,8,163,245,24,184,23,131,178,207,210,166,156,24,30,156,168,200,219,170,106,87,24,107,12,227,250,153,18,169,234,93,182,231,39,16,127,75,121,43,251,235,91,59,68,127,49,228,4,166,208,57,89,50,45,133,75,252,127,32,251,238,107,174,213,116,211,199,129,178,130,150,48,117,180,195,148,161,9,227,186,5,159,180,19,123,249,195,140,103,57,41,248,47,66,169,152,124,255,118,16,176,22,75,36,238,103,61,102,28,87,191,248,161,13,227,238,88,103,13,31,183,185,222,122,217,17,182,201,162,87,108,123,136,213,175,183,225,79,152,107,132,174,144,98,253,165,193,172,222,76,223,148,255,58,72,197,209,91,138,5,55,60,186,66,193,108,22,99,64,111,247,178,110,82,184,141,78,109,13,111,3,128,8,225,29,49,29,151,201,35,5,158,145,214,124,204,36,40,236,69,201,130,35,230,89,131,91,87,149,153,136,196,13,64,158,250,104,21,114,69,203,62,130,209,47,8,6,130,59,152,253,218,203,168,134,35,8,41,125,170,136,117,184,3,68,205,159,38,224,209,189,40,247,245,145,27,246,1,2,4,57,159,102,228,222,74,240,140,33,124,29,122,206,229,156,215,41,60,98,101,177,11,192,150,144,68,104,35,186,3,165,157,135,241,155,171,142,5,88,164,177,236,35,188,204,30,64,187,1,223,88,154,61,20,95,168,104,232,112,160,158,35,242,125,48,136,241,79,131,17,100,26,180,101,213,20,2,22,112,82,116,51,19,238,9,94,40,63,207,61,14,149,83,9,200,185,84,2,147,89,109,218,48,137,64,153,242,59,135,19,105,83,63,148,85,169,132,135,203,169,202,222,94,161,160,233,43,53,39,33,20,41,251,122,78,255,31,55,240,118,40,34,79,39,80,244,57,2,139,134,94,29,240,58,7,187,193,150,14,193,113,5,200,191,35,46,34,104,133,8,103,210,176,181,128,142,212,163,113,150,129,187,147,225,138,211,181,85,184,4,139,161,208,226,58,105,95,51,213,173,236,180,72,92,202,161,22,73,25,59,116,253,196,152,190,52,129,1,119,37,173,164,84,60,232,135,121,231,185,225,51,218,20,16,225,40,19,162,106,34,158,197,12,39,96,95,26,109,117,95,73,113,119,239,175,96,251,83,232,155,191,61,68,247,167,134,199,173,130,154,178,115,97,69,4,9,94,189,50,194,102,122,188,88,178,200,58,103,140,85,6,243,42,119,201,182,198,57,246,65,218,53,218,159,233,239,109,33,21,230,123,28,199,12,100,17,39,85,92,86,148,54,196,147,57,120,119,70,98,142,3,234,105,36,62,90,206,243,171,249,210,18,211,15,141,118,30,116,198,82,214,206,131,184,68,1,82,133,63,163,91,90,11,194,157,90,67,195,51,150,230,26,236,253,140,8,164,140,162,151,32,244,150,30,60,164,36,136,70,167,238,110,166,47,97,55,90,14,207,249,101,177,76,107,74,251,171,160,6,28,170,67,107,121,98,241,111,194,77,127,15,155,237,84,142,204,186,108,62,37,187,210,239,255,183,166,79,157,162,176,149,188,37,46,140,56,241,222,139,165,214,134,84,240,182,118,197,74,215,222,93,128,69,43,188,189,48,128,137,146,77,233,112,175,129,60,219,0,49,158,218,109,255,62,71,136,204,223,159,195,141,179,126,184,23,141,82,133,56,18,66,182,177,64,210,14,218,242,169,249,75,213,220,250,206,68,230,126,60,67,14,32,18,19,72,199,120,58,79,200,252,159,187,118,133,36,114,31,205,240,228,207,56,54,5,116,105,236,76,78,236,12,124,182,167,43,237,50,206,229,243,77,47,172,17,76,234,38,67,209,51,203,188,88,126,199,76,4,233,164,239,252,52,217,147,50,81,95,68,84,229,6,85,100,201,93,10,228,125,49,143,65,222,80,89,226,221,105,26,179,140,56,134,10,130,85,52,168,180,45,233,26,113,132,30,169,16,144,113,131,73,177,183,240,247,77,121,113,151,192,171,46,42,214,14,92,141,170,151,192,250,34], "i8", ALLOC_NONE, 422556);
allocate([32,128,16,128,0,128,0,128,0,128,0,0,32,128,16,0,0,0,16,0,32,0,0,0,32,0,16,128,32,128,0,128,32,0,0,128,32,128,16,128,0,128,16,128,0,0,0,128,0,128,0,128,0,0,16,0,32,0,0,0,32,0,16,128,0,128,16,0,32,0,16,0,32,128,0,128,0,0,0,0,0,0,0,128,0,128,0,0,32,128,16,0,0,0,16,128,32,0,16,0,32,0,0,128,0,0,0,0,0,128,16,0,32,128,0,0,0,128,16,128,0,0,16,128,32,128,0,0,0,0,0,0,32,128,16,0,32,0,16,128,0,0,16,0,32,128,0,128,0,0,16,128,0,128,16,128,0,128,0,0,0,0,16,128,0,128,0,128,32,0,0,0,32,128,16,128,32,128,16,0,32,0,0,0,0,128,0,0,0,0,0,128,32,128,0,0,0,128,16,128,0,0,16,0,32,0,0,128,32,0,16,0,32,128,0,128,32,0,0,128,32,0,16,0,0,128,16,0,0,0,0,0,0,128,0,128,32,128,0,0,0,0,0,128,32,0,16,128,32,128,16,128,0,128,16,0], "i8", ALLOC_NONE, 424604);
allocate([94,12,233,247,124,177,170,2,236,168,67,226,3,75,66,172,211,252,213,13,227,91,205,114,58,127,249,246,147,155,1,109,147,145,31,210,255,120,153,205,226,41,128,112,201,161,115,117,195,131,42,146,107,50,100,177,112,88,145,4,238,62,136,70,230,236,3,113,5,227,172,234,92,83,163,8,184,105,65,197,124,196,222,141,145,84,231,76,12,244,13,220,223,244,162,10,250,190,77,167,24,111,183,16,106,171,209,90,35,182,204,198,255,226,47,87,33,97,114,19,30,146,157,25,111,140,72,26,202,7,0,218,244,249,201,75,199,65,82,232,246,230,245,38,182,71,89,234,219,121,144,133,146,140,158,201,197,133,24,79,75,134,111,169,30,118,142,215,125,193,181,82,140,66,54,142,193,99,48,55,39,104,207,105,110,197,180,155,61,201,7,182,234,181,118,14,118,14,130,125,66,220,127,240,198,156,92,100,224,66,51,36,120,160,56,191,4,125,46,157,60,52,107,95,198,14,11,96,235,138,194,242,172,188,84,114,95,216,14,108,229,79,219,164,129,34,89,113,159,237,15,206,105,250,103,25,219,69,101,185,248,147,82,253,11,96,167,242,215,233,121,200,78,25,147,1,146,72,2,134,179,192,156,45,59,83,249,164,19,118,149,21,108,131,83,144,241,123,53,252,138,207,109,219,87,15,55,122,122,234,190,24,102,144,185,80,202,23,113,3,53,74,66,116,151,10,179,106,155,36,37,227,2,47,233,244,225,202,28,6,7,219,57,119,5,42,164,236,156,180,243,216,115,47,56,81,63,190,86,189,40,187,176,67,88,237,250,69,131,31,191,17,92,61,129,28,105,161,95,215,182,228,240,138,153,153,173,135,164,24,238,51,16,68,201,177,234,232,38,60,249,34,168,192,43,16,16,181,59,18,230,12,49,239,30,20,84,177,221,89,0,185,101,252,7,230,224,197,64,134,21,224,207,163,195,38,152,7,78,136,253,53,197,35,149,13,13,147,0,43,154,78,117,141,99,53,213,157,70,64,207,252,133,64,76,58,226,139,210,122,177,196,46,106,62,106,252,240,178,202,205,63,148,107,26,151,96,40,70,4,227,18,226,110,222,61,174,101,23,224,42,243,34,98,254,8,131,71,181,11,85,93,42,162,237,160,141,169,239,169,167,13,196,134,22,167,81,195,132,124,134,156,109,88,5,17,83,40,162,253,133,238,255,220,118,239,94,44,38,208,251,204,1,210,144,137,203,148,242,186,117,217,250,42,245,100,148,230,20,62,19,223,175,19,176,148,88,201,35,40,163,209,167,6,25,17,246,48,81,254,149,111,192,6,44,70,78,179,42,217,210,113,124,136,51,222,123,237,62,57,24,101,110,109,116,121,41,51,113,93,56,25,164,91,100,117,169,72,185,166,27,124,103,172,253,123,25,124,152,49,2,61,5,75,196,35,108,222,77,214,2,208,254,73,28,88,113,21,38,56,99,77,71,221,98,208,115,228,195,70,69,170,96,248,85,148,52,206,143,146,217,148,171,202,186,27,22,72,104,111,14,119,48,36,145,99,28,100,198,2,230,165,200,110,43,221,125,51,21,37,40,135,27,112,75,3,66,107,218,44,109,9,203,129,193,55,61,176,111,28,199,102,130,67,8,225,85,178,81,235,199,128,49,43,188,139,192,150,47,184,146,223,186,243,50,166,192,200,104,92,86,5,61,28,134,204,4,85,143,107,178,95,229,164,191,171,180,206,186,179,10,139,132,65,50,93,68,170,115,162,52,179,129,216,90,168,240,150,166,188,108,213,40,181,101,236,246,36,74,82,244,144,46,81,225,12,90,211,6,85,157,215,157,78,121,151,206,198,250,5,137,37,51,155,16,62,91,41,25,32,204,84,160,115,139,71,169,248,176,126,65,52,249,242,36,41,196,27,109,83,125,53,147,57,139,255,182,29,194,26,168,56,191,22,96,125,241,251,196,71,245,227,103,118,221,170,15,30,150,235,139,147,98,255,188,122,201,121,193,143,148,173,141,167,13,229,17,41,183,152,31,143,145,26,18,39,174,142,228,97,8,152,133,49,173,247,98,77,235,234,92,239,69,163,235,236,206,132,150,188,94,178,206,245,33,98,247,183,12,226,51,246,228,147,130,171,6,223,44,163,164,44,238,165,44,32,90,152,177,143,138,204,71,132,11,207,163,89,152,151,68,82,118,159,23,0,36,161,177,22,213,168,38,199,93,187,62,186,215,11,57,219,106,184,85,202,75,229,99,128,71,108,253,58,122,29,221,158,102,231,8,198,158,81,35,170,73,209,162,21,87,14,148,241,143,132,113,69,125,23,34,76,1,65,50,95,181,238,194,46,110,58,161,92,94,15,97,195,245,117,123,146,41,128,54,228,214,195,171,159,19,173,47,64,207,76,169,241,93,13,200,223,165,190,72,217,139,62,126,247,63,189,87,211,160,165,69,246,116,31,37,46,209,162,130,160,129,94,82,158,253,102,73,122,104,127,206,144,12,46,197,59,151,186,190,188,232,194,95,116,9,229,188,1,0,0,214,179,218,230,187,119,55,66,181,110,240,174,126,28,102,209,216,207,170,77,53,31,120,161,252,175,22,43,74,40,17,45,31,29,137,250,103,79,252,241,218,10,146,203,93,194,236,115,81,38,161,194,34,12,97,174,138,183,86,211,16,168,224,150,15,135,231,47,31,56,154,90,48,85,78,233,237,98,173,213,39,20,141,54,232,229,37,210,49,70,175,199,112,123,151,101,79,215,57,222,178,137,248,153,67,209,225,84,191,48,63,35,151,60,166,217,211,117,150,154,168,249,52,243,79,85,112,84,136,86,79,74,116,203,106,22,173,174,228,178,170,76,199,112,18,77,41,111,100,145,208,240,209,49,64,104,137,42,184,87,107,11,190,97,90,90,217,239,154,242,242,105,233,18,189,47,232,159,255,254,19,112,211,155,6,90,8,214,4,4,155,63,21,254,108,22,243,193,64,73,251,222,243,205,77,44,84,9,227,92,205,133,131,33,197,180,65,166,98,68,220,183,53,201,63,182,211,142,166,248,23,52,64,91,33,91,41,89,9,184,114,133,140,59,239,218,156,249,93,185,252,248,20,6,140,1,243,205,58,26,205,172,20,27,45,115,187,0,242,113,212,132,22,218,232,149,14,17,163,193,184,130,26,191,32,114,10,67,14,33,223,57,13,9,126,183,157,94,208,60,159,189,244,94,68,164,87,126,218,246,79,157,248,165,212,131,225,96,29,218,71,142,153,23,132,195,135,178,134,24,179,27,18,220,62,254,239,203,12,152,204,60,254,199,3,253,155,24,144,181,111,228,220,87,76,154,70,253,50,55,101,173,241,124,160,0,247,126,89,136,29,163,104,68,198,89,246,97,91,212,180,176,47,118,24,119,4,153,208,174,91,21,166,186,80,61,76,94,117,104,223,180,216,34,127,78,33,233,244,149,172,46,83,191,221,42,9,1,189,180,9,57,174,50,80,52,142,176,55,245,77,131,141,114,32,66,168,157,32,250,247,35,254,158,155,29,105,158,127,141,174,196,136,210,70,4,91,120,105,225,36,197,76,123,133,19,202,53,1,127,216,33,165,138,123,19,15,64,187,206,190,150,7,88,102,43,46,39,222,176,194,37,65,38,18,54,178,251,30,173,189,2,119,5,233,75,248,172,142,187,186,212,123,198,27,100,57,49,88,145,36,224,54,128,224,45,220,139,237,104,159,244,86,129,60,96,17,81,239,219,247,54,210,247,128,30,210,138,89,196,39,151,215,95,10,103,150,8,138,160,203,169,235,9,67,143,74,203,161,54,112,15,75,86,175,129,189,154,25,120,167,154,185,192,82,233,200,63,200,30,159,149,185,129,74,121,119,80,80,140,240,56,99,5,143,175,202,58,120,103,122,98,80,63,180,7,119,204,236,245,73,171,68,74,152,238,121,182,228,214,195,59,140,16,20,207,209,212,192,156,160,200,107,32,11,192,6,68,137,45,215,200,84,136,161,130,44,67,60,92,179,102,227,103,242,55,43,16,97,221,35,185,29,39,132,216,121,39,171,86,175,37,21,255,176,225,131,190,169,73,126,33,212,101,124,251,212,231,72,109,231,224,219,107,158,23,217,69,135,130,223,8,52,189,83,221,154,106,234,34,10,32,34,86,28,20,110,227,238,80,183,140,27,93,128,127,55,232,88,159,165,199,229,175,60,194,177,79,106,153,127,226,208,240,117,7,251,125,134,211,26,137,136,110,222,115,230,208,37,108,184,175,158,235,58,18,149,184,69,193,213,213,241,48,231,105,114,238,45,74,67,187,56,250,49,249,236,103,203,120,156,191,59,50,114,3,59,243,116,156,39,251,54,99,214,82,170,78,251,10,172,51,95,80,135,225,204,162,153,205,165,232,187,48,45,30,128,116,73,83,144,109,135,213,17,87,45,141,142,3,188,145,40,65,26,31,72,102,229,130,29,231,226,214,183,50,119,73,58,108,3,116,171,245,97,99,217,126,182,137,162,2,234,241,216,149,237,255,61,212,100,20,214,59,43,231,32,72,220,11,23,15,48,166,122,167,120,237,96,135,193,235], "i8", ALLOC_NONE, 424860);
allocate([0,4,1,1,0,0,0,0,0,0,1,0,4,4,1,1,4,0,1,1,4,4,1,0,4,0,0,0,0,0,1,0,0,4,0,0,0,4,1,1,4,4,1,1,0,4,0,0,4,4,0,1,4,0,1,1,0,0,0,1,4,0,0,0,4,4,0,0,0,4,0,1,0,4,0,1,0,4,1,0,0,4,1,0,0,0,1,1,0,0,1,1,4,4,0,1,4,0,1,0,4,0,0,1,4,0,0,1,4,0,1,0,0,0,0,0,4,4,0,0,4,4,1,0,0,0,0,1,0,0,1,0,4,4,1,1,4,0,0,0,0,0,1,1,0,4,1,1,0,0,0,1,0,0,0,1,0,4,0,0,4,0,1,1,0,0,1,0,0,4,1,0,4,0,0,1,0,4,0,0,4,0,0,0,4,4,0,1,4,4,1,0,4,4,1,1,4,0,1,0,0,0,1,1,4,4,0,1,4,0,0,1,4,4,0,0,4,4,1,0,0,4,1,1,4,4,0,0,0,4,0,1,0,4,0,1,0,0,0,0,4,0,1,0,0,4,1,0,0,0,0,0,4,0,1,1], "i8", ALLOC_NONE, 426908);
allocate([40,112,114,105,118,97,116,101,45,107,101,121,32,40,100,115,97,32,32,40,112,32,35,48,48,65,68,55,67,48,48,50,53,66,65,49,65,49,53,70,55,55,53,70,51,70,50,68,54,55,51,55,49,56,51,57,49,68,48,48,52,53,54,57,55,56,68,51,52,55,66,51,51,68,55,66,52,57,69,55,70,51,50,69,68,65,66,32,32,32,32,32,32,57,54,50,55,51,56,57,57,68,68,56,66,50,66,66,52,54,67,68,54,69,67,65,50,54,51,70,65,70,48,52,65,50,56,57,48,51,53,48,51,68,53,57,48,54,50,65,56,56,54,53,68,50,65,69,56,65,68,70,66,53,49,57,49,32,32,32,32,32,32,67,70,51,54,70,70,66,53,54,50,68,48,69,50,70,53,56,48,57,56,48,49,65,49,70,54,55,53,68,65,69,53,57,54,57,56,65,57,69,48,49,69,70,69,56,68,55,68,67,70,67,65,48,56,52,70,52,67,54,70,53,65,52,52,32,32,32,32,32,32,52,52,68,52,57,57,65,48,54,70,70,65,69,65,53,69,56,69,70,53,69,48,49,70,50,70,68,50,48,65,55,66,55,69,70,51,70,54,57,54,56,65,70,66,65,49,70,66,56,68,57,49,70,49,53,53,57,68,53,50,68,56,55,55,55,66,35,41,32,32,40,113,32,35,48,48,69,66,55,66,53,55,53,49,68,50,53,69,66,66,66,55,66,68,53,57,68,57,50,48,51,49,53,70,68,56,52,48,69,49,57,65,69,66,70,57,35,41,32,32,40,103,32,35,49,53,55,52,51,54,51,51,56,55,70,68,70,68,49,68,68,70,51,56,70,52,70,66,69,49,51,53,66,66,50,48,67,55,69,69,52,55,55,50,70,66,57,52,67,51,51,55,65,70,56,54,69,65,56,69,52,57,54,54,54,53,48,51,32,32,32,32,32,32,65,69,48,52,66,54,66,69,56,49,65,50,70,56,68,68,48,57,53,51,49,49,69,48,50,49,55,65,67,65,54,57,56,65,49,49,69,54,67,53,68,51,51,67,67,68,65,69,55,49,52,57,56,69,68,51,53,68,49,51,57,57,49,69,32,32,32,32,32,32,66,48,50,70,48,57,65,66,52,48,66,68,56,70,52,67,53,69,68,56,67,55,53,68,65,55,55,57,68,48,65,69,49,48,52,66,67,51,52,67,57,54,48,66,48,48,50,51,55,55,48,54,56,65,66,52,66,53,65,49,70,57,56,52,32,32,32,32,32,32,51,70,66,65,57,49,70,53,51,55,70,49,66,55,67,65,67,52,68,56,68,68,54,68,56,57,66,48,68,56,54,51,65,70,55,48,50,53,68,53,52,57,70,57,67,55,54,53,68,50,70,67,48,55,69,69,50,48,56,70,56,68,49,53,35,41,32,32,40,121,32,35,54,52,66,49,49,69,70,56,56,55,49,66,69,52,65,66,53,55,50,65,65,56,49,48,68,53,68,51,67,65,49,49,65,54,67,68,66,67,54,51,55,65,56,48,49,52,54,48,50,67,55,50,57,54,48,68,66,49,51,53,66,70,52,54,32,32,32,32,32,32,65,49,56,49,54,65,55,50,52,67,51,52,70,56,55,51,51,48,70,67,57,69,49,56,55,67,53,68,54,54,56,57,55,65,48,52,53,51,53,67,67,50,65,67,57,49,54,52,65,55,49,53,48,65,66,70,65,56,49,55,57,56,50,55,32,32,32,32,32,32,54,69,52,53,56,51,49,65,66,56,49,49,69,69,69,56,52,56,69,66,66,50,52,68,57,70,53,70,50,56,56,51,66,54,69,53,68,68,67,52,67,54,53,57,68,69,70,57,52,52,68,67,70,68,56,48,66,70,52,68,48,65,50,48,32,32,32,32,32,32,52,50,67,65,65,55,68,67,50,56,57,70,48,67,53,65,57,68,49,53,53,70,48,50,68,51,68,53,53,49,68,66,55,52,49,65,56,49,54,57,53,66,55,52,68,52,67,56,70,52,55,55,70,57,67,55,56,51,56,69,66,48,70,66,35,41,32,32,40,120,32,35,49,49,68,53,52,69,52,65,68,66,68,51,48,51,52,49,54,48,70,50,67,69,68,52,66,55,67,68,50,57,50,65,52,69,66,70,51,69,67,48,35,41,41,41,0] /* (private-key (dsa  ( */, "i8", ALLOC_NONE, 427164);
allocate([40,112,114,105,118,97,116,101,45,107,101,121,32,40,114,115,97,32,32,40,110,32,35,48,48,101,48,99,101,57,54,102,57,48,98,54,99,57,101,48,50,102,51,57,50,50,98,101,97,100,97,57,51,102,101,53,48,97,56,55,53,101,97,99,54,98,99,99,49,56,98,98,57,97,57,99,102,50,101,56,52,57,54,53,99,97,97,32,32,32,32,32,32,50,100,49,102,102,57,53,97,55,102,53,52,50,52,54,53,99,54,99,48,99,49,57,100,50,55,54,101,52,53,50,54,99,101,48,52,56,56,54,56,97,55,97,57,49,52,102,100,51,52,51,99,99,51,97,56,55,100,100,55,52,50,57,49,32,32,32,32,32,32,102,102,99,53,54,53,53,48,54,100,53,98,98,98,50,53,99,98,97,99,54,97,48,101,50,100,100,49,102,56,98,99,97,97,98,48,100,52,97,50,57,99,50,102,51,55,99,57,53,48,102,51,54,51,52,56,52,98,102,50,54,57,102,55,32,32,32,32,32,32,56,57,49,52,52,48,52,54,52,98,97,102,55,57,56,50,55,101,48,51,97,51,54,101,55,48,98,56,49,52,57,51,56,101,101,98,100,99,54,51,101,57,54,52,50,52,55,98,101,55,53,100,99,53,56,98,48,49,52,98,55,101,97,50,53,49,35,41,32,32,40,101,32,35,48,49,48,48,48,49,35,41,32,32,40,100,32,35,48,52,54,49,50,57,102,50,52,56,57,100,55,49,53,55,57,98,101,48,97,55,53,102,101,48,50,57,98,100,54,99,100,98,53,55,52,101,98,102,53,55,101,97,56,97,53,98,48,102,100,97,57,52,50,99,97,98,57,52,51,98,49,49,32,32,32,32,32,32,55,100,55,98,98,57,53,101,53,100,50,56,56,55,53,101,48,102,57,102,99,53,102,99,99,48,54,97,55,50,102,54,100,53,48,50,52,54,52,100,97,98,100,101,100,55,56,101,102,54,98,55,49,54,49,55,55,98,56,51,100,53,98,100,32,32,32,32,32,32,99,53,52,51,100,99,53,100,51,102,101,100,57,51,50,101,53,57,102,53,56,57,55,101,57,50,101,54,102,53,56,97,48,102,51,51,52,50,52,49,48,54,97,51,98,54,102,97,50,99,98,102,56,55,55,53,49,48,101,52,97,99,50,49,32,32,32,32,32,32,99,51,101,101,52,55,56,53,49,101,57,55,100,49,50,57,57,54,50,50,50,97,99,51,53,54,54,100,52,99,99,98,48,98,56,51,100,49,54,52,48,55,52,97,98,102,55,100,101,54,53,53,102,99,50,52,52,54,100,97,49,55,56,49,35,41,32,32,40,112,32,35,48,48,101,56,54,49,98,55,48,48,101,49,55,101,56,97,102,101,54,56,51,55,101,55,53,49,50,101,51,53,98,54,99,97,49,49,100,48,97,101,52,55,100,56,98,56,53,49,54,49,99,54,55,98,97,102,54,52,51,55,55,50,49,51,32,32,32,32,32,32,102,101,53,50,100,55,55,50,102,50,48,51,53,98,51,99,97,56,51,48,97,102,52,49,100,56,97,52,49,50,48,101,49,99,49,99,55,48,100,49,50,99,99,50,50,102,48,48,100,50,56,100,51,49,100,100,52,56,97,56,100,52,50,52,102,49,35,41,32,32,40,113,32,35,48,48,102,55,97,55,99,97,53,51,54,55,99,54,54,49,102,56,101,54,50,100,102,51,52,102,48,100,48,53,99,49,48,99,56,56,101,53,52,57,50,51,52,56,100,100,55,98,100,100,99,57,52,50,99,57,97,56,102,51,54,57,102,57,32,32,32,32,32,32,51,53,97,48,55,55,56,53,100,50,100,98,56,48,53,50,49,53,101,100,55,56,54,101,52,50,56,53,100,102,49,54,53,56,101,101,100,51,99,101,56,52,102,52,54,57,98,56,49,98,53,48,100,51,53,56,52,48,55,98,52,97,100,51,54,49,35,41,32,32,40,117,32,35,51,48,52,53,53,57,97,57,101,97,100,53,54,100,50,51,48,57,100,50,48,51,56,49,49,97,54,52,49,98,98,49,97,48,57,54,50,54,98,99,56,101,98,51,54,102,102,102,97,50,51,99,57,54,56,101,99,53,98,100,56,57,49,101,32,32,32,32,32,32,101,98,98,97,102,99,55,51,97,101,54,54,54,101,48,49,98,97,55,99,56,57,57,48,98,97,101,48,54,99,99,50,98,98,101,49,48,98,55,53,101,54,57,102,99,97,99,98,51,53,51,97,54,52,55,51,48,55,57,100,56,101,57,98,35,41,41,41,0] /* (private-key (rsa  ( */, "i8", ALLOC_NONE, 428132);
allocate([40,112,117,98,108,105,99,45,107,101,121,32,40,100,115,97,32,32,40,112,32,35,48,48,65,68,55,67,48,48,50,53,66,65,49,65,49,53,70,55,55,53,70,51,70,50,68,54,55,51,55,49,56,51,57,49,68,48,48,52,53,54,57,55,56,68,51,52,55,66,51,51,68,55,66,52,57,69,55,70,51,50,69,68,65,66,32,32,32,32,32,32,57,54,50,55,51,56,57,57,68,68,56,66,50,66,66,52,54,67,68,54,69,67,65,50,54,51,70,65,70,48,52,65,50,56,57,48,51,53,48,51,68,53,57,48,54,50,65,56,56,54,53,68,50,65,69,56,65,68,70,66,53,49,57,49,32,32,32,32,32,32,67,70,51,54,70,70,66,53,54,50,68,48,69,50,70,53,56,48,57,56,48,49,65,49,70,54,55,53,68,65,69,53,57,54,57,56,65,57,69,48,49,69,70,69,56,68,55,68,67,70,67,65,48,56,52,70,52,67,54,70,53,65,52,52,32,32,32,32,32,32,52,52,68,52,57,57,65,48,54,70,70,65,69,65,53,69,56,69,70,53,69,48,49,70,50,70,68,50,48,65,55,66,55,69,70,51,70,54,57,54,56,65,70,66,65,49,70,66,56,68,57,49,70,49,53,53,57,68,53,50,68,56,55,55,55,66,35,41,32,32,40,113,32,35,48,48,69,66,55,66,53,55,53,49,68,50,53,69,66,66,66,55,66,68,53,57,68,57,50,48,51,49,53,70,68,56,52,48,69,49,57,65,69,66,70,57,35,41,32,32,40,103,32,35,49,53,55,52,51,54,51,51,56,55,70,68,70,68,49,68,68,70,51,56,70,52,70,66,69,49,51,53,66,66,50,48,67,55,69,69,52,55,55,50,70,66,57,52,67,51,51,55,65,70,56,54,69,65,56,69,52,57,54,54,54,53,48,51,32,32,32,32,32,32,65,69,48,52,66,54,66,69,56,49,65,50,70,56,68,68,48,57,53,51,49,49,69,48,50,49,55,65,67,65,54,57,56,65,49,49,69,54,67,53,68,51,51,67,67,68,65,69,55,49,52,57,56,69,68,51,53,68,49,51,57,57,49,69,32,32,32,32,32,32,66,48,50,70,48,57,65,66,52,48,66,68,56,70,52,67,53,69,68,56,67,55,53,68,65,55,55,57,68,48,65,69,49,48,52,66,67,51,52,67,57,54,48,66,48,48,50,51,55,55,48,54,56,65,66,52,66,53,65,49,70,57,56,52,32,32,32,32,32,32,51,70,66,65,57,49,70,53,51,55,70,49,66,55,67,65,67,52,68,56,68,68,54,68,56,57,66,48,68,56,54,51,65,70,55,48,50,53,68,53,52,57,70,57,67,55,54,53,68,50,70,67,48,55,69,69,50,48,56,70,56,68,49,53,35,41,32,32,40,121,32,35,54,52,66,49,49,69,70,56,56,55,49,66,69,52,65,66,53,55,50,65,65,56,49,48,68,53,68,51,67,65,49,49,65,54,67,68,66,67,54,51,55,65,56,48,49,52,54,48,50,67,55,50,57,54,48,68,66,49,51,53,66,70,52,54,32,32,32,32,32,32,65,49,56,49,54,65,55,50,52,67,51,52,70,56,55,51,51,48,70,67,57,69,49,56,55,67,53,68,54,54,56,57,55,65,48,52,53,51,53,67,67,50,65,67,57,49,54,52,65,55,49,53,48,65,66,70,65,56,49,55,57,56,50,55,32,32,32,32,32,32,54,69,52,53,56,51,49,65,66,56,49,49,69,69,69,56,52,56,69,66,66,50,52,68,57,70,53,70,50,56,56,51,66,54,69,53,68,68,67,52,67,54,53,57,68,69,70,57,52,52,68,67,70,68,56,48,66,70,52,68,48,65,50,48,32,32,32,32,32,32,52,50,67,65,65,55,68,67,50,56,57,70,48,67,53,65,57,68,49,53,53,70,48,50,68,51,68,53,53,49,68,66,55,52,49,65,56,49,54,57,53,66,55,52,68,52,67,56,70,52,55,55,70,57,67,55,56,51,56,69,66,48,70,66,35,41,41,41,0] /* (public-key (dsa  (p */, "i8", ALLOC_NONE, 429164);
allocate([40,112,117,98,108,105,99,45,107,101,121,32,40,114,115,97,32,32,40,110,32,35,48,48,101,48,99,101,57,54,102,57,48,98,54,99,57,101,48,50,102,51,57,50,50,98,101,97,100,97,57,51,102,101,53,48,97,56,55,53,101,97,99,54,98,99,99,49,56,98,98,57,97,57,99,102,50,101,56,52,57,54,53,99,97,97,32,32,32,32,32,32,50,100,49,102,102,57,53,97,55,102,53,52,50,52,54,53,99,54,99,48,99,49,57,100,50,55,54,101,52,53,50,54,99,101,48,52,56,56,54,56,97,55,97,57,49,52,102,100,51,52,51,99,99,51,97,56,55,100,100,55,52,50,57,49,32,32,32,32,32,32,102,102,99,53,54,53,53,48,54,100,53,98,98,98,50,53,99,98,97,99,54,97,48,101,50,100,100,49,102,56,98,99,97,97,98,48,100,52,97,50,57,99,50,102,51,55,99,57,53,48,102,51,54,51,52,56,52,98,102,50,54,57,102,55,32,32,32,32,32,32,56,57,49,52,52,48,52,54,52,98,97,102,55,57,56,50,55,101,48,51,97,51,54,101,55,48,98,56,49,52,57,51,56,101,101,98,100,99,54,51,101,57,54,52,50,52,55,98,101,55,53,100,99,53,56,98,48,49,52,98,55,101,97,50,53,49,35,41,32,32,40,101,32,35,48,49,48,48,48,49,35,41,41,41,0] /* (public-key (rsa  (n */, "i8", ALLOC_NONE, 430084);
allocate([13,48,22,226,252,255,221,187,189,218,235,167,149,128,100,53,183,248,137,119,27,18,193,230,0,22,36,14,181,232,44,5,176,207,169,17,17,47,149,229,10,153,231,236,116,209,134,147,28,147,66,42,17,129,227,118,58,239,45,177,252,221,221,55,177,222,154,222,44,195,12,10,41,112,25,190,64,9,160,132,15,58,36,187,207,55,209,180,240,121,78,180,253,237,158,4,93,161,21,11,104,49,13,72,90,222,187,139,66,237,157,102,49,232,236,199,231,149,143,63,27,25,223,114,13,51,128,117,81,66,7,148,250,205,125,92,99,109,190,171,100,33,64,170,10,212,1,179,202,209,231,2,174,29,87,83,162,130,49,122,236,221,168,18,93,51,170,253,232,67,111,23,212,70,251,113,34,144,18,56,212,154,148,206,173,105,71,184,98,216,91,150,85,208,243,130,103,151,251,102,78,11,184,21,160,71,91,29,111,224,253,76,184,196,142,194,110,114,232,87,252,120,122,100,68,93,134,153,147,213,139,96,3,14,32,108,246,95,220,57,163,0,11,93,242,175,99,174,50,214,139,126,12,140,16,112,73,80,211,187,4,223,152,41,42,244,12,152,145,244,109,155,83,221,126,158,72,133,145,6,7,126,203,88,46,239,116,59,177,255,47,82,204,8,71,210,205,39,126,28,91,33,235,164,226,210,241,60,56,122,180,25,24,118,79,66,57,96,133,53,231,222,23,157,230,53,235,39,123,246,175,201,184,245,186,54,205,103,196,9,177,16,137,193,123,191,29,225,248,26,205,6,8,198,112,113,84,51,94,45,90,73,222,212,6,208,198,100,44,198,192,188,179,13,208,61,52,143,143,112,66,27,213,119,15,98,79,38,191,210,184,36,158,183,193,21,100,37,165,70,78,229,215,248,96,129,55,62,165,205,149,120,165,21,156,133,136,151,69,230,95,199,123,195,12,186,7,219,171,163,118,6,30,155,34,127,123,46,132,49,215,159,37,36,114,244,190,248,184,252,95,131,242,193,244,109,149,177,245,150,252,240,10,253,76,19,254,176,61,109,80,226,234,18,155,79,37,242,21,242,111,115,35,162,40,196,180,159,121,73,208,37,248,19,199,52,135,129,97,196,152,110,122,234,252,110,209,124,108,135,54,20,7,65,84,241,20,238,222,190,39,175,233,86,65,164,74,160,153,200,247,60,230,186,236,146,109,1,103,221,235,130,22,21,223,238,66,168,180,96,186,253,117,123,144,241,15,3,227,32,158,194,216,36,59,103,57,225,184,63,166,239,84,48,135,113,59,207,242,182,66,100,50,159,204,164,21,203,4,69,26,176,141,125,228,241,229,27,74,132,220,223,231,186,112,218,203,66,10,174,125,205,122,91,232,87,246,90,63,213,140,77,207,32,40,212,164,206,164,48,209,121,251,235,134,52,220,205,211,51,83,59,133,119,181,252,239,55,120,135,6,197,230,179,128,229,244,184,104,78,126,179,200,197,162,158,128,13,124,235,143,57,148,79,42,19,14,149,183,67,28,125,238,47,189,19,54,34,162,202,6,221,43,147,223,55,137,130,36,196,195,235,243,172,183,246,21,87,221,120,52,239,111,97,103,242,228,203,72,193,94,129,82,144,171,15,65,94,101,36,138,180,164,127,218,46,228,64,123,232,132,160,142,233,225,233,137,88,252,144,211,239,91,211,7,221,148,86,72,219,178,229,215,56,1,1,114,87,188,222,14,115,19,49,100,91,79,126,145,148,186,47,60,80,130,18,111,100,74,210,35,117,149,150,119,224,143,122,193,249,33,33,91,122,150,184,135,209,77,58,38,41,223,12,81,186,159,124,244,129,237,99,17,173,101,89,123,234,110,114,0,26,146,48,64,17,119,109,218,0,97,221,12,74,3,70,31,173,176,223,91,96,100,195,237,158,168,230,235,34,138,210,231,206,160,54,231,160,185,166,100,85,9,50,133,16,55,143,235,199,202,5,231,45,15,87,81,137,43,130,9,223,108,26,105,189,242,228,18,170,15,28,69,135,122,162,246,224,25,72,218,58,79,118,241,76,43,28,119,13,86,177,205,103,132,131,13,53,15,250,56,89,243,158,57,66,7,123,153,54,61,9,132,14,97,62,169,74,123,216,96,131,12,139,169,31,44,56,73,17,165,37,118,233,183,209,20,6,75,36,37,14,71,131,118,12,130,141,158,88,209,89,32,13,30,187,102,164,130,10,218,248,48,145,241,4,192,78,110,186,100,81,38,153,13,35,231,30,128,173,178,80,1,104,238,234,131,162,178,141,158,245,139,234], "i8", ALLOC_NONE, 430404);
allocate([25,64,224,133,103,245,43,51,255,191,45,102,147,86,198,207,111,127,141,42,18,201,155,171,161,8,96,222,31,218,40,32,231,188,39,2,22,41,100,77,0,195,250,24,130,139,241,80,17,203,178,44,92,231,50,178,242,149,54,75,222,7,135,178,246,188,95,160,233,129,65,205,12,33,80,225,189,241,78,226,129,195,104,177,137,231,228,253,216,176,121,92,67,253,139,30,1,80,73,77,65,67,190,56,29,238,60,145,63,156,167,146,190,102,151,8,244,173,238,186,207,190,134,18,25,203,234,182,0,194,96,38,228,189,101,117,122,31,36,100,169,220,72,130,102,173,179,195,134,96,19,40,168,223,216,11,242,28,109,53,190,137,119,16,206,233,178,179,143,170,2,5,30,53,192,11,42,245,107,22,130,255,18,235,17,105,72,227,22,117,77,211,255,58,123,78,27,103,67,95,55,224,246,156,131,172,129,73,206,102,66,51,183,65,147,140,192,84,216,208,136,108,58,203,41,40,188,71,55,186,37,71,43,210,106,166,30,31,214,122,250,186,92,12,7,241,55,68,98,153,231,182,22,216,210,66,136,18,150,10,110,192,165,225,103,158,116,19,26,8,252,114,247,57,209,177,69,55,88,249,88,223,25,207,86,247,195,190,48,186,110,192,36,27,33,7,41,136,194,69,127,49,94,201,17,197,142,188,233,70,188,56,20,250,230,198,74,88,232,186,70,188,78,173,139,80,143,70,95,67,41,120,59,24,36,241,159,186,29,130,244,15,246,175,109,78,44,234,100,146,227,22,139,74,84,146,195,79,155,0,237,140,166,171,120,111,201,154,154,183,165,6,110,110,133,178,169,60,236,26,136,134,131,190,233,4,8,14,86,190,241,85,59,54,229,231,93,242,161,179,133,187,222,247,60,3,254,97,51,98,116,22,40,76,3,60,116,12,109,218,108,197,170,121,173,225,228,60,2,200,240,81,90,243,248,152,159,164,38,22,41,43,216,238,227,47,56,29,154,185,79,12,120,87,50,187,123,217,198,62,169,166,119,110,92,139,101,203,199,48,82,212,139,64,209,43,183,62,192,96,120,141,6,185,244,84,55,163,125,200,48,244,2,19,167,200,50,140,109,185,190,231,212,235,45,157,139,190,6,251,121,121,8,83,34,231,119,207,117,139,164,141,239,17,88,200,131,224,111,120,107,141,166,23,99,90,160,247,92,250,51,0,218,93,176,191,142,242,16,195,185,245,128,194,234,160,122,118,185,8,176,210,217,163,23,66,211,121,141,113,26,2,106,51,198,154,96,253,17,39,227,80,128,67,168,8,153,6,196,237,127,61,239,43,109,130,118,132,235,78,37,207,141,72,102,213,201,54,65,78,231,40,202,10,97,194,207,169,73,61,223,185,227,186,230,141,95,182,100,175,174,146,230,213,199,58,9,5,168,158,125,1,43,242,112,63,23,164,195,22,30,221,249,215,224,21,135,184,177,80,213,79,159,43,130,186,90,98,98,121,1,106,156,27,192,46,169,138,72,21,64,231,22,215,44,90,5,64,34,154,210,147,154,191,45,227,185,69,135,5,30,220,83,52,110,41,153,214,111,255,108,73,134,73,159,28,7,237,226,223,209,66,114,184,174,126,222,25,26,86,62,5,140,111,173,21,28,108,98,102,76,194,84,113,42,43,8,234,57,41,235,147,240,176,220,23,174,242,212,88,251,148,162,158,76,86,207,82,102,254,131,152,129,5,196,46,195,83,57,118,46,105,214,1,8,193,160,211,14,22,231,161,166,223,242,228,133,210,62,105,152,70,144,116,221,14,43,76,86,118,117,79,120,51,57,93,79,35,50,161,93,28,50,61,148,225,245,195,1,147,38,75,47,2,159,199,126,126,153,60,4,149,79,94,189,251,250,63,14,173,247,118,244,147,102,41,111,206,31,61,190,69,30,198,52,171,181,211,183,249,43,247,192,52,4,27,103,181,114,78,61,163,146,85,1,147,34,181,127,168,210,207,103,183,174,96,107,56,20,24,61,195,188,48,125,192,160,56,242,6,22,253,155,81,99,195,144,211,157,88,230,248,121,84,71,214,184,28,169,97,253,151,244,89,119,234,157,83,87,45,207,88,154,86,173,99,78,232,120,27,46,70,126,248,128,101,20,121,129,243,244,85,218,145,243,48,162,64,53,143,152,209,210,24,227,182,188,80,250,63,33,240,64,61,174,189,192,195,76,194,88,73,178,54,143,81,112,211,177,132,131,206,237,15,218,218,141,135,199,121,162,242,232,27,224,148,75,111,113,144,163,138,75,149], "i8", ALLOC_NONE, 431428);
allocate([157,143,250,246,225,108,172,44,103,72,163,76,124,127,51,226,231,8,219,149,180,67,104,1,188,92,237,236,172,83,85,50,96,9,159,191,237,226,161,223,157,87,240,131,185,134,237,99,184,166,182,26,57,190,94,222,50,247,143,243,56,177,137,137,97,73,241,51,189,55,25,192,218,198,6,245,126,94,98,228,153,234,8,163,60,227,35,78,204,215,203,121,103,67,161,72,25,150,20,163,213,75,201,254,74,23,20,161,102,24,160,234,45,219,132,160,111,72,168,9,74,97,136,168,152,175,0,41,145,89,102,1,99,40,153,225,96,12,243,200,60,239,120,46,50,25,213,208,20,236,15,207,210,7,202,247,114,32,168,208,126,25,65,253,176,166,5,147,218,227,107,232,205,211,190,116,60,165,45,55,72,68,127,76,64,212,181,218,195,14,186,109,167,25,57,8,217,238,186,159,176,207,219,73,83,12,103,78,1,156,61,92,65,185,189,100,106,99,14,44,205,217,125,186,136,115,111,234,98,199,11,231,219,154,242,53,141,221,76,92,140,141,212,240,226,83,129,184,102,152,161,8,200,234,226,26,137,175,76,40,35,130,146,170,83,190,52,147,191,33,58,59,227,75,67,22,6,57,234,154,110,195,232,239,217,205,144,248,174,109,34,128,163,164,64,195,9,156,126,223,7,168,148,166,204,94,124,91,166,179,29,34,47,160,105,154,84,138,129,104,111,41,178,206,58,132,192,83,85,54,137,254,138,230,191,37,188,138,98,180,191,46,34,207,72,111,172,37,135,147,169,169,101,219,189,83,231,251,111,231,120,253,103,233,99,53,169,11,193,43,52,142,233,27,161,232,13,116,128,73,252,125,8,200,153,191,228,141,160,1,17,161,117,121,211,127,192,38,90,218,79,153,31,232,137,205,40,149,237,159,51,253,191,52,120,184,109,69,4,95,152,134,37,34,59,200,196,201,190,86,193,45,170,141,98,79,197,94,245,87,190,10,34,226,191,110,145,210,149,91,199,78,192,195,242,36,153,93,209,66,160,127,13,205,255,39,110,123,240,138,220,168,6,193,69,115,47,35,30,244,134,35,22,53,38,137,234,230,148,176,51,51,242,198,126,21,175,116,43,55,228,115,37,105,72,216,169,233,137,2,22,243,29,239,98,58,56,226,135,167,118,246,165,243,83,72,54,116,99,16,149,32,141,105,118,69,7,212,250,182,80,249,42,89,35,53,247,54,135,110,251,76,192,206,164,125,170,45,21,108,168,150,3,203,93,254,13,197,171,7,215,252,47,196,33,9,187,240,223,137,120,190,226,95,51,79,143,68,201,19,70,117,141,208,5,43,133,213,185,72,65,148,4,220,155,143,9,200,134,231,237,125,115,51,154,195,5,0,65,66,81,23,9,106,166,200,243,14,214,114,0,137,130,118,32,40,190,247,169,169,157,103,50,191,117,91,91,212,0,253,83,179,88,227,176,203,10,34,15,131,20,178,143,31,8,207,114,211,19,74,60,204,102,49,246,140,190,135,28,6,136,143,201,136,151,227,98,96,122,142,207,71,131,82,200,182,251,172,194,60,118,105,192,63,82,2,143,78,77,49,216,100,227,112,56,218,89,84,102,30,240,8,9,193,165,33,48,81,183,104,91,108,160,138,47,130,62,205,7,48,239,158,113,116,129,38,135,220,212,64,51,7,217,47,67,126,65,194,94,12,108,40,9,136,145,216,146,245,246,48,169,8,5,243,126,149,189,255,251,183,111,233,102,194,152,172,228,111,192,236,115,177,42,180,96,188,218,152,52,149,18,174,161,251,54,215,75,45,171,250,37,15,235,252,243,164,35,145,150,226,61,12,127,37,73,175,72,147,188,0,20,54,74,111,129,232,0,242,20,56,67,64,249,163,194,84,122,156,87,79,112,188,249,231,65,218,58,211,90,194,132,160,244,84,5,85,127,177,190,124,53,89,200,21,189,237,171,197,151,127,181,199,90,186,175,222,246,182,58,156,71,58,37,218,2,83,106,126,61,101,73,141,38,84,234,119,164,81,91,213,23,80,136,93,210,215,118,108,19,68,200,168,4,4,33,161,229,184,138,146,26,184,105,88,237,96,150,91,197,151,27,153,236,234,19,89,147,41,241,183,253,1,250,141,142,8,245,246,182,154,159,191,76,59,171,227,93,74,53,29,5,230,85,216,225,160,241,76,107,211,235,237,68,245,36,53,233,176,189,143,187,190,207,98,215,162,84,47,201,73,49,243,181,56,84,164,40,113,5,41,57,72,184,29,91,166,189,151,28,133,47,207,117,214], "i8", ALLOC_NONE, 432452);
allocate([4,12,201,126,185,116,110,44,223,102,14,155,17,121,51,166,255,127,106,184,245,88,211,29,68,157,221,68,127,22,49,23,250,241,251,8,204,17,245,231,0,27,5,210,0,186,90,115,216,34,183,42,203,129,99,56,58,36,246,172,122,253,190,105,127,231,162,230,205,32,199,240,22,72,73,196,128,193,245,204,64,22,133,56,72,168,176,21,203,24,139,230,255,222,170,76,1,10,72,95,170,178,18,4,252,20,152,37,226,239,208,65,141,180,64,78,251,182,142,36,254,28,186,141,2,155,169,65,4,10,85,26,203,101,143,186,231,244,81,114,37,23,165,149,215,236,6,193,10,152,165,151,170,185,57,197,106,254,121,77,99,247,243,242,64,128,175,104,86,158,12,237,139,149,180,17,136,90,235,225,176,230,9,135,86,113,224,215,167,254,41,78,45,229,102,99,0,192,209,2,5,142,172,196,113,245,119,147,42,55,5,12,242,53,133,87,2,190,97,34,201,160,66,214,128,162,19,223,210,91,181,116,192,153,33,104,236,229,33,212,232,60,251,83,179,237,173,200,201,127,168,40,129,153,149,61,0,249,31,92,153,211,56,254,11,255,78,12,234,7,36,6,177,79,47,170,118,105,185,79,5,149,199,144,116,167,168,176,255,161,85,239,194,162,156,229,39,45,182,166,99,66,106,230,31,0,101,223,102,9,197,14,188,85,221,223,85,6,222,41,154,115,30,145,117,137,175,23,28,145,199,50,104,148,248,137,128,233,1,13,244,85,71,82,201,60,182,3,178,68,200,12,170,240,243,188,233,54,172,135,38,116,58,229,43,216,179,1,73,116,158,26,126,45,238,100,218,177,219,205,16,73,201,1,128,191,104,184,253,243,38,13,231,237,66,147,132,194,165,4,182,55,103,99,22,182,245,80,227,102,71,242,193,54,202,142,219,5,110,19,145,131,241,254,55,122,136,251,212,247,231,214,201,125,251,199,223,252,99,48,222,137,245,182,218,65,41,236,149,102,228,38,25,100,86,183,197,239,84,246,183,88,141,208,1,84,146,72,127,203,186,193,15,85,255,229,73,48,8,182,232,208,181,91,90,46,215,135,225,110,106,171,206,102,58,34,205,243,43,198,249,133,8,158,71,62,203,104,15,1,108,8,32,232,29,162,222,105,139,209,119,87,246,243,246,195,2,250,195,218,126,64,80,213,179,203,77,8,147,23,186,14,215,176,213,120,179,10,12,251,81,217,86,218,215,222,228,187,36,65,86,11,202,148,209,85,87,15,110,229,225,224,190,181,132,97,159,36,10,88,192,75,247,148,142,136,39,227,97,85,123,159,128,2,220,195,21,119,104,5,215,107,108,100,179,77,144,68,163,240,180,102,138,100,241,192,175,213,126,105,246,47,233,73,79,55,158,48,106,53,182,44,115,133,128,133,64,248,145,73,2,174,240,118,77,232,59,8,154,28,66,40,6,148,72,68,184,76,110,115,16,41,9,193,198,95,201,139,244,156,134,125,111,97,79,19,141,17,119,46,225,43,27,179,114,180,144,170,23,215,165,60,186,27,22,125,16,144,173,156,162,43,70,175,210,89,228,159,89,69,211,69,19,218,242,217,135,84,198,219,78,249,228,243,111,72,109,23,234,19,124,9,199,165,29,99,130,115,95,68,244,131,86,23,151,106,198,205,136,2,190,112,114,207,205,179,243,210,93,110,121,96,147,32,165,128,155,69,219,226,96,190,1,49,194,169,92,49,165,235,242,66,78,34,114,21,92,28,44,27,114,246,243,255,210,26,78,64,37,140,47,215,78,50,253,183,103,64,142,19,35,5,120,188,163,92,110,214,15,220,131,34,146,117,23,107,77,120,110,177,235,88,133,79,9,68,135,29,72,63,123,174,254,252,118,255,181,119,191,2,35,140,86,117,244,170,42,176,70,95,1,40,9,43,247,245,56,61,54,31,168,12,138,74,175,82,192,231,213,102,116,8,59,223,16,81,5,149,168,215,90,27,173,213,30,246,121,228,246,108,132,129,117,32,101,250,206,208,88,190,247,136,38,104,4,74,243,248,246,15,112,127,156,160,160,171,70,83,40,108,233,92,163,237,118,225,127,48,172,107,210,41,104,55,169,15,54,133,42,254,227,23,103,151,183,36,32,107,169,245,149,37,205,214,191,30,255,104,44,68,85,117,190,6,159,241,154,101,224,249,29,73,185,238,24,7,1,52,184,202,48,187,21,254,34,232,131,9,87,136,73,98,14,117,85,126,98,218,168,255,118,94,70,69,83,177,8,222,71,109,212,231,233,239], "i8", ALLOC_NONE, 433476);
allocate([32,4,179,157,222,233,182,31,239,123,190,167,152,162,115,210,219,123,79,74,87,140,173,100,67,4,81,133,209,14,2,250,255,122,40,126,99,182,15,230,161,53,95,9,32,241,235,121,67,157,5,253,177,183,151,100,99,31,100,243,223,74,30,36,95,127,20,40,205,184,162,79,64,0,67,201,32,34,195,12,48,11,211,253,79,55,165,192,217,0,45,29,21,123,20,36,26,17,77,238,103,81,202,15,76,144,255,113,254,95,25,45,95,100,5,26,254,254,19,12,202,8,27,8,33,1,23,5,0,1,83,128,254,94,62,232,248,244,154,172,1,39,231,127,95,238,184,210,97,66,223,6,138,155,158,187,37,234,147,114,223,255,132,206,1,136,113,245,4,75,214,61,59,38,111,162,0,132,212,126,230,235,126,84,160,76,109,68,245,214,243,108,223,171,73,38,245,199,160,174,193,140,51,54,147,126,63,80,97,32,119,211,225,56,182,17,3,14,80,114,187,178,14,248,46,80,224,171,222,119,141,236,129,30,151,87,70,103,79,225,0,84,51,201,143,49,32,105,153,187,29,8,165,4,195,255,5,24,53,77,227,92,61,127,198,102,200,166,169,204,91,93,234,111,236,218,145,111,146,159,47,34,70,159,125,70,145,57,142,109,191,165,79,196,67,17,2,131,149,67,235,78,33,208,184,131,32,2,12,24,182,63,30,147,248,24,230,88,22,40,62,110,72,38,112,138,215,139,193,228,119,116,124,224,6,181,37,10,45,243,2,139,9,121,129,187,234,228,35,59,18,40,56,173,222,105,22,202,116,21,98,27,135,223,183,64,28,33,249,158,26,165,123,55,20,0,200,138,30,4,3,64,17,9,210,228,89,189,213,86,209,227,213,118,232,79,64,163,145,47,222,232,123,85,167,228,234,0,236,194,229,12,166,187,180,77,255,189,86,231,172,105,51,221,53,176,23,236,39,35,87,6,176,200,175,153,145,195,200,86,28,129,101,107,25,97,20,94,117,203,133,110,2,192,7,190,119,85,50,194,236,244,63,137,45,201,191,91,37,59,236,208,183,26,128,183,36,59,109,141,239,99,199,32,252,165,102,195,128,40,56,156,5,50,206,10,138,84,201,170,199,215,161,236,50,250,26,4,90,98,22,29,44,144,1,103,84,122,117,155,247,119,212,49,49,176,38,145,219,111,204,54,70,139,11,199,72,106,230,217,121,90,229,86,235,76,106,2,255,126,67,82,180,118,143,47,165,128,249,13,227,205,116,134,235,4,218,237,4,190,169,23,223,244,24,44,157,127,116,183,180,247,42,171,32,77,195,239,124,107,9,46,84,162,65,23,53,160,182,229,246,66,61,33,38,124,28,44,15,245,194,97,249,218,82,101,248,49,194,210,105,15,19,37,162,127,22,216,200,242,24,4,166,150,26,0,171,38,21,13,33,92,49,99,236,114,10,94,253,254,186,73,217,8,121,24,134,189,13,141,167,112,17,49,12,100,155,62,215,16,62,204,182,211,202,213,136,195,174,12,225,1,48,247,255,138,114,108,161,226,234,113,110,243,154,31,47,209,203,207,23,132,222,193,107,190,7,172,216,161,68,203,86,15,155,139,195,136,57,1,202,47,197,177,205,49,190,180,6,40,120,216,226,164,163,18,50,229,125,111,182,126,253,88,0,233,30,208,194,255,173,36,197,15,153,244,197,170,17,151,149,123,29,0,210,231,229,130,246,115,152,16,150,48,97,0,33,149,45,195,255,33,161,173,21,132,144,41,127,151,187,127,219,179,158,175,42,237,201,41,101,164,226,92,44,243,48,167,232,63,170,208,145,192,92,138,231,44,158,212,169,84,228,12,134,205,10,214,25,25,95,1,3,145,7,119,246,58,160,222,94,86,168,120,223,86,227,222,190,92,240,33,135,227,117,139,81,6,197,179,239,195,165,184,210,182,238,216,119,190,35,229,41,69,21,194,223,239,105,47,251,122,230,175,178,196,112,244,91,235,224,243,118,152,204,214,12,70,228,57,56,133,218,31,47,131,135,25,103,115,0,202,248,68,145,169,158,41,107,41,149,194,47,73,171,190,102,146,105,110,103,181,218,221,211,155,47,5,126,223,28,112,37,219,238,81,94,27,230,36,83,246,108,227,252,106,4,204,22,3,62,33,68,134,208,89,220,183,31,41,101,121,67,253,214,204,121,57,130,65,246,205,43,147,77,195,87,182,130,210,223,78,12,41,229,122,107,83,185,60,254,32,30,133,126,85,51,152,176,240,236,19,114,179,255,211,193,197,133,63,210,126,239,10], "i8", ALLOC_NONE, 434500);
allocate([64,194,239,141,159,93,250,37,191,61,144,235,7,201,16,232,255,127,96,71,75,228,159,54,68,198,31,140,144,202,206,174,191,249,177,190,234,202,251,238,80,25,207,232,174,7,223,81,6,136,14,146,72,5,173,240,131,141,60,225,213,16,112,146,159,125,16,17,185,125,100,7,212,228,227,178,94,40,79,61,32,168,175,185,224,130,222,250,139,38,103,160,46,121,114,130,192,178,63,85,43,226,154,72,148,151,239,212,188,63,94,18,238,252,255,33,253,27,91,130,237,197,85,146,64,162,87,18,2,131,26,78,255,127,224,186,231,70,130,82,14,20,87,142,191,247,115,51,136,129,159,140,232,78,252,166,165,181,130,201,183,29,192,168,100,194,159,87,49,79,9,103,95,63,189,242,193,247,255,64,252,141,183,31,193,210,107,142,155,229,123,67,191,61,176,153,75,198,219,181,230,192,141,99,153,157,129,85,28,200,151,161,110,45,1,74,40,74,136,197,113,111,195,204,19,194,67,184,241,67,7,108,60,137,9,131,95,221,237,15,80,232,127,47,126,127,192,215,191,127,80,2,4,154,251,90,208,210,71,167,46,25,81,22,62,191,112,175,128,19,195,88,46,48,152,95,196,195,124,114,2,180,15,10,130,239,127,15,173,253,150,140,174,42,44,93,73,154,233,142,184,136,218,80,160,244,39,132,144,87,172,30,73,180,111,121,21,220,82,130,155,125,189,239,125,89,114,166,216,64,168,173,4,69,245,69,3,116,93,250,5,195,62,232,26,117,145,79,194,105,86,146,65,233,239,35,46,241,3,169,242,13,39,96,182,228,118,2,116,101,253,148,178,133,121,146,203,219,118,130,118,129,119,2,141,145,175,248,158,247,72,78,223,109,97,143,14,132,157,226,131,125,47,132,200,229,12,52,130,182,187,150,72,177,180,147,171,60,48,239,40,175,79,152,155,175,159,119,13,86,220,146,32,30,77,34,136,170,55,132,150,220,41,125,220,211,86,39,238,124,144,139,64,210,31,181,227,124,192,231,161,180,102,229,94,97,233,195,157,32,248,60,227,209,148,96,65,163,156,205,14,70,118,92,59,152,234,0,129,120,214,212,44,87,71,253,217,237,108,247,156,34,168,189,170,173,125,18,78,7,138,67,144,192,151,31,138,219,27,8,190,126,160,147,21,202,56,185,255,60,176,151,248,192,194,61,236,178,26,141,81,14,56,100,251,123,204,104,136,39,15,217,129,1,73,18,212,255,229,93,106,248,126,221,20,226,162,118,104,3,164,185,143,149,93,146,250,255,57,75,233,174,57,186,11,211,255,164,59,147,247,250,35,134,73,109,250,188,60,25,69,117,98,39,122,244,92,130,160,139,189,97,209,66,30,209,244,4,173,206,146,163,126,18,183,141,66,16,114,169,114,130,168,196,112,146,11,229,125,18,200,161,91,40,79,244,98,60,165,234,192,53,49,210,5,232,251,41,137,66,130,223,252,180,83,106,182,79,91,193,125,14,171,31,8,31,174,24,134,16,109,8,253,252,137,40,255,249,17,204,75,105,174,92,106,35,77,202,222,18,197,140,63,44,254,45,208,210,150,88,239,248,218,82,207,228,103,91,21,149,140,72,74,73,12,168,182,185,188,130,143,92,69,107,211,137,55,148,96,58,169,201,0,236,83,82,113,68,73,75,135,10,64,188,115,215,28,103,52,124,246,126,113,2,54,85,235,79,255,47,208,162,196,96,191,210,192,3,63,212,109,239,180,80,209,140,71,7,136,24,110,0,85,63,229,162,188,212,230,185,22,128,4,162,51,56,87,151,103,125,32,215,61,143,15,222,51,123,248,114,51,79,204,171,93,197,136,118,176,166,0,123,1,0,123,148,210,117,0,87,248,136,187,249,158,1,66,137,255,165,100,66,224,2,99,133,43,217,219,114,105,27,151,238,222,47,162,110,43,174,8,95,109,97,122,175,103,135,201,229,210,235,31,207,194,200,239,97,113,37,172,241,194,57,130,204,184,76,33,103,209,131,229,177,98,62,220,183,206,189,16,127,56,92,10,249,61,68,240,15,198,109,110,96,73,58,84,96,72,193,39,87,29,138,233,43,56,23,180,138,36,190,225,32,15,218,150,175,37,132,69,104,229,59,131,153,125,69,13,96,80,147,47,40,98,179,52,131,32,17,29,217,160,141,109,43,49,30,43,100,0,90,48,156,136,230,188,82,138,88,3,27,213,239,186,247,156,237,66,65,17,92,49,164,197,62,50,131,54,70,239,223,1,197,51,161,28,83,211,233,131,55,53,238], "i8", ALLOC_NONE, 435524);
allocate([148,16,32,31,91,167,11,239,126,207,227,105,128,67,63,57,122,207,97,254,122,32,197,238,148,156,136,85,81,6,252,114,121,239,167,173,53,114,29,78,206,99,90,213,186,54,4,222,239,48,196,153,148,7,12,95,125,219,220,24,243,239,214,161,123,47,181,160,5,54,232,89,148,176,21,238,9,217,255,233,134,0,68,220,89,68,148,239,179,204,131,186,251,205,195,224,129,65,218,209,177,42,9,59,193,241,151,249,123,207,230,165,219,13,66,1,91,239,231,228,65,255,161,37,6,248,128,225,128,16,196,31,122,238,155,23,169,198,122,211,164,48,88,254,127,139,222,152,78,63,232,119,105,146,146,121,123,159,250,36,91,200,19,225,131,0,196,172,37,53,80,215,95,97,234,247,84,49,20,98,99,75,85,13,33,17,104,93,89,195,102,200,115,207,99,61,192,52,226,206,135,126,216,212,33,43,103,92,129,97,31,7,127,98,247,57,132,48,30,54,59,87,235,228,164,100,47,96,156,205,58,214,53,70,188,27,45,3,129,158,12,245,1,39,180,122,132,153,121,223,227,160,140,243,108,186,148,48,132,16,94,169,55,37,254,111,111,244,31,59,255,161,106,251,140,32,116,140,69,143,39,162,224,217,52,58,199,78,105,79,136,252,223,232,77,62,136,0,14,239,141,100,89,53,140,56,69,138,102,67,128,29,253,155,29,114,187,132,134,165,51,99,37,232,18,130,78,132,152,128,141,18,180,63,211,254,225,10,40,206,165,155,225,39,82,194,166,213,189,84,151,228,221,85,214,197,100,112,102,235,77,11,132,119,1,168,182,161,169,38,219,132,20,103,181,224,183,67,240,33,96,88,208,229,132,48,240,84,114,244,111,6,83,161,26,163,85,71,220,218,191,93,98,181,230,27,86,104,148,107,202,131,59,210,110,45,219,1,207,236,186,208,211,166,92,61,128,182,9,167,119,175,76,163,180,51,214,200,123,57,149,43,226,94,4,83,14,95,97,111,237,129,100,67,231,32,120,19,94,180,155,99,24,222,34,161,28,136,209,38,103,185,232,167,73,128,123,218,183,34,37,45,85,94,55,210,114,82,28,149,210,121,76,137,13,198,2,180,140,72,91,254,164,27,107,159,176,164,207,21,168,28,5,48,12,162,99,223,113,136,203,47,222,185,233,201,198,12,83,255,238,11,23,69,33,227,53,40,84,180,60,41,99,159,41,231,65,238,124,45,29,110,134,82,4,80,243,133,102,30,198,1,52,243,149,44,162,48,80,8,167,49,19,15,147,96,23,132,249,115,89,152,38,161,68,92,100,236,169,119,200,82,166,51,255,205,65,23,43,160,162,217,186,124,111,3,128,33,8,156,217,80,97,72,63,203,101,215,107,194,171,246,163,100,118,38,52,128,123,94,167,37,252,209,230,228,230,16,199,32,128,182,240,205,59,77,132,23,77,248,238,49,228,36,8,126,235,73,203,44,174,59,106,132,136,120,247,143,246,96,93,238,115,86,247,122,219,92,221,47,193,49,22,161,67,111,246,48,84,236,250,179,250,215,127,21,204,121,133,239,88,222,82,209,94,253,47,219,25,206,50,143,122,249,106,48,248,62,240,2,213,154,49,153,15,250,66,194,176,235,227,167,6,73,142,198,12,35,218,184,40,48,130,128,200,243,222,220,113,177,95,211,200,27,138,8,96,197,192,190,232,201,163,97,77,245,168,188,250,239,47,199,153,46,130,34,180,112,197,130,137,78,217,216,188,52,28,139,230,22,30,48,121,233,59,39,166,234,255,176,198,184,217,97,105,72,178,0,63,206,255,183,59,40,220,8,90,246,218,67,152,151,225,247,47,183,25,118,164,155,28,143,160,55,134,220,177,211,167,22,183,147,195,159,235,110,19,167,62,198,188,198,66,55,81,26,188,40,104,239,214,101,3,82,171,119,106,45,75,237,39,53,22,210,31,130,46,110,92,9,251,242,146,219,203,41,234,94,245,146,88,20,127,79,88,145,123,105,131,84,204,168,103,38,72,96,25,133,234,172,75,140,212,96,56,131,249,224,35,13,138,126,56,108,73,210,230,10,12,96,132,178,29,115,53,216,71,198,177,220,234,86,76,172,179,129,189,62,176,171,14,35,135,188,56,100,250,177,181,240,179,162,94,143,66,70,24,252,122,107,3,10,189,137,176,79,137,165,157,100,94,65,69,163,35,131,3,92,185,59,93,62,114,149,215,67,124,208,109,126,30,223,223,6,239,196,108,108,57,165,96,113,112,190,191,115,5,118,135,131,241,236,35,69], "i8", ALLOC_NONE, 436548);
allocate([212,64,251,48,11,255,160,159,47,205,236,107,122,140,37,63,47,63,33,30,211,77,0,156,64,229,3,96,73,201,159,207,39,175,212,191,181,189,187,136,144,64,3,226,117,150,208,152,224,160,99,110,210,97,195,21,29,102,231,194,142,255,212,34,111,59,104,40,89,208,127,192,200,121,35,255,226,80,95,119,211,64,195,67,86,134,47,223,26,164,124,136,45,189,210,162,214,224,201,161,25,72,108,52,135,109,183,97,47,15,84,34,225,50,190,42,107,22,84,170,58,142,86,34,208,65,211,162,200,64,219,102,47,57,132,167,47,255,77,0,222,210,185,45,172,63,148,151,216,193,151,74,183,68,118,82,167,55,244,181,239,186,44,184,89,209,81,215,237,240,247,111,31,122,9,90,208,104,123,130,46,245,236,144,84,192,176,34,53,89,142,188,127,47,109,75,162,100,187,80,16,73,102,210,45,129,229,190,144,34,51,183,159,21,59,233,17,228,142,180,93,52,255,75,64,194,69,253,63,151,49,173,46,208,246,196,101,129,252,85,173,202,177,213,174,45,172,161,109,183,212,162,80,12,155,193,242,64,34,136,56,79,110,12,215,191,228,164,114,162,91,79,47,29,76,86,25,83,156,197,84,227,73,185,254,105,70,176,138,171,182,177,221,88,19,199,69,197,133,99,93,147,15,17,213,138,83,87,147,4,57,106,224,55,61,230,179,246,84,42,95,125,120,58,181,160,118,98,223,252,166,25,106,32,66,122,213,212,249,41,145,24,27,246,94,39,114,187,103,129,80,170,145,16,144,56,235,5,181,198,140,203,199,132,15,90,215,42,39,20,74,135,107,147,209,162,175,134,210,42,145,210,86,170,96,67,137,215,13,117,92,66,38,158,179,147,201,132,113,24,45,179,0,108,20,187,226,115,60,188,190,160,121,55,98,84,171,158,69,100,130,139,50,63,130,207,24,119,166,206,162,89,46,0,238,4,230,120,254,137,80,9,171,63,194,246,95,50,5,63,56,129,200,197,99,105,214,90,203,118,201,116,153,212,207,13,24,202,213,130,7,56,246,92,250,199,17,21,195,138,19,158,231,53,208,145,218,71,134,144,15,244,158,65,226,167,65,98,54,49,149,244,30,5,4,59,87,170,141,93,128,74,208,0,131,84,60,42,50,0,223,205,100,191,142,166,87,186,43,55,198,117,65,211,175,80,117,50,193,167,245,11,90,145,171,191,84,107,38,20,11,43,215,201,76,171,130,205,156,68,101,242,251,247,243,197,133,171,148,219,85,27,36,227,212,170,63,189,164,207,226,163,234,45,2,77,32,158,172,37,189,200,179,85,223,234,152,158,189,213,178,49,18,227,108,173,213,42,222,41,67,149,40,69,190,173,105,15,113,216,15,201,81,170,246,107,120,170,30,63,81,34,155,167,81,170,204,68,211,42,240,65,90,123,173,251,124,211,5,149,6,27,145,228,236,65,230,50,195,180,212,104,34,3,204,10,96,201,109,126,56,206,108,177,107,191,120,251,112,106,201,217,3,13,222,57,223,212,218,99,16,224,100,244,54,71,216,40,211,90,150,204,71,179,195,15,187,117,251,27,81,152,53,204,251,79,106,207,139,181,188,10,31,225,74,254,197,191,16,236,10,167,10,87,57,172,47,68,4,63,83,177,136,97,46,122,57,224,121,203,39,87,143,65,235,156,141,214,172,28,150,124,211,42,157,203,117,1,9,255,157,198,240,101,91,199,216,64,219,217,121,119,14,236,212,234,68,71,116,50,28,177,158,203,36,221,189,84,28,126,249,68,17,240,177,14,36,210,253,179,117,150,85,55,172,163,175,39,124,212,77,95,200,81,150,117,144,86,230,21,187,165,240,4,3,88,241,44,4,202,234,55,26,1,219,170,191,141,74,62,186,53,160,255,38,53,9,77,123,195,217,110,48,188,102,38,165,152,37,247,72,86,157,86,94,255,208,99,237,12,207,178,99,124,225,69,11,112,241,80,234,213,114,40,169,133,167,189,31,175,112,72,35,212,243,11,135,167,121,77,59,45,152,65,224,66,231,237,208,12,184,13,71,38,76,129,129,248,215,106,77,71,92,94,12,124,89,25,35,209,152,114,27,56,219,244,210,245,83,134,131,171,35,30,47,110,158,156,113,131,70,224,145,189,110,69,86,154,12,32,57,220,113,197,200,32,28,218,43,150,255,150,230,225,8,171,65,177,185,137,202,124,131,231,105,26,67,72,204,2,121,197,247,162,125,244,158,66,156,22,123,66,73,240,201,90,0,15,143,221,191,101,129,92], "i8", ALLOC_NONE, 437572);
allocate([1,0,0,0,17,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438596);
allocate([2,0,0,0,11,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438608);
allocate([2,0,0,0,11,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438632);
allocate([2,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438656);
allocate(16, "i8", ALLOC_NONE, 438676);
allocate(4, "i8", ALLOC_NONE, 438692);
allocate(4, "i8", ALLOC_NONE, 438696);
allocate(4, "i8", ALLOC_NONE, 438700);
allocate(4, "i8", ALLOC_NONE, 438704);
allocate(4, "i8", ALLOC_NONE, 438708);
allocate(4, "i8", ALLOC_NONE, 438712);
allocate(4, "i8", ALLOC_NONE, 438716);
allocate(4, "i8", ALLOC_NONE, 438720);
allocate(4, "i8", ALLOC_NONE, 438724);
allocate(4, "i8", ALLOC_NONE, 438728);
allocate(4, "i8", ALLOC_NONE, 438732);
allocate(4, "i8", ALLOC_NONE, 438736);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438740);
allocate(16, "i8", ALLOC_NONE, 438780);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438796);
allocate(12, "i8", ALLOC_NONE, 438836);
allocate([0,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 438848);
allocate(12, "i8", ALLOC_NONE, 438888);
allocate([0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1], "i8", ALLOC_NONE, 438900);
allocate([217,120,249,196,25,221,181,237,40,233,253,121,74,160,216,157,198,126,55,131,43,118,83,142,98,76,100,136,68,139,251,162,23,154,89,245,135,179,79,19,97,69,109,141,9,129,125,50,189,143,64,235,134,183,123,11,240,149,33,34,92,107,78,130,84,214,101,147,206,96,178,28,115,86,192,20,167,140,241,220,18,117,202,31,59,190,228,209,66,61,212,48,163,60,182,38,111,191,14,218,70,105,7,87,39,242,29,155,188,148,67,3,248,17,199,246,144,239,62,231,6,195,213,47,200,102,30,215,8,232,234,222,128,82,238,247,132,170,114,172,53,77,106,42,150,26,210,113,90,21,73,116,75,159,208,94,4,24,164,236,194,224,65,110,15,81,203,204,36,145,175,80,161,244,112,57,153,124,58,133,35,184,180,122,252,2,54,91,37,85,151,49,45,93,250,152,227,138,146,174,5,223,41,16,103,108,186,201,211,0,230,207,225,158,168,44,99,22,1,63,88,226,137,169,13,56,52,27,171,51,255,176,187,72,12,95,185,177,205,46,197,243,219,71,229,165,156,119,10,166,32,104,254,127,193,173] /* \D9x\F9\C4\19\DD\B5\ */, "i8", ALLOC_NONE, 438964);
allocate(4, "i8", ALLOC_NONE, 439220);
allocate([255,255,255,255], "i8", ALLOC_NONE, 439224);
allocate([1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,27,0,0,0,54,0,0,0,108,0,0,0,216,0,0,0,171,0,0,0,77,0,0,0,154,0,0,0,47,0,0,0,94,0,0,0,188,0,0,0,99,0,0,0,198,0,0,0,151,0,0,0,53,0,0,0,106,0,0,0,212,0,0,0,179,0,0,0,125,0,0,0,250,0,0,0,239,0,0,0,197,0,0,0,145,0,0,0], "i8", ALLOC_NONE, 439228);
allocate([79,1,184,135,232,198,35,24,82,145,111,121,245,210,166,54,53,123,12,163,142,155,188,96,87,254,75,46,194,215,224,29,218,74,240,159,229,55,119,21,133,107,160,177,10,41,201,88,103,5,62,203,244,16,93,189,216,149,125,167,139,65,39,228,158,71,23,221,102,124,238,251,51,131,90,173,7,191,45,202], "i8", ALLOC_NONE, 439348);
allocate(4, "i8", ALLOC_NONE, 439428);
allocate([117,243,198,244,219,123,251,200,74,211,230,107,69,125,232,75,214,50,216,253,55,113,241,225,48,15,248,27,135,250,6,63,94,186,174,91,138,0,188,157,109,193,177,14,128,93,210,213,160,132,7,20,181,144,44,163,178,115,76,84,146,116,54,81,56,176,189,90,252,96,98,150,108,66,247,16,124,40,39,140,19,149,156,199,36,70,59,112,202,227,133,203,17,208,147,184,166,131,32,255,159,119,195,204,3,111,8,191,64,231,43,226,121,12,170,130,65,58,234,185,228,154,164,151,126,218,122,23,102,148,161,29,61,240,222,179,11,114,167,28,239,209,83,62,143,51,38,95,236,118,42,73,129,136,238,33,196,26,235,217,197,57,153,205,173,49,139,1,24,35,221,31,78,45,249,72,79,242,101,142,120,92,88,25,141,229,152,87,103,127,5,100,175,99,182,254,245,183,60,165,206,233,104,68,224,77,67,105,41,46,172,21,89,168,10,158,110,71,223,52,53,106,207,220,34,201,192,155,137,212,237,171,18,162,13,82,187,2,47,169,215,97,30,180,80,4,246,194,22,37,134,86,85,9,190,145] /* u\F3\C6\F4\DB{\FB\C8 */, "i8", ALLOC_NONE, 439432);
allocate([169,103,179,232,4,253,163,118,154,146,128,120,228,221,209,56,13,198,53,152,24,247,236,108,67,117,55,38,250,19,148,72,242,208,139,48,132,84,223,35,25,91,61,89,243,174,162,130,99,1,131,46,217,81,155,124,166,235,165,190,22,12,227,97,192,140,58,245,115,44,37,11,187,78,137,107,83,106,180,241,225,230,189,69,226,244,182,102,204,149,3,86,212,28,30,215,251,195,142,181,233,207,191,186,234,119,57,175,51,201,98,113,129,121,9,173,36,205,249,216,229,197,185,77,68,8,134,231,161,29,170,237,6,112,178,210,65,123,160,17,49,194,39,144,32,246,96,255,150,92,177,171,158,156,82,27,95,147,10,239,145,133,73,238,45,79,143,59,71,135,109,70,214,62,105,100,42,206,203,47,252,151,5,122,172,127,213,26,75,14,167,90,40,20,63,41,136,60,76,2,184,218,176,23,85,31,138,125,87,199,141,116,183,196,159,114,126,21,34,18,88,7,153,52,110,80,222,104,101,188,219,248,200,168,43,64,220,254,50,164,202,16,33,240,211,93,15,0,111,157,54,66,74,94,193,224] /* \A9g\B3\E8\04\FD\A3v */, "i8", ALLOC_NONE, 439688);
allocate(4, "i8", ALLOC_NONE, 439944);
allocate(4, "i8", ALLOC_NONE, 439948);
allocate([16,127,7,0,60,128,7,0,1,0,0,0,1,0,0,0,76,127,7,0,84,128,7,0,20,0,0,0,0,0,0,0,76,127,7,0,84,128,7,0,16,0,0,0,0,0,0,0,0,128,7,0,132,128,7,0,17,0,0,0,1,0,0,0,136,127,7,0,108,128,7,0,45,1,0,0,0,0,0,0,196,127,7,0,108,128,7,0,46,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 439952);
allocate([136,106,63,36,211,8,163,133,46,138,25,19,68,115,112,3,34,56,9,164,208,49,159,41,152,250,46,8,137,108,78,236,230,33,40,69,119,19,208,56,207,102,84,190,108,12,233,52,183,41,172,192,221,80,124,201,181,213,132,63,23,9,71,181,217,213,22,146,27,251,121,137], "i8", ALLOC_NONE, 440064);
allocate(4, "i8", ALLOC_NONE, 440136);
allocate(4, "i8", ALLOC_NONE, 440140);
allocate(4, "i8", ALLOC_NONE, 440144);
allocate(4, "i8", ALLOC_NONE, 440148);
allocate(4, "i8", ALLOC_NONE, 440152);
allocate(4, "i8", ALLOC_NONE, 440156);
allocate(4, "i8", ALLOC_NONE, 440160);
allocate(4, "i8", ALLOC_NONE, 440164);
allocate(4, "i8", ALLOC_NONE, 440168);
allocate(4, "i8", ALLOC_NONE, 440172);
allocate(4, "i8", ALLOC_NONE, 440176);
allocate(4, "i8", ALLOC_NONE, 440180);
allocate(4, "i8", ALLOC_NONE, 440184);
allocate(4, "i8", ALLOC_NONE, 440188);
allocate(4, "i8", ALLOC_NONE, 440192);
allocate(4, "i8", ALLOC_NONE, 440196);
allocate(4, "i8", ALLOC_NONE, 440200);
allocate(4, "i8", ALLOC_NONE, 440204);
allocate(4, "i8", ALLOC_NONE, 440208);
allocate(4, "i8", ALLOC_NONE, 440212);
allocate(4, "i8", ALLOC_NONE, 440216);
allocate([0,1,23,2,46,24,83,3,106,47,147,25,52,84,69,4,92,107,182,48,166,148,75,26,140,53,129,85,170,70,13,5,36,93,135,108,155,183,193,49,43,167,163,149,152,76,202,27,230,141,115,54,205,130,18,86,98,171,240,71,79,14,189,6,212,37,210,94,39,136,102,109,214,156,121,184,8,194,223,50,104,44,253,168,138,164,90,150,41,153,34,77,96,203,228,28,123,231,59,142,158,116,244,55,216,206,249,131,111,19,178,87,225,99,220,172,196,241,175,72,10,80,66,15,186,190,199,7,222,213,120,38,101,211,209,95,227,40,33,137,89,103,252,110,177,215,248,157,243,122,58,185,198,9,65,195,174,224,219,51,68,105,146,45,82,254,22,169,12,139,128,165,74,91,181,151,201,42,162,154,192,35,134,78,188,97,239,204,17,229,114,29,61,124,235,232,233,60,234,143,125,159,236,117,30,245,62,56,246,217,63,207,118,250,31,132,160,112,237,20,144,179,126,88,251,226,32,100,208,221,119,173,218,197,64,242,57,176,247,73,180,11,127,81,21,67,145,16,113,187,238,191,133,200,161] /* \00\01\17\02.\18S\03 */, "i8", ALLOC_NONE, 440220);
allocate(4, "i8", ALLOC_NONE, 440476);
allocate(4, "i8", ALLOC_NONE, 440480);
allocate(4, "i8", ALLOC_NONE, 440484);
allocate(4, "i8", ALLOC_NONE, 440488);
allocate(56, "i8", ALLOC_NONE, 440492);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 440548);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 440580);
allocate(8, "i8", ALLOC_NONE, 440596);
allocate(12, "i8", ALLOC_NONE, 440604);
allocate(12, "i8", ALLOC_NONE, 440616);
allocate(12, "i8", ALLOC_NONE, 440628);
allocate(8, "i8", ALLOC_NONE, 440640);
allocate(24, "i8", ALLOC_NONE, 440648);
allocate(12, "i8", ALLOC_NONE, 440672);
allocate(12, "i8", ALLOC_NONE, 440684);
allocate(8, "i8", ALLOC_NONE, 440696);
allocate(4, "i8", ALLOC_NONE, 440704);
allocate(4, "i8", ALLOC_NONE, 440708);
allocate(4, "i8", ALLOC_NONE, 440712);
allocate(4, "i8", ALLOC_NONE, 440716);
allocate(4, "i8", ALLOC_NONE, 440720);
allocate(4, "i8", ALLOC_NONE, 440724);
allocate([85,110,115,112,101,99,105,102,105,101,100,32,115,111,117,114,99,101,0,103,99,114,121,112,116,0,71,110,117,80,71,0,71,112,103,83,77,0,71,80,71,32,65,103,101,110,116,0,80,105,110,101,110,116,114,121,0,83,67,68,0,71,80,71,77,69,0,75,101,121,98,111,120,0,75,83,66,65,0,68,105,114,109,110,103,114,0,71,83,84,73,0,71,80,65,0,75,108,101,111,112,97,116,114,97,0,71,49,51,0,65,110,121,32,115,111,117,114,99,101,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,49,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,50,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,51,0,85,115,101,114,32,100,101,102,105,110,101,100,32,115,111,117,114,99,101,32,52,0,85,110,107,110,111,119,110,32,115,111,117,114,99,101,0] /* Unspecified source\0 */, "i8", ALLOC_NONE, 440728);
allocate([83,117,99,99,101,115,115,0,71,101,110,101,114,97,108,32,101,114,114,111,114,0,85,110,107,110,111,119,110,32,112,97,99,107,101,116,0,85,110,107,110,111,119,110,32,118,101,114,115,105,111,110,32,105,110,32,112,97,99,107,101,116,0,73,110,118,97,108,105,100,32,112,117,98,108,105,99,32,107,101,121,32,97,108,103,111,114,105,116,104,109,0,73,110,118,97,108,105,100,32,100,105,103,101,115,116,32,97,108,103,111,114,105,116,104,109,0,66,97,100,32,112,117,98,108,105,99,32,107,101,121,0,66,97,100,32,115,101,99,114,101,116,32,107,101,121,0,66,97,100,32,115,105,103,110,97,116,117,114,101,0,78,111,32,112,117,98,108,105,99,32,107,101,121,0,67,104,101,99,107,115,117,109,32,101,114,114,111,114,0,66,97,100,32,112,97,115,115,112,104,114,97,115,101,0,73,110,118,97,108,105,100,32,99,105,112,104,101,114,32,97,108,103,111,114,105,116,104,109,0,75,101,121,114,105,110,103,32,111,112,101,110,0,73,110,118,97,108,105,100,32,112,97,99,107,101,116,0,73,110,118,97,108,105,100,32,97,114,109,111,114,0,78,111,32,117,115,101,114,32,73,68,0,78,111,32,115,101,99,114,101,116,32,107,101,121,0,87,114,111,110,103,32,115,101,99,114,101,116,32,107,101,121,32,117,115,101,100,0,66,97,100,32,115,101,115,115,105,111,110,32,107,101,121,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,97,108,103,111,114,105,116,104,109,0,78,117,109,98,101,114,32,105,115,32,110,111,116,32,112,114,105,109,101,0,73,110,118,97,108,105,100,32,101,110,99,111,100,105,110,103,32,109,101,116,104,111,100,0,73,110,118,97,108,105,100,32,101,110,99,114,121,112,116,105,111,110,32,115,99,104,101,109,101,0,73,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,32,115,99,104,101,109,101,0,73,110,118,97,108,105,100,32,97,116,116,114,105,98,117,116,101,0,78,111,32,118,97,108,117,101,0,78,111,116,32,102,111,117,110,100,0,86,97,108,117,101,32,110,111,116,32,102,111,117,110,100,0,83,121,110,116,97,120,32,101,114,114,111,114,0,66,97,100,32,77,80,73,32,118,97,108,117,101,0,73,110,118,97,108,105,100,32,112,97,115,115,112,104,114,97,115,101,0,73,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,32,99,108,97,115,115,0,82,101,115,111,117,114,99,101,115,32,101,120,104,97,117,115,116,101,100,0,73,110,118,97,108,105,100,32,107,101,121,114,105,110,103,0,84,114,117,115,116,32,68,66,32,101,114,114,111,114,0,66,97,100,32,99,101,114,116,105,102,105,99,97,116,101,0,73,110,118,97,108,105,100,32,117,115,101,114,32,73,68,0,85,110,101,120,112,101,99,116,101,100,32,101,114,114,111,114,0,84,105,109,101,32,99,111,110,102,108,105,99,116,0,75,101,121,115,101,114,118,101,114,32,101,114,114,111,114,0,87,114,111,110,103,32,112,117,98,108,105,99,32,107,101,121,32,97,108,103,111,114,105,116,104,109,0,84,114,105,98,117,116,101,32,116,111,32,68,46,32,65,46,0,87,101,97,107,32,101,110,99,114,121,112,116,105,111,110,32,107,101,121,0,73,110,118,97,108,105,100,32,107,101,121,32,108,101,110,103,116,104,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,83,121,110,116,97,120,32,101,114,114,111,114,32,105,110,32,85,82,73,0,73,110,118,97,108,105,100,32,85,82,73,0,78,101,116,119,111,114,107,32,101,114,114,111,114,0,85,110,107,110,111,119,110,32,104,111,115,116,0,83,101,108,102,116,101,115,116,32,102,97,105,108,101,100,0,68,97,116,97,32,110,111,116,32,101,110,99,114,121,112,116,101,100,0,68,97,116,97,32,110,111,116,32,112,114,111,99,101,115,115,101,100,0,85,110,117,115,97,98,108,101,32,112,117,98,108,105,99,32,107,101,121,0,85,110,117,115,97,98,108,101,32,115,101,99,114,101,116,32,107,101,121,0,73,110,118,97,108,105,100,32,118,97,108,117,101,0,66,97,100,32,99,101,114,116,105,102,105,99,97,116,101,32,99,104,97,105,110,0,77,105,115,115,105,110,103,32,99,101,114,116,105,102,105,99,97,116,101,0,78,111,32,100,97,116,97,0,66,117,103,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,32,99,111,100,101,0,84,105,109,101,111,117,116,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,0,69,79,70,32,40,103,99,114,121,112,116,41,0,73,110,118,97,108,105,100,32,111,98,106,101,99,116,0,80,114,111,118,105,100,101,100,32,111,98,106,101,99,116,32,105,115,32,116,111,111,32,115,104,111,114,116,0,80,114,111,118,105,100,101,100,32,111,98,106,101,99,116,32,105,115,32,116,111,111,32,108,97,114,103,101,0,77,105,115,115,105,110,103,32,105,116,101,109,32,105,110,32,111,98,106,101,99,116,0,78,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,67,111,110,102,108,105,99,116,105,110,103,32,117,115,101,0,73,110,118,97,108,105,100,32,99,105,112,104,101,114,32,109,111,100,101,0,73,110,118,97,108,105,100,32,102,108,97,103,0,73,110,118,97,108,105,100,32,104,97,110,100,108,101,0,82,101,115,117,108,116,32,116,114,117,110,99,97,116,101,100,0,73,110,99,111,109,112,108,101,116,101,32,108,105,110,101,0,73,110,118,97,108,105,100,32,114,101,115,112,111,110,115,101,0,78,111,32,97,103,101,110,116,32,114,117,110,110,105,110,103,0,97,103,101,110,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,100,97,116,97,0,85,110,115,112,101,99,105,102,105,99,32,65,115,115,117,97,110,32,115,101,114,118,101,114,32,102,97,117,108,116,0,71,101,110,101,114,97,108,32,65,115,115,117,97,110,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,115,101,115,115,105,111,110,32,107,101,121,0,73,110,118,97,108,105,100,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,115,117,112,112,111,114,116,101,100,32,97,108,103,111,114,105,116,104,109,0,78,111,32,112,105,110,101,110,116,114,121,0,112,105,110,101,110,116,114,121,32,101,114,114,111,114,0,66,97,100,32,80,73,78,0,73,110,118,97,108,105,100,32,110,97,109,101,0,66,97,100,32,100,97,116,97,0,73,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,0,87,114,111,110,103,32,99,97,114,100,0,78,111,32,100,105,114,109,110,103,114,0,100,105,114,109,110,103,114,32,101,114,114,111,114,0,67,101,114,116,105,102,105,99,97,116,101,32,114,101,118,111,107,101,100,0,78,111,32,67,82,76,32,107,110,111,119,110,0,67,82,76,32,116,111,111,32,111,108,100,0,76,105,110,101,32,116,111,111,32,108,111,110,103,0,78,111,116,32,116,114,117,115,116,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,108,101,100,0,66,97,100,32,67,65,32,99,101,114,116,105,102,105,99,97,116,101,0,67,101,114,116,105,102,105,99,97,116,101,32,101,120,112,105,114,101,100,0,67,101,114,116,105,102,105,99,97,116,101,32,116,111,111,32,121,111,117,110,103,0,85,110,115,117,112,112,111,114,116,101,100,32,99,101,114,116,105,102,105,99,97,116,101,0,85,110,107,110,111,119,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,115,117,112,112,111,114,116,101,100,32,112,114,111,116,101,99,116,105,111,110,0,67,111,114,114,117,112,116,101,100,32,112,114,111,116,101,99,116,105,111,110,0,65,109,98,105,103,117,111,117,115,32,110,97,109,101,0,67,97,114,100,32,101,114,114,111,114,0,67,97,114,100,32,114,101,115,101,116,32,114,101,113,117,105,114,101,100,0,67,97,114,100,32,114,101,109,111,118,101,100,0,73,110,118,97,108,105,100,32,99,97,114,100,0,67,97,114,100,32,110,111,116,32,112,114,101,115,101,110,116,0,78,111,32,80,75,67,83,49,53,32,97,112,112,108,105,99,97,116,105,111,110,0,78,111,116,32,99,111,110,102,105,114,109,101,100,0,67,111,110,102,105,103,117,114,97,116,105,111,110,32,101,114,114,111,114,0,78,111,32,112,111,108,105,99,121,32,109,97,116,99,104,0,73,110,118,97,108,105,100,32,105,110,100,101,120,0,73,110,118,97,108,105,100,32,73,68,0,78,111,32,83,109,97,114,116,67,97,114,100,32,100,97,101,109,111,110,0,83,109,97,114,116,67,97,114,100,32,100,97,101,109,111,110,32,101,114,114,111,114,0,85,110,115,117,112,112,111,114,116,101,100,32,112,114,111,116,111,99,111,108,0,66,97,100,32,80,73,78,32,109,101,116,104,111,100,0,67,97,114,100,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,100,0,85,110,115,117,112,112,111,114,116,101,100,32,111,112,101,114,97,116,105,111,110,0,87,114,111,110,103,32,107,101,121,32,117,115,97,103,101,0,78,111,116,104,105,110,103,32,102,111,117,110,100,0,87,114,111,110,103,32,98,108,111,98,32,116,121,112,101,0,77,105,115,115,105,110,103,32,118,97,108,117,101,0,72,97,114,100,119,97,114,101,32,112,114,111,98,108,101,109,0,80,73,78,32,98,108,111,99,107,101,100,0,67,111,110,100,105,116,105,111,110,115,32,111,102,32,117,115,101,32,110,111,116,32,115,97,116,105,115,102,105,101,100,0,80,73,78,115,32,97,114,101,32,110,111,116,32,115,121,110,99,101,100,0,73,110,118,97,108,105,100,32,67,82,76,0,66,69,82,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,66,69,82,0,69,108,101,109,101,110,116,32,110,111,116,32,102,111,117,110,100,0,73,100,101,110,116,105,102,105,101,114,32,110,111,116,32,102,111,117,110,100,0,73,110,118,97,108,105,100,32,116,97,103,0,73,110,118,97,108,105,100,32,108,101,110,103,116,104,0,73,110,118,97,108,105,100,32,107,101,121,32,105,110,102,111,0,85,110,101,120,112,101,99,116,101,100,32,116,97,103,0,78,111,116,32,68,69,82,32,101,110,99,111,100,101,100,0,78,111,32,67,77,83,32,111,98,106,101,99,116,0,73,110,118,97,108,105,100,32,67,77,83,32,111,98,106,101,99,116,0,85,110,107,110,111,119,110,32,67,77,83,32,111,98,106,101,99,116,0,85,110,115,117,112,112,111,114,116,101,100,32,67,77,83,32,111,98,106,101,99,116,0,85,110,115,117,112,112,111,114,116,101,100,32,101,110,99,111,100,105,110,103,0,85,110,115,117,112,112,111,114,116,101,100,32,67,77,83,32,118,101,114,115,105,111,110,0,85,110,107,110,111,119,110,32,97,108,103,111,114,105,116,104,109,0,73,110,118,97,108,105,100,32,99,114,121,112,116,111,32,101,110,103,105,110,101,0,80,117,98,108,105,99,32,107,101,121,32,110,111,116,32,116,114,117,115,116,101,100,0,68,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,0,75,101,121,32,101,120,112,105,114,101,100,0,83,105,103,110,97,116,117,114,101,32,101,120,112,105,114,101,100,0,69,110,99,111,100,105,110,103,32,112,114,111,98,108,101,109,0,73,110,118,97,108,105,100,32,115,116,97,116,101,0,68,117,112,108,105,99,97,116,101,100,32,118,97,108,117,101,0,77,105,115,115,105,110,103,32,97,99,116,105,111,110,0,65,83,78,46,49,32,109,111,100,117,108,101,32,110,111,116,32,102,111,117,110,100,0,73,110,118,97,108,105,100,32,79,73,68,32,115,116,114,105,110,103,0,73,110,118,97,108,105,100,32,116,105,109,101,0,73,110,118,97,108,105,100,32,67,82,76,32,111,98,106,101,99,116,0,85,110,115,117,112,112,111,114,116,101,100,32,67,82,76,32,118,101,114,115,105,111,110,0,73,110,118,97,108,105,100,32,99,101,114,116,105,102,105,99,97,116,101,32,111,98,106,101,99,116,0,85,110,107,110,111,119,110,32,110,97,109,101,0,65,32,108,111,99,97,108,101,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0,78,111,116,32,108,111,99,107,101,100,0,80,114,111,116,111,99,111,108,32,118,105,111,108,97,116,105,111,110,0,73,110,118,97,108,105,100,32,77,65,67,0,73,110,118,97,108,105,100,32,114,101,113,117,101,115,116,0,85,110,107,110,111,119,110,32,101,120,116,101,110,115,105,111,110,0,85,110,107,110,111,119,110,32,99,114,105,116,105,99,97,108,32,101,120,116,101,110,115,105,111,110,0,76,111,99,107,101,100,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,0,85,110,107,110,111,119,110,32,99,111,109,109,97,110,100,0,78,111,116,32,111,112,101,114,97,116,105,111,110,97,108,0,78,111,32,112,97,115,115,112,104,114,97,115,101,32,103,105,118,101,110,0,78,111,32,80,73,78,32,103,105,118,101,110,0,78,111,116,32,101,110,97,98,108,101,100,0,78,111,32,99,114,121,112,116,111,32,101,110,103,105,110,101,0,77,105,115,115,105,110,103,32,107,101,121,0,84,111,111,32,109,97,110,121,32,111,98,106,101,99,116,115,0,76,105,109,105,116,32,114,101,97,99,104,101,100,0,78,111,116,32,105,110,105,116,105,97,108,105,122,101,100,0,77,105,115,115,105,110,103,32,105,115,115,117,101,114,32,99,101,114,116,105,102,105,99,97,116,101,0,79,112,101,114,97,116,105,111,110,32,102,117,108,108,121,32,99,97,110,99,101,108,108,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,121,101,116,32,102,105,110,105,115,104,101,100,0,66,117,102,102,101,114,32,116,111,111,32,115,104,111,114,116,0,73,110,118,97,108,105,100,32,108,101,110,103,116,104,32,115,112,101,99,105,102,105,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,83,116,114,105,110,103,32,116,111,111,32,108,111,110,103,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,109,97,116,99,104,101,100,32,112,97,114,101,110,116,104,101,115,101,115,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,83,45,101,120,112,114,101,115,115,105,111,110,32,110,111,116,32,99,97,110,111,110,105,99,97,108,0,66,97,100,32,99,104,97,114,97,99,116,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,66,97,100,32,113,117,111,116,97,116,105,111,110,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,90,101,114,111,32,112,114,101,102,105,120,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,78,101,115,116,101,100,32,100,105,115,112,108,97,121,32,104,105,110,116,115,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,85,110,109,97,116,99,104,101,100,32,100,105,115,112,108,97,121,32,104,105,110,116,115,0,85,110,101,120,112,101,99,116,101,100,32,114,101,115,101,114,118,101,100,32,112,117,110,99,116,117,97,116,105,111,110,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,66,97,100,32,104,101,120,97,100,101,99,105,109,97,108,32,99,104,97,114,97,99,116,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,79,100,100,32,104,101,120,97,100,101,99,105,109,97,108,32,110,117,109,98,101,114,115,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,66,97,100,32,111,99,116,97,108,32,99,104,97,114,97,99,116,101,114,32,105,110,32,83,45,101,120,112,114,101,115,115,105,111,110,0,71,101,110,101,114,97,108,32,73,80,67,32,101,114,114,111,114,0,73,80,67,32,97,99,99,101,112,116,32,99,97,108,108,32,102,97,105,108,101,100,0,73,80,67,32,99,111,110,110,101,99,116,32,99,97,108,108,32,102,97,105,108,101,100,0,73,110,118,97,108,105,100,32,73,80,67,32,114,101,115,112,111,110,115,101,0,73,110,118,97,108,105,100,32,118,97,108,117,101,32,112,97,115,115,101,100,32,116,111,32,73,80,67,0,73,110,99,111,109,112,108,101,116,101,32,108,105,110,101,32,112,97,115,115,101,100,32,116,111,32,73,80,67,0,76,105,110,101,32,112,97,115,115,101,100,32,116,111,32,73,80,67,32,116,111,111,32,108,111,110,103,0,78,101,115,116,101,100,32,73,80,67,32,99,111,109,109,97,110,100,115,0,78,111,32,100,97,116,97,32,99,97,108,108,98,97,99,107,32,105,110,32,73,80,67,0,78,111,32,105,110,113,117,105,114,101,32,99,97,108,108,98,97,99,107,32,105,110,32,73,80,67,0,78,111,116,32,97,110,32,73,80,67,32,115,101,114,118,101,114,0,78,111,116,32,97,110,32,73,80,67,32,99,108,105,101,110,116,0,80,114,111,98,108,101,109,32,115,116,97,114,116,105,110,103,32,73,80,67,32,115,101,114,118,101,114,0,73,80,67,32,114,101,97,100,32,101,114,114,111,114,0,73,80,67,32,119,114,105,116,101,32,101,114,114,111,114,0,84,111,111,32,109,117,99,104,32,100,97,116,97,32,102,111,114,32,73,80,67,32,108,97,121,101,114,0,85,110,101,120,112,101,99,116,101,100,32,73,80,67,32,99,111,109,109,97,110,100,0,85,110,107,110,111,119,110,32,73,80,67,32,99,111,109,109,97,110,100,0,73,80,67,32,115,121,110,116,97,120,32,101,114,114,111,114,0,73,80,67,32,99,97,108,108,32,104,97,115,32,98,101,101,110,32,99,97,110,99,101,108,108,101,100,0,78,111,32,105,110,112,117,116,32,115,111,117,114,99,101,32,102,111,114,32,73,80,67,0,78,111,32,111,117,116,112,117,116,32,115,111,117,114,99,101,32,102,111,114,32,73,80,67,0,73,80,67,32,112,97,114,97,109,101,116,101,114,32,101,114,114,111,114,0,85,110,107,110,111,119,110,32,73,80,67,32,105,110,113,117,105,114,101,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,50,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,51,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,52,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,53,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,54,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,55,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,56,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,57,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,48,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,49,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,50,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,51,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,52,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,53,0,85,115,101,114,32,100,101,102,105,110,101,100,32,101,114,114,111,114,32,99,111,100,101,32,49,54,0,83,121,115,116,101,109,32,101,114,114,111,114,32,119,47,111,32,101,114,114,110,111,0,85,110,107,110,111,119,110,32,115,121,115,116,101,109,32,101,114,114,111,114,0,69,110,100,32,111,102,32,102,105,108,101,0,85,110,107,110,111,119,110,32,101,114,114,111,114,32,99,111,100,101,0] /* Success\00General er */, "i8", ALLOC_NONE, 440952);
allocate([0,0,0,0,19,0,0,0,26,0,0,0,32,0,0,0,38,0,0,0,48,0,0,0,57,0,0,0,61,0,0,0,67,0,0,0,74,0,0,0,79,0,0,0,87,0,0,0,92,0,0,0,96,0,0,0,106,0,0,0,110,0,0,0,121,0,0,0,143,0,0,0,165,0,0,0,187,0,0,0,209,0,0,0], "i8", ALLOC_NONE, 445720);
allocate([0,0,0,0,8,0,0,0,22,0,0,0,37,0,0,0,63,0,0,0,92,0,0,0,117,0,0,0,132,0,0,0,147,0,0,0,161,0,0,0,175,0,0,0,190,0,0,0,205,0,0,0,230,0,0,0,243,0,0,0,2,1,0,0,16,1,0,0,27,1,0,0,41,1,0,0,63,1,0,0,79,1,0,0,109,1,0,0,129,1,0,0,153,1,0,0,179,1,0,0,204,1,0,0,222,1,0,0,231,1,0,0,241,1,0,0,1,2,0,0,14,2,0,0,28,2,0,0,47,2,0,0,71,2,0,0,91,2,0,0,107,2,0,0,122,2,0,0,138,2,0,0,154,2,0,0,171,2,0,0,185,2,0,0,201,2,0,0,228,2,0,0,245,2,0,0,9,3,0,0,28,3,0,0,45,3,0,0,65,3,0,0,77,3,0,0,91,3,0,0,104,3,0,0,120,3,0,0,139,3,0,0,158,3,0,0,178,3,0,0,198,3,0,0,212,3,0,0,234,3,0,0,254,3,0,0,6,4,0,0,10,4,0,0,24,4,0,0,47,4,0,0,55,4,0,0,70,4,0,0,83,4,0,0,98,4,0,0,127,4,0,0,156,4,0,0,179,4,0,0,195,4,0,0,211,4,0,0,231,4,0,0,244,4,0,0,3,5,0,0,20,5,0,0,36,5,0,0,53,5,0,0,70,5,0,0,82,5,0,0,95,5,0,0,126,5,0,0,147,5,0,0,167,5,0,0,188,5,0,0,210,5,0,0,222,5,0,0,237,5,0,0,245,5,0,0,2,6,0,0,11,6,0,0,29,6,0,0,40,6,0,0,51,6,0,0,65,6,0,0,85,6,0,0,98,6,0,0,110,6,0,0,124,6,0,0,136,6,0,0,156,6,0,0,175,6,0,0,195,6,0,0,217,6,0,0,241,6,0,0,6,7,0,0,29,7,0,0,50,7,0,0,65,7,0,0,76,7,0,0,96,7,0,0,109,7,0,0,122,7,0,0,139,7,0,0,161,7,0,0,175,7,0,0,195,7,0,0,211,7,0,0,225,7,0,0,236,7,0,0,0,8,0,0,23,8,0,0,44,8,0,0,59,8,0,0,80,8,0,0,102,8,0,0,118,8,0,0,132,8,0,0,148,8,0,0,162,8,0,0,179,8,0,0,191,8,0,0,223,8,0,0,243,8,0,0,255,8,0,0,9,9,0,0,21,9,0,0,39,9,0,0,60,9,0,0,72,9,0,0,87,9,0,0,104,9,0,0,119,9,0,0,135,9,0,0,149,9,0,0,168,9,0,0,187,9,0,0,210,9,0,0,231,9,0,0,255,9,0,0,17,10,0,0,39,10,0,0,62,10,0,0,80,10,0,0,92,10,0,0,110,10,0,0,127,10,0,0,141,10,0,0,158,10,0,0,173,10,0,0,196,10,0,0,215,10,0,0,228,10,0,0,247,10,0,0,15,11,0,0,42,11,0,0,55,11,0,0,80,11,0,0,91,11,0,0,110,11,0,0,122,11,0,0,138,11,0,0,156,11,0,0,183,11,0,0,190,11,0,0,205,11,0,0,221,11,0,0,237,11,0,0,1,12,0,0,14,12,0,0,26,12,0,0,43,12,0,0,55,12,0,0,72,12,0,0,86,12,0,0,102,12,0,0,129,12,0,0,155,12,0,0,182,12,0,0,199,12,0,0,240,12,0,0,16,13,0,0,54,13,0,0,81,13,0,0,111,13,0,0,141,13,0,0,169,13,0,0,206,13,0,0,230,13,0,0,22,14,0,0,64,14,0,0,104,14,0,0,140,14,0,0,158,14,0,0,181,14,0,0,205,14,0,0,226,14,0,0,254,14,0,0,28,15,0,0,56,15,0,0,76,15,0,0,100,15,0,0,127,15,0,0,145,15,0,0,163,15,0,0,191,15,0,0,206,15,0,0,222,15,0,0,250,15,0,0,17,16,0,0,37,16,0,0,54,16,0,0,82,16,0,0,106,16,0,0,131,16,0,0,151,16,0,0,171,16,0,0,197,16,0,0,223,16,0,0,249,16,0,0,19,17,0,0,45,17,0,0,71,17,0,0,97,17,0,0,123,17,0,0,149,17,0,0,176,17,0,0,203,17,0,0,230,17,0,0,1,18,0,0,28,18,0,0,55,18,0,0,82,18,0,0,105,18,0,0,126,18,0,0,138,18,0,0], "i8", ALLOC_NONE, 445804);
allocate(24, "i8", ALLOC_NONE, 446788);
allocate([58,103,101,110,101,114,105,99,47,109,112,105,104,45,97,100,100,49,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,115,117,98,49,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,109,117,108,49,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,109,117,108,50,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,109,117,108,51,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,108,115,104,105,102,116,46,99,58,103,101,110,101,114,105,99,47,109,112,105,104,45,114,115,104,105,102,116,46,99,0] /* :generic/mpih-add1.c */, "i8", ALLOC_NONE, 446812);
allocate(4, "i8", ALLOC_NONE, 446960);
allocate(20, "i8", ALLOC_NONE, 446964);
allocate([117,50,188,188,243,33,236,236,198,67,32,32,244,201,179,179,219,3,218,218,123,139,2,2,251,43,226,226,200,250,158,158,74,236,201,201,211,9,212,212,230,107,24,24,107,159,30,30,69,14,152,152,125,56,178,178,232,210,166,166,75,183,38,38,214,87,60,60,50,138,147,147,216,238,130,130,253,152,82,82,55,212,123,123,113,55,187,187,241,151,91,91,225,131,71,71,48,60,36,36,15,226,81,81,248,198,186,186,27,243,74,74,135,72,191,191,250,112,13,13,6,179,176,176,63,222,117,117,94,253,210,210,186,32,125,125,174,49,102,102,91,163,58,58,138,28,89,89,0,0,0,0,188,147,205,205,157,224,26,26,109,44,174,174,193,171,127,127,177,199,43,43,14,185,190,190,128,160,224,224,93,16,138,138,210,82,59,59,213,186,100,100,160,136,216,216,132,165,231,231,7,232,95,95,20,17,27,27,181,194,44,44,144,180,252,252,44,39,49,49,163,101,128,128,178,42,115,115,115,129,12,12,76,95,121,121,84,65,107,107,146,2,75,75,116,105,83,83,54,143,148,148,81,31,131,131,56,54,42,42,176,156,196,196,189,200,34,34,90,248,213,213,252,195,189,189,96,120,72,72,98,206,255,255,150,7,76,76,108,119,65,65,66,230,199,199,247,36,235,235,16,20,28,28,124,99,93,93,40,34,54,54,39,192,103,103,140,175,233,233,19,249,68,68,149,234,20,20,156,187,245,245,199,24,207,207,36,45,63,63,70,227,192,192,59,219,114,114,112,108,84,84,202,76,41,41,227,53,240,240,133,254,8,8,203,23,198,198,17,79,243,243,208,228,140,140,147,89,164,164,184,150,202,202,166,59,104,104,131,77,184,184,32,40,56,56,255,46,229,229,159,86,173,173,119,132,11,11,195,29,200,200,204,255,153,153,3,237,88,88,111,154,25,25,8,10,14,14,191,126,149,149,64,80,112,112,231,48,247,247,43,207,110,110,226,110,31,31,121,61,181,181,12,15,9,9,170,52,97,97,130,22,87,87,65,11,159,159,58,128,157,157,234,100,17,17,185,205,37,37,228,221,175,175,154,8,69,69,164,141,223,223,151,92,163,163,126,213,234,234,218,88,53,53,122,208,237,237,23,252,67,67,102,203,248,248,148,177,251,251,161,211,55,55,29,64,250,250,61,104,194,194,240,204,180,180,222,93,50,50,179,113,156,156,11,231,86,86,114,218,227,227,167,96,135,135,28,27,21,21,239,58,249,249,209,191,99,99,83,169,52,52,62,133,154,154,143,66,177,177,51,209,124,124,38,155,136,136,95,166,61,61,236,215,161,161,118,223,228,228,42,148,129,129,73,1,145,145,129,251,15,15,136,170,238,238,238,97,22,22,33,115,215,215,196,245,151,151,26,168,165,165,235,63,254,254,217,181,109,109,197,174,120,120,57,109,197,197,153,229,29,29,205,164,118,118,173,220,62,62,49,103,203,203,139,71,182,182,1,91,239,239,24,30,18,18,35,197,96,96,221,176,106,106,31,246,77,77,78,233,206,206,45,124,222,222,249,157,85,85,72,90,126,126,79,178,33,33,242,122,3,3,101,38,160,160,142,25,94,94,120,102,90,90,92,75,101,101,88,78,98,98,25,69,253,253,141,244,6,6,229,134,64,64,152,190,242,242,87,172,51,51,103,144,23,23,127,142,5,5,5,94,232,232,100,125,79,79,175,106,137,137,99,149,16,16,182,47,116,116,254,117,10,10,245,146,92,92,183,116,155,155,60,51,45,45,165,214,48,48,206,73,46,46,233,137,73,73,104,114,70,70,68,85,119,119,224,216,168,168,77,4,150,150,67,189,40,40,105,41,169,169,41,121,217,217,46,145,134,134,172,135,209,209,21,74,244,244,89,21,141,141,168,130,214,214,10,188,185,185,158,13,66,66,110,193,246,246,71,184,47,47,223,6,221,221,52,57,35,35,53,98,204,204,106,196,241,241,207,18,193,193,220,235,133,133,34,158,143,143,201,161,113,113,192,240,144,144,155,83,170,170,137,241,1,1,212,225,139,139,237,140,78,78,171,111,142,142,18,162,171,171,162,62,111,111,13,84,230,230,82,242,219,219,187,123,146,146,2,182,183,183,47,202,105,105,169,217,57,57,215,12,211,211,97,35,167,167,30,173,162,162,180,153,195,195,80,68,108,108,4,5,7,7,246,127,4,4,194,70,39,39,22,167,172,172,37,118,208,208,134,19,80,80,86,247,220,220,85,26,132,132,9,81,225,225,190,37,122,122,145,239,19,19,57,57,217,169,23,23,144,103,156,156,113,179,166,166,210,232,7,7,5,4,82,82,152,253,128,128,101,163,228,228,223,118,69,69,8,154,75,75,2,146,224,224,160,128,90,90,102,120,175,175,221,228,106,106,176,221,99,99,191,209,42,42,54,56,230,230,84,13,32,32,67,198,204,204,98,53,242,242,190,152,18,18,30,24,235,235,36,247,161,161,215,236,65,65,119,108,40,40,189,67,188,188,50,117,123,123,212,55,136,136,155,38,13,13,112,250,68,68,249,19,251,251,177,148,126,126,90,72,3,3,122,242,140,140,228,208,182,182,71,139,36,36,60,48,231,231,165,132,107,107,65,84,221,221,6,223,96,96,197,35,253,253,69,25,58,58,163,91,194,194,104,61,141,141,21,89,236,236,33,243,102,102,49,174,111,111,62,162,87,87,22,130,16,16,149,99,239,239,91,1,184,184,77,131,134,134,145,46,109,109,181,217,131,131,31,81,170,170,83,155,93,93,99,124,104,104,59,166,254,254,63,235,48,48,214,165,122,122,37,190,172,172,167,22,9,9,15,12,240,240,53,227,167,167,35,97,144,144,240,192,233,233,175,140,157,157,128,58,92,92,146,245,12,12,129,115,49,49,39,44,208,208,118,37,86,86,231,11,146,146,123,187,206,206,233,78,1,1,241,137,30,30,159,107,52,52,169,83,241,241,196,106,195,195,153,180,91,91,151,241,71,71,131,225,24,24,107,230,34,34,200,189,152,152,14,69,31,31,110,226,179,179,201,244,116,116,47,182,248,248,203,102,153,153,255,204,20,20,234,149,88,88,237,3,220,220,247,86,139,139,225,212,21,21,27,28,162,162,173,30,211,211,12,215,226,226,43,251,200,200,29,195,94,94,25,142,44,44,194,181,73,73,137,233,193,193,18,207,149,149,126,191,125,125,32,186,17,17,100,234,11,11,132,119,197,197,109,57,137,137,106,175,124,124,209,51,113,113,161,201,255,255,206,98,187,187,55,113,15,15,251,129,181,181,61,121,225,225,81,9,62,62,220,173,63,63,45,36,118,118,164,205,85,85,157,249,130,130,238,216,64,64,134,229,120,120,174,197,37,37,205,185,150,150,4,77,119,119,85,68,14,14,10,8,80,80,19,134,247,247,48,231,55,55,211,161,250,250,64,29,97,97,52,170,78,78,140,237,176,176,179,6,84,84,108,112,115,115,42,178,59,59,82,210,159,159,11,65,2,2,139,123,216,216,136,160,243,243,79,17,203,203,103,49,39,39,70,194,103,103,192,39,252,252,180,144,56,56,40,32,4,4,127,246,72,72,120,96,229,229,46,255,76,76,7,150,101,101,75,92,43,43,199,177,142,142,111,171,66,66,13,158,245,245,187,156,219,219,242,82,74,74,243,27,61,61,166,95,164,164,89,147,185,185,188,10,249,249,58,239,19,19,239,145,8,8,254,133,145,145,1,73,22,22,97,238,222,222,124,45,33,33,178,79,177,177,66,143,114,114,219,59,47,47,184,71,191,191,72,135,174,174,44,109,192,192,227,70,60,60,87,214,154,154,133,62,169,169,41,105,79,79,125,100,129,129,148,42,46,46,73,206,198,198,23,203,105,105,202,47,189,189,195,252,163,163,92,151,232,232,94,5,237,237,208,122,209,209,135,172,5,5,142,127,100,100,186,213,165,165,168,26,38,38,183,75,190,190,185,14,135,135,96,167,213,213,248,90,54,54,34,40,27,27,17,20,117,117,222,63,217,217,121,41,238,238,170,136,45,45,51,60,121,121,95,76,183,183,182,2,202,202,150,184,53,53,88,218,196,196,156,176,67,67,252,23,132,132,26,85,77,77,246,31,89,89,28,138,178,178,56,125,51,51,172,87,207,207,24,199,6,6,244,141,83,83,105,116,155,155,116,183,151,151,245,196,173,173,86,159,227,227,218,114,234,234,213,126,244,244,74,21,143,143,158,34,171,171,162,18,98,98,78,88,95,95,232,7,29,29,229,153,35,35,57,52,246,246,193,110,108,108,68,80,50,50,93,222,70,70,114,104,160,160,38,101,205,205,147,188,218,218,3,219,186,186,198,248,158,158,250,200,214,214,130,168,110,110,207,43,112,112,80,64,133,133,235,220,10,10,117,254,147,147,138,50,223,223,141,164,41,41,76,202,28,28,20,16,215,215,115,33,180,180,204,240,212,212,9,211,138,138,16,93,81,81,226,15,0,0,0,0,25,25,154,111,26,26,224,157,148,148,143,54,199,199,230,66,201,201,236,74,210,210,253,94,127,127,171,193,168,168,216,224,50,188,117,188,33,236,243,236,67,32,198,32,201,179,244,179,3,218,219,218,139,2,123,2,43,226,251,226,250,158,200,158,236,201,74,201,9,212,211,212,107,24,230,24,159,30,107,30,14,152,69,152,56,178,125,178,210,166,232,166,183,38,75,38,87,60,214,60,138,147,50,147,238,130,216,130,152,82,253,82,212,123,55,123,55,187,113,187,151,91,241,91,131,71,225,71,60,36,48,36,226,81,15,81,198,186,248,186,243,74,27,74,72,191,135,191,112,13,250,13,179,176,6,176,222,117,63,117,253,210,94,210,32,125,186,125,49,102,174,102,163,58,91,58,28,89,138,89,0,0,0,0,147,205,188,205,224,26,157,26,44,174,109,174,171,127,193,127,199,43,177,43,185,190,14,190,160,224,128,224,16,138,93,138,82,59,210,59,186,100,213,100,136,216,160,216,165,231,132,231,232,95,7,95,17,27,20,27,194,44,181,44,180,252,144,252,39,49,44,49,101,128,163,128,42,115,178,115,129,12,115,12,95,121,76,121,65,107,84,107,2,75,146,75,105,83,116,83,143,148,54,148,31,131,81,131,54,42,56,42,156,196,176,196,200,34,189,34,248,213,90,213,195,189,252,189,120,72,96,72,206,255,98,255,7,76,150,76,119,65,108,65,230,199,66,199,36,235,247,235,20,28,16,28,99,93,124,93,34,54,40,54,192,103,39,103,175,233,140,233,249,68,19,68,234,20,149,20,187,245,156,245,24,207,199,207,45,63,36,63,227,192,70,192,219,114,59,114,108,84,112,84,76,41,202,41,53,240,227,240,254,8,133,8,23,198,203,198,79,243,17,243,228,140,208,140,89,164,147,164,150,202,184,202,59,104,166,104,77,184,131,184,40,56,32,56,46,229,255,229,86,173,159,173,132,11,119,11,29,200,195,200,255,153,204,153,237,88,3,88,154,25,111,25,10,14,8,14,126,149,191,149,80,112,64,112,48,247,231,247,207,110,43,110,110,31,226,31,61,181,121,181,15,9,12,9,52,97,170,97,22,87,130,87,11,159,65,159,128,157,58,157,100,17,234,17,205,37,185,37,221,175,228,175,8,69,154,69,141,223,164,223,92,163,151,163,213,234,126,234,88,53,218,53,208,237,122,237,252,67,23,67,203,248,102,248,177,251,148,251,211,55,161,55,64,250,29,250,104,194,61,194,204,180,240,180,93,50,222,50,113,156,179,156,231,86,11,86,218,227,114,227,96,135,167,135,27,21,28,21,58,249,239,249,191,99,209,99,169,52,83,52,133,154,62,154,66,177,143,177,209,124,51,124,155,136,38,136,166,61,95,61,215,161,236,161,223,228,118,228,148,129,42,129,1,145,73,145,251,15,129,15,170,238,136,238,97,22,238,22,115,215,33,215,245,151,196,151,168,165,26,165,63,254,235,254,181,109,217,109,174,120,197,120,109,197,57,197,229,29,153,29,164,118,205,118,220,62,173,62,103,203,49,203,71,182,139,182,91,239,1,239,30,18,24,18,197,96,35,96,176,106,221,106,246,77,31,77,233,206,78,206,124,222,45,222,157,85,249,85,90,126,72,126,178,33,79,33,122,3,242,3,38,160,101,160,25,94,142,94,102,90,120,90,75,101,92,101,78,98,88,98,69,253,25,253,244,6,141,6,134,64,229,64,190,242,152,242,172,51,87,51,144,23,103,23,142,5,127,5,94,232,5,232,125,79,100,79,106,137,175,137,149,16,99,16,47,116,182,116,117,10,254,10,146,92,245,92,116,155,183,155,51,45,60,45,214,48,165,48,73,46,206,46,137,73,233,73,114,70,104,70,85,119,68,119,216,168,224,168,4,150,77,150,189,40,67,40,41,169,105,169,121,217,41,217,145,134,46,134,135,209,172,209,74,244,21,244,21,141,89,141,130,214,168,214,188,185,10,185,13,66,158,66,193,246,110,246,184,47,71,47,6,221,223,221,57,35,52,35,98,204,53,204,196,241,106,241,18,193,207,193,235,133,220,133,158,143,34,143,161,113,201,113,240,144,192,144,83,170,155,170,241,1,137,1,225,139,212,139,140,78,237,78,111,142,171,142,162,171,18,171,62,111,162,111,84,230,13,230,242,219,82,219,123,146,187,146,182,183,2,183,202,105,47,105,217,57,169,57,12,211,215,211,35,167,97,167,173,162,30,162,153,195,180,195,68,108,80,108,5,7,4,7,127,4,246,4,70,39,194,39,167,172,22,172,118,208,37,208,19,80,134,80,247,220,86,220,26,132,85,132,81,225,9,225,37,122,190,122,239,19,145,19,217,169,57,217,144,103,23,144,113,179,156,113,210,232,166,210,5,4,7,5,152,253,82,152,101,163,128,101,223,118,228,223,8,154,69,8,2,146,75,2,160,128,224,160,102,120,90,102,221,228,175,221,176,221,106,176,191,209,99,191,54,56,42,54,84,13,230,84,67,198,32,67,98,53,204,98,190,152,242,190,30,24,18,30,36,247,235,36,215,236,161,215,119,108,65,119,189,67,40,189,50,117,188,50,212,55,123,212,155,38,136,155,112,250,13,112,249,19,68,249,177,148,251,177,90,72,126,90,122,242,3,122,228,208,140,228,71,139,182,71,60,48,36,60,165,132,231,165,65,84,107,65,6,223,221,6,197,35,96,197,69,25,253,69,163,91,58,163,104,61,194,104,21,89,141,21,33,243,236,33,49,174,102,49,62,162,111,62,22,130,87,22,149,99,16,149,91,1,239,91,77,131,184,77,145,46,134,145,181,217,109,181,31,81,131,31,83,155,170,83,99,124,93,99,59,166,104,59,63,235,254,63,214,165,48,214,37,190,122,37,167,22,172,167,15,12,9,15,53,227,240,53,35,97,167,35,240,192,144,240,175,140,233,175,128,58,157,128,146,245,92,146,129,115,12,129,39,44,49,39,118,37,208,118,231,11,86,231,123,187,146,123,233,78,206,233,241,137,1,241,159,107,30,159,169,83,52,169,196,106,241,196,153,180,195,153,151,241,91,151,131,225,71,131,107,230,24,107,200,189,34,200,14,69,152,14,110,226,31,110,201,244,179,201,47,182,116,47,203,102,248,203,255,204,153,255,234,149,20,234,237,3,88,237,247,86,220,247,225,212,139,225,27,28,21,27,173,30,162,173,12,215,211,12,43,251,226,43,29,195,200,29,25,142,94,25,194,181,44,194,137,233,73,137,18,207,193,18,126,191,149,126,32,186,125,32,100,234,17,100,132,119,11,132,109,57,197,109,106,175,137,106,209,51,124,209,161,201,113,161,206,98,255,206,55,113,187,55,251,129,15,251,61,121,181,61,81,9,225,81,220,173,62,220,45,36,63,45,164,205,118,164,157,249,85,157,238,216,130,238,134,229,64,134,174,197,120,174,205,185,37,205,4,77,150,4,85,68,119,85,10,8,14,10,19,134,80,19,48,231,247,48,211,161,55,211,64,29,250,64,52,170,97,52,140,237,78,140,179,6,176,179,108,112,84,108,42,178,115,42,82,210,59,82,11,65,159,11,139,123,2,139,136,160,216,136,79,17,243,79,103,49,203,103,70,194,39,70,192,39,103,192,180,144,252,180,40,32,56,40,127,246,4,127,120,96,72,120,46,255,229,46,7,150,76,7,75,92,101,75,199,177,43,199,111,171,142,111,13,158,66,13,187,156,245,187,242,82,219,242,243,27,74,243,166,95,61,166,89,147,164,89,188,10,185,188,58,239,249,58,239,145,19,239,254,133,8,254,1,73,145,1,97,238,22,97,124,45,222,124,178,79,33,178,66,143,177,66,219,59,114,219,184,71,47,184,72,135,191,72,44,109,174,44,227,70,192,227,87,214,60,87,133,62,154,133,41,105,169,41,125,100,79,125,148,42,129,148,73,206,46,73,23,203,198,23,202,47,105,202,195,252,189,195,92,151,163,92,94,5,232,94,208,122,237,208,135,172,209,135,142,127,5,142,186,213,100,186,168,26,165,168,183,75,38,183,185,14,190,185,96,167,135,96,248,90,213,248,34,40,54,34,17,20,27,17,222,63,117,222,121,41,217,121,170,136,238,170,51,60,45,51,95,76,121,95,182,2,183,182,150,184,202,150,88,218,53,88,156,176,196,156,252,23,67,252,26,85,132,26,246,31,77,246,28,138,89,28,56,125,178,56,172,87,51,172,24,199,207,24,244,141,6,244,105,116,83,105,116,183,155,116,245,196,151,245,86,159,173,86,218,114,227,218,213,126,234,213,74,21,244,74,158,34,143,158,162,18,171,162,78,88,98,78,232,7,95,232,229,153,29,229,57,52,35,57,193,110,246,193,68,80,108,68,93,222,50,93,114,104,70,114,38,101,160,38,147,188,205,147,3,219,218,3,198,248,186,198,250,200,158,250,130,168,214,130,207,43,110,207,80,64,112,80,235,220,133,235,117,254,10,117,138,50,147,138,141,164,223,141,76,202,41,76,20,16,28,20,115,33,215,115,204,240,180,204,9,211,212,9,16,93,138,16,226,15,81,226,0,0,0,0,154,111,25,154,224,157,26,224,143,54,148,143,230,66,199,230,236,74,201,236,253,94,210,253,171,193,127,171,216,224,168,216], "i8", ALLOC_NONE, 446984);
allocate(4, "i8", ALLOC_NONE, 451080);
allocate(4, "i8", ALLOC_NONE, 451084);
allocate(4, "i8", ALLOC_NONE, 451088);
allocate([0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1], "i8", ALLOC_NONE, 451092);
allocate([55,206,57,58,207,245,250,211,55,119,194,171,27,45,197,90,158,103,176,92,66,55,163,79,64,39,130,211,190,155,188,153,157,142,17,213,21,115,15,191,126,28,45,214,123,196,0,199,107,27,140,183,69,144,161,33,190,177,110,178,180,110,54,106,47,171,72,87,121,110,148,188,210,118,163,198,200,194,73,101,238,248,15,83,125,222,141,70,29,10,115,213,198,77,208,76,219,187,57,41,80,70,186,169,232,38,149,172,4,227,94,190,240,213,250,161,154,81,45,106,226,140,239,99,34,238,134,154,184,194,137,192,246,46,36,67,170,3,30,165,164,208,242,156,186,97,192,131,77,106,233,155,80,21,229,143,214,91,100,186,249,162,38,40,225,58,58,167,134,149,169,75,233,98,85,239,211,239,47,199,218,247,82,247,105,111,4,63,89,10,250,119,21,169,228,128,1,134,176,135,173,230,9,155,147,229,62,59,90,253,144,233,151,215,52,158,217,183,240,44,81,139,43,2,58,172,213,150,125,166,125,1,214,62,207,209,40,45,125,124,207,37,159,31,155,184,242,173,114,180,214,90,76,245,136,90,113,172,41,224,230,165,25,224,253,172,176,71,155,250,147,237,141,196,211,232,204,87,59,40,41,102,213,248,40,46,19,121,145,1,95,120,85,96,117,237,68,14,150,247,140,94,211,227,212,109,5,21,186,109,244,136,37,97,161,3,189,240,100,5,21,158,235,195,162,87,144,60,236,26,39,151,42,7,58,169,155,109,63,27,245,33,99,30,251,102,156,245,25,243,220,38,40,217,51,117,245,253,85,177,130,52,86,3,187,60,186,138,17,119,81,40,248,217,10,194,103,81,204,171,95,146,173,204,81,23,232,77,142,220,48,56,98,88,157,55,145,249,32,147,194,144,122,234,206,123,62,251,100,206,33,81,50,190,79,119,126,227,182,168,70,61,41,195,105,83,222,72,128,230,19,100,16,8,174,162,36,178,109,221,253,45,133,105,102,33,7,9,10,70,154,179,221,192,69,100,207,222,108,88,174,200,32,28,221,247,190,91,64,141,88,27,127,1,210,204,187,227,180,107,126,106,162,221,69,255,89,58,68,10,53,62,213,205,180,188,168,206,234,114,187,132,100,250,174,18,102,141,71,111,60,191,99,228,155,210,158,93,47,84,27,119,194,174,112,99,78,246,141,13,14,116,87,19,91,231,113,22,114,248,93,125,83,175,8,203,64,64,204,226,180,78,106,70,210,52,132,175,21,1,40,4,176,225,29,58,152,149,180,159,184,6,72,160,110,206,130,59,63,111,130,171,32,53,75,29,26,1,248,39,114,39,177,96,21,97,220,63,147,231,43,121,58,187,189,37,69,52,225,57,136,160,75,121,206,81,183,201,50,47,201,186,31,160,126,200,28,224,246,209,199,188,195,17,1,207,199,170,232,161,73,135,144,26,154,189,79,212,203,222,218,208,56,218,10,213,42,195,57,3,103,54,145,198,124,49,249,141,79,43,177,224,183,89,158,247,58,187,245,67,255,25,213,242,156,69,217,39,44,34,151,191,42,252,230,21,113,252,145,15,37,21,148,155,97,147,229,250,235,156,182,206,89,100,168,194,209,168,186,18,94,7,193,182,12,106,5,227,101,80,210,16,66,164,3,203,14,110,236,224,59,219,152,22,190,160,152,76,100,233,120,50,50,149,31,159,223,146,211,224,43,52,160,211,30,242,113,137,65,116,10,27,140,52,163,75,32,113,190,197,216,50,118,195,141,159,53,223,46,47,153,155,71,111,11,230,29,241,227,15,84,218,76,229,145,216,218,30,207,121,98,206,111,126,62,205,102,177,24,22,5,29,44,253,197,210,143,132,153,34,251,246,87,243,35,245,35,118,50,166,49,53,168,147,2,205,204,86,98,129,240,172,181,235,117,90,151,54,22,110,204,115,210,136,146,98,150,222,208,73,185,129,27,144,80,76,20,86,198,113,189,199,198,230,10,20,122,50,6,208,225,69,154,123,242,195,253,83,170,201,0,15,168,98,226,191,37,187,246,210,189,53,5,105,18,113,34,2,4,178,124,207,203,182,43,156,118,205,192,62,17,83,211,227,64,22,96,189,171,56,240,173,71,37,156,32,56,186,118,206,70,247,197,161,175,119,96,96,117,32,78,254,203,133,216,141,232,138,176,249,170,122,126,170,249,76,92,194,72,25,140,138,251,2,228,106,195,1,249,225,235,214,105,248,212,144,160,222,92,166,45,37,9,63,159,230,8,194,50,97,78,183,91,226,119,206,227,223,143,87,230,114,195,58], "i8", ALLOC_NONE, 451156);
allocate([104,90,61,233,247,64,129,148,28,38,76,246,52,41,105,148,247,32,21,65,247,212,2,118,46,107,244,188,104,0,162,212,113,36,8,212,106,244,32,51,183,212,183,67,175,97,0,80,46,246,57,30,70,69,36,151,116,79,33,20,64,136,139,191,29,252,149,77,175,145,181,150,211,221,244,112,69,47,160,102,236,9,188,191,133,151,189,3,208,109,172,127,4,133,203,49,179,39,235,150,65,57,253,85,230,71,37,218,154,10,202,171,37,120,80,40,244,41,4,83,218,134,44,10,251,109,182,233,98,20,220,104,0,105,72,215,164,192,14,104,238,141,161,39,162,254,63,79,140,173,135,232,6,224,140,181,182,214,244,122,124,30,206,170,236,95,55,211,153,163,120,206,66,42,107,64,53,158,254,32,185,133,243,217,171,215,57,238,139,78,18,59,247,250,201,29,86,24,109,75,49,102,163,38,178,151,227,234,116,250,110,58,50,67,91,221,247,231,65,104,251,32,120,202,78,245,10,251,151,179,254,216,172,86,64,69,39,149,72,186,58,58,83,85,135,141,131,32,183,169,107,254,75,149,150,208,188,103,168,85,88,154,21,161,99,41,169,204,51,219,225,153,86,74,42,166,249,37,49,63,28,126,244,94,124,49,41,144,2,232,248,253,112,47,39,4,92,21,187,128,227,44,40,5,72,21,193,149,34,109,198,228,63,19,193,72,220,134,15,199,238,201,249,7,15,31,4,65,164,121,71,64,23,110,136,93,235,81,95,50,209,192,155,213,143,193,188,242,100,53,17,65,52,120,123,37,96,156,42,96,163,232,248,223,27,108,99,31,194,180,18,14,158,50,225,2,209,79,102,175,21,129,209,202,224,149,35,107,225,146,62,51,98,11,36,59,34,185,190,238,14,162,178,133,153,13,186,230,140,12,114,222,40,247,162,45,69,120,18,208,253,148,183,149,98,8,125,100,240,245,204,231,111,163,73,84,250,72,125,135,39,253,157,195,30,141,62,243,65,99,71,10,116,255,46,153,171,110,111,58,55,253,248,244,96,220,18,168,248,221,235,161,76,225,27,153,13,107,110,219,16,85,123,198,55,44,103,109,59,212,101,39,4,232,208,220,199,13,41,241,163,255,0,204,146,15,57,181,11,237,15,105,251,159,123,102,156,125,219,206,11,207,145,160,163,94,21,217,136,47,19,187,36,173,91,81,191,121,148,123,235,214,59,118,179,46,57,55,121,89,17,204,151,226,38,128,45,49,46,244,167,173,66,104,59,43,106,198,204,76,117,18,28,241,46,120,55,66,18,106,231,81,146,183,230,187,161,6,80,99,251,75,24,16,107,26,250,237,202,17,216,189,37,61,201,195,225,226,89,22,66,68,134,19,18,10,110,236,12,217,42,234,171,213,78,103,175,100,95,168,134,218,136,233,191,190,254,195,228,100,87,128,188,157,134,192,247,240,248,123,120,96,77,96,3,96,70,131,253,209,176,31,56,246,4,174,69,119,204,252,54,215,51,107,66,131,113,171,30,240,135,65,128,176,95,94,0,60,190,87,160,119,36,174,232,189,153,66,70,85,97,46,88,191,143,244,88,78,162,253,221,242,56,239,116,244,194,189,137,135,195,249,102,83,116,142,179,200,85,242,117,180,185,217,252,70,97,38,235,122,132,223,29,139,121,14,106,132,226,149,95,145,142,89,110,70,112,87,180,32,145,85,213,140,76,222,2,201,225,172,11,185,208,5,130,187,72,98,168,17,158,169,116,117,182,25,127,183,9,220,169,224,161,9,45,102,51,70,50,196,2,31,90,232,140,190,240,9,37,160,153,74,16,254,110,29,29,61,185,26,223,164,165,11,15,242,134,161,105,241,104,40,131,218,183,220,254,6,57,87,155,206,226,161,82,127,205,79,1,94,17,80,250,131,6,167,196,181,2,160,39,208,230,13,39,140,248,154,65,134,63,119,6,76,96,195,181,6,168,97,40,122,23,240,224,134,245,192,170,88,96,0,98,125,220,48,215,158,230,17,99,234,56,35,148,221,194,83,52,22,194,194,86,238,203,187,222,182,188,144,161,125,252,235,118,29,89,206,9,228,5,111,136,1,124,75,61,10,114,57,36,124,146,124,95,114,227,134,185,157,77,114,180,91,193,26,252,184,158,211,120,85,84,237,181,165,252,8,211,124,61,216,196,15,173,77,94,239,80,30,248,230,97,177,217,20,133,162,60,19,81,108,231,199,213,111,196,78,225,86,206,191,42,54,55,200,198,221,52,50,154,215,18,130,99,146,142,250,14,103,224,0,96,64], "i8", ALLOC_NONE, 452180);
allocate([233,112,122,75,68,41,179,181,46,9,117,219,35,38,25,196,176,166,110,173,125,223,167,73,184,96,238,156,102,178,237,143,113,140,170,236,255,23,154,105,108,82,100,86,225,158,177,194,165,2,54,25,41,76,9,117,64,19,89,160,62,58,24,228,154,152,84,63,101,157,66,91,214,228,143,107,214,63,247,153,7,156,210,161,245,48,232,239,230,56,45,77,193,93,37,240,134,32,221,76,38,235,112,132,198,233,130,99,94,204,30,2,63,107,104,9,201,239,186,62,20,24,151,60,161,112,106,107,132,53,127,104,134,226,160,82,5,83,156,183,55,7,80,170,28,132,7,62,92,174,222,127,236,68,125,142,184,242,22,87,55,218,58,176,13,12,80,240,4,31,28,240,255,179,0,2,26,245,12,174,178,116,181,60,88,122,131,37,189,33,9,220,249,19,145,209,246,47,169,124,115,71,50,148,1,71,245,34,129,229,229,58,220,218,194,55,52,118,181,200,167,221,243,154,70,97,68,169,14,3,208,15,62,199,200,236,65,30,117,164,153,205,56,226,47,14,234,59,161,187,128,50,49,179,62,24,56,139,84,78,8,185,109,79,3,13,66,111,191,4,10,246,144,18,184,44,121,124,151,36,114,176,121,86,175,137,175,188,31,119,154,222,16,8,147,217,18,174,139,179,46,63,207,220,31,114,18,85,36,113,107,46,230,221,26,80,135,205,132,159,24,71,88,122,23,218,8,116,188,154,159,188,140,125,75,233,58,236,122,236,250,29,133,219,102,67,9,99,210,195,100,196,71,24,28,239,8,217,21,50,55,59,67,221,22,186,194,36,67,77,161,18,81,196,101,42,2,0,148,80,221,228,58,19,158,248,223,113,85,78,49,16,214,119,172,129,155,25,17,95,241,86,53,4,107,199,163,215,59,24,17,60,9,165,36,89,237,230,143,242,250,251,241,151,44,191,186,158,110,60,21,30,112,69,227,134,177,111,233,234,10,94,14,134,179,42,62,90,28,231,31,119,250,6,61,78,185,220,101,41,15,29,231,153,214,137,62,128,37,200,102,82,120,201,76,46,106,179,16,156,186,14,21,198,120,234,226,148,83,60,252,165,244,45,10,30,167,78,247,242,61,43,29,54,15,38,57,25,96,121,194,25,8,167,35,82,182,18,19,247,110,254,173,235,102,31,195,234,149,69,188,227,131,200,123,166,209,55,127,177,40,255,140,1,239,221,50,195,165,90,108,190,133,33,88,101,2,152,171,104,15,165,206,238,59,149,47,219,173,125,239,42,132,47,110,91,40,182,33,21,112,97,7,41,117,71,221,236,16,21,159,97,48,168,204,19,150,189,97,235,30,254,52,3,207,99,3,170,144,92,115,181,57,162,112,76,11,158,158,213,20,222,170,203,188,134,204,238,167,44,98,96,171,92,171,156,110,132,243,178,175,30,139,100,202,240,189,25,185,105,35,160,80,187,90,101,50,90,104,64,179,180,42,60,213,233,158,49,247,184,33,192,25,11,84,155,153,160,95,135,126,153,247,149,168,125,61,98,154,136,55,248,119,45,227,151,95,147,237,17,129,18,104,22,41,136,53,14,214,31,230,199,161,223,222,150,153,186,88,120,165,132,245,87,99,114,34,27,255,195,131,155,150,70,194,26,235,10,179,205,84,48,46,83,228,72,217,143,40,49,188,109,239,242,235,88,234,255,198,52,97,237,40,254,115,60,124,238,217,20,74,93,227,183,100,232,20,93,16,66,224,19,62,32,182,226,238,69,234,171,170,163,21,79,108,219,208,79,203,250,66,244,66,199,181,187,106,239,29,59,79,101,5,33,205,65,158,121,30,216,199,77,133,134,106,71,75,228,80,98,129,61,242,161,98,207,70,38,141,91,160,131,136,252,163,182,199,193,195,36,21,127,146,116,203,105,11,138,132,71,133,178,146,86,0,191,91,9,157,72,25,173,116,177,98,20,0,14,130,35,42,141,66,88,234,245,85,12,62,244,173,29,97,112,63,35,146,240,114,51,65,126,147,141,241,236,95,214,219,59,34,108,89,55,222,124,96,116,238,203,167,242,133,64,110,50,119,206,132,128,7,166,158,80,248,25,85,216,239,232,53,151,217,97,170,167,105,169,194,6,12,197,252,171,4,90,220,202,11,128,46,122,68,158,132,52,69,195,5,103,213,253,201,158,30,14,211,219,115,219,205,136,85,16,121,218,95,103,64,67,103,227,101,52,196,197,216,56,62,113,158,248,40,61,32,255,109,241,231,33,62,21,74,61,176,143,43,159,227,230,247,173,131,219], "i8", ALLOC_NONE, 453204);
allocate([166,11,49,209,172,181,223,152,219,114,253,47,183,223,26,208,237,175,225,184,150,126,38,106,69,144,124,186,153,127,44,241,71,153,161,36,247,108,145,179,226,242,1,8,22,252,142,133,216,32,105,99,105,78,87,113,163,254,88,164,126,61,147,244,143,116,149,13,88,182,142,114,88,205,139,113,238,74,21,130,29,164,84,123,181,89,90,194,57,213,48,156,19,96,242,42,35,176,209,197,240,133,96,40,24,121,65,202,239,56,219,184,176,220,121,142,14,24,58,96,139,14,158,108,62,138,30,176,193,119,21,215,39,75,49,189,218,47,175,120,96,92,96,85,243,37,85,230,148,171,85,170,98,152,72,87,64,20,232,99,106,57,202,85,182,16,171,42,52,92,204,180,206,232,65,17,175,134,84,161,147,233,114,124,17,20,238,179,42,188,111,99,93,197,169,43,246,49,24,116,22,62,92,206,30,147,135,155,51,186,214,175,92,207,36,108,129,83,50,122,119,134,149,40,152,72,143,59,175,185,75,107,27,232,191,196,147,33,40,102,204,9,216,97,145,169,33,251,96,172,124,72,50,128,236,93,93,93,132,239,177,117,133,233,2,35,38,220,136,27,101,235,129,62,137,35,197,172,150,211,243,111,109,15,57,66,244,131,130,68,11,46,4,32,132,164,74,240,200,105,94,155,31,158,66,104,198,33,154,108,233,246,97,156,12,103,240,136,211,171,210,160,81,106,104,47,84,216,40,167,15,150,163,51,81,171,108,11,239,110,228,59,122,19,80,240,59,186,152,42,251,126,29,101,241,161,118,1,175,57,62,89,202,102,136,14,67,130,25,134,238,140,180,159,111,69,195,165,132,125,190,94,139,59,216,117,111,224,115,32,193,133,159,68,26,64,166,106,193,86,98,170,211,78,6,119,63,54,114,223,254,27,61,2,155,66,36,215,208,55,72,18,10,208,211,234,15,219,155,192,241,73,201,114,83,7,123,27,153,128,216,121,212,37,247,222,232,246,26,80,254,227,59,76,121,182,189,224,108,151,186,6,192,4,182,79,169,193,196,96,159,64,194,158,92,94,99,36,106,25,175,111,251,104,181,83,108,62,235,178,57,19,111,236,82,59,31,81,252,109,44,149,48,155,68,69,129,204,9,189,94,175,4,208,227,190,253,74,51,222,7,40,15,102,179,75,46,25,87,168,203,192,15,116,200,69,57,95,11,210,219,251,211,185,189,192,121,85,10,50,96,26,198,0,161,214,121,114,44,64,254,37,159,103,204,163,31,251,248,233,165,142,248,34,50,219,223,22,117,60,21,107,97,253,200,30,80,47,171,82,5,173,250,181,61,50,96,135,35,253,72,123,49,83,130,223,0,62,187,87,92,158,160,140,111,202,46,86,135,26,219,105,23,223,246,168,66,213,195,255,126,40,198,50,103,172,115,85,79,140,176,39,91,105,200,88,202,187,93,163,255,225,160,17,240,184,152,61,250,16,184,131,33,253,108,181,252,74,91,211,209,45,121,228,83,154,101,69,248,182,188,73,142,210,144,151,251,75,218,242,221,225,51,126,203,164,65,19,251,98,232,198,228,206,218,202,32,239,1,76,119,54,254,158,126,208,180,31,241,43,77,218,219,149,152,145,144,174,113,142,173,234,160,213,147,107,208,209,142,208,224,37,199,175,47,91,60,142,183,148,117,142,251,226,246,143,100,43,18,242,18,184,136,136,28,240,13,144,160,94,173,79,28,195,143,104,145,241,207,209,173,193,168,179,24,34,47,47,119,23,14,190,254,45,117,234,161,31,2,139,15,204,160,229,232,116,111,181,214,243,172,24,153,226,137,206,224,79,168,180,183,224,19,253,129,59,196,124,217,168,173,210,102,162,95,22,5,119,149,128,20,115,204,147,119,20,26,33,101,32,173,230,134,250,181,119,245,66,84,199,207,53,157,251,12,175,205,235,160,137,62,123,211,27,65,214,73,126,30,174,45,14,37,0,94,179,113,32,187,0,104,34,175,224,184,87,155,54,100,36,30,185,9,240,29,145,99,85,170,166,223,89,137,67,193,120,127,83,90,217,162,91,125,32,197,185,229,2,118,3,38,131,169,207,149,98,104,25,200,17,65,74,115,78,202,45,71,179,74,169,20,123,82,0,81,27,21,41,83,154,63,87,15,214,228,198,155,188,118,164,96,43,0,116,230,129,181,111,186,8,31,233,27,87,107,236,150,242,21,217,13,42,33,101,99,182,182,249,185,231,46,5,52,255,100,86,133,197,93,45,176,83,161,143,159,169,153,71,186,8,106,7,133,110], "i8", ALLOC_NONE, 454228);
allocate(4, "i8", ALLOC_NONE, 455252);
allocate(4, "i8", ALLOC_NONE, 455256);
allocate(4, "i8", ALLOC_NONE, 455260);
allocate(4, "i8", ALLOC_NONE, 455264);
allocate(4, "i8", ALLOC_NONE, 455268);
allocate(4, "i8", ALLOC_NONE, 455272);
allocate([1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 455276);
allocate(4, "i8", ALLOC_NONE, 455324);
allocate([0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,45,1,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 455328);
allocate(4, "i8", ALLOC_NONE, 455432);
allocate(4, "i8", ALLOC_NONE, 455436);
allocate(4, "i8", ALLOC_NONE, 455440);
allocate(4, "i8", ALLOC_NONE, 455444);
allocate(4, "i8", ALLOC_NONE, 455448);
allocate(4, "i8", ALLOC_NONE, 455452);
allocate(4, "i8", ALLOC_NONE, 455456);
allocate(4, "i8", ALLOC_NONE, 455460);
allocate([1,2,4,8,16,32,64,128,77,154,121,242,169,31,62,124,248,189,55,110,220,245,167,3,6,12,24,48,96,192,205,215,227,139,91,182,33,66,132,69,138,89,178,41,82,164,5,10,20,40,80,160,13,26,52,104,208,237,151,99,198,193,207,211,235,155,123,246,161,15,30,60,120,240,173,23,46,92,184,61,122,244,165,7,14,28,56,112,224,141,87,174,17,34,68,136,93,186,57,114,228,133,71,142,81,162,9,18,36,72,144,109,218,249,191,51,102,204,213,231,131,75,150,97,194,201,223,243,171,27,54,108,216,253,183,35,70,140,85,170,25,50,100,200,221,247,163,11,22,44,88,176,45,90,180,37,74,148,101,202,217,255,179,43,86,172,21,42,84,168,29,58,116,232,157,119,238,145,111,222,241,175,19,38,76,152,125,250,185,63,126,252,181,39,78,156,117,234,153,127,254,177,47,94,188,53,106,212,229,135,67,134,65,130,73,146,105,210,233,159,115,230,129,79,158,113,226,137,95,190,49,98,196,197,199,195,203,219,251,187,59,118,236,149,103,206,209,239,147,107,214,225,143,83,166,1,2,4,8,16,32,64,128,77,154,121,242,169,31,62,124,248,189,55,110,220,245,167,3,6,12,24,48,96,192,205,215,227,139,91,182,33,66,132,69,138,89,178,41,82,164,5,10,20,40,80,160,13,26,52,104,208,237,151,99,198,193,207,211,235,155,123,246,161,15,30,60,120,240,173,23,46,92,184,61,122,244,165,7,14,28,56,112,224,141,87,174,17,34,68,136,93,186,57,114,228,133,71,142,81,162,9,18,36,72,144,109,218,249,191,51,102,204,213,231,131,75,150,97,194,201,223,243,171,27,54,108,216,253,183,35,70,140,85,170,25,50,100,200,221,247,163,11,22,44,88,176,45,90,180,37,74,148,101,202,217,255,179,43,86,172,21,42,84,168,29,58,116,232,157,119,238,145,111,222,241,175,19,38,76,152,125,250,185,63,126,252,181,39,78,156,117,234,153,127,254,177,47,94,188,53,106,212,229,135,67,134,65,130,73,146,105,210,233,159,115,230,129,79,158,113,226,137,95,190,49,98,196,197,199,195,203] /* \01\02\04\08\10 @\80 */, "i8", ALLOC_NONE, 455464);
allocate([7,0,0,0,13,0,0,0,112,0,0,0,125,0,0,0,0,0,0,0,106,0,0,0,11,0,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,140,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,111,0,0,0,104,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,121,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,132,0,0,0,17,0,0,0,14,0,0,0,27,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,117,0,0,0,118,0,0,0,36,0,0,0,0,0,0,0,138,0,0,0,119,0,0,0,4,0,0,0,22,0,0,0,5,0,0,0,127,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,24,0,0,0,31,0,0,0,122,0,0,0,74,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,126,0,0,0,114,0,0,0,23,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,61,0,0,0,19,0,0,0,2,0,0,0,8,0,0,0,46,0,0,0,67,0,0,0,0,0,0,0,12,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,28,0,0,0,63,0,0,0,60,0,0,0,88,0,0,0,0,0,0,0,128,0,0,0,20,0,0,0,90,0,0,0,0,0,0,0,108,0,0,0,134,0,0,0,25,0,0,0,0,0,0,0,6,0,0,0,95,0,0,0,139,0,0,0,1,0,0,0,96,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,123,0,0,0,107,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,3,0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,62,0,0,0,116,0,0,0,129,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,18,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 455956);
allocate([107,128,0,0,81,128,0,0,127,128,0,0,47,128,0,0,49,128,0,0,104,128,0,0,0,128,0,0,82,128,0,0,11,128,0,0,21,128,0,0,6,128,0,0,138,128,0,0,86,128,0,0,1,128,0,0,36,128,0,0,95,128,0,0,19,128,0,0,35,128,0,0,139,128,0,0,80,128,0,0,97,128,0,0,51,128,0,0,48,128,0,0,75,128,0,0,65,128,0,0,102,128,0,0,134,128,0,0,37,128,0,0,91,128,0,0,126,128,0,0,122,128,0,0,66,128,0,0,109,128,0,0,32,128,0,0,117,128,0,0,28,128,0,0,29,128,0,0,69,128,0,0,83,128,0,0,94,128,0,0,98,128,0,0,63,128,0,0,87,128,0,0,43,128,0,0,22,128,0,0,54,128,0,0,55,128,0,0,56,128,0,0,62,128,0,0,136,128,0,0,78,128,0,0,53,128,0,0,10,128,0,0,14,128,0,0,140,128,0,0,76,128,0,0,16,128,0,0,17,128,0,0,18,128,0,0,93,128,0,0,79,128,0,0,131,128,0,0,92,128,0,0,88,128,0,0,89,128,0,0,119,128,0,0,84,128,0,0,4,128,0,0,128,128,0,0,23,128,0,0,114,128,0,0,68,128,0,0,33,128,0,0,13,128,0,0,106,128,0,0,103,128,0,0,12,128,0,0,118,128,0,0,57,128,0,0,58,128,0,0,61,128,0,0,60,128,0,0,59,128,0,0,45,128,0,0,121,128,0,0,130,128,0,0,137,128,0,0,100,128,0,0,30,128,0,0,67,128,0,0,116,128,0,0,90,128,0,0,115,128,0,0,125,128,0,0,101,128,0,0,105,128,0,0,108,128,0,0,5,128,0,0,2,128,0,0,3,128,0,0,72,128,0,0,74,128,0,0,73,128,0,0,24,128,0,0,26,128,0,0,77,128,0,0,50,128,0,0,96,128,0,0,124,128,0,0,133,128,0,0,132,128,0,0,25,128,0,0,41,128,0,0,42,128,0,0,7,128,0,0,46,128,0,0,129,128,0,0,135,128,0,0,99,128,0,0,70,128,0,0,52,128,0,0,120,128,0,0,34,128,0,0,85,128,0,0,64,128,0,0,20,128,0,0], "i8", ALLOC_NONE, 456520);
allocate(4, "i8", ALLOC_NONE, 457024);
allocate(4, "i8", ALLOC_NONE, 457028);
allocate(4, "i8", ALLOC_NONE, 457032);
allocate(4, "i8", ALLOC_NONE, 457036);
allocate([1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1] /* \01\01\02\02\02\02\0 */, "i8", ALLOC_NONE, 457040);
allocate(16, "i8", ALLOC_NONE, 457056);
allocate(12, "i8", ALLOC_NONE, 457072);
allocate(12, "i8", ALLOC_NONE, 457084);
allocate(24, "i8", ALLOC_NONE, 457096);
allocate(4, "i8", ALLOC_NONE, 457120);
allocate(8, "i8", ALLOC_NONE, 457124);
allocate(12, "i8", ALLOC_NONE, 457132);
allocate([0,0,0,0,192,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 457144);
allocate(4, "i8", ALLOC_NONE, 457612);
allocate(4, "i8", ALLOC_NONE, 457616);
allocate(4, "i8", ALLOC_NONE, 457620);
allocate(4, "i8", ALLOC_NONE, 457624);
allocate(4, "i8", ALLOC_NONE, 457628);
allocate(4, "i8", ALLOC_NONE, 457632);
allocate(4, "i8", ALLOC_NONE, 457636);
allocate(4, "i8", ALLOC_NONE, 457640);
allocate(4, "i8", ALLOC_NONE, 457644);
allocate(4, "i8", ALLOC_NONE, 457648);
allocate(4, "i8", ALLOC_NONE, 457652);
allocate(4, "i8", ALLOC_NONE, 457656);
allocate(4, "i8", ALLOC_NONE, 457660);
allocate(4, "i8", ALLOC_NONE, 457664);
allocate(4, "i8", ALLOC_NONE, 457668);
allocate(4, "i8", ALLOC_NONE, 457672);
allocate([200,130,7,0,160,249,6,0,46,1,0,0,1,0,0,0,160,130,7,0,160,249,6,0,47,1,0,0,1,0,0,0,240,130,7,0,160,249,6,0,48,1,0,0,1,0,0,0,120,130,7,0,160,249,6,0,45,1,0,0,0,0,0,0,80,130,7,0,160,249,6,0,1,0,0,0,1,0,0,0,40,130,7,0,160,249,6,0,3,0,0,0,0,0,0,0,0,130,7,0,40,131,7,0,2,0,0,0,1,0,0,0,176,129,7,0,32,131,7,0,8,0,0,0,1,0,0,0,216,129,7,0,36,131,7,0,11,0,0,0,1,0,0,0,96,129,7,0,24,131,7,0,10,0,0,0,1,0,0,0,136,129,7,0,28,131,7,0,9,0,0,0,1,0,0,0,56,129,7,0,160,249,6,0,6,0,0,0,0,0,0,0,16,129,7,0,160,249,6,0,50,1,0,0,0,0,0,0,232,128,7,0,160,249,6,0,51,1,0,0,0,0,0,0,192,128,7,0,160,249,6,0,49,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 457676);
allocate(4, "i8", ALLOC_NONE, 457932);
allocate(4, "i8", ALLOC_NONE, 457936);
allocate(4, "i8", ALLOC_NONE, 457940);
allocate(4, "i8", ALLOC_NONE, 457944);
allocate(4, "i8", ALLOC_NONE, 457948);
allocate(4, "i8", ALLOC_NONE, 457952);
allocate(160, "i8", ALLOC_NONE, 457956);
allocate(4, "i8", ALLOC_NONE, 458116);
allocate(4, "i8", ALLOC_NONE, 458120);
allocate(4, "i8", ALLOC_NONE, 458124);
allocate([0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45], "i8", ALLOC_NONE, 458128);
allocate([112,97,98,103,110,113,0] /* pabgnq\00 */, "i8", ALLOC_NONE, 459152);
allocate(4, "i8", ALLOC_NONE, 459160);
allocate(4, "i8", ALLOC_NONE, 459164);
allocate([8,135,7,0,164,249,6,0,4,0,0,0,0,0,0,0,44,134,7,0,164,249,6,0,46,1,0,0,0,0,0,0,36,133,7,0,228,135,7,0,2,0,0,0,1,0,0,0,52,135,7,0,164,249,6,0,45,1,0,0,0,0,0,0,88,134,7,0,164,249,6,0,3,0,0,0,0,0,0,0,184,135,7,0,252,135,7,0,7,0,0,0,1,0,0,0,140,135,7,0,244,135,7,0,8,0,0,0,1,0,0,0,96,135,7,0,236,135,7,0,9,0,0,0,1,0,0,0,248,132,7,0,164,249,6,0,10,0,0,0,0,0,0,0,204,132,7,0,164,249,6,0,47,1,0,0,0,0,0,0,168,133,7,0,164,249,6,0,48,1,0,0,0,0,0,0,124,133,7,0,164,249,6,0,49,1,0,0,0,0,0,0,80,133,7,0,164,249,6,0,50,1,0,0,0,0,0,0,0,134,7,0,164,249,6,0,51,1,0,0,0,0,0,0,212,133,7,0,164,249,6,0,53,1,0,0,0,0,0,0,220,134,7,0,164,249,6,0,54,1,0,0,0,0,0,0,176,134,7,0,164,249,6,0,55,1,0,0,0,0,0,0,132,134,7,0,164,249,6,0,56,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 459168);
allocate(8, "i8", ALLOC_NONE, 459472);
allocate(4, "i8", ALLOC_NONE, 459480);
allocate([124,36,36,36,125,114,115,116,117,118,119,120,121,122,123,36,36,36,36,36,36,36,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,36,36,36,36,36,36,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,0] /* |$$$}rstuvwxyz{$$$$$ */, "i8", ALLOC_NONE, 459484);
allocate([65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47,0] /* ABCDEFGHIJKLMNOPQRST */, "i8", ALLOC_NONE, 459568);
allocate([112,0,112,112,44,0,44,44,179,0,179,179,192,0,192,192,228,0,228,228,87,0,87,87,234,0,234,234,174,0,174,174,35,0,35,35,107,0,107,107,69,0,69,69,165,0,165,165,237,0,237,237,79,0,79,79,29,0,29,29,146,0,146,146,134,0,134,134,175,0,175,175,124,0,124,124,31,0,31,31,62,0,62,62,220,0,220,220,94,0,94,94,11,0,11,11,166,0,166,166,57,0,57,57,213,0,213,213,93,0,93,93,217,0,217,217,90,0,90,90,81,0,81,81,108,0,108,108,139,0,139,139,154,0,154,154,251,0,251,251,176,0,176,176,116,0,116,116,43,0,43,43,240,0,240,240,132,0,132,132,223,0,223,223,203,0,203,203,52,0,52,52,118,0,118,118,109,0,109,109,169,0,169,169,209,0,209,209,4,0,4,4,20,0,20,20,58,0,58,58,222,0,222,222,17,0,17,17,50,0,50,50,156,0,156,156,83,0,83,83,242,0,242,242,254,0,254,254,207,0,207,207,195,0,195,195,122,0,122,122,36,0,36,36,232,0,232,232,96,0,96,96,105,0,105,105,170,0,170,170,160,0,160,160,161,0,161,161,98,0,98,98,84,0,84,84,30,0,30,30,224,0,224,224,100,0,100,100,16,0,16,16,0,0,0,0,163,0,163,163,117,0,117,117,138,0,138,138,230,0,230,230,9,0,9,9,221,0,221,221,135,0,135,135,131,0,131,131,205,0,205,205,144,0,144,144,115,0,115,115,246,0,246,246,157,0,157,157,191,0,191,191,82,0,82,82,216,0,216,216,200,0,200,200,198,0,198,198,129,0,129,129,111,0,111,111,19,0,19,19,99,0,99,99,233,0,233,233,167,0,167,167,159,0,159,159,188,0,188,188,41,0,41,41,249,0,249,249,47,0,47,47,180,0,180,180,120,0,120,120,6,0,6,6,231,0,231,231,113,0,113,113,212,0,212,212,171,0,171,171,136,0,136,136,141,0,141,141,114,0,114,114,185,0,185,185,248,0,248,248,172,0,172,172,54,0,54,54,42,0,42,42,60,0,60,60,241,0,241,241,64,0,64,64,211,0,211,211,187,0,187,187,67,0,67,67,21,0,21,21,173,0,173,173,119,0,119,119,128,0,128,128,130,0,130,130,236,0,236,236,39,0,39,39,229,0,229,229,133,0,133,133,53,0,53,53,12,0,12,12,65,0,65,65,239,0,239,239,147,0,147,147,25,0,25,25,33,0,33,33,14,0,14,14,78,0,78,78,101,0,101,101,189,0,189,189,184,0,184,184,143,0,143,143,235,0,235,235,206,0,206,206,48,0,48,48,95,0,95,95,197,0,197,197,26,0,26,26,225,0,225,225,202,0,202,202,71,0,71,71,61,0,61,61,1,0,1,1,214,0,214,214,86,0,86,86,77,0,77,77,13,0,13,13,102,0,102,102,204,0,204,204,45,0,45,45,18,0,18,18,32,0,32,32,177,0,177,177,153,0,153,153,76,0,76,76,194,0,194,194,126,0,126,126,5,0,5,5,183,0,183,183,49,0,49,49,23,0,23,23,215,0,215,215,88,0,88,88,97,0,97,97,27,0,27,27,28,0,28,28,15,0,15,15,22,0,22,22,24,0,24,24,34,0,34,34,68,0,68,68,178,0,178,178,181,0,181,181,145,0,145,145,8,0,8,8,168,0,168,168,252,0,252,252,80,0,80,80,208,0,208,208,125,0,125,125,137,0,137,137,151,0,151,151,91,0,91,91,149,0,149,149,255,0,255,255,210,0,210,210,196,0,196,196,72,0,72,72,247,0,247,247,219,0,219,219,3,0,3,3,218,0,218,218,63,0,63,63,148,0,148,148,92,0,92,92,2,0,2,2,74,0,74,74,51,0,51,51,103,0,103,103,243,0,243,243,127,0,127,127,226,0,226,226,155,0,155,155,38,0,38,38,55,0,55,55,59,0,59,59,150,0,150,150,75,0,75,75,190,0,190,190,46,0,46,46,121,0,121,121,140,0,140,140,110,0,110,110,142,0,142,142,245,0,245,245,182,0,182,182,253,0,253,253,89,0,89,89,152,0,152,152,106,0,106,106,70,0,70,70,186,0,186,186,37,0,37,37,66,0,66,66,162,0,162,162,250,0,250,250,7,0,7,7,85,0,85,85,238,0,238,238,10,0,10,10,73,0,73,73,104,0,104,104,56,0,56,56,164,0,164,164,40,0,40,40,123,0,123,123,201,0,201,201,193,0,193,193,227,0,227,227,244,0,244,244,199,0,199,199,158,0,158,158], "i8", ALLOC_NONE, 459636);
allocate([56,56,0,56,65,65,0,65,22,22,0,22,118,118,0,118,217,217,0,217,147,147,0,147,96,96,0,96,242,242,0,242,114,114,0,114,194,194,0,194,171,171,0,171,154,154,0,154,117,117,0,117,6,6,0,6,87,87,0,87,160,160,0,160,145,145,0,145,247,247,0,247,181,181,0,181,201,201,0,201,162,162,0,162,140,140,0,140,210,210,0,210,144,144,0,144,246,246,0,246,7,7,0,7,167,167,0,167,39,39,0,39,142,142,0,142,178,178,0,178,73,73,0,73,222,222,0,222,67,67,0,67,92,92,0,92,215,215,0,215,199,199,0,199,62,62,0,62,245,245,0,245,143,143,0,143,103,103,0,103,31,31,0,31,24,24,0,24,110,110,0,110,175,175,0,175,47,47,0,47,226,226,0,226,133,133,0,133,13,13,0,13,83,83,0,83,240,240,0,240,156,156,0,156,101,101,0,101,234,234,0,234,163,163,0,163,174,174,0,174,158,158,0,158,236,236,0,236,128,128,0,128,45,45,0,45,107,107,0,107,168,168,0,168,43,43,0,43,54,54,0,54,166,166,0,166,197,197,0,197,134,134,0,134,77,77,0,77,51,51,0,51,253,253,0,253,102,102,0,102,88,88,0,88,150,150,0,150,58,58,0,58,9,9,0,9,149,149,0,149,16,16,0,16,120,120,0,120,216,216,0,216,66,66,0,66,204,204,0,204,239,239,0,239,38,38,0,38,229,229,0,229,97,97,0,97,26,26,0,26,63,63,0,63,59,59,0,59,130,130,0,130,182,182,0,182,219,219,0,219,212,212,0,212,152,152,0,152,232,232,0,232,139,139,0,139,2,2,0,2,235,235,0,235,10,10,0,10,44,44,0,44,29,29,0,29,176,176,0,176,111,111,0,111,141,141,0,141,136,136,0,136,14,14,0,14,25,25,0,25,135,135,0,135,78,78,0,78,11,11,0,11,169,169,0,169,12,12,0,12,121,121,0,121,17,17,0,17,127,127,0,127,34,34,0,34,231,231,0,231,89,89,0,89,225,225,0,225,218,218,0,218,61,61,0,61,200,200,0,200,18,18,0,18,4,4,0,4,116,116,0,116,84,84,0,84,48,48,0,48,126,126,0,126,180,180,0,180,40,40,0,40,85,85,0,85,104,104,0,104,80,80,0,80,190,190,0,190,208,208,0,208,196,196,0,196,49,49,0,49,203,203,0,203,42,42,0,42,173,173,0,173,15,15,0,15,202,202,0,202,112,112,0,112,255,255,0,255,50,50,0,50,105,105,0,105,8,8,0,8,98,98,0,98,0,0,0,0,36,36,0,36,209,209,0,209,251,251,0,251,186,186,0,186,237,237,0,237,69,69,0,69,129,129,0,129,115,115,0,115,109,109,0,109,132,132,0,132,159,159,0,159,238,238,0,238,74,74,0,74,195,195,0,195,46,46,0,46,193,193,0,193,1,1,0,1,230,230,0,230,37,37,0,37,72,72,0,72,153,153,0,153,185,185,0,185,179,179,0,179,123,123,0,123,249,249,0,249,206,206,0,206,191,191,0,191,223,223,0,223,113,113,0,113,41,41,0,41,205,205,0,205,108,108,0,108,19,19,0,19,100,100,0,100,155,155,0,155,99,99,0,99,157,157,0,157,192,192,0,192,75,75,0,75,183,183,0,183,165,165,0,165,137,137,0,137,95,95,0,95,177,177,0,177,23,23,0,23,244,244,0,244,188,188,0,188,211,211,0,211,70,70,0,70,207,207,0,207,55,55,0,55,94,94,0,94,71,71,0,71,148,148,0,148,250,250,0,250,252,252,0,252,91,91,0,91,151,151,0,151,254,254,0,254,90,90,0,90,172,172,0,172,60,60,0,60,76,76,0,76,3,3,0,3,53,53,0,53,243,243,0,243,35,35,0,35,184,184,0,184,93,93,0,93,106,106,0,106,146,146,0,146,213,213,0,213,33,33,0,33,68,68,0,68,81,81,0,81,198,198,0,198,125,125,0,125,57,57,0,57,131,131,0,131,220,220,0,220,170,170,0,170,124,124,0,124,119,119,0,119,86,86,0,86,5,5,0,5,27,27,0,27,164,164,0,164,21,21,0,21,52,52,0,52,30,30,0,30,28,28,0,28,248,248,0,248,82,82,0,82,32,32,0,32,20,20,0,20,233,233,0,233,189,189,0,189,221,221,0,221,228,228,0,228,161,161,0,161,224,224,0,224,138,138,0,138,241,241,0,241,214,214,0,214,122,122,0,122,187,187,0,187,227,227,0,227,64,64,0,64,79,79,0,79], "i8", ALLOC_NONE, 460660);
allocate([0,112,112,112,0,130,130,130,0,44,44,44,0,236,236,236,0,179,179,179,0,39,39,39,0,192,192,192,0,229,229,229,0,228,228,228,0,133,133,133,0,87,87,87,0,53,53,53,0,234,234,234,0,12,12,12,0,174,174,174,0,65,65,65,0,35,35,35,0,239,239,239,0,107,107,107,0,147,147,147,0,69,69,69,0,25,25,25,0,165,165,165,0,33,33,33,0,237,237,237,0,14,14,14,0,79,79,79,0,78,78,78,0,29,29,29,0,101,101,101,0,146,146,146,0,189,189,189,0,134,134,134,0,184,184,184,0,175,175,175,0,143,143,143,0,124,124,124,0,235,235,235,0,31,31,31,0,206,206,206,0,62,62,62,0,48,48,48,0,220,220,220,0,95,95,95,0,94,94,94,0,197,197,197,0,11,11,11,0,26,26,26,0,166,166,166,0,225,225,225,0,57,57,57,0,202,202,202,0,213,213,213,0,71,71,71,0,93,93,93,0,61,61,61,0,217,217,217,0,1,1,1,0,90,90,90,0,214,214,214,0,81,81,81,0,86,86,86,0,108,108,108,0,77,77,77,0,139,139,139,0,13,13,13,0,154,154,154,0,102,102,102,0,251,251,251,0,204,204,204,0,176,176,176,0,45,45,45,0,116,116,116,0,18,18,18,0,43,43,43,0,32,32,32,0,240,240,240,0,177,177,177,0,132,132,132,0,153,153,153,0,223,223,223,0,76,76,76,0,203,203,203,0,194,194,194,0,52,52,52,0,126,126,126,0,118,118,118,0,5,5,5,0,109,109,109,0,183,183,183,0,169,169,169,0,49,49,49,0,209,209,209,0,23,23,23,0,4,4,4,0,215,215,215,0,20,20,20,0,88,88,88,0,58,58,58,0,97,97,97,0,222,222,222,0,27,27,27,0,17,17,17,0,28,28,28,0,50,50,50,0,15,15,15,0,156,156,156,0,22,22,22,0,83,83,83,0,24,24,24,0,242,242,242,0,34,34,34,0,254,254,254,0,68,68,68,0,207,207,207,0,178,178,178,0,195,195,195,0,181,181,181,0,122,122,122,0,145,145,145,0,36,36,36,0,8,8,8,0,232,232,232,0,168,168,168,0,96,96,96,0,252,252,252,0,105,105,105,0,80,80,80,0,170,170,170,0,208,208,208,0,160,160,160,0,125,125,125,0,161,161,161,0,137,137,137,0,98,98,98,0,151,151,151,0,84,84,84,0,91,91,91,0,30,30,30,0,149,149,149,0,224,224,224,0,255,255,255,0,100,100,100,0,210,210,210,0,16,16,16,0,196,196,196,0,0,0,0,0,72,72,72,0,163,163,163,0,247,247,247,0,117,117,117,0,219,219,219,0,138,138,138,0,3,3,3,0,230,230,230,0,218,218,218,0,9,9,9,0,63,63,63,0,221,221,221,0,148,148,148,0,135,135,135,0,92,92,92,0,131,131,131,0,2,2,2,0,205,205,205,0,74,74,74,0,144,144,144,0,51,51,51,0,115,115,115,0,103,103,103,0,246,246,246,0,243,243,243,0,157,157,157,0,127,127,127,0,191,191,191,0,226,226,226,0,82,82,82,0,155,155,155,0,216,216,216,0,38,38,38,0,200,200,200,0,55,55,55,0,198,198,198,0,59,59,59,0,129,129,129,0,150,150,150,0,111,111,111,0,75,75,75,0,19,19,19,0,190,190,190,0,99,99,99,0,46,46,46,0,233,233,233,0,121,121,121,0,167,167,167,0,140,140,140,0,159,159,159,0,110,110,110,0,188,188,188,0,142,142,142,0,41,41,41,0,245,245,245,0,249,249,249,0,182,182,182,0,47,47,47,0,253,253,253,0,180,180,180,0,89,89,89,0,120,120,120,0,152,152,152,0,6,6,6,0,106,106,106,0,231,231,231,0,70,70,70,0,113,113,113,0,186,186,186,0,212,212,212,0,37,37,37,0,171,171,171,0,66,66,66,0,136,136,136,0,162,162,162,0,141,141,141,0,250,250,250,0,114,114,114,0,7,7,7,0,185,185,185,0,85,85,85,0,248,248,248,0,238,238,238,0,172,172,172,0,10,10,10,0,54,54,54,0,73,73,73,0,42,42,42,0,104,104,104,0,60,60,60,0,56,56,56,0,241,241,241,0,164,164,164,0,64,64,64,0,40,40,40,0,211,211,211,0,123,123,123,0,187,187,187,0,201,201,201,0,67,67,67,0,193,193,193,0,21,21,21,0,227,227,227,0,173,173,173,0,244,244,244,0,119,119,119,0,199,199,199,0,128,128,128,0,158,158,158], "i8", ALLOC_NONE, 461684);
allocate([224,224,224,0,5,5,5,0,88,88,88,0,217,217,217,0,103,103,103,0,78,78,78,0,129,129,129,0,203,203,203,0,201,201,201,0,11,11,11,0,174,174,174,0,106,106,106,0,213,213,213,0,24,24,24,0,93,93,93,0,130,130,130,0,70,70,70,0,223,223,223,0,214,214,214,0,39,39,39,0,138,138,138,0,50,50,50,0,75,75,75,0,66,66,66,0,219,219,219,0,28,28,28,0,158,158,158,0,156,156,156,0,58,58,58,0,202,202,202,0,37,37,37,0,123,123,123,0,13,13,13,0,113,113,113,0,95,95,95,0,31,31,31,0,248,248,248,0,215,215,215,0,62,62,62,0,157,157,157,0,124,124,124,0,96,96,96,0,185,185,185,0,190,190,190,0,188,188,188,0,139,139,139,0,22,22,22,0,52,52,52,0,77,77,77,0,195,195,195,0,114,114,114,0,149,149,149,0,171,171,171,0,142,142,142,0,186,186,186,0,122,122,122,0,179,179,179,0,2,2,2,0,180,180,180,0,173,173,173,0,162,162,162,0,172,172,172,0,216,216,216,0,154,154,154,0,23,23,23,0,26,26,26,0,53,53,53,0,204,204,204,0,247,247,247,0,153,153,153,0,97,97,97,0,90,90,90,0,232,232,232,0,36,36,36,0,86,86,86,0,64,64,64,0,225,225,225,0,99,99,99,0,9,9,9,0,51,51,51,0,191,191,191,0,152,152,152,0,151,151,151,0,133,133,133,0,104,104,104,0,252,252,252,0,236,236,236,0,10,10,10,0,218,218,218,0,111,111,111,0,83,83,83,0,98,98,98,0,163,163,163,0,46,46,46,0,8,8,8,0,175,175,175,0,40,40,40,0,176,176,176,0,116,116,116,0,194,194,194,0,189,189,189,0,54,54,54,0,34,34,34,0,56,56,56,0,100,100,100,0,30,30,30,0,57,57,57,0,44,44,44,0,166,166,166,0,48,48,48,0,229,229,229,0,68,68,68,0,253,253,253,0,136,136,136,0,159,159,159,0,101,101,101,0,135,135,135,0,107,107,107,0,244,244,244,0,35,35,35,0,72,72,72,0,16,16,16,0,209,209,209,0,81,81,81,0,192,192,192,0,249,249,249,0,210,210,210,0,160,160,160,0,85,85,85,0,161,161,161,0,65,65,65,0,250,250,250,0,67,67,67,0,19,19,19,0,196,196,196,0,47,47,47,0,168,168,168,0,182,182,182,0,60,60,60,0,43,43,43,0,193,193,193,0,255,255,255,0,200,200,200,0,165,165,165,0,32,32,32,0,137,137,137,0,0,0,0,0,144,144,144,0,71,71,71,0,239,239,239,0,234,234,234,0,183,183,183,0,21,21,21,0,6,6,6,0,205,205,205,0,181,181,181,0,18,18,18,0,126,126,126,0,187,187,187,0,41,41,41,0,15,15,15,0,184,184,184,0,7,7,7,0,4,4,4,0,155,155,155,0,148,148,148,0,33,33,33,0,102,102,102,0,230,230,230,0,206,206,206,0,237,237,237,0,231,231,231,0,59,59,59,0,254,254,254,0,127,127,127,0,197,197,197,0,164,164,164,0,55,55,55,0,177,177,177,0,76,76,76,0,145,145,145,0,110,110,110,0,141,141,141,0,118,118,118,0,3,3,3,0,45,45,45,0,222,222,222,0,150,150,150,0,38,38,38,0,125,125,125,0,198,198,198,0,92,92,92,0,211,211,211,0,242,242,242,0,79,79,79,0,25,25,25,0,63,63,63,0,220,220,220,0,121,121,121,0,29,29,29,0,82,82,82,0,235,235,235,0,243,243,243,0,109,109,109,0,94,94,94,0,251,251,251,0,105,105,105,0,178,178,178,0,240,240,240,0,49,49,49,0,12,12,12,0,212,212,212,0,207,207,207,0,140,140,140,0,226,226,226,0,117,117,117,0,169,169,169,0,74,74,74,0,87,87,87,0,132,132,132,0,17,17,17,0,69,69,69,0,27,27,27,0,245,245,245,0,228,228,228,0,14,14,14,0,115,115,115,0,170,170,170,0,241,241,241,0,221,221,221,0,89,89,89,0,20,20,20,0,108,108,108,0,146,146,146,0,84,84,84,0,208,208,208,0,120,120,120,0,112,112,112,0,227,227,227,0,73,73,73,0,128,128,128,0,80,80,80,0,167,167,167,0,246,246,246,0,119,119,119,0,147,147,147,0,134,134,134,0,131,131,131,0,42,42,42,0,199,199,199,0,91,91,91,0,233,233,233,0,238,238,238,0,143,143,143,0,1,1,1,0,61,61,61,0], "i8", ALLOC_NONE, 462708);
allocate(4, "i8", ALLOC_NONE, 463732);
allocate(4, "i8", ALLOC_NONE, 463736);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 463740);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 463780);
allocate([0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 463820);
allocate([169,117,103,243,179,198,232,244,4,219,253,123,163,251,118,200,154,74,146,211,128,230,120,107,228,69,221,125,209,232,56,75,13,214,198,50,53,216,152,253,24,55,247,113,236,241,108,225,67,48,117,15,55,248,38,27,250,135,19,250,148,6,72,63,242,94,208,186,139,174,48,91,132,138,84,0,223,188,35,157,25,109,91,193,61,177,89,14,243,128,174,93,162,210,130,213,99,160,1,132,131,7,46,20,217,181,81,144,155,44,124,163,166,178,235,115,165,76,190,84,22,146,12,116,227,54,97,81,192,56,140,176,58,189,245,90,115,252,44,96,37,98,11,150,187,108,78,66,137,247,107,16,83,124,106,40,180,39,241,140,225,19,230,149,189,156,69,199,226,36,244,70,182,59,102,112,204,202,149,227,3,133,86,203,212,17,28,208,30,147,215,184,251,166,195,131,142,32,181,255,233,159,207,119,191,195,186,204,234,3,119,111,57,8,175,191,51,64,201,231,98,43,113,226,129,121,121,12,9,170,173,130,36,65,205,58,249,234,216,185,229,228,197,154,185,164,77,151,68,126,8,218,134,122,231,23,161,102,29,148,170,161,237,29,6,61,112,240,178,222,210,179,65,11,123,114,160,167,17,28,49,239,194,209,39,83,144,62,32,143,246,51,96,38,255,95,150,236,92,118,177,42,171,73,158,129,156,136,82,238,27,33,95,196,147,26,10,235,239,217,145,197,133,57,73,153,238,205,45,173,79,49,143,139,59,1,71,24,135,35,109,221,70,31,214,78,62,45,105,249,100,72,42,79,206,242,203,101,47,142,252,120,151,92,5,88,122,25,172,141,127,229,213,152,26,87,75,103,14,127,167,5,90,100,40,175,20,99,63,182,41,254,136,245,60,183,76,60,2,165,184,206,218,233,176,104,23,68,85,224,31,77,138,67,125,105,87,41,199,46,141,172,116,21,183,89,196,168,159,10,114,158,126,110,21,71,34,223,18,52,88,53,7,106,153,207,52,220,110,34,80,201,222,192,104,155,101,137,188,212,219,237,248,171,200,18,168,162,43,13,64,82,220,187,254,2,50,47,164,169,202,215,16,97,33,30,240,180,211,80,93,4,15,246,0,194,111,22,157,37,54,134,66,86,74,85,94,9,193,190,224,145] /* \A9ug\F3\B3\C6\E8\F4 */, "i8", ALLOC_NONE, 463860);
allocate([48,33,48,9,6,5,43,14,3,2,26,5,0,4,20] /* 0!0\09\06\05+\0E\03\ */, "i8", ALLOC_NONE, 464372);
allocate([48,33,48,9,6,5,43,36,3,2,1,5,0,4,20] /* 0!0\09\06\05+$\03\02 */, "i8", ALLOC_NONE, 464388);
allocate([48,32,48,12,6,8,42,134,72,134,247,13,2,5,5,0,4,16] /* 0 0\0C\06\08_\86H\86 */, "i8", ALLOC_NONE, 464404);
allocate([48,49,48,13,6,9,96,134,72,1,101,3,4,2,1,5,0,4,32] /* 010\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 464424);
allocate([48,45,48,13,6,9,96,134,72,1,101,3,4,2,4,5,0,4,28] /* 0-0\0D\06\09`\86H\01 */, "i8", ALLOC_NONE, 464444);
allocate([48,41,48,13,6,9,43,6,1,4,1,218,71,12,2,5,0,4,24] /* 0)0\0D\06\09+\06\01\ */, "i8", ALLOC_NONE, 464464);
allocate([48,32,48,12,6,8,42,134,72,134,247,13,2,4,5,0,4,16] /* 0 0\0C\06\08_\86H\86 */, "i8", ALLOC_NONE, 464484);
allocate(4, "i8", ALLOC_NONE, 464504);
allocate(4, "i8", ALLOC_NONE, 464508);
allocate(4, "i8", ALLOC_NONE, 464512);
allocate(4, "i8", ALLOC_NONE, 464516);
allocate([0,0,0,0,0,0,0,0,334,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,8,0,0,0], ["i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 464520);
allocate(8, "i8", ALLOC_NONE, 464552);
allocate([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 464560);
allocate([4,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 464584);
allocate([0,0,0,0,46,0,0,0,146,0,0,0,1,0,0,0,258,0,0,0,0,0,0,0], ["i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 464592);
allocate([87,72,73,82,76,80,79,79,76,0] /* WHIRLPOOL\00 */, "i8", ALLOC_NONE, 464616);
allocate([142,149,155,117,218,227,19,218,140,244,247,40,20,252,20,63,143,119,121,198,235,159,127,161,114,153,174,173,182,136,144,24,80,29,40,158,73,0,247,228,51,27,153,222,196,181,67,58,199,211,41,238,182,221,38,84,94,150,229,91,135,75,233,9,0] /* \8E\95\9Bu\DA\E3\13\ */, "i8", ALLOC_NONE, 464628);
allocate([36,141,106,97,210,6,56,184,229,192,38,147,12,62,96,57,163,60,228,89,100,255,33,103,246,236,237,212,25,219,6,193,0] /* $\8Dja\D2\068\B8\E5\ */, "i8", ALLOC_NONE, 464696);
allocate([115,101,99,112,50,50,52,114,49,0] /* secp224r1\00 */, "i8", ALLOC_NONE, 464732);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 464744);
allocate([83,101,114,112,101,110,116,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-256 test dec */, "i8", ALLOC_NONE, 464752);
allocate([84,87,79,70,73,83,72,0] /* TWOFISH\00 */, "i8", ALLOC_NONE, 464788);
allocate([115,101,99,112,49,57,50,114,49,0] /* secp192r1\00 */, "i8", ALLOC_NONE, 464796);
allocate([116,114,97,110,115,105,101,110,116,45,107,101,121,0] /* transient-key\00 */, "i8", ALLOC_NONE, 464808);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,49,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 464824);
allocate([112,114,105,109,101,49,57,50,118,49,0] /* prime192v1\00 */, "i8", ALLOC_NONE, 464848);
allocate([84,73,71,69,82,49,57,50,0] /* TIGER192\00 */, "i8", ALLOC_NONE, 464860);
allocate([37,109,0] /* %m\00 */, "i8", ALLOC_NONE, 464872);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,53,46,51,46,49,46,49,0] /* 1.2.840.10045.3.1.1\ */, "i8", ALLOC_NONE, 464876);
allocate([102,105,112,115,49,56,54,45,51,32,112,114,105,109,101,32,113,0] /* fips186-3 prime q\00 */, "i8", ALLOC_NONE, 464896);
allocate([63,79,84,82,58,65,65,73,0] /* ?OTR:AAI\00 */, "i8", ALLOC_NONE, 464916);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,102,111,117,110,100,0] /* algorithm not found\ */, "i8", ALLOC_NONE, 464928);
allocate([109,112,105,95,115,99,97,110,32,102,97,105,108,101,100,58,32,37,115,10,0] /* mpi_scan failed: %s\ */, "i8", ALLOC_NONE, 464948);
allocate([84,114,105,112,108,101,45,68,69,83,32,83,83,76,101,97,121,32,116,101,115,116,32,102,97,105,108,101,100,32,111,110,32,100,101,99,114,121,112,116,105,111,110,46,0] /* Triple-DES SSLeay te */, "i8", ALLOC_NONE, 464972);
allocate([99,105,112,104,101,114,32,37,100,32,110,111,116,32,102,111,117,110,100,10,0] /* cipher %d not found\ */, "i8", ALLOC_NONE, 465020);
allocate([41,10,0] /* )\0A\00 */, "i8", ALLOC_NONE, 465044);
allocate([109,112,105,95,112,114,105,110,116,32,102,97,105,108,101,100,58,32,37,115,10,0] /* mpi_print failed: %s */, "i8", ALLOC_NONE, 465048);
allocate([83,72,65,53,49,50,0] /* SHA512\00 */, "i8", ALLOC_NONE, 465072);
allocate([40,37,115,37,109,41,0] /* (%s%m)\00 */, "i8", ALLOC_NONE, 465080);
allocate([101,99,99,32,103,101,116,32,112,97,114,97,109,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecc get param: Faile */, "i8", ALLOC_NONE, 465088);
allocate([48,120,55,100,100,101,51,56,53,100,53,54,54,51,51,50,101,99,99,48,101,97,98,102,97,57,99,102,55,56,50,50,102,100,102,50,48,57,102,55,48,48,50,52,97,53,55,98,49,97,97,48,48,48,99,53,53,98,56,56,49,102,56,49,49,49,98,50,100,99,100,101,52,57,52,97,53,102,52,56,53,101,53,98,99,97,52,98,100,56,56,97,50,55,54,51,97,101,100,49,99,97,50,98,50,102,97,56,102,48,53,52,48,54,55,56,99,100,49,101,48,102,51,97,100,56,48,56,57,50,0] /* 0x7dde385d566332ecc0 */, "i8", ALLOC_NONE, 465140);
allocate([102,111,114,107,32,100,101,116,101,99,116,105,111,110,32,102,97,105,108,101,100,0] /* fork detection faile */, "i8", ALLOC_NONE, 465272);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,110,111,110,99,101,32,98,117,102,102,101,114,32,108,111,99,107,58,32,37,115,10,0] /* failed to release th */, "i8", ALLOC_NONE, 465296);
allocate([100,97,116,97,45,53,48,32,107,101,121,45,50,48,0] /* data-50 key-20\00 */, "i8", ALLOC_NONE, 465344);
allocate([101,108,103,32,32,103,61,32,0] /* elg  g= \00 */, "i8", ALLOC_NONE, 465360);
allocate([78,73,83,84,32,80,45,49,57,50,0] /* NIST P-192\00 */, "i8", ALLOC_NONE, 465372);
allocate([117,115,101,45,102,105,112,115,49,56,54,45,50,0] /* use-fips186-2\00 */, "i8", ALLOC_NONE, 465384);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,50,51,0] /* 0.3.4401.5.3.1.9.23\ */, "i8", ALLOC_NONE, 465400);
allocate([37,48,50,88,0] /* %02X\00 */, "i8", ALLOC_NONE, 465420);
allocate([99,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,112,111,111,108,32,111,102,32,37,117,32,98,121,116,101,115,10,0] /* can't allocate memor */, "i8", ALLOC_NONE, 465428);
allocate([79,104,104,104,104,32,106,101,101,101,101,58,32,0] /* Ohhhh jeeee: \00 */, "i8", ALLOC_NONE, 465468);
allocate([118,101,114,115,105,111,110,58,37,115,58,10,0] /* version:%s:\0A\00 */, "i8", ALLOC_NONE, 465484);
allocate([37,115,101,114,114,111,114,32,105,110,32,108,105,98,103,99,114,121,112,116,44,32,102,105,108,101,32,37,115,44,32,108,105,110,101,32,37,100,37,115,37,115,58,32,37,115,10,0] /* %serror in libgcrypt */, "i8", ALLOC_NONE, 465500);
allocate([48,120,56,49,97,101,101,52,98,100,100,56,50,101,100,57,54,52,53,97,50,49,51,50,50,101,57,99,52,99,54,97,57,51,56,53,101,100,57,102,55,48,98,53,100,57,49,54,99,49,98,52,51,98,54,50,101,101,102,52,100,48,48,57,56,101,102,102,51,98,49,102,55,56,101,50,100,48,100,52,56,100,53,48,100,49,54,56,55,98,57,51,98,57,55,100,53,102,55,99,54,100,53,48,52,55,52,48,54,97,53,101,54,56,56,98,51,53,50,50,48,57,98,99,98,57,102,56,50,50,0] /* 0x81aee4bdd82ed9645a */, "i8", ALLOC_NONE, 465548);
allocate([115,109,112,0] /* smp\00 */, "i8", ALLOC_NONE, 465680);
allocate([109,112,105,99,111,100,101,114,46,99,0] /* mpicoder.c\00 */, "i8", ALLOC_NONE, 465684);
allocate([117,115,105,110,103,32,100,117,109,109,121,32,112,117,98,108,105,99,32,107,101,121,32,102,117,110,99,116,105,111,110,0] /* using dummy public k */, "i8", ALLOC_NONE, 465696);
allocate([83,72,65,50,50,52,0] /* SHA224\00 */, "i8", ALLOC_NONE, 465728);
allocate([48,120,97,97,100,100,57,100,98,56,100,98,101,57,99,52,56,98,51,102,100,52,101,54,97,101,51,51,99,57,102,99,48,55,99,98,51,48,56,100,98,51,98,51,99,57,100,50,48,101,100,54,54,51,57,99,99,97,55,48,51,51,48,56,55,48,53,53,51,101,53,99,52,49,52,99,97,57,50,54,49,57,52,49,56,54,54,49,49,57,55,102,97,99,49,48,52,55,49,100,98,49,100,51,56,49,48,56,53,100,100,97,100,100,98,53,56,55,57,54,56,50,57,99,97,57,48,48,54,57,0] /* 0xaadd9db8dbe9c48b3f */, "i8", ALLOC_NONE, 465736);
allocate([99,117,114,118,101,0] /* curve\00 */, "i8", ALLOC_NONE, 465868);
allocate([40,110,97,109,101,32,37,115,41,0] /* (name %s)\00 */, "i8", ALLOC_NONE, 465876);
allocate([97,98,99,100,101,102,103,104,98,99,100,101,102,103,104,105,99,100,101,102,103,104,105,106,100,101,102,103,104,105,106,107,101,102,103,104,105,106,107,108,102,103,104,105,106,107,108,109,103,104,105,106,107,108,109,110,104,105,106,107,108,109,110,111,105,106,107,108,109,110,111,112,106,107,108,109,110,111,112,113,107,108,109,110,111,112,113,114,108,109,110,111,112,113,114,115,109,110,111,112,113,114,115,116,110,111,112,113,114,115,116,117,0] /* abcdefghbcdefghicdef */, "i8", ALLOC_NONE, 465888);
allocate([97,98,99,100,98,99,100,101,99,100,101,102,100,101,102,103,101,102,103,104,102,103,104,105,103,104,105,106,104,105,106,107,105,106,107,108,106,107,108,109,107,108,109,110,108,109,110,111,109,110,111,112,110,111,112,113,0] /* abcdbcdecdefdefgefgh */, "i8", ALLOC_NONE, 466004);
allocate([48,120,51,100,102,57,49,54,49,48,97,56,51,52,52,49,99,97,101,97,57,56,54,51,98,99,50,100,101,100,53,100,53,97,97,56,50,53,51,97,97,49,48,97,50,101,102,49,99,57,56,98,57,97,99,56,98,53,55,102,49,49,49,55,97,55,50,98,102,50,99,55,98,57,101,55,99,49,97,99,52,100,55,55,102,99,57,52,99,97,100,99,48,56,51,101,54,55,57,56,52,48,53,48,98,55,53,101,98,97,101,53,100,100,50,56,48,57,98,100,54,51,56,48,49,54,102,55,50,51,0] /* 0x3df91610a83441caea */, "i8", ALLOC_NONE, 466064);
allocate([105,100,120,32,62,61,32,53,0] /* idx _= 5\00 */, "i8", ALLOC_NONE, 466196);
allocate([52,170,151,60,212,196,218,164,246,30,235,43,219,173,39,49,101,52,1,111,0] /* 4\AA\97_\D4\C4\DA\A4 */, "i8", ALLOC_NONE, 466208);
allocate([83,101,114,112,101,110,116,45,49,57,50,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-192 test dec */, "i8", ALLOC_NONE, 466232);
allocate([83,72,65,49,0] /* SHA1\00 */, "i8", ALLOC_NONE, 466268);
allocate([48,120,55,56,51,48,97,51,51,49,56,98,54,48,51,98,56,57,101,50,51,50,55,49,52,53,97,99,50,51,52,99,99,53,57,52,99,98,100,100,56,100,51,100,102,57,49,54,49,48,97,56,51,52,52,49,99,97,101,97,57,56,54,51,98,99,50,100,101,100,53,100,53,97,97,56,50,53,51,97,97,49,48,97,50,101,102,49,99,57,56,98,57,97,99,56,98,53,55,102,49,49,49,55,97,55,50,98,102,50,99,55,98,57,101,55,99,49,97,99,52,100,55,55,102,99,57,52,99,97,0] /* 0x7830a3318b603b89e2 */, "i8", ALLOC_NONE, 466276);
allocate([101,99,100,104,0] /* ecdh\00 */, "i8", ALLOC_NONE, 466408);
allocate([40,109,105,115,99,45,107,101,121,45,105,110,102,111,40,112,45,113,45,115,119,97,112,112,101,100,41,41,0] /* (misc-key-info(p-q-s */, "i8", ALLOC_NONE, 466416);
allocate([65,69,83,45,50,53,54,0] /* AES-256\00 */, "i8", ALLOC_NONE, 466448);
allocate([48,120,97,97,100,100,57,100,98,56,100,98,101,57,99,52,56,98,51,102,100,52,101,54,97,101,51,51,99,57,102,99,48,55,99,98,51,48,56,100,98,51,98,51,99,57,100,50,48,101,100,54,54,51,57,99,99,97,55,48,51,51,48,56,55,49,55,100,52,100,57,98,48,48,57,98,99,54,54,56,52,50,97,101,99,100,97,49,50,97,101,54,97,51,56,48,101,54,50,56,56,49,102,102,50,102,50,100,56,50,99,54,56,53,50,56,97,97,54,48,53,54,53,56,51,97,52,56,102,51,0] /* 0xaadd9db8dbe9c48b3f */, "i8", ALLOC_NONE, 466456);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,50,46,49,46,54,0] /* 1.2.840.113549.1.12. */, "i8", ALLOC_NONE, 466588);
allocate([101,99,100,115,97,0] /* ecdsa\00 */, "i8", ALLOC_NONE, 466612);
allocate([83,69,82,80,69,78,84,49,50,56,0] /* SERPENT128\00 */, "i8", ALLOC_NONE, 466620);
allocate([40,118,97,108,117,101,32,37,109,41,0] /* (value %m)\00 */, "i8", ALLOC_NONE, 466632);
allocate([98,114,97,105,110,112,111,111,108,80,53,49,50,114,49,0] /* brainpoolP512r1\00 */, "i8", ALLOC_NONE, 466644);
allocate([80,75,67,83,35,49,32,98,108,111,99,107,32,116,121,112,101,32,50,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* PKCS#1 block type 2  */, "i8", ALLOC_NONE, 466660);
allocate([102,105,112,115,49,56,54,45,51,32,112,114,105,109,101,32,112,0] /* fips186-3 prime p\00 */, "i8", ALLOC_NONE, 466696);
allocate([48,120,56,97,98,101,49,100,55,53,50,48,102,57,99,50,97,52,53,99,98,49,101,98,56,101,57,53,99,102,100,53,53,50,54,50,98,55,48,98,50,57,102,101,101,99,53,56,54,52,101,49,57,99,48,53,52,102,102,57,57,49,50,57,50,56,48,101,52,54,52,54,50,49,55,55,57,49,56,49,49,49,52,50,56,50,48,51,52,49,50,54,51,99,53,51,49,53,0] /* 0x8abe1d7520f9c2a45c */, "i8", ALLOC_NONE, 466716);
allocate([83,69,69,68,0] /* SEED\00 */, "i8", ALLOC_NONE, 466816);
allocate([63,79,84,82,58,65,65,77,0] /* ?OTR:AAM\00 */, "i8", ALLOC_NONE, 466824);
allocate([105,32,62,32,48,0] /* i _ 0\00 */, "i8", ALLOC_NONE, 466836);
allocate([97,108,103,111,114,105,116,104,109,32,100,105,115,97,98,108,101,100,0] /* algorithm disabled\0 */, "i8", ALLOC_NONE, 466844);
allocate([84,114,105,112,108,101,45,68,69,83,32,83,83,76,101,97,121,32,116,101,115,116,32,102,97,105,108,101,100,32,111,110,32,101,110,99,114,121,112,116,105,111,110,46,0] /* Triple-DES SSLeay te */, "i8", ALLOC_NONE, 466864);
allocate([48,120,49,100,49,99,54,52,102,48,54,56,99,102,52,53,102,102,97,50,97,54,51,97,56,49,98,55,99,49,51,102,54,98,56,56,52,55,97,51,101,55,55,101,102,49,52,102,101,51,100,98,55,102,99,97,102,101,48,99,98,100,49,48,101,56,101,56,50,54,101,48,51,52,51,54,100,54,52,54,97,97,101,102,56,55,98,50,101,50,52,55,100,52,97,102,49,101,0] /* 0x1d1c64f068cf45ffa2 */, "i8", ALLOC_NONE, 466912);
allocate([99,105,112,104,101,114,32,37,100,32,119,47,111,32,98,108,111,99,107,115,105,122,101,10,0] /* cipher %d w/o blocks */, "i8", ALLOC_NONE, 467012);
allocate([80,75,67,83,35,49,32,98,108,111,99,107,32,116,121,112,101,32,49,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* PKCS#1 block type 1  */, "i8", ALLOC_NONE, 467040);
allocate([40,112,114,105,118,107,101,121,115,10,0] /* (privkeys\0A\00 */, "i8", ALLOC_NONE, 467076);
allocate([48,120,56,99,98,57,49,101,56,50,97,51,51,56,54,100,50,56,48,102,53,100,54,102,55,101,53,48,101,54,52,49,100,102,49,53,50,102,55,49,48,57,101,100,53,52,53,54,98,51,49,102,49,54,54,101,54,99,97,99,48,52,50,53,97,55,99,102,51,97,98,54,97,102,54,98,55,102,99,51,49,48,51,98,56,56,51,50,48,50,101,57,48,52,54,53,54,53,0] /* 0x8cb91e82a3386d280f */, "i8", ALLOC_NONE, 467088);
allocate([40,103,101,110,107,101,121,40,37,115,40,110,98,105,116,115,37,100,41,0] /* (genkey(%s(nbits%d)\ */, "i8", ALLOC_NONE, 467188);
allocate([110,32,61,61,32,110,102,114,97,109,101,0] /* n == nframe\00 */, "i8", ALLOC_NONE, 467208);
allocate([48,120,48,52,97,56,99,55,100,100,50,50,99,101,50,56,50,54,56,98,51,57,98,53,53,52,49,54,102,48,52,52,55,99,50,102,98,55,55,100,101,49,48,55,100,99,100,50,97,54,50,101,56,56,48,101,97,53,51,101,101,98,54,50,100,53,55,99,98,52,51,57,48,50,57,53,100,98,99,57,57,52,51,97,98,55,56,54,57,54,102,97,53,48,52,99,49,49,0] /* 0x04a8c7dd22ce28268b */, "i8", ALLOC_NONE, 467220);
allocate([105,32,62,32,49,0] /* i _ 1\00 */, "i8", ALLOC_NONE, 467320);
allocate([82,78,71,32,111,117,116,112,117,116,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,107,110,111,119,110,32,118,97,108,117,101,0] /* RNG output does not  */, "i8", ALLOC_NONE, 467328);
allocate([102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,110,111,110,99,101,32,98,117,102,102,101,114,32,108,111,99,107,58,32,37,115,10,0] /* failed to acquire th */, "i8", ALLOC_NONE, 467368);
allocate([11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0] /* \0B\0B\0B\0B\0B\0B\0 */, "i8", ALLOC_NONE, 467416);
allocate([101,108,103,32,32,112,61,32,0] /* elg  p= \00 */, "i8", ALLOC_NONE, 467440);
allocate([115,99,97,110,110,105,110,103,32,69,67,67,32,112,97,114,97,109,101,116,101,114,32,102,97,105,108,101,100,58,32,37,115,10,0] /* scanning ECC paramet */, "i8", ALLOC_NONE, 467452);
allocate([117,115,101,45,102,105,112,115,49,56,54,0] /* use-fips186\00 */, "i8", ALLOC_NONE, 467488);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,50,49,0] /* 0.3.4401.5.3.1.9.21\ */, "i8", ALLOC_NONE, 467500);
allocate([37,117,58,0] /* %u:\00 */, "i8", ALLOC_NONE, 467520);
allocate([99,97,110,39,116,32,109,109,97,112,32,112,111,111,108,32,111,102,32,37,117,32,98,121,116,101,115,58,32,37,115,32,45,32,117,115,105,110,103,32,109,97,108,108,111,99,10,0] /* can't mmap pool of % */, "i8", ALLOC_NONE, 467524);
allocate([70,97,116,97,108,58,32,0] /* Fatal: \00 */, "i8", ALLOC_NONE, 467572);
allocate([105,110,116,101,108,45,97,101,115,110,105,0] /* intel-aesni\00 */, "i8", ALLOC_NONE, 467580);
allocate([95,103,99,114,121,95,102,105,112,115,95,109,111,100,101,32,40,41,0] /* _gcry_fips_mode ()\0 */, "i8", ALLOC_NONE, 467592);
allocate([48,120,55,98,99,51,56,50,99,54,51,100,56,99,49,53,48,99,51,99,55,50,48,56,48,97,99,101,48,53,97,102,97,48,99,50,98,101,97,50,56,101,52,102,98,50,50,55,56,55,49,51,57,49,54,53,101,102,98,97,57,49,102,57,48,102,56,97,97,53,56,49,52,97,53,48,51,97,100,52,101,98,48,52,97,56,99,55,100,100,50,50,99,101,50,56,50,54,0] /* 0x7bc382c63d8c150c3c */, "i8", ALLOC_NONE, 467612);
allocate([63,79,84,82,124,37,120,124,37,120,44,0] /* ?OTR|%x|%x,\00 */, "i8", ALLOC_NONE, 467712);
allocate([105,32,61,61,32,110,108,105,109,98,115,0] /* i == nlimbs\00 */, "i8", ALLOC_NONE, 467724);
allocate([79,65,69,80,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* OAEP encoded data\00 */, "i8", ALLOC_NONE, 467736);
allocate([48,120,56,99,98,57,49,101,56,50,97,51,51,56,54,100,50,56,48,102,53,100,54,102,55,101,53,48,101,54,52,49,100,102,49,53,50,102,55,49,48,57,101,100,53,52,53,54,98,52,49,50,98,49,100,97,49,57,55,102,98,55,49,49,50,51,97,99,100,51,97,55,50,57,57,48,49,100,49,97,55,49,56,55,52,55,48,48,49,51,51,49,48,55,101,99,53,51,0] /* 0x8cb91e82a3386d280f */, "i8", ALLOC_NONE, 467756);
allocate([80,83,83,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* PSS encoded data\00 */, "i8", ALLOC_NONE, 467856);
allocate([32,40,97,99,99,111,117,110,116,10,0] /*  (account\0A\00 */, "i8", ALLOC_NONE, 467876);
allocate([108,111,110,103,32,115,116,114,105,110,103,0] /* long string\00 */, "i8", ALLOC_NONE, 467888);
allocate([108,111,110,103,32,115,116,114,105,110,103,0] /* long string\00 */, "i8", ALLOC_NONE, 467900);
allocate([98,114,97,105,110,112,111,111,108,80,51,56,52,114,49,0] /* brainpoolP384r1\00 */, "i8", ALLOC_NONE, 467912);
allocate([104,108,101,110,0] /* hlen\00 */, "i8", ALLOC_NONE, 467928);
allocate([111,110,101,32,109,105,108,108,105,111,110,32,34,97,34,0] /* one million \22a\22\ */, "i8", ALLOC_NONE, 467936);
allocate([83,101,114,112,101,110,116,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-128 test dec */, "i8", ALLOC_NONE, 467952);
allocate([115,97,108,116,45,108,101,110,103,116,104,0] /* salt-length\00 */, "i8", ALLOC_NONE, 467988);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,54,0] /* 1.2.410.200004.1.6\0 */, "i8", ALLOC_NONE, 468000);
allocate([82,83,65,0] /* RSA\00 */, "i8", ALLOC_NONE, 468020);
allocate([48,120,49,52,102,100,100,48,53,53,52,53,101,99,49,99,99,56,97,98,52,48,57,51,50,52,55,102,55,55,50,55,53,101,48,55,52,51,102,102,101,100,49,49,55,49,56,50,101,97,97,57,99,55,55,56,55,55,97,97,97,99,54,97,99,55,100,51,53,50,52,53,100,49,54,57,50,101,56,101,101,49,0] /* 0x14fdd05545ec1cc8ab */, "i8", ALLOC_NONE, 468024);
allocate([48,120,48,50,0] /* 0x02\00 */, "i8", ALLOC_NONE, 468108);
allocate([117,115,101,45,120,57,51,49,0] /* use-x931\00 */, "i8", ALLOC_NONE, 468116);
allocate([82,73,80,69,77,68,49,54,48,0] /* RIPEMD160\00 */, "i8", ALLOC_NONE, 468128);
allocate([82,73,74,78,68,65,69,76,50,53,54,0] /* RIJNDAEL256\00 */, "i8", ALLOC_NONE, 468140);
allocate([48,120,52,51,98,100,55,101,57,97,102,98,53,51,100,56,98,56,53,50,56,57,98,99,99,52,56,101,101,53,98,102,101,54,102,50,48,49,51,55,100,49,48,97,48,56,55,101,98,54,101,55,56,55,49,101,50,97,49,48,97,53,57,57,99,55,49,48,97,102,56,100,48,100,51,57,101,50,48,54,49,49,0] /* 0x43bd7e9afb53d8b852 */, "i8", ALLOC_NONE, 468152);
allocate([82,70,67,50,50,54,56,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,51,32,102,97,105,108,101,100,46,0] /* RFC2268 decryption t */, "i8", ALLOC_NONE, 468236);
allocate([118,97,108,117,101,0] /* value\00 */, "i8", ALLOC_NONE, 468272);
allocate([40,118,97,108,117,101,32,37,98,41,0] /* (value %b)\00 */, "i8", ALLOC_NONE, 468280);
allocate([48,120,100,51,53,101,52,55,50,48,51,54,98,99,52,102,98,55,101,49,51,99,55,56,53,101,100,50,48,49,101,48,54,53,102,57,56,102,99,102,97,53,98,54,56,102,49,50,97,51,50,100,52,56,50,101,99,55,101,101,56,54,53,56,101,57,56,54,57,49,53,53,53,98,52,52,99,53,57,51,49,49,0] /* 0xd35e472036bc4fb7e1 */, "i8", ALLOC_NONE, 468292);
allocate([104,97,115,104,0] /* hash\00 */, "i8", ALLOC_NONE, 468376);
allocate([102,105,112,115,49,56,54,45,51,32,115,101,101,100,58,0] /* fips186-3 seed:\00 */, "i8", ALLOC_NONE, 468384);
allocate([48,120,53,50,48,56,56,51,57,52,57,100,102,100,98,99,52,50,100,51,97,100,49,57,56,54,52,48,54,56,56,97,54,102,101,49,51,102,52,49,51,52,57,53,53,52,98,52,57,97,99,99,51,49,100,99,99,100,56,56,52,53,51,57,56,49,54,102,53,101,98,52,97,99,56,102,98,49,102,49,97,54,0] /* 0x520883949dfdbc42d3 */, "i8", ALLOC_NONE, 468400);
allocate([100,97,116,97,0] /* data\00 */, "i8", ALLOC_NONE, 468484);
allocate([110,111,32,115,101,108,102,116,101,115,116,32,97,118,97,105,108,97,98,108,101,0] /* no selftest availabl */, "i8", ALLOC_NONE, 468492);
allocate([32,32,9,9,32,32,9,9,0] /*   \09\09  \09\09\00 */, "i8", ALLOC_NONE, 468516);
allocate([84,114,105,112,108,101,45,68,69,83,32,116,101,115,116,32,102,97,105,108,101,100,46,0] /* Triple-DES test fail */, "i8", ALLOC_NONE, 468528);
allocate([48,120,51,101,101,51,48,98,53,54,56,102,98,97,98,48,102,56,56,51,99,99,101,98,100,52,54,100,51,102,51,98,98,56,97,50,97,55,51,53,49,51,102,53,101,98,55,57,100,97,54,54,49,57,48,101,98,48,56,53,102,102,97,57,102,52,57,50,102,51,55,53,97,57,55,100,56,54,48,101,98,52,0] /* 0x3ee30b568fbab0f883 */, "i8", ALLOC_NONE, 468552);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,102,111,117,110,100,0] /* algorithm not found\ */, "i8", ALLOC_NONE, 468636);
allocate([32,32,101,110,99,114,58,0] /*   encr:\00 */, "i8", ALLOC_NONE, 468656);
allocate([40,103,101,110,107,101,121,32,40,100,115,97,32,40,110,98,105,116,115,32,52,58,49,48,50,52,41,41,41,0] /* (genkey (dsa (nbits  */, "i8", ALLOC_NONE, 468664);
allocate([32,32,112,107,101,121,58,0] /*   pkey:\00 */, "i8", ALLOC_NONE, 468696);
allocate([48,120,100,51,53,101,52,55,50,48,51,54,98,99,52,102,98,55,101,49,51,99,55,56,53,101,100,50,48,49,101,48,54,53,102,57,56,102,99,102,97,54,102,54,102,52,48,100,101,102,52,102,57,50,98,57,101,99,55,56,57,51,101,99,50,56,102,99,100,52,49,50,98,49,102,49,98,51,50,101,50,55,0] /* 0xd35e472036bc4fb7e1 */, "i8", ALLOC_NONE, 468704);
allocate([40,116,121,112,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,83,84,82,73,78,71,41,32,124,124,32,40,116,121,112,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,83,84,82,73,78,71,41,0] /* (type == GCRY_AC_IO_ */, "i8", ALLOC_NONE, 468788);
allocate([63,79,84,82,58,0] /* ?OTR:\00 */, "i8", ALLOC_NONE, 468848);
allocate([98,114,97,105,110,112,111,111,108,80,51,50,48,114,49,0] /* brainpoolP320r1\00 */, "i8", ALLOC_NONE, 468856);
allocate([101,114,114,111,114,32,115,101,116,116,105,110,103,32,70,68,95,67,76,79,69,88,69,67,32,111,110,32,102,100,32,37,100,58,32,37,115,10,0] /* error setting FD_CLO */, "i8", ALLOC_NONE, 468872);
allocate([112,117,98,107,101,121,95,101,110,99,114,121,112,116,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_encrypt: algo */, "i8", ALLOC_NONE, 468912);
allocate([88,57,46,51,49,32,82,78,71,32,99,111,114,101,32,102,117,110,99,116,105,111,110,32,102,97,105,108,101,100,0] /* X9.31 RNG core funct */, "i8", ALLOC_NONE, 468940);
allocate([99,97,110,39,116,32,99,108,111,115,101,32,96,37,115,39,58,32,37,115,10,0] /* can't close `%s': %s */, "i8", ALLOC_NONE, 468972);
allocate([72,105,32,84,104,101,114,101,0] /* Hi There\00 */, "i8", ALLOC_NONE, 468996);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,120,32,111,102,32,115,105,122,101,32,37,117,0] /* choosing a random x  */, "i8", ALLOC_NONE, 469008);
allocate([40,112,117,98,108,105,99,45,107,101,121,40,101,99,99,40,112,37,109,41,40,97,37,109,41,40,98,37,109,41,40,103,37,109,41,40,110,37,109,41,41,41,0] /* (public-key(ecc(p%m) */, "i8", ALLOC_NONE, 469040);
allocate([100,101,114,105,118,101,45,112,97,114,109,115,0] /* derive-parms\00 */, "i8", ALLOC_NONE, 469084);
allocate([49,46,50,46,51,57,50,46,50,48,48,48,49,49,46,54,49,46,49,46,49,46,49,46,51,0] /* 1.2.392.200011.61.1. */, "i8", ALLOC_NONE, 469100);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,52,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 469128);
allocate([115,101,120,112,46,99,0] /* sexp.c\00 */, "i8", ALLOC_NONE, 469160);
allocate([115,101,99,117,114,101,32,109,101,109,111,114,121,32,105,115,32,100,105,115,97,98,108,101,100,0] /* secure memory is dis */, "i8", ALLOC_NONE, 469168);
allocate([32,37,48,50,88,0] /*  %02X\00 */, "i8", ALLOC_NONE, 469196);
allocate([112,97,100,108,111,99,107,45,109,109,117,108,0] /* padlock-mmul\00 */, "i8", ALLOC_NONE, 469204);
allocate([70,65,84,65,76,58,32,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,70,83,77,32,108,111,99,107,32,105,110,32,108,105,98,103,99,114,121,112,116,58,32,37,115,10,0] /* FATAL: failed to cre */, "i8", ALLOC_NONE, 469220);
allocate([48,120,53,52,55,101,102,56,51,53,99,51,100,97,99,52,102,100,57,55,102,56,52,54,49,97,49,52,54,49,49,100,99,57,99,50,55,55,52,53,49,51,50,100,101,100,56,101,53,52,53,99,49,100,53,52,99,55,50,102,48,52,54,57,57,55,0] /* 0x547ef835c3dac4fd97 */, "i8", ALLOC_NONE, 469276);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 469344);
allocate([63,79,84,82,124,0] /* ?OTR|\00 */, "i8", ALLOC_NONE, 469348);
allocate([104,97,118,97,108,0] /* haval\00 */, "i8", ALLOC_NONE, 469356);
allocate([65,69,83,0] /* AES\00 */, "i8", ALLOC_NONE, 469364);
allocate([48,120,56,98,100,50,97,101,98,57,99,98,55,101,53,55,99,98,50,99,52,98,52,56,50,102,102,99,56,49,98,55,97,102,98,57,100,101,50,55,101,49,101,51,98,100,50,51,99,50,51,97,52,52,53,51,98,100,57,97,99,101,51,50,54,50,0] /* 0x8bd2aeb9cb7e57cb2c */, "i8", ALLOC_NONE, 469368);
allocate([116,105,103,101,114,0] /* tiger\00 */, "i8", ALLOC_NONE, 469436);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 469444);
allocate([84,119,111,102,105,115,104,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-256 test dec */, "i8", ALLOC_NONE, 469448);
allocate([82,70,67,50,50,54,56,95,52,48,0] /* RFC2268_40\00 */, "i8", ALLOC_NONE, 469484);
allocate([221,175,53,161,147,97,122,186,204,65,115,73,174,32,65,49,18,230,250,78,137,169,126,162,10,158,238,230,75,85,211,154,33,146,153,42,39,79,193,168,54,186,60,35,163,254,235,189,69,77,68,35,100,60,232,14,42,154,201,79,165,76,164,159,0] /* \DD\AF5\A1\93az\BA\C */, "i8", ALLOC_NONE, 469496);
allocate([186,120,22,191,143,1,207,234,65,65,64,222,93,174,34,35,176,3,97,163,150,23,122,156,180,16,255,97,242,0,21,173,0] /* \BAx\16\BF\8F\01\CF\ */, "i8", ALLOC_NONE, 469564);
allocate([48,120,97,57,102,98,53,55,100,98,97,49,101,101,97,57,98,99,51,101,54,54,48,97,57,48,57,100,56,51,56,100,55,49,56,99,51,57,55,97,97,51,98,53,54,49,97,54,102,55,57,48,49,101,48,101,56,50,57,55,52,56,53,54,97,55,0] /* 0xa9fb57dba1eea9bc3e */, "i8", ALLOC_NONE, 469600);
allocate([109,100,52,0] /* md4\00 */, "i8", ALLOC_NONE, 469668);
allocate([132,152,62,68,28,59,210,110,186,174,74,161,249,81,41,229,229,70,112,241,0] /* \84\98_D\1C;\D2n\BA\ */, "i8", ALLOC_NONE, 469672);
allocate([83,101,114,112,101,110,116,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-256 test enc */, "i8", ALLOC_NONE, 469696);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,53,0] /* 1.2.410.200004.1.5\0 */, "i8", ALLOC_NONE, 469732);
allocate([48,120,50,54,100,99,53,99,54,99,101,57,52,97,52,98,52,52,102,51,51,48,98,53,100,57,98,98,100,55,55,99,98,102,57,53,56,52,49,54,50,57,53,99,102,55,101,49,99,101,54,98,99,99,100,99,49,56,102,102,56,99,48,55,98,54,0] /* 0x26dc5c6ce94a4b44f3 */, "i8", ALLOC_NONE, 469752);
allocate([109,100,50,0] /* md2\00 */, "i8", ALLOC_NONE, 469820);
allocate([100,101,114,105,118,101,45,112,97,114,109,115,0] /* derive-parms\00 */, "i8", ALLOC_NONE, 469824);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,52,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 469840);
allocate([48,120,55,100,53,97,48,57,55,53,102,99,50,99,51,48,53,55,101,101,102,54,55,53,51,48,52,49,55,97,102,102,101,55,102,98,56,48,53,53,99,49,50,54,100,99,53,99,54,99,101,57,52,97,52,98,52,52,102,51,51,48,98,53,100,57,0] /* 0x7d5a0975fc2c3057ee */, "i8", ALLOC_NONE, 469864);
allocate([82,70,67,50,50,54,56,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,51,32,102,97,105,108,101,100,46,0] /* RFC2268 encryption t */, "i8", ALLOC_NONE, 469932);
allocate([115,104,97,50,50,52,0] /* sha224\00 */, "i8", ALLOC_NONE, 469968);
allocate([41,41,0] /* ))\00 */, "i8", ALLOC_NONE, 469976);
allocate([48,120,97,57,102,98,53,55,100,98,97,49,101,101,97,57,98,99,51,101,54,54,48,97,57,48,57,100,56,51,56,100,55,50,54,101,51,98,102,54,50,51,100,53,50,54,50,48,50,56,50,48,49,51,52,56,49,100,49,102,54,101,53,51,55,55,0] /* 0xa9fb57dba1eea9bc3e */, "i8", ALLOC_NONE, 469980);
allocate([115,104,97,53,49,50,0] /* sha512\00 */, "i8", ALLOC_NONE, 470048);
allocate([102,105,112,115,49,56,54,45,51,32,112,98,105,116,115,32,112,61,37,117,32,113,61,37,117,32,99,111,117,110,116,101,114,61,37,100,10,0] /* fips186-3 pbits p=%u */, "i8", ALLOC_NONE, 470056);
allocate([98,114,97,105,110,112,111,111,108,80,50,53,54,114,49,0] /* brainpoolP256r1\00 */, "i8", ALLOC_NONE, 470096);
allocate([115,104,97,51,56,52,0] /* sha384\00 */, "i8", ALLOC_NONE, 470112);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 470120);
allocate([32,32,9,9,32,32,9,32,0] /*   \09\09  \09 \00 */, "i8", ALLOC_NONE, 470128);
allocate([48,120,53,56,97,97,53,54,102,55,55,50,99,48,55,50,54,102,50,52,99,54,98,56,57,101,52,101,99,100,97,99,50,52,51,53,52,98,57,101,57,57,99,97,97,51,102,54,100,51,55,54,49,52,48,50,99,100,0] /* 0x58aa56f772c0726f24 */, "i8", ALLOC_NONE, 470140);
allocate([97,108,103,111,114,105,116,104,109,32,100,105,115,97,98,108,101,100,0] /* algorithm disabled\0 */, "i8", ALLOC_NONE, 470200);
allocate([114,109,100,49,54,48,0] /* rmd160\00 */, "i8", ALLOC_NONE, 470220);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 470228);
allocate([48,120,48,100,57,48,50,57,97,100,50,99,55,101,53,99,102,52,51,52,48,56,50,51,98,50,97,56,55,100,99,54,56,99,57,101,52,99,101,51,49,55,52,99,49,101,54,101,102,100,101,101,49,50,99,48,55,100,0] /* 0x0d9029ad2c7e5cf434 */, "i8", ALLOC_NONE, 470240);
allocate([97,99,46,99,0] /* ac.c\00 */, "i8", ALLOC_NONE, 470300);
allocate([114,105,112,101,109,100,49,54,48,0] /* ripemd160\00 */, "i8", ALLOC_NONE, 470308);
allocate([48,120,100,55,99,49,51,52,97,97,50,54,52,51,54,54,56,54,50,97,49,56,51,48,50,53,55,53,100,48,102,98,57,56,100,49,49,54,98,99,52,98,54,100,100,101,98,99,97,51,97,53,97,55,57,51,57,102,0] /* 0xd7c134aa264366862a */, "i8", ALLOC_NONE, 470320);
allocate([99,97,110,39,116,32,111,112,101,110,32,37,115,58,32,37,115,10,0] /* can't open %s: %s\0A */, "i8", ALLOC_NONE, 470380);
allocate([115,104,97,50,53,54,0] /* sha256\00 */, "i8", ALLOC_NONE, 470400);
allocate([101,114,114,111,114,32,115,101,116,116,105,110,103,32,107,101,121,32,102,111,114,32,82,78,71,0] /* error setting key fo */, "i8", ALLOC_NONE, 470408);
allocate([99,97,110,39,116,32,119,114,105,116,101,32,96,37,115,39,58,32,37,115,10,0] /* can't write `%s': %s */, "i8", ALLOC_NONE, 470436);
allocate([100,97,116,97,45,57,32,107,101,121,45,50,48,0] /* data-9 key-20\00 */, "i8", ALLOC_NONE, 470460);
allocate([101,108,103,97,109,97,108,46,99,0] /* elgamal.c\00 */, "i8", ALLOC_NONE, 470476);
allocate([115,101,0] /* se\00 */, "i8", ALLOC_NONE, 470488);
allocate([116,114,97,110,115,105,101,110,116,45,107,101,121,0] /* transient-key\00 */, "i8", ALLOC_NONE, 470492);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,52,0] /* 0.3.4401.5.3.1.9.44\ */, "i8", ALLOC_NONE, 470508);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,51,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 470528);
allocate([37,42,115,91,117,110,107,110,111,119,110,32,116,97,103,32,37,100,93,10,0] /* %_s[unknown tag %d]\ */, "i8", ALLOC_NONE, 470560);
allocate([99,97,110,39,116,32,108,111,99,107,32,109,101,109,111,114,121,58,32,37,115,10,0] /* can't lock memory: % */, "i8", ALLOC_NONE, 470584);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 470608);
allocate([37,48,50,88,0] /* %02X\00 */, "i8", ALLOC_NONE, 470612);
allocate([112,97,100,108,111,99,107,45,115,104,97,0] /* padlock-sha\00 */, "i8", ALLOC_NONE, 470620);
allocate([70,65,84,65,76,58,32,101,114,114,111,114,32,114,101,97,100,105,110,103,32,96,37,115,39,32,105,110,32,108,105,98,103,99,114,121,112,116,58,32,37,115,10,0] /* FATAL: error reading */, "i8", ALLOC_NONE, 470632);
allocate([48,120,50,53,56,48,102,54,51,99,99,102,101,52,52,49,51,56,56,55,48,55,49,51,98,49,97,57,50,51,54,57,101,51,51,101,50,49,51,53,100,50,54,54,100,98,98,51,55,50,51,56,54,99,52,48,48,98,0] /* 0x2580f63ccfe4413887 */, "i8", ALLOC_NONE, 470676);
allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_NONE, 470736);
allocate([63,79,84,82,0] /* ?OTR\00 */, "i8", ALLOC_NONE, 470740);
allocate([109,100,53,0] /* md5\00 */, "i8", ALLOC_NONE, 470748);
allocate([48,120,54,56,97,53,101,54,50,99,97,57,99,101,54,99,49,99,50,57,57,56,48,51,97,54,99,49,53,51,48,98,53,49,52,101,49,56,50,97,100,56,98,48,48,52,50,97,53,57,99,97,100,50,57,102,52,51,0] /* 0x68a5e62ca9ce6c1c29 */, "i8", ALLOC_NONE, 470752);
allocate([115,104,97,49,0] /* sha1\00 */, "i8", ALLOC_NONE, 470812);
allocate(1, "i8", ALLOC_NONE, 470820);
allocate([84,119,111,102,105,115,104,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-256 test enc */, "i8", ALLOC_NONE, 470824);
allocate([97,98,99,0] /* abc\00 */, "i8", ALLOC_NONE, 470860);
allocate([97,98,99,0] /* abc\00 */, "i8", ALLOC_NONE, 470864);
allocate([48,120,100,55,99,49,51,52,97,97,50,54,52,51,54,54,56,54,50,97,49,56,51,48,50,53,55,53,100,49,100,55,56,55,98,48,57,102,48,55,53,55,57,55,100,97,56,57,102,53,55,101,99,56,99,48,102,102,0] /* 0xd7c134aa264366862a */, "i8", ALLOC_NONE, 470868);
allocate([114,97,110,100,111,109,45,111,118,101,114,114,105,100,101,0] /* random-override\00 */, "i8", ALLOC_NONE, 470928);
allocate([97,98,99,100,98,99,100,101,99,100,101,102,100,101,102,103,101,102,103,104,102,103,104,105,103,104,105,106,104,105,106,107,105,106,107,108,106,107,108,109,107,108,109,110,108,109,110,111,109,110,111,112,110,111,112,113,0] /* abcdbcdecdefdefgefgh */, "i8", ALLOC_NONE, 470944);
allocate([83,101,114,112,101,110,116,45,49,57,50,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-192 test enc */, "i8", ALLOC_NONE, 471004);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,52,0] /* 1.2.410.200004.1.4\0 */, "i8", ALLOC_NONE, 471040);
allocate([98,114,97,105,110,112,111,111,108,80,50,50,52,114,49,0] /* brainpoolP224r1\00 */, "i8", ALLOC_NONE, 471060);
allocate([108,97,98,101,108,0] /* label\00 */, "i8", ALLOC_NONE, 471076);
allocate([110,0] /* n\00 */, "i8", ALLOC_NONE, 471084);
allocate([111,105,100,46,49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,0] /* oid.1.2.840.113549.1 */, "i8", ALLOC_NONE, 471088);
allocate([99,104,101,99,107,105,110,103,32,103,58,0] /* checking g:\00 */, "i8", ALLOC_NONE, 471116);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,51,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 471128);
allocate([48,120,49,52,98,54,57,48,56,54,54,97,98,100,53,98,98,56,56,98,53,102,52,56,50,56,99,49,52,57,48,48,48,50,101,54,55,55,51,102,97,50,102,97,50,57,57,98,56,102,0] /* 0x14b690866abd5bb88b */, "i8", ALLOC_NONE, 471152);
allocate([82,70,67,50,50,54,56,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,50,32,102,97,105,108,101,100,46,0] /* RFC2268 decryption t */, "i8", ALLOC_NONE, 471204);
allocate([77,68,53,0] /* MD5\00 */, "i8", ALLOC_NONE, 471240);
allocate([104,97,115,104,45,97,108,103,111,0] /* hash-algo\00 */, "i8", ALLOC_NONE, 471244);
allocate([111,112,101,110,112,103,112,45,114,115,97,0] /* openpgp-rsa\00 */, "i8", ALLOC_NONE, 471256);
allocate([77,68,52,0] /* MD4\00 */, "i8", ALLOC_NONE, 471268);
allocate([37,109,41,0] /* %m)\00 */, "i8", ALLOC_NONE, 471272);
allocate([48,120,99,48,97,48,54,52,55,101,97,97,98,54,97,52,56,55,53,51,98,48,51,51,99,53,54,99,98,48,102,48,57,48,48,97,50,102,53,99,52,56,53,51,51,55,53,102,100,54,0] /* 0xc0a0647eaab6a48753 */, "i8", ALLOC_NONE, 471276);
allocate([110,111,45,98,108,105,110,100,105,110,103,0] /* no-blinding\00 */, "i8", ALLOC_NONE, 471328);
allocate([98,97,100,32,115,105,103,110,97,116,117,114,101,32,110,111,116,32,100,101,116,101,99,116,101,100,0] /* bad signature not de */, "i8", ALLOC_NONE, 471340);
allocate([115,101,101,100,108,101,110,32,60,61,32,115,105,122,101,111,102,32,115,101,101,100,95,104,101,108,112,95,98,117,102,102,101,114,0] /* seedlen _= sizeof se */, "i8", ALLOC_NONE, 471368);
allocate([48,120,99,51,48,50,102,52,49,100,57,51,50,97,51,54,99,100,97,55,97,51,52,54,50,102,57,101,57,101,57,49,54,98,53,98,101,56,102,49,48,50,57,97,99,52,97,99,99,49,0] /* 0xc302f41d932a36cda7 */, "i8", ALLOC_NONE, 471404);
allocate([112,115,115,0] /* pss\00 */, "i8", ALLOC_NONE, 471456);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 471460);
allocate([118,101,114,105,102,121,32,102,97,105,108,101,100,0] /* verify failed\00 */, "i8", ALLOC_NONE, 471468);
allocate([32,9,32,9,32,32,9,32,0] /*  \09 \09  \09 \00 */, "i8", ALLOC_NONE, 471484);
allocate([48,120,52,54,57,97,50,56,101,102,55,99,50,56,99,99,97,51,100,99,55,50,49,100,48,52,52,102,52,52,57,54,98,99,99,97,55,101,102,52,49,52,54,102,98,102,50,53,99,57,0] /* 0x469a28ef7c28cca3dc */, "i8", ALLOC_NONE, 471496);
allocate([110,111,32,115,101,108,102,116,101,115,116,32,97,118,97,105,108,97,98,108,101,0] /* no selftest availabl */, "i8", ALLOC_NONE, 471548);
allocate([111,97,101,112,0] /* oaep\00 */, "i8", ALLOC_NONE, 471572);
allocate([115,105,103,110,105,110,103,32,102,97,105,108,101,100,0] /* signing failed\00 */, "i8", ALLOC_NONE, 471580);
allocate([112,114,111,116,111,99,111,108,0] /* protocol\00 */, "i8", ALLOC_NONE, 471596);
allocate([99,111,110,116,101,120,116,45,62,99,111,110,116,101,120,116,95,112,114,105,118,32,33,61,32,78,85,76,76,0] /* context-_context_pri */, "i8", ALLOC_NONE, 471608);
allocate([48,120,54,97,57,49,49,55,52,48,55,54,98,49,101,48,101,49,57,99,51,57,99,48,51,49,102,101,56,54,56,53,99,49,99,97,101,48,52,48,101,53,99,54,57,97,50,56,101,102,0] /* 0x6a91174076b1e0e19c */, "i8", ALLOC_NONE, 471640);
allocate([40,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,82,69,65,68,65,66,76,69,41,32,124,124,32,40,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,87,82,73,84,65,66,76,69,41,0] /* (mode == GCRY_AC_IO_ */, "i8", ALLOC_NONE, 471692);
allocate([112,107,99,115,49,0] /* pkcs1\00 */, "i8", ALLOC_NONE, 471756);
allocate([114,115,97,0] /* rsa\00 */, "i8", ALLOC_NONE, 471764);
allocate([48,120,99,51,48,50,102,52,49,100,57,51,50,97,51,54,99,100,97,55,97,51,52,54,51,48,57,51,100,49,56,100,98,55,56,102,99,101,52,55,54,100,101,49,97,56,54,50,57,55,0] /* 0xc302f41d932a36cda7 */, "i8", ALLOC_NONE, 471768);
allocate([114,101,97,100,32,101,114,114,111,114,32,111,110,32,114,97,110,100,111,109,32,100,101,118,105,99,101,58,32,37,115,10,0] /* read error on random */, "i8", ALLOC_NONE, 471820);
allocate([114,97,119,0] /* raw\00 */, "i8", ALLOC_NONE, 471856);
allocate([101,114,114,111,114,32,99,114,101,97,116,105,110,103,32,99,105,112,104,101,114,32,99,111,110,116,101,120,116,32,102,111,114,32,82,78,71,0] /* error creating ciphe */, "i8", ALLOC_NONE, 471860);
allocate([99,97,110,39,116,32,99,114,101,97,116,101,32,96,37,115,39,58,32,37,115,10,0] /* can't create `%s': % */, "i8", ALLOC_NONE, 471900);
allocate([105,100,120,32,62,61,32,48,32,38,38,32,105,100,120,32,60,32,40,49,60,60,107,41,0] /* idx _= 0 && idx _ (1 */, "i8", ALLOC_NONE, 471924);
allocate([101,110,99,45,118,97,108,0] /* enc-val\00 */, "i8", ALLOC_NONE, 471952);
allocate([74,101,102,101,0] /* Jefe\00 */, "i8", ALLOC_NONE, 471960);
allocate([120,118,97,108,117,101,0] /* xvalue\00 */, "i8", ALLOC_NONE, 471968);
allocate([69,67,68,72,0] /* ECDH\00 */, "i8", ALLOC_NONE, 471976);
allocate([113,98,105,116,115,0] /* qbits\00 */, "i8", ALLOC_NONE, 471984);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,51,0] /* 0.3.4401.5.3.1.9.43\ */, "i8", ALLOC_NONE, 471992);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,50,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 472012);
allocate([34,93,10,0] /* \22]\0A\00 */, "i8", ALLOC_NONE, 472044);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,115,101,116,32,117,105,100,58,32,37,115,10,0] /* failed to reset uid: */, "i8", ALLOC_NONE, 472048);
allocate([37,115,32,0] /* %s \00 */, "i8", ALLOC_NONE, 472076);
allocate([112,97,100,108,111,99,107,45,97,101,115,0] /* padlock-aes\00 */, "i8", ALLOC_NONE, 472080);
allocate([47,112,114,111,99,47,118,101,114,115,105,111,110,0] /* /proc/version\00 */, "i8", ALLOC_NONE, 472092);
allocate([98,114,97,105,110,112,111,111,108,80,49,57,50,114,49,0] /* brainpoolP192r1\00 */, "i8", ALLOC_NONE, 472108);
allocate([48,0] /* 0\00 */, "i8", ALLOC_NONE, 472124);
allocate(1, "i8", ALLOC_NONE, 472128);
allocate([101,110,99,45,118,97,108,0] /* enc-val\00 */, "i8", ALLOC_NONE, 472132);
allocate([109,105,115,109,97,116,99,104,0] /* mismatch\00 */, "i8", ALLOC_NONE, 472140);
allocate([48,120,49,54,54,55,99,98,52,55,55,97,49,97,56,101,99,51,51,56,102,57,52,55,52,49,54,54,57,99,57,55,54,51,49,54,100,97,54,51,50,49,0] /* 0x1667cb477a1a8ec338 */, "i8", ALLOC_NONE, 472152);
allocate([32,112,108,97,105,110,58,0] /*  plain:\00 */, "i8", ALLOC_NONE, 472196);
allocate([9,37,115,10,0] /* \09%s\0A\00 */, "i8", ALLOC_NONE, 472204);
allocate([84,119,111,102,105,115,104,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-128 test dec */, "i8", ALLOC_NONE, 472212);
allocate([100,101,99,114,121,112,116,32,114,101,116,117,114,110,101,100,32,110,111,32,112,108,97,105,110,116,101,120,116,0] /* decrypt returned no  */, "i8", ALLOC_NONE, 472248);
allocate([115,104,111,114,116,32,115,116,114,105,110,103,0] /* short string\00 */, "i8", ALLOC_NONE, 472280);
allocate([115,104,111,114,116,32,115,116,114,105,110,103,0] /* short string\00 */, "i8", ALLOC_NONE, 472296);
allocate([48,120,98,101,100,53,97,102,49,54,101,97,51,102,54,97,52,102,54,50,57,51,56,99,52,54,51,49,101,98,53,97,102,55,98,100,98,99,100,98,99,51,0] /* 0xbed5af16ea3f6a4f62 */, "i8", ALLOC_NONE, 472312);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 472356);
allocate([112,117,98,107,101,121,95,100,101,99,114,121,112,116,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_decrypt: algo */, "i8", ALLOC_NONE, 472360);
allocate([108,111,110,103,32,115,116,114,105,110,103,0] /* long string\00 */, "i8", ALLOC_NONE, 472388);
allocate([118,97,108,117,101,0] /* value\00 */, "i8", ALLOC_NONE, 472400);
allocate([83,101,114,112,101,110,116,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Serpent-128 test enc */, "i8", ALLOC_NONE, 472408);
allocate([49,46,50,46,52,49,48,46,50,48,48,48,48,52,46,49,46,51,0] /* 1.2.410.200004.1.3\0 */, "i8", ALLOC_NONE, 472444);
allocate([48,120,101,57,53,101,52,97,53,102,55,51,55,48,53,57,100,99,54,48,100,102,53,57,57,49,100,52,53,48,50,57,52,48,57,101,54,48,102,99,48,57,0] /* 0xe95e4a5f737059dc60 */, "i8", ALLOC_NONE, 472464);
allocate([111,112,101,110,112,103,112,45,100,115,97,0] /* openpgp-dsa\00 */, "i8", ALLOC_NONE, 472508);
allocate([118,97,108,117,101,32,101,120,116,114,97,99,116,101,100,32,102,114,111,109,32,80,75,67,83,35,49,32,98,108,111,99,107,32,116,121,112,101,32,50,32,101,110,99,111,100,101,100,32,100,97,116,97,58,0] /* value extracted from */, "i8", ALLOC_NONE, 472520);
allocate([115,0] /* s\00 */, "i8", ALLOC_NONE, 472576);
allocate([100,101,99,114,121,112,116,32,102,97,105,108,101,100,0] /* decrypt failed\00 */, "i8", ALLOC_NONE, 472580);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,50,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 472596);
allocate([48,120,49,101,53,56,57,97,56,53,57,53,52,50,51,52,49,50,49,51,52,102,97,97,50,100,98,100,101,99,57,53,99,56,100,56,54,55,53,101,53,56,0] /* 0x1e589a859542341213 */, "i8", ALLOC_NONE, 472620);
allocate([100,115,97,0] /* dsa\00 */, "i8", ALLOC_NONE, 472664);
allocate([82,70,67,50,50,54,56,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,50,32,102,97,105,108,101,100,46,0] /* RFC2268 encryption t */, "i8", ALLOC_NONE, 472668);
allocate([118,97,108,117,101,32,101,120,116,114,97,99,116,101,100,32,102,114,111,109,32,79,65,69,80,32,101,110,99,111,100,101,100,32,100,97,116,97,58,0] /* value extracted from */, "i8", ALLOC_NONE, 472704);
allocate([99,105,112,104,101,114,116,101,120,116,32,109,97,116,99,104,101,115,32,112,108,97,105,110,116,101,120,116,0] /* ciphertext matches p */, "i8", ALLOC_NONE, 472744);
allocate([68,69,83,0] /* DES\00 */, "i8", ALLOC_NONE, 472776);
allocate([40,101,110,99,45,118,97,108,40,0] /* (enc-val(\00 */, "i8", ALLOC_NONE, 472780);
allocate([48,120,51,52,48,101,55,98,101,50,97,50,56,48,101,98,55,52,101,50,98,101,54,49,98,97,100,97,55,52,53,100,57,55,101,56,102,55,99,51,48,48,0] /* 0x340e7be2a280eb74e2 */, "i8", ALLOC_NONE, 472792);
allocate([98,97,100,32,115,105,103,110,97,116,117,114,101,32,110,111,116,32,100,101,116,101,99,116,101,100,0] /* bad signature not de */, "i8", ALLOC_NONE, 472836);
allocate(1, "i8", ALLOC_NONE, 472864);
allocate([103,99,114,121,95,112,107,95,100,101,99,114,121,112,116,32,114,101,116,117,114,110,101,100,32,103,97,114,98,97,103,101,0] /* gcry_pk_decrypt retu */, "i8", ALLOC_NONE, 472868);
allocate([95,103,99,114,121,95,109,100,95,103,101,116,95,97,108,103,111,95,100,108,101,110,32,40,104,97,115,104,97,108,103,111,41,32,61,61,32,113,98,105,116,115,47,56,0] /* _gcry_md_get_algo_dl */, "i8", ALLOC_NONE, 472904);
allocate([48,120,101,57,53,101,52,97,53,102,55,51,55,48,53,57,100,99,54,48,100,102,99,55,97,100,57,53,98,51,100,56,49,51,57,53,49,53,54,50,48,102,0] /* 0xe95e4a5f737059dc60 */, "i8", ALLOC_NONE, 472952);
allocate([118,101,114,105,102,121,32,102,97,105,108,101,100,0] /* verify failed\00 */, "i8", ALLOC_NONE, 472996);
allocate([32,32,32,115,105,103,58,0] /*    sig:\00 */, "i8", ALLOC_NONE, 473012);
allocate([103,99,114,121,95,109,100,95,111,112,101,110,32,102,97,105,108,101,100,32,102,111,114,32,97,108,103,111,32,37,100,58,32,37,115,0] /* gcry_md_open failed  */, "i8", ALLOC_NONE, 473020);
allocate([101,110,99,114,121,112,116,32,102,97,105,108,101,100,0] /* encrypt failed\00 */, "i8", ALLOC_NONE, 473056);
allocate([68,69,83,32,109,97,105,110,116,101,110,97,110,99,101,32,116,101,115,116,32,102,97,105,108,101,100,46,0] /* DES maintenance test */, "i8", ALLOC_NONE, 473072);
allocate([32,9,32,32,9,9,9,9,32,9,32,9,32,9,32,32,0] /*  \09  \09\09\09\09 \ */, "i8", ALLOC_NONE, 473104);
allocate([98,114,97,105,110,112,111,111,108,80,49,54,48,114,49,0] /* brainpoolP160r1\00 */, "i8", ALLOC_NONE, 473124);
allocate([115,105,103,110,105,110,103,32,102,97,105,108,101,100,0] /* signing failed\00 */, "i8", ALLOC_NONE, 473140);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 473156);
allocate([32,32,100,97,116,97,58,0] /*   data:\00 */, "i8", ALLOC_NONE, 473164);
allocate([99,111,110,118,101,114,116,105,110,103,32,100,97,116,97,32,102,97,105,108,101,100,0] /* converting data fail */, "i8", ALLOC_NONE, 473172);
allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NONE, 473196);
allocate([115,109,115,116,97,116,101,32,33,61,32,78,85,76,76,0] /* smstate != NULL\00 */, "i8", ALLOC_NONE, 473204);
allocate([48,120,49,49,56,51,57,50,57,54,97,55,56,57,97,51,98,99,48,48,52,53,99,56,97,53,102,98,52,50,99,55,100,49,98,100,57,57,56,102,53,52,52,52,57,53,55,57,98,52,52,54,56,49,55,97,102,98,100,49,55,50,55,51,101,54,54,50,99,57,55,101,101,55,50,57,57,53,101,102,52,50,54,52,48,99,53,53,48,98,57,48,49,51,102,97,100,48,55,54,49,51,53,51,99,55,48,56,54,97,50,55,50,99,50,52,48,56,56,98,101,57,52,55,54,57,102,100,49,54,54,53,48,0] /* 0x11839296a789a3bc00 */, "i8", ALLOC_NONE, 473220);
allocate([99,111,110,118,101,114,116,105,110,103,32,100,97,116,97,32,102,97,105,108,101,100,0] /* converting data fail */, "i8", ALLOC_NONE, 473356);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 473380);
allocate([32,32,115,107,101,121,58,0] /*   skey:\00 */, "i8", ALLOC_NONE, 473384);
allocate([40,100,97,116,97,32,40,102,108,97,103,115,32,114,97,119,41,32,40,118,97,108,117,101,32,37,109,41,41,0] /* (data (flags raw) (v */, "i8", ALLOC_NONE, 473392);
allocate([112,117,98,107,101,121,95,115,105,103,110,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_sign: algo=%d */, "i8", ALLOC_NONE, 473424);
allocate([48,120,99,54,56,53,56,101,48,54,98,55,48,52,48,52,101,57,99,100,57,101,51,101,99,98,54,54,50,51,57,53,98,52,52,50,57,99,54,52,56,49,51,57,48,53,51,102,98,53,50,49,102,56,50,56,97,102,54,48,54,98,52,100,51,100,98,97,97,49,52,98,53,101,55,55,101,102,101,55,53,57,50,56,102,101,49,100,99,49,50,55,97,50,102,102,97,56,100,101,51,51,52,56,98,51,99,49,56,53,54,97,52,50,57,98,102,57,55,101,55,101,51,49,99,50,101,53,98,100,54,54,0] /* 0xc6858e06b70404e9cd */, "i8", ALLOC_NONE, 473448);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 473584);
allocate([98,111,103,117,115,32,114,101,97,100,32,102,114,111,109,32,114,97,110,100,111,109,32,100,101,118,105,99,101,32,40,110,61,37,100,41,10,0] /* bogus read from rand */, "i8", ALLOC_NONE, 473592);
allocate([69,120,112,101,99,116,101,100,32,108,105,98,111,116,114,32,65,80,73,32,118,101,114,115,105,111,110,32,37,117,46,37,117,46,37,117,32,105,110,99,111,109,112,97,116,105,98,108,101,32,119,105,116,104,32,97,99,116,117,97,108,32,118,101,114,115,105,111,110,32,37,117,46,37,117,46,37,117,46,32,32,65,98,111,114,116,105,110,103,46,10,0] /* Expected libotr API  */, "i8", ALLOC_NONE, 473632);
allocate([116,101,109,112,118,97,108,117,101,95,102,111,114,95,120,57,51,49,95,97,101,115,95,100,114,105,118,101,114,0] /* tempvalue_for_x931_a */, "i8", ALLOC_NONE, 473724);
allocate([37,115,9,37,115,9,37,48,56,120,10,0] /* %s\09%s\09%08x\0A\00 */, "i8", ALLOC_NONE, 473756);
allocate([110,111,116,101,58,32,114,97,110,100,111,109,95,115,101,101,100,32,102,105,108,101,32,110,111,116,32,117,112,100,97,116,101,100,10,0] /* note: random_seed fi */, "i8", ALLOC_NONE, 473768);
allocate([107,32,60,32,49,48,0] /* k _ 10\00 */, "i8", ALLOC_NONE, 473804);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 473812);
allocate([119,104,97,116,32,100,111,32,121,97,32,119,97,110,116,32,102,111,114,32,110,111,116,104,105,110,103,63,0] /* what do ya want for  */, "i8", ALLOC_NONE, 473820);
allocate([114,115,0] /* rs\00 */, "i8", ALLOC_NONE, 473852);
allocate([114,115,0] /* rs\00 */, "i8", ALLOC_NONE, 473856);
allocate([114,115,0] /* rs\00 */, "i8", ALLOC_NONE, 473860);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,49,0] /* 0.3.4401.5.3.1.9.41\ */, "i8", ALLOC_NONE, 473864);
allocate([66,108,111,119,102,105,115,104,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,49,41,46,0] /* Blowfish selftest fa */, "i8", ALLOC_NONE, 473884);
allocate([37,42,115,91,100,97,116,97,61,34,0] /* %_s[data=\22\00 */, "i8", ALLOC_NONE, 473916);
allocate([79,111,112,115,44,32,115,101,99,117,114,101,32,109,101,109,111,114,121,32,112,111,111,108,32,97,108,114,101,97,100,121,32,105,110,105,116,105,97,108,105,122,101,100,10,0] /* Oops, secure memory  */, "i8", ALLOC_NONE, 473928);
allocate([65,115,115,101,114,116,105,111,110,32,96,37,115,39,32,102,97,105,108,101,100,32,40,37,115,58,37,100,58,37,115,41,10,0] /* Assertion `%s' faile */, "i8", ALLOC_NONE, 473976);
allocate([112,97,100,108,111,99,107,45,114,110,103,0] /* padlock-rng\00 */, "i8", ALLOC_NONE, 474012);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 474024);
allocate([48,120,49,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,97,53,49,56,54,56,55,56,51,98,102,50,102,57,54,54,98,55,102,99,99,48,49,52,56,102,55,48,57,97,53,100,48,51,98,98,53,99,57,98,56,56,57,57,99,52,55,97,101,98,98,54,102,98,55,49,101,57,49,51,56,54,52,48,57,0] /* 0x1fffffffffffffffff */, "i8", ALLOC_NONE, 474028);
allocate([115,105,103,110,0] /* sign\00 */, "i8", ALLOC_NONE, 474164);
allocate([109,112,105,117,116,105,108,46,99,0] /* mpiutil.c\00 */, "i8", ALLOC_NONE, 474172);
allocate([37,108,88,0] /* %lX\00 */, "i8", ALLOC_NONE, 474184);
allocate([63,79,84,82,32,69,114,114,111,114,58,32,0] /* ?OTR Error: \00 */, "i8", ALLOC_NONE, 474188);
allocate([110,101,100,112,113,117,0] /* nedpqu\00 */, "i8", ALLOC_NONE, 474204);
allocate([101,110,99,114,121,112,116,0] /* encrypt\00 */, "i8", ALLOC_NONE, 474212);
allocate([65,69,83,45,49,50,56,0] /* AES-128\00 */, "i8", ALLOC_NONE, 474220);
allocate([103,99,114,121,95,99,105,112,104,101,114,95,99,108,111,115,101,58,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,47,105,110,118,97,108,105,100,32,104,97,110,100,108,101,0] /* gcry_cipher_close: a */, "i8", ALLOC_NONE, 474228);
allocate([48,120,48,53,49,57,53,51,101,98,57,54,49,56,101,49,99,57,97,49,102,57,50,57,97,50,49,97,48,98,54,56,53,52,48,101,101,97,50,100,97,55,50,53,98,57,57,98,51,49,53,102,51,98,56,98,52,56,57,57,49,56,101,102,49,48,57,101,49,53,54,49,57,51,57,53,49,101,99,55,101,57,51,55,98,49,54,53,50,99,48,98,100,51,98,98,49,98,102,48,55,51,53,55,51,100,102,56,56,51,100,50,99,51,52,102,49,101,102,52,53,49,102,100,52,54,98,53,48,51,102,48,48,0] /* 0x051953eb9618e1c9a1 */, "i8", ALLOC_NONE, 474280);
allocate([107,101,121,32,99,111,110,115,105,115,116,101,110,99,121,0] /* key consistency\00 */, "i8", ALLOC_NONE, 474416);
allocate([82,83,65,0] /* RSA\00 */, "i8", ALLOC_NONE, 474432);
allocate([37,48,50,120,0] /* %02x\00 */, "i8", ALLOC_NONE, 474436);
allocate([84,119,111,102,105,115,104,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* Twofish-128 test enc */, "i8", ALLOC_NONE, 474444);
allocate([115,105,103,110,0] /* sign\00 */, "i8", ALLOC_NONE, 474480);
allocate([49,46,51,46,54,46,49,46,52,46,49,46,49,49,53,57,49,46,49,50,46,50,0] /* 1.3.6.1.4.1.11591.12 */, "i8", ALLOC_NONE, 474488);
allocate([65,69,83,49,50,56,0] /* AES128\00 */, "i8", ALLOC_NONE, 474512);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,50,0] /* 1.2.840.113549.1.1.1 */, "i8", ALLOC_NONE, 474520);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,49,0] /* 1.2.840.113549.1.1.1 */, "i8", ALLOC_NONE, 474544);
allocate([158,168,134,239,226,104,219,236,206,66,12,117,36,223,50,224,117,26,42,38,0] /* \9E\A8\86\EF\E2h\DB\ */, "i8", ALLOC_NONE, 474568);
allocatex01ffffffffffffffff */, "i8", ALLOC_NONE, 474592);
allocate([99,111,110,118,101,114,116,0] /* convert\00 */, "i8", ALLOC_NONE, 474728);
allocate([102,108,97,103,115,0] /* flags\00 */, "i8", ALLOC_NONE, 474736);
allocate([169,153,62,54,71,6,129,106,186,62,37,113,120,80,194,108,156,208,216,157,0] /* \A9\99_6G\06\81j\BA_ */, "i8", ALLOC_NONE, 474744);
allocate([107,101,121,32,99,111,110,115,105,115,116,101,110,99,121,0] /* key consistency\00 */, "i8", ALLOC_NONE, 474768);
allocate([83,101,114,112,101,110,116,32,116,101,115,116,32,102,97,105,108,117,114,101,58,32,37,115,10,0] /* Serpent test failure */, "i8", ALLOC_NONE, 474784);
allocate([82,73,74,78,68,65,69,76,0] /* RIJNDAEL\00 */, "i8", ALLOC_NONE, 474812);
allocate([83,69,69,68,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* SEED test decryption */, "i8", ALLOC_NONE, 474824);
allocate([83,97,109,112,108,101,32,35,52,0] /* Sample #4\00 */, "i8", ALLOC_NONE, 474856);
allocate([48,120,48,49,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0] /* 0x01ffffffffffffffff */, "i8", ALLOC_NONE, 474868);
allocate([100,115,97,32,32,104,0] /* dsa  h\00 */, "i8", ALLOC_NONE, 475004);
allocate([115,105,103,45,118,97,108,0] /* sig-val\00 */, "i8", ALLOC_NONE, 475012);
allocate([97,0] /* a\00 */, "i8", ALLOC_NONE, 475020);
allocate([99,111,110,118,101,114,116,0] /* convert\00 */, "i8", ALLOC_NONE, 475024);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475032);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,52,49,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475056);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,52,0] /* FIPS-198a, A.4\00 */, "i8", ALLOC_NONE, 475080);
allocate([78,73,83,84,32,80,45,53,50,49,0] /* NIST P-521\00 */, "i8", ALLOC_NONE, 475096);
allocate([115,101,101,100,0] /* seed\00 */, "i8", ALLOC_NONE, 475108);
allocate([82,70,67,50,50,54,56,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* RFC2268 decryption t */, "i8", ALLOC_NONE, 475116);
allocate([32,32,104,97,115,104,0] /*   hash\00 */, "i8", ALLOC_NONE, 475152);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,120,112,41,41,32,61,61,32,110,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 475160);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,51,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475196);
allocate([188,244,30,171,139,178,216,2,243,208,92,175,124,176,146,236,248,209,163,170,0] /* \BC\F4\1E\AB\8B\B2\D */, "i8", ALLOC_NONE, 475220);
allocate([48,120,51,54,49,55,100,101,52,97,57,54,50,54,50,99,54,102,53,100,57,101,57,56,98,102,57,50,57,50,100,99,50,57,102,56,102,52,49,100,98,100,50,56,57,97,49,52,55,99,101,57,100,97,51,49,49,51,98,53,102,48,98,56,99,48,48,97,54,48,98,49,99,101,49,100,55,101,56,49,57,100,55,97,52,51,49,100,55,99,57,48,101,97,48,101,53,102,0] /* 0x3617de4a96262c6f5d */, "i8", ALLOC_NONE, 475244);
allocate([40,101,110,99,45,118,97,108,40,37,115,40,97,37,98,41,41,41,0] /* (enc-val(%s(a%b)))\0 */, "i8", ALLOC_NONE, 475344);
allocate([33,100,101,114,105,118,101,112,97,114,109,115,0] /* !deriveparms\00 */, "i8", ALLOC_NONE, 475364);
allocate([70,65,84,65,76,58,32,102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,70,83,77,32,108,111,99,107,32,105,110,32,108,105,98,103,114,121,112,116,58,32,37,115,10,0] /* FATAL: failed to acq */, "i8", ALLOC_NONE, 475380);
allocate([32,32,32,115,105,103,0] /*    sig\00 */, "i8", ALLOC_NONE, 475436);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,120,105,41,41,32,61,61,32,49,48,49,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 475444);
allocate([112,114,105,109,101,103,101,110,46,99,0] /* primegen.c\00 */, "i8", ALLOC_NONE, 475480);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475492);
allocate([83,97,109,112,108,101,32,35,51,0] /* Sample #3\00 */, "i8", ALLOC_NONE, 475516);
allocate([48,120,97,97,56,55,99,97,50,50,98,101,56,98,48,53,51,55,56,101,98,49,99,55,49,101,102,51,50,48,97,100,55,52,54,101,49,100,51,98,54,50,56,98,97,55,57,98,57,56,53,57,102,55,52,49,101,48,56,50,53,52,50,97,51,56,53,53,48,50,102,50,53,100,98,102,53,53,50,57,54,99,51,97,53,52,53,101,51,56,55,50,55,54,48,97,98,55,0] /* 0xaa87ca22be8b05378e */, "i8", ALLOC_NONE, 475528);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,114,105,109,101,95,113,41,41,32,61,61,32,113,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 475628);
allocate([70,65,84,65,76,58,32,102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,70,83,77,32,108,111,99,107,32,105,110,32,108,105,98,103,114,121,112,116,58,32,37,115,10,0] /* FATAL: failed to rel */, "i8", ALLOC_NONE, 475672);
allocate([32,32,112,107,101,121,0] /*   pkey\00 */, "i8", ALLOC_NONE, 475728);
allocate([77,68,53,32,117,115,101,100,0] /* MD5 used\00 */, "i8", ALLOC_NONE, 475736);
allocate([32,32,117,0] /*   u\00 */, "i8", ALLOC_NONE, 475748);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,49,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 475752);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 475776);
allocate([63,79,84,82,0] /* ?OTR\00 */, "i8", ALLOC_NONE, 475784);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,51,0] /* FIPS-198a, A.3\00 */, "i8", ALLOC_NONE, 475792);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,99,55,54,51,52,100,56,49,102,52,51,55,50,100,100,102,53,56,49,97,48,100,98,50,52,56,98,48,97,55,55,97,101,99,101,99,49,57,54,97,99,99,99,53,50,57,55,51,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 475808);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,114,105,109,101,95,112,41,41,32,61,61,32,110,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 475908);
allocate([114,97,110,100,111,109,0] /* random\00 */, "i8", ALLOC_NONE, 475952);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 475960);
allocate([112,117,98,107,101,121,95,118,101,114,105,102,121,58,32,97,108,103,111,61,37,100,10,0] /* pubkey_verify: algo= */, "i8", ALLOC_NONE, 475968);
allocate([32,32,100,0] /*   d\00 */, "i8", ALLOC_NONE, 475992);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 475996);
allocate([97,99,99,111,117,110,116,0] /* account\00 */, "i8", ALLOC_NONE, 476000);
allocate([99,111,110,116,101,120,116,32,33,61,32,78,85,76,76,0] /* context != NULL\00 */, "i8", ALLOC_NONE, 476008);
allocate([9,34,211,64,95,170,61,25,79,130,164,88,48,115,125,92,198,199,93,36,0] /* \09\22\D3@_\AA=\19O\ */, "i8", ALLOC_NONE, 476024);
allocate([48,120,98,51,51,49,50,102,97,55,101,50,51,101,101,55,101,52,57,56,56,101,48,53,54,98,101,51,102,56,50,100,49,57,49,56,49,100,57,99,54,101,102,101,56,49,52,49,49,50,48,51,49,52,48,56,56,102,53,48,49,51,56,55,53,97,99,54,53,54,51,57,56,100,56,97,50,101,100,49,57,100,50,97,56,53,99,56,101,100,100,51,101,99,50,97,101,102,0] /* 0xb3312fa7e23ee7e498 */, "i8", ALLOC_NONE, 476048);
allocate([112,107,95,100,115,97,0] /* pk_dsa\00 */, "i8", ALLOC_NONE, 476148);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 476156);
allocate([40,37,115,32,37,37,109,41,0] /* (%s %%m)\00 */, "i8", ALLOC_NONE, 476160);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,102,111,117,110,100,0] /* algorithm not found\ */, "i8", ALLOC_NONE, 476172);
allocate([32,32,101,0] /*   e\00 */, "i8", ALLOC_NONE, 476192);
allocate([65,69,83,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-128 test decrypt */, "i8", ALLOC_NONE, 476196);
allocate([83,97,109,112,108,101,32,35,50,0] /* Sample #2\00 */, "i8", ALLOC_NONE, 476228);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,99,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 476240);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,107,32,0] /* choosing a random k  */, "i8", ALLOC_NONE, 476340);
allocate([32,40,0] /*  (\00 */, "i8", ALLOC_NONE, 476364);
allocate([115,101,108,101,99,116,40,41,32,101,114,114,111,114,58,32,37,115,10,0] /* select() error: %s\0 */, "i8", ALLOC_NONE, 476368);
allocate([97,108,103,111,114,105,116,104,109,32,100,105,115,97,98,108,101,100,0] /* algorithm disabled\0 */, "i8", ALLOC_NONE, 476388);
allocate([33,115,116,114,111,110,103,95,114,110,103,95,99,111,110,116,101,120,116,45,62,116,101,115,116,95,100,116,95,112,116,114,0] /* !strong_rng_context- */, "i8", ALLOC_NONE, 476408);
allocate([35,32,87,65,82,78,73,78,71,33,32,89,111,117,32,115,104,111,117,108,100,110,39,116,32,99,111,112,121,32,116,104,105,115,32,102,105,108,101,32,116,111,32,97,110,111,116,104,101,114,32,99,111,109,112,117,116,101,114,46,32,73,116,32,105,115,32,117,110,110,101,99,101,115,115,97,114,121,32,97,110,100,32,99,97,110,32,99,97,117,115,101,32,112,114,111,98,108,101,109,115,46,10,0] /* # WARNING! You shoul */, "i8", ALLOC_NONE, 476444);
allocate([114,97,110,100,111,109,45,99,115,112,114,110,103,46,99,0] /* random-csprng.c\00 */, "i8", ALLOC_NONE, 476548);
allocate([116,0] /* t\00 */, "i8", ALLOC_NONE, 476564);
allocate([100,97,116,97,45,50,56,32,107,101,121,45,52,0] /* data-28 key-4\00 */, "i8", ALLOC_NONE, 476568);
allocate([100,105,103,101,115,116,32,109,105,115,109,97,116,99,104,0] /* digest mismatch\00 */, "i8", ALLOC_NONE, 476584);
allocate([32,32,110,0] /*   n\00 */, "i8", ALLOC_NONE, 476600);
allocate([97,98,0] /* ab\00 */, "i8", ALLOC_NONE, 476604);
allocate([65,69,83,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-128 test encrypt */, "i8", ALLOC_NONE, 476608);
allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0] /* std::bad_alloc\00 */, "i8", ALLOC_NONE, 476640);
allocate(1, "i8", ALLOC_NONE, 476656);
allocate([110,111,32,115,101,108,102,116,101,115,116,32,97,118,97,105,108,97,98,108,101,0] /* no selftest availabl */, "i8", ALLOC_NONE, 476660);
allocate(1, "i8", ALLOC_NONE, 476684);
allocate([50,0] /* 2\00 */, "i8", ALLOC_NONE, 476688);
allocate([49,46,50,46,51,57,50,46,50,48,48,48,49,49,46,54,49,46,49,46,49,46,49,46,52,0] /* 1.2.392.200011.61.1. */, "i8", ALLOC_NONE, 476692);
allocate([50,78,208,254,244,19,162,3,0] /* 2N\D0\FE\F4\13\A2\03 */, "i8", ALLOC_NONE, 476720);
allocate([65,114,99,102,111,117,114,32,100,101,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* Arcfour decryption t */, "i8", ALLOC_NONE, 476732);
allocate([37,42,115,91,99,108,111,115,101,93,10,0] /* %_s[close]\0A\00 */, "i8", ALLOC_NONE, 476768);
allocate([102,97,105,108,101,100,32,116,111,32,100,114,111,112,32,115,101,116,117,105,100,10,0] /* failed to drop setui */, "i8", ALLOC_NONE, 476780);
allocate([40,112,117,98,108,105,99,45,107,101,121,32,40,100,115,97,32,40,112,32,37,109,41,40,113,32,37,109,41,40,103,32,37,109,41,40,121,32,37,109,41,41,41,0] /* (public-key (dsa (p  */, "i8", ALLOC_NONE, 476804);
allocate([46,46,46,32,116,104,105,115,32,105,115,32,97,32,98,117,103,32,40,37,115,58,37,100,58,37,115,41,10,0] /* ... this is a bug (% */, "i8", ALLOC_NONE, 476848);
allocate([111,117,116,32,111,102,32,99,111,114,101,32,105,110,32,115,101,99,117,114,101,32,109,101,109,111,114,121,0] /* out of core in secur */, "i8", ALLOC_NONE, 476880);
allocate([47,101,116,99,47,103,99,114,121,112,116,47,102,105,112,115,95,101,110,97,98,108,101,100,0] /* /etc/gcrypt/fips_ena */, "i8", ALLOC_NONE, 476912);
allocate([102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,82,78,71,32,108,111,99,107,58,32,37,115,10,0] /* failed to create the */, "i8", ALLOC_NONE, 476940);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,50,0] /* FIPS-198a, A.2\00 */, "i8", ALLOC_NONE, 476976);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 476992);
allocate([115,101,108,102,45,116,101,115,116,32,97,102,116,101,114,32,107,101,121,32,103,101,110,101,114,97,116,105,111,110,32,102,97,105,108,101,100,0] /* self-test after key  */, "i8", ALLOC_NONE, 477092);
allocate([33,97,112,0] /* !ap\00 */, "i8", ALLOC_NONE, 477132);
allocate([79,107,97,121,0] /* Okay\00 */, "i8", ALLOC_NONE, 477136);
allocate([37,48,56,108,88,0] /* %08lX\00 */, "i8", ALLOC_NONE, 477144);
allocate([114,101,115,45,62,100,32,61,61,32,114,112,0] /* res-_d == rp\00 */, "i8", ALLOC_NONE, 477152);
allocate([32,32,9,9,32,32,9,9,0] /*   \09\09  \09\09\00 */, "i8", ALLOC_NONE, 477168);
allocate([37,48,50,88,0] /* %02X\00 */, "i8", ALLOC_NONE, 477180);
allocate([114,115,97,45,117,115,101,45,101,0] /* rsa-use-e\00 */, "i8", ALLOC_NONE, 477188);
allocate([32,32,113,0] /*   q\00 */, "i8", ALLOC_NONE, 477200);
allocate([100,101,99,114,121,112,116,32,109,105,115,109,97,116,99,104,0] /* decrypt mismatch\00 */, "i8", ALLOC_NONE, 477204);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 477224);
allocate([99,111,110,116,101,120,116,46,99,0] /* context.c\00 */, "i8", ALLOC_NONE, 477232);
allocate([102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,82,78,71,32,108,111,99,107,58,32,37,115,10,0] /* failed to acquire th */, "i8", ALLOC_NONE, 477244);
allocate([79,76,163,213,214,139,167,204,10,18,8,201,198,30,156,93,160,64,60,10,0] /* OL\A3\D5\D6\8B\A7\CC */, "i8", ALLOC_NONE, 477280);
allocate([78,73,83,84,32,80,45,51,56,52,0] /* NIST P-384\00 */, "i8", ALLOC_NONE, 477304);
allocate([100,115,97,32,32,120,0] /* dsa  x\00 */, "i8", ALLOC_NONE, 477316);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 477324);
allocate([91,82,93,0] /* [R]\00 */, "i8", ALLOC_NONE, 477332);
allocate([37,115,9,37,115,9,37,115,9,0] /* %s\09%s\09%s\09\00 */, "i8", ALLOC_NONE, 477336);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 477348);
allocate([32,32,112,0] /*   p\00 */, "i8", ALLOC_NONE, 477352);
allocate([100,101,99,114,121,112,116,32,99,111,109,109,97,110,100,0] /* decrypt command\00 */, "i8", ALLOC_NONE, 477356);
allocate([84,73,71,69,82,50,0] /* TIGER2\00 */, "i8", ALLOC_NONE, 477372);
allocate([101,99,99,0] /* ecc\00 */, "i8", ALLOC_NONE, 477380);
allocate([121,0] /* y\00 */, "i8", ALLOC_NONE, 477384);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,50,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 477388);
allocate([109,101,109,111,114,121,32,99,111,114,114,117,112,116,105,111,110,32,100,101,116,101,99,116,101,100,32,105,110,32,82,78,71,32,99,111,110,116,101,120,116,32,37,112,10,0] /* memory corruption de */, "i8", ALLOC_NONE, 477412);
allocate([102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,110,111,110,99,101,32,98,117,102,102,101,114,32,108,111,99,107,58,32,37,115,10,0] /* failed to create the */, "i8", ALLOC_NONE, 477460);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,49,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 477504);
allocate([83,97,109,112,108,101,32,35,49,0] /* Sample #1\00 */, "i8", ALLOC_NONE, 477528);
allocate([48,120,52,102,101,51,52,50,101,50,102,101,49,97,55,102,57,98,56,101,101,55,101,98,52,97,55,99,48,102,57,101,49,54,50,98,99,101,51,51,53,55,54,98,51,49,53,101,99,101,99,98,98,54,52,48,54,56,51,55,98,102,53,49,102,53,0] /* 0x4fe342e2fe1a7f9b8e */, "i8", ALLOC_NONE, 477540);
allocate([100,115,97,32,32,121,0] /* dsa  y\00 */, "i8", ALLOC_NONE, 477608);
allocate([72,77,65,67,45,0] /* HMAC-\00 */, "i8", ALLOC_NONE, 477616);
allocate([109,115,103,45,109,97,108,102,111,114,109,101,100,0] /* msg-malformed\00 */, "i8", ALLOC_NONE, 477624);
allocate([97,98,99,0] /* abc\00 */, "i8", ALLOC_NONE, 477640);
allocate([112,32,97,110,100,32,113,32,97,114,101,32,115,119,97,112,112,101,100,10,0] /* p and q are swapped\ */, "i8", ALLOC_NONE, 477644);
allocate([101,110,99,114,121,112,116,32,109,105,115,109,97,116,99,104,0] /* encrypt mismatch\00 */, "i8", ALLOC_NONE, 477668);
allocate([83,69,82,80,69,78,84,50,53,54,0] /* SERPENT256\00 */, "i8", ALLOC_NONE, 477688);
allocate([112,97,98,103,110,0] /* pabgn\00 */, "i8", ALLOC_NONE, 477700);
allocate([103,0] /* g\00 */, "i8", ALLOC_NONE, 477708);
allocate([83,69,69,68,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* SEED test encryption */, "i8", ALLOC_NONE, 477712);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,82,78,71,32,108,111,99,107,58,32,37,115,10,0] /* failed to release th */, "i8", ALLOC_NONE, 477744);
allocate([102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,104,101,32,112,111,111,108,32,108,111,99,107,58,32,37,115,10,0] /* failed to create the */, "i8", ALLOC_NONE, 477780);
allocate([70,73,80,83,45,49,57,56,97,44,32,65,46,49,0] /* FIPS-198a, A.1\00 */, "i8", ALLOC_NONE, 477816);
allocate([48,120,54,98,49,55,100,49,102,50,101,49,50,99,52,50,52,55,102,56,98,99,101,54,101,53,54,51,97,52,52,48,102,50,55,55,48,51,55,100,56,49,50,100,101,98,51,51,97,48,102,52,97,49,51,57,52,53,100,56,57,56,99,50,57,54,0] /* 0x6b17d1f2e12c4247f8 */, "i8", ALLOC_NONE, 477832);
allocate([100,115,97,32,32,103,0] /* dsa  g\00 */, "i8", ALLOC_NONE, 477900);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 477908);
allocate([109,115,103,45,117,110,114,101,97,100,98,108,101,0] /* msg-unreadble\00 */, "i8", ALLOC_NONE, 477916);
allocate([110,101,100,112,113,117,0] /* nedpqu\00 */, "i8", ALLOC_NONE, 477932);
allocate([95,103,99,114,121,95,109,112,105,95,103,99,100,32,40,103,44,32,101,44,32,112,104,105,41,0] /* _gcry_mpi_gcd (g, e, */, "i8", ALLOC_NONE, 477940);
allocate([49,46,51,46,51,54,46,51,46,50,46,49,0] /* 1.3.36.3.2.1\00 */, "i8", ALLOC_NONE, 477968);
allocate([101,110,99,114,121,112,116,32,99,111,109,109,97,110,100,0] /* encrypt command\00 */, "i8", ALLOC_NONE, 477984);
allocate([63,79,84,82,124,37,48,56,120,124,37,48,56,120,44,37,48,53,104,117,44,37,48,53,104,117,44,37,115,44,0] /* ?OTR|%08x|%08x,%05hu */, "i8", ALLOC_NONE, 478000);
allocate([40,49,58,37,99,37,117,58,0] /* (1:%c%u:\00 */, "i8", ALLOC_NONE, 478032);
allocate([113,0] /* q\00 */, "i8", ALLOC_NONE, 478044);
allocate([101,114,114,111,114,32,99,114,101,97,116,105,110,103,32,107,101,121,32,102,111,114,32,82,78,71,58,32,37,115,10,0] /* error creating key f */, "i8", ALLOC_NONE, 478048);
allocate([110,111,32,101,110,116,114,111,112,121,32,103,97,116,104,101,114,105,110,103,32,109,111,100,117,108,101,32,100,101,116,101,99,116,101,100,10,0] /* no entropy gathering */, "i8", ALLOC_NONE, 478080);
allocate([100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,105,110,32,115,101,99,111,110,100,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,0] /* does not match in se */, "i8", ALLOC_NONE, 478120);
allocate([65,69,83,50,53,54,0] /* AES256\00 */, "i8", ALLOC_NONE, 478160);
allocate([48,120,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,98,99,101,54,102,97,97,100,97,55,49,55,57,101,56,52,102,51,98,57,99,97,99,50,102,99,54,51,50,53,53,49,0] /* 0xffffffff00000000ff */, "i8", ALLOC_NONE, 478168);
allocate([100,115,97,32,32,113,0] /* dsa  q\00 */, "i8", ALLOC_NONE, 478236);
allocate([104,109,97,99,0] /* hmac\00 */, "i8", ALLOC_NONE, 478244);
allocate([82,70,67,50,50,54,56,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* RFC2268 encryption t */, "i8", ALLOC_NONE, 478252);
allocate([109,115,103,45,110,111,116,45,105,110,45,112,114,105,118,97,116,101,0] /* msg-not-in-private\0 */, "i8", ALLOC_NONE, 478288);
allocate([88,113,0] /* Xq\00 */, "i8", ALLOC_NONE, 478308);
allocate([115,101,116,32,73,86,0] /* set IV\00 */, "i8", ALLOC_NONE, 478312);
allocate([63,79,84,82,44,37,48,53,104,117,44,37,48,53,104,117,44,37,115,44,0] /* ?OTR,%05hu,%05hu,%s, */, "i8", ALLOC_NONE, 478320);
allocate([115,104,97,100,111,119,101,100,45,112,114,105,118,97,116,101,45,107,101,121,0] /* shadowed-private-key */, "i8", ALLOC_NONE, 478344);
allocate([112,0] /* p\00 */, "i8", ALLOC_NONE, 478368);
allocate([101,114,114,111,114,32,99,114,101,97,116,105,110,103,32,99,105,112,104,101,114,32,99,111,110,116,101,120,116,32,102,111,114,32,82,78,71,58,32,37,115,10,0] /* error creating ciphe */, "i8", ALLOC_NONE, 478372);
allocate([47,100,101,118,47,117,114,97,110,100,111,109,0] /* /dev/urandom\00 */, "i8", ALLOC_NONE, 478416);
allocate([95,103,99,114,121,95,104,109,97,99,50,53,54,95,102,105,110,97,108,105,122,101,32,102,97,105,108,101,100,0] /* _gcry_hmac256_finali */, "i8", ALLOC_NONE, 478432);
allocate([48,120,53,97,99,54,51,53,100,56,97,97,51,97,57,51,101,55,98,51,101,98,98,100,53,53,55,54,57,56,56,54,98,99,54,53,49,100,48,54,98,48,99,99,53,51,98,48,102,54,51,98,99,101,51,99,51,101,50,55,100,50,54,48,52,98,0] /* 0x5ac635d8aa3a93e7b3 */, "i8", ALLOC_NONE, 478464);
allocate([100,115,97,32,32,112,0] /* dsa  p\00 */, "i8", ALLOC_NONE, 478532);
allocate([112,117,98,107,101,121,46,99,0] /* pubkey.c\00 */, "i8", ALLOC_NONE, 478540);
allocate([108,105,98,103,99,114,121,112,116,32,115,101,108,102,116,101,115,116,58,32,37,115,32,37,115,37,115,32,40,37,100,41,58,32,37,115,37,115,37,115,37,115,10,0] /* libgcrypt selftest:  */, "i8", ALLOC_NONE, 478552);
allocate([101,110,99,114,121,112,116,105,111,110,45,101,114,114,111,114,0] /* encryption-error\00 */, "i8", ALLOC_NONE, 478596);
allocate([88,113,50,0] /* Xq2\00 */, "i8", ALLOC_NONE, 478616);
allocate([113,98,105,116,115,47,56,32,60,61,32,115,105,122,101,111,102,32,100,105,103,101,115,116,0] /* qbits/8 _= sizeof di */, "i8", ALLOC_NONE, 478620);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,50,46,53,0] /* 1.2.840.113549.2.5\0 */, "i8", ALLOC_NONE, 478648);
allocate([115,101,116,32,107,101,121,0] /* set key\00 */, "i8", ALLOC_NONE, 478668);
allocate([63,79,84,82,44,37,104,117,44,37,104,117,44,37,110,37,42,91,94,44,93,44,37,110,0] /* ?OTR,%hu,%hu,%n%_[^, */, "i8", ALLOC_NONE, 478676);
allocate([112,114,111,116,101,99,116,101,100,45,112,114,105,118,97,116,101,45,107,101,121,0] /* protected-private-ke */, "i8", ALLOC_NONE, 478704);
allocate([119,43,98,0] /* w+b\00 */, "i8", ALLOC_NONE, 478728);
allocate([58,32,0] /* : \00 */, "i8", ALLOC_NONE, 478732);
allocate([115,101,118,101,114,101,32,101,114,114,111,114,32,103,101,116,116,105,110,103,32,114,97,110,100,111,109,10,0] /* severe error getting */, "i8", ALLOC_NONE, 478736);
allocate([47,100,101,118,47,114,97,110,100,111,109,0] /* /dev/random\00 */, "i8", ALLOC_NONE, 478768);
allocate([95,103,99,114,121,95,104,109,97,99,50,53,54,95,110,101,119,32,102,97,105,108,101,100,0] /* _gcry_hmac256_new fa */, "i8", ALLOC_NONE, 478780);
allocate([48,120,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,49,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,99,0] /* 0xffffffff0000000100 */, "i8", ALLOC_NONE, 478808);
allocate([113,98,105,116,115,32,62,61,32,49,54,48,0] /* qbits _= 160\00 */, "i8", ALLOC_NONE, 478876);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 478892);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 478900);
allocate([117,110,105,109,112,108,101,109,101,110,116,101,100,32,102,117,110,99,116,105,111,110,32,99,97,108,108,101,100,0] /* unimplemented functi */, "i8", ALLOC_NONE, 478912);
allocate([88,113,49,0] /* Xq1\00 */, "i8", ALLOC_NONE, 478944);
allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_NONE, 478948);
allocate([108,111,119,45,108,101,118,101,108,0] /* low-level\00 */, "i8", ALLOC_NONE, 478956);
allocate([63,79,84,82,44,0] /* ?OTR,\00 */, "i8", ALLOC_NONE, 478968);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 478976);
allocate([37,115,0] /* %s\00 */, "i8", ALLOC_NONE, 478988);
allocate([79,73,68,46,0] /* OID.\00 */, "i8", ALLOC_NONE, 478992);
allocate([63,79,84,82,37,115,10,60,98,62,37,115,60,47,98,62,32,104,97,115,32,114,101,113,117,101,115,116,101,100,32,97,110,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,111,116,114,46,99,121,112,104,101,114,112,117,110,107,115,46,99,97,47,34,62,79,102,102,45,116,104,101,45,82,101,99,111,114,100,32,112,114,105,118,97,116,101,32,99,111,110,118,101,114,115,97,116,105,111,110,60,47,97,62,46,32,32,72,111,119,101,118,101,114,44,32,121,111,117,32,100,111,32,110,111,116,32,104,97,118,101,32,97,32,112,108,117,103,105,110,32,116,111,32,115,117,112,112,111,114,116,32,116,104,97,116,46,10,83,101,101,32,60,97,32,104,114,101,102,61,34,104,116,116,112,58,47,47,111,116,114,46,99,121,112,104,101,114,112,117,110,107,115,46,99,97,47,34,62,104,116,116,112,58,47,47,111,116,114,46,99,121,112,104,101,114,112,117,110,107,115,46,99,97,47,60,47,97,62,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,0] /* ?OTR%s\0A_b_%s_/b_ h */, "i8", ALLOC_NONE, 479000);
allocate(1, "i8", ALLOC_NONE, 479260);
allocate([102,111,114,107,32,119,105,116,104,111,117,116,32,112,114,111,112,101,114,32,114,101,45,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,100,101,116,101,99,116,101,100,32,105,110,32,82,78,71,0] /* fork without proper  */, "i8", ALLOC_NONE, 479264);
allocate([87,65,82,78,73,78,71,58,32,117,115,105,110,103,32,105,110,115,101,99,117,114,101,32,114,97,110,100,111,109,32,110,117,109,98,101,114,32,103,101,110,101,114,97,116,111,114,33,33,10,0] /* WARNING: using insec */, "i8", ALLOC_NONE, 479320);
allocate([100,111,101,115,32,110,111,116,32,109,97,116,99,104,0] /* does not match\00 */, "i8", ALLOC_NONE, 479372);
allocate([48,120,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,49,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0] /* 0xffffffff0000000100 */, "i8", ALLOC_NONE, 479388);
allocate([32,40,116,114,97,110,115,105,101,110,116,45,107,101,121,41,0] /*  (transient-key)\00 */, "i8", ALLOC_NONE, 479456);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 479476);
allocate([99,105,112,104,101,114,46,99,0] /* cipher.c\00 */, "i8", ALLOC_NONE, 479480);
allocate([112,114,111,116,111,99,111,108,0] /* protocol\00 */, "i8", ALLOC_NONE, 479492);
allocate([88,112,0] /* Xp\00 */, "i8", ALLOC_NONE, 479504);
allocate([110,111,32,116,101,115,116,32,100,97,116,97,32,102,111,114,32,116,104,105,115,32,109,111,100,101,0] /* no test data for thi */, "i8", ALLOC_NONE, 479508);
allocate([63,79,84,82,124,37,42,120,124,37,42,120,44,37,104,117,44,37,104,117,44,37,110,37,42,91,94,44,93,44,37,110,0] /* ?OTR|%_x|%_x,%hu,%hu */, "i8", ALLOC_NONE, 479536);
allocate([112,117,98,108,105,99,45,107,101,121,0] /* public-key\00 */, "i8", ALLOC_NONE, 479572);
allocate([32,41,10,0] /*  )\0A\00 */, "i8", ALLOC_NONE, 479584);
allocate([111,105,100,46,0] /* oid.\00 */, "i8", ALLOC_NONE, 479588);
allocate([37,115,37,115,37,115,58,32,37,115,10,0] /* %s%s%s: %s\0A\00 */, "i8", ALLOC_NONE, 479596);
allocate([112,114,105,118,107,101,121,115,0] /* privkeys\00 */, "i8", ALLOC_NONE, 479608);
allocate([102,45,62,102,105,110,103,101,114,112,114,105,110,116,32,33,61,32,78,85,76,76,0] /* f-_fingerprint != NU */, "i8", ALLOC_NONE, 479620);
allocate([114,110,103,95,99,116,120,0] /* rng_ctx\00 */, "i8", ALLOC_NONE, 479644);
allocate([102,97,105,108,101,100,32,116,111,32,97,99,113,117,105,114,101,32,116,104,101,32,112,111,111,108,32,108,111,99,107,58,32,37,115,10,0] /* failed to acquire th */, "i8", ALLOC_NONE, 479652);
allocate([103,99,114,121,95,109,100,95,114,101,97,100,32,102,97,105,108,101,100,0] /* gcry_md_read failed\ */, "i8", ALLOC_NONE, 479692);
allocate([78,73,83,84,32,80,45,50,53,54,0] /* NIST P-256\00 */, "i8", ALLOC_NONE, 479712);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,120,37,115,0] /* choosing a random x% */, "i8", ALLOC_NONE, 479724);
allocate([83,104,117,116,100,111,119,110,0] /* Shutdown\00 */, "i8", ALLOC_NONE, 479748);
allocate([40,0] /* (\00 */, "i8", ALLOC_NONE, 479760);
allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_NONE, 479764);
allocate([88,112,50,0] /* Xp2\00 */, "i8", ALLOC_NONE, 479772);
allocate([111,102,98,0] /* ofb\00 */, "i8", ALLOC_NONE, 479776);
allocate([63,79,84,82,124,0] /* ?OTR|\00 */, "i8", ALLOC_NONE, 479780);
allocate([112,32,45,32,115,116,114,105,110,103,32,60,32,110,101,101,100,101,100,0] /* p - string _ needed\ */, "i8", ALLOC_NONE, 479788);
allocate([112,114,105,109,101,103,101,110,0] /* primegen\00 */, "i8", ALLOC_NONE, 479808);
allocate([40,112,114,111,116,111,99,111,108,32,37,115,41,0] /* (protocol %s)\00 */, "i8", ALLOC_NONE, 479820);
allocate([109,100,95,101,110,97,98,108,101,58,32,97,108,103,111,114,105,116,104,109,32,37,100,32,110,111,116,32,97,118,97,105,108,97,98,108,101,10,0] /* md_enable: algorithm */, "i8", ALLOC_NONE, 479836);
allocate([102,97,105,108,101,100,32,116,111,32,100,117,109,112,32,100,97,116,97,32,115,101,116,0] /* failed to dump data  */, "i8", ALLOC_NONE, 479876);
allocate([98,117,102,102,101,114,0] /* buffer\00 */, "i8", ALLOC_NONE, 479900);
allocate([102,97,105,108,101,100,32,116,111,32,114,101,108,101,97,115,101,32,116,104,101,32,112,111,111,108,32,108,111,99,107,58,32,37,115,10,0] /* failed to release th */, "i8", ALLOC_NONE, 479908);
allocate([103,99,114,121,95,109,100,95,115,101,116,107,101,121,32,102,97,105,108,101,100,0] /* gcry_md_setkey faile */, "i8", ALLOC_NONE, 479948);
allocate([48,120,98,100,51,55,54,51,56,56,98,53,102,55,50,51,102,98,52,99,50,50,100,102,101,54,99,100,52,51,55,53,97,48,53,97,48,55,52,55,54,52,52,52,100,53,56,49,57,57,56,53,48,48,55,101,51,52,0] /* 0xbd376388b5f723fb4c */, "i8", ALLOC_NONE, 479972);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,113,41,41,32,61,61,32,113,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 480032);
allocate([37,99,0] /* %c\00 */, "i8", ALLOC_NONE, 480068);
allocate([103,108,111,98,97,108,46,99,0] /* global.c\00 */, "i8", ALLOC_NONE, 480072);
allocate([70,97,116,97,108,45,69,114,114,111,114,0] /* Fatal-Error\00 */, "i8", ALLOC_NONE, 480084);
allocate([117,115,101,100,32,105,110,32,110,111,110,45,111,112,101,114,97,116,105,111,110,97,108,32,115,116,97,116,101,0] /* used in non-operatio */, "i8", ALLOC_NONE, 480096);
allocate([110,101,101,100,95,101,110,116,114,111,112,121,0] /* need_entropy\00 */, "i8", ALLOC_NONE, 480128);
allocate([97,99,99,111,117,110,116,0] /* account\00 */, "i8", ALLOC_NONE, 480144);
allocate([33,115,116,100,95,114,110,103,95,99,111,110,116,101,120,116,45,62,116,101,115,116,95,100,116,95,112,116,114,0] /* !std_rng_context-_te */, "i8", ALLOC_NONE, 480152);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 480184);
allocate(1, "i8", ALLOC_NONE, 480188);
allocate([105,61,61,107,0] /* i==k\00 */, "i8", ALLOC_NONE, 480192);
allocate([97,108,103,111,114,105,116,104,109,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0] /* algorithm not availa */, "i8", ALLOC_NONE, 480200);
allocate([105,110,118,97,108,105,100,32,68,65,84,65,77,79,68,69,0] /* invalid DATAMODE\00 */, "i8", ALLOC_NONE, 480224);
allocate([88,112,49,0] /* Xp1\00 */, "i8", ALLOC_NONE, 480244);
allocate([112,103,121,120,0] /* pgyx\00 */, "i8", ALLOC_NONE, 480248);
allocate([99,102,98,0] /* cfb\00 */, "i8", ALLOC_NONE, 480256);
allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* in use bytes     = % */, "i8", ALLOC_NONE, 480260);
allocate([112,97,98,103,110,113,100,0] /* pabgnqd\00 */, "i8", ALLOC_NONE, 480288);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 480296);
allocate([63,79,84,82,58,0] /* ?OTR:\00 */, "i8", ALLOC_NONE, 480300);
allocate([48,120,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,67,57,48,70,68,65,65,50,50,49,54,56,67,50,51,52,67,52,67,54,54,50,56,66,56,48,68,67,49,67,68,49,50,57,48,50,52,69,48,56,56,65,54,55,67,67,55,52,48,50,48,66,66,69,65,54,51,66,49,51,57,66,50,50,53,49,52,65,48,56,55,57,56,69,51,52,48,52,68,68,69,70,57,53,49,57,66,51,67,68,51,65,52,51,49,66,51,48,50,66,48,65,54,68,70,50,53,70,49,52,51,55,52,70,69,49,51,53,54,68,54,68,53,49,67,50,52,53,69,52,56,53,66,53,55,54,54,50,53,69,55,69,67,54,70,52,52,67,52,50,69,57,65,54,51,55,69,68,54,66,48,66,70,70,53,67,66,54,70,52,48,54,66,55,69,68,69,69,51,56,54,66,70,66,53,65,56,57,57,70,65,53,65,69,57,70,50,52,49,49,55,67,52,66,49,70,69,54,52,57,50,56,54,54,53,49,69,67,69,52,53,66,51,68,67,50,48,48,55,67,66,56,65,49,54,51,66,70,48,53,57,56,68,65,52,56,51,54,49,67,53,53,68,51,57,65,54,57,49,54,51,70,65,56,70,68,50,52,67,70,53,70,56,51,54,53,53,68,50,51,68,67,65,51,65,68,57,54,49,67,54,50,70,51,53,54,50,48,56,53,53,50,66,66,57,69,68,53,50,57,48,55,55,48,57,54,57,54,54,68,54,55,48,67,51,53,52,69,52,65,66,67,57,56,48,52,70,49,55,52,54,67,48,56,67,65,50,51,55,51,50,55,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0] /* 0xFFFFFFFFFFFFFFFFC9 */, "i8", ALLOC_NONE, 480308);
allocate([112,113,103,121,120,0] /* pqgyx\00 */, "i8", ALLOC_NONE, 480696);
allocate([110,98,105,116,115,32,61,61,32,95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,114,105,109,101,41,41,0] /* nbits == _gcry_mpi_g */, "i8", ALLOC_NONE, 480704);
allocate([67,82,67,50,52,82,70,67,50,52,52,48,0] /* CRC24RFC2440\00 */, "i8", ALLOC_NONE, 480744);
allocate([49,0] /* 1\00 */, "i8", ALLOC_NONE, 480760);
allocate([67,65,77,69,76,76,73,65,50,53,54,0] /* CAMELLIA256\00 */, "i8", ALLOC_NONE, 480764);
allocate([97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* abcdefghijklmnopqrst */, "i8", ALLOC_NONE, 480776);
allocate([65,114,99,102,111,117,114,32,101,110,99,114,121,112,116,105,111,110,32,116,101,115,116,32,49,32,102,97,105,108,101,100,46,0] /* Arcfour encryption t */, "i8", ALLOC_NONE, 480804);
allocate([40,110,97,109,101,32,37,115,41,0] /* (name %s)\00 */, "i8", ALLOC_NONE, 480840);
allocate([117,110,107,110,111,119,110,0] /* unknown\00 */, "i8", ALLOC_NONE, 480852);
allocate(1, "i8", ALLOC_NONE, 480860);
allocate([115,101,99,117,114,101,32,109,101,109,111,114,121,32,112,111,111,108,32,105,115,32,110,111,116,32,108,111,99,107,101,100,32,119,104,105,108,101,32,105,110,32,70,73,80,83,32,109,111,100,101,10,0] /* secure memory pool i */, "i8", ALLOC_NONE, 480864);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 480920);
allocate([0,1,10,0] /* \00\01\0A\00 */, "i8", ALLOC_NONE, 480924);
allocate([110,111,45,98,108,105,110,100,105,110,103,0] /* no-blinding\00 */, "i8", ALLOC_NONE, 480928);
allocate([111,117,116,32,111,102,32,99,111,114,101,32,104,97,110,100,108,101,114,32,105,103,110,111,114,101,100,32,105,110,32,70,73,80,83,32,109,111,100,101,10,0] /* out of core handler  */, "i8", ALLOC_NONE, 480940);
allocate([33,110,111,95,102,105,112,115,95,109,111,100,101,95,114,101,113,117,105,114,101,100,0] /* !no_fips_mode_requir */, "i8", ALLOC_NONE, 480984);
allocate([42,108,111,99,107,32,61,61,32,77,85,84,69,88,95,76,79,67,75,69,68,0] /* _lock == MUTEX_LOCKE */, "i8", ALLOC_NONE, 481008);
allocate([101,110,116,114,111,112,121,95,99,111,108,108,101,99,116,95,98,117,102,102,101,114,0] /* entropy_collect_buff */, "i8", ALLOC_NONE, 481032);
allocate([119,97,105,116,105,110,103,32,102,111,114,32,108,111,99,107,32,111,110,32,96,37,115,39,46,46,46,10,0] /* waiting for lock on  */, "i8", ALLOC_NONE, 481056);
allocate([103,99,114,121,95,109,100,95,111,112,101,110,32,102,97,105,108,101,100,0] /* gcry_md_open failed\ */, "i8", ALLOC_NONE, 481088);
allocate([111,112,101,110,112,103,112,45,101,108,103,45,115,105,103,0] /* openpgp-elg-sig\00 */, "i8", ALLOC_NONE, 481108);
allocate([116,108,118,45,62,100,97,116,97,32,33,61,32,78,85,76,76,0] /* tlv-_data != NULL\00 */, "i8", ALLOC_NONE, 481124);
allocate([48,120,98,55,48,101,48,99,98,100,54,98,98,52,98,102,55,102,51,50,49,51,57,48,98,57,52,97,48,51,99,49,100,51,53,54,99,50,49,49,50,50,51,52,51,50,56,48,100,54,49,49,53,99,49,100,50,49,0] /* 0xb70e0cbd6bb4bf7f32 */, "i8", ALLOC_NONE, 481144);
allocate([100,115,97,46,99,0] /* dsa.c\00 */, "i8", ALLOC_NONE, 481204);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,52,0] /* 0.3.4401.5.3.1.9.4\0 */, "i8", ALLOC_NONE, 481212);
allocate([92,48,0] /* \5C0\00 */, "i8", ALLOC_NONE, 481232);
allocate([105,110,118,97,108,105,100,32,102,108,97,103,32,118,97,108,117,101,10,0] /* invalid flag value\0 */, "i8", ALLOC_NONE, 481236);
allocate([102,105,112,115,45,109,111,100,101,58,37,99,58,37,99,58,10,0] /* fips-mode:%c:%c:\0A\ */, "i8", ALLOC_NONE, 481256);
allocate([69,114,114,111,114,0] /* Error\00 */, "i8", ALLOC_NONE, 481276);
allocate([45,0] /* -\00 */, "i8", ALLOC_NONE, 481284);
allocate([33,109,112,95,109,97,114,107,101,114,0] /* !mp_marker\00 */, "i8", ALLOC_NONE, 481288);
allocate([32,32,9,9,32,32,9,32,0] /*   \09\09  \09 \00 */, "i8", ALLOC_NONE, 481300);
allocate([119,104,105,114,108,112,111,111,108,46,99,0] /* whirlpool.c\00 */, "i8", ALLOC_NONE, 481312);
allocate([112,114,105,118,107,101,121,115,0] /* privkeys\00 */, "i8", ALLOC_NONE, 481324);
allocate([115,101,108,102,45,116,101,115,116,32,97,102,116,101,114,32,107,101,121,32,103,101,110,101,114,97,116,105,111,110,32,102,97,105,108,101,100,0] /* self-test after key  */, "i8", ALLOC_NONE, 481336);
allocate([65,69,83,45,49,57,50,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-192 test decrypt */, "i8", ALLOC_NONE, 481376);
allocate([40,109,105,115,99,45,107,101,121,45,105,110,102,111,40,112,109,49,45,102,97,99,116,111,114,115,0] /* (misc-key-info(pm1-f */, "i8", ALLOC_NONE, 481408);
allocate([108,101,110,112,32,61,61,32,48,0] /* lenp == 0\00 */, "i8", ALLOC_NONE, 481436);
allocate([44,32,112,37,100,61,37,117,0] /* , p%d=%u\00 */, "i8", ALLOC_NONE, 481448);
allocate([33,32,97,104,100,45,62,98,117,102,112,111,115,0] /* ! ahd-_bufpos\00 */, "i8", ALLOC_NONE, 481460);
allocate([32,40,97,99,99,111,117,110,116,10,0] /*  (account\0A\00 */, "i8", ALLOC_NONE, 481476);
allocate([118,105,115,105,98,105,108,105,116,121,46,99,0] /* visibility.c\00 */, "i8", ALLOC_NONE, 481488);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 481504);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 481508);
allocate([101,114,114,111,114,32,103,101,116,116,105,110,103,32,101,110,116,114,111,112,121,32,100,97,116,97,10,0] /* error getting entrop */, "i8", ALLOC_NONE, 481512);
allocate([99,97,110,39,116,32,108,111,99,107,32,96,37,115,39,58,32,37,115,10,0] /* can't lock `%s': %s\ */, "i8", ALLOC_NONE, 481540);
allocate([105,110,118,97,108,105,100,32,116,101,115,116,115,32,100,97,116,97,0] /* invalid tests data\0 */, "i8", ALLOC_NONE, 481564);
allocate([111,112,101,110,112,103,112,45,101,108,103,0] /* openpgp-elg\00 */, "i8", ALLOC_NONE, 481584);
allocate([47,100,101,118,47,114,97,110,100,111,109,0] /* /dev/random\00 */, "i8", ALLOC_NONE, 481596);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,49,54,97,50,101,48,98,56,102,48,51,101,49,51,100,100,50,57,52,53,53,99,53,99,50,97,51,100,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 481608);
allocate([95,103,99,114,121,95,109,112,105,95,103,101,116,95,110,98,105,116,115,32,40,40,112,41,41,32,61,61,32,110,98,105,116,115,0] /* _gcry_mpi_get_nbits  */, "i8", ALLOC_NONE, 481668);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,51,0] /* 0.3.4401.5.3.1.9.3\0 */, "i8", ALLOC_NONE, 481704);
allocate([92,98,0] /* \5Cb\00 */, "i8", ALLOC_NONE, 481724);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 481728);
allocate([79,112,101,114,97,116,105,111,110,97,108,0] /* Operational\00 */, "i8", ALLOC_NONE, 481732);
allocate([40,112,114,105,118,107,101,121,115,32,40,97,99,99,111,117,110,116,32,40,110,97,109,101,32,37,115,41,32,40,112,114,111,116,111,99,111,108,32,37,115,41,32,40,112,114,105,118,97,116,101,45,107,101,121,32,40,100,115,97,32,32,32,32,32,32,32,32,32,40,112,32,37,77,41,32,40,113,32,37,77,41,32,40,103,32,37,77,41,32,40,121,32,37,77,41,32,40,120,32,37,77,41,32,41,41,41,41,0] /* (privkeys (account ( */, "i8", ALLOC_NONE, 481744);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 481856);
allocate([84,87,79,70,73,83,72,49,50,56,0] /* TWOFISH128\00 */, "i8", ALLOC_NONE, 481860);
allocate([32,32,117,61,32,0] /*   u= \00 */, "i8", ALLOC_NONE, 481872);
allocate([65,69,83,45,49,57,50,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-192 test encrypt */, "i8", ALLOC_NONE, 481880);
allocate([84,73,71,69,82,0] /* TIGER\00 */, "i8", ALLOC_NONE, 481912);
allocate([40,112,114,105,118,97,116,101,45,107,101,121,40,0] /* (private-key(\00 */, "i8", ALLOC_NONE, 481920);
allocate([112,114,111,116,111,46,99,0] /* proto.c\00 */, "i8", ALLOC_NONE, 481936);
allocate([33,110,111,110,99,101,95,99,111,110,116,101,120,116,45,62,116,101,115,116,95,100,116,95,112,116,114,0] /* !nonce_context-_test */, "i8", ALLOC_NONE, 481944);
allocate([44,32,113,48,61,37,117,0] /* , q0=%u\00 */, "i8", ALLOC_NONE, 481972);
allocate([97,104,100,45,62,98,117,102,115,105,122,101,32,61,61,32,40,110,32,45,32,115,105,122,101,111,102,32,40,115,116,114,117,99,116,32,103,99,114,121,95,109,100,95,104,97,110,100,108,101,41,32,43,32,49,41,0] /* ahd-_bufsize == (n - */, "i8", ALLOC_NONE, 481980);
allocate([40,115,105,103,45,118,97,108,32,40,100,115,97,32,40,114,32,37,109,41,40,115,32,37,109,41,41,41,0] /* (sig-val (dsa (r %m) */, "i8", ALLOC_NONE, 482040);
allocate([79,73,68,46,0] /* OID.\00 */, "i8", ALLOC_NONE, 482072);
allocate([83,72,65,51,56,52,0] /* SHA384\00 */, "i8", ALLOC_NONE, 482080);
allocate([40,102,108,97,103,115,0] /* (flags\00 */, "i8", ALLOC_NONE, 482088);
allocate([33,101,110,116,114,111,112,121,95,99,111,108,108,101,99,116,95,98,117,102,102,101,114,0] /* !entropy_collect_buf */, "i8", ALLOC_NONE, 482096);
allocate([99,97,110,39,116,32,114,101,97,100,32,96,37,115,39,58,32,37,115,10,0] /* can't read `%s': %s\ */, "i8", ALLOC_NONE, 482120);
allocate([84,104,105,115,32,105,115,32,97,32,116,101,115,116,32,117,115,105,110,103,32,97,32,108,97,114,103,101,114,32,116,104,97,110,32,98,108,111,99,107,45,115,105,122,101,32,107,101,121,32,97,110,100,32,97,32,108,97,114,103,101,114,32,116,104,97,110,32,98,108,111,99,107,45,115,105,122,101,32,100,97,116,97,46,32,84,104,101,32,107,101,121,32,110,101,101,100,115,32,116,111,32,98,101,32,104,97,115,104,101,100,32,98,101,102,111,114,101,32,98,101,105,110,103,32,117,115,101,100,32,98,121,32,116,104,101,32,72,77,65,67,32,97,108,103,111,114,105,116,104,109,46,0] /* This is a test using */, "i8", ALLOC_NONE, 482144);
allocate([101,108,103,0] /* elg\00 */, "i8", ALLOC_NONE, 482300);
allocate([48,120,98,52,48,53,48,97,56,53,48,99,48,52,98,51,97,98,102,53,52,49,51,50,53,54,53,48,52,52,98,48,98,55,100,55,98,102,100,56,98,97,50,55,48,98,51,57,52,51,50,51,53,53,102,102,98,52,0] /* 0xb4050a850c04b3abf5 */, "i8", ALLOC_NONE, 482304);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 482364);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,49,0] /* 0.3.4401.5.3.1.9.1\0 */, "i8", ALLOC_NONE, 482368);
allocate([92,118,0] /* \5Cv\00 */, "i8", ALLOC_NONE, 482388);
allocate([83,72,65,50,53,54,0] /* SHA256\00 */, "i8", ALLOC_NONE, 482392);
allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_NONE, 482400);
allocate([83,101,108,102,45,84,101,115,116,0] /* Self-Test\00 */, "i8", ALLOC_NONE, 482404);
allocate([114,97,110,100,111,109,32,117,115,97,103,101,58,32,112,111,111,108,115,105,122,101,61,37,100,32,109,105,120,101,100,61,37,108,117,32,112,111,108,108,115,61,37,108,117,47,37,108,117,32,97,100,100,101,100,61,37,108,117,47,37,108,117,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,117,116,109,105,120,61,37,108,117,32,103,101,116,108,118,108,49,61,37,108,117,47,37,108,117,32,103,101,116,108,118,108,50,61,37,108,117,47,37,108,117,37,115,10,0] /* random usage: poolsi */, "i8", ALLOC_NONE, 482416);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 482540);
allocate([121,0] /* y\00 */, "i8", ALLOC_NONE, 482544);
allocate([107,0] /* k\00 */, "i8", ALLOC_NONE, 482548);
allocate([115,104,111,114,116,32,115,116,114,105,110,103,0] /* short string\00 */, "i8", ALLOC_NONE, 482552);
allocate([32,32,100,61,32,0] /*   d= \00 */, "i8", ALLOC_NONE, 482568);
allocate([65,69,83,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-256 test decrypt */, "i8", ALLOC_NONE, 482576);
allocate([83,69,82,80,69,78,84,49,57,50,0] /* SERPENT192\00 */, "i8", ALLOC_NONE, 482608);
allocate([37,83,0] /* %S\00 */, "i8", ALLOC_NONE, 482620);
allocate([0,3,3,0] /* \00\03\03\00 */, "i8", ALLOC_NONE, 482624);
allocate([98,105,116,32,115,105,122,101,115,58,32,112,114,105,109,101,61,37,117,44,32,113,61,37,117,0] /* bit sizes: prime=%u, */, "i8", ALLOC_NONE, 482628);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 482656);
allocate([107,101,121,108,101,110,32,60,61,32,104,100,45,62,99,116,120,45,62,109,97,99,112,97,100,115,95,66,115,105,122,101,0] /* keylen _= hd-_ctx-_m */, "i8", ALLOC_NONE, 482660);
allocate([115,0] /* s\00 */, "i8", ALLOC_NONE, 482696);
allocate([111,105,100,46,0] /* oid.\00 */, "i8", ALLOC_NONE, 482700);
allocate([99,111,110,116,101,120,116,95,112,114,105,118,46,99,0] /* context_priv.c\00 */, "i8", ALLOC_NONE, 482708);
allocate([97,99,95,105,111,45,62,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,87,82,73,84,65,66,76,69,0] /* ac_io-_mode == GCRY_ */, "i8", ALLOC_NONE, 482724);
allocate([104,109,97,99,0] /* hmac\00 */, "i8", ALLOC_NONE, 482760);
allocate([103,101,116,116,105,109,101,111,102,100,97,121,40,41,32,102,97,105,108,101,100,58,32,37,115,10,0] /* gettimeofday() faile */, "i8", ALLOC_NONE, 482768);
allocate([119,97,114,110,105,110,103,58,32,105,110,118,97,108,105,100,32,115,105,122,101,32,111,102,32,114,97,110,100,111,109,95,115,101,101,100,32,102,105,108,101,32,45,32,110,111,116,32,117,115,101,100,10,0] /* warning: invalid siz */, "i8", ALLOC_NONE, 482796);
allocate([100,105,103,101,115,116,32,115,105,122,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,101,120,112,101,99,116,101,100,32,115,105,122,101,0] /* digest size does not */, "i8", ALLOC_NONE, 482852);
allocate([100,97,116,97,45,49,53,50,32,107,101,121,45,49,51,49,0] /* data-152 key-131\00 */, "i8", ALLOC_NONE, 482896);
allocate([117,115,105,110,103,32,97,32,115,117,112,112,108,105,101,100,32,120,32,111,102,32,115,105,122,101,32,37,117,0] /* using a supplied x o */, "i8", ALLOC_NONE, 482916);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 482948);
allocate([37,109,0] /* %m\00 */, "i8", ALLOC_NONE, 483008);
allocate([49,46,50,46,51,57,50,46,50,48,48,48,49,49,46,54,49,46,49,46,49,46,49,46,50,0] /* 1.2.392.200011.61.1. */, "i8", ALLOC_NONE, 483012);
allocate([92,102,0] /* \5Cf\00 */, "i8", ALLOC_NONE, 483040);
allocate([104,119,102,108,105,115,116,58,0] /* hwflist:\00 */, "i8", ALLOC_NONE, 483044);
allocate([73,110,105,116,0] /* Init\00 */, "i8", ALLOC_NONE, 483056);
allocate([103,0] /* g\00 */, "i8", ALLOC_NONE, 483064);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,49,51,0] /* 1.2.840.113549.1.1.1 */, "i8", ALLOC_NONE, 483068);
allocate([48,120,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,67,57,48,70,68,65,65,50,50,49,54,56,67,50,51,52,67,52,67,54,54,50,56,66,56,48,68,67,49,67,68,49,50,57,48,50,52,69,48,56,56,65,54,55,67,67,55,52,48,50,48,66,66,69,65,54,51,66,49,51,57,66,50,50,53,49,52,65,48,56,55,57,56,69,51,52,48,52,68,68,69,70,57,53,49,57,66,51,67,68,51,65,52,51,49,66,51,48,50,66,48,65,54,68,70,50,53,70,49,52,51,55,52,70,69,49,51,53,54,68,54,68,53,49,67,50,52,53,69,52,56,53,66,53,55,54,54,50,53,69,55,69,67,54,70,52,52,67,52,50,69,57,65,54,51,55,69,68,54,66,48,66,70,70,53,67,66,54,70,52,48,54,66,55,69,68,69,69,51,56,54,66,70,66,53,65,56,57,57,70,65,53,65,69,57,70,50,52,49,49,55,67,52,66,49,70,69,54,52,57,50,56,54,54,53,49,69,67,69,52,53,66,51,68,67,50,48,48,55,67,66,56,65,49,54,51,66,70,48,53,57,56,68,65,52,56,51,54,49,67,53,53,68,51,57,65,54,57,49,54,51,70,65,56,70,68,50,52,67,70,53,70,56,51,54,53,53,68,50,51,68,67,65,51,65,68,57,54,49,67,54,50,70,51,53,54,50,48,56,53,53,50,66,66,57,69,68,53,50,57,48,55,55,48,57,54,57,54,54,68,54,55,48,67,51,53,52,69,52,65,66,67,57,56,48,52,70,49,55,52,54,67,48,56,67,65,50,51,55,51,50,55,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0] /* 0xFFFFFFFFFFFFFFFFC9 */, "i8", ALLOC_NONE, 483092);
allocate([110,101,0] /* ne\00 */, "i8", ALLOC_NONE, 483480);
allocate([69,76,71,0] /* ELG\00 */, "i8", ALLOC_NONE, 483484);
allocate([32,32,101,61,32,0] /*   e= \00 */, "i8", ALLOC_NONE, 483488);
allocate([49,46,51,46,51,54,46,51,46,51,46,49,46,50,0] /* 1.3.36.3.3.1.2\00 */, "i8", ALLOC_NONE, 483496);
allocate([65,69,83,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* AES-256 test encrypt */, "i8", ALLOC_NONE, 483512);
allocate([40,112,117,98,108,105,99,45,107,101,121,40,0] /* (public-key(\00 */, "i8", ALLOC_NONE, 483544);
allocate([102,97,99,116,111,114,32,112,105,58,32,0] /* factor pi: \00 */, "i8", ALLOC_NONE, 483560);
allocate([0,2,3,0] /* \00\02\03\00 */, "i8", ALLOC_NONE, 483572);
allocate([109,111,114,101,32,116,104,97,110,32,111,110,101,32,97,108,103,111,114,105,116,104,109,32,105,110,32,109,100,95,114,101,97,100,40,48,41,10,0] /* more than one algori */, "i8", ALLOC_NONE, 483576);
allocate([114,0] /* r\00 */, "i8", ALLOC_NONE, 483616);
allocate([63,0] /* ?\00 */, "i8", ALLOC_NONE, 483620);
allocate([97,99,95,105,111,45,62,109,111,100,101,32,61,61,32,71,67,82,89,95,65,67,95,73,79,95,82,69,65,68,65,66,76,69,0] /* ac_io-_mode == GCRY_ */, "i8", ALLOC_NONE, 483624);
allocate([65,69,83,32,101,110,99,114,121,112,116,105,111,110,32,105,110,32,82,78,71,32,102,97,105,108,101,100,58,32,37,115,10,0] /* AES encryption in RN */, "i8", ALLOC_NONE, 483660);
allocate([110,111,116,101,58,32,114,97,110,100,111,109,95,115,101,101,100,32,102,105,108,101,32,105,115,32,101,109,112,116,121,10,0] /* note: random_seed fi */, "i8", ALLOC_NONE, 483696);
allocatei8", ALLOC_NONE, 483732);
allocate([112,107,95,101,108,103,0] /* pk_elg\00 */, "i8", ALLOC_NONE, 483864);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 483872);
allocate([40,112,109,49,45,102,97,99,116,111,114,115,0] /* (pm1-factors\00 */, "i8", ALLOC_NONE, 483932);
allocate([67,65,77,69,76,76,73,65,45,50,53,54,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-256 test de */, "i8", ALLOC_NONE, 483948);
allocate([92,114,0] /* \5Cr\00 */, "i8", ALLOC_NONE, 483988);
allocate([65,69,83,49,57,50,0] /* AES192\00 */, "i8", ALLOC_NONE, 483992);
allocate([109,112,105,45,97,115,109,58,37,115,58,10,0] /* mpi-asm:%s:\0A\00 */, "i8", ALLOC_NONE, 484000);
allocate([80,111,119,101,114,45,79,110,0] /* Power-On\00 */, "i8", ALLOC_NONE, 484016);
allocate([113,0] /* q\00 */, "i8", ALLOC_NONE, 484028);
allocate([82,70,67,50,50,54,56,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,37,115,41,46,10,0] /* RFC2268 selftest fai */, "i8", ALLOC_NONE, 484032);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,51,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 484064);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,50,46,52,0] /* 2.16.840.1.101.3.4.2 */, "i8", ALLOC_NONE, 484088);
allocate([32,32,110,61,32,0] /*   n= \00 */, "i8", ALLOC_NONE, 484112);
allocate([99,105,112,104,101,114,0] /* cipher\00 */, "i8", ALLOC_NONE, 484120);
allocate([69,67,68,83,65,0] /* ECDSA\00 */, "i8", ALLOC_NONE, 484128);
allocate([40,107,101,121,45,100,97,116,97,0] /* (key-data\00 */, "i8", ALLOC_NONE, 484136);
allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0] /* max system bytes = % */, "i8", ALLOC_NONE, 484148);
allocate([102,97,99,116,111,114,32,113,48,58,32,0] /* factor q0: \00 */, "i8", ALLOC_NONE, 484176);
allocate([0,1,3,0] /* \00\01\03\00 */, "i8", ALLOC_NONE, 484188);
allocate([87,65,82,78,73,78,71,58,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,97,108,103,111,114,105,116,104,109,32,105,110,32,109,100,95,103,101,116,95,97,108,103,111,40,41,10,0] /* WARNING: more than o */, "i8", ALLOC_NONE, 484192);
allocate([101,99,100,115,97,0] /* ecdsa\00 */, "i8", ALLOC_NONE, 484244);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,50,46,49,46,51,0] /* 1.2.840.113549.1.12. */, "i8", ALLOC_NONE, 484252);
allocate([100,115,97,0] /* dsa\00 */, "i8", ALLOC_NONE, 484276);
allocate([99,105,112,104,101,114,95,101,110,99,114,121,112,116,58,32,105,110,118,97,108,105,100,32,109,111,100,101,32,37,100,10,0] /* cipher_encrypt: inva */, "i8", ALLOC_NONE, 484280);
allocate([66,97,100,32,99,104,101,99,107,58,32,84,104,101,114,101,32,105,115,32,78,79,32,99,111,114,114,101,115,112,111,110,100,101,110,99,101,32,98,101,116,119,101,101,110,32,39,100,39,32,97,110,100,32,39,81,39,33,10,0] /* Bad check: There is  */, "i8", ALLOC_NONE, 484316);
allocate([115,105,103,45,118,97,108,0] /* sig-val\00 */, "i8", ALLOC_NONE, 484376);
allocate([66,97,100,32,99,104,101,99,107,58,32,81,32,99,97,110,32,110,111,116,32,98,101,32,97,32,80,111,105,110,116,32,97,116,32,73,110,102,105,110,105,116,121,33,10,0] /* Bad check: Q can not */, "i8", ALLOC_NONE, 484384);
allocate([99,104,101,99,107,95,115,101,99,114,101,116,95,107,101,121,58,32,69,32,105,115,32,110,111,116,32,97,32,99,117,114,118,101,32,111,102,32,111,114,100,101,114,32,110,10,0] /* check_secret_key: E  */, "i8", ALLOC_NONE, 484432);
allocate([108,101,110,103,116,104,32,61,61,32,49,54,0] /* length == 16\00 */, "i8", ALLOC_NONE, 484480);
allocate([96,37,115,39,32,105,115,32,110,111,116,32,97,32,114,101,103,117,108,97,114,32,102,105,108,101,32,45,32,105,103,110,111,114,101,100,10,0] /* `%s' is not a regula */, "i8", ALLOC_NONE, 484496);
allocate([84,101,115,116,32,85,115,105,110,103,32,76,97,114,103,101,114,32,84,104,97,110,32,66,108,111,99,107,45,83,105,122,101,32,75,101,121,32,45,32,72,97,115,104,32,75,101,121,32,70,105,114,115,116,0] /* Test Using Larger Th */, "i8", ALLOC_NONE, 484536);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,107,32,0] /* choosing a random k  */, "i8", ALLOC_NONE, 484592);
allocate([78,73,83,84,32,80,45,50,50,52,0] /* NIST P-224\00 */, "i8", ALLOC_NONE, 484616);
allocate([37,83,0] /* %S\00 */, "i8", ALLOC_NONE, 484628);
allocate([67,65,77,69,76,76,73,65,45,50,53,54,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-256 test en */, "i8", ALLOC_NONE, 484632);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 484672);
allocate([92,110,0] /* \5Cn\00 */, "i8", ALLOC_NONE, 484680);
allocate([114,110,100,45,109,111,100,58,108,105,110,117,120,58,10,0] /* rnd-mod:linux:\0A\00 */, "i8", ALLOC_NONE, 484684);
allocate([100,101,110,105,101,100,0] /* denied\00 */, "i8", ALLOC_NONE, 484700);
allocate([66,97,100,32,99,104,101,99,107,58,32,39,71,39,32,99,97,110,110,111,116,32,98,101,32,80,111,105,110,116,32,97,116,32,73,110,102,105,110,105,116,121,33,10,0] /* Bad check: 'G' canno */, "i8", ALLOC_NONE, 484708);
allocate([66,97,100,32,99,104,101,99,107,58,32,80,111,105,110,116,32,39,71,39,32,100,111,101,115,32,110,111,116,32,98,101,108,111,110,103,32,116,111,32,99,117,114,118,101,32,39,69,39,33,10,0] /* Bad check: Point 'G' */, "i8", ALLOC_NONE, 484756);
allocate([68,83,65,0] /* DSA\00 */, "i8", ALLOC_NONE, 484808);
allocate([48,120,48,50,0] /* 0x02\00 */, "i8", ALLOC_NONE, 484812);
allocate([112,0] /* p\00 */, "i8", ALLOC_NONE, 484820);
allocate([157,14,24,9,113,100,116,203,8,110,131,78,49,10,74,28,237,20,158,156,0,242,72,82,121,114,206,197,112,76,42,91,7,184,179,220,56,236,196,235,174,151,221,216,127,61,137,133,0] /* \9D\0E\18\09qdt\CB\0 */, "i8", ALLOC_NONE, 484824);
allocate([32,121,70,85,152,12,145,216,187,180,193,234,151,97,138,75,240,63,66,88,25,72,178,238,78,231,173,103,0] /*  yFU\98\0C\91\D8\BB\ */, "i8", ALLOC_NONE, 484876);
allocate([101,99,99,0] /* ecc\00 */, "i8", ALLOC_NONE, 484908);
allocate([67,82,67,51,50,0] /* CRC32\00 */, "i8", ALLOC_NONE, 484912);
allocate([32,32,102,61,32,0] /*   f= \00 */, "i8", ALLOC_NONE, 484920);
allocate([101,99,100,104,0] /* ecdh\00 */, "i8", ALLOC_NONE, 484928);
allocate([10,0] /* \0A\00 */, "i8", ALLOC_NONE, 484936);
allocate([67,65,83,84,53,0] /* CAST5\00 */, "i8", ALLOC_NONE, 484940);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,52,0] /* 1.2.840.113549.1.1.4 */, "i8", ALLOC_NONE, 484948);
allocate([108,111,119,45,108,101,118,101,108,0] /* low-level\00 */, "i8", ALLOC_NONE, 484972);
allocate([101,99,100,104,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,32,102,111,114,32,107,71,10,0] /* ecdh: Failed to get  */, "i8", ALLOC_NONE, 484984);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,50,46,52,0] /* 1.2.840.113549.2.4\0 */, "i8", ALLOC_NONE, 485032);
allocate([110,98,105,116,115,0] /* nbits\00 */, "i8", ALLOC_NONE, 485052);
allocate([101,99,100,104,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,32,102,111,114,32,107,100,71,10,0] /* ecdh: Failed to get  */, "i8", ALLOC_NONE, 485060);
allocate([102,97,99,116,111,114,32,32,113,58,32,0] /* factor  q: \00 */, "i8", ALLOC_NONE, 485108);
allocate([63,79,84,82,58,65,65,69,0] /* ?OTR:AAE\00 */, "i8", ALLOC_NONE, 485120);
allocate([112,111,115,115,105,98,108,101,32,117,115,97,103,101,32,101,114,114,111,114,0] /* possible usage error */, "i8", ALLOC_NONE, 485132);
allocate([101,99,100,104,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecdh: Failed to get  */, "i8", ALLOC_NONE, 485156);
allocate([49,46,51,46,51,54,46,51,46,49,46,51,46,50,46,49,0] /* 1.3.36.3.1.3.2.1\00 */, "i8", ALLOC_NONE, 485196);
allocate([40,37,109,41,0] /* (%m)\00 */, "i8", ALLOC_NONE, 485216);
allocate([99,45,62,117,110,117,115,101,100,32,60,32,98,108,111,99,107,115,105,122,101,0] /* c-_unused _ blocksiz */, "i8", ALLOC_NONE, 485224);
allocate([112,117,98,107,101,121,0] /* pubkey\00 */, "i8", ALLOC_NONE, 485248);
allocate([67,65,77,69,76,76,73,65,49,50,56,0] /* CAMELLIA128\00 */, "i8", ALLOC_NONE, 485256);
allocate([101,110,99,45,118,97,108,0] /* enc-val\00 */, "i8", ALLOC_NONE, 485268);
allocate([108,111,119,45,108,101,118,101,108,0] /* low-level\00 */, "i8", ALLOC_NONE, 485276);
allocate([66,76,79,87,70,73,83,72,0] /* BLOWFISH\00 */, "i8", ALLOC_NONE, 485288);
allocate([99,104,111,111,115,105,110,103,32,97,32,114,97,110,100,111,109,32,107,32,111,102,32,37,117,32,98,105,116,115,32,97,116,32,115,101,99,108,101,118,101,108,32,37,100,10,0] /* choosing a random k  */, "i8", ALLOC_NONE, 485300);
allocate([100,117,112,108,105,99,97,116,101,32,49,50,56,32,98,105,116,32,98,108,111,99,107,32,114,101,116,117,114,110,101,100,32,98,121,32,82,78,71,0] /* duplicate 128 bit bl */, "i8", ALLOC_NONE, 485348);
allocate([99,97,110,39,116,32,115,116,97,116,32,96,37,115,39,58,32,37,115,10,0] /* can't stat `%s': %s\ */, "i8", ALLOC_NONE, 485388);
allocate([100,97,116,97,45,53,52,32,107,101,121,45,49,51,49,0] /* data-54 key-131\00 */, "i8", ALLOC_NONE, 485412);
allocate([115,105,103,110,43,118,101,114,105,102,121,0] /* sign+verify\00 */, "i8", ALLOC_NONE, 485428);
allocate([48,120,48,55,49,57,50,98,57,53,102,102,99,56,100,97,55,56,54,51,49,48,49,49,101,100,54,98,50,52,99,100,100,53,55,51,102,57,55,55,97,49,49,101,55,57,52,56,49,49,0] /* 0x07192b95ffc8da7863 */, "i8", ALLOC_NONE, 485440);
allocate([40,109,105,115,99,45,107,101,121,45,105,110,102,111,0] /* (misc-key-info\00 */, "i8", ALLOC_NONE, 485492);
allocate([67,65,77,69,76,76,73,65,45,49,57,50,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-192 test de */, "i8", ALLOC_NONE, 485508);
allocate([38,92,0] /* &\5C\00 */, "i8", ALLOC_NONE, 485548);
allocate([65,82,67,70,79,85,82,0] /* ARCFOUR\00 */, "i8", ALLOC_NONE, 485552);
allocate([99,114,99,58,109,100,52,58,109,100,53,58,114,109,100,49,54,48,58,115,104,97,49,58,115,104,97,50,53,54,58,115,104,97,53,49,50,58,116,105,103,101,114,58,119,104,105,114,108,112,111,111,108,0] /* crc:md4:md5:rmd160:s */, "i8", ALLOC_NONE, 485560);
allocate([103,114,97,110,116,101,100,0] /* granted\00 */, "i8", ALLOC_NONE, 485616);
allocate([101,99,100,115,97,32,115,105,103,110,32,114,101,115,117,108,116,32,115,32,0] /* ecdsa sign result s  */, "i8", ALLOC_NONE, 485624);
allocate([109,101,109,111,114,121,32,97,116,32,37,112,32,99,111,114,114,117,112,116,101,100,32,40,117,110,100,101,114,102,108,111,119,61,37,48,50,120,41,10,0] /* memory at %p corrupt */, "i8", ALLOC_NONE, 485648);
allocate([101,99,100,115,97,32,115,105,103,110,32,114,101,115,117,108,116,32,114,32,0] /* ecdsa sign result r  */, "i8", ALLOC_NONE, 485692);
allocate([100,115,97,0] /* dsa\00 */, "i8", ALLOC_NONE, 485716);
allocate([9,51,12,51,247,17,71,232,61,25,47,199,130,205,27,71,83,17,27,23,59,59,5,210,47,160,128,134,227,176,247,18,252,199,199,26,85,126,45,185,102,195,233,250,145,116,96,57,0] /* \093\0C3\F7\11G\E8=\ */, "i8", ALLOC_NONE, 485720);
allocate([117,56,139,22,81,39,118,204,93,186,93,161,253,137,1,80,176,198,69,92,180,245,139,25,82,82,37,37,0] /* u8\8B\16Q'v\CC]\BA]\ */, "i8", ALLOC_NONE, 485772);
allocate([109,100,46,99,0] /* md.c\00 */, "i8", ALLOC_NONE, 485804);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,53,46,52,46,49,0] /* 1.2.840.10045.4.1\00 */, "i8", ALLOC_NONE, 485812);
allocate([101,99,99,32,115,105,103,110,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecc sign: Failed to  */, "i8", ALLOC_NONE, 485832);
allocate([32,32,103,61,32,0] /*   g= \00 */, "i8", ALLOC_NONE, 485876);
allocate([101,99,100,115,97,32,115,105,103,110,32,104,97,115,104,32,32,0] /* ecdsa sign hash  \00 */, "i8", ALLOC_NONE, 485884);
allocate([65,69,83,45,49,57,50,0] /* AES-192\00 */, "i8", ALLOC_NONE, 485904);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,65,99,99,101,112,116,101,100,10,0] /* ecc verify: Accepted */, "i8", ALLOC_NONE, 485912);
allocate([51,68,69,83,0] /* 3DES\00 */, "i8", ALLOC_NONE, 485936);
allocate([114,115,97,45,117,115,101,45,101,0] /* rsa-use-e\00 */, "i8", ALLOC_NONE, 485944);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,78,111,116,32,118,101,114,105,102,105,101,100,10,0] /* ecc verify: Not veri */, "i8", ALLOC_NONE, 485956);
allocate([112,114,105,109,101,32,32,32,32,58,32,0] /* prime    : \00 */, "i8", ALLOC_NONE, 485984);
allocate([63,79,84,82,32,69,114,114,111,114,58,0] /* ?OTR Error:\00 */, "i8", ALLOC_NONE, 485996);
allocate([110,111,32,65,83,78,46,49,32,79,73,68,32,102,111,114,32,109,100,32,97,108,103,111,32,37,100,10,0] /* no ASN.1 OID for md  */, "i8", ALLOC_NONE, 486008);
allocate([32,32,32,32,32,115,0] /*      s\00 */, "i8", ALLOC_NONE, 486040);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,51,46,55,0] /* 1.2.840.113549.3.7\0 */, "i8", ALLOC_NONE, 486048);
allocate(1, "i8", ALLOC_NONE, 486068);
allocate([99,105,112,104,101,114,95,100,101,99,114,121,112,116,58,32,105,110,118,97,108,105,100,32,109,111,100,101,32,37,100,10,0] /* cipher_decrypt: inva */, "i8", ALLOC_NONE, 486072);
allocate([32,32,32,32,32,114,0] /*      r\00 */, "i8", ALLOC_NONE, 486108);
allocate([100,97,116,97,0] /* data\00 */, "i8", ALLOC_NONE, 486116);
allocate([32,32,32,32,32,121,0] /*      y\00 */, "i8", ALLOC_NONE, 486124);
allocate([52,46,48,46,48,0] /* 4.0.0\00 */, "i8", ALLOC_NONE, 486132);
allocate([91,110,105,108,93,10,0] /* [nil]\0A\00 */, "i8", ALLOC_NONE, 486140);
allocate([32,32,32,32,32,120,0] /*      x\00 */, "i8", ALLOC_NONE, 486148);
allocate([114,110,103,95,99,116,120,45,62,105,115,95,115,101,101,100,101,100,0] /* rng_ctx-_is_seeded\0 */, "i8", ALLOC_NONE, 486156);
allocate([99,97,110,39,116,32,111,112,101,110,32,96,37,115,39,58,32,37,115,10,0] /* can't open `%s': %s\ */, "i8", ALLOC_NONE, 486176);
allocate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0] /* \01\02\03\04\05\06\0 */, "i8", ALLOC_NONE, 486200);
allocate(1, "i8", ALLOC_NONE, 486228);
allocate([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* bad_array_new_length */, "i8", ALLOC_NONE, 486232);
allocate([48,120,49,56,56,100,97,56,48,101,98,48,51,48,57,48,102,54,55,99,98,102,50,48,101,98,52,51,97,49,56,56,48,48,102,52,102,102,48,97,102,100,56,50,102,102,49,48,49,50,0] /* 0x188da80eb03090f67c */, "i8", ALLOC_NONE, 486256);
allocate([40,115,101,101,100,45,118,97,108,117,101,115,40,99,111,117,110,116,101,114,32,37,100,41,40,115,101,101,100,32,37,98,41,40,104,32,37,109,41,41,0] /* (seed-values(counter */, "i8", ALLOC_NONE, 486308);
allocate([67,65,77,69,76,76,73,65,45,49,57,50,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-192 test en */, "i8", ALLOC_NONE, 486352);
allocate([37,117,0] /* %u\00 */, "i8", ALLOC_NONE, 486392);
allocate([100,105,103,101,115,116,115,58,37,115,58,10,0] /* digests:%s:\0A\00 */, "i8", ALLOC_NONE, 486396);
allocate([108,105,98,103,99,114,121,112,116,32,115,116,97,116,101,32,116,114,97,110,115,105,116,105,111,110,32,37,115,32,61,62,32,37,115,32,37,115,10,0] /* libgcrypt state tran */, "i8", ALLOC_NONE, 486412);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecc verify: Failed t */, "i8", ALLOC_NONE, 486452);
allocate([115,101,99,109,101,109,32,117,115,97,103,101,58,32,37,117,47,37,108,117,32,98,121,116,101,115,32,105,110,32,37,117,32,98,108,111,99,107,115,10,0] /* secmem usage: %u/%lu */, "i8", ALLOC_NONE, 486500);
allocate([110,32,60,61,32,104,45,62,99,105,112,104,101,114,45,62,98,108,111,99,107,115,105,122,101,0] /* n _= h-_cipher-_bloc */, "i8", ALLOC_NONE, 486544);
allocate([101,99,99,32,118,101,114,105,102,121,58,32,82,101,106,101,99,116,101,100,10,0] /* ecc verify: Rejected */, "i8", ALLOC_NONE, 486572);
allocate([41,10,0] /* )\0A\00 */, "i8", ALLOC_NONE, 486596);
allocate([203,0,117,63,69,163,94,139,181,160,61,105,154,198,80,7,39,44,50,171,14,222,209,99,26,139,96,90,67,255,91,237,128,134,7,43,161,231,204,35,88,186,236,161,52,200,37,167,0] /* \CB\00u?E\A3^\8B\B5\ */, "i8", ALLOC_NONE, 486600);
allocate([35,9,125,34,52,5,216,34,134,66,164,119,189,162,85,179,42,173,188,228,189,160,179,247,227,108,157,167,0] /* #\09}\224\05\D8\22\8 */, "i8", ALLOC_NONE, 486652);
allocate([49,46,51,46,49,52,46,51,46,50,46,50,57,0] /* 1.3.14.3.2.29\00 */, "i8", ALLOC_NONE, 486684);
allocate([69,67,68,83,65,32,111,112,101,114,97,116,105,111,110,58,32,115,105,103,110,44,32,118,101,114,105,102,121,32,111,107,46,10,0] /* ECDSA operation: sig */, "i8", ALLOC_NONE, 486700);
allocate([112,104,105,61,32,0] /* phi= \00 */, "i8", ALLOC_NONE, 486736);
allocate([69,67,68,83,65,32,111,112,101,114,97,116,105,111,110,58,32,115,105,103,110,44,32,118,101,114,105,102,121,32,102,97,105,108,101,100,10,0] /* ECDSA operation: sig */, "i8", ALLOC_NONE, 486744);
allocate([82,73,74,78,68,65,69,76,49,57,50,0] /* RIJNDAEL192\00 */, "i8", ALLOC_NONE, 486784);
allocate([69,67,68,83,65,32,111,112,101,114,97,116,105,111,110,58,32,115,105,103,110,32,102,97,105,108,101,100,10,0] /* ECDSA operation: sig */, "i8", ALLOC_NONE, 486796);
allocate([103,101,110,107,101,121,0] /* genkey\00 */, "i8", ALLOC_NONE, 486828);
allocate([84,101,115,116,105,110,103,32,107,101,121,46,10,0] /* Testing key.\0A\00 */, "i8", ALLOC_NONE, 486836);
allocate([103,101,110,32,112,114,105,109,101,58,32,112,98,105,116,115,61,37,117,32,113,98,105,116,115,61,37,117,32,102,98,105,116,115,61,37,117,47,37,117,32,110,61,37,100,10,0] /* gen prime: pbits=%u  */, "i8", ALLOC_NONE, 486852);
allocate([63,79,84,82,58,65,65,69,68,0] /* ?OTR:AAED\00 */, "i8", ALLOC_NONE, 486900);
allocate([109,100,32,100,101,98,117,103,58,32,99,97,110,39,116,32,111,112,101,110,32,37,115,10,0] /* md debug: can't open */, "i8", ALLOC_NONE, 486912);
allocate([101,99,103,101,110,58,32,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,102,102,105,110,101,32,99,111,111,114,100,105,110,97,116,101,115,10,0] /* ecgen: Failed to get */, "i8", ALLOC_NONE, 486940);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 486984);
allocate([109,105,115,99,46,99,0] /* misc.c\00 */, "i8", ALLOC_NONE, 486988);
allocate([9,37,115,10,0] /* \09%s\0A\00 */, "i8", ALLOC_NONE, 486996);
allocate([99,105,112,104,101,114,32,109,111,100,101,32,78,79,78,69,32,117,115,101,100,0] /* cipher mode NONE use */, "i8", ALLOC_NONE, 487004);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,117,115,101,100,58,32,37,115,10,0] /* ecgen curve used: %s */, "i8", ALLOC_NONE, 487028);
allocate([118,97,108,117,101,0] /* value\00 */, "i8", ALLOC_NONE, 487052);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,71,122,0] /* ecgen curve Gz\00 */, "i8", ALLOC_NONE, 487060);
allocate([97,117,116,104,46,99,0] /* auth.c\00 */, "i8", ALLOC_NONE, 487076);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,71,121,0] /* ecgen curve Gy\00 */, "i8", ALLOC_NONE, 487084);
allocate([114,98,0] /* rb\00 */, "i8", ALLOC_NONE, 487100);
allocate([114,110,103,95,99,116,120,45,62,99,105,112,104,101,114,95,104,100,0] /* rng_ctx-_cipher_hd\0 */, "i8", ALLOC_NONE, 487104);
allocate([78,111,32,119,97,121,32,116,111,32,103,97,116,104,101,114,32,101,110,116,114,111,112,121,32,102,111,114,32,116,104,101,32,82,78,71,10,0] /* No way to gather ent */, "i8", ALLOC_NONE, 487124);
allocate([205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0] /* \CD\CD\CD\CD\CD\CD\C */, "i8", ALLOC_NONE, 487164);
allocate([101,110,99,114,121,112,116,43,100,101,99,114,121,112,116,0] /* encrypt+decrypt\00 */, "i8", ALLOC_NONE, 487216);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,57,57,100,101,102,56,51,54,49,52,54,98,99,57,98,49,98,52,100,50,50,56,51,49,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 487232);
allocate([103,0] /* g\00 */, "i8", ALLOC_NONE, 487284);
allocate([67,65,77,69,76,76,73,65,45,49,50,56,32,116,101,115,116,32,100,101,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-128 test de */, "i8", ALLOC_NONE, 487288);
allocate([37,100,0] /* %d\00 */, "i8", ALLOC_NONE, 487328);
allocate([100,115,97,58,101,108,103,97,109,97,108,58,114,115,97,58,101,99,99,0] /* dsa:elgamal:rsa:ecc\ */, "i8", ALLOC_NONE, 487332);
allocate([110,111,32,100,101,115,99,114,105,112,116,105,111,110,32,97,118,97,105,108,97,98,108,101,0] /* no description avail */, "i8", ALLOC_NONE, 487352);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,71,120,0] /* ecgen curve Gx\00 */, "i8", ALLOC_NONE, 487380);
allocate([40,37,115,0] /* (%s\00 */, "i8", ALLOC_NONE, 487396);
allocate([102,32,33,61,32,78,85,76,76,0] /* f != NULL\00 */, "i8", ALLOC_NONE, 487400);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,110,0] /* ecgen curve  n\00 */, "i8", ALLOC_NONE, 487412);
allocate([40,112,114,105,118,107,101,121,115,10,0] /* (privkeys\0A\00 */, "i8", ALLOC_NONE, 487428);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 487440);
allocate([100,105,103,101,115,116,0] /* digest\00 */, "i8", ALLOC_NONE, 487448);
allocate([49,46,51,46,49,52,46,51,46,50,46,50,54,0] /* 1.3.14.3.2.26\00 */, "i8", ALLOC_NONE, 487456);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,98,0] /* ecgen curve  b\00 */, "i8", ALLOC_NONE, 487472);
allocate([32,32,113,61,32,0] /*   q= \00 */, "i8", ALLOC_NONE, 487488);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,97,0] /* ecgen curve  a\00 */, "i8", ALLOC_NONE, 487496);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,52,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 487512);
allocate([101,99,103,101,110,32,99,117,114,118,101,32,32,112,0] /* ecgen curve  p\00 */, "i8", ALLOC_NONE, 487536);
allocate([37,77,41,0] /* %M)\00 */, "i8", ALLOC_NONE, 487552);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,100,0] /* ecgen result d\00 */, "i8", ALLOC_NONE, 487556);
allocate([111,118,101,114,102,108,111,119,32,105,110,32,112,114,105,109,101,32,103,101,110,101,114,97,116,105,111,110,10,0] /* overflow in prime ge */, "i8", ALLOC_NONE, 487572);
allocate([49,46,53,46,48,0] /* 1.5.0\00 */, "i8", ALLOC_NONE, 487604);
allocate([63,79,84,82,58,65,65,69,75,0] /* ?OTR:AAEK\00 */, "i8", ALLOC_NONE, 487612);
allocate([119,0] /* w\00 */, "i8", ALLOC_NONE, 487624);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,81,0] /* ecgen result Q\00 */, "i8", ALLOC_NONE, 487628);
allocate([68,69,83,32,119,101,97,107,32,107,101,121,32,100,101,116,101,99,116,105,111,110,32,102,97,105,108,101,100,0] /* DES weak key detecti */, "i8", ALLOC_NONE, 487644);
allocate([37,48,50,120,0] /* %02x\00 */, "i8", ALLOC_NONE, 487676);
allocate([73,86,32,108,101,110,103,116,104,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,98,108,111,99,107,108,101,110,103,116,104,0] /* IV length does not m */, "i8", ALLOC_NONE, 487684);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,110,0] /* ecgen result n\00 */, "i8", ALLOC_NONE, 487724);
allocate([112,117,98,108,105,99,45,107,101,121,0] /* public-key\00 */, "i8", ALLOC_NONE, 487740);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,71,0] /* ecgen result G\00 */, "i8", ALLOC_NONE, 487752);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,98,0] /* ecgen result b\00 */, "i8", ALLOC_NONE, 487768);
allocate([102,105,112,115,95,114,110,103,95,105,115,95,108,111,99,107,101,100,0] /* fips_rng_is_locked\0 */, "i8", ALLOC_NONE, 487784);
allocate([83,108,111,119,32,101,110,116,114,111,112,121,32,103,97,116,104,101,114,105,110,103,32,109,111,100,117,108,101,32,110,111,116,32,121,101,116,32,105,110,105,116,105,97,108,105,122,101,100,10,0] /* Slow entropy gatheri */, "i8", ALLOC_NONE, 487804);
allocate([100,97,116,97,45,53,48,32,107,101,121,45,50,54,0] /* data-50 key-26\00 */, "i8", ALLOC_NONE, 487856);
allocate([69,108,103,97,109,97,108,32,116,101,115,116,32,107,101,121,32,102,111,114,32,37,115,32,37,115,32,102,97,105,108,101,100,10,0] /* Elgamal test key for */, "i8", ALLOC_NONE, 487872);
allocate([48,120,54,52,50,49,48,53,49,57,101,53,57,99,56,48,101,55,48,102,97,55,101,57,97,98,55,50,50,52,51,48,52,57,102,101,98,56,100,101,101,99,99,49,52,54,98,57,98,49,0] /* 0x64210519e59c80e70f */, "i8", ALLOC_NONE, 487908);
allocate([113,0] /* q\00 */, "i8", ALLOC_NONE, 487960);
allocate([67,65,77,69,76,76,73,65,45,49,50,56,32,116,101,115,116,32,101,110,99,114,121,112,116,105,111,110,32,102,97,105,108,101,100,46,0] /* CAMELLIA-128 test en */, "i8", ALLOC_NONE, 487964);
allocate([45,46,47,95,58,42,43,61,0] /* -./_:_+=\00 */, "i8", ALLOC_NONE, 488004);
allocate([105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,40,102,97,116,97,108,32,111,114,32,98,117,103,41,0] /* internal error (fata */, "i8", ALLOC_NONE, 488016);
allocate([112,117,98,107,101,121,115,58,37,115,58,10,0] /* pubkeys:%s:\0A\00 */, "i8", ALLOC_NONE, 488048);
allocate([44,32,102,117,110,99,116,105,111,110,32,0] /* , function \00 */, "i8", ALLOC_NONE, 488064);
allocate([33,100,111,110,101,0] /* !done\00 */, "i8", ALLOC_NONE, 488076);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,97,0] /* ecgen result a\00 */, "i8", ALLOC_NONE, 488084);
allocate([99,97,108,108,101,100,32,105,110,32,110,111,110,45,111,112,101,114,97,116,105,111,110,97,108,32,115,116,97,116,101,0] /* called in non-operat */, "i8", ALLOC_NONE, 488100);
allocate([97,116,104,46,99,0] /* ath.c\00 */, "i8", ALLOC_NONE, 488132);
allocate([47,100,101,118,47,117,114,97,110,100,111,109,0] /* /dev/urandom\00 */, "i8", ALLOC_NONE, 488140);
allocate([101,99,103,101,110,32,114,101,115,117,108,116,32,112,0] /* ecgen result p\00 */, "i8", ALLOC_NONE, 488156);
allocate([119,43,98,0] /* w+b\00 */, "i8", ALLOC_NONE, 488172);
allocate([114,97,110,100,111,109,45,102,105,112,115,46,99,0] /* random-fips.c\00 */, "i8", ALLOC_NONE, 488176);
allocate([231,24,72,61,12,231,105,100,78,46,66,199,188,21,180,99,142,31,152,177,59,32,68,40,86,50,168,3,175,169,115,235,222,15,242,68,135,126,166,10,76,176,67,44,229,119,195,27,235,0,156,92,44,73,170,46,78,173,178,23,173,140,192,155,0] /* \E7\18H=\0C\E7idN.B\ */, "i8", ALLOC_NONE, 488192);
allocate([205,199,110,92,153,20,251,146,129,161,199,226,132,215,62,103,241,128,154,72,164,151,32,14,4,109,57,204,199,17,44,208,0] /* \CD\C7n\5C\99\14\FB\ */, "i8", ALLOC_NONE, 488260);
allocate([37,48,56,120,0] /* %08x\00 */, "i8", ALLOC_NONE, 488296);
allocate([32,40,104,119,114,110,103,32,102,97,105,108,101,100,41,0] /*  (hwrng failed)\00 */, "i8", ALLOC_NONE, 488304);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,48,46,52,46,51,0] /* 1.2.840.10040.4.3\00 */, "i8", ALLOC_NONE, 488320);
allocate([40,99,117,114,118,101,32,37,115,41,0] /* (curve %s)\00 */, "i8", ALLOC_NONE, 488340);
allocate([109,112,105,45,109,112,111,119,46,99,0] /* mpi-mpow.c\00 */, "i8", ALLOC_NONE, 488352);
allocate([99,111,110,116,101,120,116,95,112,114,105,118,32,33,61,32,78,85,76,76,0] /* context_priv != NULL */, "i8", ALLOC_NONE, 488364);
allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_NONE, 488388);
allocate([103,99,114,121,95,109,100,95,111,112,101,110,32,102,97,105,108,101,100,0] /* gcry_md_open failed\ */, "i8", ALLOC_NONE, 488396);
allocate([32,32,112,61,32,0] /*   p= \00 */, "i8", ALLOC_NONE, 488416);
allocate([116,114,97,110,115,105,101,110,116,45,107,101,121,0] /* transient-key\00 */, "i8", ALLOC_NONE, 488424);
allocate([112,103,121,0] /* pgy\00 */, "i8", ALLOC_NONE, 488440);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,51,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 488444);
allocate([41,0] /* )\00 */, "i8", ALLOC_NONE, 488468);
allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* system bytes     = % */, "i8", ALLOC_NONE, 488472);
allocate([112,97,98,103,110,113,0] /* pabgnq\00 */, "i8", ALLOC_NONE, 488500);
allocate([40,115,105,103,45,118,97,108,40,0] /* (sig-val(\00 */, "i8", ALLOC_NONE, 488508);
allocate([40,49,58,37,99,37,117,58,0] /* (1:%c%u:\00 */, "i8", ALLOC_NONE, 488520);
allocate([48,120,55,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,69,52,56,55,69,68,53,49,49,48,66,52,54,49,49,65,54,50,54,51,51,49,52,53,67,48,54,69,48,69,54,56,57,52,56,49,50,55,48,52,52,53,51,51,69,54,51,65,48,49,48,53,68,70,53,51,49,68,56,57,67,68,57,49,50,56,65,53,48,52,51,67,67,55,49,65,48,50,54,69,70,55,67,65,56,67,68,57,69,54,57,68,50,49,56,68,57,56,49,53,56,53,51,54,70,57,50,70,56,65,49,66,65,55,70,48,57,65,66,54,66,54,65,56,69,49,50,50,70,50,52,50,68,65,66,66,51,49,50,70,51,70,54,51,55,65,50,54,50,49,55,52,68,51,49,66,70,54,66,53,56,53,70,70,65,69,53,66,55,65,48,51,53,66,70,54,70,55,49,67,51,53,70,68,65,68,52,52,67,70,68,50,68,55,52,70,57,50,48,56,66,69,50,53,56,70,70,51,50,52,57,52,51,51,50,56,70,54,55,50,50,68,57,69,69,49,48,48,51,69,53,67,53,48,66,49,68,70,56,50,67,67,54,68,50,52,49,66,48,69,50,65,69,57,67,68,51,52,56,66,49,70,68,52,55,69,57,50,54,55,65,70,67,49,66,50,65,69,57,49,69,69,53,49,68,54,67,66,48,69,51,49,55,57,65,66,49,48,52,50,65,57,53,68,67,70,54,65,57,52,56,51,66,56,52,66,52,66,51,54,66,51,56,54,49,65,65,55,50,53,53,69,52,67,48,50,55,56,66,65,51,54,48,52,54,53,49,49,66,57,57,51,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0] /* 0x7FFFFFFFFFFFFFFFE4 */, "i8", ALLOC_NONE, 488532);
allocate([112,113,103,121,0] /* pqgy\00 */, "i8", ALLOC_NONE, 488920);
allocate([116,108,118,46,99,0] /* tlv.c\00 */, "i8", ALLOC_NONE, 488928);
allocate([67,82,67,51,50,82,70,67,49,53,49,48,0] /* CRC32RFC1510\00 */, "i8", ALLOC_NONE, 488936);
allocate([99,97,110,39,116,32,103,101,110,101,114,97,116,101,32,97,32,112,114,105,109,101,32,119,105,116,104,32,108,101,115,115,32,116,104,97,110,32,37,100,32,98,105,116,115,10,0] /* can't generate a pri */, "i8", ALLOC_NONE, 488952);
allocate([67,65,83,84,53,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,37,115,41,46,10,0] /* CAST5 selftest faile */, "i8", ALLOC_NONE, 489000);
allocate([67,65,77,69,76,76,73,65,49,57,50,0] /* CAMELLIA192\00 */, "i8", ALLOC_NONE, 489032);
allocate([63,79,84,82,118,0] /* ?OTRv\00 */, "i8", ALLOC_NONE, 489044);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 489052);
allocate([65,82,67,70,79,85,82,32,115,101,108,102,116,101,115,116,32,102,97,105,108,101,100,32,40,37,115,41,10,0] /* ARCFOUR selftest fai */, "i8", ALLOC_NONE, 489056);
allocate([109,101,109,111,114,121,32,97,116,32,37,112,32,99,111,114,114,117,112,116,101,100,32,40,111,118,101,114,102,108,111,119,61,37,48,50,120,41,10,0] /* memory at %p corrupt */, "i8", ALLOC_NONE, 489088);
allocate([100,98,103,109,100,45,37,48,53,100,46,37,46,49,48,115,0] /* dbgmd-%05d.%.10s\00 */, "i8", ALLOC_NONE, 489128);
allocate([99,117,114,118,101,0] /* curve\00 */, "i8", ALLOC_NONE, 489148);
allocate([119,101,97,107,32,107,101,121,32,116,97,98,108,101,32,100,101,102,101,99,116,0] /* weak key table defec */, "i8", ALLOC_NONE, 489156);
allocate([37,42,115,91,111,112,101,110,93,10,0] /* %_s[open]\0A\00 */, "i8", ALLOC_NONE, 489180);
allocate([37,115,9,37,115,9,37,115,9,0] /* %s\09%s\09%s\09\00 */, "i8", ALLOC_NONE, 489192);
allocate([87,65,82,78,73,78,71,58,32,99,105,112,104,101,114,95,115,101,116,105,118,58,32,105,118,108,101,110,61,37,117,32,98,108,107,108,101,110,61,37,117,10,0] /* WARNING: cipher_seti */, "i8", ALLOC_NONE, 489204);
allocate([111,112,101,114,97,116,105,111,110,32,105,115,32,110,111,116,32,112,111,115,115,105,98,108,101,32,119,105,116,104,111,117,116,32,105,110,105,116,105,97,108,105,122,101,100,32,115,101,99,117,114,101,32,109,101,109,111,114,121,10,0] /* operation is not pos */, "i8", ALLOC_NONE, 489248);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,49,51,0] /* 1.3.36.3.3.2.8.1.1.1 */, "i8", ALLOC_NONE, 489312);
allocate([10,70,97,116,97,108,32,101,114,114,111,114,58,32,0] /* \0AFatal error: \00 */, "i8", ALLOC_NONE, 489336);
allocate([105,110,118,97,108,105,100,32,102,108,97,103,32,118,97,108,117,101,32,105,110,32,109,112,105,10,0] /* invalid flag value i */, "i8", ALLOC_NONE, 489352);
allocate([108,101,110,112,32,61,61,32,48,0] /* lenp == 0\00 */, "i8", ALLOC_NONE, 489380);
allocate([112,114,105,118,97,116,101,45,107,101,121,0] /* private-key\00 */, "i8", ALLOC_NONE, 489392);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,49,49,0] /* 1.3.36.3.3.2.8.1.1.1 */, "i8", ALLOC_NONE, 489404);
allocate([99,117,115,116,111,109,32,97,108,108,111,99,97,116,105,111,110,32,104,97,110,100,108,101,114,0] /* custom allocation ha */, "i8", ALLOC_NONE, 489428);
allocate([102,105,112,115,46,99,0] /* fips.c\00 */, "i8", ALLOC_NONE, 489456);
allocate([42,108,111,99,107,32,61,61,32,77,85,84,69,88,95,85,78,76,79,67,75,69,68,0] /* _lock == MUTEX_UNLOC */, "i8", ALLOC_NONE, 489464);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,57,0] /* 1.3.36.3.3.2.8.1.1.9 */, "i8", ALLOC_NONE, 489488);
allocate([75,65,84,0] /* KAT\00 */, "i8", ALLOC_NONE, 489512);
allocate([116,111,111,32,109,97,110,121,32,114,97,110,100,111,109,32,98,105,116,115,32,114,101,113,117,101,115,116,101,100,10,0] /* too many random bits */, "i8", ALLOC_NONE, 489516);
allocate([170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0] /* \AA\AA\AA\AA\AA\AA\A */, "i8", ALLOC_NONE, 489548);
allocate([101,108,103,32,32,120,61,32,0] /* elg  x= \00 */, "i8", ALLOC_NONE, 489572);
allocate([116,108,118,32,33,61,32,78,85,76,76,0] /* tlv != NULL\00 */, "i8", ALLOC_NONE, 489584);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,99,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 489596);
allocate([112,0] /* p\00 */, "i8", ALLOC_NONE, 489648);
allocate([37,115,10,0] /* %s\0A\00 */, "i8", ALLOC_NONE, 489652);
allocate([8,9,11,10,12,13,34,39,92,0] /* \08\09\0B\0A\0C\0D\2 */, "i8", ALLOC_NONE, 489656);
allocate([91,85,110,107,110,111,119,110,32,108,111,103,32,108,101,118,101,108,32,37,100,93,58,32,0] /* [Unknown log level % */, "i8", ALLOC_NONE, 489668);
allocate([109,112,105,95,103,101,116,95,111,112,97,113,117,101,32,111,110,32,110,111,114,109,97,108,32,109,112,105,10,0] /* mpi_get_opaque on no */, "i8", ALLOC_NONE, 489696);
allocate([97,114,99,102,111,117,114,58,98,108,111,119,102,105,115,104,58,99,97,115,116,53,58,100,101,115,58,97,101,115,58,116,119,111,102,105,115,104,58,115,101,114,112,101,110,116,58,114,102,99,50,50,54,56,58,115,101,101,100,58,99,97,109,101,108,108,105,97,0] /* arcfour:blowfish:cas */, "i8", ALLOC_NONE, 489728);
allocate(1, "i8", ALLOC_NONE, 489800);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 489804);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,55,0] /* 1.3.36.3.3.2.8.1.1.7 */, "i8", ALLOC_NONE, 489808);
allocate([91,77,80,73,95,78,85,76,76,93,0] /* [MPI_NULL]\00 */, "i8", ALLOC_NONE, 489832);
allocate([109,112,105,45,112,111,119,46,99,0] /* mpi-pow.c\00 */, "i8", ALLOC_NONE, 489844);
allocate([32,9,32,9,32,32,9,32,0] /*  \09 \09  \09 \00 */, "i8", ALLOC_NONE, 489856);
allocate([33,32,40,98,117,102,102,101,114,95,115,105,122,101,32,124,124,32,99,97,114,114,121,41,0] /* ! (buffer_size || ca */, "i8", ALLOC_NONE, 489868);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,53,0] /* 1.3.36.3.3.2.8.1.1.5 */, "i8", ALLOC_NONE, 489896);
allocate([32,41,10,0] /*  )\0A\00 */, "i8", ALLOC_NONE, 489920);
allocate([111,110,101,32,109,105,108,108,105,111,110,32,34,97,34,0] /* one million \22a\22\ */, "i8", ALLOC_NONE, 489924);
allocate([111,110,101,32,109,105,108,108,105,111,110,32,34,97,34,0] /* one million \22a\22\ */, "i8", ALLOC_NONE, 489940);
allocate([49,46,50,46,56,52,48,46,49,49,51,53,52,57,46,49,46,49,46,53,0] /* 1.2.840.113549.1.1.5 */, "i8", ALLOC_NONE, 489956);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,51,0] /* 1.3.36.3.3.2.8.1.1.3 */, "i8", ALLOC_NONE, 489980);
allocate([83,69,82,80,69,78,84,0] /* SERPENT\00 */, "i8", ALLOC_NONE, 490004);
allocate([49,46,51,46,51,54,46,51,46,51,46,50,46,56,46,49,46,49,46,49,0] /* 1.3.36.3.3.2.8.1.1.1 */, "i8", ALLOC_NONE, 490012);
allocate([114,115,97,46,99,0] /* rsa.c\00 */, "i8", ALLOC_NONE, 490036);
allocate([32,0] /*  \00 */, "i8", ALLOC_NONE, 490044);
allocate([50,46,49,54,46,56,52,48,46,49,46,49,48,49,46,51,46,52,46,49,46,50,50,0] /* 2.16.840.1.101.3.4.1 */, "i8", ALLOC_NONE, 490048);
allocate([33,98,112,95,109,97,114,107,101,114,0] /* !bp_marker\00 */, "i8", ALLOC_NONE, 490072);
allocate([49,46,51,46,49,51,50,46,48,46,51,53,0] /* 1.3.132.0.35\00 */, "i8", ALLOC_NONE, 490084);
allocate([40,115,105,103,45,118,97,108,40,37,115,40,115,37,98,41,41,41,0] /* (sig-val(%s(s%b)))\0 */, "i8", ALLOC_NONE, 490100);
allocate([115,101,99,112,53,50,49,114,49,0] /* secp521r1\00 */, "i8", ALLOC_NONE, 490120);
allocate([95,103,99,114,121,95,109,112,105,95,99,109,112,32,40,40,120,41,44,40,110,109,105,110,117,115,49,41,41,32,60,32,48,32,38,38,32,95,103,99,114,121,95,109,112,105,95,99,109,112,95,117,105,32,40,40,120,41,44,40,49,41,41,32,62,32,48,0] /* _gcry_mpi_cmp ((x),( */, "i8", ALLOC_NONE, 490132);
allocate([63,79,84,82,63,0] /* ?OTR?\00 */, "i8", ALLOC_NONE, 490200);
allocate([79,111,112,115,58,32,109,100,32,100,101,98,117,103,32,97,108,114,101,97,100,121,32,115,116,97,114,116,101,100,10,0] /* Oops: md debug alrea */, "i8", ALLOC_NONE, 490208);
allocate([49,46,51,46,49,51,50,46,48,46,51,52,0] /* 1.3.132.0.34\00 */, "i8", ALLOC_NONE, 490240);
allocate([83,72,65,49,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0] /* SHA1 not available\0 */, "i8", ALLOC_NONE, 490256);
allocate([99,105,112,104,101,114,32,37,100,32,119,47,111,32,107,101,121,32,108,101,110,103,116,104,10,0] /* cipher %d w/o key le */, "i8", ALLOC_NONE, 490276);
allocate([119,98,0] /* wb\00 */, "i8", ALLOC_NONE, 490304);
allocate([115,101,99,112,51,56,52,114,49,0] /* secp384r1\00 */, "i8", ALLOC_NONE, 490308);
allocate([109,112,105,32,114,111,117,110,100,105,110,103,32,116,111,32,99,101,105,108,105,110,103,32,110,111,116,32,121,101,116,32,105,109,112,108,101,109,101,110,116,101,100,10,0] /* mpi rounding to ceil */, "i8", ALLOC_NONE, 490320);
allocate([41,41,0] /* ))\00 */, "i8", ALLOC_NONE, 490368);
allocate([115,101,99,112,50,53,54,114,49,0] /* secp256r1\00 */, "i8", ALLOC_NONE, 490372);
allocate([112,114,105,109,101,50,53,54,118,49,0] /* prime256v1\00 */, "i8", ALLOC_NONE, 490384);
allocate([114,97,110,100,111,109,0] /* random\00 */, "i8", ALLOC_NONE, 490396);
allocate([112,111,111,108,95,105,115,95,108,111,99,107,101,100,0] /* pool_is_locked\00 */, "i8", ALLOC_NONE, 490404);
allocate([221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,0] /* \DD\DD\DD\DD\DD\DD\D */, "i8", ALLOC_NONE, 490420);
allocate([101,108,103,32,32,121,61,32,0] /* elg  y= \00 */, "i8", ALLOC_NONE, 490472);
allocate([48,120,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0] /* 0xffffffffffffffffff */, "i8", ALLOC_NONE, 490484);
allocate([100,111,109,97,105,110,0] /* domain\00 */, "i8", ALLOC_NONE, 490536);
allocate([48,46,51,46,52,52,48,49,46,53,46,51,46,49,46,57,46,50,52,0] /* 0.3.4401.5.3.1.9.24\ */, "i8", ALLOC_NONE, 490544);
allocate([92,120,37,48,50,120,0] /* \5Cx%02x\00 */, "i8", ALLOC_NONE, 490564);
allocate([87,97,114,110,105,110,103,58,32,117,115,105,110,103,32,105,110,115,101,99,117,114,101,32,109,101,109,111,114,121,33,10,0] /* Warning: using insec */, "i8", ALLOC_NONE, 490572);
allocate([68,66,71,58,32,0] /* DBG: \00 */, "i8", ALLOC_NONE, 490608);
allocate([99,105,112,104,101,114,115,58,37,115,58,10,0] /* ciphers:%s:\0A\00 */, "i8", ALLOC_NONE, 490616);
allocate([102,97,116,97,108,32,0] /* fatal \00 */, "i8", ALLOC_NONE, 490632);
allocate([49,46,50,46,56,52,48,46,49,48,48,52,53,46,51,46,49,46,55,0] /* 1.2.840.10045.3.1.7\ */, "i8", ALLOC_NONE, 490640);
allocate([91,114,101,115,101,110,116,93,0] /* [resent]\00 */, "i8", ALLOC_NONE, 490660);
allocate([32,9,32,32,9,9,9,9,32,9,32,9,32,9,32,32,0] /*  \09  \09\09\09\09 \ */, "i8", ALLOC_NONE, 490672);
allocate([49,46,51,46,49,51,50,46,48,46,51,51,0] /* 1.3.132.0.33\00 */, "i8", ALLOC_NONE, 490692);
allocate([40,112,114,111,116,111,99,111,108,32,37,115,41,0] /* (protocol %s)\00 */, "i8", ALLOC_NONE, 490708);
allocate([108,105,98,103,99,114,121,112,116,32,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,10,0] /* libgcrypt version mi */, "i8", ALLOC_NONE, 490724);
allocate([49,46,53,46,48,0] /* 1.5.0\00 */, "i8", ALLOC_NONE, 490752);
allocate(468, "i8", ALLOC_NONE, 490760);
allocate(4, "i8", ALLOC_NONE, 491228);
allocate([3,4,0] /* \03\04\00 */, "i8", ALLOC_NONE, 491232);
allocate(4, "i8", ALLOC_NONE, 491236);
allocate(28, "i8", ALLOC_NONE, 491240);
allocate(4, "i8", ALLOC_NONE, 491268);
allocate([255,255,255,255], "i8", ALLOC_NONE, 491272);
allocate([255,255,255,255], "i8", ALLOC_NONE, 491276);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,178,0,0,0,176,0,0,0,72,0,0,0,192,0,0,0,130,0,0,0,30,0,0,0,218,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491280);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,332,0,0,0,344,0,0,0,326,0,0,0,330,0,0,0,22,0,0,0,114,0,0,0,94,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491340);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,166,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,288,0,0,0,44,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491400);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,166,0,0,0,96,0,0,0,110,0,0,0,242,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491460);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,346,0,0,0,154,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,342,0,0,0,4,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491520);
allocate([298,0,0,0,264,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491580);
allocate([0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491604);
allocate([180,0,0,0,112,0,0,0,230,0,0,0,58,0,0,0,92,0,0,0,150,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491628);
allocate([82,0,0,0,290,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 491652);
allocate([47,112,114,111,99,47,115,121,115,47,99,114,121,112,116,111,47,102,105,112,115,95,101,110,97,98,108,101,100,0] /* /proc/sys/crypto/fip */, "i8", ALLOC_NONE, 491676);
allocate(4, "i8", ALLOC_NONE, 491708);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,320,0,0,0,128,0,0,0,62,0,0,0,60,0,0,0,164,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491712);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,70,0,0,0,108,0,0,0,172,0,0,0,260,0,0,0,100,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491752);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,24,0,0,0,228,0,0,0,108,0,0,0,172,0,0,0,260,0,0,0,100,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491792);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,122,0,0,0,108,0,0,0,172,0,0,0,260,0,0,0,100,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491832);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,64,0,0,0,350,0,0,0,274,0,0,0,236,0,0,0,124,0,0,0,204,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491872);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,48,0,0,0,20,0,0,0,274,0,0,0,236,0,0,0,124,0,0,0,204,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491912);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,32,0,0,0,132,0,0,0,100,0,0,0,86,0,0,0,322,0,0,0,104,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491952);
allocate([0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,28,0,0,0,276,0,0,0,100,0,0,0,86,0,0,0,322,0,0,0,104,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 491992);
allocate([0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,20,0,0,0,284,0,0,0,12,0,0,0,252,0,0,0,10,0,0,0,92,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492032);
allocate([0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,20,0,0,0,270,0,0,0,120,0,0,0,152,0,0,0,126,0,0,0,92,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492072);
allocate([0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,16,0,0,0,36,0,0,0,52,0,0,0,204,0,0,0,222,0,0,0,88,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492112);
allocate([0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,16,0,0,0,356,0,0,0,48,0,0,0,76,0,0,0,374,0,0,0,88,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492152);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,364,0,0,0,248,0,0,0,302,0,0,0,220,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492192);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,234,0,0,0,248,0,0,0,24,0,0,0,220,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492232);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,158,0,0,0,142,0,0,0,6,0,0,0,220,0,0,0,8,0,0,0], ["*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_NONE, 492272);
allocate([184,0,0,0], ["*",0,0,0], ALLOC_NONE, 492312);
allocate([184,0,0,0], ["*",0,0,0], ALLOC_NONE, 492316);
allocate([224,0,0,0], ["*",0,0,0], ALLOC_NONE, 492320);
allocate([224,0,0,0], ["*",0,0,0], ALLOC_NONE, 492324);
allocate([18,0,0,0], ["*",0,0,0], ALLOC_NONE, 492328);
allocate([10,10,84,104,105,115,32,105,115,32,76,105,98,103,99,114,121,112,116,32,49,46,53,46,48,32,45,32,84,104,101,32,71,78,85,32,67,114,121,112,116,111,32,76,105,98,114,97,114,121,10,67,111,112,121,114,105,103,104,116,32,50,48,48,48,44,32,50,48,48,50,44,32,50,48,48,51,44,32,50,48,48,52,44,32,50,48,48,55,44,32,50,48,48,56,44,32,50,48,48,57,44,10,32,32,32,32,32,32,32,32,32,32,50,48,49,48,44,32,50,48,49,49,32,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,44,32,73,110,99,46,10,10,10,0] /* \0A\0AThis is Libgcr */, "i8", ALLOC_NONE, 492332);
allocate([0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \00\01\02\02\03\03\0 */, "i8", ALLOC_NONE, 492492);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,4256,0,0,0,318,0,0,0,188,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492748);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,4256,0,0,0,318,0,0,0,188,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492792);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,192,0,0,0,772,0,0,0,138,0,0,0,80,0,0,0,148,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492836);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,528,0,0,0,338,0,0,0,78,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492880);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,192,0,0,0,528,0,0,0,338,0,0,0,78,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492924);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,528,0,0,0,338,0,0,0,78,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 492968);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,128,0,0,0,102,0,0,0,266,0,0,0,316,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493012);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,40,0,0,0,128,0,0,0,208,0,0,0,160,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493056);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,64,0,0,0,256,0,0,0,310,0,0,0,358,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493100);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,128,0,0,0,80,0,0,0,370,0,0,0,226,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493144);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,276,0,0,0,360,0,0,0,296,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493188);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,192,0,0,0,276,0,0,0,360,0,0,0,296,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493232);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,276,0,0,0,360,0,0,0,296,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493276);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,128,0,0,0,4168,0,0,0,306,0,0,0,314,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493320);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,0,0,0,264,0,0,0,304,0,0,0,0,0,0,0,0,0,0,0,246,0,0,0,246,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493364);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,256,0,0,0,488,0,0,0,28,0,0,0,348,0,0,0,280,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493408);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,192,0,0,0,488,0,0,0,28,0,0,0,348,0,0,0,280,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493452);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,128,0,0,0,488,0,0,0,28,0,0,0,348,0,0,0,280,0,0,0,0,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_NONE, 493496);
allocate([324,0,0,0,312,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493540);
allocate([32,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493548);
allocate([32,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493556);
allocate([32,0,0,0,0,0,0,0], ["*",0,0,0,"*",0,0,0], ALLOC_NONE, 493564);
allocate([111,116,114,108,95,116,108,118,95,110,101,119,0] /* otrl_tlv_new\00 */, "i8", ALLOC_NONE, 493572);
allocate([111,116,114,108,95,112,114,111,116,111,95,99,114,101,97,116,101,95,100,97,116,97,0] /* otrl_proto_create_da */, "i8", ALLOC_NONE, 493588);
allocate([111,116,114,108,95,99,111,110,116,101,120,116,95,112,114,105,118,95,110,101,119,0] /* otrl_context_priv_ne */, "i8", ALLOC_NONE, 493612);
allocate([111,116,114,108,95,99,111,110,116,101,120,116,95,102,105,110,100,95,102,105,110,103,101,114,112,114,105,110,116,0] /* otrl_context_find_fi */, "i8", ALLOC_NONE, 493636);
allocate([111,116,114,108,95,97,117,116,104,95,115,116,97,114,116,95,118,50,51,0] /* otrl_auth_start_v23\ */, "i8", ALLOC_NONE, 493668);
allocate([110,101,119,95,99,111,110,116,101,120,116,0] /* new_context\00 */, "i8", ALLOC_NONE, 493688);
allocate([99,114,101,97,116,101,95,118,49,95,107,101,121,95,101,120,99,104,97,110,103,101,95,109,101,115,115,97,103,101,0] /* create_v1_key_exchan */, "i8", ALLOC_NONE, 493700);
allocate([99,114,101,97,116,101,95,115,105,103,110,97,116,117,114,101,95,109,101,115,115,97,103,101,0] /* create_signature_mes */, "i8", ALLOC_NONE, 493732);
allocate([99,114,101,97,116,101,95,114,101,118,101,97,108,115,105,103,95,109,101,115,115,97,103,101,0] /* create_revealsig_mes */, "i8", ALLOC_NONE, 493760);
allocate([99,114,101,97,116,101,95,107,101,121,95,109,101,115,115,97,103,101,0] /* create_key_message\0 */, "i8", ALLOC_NONE, 493788);
allocate([99,104,101,99,107,95,112,117,98,107,101,121,95,97,117,116,104,0] /* check_pubkey_auth\00 */, "i8", ALLOC_NONE, 493808);
allocate([99,97,108,99,117,108,97,116,101,95,112,117,98,107,101,121,95,97,117,116,104,0] /* calculate_pubkey_aut */, "i8", ALLOC_NONE, 493828);
allocate([95,103,99,114,121,95,97,116,104,95,109,117,116,101,120,95,117,110,108,111,99,107,0] /* _gcry_ath_mutex_unlo */, "i8", ALLOC_NONE, 493852);
allocate([95,103,99,114,121,95,97,116,104,95,109,117,116,101,120,95,108,111,99,107,0] /* _gcry_ath_mutex_lock */, "i8", ALLOC_NONE, 493876);
allocate([95,103,99,114,121,95,97,116,104,95,109,117,116,101,120,95,100,101,115,116,114,111,121,0] /* _gcry_ath_mutex_dest */, "i8", ALLOC_NONE, 493900);
allocate([120,57,51,49,95,114,101,115,101,101,100,0] /* x931_reseed\00 */, "i8", ALLOC_NONE, 493924);
allocate([120,57,51,49,95,103,101,116,95,100,116,0] /* x931_get_dt\00 */, "i8", ALLOC_NONE, 493936);
allocate([120,57,51,49,95,103,101,110,101,114,97,116,101,95,115,101,101,100,0] /* x931_generate_seed\0 */, "i8", ALLOC_NONE, 493948);
allocate([120,57,51,49,95,103,101,110,101,114,97,116,101,95,107,101,121,0] /* x931_generate_key\00 */, "i8", ALLOC_NONE, 493968);
allocate([120,57,51,49,95,97,101,115,95,100,114,105,118,101,114,0] /* x931_aes_driver\00 */, "i8", ALLOC_NONE, 493988);
allocate([119,104,105,114,108,112,111,111,108,95,97,100,100,0] /* whirlpool_add\00 */, "i8", ALLOC_NONE, 494004);
allocate([118,115,101,120,112,95,115,115,99,97,110,0] /* vsexp_sscan\00 */, "i8", ALLOC_NONE, 494020);
allocate([115,101,120,112,95,101,108,101,109,101,110,116,115,95,101,120,116,114,97,99,116,95,101,99,99,0] /* sexp_elements_extrac */, "i8", ALLOC_NONE, 494032);
allocate([115,101,108,102,116,101,115,116,95,107,97,116,0] /* selftest_kat\00 */, "i8", ALLOC_NONE, 494060);
allocate([114,101,97,100,95,115,101,101,100,95,102,105,108,101,0] /* read_seed_file\00 */, "i8", ALLOC_NONE, 494076);
allocate([114,101,97,100,95,112,111,111,108,0] /* read_pool\00 */, "i8", ALLOC_NONE, 494092);
allocate([112,115,115,95,118,101,114,105,102,121,0] /* pss_verify\00 */, "i8", ALLOC_NONE, 494104);
allocate([112,115,115,95,101,110,99,111,100,101,0] /* pss_encode\00 */, "i8", ALLOC_NONE, 494116);
allocate([112,114,101,112,97,114,101,95,109,97,99,112,97,100,115,0] /* prepare_macpads\00 */, "i8", ALLOC_NONE, 494128);
allocate([112,107,99,115,49,95,101,110,99,111,100,101,95,102,111,114,95,115,105,103,110,97,116,117,114,101,0] /* pkcs1_encode_for_sig */, "i8", ALLOC_NONE, 494144);
allocate([112,107,99,115,49,95,101,110,99,111,100,101,95,102,111,114,95,101,110,99,114,121,112,116,105,111,110,0] /* pkcs1_encode_for_enc */, "i8", ALLOC_NONE, 494172);
allocate([112,107,95,114,101,103,105,115,116,101,114,95,100,101,102,97,117,108,116,0] /* pk_register_default\ */, "i8", ALLOC_NONE, 494200);
allocate([109,112,105,95,115,101,116,95,115,101,99,117,114,101,0] /* mpi_set_secure\00 */, "i8", ALLOC_NONE, 494220);
allocate([109,105,120,95,112,111,111,108,0] /* mix_pool\00 */, "i8", ALLOC_NONE, 494236);
allocate([109,100,95,119,114,105,116,101,0] /* md_write\00 */, "i8", ALLOC_NONE, 494248);
allocate([109,100,95,114,101,103,105,115,116,101,114,95,100,101,102,97,117,108,116,0] /* md_register_default\ */, "i8", ALLOC_NONE, 494260);
allocate([109,100,95,114,101,97,100,0] /* md_read\00 */, "i8", ALLOC_NONE, 494280);
allocate([109,100,95,103,101,116,95,97,108,103,111,0] /* md_get_algo\00 */, "i8", ALLOC_NONE, 494288);
allocate([109,100,95,99,111,112,121,0] /* md_copy\00 */, "i8", ALLOC_NONE, 494300);
allocate([109,95,111,117,116,95,111,102,95,110,0] /* m_out_of_n\00 */, "i8", ALLOC_NONE, 494308);
allocate([105,115,95,112,114,105,109,101,0] /* is_prime\00 */, "i8", ALLOC_NONE, 494320);
allocate([103,108,111,98,97,108,95,105,110,105,116,0] /* global_init\00 */, "i8", ALLOC_NONE, 494332);
allocate([103,101,116,95,114,97,110,100,111,109,0] /* get_random\00 */, "i8", ALLOC_NONE, 494344);
allocate([103,101,116,95,112,111,111,108,95,112,114,105,109,101,0] /* get_pool_prime\00 */, "i8", ALLOC_NONE, 494356);
allocate([103,101,116,95,101,110,116,114,111,112,121,0] /* get_entropy\00 */, "i8", ALLOC_NONE, 494372);
allocate([103,101,110,101,114,97,116,101,95,120,57,51,49,0] /* generate_x931\00 */, "i8", ALLOC_NONE, 494384);
allocate([103,101,110,101,114,97,116,101,95,115,116,100,0] /* generate_std\00 */, "i8", ALLOC_NONE, 494400);
allocate([103,101,110,101,114,97,116,101,95,102,105,112,115,49,56,54,0] /* generate_fips186\00 */, "i8", ALLOC_NONE, 494416);
allocate([103,101,110,101,114,97,116,101,0] /* generate\00 */, "i8", ALLOC_NONE, 494436);
allocate([103,101,110,101,114,97,116,101,0] /* generate\00 */, "i8", ALLOC_NONE, 494448);
allocate([103,101,110,95,120,57,51,49,95,112,97,114,109,95,120,112,0] /* gen_x931_parm_xp\00 */, "i8", ALLOC_NONE, 494460);
allocate([103,101,110,95,120,57,51,49,95,112,97,114,109,95,120,105,0] /* gen_x931_parm_xi\00 */, "i8", ALLOC_NONE, 494480);
allocate([103,101,110,95,107,0] /* gen_k\00 */, "i8", ALLOC_NONE, 494500);
allocate([103,99,114,121,95,115,101,120,112,95,118,108,105,115,116,0] /* gcry_sexp_vlist\00 */, "i8", ALLOC_NONE, 494508);
allocate([103,99,114,121,95,114,97,110,100,111,109,105,122,101,0] /* gcry_randomize\00 */, "i8", ALLOC_NONE, 494524);
allocate([103,99,114,121,95,114,97,110,100,111,109,95,98,121,116,101,115,95,115,101,99,117,114,101,0] /* gcry_random_bytes_se */, "i8", ALLOC_NONE, 494540);
allocate([103,99,114,121,95,114,97,110,100,111,109,95,98,121,116,101,115,0] /* gcry_random_bytes\00 */, "i8", ALLOC_NONE, 494568);
allocate([103,99,114,121,95,109,100,95,104,97,115,104,95,98,117,102,102,101,114,0] /* gcry_md_hash_buffer\ */, "i8", ALLOC_NONE, 494588);
allocate([103,99,114,121,95,109,100,95,103,101,116,95,97,108,103,111,0] /* gcry_md_get_algo\00 */, "i8", ALLOC_NONE, 494608);
allocate([103,99,114,121,95,99,114,101,97,116,101,95,110,111,110,99,101,0] /* gcry_create_nonce\00 */, "i8", ALLOC_NONE, 494628);
allocate([101,110,116,114,111,112,121,95,99,111,108,108,101,99,116,95,99,98,0] /* entropy_collect_cb\0 */, "i8", ALLOC_NONE, 494648);
allocate([101,110,99,114,121,112,116,95,97,101,115,0] /* encrypt_aes\00 */, "i8", ALLOC_NONE, 494668);
allocate([100,117,109,109,121,95,118,101,114,105,102,121,0] /* dummy_verify\00 */, "i8", ALLOC_NONE, 494680);
allocate([100,117,109,109,121,95,115,105,103,110,0] /* dummy_sign\00 */, "i8", ALLOC_NONE, 494696);
allocate([100,117,109,109,121,95,103,101,116,95,110,98,105,116,115,0] /* dummy_get_nbits\00 */, "i8", ALLOC_NONE, 494708);
allocate([100,117,109,109,121,95,103,101,110,101,114,97,116,101,0] /* dummy_generate\00 */, "i8", ALLOC_NONE, 494724);
allocate([100,117,109,109,121,95,101,110,99,114,121,112,116,95,115,116,114,101,97,109,0] /* dummy_encrypt_stream */, "i8", ALLOC_NONE, 494740);
allocate([100,117,109,109,121,95,101,110,99,114,121,112,116,95,98,108,111,99,107,0] /* dummy_encrypt_block\ */, "i8", ALLOC_NONE, 494764);
allocate([100,117,109,109,121,95,101,110,99,114,121,112,116,0] /* dummy_encrypt\00 */, "i8", ALLOC_NONE, 494784);
allocate([100,117,109,109,121,95,100,101,99,114,121,112,116,95,115,116,114,101,97,109,0] /* dummy_decrypt_stream */, "i8", ALLOC_NONE, 494800);
allocate([100,117,109,109,121,95,100,101,99,114,121,112,116,95,98,108,111,99,107,0] /* dummy_decrypt_block\ */, "i8", ALLOC_NONE, 494824);
allocate([100,117,109,109,121,95,100,101,99,114,121,112,116,0] /* dummy_decrypt\00 */, "i8", ALLOC_NONE, 494844);
allocate([100,117,109,109,121,95,99,104,101,99,107,95,115,101,99,114,101,116,95,107,101,121,0] /* dummy_check_secret_k */, "i8", ALLOC_NONE, 494860);
allocate([100,111,95,102,97,115,116,95,114,97,110,100,111,109,95,112,111,108,108,0] /* do_fast_random_poll\ */, "i8", ALLOC_NONE, 494884);
allocate([100,111,95,99,116,114,95,101,110,99,114,121,112,116,0] /* do_ctr_encrypt\00 */, "i8", ALLOC_NONE, 494904);
allocate([99,105,112,104,101,114,95,115,101,116,105,118,0] /* cipher_setiv\00 */, "i8", ALLOC_NONE, 494920);
allocate([99,105,112,104,101,114,95,114,101,103,105,115,116,101,114,95,100,101,102,97,117,108,116,0] /* cipher_register_defa */, "i8", ALLOC_NONE, 494936);
allocate([99,105,112,104,101,114,95,101,110,99,114,121,112,116,0] /* cipher_encrypt\00 */, "i8", ALLOC_NONE, 494960);
allocate([99,105,112,104,101,114,95,100,101,99,114,121,112,116,0] /* cipher_decrypt\00 */, "i8", ALLOC_NONE, 494976);
allocate([97,100,100,95,114,97,110,100,111,109,110,101,115,115,0] /* add_randomness\00 */, "i8", ALLOC_NONE, 494992);
allocate([95,103,99,114,121,95,115,101,120,112,95,118,108,105,115,116,0] /* _gcry_sexp_vlist\00 */, "i8", ALLOC_NONE, 495008);
allocate([95,103,99,114,121,95,115,101,120,112,95,115,112,114,105,110,116,0] /* _gcry_sexp_sprint\00 */, "i8", ALLOC_NONE, 495028);
allocate([95,103,99,114,121,95,115,101,120,112,95,112,114,101,112,101,110,100,0] /* _gcry_sexp_prepend\0 */, "i8", ALLOC_NONE, 495048);
allocate([95,103,99,114,121,95,115,101,120,112,95,110,116,104,0] /* _gcry_sexp_nth\00 */, "i8", ALLOC_NONE, 495068);
allocate([95,103,99,114,121,95,115,101,120,112,95,102,105,110,100,95,116,111,107,101,110,0] /* _gcry_sexp_find_toke */, "i8", ALLOC_NONE, 495084);
allocate([95,103,99,114,121,95,115,101,120,112,95,99,111,110,115,0] /* _gcry_sexp_cons\00 */, "i8", ALLOC_NONE, 495108);
allocate([95,103,99,114,121,95,115,101,120,112,95,97,112,112,101,110,100,0] /* _gcry_sexp_append\00 */, "i8", ALLOC_NONE, 495124);
allocate([95,103,99,114,121,95,115,101,120,112,95,97,108,105,115,116,0] /* _gcry_sexp_alist\00 */, "i8", ALLOC_NONE, 495144);
allocate([95,103,99,114,121,95,114,110,103,102,105,112,115,95,105,110,105,116,105,97,108,105,122,101,0] /* _gcry_rngfips_initia */, "i8", ALLOC_NONE, 495164);
allocate([95,103,99,114,121,95,114,110,103,99,115,112,114,110,103,95,115,101,116,95,115,101,101,100,95,102,105,108,101,0] /* _gcry_rngcsprng_set_ */, "i8", ALLOC_NONE, 495192);
allocate([95,103,99,114,121,95,112,107,95,115,105,103,110,0] /* _gcry_pk_sign\00 */, "i8", ALLOC_NONE, 495224);
allocate([95,103,99,114,121,95,112,107,95,103,101,110,107,101,121,0] /* _gcry_pk_genkey\00 */, "i8", ALLOC_NONE, 495240);
allocate([95,103,99,114,121,95,112,107,95,101,110,99,114,121,112,116,0] /* _gcry_pk_encrypt\00 */, "i8", ALLOC_NONE, 495256);
allocate([95,103,99,114,121,95,109,112,105,95,115,101,116,95,98,117,102,102,101,114,0] /* _gcry_mpi_set_buffer */, "i8", ALLOC_NONE, 495276);
allocate([95,103,99,114,121,95,109,112,105,95,112,111,119,109,0] /* _gcry_mpi_powm\00 */, "i8", ALLOC_NONE, 495300);
allocate([95,103,99,114,121,95,109,112,105,95,109,117,108,112,111,119,109,0] /* _gcry_mpi_mulpowm\00 */, "i8", ALLOC_NONE, 495316);
allocate([95,103,99,114,121,95,109,100,95,103,101,116,0] /* _gcry_md_get\00 */, "i8", ALLOC_NONE, 495336);
allocate([95,103,99,114,121,95,108,111,103,118,0] /* _gcry_logv\00 */, "i8", ALLOC_NONE, 495352);
allocate([95,103,99,114,121,95,105,110,105,116,105,97,108,105,122,101,95,102,105,112,115,95,109,111,100,101,0] /* _gcry_initialize_fip */, "i8", ALLOC_NONE, 495364);
allocate([95,103,99,114,121,95,105,110,97,99,116,105,118,97,116,101,95,102,105,112,115,95,109,111,100,101,0] /* _gcry_inactivate_fip */, "i8", ALLOC_NONE, 495392);
allocate([95,103,99,114,121,95,103,101,110,101,114,97,116,101,95,102,105,112,115,49,56,54,95,51,95,112,114,105,109,101,0] /* _gcry_generate_fips1 */, "i8", ALLOC_NONE, 495420);
allocate([95,103,99,114,121,95,102,97,116,97,108,95,101,114,114,111,114,0] /* _gcry_fatal_error\00 */, "i8", ALLOC_NONE, 495452);
allocate([95,103,99,114,121,95,99,105,112,104,101,114,95,99,116,108,0] /* _gcry_cipher_ctl\00 */, "i8", ALLOC_NONE, 495472);
allocate([95,103,99,114,121,95,97,99,95,105,111,95,119,114,105,116,101,0] /* _gcry_ac_io_write\00 */, "i8", ALLOC_NONE, 495492);
allocate([95,103,99,114,121,95,97,99,95,105,111,95,114,101,97,100,0] /* _gcry_ac_io_read\00 */, "i8", ALLOC_NONE, 495512);
allocate([95,103,99,114,121,95,97,99,95,105,111,95,105,110,105,116,95,118,97,0] /* _gcry_ac_io_init_va\ */, "i8", ALLOC_NONE, 495532);
allocate([0,0,0,0,28,144,7,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 495552);
allocate(1, "i8", ALLOC_NONE, 495572);
allocate([0,0,0,0,40,144,7,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 495576);
allocate(1, "i8", ALLOC_NONE, 495596);
allocate([83,116,57,98,97,100,95,97,108,108,111,99,0] /* St9bad_alloc\00 */, "i8", ALLOC_NONE, 495600);
allocate([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* St20bad_array_new_le */, "i8", ALLOC_NONE, 495616);
allocate(12, "i8", ALLOC_NONE, 495644);
allocate([0,0,0,0,0,0,0,0,28,144,7,0], "i8", ALLOC_NONE, 495656);
allocate(1, "i8", ALLOC_NONE, 495668);
allocate(4, "i8", ALLOC_NONE, 495672);
allocate([0,0,0,0,9,13,11,14,18,26,22,28,27,23,29,18,36,52,44,56,45,57,39,54,54,46,58,36,63,35,49,42,72,104,88,112,65,101,83,126,90,114,78,108,83,127,69,98,108,92,116,72,101,81,127,70,126,70,98,84,119,75,105,90,144,208,176,224,153,221,187,238,130,202,166,252,139,199,173,242,180,228,156,216,189,233,151,214,166,254,138,196,175,243,129,202,216,184,232,144,209,181,227,158,202,162,254,140,195,175,245,130,252,140,196,168,245,129,207,166,238,150,210,180,231,155,217,186,59,187,123,219,50,182,112,213,41,161,109,199,32,172,102,201,31,143,87,227,22,130,92,237,13,149,65,255,4,152,74,241,115,211,35,171,122,222,40,165,97,201,53,183,104,196,62,185,87,231,15,147,94,234,4,157,69,253,25,143,76,240,18,129,171,107,203,59,162,102,192,53,185,113,221,39,176,124,214,41,143,95,231,3,134,82,236,13,157,69,241,31,148,72,250,17,227,3,147,75,234,14,152,69,241,25,133,87,248,20,142,89,199,55,191,115,206,58,180,125,213,45,169,111,220,32,162,97,118,109,246,173,127,96,253,163,100,119,224,177,109,122,235,191,82,89,218,149,91,84,209,155,64,67,204,137,73,78,199,135,62,5,174,221,55,8,165,211,44,31,184,193,37,18,179,207,26,49,130,229,19,60,137,235,8,43,148,249,1,38,159,247,230,189,70,77,239,176,77,67,244,167,80,81,253,170,91,95,194,137,106,117,203,132,97,123,208,147,124,105,217,158,119,103,174,213,30,61,167,216,21,51,188,207,8,33,181,194,3,47,138,225,50,5,131,236,57,11,152,251,36,25,145,246,47,23,77,214,141,118,68,219,134,120,95,204,155,106,86,193,144,100,105,226,161,78,96,239,170,64,123,248,183,82,114,245,188,92,5,190,213,6,12,179,222,8,23,164,195,26,30,169,200,20,33,138,249,62,40,135,242,48,51,144,239,34,58,157,228,44,221,6,61,150,212,11,54,152,207,28,43,138,198,17,32,132,249,50,17,174,240,63,26,160,235,40,7,178,226,37,12,188,149,110,101,230,156,99,110,232,135,116,115,250,142,121,120,244,177,90,73,222,184,87,66,208,163,64,95,194,170,77,84,204,236,218,247,65,229,215,252,79,254,192,225,93,247,205,234,83,200,238,219,121,193,227,208,119,218,244,205,101,211,249,198,107,164,178,175,49,173,191,164,63,182,168,185,45,191,165,178,35,128,134,131,9,137,139,136,7,146,156,149,21,155,145,158,27,124,10,71,161,117,7,76,175,110,16,81,189,103,29,90,179,88,62,107,153,81,51,96,151,74,36,125,133,67,41,118,139,52,98,31,209,61,111,20,223,38,120,9,205,47,117,2,195,16,86,51,233,25,91,56,231,2,76,37,245,11,65,46,251,215,97,140,154,222,108,135,148,197,123,154,134,204,118,145,136,243,85,160,162,250,88,171,172,225,79,182,190,232,66,189,176,159,9,212,234,150,4,223,228,141,19,194,246,132,30,201,248,187,61,248,210,178,48,243,220,169,39,238,206,160,42,229,192,71,177,60,122,78,188,55,116,85,171,42,102,92,166,33,104,99,133,16,66,106,136,27,76,113,159,6,94,120,146,13,80,15,217,100,10,6,212,111,4,29,195,114,22,20,206,121,24,43,237,72,50,34,224,67,60,57,247,94,46,48,250,85,32,154,183,1,236,147,186,10,226,136,173,23,240,129,160,28,254,190,131,45,212,183,142,38,218,172,153,59,200,165,148,48,198,210,223,89,156,219,210,82,146,192,197,79,128,201,200,68,142,246,235,117,164,255,230,126,170,228,241,99,184,237,252,104,182,10,103,177,12,3,106,186,2,24,125,167,16,17,112,172,30,46,83,157,52,39,94,150,58,60,73,139,40,53,68,128,38,66,15,233,124,75,2,226,114,80,21,255,96,89,24,244,110,102,59,197,68,111,54,206,74,116,33,211,88,125,44,216,86,161,12,122,55,168,1,113,57,179,22,108,43,186,27,103,37,133,56,86,15,140,53,93,1,151,34,64,19,158,47,75,29,233,100,34,71,224,105,41,73,251,126,52,91,242,115,63,85,205,80,14,127,196,93,5,113,223,74,24,99,214,71,19,109,49,220,202,215,56,209,193,217,35,198,220,203,42,203,215,197,21,232,230,239,28,229,237,225,7,242,240,243,14,255,251,253,121,180,146,167,112,185,153,169,107,174,132,187,98,163,143,181,93,128,190,159,84,141,181,145,79,154,168,131,70,151,163,141], "i8", ALLOC_NONE, 495676);
allocate([0,0,0,0,13,11,14,9,26,22,28,18,23,29,18,27,52,44,56,36,57,39,54,45,46,58,36,54,35,49,42,63,104,88,112,72,101,83,126,65,114,78,108,90,127,69,98,83,92,116,72,108,81,127,70,101,70,98,84,126,75,105,90,119,208,176,224,144,221,187,238,153,202,166,252,130,199,173,242,139,228,156,216,180,233,151,214,189,254,138,196,166,243,129,202,175,184,232,144,216,181,227,158,209,162,254,140,202,175,245,130,195,140,196,168,252,129,207,166,245,150,210,180,238,155,217,186,231,187,123,219,59,182,112,213,50,161,109,199,41,172,102,201,32,143,87,227,31,130,92,237,22,149,65,255,13,152,74,241,4,211,35,171,115,222,40,165,122,201,53,183,97,196,62,185,104,231,15,147,87,234,4,157,94,253,25,143,69,240,18,129,76,107,203,59,171,102,192,53,162,113,221,39,185,124,214,41,176,95,231,3,143,82,236,13,134,69,241,31,157,72,250,17,148,3,147,75,227,14,152,69,234,25,133,87,241,20,142,89,248,55,191,115,199,58,180,125,206,45,169,111,213,32,162,97,220,109,246,173,118,96,253,163,127,119,224,177,100,122,235,191,109,89,218,149,82,84,209,155,91,67,204,137,64,78,199,135,73,5,174,221,62,8,165,211,55,31,184,193,44,18,179,207,37,49,130,229,26,60,137,235,19,43,148,249,8,38,159,247,1,189,70,77,230,176,77,67,239,167,80,81,244,170,91,95,253,137,106,117,194,132,97,123,203,147,124,105,208,158,119,103,217,213,30,61,174,216,21,51,167,207,8,33,188,194,3,47,181,225,50,5,138,236,57,11,131,251,36,25,152,246,47,23,145,214,141,118,77,219,134,120,68,204,155,106,95,193,144,100,86,226,161,78,105,239,170,64,96,248,183,82,123,245,188,92,114,190,213,6,5,179,222,8,12,164,195,26,23,169,200,20,30,138,249,62,33,135,242,48,40,144,239,34,51,157,228,44,58,6,61,150,221,11,54,152,212,28,43,138,207,17,32,132,198,50,17,174,249,63,26,160,240,40,7,178,235,37,12,188,226,110,101,230,149,99,110,232,156,116,115,250,135,121,120,244,142,90,73,222,177,87,66,208,184,64,95,194,163,77,84,204,170,218,247,65,236,215,252,79,229,192,225,93,254,205,234,83,247,238,219,121,200,227,208,119,193,244,205,101,218,249,198,107,211,178,175,49,164,191,164,63,173,168,185,45,182,165,178,35,191,134,131,9,128,139,136,7,137,156,149,21,146,145,158,27,155,10,71,161,124,7,76,175,117,16,81,189,110,29,90,179,103,62,107,153,88,51,96,151,81,36,125,133,74,41,118,139,67,98,31,209,52,111,20,223,61,120,9,205,38,117,2,195,47,86,51,233,16,91,56,231,25,76,37,245,2,65,46,251,11,97,140,154,215,108,135,148,222,123,154,134,197,118,145,136,204,85,160,162,243,88,171,172,250,79,182,190,225,66,189,176,232,9,212,234,159,4,223,228,150,19,194,246,141,30,201,248,132,61,248,210,187,48,243,220,178,39,238,206,169,42,229,192,160,177,60,122,71,188,55,116,78,171,42,102,85,166,33,104,92,133,16,66,99,136,27,76,106,159,6,94,113,146,13,80,120,217,100,10,15,212,111,4,6,195,114,22,29,206,121,24,20,237,72,50,43,224,67,60,34,247,94,46,57,250,85,32,48,183,1,236,154,186,10,226,147,173,23,240,136,160,28,254,129,131,45,212,190,142,38,218,183,153,59,200,172,148,48,198,165,223,89,156,210,210,82,146,219,197,79,128,192,200,68,142,201,235,117,164,246,230,126,170,255,241,99,184,228,252,104,182,237,103,177,12,10,106,186,2,3,125,167,16,24,112,172,30,17,83,157,52,46,94,150,58,39,73,139,40,60,68,128,38,53,15,233,124,66,2,226,114,75,21,255,96,80,24,244,110,89,59,197,68,102,54,206,74,111,33,211,88,116,44,216,86,125,12,122,55,161,1,113,57,168,22,108,43,179,27,103,37,186,56,86,15,133,53,93,1,140,34,64,19,151,47,75,29,158,100,34,71,233,105,41,73,224,126,52,91,251,115,63,85,242,80,14,127,205,93,5,113,196,74,24,99,223,71,19,109,214,220,202,215,49,209,193,217,56,198,220,203,35,203,215,197,42,232,230,239,21,229,237,225,28,242,240,243,7,255,251,253,14,180,146,167,121,185,153,169,112,174,132,187,107,163,143,181,98,128,190,159,93,141,181,145,84,154,168,131,79,151,163,141,70], "i8", ALLOC_NONE, 496700);
allocate([0,0,0,0,11,14,9,13,22,28,18,26,29,18,27,23,44,56,36,52,39,54,45,57,58,36,54,46,49,42,63,35,88,112,72,104,83,126,65,101,78,108,90,114,69,98,83,127,116,72,108,92,127,70,101,81,98,84,126,70,105,90,119,75,176,224,144,208,187,238,153,221,166,252,130,202,173,242,139,199,156,216,180,228,151,214,189,233,138,196,166,254,129,202,175,243,232,144,216,184,227,158,209,181,254,140,202,162,245,130,195,175,196,168,252,140,207,166,245,129,210,180,238,150,217,186,231,155,123,219,59,187,112,213,50,182,109,199,41,161,102,201,32,172,87,227,31,143,92,237,22,130,65,255,13,149,74,241,4,152,35,171,115,211,40,165,122,222,53,183,97,201,62,185,104,196,15,147,87,231,4,157,94,234,25,143,69,253,18,129,76,240,203,59,171,107,192,53,162,102,221,39,185,113,214,41,176,124,231,3,143,95,236,13,134,82,241,31,157,69,250,17,148,72,147,75,227,3,152,69,234,14,133,87,241,25,142,89,248,20,191,115,199,55,180,125,206,58,169,111,213,45,162,97,220,32,246,173,118,109,253,163,127,96,224,177,100,119,235,191,109,122,218,149,82,89,209,155,91,84,204,137,64,67,199,135,73,78,174,221,62,5,165,211,55,8,184,193,44,31,179,207,37,18,130,229,26,49,137,235,19,60,148,249,8,43,159,247,1,38,70,77,230,189,77,67,239,176,80,81,244,167,91,95,253,170,106,117,194,137,97,123,203,132,124,105,208,147,119,103,217,158,30,61,174,213,21,51,167,216,8,33,188,207,3,47,181,194,50,5,138,225,57,11,131,236,36,25,152,251,47,23,145,246,141,118,77,214,134,120,68,219,155,106,95,204,144,100,86,193,161,78,105,226,170,64,96,239,183,82,123,248,188,92,114,245,213,6,5,190,222,8,12,179,195,26,23,164,200,20,30,169,249,62,33,138,242,48,40,135,239,34,51,144,228,44,58,157,61,150,221,6,54,152,212,11,43,138,207,28,32,132,198,17,17,174,249,50,26,160,240,63,7,178,235,40,12,188,226,37,101,230,149,110,110,232,156,99,115,250,135,116,120,244,142,121,73,222,177,90,66,208,184,87,95,194,163,64,84,204,170,77,247,65,236,218,252,79,229,215,225,93,254,192,234,83,247,205,219,121,200,238,208,119,193,227,205,101,218,244,198,107,211,249,175,49,164,178,164,63,173,191,185,45,182,168,178,35,191,165,131,9,128,134,136,7,137,139,149,21,146,156,158,27,155,145,71,161,124,10,76,175,117,7,81,189,110,16,90,179,103,29,107,153,88,62,96,151,81,51,125,133,74,36,118,139,67,41,31,209,52,98,20,223,61,111,9,205,38,120,2,195,47,117,51,233,16,86,56,231,25,91,37,245,2,76,46,251,11,65,140,154,215,97,135,148,222,108,154,134,197,123,145,136,204,118,160,162,243,85,171,172,250,88,182,190,225,79,189,176,232,66,212,234,159,9,223,228,150,4,194,246,141,19,201,248,132,30,248,210,187,61,243,220,178,48,238,206,169,39,229,192,160,42,60,122,71,177,55,116,78,188,42,102,85,171,33,104,92,166,16,66,99,133,27,76,106,136,6,94,113,159,13,80,120,146,100,10,15,217,111,4,6,212,114,22,29,195,121,24,20,206,72,50,43,237,67,60,34,224,94,46,57,247,85,32,48,250,1,236,154,183,10,226,147,186,23,240,136,173,28,254,129,160,45,212,190,131,38,218,183,142,59,200,172,153,48,198,165,148,89,156,210,223,82,146,219,210,79,128,192,197,68,142,201,200,117,164,246,235,126,170,255,230,99,184,228,241,104,182,237,252,177,12,10,103,186,2,3,106,167,16,24,125,172,30,17,112,157,52,46,83,150,58,39,94,139,40,60,73,128,38,53,68,233,124,66,15,226,114,75,2,255,96,80,21,244,110,89,24,197,68,102,59,206,74,111,54,211,88,116,33,216,86,125,44,122,55,161,12,113,57,168,1,108,43,179,22,103,37,186,27,86,15,133,56,93,1,140,53,64,19,151,34,75,29,158,47,34,71,233,100,41,73,224,105,52,91,251,126,63,85,242,115,14,127,205,80,5,113,196,93,24,99,223,74,19,109,214,71,202,215,49,220,193,217,56,209,220,203,35,198,215,197,42,203,230,239,21,232,237,225,28,229,240,243,7,242,251,253,14,255,146,167,121,180,153,169,112,185,132,187,107,174,143,181,98,163,190,159,93,128,181,145,84,141,168,131,79,154,163,141,70,151], "i8", ALLOC_NONE, 497724);
allocate([0,0,0,0,14,9,13,11,28,18,26,22,18,27,23,29,56,36,52,44,54,45,57,39,36,54,46,58,42,63,35,49,112,72,104,88,126,65,101,83,108,90,114,78,98,83,127,69,72,108,92,116,70,101,81,127,84,126,70,98,90,119,75,105,224,144,208,176,238,153,221,187,252,130,202,166,242,139,199,173,216,180,228,156,214,189,233,151,196,166,254,138,202,175,243,129,144,216,184,232,158,209,181,227,140,202,162,254,130,195,175,245,168,252,140,196,166,245,129,207,180,238,150,210,186,231,155,217,219,59,187,123,213,50,182,112,199,41,161,109,201,32,172,102,227,31,143,87,237,22,130,92,255,13,149,65,241,4,152,74,171,115,211,35,165,122,222,40,183,97,201,53,185,104,196,62,147,87,231,15,157,94,234,4,143,69,253,25,129,76,240,18,59,171,107,203,53,162,102,192,39,185,113,221,41,176,124,214,3,143,95,231,13,134,82,236,31,157,69,241,17,148,72,250,75,227,3,147,69,234,14,152,87,241,25,133,89,248,20,142,115,199,55,191,125,206,58,180,111,213,45,169,97,220,32,162,173,118,109,246,163,127,96,253,177,100,119,224,191,109,122,235,149,82,89,218,155,91,84,209,137,64,67,204,135,73,78,199,221,62,5,174,211,55,8,165,193,44,31,184,207,37,18,179,229,26,49,130,235,19,60,137,249,8,43,148,247,1,38,159,77,230,189,70,67,239,176,77,81,244,167,80,95,253,170,91,117,194,137,106,123,203,132,97,105,208,147,124,103,217,158,119,61,174,213,30,51,167,216,21,33,188,207,8,47,181,194,3,5,138,225,50,11,131,236,57,25,152,251,36,23,145,246,47,118,77,214,141,120,68,219,134,106,95,204,155,100,86,193,144,78,105,226,161,64,96,239,170,82,123,248,183,92,114,245,188,6,5,190,213,8,12,179,222,26,23,164,195,20,30,169,200,62,33,138,249,48,40,135,242,34,51,144,239,44,58,157,228,150,221,6,61,152,212,11,54,138,207,28,43,132,198,17,32,174,249,50,17,160,240,63,26,178,235,40,7,188,226,37,12,230,149,110,101,232,156,99,110,250,135,116,115,244,142,121,120,222,177,90,73,208,184,87,66,194,163,64,95,204,170,77,84,65,236,218,247,79,229,215,252,93,254,192,225,83,247,205,234,121,200,238,219,119,193,227,208,101,218,244,205,107,211,249,198,49,164,178,175,63,173,191,164,45,182,168,185,35,191,165,178,9,128,134,131,7,137,139,136,21,146,156,149,27,155,145,158,161,124,10,71,175,117,7,76,189,110,16,81,179,103,29,90,153,88,62,107,151,81,51,96,133,74,36,125,139,67,41,118,209,52,98,31,223,61,111,20,205,38,120,9,195,47,117,2,233,16,86,51,231,25,91,56,245,2,76,37,251,11,65,46,154,215,97,140,148,222,108,135,134,197,123,154,136,204,118,145,162,243,85,160,172,250,88,171,190,225,79,182,176,232,66,189,234,159,9,212,228,150,4,223,246,141,19,194,248,132,30,201,210,187,61,248,220,178,48,243,206,169,39,238,192,160,42,229,122,71,177,60,116,78,188,55,102,85,171,42,104,92,166,33,66,99,133,16,76,106,136,27,94,113,159,6,80,120,146,13,10,15,217,100,4,6,212,111,22,29,195,114,24,20,206,121,50,43,237,72,60,34,224,67,46,57,247,94,32,48,250,85,236,154,183,1,226,147,186,10,240,136,173,23,254,129,160,28,212,190,131,45,218,183,142,38,200,172,153,59,198,165,148,48,156,210,223,89,146,219,210,82,128,192,197,79,142,201,200,68,164,246,235,117,170,255,230,126,184,228,241,99,182,237,252,104,12,10,103,177,2,3,106,186,16,24,125,167,30,17,112,172,52,46,83,157,58,39,94,150,40,60,73,139,38,53,68,128,124,66,15,233,114,75,2,226,96,80,21,255,110,89,24,244,68,102,59,197,74,111,54,206,88,116,33,211,86,125,44,216,55,161,12,122,57,168,1,113,43,179,22,108,37,186,27,103,15,133,56,86,1,140,53,93,19,151,34,64,29,158,47,75,71,233,100,34,73,224,105,41,91,251,126,52,85,242,115,63,127,205,80,14,113,196,93,5,99,223,74,24,109,214,71,19,215,49,220,202,217,56,209,193,203,35,198,220,197,42,203,215,239,21,232,230,225,28,229,237,243,7,242,240,253,14,255,251,167,121,180,146,169,112,185,153,187,107,174,132,181,98,163,143,159,93,128,190,145,84,141,181,131,79,154,168,141,70,151,163], "i8", ALLOC_NONE, 498748);
allocate([244,167,80,81,65,101,83,126,23,164,195,26,39,94,150,58,171,107,203,59,157,69,241,31,250,88,171,172,227,3,147,75,48,250,85,32,118,109,246,173,204,118,145,136,2,76,37,245,229,215,252,79,42,203,215,197,53,68,128,38,98,163,143,181,177,90,73,222,186,27,103,37,234,14,152,69,254,192,225,93,47,117,2,195,76,240,18,129,70,151,163,141,211,249,198,107,143,95,231,3,146,156,149,21,109,122,235,191,82,89,218,149,190,131,45,212,116,33,211,88,224,105,41,73,201,200,68,142,194,137,106,117,142,121,120,244,88,62,107,153,185,113,221,39,225,79,182,190,136,173,23,240,32,172,102,201,206,58,180,125,223,74,24,99,26,49,130,229,81,51,96,151,83,127,69,98,100,119,224,177,107,174,132,187,129,160,28,254,8,43,148,249,72,104,88,112,69,253,25,143,222,108,135,148,123,248,183,82,115,211,35,171,75,2,226,114,31,143,87,227,85,171,42,102,235,40,7,178,181,194,3,47,197,123,154,134,55,8,165,211,40,135,242,48,191,165,178,35,3,106,186,2,22,130,92,237,207,28,43,138,121,180,146,167,7,242,240,243,105,226,161,78,218,244,205,101,5,190,213,6,52,98,31,209,166,254,138,196,46,83,157,52,243,85,160,162,138,225,50,5,246,235,117,164,131,236,57,11,96,239,170,64,113,159,6,94,110,16,81,189,33,138,249,62,221,6,61,150,62,5,174,221,230,189,70,77,84,141,181,145,196,93,5,113,6,212,111,4,80,21,255,96,152,251,36,25,189,233,151,214,64,67,204,137,217,158,119,103,232,66,189,176,137,139,136,7,25,91,56,231,200,238,219,121,124,10,71,161,66,15,233,124,132,30,201,248,0,0,0,0,128,134,131,9,43,237,72,50,17,112,172,30,90,114,78,108,14,255,251,253,133,56,86,15,174,213,30,61,45,57,39,54,15,217,100,10,92,166,33,104,91,84,209,155,54,46,58,36,10,103,177,12,87,231,15,147,238,150,210,180,155,145,158,27,192,197,79,128,220,32,162,97,119,75,105,90,18,26,22,28,147,186,10,226,160,42,229,192,34,224,67,60,27,23,29,18,9,13,11,14,139,199,173,242,182,168,185,45,30,169,200,20,241,25,133,87,117,7,76,175,153,221,187,238,127,96,253,163,1,38,159,247,114,245,188,92,102,59,197,68,251,126,52,91,67,41,118,139,35,198,220,203,237,252,104,182,228,241,99,184,49,220,202,215,99,133,16,66,151,34,64,19,198,17,32,132,74,36,125,133,187,61,248,210,249,50,17,174,41,161,109,199,158,47,75,29,178,48,243,220,134,82,236,13,193,227,208,119,179,22,108,43,112,185,153,169,148,72,250,17,233,100,34,71,252,140,196,168,240,63,26,160,125,44,216,86,51,144,239,34,73,78,199,135,56,209,193,217,202,162,254,140,212,11,54,152,245,129,207,166,122,222,40,165,183,142,38,218,173,191,164,63,58,157,228,44,120,146,13,80,95,204,155,106,126,70,98,84,141,19,194,246,216,184,232,144,57,247,94,46,195,175,245,130,93,128,190,159,208,147,124,105,213,45,169,111,37,18,179,207,172,153,59,200,24,125,167,16,156,99,110,232,59,187,123,219,38,120,9,205,89,24,244,110,154,183,1,236,79,154,168,131,149,110,101,230,255,230,126,170,188,207,8,33,21,232,230,239,231,155,217,186,111,54,206,74,159,9,212,234,176,124,214,41,164,178,175,49,63,35,49,42,165,148,48,198,162,102,192,53,78,188,55,116,130,202,166,252,144,208,176,224,167,216,21,51,4,152,74,241,236,218,247,65,205,80,14,127,145,246,47,23,77,214,141,118,239,176,77,67,170,77,84,204,150,4,223,228,209,181,227,158,106,136,27,76,44,31,184,193,101,81,127,70,94,234,4,157,140,53,93,1,135,116,115,250,11,65,46,251,103,29,90,179,219,210,82,146,16,86,51,233,214,71,19,109,215,97,140,154,161,12,122,55,248,20,142,89,19,60,137,235,169,39,238,206,97,201,53,183,28,229,237,225,71,177,60,122,210,223,89,156,242,115,63,85,20,206,121,24,199,55,191,115,247,205,234,83,253,170,91,95,61,111,20,223,68,219,134,120,175,243,129,202,104,196,62,185,36,52,44,56,163,64,95,194,29,195,114,22,226,37,12,188,60,73,139,40,13,149,65,255,168,1,113,57,12,179,222,8,180,228,156,216,86,193,144,100,203,132,97,123,50,182,112,213,108,92,116,72,184,87,66,208], "i8", ALLOC_NONE, 499772);
allocate([167,80,81,244,101,83,126,65,164,195,26,23,94,150,58,39,107,203,59,171,69,241,31,157,88,171,172,250,3,147,75,227,250,85,32,48,109,246,173,118,118,145,136,204,76,37,245,2,215,252,79,229,203,215,197,42,68,128,38,53,163,143,181,98,90,73,222,177,27,103,37,186,14,152,69,234,192,225,93,254,117,2,195,47,240,18,129,76,151,163,141,70,249,198,107,211,95,231,3,143,156,149,21,146,122,235,191,109,89,218,149,82,131,45,212,190,33,211,88,116,105,41,73,224,200,68,142,201,137,106,117,194,121,120,244,142,62,107,153,88,113,221,39,185,79,182,190,225,173,23,240,136,172,102,201,32,58,180,125,206,74,24,99,223,49,130,229,26,51,96,151,81,127,69,98,83,119,224,177,100,174,132,187,107,160,28,254,129,43,148,249,8,104,88,112,72,253,25,143,69,108,135,148,222,248,183,82,123,211,35,171,115,2,226,114,75,143,87,227,31,171,42,102,85,40,7,178,235,194,3,47,181,123,154,134,197,8,165,211,55,135,242,48,40,165,178,35,191,106,186,2,3,130,92,237,22,28,43,138,207,180,146,167,121,242,240,243,7,226,161,78,105,244,205,101,218,190,213,6,5,98,31,209,52,254,138,196,166,83,157,52,46,85,160,162,243,225,50,5,138,235,117,164,246,236,57,11,131,239,170,64,96,159,6,94,113,16,81,189,110,138,249,62,33,6,61,150,221,5,174,221,62,189,70,77,230,141,181,145,84,93,5,113,196,212,111,4,6,21,255,96,80,251,36,25,152,233,151,214,189,67,204,137,64,158,119,103,217,66,189,176,232,139,136,7,137,91,56,231,25,238,219,121,200,10,71,161,124,15,233,124,66,30,201,248,132,0,0,0,0,134,131,9,128,237,72,50,43,112,172,30,17,114,78,108,90,255,251,253,14,56,86,15,133,213,30,61,174,57,39,54,45,217,100,10,15,166,33,104,92,84,209,155,91,46,58,36,54,103,177,12,10,231,15,147,87,150,210,180,238,145,158,27,155,197,79,128,192,32,162,97,220,75,105,90,119,26,22,28,18,186,10,226,147,42,229,192,160,224,67,60,34,23,29,18,27,13,11,14,9,199,173,242,139,168,185,45,182,169,200,20,30,25,133,87,241,7,76,175,117,221,187,238,153,96,253,163,127,38,159,247,1,245,188,92,114,59,197,68,102,126,52,91,251,41,118,139,67,198,220,203,35,252,104,182,237,241,99,184,228,220,202,215,49,133,16,66,99,34,64,19,151,17,32,132,198,36,125,133,74,61,248,210,187,50,17,174,249,161,109,199,41,47,75,29,158,48,243,220,178,82,236,13,134,227,208,119,193,22,108,43,179,185,153,169,112,72,250,17,148,100,34,71,233,140,196,168,252,63,26,160,240,44,216,86,125,144,239,34,51,78,199,135,73,209,193,217,56,162,254,140,202,11,54,152,212,129,207,166,245,222,40,165,122,142,38,218,183,191,164,63,173,157,228,44,58,146,13,80,120,204,155,106,95,70,98,84,126,19,194,246,141,184,232,144,216,247,94,46,57,175,245,130,195,128,190,159,93,147,124,105,208,45,169,111,213,18,179,207,37,153,59,200,172,125,167,16,24,99,110,232,156,187,123,219,59,120,9,205,38,24,244,110,89,183,1,236,154,154,168,131,79,110,101,230,149,230,126,170,255,207,8,33,188,232,230,239,21,155,217,186,231,54,206,74,111,9,212,234,159,124,214,41,176,178,175,49,164,35,49,42,63,148,48,198,165,102,192,53,162,188,55,116,78,202,166,252,130,208,176,224,144,216,21,51,167,152,74,241,4,218,247,65,236,80,14,127,205,246,47,23,145,214,141,118,77,176,77,67,239,77,84,204,170,4,223,228,150,181,227,158,209,136,27,76,106,31,184,193,44,81,127,70,101,234,4,157,94,53,93,1,140,116,115,250,135,65,46,251,11,29,90,179,103,210,82,146,219,86,51,233,16,71,19,109,214,97,140,154,215,12,122,55,161,20,142,89,248,60,137,235,19,39,238,206,169,201,53,183,97,229,237,225,28,177,60,122,71,223,89,156,210,115,63,85,242,206,121,24,20,55,191,115,199,205,234,83,247,170,91,95,253,111,20,223,61,219,134,120,68,243,129,202,175,196,62,185,104,52,44,56,36,64,95,194,163,195,114,22,29,37,12,188,226,73,139,40,60,149,65,255,13,1,113,57,168,179,222,8,12,228,156,216,180,193,144,100,86,132,97,123,203,182,112,213,50,92,116,72,108,87,66,208,184], "i8", ALLOC_NONE, 500796);
allocate([80,81,244,167,83,126,65,101,195,26,23,164,150,58,39,94,203,59,171,107,241,31,157,69,171,172,250,88,147,75,227,3,85,32,48,250,246,173,118,109,145,136,204,118,37,245,2,76,252,79,229,215,215,197,42,203,128,38,53,68,143,181,98,163,73,222,177,90,103,37,186,27,152,69,234,14,225,93,254,192,2,195,47,117,18,129,76,240,163,141,70,151,198,107,211,249,231,3,143,95,149,21,146,156,235,191,109,122,218,149,82,89,45,212,190,131,211,88,116,33,41,73,224,105,68,142,201,200,106,117,194,137,120,244,142,121,107,153,88,62,221,39,185,113,182,190,225,79,23,240,136,173,102,201,32,172,180,125,206,58,24,99,223,74,130,229,26,49,96,151,81,51,69,98,83,127,224,177,100,119,132,187,107,174,28,254,129,160,148,249,8,43,88,112,72,104,25,143,69,253,135,148,222,108,183,82,123,248,35,171,115,211,226,114,75,2,87,227,31,143,42,102,85,171,7,178,235,40,3,47,181,194,154,134,197,123,165,211,55,8,242,48,40,135,178,35,191,165,186,2,3,106,92,237,22,130,43,138,207,28,146,167,121,180,240,243,7,242,161,78,105,226,205,101,218,244,213,6,5,190,31,209,52,98,138,196,166,254,157,52,46,83,160,162,243,85,50,5,138,225,117,164,246,235,57,11,131,236,170,64,96,239,6,94,113,159,81,189,110,16,249,62,33,138,61,150,221,6,174,221,62,5,70,77,230,189,181,145,84,141,5,113,196,93,111,4,6,212,255,96,80,21,36,25,152,251,151,214,189,233,204,137,64,67,119,103,217,158,189,176,232,66,136,7,137,139,56,231,25,91,219,121,200,238,71,161,124,10,233,124,66,15,201,248,132,30,0,0,0,0,131,9,128,134,72,50,43,237,172,30,17,112,78,108,90,114,251,253,14,255,86,15,133,56,30,61,174,213,39,54,45,57,100,10,15,217,33,104,92,166,209,155,91,84,58,36,54,46,177,12,10,103,15,147,87,231,210,180,238,150,158,27,155,145,79,128,192,197,162,97,220,32,105,90,119,75,22,28,18,26,10,226,147,186,229,192,160,42,67,60,34,224,29,18,27,23,11,14,9,13,173,242,139,199,185,45,182,168,200,20,30,169,133,87,241,25,76,175,117,7,187,238,153,221,253,163,127,96,159,247,1,38,188,92,114,245,197,68,102,59,52,91,251,126,118,139,67,41,220,203,35,198,104,182,237,252,99,184,228,241,202,215,49,220,16,66,99,133,64,19,151,34,32,132,198,17,125,133,74,36,248,210,187,61,17,174,249,50,109,199,41,161,75,29,158,47,243,220,178,48,236,13,134,82,208,119,193,227,108,43,179,22,153,169,112,185,250,17,148,72,34,71,233,100,196,168,252,140,26,160,240,63,216,86,125,44,239,34,51,144,199,135,73,78,193,217,56,209,254,140,202,162,54,152,212,11,207,166,245,129,40,165,122,222,38,218,183,142,164,63,173,191,228,44,58,157,13,80,120,146,155,106,95,204,98,84,126,70,194,246,141,19,232,144,216,184,94,46,57,247,245,130,195,175,190,159,93,128,124,105,208,147,169,111,213,45,179,207,37,18,59,200,172,153,167,16,24,125,110,232,156,99,123,219,59,187,9,205,38,120,244,110,89,24,1,236,154,183,168,131,79,154,101,230,149,110,126,170,255,230,8,33,188,207,230,239,21,232,217,186,231,155,206,74,111,54,212,234,159,9,214,41,176,124,175,49,164,178,49,42,63,35,48,198,165,148,192,53,162,102,55,116,78,188,166,252,130,202,176,224,144,208,21,51,167,216,74,241,4,152,247,65,236,218,14,127,205,80,47,23,145,246,141,118,77,214,77,67,239,176,84,204,170,77,223,228,150,4,227,158,209,181,27,76,106,136,184,193,44,31,127,70,101,81,4,157,94,234,93,1,140,53,115,250,135,116,46,251,11,65,90,179,103,29,82,146,219,210,51,233,16,86,19,109,214,71,140,154,215,97,122,55,161,12,142,89,248,20,137,235,19,60,238,206,169,39,53,183,97,201,237,225,28,229,60,122,71,177,89,156,210,223,63,85,242,115,121,24,20,206,191,115,199,55,234,83,247,205,91,95,253,170,20,223,61,111,134,120,68,219,129,202,175,243,62,185,104,196,44,56,36,52,95,194,163,64,114,22,29,195,12,188,226,37,139,40,60,73,65,255,13,149,113,57,168,1,222,8,12,179,156,216,180,228,144,100,86,193,97,123,203,132,112,213,50,182,116,72,108,92,66,208,184,87], "i8", ALLOC_NONE, 501820);
allocate([81,244,167,80,126,65,101,83,26,23,164,195,58,39,94,150,59,171,107,203,31,157,69,241,172,250,88,171,75,227,3,147,32,48,250,85,173,118,109,246,136,204,118,145,245,2,76,37,79,229,215,252,197,42,203,215,38,53,68,128,181,98,163,143,222,177,90,73,37,186,27,103,69,234,14,152,93,254,192,225,195,47,117,2,129,76,240,18,141,70,151,163,107,211,249,198,3,143,95,231,21,146,156,149,191,109,122,235,149,82,89,218,212,190,131,45,88,116,33,211,73,224,105,41,142,201,200,68,117,194,137,106,244,142,121,120,153,88,62,107,39,185,113,221,190,225,79,182,240,136,173,23,201,32,172,102,125,206,58,180,99,223,74,24,229,26,49,130,151,81,51,96,98,83,127,69,177,100,119,224,187,107,174,132,254,129,160,28,249,8,43,148,112,72,104,88,143,69,253,25,148,222,108,135,82,123,248,183,171,115,211,35,114,75,2,226,227,31,143,87,102,85,171,42,178,235,40,7,47,181,194,3,134,197,123,154,211,55,8,165,48,40,135,242,35,191,165,178,2,3,106,186,237,22,130,92,138,207,28,43,167,121,180,146,243,7,242,240,78,105,226,161,101,218,244,205,6,5,190,213,209,52,98,31,196,166,254,138,52,46,83,157,162,243,85,160,5,138,225,50,164,246,235,117,11,131,236,57,64,96,239,170,94,113,159,6,189,110,16,81,62,33,138,249,150,221,6,61,221,62,5,174,77,230,189,70,145,84,141,181,113,196,93,5,4,6,212,111,96,80,21,255,25,152,251,36,214,189,233,151,137,64,67,204,103,217,158,119,176,232,66,189,7,137,139,136,231,25,91,56,121,200,238,219,161,124,10,71,124,66,15,233,248,132,30,201,0,0,0,0,9,128,134,131,50,43,237,72,30,17,112,172,108,90,114,78,253,14,255,251,15,133,56,86,61,174,213,30,54,45,57,39,10,15,217,100,104,92,166,33,155,91,84,209,36,54,46,58,12,10,103,177,147,87,231,15,180,238,150,210,27,155,145,158,128,192,197,79,97,220,32,162,90,119,75,105,28,18,26,22,226,147,186,10,192,160,42,229,60,34,224,67,18,27,23,29,14,9,13,11,242,139,199,173,45,182,168,185,20,30,169,200,87,241,25,133,175,117,7,76,238,153,221,187,163,127,96,253,247,1,38,159,92,114,245,188,68,102,59,197,91,251,126,52,139,67,41,118,203,35,198,220,182,237,252,104,184,228,241,99,215,49,220,202,66,99,133,16,19,151,34,64,132,198,17,32,133,74,36,125,210,187,61,248,174,249,50,17,199,41,161,109,29,158,47,75,220,178,48,243,13,134,82,236,119,193,227,208,43,179,22,108,169,112,185,153,17,148,72,250,71,233,100,34,168,252,140,196,160,240,63,26,86,125,44,216,34,51,144,239,135,73,78,199,217,56,209,193,140,202,162,254,152,212,11,54,166,245,129,207,165,122,222,40,218,183,142,38,63,173,191,164,44,58,157,228,80,120,146,13,106,95,204,155,84,126,70,98,246,141,19,194,144,216,184,232,46,57,247,94,130,195,175,245,159,93,128,190,105,208,147,124,111,213,45,169,207,37,18,179,200,172,153,59,16,24,125,167,232,156,99,110,219,59,187,123,205,38,120,9,110,89,24,244,236,154,183,1,131,79,154,168,230,149,110,101,170,255,230,126,33,188,207,8,239,21,232,230,186,231,155,217,74,111,54,206,234,159,9,212,41,176,124,214,49,164,178,175,42,63,35,49,198,165,148,48,53,162,102,192,116,78,188,55,252,130,202,166,224,144,208,176,51,167,216,21,241,4,152,74,65,236,218,247,127,205,80,14,23,145,246,47,118,77,214,141,67,239,176,77,204,170,77,84,228,150,4,223,158,209,181,227,76,106,136,27,193,44,31,184,70,101,81,127,157,94,234,4,1,140,53,93,250,135,116,115,251,11,65,46,179,103,29,90,146,219,210,82,233,16,86,51,109,214,71,19,154,215,97,140,55,161,12,122,89,248,20,142,235,19,60,137,206,169,39,238,183,97,201,53,225,28,229,237,122,71,177,60,156,210,223,89,85,242,115,63,24,20,206,121,115,199,55,191,83,247,205,234,95,253,170,91,223,61,111,20,120,68,219,134,202,175,243,129,185,104,196,62,56,36,52,44,194,163,64,95,22,29,195,114,188,226,37,12,40,60,73,139,255,13,149,65,57,168,1,113,8,12,179,222,216,180,228,156,100,86,193,144,123,203,132,97,213,50,182,112,72,108,92,116,208,184,87,66], "i8", ALLOC_NONE, 502844);
allocate([99,99,165,198,124,124,132,248,119,119,153,238,123,123,141,246,242,242,13,255,107,107,189,214,111,111,177,222,197,197,84,145,48,48,80,96,1,1,3,2,103,103,169,206,43,43,125,86,254,254,25,231,215,215,98,181,171,171,230,77,118,118,154,236,202,202,69,143,130,130,157,31,201,201,64,137,125,125,135,250,250,250,21,239,89,89,235,178,71,71,201,142,240,240,11,251,173,173,236,65,212,212,103,179,162,162,253,95,175,175,234,69,156,156,191,35,164,164,247,83,114,114,150,228,192,192,91,155,183,183,194,117,253,253,28,225,147,147,174,61,38,38,106,76,54,54,90,108,63,63,65,126,247,247,2,245,204,204,79,131,52,52,92,104,165,165,244,81,229,229,52,209,241,241,8,249,113,113,147,226,216,216,115,171,49,49,83,98,21,21,63,42,4,4,12,8,199,199,82,149,35,35,101,70,195,195,94,157,24,24,40,48,150,150,161,55,5,5,15,10,154,154,181,47,7,7,9,14,18,18,54,36,128,128,155,27,226,226,61,223,235,235,38,205,39,39,105,78,178,178,205,127,117,117,159,234,9,9,27,18,131,131,158,29,44,44,116,88,26,26,46,52,27,27,45,54,110,110,178,220,90,90,238,180,160,160,251,91,82,82,246,164,59,59,77,118,214,214,97,183,179,179,206,125,41,41,123,82,227,227,62,221,47,47,113,94,132,132,151,19,83,83,245,166,209,209,104,185,0,0,0,0,237,237,44,193,32,32,96,64,252,252,31,227,177,177,200,121,91,91,237,182,106,106,190,212,203,203,70,141,190,190,217,103,57,57,75,114,74,74,222,148,76,76,212,152,88,88,232,176,207,207,74,133,208,208,107,187,239,239,42,197,170,170,229,79,251,251,22,237,67,67,197,134,77,77,215,154,51,51,85,102,133,133,148,17,69,69,207,138,249,249,16,233,2,2,6,4,127,127,129,254,80,80,240,160,60,60,68,120,159,159,186,37,168,168,227,75,81,81,243,162,163,163,254,93,64,64,192,128,143,143,138,5,146,146,173,63,157,157,188,33,56,56,72,112,245,245,4,241,188,188,223,99,182,182,193,119,218,218,117,175,33,33,99,66,16,16,48,32,255,255,26,229,243,243,14,253,210,210,109,191,205,205,76,129,12,12,20,24,19,19,53,38,236,236,47,195,95,95,225,190,151,151,162,53,68,68,204,136,23,23,57,46,196,196,87,147,167,167,242,85,126,126,130,252,61,61,71,122,100,100,172,200,93,93,231,186,25,25,43,50,115,115,149,230,96,96,160,192,129,129,152,25,79,79,209,158,220,220,127,163,34,34,102,68,42,42,126,84,144,144,171,59,136,136,131,11,70,70,202,140,238,238,41,199,184,184,211,107,20,20,60,40,222,222,121,167,94,94,226,188,11,11,29,22,219,219,118,173,224,224,59,219,50,50,86,100,58,58,78,116,10,10,30,20,73,73,219,146,6,6,10,12,36,36,108,72,92,92,228,184,194,194,93,159,211,211,110,189,172,172,239,67,98,98,166,196,145,145,168,57,149,149,164,49,228,228,55,211,121,121,139,242,231,231,50,213,200,200,67,139,55,55,89,110,109,109,183,218,141,141,140,1,213,213,100,177,78,78,210,156,169,169,224,73,108,108,180,216,86,86,250,172,244,244,7,243,234,234,37,207,101,101,175,202,122,122,142,244,174,174,233,71,8,8,24,16,186,186,213,111,120,120,136,240,37,37,111,74,46,46,114,92,28,28,36,56,166,166,241,87,180,180,199,115,198,198,81,151,232,232,35,203,221,221,124,161,116,116,156,232,31,31,33,62,75,75,221,150,189,189,220,97,139,139,134,13,138,138,133,15,112,112,144,224,62,62,66,124,181,181,196,113,102,102,170,204,72,72,216,144,3,3,5,6,246,246,1,247,14,14,18,28,97,97,163,194,53,53,95,106,87,87,249,174,185,185,208,105,134,134,145,23,193,193,88,153,29,29,39,58,158,158,185,39,225,225,56,217,248,248,19,235,152,152,179,43,17,17,51,34,105,105,187,210,217,217,112,169,142,142,137,7,148,148,167,51,155,155,182,45,30,30,34,60,135,135,146,21,233,233,32,201,206,206,73,135,85,85,255,170,40,40,120,80,223,223,122,165,140,140,143,3,161,161,248,89,137,137,128,9,13,13,23,26,191,191,218,101,230,230,49,215,66,66,198,132,104,104,184,208,65,65,195,130,153,153,176,41,45,45,119,90,15,15,17,30,176,176,203,123,84,84,252,168,187,187,214,109,22,22,58,44], "i8", ALLOC_NONE, 503868);
allocate([99,165,198,99,124,132,248,124,119,153,238,119,123,141,246,123,242,13,255,242,107,189,214,107,111,177,222,111,197,84,145,197,48,80,96,48,1,3,2,1,103,169,206,103,43,125,86,43,254,25,231,254,215,98,181,215,171,230,77,171,118,154,236,118,202,69,143,202,130,157,31,130,201,64,137,201,125,135,250,125,250,21,239,250,89,235,178,89,71,201,142,71,240,11,251,240,173,236,65,173,212,103,179,212,162,253,95,162,175,234,69,175,156,191,35,156,164,247,83,164,114,150,228,114,192,91,155,192,183,194,117,183,253,28,225,253,147,174,61,147,38,106,76,38,54,90,108,54,63,65,126,63,247,2,245,247,204,79,131,204,52,92,104,52,165,244,81,165,229,52,209,229,241,8,249,241,113,147,226,113,216,115,171,216,49,83,98,49,21,63,42,21,4,12,8,4,199,82,149,199,35,101,70,35,195,94,157,195,24,40,48,24,150,161,55,150,5,15,10,5,154,181,47,154,7,9,14,7,18,54,36,18,128,155,27,128,226,61,223,226,235,38,205,235,39,105,78,39,178,205,127,178,117,159,234,117,9,27,18,9,131,158,29,131,44,116,88,44,26,46,52,26,27,45,54,27,110,178,220,110,90,238,180,90,160,251,91,160,82,246,164,82,59,77,118,59,214,97,183,214,179,206,125,179,41,123,82,41,227,62,221,227,47,113,94,47,132,151,19,132,83,245,166,83,209,104,185,209,0,0,0,0,237,44,193,237,32,96,64,32,252,31,227,252,177,200,121,177,91,237,182,91,106,190,212,106,203,70,141,203,190,217,103,190,57,75,114,57,74,222,148,74,76,212,152,76,88,232,176,88,207,74,133,207,208,107,187,208,239,42,197,239,170,229,79,170,251,22,237,251,67,197,134,67,77,215,154,77,51,85,102,51,133,148,17,133,69,207,138,69,249,16,233,249,2,6,4,2,127,129,254,127,80,240,160,80,60,68,120,60,159,186,37,159,168,227,75,168,81,243,162,81,163,254,93,163,64,192,128,64,143,138,5,143,146,173,63,146,157,188,33,157,56,72,112,56,245,4,241,245,188,223,99,188,182,193,119,182,218,117,175,218,33,99,66,33,16,48,32,16,255,26,229,255,243,14,253,243,210,109,191,210,205,76,129,205,12,20,24,12,19,53,38,19,236,47,195,236,95,225,190,95,151,162,53,151,68,204,136,68,23,57,46,23,196,87,147,196,167,242,85,167,126,130,252,126,61,71,122,61,100,172,200,100,93,231,186,93,25,43,50,25,115,149,230,115,96,160,192,96,129,152,25,129,79,209,158,79,220,127,163,220,34,102,68,34,42,126,84,42,144,171,59,144,136,131,11,136,70,202,140,70,238,41,199,238,184,211,107,184,20,60,40,20,222,121,167,222,94,226,188,94,11,29,22,11,219,118,173,219,224,59,219,224,50,86,100,50,58,78,116,58,10,30,20,10,73,219,146,73,6,10,12,6,36,108,72,36,92,228,184,92,194,93,159,194,211,110,189,211,172,239,67,172,98,166,196,98,145,168,57,145,149,164,49,149,228,55,211,228,121,139,242,121,231,50,213,231,200,67,139,200,55,89,110,55,109,183,218,109,141,140,1,141,213,100,177,213,78,210,156,78,169,224,73,169,108,180,216,108,86,250,172,86,244,7,243,244,234,37,207,234,101,175,202,101,122,142,244,122,174,233,71,174,8,24,16,8,186,213,111,186,120,136,240,120,37,111,74,37,46,114,92,46,28,36,56,28,166,241,87,166,180,199,115,180,198,81,151,198,232,35,203,232,221,124,161,221,116,156,232,116,31,33,62,31,75,221,150,75,189,220,97,189,139,134,13,139,138,133,15,138,112,144,224,112,62,66,124,62,181,196,113,181,102,170,204,102,72,216,144,72,3,5,6,3,246,1,247,246,14,18,28,14,97,163,194,97,53,95,106,53,87,249,174,87,185,208,105,185,134,145,23,134,193,88,153,193,29,39,58,29,158,185,39,158,225,56,217,225,248,19,235,248,152,179,43,152,17,51,34,17,105,187,210,105,217,112,169,217,142,137,7,142,148,167,51,148,155,182,45,155,30,34,60,30,135,146,21,135,233,32,201,233,206,73,135,206,85,255,170,85,40,120,80,40,223,122,165,223,140,143,3,140,161,248,89,161,137,128,9,137,13,23,26,13,191,218,101,191,230,49,215,230,66,198,132,66,104,184,208,104,65,195,130,65,153,176,41,153,45,119,90,45,15,17,30,15,176,203,123,176,84,252,168,84,187,214,109,187,22,58,44,22], "i8", ALLOC_NONE, 504892);
allocate([165,198,99,99,132,248,124,124,153,238,119,119,141,246,123,123,13,255,242,242,189,214,107,107,177,222,111,111,84,145,197,197,80,96,48,48,3,2,1,1,169,206,103,103,125,86,43,43,25,231,254,254,98,181,215,215,230,77,171,171,154,236,118,118,69,143,202,202,157,31,130,130,64,137,201,201,135,250,125,125,21,239,250,250,235,178,89,89,201,142,71,71,11,251,240,240,236,65,173,173,103,179,212,212,253,95,162,162,234,69,175,175,191,35,156,156,247,83,164,164,150,228,114,114,91,155,192,192,194,117,183,183,28,225,253,253,174,61,147,147,106,76,38,38,90,108,54,54,65,126,63,63,2,245,247,247,79,131,204,204,92,104,52,52,244,81,165,165,52,209,229,229,8,249,241,241,147,226,113,113,115,171,216,216,83,98,49,49,63,42,21,21,12,8,4,4,82,149,199,199,101,70,35,35,94,157,195,195,40,48,24,24,161,55,150,150,15,10,5,5,181,47,154,154,9,14,7,7,54,36,18,18,155,27,128,128,61,223,226,226,38,205,235,235,105,78,39,39,205,127,178,178,159,234,117,117,27,18,9,9,158,29,131,131,116,88,44,44,46,52,26,26,45,54,27,27,178,220,110,110,238,180,90,90,251,91,160,160,246,164,82,82,77,118,59,59,97,183,214,214,206,125,179,179,123,82,41,41,62,221,227,227,113,94,47,47,151,19,132,132,245,166,83,83,104,185,209,209,0,0,0,0,44,193,237,237,96,64,32,32,31,227,252,252,200,121,177,177,237,182,91,91,190,212,106,106,70,141,203,203,217,103,190,190,75,114,57,57,222,148,74,74,212,152,76,76,232,176,88,88,74,133,207,207,107,187,208,208,42,197,239,239,229,79,170,170,22,237,251,251,197,134,67,67,215,154,77,77,85,102,51,51,148,17,133,133,207,138,69,69,16,233,249,249,6,4,2,2,129,254,127,127,240,160,80,80,68,120,60,60,186,37,159,159,227,75,168,168,243,162,81,81,254,93,163,163,192,128,64,64,138,5,143,143,173,63,146,146,188,33,157,157,72,112,56,56,4,241,245,245,223,99,188,188,193,119,182,182,117,175,218,218,99,66,33,33,48,32,16,16,26,229,255,255,14,253,243,243,109,191,210,210,76,129,205,205,20,24,12,12,53,38,19,19,47,195,236,236,225,190,95,95,162,53,151,151,204,136,68,68,57,46,23,23,87,147,196,196,242,85,167,167,130,252,126,126,71,122,61,61,172,200,100,100,231,186,93,93,43,50,25,25,149,230,115,115,160,192,96,96,152,25,129,129,209,158,79,79,127,163,220,220,102,68,34,34,126,84,42,42,171,59,144,144,131,11,136,136,202,140,70,70,41,199,238,238,211,107,184,184,60,40,20,20,121,167,222,222,226,188,94,94,29,22,11,11,118,173,219,219,59,219,224,224,86,100,50,50,78,116,58,58,30,20,10,10,219,146,73,73,10,12,6,6,108,72,36,36,228,184,92,92,93,159,194,194,110,189,211,211,239,67,172,172,166,196,98,98,168,57,145,145,164,49,149,149,55,211,228,228,139,242,121,121,50,213,231,231,67,139,200,200,89,110,55,55,183,218,109,109,140,1,141,141,100,177,213,213,210,156,78,78,224,73,169,169,180,216,108,108,250,172,86,86,7,243,244,244,37,207,234,234,175,202,101,101,142,244,122,122,233,71,174,174,24,16,8,8,213,111,186,186,136,240,120,120,111,74,37,37,114,92,46,46,36,56,28,28,241,87,166,166,199,115,180,180,81,151,198,198,35,203,232,232,124,161,221,221,156,232,116,116,33,62,31,31,221,150,75,75,220,97,189,189,134,13,139,139,133,15,138,138,144,224,112,112,66,124,62,62,196,113,181,181,170,204,102,102,216,144,72,72,5,6,3,3,1,247,246,246,18,28,14,14,163,194,97,97,95,106,53,53,249,174,87,87,208,105,185,185,145,23,134,134,88,153,193,193,39,58,29,29,185,39,158,158,56,217,225,225,19,235,248,248,179,43,152,152,51,34,17,17,187,210,105,105,112,169,217,217,137,7,142,142,167,51,148,148,182,45,155,155,34,60,30,30,146,21,135,135,32,201,233,233,73,135,206,206,255,170,85,85,120,80,40,40,122,165,223,223,143,3,140,140,248,89,161,161,128,9,137,137,23,26,13,13,218,101,191,191,49,215,230,230,198,132,66,66,184,208,104,104,195,130,65,65,176,41,153,153,119,90,45,45,17,30,15,15,203,123,176,176,252,168,84,84,214,109,187,187,58,44,22,22], "i8", ALLOC_NONE, 505916);
allocate([198,99,99,165,248,124,124,132,238,119,119,153,246,123,123,141,255,242,242,13,214,107,107,189,222,111,111,177,145,197,197,84,96,48,48,80,2,1,1,3,206,103,103,169,86,43,43,125,231,254,254,25,181,215,215,98,77,171,171,230,236,118,118,154,143,202,202,69,31,130,130,157,137,201,201,64,250,125,125,135,239,250,250,21,178,89,89,235,142,71,71,201,251,240,240,11,65,173,173,236,179,212,212,103,95,162,162,253,69,175,175,234,35,156,156,191,83,164,164,247,228,114,114,150,155,192,192,91,117,183,183,194,225,253,253,28,61,147,147,174,76,38,38,106,108,54,54,90,126,63,63,65,245,247,247,2,131,204,204,79,104,52,52,92,81,165,165,244,209,229,229,52,249,241,241,8,226,113,113,147,171,216,216,115,98,49,49,83,42,21,21,63,8,4,4,12,149,199,199,82,70,35,35,101,157,195,195,94,48,24,24,40,55,150,150,161,10,5,5,15,47,154,154,181,14,7,7,9,36,18,18,54,27,128,128,155,223,226,226,61,205,235,235,38,78,39,39,105,127,178,178,205,234,117,117,159,18,9,9,27,29,131,131,158,88,44,44,116,52,26,26,46,54,27,27,45,220,110,110,178,180,90,90,238,91,160,160,251,164,82,82,246,118,59,59,77,183,214,214,97,125,179,179,206,82,41,41,123,221,227,227,62,94,47,47,113,19,132,132,151,166,83,83,245,185,209,209,104,0,0,0,0,193,237,237,44,64,32,32,96,227,252,252,31,121,177,177,200,182,91,91,237,212,106,106,190,141,203,203,70,103,190,190,217,114,57,57,75,148,74,74,222,152,76,76,212,176,88,88,232,133,207,207,74,187,208,208,107,197,239,239,42,79,170,170,229,237,251,251,22,134,67,67,197,154,77,77,215,102,51,51,85,17,133,133,148,138,69,69,207,233,249,249,16,4,2,2,6,254,127,127,129,160,80,80,240,120,60,60,68,37,159,159,186,75,168,168,227,162,81,81,243,93,163,163,254,128,64,64,192,5,143,143,138,63,146,146,173,33,157,157,188,112,56,56,72,241,245,245,4,99,188,188,223,119,182,182,193,175,218,218,117,66,33,33,99,32,16,16,48,229,255,255,26,253,243,243,14,191,210,210,109,129,205,205,76,24,12,12,20,38,19,19,53,195,236,236,47,190,95,95,225,53,151,151,162,136,68,68,204,46,23,23,57,147,196,196,87,85,167,167,242,252,126,126,130,122,61,61,71,200,100,100,172,186,93,93,231,50,25,25,43,230,115,115,149,192,96,96,160,25,129,129,152,158,79,79,209,163,220,220,127,68,34,34,102,84,42,42,126,59,144,144,171,11,136,136,131,140,70,70,202,199,238,238,41,107,184,184,211,40,20,20,60,167,222,222,121,188,94,94,226,22,11,11,29,173,219,219,118,219,224,224,59,100,50,50,86,116,58,58,78,20,10,10,30,146,73,73,219,12,6,6,10,72,36,36,108,184,92,92,228,159,194,194,93,189,211,211,110,67,172,172,239,196,98,98,166,57,145,145,168,49,149,149,164,211,228,228,55,242,121,121,139,213,231,231,50,139,200,200,67,110,55,55,89,218,109,109,183,1,141,141,140,177,213,213,100,156,78,78,210,73,169,169,224,216,108,108,180,172,86,86,250,243,244,244,7,207,234,234,37,202,101,101,175,244,122,122,142,71,174,174,233,16,8,8,24,111,186,186,213,240,120,120,136,74,37,37,111,92,46,46,114,56,28,28,36,87,166,166,241,115,180,180,199,151,198,198,81,203,232,232,35,161,221,221,124,232,116,116,156,62,31,31,33,150,75,75,221,97,189,189,220,13,139,139,134,15,138,138,133,224,112,112,144,124,62,62,66,113,181,181,196,204,102,102,170,144,72,72,216,6,3,3,5,247,246,246,1,28,14,14,18,194,97,97,163,106,53,53,95,174,87,87,249,105,185,185,208,23,134,134,145,153,193,193,88,58,29,29,39,39,158,158,185,217,225,225,56,235,248,248,19,43,152,152,179,34,17,17,51,210,105,105,187,169,217,217,112,7,142,142,137,51,148,148,167,45,155,155,182,60,30,30,34,21,135,135,146,201,233,233,32,135,206,206,73,170,85,85,255,80,40,40,120,165,223,223,122,3,140,140,143,89,161,161,248,9,137,137,128,26,13,13,23,101,191,191,218,215,230,230,49,132,66,66,198,208,104,104,184,130,65,65,195,41,153,153,176,90,45,45,119,30,15,15,17,123,176,176,203,168,84,84,252,109,187,187,214,44,22,22,58], "i8", ALLOC_NONE, 506940);
allocate([56,56,48,8,40,232,224,200,45,44,33,13,38,164,162,134,15,204,195,207,30,220,210,206,51,176,179,131,56,184,176,136,47,172,163,143,32,96,96,64,21,84,81,69,7,196,195,199,4,68,64,68,47,108,99,79,43,104,99,75,27,88,83,75,3,192,195,195,34,96,98,66,51,48,51,3,53,180,177,133,41,40,33,9,32,160,160,128,34,224,226,194,39,164,163,135,19,208,211,195,17,144,145,129,17,16,17,1,6,4,2,6,28,28,16,12,60,188,176,140,54,52,50,6,11,72,67,75,47,236,227,207,8,136,128,136,44,108,96,76,40,168,160,136,23,20,19,7,4,196,192,196,22,20,18,6,52,244,240,196,2,192,194,194,5,68,65,69,33,224,225,193,22,212,210,198,63,60,51,15,61,60,49,13,14,140,130,142,24,152,144,136,40,40,32,8,14,76,66,78,54,244,242,198,62,60,50,14,37,164,161,133,57,248,241,201,13,12,1,13,31,220,211,207,24,216,208,200,43,40,35,11,38,100,98,70,58,120,114,74,39,36,35,7,47,44,35,15,49,240,241,193,50,112,114,66,2,64,66,66,20,212,208,196,1,64,65,65,0,192,192,192,51,112,115,67,39,100,99,71,44,172,160,140,11,136,131,139,55,244,243,199,45,172,161,141,0,128,128,128,31,28,19,15,10,200,194,202,44,44,32,12,42,168,162,138,52,52,48,4,18,208,210,194,11,8,3,11,46,236,226,206,41,232,225,201,29,92,81,77,20,148,144,132,24,24,16,8,56,248,240,200,23,84,83,71,46,172,162,142,8,8,0,8,5,196,193,197,19,16,19,3,13,204,193,205,6,132,130,134,57,184,177,137,63,252,243,207,61,124,113,77,1,192,193,193,49,48,49,1,53,244,241,197,10,136,130,138,42,104,98,74,49,176,177,129,17,208,209,193,32,32,32,0,23,212,211,199,2,0,2,2,34,32,34,2,4,4,0,4,40,104,96,72,49,112,113,65,7,4,3,7,27,216,211,203,29,156,145,141,25,152,145,137,33,96,97,65,62,188,178,142,38,228,226,198,25,88,81,73,29,220,209,205,17,80,81,65,16,144,144,128,28,220,208,204,26,152,146,138,35,160,163,131,43,168,163,139,16,208,208,192,1,128,129,129,15,12,3,15,7,68,67,71,26,24,18,10,35,224,227,195,44,236,224,204,13,140,129,141,63,188,179,143,22,148,146,134,59,120,115,75,28,92,80,76,34,160,162,130,33,160,161,129,35,96,99,67,35,32,35,3,13,76,65,77,8,200,192,200,30,156,146,142,28,156,144,140,58,56,50,10,12,12,0,12,46,44,34,14,58,184,178,138,46,108,98,78,31,156,147,143,26,88,82,74,50,240,242,194,18,144,146,130,51,240,243,195,9,72,65,73,56,120,112,72,12,204,192,204,21,20,17,5,59,248,243,203,48,112,112,64,53,116,113,69,63,124,115,79,53,52,49,5,16,16,16,0,3,0,3,3,36,100,96,68,45,108,97,77,6,196,194,198,52,116,112,68,21,212,209,197,52,180,176,132,42,232,226,202,9,8,1,9,54,116,114,70,25,24,17,9,62,252,242,206,0,64,64,64,18,16,18,2,32,224,224,192,61,188,177,141,5,4,1,5,58,248,242,202,1,0,1,1,48,240,240,192,42,40,34,10,30,92,82,78,41,168,161,137,22,84,82,70,3,64,67,67,5,132,129,133,20,20,16,4,9,136,129,137,27,152,147,139,48,176,176,128,37,228,225,197,8,72,64,72,57,120,113,73,23,148,147,135,60,252,240,204,30,28,18,14,2,128,130,130,33,32,33,1,12,140,128,140,27,24,19,11,31,92,83,79,55,116,115,71,20,84,80,68,50,176,178,130,29,28,17,13,37,36,33,5,15,76,67,79,0,0,0,0,6,68,66,70,45,236,225,205,24,88,80,72,18,80,82,66,43,232,227,203,62,124,114,78,26,216,210,202,9,200,193,201,61,252,241,205,48,48,48,0,21,148,145,133,37,100,97,69,60,60,48,12,54,180,178,134,36,228,224,196,59,184,179,139,60,124,112,76,14,12,2,14,16,80,80,64,57,56,49,9,38,36,34,6,50,48,50,2,4,132,128,132,41,104,97,73,19,144,147,131,55,52,51,7,39,228,227,199,36,36,32,4,36,164,160,132,11,200,195,203,19,80,83,67,10,8,2,10,7,132,131,135,25,216,209,201,12,76,64,76,3,128,131,131,15,140,131,143,14,204,194,206,59,56,51,11,10,72,66,74,55,180,179,135], "i8", ALLOC_NONE, 507964);
allocate([137,41,168,161,133,5,132,129,198,22,212,210,195,19,208,211,68,20,84,80,13,29,28,17,140,44,172,160,5,37,36,33,77,29,92,81,67,3,64,67,8,24,24,16,14,30,28,18,65,17,80,81,204,60,252,240,202,10,200,194,67,35,96,99,8,40,40,32,68,4,68,64,0,32,32,32,141,29,156,145,192,32,224,224,194,34,224,226,200,8,200,192,7,23,20,19,133,37,164,161,143,15,140,131,3,3,0,3,75,59,120,115,139,59,184,179,3,19,16,19,194,18,208,210,206,46,236,226,64,48,112,112,140,12,140,128,15,63,60,51,136,40,168,160,2,50,48,50,205,29,220,209,198,54,244,242,68,52,116,112,204,44,236,224,133,21,148,145,11,11,8,3,71,23,84,83,76,28,92,80,75,27,88,83,141,61,188,177,1,1,0,1,4,36,36,32,12,28,28,16,67,51,112,115,136,24,152,144,0,16,16,16,204,12,204,192,194,50,240,242,201,25,216,209,12,44,44,32,199,39,228,227,66,50,112,114,131,3,128,131,139,27,152,147,193,17,208,209,134,6,132,130,201,9,200,193,64,32,96,96,64,16,80,80,131,35,160,163,203,43,232,227,13,13,12,1,134,54,180,178,142,30,156,146,79,15,76,67,135,55,180,179,74,26,88,82,198,6,196,194,72,56,120,112,134,38,164,162,2,18,16,18,143,47,172,163,197,21,212,209,65,33,96,97,195,3,192,195,132,52,180,176,65,1,64,65,66,18,80,82,77,61,124,113,141,13,140,129,8,8,8,0,15,31,28,19,137,25,152,145,0,0,0,0,9,25,24,17,4,4,4,0,67,19,80,83,199,55,244,243,193,33,224,225,205,61,252,241,70,54,116,114,15,47,44,35,7,39,36,35,128,48,176,176,139,11,136,131,14,14,12,2,139,43,168,163,130,34,160,162,78,46,108,98,131,19,144,147,77,13,76,65,73,41,104,97,76,60,124,112,9,9,8,1,10,10,8,2,143,63,188,179,207,47,236,227,195,51,240,243,197,5,196,193,135,7,132,131,4,20,20,16,206,62,252,242,68,36,100,96,206,30,220,210,14,46,44,34,75,11,72,67,10,26,24,18,6,6,4,2,1,33,32,33,75,43,104,99,70,38,100,98,2,2,0,2,197,53,244,241,130,18,144,146,138,10,136,130,12,12,12,0,131,51,176,179,78,62,124,114,192,16,208,208,74,58,120,114,71,7,68,67,134,22,148,146,197,37,228,225,6,38,36,34,128,0,128,128,141,45,172,161,207,31,220,211,129,33,160,161,0,48,48,48,7,55,52,51,142,46,172,162,6,54,52,50,5,21,20,17,2,34,32,34,8,56,56,48,196,52,244,240,135,39,164,163,69,5,68,65,76,12,76,64,129,1,128,129,201,41,232,225,132,4,132,128,135,23,148,147,5,53,52,49,203,11,200,195,206,14,204,194,12,60,60,48,65,49,112,113,1,17,16,17,199,7,196,195,137,9,136,129,69,53,116,113,203,59,248,243,202,26,216,210,200,56,248,240,132,20,148,144,73,25,88,81,130,2,128,130,196,4,196,192,207,63,252,243,73,9,72,65,9,57,56,49,71,39,100,99,192,0,192,192,207,15,204,195,199,23,212,211,136,56,184,176,15,15,12,3,142,14,140,130,66,2,64,66,3,35,32,35,129,17,144,145,76,44,108,96,203,27,216,211,132,36,164,160,4,52,52,48,193,49,240,241,72,8,72,64,194,2,192,194,79,47,108,99,13,61,60,49,13,45,44,33,64,0,64,64,142,62,188,178,14,62,60,50,140,60,188,176,193,1,192,193,138,42,168,162,138,58,184,178,78,14,76,66,69,21,84,81,11,59,56,51,204,28,220,208,72,40,104,96,79,63,124,115,140,28,156,144,200,24,216,208,74,10,72,66,70,22,84,82,71,55,116,115,128,32,160,160,205,45,236,225,70,6,68,66,133,53,180,177,11,43,40,35,69,37,100,97,202,58,248,242,195,35,224,227,137,57,184,177,129,49,176,177,143,31,156,147,78,30,92,82,201,57,248,241,198,38,228,226,130,50,176,178,1,49,48,49,202,42,232,226,77,45,108,97,79,31,92,83,196,36,228,224,192,48,240,240,205,13,204,193,136,8,136,128,6,22,20,18,10,58,56,50,72,24,88,80,196,20,212,208,66,34,96,98,9,41,40,33,7,7,4,3,3,51,48,51,200,40,232,224,11,27,24,19,5,5,4,1,73,57,120,113,128,16,144,144,74,42,104,98,10,42,40,34,138,26,152,146], "i8", ALLOC_NONE, 508988);
allocate([48,8,56,56,224,200,40,232,33,13,45,44,162,134,38,164,195,207,15,204,210,206,30,220,179,131,51,176,176,136,56,184,163,143,47,172,96,64,32,96,81,69,21,84,195,199,7,196,64,68,4,68,99,79,47,108,99,75,43,104,83,75,27,88,195,195,3,192,98,66,34,96,51,3,51,48,177,133,53,180,33,9,41,40,160,128,32,160,226,194,34,224,163,135,39,164,211,195,19,208,145,129,17,144,17,1,17,16,2,6,6,4,16,12,28,28,176,140,60,188,50,6,54,52,67,75,11,72,227,207,47,236,128,136,8,136,96,76,44,108,160,136,40,168,19,7,23,20,192,196,4,196,18,6,22,20,240,196,52,244,194,194,2,192,65,69,5,68,225,193,33,224,210,198,22,212,51,15,63,60,49,13,61,60,130,142,14,140,144,136,24,152,32,8,40,40,66,78,14,76,242,198,54,244,50,14,62,60,161,133,37,164,241,201,57,248,1,13,13,12,211,207,31,220,208,200,24,216,35,11,43,40,98,70,38,100,114,74,58,120,35,7,39,36,35,15,47,44,241,193,49,240,114,66,50,112,66,66,2,64,208,196,20,212,65,65,1,64,192,192,0,192,115,67,51,112,99,71,39,100,160,140,44,172,131,139,11,136,243,199,55,244,161,141,45,172,128,128,0,128,19,15,31,28,194,202,10,200,32,12,44,44,162,138,42,168,48,4,52,52,210,194,18,208,3,11,11,8,226,206,46,236,225,201,41,232,81,77,29,92,144,132,20,148,16,8,24,24,240,200,56,248,83,71,23,84,162,142,46,172,0,8,8,8,193,197,5,196,19,3,19,16,193,205,13,204,130,134,6,132,177,137,57,184,243,207,63,252,113,77,61,124,193,193,1,192,49,1,49,48,241,197,53,244,130,138,10,136,98,74,42,104,177,129,49,176,209,193,17,208,32,0,32,32,211,199,23,212,2,2,2,0,34,2,34,32,0,4,4,4,96,72,40,104,113,65,49,112,3,7,7,4,211,203,27,216,145,141,29,156,145,137,25,152,97,65,33,96,178,142,62,188,226,198,38,228,81,73,25,88,209,205,29,220,81,65,17,80,144,128,16,144,208,204,28,220,146,138,26,152,163,131,35,160,163,139,43,168,208,192,16,208,129,129,1,128,3,15,15,12,67,71,7,68,18,10,26,24,227,195,35,224,224,204,44,236,129,141,13,140,179,143,63,188,146,134,22,148,115,75,59,120,80,76,28,92,162,130,34,160,161,129,33,160,99,67,35,96,35,3,35,32,65,77,13,76,192,200,8,200,146,142,30,156,144,140,28,156,50,10,58,56,0,12,12,12,34,14,46,44,178,138,58,184,98,78,46,108,147,143,31,156,82,74,26,88,242,194,50,240,146,130,18,144,243,195,51,240,65,73,9,72,112,72,56,120,192,204,12,204,17,5,21,20,243,203,59,248,112,64,48,112,113,69,53,116,115,79,63,124,49,5,53,52,16,0,16,16,3,3,3,0,96,68,36,100,97,77,45,108,194,198,6,196,112,68,52,116,209,197,21,212,176,132,52,180,226,202,42,232,1,9,9,8,114,70,54,116,17,9,25,24,242,206,62,252,64,64,0,64,18,2,18,16,224,192,32,224,177,141,61,188,1,5,5,4,242,202,58,248,1,1,1,0,240,192,48,240,34,10,42,40,82,78,30,92,161,137,41,168,82,70,22,84,67,67,3,64,129,133,5,132,16,4,20,20,129,137,9,136,147,139,27,152,176,128,48,176,225,197,37,228,64,72,8,72,113,73,57,120,147,135,23,148,240,204,60,252,18,14,30,28,130,130,2,128,33,1,33,32,128,140,12,140,19,11,27,24,83,79,31,92,115,71,55,116,80,68,20,84,178,130,50,176,17,13,29,28,33,5,37,36,67,79,15,76,0,0,0,0,66,70,6,68,225,205,45,236,80,72,24,88,82,66,18,80,227,203,43,232,114,78,62,124,210,202,26,216,193,201,9,200,241,205,61,252,48,0,48,48,145,133,21,148,97,69,37,100,48,12,60,60,178,134,54,180,224,196,36,228,179,139,59,184,112,76,60,124,2,14,14,12,80,64,16,80,49,9,57,56,34,6,38,36,50,2,50,48,128,132,4,132,97,73,41,104,147,131,19,144,51,7,55,52,227,199,39,228,32,4,36,36,160,132,36,164,195,203,11,200,83,67,19,80,2,10,10,8,131,135,7,132,209,201,25,216,64,76,12,76,131,131,3,128,131,143,15,140,194,206,14,204,51,11,59,56,66,74,10,72,179,135,55,180], "i8", ALLOC_NONE, 510012);
allocate([168,161,137,41,132,129,133,5,212,210,198,22,208,211,195,19,84,80,68,20,28,17,13,29,172,160,140,44,36,33,5,37,92,81,77,29,64,67,67,3,24,16,8,24,28,18,14,30,80,81,65,17,252,240,204,60,200,194,202,10,96,99,67,35,40,32,8,40,68,64,68,4,32,32,0,32,156,145,141,29,224,224,192,32,224,226,194,34,200,192,200,8,20,19,7,23,164,161,133,37,140,131,143,15,0,3,3,3,120,115,75,59,184,179,139,59,16,19,3,19,208,210,194,18,236,226,206,46,112,112,64,48,140,128,140,12,60,51,15,63,168,160,136,40,48,50,2,50,220,209,205,29,244,242,198,54,116,112,68,52,236,224,204,44,148,145,133,21,8,3,11,11,84,83,71,23,92,80,76,28,88,83,75,27,188,177,141,61,0,1,1,1,36,32,4,36,28,16,12,28,112,115,67,51,152,144,136,24,16,16,0,16,204,192,204,12,240,242,194,50,216,209,201,25,44,32,12,44,228,227,199,39,112,114,66,50,128,131,131,3,152,147,139,27,208,209,193,17,132,130,134,6,200,193,201,9,96,96,64,32,80,80,64,16,160,163,131,35,232,227,203,43,12,1,13,13,180,178,134,54,156,146,142,30,76,67,79,15,180,179,135,55,88,82,74,26,196,194,198,6,120,112,72,56,164,162,134,38,16,18,2,18,172,163,143,47,212,209,197,21,96,97,65,33,192,195,195,3,180,176,132,52,64,65,65,1,80,82,66,18,124,113,77,61,140,129,141,13,8,0,8,8,28,19,15,31,152,145,137,25,0,0,0,0,24,17,9,25,4,0,4,4,80,83,67,19,244,243,199,55,224,225,193,33,252,241,205,61,116,114,70,54,44,35,15,47,36,35,7,39,176,176,128,48,136,131,139,11,12,2,14,14,168,163,139,43,160,162,130,34,108,98,78,46,144,147,131,19,76,65,77,13,104,97,73,41,124,112,76,60,8,1,9,9,8,2,10,10,188,179,143,63,236,227,207,47,240,243,195,51,196,193,197,5,132,131,135,7,20,16,4,20,252,242,206,62,100,96,68,36,220,210,206,30,44,34,14,46,72,67,75,11,24,18,10,26,4,2,6,6,32,33,1,33,104,99,75,43,100,98,70,38,0,2,2,2,244,241,197,53,144,146,130,18,136,130,138,10,12,0,12,12,176,179,131,51,124,114,78,62,208,208,192,16,120,114,74,58,68,67,71,7,148,146,134,22,228,225,197,37,36,34,6,38,128,128,128,0,172,161,141,45,220,211,207,31,160,161,129,33,48,48,0,48,52,51,7,55,172,162,142,46,52,50,6,54,20,17,5,21,32,34,2,34,56,48,8,56,244,240,196,52,164,163,135,39,68,65,69,5,76,64,76,12,128,129,129,1,232,225,201,41,132,128,132,4,148,147,135,23,52,49,5,53,200,195,203,11,204,194,206,14,60,48,12,60,112,113,65,49,16,17,1,17,196,195,199,7,136,129,137,9,116,113,69,53,248,243,203,59,216,210,202,26,248,240,200,56,148,144,132,20,88,81,73,25,128,130,130,2,196,192,196,4,252,243,207,63,72,65,73,9,56,49,9,57,100,99,71,39,192,192,192,0,204,195,207,15,212,211,199,23,184,176,136,56,12,3,15,15,140,130,142,14,64,66,66,2,32,35,3,35,144,145,129,17,108,96,76,44,216,211,203,27,164,160,132,36,52,48,4,52,240,241,193,49,72,64,72,8,192,194,194,2,108,99,79,47,60,49,13,61,44,33,13,45,64,64,64,0,188,178,142,62,60,50,14,62,188,176,140,60,192,193,193,1,168,162,138,42,184,178,138,58,76,66,78,14,84,81,69,21,56,51,11,59,220,208,204,28,104,96,72,40,124,115,79,63,156,144,140,28,216,208,200,24,72,66,74,10,84,82,70,22,116,115,71,55,160,160,128,32,236,225,205,45,68,66,70,6,180,177,133,53,40,35,11,43,100,97,69,37,248,242,202,58,224,227,195,35,184,177,137,57,176,177,129,49,156,147,143,31,92,82,78,30,248,241,201,57,228,226,198,38,176,178,130,50,48,49,1,49,232,226,202,42,108,97,77,45,92,83,79,31,228,224,196,36,240,240,192,48,204,193,205,13,136,128,136,8,20,18,6,22,56,50,10,58,88,80,72,24,212,208,196,20,96,98,66,34,40,33,9,41,4,3,7,7,48,51,3,51,232,224,200,40,24,19,11,27,4,1,5,5,120,113,73,57,144,144,128,16,104,98,74,42,40,34,10,42,152,146,138,26], "i8", ALLOC_NONE, 511036);
allocate(4, "i8", ALLOC_NONE, 512060);
allocate(4, "i8", ALLOC_NONE, 512064);
allocate(4, "i8", ALLOC_NONE, 512068);
allocate(4, "i8", ALLOC_NONE, 512072);
allocate([82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125] /* R\09j\D506\A58\BF@\A */, "i8", ALLOC_NONE, 512076);
allocate([99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22] /* c|w{\F2ko\C50\01g+\F */, "i8", ALLOC_NONE, 512332);
allocate([185,121,55,158,115,243,110,60,230,230,221,120,204,205,187,241,153,155,119,227,51,55,239,198,103,110,222,141,207,220,188,27,158,185,121,55,60,115,243,110,120,230,230,221,241,204,205,187,227,153,155,119,198,51,55,239,141,103,110,222,27,207,220,188], "i8", ALLOC_NONE, 512588);
allocate(4, "i8", ALLOC_NONE, 512652);
allocate(4, "i8", ALLOC_NONE, 512656);
allocate(4, "i8", ALLOC_NONE, 512660);
allocate([24,216,48,120,192,24,96,24,35,38,70,175,5,35,140,35,198,184,145,249,126,198,63,198,232,251,205,111,19,232,135,232,135,203,19,161,76,135,38,135,184,17,109,98,169,184,218,184,1,9,2,5,8,1,4,1,79,13,158,110,66,79,33,79,54,155,108,238,173,54,216,54,166,255,81,4,89,166,162,166,210,12,185,189,222,210,111,210,245,14,247,6,251,245,243,245,121,150,242,128,239,121,249,121,111,48,222,206,95,111,161,111,145,109,63,239,252,145,126,145,82,248,164,7,170,82,85,82,96,71,192,253,39,96,157,96,188,53,101,118,137,188,202,188,155,55,43,205,172,155,86,155,142,138,1,140,4,142,2,142,163,210,91,21,113,163,182,163,12,108,24,60,96,12,48,12,123,132,246,138,255,123,241,123,53,128,106,225,181,53,212,53,29,245,58,105,232,29,116,29,224,179,221,71,83,224,167,224,215,33,179,172,246,215,123,215,194,156,153,237,94,194,47,194,46,67,92,150,109,46,184,46,75,41,150,122,98,75,49,75,254,93,225,33,163,254,223,254,87,213,174,22,130,87,65,87,21,189,42,65,168,21,84,21,119,232,238,182,159,119,193,119,55,146,110,235,165,55,220,55,229,158,215,86,123,229,179,229,159,19,35,217,140,159,70,159,240,35,253,23,211,240,231,240,74,32,148,127,106,74,53,74,218,68,169,149,158,218,79,218,88,162,176,37,250,88,125,88,201,207,143,202,6,201,3,201,41,124,82,141,85,41,164,41,10,90,20,34,80,10,40,10,177,80,127,79,225,177,254,177,160,201,93,26,105,160,186,160,107,20,214,218,127,107,177,107,133,217,23,171,92,133,46,133,189,60,103,115,129,189,206,189,93,143,186,52,210,93,105,93,16,144,32,80,128,16,64,16,244,7,245,3,243,244,247,244,203,221,139,192,22,203,11,203,62,211,124,198,237,62,248,62,5,45,10,17,40,5,20,5,103,120,206,230,31,103,129,103,228,151,213,83,115,228,183,228,39,2,78,187,37,39,156,39,65,115,130,88,50,65,25,65,139,167,11,157,44,139,22,139,167,246,83,1,81,167,166,167,125,178,250,148,207,125,233,125,149,73,55,251,220,149,110,149,216,86,173,159,142,216,71,216,251,112,235,48,139,251,203,251,238,205,193,113,35,238,159,238,124,187,248,145,199,124,237,124,102,113,204,227,23,102,133,102,221,123,167,142,166,221,83,221,23,175,46,75,184,23,92,23,71,69,142,70,2,71,1,71,158,26,33,220,132,158,66,158,202,212,137,197,30,202,15,202,45,88,90,153,117,45,180,45,191,46,99,121,145,191,198,191,7,63,14,27,56,7,28,7,173,172,71,35,1,173,142,173,90,176,180,47,234,90,117,90,131,239,27,181,108,131,54,131,51,182,102,255,133,51,204,51,99,92,198,242,63,99,145,99,2,18,4,10,16,2,8,2,170,147,73,56,57,170,146,170,113,222,226,168,175,113,217,113,200,198,141,207,14,200,7,200,25,209,50,125,200,25,100,25,73,59,146,112,114,73,57,73,217,95,175,154,134,217,67,217,242,49,249,29,195,242,239,242,227,168,219,72,75,227,171,227,91,185,182,42,226,91,113,91,136,188,13,146,52,136,26,136,154,62,41,200,164,154,82,154,38,11,76,190,45,38,152,38,50,191,100,250,141,50,200,50,176,89,125,74,233,176,250,176,233,242,207,106,27,233,131,233,15,119,30,51,120,15,60,15,213,51,183,166,230,213,115,213,128,244,29,186,116,128,58,128,190,39,97,124,153,190,194,190,205,235,135,222,38,205,19,205,52,137,104,228,189,52,208,52,72,50,144,117,122,72,61,72,255,84,227,36,171,255,219,255,122,141,244,143,247,122,245,122,144,100,61,234,244,144,122,144,95,157,190,62,194,95,97,95,32,61,64,160,29,32,128,32,104,15,208,213,103,104,189,104,26,202,52,114,208,26,104,26,174,183,65,44,25,174,130,174,180,125,117,94,201,180,234,180,84,206,168,25,154,84,77,84,147,127,59,229,236,147,118,147,34,47,68,170,13,34,136,34,100,99,200,233,7,100,141,100,241,42,255,18,219,241,227,241,115,204,230,162,191,115,209,115,18,130,36,90,144,18,72,18,64,122,128,93,58,64,29,64,8,72,16,40,64,8,32,8,195,149,155,232,86,195,43,195,236,223,197,123,51,236,151,236,219,77,171,144,150,219,75,219,161,192,95,31,97,161,190,161,141,145,7,131,28,141,14,141,61,200,122,201,245,61,244,61,151,91,51,241,204,151,102,151,0,0,0,0,0,0,0,0,207,249,131,212,54,207,27,207,43,110,86,135,69,43,172,43,118,225,236,179,151,118,197,118,130,230,25,176,100,130,50,130,214,40,177,169,254,214,127,214,27,195,54,119,216,27,108,27,181,116,119,91,193,181,238,181,175,190,67,41,17,175,134,175,106,29,212,223,119,106,181,106,80,234,160,13,186,80,93,80,69,87,138,76,18,69,9,69,243,56,251,24,203,243,235,243,48,173,96,240,157,48,192,48,239,196,195,116,43,239,155,239,63,218,126,195,229,63,252,63,85,199,170,28,146,85,73,85,162,219,89,16,121,162,178,162,234,233,201,101,3,234,143,234,101,106,202,236,15,101,137,101,186,3,105,104,185,186,210,186,47,74,94,147,101,47,188,47,192,142,157,231,78,192,39,192,222,96,161,129,190,222,95,222,28,252,56,108,224,28,112,28,253,70,231,46,187,253,211,253,77,31,154,100,82,77,41,77,146,118,57,224,228,146,114,146,117,250,234,188,143,117,201,117,6,54,12,30,48,6,24,6,138,174,9,152,36,138,18,138,178,75,121,64,249,178,242,178,230,133,209,89,99,230,191,230,14,126,28,54,112,14,56,14,31,231,62,99,248,31,124,31,98,85,196,247,55,98,149,98,212,58,181,163,238,212,119,212,168,129,77,50,41,168,154,168,150,82,49,244,196,150,98,150,249,98,239,58,155,249,195,249,197,163,151,246,102,197,51,197,37,16,74,177,53,37,148,37,89,171,178,32,242,89,121,89,132,208,21,174,84,132,42,132,114,197,228,167,183,114,213,114,57,236,114,221,213,57,228,57,76,22,152,97,90,76,45,76,94,148,188,59,202,94,101,94,120,159,240,133,231,120,253,120,56,229,112,216,221,56,224,56,140,152,5,134,20,140,10,140,209,23,191,178,198,209,99,209,165,228,87,11,65,165,174,165,226,161,217,77,67,226,175,226,97,78,194,248,47,97,153,97,179,66,123,69,241,179,246,179,33,52,66,165,21,33,132,33,156,8,37,214,148,156,74,156,30,238,60,102,240,30,120,30,67,97,134,82,34,67,17,67,199,177,147,252,118,199,59,199,252,79,229,43,179,252,215,252,4,36,8,20,32,4,16,4,81,227,162,8,178,81,89,81,153,37,47,199,188,153,94,153,109,34,218,196,79,109,169,109,13,101,26,57,104,13,52,13,250,121,233,53,131,250,207,250,223,105,163,132,182,223,91,223,126,169,252,155,215,126,229,126,36,25,72,180,61,36,144,36,59,254,118,215,197,59,236,59,171,154,75,61,49,171,150,171,206,240,129,209,62,206,31,206,17,153,34,85,136,17,68,17,143,131,3,137,12,143,6,143,78,4,156,107,74,78,37,78,183,102,115,81,209,183,230,183,235,224,203,96,11,235,139,235,60,193,120,204,253,60,240,60,129,253,31,191,124,129,62,129,148,64,53,254,212,148,106,148,247,28,243,12,235,247,251,247,185,24,111,103,161,185,222,185,19,139,38,95,152,19,76,19,44,81,88,156,125,44,176,44,211,5,187,184,214,211,107,211,231,140,211,92,107,231,187,231,110,57,220,203,87,110,165,110,196,170,149,243,110,196,55,196,3,27,6,15,24,3,12,3,86,220,172,19,138,86,69,86,68,94,136,73,26,68,13,68,127,160,254,158,223,127,225,127,169,136,79,55,33,169,158,169,42,103,84,130,77,42,168,42,187,10,107,109,177,187,214,187,193,135,159,226,70,193,35,193,83,241,166,2,162,83,81,83,220,114,165,139,174,220,87,220,11,83,22,39,88,11,44,11,157,1,39,211,156,157,78,157,108,43,216,193,71,108,173,108,49,164,98,245,149,49,196,49,116,243,232,185,135,116,205,116,246,21,241,9,227,246,255,246,70,76,140,67,10,70,5,70,172,165,69,38,9,172,138,172,137,181,15,151,60,137,30,137,20,180,40,68,160,20,80,20,225,186,223,66,91,225,163,225,22,166,44,78,176,22,88,22,58,247,116,210,205,58,232,58,105,6,210,208,111,105,185,105,9,65,18,45,72,9,36,9,112,215,224,173,167,112,221,112,182,111,113,84,217,182,226,182,208,30,189,183,206,208,103,208,237,214,199,126,59,237,147,237,204,226,133,219,46,204,23,204,66,104,132,87,42,66,21,66,152,44,45,194,180,152,90,152,164,237,85,14,73,164,170,164,40,117,80,136,93,40,160,40,92,134,184,49,218,92,109,92,248,107,237,63,147,248,199,248,134,194,17,164,68,134,34,134], "i8", ALLOC_NONE, 512664);
allocate([24,24,216,48,120,192,24,96,35,35,38,70,175,5,35,140,198,198,184,145,249,126,198,63,232,232,251,205,111,19,232,135,135,135,203,19,161,76,135,38,184,184,17,109,98,169,184,218,1,1,9,2,5,8,1,4,79,79,13,158,110,66,79,33,54,54,155,108,238,173,54,216,166,166,255,81,4,89,166,162,210,210,12,185,189,222,210,111,245,245,14,247,6,251,245,243,121,121,150,242,128,239,121,249,111,111,48,222,206,95,111,161,145,145,109,63,239,252,145,126,82,82,248,164,7,170,82,85,96,96,71,192,253,39,96,157,188,188,53,101,118,137,188,202,155,155,55,43,205,172,155,86,142,142,138,1,140,4,142,2,163,163,210,91,21,113,163,182,12,12,108,24,60,96,12,48,123,123,132,246,138,255,123,241,53,53,128,106,225,181,53,212,29,29,245,58,105,232,29,116,224,224,179,221,71,83,224,167,215,215,33,179,172,246,215,123,194,194,156,153,237,94,194,47,46,46,67,92,150,109,46,184,75,75,41,150,122,98,75,49,254,254,93,225,33,163,254,223,87,87,213,174,22,130,87,65,21,21,189,42,65,168,21,84,119,119,232,238,182,159,119,193,55,55,146,110,235,165,55,220,229,229,158,215,86,123,229,179,159,159,19,35,217,140,159,70,240,240,35,253,23,211,240,231,74,74,32,148,127,106,74,53,218,218,68,169,149,158,218,79,88,88,162,176,37,250,88,125,201,201,207,143,202,6,201,3,41,41,124,82,141,85,41,164,10,10,90,20,34,80,10,40,177,177,80,127,79,225,177,254,160,160,201,93,26,105,160,186,107,107,20,214,218,127,107,177,133,133,217,23,171,92,133,46,189,189,60,103,115,129,189,206,93,93,143,186,52,210,93,105,16,16,144,32,80,128,16,64,244,244,7,245,3,243,244,247,203,203,221,139,192,22,203,11,62,62,211,124,198,237,62,248,5,5,45,10,17,40,5,20,103,103,120,206,230,31,103,129,228,228,151,213,83,115,228,183,39,39,2,78,187,37,39,156,65,65,115,130,88,50,65,25,139,139,167,11,157,44,139,22,167,167,246,83,1,81,167,166,125,125,178,250,148,207,125,233,149,149,73,55,251,220,149,110,216,216,86,173,159,142,216,71,251,251,112,235,48,139,251,203,238,238,205,193,113,35,238,159,124,124,187,248,145,199,124,237,102,102,113,204,227,23,102,133,221,221,123,167,142,166,221,83,23,23,175,46,75,184,23,92,71,71,69,142,70,2,71,1,158,158,26,33,220,132,158,66,202,202,212,137,197,30,202,15,45,45,88,90,153,117,45,180,191,191,46,99,121,145,191,198,7,7,63,14,27,56,7,28,173,173,172,71,35,1,173,142,90,90,176,180,47,234,90,117,131,131,239,27,181,108,131,54,51,51,182,102,255,133,51,204,99,99,92,198,242,63,99,145,2,2,18,4,10,16,2,8,170,170,147,73,56,57,170,146,113,113,222,226,168,175,113,217,200,200,198,141,207,14,200,7,25,25,209,50,125,200,25,100,73,73,59,146,112,114,73,57,217,217,95,175,154,134,217,67,242,242,49,249,29,195,242,239,227,227,168,219,72,75,227,171,91,91,185,182,42,226,91,113,136,136,188,13,146,52,136,26,154,154,62,41,200,164,154,82,38,38,11,76,190,45,38,152,50,50,191,100,250,141,50,200,176,176,89,125,74,233,176,250,233,233,242,207,106,27,233,131,15,15,119,30,51,120,15,60,213,213,51,183,166,230,213,115,128,128,244,29,186,116,128,58,190,190,39,97,124,153,190,194,205,205,235,135,222,38,205,19,52,52,137,104,228,189,52,208,72,72,50,144,117,122,72,61,255,255,84,227,36,171,255,219,122,122,141,244,143,247,122,245,144,144,100,61,234,244,144,122,95,95,157,190,62,194,95,97,32,32,61,64,160,29,32,128,104,104,15,208,213,103,104,189,26,26,202,52,114,208,26,104,174,174,183,65,44,25,174,130,180,180,125,117,94,201,180,234,84,84,206,168,25,154,84,77,147,147,127,59,229,236,147,118,34,34,47,68,170,13,34,136,100,100,99,200,233,7,100,141,241,241,42,255,18,219,241,227,115,115,204,230,162,191,115,209,18,18,130,36,90,144,18,72,64,64,122,128,93,58,64,29,8,8,72,16,40,64,8,32,195,195,149,155,232,86,195,43,236,236,223,197,123,51,236,151,219,219,77,171,144,150,219,75,161,161,192,95,31,97,161,190,141,141,145,7,131,28,141,14,61,61,200,122,201,245,61,244,151,151,91,51,241,204,151,102,0,0,0,0,0,0,0,0,207,207,249,131,212,54,207,27,43,43,110,86,135,69,43,172,118,118,225,236,179,151,118,197,130,130,230,25,176,100,130,50,214,214,40,177,169,254,214,127,27,27,195,54,119,216,27,108,181,181,116,119,91,193,181,238,175,175,190,67,41,17,175,134,106,106,29,212,223,119,106,181,80,80,234,160,13,186,80,93,69,69,87,138,76,18,69,9,243,243,56,251,24,203,243,235,48,48,173,96,240,157,48,192,239,239,196,195,116,43,239,155,63,63,218,126,195,229,63,252,85,85,199,170,28,146,85,73,162,162,219,89,16,121,162,178,234,234,233,201,101,3,234,143,101,101,106,202,236,15,101,137,186,186,3,105,104,185,186,210,47,47,74,94,147,101,47,188,192,192,142,157,231,78,192,39,222,222,96,161,129,190,222,95,28,28,252,56,108,224,28,112,253,253,70,231,46,187,253,211,77,77,31,154,100,82,77,41,146,146,118,57,224,228,146,114,117,117,250,234,188,143,117,201,6,6,54,12,30,48,6,24,138,138,174,9,152,36,138,18,178,178,75,121,64,249,178,242,230,230,133,209,89,99,230,191,14,14,126,28,54,112,14,56,31,31,231,62,99,248,31,124,98,98,85,196,247,55,98,149,212,212,58,181,163,238,212,119,168,168,129,77,50,41,168,154,150,150,82,49,244,196,150,98,249,249,98,239,58,155,249,195,197,197,163,151,246,102,197,51,37,37,16,74,177,53,37,148,89,89,171,178,32,242,89,121,132,132,208,21,174,84,132,42,114,114,197,228,167,183,114,213,57,57,236,114,221,213,57,228,76,76,22,152,97,90,76,45,94,94,148,188,59,202,94,101,120,120,159,240,133,231,120,253,56,56,229,112,216,221,56,224,140,140,152,5,134,20,140,10,209,209,23,191,178,198,209,99,165,165,228,87,11,65,165,174,226,226,161,217,77,67,226,175,97,97,78,194,248,47,97,153,179,179,66,123,69,241,179,246,33,33,52,66,165,21,33,132,156,156,8,37,214,148,156,74,30,30,238,60,102,240,30,120,67,67,97,134,82,34,67,17,199,199,177,147,252,118,199,59,252,252,79,229,43,179,252,215,4,4,36,8,20,32,4,16,81,81,227,162,8,178,81,89,153,153,37,47,199,188,153,94,109,109,34,218,196,79,109,169,13,13,101,26,57,104,13,52,250,250,121,233,53,131,250,207,223,223,105,163,132,182,223,91,126,126,169,252,155,215,126,229,36,36,25,72,180,61,36,144,59,59,254,118,215,197,59,236,171,171,154,75,61,49,171,150,206,206,240,129,209,62,206,31,17,17,153,34,85,136,17,68,143,143,131,3,137,12,143,6,78,78,4,156,107,74,78,37,183,183,102,115,81,209,183,230,235,235,224,203,96,11,235,139,60,60,193,120,204,253,60,240,129,129,253,31,191,124,129,62,148,148,64,53,254,212,148,106,247,247,28,243,12,235,247,251,185,185,24,111,103,161,185,222,19,19,139,38,95,152,19,76,44,44,81,88,156,125,44,176,211,211,5,187,184,214,211,107,231,231,140,211,92,107,231,187,110,110,57,220,203,87,110,165,196,196,170,149,243,110,196,55,3,3,27,6,15,24,3,12,86,86,220,172,19,138,86,69,68,68,94,136,73,26,68,13,127,127,160,254,158,223,127,225,169,169,136,79,55,33,169,158,42,42,103,84,130,77,42,168,187,187,10,107,109,177,187,214,193,193,135,159,226,70,193,35,83,83,241,166,2,162,83,81,220,220,114,165,139,174,220,87,11,11,83,22,39,88,11,44,157,157,1,39,211,156,157,78,108,108,43,216,193,71,108,173,49,49,164,98,245,149,49,196,116,116,243,232,185,135,116,205,246,246,21,241,9,227,246,255,70,70,76,140,67,10,70,5,172,172,165,69,38,9,172,138,137,137,181,15,151,60,137,30,20,20,180,40,68,160,20,80,225,225,186,223,66,91,225,163,22,22,166,44,78,176,22,88,58,58,247,116,210,205,58,232,105,105,6,210,208,111,105,185,9,9,65,18,45,72,9,36,112,112,215,224,173,167,112,221,182,182,111,113,84,217,182,226,208,208,30,189,183,206,208,103,237,237,214,199,126,59,237,147,204,204,226,133,219,46,204,23,66,66,104,132,87,42,66,21,152,152,44,45,194,180,152,90,164,164,237,85,14,73,164,170,40,40,117,80,136,93,40,160,92,92,134,184,49,218,92,109,248,248,107,237,63,147,248,199,134,134,194,17,164,68,134,34], "i8", ALLOC_NONE, 514712);
allocate([96,24,24,216,48,120,192,24,140,35,35,38,70,175,5,35,63,198,198,184,145,249,126,198,135,232,232,251,205,111,19,232,38,135,135,203,19,161,76,135,218,184,184,17,109,98,169,184,4,1,1,9,2,5,8,1,33,79,79,13,158,110,66,79,216,54,54,155,108,238,173,54,162,166,166,255,81,4,89,166,111,210,210,12,185,189,222,210,243,245,245,14,247,6,251,245,249,121,121,150,242,128,239,121,161,111,111,48,222,206,95,111,126,145,145,109,63,239,252,145,85,82,82,248,164,7,170,82,157,96,96,71,192,253,39,96,202,188,188,53,101,118,137,188,86,155,155,55,43,205,172,155,2,142,142,138,1,140,4,142,182,163,163,210,91,21,113,163,48,12,12,108,24,60,96,12,241,123,123,132,246,138,255,123,212,53,53,128,106,225,181,53,116,29,29,245,58,105,232,29,167,224,224,179,221,71,83,224,123,215,215,33,179,172,246,215,47,194,194,156,153,237,94,194,184,46,46,67,92,150,109,46,49,75,75,41,150,122,98,75,223,254,254,93,225,33,163,254,65,87,87,213,174,22,130,87,84,21,21,189,42,65,168,21,193,119,119,232,238,182,159,119,220,55,55,146,110,235,165,55,179,229,229,158,215,86,123,229,70,159,159,19,35,217,140,159,231,240,240,35,253,23,211,240,53,74,74,32,148,127,106,74,79,218,218,68,169,149,158,218,125,88,88,162,176,37,250,88,3,201,201,207,143,202,6,201,164,41,41,124,82,141,85,41,40,10,10,90,20,34,80,10,254,177,177,80,127,79,225,177,186,160,160,201,93,26,105,160,177,107,107,20,214,218,127,107,46,133,133,217,23,171,92,133,206,189,189,60,103,115,129,189,105,93,93,143,186,52,210,93,64,16,16,144,32,80,128,16,247,244,244,7,245,3,243,244,11,203,203,221,139,192,22,203,248,62,62,211,124,198,237,62,20,5,5,45,10,17,40,5,129,103,103,120,206,230,31,103,183,228,228,151,213,83,115,228,156,39,39,2,78,187,37,39,25,65,65,115,130,88,50,65,22,139,139,167,11,157,44,139,166,167,167,246,83,1,81,167,233,125,125,178,250,148,207,125,110,149,149,73,55,251,220,149,71,216,216,86,173,159,142,216,203,251,251,112,235,48,139,251,159,238,238,205,193,113,35,238,237,124,124,187,248,145,199,124,133,102,102,113,204,227,23,102,83,221,221,123,167,142,166,221,92,23,23,175,46,75,184,23,1,71,71,69,142,70,2,71,66,158,158,26,33,220,132,158,15,202,202,212,137,197,30,202,180,45,45,88,90,153,117,45,198,191,191,46,99,121,145,191,28,7,7,63,14,27,56,7,142,173,173,172,71,35,1,173,117,90,90,176,180,47,234,90,54,131,131,239,27,181,108,131,204,51,51,182,102,255,133,51,145,99,99,92,198,242,63,99,8,2,2,18,4,10,16,2,146,170,170,147,73,56,57,170,217,113,113,222,226,168,175,113,7,200,200,198,141,207,14,200,100,25,25,209,50,125,200,25,57,73,73,59,146,112,114,73,67,217,217,95,175,154,134,217,239,242,242,49,249,29,195,242,171,227,227,168,219,72,75,227,113,91,91,185,182,42,226,91,26,136,136,188,13,146,52,136,82,154,154,62,41,200,164,154,152,38,38,11,76,190,45,38,200,50,50,191,100,250,141,50,250,176,176,89,125,74,233,176,131,233,233,242,207,106,27,233,60,15,15,119,30,51,120,15,115,213,213,51,183,166,230,213,58,128,128,244,29,186,116,128,194,190,190,39,97,124,153,190,19,205,205,235,135,222,38,205,208,52,52,137,104,228,189,52,61,72,72,50,144,117,122,72,219,255,255,84,227,36,171,255,245,122,122,141,244,143,247,122,122,144,144,100,61,234,244,144,97,95,95,157,190,62,194,95,128,32,32,61,64,160,29,32,189,104,104,15,208,213,103,104,104,26,26,202,52,114,208,26,130,174,174,183,65,44,25,174,234,180,180,125,117,94,201,180,77,84,84,206,168,25,154,84,118,147,147,127,59,229,236,147,136,34,34,47,68,170,13,34,141,100,100,99,200,233,7,100,227,241,241,42,255,18,219,241,209,115,115,204,230,162,191,115,72,18,18,130,36,90,144,18,29,64,64,122,128,93,58,64,32,8,8,72,16,40,64,8,43,195,195,149,155,232,86,195,151,236,236,223,197,123,51,236,75,219,219,77,171,144,150,219,190,161,161,192,95,31,97,161,14,141,141,145,7,131,28,141,244,61,61,200,122,201,245,61,102,151,151,91,51,241,204,151,0,0,0,0,0,0,0,0,27,207,207,249,131,212,54,207,172,43,43,110,86,135,69,43,197,118,118,225,236,179,151,118,50,130,130,230,25,176,100,130,127,214,214,40,177,169,254,214,108,27,27,195,54,119,216,27,238,181,181,116,119,91,193,181,134,175,175,190,67,41,17,175,181,106,106,29,212,223,119,106,93,80,80,234,160,13,186,80,9,69,69,87,138,76,18,69,235,243,243,56,251,24,203,243,192,48,48,173,96,240,157,48,155,239,239,196,195,116,43,239,252,63,63,218,126,195,229,63,73,85,85,199,170,28,146,85,178,162,162,219,89,16,121,162,143,234,234,233,201,101,3,234,137,101,101,106,202,236,15,101,210,186,186,3,105,104,185,186,188,47,47,74,94,147,101,47,39,192,192,142,157,231,78,192,95,222,222,96,161,129,190,222,112,28,28,252,56,108,224,28,211,253,253,70,231,46,187,253,41,77,77,31,154,100,82,77,114,146,146,118,57,224,228,146,201,117,117,250,234,188,143,117,24,6,6,54,12,30,48,6,18,138,138,174,9,152,36,138,242,178,178,75,121,64,249,178,191,230,230,133,209,89,99,230,56,14,14,126,28,54,112,14,124,31,31,231,62,99,248,31,149,98,98,85,196,247,55,98,119,212,212,58,181,163,238,212,154,168,168,129,77,50,41,168,98,150,150,82,49,244,196,150,195,249,249,98,239,58,155,249,51,197,197,163,151,246,102,197,148,37,37,16,74,177,53,37,121,89,89,171,178,32,242,89,42,132,132,208,21,174,84,132,213,114,114,197,228,167,183,114,228,57,57,236,114,221,213,57,45,76,76,22,152,97,90,76,101,94,94,148,188,59,202,94,253,120,120,159,240,133,231,120,224,56,56,229,112,216,221,56,10,140,140,152,5,134,20,140,99,209,209,23,191,178,198,209,174,165,165,228,87,11,65,165,175,226,226,161,217,77,67,226,153,97,97,78,194,248,47,97,246,179,179,66,123,69,241,179,132,33,33,52,66,165,21,33,74,156,156,8,37,214,148,156,120,30,30,238,60,102,240,30,17,67,67,97,134,82,34,67,59,199,199,177,147,252,118,199,215,252,252,79,229,43,179,252,16,4,4,36,8,20,32,4,89,81,81,227,162,8,178,81,94,153,153,37,47,199,188,153,169,109,109,34,218,196,79,109,52,13,13,101,26,57,104,13,207,250,250,121,233,53,131,250,91,223,223,105,163,132,182,223,229,126,126,169,252,155,215,126,144,36,36,25,72,180,61,36,236,59,59,254,118,215,197,59,150,171,171,154,75,61,49,171,31,206,206,240,129,209,62,206,68,17,17,153,34,85,136,17,6,143,143,131,3,137,12,143,37,78,78,4,156,107,74,78,230,183,183,102,115,81,209,183,139,235,235,224,203,96,11,235,240,60,60,193,120,204,253,60,62,129,129,253,31,191,124,129,106,148,148,64,53,254,212,148,251,247,247,28,243,12,235,247,222,185,185,24,111,103,161,185,76,19,19,139,38,95,152,19,176,44,44,81,88,156,125,44,107,211,211,5,187,184,214,211,187,231,231,140,211,92,107,231,165,110,110,57,220,203,87,110,55,196,196,170,149,243,110,196,12,3,3,27,6,15,24,3,69,86,86,220,172,19,138,86,13,68,68,94,136,73,26,68,225,127,127,160,254,158,223,127,158,169,169,136,79,55,33,169,168,42,42,103,84,130,77,42,214,187,187,10,107,109,177,187,35,193,193,135,159,226,70,193,81,83,83,241,166,2,162,83,87,220,220,114,165,139,174,220,44,11,11,83,22,39,88,11,78,157,157,1,39,211,156,157,173,108,108,43,216,193,71,108,196,49,49,164,98,245,149,49,205,116,116,243,232,185,135,116,255,246,246,21,241,9,227,246,5,70,70,76,140,67,10,70,138,172,172,165,69,38,9,172,30,137,137,181,15,151,60,137,80,20,20,180,40,68,160,20,163,225,225,186,223,66,91,225,88,22,22,166,44,78,176,22,232,58,58,247,116,210,205,58,185,105,105,6,210,208,111,105,36,9,9,65,18,45,72,9,221,112,112,215,224,173,167,112,226,182,182,111,113,84,217,182,103,208,208,30,189,183,206,208,147,237,237,214,199,126,59,237,23,204,204,226,133,219,46,204,21,66,66,104,132,87,42,66,90,152,152,44,45,194,180,152,170,164,164,237,85,14,73,164,160,40,40,117,80,136,93,40,109,92,92,134,184,49,218,92,199,248,248,107,237,63,147,248,34,134,134,194,17,164,68,134], "i8", ALLOC_NONE, 516760);
allocate([24,96,24,24,216,48,120,192,35,140,35,35,38,70,175,5,198,63,198,198,184,145,249,126,232,135,232,232,251,205,111,19,135,38,135,135,203,19,161,76,184,218,184,184,17,109,98,169,1,4,1,1,9,2,5,8,79,33,79,79,13,158,110,66,54,216,54,54,155,108,238,173,166,162,166,166,255,81,4,89,210,111,210,210,12,185,189,222,245,243,245,245,14,247,6,251,121,249,121,121,150,242,128,239,111,161,111,111,48,222,206,95,145,126,145,145,109,63,239,252,82,85,82,82,248,164,7,170,96,157,96,96,71,192,253,39,188,202,188,188,53,101,118,137,155,86,155,155,55,43,205,172,142,2,142,142,138,1,140,4,163,182,163,163,210,91,21,113,12,48,12,12,108,24,60,96,123,241,123,123,132,246,138,255,53,212,53,53,128,106,225,181,29,116,29,29,245,58,105,232,224,167,224,224,179,221,71,83,215,123,215,215,33,179,172,246,194,47,194,194,156,153,237,94,46,184,46,46,67,92,150,109,75,49,75,75,41,150,122,98,254,223,254,254,93,225,33,163,87,65,87,87,213,174,22,130,21,84,21,21,189,42,65,168,119,193,119,119,232,238,182,159,55,220,55,55,146,110,235,165,229,179,229,229,158,215,86,123,159,70,159,159,19,35,217,140,240,231,240,240,35,253,23,211,74,53,74,74,32,148,127,106,218,79,218,218,68,169,149,158,88,125,88,88,162,176,37,250,201,3,201,201,207,143,202,6,41,164,41,41,124,82,141,85,10,40,10,10,90,20,34,80,177,254,177,177,80,127,79,225,160,186,160,160,201,93,26,105,107,177,107,107,20,214,218,127,133,46,133,133,217,23,171,92,189,206,189,189,60,103,115,129,93,105,93,93,143,186,52,210,16,64,16,16,144,32,80,128,244,247,244,244,7,245,3,243,203,11,203,203,221,139,192,22,62,248,62,62,211,124,198,237,5,20,5,5,45,10,17,40,103,129,103,103,120,206,230,31,228,183,228,228,151,213,83,115,39,156,39,39,2,78,187,37,65,25,65,65,115,130,88,50,139,22,139,139,167,11,157,44,167,166,167,167,246,83,1,81,125,233,125,125,178,250,148,207,149,110,149,149,73,55,251,220,216,71,216,216,86,173,159,142,251,203,251,251,112,235,48,139,238,159,238,238,205,193,113,35,124,237,124,124,187,248,145,199,102,133,102,102,113,204,227,23,221,83,221,221,123,167,142,166,23,92,23,23,175,46,75,184,71,1,71,71,69,142,70,2,158,66,158,158,26,33,220,132,202,15,202,202,212,137,197,30,45,180,45,45,88,90,153,117,191,198,191,191,46,99,121,145,7,28,7,7,63,14,27,56,173,142,173,173,172,71,35,1,90,117,90,90,176,180,47,234,131,54,131,131,239,27,181,108,51,204,51,51,182,102,255,133,99,145,99,99,92,198,242,63,2,8,2,2,18,4,10,16,170,146,170,170,147,73,56,57,113,217,113,113,222,226,168,175,200,7,200,200,198,141,207,14,25,100,25,25,209,50,125,200,73,57,73,73,59,146,112,114,217,67,217,217,95,175,154,134,242,239,242,242,49,249,29,195,227,171,227,227,168,219,72,75,91,113,91,91,185,182,42,226,136,26,136,136,188,13,146,52,154,82,154,154,62,41,200,164,38,152,38,38,11,76,190,45,50,200,50,50,191,100,250,141,176,250,176,176,89,125,74,233,233,131,233,233,242,207,106,27,15,60,15,15,119,30,51,120,213,115,213,213,51,183,166,230,128,58,128,128,244,29,186,116,190,194,190,190,39,97,124,153,205,19,205,205,235,135,222,38,52,208,52,52,137,104,228,189,72,61,72,72,50,144,117,122,255,219,255,255,84,227,36,171,122,245,122,122,141,244,143,247,144,122,144,144,100,61,234,244,95,97,95,95,157,190,62,194,32,128,32,32,61,64,160,29,104,189,104,104,15,208,213,103,26,104,26,26,202,52,114,208,174,130,174,174,183,65,44,25,180,234,180,180,125,117,94,201,84,77,84,84,206,168,25,154,147,118,147,147,127,59,229,236,34,136,34,34,47,68,170,13,100,141,100,100,99,200,233,7,241,227,241,241,42,255,18,219,115,209,115,115,204,230,162,191,18,72,18,18,130,36,90,144,64,29,64,64,122,128,93,58,8,32,8,8,72,16,40,64,195,43,195,195,149,155,232,86,236,151,236,236,223,197,123,51,219,75,219,219,77,171,144,150,161,190,161,161,192,95,31,97,141,14,141,141,145,7,131,28,61,244,61,61,200,122,201,245,151,102,151,151,91,51,241,204,0,0,0,0,0,0,0,0,207,27,207,207,249,131,212,54,43,172,43,43,110,86,135,69,118,197,118,118,225,236,179,151,130,50,130,130,230,25,176,100,214,127,214,214,40,177,169,254,27,108,27,27,195,54,119,216,181,238,181,181,116,119,91,193,175,134,175,175,190,67,41,17,106,181,106,106,29,212,223,119,80,93,80,80,234,160,13,186,69,9,69,69,87,138,76,18,243,235,243,243,56,251,24,203,48,192,48,48,173,96,240,157,239,155,239,239,196,195,116,43,63,252,63,63,218,126,195,229,85,73,85,85,199,170,28,146,162,178,162,162,219,89,16,121,234,143,234,234,233,201,101,3,101,137,101,101,106,202,236,15,186,210,186,186,3,105,104,185,47,188,47,47,74,94,147,101,192,39,192,192,142,157,231,78,222,95,222,222,96,161,129,190,28,112,28,28,252,56,108,224,253,211,253,253,70,231,46,187,77,41,77,77,31,154,100,82,146,114,146,146,118,57,224,228,117,201,117,117,250,234,188,143,6,24,6,6,54,12,30,48,138,18,138,138,174,9,152,36,178,242,178,178,75,121,64,249,230,191,230,230,133,209,89,99,14,56,14,14,126,28,54,112,31,124,31,31,231,62,99,248,98,149,98,98,85,196,247,55,212,119,212,212,58,181,163,238,168,154,168,168,129,77,50,41,150,98,150,150,82,49,244,196,249,195,249,249,98,239,58,155,197,51,197,197,163,151,246,102,37,148,37,37,16,74,177,53,89,121,89,89,171,178,32,242,132,42,132,132,208,21,174,84,114,213,114,114,197,228,167,183,57,228,57,57,236,114,221,213,76,45,76,76,22,152,97,90,94,101,94,94,148,188,59,202,120,253,120,120,159,240,133,231,56,224,56,56,229,112,216,221,140,10,140,140,152,5,134,20,209,99,209,209,23,191,178,198,165,174,165,165,228,87,11,65,226,175,226,226,161,217,77,67,97,153,97,97,78,194,248,47,179,246,179,179,66,123,69,241,33,132,33,33,52,66,165,21,156,74,156,156,8,37,214,148,30,120,30,30,238,60,102,240,67,17,67,67,97,134,82,34,199,59,199,199,177,147,252,118,252,215,252,252,79,229,43,179,4,16,4,4,36,8,20,32,81,89,81,81,227,162,8,178,153,94,153,153,37,47,199,188,109,169,109,109,34,218,196,79,13,52,13,13,101,26,57,104,250,207,250,250,121,233,53,131,223,91,223,223,105,163,132,182,126,229,126,126,169,252,155,215,36,144,36,36,25,72,180,61,59,236,59,59,254,118,215,197,171,150,171,171,154,75,61,49,206,31,206,206,240,129,209,62,17,68,17,17,153,34,85,136,143,6,143,143,131,3,137,12,78,37,78,78,4,156,107,74,183,230,183,183,102,115,81,209,235,139,235,235,224,203,96,11,60,240,60,60,193,120,204,253,129,62,129,129,253,31,191,124,148,106,148,148,64,53,254,212,247,251,247,247,28,243,12,235,185,222,185,185,24,111,103,161,19,76,19,19,139,38,95,152,44,176,44,44,81,88,156,125,211,107,211,211,5,187,184,214,231,187,231,231,140,211,92,107,110,165,110,110,57,220,203,87,196,55,196,196,170,149,243,110,3,12,3,3,27,6,15,24,86,69,86,86,220,172,19,138,68,13,68,68,94,136,73,26,127,225,127,127,160,254,158,223,169,158,169,169,136,79,55,33,42,168,42,42,103,84,130,77,187,214,187,187,10,107,109,177,193,35,193,193,135,159,226,70,83,81,83,83,241,166,2,162,220,87,220,220,114,165,139,174,11,44,11,11,83,22,39,88,157,78,157,157,1,39,211,156,108,173,108,108,43,216,193,71,49,196,49,49,164,98,245,149,116,205,116,116,243,232,185,135,246,255,246,246,21,241,9,227,70,5,70,70,76,140,67,10,172,138,172,172,165,69,38,9,137,30,137,137,181,15,151,60,20,80,20,20,180,40,68,160,225,163,225,225,186,223,66,91,22,88,22,22,166,44,78,176,58,232,58,58,247,116,210,205,105,185,105,105,6,210,208,111,9,36,9,9,65,18,45,72,112,221,112,112,215,224,173,167,182,226,182,182,111,113,84,217,208,103,208,208,30,189,183,206,237,147,237,237,214,199,126,59,204,23,204,204,226,133,219,46,66,21,66,66,104,132,87,42,152,90,152,152,44,45,194,180,164,170,164,164,237,85,14,73,40,160,40,40,117,80,136,93,92,109,92,92,134,184,49,218,248,199,248,248,107,237,63,147,134,34,134,134,194,17,164,68], "i8", ALLOC_NONE, 518808);
allocate([192,24,96,24,24,216,48,120,5,35,140,35,35,38,70,175,126,198,63,198,198,184,145,249,19,232,135,232,232,251,205,111,76,135,38,135,135,203,19,161,169,184,218,184,184,17,109,98,8,1,4,1,1,9,2,5,66,79,33,79,79,13,158,110,173,54,216,54,54,155,108,238,89,166,162,166,166,255,81,4,222,210,111,210,210,12,185,189,251,245,243,245,245,14,247,6,239,121,249,121,121,150,242,128,95,111,161,111,111,48,222,206,252,145,126,145,145,109,63,239,170,82,85,82,82,248,164,7,39,96,157,96,96,71,192,253,137,188,202,188,188,53,101,118,172,155,86,155,155,55,43,205,4,142,2,142,142,138,1,140,113,163,182,163,163,210,91,21,96,12,48,12,12,108,24,60,255,123,241,123,123,132,246,138,181,53,212,53,53,128,106,225,232,29,116,29,29,245,58,105,83,224,167,224,224,179,221,71,246,215,123,215,215,33,179,172,94,194,47,194,194,156,153,237,109,46,184,46,46,67,92,150,98,75,49,75,75,41,150,122,163,254,223,254,254,93,225,33,130,87,65,87,87,213,174,22,168,21,84,21,21,189,42,65,159,119,193,119,119,232,238,182,165,55,220,55,55,146,110,235,123,229,179,229,229,158,215,86,140,159,70,159,159,19,35,217,211,240,231,240,240,35,253,23,106,74,53,74,74,32,148,127,158,218,79,218,218,68,169,149,250,88,125,88,88,162,176,37,6,201,3,201,201,207,143,202,85,41,164,41,41,124,82,141,80,10,40,10,10,90,20,34,225,177,254,177,177,80,127,79,105,160,186,160,160,201,93,26,127,107,177,107,107,20,214,218,92,133,46,133,133,217,23,171,129,189,206,189,189,60,103,115,210,93,105,93,93,143,186,52,128,16,64,16,16,144,32,80,243,244,247,244,244,7,245,3,22,203,11,203,203,221,139,192,237,62,248,62,62,211,124,198,40,5,20,5,5,45,10,17,31,103,129,103,103,120,206,230,115,228,183,228,228,151,213,83,37,39,156,39,39,2,78,187,50,65,25,65,65,115,130,88,44,139,22,139,139,167,11,157,81,167,166,167,167,246,83,1,207,125,233,125,125,178,250,148,220,149,110,149,149,73,55,251,142,216,71,216,216,86,173,159,139,251,203,251,251,112,235,48,35,238,159,238,238,205,193,113,199,124,237,124,124,187,248,145,23,102,133,102,102,113,204,227,166,221,83,221,221,123,167,142,184,23,92,23,23,175,46,75,2,71,1,71,71,69,142,70,132,158,66,158,158,26,33,220,30,202,15,202,202,212,137,197,117,45,180,45,45,88,90,153,145,191,198,191,191,46,99,121,56,7,28,7,7,63,14,27,1,173,142,173,173,172,71,35,234,90,117,90,90,176,180,47,108,131,54,131,131,239,27,181,133,51,204,51,51,182,102,255,63,99,145,99,99,92,198,242,16,2,8,2,2,18,4,10,57,170,146,170,170,147,73,56,175,113,217,113,113,222,226,168,14,200,7,200,200,198,141,207,200,25,100,25,25,209,50,125,114,73,57,73,73,59,146,112,134,217,67,217,217,95,175,154,195,242,239,242,242,49,249,29,75,227,171,227,227,168,219,72,226,91,113,91,91,185,182,42,52,136,26,136,136,188,13,146,164,154,82,154,154,62,41,200,45,38,152,38,38,11,76,190,141,50,200,50,50,191,100,250,233,176,250,176,176,89,125,74,27,233,131,233,233,242,207,106,120,15,60,15,15,119,30,51,230,213,115,213,213,51,183,166,116,128,58,128,128,244,29,186,153,190,194,190,190,39,97,124,38,205,19,205,205,235,135,222,189,52,208,52,52,137,104,228,122,72,61,72,72,50,144,117,171,255,219,255,255,84,227,36,247,122,245,122,122,141,244,143,244,144,122,144,144,100,61,234,194,95,97,95,95,157,190,62,29,32,128,32,32,61,64,160,103,104,189,104,104,15,208,213,208,26,104,26,26,202,52,114,25,174,130,174,174,183,65,44,201,180,234,180,180,125,117,94,154,84,77,84,84,206,168,25,236,147,118,147,147,127,59,229,13,34,136,34,34,47,68,170,7,100,141,100,100,99,200,233,219,241,227,241,241,42,255,18,191,115,209,115,115,204,230,162,144,18,72,18,18,130,36,90,58,64,29,64,64,122,128,93,64,8,32,8,8,72,16,40,86,195,43,195,195,149,155,232,51,236,151,236,236,223,197,123,150,219,75,219,219,77,171,144,97,161,190,161,161,192,95,31,28,141,14,141,141,145,7,131,245,61,244,61,61,200,122,201,204,151,102,151,151,91,51,241,0,0,0,0,0,0,0,0,54,207,27,207,207,249,131,212,69,43,172,43,43,110,86,135,151,118,197,118,118,225,236,179,100,130,50,130,130,230,25,176,254,214,127,214,214,40,177,169,216,27,108,27,27,195,54,119,193,181,238,181,181,116,119,91,17,175,134,175,175,190,67,41,119,106,181,106,106,29,212,223,186,80,93,80,80,234,160,13,18,69,9,69,69,87,138,76,203,243,235,243,243,56,251,24,157,48,192,48,48,173,96,240,43,239,155,239,239,196,195,116,229,63,252,63,63,218,126,195,146,85,73,85,85,199,170,28,121,162,178,162,162,219,89,16,3,234,143,234,234,233,201,101,15,101,137,101,101,106,202,236,185,186,210,186,186,3,105,104,101,47,188,47,47,74,94,147,78,192,39,192,192,142,157,231,190,222,95,222,222,96,161,129,224,28,112,28,28,252,56,108,187,253,211,253,253,70,231,46,82,77,41,77,77,31,154,100,228,146,114,146,146,118,57,224,143,117,201,117,117,250,234,188,48,6,24,6,6,54,12,30,36,138,18,138,138,174,9,152,249,178,242,178,178,75,121,64,99,230,191,230,230,133,209,89,112,14,56,14,14,126,28,54,248,31,124,31,31,231,62,99,55,98,149,98,98,85,196,247,238,212,119,212,212,58,181,163,41,168,154,168,168,129,77,50,196,150,98,150,150,82,49,244,155,249,195,249,249,98,239,58,102,197,51,197,197,163,151,246,53,37,148,37,37,16,74,177,242,89,121,89,89,171,178,32,84,132,42,132,132,208,21,174,183,114,213,114,114,197,228,167,213,57,228,57,57,236,114,221,90,76,45,76,76,22,152,97,202,94,101,94,94,148,188,59,231,120,253,120,120,159,240,133,221,56,224,56,56,229,112,216,20,140,10,140,140,152,5,134,198,209,99,209,209,23,191,178,65,165,174,165,165,228,87,11,67,226,175,226,226,161,217,77,47,97,153,97,97,78,194,248,241,179,246,179,179,66,123,69,21,33,132,33,33,52,66,165,148,156,74,156,156,8,37,214,240,30,120,30,30,238,60,102,34,67,17,67,67,97,134,82,118,199,59,199,199,177,147,252,179,252,215,252,252,79,229,43,32,4,16,4,4,36,8,20,178,81,89,81,81,227,162,8,188,153,94,153,153,37,47,199,79,109,169,109,109,34,218,196,104,13,52,13,13,101,26,57,131,250,207,250,250,121,233,53,182,223,91,223,223,105,163,132,215,126,229,126,126,169,252,155,61,36,144,36,36,25,72,180,197,59,236,59,59,254,118,215,49,171,150,171,171,154,75,61,62,206,31,206,206,240,129,209,136,17,68,17,17,153,34,85,12,143,6,143,143,131,3,137,74,78,37,78,78,4,156,107,209,183,230,183,183,102,115,81,11,235,139,235,235,224,203,96,253,60,240,60,60,193,120,204,124,129,62,129,129,253,31,191,212,148,106,148,148,64,53,254,235,247,251,247,247,28,243,12,161,185,222,185,185,24,111,103,152,19,76,19,19,139,38,95,125,44,176,44,44,81,88,156,214,211,107,211,211,5,187,184,107,231,187,231,231,140,211,92,87,110,165,110,110,57,220,203,110,196,55,196,196,170,149,243,24,3,12,3,3,27,6,15,138,86,69,86,86,220,172,19,26,68,13,68,68,94,136,73,223,127,225,127,127,160,254,158,33,169,158,169,169,136,79,55,77,42,168,42,42,103,84,130,177,187,214,187,187,10,107,109,70,193,35,193,193,135,159,226,162,83,81,83,83,241,166,2,174,220,87,220,220,114,165,139,88,11,44,11,11,83,22,39,156,157,78,157,157,1,39,211,71,108,173,108,108,43,216,193,149,49,196,49,49,164,98,245,135,116,205,116,116,243,232,185,227,246,255,246,246,21,241,9,10,70,5,70,70,76,140,67,9,172,138,172,172,165,69,38,60,137,30,137,137,181,15,151,160,20,80,20,20,180,40,68,91,225,163,225,225,186,223,66,176,22,88,22,22,166,44,78,205,58,232,58,58,247,116,210,111,105,185,105,105,6,210,208,72,9,36,9,9,65,18,45,167,112,221,112,112,215,224,173,217,182,226,182,182,111,113,84,206,208,103,208,208,30,189,183,59,237,147,237,237,214,199,126,46,204,23,204,204,226,133,219,42,66,21,66,66,104,132,87,180,152,90,152,152,44,45,194,73,164,170,164,164,237,85,14,93,40,160,40,40,117,80,136,218,92,109,92,92,134,184,49,147,248,199,248,248,107,237,63,68,134,34,134,134,194,17,164], "i8", ALLOC_NONE, 520856);
allocate([120,192,24,96,24,24,216,48,175,5,35,140,35,35,38,70,249,126,198,63,198,198,184,145,111,19,232,135,232,232,251,205,161,76,135,38,135,135,203,19,98,169,184,218,184,184,17,109,5,8,1,4,1,1,9,2,110,66,79,33,79,79,13,158,238,173,54,216,54,54,155,108,4,89,166,162,166,166,255,81,189,222,210,111,210,210,12,185,6,251,245,243,245,245,14,247,128,239,121,249,121,121,150,242,206,95,111,161,111,111,48,222,239,252,145,126,145,145,109,63,7,170,82,85,82,82,248,164,253,39,96,157,96,96,71,192,118,137,188,202,188,188,53,101,205,172,155,86,155,155,55,43,140,4,142,2,142,142,138,1,21,113,163,182,163,163,210,91,60,96,12,48,12,12,108,24,138,255,123,241,123,123,132,246,225,181,53,212,53,53,128,106,105,232,29,116,29,29,245,58,71,83,224,167,224,224,179,221,172,246,215,123,215,215,33,179,237,94,194,47,194,194,156,153,150,109,46,184,46,46,67,92,122,98,75,49,75,75,41,150,33,163,254,223,254,254,93,225,22,130,87,65,87,87,213,174,65,168,21,84,21,21,189,42,182,159,119,193,119,119,232,238,235,165,55,220,55,55,146,110,86,123,229,179,229,229,158,215,217,140,159,70,159,159,19,35,23,211,240,231,240,240,35,253,127,106,74,53,74,74,32,148,149,158,218,79,218,218,68,169,37,250,88,125,88,88,162,176,202,6,201,3,201,201,207,143,141,85,41,164,41,41,124,82,34,80,10,40,10,10,90,20,79,225,177,254,177,177,80,127,26,105,160,186,160,160,201,93,218,127,107,177,107,107,20,214,171,92,133,46,133,133,217,23,115,129,189,206,189,189,60,103,52,210,93,105,93,93,143,186,80,128,16,64,16,16,144,32,3,243,244,247,244,244,7,245,192,22,203,11,203,203,221,139,198,237,62,248,62,62,211,124,17,40,5,20,5,5,45,10,230,31,103,129,103,103,120,206,83,115,228,183,228,228,151,213,187,37,39,156,39,39,2,78,88,50,65,25,65,65,115,130,157,44,139,22,139,139,167,11,1,81,167,166,167,167,246,83,148,207,125,233,125,125,178,250,251,220,149,110,149,149,73,55,159,142,216,71,216,216,86,173,48,139,251,203,251,251,112,235,113,35,238,159,238,238,205,193,145,199,124,237,124,124,187,248,227,23,102,133,102,102,113,204,142,166,221,83,221,221,123,167,75,184,23,92,23,23,175,46,70,2,71,1,71,71,69,142,220,132,158,66,158,158,26,33,197,30,202,15,202,202,212,137,153,117,45,180,45,45,88,90,121,145,191,198,191,191,46,99,27,56,7,28,7,7,63,14,35,1,173,142,173,173,172,71,47,234,90,117,90,90,176,180,181,108,131,54,131,131,239,27,255,133,51,204,51,51,182,102,242,63,99,145,99,99,92,198,10,16,2,8,2,2,18,4,56,57,170,146,170,170,147,73,168,175,113,217,113,113,222,226,207,14,200,7,200,200,198,141,125,200,25,100,25,25,209,50,112,114,73,57,73,73,59,146,154,134,217,67,217,217,95,175,29,195,242,239,242,242,49,249,72,75,227,171,227,227,168,219,42,226,91,113,91,91,185,182,146,52,136,26,136,136,188,13,200,164,154,82,154,154,62,41,190,45,38,152,38,38,11,76,250,141,50,200,50,50,191,100,74,233,176,250,176,176,89,125,106,27,233,131,233,233,242,207,51,120,15,60,15,15,119,30,166,230,213,115,213,213,51,183,186,116,128,58,128,128,244,29,124,153,190,194,190,190,39,97,222,38,205,19,205,205,235,135,228,189,52,208,52,52,137,104,117,122,72,61,72,72,50,144,36,171,255,219,255,255,84,227,143,247,122,245,122,122,141,244,234,244,144,122,144,144,100,61,62,194,95,97,95,95,157,190,160,29,32,128,32,32,61,64,213,103,104,189,104,104,15,208,114,208,26,104,26,26,202,52,44,25,174,130,174,174,183,65,94,201,180,234,180,180,125,117,25,154,84,77,84,84,206,168,229,236,147,118,147,147,127,59,170,13,34,136,34,34,47,68,233,7,100,141,100,100,99,200,18,219,241,227,241,241,42,255,162,191,115,209,115,115,204,230,90,144,18,72,18,18,130,36,93,58,64,29,64,64,122,128,40,64,8,32,8,8,72,16,232,86,195,43,195,195,149,155,123,51,236,151,236,236,223,197,144,150,219,75,219,219,77,171,31,97,161,190,161,161,192,95,131,28,141,14,141,141,145,7,201,245,61,244,61,61,200,122,241,204,151,102,151,151,91,51,0,0,0,0,0,0,0,0,212,54,207,27,207,207,249,131,135,69,43,172,43,43,110,86,179,151,118,197,118,118,225,236,176,100,130,50,130,130,230,25,169,254,214,127,214,214,40,177,119,216,27,108,27,27,195,54,91,193,181,238,181,181,116,119,41,17,175,134,175,175,190,67,223,119,106,181,106,106,29,212,13,186,80,93,80,80,234,160,76,18,69,9,69,69,87,138,24,203,243,235,243,243,56,251,240,157,48,192,48,48,173,96,116,43,239,155,239,239,196,195,195,229,63,252,63,63,218,126,28,146,85,73,85,85,199,170,16,121,162,178,162,162,219,89,101,3,234,143,234,234,233,201,236,15,101,137,101,101,106,202,104,185,186,210,186,186,3,105,147,101,47,188,47,47,74,94,231,78,192,39,192,192,142,157,129,190,222,95,222,222,96,161,108,224,28,112,28,28,252,56,46,187,253,211,253,253,70,231,100,82,77,41,77,77,31,154,224,228,146,114,146,146,118,57,188,143,117,201,117,117,250,234,30,48,6,24,6,6,54,12,152,36,138,18,138,138,174,9,64,249,178,242,178,178,75,121,89,99,230,191,230,230,133,209,54,112,14,56,14,14,126,28,99,248,31,124,31,31,231,62,247,55,98,149,98,98,85,196,163,238,212,119,212,212,58,181,50,41,168,154,168,168,129,77,244,196,150,98,150,150,82,49,58,155,249,195,249,249,98,239,246,102,197,51,197,197,163,151,177,53,37,148,37,37,16,74,32,242,89,121,89,89,171,178,174,84,132,42,132,132,208,21,167,183,114,213,114,114,197,228,221,213,57,228,57,57,236,114,97,90,76,45,76,76,22,152,59,202,94,101,94,94,148,188,133,231,120,253,120,120,159,240,216,221,56,224,56,56,229,112,134,20,140,10,140,140,152,5,178,198,209,99,209,209,23,191,11,65,165,174,165,165,228,87,77,67,226,175,226,226,161,217,248,47,97,153,97,97,78,194,69,241,179,246,179,179,66,123,165,21,33,132,33,33,52,66,214,148,156,74,156,156,8,37,102,240,30,120,30,30,238,60,82,34,67,17,67,67,97,134,252,118,199,59,199,199,177,147,43,179,252,215,252,252,79,229,20,32,4,16,4,4,36,8,8,178,81,89,81,81,227,162,199,188,153,94,153,153,37,47,196,79,109,169,109,109,34,218,57,104,13,52,13,13,101,26,53,131,250,207,250,250,121,233,132,182,223,91,223,223,105,163,155,215,126,229,126,126,169,252,180,61,36,144,36,36,25,72,215,197,59,236,59,59,254,118,61,49,171,150,171,171,154,75,209,62,206,31,206,206,240,129,85,136,17,68,17,17,153,34,137,12,143,6,143,143,131,3,107,74,78,37,78,78,4,156,81,209,183,230,183,183,102,115,96,11,235,139,235,235,224,203,204,253,60,240,60,60,193,120,191,124,129,62,129,129,253,31,254,212,148,106,148,148,64,53,12,235,247,251,247,247,28,243,103,161,185,222,185,185,24,111,95,152,19,76,19,19,139,38,156,125,44,176,44,44,81,88,184,214,211,107,211,211,5,187,92,107,231,187,231,231,140,211,203,87,110,165,110,110,57,220,243,110,196,55,196,196,170,149,15,24,3,12,3,3,27,6,19,138,86,69,86,86,220,172,73,26,68,13,68,68,94,136,158,223,127,225,127,127,160,254,55,33,169,158,169,169,136,79,130,77,42,168,42,42,103,84,109,177,187,214,187,187,10,107,226,70,193,35,193,193,135,159,2,162,83,81,83,83,241,166,139,174,220,87,220,220,114,165,39,88,11,44,11,11,83,22,211,156,157,78,157,157,1,39,193,71,108,173,108,108,43,216,245,149,49,196,49,49,164,98,185,135,116,205,116,116,243,232,9,227,246,255,246,246,21,241,67,10,70,5,70,70,76,140,38,9,172,138,172,172,165,69,151,60,137,30,137,137,181,15,68,160,20,80,20,20,180,40,66,91,225,163,225,225,186,223,78,176,22,88,22,22,166,44,210,205,58,232,58,58,247,116,208,111,105,185,105,105,6,210,45,72,9,36,9,9,65,18,173,167,112,221,112,112,215,224,84,217,182,226,182,182,111,113,183,206,208,103,208,208,30,189,126,59,237,147,237,237,214,199,219,46,204,23,204,204,226,133,87,42,66,21,66,66,104,132,194,180,152,90,152,152,44,45,14,73,164,170,164,164,237,85,136,93,40,160,40,40,117,80,49,218,92,109,92,92,134,184,63,147,248,199,248,248,107,237,164,68,134,34,134,134,194,17], "i8", ALLOC_NONE, 522904);
allocate([48,120,192,24,96,24,24,216,70,175,5,35,140,35,35,38,145,249,126,198,63,198,198,184,205,111,19,232,135,232,232,251,19,161,76,135,38,135,135,203,109,98,169,184,218,184,184,17,2,5,8,1,4,1,1,9,158,110,66,79,33,79,79,13,108,238,173,54,216,54,54,155,81,4,89,166,162,166,166,255,185,189,222,210,111,210,210,12,247,6,251,245,243,245,245,14,242,128,239,121,249,121,121,150,222,206,95,111,161,111,111,48,63,239,252,145,126,145,145,109,164,7,170,82,85,82,82,248,192,253,39,96,157,96,96,71,101,118,137,188,202,188,188,53,43,205,172,155,86,155,155,55,1,140,4,142,2,142,142,138,91,21,113,163,182,163,163,210,24,60,96,12,48,12,12,108,246,138,255,123,241,123,123,132,106,225,181,53,212,53,53,128,58,105,232,29,116,29,29,245,221,71,83,224,167,224,224,179,179,172,246,215,123,215,215,33,153,237,94,194,47,194,194,156,92,150,109,46,184,46,46,67,150,122,98,75,49,75,75,41,225,33,163,254,223,254,254,93,174,22,130,87,65,87,87,213,42,65,168,21,84,21,21,189,238,182,159,119,193,119,119,232,110,235,165,55,220,55,55,146,215,86,123,229,179,229,229,158,35,217,140,159,70,159,159,19,253,23,211,240,231,240,240,35,148,127,106,74,53,74,74,32,169,149,158,218,79,218,218,68,176,37,250,88,125,88,88,162,143,202,6,201,3,201,201,207,82,141,85,41,164,41,41,124,20,34,80,10,40,10,10,90,127,79,225,177,254,177,177,80,93,26,105,160,186,160,160,201,214,218,127,107,177,107,107,20,23,171,92,133,46,133,133,217,103,115,129,189,206,189,189,60,186,52,210,93,105,93,93,143,32,80,128,16,64,16,16,144,245,3,243,244,247,244,244,7,139,192,22,203,11,203,203,221,124,198,237,62,248,62,62,211,10,17,40,5,20,5,5,45,206,230,31,103,129,103,103,120,213,83,115,228,183,228,228,151,78,187,37,39,156,39,39,2,130,88,50,65,25,65,65,115,11,157,44,139,22,139,139,167,83,1,81,167,166,167,167,246,250,148,207,125,233,125,125,178,55,251,220,149,110,149,149,73,173,159,142,216,71,216,216,86,235,48,139,251,203,251,251,112,193,113,35,238,159,238,238,205,248,145,199,124,237,124,124,187,204,227,23,102,133,102,102,113,167,142,166,221,83,221,221,123,46,75,184,23,92,23,23,175,142,70,2,71,1,71,71,69,33,220,132,158,66,158,158,26,137,197,30,202,15,202,202,212,90,153,117,45,180,45,45,88,99,121,145,191,198,191,191,46,14,27,56,7,28,7,7,63,71,35,1,173,142,173,173,172,180,47,234,90,117,90,90,176,27,181,108,131,54,131,131,239,102,255,133,51,204,51,51,182,198,242,63,99,145,99,99,92,4,10,16,2,8,2,2,18,73,56,57,170,146,170,170,147,226,168,175,113,217,113,113,222,141,207,14,200,7,200,200,198,50,125,200,25,100,25,25,209,146,112,114,73,57,73,73,59,175,154,134,217,67,217,217,95,249,29,195,242,239,242,242,49,219,72,75,227,171,227,227,168,182,42,226,91,113,91,91,185,13,146,52,136,26,136,136,188,41,200,164,154,82,154,154,62,76,190,45,38,152,38,38,11,100,250,141,50,200,50,50,191,125,74,233,176,250,176,176,89,207,106,27,233,131,233,233,242,30,51,120,15,60,15,15,119,183,166,230,213,115,213,213,51,29,186,116,128,58,128,128,244,97,124,153,190,194,190,190,39,135,222,38,205,19,205,205,235,104,228,189,52,208,52,52,137,144,117,122,72,61,72,72,50,227,36,171,255,219,255,255,84,244,143,247,122,245,122,122,141,61,234,244,144,122,144,144,100,190,62,194,95,97,95,95,157,64,160,29,32,128,32,32,61,208,213,103,104,189,104,104,15,52,114,208,26,104,26,26,202,65,44,25,174,130,174,174,183,117,94,201,180,234,180,180,125,168,25,154,84,77,84,84,206,59,229,236,147,118,147,147,127,68,170,13,34,136,34,34,47,200,233,7,100,141,100,100,99,255,18,219,241,227,241,241,42,230,162,191,115,209,115,115,204,36,90,144,18,72,18,18,130,128,93,58,64,29,64,64,122,16,40,64,8,32,8,8,72,155,232,86,195,43,195,195,149,197,123,51,236,151,236,236,223,171,144,150,219,75,219,219,77,95,31,97,161,190,161,161,192,7,131,28,141,14,141,141,145,122,201,245,61,244,61,61,200,51,241,204,151,102,151,151,91,0,0,0,0,0,0,0,0,131,212,54,207,27,207,207,249,86,135,69,43,172,43,43,110,236,179,151,118,197,118,118,225,25,176,100,130,50,130,130,230,177,169,254,214,127,214,214,40,54,119,216,27,108,27,27,195,119,91,193,181,238,181,181,116,67,41,17,175,134,175,175,190,212,223,119,106,181,106,106,29,160,13,186,80,93,80,80,234,138,76,18,69,9,69,69,87,251,24,203,243,235,243,243,56,96,240,157,48,192,48,48,173,195,116,43,239,155,239,239,196,126,195,229,63,252,63,63,218,170,28,146,85,73,85,85,199,89,16,121,162,178,162,162,219,201,101,3,234,143,234,234,233,202,236,15,101,137,101,101,106,105,104,185,186,210,186,186,3,94,147,101,47,188,47,47,74,157,231,78,192,39,192,192,142,161,129,190,222,95,222,222,96,56,108,224,28,112,28,28,252,231,46,187,253,211,253,253,70,154,100,82,77,41,77,77,31,57,224,228,146,114,146,146,118,234,188,143,117,201,117,117,250,12,30,48,6,24,6,6,54,9,152,36,138,18,138,138,174,121,64,249,178,242,178,178,75,209,89,99,230,191,230,230,133,28,54,112,14,56,14,14,126,62,99,248,31,124,31,31,231,196,247,55,98,149,98,98,85,181,163,238,212,119,212,212,58,77,50,41,168,154,168,168,129,49,244,196,150,98,150,150,82,239,58,155,249,195,249,249,98,151,246,102,197,51,197,197,163,74,177,53,37,148,37,37,16,178,32,242,89,121,89,89,171,21,174,84,132,42,132,132,208,228,167,183,114,213,114,114,197,114,221,213,57,228,57,57,236,152,97,90,76,45,76,76,22,188,59,202,94,101,94,94,148,240,133,231,120,253,120,120,159,112,216,221,56,224,56,56,229,5,134,20,140,10,140,140,152,191,178,198,209,99,209,209,23,87,11,65,165,174,165,165,228,217,77,67,226,175,226,226,161,194,248,47,97,153,97,97,78,123,69,241,179,246,179,179,66,66,165,21,33,132,33,33,52,37,214,148,156,74,156,156,8,60,102,240,30,120,30,30,238,134,82,34,67,17,67,67,97,147,252,118,199,59,199,199,177,229,43,179,252,215,252,252,79,8,20,32,4,16,4,4,36,162,8,178,81,89,81,81,227,47,199,188,153,94,153,153,37,218,196,79,109,169,109,109,34,26,57,104,13,52,13,13,101,233,53,131,250,207,250,250,121,163,132,182,223,91,223,223,105,252,155,215,126,229,126,126,169,72,180,61,36,144,36,36,25,118,215,197,59,236,59,59,254,75,61,49,171,150,171,171,154,129,209,62,206,31,206,206,240,34,85,136,17,68,17,17,153,3,137,12,143,6,143,143,131,156,107,74,78,37,78,78,4,115,81,209,183,230,183,183,102,203,96,11,235,139,235,235,224,120,204,253,60,240,60,60,193,31,191,124,129,62,129,129,253,53,254,212,148,106,148,148,64,243,12,235,247,251,247,247,28,111,103,161,185,222,185,185,24,38,95,152,19,76,19,19,139,88,156,125,44,176,44,44,81,187,184,214,211,107,211,211,5,211,92,107,231,187,231,231,140,220,203,87,110,165,110,110,57,149,243,110,196,55,196,196,170,6,15,24,3,12,3,3,27,172,19,138,86,69,86,86,220,136,73,26,68,13,68,68,94,254,158,223,127,225,127,127,160,79,55,33,169,158,169,169,136,84,130,77,42,168,42,42,103,107,109,177,187,214,187,187,10,159,226,70,193,35,193,193,135,166,2,162,83,81,83,83,241,165,139,174,220,87,220,220,114,22,39,88,11,44,11,11,83,39,211,156,157,78,157,157,1,216,193,71,108,173,108,108,43,98,245,149,49,196,49,49,164,232,185,135,116,205,116,116,243,241,9,227,246,255,246,246,21,140,67,10,70,5,70,70,76,69,38,9,172,138,172,172,165,15,151,60,137,30,137,137,181,40,68,160,20,80,20,20,180,223,66,91,225,163,225,225,186,44,78,176,22,88,22,22,166,116,210,205,58,232,58,58,247,210,208,111,105,185,105,105,6,18,45,72,9,36,9,9,65,224,173,167,112,221,112,112,215,113,84,217,182,226,182,182,111,189,183,206,208,103,208,208,30,199,126,59,237,147,237,237,214,133,219,46,204,23,204,204,226,132,87,42,66,21,66,66,104,45,194,180,152,90,152,152,44,85,14,73,164,170,164,164,237,80,136,93,40,160,40,40,117,184,49,218,92,109,92,92,134,237,63,147,248,199,248,248,107,17,164,68,134,34,134,134,194], "i8", ALLOC_NONE, 524952);
allocate([216,48,120,192,24,96,24,24,38,70,175,5,35,140,35,35,184,145,249,126,198,63,198,198,251,205,111,19,232,135,232,232,203,19,161,76,135,38,135,135,17,109,98,169,184,218,184,184,9,2,5,8,1,4,1,1,13,158,110,66,79,33,79,79,155,108,238,173,54,216,54,54,255,81,4,89,166,162,166,166,12,185,189,222,210,111,210,210,14,247,6,251,245,243,245,245,150,242,128,239,121,249,121,121,48,222,206,95,111,161,111,111,109,63,239,252,145,126,145,145,248,164,7,170,82,85,82,82,71,192,253,39,96,157,96,96,53,101,118,137,188,202,188,188,55,43,205,172,155,86,155,155,138,1,140,4,142,2,142,142,210,91,21,113,163,182,163,163,108,24,60,96,12,48,12,12,132,246,138,255,123,241,123,123,128,106,225,181,53,212,53,53,245,58,105,232,29,116,29,29,179,221,71,83,224,167,224,224,33,179,172,246,215,123,215,215,156,153,237,94,194,47,194,194,67,92,150,109,46,184,46,46,41,150,122,98,75,49,75,75,93,225,33,163,254,223,254,254,213,174,22,130,87,65,87,87,189,42,65,168,21,84,21,21,232,238,182,159,119,193,119,119,146,110,235,165,55,220,55,55,158,215,86,123,229,179,229,229,19,35,217,140,159,70,159,159,35,253,23,211,240,231,240,240,32,148,127,106,74,53,74,74,68,169,149,158,218,79,218,218,162,176,37,250,88,125,88,88,207,143,202,6,201,3,201,201,124,82,141,85,41,164,41,41,90,20,34,80,10,40,10,10,80,127,79,225,177,254,177,177,201,93,26,105,160,186,160,160,20,214,218,127,107,177,107,107,217,23,171,92,133,46,133,133,60,103,115,129,189,206,189,189,143,186,52,210,93,105,93,93,144,32,80,128,16,64,16,16,7,245,3,243,244,247,244,244,221,139,192,22,203,11,203,203,211,124,198,237,62,248,62,62,45,10,17,40,5,20,5,5,120,206,230,31,103,129,103,103,151,213,83,115,228,183,228,228,2,78,187,37,39,156,39,39,115,130,88,50,65,25,65,65,167,11,157,44,139,22,139,139,246,83,1,81,167,166,167,167,178,250,148,207,125,233,125,125,73,55,251,220,149,110,149,149,86,173,159,142,216,71,216,216,112,235,48,139,251,203,251,251,205,193,113,35,238,159,238,238,187,248,145,199,124,237,124,124,113,204,227,23,102,133,102,102,123,167,142,166,221,83,221,221,175,46,75,184,23,92,23,23,69,142,70,2,71,1,71,71,26,33,220,132,158,66,158,158,212,137,197,30,202,15,202,202,88,90,153,117,45,180,45,45,46,99,121,145,191,198,191,191,63,14,27,56,7,28,7,7,172,71,35,1,173,142,173,173,176,180,47,234,90,117,90,90,239,27,181,108,131,54,131,131,182,102,255,133,51,204,51,51,92,198,242,63,99,145,99,99,18,4,10,16,2,8,2,2,147,73,56,57,170,146,170,170,222,226,168,175,113,217,113,113,198,141,207,14,200,7,200,200,209,50,125,200,25,100,25,25,59,146,112,114,73,57,73,73,95,175,154,134,217,67,217,217,49,249,29,195,242,239,242,242,168,219,72,75,227,171,227,227,185,182,42,226,91,113,91,91,188,13,146,52,136,26,136,136,62,41,200,164,154,82,154,154,11,76,190,45,38,152,38,38,191,100,250,141,50,200,50,50,89,125,74,233,176,250,176,176,242,207,106,27,233,131,233,233,119,30,51,120,15,60,15,15,51,183,166,230,213,115,213,213,244,29,186,116,128,58,128,128,39,97,124,153,190,194,190,190,235,135,222,38,205,19,205,205,137,104,228,189,52,208,52,52,50,144,117,122,72,61,72,72,84,227,36,171,255,219,255,255,141,244,143,247,122,245,122,122,100,61,234,244,144,122,144,144,157,190,62,194,95,97,95,95,61,64,160,29,32,128,32,32,15,208,213,103,104,189,104,104,202,52,114,208,26,104,26,26,183,65,44,25,174,130,174,174,125,117,94,201,180,234,180,180,206,168,25,154,84,77,84,84,127,59,229,236,147,118,147,147,47,68,170,13,34,136,34,34,99,200,233,7,100,141,100,100,42,255,18,219,241,227,241,241,204,230,162,191,115,209,115,115,130,36,90,144,18,72,18,18,122,128,93,58,64,29,64,64,72,16,40,64,8,32,8,8,149,155,232,86,195,43,195,195,223,197,123,51,236,151,236,236,77,171,144,150,219,75,219,219,192,95,31,97,161,190,161,161,145,7,131,28,141,14,141,141,200,122,201,245,61,244,61,61,91,51,241,204,151,102,151,151,0,0,0,0,0,0,0,0,249,131,212,54,207,27,207,207,110,86,135,69,43,172,43,43,225,236,179,151,118,197,118,118,230,25,176,100,130,50,130,130,40,177,169,254,214,127,214,214,195,54,119,216,27,108,27,27,116,119,91,193,181,238,181,181,190,67,41,17,175,134,175,175,29,212,223,119,106,181,106,106,234,160,13,186,80,93,80,80,87,138,76,18,69,9,69,69,56,251,24,203,243,235,243,243,173,96,240,157,48,192,48,48,196,195,116,43,239,155,239,239,218,126,195,229,63,252,63,63,199,170,28,146,85,73,85,85,219,89,16,121,162,178,162,162,233,201,101,3,234,143,234,234,106,202,236,15,101,137,101,101,3,105,104,185,186,210,186,186,74,94,147,101,47,188,47,47,142,157,231,78,192,39,192,192,96,161,129,190,222,95,222,222,252,56,108,224,28,112,28,28,70,231,46,187,253,211,253,253,31,154,100,82,77,41,77,77,118,57,224,228,146,114,146,146,250,234,188,143,117,201,117,117,54,12,30,48,6,24,6,6,174,9,152,36,138,18,138,138,75,121,64,249,178,242,178,178,133,209,89,99,230,191,230,230,126,28,54,112,14,56,14,14,231,62,99,248,31,124,31,31,85,196,247,55,98,149,98,98,58,181,163,238,212,119,212,212,129,77,50,41,168,154,168,168,82,49,244,196,150,98,150,150,98,239,58,155,249,195,249,249,163,151,246,102,197,51,197,197,16,74,177,53,37,148,37,37,171,178,32,242,89,121,89,89,208,21,174,84,132,42,132,132,197,228,167,183,114,213,114,114,236,114,221,213,57,228,57,57,22,152,97,90,76,45,76,76,148,188,59,202,94,101,94,94,159,240,133,231,120,253,120,120,229,112,216,221,56,224,56,56,152,5,134,20,140,10,140,140,23,191,178,198,209,99,209,209,228,87,11,65,165,174,165,165,161,217,77,67,226,175,226,226,78,194,248,47,97,153,97,97,66,123,69,241,179,246,179,179,52,66,165,21,33,132,33,33,8,37,214,148,156,74,156,156,238,60,102,240,30,120,30,30,97,134,82,34,67,17,67,67,177,147,252,118,199,59,199,199,79,229,43,179,252,215,252,252,36,8,20,32,4,16,4,4,227,162,8,178,81,89,81,81,37,47,199,188,153,94,153,153,34,218,196,79,109,169,109,109,101,26,57,104,13,52,13,13,121,233,53,131,250,207,250,250,105,163,132,182,223,91,223,223,169,252,155,215,126,229,126,126,25,72,180,61,36,144,36,36,254,118,215,197,59,236,59,59,154,75,61,49,171,150,171,171,240,129,209,62,206,31,206,206,153,34,85,136,17,68,17,17,131,3,137,12,143,6,143,143,4,156,107,74,78,37,78,78,102,115,81,209,183,230,183,183,224,203,96,11,235,139,235,235,193,120,204,253,60,240,60,60,253,31,191,124,129,62,129,129,64,53,254,212,148,106,148,148,28,243,12,235,247,251,247,247,24,111,103,161,185,222,185,185,139,38,95,152,19,76,19,19,81,88,156,125,44,176,44,44,5,187,184,214,211,107,211,211,140,211,92,107,231,187,231,231,57,220,203,87,110,165,110,110,170,149,243,110,196,55,196,196,27,6,15,24,3,12,3,3,220,172,19,138,86,69,86,86,94,136,73,26,68,13,68,68,160,254,158,223,127,225,127,127,136,79,55,33,169,158,169,169,103,84,130,77,42,168,42,42,10,107,109,177,187,214,187,187,135,159,226,70,193,35,193,193,241,166,2,162,83,81,83,83,114,165,139,174,220,87,220,220,83,22,39,88,11,44,11,11,1,39,211,156,157,78,157,157,43,216,193,71,108,173,108,108,164,98,245,149,49,196,49,49,243,232,185,135,116,205,116,116,21,241,9,227,246,255,246,246,76,140,67,10,70,5,70,70,165,69,38,9,172,138,172,172,181,15,151,60,137,30,137,137,180,40,68,160,20,80,20,20,186,223,66,91,225,163,225,225,166,44,78,176,22,88,22,22,247,116,210,205,58,232,58,58,6,210,208,111,105,185,105,105,65,18,45,72,9,36,9,9,215,224,173,167,112,221,112,112,111,113,84,217,182,226,182,182,30,189,183,206,208,103,208,208,214,199,126,59,237,147,237,237,226,133,219,46,204,23,204,204,104,132,87,42,66,21,66,66,44,45,194,180,152,90,152,152,237,85,14,73,164,170,164,164,117,80,136,93,40,160,40,40,134,184,49,218,92,109,92,92,107,237,63,147,248,199,248,248,194,17,164,68,134,34,134,134], "i8", ALLOC_NONE, 527000);
HEAP32[((413312)>>2)]=((476568)|0);
HEAP32[((413316)>>2)]=((473820)|0);
HEAP32[((413320)>>2)]=((471960)|0);
HEAP32[((413388)>>2)]=((470460)|0);
HEAP32[((413392)>>2)]=((468996)|0);
HEAP32[((413396)>>2)]=((467416)|0);
HEAP32[((413464)>>2)]=((465344)|0);
HEAP32[((413468)>>2)]=((490420)|0);
HEAP32[((413472)>>2)]=((489548)|0);
HEAP32[((413540)>>2)]=((487856)|0);
HEAP32[((413544)>>2)]=((487164)|0);
HEAP32[((413548)>>2)]=((486200)|0);
HEAP32[((413616)>>2)]=((485412)|0);
HEAP32[((413620)>>2)]=((484536)|0);
HEAP32[((413624)>>2)]=((483732)|0);
HEAP32[((413692)>>2)]=((482896)|0);
HEAP32[((413696)>>2)]=((482144)|0);
HEAP32[((413700)>>2)]=((483732)|0);
HEAP32[((413844)>>2)]=((476568)|0);
HEAP32[((413848)>>2)]=((473820)|0);
HEAP32[((413852)>>2)]=((471960)|0);
HEAP32[((413904)>>2)]=((470460)|0);
HEAP32[((413908)>>2)]=((468996)|0);
HEAP32[((413912)>>2)]=((467416)|0);
HEAP32[((413964)>>2)]=((465344)|0);
HEAP32[((413968)>>2)]=((490420)|0);
HEAP32[((413972)>>2)]=((489548)|0);
HEAP32[((414024)>>2)]=((487856)|0);
HEAP32[((414028)>>2)]=((487164)|0);
HEAP32[((414032)>>2)]=((486200)|0);
HEAP32[((414084)>>2)]=((485412)|0);
HEAP32[((414088)>>2)]=((484536)|0);
HEAP32[((414092)>>2)]=((483732)|0);
HEAP32[((414144)>>2)]=((482896)|0);
HEAP32[((414148)>>2)]=((482144)|0);
HEAP32[((414152)>>2)]=((483732)|0);
HEAP32[((414264)>>2)]=((476568)|0);
HEAP32[((414268)>>2)]=((473820)|0);
HEAP32[((414272)>>2)]=((471960)|0);
HEAP32[((414308)>>2)]=((470460)|0);
HEAP32[((414312)>>2)]=((468996)|0);
HEAP32[((414316)>>2)]=((467416)|0);
HEAP32[((414352)>>2)]=((465344)|0);
HEAP32[((414356)>>2)]=((490420)|0);
HEAP32[((414360)>>2)]=((489548)|0);
HEAP32[((414396)>>2)]=((487856)|0);
HEAP32[((414400)>>2)]=((487164)|0);
HEAP32[((414404)>>2)]=((486200)|0);
HEAP32[((414440)>>2)]=((485412)|0);
HEAP32[((414444)>>2)]=((484536)|0);
HEAP32[((414448)>>2)]=((483732)|0);
HEAP32[((414484)>>2)]=((482896)|0);
HEAP32[((414488)>>2)]=((482144)|0);
HEAP32[((414492)>>2)]=((483732)|0);
HEAP32[((414572)>>2)]=((476568)|0);
HEAP32[((414576)>>2)]=((473820)|0);
HEAP32[((414580)>>2)]=((471960)|0);
HEAP32[((414612)>>2)]=((470460)|0);
HEAP32[((414616)>>2)]=((468996)|0);
HEAP32[((414620)>>2)]=((467416)|0);
HEAP32[((414652)>>2)]=((465344)|0);
HEAP32[((414656)>>2)]=((490420)|0);
HEAP32[((414660)>>2)]=((489548)|0);
HEAP32[((414692)>>2)]=((487856)|0);
HEAP32[((414696)>>2)]=((487164)|0);
HEAP32[((414700)>>2)]=((486200)|0);
HEAP32[((414732)>>2)]=((485412)|0);
HEAP32[((414736)>>2)]=((484536)|0);
HEAP32[((414740)>>2)]=((483732)|0);
HEAP32[((414772)>>2)]=((482896)|0);
HEAP32[((414776)>>2)]=((482144)|0);
HEAP32[((414780)>>2)]=((483732)|0);
HEAP32[((416872)>>2)]=((472444)|0);
HEAP32[((416880)>>2)]=((471040)|0);
HEAP32[((416888)>>2)]=((469732)|0);
HEAP32[((416896)>>2)]=((468000)|0);
HEAP32[((438676)>>2)]=((471764)|0);
HEAP32[((438680)>>2)]=((471256)|0);
HEAP32[((438684)>>2)]=((471088)|0);
HEAP32[((438740)>>2)]=((475752)|0);
HEAP32[((438748)>>2)]=((475492)|0);
HEAP32[((438756)>>2)]=((475196)|0);
HEAP32[((438764)>>2)]=((475032)|0);
HEAP32[((438780)>>2)]=((474812)|0);
HEAP32[((438784)>>2)]=((474512)|0);
HEAP32[((438788)>>2)]=((474220)|0);
HEAP32[((438796)>>2)]=((475056)|0);
HEAP32[((438804)>>2)]=((472596)|0);
HEAP32[((438812)>>2)]=((471128)|0);
HEAP32[((438820)>>2)]=((469840)|0);
HEAP32[((438836)>>2)]=((468140)|0);
HEAP32[((438840)>>2)]=((466448)|0);
HEAP32[((438848)>>2)]=((464824)|0);
HEAP32[((438856)>>2)]=((490048)|0);
HEAP32[((438864)>>2)]=((488444)|0);
HEAP32[((438872)>>2)]=((487512)|0);
HEAP32[((438888)>>2)]=((486784)|0);
HEAP32[((438892)>>2)]=((485904)|0);
HEAP32[((440548)>>2)]=((486048)|0);
HEAP32[((440556)>>2)]=((485196)|0);
HEAP32[((440564)>>2)]=((484252)|0);
HEAP32[((440580)>>2)]=((466588)|0);
HEAP32[((440596)>>2)]=((474488)|0);
HEAP32[((440604)>>2)]=((484064)|0);
HEAP32[((440608)>>2)]=((483068)|0);
HEAP32[((440616)>>2)]=((477388)|0);
HEAP32[((440620)>>2)]=((474520)|0);
HEAP32[((440628)>>2)]=((477504)|0);
HEAP32[((440632)>>2)]=((474544)|0);
HEAP32[((440640)>>2)]=((484088)|0);
HEAP32[((440648)>>2)]=((489956)|0);
HEAP32[((440652)>>2)]=((488320)|0);
HEAP32[((440656)>>2)]=((487456)|0);
HEAP32[((440660)>>2)]=((486684)|0);
HEAP32[((440664)>>2)]=((485812)|0);
HEAP32[((440672)>>2)]=((483496)|0);
HEAP32[((440676)>>2)]=((477968)|0);
HEAP32[((440684)>>2)]=((484948)|0);
HEAP32[((440688)>>2)]=((478648)|0);
HEAP32[((440696)>>2)]=((485032)|0);
HEAP32[((455280)>>2)]=((474012)|0);
HEAP32[((455288)>>2)]=((472080)|0);
HEAP32[((455296)>>2)]=((470620)|0);
HEAP32[((455304)>>2)]=((469204)|0);
HEAP32[((455312)>>2)]=((467580)|0);
HEAP32[((455328)>>2)]=((470812)|0);
HEAP32[((455336)>>2)]=((470748)|0);
HEAP32[((455344)>>2)]=((470400)|0);
HEAP32[((455352)>>2)]=((470308)|0);
HEAP32[((455360)>>2)]=((470220)|0);
HEAP32[((455368)>>2)]=((470112)|0);
HEAP32[((455376)>>2)]=((470048)|0);
HEAP32[((455384)>>2)]=((469968)|0);
HEAP32[((455392)>>2)]=((469820)|0);
HEAP32[((455400)>>2)]=((469668)|0);
HEAP32[((455408)>>2)]=((469436)|0);
HEAP32[((455416)>>2)]=((469356)|0);
HEAP32[((457056)>>2)]=((482300)|0);
HEAP32[((457060)>>2)]=((481584)|0);
HEAP32[((457064)>>2)]=((481108)|0);
HEAP32[((457072)>>2)]=((484244)|0);
HEAP32[((457076)>>2)]=((484908)|0);
HEAP32[((457084)>>2)]=((484928)|0);
HEAP32[((457088)>>2)]=((484908)|0);
HEAP32[((457132)>>2)]=((472664)|0);
HEAP32[((457136)>>2)]=((472508)|0);
HEAP32[((457144)>>2)]=((465372)|0);
HEAP32[((457156)>>2)]=((490484)|0);
HEAP32[((457160)>>2)]=((489596)|0);
HEAP32[((457164)>>2)]=((487908)|0);
HEAP32[((457168)>>2)]=((487232)|0);
HEAP32[((457172)>>2)]=((486256)|0);
HEAP32[((457176)>>2)]=((485440)|0);
HEAP32[((457180)>>2)]=((484616)|0);
HEAP32[((457192)>>2)]=((483872)|0);
HEAP32[((457196)>>2)]=((482948)|0);
HEAP32[((457200)>>2)]=((482304)|0);
HEAP32[((457204)>>2)]=((481608)|0);
HEAP32[((457208)>>2)]=((481144)|0);
HEAP32[((457212)>>2)]=((479972)|0);
HEAP32[((457216)>>2)]=((479712)|0);
HEAP32[((457228)>>2)]=((479388)|0);
HEAP32[((457232)>>2)]=((478808)|0);
HEAP32[((457236)>>2)]=((478464)|0);
HEAP32[((457240)>>2)]=((478168)|0);
HEAP32[((457244)>>2)]=((477832)|0);
HEAP32[((457248)>>2)]=((477540)|0);
HEAP32[((457252)>>2)]=((477304)|0);
HEAP32[((457264)>>2)]=((476992)|0);
HEAP32[((457268)>>2)]=((476240)|0);
HEAP32[((457272)>>2)]=((476048)|0);
HEAP32[((457276)>>2)]=((475808)|0);
HEAP32[((457280)>>2)]=((475528)|0);
HEAP32[((457284)>>2)]=((475244)|0);
HEAP32[((457288)>>2)]=((475096)|0);
HEAP32[((457300)>>2)]=((474868)|0);
HEAP32[((457304)>>2)]=((474592)|0);
HEAP32[((457308)>>2)]=((474280)|0);
HEAP32[((457312)>>2)]=((474028)|0);
HEAP32[((457316)>>2)]=((473448)|0);
HEAP32[((457320)>>2)]=((473220)|0);
HEAP32[((457324)>>2)]=((473124)|0);
HEAP32[((457336)>>2)]=((472952)|0);
HEAP32[((457340)>>2)]=((472792)|0);
HEAP32[((457344)>>2)]=((472620)|0);
HEAP32[((457348)>>2)]=((472464)|0);
HEAP32[((457352)>>2)]=((472312)|0);
HEAP32[((457356)>>2)]=((472152)|0);
HEAP32[((457360)>>2)]=((472108)|0);
HEAP32[((457372)>>2)]=((471768)|0);
HEAP32[((457376)>>2)]=((471640)|0);
HEAP32[((457380)>>2)]=((471496)|0);
HEAP32[((457384)>>2)]=((471404)|0);
HEAP32[((457388)>>2)]=((471276)|0);
HEAP32[((457392)>>2)]=((471152)|0);
HEAP32[((457396)>>2)]=((471060)|0);
HEAP32[((457408)>>2)]=((470868)|0);
HEAP32[((457412)>>2)]=((470752)|0);
HEAP32[((457416)>>2)]=((470676)|0);
HEAP32[((457420)>>2)]=((470320)|0);
HEAP32[((457424)>>2)]=((470240)|0);
HEAP32[((457428)>>2)]=((470140)|0);
HEAP32[((457432)>>2)]=((470096)|0);
HEAP32[((457444)>>2)]=((469980)|0);
HEAP32[((457448)>>2)]=((469864)|0);
HEAP32[((457452)>>2)]=((469752)|0);
HEAP32[((457456)>>2)]=((469600)|0);
HEAP32[((457460)>>2)]=((469368)|0);
HEAP32[((457464)>>2)]=((469276)|0);
HEAP32[((457468)>>2)]=((468856)|0);
HEAP32[((457480)>>2)]=((468704)|0);
HEAP32[((457484)>>2)]=((468552)|0);
HEAP32[((457488)>>2)]=((468400)|0);
HEAP32[((457492)>>2)]=((468292)|0);
HEAP32[((457496)>>2)]=((468152)|0);
HEAP32[((457500)>>2)]=((468024)|0);
HEAP32[((457504)>>2)]=((467912)|0);
HEAP32[((457516)>>2)]=((467756)|0);
HEAP32[((457520)>>2)]=((467612)|0);
HEAP32[((457524)>>2)]=((467220)|0);
HEAP32[((457528)>>2)]=((467088)|0);
HEAP32[((457532)>>2)]=((466912)|0);
HEAP32[((457536)>>2)]=((466716)|0);
HEAP32[((457540)>>2)]=((466644)|0);
HEAP32[((457552)>>2)]=((466456)|0);
HEAP32[((457556)>>2)]=((466276)|0);
HEAP32[((457560)>>2)]=((466064)|0);
HEAP32[((457564)>>2)]=((465736)|0);
HEAP32[((457568)>>2)]=((465548)|0);
HEAP32[((457572)>>2)]=((465140)|0);
HEAP32[((457956)>>2)]=((465372)|0);
HEAP32[((457960)>>2)]=((464876)|0);
HEAP32[((457964)>>2)]=((465372)|0);
HEAP32[((457968)>>2)]=((464848)|0);
HEAP32[((457972)>>2)]=((465372)|0);
HEAP32[((457976)>>2)]=((464796)|0);
HEAP32[((457980)>>2)]=((484616)|0);
HEAP32[((457984)>>2)]=((464732)|0);
HEAP32[((457988)>>2)]=((484616)|0);
HEAP32[((457992)>>2)]=((490692)|0);
HEAP32[((457996)>>2)]=((479712)|0);
HEAP32[((458000)>>2)]=((490640)|0);
HEAP32[((458004)>>2)]=((479712)|0);
HEAP32[((458008)>>2)]=((490384)|0);
HEAP32[((458012)>>2)]=((479712)|0);
HEAP32[((458016)>>2)]=((490372)|0);
HEAP32[((458020)>>2)]=((477304)|0);
HEAP32[((458024)>>2)]=((490308)|0);
HEAP32[((458028)>>2)]=((477304)|0);
HEAP32[((458032)>>2)]=((490240)|0);
HEAP32[((458036)>>2)]=((475096)|0);
HEAP32[((458040)>>2)]=((490120)|0);
HEAP32[((458044)>>2)]=((475096)|0);
HEAP32[((458048)>>2)]=((490084)|0);
HEAP32[((458052)>>2)]=((473124)|0);
HEAP32[((458056)>>2)]=((490012)|0);
HEAP32[((458060)>>2)]=((472108)|0);
HEAP32[((458064)>>2)]=((489980)|0);
HEAP32[((458068)>>2)]=((471060)|0);
HEAP32[((458072)>>2)]=((489896)|0);
HEAP32[((458076)>>2)]=((470096)|0);
HEAP32[((458080)>>2)]=((489808)|0);
HEAP32[((458084)>>2)]=((468856)|0);
HEAP32[((458088)>>2)]=((489488)|0);
HEAP32[((458092)>>2)]=((467912)|0);
HEAP32[((458096)>>2)]=((489404)|0);
HEAP32[((458100)>>2)]=((466644)|0);
HEAP32[((458104)>>2)]=((489312)|0);
HEAP32[((459472)>>2)]=((490004)|0);
HEAP32[((463740)>>2)]=((476692)|0);
HEAP32[((463748)>>2)]=((473864)|0);
HEAP32[((463756)>>2)]=((471992)|0);
HEAP32[((463764)>>2)]=((470508)|0);
HEAP32[((463780)>>2)]=((469100)|0);
HEAP32[((463788)>>2)]=((467500)|0);
HEAP32[((463796)>>2)]=((465400)|0);
HEAP32[((463804)>>2)]=((490544)|0);
HEAP32[((463820)>>2)]=((483012)|0);
HEAP32[((463828)>>2)]=((482368)|0);
HEAP32[((463836)>>2)]=((481704)|0);
HEAP32[((463844)>>2)]=((481212)|0);
HEAP32[((464552)>>2)]=((489392)|0);
HEAP32[((464556)>>2)]=((487740)|0);
HEAP32[((464564)>>2)]=((477188)|0);
HEAP32[((464588)>>2)]=((480928)|0);
HEAP32[((491280)>>2)]=((468020)|0);
HEAP32[((491284)>>2)]=((438676)|0);
HEAP32[((491288)>>2)]=((483480)|0);
HEAP32[((491292)>>2)]=((477932)|0);
HEAP32[((491296)>>2)]=((475020)|0);
HEAP32[((491300)>>2)]=((472576)|0);
HEAP32[((491304)>>2)]=((471084)|0);
HEAP32[((491340)>>2)]=((483484)|0);
HEAP32[((491344)>>2)]=((457056)|0);
HEAP32[((491348)>>2)]=((488440)|0);
HEAP32[((491352)>>2)]=((480248)|0);
HEAP32[((491356)>>2)]=((476604)|0);
HEAP32[((491360)>>2)]=((473852)|0);
HEAP32[((491364)>>2)]=((488440)|0);
HEAP32[((491400)>>2)]=((484128)|0);
HEAP32[((491404)>>2)]=((457072)|0);
HEAP32[((491408)>>2)]=((488500)|0);
HEAP32[((491412)>>2)]=((480288)|0);
HEAP32[((491416)>>2)]=((476656)|0);
HEAP32[((491420)>>2)]=((473856)|0);
HEAP32[((491424)>>2)]=((488500)|0);
HEAP32[((491460)>>2)]=((471976)|0);
HEAP32[((491464)>>2)]=((457084)|0);
HEAP32[((491468)>>2)]=((488500)|0);
HEAP32[((491472)>>2)]=((480288)|0);
HEAP32[((491476)>>2)]=((470488)|0);
HEAP32[((491480)>>2)]=((476656)|0);
HEAP32[((491484)>>2)]=((488500)|0);
HEAP32[((491520)>>2)]=((484808)|0);
HEAP32[((491524)>>2)]=((457132)|0);
HEAP32[((491528)>>2)]=((488920)|0);
HEAP32[((491532)>>2)]=((480696)|0);
HEAP32[((491536)>>2)]=((476684)|0);
HEAP32[((491540)>>2)]=((473860)|0);
HEAP32[((491544)>>2)]=((488920)|0);
HEAP32[((491712)>>2)]=((464616)|0);
HEAP32[((491752)>>2)]=((477372)|0);
HEAP32[((491792)>>2)]=((481912)|0);
HEAP32[((491796)>>2)]=((464464)|0);
HEAP32[((491804)>>2)]=((440596)|0);
HEAP32[((491832)>>2)]=((464860)|0);
HEAP32[((491872)>>2)]=((465072)|0);
HEAP32[((491876)>>2)]=((412916)|0);
HEAP32[((491884)>>2)]=((440604)|0);
HEAP32[((491912)>>2)]=((482080)|0);
HEAP32[((491916)>>2)]=((412936)|0);
HEAP32[((491924)>>2)]=((440616)|0);
HEAP32[((491952)>>2)]=((482392)|0);
HEAP32[((491956)>>2)]=((464424)|0);
HEAP32[((491964)>>2)]=((440628)|0);
HEAP32[((491992)>>2)]=((465728)|0);
HEAP32[((491996)>>2)]=((464444)|0);
HEAP32[((492004)>>2)]=((440640)|0);
HEAP32[((492032)>>2)]=((466268)|0);
HEAP32[((492036)>>2)]=((464372)|0);
HEAP32[((492044)>>2)]=((440648)|0);
HEAP32[((492072)>>2)]=((468128)|0);
HEAP32[((492076)>>2)]=((464388)|0);
HEAP32[((492084)>>2)]=((440672)|0);
HEAP32[((492112)>>2)]=((471240)|0);
HEAP32[((492116)>>2)]=((464404)|0);
HEAP32[((492124)>>2)]=((440684)|0);
HEAP32[((492152)>>2)]=((471268)|0);
HEAP32[((492156)>>2)]=((464484)|0);
HEAP32[((492164)>>2)]=((440696)|0);
HEAP32[((492192)>>2)]=((488936)|0);
HEAP32[((492232)>>2)]=((484912)|0);
HEAP32[((492272)>>2)]=((480744)|0);
HEAP32[((492748)>>2)]=((481860)|0);
HEAP32[((492792)>>2)]=((464788)|0);
HEAP32[((492836)>>2)]=((485936)|0);
HEAP32[((492844)>>2)]=((440548)|0);
HEAP32[((492880)>>2)]=((477688)|0);
HEAP32[((492924)>>2)]=((482608)|0);
HEAP32[((492968)>>2)]=((466620)|0);
HEAP32[((492972)>>2)]=((459472)|0);
HEAP32[((493012)>>2)]=((466816)|0);
HEAP32[((493020)>>2)]=((416872)|0);
HEAP32[((493056)>>2)]=((469484)|0);
HEAP32[((493064)>>2)]=((440580)|0);
HEAP32[((493100)>>2)]=((472776)|0);
HEAP32[((493144)>>2)]=((484940)|0);
HEAP32[((493188)>>2)]=((480764)|0);
HEAP32[((493196)>>2)]=((463740)|0);
HEAP32[((493232)>>2)]=((489032)|0);
HEAP32[((493240)>>2)]=((463780)|0);
HEAP32[((493276)>>2)]=((485256)|0);
HEAP32[((493284)>>2)]=((463820)|0);
HEAP32[((493320)>>2)]=((485288)|0);
HEAP32[((493364)>>2)]=((485552)|0);
HEAP32[((493408)>>2)]=((478160)|0);
HEAP32[((493412)>>2)]=((438836)|0);
HEAP32[((493416)>>2)]=((438796)|0);
HEAP32[((493452)>>2)]=((483992)|0);
HEAP32[((493456)>>2)]=((438888)|0);
HEAP32[((493460)>>2)]=((438848)|0);
HEAP32[((493496)>>2)]=((469364)|0);
HEAP32[((493500)>>2)]=((438780)|0);
HEAP32[((493504)>>2)]=((438740)|0);
HEAP32[((495560)>>2)]=(140);
HEAP32[((495564)>>2)]=(292);
HEAP32[((495568)>>2)]=(42);
HEAP32[((495584)>>2)]=(140);
HEAP32[((495588)>>2)]=(282);
HEAP32[((495592)>>2)]=(174);
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([2,0,0,0], "i8", ALLOC_STATIC);
HEAP32[((495644)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((495648)>>2)]=((495600)|0);
HEAP32[((495652)>>2)]=__ZTISt9exception;
HEAP32[((495656)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((495660)>>2)]=((495616)|0);
__ZNSt9bad_allocC1Ev = 216;
__ZNSt9bad_allocD1Ev = 140;
__ZNSt20bad_array_new_lengthC1Ev = 164;
__ZNSt20bad_array_new_lengthD1Ev = (140);
__ZNSt20bad_array_new_lengthD2Ev = (140);

  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }

  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _umask(newMask) {
      // mode_t umask(mode_t cmask);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/umask.html
      // NOTE: This value isn't actually used for anything.
      if (_umask.cmask === undefined) _umask.cmask = 0x1FF;  // S_IRWXU | S_IRWXG | S_IRWXO.
      var oldMask = _umask.cmask;
      _umask.cmask = newMask;
      return oldMask;
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }

  
  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32;
var __msgops_callback_policy; // stub for __msgops_callback_policy
var __msgops_callback_create_privkey; // stub for __msgops_callback_create_privkey
var __msgops_callback_is_logged_in; // stub for __msgops_callback_is_logged_in
var __msgops_callback_inject_message; // stub for __msgops_callback_inject_message
var __msgops_callback_update_context_list; // stub for __msgops_callback_update_context_list
var __msgops_callback_new_fingerprint; // stub for __msgops_callback_new_fingerprint
var __msgops_callback_write_fingerprints; // stub for __msgops_callback_write_fingerprints
var __msgops_callback_gone_secure; // stub for __msgops_callback_gone_secure
var __msgops_callback_gone_insecure; // stub for __msgops_callback_gone_insecure
var __msgops_callback_still_secure; // stub for __msgops_callback_still_secure
var __msgops_callback_max_message_size; // stub for __msgops_callback_max_message_size
var __msgops_callback_received_symkey; // stub for __msgops_callback_received_symkey
var __msgops_callback_smp_request; // stub for __msgops_callback_smp_request
var __msgops_callback_smp_complete; // stub for __msgops_callback_smp_complete
var __msgops_callback_smp_failed; // stub for __msgops_callback_smp_failed
var __msgops_callback_smp_error; // stub for __msgops_callback_smp_error
var __msgops_callback_smp_aborted; // stub for __msgops_callback_smp_aborted
var __msgops_callback_handle_msg_event; // stub for __msgops_callback_handle_msg_event
var __msgops_callback_create_instag; // stub for __msgops_callback_create_instag
var __msgops_callback_convert_msg; // stub for __msgops_callback_convert_msg
var __msgops_callback_convert_free; // stub for __msgops_callback_convert_free
var __msgops_callback_timer_control; // stub for __msgops_callback_timer_control

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }

  
  
  var ___stat_struct_layout={__size__:72,st_dev:0,st_ino:4,st_mode:8,st_nlink:12,st_uid:16,st_gid:20,st_rdev:24,st_size:28,st_atime:32,st_spare1:36,st_mtime:40,st_spare2:44,st_ctime:48,st_spare3:52,st_blksize:56,st_blocks:60,st_spare4:64};function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
      if (obj === null || !FS.forceLoadFile(obj)) return -1;
  
      var offsets = ___stat_struct_layout;
  
      // Constants.
      HEAP32[(((buf)+(offsets.st_nlink))>>2)]=1
      HEAP32[(((buf)+(offsets.st_uid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_gid))>>2)]=0
      HEAP32[(((buf)+(offsets.st_blksize))>>2)]=4096
  
      // Variables.
      HEAP32[(((buf)+(offsets.st_ino))>>2)]=obj.inodeNumber
      var time = Math.floor(obj.timestamp / 1000);
      if (offsets.st_atime === undefined) {
        offsets.st_atime = offsets.st_atim.tv_sec;
        offsets.st_mtime = offsets.st_mtim.tv_sec;
        offsets.st_ctime = offsets.st_ctim.tv_sec;
        var nanosec = (obj.timestamp % 1000) * 1000;
        HEAP32[(((buf)+(offsets.st_atim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_mtim.tv_nsec))>>2)]=nanosec
        HEAP32[(((buf)+(offsets.st_ctim.tv_nsec))>>2)]=nanosec
      }
      HEAP32[(((buf)+(offsets.st_atime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_mtime))>>2)]=time
      HEAP32[(((buf)+(offsets.st_ctime))>>2)]=time
      var mode = 0;
      var size = 0;
      var blocks = 0;
      var dev = 0;
      var rdev = 0;
      if (obj.isDevice) {
        //  Device numbers reuse inode numbers.
        dev = rdev = obj.inodeNumber;
        size = blocks = 0;
        mode = 0x2000;  // S_IFCHR.
      } else {
        dev = 1;
        rdev = 0;
        // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
        //       but this is not required by the standard.
        if (obj.isFolder) {
          size = 4096;
          blocks = 1;
          mode = 0x4000;  // S_IFDIR.
        } else {
          var data = obj.contents || obj.link;
          size = data.length;
          blocks = Math.ceil(data.length / 4096);
          mode = obj.link === undefined ? 0x8000 : 0xA000;  // S_IFREG, S_IFLNK.
        }
      }
      HEAP32[(((buf)+(offsets.st_dev))>>2)]=dev;
      HEAP32[(((buf)+(offsets.st_rdev))>>2)]=rdev;
      HEAP32[(((buf)+(offsets.st_size))>>2)]=size
      HEAP32[(((buf)+(offsets.st_blocks))>>2)]=blocks
      if (obj.read) mode |= 0x16D;  // S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH.
      if (obj.write) mode |= 0x92;  // S_IWUSR | S_IWGRP | S_IWOTH.
      HEAP32[(((buf)+(offsets.st_mode))>>2)]=mode
  
      return 0;
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else {
        var pathArray = intArrayFromString(FS.streams[fildes].path);
        return _stat(allocate(pathArray, 'i8', ALLOC_STACK), buf);
      }
    }

  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      _memcpy(newStr, ptr, len);
      HEAP8[((newStr)+(len))]=0;
      return newStr;
    }


  function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[((s)+(i))]=byte_
      }
      HEAP8[((s)+(i))]=0
      return s;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32;

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + (condition ? Pointer_stringify(condition) : 'unknown condition') + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + new Error().stack;
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  
  
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[' '.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\t'.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\n'.charCodeAt(0)] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' || type == 'E') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                                                                     (first && next == '-'.charCodeAt(0)))) ||
                   (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                     next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                     next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0)))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
            case 'e':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                (HEAPF64[(tempDoublePtr)>>3]=parseFloat(text),HEAP32[((argPtr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((argPtr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[((argPtr)+(j))]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[((s)+(index++))]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }


  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}

  var _llvm_memcpy_p0i8_p0i8_i32;

  
  
  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }function _strncasecmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = _tolower(HEAPU8[((px)+(i))]);
        var y = _tolower(HEAPU8[((py)+(i))]);
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      return _strncasecmp(px, py, TOTAL_MEMORY);
    }


  function _stpcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest + i - 1;
    }

  
  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return (tempRet0 = Math.min(Math.floor((ret)/4294967296), 4294967295)>>>0,ret>>>0);
      }
  
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }



  function _select(nfds, readfds, writefds, exceptfds, timeout) {
      // only readfds are supported, not writefds or exceptfds
      // timeout is always 0 - fully async
      assert(!writefds && !exceptfds);
      var ret = 0;
      var l = HEAP32[((readfds)>>2)];
      var h = HEAP32[(((readfds)+(4))>>2)];
      nfds = Math.min(64, nfds); // fd sets have 64 bits
      for (var fd = 0; fd < nfds; fd++) {
        var bit = fd % 32, int = fd < 32 ? l : h;
        if (int & (1 << bit)) {
          // index is in the set, check if it is ready for read
          var info = Sockets.fds[fd];
          if (!info) continue;
          if (info.hasData()) ret++;
        }
      }
      return ret;
    }

  
  function _wait(stat_loc) {
      // pid_t wait(int *stat_loc);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/wait.html
      // Makes no sense in a single-process environment.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }var _waitpid;

  function _accept(fd, addr, addrlen) {
      // TODO: webrtc queued incoming connections, etc.
      // For now, the model is that bind does a connect, and we "accept" that one connection,
      // which has host:port the same as ours. We also return the same socket fd.
      var info = Sockets.fds[fd];
      if (!info) return -1;
      if (addr) {
        setValue(addr + Sockets.sockaddr_in_layout.sin_addr, info.addr, 'i32');
        setValue(addr + Sockets.sockaddr_in_layout.sin_port, info.port, 'i32');
        setValue(addrlen, Sockets.sockaddr_in_layout.__size__, 'i32');
      }
      return fd;
    }

  
  var Sockets={BACKEND_WEBSOCKETS:0,BACKEND_WEBRTC:1,BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,backend:0,nextFd:1,fds:{},sockaddr_in_layout:{__size__:20,sin_family:0,sin_port:4,sin_addr:8,sin_zero:12,sin_zero_b:16},msghdr_layout:{__size__:28,msg_name:0,msg_namelen:4,msg_iov:8,msg_iovlen:12,msg_control:16,msg_controllen:20,msg_flags:24},backends:{0:{connect:function (info) {
            console.log('opening ws://' + info.host + ':' + info.port);
            info.socket = new WebSocket('ws://' + info.host + ':' + info.port, ['binary']);
            info.socket.binaryType = 'arraybuffer';
  
            var i32Temp = new Uint32Array(1);
            var i8Temp = new Uint8Array(i32Temp.buffer);
  
            info.inQueue = [];
            info.hasData = function() { return info.inQueue.length > 0 }
            if (!info.stream) {
              var partialBuffer = null; // in datagram mode, inQueue contains full dgram messages; this buffers incomplete data. Must begin with the beginning of a message
            }
  
            info.socket.onmessage = function(event) {
              assert(typeof event.data !== 'string' && event.data.byteLength); // must get binary data!
              var data = new Uint8Array(event.data); // make a typed array view on the array buffer
              if (info.stream) {
                info.inQueue.push(data);
              } else {
                // we added headers with message sizes, read those to find discrete messages
                if (partialBuffer) {
                  // append to the partial buffer
                  var newBuffer = new Uint8Array(partialBuffer.length + data.length);
                  newBuffer.set(partialBuffer);
                  newBuffer.set(data, partialBuffer.length);
                  // forget the partial buffer and work on data
                  data = newBuffer;
                  partialBuffer = null;
                }
                var currPos = 0;
                while (currPos+4 < data.length) {
                  i8Temp.set(data.subarray(currPos, currPos+4));
                  var currLen = i32Temp[0];
                  assert(currLen > 0);
                  if (currPos + 4 + currLen > data.length) {
                    break; // not enough data has arrived
                  }
                  currPos += 4;
                  info.inQueue.push(data.subarray(currPos, currPos+currLen));
                  currPos += currLen;
                }
                // If data remains, buffer it
                if (currPos < data.length) {
                  partialBuffer = data.subarray(currPos);
                }
              }
            }
            function send(data) {
              // TODO: if browser accepts views, can optimize this
              // ok to use the underlying buffer, we created data and know that the buffer starts at the beginning
              info.socket.send(data.buffer);
            }
            var outQueue = [];
            var intervalling = false, interval;
            function trySend() {
              if (info.socket.readyState != info.socket.OPEN) {
                if (!intervalling) {
                  intervalling = true;
                  console.log('waiting for socket in order to send');
                  interval = setInterval(trySend, 100);
                }
                return;
              }
              for (var i = 0; i < outQueue.length; i++) {
                send(outQueue[i]);
              }
              outQueue.length = 0;
              if (intervalling) {
                intervalling = false;
                clearInterval(interval);
              }
            }
            info.sender = function(data) {
              if (!info.stream) {
                // add a header with the message size
                var header = new Uint8Array(4);
                i32Temp[0] = data.length;
                header.set(i8Temp);
                outQueue.push(header);
              }
              outQueue.push(new Uint8Array(data));
              trySend();
            };
          }},1:{}}};
  
  function __inet_ntop_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }
  
  
  var ___hostent_struct_layout={__size__:20,h_name:0,h_aliases:4,h_addrtype:8,h_length:12,h_addr_list:16};function _gethostbyname(name) {
      name = Pointer_stringify(name);
        if (!_gethostbyname.id) {
          _gethostbyname.id = 1;
          _gethostbyname.table = {};
        }
      var id = _gethostbyname.id++;
      assert(id < 65535);
      var fakeAddr = 172 | (29 << 8) | ((id & 0xff) << 16) | ((id & 0xff00) << 24);
      _gethostbyname.table[id] = name;
      // generate hostent
      var ret = _malloc(___hostent_struct_layout.__size__);
      var nameBuf = _malloc(name.length+1);
      writeStringToMemory(name, nameBuf);
      setValue(ret+___hostent_struct_layout.h_name, nameBuf, 'i8*');
      var aliasesBuf = _malloc(4);
      setValue(aliasesBuf, 0, 'i8*');
      setValue(ret+___hostent_struct_layout.h_aliases, aliasesBuf, 'i8**');
      setValue(ret+___hostent_struct_layout.h_addrtype, 1, 'i32');
      setValue(ret+___hostent_struct_layout.h_length, 4, 'i32');
      var addrListBuf = _malloc(12);
      setValue(addrListBuf, addrListBuf+8, 'i32*');
      setValue(addrListBuf+4, 0, 'i32*');
      setValue(addrListBuf+8, fakeAddr, 'i32');
      setValue(ret+___hostent_struct_layout.h_addr_list, addrListBuf, 'i8**');
      return ret;
    }function _connect(fd, addr, addrlen) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      info.connected = true;
      info.addr = getValue(addr + Sockets.sockaddr_in_layout.sin_addr, 'i32');
      info.port = _htons(getValue(addr + Sockets.sockaddr_in_layout.sin_port, 'i16'));
      info.host = __inet_ntop_raw(info.addr);
      // Support 'fake' ips from gethostbyname
      var parts = info.host.split('.');
      if (parts[0] == '172' && parts[1] == '29') {
        var low = Number(parts[2]);
        var high = Number(parts[3]);
        info.host = _gethostbyname.table[low + 0xff*high];
        assert(info.host, 'problem translating fake ip ' + parts);
      }
      Sockets.backends[Sockets.backend].connect(info);
      return 0;
    }

  function _sendmsg(fd, msg, flags) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      // if we are not connected, use the address info in the message
      if (!info.connected) {
        var name = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_name))>>2)];
        assert(name, 'sendmsg on non-connected socket, and no name/address in the message');
        _connect(fd, name, HEAP32[(((msg)+(Sockets.msghdr_layout.msg_namelen))>>2)]);
      }
      var iov = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iov))>>2)];
      var num = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iovlen))>>2)];
      var totalSize = 0;
      for (var i = 0; i < num; i++) {
        totalSize += HEAP32[(((iov)+(8*i + 4))>>2)];
      }
      var buffer = new Uint8Array(totalSize);
      var ret = 0;
      for (var i = 0; i < num; i++) {
        var currNum = HEAP32[(((iov)+(8*i + 4))>>2)];
        if (!currNum) continue;
        var currBuf = HEAP32[(((iov)+(8*i))>>2)];
        buffer.set(HEAPU8.subarray(currBuf, currBuf+currNum), ret);
        ret += currNum;
      }
      info.sender(buffer); // send all the iovs as a single message
      return ret;
    }

  
  function _recv(fd, buf, len, flags) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EAGAIN); // no data, and all sockets are nonblocking, so this is the right behavior
        return -1;
      }
      var buffer = info.inQueue.shift();
      if (len < buffer.length) {
        if (info.stream) {
          // This is tcp (reliable), so if not all was read, keep it
          info.inQueue.unshift(buffer.subarray(len));
        }
        buffer = buffer.subarray(0, len);
      }
      HEAPU8.set(buffer, buf);
      return buffer.length;
    }function _recvmsg(fd, msg, flags) {
      var info = Sockets.fds[fd];
      if (!info) return -1;
      // if we are not connected, use the address info in the message
      if (!info.connected) {
        var name = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_name))>>2)];
        assert(name, 'sendmsg on non-connected socket, and no name/address in the message');
        _connect(fd, name, HEAP32[(((msg)+(Sockets.msghdr_layout.msg_namelen))>>2)]);
      }
      if (!info.hasData()) {
        ___setErrNo(ERRNO_CODES.EWOULDBLOCK);
        return -1;
      }
      var buffer = info.inQueue.shift();
      var bytes = buffer.length;
      // write source
      var name = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_name))>>2)];
      HEAP32[(((name)+(Sockets.sockaddr_in_layout.sin_addr))>>2)]=info.addr;
      HEAP16[(((name)+(Sockets.sockaddr_in_layout.sin_port))>>1)]=_htons(info.port);
      // write data
      var ret = bytes;
      var iov = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iov))>>2)];
      var num = HEAP32[(((msg)+(Sockets.msghdr_layout.msg_iovlen))>>2)];
      var bufferPos = 0;
      for (var i = 0; i < num && bytes > 0; i++) {
        var currNum = HEAP32[(((iov)+(8*i + 4))>>2)];
        if (!currNum) continue;
        currNum = Math.min(currNum, bytes); // XXX what should happen when we partially fill a buffer..?
        bytes -= currNum;
        var currBuf = HEAP32[(((iov)+(8*i))>>2)];
        HEAPU8.set(buffer.subarray(bufferPos, bufferPos + currNum), currBuf);
        bufferPos += currNum;
      }
      if (info.stream) {
        // This is tcp (reliable), so if not all was read, keep it
        if (bufferPos < bytes) {
          info.inQueue.unshift(buffer.subarray(bufferPos));
        }
      }
      return ret;
    }

  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      var target = FS.findObject(path);
      if (target === null) return -1;
      if ((amode & 2 && !target.write) ||  // W_OK.
          ((amode & 1 || amode & 4) && !target.read)) {  // X_OK, R_OK.
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        return 0;
      }
    }

  
  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }

  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }

  var _vfprintf;

  function _munmap(start, num) {
      if (!_mmap.mappings) _mmap.mappings = {};
      // TODO: support unmmap'ing parts of allocations
      var info = _mmap.mappings[start];
      if (!info) return 0;
      if (num == info.num) {
        _mmap.mappings[start] = null;
        _free(info.malloc);
      }
      return 0;
    }

  
  function _getgid() {
      // gid_t getgid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getgid.html
      // We have just one process/group/user, all with ID 0.
      return 0;
    }var _getuid;

  var _geteuid;

  
  function _setgid(gid) {
      // int setgid(gid_t gid);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setgid.html
      // We have just one process/group/user, so it makes no sense to set IDs.
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }var _setuid;
var _mlock; // stub for _mlock

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _mmap(start, num, prot, flags, stream, offset) {
      /* FIXME: Since mmap is normally implemented at the kernel level,
       * this implementation simply uses malloc underneath the call to
       * mmap.
       */
      if (!_mmap.mappings) _mmap.mappings = {};
      if (stream == -1) {
        var ptr = _malloc(num);
      } else {
        var info = FS.streams[stream];
        if (!info) return -1;
        var contents = info.object.contents;
        contents = Array.prototype.slice.call(contents, offset, offset+num);
        ptr = allocate(contents, 'i8', ALLOC_NORMAL);
      }
      // align to page size
      var ret = ptr;
      if (ptr % PAGE_SIZE != 0) {
        var old = ptr;
        ptr = _malloc(num + PAGE_SIZE);
        ret = alignMemoryPage(ptr);
        _memcpy(ret, old, num);
        _free(old);
      }
      if (stream == -1) {
        _memset(ret, 0, num);
      }
      _mmap.mappings[ret] = { malloc: ptr, num: num };
      return ret;
    }

  function _isxdigit(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'f'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'F'.charCodeAt(0));
    }

  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }



  
  function _truncate(path, length) {
      // int truncate(const char *path, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/truncate.html
      // NOTE: The path argument may be a string, to simplify ftruncate().
      if (length < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (typeof path !== 'string') path = Pointer_stringify(path);
        var target = FS.findObject(path);
        if (target === null) return -1;
        if (target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        } else if (target.isDevice) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else if (!target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        } else {
          var contents = target.contents;
          if (length < contents.length) contents.length = length;
          else while (length > contents.length) contents.push(0);
          target.timestamp = Date.now();
          return 0;
        }
      }
    }function _ftruncate(fildes, length) {
      // int ftruncate(int fildes, off_t length);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftruncate.html
      if (FS.streams[fildes] && FS.streams[fildes].isWrite) {
        return _truncate(FS.streams[fildes].path, length);
      } else if (FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  var _getpid;

  function _gettimeofday(ptr) {
      // %struct.timeval = type { i32, i32 }
      
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  
  var ___rusage_struct_layout={__size__:72,ru_utime:0,ru_stime:8,ru_maxrss:16,ru_ixrss:20,ru_idrss:24,ru_isrss:28,ru_minflt:32,ru_majflt:36,ru_nswap:40,ru_inblock:44,ru_oublock:48,ru_msgsnd:52,ru_msgrcv:56,ru_nsignals:60,ru_nvcsw:64,ru_nivcsw:68};function _getrusage(resource, rlp) {
      // %struct.timeval = type { i32, i32 }
      var timeval = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
  
      // int getrusage(int resource, struct rusage *rlp);
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_utime+timeval[0]))>>2)]=1
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_utime+timeval[1]))>>2)]=2
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_stime+timeval[0]))>>2)]=3
      HEAP32[(((rlp)+(___rusage_struct_layout.ru_stime+timeval[1]))>>2)]=4
      return 0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000/1000));
    }

  
  var ___flock_struct_layout={__size__:16,l_type:0,l_whence:2,l_start:4,l_len:8,l_pid:12,l_xxx:14};function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      if (!FS.streams[fildes]) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      var stream = FS.streams[fildes];
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream = {};
          for (var member in stream) {
            newStream[member] = stream[member];
          }
          arg = dup2 ? arg : Math.max(arg, FS.streams.length); // dup2 wants exactly arg; fcntl wants a free descriptor >= arg
          for (var i = FS.streams.length; i < arg; i++) {
            FS.streams[i] = null; // Keep dense
          }
          FS.streams[arg] = newStream;
          return arg;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          var flags = 0;
          if (stream.isRead && stream.isWrite) flags = 2;
          else if (!stream.isRead && stream.isWrite) flags = 1;
          else if (stream.isRead && !stream.isWrite) flags = 0;
          if (stream.isAppend) flags |= 8;
          // Synchronization and blocking flags are irrelevant to us.
          return flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.isAppend = Boolean(arg | 8);
          // Synchronization and blocking flags are irrelevant to us.
          return 0;
        case 7:
        case 20:
          var arg = HEAP32[((varargs)>>2)];
          var offset = ___flock_struct_layout.l_type;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=3
          return 0;
        case 8:
        case 9:
        case 21:
        case 22:
          // Pretend that the locking is successful.
          return 0;
        case 6:
        case 5:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }

  function _srand(seed) {}

  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }

  var _getppid;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      return Number(FS.streams[stream] && FS.streams[stream].error);
    }


  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  function ___gxx_personality_v0() {
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return (tempRet0 = typeArray[i],thrown);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return (tempRet0 = throwntype,thrown);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";;
    }

  function ___cxa_call_unexpected(exception) {
      ABORT = true;
      throw exception;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        Runtime.dynCall('vi', destructor, [ptr]);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }

  function __ZNSt9exceptionD2Ev(){}

  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return (tempRet0 = x+y > 4294967295,(x+y)>>>0);
    }

  function _llvm_uadd_with_overflow_i64(xl, xh, yl, yh) {
      i64Math.add(xl, xh, yl, yh);
      return (tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],tempRet1 = 0,HEAP32[((tempDoublePtr)>>2)]);
      // XXX Need to hack support for second param in long.js
    }

  var _llvm_memset_p0i8_i64;





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,_camellia_decrypt,0,_dsa_get_nbits,0,_crc24rfc2440_final,0,_ecc_get_nbits,0,_sha1_read,0,_sha1_write,0,_ac_ssa_dencode_prepare_pkcs_v1_5,0,_gcry_cipher_lookup_func_oid,0,_run_selftests907,0,_sha384_init,0,_elg_sign,0,_crc32_final,0,_msgops_callback_handle_msg_event,0,_rijndael_setkey,0,_rsa_verify,0,_run_selftests773,0,_serpent_decrypt,0,_md5_init,0,_msgops_callback_create_instag,0,_decrypt_block,0,__ZNKSt9bad_alloc4whatEv,0,_ecc_verify,0,_eme_pkcs_v1_5_encode,0,_md4_write,0,_decrypt_block1584,0,_md5_write,0,_compute_keygrip,0,_dummy_decrypt,0,_ecc_get_param,0,_whirlpool_read,0,_whirlpool_final,0,_elg_generate_ext,0,_gcry_md_lookup_func_oid,0,_fprintf,0,_tiger2_init,0,_rsa_encrypt,0,_dsa_sign,0,_md4_final,0,_serpent_encrypt,0,_do_tripledes_encrypt,0,_run_selftests1659,0,_do_decrypt,0,_sha256_final,0,_entropy_collect_cb,0,_dummy_setkey,0,_ecc_get_curve,0,_elg_get_nbits,0,_ecc_check_secret_key,0,_msgops_callback_is_logged_in,0,_sha256_write,0,_seed_setkey,0,_do_des_decrypt,0,__gcry_aes_cfb_enc,0,_tiger_write,0,_ecc_encrypt_raw,0,_ecc_generate_ext,0,_elg_verify,0,_gcry_pk_lookup_func_name,0,__gcry_aes_ctr_enc,0,_rmd160_write,0,_tiger_init,0,_sha512_read,0,_rmd160_read,0,_whirlpool_write,0,_rsa_sign,0,_sha256_init,0,__gcry_aes_cbc_dec,0,_dummy_encrypt_stream,0,_do_tripledes_setkey,0,__ZNSt9bad_allocD2Ev,0,_crc24rfc2440_write,0,__gcry_aes_cfb_dec,0,_eme_pkcs_v1_5_decode,0,_do_tripledes_decrypt,0,_ecc_get_param_sexp,0,_rmd160_final,0,_dsa_check_secret_key,0,__gcry_log_info_with_dummy_fp,0,_crc24rfc2440_init,0,_do_encrypt,0,_msgops_callback_account_name,0,__ZNSt20bad_array_new_lengthC2Ev,0,_ecc_generate,0,_otrl_mem_free,0,_otrl_mem_malloc,0,_tiger_final,0,__ZNKSt20bad_array_new_length4whatEv,0,_rsa_check_secret_key,0,_rsa_generate,0,_run_selftests1772,0,_dummy_check_secret_key,0,_run_selftests962,0,_add_randomness,0,_twofish_encrypt,0,_otrl_mem_is_secure,0,_rsa_decrypt,0,_gcry_cipher_lookup_func_name,0,_go_encrypted,0,_msgops_callback_still_secure,0,_msgops_callback_policy,0,_dummy_encrypt_block,0,_md5_final,0,_msgops_callback_inject_message,0,_do_setkey,0,_msgops_callback_gone_secure,0,_msgops_callback_otr_error_message_free,0,_check_exponent,0,__ZNSt9bad_allocC2Ev,0,_rsa_get_nbits,0,_crc32_read,0,_md5_read,0,_run_selftests934,0,_encrypt_block1583,0,_tiger1_init,0,_compute_keygrip1773,0,_dummy_encrypt,0,_crc32_init,0,_sha512_final,0,_msgops_callback_otr_error_message,0,_otrl_mem_realloc,0,_ecc_decrypt_raw,0,_reporter,0,_encrypt_stream,0,_crc32_write,0,_dummy_generate,0,_sha1_final,0,_twofish_decrypt,0,_msgops_callback_gone_insecure,0,_emsa_pkcs_v1_5_encode,0,_tiger_read,0,_msgops_callback_write_fingerprints,0,_rsa_generate_ext,0,_seed_encrypt,0,_msgops_callback_max_message_size,0,__gcry_rmd160_init,0,_pss_verify_cmp,0,_sha512_write,0,_sha224_init,0,_msgops_callback_update_context_list,0,_rijndael_decrypt,0,__ZNSt20bad_array_new_lengthD0Ev,0,_sha1_init,0,__gcry_rndlinux_gather_random,0,_ecc_sign,0,_dsa_generate_ext,0,__ZNSt9bad_allocD0Ev,0,_gcry_md_lookup_func_name,0,_camellia_encrypt,0,_run_selftests847,0,_dummy_verify,0,_crc32rfc1510_final,0,_arcfour_setkey,0,_bf_setkey,0,_dummy_sign,0,_do_des_setkey,0,_do_tripledes_set_extra_info,0,_encrypt_block,0,_seed_decrypt,0,_twofish_setkey,0,_whirlpool_init,0,_sha256_read,0,_run_selftests,0,_elg_encrypt,0,_msgops_callback_account_name_free,0,_elg_decrypt,0,_elg_generate,0,_ac_es_dencode_prepare_pkcs_v1_5,0,_msgops_callback_handle_smp_event,0,_serpent_setkey,0,_msgops_callback_new_fingerprint,0,_dsa_verify,0,_elg_check_secret_key,0,_dsa_generate,0,_rijndael_encrypt,0,_sha512_init,0,_dummy_decrypt_stream,0,_msgops_callback_create_privkey,0,_md4_init,0,_do_des_encrypt,0,_camellia_setkey,0,_msgops_callback_received_symkey,0,_crc32rfc1510_init,0,__gcry_aes_cbc_enc,0,_dummy_get_nbits,0,_cast_setkey,0,_dummy_decrypt_block,0,_md4_read,0];

function _msgops_callback_account_name($opdata, $account, $protocol) {
  return $account;
}
function _msgops_callback_account_name_free($opdata, $account_name) {
  return;
}
function _msgops_callback_otr_error_message($opdata, $context, $err_code) {
  if (($err_code | 0) == 2) {
    var $_0 = 478288;
  } else if (($err_code | 0) == 3) {
    var $_0 = 477916;
  } else if (($err_code | 0) == 4) {
    var $_0 = 477624;
  } else if (($err_code | 0) == 1) {
    var $_0 = 478596;
  } else {
    var $_0 = 470820;
  }
  var $_0;
  return $_0;
}
function _msgops_callback_otr_error_message_free($opdata, $err_msg) {
  return;
}
function _msgops_callback_resent_msg_prefix($opdata, $context) {
  return 477332;
}
function _msgops_callback_resent_msg_prefix_free($opdata, $prefix) {
  return;
}
function _jsapi_userstate_get_privkey_root($us) {
  return HEAP32[$us + 4 >> 2];
}
Module["_jsapi_userstate_get_privkey_root"] = _jsapi_userstate_get_privkey_root;
function _jsapi_privkey_get_next($p) {
  return HEAP32[$p >> 2];
}
Module["_jsapi_privkey_get_next"] = _jsapi_privkey_get_next;
function _jsapi_privkey_get_accountname($p) {
  return HEAP32[$p + 8 >> 2];
}
Module["_jsapi_privkey_get_accountname"] = _jsapi_privkey_get_accountname;
function _jsapi_privkey_get_protocol($p) {
  return HEAP32[$p + 12 >> 2];
}
Module["_jsapi_privkey_get_protocol"] = _jsapi_privkey_get_protocol;
function _jsapi_conncontext_get_protocol($ctx) {
  return HEAP32[$ctx + 20 >> 2];
}
Module["_jsapi_conncontext_get_protocol"] = _jsapi_conncontext_get_protocol;
function _jsapi_conncontext_get_username($ctx) {
  return HEAP32[$ctx + 12 >> 2];
}
Module["_jsapi_conncontext_get_username"] = _jsapi_conncontext_get_username;
function _jsapi_conncontext_get_accountname($ctx) {
  return HEAP32[$ctx + 16 >> 2];
}
Module["_jsapi_conncontext_get_accountname"] = _jsapi_conncontext_get_accountname;
function _jsapi_conncontext_get_msgstate($ctx) {
  return HEAP32[$ctx + 48 >> 2];
}
Module["_jsapi_conncontext_get_msgstate"] = _jsapi_conncontext_get_msgstate;
function _jsapi_conncontext_get_protocol_version($ctx) {
  return HEAP32[$ctx + 280 >> 2];
}
Module["_jsapi_conncontext_get_protocol_version"] = _jsapi_conncontext_get_protocol_version;
function _jsapi_conncontext_get_smstate($ctx) {
  return HEAP32[HEAP32[$ctx + 296 >> 2] + 52 >> 2];
}
Module["_jsapi_conncontext_get_smstate"] = _jsapi_conncontext_get_smstate;
function _jsapi_conncontext_get_trust($ctx) {
  var $2 = HEAP32[$ctx + 248 >> 2];
  if (($2 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = HEAP32[$2 + 16 >> 2];
  var $_0;
  return $_0;
}
Module["_jsapi_conncontext_get_trust"] = _jsapi_conncontext_get_trust;
function _jsapi_conncontext_get_their_instance($ctx) {
  return HEAP32[$ctx + 44 >> 2];
}
Module["_jsapi_conncontext_get_their_instance"] = _jsapi_conncontext_get_their_instance;
function _jsapi_conncontext_get_our_instance($ctx) {
  return HEAP32[$ctx + 40 >> 2];
}
Module["_jsapi_conncontext_get_our_instance"] = _jsapi_conncontext_get_our_instance;
function _jsapi_conncontext_get_master($ctx) {
  return HEAP32[$ctx + 24 >> 2];
}
Module["_jsapi_conncontext_get_master"] = _jsapi_conncontext_get_master;
function _jsapi_instag_get_tag($instag) {
  return HEAP32[$instag + 16 >> 2];
}
Module["_jsapi_instag_get_tag"] = _jsapi_instag_get_tag;
function _jsapi_privkey_write_trusted_fingerprints($us, $filename) {
  var $1 = _fopen($filename, 481856);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    var $8 = _jsapi_privkey_write_trusted_fingerprints_FILEp($us, $1);
    _fclose($1);
    var $_0 = $8;
    var $_0;
    return $_0;
  }
}
Module["_jsapi_privkey_write_trusted_fingerprints"] = _jsapi_privkey_write_trusted_fingerprints;
function _jsapi_privkey_write_trusted_fingerprints_FILEp($us, $storef) {
  var __stackBase__ = STACKTOP;
  if (($storef | 0) == 0) {
    var $_0 = _gcry_error(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $context_02 = HEAP32[$us >> 2];
  L42 : do {
    if (($context_02 | 0) != 0) {
      var $context_03 = $context_02;
      while (1) {
        var $context_03;
        L45 : do {
          if ((HEAP32[$context_03 + 44 >> 2] | 0) == 0) {
            var $12 = $context_03 + 12 | 0;
            var $13 = $context_03 + 16 | 0;
            var $14 = $context_03 + 20 | 0;
            var $fprint_0_in = $context_03 + 228 | 0;
            while (1) {
              var $fprint_0_in;
              var $fprint_0 = HEAP32[$fprint_0_in >> 2];
              if (($fprint_0 | 0) == 0) {
                break L45;
              }
              var $18 = $fprint_0 + 16 | 0;
              if ((HEAP32[$18 >> 2] | 0) == 0) {
                break L45;
              }
              var $23 = HEAP32[$13 >> 2];
              var $24 = HEAP32[$14 >> 2];
              _fprintf($storef, 477336, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$12 >> 2], HEAP32[tempInt + 4 >> 2] = $23, HEAP32[tempInt + 8 >> 2] = $24, tempInt));
              var $26 = $fprint_0 + 8 | 0;
              var $i_01 = 0;
              while (1) {
                var $i_01;
                _fprintf($storef, 474436, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[HEAP32[$26 >> 2] + $i_01 | 0], tempInt));
                var $33 = $i_01 + 1 | 0;
                if (($33 | 0) == 20) {
                  break;
                } else {
                  var $i_01 = $33;
                }
              }
              var $35 = HEAP32[$18 >> 2];
              _fprintf($storef, 472204, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = ($35 | 0) == 0 ? 470820 : $35, tempInt));
              var $fprint_0_in = $fprint_0 | 0;
            }
          }
        } while (0);
        var $context_0 = HEAP32[$context_03 >> 2];
        if (($context_0 | 0) == 0) {
          break L42;
        } else {
          var $context_03 = $context_0;
        }
      }
    }
  } while (0);
  var $_0 = _gcry_error(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_jsapi_privkey_write_trusted_fingerprints_FILEp["X"] = 1;
function _gcry_error($code) {
  return _gcry_err_make($code);
}
function _jsapi_sexp_write($privf, $sexp) {
  var $1 = _gcry_sexp_sprint($sexp, 3, 0, 0);
  var $2 = _malloc($1);
  if (($2 | 0) != 0 | ($1 | 0) == 0) {
    _gcry_sexp_sprint($sexp, 3, $2, $1);
    _fputs($2, $privf);
    _free($2);
    var $_0 = _gcry_error(0);
    var $_0;
    return $_0;
  } else {
    var $_0 = _gcry_error(32854);
    var $_0;
    return $_0;
  }
}
function _jsapi_account_write($privf, $accountname, $protocol, $privkey) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $names = __stackBase__;
  var $protos = __stackBase__ + 4;
  _fwrite(467876, 10, 1, $privf);
  var $2 = _gcry_sexp_build($names, 0, 465876, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $accountname, tempInt));
  do {
    if (($2 | 0) == 0) {
      var $6 = _jsapi_sexp_write($privf, HEAP32[$names >> 2]);
      _gcry_sexp_release(HEAP32[$names >> 2]);
      if (($6 | 0) != 0) {
        var $err_3 = $6;
        break;
      }
      var $10 = _gcry_sexp_build($protos, 0, 490708, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $protocol, tempInt));
      if (($10 | 0) != 0) {
        var $err_3 = $10;
        break;
      }
      var $13 = _jsapi_sexp_write($privf, HEAP32[$protos >> 2]);
      _gcry_sexp_release(HEAP32[$protos >> 2]);
      if (($13 | 0) != 0) {
        var $err_3 = $13;
        break;
      }
      var $err_3 = _jsapi_sexp_write($privf, $privkey);
    } else {
      var $err_3 = $2;
    }
  } while (0);
  var $err_3;
  _fwrite(489920, 3, 1, $privf);
  STACKTOP = __stackBase__;
  return $err_3;
}
function _jsapi_userstate_write_to_file($us, $filename) {
  var $p_02$s2;
  var $1 = _umask(63);
  var $2 = _fopen($filename, 488172);
  if (($2 | 0) == 0) {
    _umask($1);
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  }
  _fwrite(487428, 10, 1, $2);
  var $p_01 = HEAP32[$us + 4 >> 2];
  L76 : do {
    if (($p_01 | 0) != 0) {
      var $p_02 = $p_01, $p_02$s2 = $p_02 >> 2;
      while (1) {
        var $p_02;
        _jsapi_account_write($2, HEAP32[$p_02$s2 + 2], HEAP32[$p_02$s2 + 3], HEAP32[$p_02$s2 + 5]);
        var $p_0 = HEAP32[$p_02$s2];
        if (($p_0 | 0) == 0) {
          break L76;
        } else {
          var $p_02 = $p_0, $p_02$s2 = $p_02 >> 2;
        }
      }
    }
  } while (0);
  _fwrite(486596, 2, 1, $2);
  _fseek($2, 0, 0);
  _fclose($2);
  _umask($1);
  var $_0 = 0;
  var $_0;
  return $_0;
}
Module["_jsapi_userstate_write_to_file"] = _jsapi_userstate_write_to_file;
function _jsapi_privkey_delete($us, $filename, $accountname, $protocol) {
  var $1 = _otrl_privkey_find($us, $accountname, $protocol);
  if (($1 | 0) == 0) {
    var $err_0 = 0;
    var $err_0;
    return $err_0;
  }
  _otrl_privkey_forget($1);
  var $err_0 = _jsapi_userstate_write_to_file($us, $filename);
  var $err_0;
  return $err_0;
}
Module["_jsapi_privkey_delete"] = _jsapi_privkey_delete;
function _jsapi_privkey_get_dsa_token($keyToExport, $token, $buffer, $buflen, $nbytes) {
  var $3 = _gcry_sexp_find_token(HEAP32[$keyToExport + 20 >> 2], 485716, 0);
  if (($3 | 0) == 0) {
    var $_0 = _gcry_error(54);
    var $_0;
    return $_0;
  }
  var $8 = _gcry_sexp_find_token($3, $token, 0);
  _gcry_sexp_release($3);
  if (($8 | 0) == 0) {
    var $_0 = _gcry_error(54);
    var $_0;
    return $_0;
  }
  var $13 = _gcry_sexp_nth_mpi($8, 1, 5);
  _gcry_sexp_release($8);
  if (($13 | 0) == 0) {
    var $_0 = _gcry_error(54);
    var $_0;
    return $_0;
  } else {
    var $18 = _gcry_mpi_print(4, $buffer, $buflen, $nbytes, $13);
    _gcry_mpi_release($13);
    var $_0 = $18;
    var $_0;
    return $_0;
  }
}
Module["_jsapi_privkey_get_dsa_token"] = _jsapi_privkey_get_dsa_token;
function _jsapi_make_pubkey($pubbufp, $publenp, $privkey) {
  var $ny$s2;
  var $ng$s2;
  var $nq$s2;
  var $np$s2;
  var $publenp$s2 = $publenp >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $np = __stackBase__, $np$s2 = $np >> 2;
  var $nq = __stackBase__ + 4, $nq$s2 = $nq >> 2;
  var $ng = __stackBase__ + 8, $ng$s2 = $ng >> 2;
  var $ny = __stackBase__ + 12, $ny$s2 = $ny >> 2;
  HEAP32[$pubbufp >> 2] = 0;
  HEAP32[$publenp$s2] = 0;
  var $1 = _gcry_sexp_find_token($privkey, 485716, 0);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error(54);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = _gcry_sexp_find_token($1, 484820, 0);
  var $7 = _gcry_sexp_find_token($1, 484028, 0);
  var $8 = _gcry_sexp_find_token($1, 483064, 0);
  var $9 = _gcry_sexp_find_token($1, 482544, 0);
  _gcry_sexp_release($1);
  if (($6 | 0) == 0 | ($7 | 0) == 0 | ($8 | 0) == 0 | ($9 | 0) == 0) {
    _gcry_sexp_release($6);
    _gcry_sexp_release($7);
    _gcry_sexp_release($8);
    _gcry_sexp_release($9);
    var $_0 = _gcry_error(54);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $17 = _gcry_sexp_nth_mpi($6, 1, 5);
  _gcry_sexp_release($6);
  var $18 = _gcry_sexp_nth_mpi($7, 1, 5);
  _gcry_sexp_release($7);
  var $19 = _gcry_sexp_nth_mpi($8, 1, 5);
  _gcry_sexp_release($8);
  var $20 = _gcry_sexp_nth_mpi($9, 1, 5);
  _gcry_sexp_release($9);
  if (($17 | 0) == 0 | ($18 | 0) == 0 | ($19 | 0) == 0 | ($20 | 0) == 0) {
    _gcry_mpi_release($17);
    _gcry_mpi_release($18);
    _gcry_mpi_release($19);
    _gcry_mpi_release($20);
    var $_0 = _gcry_error(54);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$publenp$s2] = 0;
  _gcry_mpi_print(5, 0, 0, $np, $17);
  HEAP32[$publenp$s2] = HEAP32[$np$s2] + HEAP32[$publenp$s2] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, $nq, $18);
  HEAP32[$publenp$s2] = HEAP32[$nq$s2] + HEAP32[$publenp$s2] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, $ng, $19);
  HEAP32[$publenp$s2] = HEAP32[$ng$s2] + HEAP32[$publenp$s2] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, $ny, $20);
  var $47 = HEAP32[$ny$s2] + HEAP32[$publenp$s2] + 4 | 0;
  HEAP32[$publenp$s2] = $47;
  var $48 = _malloc($47);
  HEAP32[$pubbufp >> 2] = $48;
  if (($48 | 0) == 0) {
    _gcry_mpi_release($17);
    _gcry_mpi_release($18);
    _gcry_mpi_release($19);
    _gcry_mpi_release($20);
    var $_0 = _gcry_error(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    var $53 = HEAP32[$publenp$s2];
    HEAP8[$48] = HEAP32[$np$s2] >>> 24 & 255;
    HEAP8[$48 + 1 | 0] = HEAP32[$np$s2] >>> 16 & 255;
    HEAP8[$48 + 2 | 0] = HEAP32[$np$s2] >>> 8 & 255;
    HEAP8[$48 + 3 | 0] = HEAP32[$np$s2] & 255;
    var $69 = $53 - 4 | 0;
    _gcry_mpi_print(5, $48 + 4 | 0, $69, 0, $17);
    var $71 = HEAP32[$np$s2];
    HEAP8[$71 + ($48 + 4) | 0] = HEAP32[$nq$s2] >>> 24 & 255;
    HEAP8[$71 + ($48 + 5) | 0] = HEAP32[$nq$s2] >>> 16 & 255;
    HEAP8[$71 + ($48 + 6) | 0] = HEAP32[$nq$s2] >>> 8 & 255;
    HEAP8[$71 + ($48 + 7) | 0] = HEAP32[$nq$s2] & 255;
    var $_sum4 = $71 + 8 | 0;
    var $89 = $69 - $71 - 4 | 0;
    _gcry_mpi_print(5, $48 + $_sum4 | 0, $89, 0, $18);
    var $91 = HEAP32[$nq$s2];
    var $_sum5 = $91 + $_sum4 | 0;
    var $93 = $89 - $91 | 0;
    HEAP8[$48 + $_sum5 | 0] = HEAP32[$ng$s2] >>> 24 & 255;
    HEAP8[$_sum5 + ($48 + 1) | 0] = HEAP32[$ng$s2] >>> 16 & 255;
    HEAP8[$_sum5 + ($48 + 2) | 0] = HEAP32[$ng$s2] >>> 8 & 255;
    HEAP8[$_sum5 + ($48 + 3) | 0] = HEAP32[$ng$s2] & 255;
    var $_sum9 = $_sum5 + 4 | 0;
    _gcry_mpi_print(5, $48 + $_sum9 | 0, $93 - 4 | 0, 0, $19);
    var $111 = HEAP32[$ng$s2];
    var $_sum10 = $111 + $_sum9 | 0;
    HEAP8[$48 + $_sum10 | 0] = HEAP32[$ny$s2] >>> 24 & 255;
    HEAP8[$_sum10 + ($48 + 1) | 0] = HEAP32[$ny$s2] >>> 16 & 255;
    HEAP8[$_sum10 + ($48 + 2) | 0] = HEAP32[$ny$s2] >>> 8 & 255;
    HEAP8[$_sum10 + ($48 + 3) | 0] = HEAP32[$ny$s2] & 255;
    _gcry_mpi_print(5, $_sum10 + ($48 + 4) | 0, $93 - 8 - $111 | 0, 0, $20);
    _gcry_mpi_release($17);
    _gcry_mpi_release($18);
    _gcry_mpi_release($19);
    _gcry_mpi_release($20);
    var $_0 = _gcry_error(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_jsapi_make_pubkey["X"] = 1;
function _jsapi_userstate_import_privkey($us, $accountname, $protocol, $p, $q, $g, $y, $x) {
  var $allkeys$s2;
  var $tokenlen$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $tokenlen = __stackBase__, $tokenlen$s2 = $tokenlen >> 2;
  var $allkeys = __stackBase__ + 4, $allkeys$s2 = $allkeys >> 2;
  var $1 = _gcry_sexp_build($allkeys, undef, 481744, (tempInt = STACKTOP, STACKTOP = STACKTOP + 28 | 0, HEAP32[tempInt >> 2] = $accountname, HEAP32[tempInt + 4 >> 2] = $protocol, HEAP32[tempInt + 8 >> 2] = $p, HEAP32[tempInt + 12 >> 2] = $q, HEAP32[tempInt + 16 >> 2] = $g, HEAP32[tempInt + 20 >> 2] = $y, HEAP32[tempInt + 24 >> 2] = $x, tempInt));
  if (($1 | 0) != 0) {
    var $_0 = $1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4 = _otrl_privkey_find($us, $accountname, $protocol);
  if (($4 | 0) != 0) {
    _otrl_privkey_forget($4);
  }
  var $9 = _gcry_sexp_nth_data(HEAP32[$allkeys$s2], 0, $tokenlen);
  do {
    if ((HEAP32[$tokenlen$s2] | 0) == 8) {
      if ((_strncmp($9, 481324, 8) | 0) != 0) {
        break;
      }
      var $15 = HEAP32[$allkeys$s2];
      var $16 = $us + 4 | 0;
      var $i_0 = 1;
      while (1) {
        var $i_0;
        if ($i_0 >>> 0 >= _gcry_sexp_length($15) >>> 0) {
          label = 132;
          break;
        }
        var $24 = _gcry_sexp_nth($15, $i_0);
        var $25 = _gcry_sexp_nth_data($24, 0, $tokenlen);
        if ((HEAP32[$tokenlen$s2] | 0) != 7) {
          label = 115;
          break;
        }
        if ((_strncmp($25, 480144, 7) | 0) != 0) {
          label = 115;
          break;
        }
        var $35 = _gcry_sexp_find_token($24, 479764, 0);
        var $36 = _gcry_sexp_find_token($24, 479492, 0);
        var $37 = _gcry_sexp_find_token($24, 478900, 0);
        _gcry_sexp_release($24);
        if (($35 | 0) == 0 | ($36 | 0) == 0 | ($37 | 0) == 0) {
          label = 117;
          break;
        }
        var $45 = _gcry_sexp_nth_data($35, 1, $tokenlen);
        if (($45 | 0) == 0) {
          label = 119;
          break;
        }
        var $53 = _malloc(HEAP32[$tokenlen$s2] + 1 | 0);
        if (($53 | 0) == 0) {
          label = 121;
          break;
        }
        _memmove($53, $45, HEAP32[$tokenlen$s2], 1, 0);
        HEAP8[$53 + HEAP32[$tokenlen$s2] | 0] = 0;
        _gcry_sexp_release($35);
        var $62 = _gcry_sexp_nth_data($36, 1, $tokenlen);
        if (($62 | 0) == 0) {
          label = 123;
          break;
        }
        var $70 = _malloc(HEAP32[$tokenlen$s2] + 1 | 0);
        if (($70 | 0) == 0) {
          label = 125;
          break;
        }
        _memmove($70, $62, HEAP32[$tokenlen$s2], 1, 0);
        HEAP8[$70 + HEAP32[$tokenlen$s2] | 0] = 0;
        _gcry_sexp_release($36);
        var $79 = _malloc(32);
        var $80 = $79;
        if (($79 | 0) == 0) {
          label = 127;
          break;
        }
        HEAP32[$79 + 8 >> 2] = $53;
        HEAP32[$79 + 12 >> 2] = $70;
        HEAP16[$79 + 16 >> 1] = 0;
        var $93 = $79 + 20 | 0;
        HEAP32[$93 >> 2] = $37;
        var $94 = HEAP32[$16 >> 2];
        var $95 = $79;
        HEAP32[$95 >> 2] = $94;
        if (($94 | 0) != 0) {
          HEAP32[$94 + 4 >> 2] = $95;
        }
        HEAP32[$79 + 4 >> 2] = $16;
        HEAP32[$16 >> 2] = $80;
        if ((_jsapi_make_pubkey($79 + 24 | 0, $79 + 28 | 0, HEAP32[$93 >> 2]) | 0) == 0) {
          var $i_0 = $i_0 + 1 | 0;
        } else {
          label = 131;
          break;
        }
      }
      if (label == 115) {
        _gcry_sexp_release($24);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 119) {
        _gcry_sexp_release($35);
        _gcry_sexp_release($36);
        _gcry_sexp_release($37);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 121) {
        _gcry_sexp_release($35);
        _gcry_sexp_release($36);
        _gcry_sexp_release($37);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 117) {
        _gcry_sexp_release($35);
        _gcry_sexp_release($36);
        _gcry_sexp_release($37);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 123) {
        _free($53);
        _gcry_sexp_release($36);
        _gcry_sexp_release($37);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 125) {
        _free($53);
        _gcry_sexp_release($36);
        _gcry_sexp_release($37);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 127) {
        _free($53);
        _free($70);
        _gcry_sexp_release($37);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 131) {
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        _otrl_privkey_forget($80);
        var $_0 = _gcry_error(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 132) {
        _gcry_sexp_release($15);
        var $_0 = _gcry_error(0);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    }
  } while (0);
  _gcry_sexp_release(HEAP32[$allkeys$s2]);
  var $_0 = _gcry_error(54);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
Module["_jsapi_userstate_import_privkey"] = _jsapi_userstate_import_privkey;
_jsapi_userstate_import_privkey["X"] = 1;
function _jsapi_conncontext_get_active_fingerprint($ctx, $human) {
  HEAP8[$human] = 0;
  var $2 = HEAP32[$ctx + 248 >> 2];
  if (($2 | 0) == 0) {
    return;
  }
  _otrl_privkey_hash_to_human($human, HEAP32[$2 + 8 >> 2]);
  return;
}
Module["_jsapi_conncontext_get_active_fingerprint"] = _jsapi_conncontext_get_active_fingerprint;
function _msgops_callback_policy($opdata, $context) {
  return __msgops_callback_policy($opdata, $context);
}
function _msgops_callback_create_privkey($opdata, $accountname, $protocol) {
  __msgops_callback_create_privkey($opdata, $accountname, $protocol);
  return;
}
function _msgops_callback_is_logged_in($opdata, $accountname, $protocol, $recipient) {
  return __msgops_callback_is_logged_in($opdata, $accountname, $protocol, $recipient);
}
function _msgops_callback_inject_message($opdata, $accountname, $protocol, $recipient, $message) {
  __msgops_callback_inject_message($opdata, $accountname, $protocol, $recipient, $message);
  return;
}
function _msgops_callback_update_context_list($opdata) {
  __msgops_callback_update_context_list($opdata);
  return;
}
function _msgops_callback_new_fingerprint($opdata, $us, $accountname, $protocol, $username, $fingerprint) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  var $1 = __stackBase__ | 0;
  _otrl_privkey_hash_to_human($1, $fingerprint);
  __msgops_callback_new_fingerprint($opdata, $us, $accountname, $protocol, $username, $1);
  STACKTOP = __stackBase__;
  return;
}
function _msgops_callback_write_fingerprints($opdata) {
  __msgops_callback_write_fingerprints($opdata);
  return;
}
function _msgops_callback_gone_secure($opdata, $context) {
  __msgops_callback_gone_secure($opdata, $context);
  return;
}
function _msgops_callback_gone_insecure($opdata, $context) {
  __msgops_callback_gone_insecure($opdata, $context);
  return;
}
function _msgops_callback_still_secure($opdata, $context, $is_reply) {
  __msgops_callback_still_secure($opdata, $context, $is_reply);
  return;
}
function _msgops_callback_max_message_size($opdata, $context) {
  return __msgops_callback_max_message_size($opdata, $context);
}
function _msgops_callback_received_symkey($opdata, $context, $use, $usedata, $usedatalen, $symkey) {
  __msgops_callback_received_symkey($opdata, $context, $use, $usedata, $usedatalen, $symkey);
  return;
}
function _msgops_callback_handle_smp_event($opdata, $smp_event, $context, $progress_percent, $question) {
  if (($smp_event | 0) == 5) {
    __msgops_callback_smp_request($opdata, $context, 0);
    return;
  } else if (($smp_event | 0) == 3 | ($smp_event | 0) == 1) {
    __msgops_callback_smp_error($opdata, $context);
    return;
  } else if (($smp_event | 0) == 4) {
    __msgops_callback_smp_request($opdata, $context, $question);
    return;
  } else if (($smp_event | 0) == 2) {
    __msgops_callback_smp_aborted($opdata, $context);
    return;
  } else if (($smp_event | 0) == 7) {
    __msgops_callback_smp_complete($opdata, $context);
    return;
  } else if (($smp_event | 0) == 8) {
    __msgops_callback_smp_failed($opdata, $context);
    return;
  } else {
    return;
  }
}
function _msgops_callback_handle_msg_event($opdata, $msg_event, $context, $message, $err) {
  __msgops_callback_handle_msg_event($opdata, $msg_event, $context, $message, $err);
  return;
}
function _msgops_callback_create_instag($opdata, $accountname, $protocol) {
  __msgops_callback_create_instag($opdata, $accountname, $protocol);
  return;
}
function _msgops_callback_convert_msg($opdata, $context, $convert_type, $dest, $src) {
  __msgops_callback_convert_msg($opdata, $context, $convert_type, $dest, $src);
  return;
}
function _msgops_callback_convert_free($opdata, $context, $dest) {
  __msgops_callback_convert_free($opdata, $context, $dest);
  return;
}
function _msgops_callback_timer_control($opdata, $interval) {
  __msgops_callback_timer_control($opdata, $interval);
  return;
}
function _jsapi_initialise() {
  var __stackBase__ = STACKTOP;
  if ((_gcry_check_version(490752) | 0) == 0) {
    _fwrite(490724, 27, 1, HEAP32[_stderr >> 2]);
    _exit(2);
  }
  _gcry_control(38, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt));
  if ((_otrl_init(4, 0, 0) | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    _exit(1);
  }
}
Module["_jsapi_initialise"] = _jsapi_initialise;
function _gpg_err_make($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function _jsapi_can_start_smp($ctx) {
  return (HEAP32[HEAP32[$ctx + 296 >> 2] + 44 >> 2] | 0) == 0 & 1;
}
Module["_jsapi_can_start_smp"] = _jsapi_can_start_smp;
function _jsapi_messageappops_new() {
  var $1$s2;
  var $1 = _malloc(96), $1$s2 = $1 >> 2;
  HEAP32[$1$s2] = 200;
  HEAP32[$1$s2 + 1] = 354;
  HEAP32[$1$s2 + 2] = 98;
  HEAP32[$1$s2 + 3] = 206;
  HEAP32[$1$s2 + 4] = 278;
  HEAP32[$1$s2 + 5] = 340;
  HEAP32[$1$s2 + 6] = 262;
  HEAP32[$1$s2 + 7] = 210;
  HEAP32[$1$s2 + 8] = 256;
  HEAP32[$1$s2 + 9] = 198;
  HEAP32[$1$s2 + 10] = 268;
  HEAP32[$1$s2 + 12] = 328;
  HEAP32[$1$s2 + 11] = 162;
  HEAP32[$1$s2 + 13] = 362;
  HEAP32[$1$s2 + 14] = 238;
  HEAP32[$1$s2 + 15] = 212;
  HEAP32[$1$s2 + 16] = 0;
  HEAP32[$1$s2 + 17] = 0;
  HEAP32[$1$s2 + 18] = 336;
  HEAP32[$1$s2 + 19] = 26;
  HEAP32[$1$s2 + 20] = 38;
  HEAP32[$1$s2 + 21] = 0;
  HEAP32[$1$s2 + 22] = 0;
  HEAP32[$1$s2 + 23] = 0;
  return $1;
}
Module["_jsapi_messageappops_new"] = _jsapi_messageappops_new;
_jsapi_messageappops_new["X"] = 1;
function _gcry_err_make($code) {
  return _gpg_err_make($code);
}
function _otrl_privkey_hash_to_human($human, $hash) {
  var __stackBase__ = STACKTOP;
  var $word_03 = 0;
  var $p_04 = $human;
  while (1) {
    var $p_04;
    var $word_03;
    var $2 = $word_03 << 2;
    _sprintf($p_04, 477180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$hash + $2 | 0], tempInt));
    _sprintf($p_04 + 2 | 0, 477180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$hash + ($2 | 1) | 0], tempInt));
    _sprintf($p_04 + 4 | 0, 477180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$hash + ($2 | 2) | 0], tempInt));
    _sprintf($p_04 + 6 | 0, 477180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$hash + ($2 | 3) | 0], tempInt));
    HEAP8[$p_04 + 8 | 0] = 32;
    var $26 = $word_03 + 1 | 0;
    if (($26 | 0) == 5) {
      break;
    } else {
      var $word_03 = $26;
      var $p_04 = $p_04 + 9 | 0;
    }
  }
  HEAP8[$human + 44 | 0] = 0;
  STACKTOP = __stackBase__;
  return;
}
function _otrl_privkey_fingerprint($us, $fingerprint, $accountname, $protocol) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $1 = _otrl_privkey_find($us, $accountname, $protocol);
  if (($1 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4 = __stackBase__ | 0;
  _gcry_md_hash_buffer(2, $4, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
  _otrl_privkey_hash_to_human($fingerprint, $4);
  var $_0 = $fingerprint;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
Module["_otrl_privkey_fingerprint"] = _otrl_privkey_fingerprint;
function _otrl_privkey_find($us, $accountname, $protocol) {
  var label = 0;
  if (($accountname | 0) == 0 | ($protocol | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $p_0_in = $us + 4 | 0;
  while (1) {
    var $p_0_in;
    var $p_0 = HEAP32[$p_0_in >> 2];
    if (($p_0 | 0) == 0) {
      var $_0 = 0;
      label = 210;
      break;
    }
    if ((_strcmp(HEAP32[$p_0 + 8 >> 2], $accountname) | 0) == 0) {
      if ((_strcmp(HEAP32[$p_0 + 12 >> 2], $protocol) | 0) == 0) {
        var $_0 = $p_0;
        label = 208;
        break;
      }
    }
    var $p_0_in = $p_0 | 0;
  }
  if (label == 208) {
    var $_0;
    return $_0;
  } else if (label == 210) {
    var $_0;
    return $_0;
  }
}
Module["_otrl_privkey_find"] = _otrl_privkey_find;
function _otrl_privkey_fingerprint_raw($us, $hash, $accountname, $protocol) {
  var $1 = _otrl_privkey_find($us, $accountname, $protocol);
  if (($1 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  _gcry_md_hash_buffer(2, $hash, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
  var $_0 = $hash;
  var $_0;
  return $_0;
}
function _otrl_privkey_read($us, $filename) {
  var $1 = _fopen($filename, 487100);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    var $8 = _otrl_privkey_read_FILEp($us, $1);
    _fclose($1);
    var $_0 = $8;
    var $_0;
    return $_0;
  }
}
Module["_otrl_privkey_read"] = _otrl_privkey_read;
function _otrl_privkey_read_FILEp($us, $privf) {
  var $13$s2;
  var $allkeys$s2;
  var $tokenlen$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  var $st = __stackBase__;
  var $tokenlen = __stackBase__ + 72, $tokenlen$s2 = $tokenlen >> 2;
  var $allkeys = __stackBase__ + 76, $allkeys$s2 = $allkeys >> 2;
  if (($privf | 0) == 0) {
    var $_0 = _gcry_error68(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _otrl_privkey_forget_all($us);
  if ((_fstat(_fileno($privf), $st) | 0) != 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $13$s2 = ($st + 28 | 0) >> 2;
  var $15 = _malloc(HEAP32[$13$s2]);
  var $17 = HEAP32[$13$s2];
  if (($15 | 0) == 0 & ($17 | 0) > 0) {
    var $_0 = _gcry_error68(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((_fread($15, $17, 1, $privf) | 0) != 1) {
    var $27 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    _free($15);
    var $_0 = $27;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $30 = _gcry_sexp_new($allkeys, $15, HEAP32[$13$s2], 0);
  _free($15);
  if (($30 | 0) != 0) {
    var $_0 = $30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $34 = _gcry_sexp_nth_data(HEAP32[$allkeys$s2], 0, $tokenlen);
  do {
    if ((HEAP32[$tokenlen$s2] | 0) == 8) {
      if ((_strncmp($34, 479608, 8) | 0) != 0) {
        break;
      }
      var $40 = $us + 4 | 0;
      var $i_0 = 1;
      while (1) {
        var $i_0;
        var $45 = HEAP32[$allkeys$s2];
        if (($i_0 | 0) >= (_gcry_sexp_length($45) | 0)) {
          label = 255;
          break;
        }
        var $49 = _gcry_sexp_nth($45, $i_0);
        var $50 = _gcry_sexp_nth_data($49, 0, $tokenlen);
        if ((HEAP32[$tokenlen$s2] | 0) != 7) {
          label = 238;
          break;
        }
        if ((_strncmp($50, 476e3, 7) | 0) != 0) {
          label = 238;
          break;
        }
        var $60 = _gcry_sexp_find_token($49, 473196, 0);
        var $61 = _gcry_sexp_find_token($49, 471596, 0);
        var $62 = _gcry_sexp_find_token($49, 470228, 0);
        _gcry_sexp_release($49);
        if (($60 | 0) == 0 | ($61 | 0) == 0 | ($62 | 0) == 0) {
          label = 240;
          break;
        }
        var $70 = _gcry_sexp_nth_data($60, 1, $tokenlen);
        if (($70 | 0) == 0) {
          label = 242;
          break;
        }
        var $78 = _malloc(HEAP32[$tokenlen$s2] + 1 | 0);
        if (($78 | 0) == 0) {
          label = 244;
          break;
        }
        _memmove($78, $70, HEAP32[$tokenlen$s2], 1, 0);
        HEAP8[$78 + HEAP32[$tokenlen$s2] | 0] = 0;
        _gcry_sexp_release($60);
        var $87 = _gcry_sexp_nth_data($61, 1, $tokenlen);
        if (($87 | 0) == 0) {
          label = 246;
          break;
        }
        var $95 = _malloc(HEAP32[$tokenlen$s2] + 1 | 0);
        if (($95 | 0) == 0) {
          label = 248;
          break;
        }
        _memmove($95, $87, HEAP32[$tokenlen$s2], 1, 0);
        HEAP8[$95 + HEAP32[$tokenlen$s2] | 0] = 0;
        _gcry_sexp_release($61);
        var $104 = _malloc(32);
        var $105 = $104;
        if (($104 | 0) == 0) {
          label = 250;
          break;
        }
        HEAP32[$104 + 8 >> 2] = $78;
        HEAP32[$104 + 12 >> 2] = $95;
        HEAP16[$104 + 16 >> 1] = 0;
        var $118 = $104 + 20 | 0;
        HEAP32[$118 >> 2] = $62;
        var $119 = HEAP32[$40 >> 2];
        var $120 = $104;
        HEAP32[$120 >> 2] = $119;
        if (($119 | 0) != 0) {
          HEAP32[$119 + 4 >> 2] = $120;
        }
        HEAP32[$104 + 4 >> 2] = $40;
        HEAP32[$40 >> 2] = $105;
        if ((_make_pubkey($104 + 24 | 0, $104 + 28 | 0, HEAP32[$118 >> 2]) | 0) == 0) {
          var $i_0 = $i_0 + 1 | 0;
        } else {
          label = 254;
          break;
        }
      }
      if (label == 248) {
        _free($78);
        _gcry_sexp_release($61);
        _gcry_sexp_release($62);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error68(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 255) {
        _gcry_sexp_release($45);
        var $_0 = _gcry_error68(0);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 250) {
        _free($78);
        _free($95);
        _gcry_sexp_release($62);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error68(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 254) {
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        _otrl_privkey_forget($105);
        var $_0 = _gcry_error68(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 240) {
        _gcry_sexp_release($60);
        _gcry_sexp_release($61);
        _gcry_sexp_release($62);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error68(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 244) {
        _gcry_sexp_release($60);
        _gcry_sexp_release($61);
        _gcry_sexp_release($62);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error68(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 246) {
        _free($78);
        _gcry_sexp_release($61);
        _gcry_sexp_release($62);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error68(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 242) {
        _gcry_sexp_release($60);
        _gcry_sexp_release($61);
        _gcry_sexp_release($62);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error68(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 238) {
        _gcry_sexp_release($49);
        _gcry_sexp_release(HEAP32[$allkeys$s2]);
        var $_0 = _gcry_error68(54);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    }
  } while (0);
  _gcry_sexp_release(HEAP32[$allkeys$s2]);
  var $_0 = _gcry_error68(54);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_privkey_read_FILEp["X"] = 1;
function _gcry_error68($code) {
  return _gcry_err_make71($code);
}
function _otrl_privkey_forget_all($us) {
  var $1 = $us + 4 | 0;
  var $2 = HEAP32[$1 >> 2];
  if (($2 | 0) == 0) {
    return;
  } else {
    var $4 = $2;
  }
  while (1) {
    var $4;
    _otrl_privkey_forget($4);
    var $5 = HEAP32[$1 >> 2];
    if (($5 | 0) == 0) {
      break;
    } else {
      var $4 = $5;
    }
  }
  return;
}
Module["_otrl_privkey_forget_all"] = _otrl_privkey_forget_all;
function _make_pubkey($pubbufp, $publenp, $privkey) {
  var $ny$s2;
  var $ng$s2;
  var $nq$s2;
  var $np$s2;
  var $publenp$s2 = $publenp >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $np = __stackBase__, $np$s2 = $np >> 2;
  var $nq = __stackBase__ + 4, $nq$s2 = $nq >> 2;
  var $ng = __stackBase__ + 8, $ng$s2 = $ng >> 2;
  var $ny = __stackBase__ + 12, $ny$s2 = $ny >> 2;
  HEAP32[$pubbufp >> 2] = 0;
  HEAP32[$publenp$s2] = 0;
  var $1 = _gcry_sexp_find_token($privkey, 484276, 0);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error68(54);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = _gcry_sexp_find_token($1, 478368, 0);
  var $7 = _gcry_sexp_find_token($1, 478044, 0);
  var $8 = _gcry_sexp_find_token($1, 477708, 0);
  var $9 = _gcry_sexp_find_token($1, 477384, 0);
  _gcry_sexp_release($1);
  if (($6 | 0) == 0 | ($7 | 0) == 0 | ($8 | 0) == 0 | ($9 | 0) == 0) {
    _gcry_sexp_release($6);
    _gcry_sexp_release($7);
    _gcry_sexp_release($8);
    _gcry_sexp_release($9);
    var $_0 = _gcry_error68(54);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $17 = _gcry_sexp_nth_mpi($6, 1, 5);
  _gcry_sexp_release($6);
  var $18 = _gcry_sexp_nth_mpi($7, 1, 5);
  _gcry_sexp_release($7);
  var $19 = _gcry_sexp_nth_mpi($8, 1, 5);
  _gcry_sexp_release($8);
  var $20 = _gcry_sexp_nth_mpi($9, 1, 5);
  _gcry_sexp_release($9);
  if (($17 | 0) == 0 | ($18 | 0) == 0 | ($19 | 0) == 0 | ($20 | 0) == 0) {
    _gcry_mpi_release($17);
    _gcry_mpi_release($18);
    _gcry_mpi_release($19);
    _gcry_mpi_release($20);
    var $_0 = _gcry_error68(54);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$publenp$s2] = 0;
  _gcry_mpi_print(5, 0, 0, $np, $17);
  HEAP32[$publenp$s2] = HEAP32[$np$s2] + HEAP32[$publenp$s2] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, $nq, $18);
  HEAP32[$publenp$s2] = HEAP32[$nq$s2] + HEAP32[$publenp$s2] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, $ng, $19);
  HEAP32[$publenp$s2] = HEAP32[$ng$s2] + HEAP32[$publenp$s2] + 4 | 0;
  _gcry_mpi_print(5, 0, 0, $ny, $20);
  var $47 = HEAP32[$ny$s2] + HEAP32[$publenp$s2] + 4 | 0;
  HEAP32[$publenp$s2] = $47;
  var $48 = _malloc($47);
  HEAP32[$pubbufp >> 2] = $48;
  if (($48 | 0) == 0) {
    _gcry_mpi_release($17);
    _gcry_mpi_release($18);
    _gcry_mpi_release($19);
    _gcry_mpi_release($20);
    var $_0 = _gcry_error68(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    var $53 = HEAP32[$publenp$s2];
    HEAP8[$48] = HEAP32[$np$s2] >>> 24 & 255;
    HEAP8[$48 + 1 | 0] = HEAP32[$np$s2] >>> 16 & 255;
    HEAP8[$48 + 2 | 0] = HEAP32[$np$s2] >>> 8 & 255;
    HEAP8[$48 + 3 | 0] = HEAP32[$np$s2] & 255;
    var $69 = $53 - 4 | 0;
    _gcry_mpi_print(5, $48 + 4 | 0, $69, 0, $17);
    var $71 = HEAP32[$np$s2];
    HEAP8[$71 + ($48 + 4) | 0] = HEAP32[$nq$s2] >>> 24 & 255;
    HEAP8[$71 + ($48 + 5) | 0] = HEAP32[$nq$s2] >>> 16 & 255;
    HEAP8[$71 + ($48 + 6) | 0] = HEAP32[$nq$s2] >>> 8 & 255;
    HEAP8[$71 + ($48 + 7) | 0] = HEAP32[$nq$s2] & 255;
    var $_sum4 = $71 + 8 | 0;
    var $89 = $69 - $71 - 4 | 0;
    _gcry_mpi_print(5, $48 + $_sum4 | 0, $89, 0, $18);
    var $91 = HEAP32[$nq$s2];
    var $_sum5 = $91 + $_sum4 | 0;
    var $93 = $89 - $91 | 0;
    HEAP8[$48 + $_sum5 | 0] = HEAP32[$ng$s2] >>> 24 & 255;
    HEAP8[$_sum5 + ($48 + 1) | 0] = HEAP32[$ng$s2] >>> 16 & 255;
    HEAP8[$_sum5 + ($48 + 2) | 0] = HEAP32[$ng$s2] >>> 8 & 255;
    HEAP8[$_sum5 + ($48 + 3) | 0] = HEAP32[$ng$s2] & 255;
    var $_sum9 = $_sum5 + 4 | 0;
    _gcry_mpi_print(5, $48 + $_sum9 | 0, $93 - 4 | 0, 0, $19);
    var $111 = HEAP32[$ng$s2];
    var $_sum10 = $111 + $_sum9 | 0;
    HEAP8[$48 + $_sum10 | 0] = HEAP32[$ny$s2] >>> 24 & 255;
    HEAP8[$_sum10 + ($48 + 1) | 0] = HEAP32[$ny$s2] >>> 16 & 255;
    HEAP8[$_sum10 + ($48 + 2) | 0] = HEAP32[$ny$s2] >>> 8 & 255;
    HEAP8[$_sum10 + ($48 + 3) | 0] = HEAP32[$ny$s2] & 255;
    _gcry_mpi_print(5, $_sum10 + ($48 + 4) | 0, $93 - 8 - $111 | 0, 0, $20);
    _gcry_mpi_release($17);
    _gcry_mpi_release($18);
    _gcry_mpi_release($19);
    _gcry_mpi_release($20);
    var $_0 = _gcry_error68(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_make_pubkey["X"] = 1;
function _otrl_privkey_forget($privkey) {
  _free(HEAP32[$privkey + 8 >> 2]);
  _free(HEAP32[$privkey + 12 >> 2]);
  _gcry_sexp_release(HEAP32[$privkey + 20 >> 2]);
  _free(HEAP32[$privkey + 24 >> 2]);
  var $9 = $privkey | 0;
  var $11 = $privkey + 4 | 0;
  HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[$9 >> 2];
  var $13 = HEAP32[$9 >> 2];
  if (($13 | 0) == 0) {
    var $19 = $privkey;
    _free($19);
    return;
  }
  HEAP32[$13 + 4 >> 2] = HEAP32[$11 >> 2];
  var $19 = $privkey;
  _free($19);
  return;
}
Module["_otrl_privkey_forget"] = _otrl_privkey_forget;
function _otrl_privkey_pending_forget_all($us) {
  var $1 = $us + 12 | 0;
  var $2 = HEAP32[$1 >> 2];
  if (($2 | 0) == 0) {
    return;
  } else {
    var $4 = $2;
  }
  while (1) {
    var $4;
    _pending_forget($4);
    var $5 = HEAP32[$1 >> 2];
    if (($5 | 0) == 0) {
      break;
    } else {
      var $4 = $5;
    }
  }
  return;
}
function _pending_forget($ppk) {
  if (($ppk | 0) == 0) {
    return;
  }
  _free(HEAP32[$ppk + 8 >> 2]);
  _free(HEAP32[$ppk + 12 >> 2]);
  var $7 = $ppk | 0;
  var $9 = $ppk + 4 | 0;
  HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$7 >> 2];
  var $11 = HEAP32[$7 >> 2];
  if (($11 | 0) != 0) {
    HEAP32[$11 + 4 >> 2] = HEAP32[$9 >> 2];
  }
  _free($ppk);
  return;
}
function _otrl_privkey_generate_start($us, $accountname, $protocol, $newkeyp) {
  var $9$s2;
  if ((_pending_find($us, $accountname, $protocol) | 0) == 0) {
    _pending_insert($us, $accountname, $protocol);
    var $9 = _malloc(12), $9$s2 = $9 >> 2;
    HEAP32[$9$s2] = _strdup($accountname);
    HEAP32[$9$s2 + 1] = _strdup($protocol);
    HEAP32[$9$s2 + 2] = 0;
    HEAP32[$newkeyp >> 2] = $9;
    var $_0 = _gcry_error68(0);
    var $_0;
    return $_0;
  }
  if (($newkeyp | 0) != 0) {
    HEAP32[$newkeyp >> 2] = 0;
  }
  var $_0 = _gcry_error68(32803);
  var $_0;
  return $_0;
}
function _pending_find($us, $accountname, $protocol) {
  var label = 0;
  var $search_0_in = $us + 12 | 0;
  while (1) {
    var $search_0_in;
    var $search_0 = HEAP32[$search_0_in >> 2];
    if (($search_0 | 0) == 0) {
      var $_0 = 0;
      label = 325;
      break;
    }
    if ((_strcmp(HEAP32[$search_0 + 8 >> 2], $accountname) | 0) == 0) {
      if ((_strcmp(HEAP32[$search_0 + 12 >> 2], $protocol) | 0) == 0) {
        var $_0 = $search_0;
        label = 324;
        break;
      }
    }
    var $search_0_in = $search_0 | 0;
  }
  if (label == 325) {
    var $_0;
    return $_0;
  } else if (label == 324) {
    var $_0;
    return $_0;
  }
}
function _pending_insert($us, $accountname, $protocol) {
  var $4$s2;
  if ((_pending_find($us, $accountname, $protocol) | 0) != 0) {
    return;
  }
  var $4 = _malloc(16), $4$s2 = $4 >> 2;
  if (($4 | 0) == 0) {
    return;
  }
  HEAP32[$4$s2 + 2] = _strdup($accountname);
  HEAP32[$4$s2 + 3] = _strdup($protocol);
  var $14 = $us + 12 | 0;
  var $16 = $4;
  HEAP32[$16 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$14 >> 2] = $4;
  var $17 = HEAP32[$16 >> 2];
  if (($17 | 0) != 0) {
    HEAP32[$17 + 4 >> 2] = $16;
  }
  HEAP32[$4$s2 + 1] = $14;
  return;
}
function _otrl_privkey_generate_calculate($newkey) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $key = __stackBase__;
  var $parms = __stackBase__ + 4;
  var $1 = _gcry_sexp_new($parms, 468664, 29, 0);
  if (($1 | 0) != 0) {
    var $_0 = $1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $5 = _gcry_pk_genkey($key, HEAP32[$parms >> 2]);
  _gcry_sexp_release(HEAP32[$parms >> 2]);
  if (($5 | 0) != 0) {
    var $_0 = $5;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$newkey + 8 >> 2] = _gcry_sexp_find_token(HEAP32[$key >> 2], 470228, 0);
  _gcry_sexp_release(HEAP32[$key >> 2]);
  var $_0 = _gcry_error68(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _ctoh($c) {
  var $1 = $c << 24 >> 24;
  if (($c - 48 & 255) < 10) {
    var $_0 = $1 - 48 | 0;
    var $_0;
    return $_0;
  }
  if (($c - 97 & 255) >= 6) {
    return ($c - 65 & 255) < 6 ? $1 - 55 | 0 : 0;
  }
  var $_0 = $1 - 87 | 0;
  var $_0;
  return $_0;
}
function _gpg_err_make72($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function _otrl_context_find_recent_instance($context, $recent_instag) {
  var $4$s2;
  do {
    if (($context | 0) == 0) {
      var $_0 = 0;
    } else {
      var $4 = HEAP32[$context + 24 >> 2], $4$s2 = $4 >> 2;
      if (($4 | 0) == 0) {
        var $_0 = 0;
        break;
      }
      if (($recent_instag | 0) == 2) {
        var $_0 = HEAP32[$4$s2 + 9];
        break;
      } else if (($recent_instag | 0) == 3) {
        var $_0 = HEAP32[$4$s2 + 7];
        break;
      } else if (($recent_instag | 0) == 4) {
        var $_0 = HEAP32[$4$s2 + 8];
        break;
      } else {
        var $_0 = 0;
        break;
      }
    }
  } while (0);
  var $_0;
  return $_0;
}
function _otrl_context_is_fingerprint_trusted($fprint) {
  do {
    if (($fprint | 0) == 0) {
      var $10 = 0;
    } else {
      var $4 = HEAP32[$fprint + 16 >> 2];
      if (($4 | 0) == 0) {
        var $10 = 0;
        break;
      }
      var $10 = HEAP8[$4] << 24 >> 24 != 0;
    }
  } while (0);
  var $10;
  return $10 & 1;
}
function _otrl_privkey_generate_cancelled($us, $newkey) {
  var $newkey$s2 = $newkey >> 2;
  if (($us | 0) != 0) {
    _pending_forget(_pending_find($us, HEAP32[$newkey$s2], HEAP32[$newkey$s2 + 1]));
  }
  _free(HEAP32[$newkey$s2]);
  _free(HEAP32[$newkey$s2 + 1]);
  _gcry_sexp_release(HEAP32[$newkey$s2 + 2]);
  _free($newkey);
  return;
}
function _otrl_privkey_generate_finish($us, $newkey, $filename) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $err = __stackBase__;
  var $1 = _privkey_fopen($filename, $err);
  if (($1 | 0) != 0) {
    HEAP32[$err >> 2] = _otrl_privkey_generate_finish_FILEp($us, $newkey, $1);
    _fclose($1);
  }
  STACKTOP = __stackBase__;
  return HEAP32[$err >> 2];
}
function _privkey_fopen($filename, $errp) {
  var $1 = _umask(63);
  var $2 = _fopen($filename, 478728);
  if (($2 | 0) != 0 | ($errp | 0) == 0) {
    var $10 = _umask($1);
    return $2;
  }
  HEAP32[$errp >> 2] = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
  var $10 = _umask($1);
  return $2;
}
function _otrl_privkey_generate_finish_FILEp($us, $newkey, $privf) {
  var $p_03$s2;
  var label = 0;
  var $1 = _gcry_error68(55);
  if (($newkey | 0) == 0 | ($us | 0) == 0 | ($privf | 0) == 0) {
    var $ret_0 = $1;
    var $ret_0;
    _otrl_privkey_generate_cancelled($us, $newkey);
    return $ret_0;
  }
  _fwrite(467076, 10, 1, $privf);
  var $p_02 = HEAP32[$us + 4 >> 2];
  L431 : do {
    if (($p_02 | 0) != 0) {
      var $9 = $newkey;
      var $11 = $newkey + 4 | 0;
      var $p_03 = $p_02, $p_03$s2 = $p_03 >> 2;
      while (1) {
        var $p_03;
        var $13 = $p_03 + 8 | 0;
        do {
          if ((_strcmp(HEAP32[$13 >> 2], HEAP32[$9 >> 2]) | 0) == 0) {
            if ((_strcmp(HEAP32[$p_03$s2 + 3], HEAP32[$11 >> 2]) | 0) == 0) {
              break;
            } else {
              label = 380;
              break;
            }
          } else {
            label = 380;
          }
        } while (0);
        if (label == 380) {
          label = 0;
          _account_write($privf, HEAP32[$13 >> 2], HEAP32[$p_03$s2 + 3], HEAP32[$p_03$s2 + 5]);
        }
        var $p_0 = HEAP32[$p_03$s2];
        if (($p_0 | 0) == 0) {
          break L431;
        } else {
          var $p_03 = $p_0, $p_03$s2 = $p_03 >> 2;
        }
      }
    }
  } while (0);
  _account_write($privf, HEAP32[$newkey >> 2], HEAP32[$newkey + 4 >> 2], HEAP32[$newkey + 8 >> 2]);
  _fwrite(465044, 2, 1, $privf);
  _fseek($privf, 0, 0);
  var $ret_0 = _otrl_privkey_read_FILEp($us, $privf);
  var $ret_0;
  _otrl_privkey_generate_cancelled($us, $newkey);
  return $ret_0;
}
_otrl_privkey_generate_finish_FILEp["X"] = 1;
function _account_write($privf, $accountname, $protocol, $privkey) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $names = __stackBase__;
  var $protos = __stackBase__ + 4;
  _fwrite(481476, 10, 1, $privf);
  do {
    if ((_gcry_sexp_build($names, 0, 480840, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $accountname, tempInt)) | 0) == 0) {
      var $6 = _sexp_write($privf, HEAP32[$names >> 2]);
      _gcry_sexp_release(HEAP32[$names >> 2]);
      if (($6 | 0) != 0) {
        break;
      }
      if ((_gcry_sexp_build($protos, 0, 479820, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $protocol, tempInt)) | 0) != 0) {
        break;
      }
      var $13 = _sexp_write($privf, HEAP32[$protos >> 2]);
      _gcry_sexp_release(HEAP32[$protos >> 2]);
      if (($13 | 0) != 0) {
        break;
      }
      _sexp_write($privf, $privkey);
    }
  } while (0);
  _fwrite(479584, 3, 1, $privf);
  STACKTOP = __stackBase__;
  return;
}
function _otrl_privkey_generate($us, $filename, $accountname, $protocol) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $err = __stackBase__;
  var $1 = _privkey_fopen($filename, $err);
  if (($1 | 0) != 0) {
    HEAP32[$err >> 2] = _otrl_privkey_generate_FILEp($us, $1, $accountname, $protocol);
    _fclose($1);
  }
  STACKTOP = __stackBase__;
  return HEAP32[$err >> 2];
}
Module["_otrl_privkey_generate"] = _otrl_privkey_generate;
function _otrl_privkey_generate_FILEp($us, $privf, $accountname, $protocol) {
  var $newkey$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $newkey = __stackBase__, $newkey$s2 = $newkey >> 2;
  HEAP32[$newkey$s2] = 0;
  var $1 = _otrl_privkey_generate_start($us, $accountname, $protocol, $newkey);
  var $2 = HEAP32[$newkey$s2];
  if (($2 | 0) == 0) {
    var $err_0 = $1;
    var $err_0;
    STACKTOP = __stackBase__;
    return $err_0;
  }
  _otrl_privkey_generate_calculate($2);
  var $err_0 = _otrl_privkey_generate_finish_FILEp($us, HEAP32[$newkey$s2], $privf);
  var $err_0;
  STACKTOP = __stackBase__;
  return $err_0;
}
function _otrl_privkey_read_fingerprints($us, $filename, $add_app_data, $data) {
  var $1 = _fopen($filename, 487100);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    var $8 = _otrl_privkey_read_fingerprints_FILEp($us, $1, $add_app_data, $data);
    _fclose($1);
    var $_0 = $8;
    var $_0;
    return $_0;
  }
}
Module["_otrl_privkey_read_fingerprints"] = _otrl_privkey_read_fingerprints;
function _otrl_privkey_read_fingerprints_FILEp($us, $storef, $add_app_data, $data) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1020 | 0;
  var $fingerprint = __stackBase__ + 1e3;
  if (($storef | 0) == 0) {
    var $_0 = _gcry_error68(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $2 = __stackBase__ | 0;
  L469 : do {
    if ((_fgets($2, 1e3, $storef) | 0) != 0) {
      var $5 = $fingerprint | 0;
      while (1) {
        var $9 = _strchr($2, 9);
        do {
          if (($9 | 0) != 0) {
            HEAP8[$9] = 0;
            var $12 = $9 + 1 | 0;
            var $13 = _strchr($12, 9);
            if (($13 | 0) == 0) {
              break;
            }
            HEAP8[$13] = 0;
            var $16 = $13 + 1 | 0;
            var $17 = _strchr($16, 9);
            if (($17 | 0) == 0) {
              break;
            }
            HEAP8[$17] = 0;
            var $20 = $17 + 1 | 0;
            var $21 = _strchr($20, 9);
            if (($21 | 0) == 0) {
              var $24 = _strchr($20, 13);
              if (($24 | 0) == 0) {
                var $27 = _strchr($20, 10);
                if (($27 | 0) == 0) {
                  break;
                } else {
                  var $eol_02 = $27;
                }
              } else {
                var $eol_02 = $24;
              }
              var $eol_02;
              HEAP8[$eol_02] = 0;
              var $trust_0 = 0;
            } else {
              HEAP8[$21] = 0;
              var $30 = $21 + 1 | 0;
              var $31 = _strchr($30, 13);
              if (($31 | 0) == 0) {
                var $34 = _strchr($30, 10);
                if (($34 | 0) == 0) {
                  break;
                } else {
                  var $eol_14 = $34;
                }
              } else {
                var $eol_14 = $31;
              }
              var $eol_14;
              HEAP8[$eol_14] = 0;
              var $trust_0 = $30;
            }
            var $trust_0;
            if ((_strlen($20) | 0) == 40) {
              var $i_05 = 0;
              var $j_06 = 0;
            } else {
              break;
            }
            while (1) {
              var $j_06;
              var $i_05;
              var $_sum1 = $i_05 | 1;
              var $48 = $j_06 + 1 | 0;
              HEAP8[$fingerprint + $j_06 | 0] = (_ctoh(HEAP8[$17 + $_sum1 | 0]) << 4) + _ctoh(HEAP8[$_sum1 + ($17 + 1) | 0]) & 255;
              if (($48 | 0) == 20) {
                break;
              } else {
                var $i_05 = $i_05 + 2 | 0;
                var $j_06 = $48;
              }
            }
            _otrl_context_set_trust(_otrl_context_find_fingerprint(_otrl_context_find($us, $2, $12, $16, 0, 1, 0, $add_app_data, $data), $5, 1, 0), $trust_0);
          }
        } while (0);
        if ((_fgets($2, 1e3, $storef) | 0) == 0) {
          break L469;
        }
      }
    }
  } while (0);
  var $_0 = _gcry_error68(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_privkey_read_fingerprints_FILEp["X"] = 1;
function _otrl_privkey_write_fingerprints($us, $filename) {
  var $1 = _fopen($filename, 490304);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    var $8 = _otrl_privkey_write_fingerprints_FILEp($us, $1);
    _fclose($1);
    var $_0 = $8;
    var $_0;
    return $_0;
  }
}
Module["_otrl_privkey_write_fingerprints"] = _otrl_privkey_write_fingerprints;
function _otrl_privkey_write_fingerprints_FILEp($us, $storef) {
  var $context_05$s2;
  var __stackBase__ = STACKTOP;
  if (($storef | 0) == 0) {
    var $_0 = _gcry_error68(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $context_04 = HEAP32[$us >> 2];
  L504 : do {
    if (($context_04 | 0) != 0) {
      var $context_05 = $context_04, $context_05$s2 = $context_05 >> 2;
      while (1) {
        var $context_05;
        L507 : do {
          if ((HEAP32[$context_05$s2 + 11] | 0) == 0) {
            var $fprint_02 = HEAP32[$context_05$s2 + 57];
            if (($fprint_02 | 0) == 0) {
              break;
            }
            var $13 = $context_05 + 12 | 0;
            var $14 = $context_05 + 16 | 0;
            var $15 = $context_05 + 20 | 0;
            var $fprint_03 = $fprint_02;
            while (1) {
              var $fprint_03;
              var $18 = HEAP32[$14 >> 2];
              var $19 = HEAP32[$15 >> 2];
              _fprintf($storef, 489192, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$13 >> 2], HEAP32[tempInt + 4 >> 2] = $18, HEAP32[tempInt + 8 >> 2] = $19, tempInt));
              var $21 = $fprint_03 + 8 | 0;
              var $i_01 = 0;
              while (1) {
                var $i_01;
                _fprintf($storef, 487676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[HEAP32[$21 >> 2] + $i_01 | 0], tempInt));
                var $28 = $i_01 + 1 | 0;
                if (($28 | 0) == 20) {
                  break;
                } else {
                  var $i_01 = $28;
                }
              }
              var $31 = HEAP32[$fprint_03 + 16 >> 2];
              _fprintf($storef, 486996, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = ($31 | 0) == 0 ? 486068 : $31, tempInt));
              var $fprint_0 = HEAP32[$fprint_03 >> 2];
              if (($fprint_0 | 0) == 0) {
                break L507;
              } else {
                var $fprint_03 = $fprint_0;
              }
            }
          }
        } while (0);
        var $context_0 = HEAP32[$context_05$s2];
        if (($context_0 | 0) == 0) {
          break L504;
        } else {
          var $context_05 = $context_0, $context_05$s2 = $context_05 >> 2;
        }
      }
    }
  } while (0);
  var $_0 = _gcry_error68(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_privkey_write_fingerprints_FILEp["X"] = 1;
function _otrl_privkey_sign($sigp, $siglenp, $privkey, $data, $len) {
  var $datampi$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $datampi = __stackBase__, $datampi$s2 = $datampi >> 2;
  var $sigs = __stackBase__ + 4;
  var $datas = __stackBase__ + 8;
  var $nr = __stackBase__ + 12;
  var $ns = __stackBase__ + 16;
  if (HEAP16[$privkey + 16 >> 1] << 16 >> 16 != 0) {
    var $_0 = _gcry_error68(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $7 = _malloc(40);
  HEAP32[$sigp >> 2] = $7;
  if (($7 | 0) == 0) {
    var $_0 = _gcry_error68(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$siglenp >> 2] = 40;
  if (($len | 0) == 0) {
    HEAP32[$datampi$s2] = _gcry_mpi_set_ui(0, 0);
  } else {
    _gcry_mpi_scan($datampi, 5, $data, $len, 0);
  }
  _gcry_sexp_build($datas, 0, 485216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[$datampi$s2], tempInt));
  _gcry_mpi_release(HEAP32[$datampi$s2]);
  _gcry_pk_sign($sigs, HEAP32[$datas >> 2], HEAP32[$privkey + 20 >> 2]);
  _gcry_sexp_release(HEAP32[$datas >> 2]);
  var $27 = _gcry_sexp_find_token(HEAP32[$sigs >> 2], 484276, 0);
  _gcry_sexp_release(HEAP32[$sigs >> 2]);
  var $29 = _gcry_sexp_find_token($27, 483616, 0);
  var $30 = _gcry_sexp_find_token($27, 482696, 0);
  _gcry_sexp_release($27);
  var $31 = _gcry_sexp_nth_mpi($29, 1, 5);
  _gcry_sexp_release($29);
  var $32 = _gcry_sexp_nth_mpi($30, 1, 5);
  _gcry_sexp_release($30);
  _gcry_mpi_print(5, 0, 0, $nr, $31);
  _gcry_mpi_print(5, 0, 0, $ns, $32);
  _memset(HEAP32[$sigp >> 2], 0, 40);
  var $37 = HEAP32[$nr >> 2];
  _gcry_mpi_print(5, HEAP32[$sigp >> 2] + (20 - $37) | 0, $37, 0, $31);
  var $42 = HEAP32[$ns >> 2];
  _gcry_mpi_print(5, HEAP32[$sigp >> 2] + (40 - $42) | 0, $42, 0, $32);
  _gcry_mpi_release($31);
  _gcry_mpi_release($32);
  var $_0 = _gcry_error68(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_privkey_sign["X"] = 1;
function _otrl_privkey_verify($sigbuf, $siglen, $pubkey_type, $pubs, $data, $len) {
  var $datampi$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $datampi = __stackBase__, $datampi$s2 = $datampi >> 2;
  var $r = __stackBase__ + 4;
  var $s = __stackBase__ + 8;
  var $datas = __stackBase__ + 12;
  var $sigs = __stackBase__ + 16;
  if (!($pubkey_type << 16 >> 16 == 0 & ($siglen | 0) == 40)) {
    var $_0 = _gcry_error68(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($len | 0) == 0) {
    HEAP32[$datampi$s2] = _gcry_mpi_set_ui(0, 0);
  } else {
    _gcry_mpi_scan($datampi, 5, $data, $len, 0);
  }
  _gcry_sexp_build($datas, 0, 485216, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[$datampi$s2], tempInt));
  _gcry_mpi_release(HEAP32[$datampi$s2]);
  _gcry_mpi_scan($r, 5, $sigbuf, 20, 0);
  _gcry_mpi_scan($s, 5, $sigbuf + 20 | 0, 20, 0);
  var $19 = HEAP32[$s >> 2];
  _gcry_sexp_build($sigs, 0, 482040, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[$r >> 2], HEAP32[tempInt + 4 >> 2] = $19, tempInt));
  _gcry_mpi_release(HEAP32[$r >> 2]);
  _gcry_mpi_release(HEAP32[$s >> 2]);
  var $25 = _gcry_pk_verify(HEAP32[$sigs >> 2], HEAP32[$datas >> 2], $pubs);
  _gcry_sexp_release(HEAP32[$datas >> 2]);
  _gcry_sexp_release(HEAP32[$sigs >> 2]);
  var $_0 = $25;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _sexp_write($privf, $sexp) {
  var $1 = _gcry_sexp_sprint($sexp, 3, 0, 0);
  var $2 = _malloc($1);
  if (($2 | 0) != 0 | ($1 | 0) == 0) {
    _gcry_sexp_sprint($sexp, 3, $2, $1);
    _fputs($2, $privf);
    _free($2);
    var $_0 = _gcry_error68(0);
    var $_0;
    return $_0;
  } else {
    var $_0 = _gcry_error68(32854);
    var $_0;
    return $_0;
  }
}
function _gcry_err_make71($code) {
  return _gpg_err_make72($code);
}
function _otrl_context_find_recent_secure_instance($context) {
  var $cresult_0$s2;
  var $curp_0$s2;
  var label = 0;
  if (($context | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $4 = HEAP32[$context + 24 >> 2];
  var $curp_0 = $4, $curp_0$s2 = $curp_0 >> 2;
  var $cresult_0 = $context, $cresult_0$s2 = $cresult_0 >> 2;
  while (1) {
    var $cresult_0;
    var $curp_0;
    if (($curp_0 | 0) == 0) {
      var $_0 = $cresult_0;
      label = 493;
      break;
    }
    if ((HEAP32[$curp_0$s2 + 6] | 0) != ($4 | 0)) {
      var $_0 = $cresult_0;
      label = 491;
      break;
    }
    var $13 = HEAP32[$cresult_0$s2 + 12];
    var $15 = HEAP32[$curp_0$s2 + 12];
    do {
      if (($13 | 0) == ($15 | 0)) {
        var $msgstate_improved_0 = 0;
        label = 483;
      } else {
        if (($15 | 0) == 1) {
          var $msgstate_improved_0 = 1;
          label = 483;
          break;
        }
        if (($13 | 0) == 0 & ($15 | 0) == 2) {
          var $msgstate_improved_0 = 1;
          label = 483;
          break;
        } else {
          var $cresult_1 = $cresult_0;
          break;
        }
      }
    } while (0);
    do {
      if (label == 483) {
        label = 0;
        var $msgstate_improved_0;
        var $25 = _otrl_context_is_fingerprint_trusted(HEAP32[$cresult_0$s2 + 62]);
        var $28 = _otrl_context_is_fingerprint_trusted(HEAP32[$curp_0$s2 + 62]);
        if (($25 | 0) == ($28 | 0)) {
          var $trust_improved_0 = 0;
        } else {
          if (($28 | 0) == 0) {
            var $cresult_1 = $cresult_0;
            break;
          } else {
            var $trust_improved_0 = 1;
          }
        }
        var $trust_improved_0;
        if (($msgstate_improved_0 | $trust_improved_0 | 0) == 0) {
          if (($trust_improved_0 | $msgstate_improved_0 | 0) != 0) {
            var $cresult_1 = $cresult_0;
            break;
          }
          if ((HEAP32[HEAP32[$curp_0$s2 + 2] + 580 >> 2] | 0) < (HEAP32[HEAP32[$cresult_0$s2 + 2] + 580 >> 2] | 0)) {
            var $cresult_1 = $cresult_0;
            break;
          }
        }
        var $cresult_1 = $curp_0;
      }
    } while (0);
    var $cresult_1;
    var $curp_0 = HEAP32[$curp_0$s2], $curp_0$s2 = $curp_0 >> 2;
    var $cresult_0 = $cresult_1, $cresult_0$s2 = $cresult_0 >> 2;
  }
  if (label == 491) {
    var $_0;
    return $_0;
  } else if (label == 493) {
    var $_0;
    return $_0;
  }
}
_otrl_context_find_recent_secure_instance["X"] = 1;
function _otrl_version() {
  return 486132;
}
Module["_otrl_version"] = _otrl_version;
function _otrl_context_update_recent_child($context, $sent_msg) {
  var $2$s2;
  var $2$s2 = HEAP32[$context + 24 >> 2] >> 2;
  if (($sent_msg | 0) == 0) {
    HEAP32[$2$s2 + 7] = $context;
  } else {
    HEAP32[$2$s2 + 8] = $context;
  }
  HEAP32[$2$s2 + 9] = $context;
  return;
}
function _otrl_context_find($us, $user, $accountname, $protocol, $their_instance, $add_if_missing, $addedp, $add_app_data, $data) {
  var $76$s2;
  var $curp_0$s2;
  var label = 0;
  var $1 = ($addedp | 0) != 0;
  if ($1) {
    HEAP32[$addedp >> 2] = 0;
  }
  if (($user | 0) == 0 | ($accountname | 0) == 0 | ($protocol | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $9 = $their_instance >>> 0 < 256;
  var $protocmp_0 = 1;
  var $acctcmp_0 = 1;
  var $usercmp_0 = 1;
  var $curp_0 = $us | 0, $curp_0$s2 = $curp_0 >> 2;
  L586 : while (1) {
    var $curp_0;
    var $usercmp_0;
    var $acctcmp_0;
    var $protocmp_0;
    var $11 = HEAP32[$curp_0$s2];
    if (($11 | 0) == 0) {
      var $protocmp_2 = $protocmp_0;
      var $acctcmp_2 = $acctcmp_0;
      var $usercmp_1 = $usercmp_0;
      label = 514;
      break;
    }
    var $16 = _strcmp(HEAP32[$11 + 12 >> 2], $user);
    if (($16 | 0) > 0) {
      break;
    }
    do {
      if (($16 | 0) == 0) {
        var $25 = _strcmp(HEAP32[$11 + 16 >> 2], $accountname);
        if (($25 | 0) > 0) {
          break L586;
        }
        if (($25 | $16 | 0) != 0) {
          var $acctcmp_11216 = $25;
          var $protocmp_117 = $protocmp_0;
          break;
        }
        var $34 = _strcmp(HEAP32[HEAP32[$curp_0$s2] + 20 >> 2], $protocol);
        if (($34 | 0) > 0) {
          break L586;
        } else {
          var $protocmp_1 = $34;
          var $acctcmp_112 = $25;
          var $or_cond613 = 1;
          label = 510;
          break;
        }
      } else {
        var $protocmp_1 = $protocmp_0;
        var $acctcmp_112 = $acctcmp_0;
        var $or_cond613 = ($16 | $acctcmp_0 | 0) == 0;
        label = 510;
        break;
      }
    } while (0);
    do {
      if (label == 510) {
        label = 0;
        var $or_cond613;
        var $acctcmp_112;
        var $protocmp_1;
        if (!($or_cond613 & ($protocmp_1 | 0) == 0)) {
          var $acctcmp_11216 = $acctcmp_112;
          var $protocmp_117 = $protocmp_1;
          break;
        }
        if ($9) {
          var $protocmp_2 = $protocmp_1;
          var $acctcmp_2 = $acctcmp_112;
          var $usercmp_1 = $16;
          label = 514;
          break L586;
        }
        if (HEAP32[HEAP32[$curp_0$s2] + 44 >> 2] >>> 0 < $their_instance >>> 0) {
          var $acctcmp_11216 = $acctcmp_112;
          var $protocmp_117 = $protocmp_1;
        } else {
          var $protocmp_2 = $protocmp_1;
          var $acctcmp_2 = $acctcmp_112;
          var $usercmp_1 = $16;
          label = 514;
          break L586;
        }
      }
    } while (0);
    var $protocmp_117;
    var $acctcmp_11216;
    var $protocmp_0 = $protocmp_117;
    var $acctcmp_0 = $acctcmp_11216;
    var $usercmp_0 = $16;
    var $curp_0 = HEAP32[$curp_0$s2] | 0, $curp_0$s2 = $curp_0 >> 2;
  }
  do {
    if (label == 514) {
      var $usercmp_1;
      var $acctcmp_2;
      var $protocmp_2;
      if (($acctcmp_2 | $usercmp_1 | $protocmp_2 | 0) != 0) {
        break;
      }
      var $51 = HEAP32[$curp_0$s2];
      if (($51 | 0) == 0) {
        break;
      }
      if ($their_instance >>> 0 >= 256) {
        if ((HEAP32[$51 + 44 >> 2] | 0) != ($their_instance | 0)) {
          break;
        }
      }
      if ($their_instance >>> 0 > 255 | ($their_instance | 0) == 0) {
        var $_0 = HEAP32[$curp_0$s2];
        var $_0;
        return $_0;
      }
      if (($their_instance | 0) == 1) {
        var $_0 = _otrl_context_find_recent_secure_instance(HEAP32[$curp_0$s2]);
        var $_0;
        return $_0;
      } else if (($their_instance | 0) == 2 | ($their_instance | 0) == 3 | ($their_instance | 0) == 4) {
        var $_0 = _otrl_context_find_recent_instance(HEAP32[$curp_0$s2], $their_instance);
        var $_0;
        return $_0;
      } else {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
    }
  } while (0);
  if (($add_if_missing | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $73 = _otrl_instag_find($us, $accountname, $protocol);
  if ($1) {
    HEAP32[$addedp >> 2] = 1;
  }
  var $76 = _new_context($user, $accountname, $protocol), $76$s2 = $76 >> 2;
  var $78 = $76 | 0;
  HEAP32[$78 >> 2] = HEAP32[$curp_0$s2];
  var $79 = HEAP32[$curp_0$s2];
  if (($79 | 0) != 0) {
    HEAP32[$79 + 4 >> 2] = $78;
  }
  HEAP32[$curp_0$s2] = $76;
  HEAP32[$76$s2 + 1] = $curp_0;
  if (($add_app_data | 0) != 0) {
    FUNCTION_TABLE[$add_app_data]($data, HEAP32[$curp_0$s2]);
  }
  if (($73 | 0) != 0) {
    HEAP32[$76$s2 + 10] = HEAP32[$73 + 16 >> 2];
  }
  var $95 = $their_instance >>> 0 > 255;
  var $96 = ($their_instance | 0) == 0;
  if ($95 | $96) {
    HEAP32[$76$s2 + 11] = $their_instance;
  }
  if ($95) {
    HEAP32[$76$s2 + 6] = _otrl_context_find($us, $user, $accountname, $protocol, 0, 1, 0, $add_app_data, $data);
  }
  if ($96) {
    HEAP32[$76$s2 + 9] = $76;
    HEAP32[$76$s2 + 7] = $76;
    HEAP32[$76$s2 + 8] = $76;
  }
  var $_0 = HEAP32[$curp_0$s2];
  var $_0;
  return $_0;
}
Module["_otrl_context_find"] = _otrl_context_find;
_otrl_context_find["X"] = 1;
function _new_context($user, $accountname, $protocol) {
  var $37$s2;
  var $36$s2;
  var $1$s2;
  var $1 = _malloc(300), $1$s2 = $1 >> 2;
  var $2 = $1;
  if (($1 | 0) == 0) {
    ___assert_func(477232, 130, 493688, 476008);
  }
  HEAP32[$1$s2 + 3] = _strdup($user);
  HEAP32[$1$s2 + 4] = _strdup($accountname);
  HEAP32[$1$s2 + 5] = _strdup($protocol);
  HEAP32[$1$s2 + 12] = 0;
  _otrl_auth_new($2);
  var $17 = _malloc(56);
  var $18 = $17;
  if (($17 | 0) == 0) {
    ___assert_func(477232, 140, 493688, 473204);
  }
  _otrl_sm_state_new($18);
  HEAP32[$1$s2 + 74] = $18;
  HEAP32[$1$s2 + 10] = 0;
  HEAP32[$1$s2 + 11] = 0;
  HEAP32[$1$s2 + 59] = 0;
  HEAP32[$1$s2 + 60] = $2;
  HEAP32[$1$s2 + 57] = 0;
  HEAP32[$1$s2 + 58] = 0;
  var $36$s2 = ($1 + 248 | 0) >> 2;
  var $37$s2 = ($1 + 280 | 0) >> 2;
  HEAP32[$36$s2] = 0;
  HEAP32[$36$s2 + 1] = 0;
  HEAP32[$36$s2 + 2] = 0;
  HEAP32[$36$s2 + 3] = 0;
  HEAP32[$36$s2 + 4] = 0;
  HEAP32[$36$s2 + 5] = 0;
  HEAP32[$36$s2 + 6] = 0;
  HEAP32[$37$s2] = 0;
  HEAP32[$37$s2 + 1] = 0;
  HEAP32[$37$s2 + 2] = 0;
  HEAP32[$37$s2 + 3] = 0;
  var $38 = _otrl_context_priv_new();
  HEAP32[$1$s2 + 2] = $38;
  if (($38 | 0) != 0) {
    var $44 = $1;
    HEAP32[$44 >> 2] = 0;
    var $45 = $1 + 24 | 0;
    var $46 = $45;
    HEAP32[$46 >> 2] = $2;
    var $47 = $1 + 28 | 0;
    var $48 = $47;
    HEAP32[$48 >> 2] = 0;
    var $49 = $1 + 32 | 0;
    var $50 = $49;
    HEAP32[$50 >> 2] = 0;
    var $51 = $1 + 36 | 0;
    var $52 = $51;
    HEAP32[$52 >> 2] = 0;
    return $2;
  }
  ___assert_func(477232, 158, 493688, 471608);
  var $44 = $1;
  HEAP32[$44 >> 2] = 0;
  var $45 = $1 + 24 | 0;
  var $46 = $45;
  HEAP32[$46 >> 2] = $2;
  var $47 = $1 + 28 | 0;
  var $48 = $47;
  HEAP32[$48 >> 2] = 0;
  var $49 = $1 + 32 | 0;
  var $50 = $49;
  HEAP32[$50 >> 2] = 0;
  var $51 = $1 + 36 | 0;
  var $52 = $51;
  HEAP32[$52 >> 2] = 0;
  return $2;
}
_new_context["X"] = 1;
function _otrl_context_find_fingerprint($context, $fingerprint, $add_if_missing, $addedp) {
  var $24$s2;
  var label = 0;
  var $1 = ($addedp | 0) != 0;
  if ($1) {
    HEAP32[$addedp >> 2] = 0;
  }
  if (($context | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $7 = HEAP32[$context + 24 >> 2];
  if (($7 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $10 = $7 + 228 | 0;
  var $f_0_in = $10;
  while (1) {
    var $f_0_in;
    var $f_0 = HEAP32[$f_0_in >> 2];
    if (($f_0 | 0) == 0) {
      break;
    }
    if ((_memcmp(HEAP32[$f_0 + 8 >> 2], $fingerprint, 20) | 0) == 0) {
      var $_0 = $f_0;
      label = 576;
      break;
    } else {
      var $f_0_in = $f_0 | 0;
    }
  }
  if (label == 576) {
    var $_0;
    return $_0;
  }
  if (($add_if_missing | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if ($1) {
    HEAP32[$addedp >> 2] = 1;
  }
  var $24 = _malloc(20), $24$s2 = $24 >> 2;
  var $25 = $24;
  if (($24 | 0) == 0) {
    ___assert_func(477232, 387, 493636, 487400);
  }
  var $29 = _malloc(20);
  var $31 = $24 + 8 | 0;
  HEAP32[$31 >> 2] = $29;
  if (($29 | 0) == 0) {
    ___assert_func(477232, 389, 493636, 479620);
  }
  _memmove(HEAP32[$31 >> 2], $fingerprint, 20, 1, 0);
  HEAP32[$24$s2 + 3] = $7;
  HEAP32[$24$s2 + 4] = 0;
  var $40 = HEAP32[$10 >> 2];
  var $41 = $24;
  HEAP32[$41 >> 2] = $40;
  if (($40 | 0) != 0) {
    HEAP32[$40 + 4 >> 2] = $41;
  }
  HEAP32[$10 >> 2] = $25;
  HEAP32[$24$s2 + 1] = $10;
  var $_0 = $25;
  var $_0;
  return $_0;
}
_otrl_context_find_fingerprint["X"] = 1;
function _otrl_context_set_trust($fprint, $trust) {
  if (($fprint | 0) == 0) {
    return;
  }
  var $3 = $fprint + 16 | 0;
  _free(HEAP32[$3 >> 2]);
  if (($trust | 0) == 0) {
    var $9 = 0;
  } else {
    var $9 = _strdup($trust);
  }
  var $9;
  HEAP32[$3 >> 2] = $9;
  return;
}
function _otrl_context_force_finished($context) {
  var $6$s2;
  HEAP32[$context + 48 >> 2] = 2;
  _otrl_auth_clear($context + 52 | 0);
  HEAP32[$context + 280 >> 2] = 0;
  var $6$s2 = ($context + 248 | 0) >> 2;
  HEAP32[$6$s2] = 0;
  HEAP32[$6$s2 + 1] = 0;
  HEAP32[$6$s2 + 2] = 0;
  HEAP32[$6$s2 + 3] = 0;
  HEAP32[$6$s2 + 4] = 0;
  HEAP32[$6$s2 + 5] = 0;
  HEAP32[$6$s2 + 6] = 0;
  _otrl_sm_state_free(HEAP32[$context + 296 >> 2]);
  _otrl_context_priv_force_finished(HEAP32[$context + 8 >> 2]);
  return;
}
function _otrl_context_force_plaintext($context) {
  _otrl_context_force_finished($context);
  HEAP32[$context + 48 >> 2] = 0;
  return;
}
function _otrl_context_forget_fingerprint($fprint, $and_maybe_context) {
  var $2 = HEAP32[$fprint + 12 >> 2];
  var $3 = $2 + 228 | 0;
  var $5 = $2 + 48 | 0;
  var $7 = (HEAP32[$5 >> 2] | 0) == 0;
  if (($3 | 0) == ($fprint | 0)) {
    if (($and_maybe_context | 0) == 0 | $7 ^ 1) {
      return;
    }
    _otrl_context_forget($2);
    return;
  }
  do {
    if ($7) {
      if ((HEAP32[$2 + 248 >> 2] | 0) != ($fprint | 0)) {
        break;
      }
      return;
    }
  } while (0);
  _free(HEAP32[$fprint + 8 >> 2]);
  _free(HEAP32[$fprint + 16 >> 2]);
  var $22 = $fprint | 0;
  var $24 = $fprint + 4 | 0;
  HEAP32[HEAP32[$24 >> 2] >> 2] = HEAP32[$22 >> 2];
  var $26 = HEAP32[$22 >> 2];
  if (($26 | 0) != 0) {
    HEAP32[$26 + 4 >> 2] = HEAP32[$24 >> 2];
  }
  _free($fprint);
  if ((HEAP32[$5 >> 2] | 0) != 0) {
    return;
  }
  if ((HEAP32[$3 >> 2] | 0) != 0 | ($and_maybe_context | 0) == 0) {
    return;
  }
  _otrl_context_forget($2);
  return;
}
_otrl_context_forget_fingerprint["X"] = 1;
function _otrl_context_forget($context) {
  var label = 0;
  var $1 = $context + 48 | 0;
  if ((HEAP32[$1 >> 2] | 0) != 0) {
    var $_0 = 1;
    var $_0;
    return $_0;
  }
  L722 : do {
    if ((HEAP32[$context + 44 >> 2] | 0) == 0) {
      var $8 = $context + 24 | 0;
      var $c_iter_0 = $context;
      while (1) {
        var $c_iter_0;
        if (($c_iter_0 | 0) == 0) {
          break;
        }
        if ((HEAP32[$c_iter_0 + 24 >> 2] | 0) != (HEAP32[$8 >> 2] | 0)) {
          break;
        }
        if ((HEAP32[$1 >> 2] | 0) != 0) {
          var $_0 = 1;
          label = 625;
          break;
        }
        var $c_iter_0 = HEAP32[$c_iter_0 >> 2];
      }
      if (label == 625) {
        var $_0;
        return $_0;
      }
      var $22 = $context | 0;
      var $23 = $context + 24 | 0;
      while (1) {
        var $c_iter_1 = HEAP32[$22 >> 2];
        if (($c_iter_1 | 0) == 0) {
          break L722;
        }
        if ((HEAP32[$c_iter_1 + 24 >> 2] | 0) != (HEAP32[$23 >> 2] | 0)) {
          break L722;
        }
        if ((_otrl_context_forget($c_iter_1) | 0) != 0) {
          var $_0 = 1;
          break;
        }
      }
      var $_0;
      return $_0;
    }
  } while (0);
  _otrl_context_force_plaintext($context);
  var $34 = $context + 228 | 0;
  var $35 = HEAP32[$34 >> 2];
  L738 : do {
    if (($35 | 0) != 0) {
      var $37 = $35;
      while (1) {
        var $37;
        _otrl_context_forget_fingerprint($37, 0);
        var $38 = HEAP32[$34 >> 2];
        if (($38 | 0) == 0) {
          break L738;
        } else {
          var $37 = $38;
        }
      }
    }
  } while (0);
  var $40 = $context + 12 | 0;
  _free(HEAP32[$40 >> 2]);
  var $42 = $context + 16 | 0;
  _free(HEAP32[$42 >> 2]);
  var $44 = $context + 20 | 0;
  _free(HEAP32[$44 >> 2]);
  var $46 = $context + 296 | 0;
  _free(HEAP32[$46 >> 2]);
  HEAP32[$40 >> 2] = 0;
  HEAP32[$42 >> 2] = 0;
  HEAP32[$44 >> 2] = 0;
  HEAP32[$46 >> 2] = 0;
  var $49 = $context + 288 | 0;
  var $50 = HEAP32[$49 >> 2];
  do {
    if (($50 | 0) != 0) {
      var $54 = HEAP32[$context + 292 >> 2];
      if (($54 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[$54]($50);
      HEAP32[$49 >> 2] = 0;
    }
  } while (0);
  var $58 = $context | 0;
  var $60 = $context + 4 | 0;
  HEAP32[HEAP32[$60 >> 2] >> 2] = HEAP32[$58 >> 2];
  var $62 = HEAP32[$58 >> 2];
  if (($62 | 0) != 0) {
    HEAP32[$62 + 4 >> 2] = HEAP32[$60 >> 2];
  }
  _free($context);
  var $_0 = 0;
  var $_0;
  return $_0;
}
_otrl_context_forget["X"] = 1;
function _otrl_context_forget_all($us) {
  var $1$s2;
  var $1$s2 = ($us | 0) >> 2;
  var $c_iter_01 = HEAP32[$1$s2];
  if (($c_iter_01 | 0) == 0) {
    return;
  } else {
    var $c_iter_02 = $c_iter_01;
  }
  while (1) {
    var $c_iter_02;
    _otrl_context_force_plaintext($c_iter_02);
    var $c_iter_0 = HEAP32[$c_iter_02 >> 2];
    if (($c_iter_0 | 0) == 0) {
      break;
    } else {
      var $c_iter_02 = $c_iter_0;
    }
  }
  var $_pr = HEAP32[$1$s2];
  if (($_pr | 0) == 0) {
    return;
  } else {
    var $6 = $_pr;
  }
  while (1) {
    var $6;
    _otrl_context_forget($6);
    var $8 = HEAP32[$1$s2];
    if (($8 | 0) == 0) {
      break;
    } else {
      var $6 = $8;
    }
  }
  return;
}
function _otrl_init($ver_major, $ver_minor, $ver_sub) {
  var __stackBase__ = STACKTOP;
  if (!(($ver_major | 0) == 4 & ($ver_minor | 0) == 0)) {
    _fprintf(HEAP32[_stderr >> 2], 473632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $ver_major, HEAP32[tempInt + 4 >> 2] = $ver_minor, HEAP32[tempInt + 8 >> 2] = $ver_sub, HEAP32[tempInt + 12 >> 2] = 4, HEAP32[tempInt + 16 >> 2] = 0, HEAP32[tempInt + 20 >> 2] = 0, tempInt));
    var $_0 = _gcry_error70(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $11 = $ver_major << 16 | $ver_sub | $ver_minor << 8;
  var $12 = HEAP32[110121];
  if (($12 | 0) == 0 | $12 >>> 0 > $11 >>> 0) {
    HEAP32[110121] = $11;
  }
  _otrl_mem_init();
  _otrl_dh_init();
  _otrl_sm_init();
  var $_0 = _gcry_error70(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gcry_error70($code) {
  return _gcry_err_make7175($code);
}
function _otrl_proto_default_query_msg($ourname, $policy) {
  var __stackBase__ = STACKTOP;
  var $4 = _malloc(8);
  if (($policy & 1 | 0) == 0) {
    var $bufp_0 = $4;
  } else {
    HEAP8[$4] = 63;
    var $bufp_0 = $4 + 1 | 0;
  }
  var $bufp_0;
  var $9 = ($policy & 2 | 0) != 0;
  var $10 = ($policy & 4 | 0) == 0;
  if ($10 & ($9 ^ 1)) {
    var $bufp_3 = $bufp_0;
  } else {
    HEAP8[$bufp_0] = 118;
    var $12 = $bufp_0 + 1 | 0;
    if ($9) {
      HEAP8[$12] = 50;
      var $bufp_1 = $bufp_0 + 2 | 0;
    } else {
      var $bufp_1 = $12;
    }
    var $bufp_1;
    if ($10) {
      var $bufp_2 = $bufp_1;
    } else {
      HEAP8[$bufp_1] = 51;
      var $bufp_2 = $bufp_1 + 1 | 0;
    }
    var $bufp_2;
    HEAP8[$bufp_2] = 63;
    var $bufp_3 = $bufp_2 + 1 | 0;
  }
  var $bufp_3;
  HEAP8[$bufp_3] = 0;
  var $25 = _malloc(_strlen($4) + _strlen($ourname) + 254 | 0);
  if (($25 | 0) == 0) {
    _free($4);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    _sprintf($25, 479e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $4, HEAP32[tempInt + 4 >> 2] = $ourname, tempInt));
    _free($4);
    var $_0 = $25;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
function _otrl_proto_query_bestversion($otrquerymsg, $policy) {
  var label = 0;
  var $1 = _strstr($otrquerymsg, 475784);
  var $2 = $1 + 4 | 0;
  L790 : do {
    if (($2 | 0) == 0) {
      var $query_versions_3 = 0;
    } else {
      var $6 = HEAP8[$2] << 24 >> 24 == 63;
      var $_ = $6 ? $1 + 5 | 0 : $2;
      var $_1 = $6 & 1;
      if (($_ | 0) == 0) {
        var $query_versions_3 = $_1;
        break;
      }
      if (HEAP8[$_] << 24 >> 24 == 118) {
        var $query_versions_1_ph = $_1;
        var $otrtag_0_pn_ph = $_;
      } else {
        var $query_versions_3 = $_1;
        break;
      }
      while (1) {
        var $otrtag_0_pn_ph;
        var $query_versions_1_ph;
        var $otrtag_0_pn = $otrtag_0_pn_ph;
        while (1) {
          var $otrtag_0_pn;
          var $otrtag_1 = $otrtag_0_pn + 1 | 0;
          var $13 = HEAP8[$otrtag_1];
          if ($13 << 24 >> 24 == 0 | $13 << 24 >> 24 == 63) {
            var $query_versions_3 = $query_versions_1_ph;
            break L790;
          }
          var $15 = $13 << 24 >> 24;
          if (($15 | 0) == 51) {
            label = 667;
            break;
          } else if (($15 | 0) == 50) {
            label = 666;
            break;
          } else {
            var $otrtag_0_pn = $otrtag_1;
          }
        }
        if (label == 667) {
          label = 0;
          var $query_versions_1_ph = $query_versions_1_ph | 4;
          var $otrtag_0_pn_ph = $otrtag_1;
          continue;
        } else if (label == 666) {
          label = 0;
          var $query_versions_1_ph = $query_versions_1_ph | 2;
          var $otrtag_0_pn_ph = $otrtag_1;
          continue;
        }
      }
    }
  } while (0);
  var $query_versions_3;
  do {
    if (($policy & 4 | 0) != 0) {
      if (($query_versions_3 & 4 | 0) == 0) {
        break;
      } else {
        var $_0 = 3;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  do {
    if (($policy & 2 | 0) != 0) {
      if (($query_versions_3 & 2 | 0) == 0) {
        break;
      } else {
        var $_0 = 2;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  do {
    if (($policy & 1 | 0) != 0) {
      if (($query_versions_3 & 1 | 0) == 0) {
        break;
      } else {
        var $_0 = 1;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $_0 = 0;
  var $_0;
  return $_0;
}
function _otrl_proto_whitespace_bestversion($msg, $starttagp, $endtagp, $policy) {
  HEAP32[$starttagp >> 2] = 0;
  HEAP32[$endtagp >> 2] = 0;
  var $1 = _strstr($msg, 473104);
  if (($1 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $query_versions_0 = 0;
  var $endtag_0 = $1 + 16 | 0;
  L819 : while (1) {
    var $endtag_0;
    var $query_versions_0;
    var $i_0 = 0;
    while (1) {
      var $i_0;
      if (($i_0 | 0) >= 8) {
        break;
      }
      var $10 = HEAP8[$endtag_0 + $i_0 | 0];
      if (!($10 << 24 >> 24 == 32 | $10 << 24 >> 24 == 9)) {
        break L819;
      }
      var $i_0 = $i_0 + 1 | 0;
    }
    var $query_versions_1 = (_strncmp($endtag_0, 471484, 8) | 0) == 0 & 1 | $query_versions_0;
    var $_query_versions_1 = (_strncmp($endtag_0, 470128, 8) | 0) == 0 ? $query_versions_1 | 2 : $query_versions_1;
    var $query_versions_0 = (_strncmp($endtag_0, 468516, 8) | 0) == 0 ? $_query_versions_1 | 4 : $_query_versions_1;
    var $endtag_0 = $endtag_0 + 8 | 0;
  }
  HEAP32[$starttagp >> 2] = $1;
  HEAP32[$endtagp >> 2] = $endtag_0;
  do {
    if (($policy & 4 | 0) != 0) {
      if (($query_versions_0 & 4 | 0) == 0) {
        break;
      } else {
        var $_0 = 3;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  do {
    if (($policy & 2 | 0) != 0) {
      if (($query_versions_0 & 2 | 0) == 0) {
        break;
      } else {
        var $_0 = 2;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  do {
    if (($policy & 1 | 0) != 0) {
      if (($query_versions_0 & 1 | 0) == 0) {
        break;
      } else {
        var $_0 = 1;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $_0 = 0;
  var $_0;
  return $_0;
}
_otrl_proto_whitespace_bestversion["X"] = 1;
function _otrl_proto_message_type($message) {
  var label = 0;
  var $1 = _strstr($message, 475784);
  L841 : do {
    if (($1 | 0) == 0) {
      var $_0 = (_strstr($message, 473104) | 0) != 0 & 1;
    } else {
      do {
        if ((_strncmp($1, 466824, 8) | 0) == 0) {
          label = 704;
        } else {
          if ((_strncmp($1, 464916, 8) | 0) == 0) {
            label = 704;
            break;
          }
          if ((_strncmp($1, 490200, 5) | 0) == 0) {
            var $_0 = 2;
            break L841;
          }
          if ((_strncmp($1, 489044, 5) | 0) == 0) {
            var $_0 = 2;
            break L841;
          }
          if ((_strncmp($1, 487612, 9) | 0) == 0) {
            var $_0 = 7;
            break L841;
          }
          if ((_strncmp($1, 486900, 9) | 0) == 0) {
            var $_0 = 8;
            break L841;
          }
          if ((_strncmp($1, 485996, 11) | 0) == 0) {
            var $_0 = 9;
            break L841;
          } else {
            break;
          }
        }
      } while (0);
      do {
        if (label == 704) {
          var $14 = HEAP8[$1 + 8 | 0] << 24 >> 24;
          if (($14 | 0) == 68) {
            var $_0 = 8;
            break L841;
          } else if (($14 | 0) == 83) {
            var $_0 = 6;
            break L841;
          } else if (($14 | 0) == 82) {
            var $_0 = 5;
            break L841;
          } else if (($14 | 0) == 67) {
            var $_0 = 3;
            break L841;
          } else if (($14 | 0) == 75) {
            var $_0 = 4;
            break L841;
          } else {
            break;
          }
        }
      } while (0);
      var $_0 = 10;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _otrl_proto_message_version($message) {
  var $1 = _strstr($message, 475784);
  do {
    if (($1 | 0) == 0) {
      var $_0 = 0;
    } else {
      if ((_strncmp($1, 466824, 8) | 0) == 0) {
        var $_0 = 3;
        break;
      }
      if ((_strncmp($1, 464916, 8) | 0) == 0) {
        var $_0 = 2;
        break;
      }
      var $_0 = (_strncmp($1, 485120, 8) | 0) == 0 & 1;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _otrl_proto_instance($otrmsg, $instance_from, $instance_to) {
  do {
    if (($otrmsg | 0) != 0) {
      if ((_strncmp($otrmsg, 466824, 8) | 0) != 0) {
        break;
      }
      if (_strlen($otrmsg) >>> 0 < 21) {
        break;
      }
      var $9 = _malloc(9);
      var $11 = _otrl_base64_decode($9, $otrmsg + 9 | 0, 12);
      if ($11 >>> 0 < 4) {
        break;
      }
      HEAP32[$instance_from >> 2] = HEAPU8[$9 + 1 | 0] << 16 | HEAPU8[$9] << 24 | HEAPU8[$9 + 3 | 0] | HEAPU8[$9 + 2 | 0] << 8;
      if (($11 - 4 | 0) >>> 0 < 4) {
        break;
      }
      HEAP32[$instance_to >> 2] = HEAPU8[$9 + 5 | 0] << 16 | HEAPU8[$9 + 4 | 0] << 24 | HEAPU8[$9 + 7 | 0] | HEAPU8[$9 + 6 | 0] << 8;
      _free($9);
      var $_0 = _gcry_error70(0);
      var $_0;
      return $_0;
    }
  } while (0);
  var $_0 = _gcry_error70(55);
  var $_0;
  return $_0;
}
_otrl_proto_instance["X"] = 1;
function _otrl_proto_create_data($encmessagep, $context, $msg, $tlvs, $flags, $extrakey) {
  var $200$s2;
  var $186$s2;
  var $75$s2;
  var $59$s2;
  var $5$s2;
  var $pubkeylen$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $pubkeylen = __stackBase__, $pubkeylen$s2 = $pubkeylen >> 2;
  var $1 = _strlen($msg);
  var $2 = $1 + 1 | 0;
  var $4 = $2 + _otrl_tlv_seriallen($tlvs) | 0;
  var $5$s2 = ($context + 8 | 0) >> 2;
  var $6 = HEAP32[$5$s2];
  var $7 = $6 + 308 | 0;
  var $10 = HEAP32[$6 + 564 >> 2] * 20 & -1;
  var $12 = HEAP32[$context + 280 >> 2];
  do {
    if ((HEAP32[$context + 48 >> 2] | 0) == 1) {
      if ((HEAP32[$6 + 12 >> 2] | 0) == 0) {
        break;
      }
      var $23 = _gcry_malloc_secure($2);
      if (($23 | 0) == 0) {
        var $_0 = _gcry_error70(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      _strcpy($23, $msg);
      HEAP32[$encmessagep >> 2] = 0;
      var $29 = ($12 | 0) == 3;
      _gcry_mpi_print(5, 0, 0, $pubkeylen, HEAP32[HEAP32[$5$s2] + 36 >> 2]);
      var $42 = $4 + $10 + ($29 ? 11 : 3) + (($12 - 2 | 0) >>> 0 < 2 & 1) + HEAP32[$pubkeylen$s2] + 24 | 0;
      var $43 = $42 + 24 | 0;
      var $44 = _malloc($43);
      var $45 = _gcry_malloc_secure($4);
      if (($44 | 0) == 0 | ($45 | 0) == 0) {
        _free($44);
        _gcry_free($45);
        _gcry_free($23);
        var $_0 = _gcry_error70(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      _memcpy($45, $23, $1);
      HEAP8[$45 + $1 | 0] = 0;
      _otrl_tlv_serialize($45 + $2 | 0, $tlvs);
      if (($12 | 0) == 1) {
        HEAP8[$44] = HEAP8[484188];
        HEAP8[$44 + 1] = HEAP8[484189];
        HEAP8[$44 + 2] = HEAP8[484190];
      } else if (($12 | 0) == 2) {
        HEAP8[$44] = HEAP8[483572];
        HEAP8[$44 + 1] = HEAP8[483573];
        HEAP8[$44 + 2] = HEAP8[483574];
      } else {
        HEAP8[$44] = HEAP8[482624];
        HEAP8[$44 + 1] = HEAP8[482625];
        HEAP8[$44 + 2] = HEAP8[482626];
      }
      var $57 = $44 + 3 | 0;
      var $58 = $42 + 21 | 0;
      do {
        if ($29) {
          var $59$s2 = ($context + 40 | 0) >> 2;
          HEAP8[$57] = HEAP32[$59$s2] >>> 24 & 255;
          HEAP8[$44 + 4 | 0] = HEAP32[$59$s2] >>> 16 & 255;
          HEAP8[$44 + 5 | 0] = HEAP32[$59$s2] >>> 8 & 255;
          HEAP8[$44 + 6 | 0] = HEAP32[$59$s2] & 255;
          var $75$s2 = ($context + 44 | 0) >> 2;
          HEAP8[$44 + 7 | 0] = HEAP32[$75$s2] >>> 24 & 255;
          HEAP8[$44 + 8 | 0] = HEAP32[$75$s2] >>> 16 & 255;
          HEAP8[$44 + 9 | 0] = HEAP32[$75$s2] >>> 8 & 255;
          HEAP8[$44 + 10 | 0] = HEAP32[$75$s2] & 255;
          var $bufp_015 = $44 + 11 | 0;
          var $lenp_016 = $42 + 13 | 0;
          label = 745;
          break;
        } else {
          if (($12 - 2 | 0) >>> 0 < 2) {
            var $bufp_015 = $57;
            var $lenp_016 = $58;
            label = 745;
            break;
          } else {
            var $lenp_1 = $58;
            var $bufp_1 = $57;
            break;
          }
        }
      } while (0);
      if (label == 745) {
        var $lenp_016;
        var $bufp_015;
        HEAP8[$bufp_015] = $flags;
        var $lenp_1 = $lenp_016 - 1 | 0;
        var $bufp_1 = $bufp_015 + 1 | 0;
      }
      var $bufp_1;
      var $lenp_1;
      HEAP8[$bufp_1] = (HEAP32[HEAP32[$5$s2] + 24 >> 2] - 1 | 0) >>> 24 & 255;
      HEAP8[$bufp_1 + 1 | 0] = (HEAP32[HEAP32[$5$s2] + 24 >> 2] + 16777215 | 0) >>> 16 & 255;
      HEAP8[$bufp_1 + 2 | 0] = (HEAP32[HEAP32[$5$s2] + 24 >> 2] + 65535 | 0) >>> 8 & 255;
      HEAP8[$bufp_1 + 3 | 0] = HEAP32[HEAP32[$5$s2] + 24 >> 2] + 255 & 255;
      HEAP8[$bufp_1 + 4 | 0] = HEAP32[HEAP32[$5$s2] + 12 >> 2] >>> 24 & 255;
      HEAP8[$bufp_1 + 5 | 0] = HEAP32[HEAP32[$5$s2] + 12 >> 2] >>> 16 & 255;
      HEAP8[$bufp_1 + 6 | 0] = HEAP32[HEAP32[$5$s2] + 12 >> 2] >>> 8 & 255;
      HEAP8[$bufp_1 + 7 | 0] = HEAP32[HEAP32[$5$s2] + 12 >> 2] & 255;
      HEAP8[$bufp_1 + 8 | 0] = HEAP32[$pubkeylen$s2] >>> 24 & 255;
      HEAP8[$bufp_1 + 9 | 0] = HEAP32[$pubkeylen$s2] >>> 16 & 255;
      HEAP8[$bufp_1 + 10 | 0] = HEAP32[$pubkeylen$s2] >>> 8 & 255;
      HEAP8[$bufp_1 + 11 | 0] = HEAP32[$pubkeylen$s2] & 255;
      var $163 = $lenp_1 - 12 | 0;
      _gcry_mpi_print(5, $bufp_1 + 12 | 0, $163, 0, HEAP32[HEAP32[$5$s2] + 36 >> 2]);
      var $168 = HEAP32[$pubkeylen$s2];
      var $170 = $7 | 0;
      _otrl_dh_incctr($170);
      var $171 = $7;
      var $172 = $168 + ($bufp_1 + 12) | 0;
      var $st$91$0 = $171 | 0;
      var $st$91$1 = $171 + 4 | 0;
      var $173$1 = HEAPU8[$st$91$1] | HEAPU8[$st$91$1 + 1] << 8 | HEAPU8[$st$91$1 + 2] << 16 | HEAPU8[$st$91$1 + 3] << 24 | 0;
      var $st$95$0 = $172 | 0;
      tempBigInt = HEAPU8[$st$91$0] | HEAPU8[$st$91$0 + 1] << 8 | HEAPU8[$st$91$0 + 2] << 16 | HEAPU8[$st$91$0 + 3] << 24 | 0;
      HEAP8[$st$95$0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$95$0 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$95$0 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$95$0 + 3] = tempBigInt & 255;
      var $st$95$1 = $172 + 4 | 0;
      tempBigInt = $173$1;
      HEAP8[$st$95$1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$95$1 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$95$1 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$95$1 + 3] = tempBigInt & 255;
      HEAP8[$168 + ($bufp_1 + 20) | 0] = $4 >>> 24 & 255;
      HEAP8[$168 + ($bufp_1 + 21) | 0] = $4 >>> 16 & 255;
      HEAP8[$168 + ($bufp_1 + 22) | 0] = $4 >>> 8 & 255;
      HEAP8[$168 + ($bufp_1 + 23) | 0] = $4 & 255;
      var $_sum7 = $168 + 24 | 0;
      var $185 = $bufp_1 + $_sum7 | 0;
      var $186$s2 = ($6 + 340 | 0) >> 2;
      var $188 = _gcry_cipher_ctl(HEAP32[$186$s2], 4, 0, 0);
      do {
        if (($188 | 0) == 0) {
          var $192 = _gcry_cipher_setctr(HEAP32[$186$s2], $170, 16);
          if (($192 | 0) != 0) {
            var $err_0 = $192;
            break;
          }
          var $196 = _gcry_cipher_encrypt(HEAP32[$186$s2], $185, $4, $45, $4);
          if (($196 | 0) != 0) {
            var $err_0 = $196;
            break;
          }
          var $_sum8 = $_sum7 + $4 | 0;
          var $199 = $bufp_1 + $_sum8 | 0;
          var $200$s2 = ($6 + 348 | 0) >> 2;
          _gcry_md_reset(HEAP32[$200$s2]);
          _gcry_md_write(HEAP32[$200$s2], $44, $199 - $44 | 0);
          _memmove($199, _gcry_md_read(HEAP32[$200$s2], 2), 20, 1, 0);
          HEAP8[$_sum8 + ($bufp_1 + 20) | 0] = $10 >>> 24 & 255;
          HEAP8[$_sum8 + ($bufp_1 + 21) | 0] = $10 >>> 16 & 255;
          HEAP8[$_sum8 + ($bufp_1 + 22) | 0] = $10 >>> 8 & 255;
          HEAP8[$_sum8 + ($bufp_1 + 23) | 0] = $10 & 255;
          var $221 = -36 - $4 + $163 - $168 | 0;
          if (($10 | 0) == 0) {
            var $lenp_2 = $221;
          } else {
            _memmove($_sum8 + ($bufp_1 + 24) | 0, HEAP32[HEAP32[$5$s2] + 568 >> 2], $10, 1, 0);
            _free(HEAP32[HEAP32[$5$s2] + 568 >> 2]);
            HEAP32[HEAP32[$5$s2] + 568 >> 2] = 0;
            HEAP32[HEAP32[$5$s2] + 564 >> 2] = 0;
            var $lenp_2 = $221 - $10 | 0;
          }
          var $lenp_2;
          if (($lenp_2 | 0) != 0) {
            ___assert_func(481936, 600, 493588, 481436);
          }
          var $242 = Math.floor((($42 + 26 | 0) >>> 0) / 3) << 2;
          var $244 = _malloc($242 + 7 | 0);
          if (($244 | 0) == 0) {
            var $err_0 = _gcry_error70(32854);
            break;
          }
          HEAP8[$244] = HEAP8[480300];
          HEAP8[$244 + 1] = HEAP8[480301];
          HEAP8[$244 + 2] = HEAP8[480302];
          HEAP8[$244 + 3] = HEAP8[480303];
          HEAP8[$244 + 4] = HEAP8[480304];
          _otrl_base64_encode($244 + 5 | 0, $44, $43);
          HEAP8[$242 + ($244 + 5) | 0] = 46;
          HEAP8[$242 + ($244 + 6) | 0] = 0;
          _free($44);
          _gcry_free($45);
          HEAP32[$encmessagep >> 2] = $244;
          _gcry_free(HEAP32[HEAP32[$5$s2] + 584 >> 2]);
          HEAP32[HEAP32[$5$s2] + 584 >> 2] = 0;
          HEAP32[HEAP32[$5$s2] + 588 >> 2] = 0;
          do {
            if (($4 | 0) != 0) {
              var $264 = _gcry_malloc_secure($2);
              HEAP32[HEAP32[$5$s2] + 584 >> 2] = $264;
              var $269 = HEAP32[HEAP32[$5$s2] + 584 >> 2];
              if (($269 | 0) == 0) {
                break;
              }
              _strcpy($269, $23);
            }
          } while (0);
          _gcry_free($23);
          if (($extrakey | 0) != 0) {
            _memmove($extrakey, $6 + 404 | 0, 32, 1, 0);
          }
          var $_0 = _gcry_error70(0);
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        } else {
          var $err_0 = $188;
        }
      } while (0);
      var $err_0;
      _free($44);
      _gcry_free($45);
      _gcry_free($23);
      HEAP32[$encmessagep >> 2] = 0;
      var $_0 = $err_0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $_0 = _gcry_error70(70);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_proto_create_data["X"] = 1;
function _otrl_proto_data_read_flags($datamsg, $flagsp) {
  var $1 = ($flagsp | 0) != 0;
  if ($1) {
    HEAP8[$flagsp] = 0;
  }
  var $4 = _strstr($datamsg, 480300);
  L928 : do {
    if (($4 | 0) == 0) {
      var $rawmsg_0 = 0;
    } else {
      var $7 = _strchr($4, 46);
      if (($7 | 0) == 0) {
        var $msglen_0 = _strlen($4);
      } else {
        var $msglen_0 = $7 - $4 | 0;
      }
      var $msglen_0;
      var $18 = (($msglen_0 - 2 | 0) >>> 2) * 3 & -1;
      var $19 = _malloc($18);
      if (!(($19 | 0) != 0 | ($18 | 0) == 0)) {
        var $_0 = _gcry_error70(32854);
        var $_0;
        return $_0;
      }
      var $27 = _otrl_base64_decode($19, $4 + 5 | 0, $msglen_0 - 5 | 0);
      if ($27 >>> 0 < 3) {
        var $rawmsg_0 = $19;
        break;
      }
      var $31 = HEAP8[$19 + 1 | 0];
      if (HEAP8[$19] << 24 >> 24 != 0) {
        var $rawmsg_0 = $19;
        break;
      }
      if (HEAP8[$19 + 2 | 0] << 24 >> 24 != 3) {
        var $rawmsg_0 = $19;
        break;
      }
      if (($31 - 1 & 255) >= 3) {
        var $rawmsg_0 = $19;
        break;
      }
      var $40 = $19 + 3 | 0;
      var $41 = $27 - 3 | 0;
      if ($31 << 24 >> 24 == 3) {
        if ($41 >>> 0 < 8) {
          var $rawmsg_0 = $19;
          break;
        }
        var $lenp_0 = $27 - 11 | 0;
        var $bufp_0 = $19 + 11 | 0;
      } else {
        var $lenp_0 = $41;
        var $bufp_0 = $40;
      }
      var $bufp_0;
      var $lenp_0;
      do {
        if (($31 - 2 & 255) < 2) {
          if (($lenp_0 | 0) == 0) {
            var $rawmsg_0 = $19;
            break L928;
          }
          if (!$1) {
            break;
          }
          HEAP8[$flagsp] = HEAP8[$bufp_0];
        }
      } while (0);
      _free($19);
      var $_0 = _gcry_error70(0);
      var $_0;
      return $_0;
    }
  } while (0);
  var $rawmsg_0;
  _free($rawmsg_0);
  var $_0 = _gcry_error70(55);
  var $_0;
  return $_0;
}
_otrl_proto_data_read_flags["X"] = 1;
function _otrl_proto_accept_data($plaintextp, $tlvsp, $context, $datamsg, $flagsp, $extrakey) {
  var $243$s2;
  var $225$s2;
  var $218$s2;
  var $198$s2;
  var $197$s2;
  var $ctr$s2;
  var $sender_next_y$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $sender_next_y = __stackBase__, $sender_next_y$s2 = $sender_next_y >> 2;
  var $ctr = __stackBase__ + 4, $ctr$s2 = $ctr >> 2;
  var $givenmac = __stackBase__ + 12;
  HEAP32[$sender_next_y$s2] = 0;
  HEAP32[$plaintextp >> 2] = 0;
  HEAP32[$tlvsp >> 2] = 0;
  var $1 = ($flagsp | 0) != 0;
  if ($1) {
    HEAP8[$flagsp] = 0;
  }
  var $4 = _strstr($datamsg, 480300);
  L958 : do {
    if (($4 | 0) == 0) {
      var $data_0 = 0;
      var $rawmsg_0 = 0;
      label = 848;
    } else {
      var $7 = _strchr($4, 46);
      if (($7 | 0) == 0) {
        var $msglen_0 = _strlen($4);
      } else {
        var $msglen_0 = $7 - $4 | 0;
      }
      var $msglen_0;
      var $18 = (($msglen_0 - 2 | 0) >>> 2) * 3 & -1;
      var $19 = _malloc($18);
      if (!(($19 | 0) != 0 | ($18 | 0) == 0)) {
        var $data_1 = 0;
        var $rawmsg_1 = $19;
        var $err_0 = _gcry_error70(32854);
        break;
      }
      var $27 = _otrl_base64_decode($19, $4 + 5 | 0, $msglen_0 - 5 | 0);
      if ($27 >>> 0 < 3) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $31 = HEAP8[$19 + 1 | 0];
      if (HEAP8[$19] << 24 >> 24 != 0) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      if (HEAP8[$19 + 2 | 0] << 24 >> 24 != 3) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      if (($31 - 1 & 255) >= 3) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $40 = $19 + 3 | 0;
      var $41 = $27 - 3 | 0;
      if ($31 << 24 >> 24 == 3) {
        if ($41 >>> 0 < 8) {
          var $data_0 = 0;
          var $rawmsg_0 = $19;
          label = 848;
          break;
        }
        var $bufp_0 = $19 + 11 | 0;
        var $lenp_0 = $27 - 11 | 0;
      } else {
        var $bufp_0 = $40;
        var $lenp_0 = $41;
      }
      var $lenp_0;
      var $bufp_0;
      if (($31 - 2 & 255) < 2) {
        if (($lenp_0 | 0) == 0) {
          var $data_0 = 0;
          var $rawmsg_0 = $19;
          label = 848;
          break;
        }
        if ($1) {
          HEAP8[$flagsp] = HEAP8[$bufp_0];
        }
        var $bufp_1 = $bufp_0 + 1 | 0;
        var $lenp_1 = $lenp_0 - 1 | 0;
      } else {
        var $bufp_1 = $bufp_0;
        var $lenp_1 = $lenp_0;
      }
      var $lenp_1;
      var $bufp_1;
      if ($lenp_1 >>> 0 < 4) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $76 = HEAPU8[$bufp_1 + 1 | 0] << 16 | HEAPU8[$bufp_1] << 24 | HEAPU8[$bufp_1 + 3 | 0] | HEAPU8[$bufp_1 + 2 | 0] << 8;
      if (($lenp_1 - 4 | 0) >>> 0 < 4) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $97 = HEAPU8[$bufp_1 + 5 | 0] << 16 | HEAPU8[$bufp_1 + 4 | 0] << 24 | HEAPU8[$bufp_1 + 7 | 0] | HEAPU8[$bufp_1 + 6 | 0] << 8;
      if (($lenp_1 - 8 | 0) >>> 0 < 4) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $118 = HEAPU8[$bufp_1 + 9 | 0] << 16 | HEAPU8[$bufp_1 + 8 | 0] << 24 | HEAPU8[$bufp_1 + 11 | 0] | HEAPU8[$bufp_1 + 10 | 0] << 8;
      var $119 = $bufp_1 + 12 | 0;
      var $120 = $lenp_1 - 12 | 0;
      if (($118 | 0) == 0) {
        HEAP32[$sender_next_y$s2] = _gcry_mpi_set_ui(0, 0);
      } else {
        if ($120 >>> 0 < $118 >>> 0) {
          var $data_0 = 0;
          var $rawmsg_0 = $19;
          label = 848;
          break;
        }
        _gcry_mpi_scan($sender_next_y, 5, $119, $118, 0);
      }
      var $129 = $120 - $118 | 0;
      if ($129 >>> 0 < 8) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $133 = $ctr;
      var $134 = $118 + ($bufp_1 + 12) | 0;
      var $st$4$0 = $134 | 0;
      var $st$4$1 = $134 + 4 | 0;
      var $135$1 = HEAPU8[$st$4$1] | HEAPU8[$st$4$1 + 1] << 8 | HEAPU8[$st$4$1 + 2] << 16 | HEAPU8[$st$4$1 + 3] << 24 | 0;
      HEAP32[$ctr$s2] = HEAPU8[$st$4$0] | HEAPU8[$st$4$0 + 1] << 8 | HEAPU8[$st$4$0 + 2] << 16 | HEAPU8[$st$4$0 + 3] << 24 | 0;
      HEAP32[$ctr$s2 + 1] = $135$1;
      if (($129 - 8 | 0) >>> 0 < 4) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $156 = HEAPU8[$118 + ($bufp_1 + 21) | 0] << 16 | HEAPU8[$118 + ($bufp_1 + 20) | 0] << 24 | HEAPU8[$118 + ($bufp_1 + 23) | 0] | HEAPU8[$118 + ($bufp_1 + 22) | 0] << 8;
      var $_sum5 = $118 + 24 | 0;
      var $158 = $129 - 12 | 0;
      if ($158 >>> 0 < $156 >>> 0) {
        var $data_0 = 0;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $162 = _malloc($156 + 1 | 0);
      if (($162 | 0) == 0) {
        var $data_1 = 0;
        var $rawmsg_1 = $19;
        var $err_0 = _gcry_error70(32854);
        break;
      }
      _memmove($162, $bufp_1 + $_sum5 | 0, $156, 1, 0);
      var $167 = $162 + $156 | 0;
      HEAP8[$167] = 0;
      var $_sum6 = $156 + $_sum5 | 0;
      var $168 = $bufp_1 + $_sum6 | 0;
      var $169 = $158 - $156 | 0;
      if ($169 >>> 0 < 20) {
        var $data_0 = $162;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $172 = $givenmac | 0;
      _memmove($172, $168, 20, 1, 0);
      if (($169 - 20 | 0) >>> 0 < 4) {
        var $data_0 = $162;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      if (($169 - 24 | 0) != (HEAPU8[$_sum6 + ($bufp_1 + 21) | 0] << 16 | HEAPU8[$_sum6 + ($bufp_1 + 20) | 0] << 24 | HEAPU8[$_sum6 + ($bufp_1 + 23) | 0] | HEAPU8[$_sum6 + ($bufp_1 + 22) | 0] << 8 | 0)) {
        var $data_0 = $162;
        var $rawmsg_0 = $19;
        label = 848;
        break;
      }
      var $197$s2 = ($context + 8 | 0) >> 2;
      var $198$s2 = HEAP32[$197$s2] >> 2;
      var $200 = HEAP32[$198$s2 + 3];
      do {
        if (($200 | 0) != 0) {
          var $205 = ($76 | 0) == ($200 - 1 | 0);
          if (!(($76 | 0) == ($200 | 0) | $205)) {
            break;
          }
          var $208 = HEAP32[$198$s2 + 6];
          if (($97 | 0) != ($208 - 1 | 0) & ($97 | 0) != ($208 | 0) | ($76 | 0) == 0 | ($97 | 0) == 0) {
            break;
          }
          if ($205) {
            if ((HEAP32[$198$s2 + 5] | 0) == 0) {
              break;
            }
          }
          var $218 = HEAP32[$197$s2], $218$s2 = $218 >> 2;
          var $221 = HEAP32[$218$s2 + 3] - $76 | 0;
          var $224 = HEAP32[$218$s2 + 6] - $97 | 0;
          var $225$s2 = (($224 << 8) + ($221 << 7) + $218 + 120 | 0) >> 2;
          _gcry_md_reset(HEAP32[$225$s2]);
          _gcry_md_write(HEAP32[$225$s2], $19, $168 - $19 | 0);
          if ((_memcmp($172, _gcry_md_read(HEAP32[$225$s2], 2), 20) | 0) != 0) {
            break;
          }
          HEAP32[(($224 << 8) + ($221 << 7) + 144 >> 2) + $218$s2] = 1;
          var $237 = ($224 << 8) + ($221 << 7) + $218 + 68 | 0;
          if ((_otrl_dh_cmpctr($133, $237) | 0) < 1) {
            break;
          }
          var $241 = $237;
          var $242$1 = HEAP32[$ctr$s2 + 1];
          var $st$5$0 = $241 | 0;
          tempBigInt = HEAP32[$ctr$s2];
          HEAP8[$st$5$0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$0 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$0 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$0 + 3] = tempBigInt & 255;
          var $st$5$1 = $241 + 4 | 0;
          tempBigInt = $242$1;
          HEAP8[$st$5$1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$1 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$1 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$1 + 3] = tempBigInt & 255;
          var $243$s2 = (($224 << 8) + ($221 << 7) + $218 + 88 | 0) >> 2;
          var $245 = _gcry_cipher_ctl(HEAP32[$243$s2], 4, 0, 0);
          if (($245 | 0) != 0) {
            var $data_1 = $162;
            var $rawmsg_1 = $19;
            var $err_0 = $245;
            break L958;
          }
          var $249 = _gcry_cipher_setctr(HEAP32[$243$s2], $237, 16);
          if (($249 | 0) != 0) {
            var $data_1 = $162;
            var $rawmsg_1 = $19;
            var $err_0 = $249;
            break L958;
          }
          var $253 = _gcry_cipher_decrypt(HEAP32[$243$s2], $162, $156, 0, 0);
          if (($253 | 0) != 0) {
            var $data_1 = $162;
            var $rawmsg_1 = $19;
            var $err_0 = $253;
            break L958;
          }
          if (($extrakey | 0) != 0) {
            _memmove($extrakey, ($224 << 8) + ($221 << 7) + $218 + 148 | 0, 32, 1, 0);
          }
          if (($97 | 0) == (HEAP32[HEAP32[$197$s2] + 24 >> 2] | 0)) {
            var $265 = _rotate_dh_keys($context);
            if (($265 | 0) != 0) {
              var $data_1 = $162;
              var $rawmsg_1 = $19;
              var $err_0 = $265;
              break L958;
            }
          }
          if (($76 | 0) == (HEAP32[HEAP32[$197$s2] + 12 >> 2] | 0)) {
            var $274 = _rotate_y_keys($context, HEAP32[$sender_next_y$s2]);
            if (($274 | 0) != 0) {
              var $data_1 = $162;
              var $rawmsg_1 = $19;
              var $err_0 = $274;
              break L958;
            }
          }
          _gcry_mpi_release(HEAP32[$sender_next_y$s2]);
          HEAP32[$plaintextp >> 2] = $162;
          var $nul_0 = $162;
          while (1) {
            var $nul_0;
            var $279 = $nul_0 >>> 0 < $167 >>> 0;
            if (!$279) {
              break;
            }
            if (HEAP8[$nul_0] << 24 >> 24 == 0) {
              break;
            } else {
              var $nul_0 = $nul_0 + 1 | 0;
            }
          }
          var $_nul_0 = $279 ? $nul_0 + 1 | 0 : $nul_0;
          HEAP32[$tlvsp >> 2] = _otrl_tlv_parse($_nul_0, $167 - $_nul_0 | 0);
          _free($19);
          var $_0 = _gcry_error70(0);
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      var $data_1 = $162;
      var $rawmsg_1 = $19;
      var $err_0 = _gcry_error70(70);
      break;
    }
  } while (0);
  if (label == 848) {
    var $rawmsg_0;
    var $data_0;
    var $data_1 = $data_0;
    var $rawmsg_1 = $rawmsg_0;
    var $err_0 = _gcry_error70(55);
  }
  var $err_0;
  var $rawmsg_1;
  var $data_1;
  _gcry_mpi_release(HEAP32[$sender_next_y$s2]);
  _free($data_1);
  _free($rawmsg_1);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_proto_accept_data["X"] = 1;
function _rotate_dh_keys($context) {
  var $8$s2;
  var $6$s2;
  var $1$s2;
  var $1$s2 = ($context + 8 | 0) >> 2;
  _otrl_dh_keypair_free(HEAP32[$1$s2] + 40 | 0);
  var $4 = HEAP32[$1$s2];
  var $6$s2 = ($4 + 40 | 0) >> 2;
  var $8$s2 = ($4 + 28 | 0) >> 2;
  HEAP32[$6$s2] = HEAP32[$8$s2];
  HEAP32[$6$s2 + 1] = HEAP32[$8$s2 + 1];
  HEAP32[$6$s2 + 2] = HEAP32[$8$s2 + 2];
  var $9 = HEAP32[$1$s2];
  var $12 = _reveal_macs($context, $9 + 308 | 0, $9 + 436 | 0);
  if (($12 | 0) != 0) {
    var $_0 = $12;
    var $_0;
    return $_0;
  }
  _otrl_dh_session_free(HEAP32[$1$s2] + 308 | 0);
  _otrl_dh_session_free(HEAP32[$1$s2] + 436 | 0);
  var $19 = HEAP32[$1$s2];
  var $20 = $19 + 308 | 0;
  var $21 = $19 + 52 | 0;
  for (var $$src = $21 >> 2, $$dest = $20 >> 2, $$stop = $$src + 32; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $22 = HEAP32[$1$s2];
  var $23 = $22 + 436 | 0;
  var $24 = $22 + 180 | 0;
  for (var $$src = $24 >> 2, $$dest = $23 >> 2, $$stop = $$src + 32; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  _otrl_dh_gen_keypair(5, HEAP32[$1$s2] + 28 | 0);
  var $29 = HEAP32[$1$s2] + 24 | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2] + 1 | 0;
  var $32 = HEAP32[$1$s2];
  var $34 = HEAP32[$32 + 16 >> 2];
  var $36 = $32 + 52 | 0;
  do {
    if (($34 | 0) == 0) {
      _otrl_dh_session_blank($36);
    } else {
      var $39 = _otrl_dh_session($36, $32 + 28 | 0, $34);
      if (($39 | 0) == 0) {
        break;
      } else {
        var $_0 = $39;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $43 = HEAP32[$1$s2];
  var $45 = HEAP32[$43 + 20 >> 2];
  var $47 = $43 + 180 | 0;
  do {
    if (($45 | 0) == 0) {
      _otrl_dh_session_blank($47);
    } else {
      var $50 = _otrl_dh_session($47, $43 + 28 | 0, $45);
      if (($50 | 0) == 0) {
        break;
      } else {
        var $_0 = $50;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $_0 = _gcry_error70(0);
  var $_0;
  return $_0;
}
_rotate_dh_keys["X"] = 1;
function _rotate_y_keys($context, $new_y) {
  var $1$s2;
  var $1$s2 = ($context + 8 | 0) >> 2;
  _gcry_mpi_release(HEAP32[HEAP32[$1$s2] + 20 >> 2]);
  var $5 = HEAP32[$1$s2];
  HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 16 >> 2];
  var $9 = HEAP32[$1$s2];
  var $12 = _reveal_macs($context, $9 + 180 | 0, $9 + 436 | 0);
  if (($12 | 0) != 0) {
    var $_0 = $12;
    var $_0;
    return $_0;
  }
  _otrl_dh_session_free(HEAP32[$1$s2] + 180 | 0);
  _otrl_dh_session_free(HEAP32[$1$s2] + 436 | 0);
  var $19 = HEAP32[$1$s2];
  var $20 = $19 + 180 | 0;
  var $21 = $19 + 52 | 0;
  for (var $$src = $21 >> 2, $$dest = $20 >> 2, $$stop = $$src + 32; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $22 = HEAP32[$1$s2];
  var $23 = $22 + 436 | 0;
  var $24 = $22 + 308 | 0;
  for (var $$src = $24 >> 2, $$dest = $23 >> 2, $$stop = $$src + 32; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $25 = _gcry_mpi_copy($new_y);
  HEAP32[HEAP32[$1$s2] + 16 >> 2] = $25;
  var $29 = HEAP32[$1$s2] + 12 | 0;
  HEAP32[$29 >> 2] = HEAP32[$29 >> 2] + 1 | 0;
  var $32 = HEAP32[$1$s2];
  var $37 = _otrl_dh_session($32 + 52 | 0, $32 + 28 | 0, HEAP32[$32 + 16 >> 2]);
  if (($37 | 0) != 0) {
    var $_0 = $37;
    var $_0;
    return $_0;
  }
  var $40 = HEAP32[$1$s2];
  var $45 = _otrl_dh_session($40 + 308 | 0, $40 + 40 | 0, HEAP32[$40 + 16 >> 2]);
  if (($45 | 0) != 0) {
    var $_0 = $45;
    var $_0;
    return $_0;
  }
  var $_0 = _gcry_error70(0);
  var $_0;
  return $_0;
}
_rotate_y_keys["X"] = 1;
function _otrl_proto_fragment_accumulate($unfragmessagep, $context, $msg) {
  var $156$s2;
  var $83$s2;
  var $43$s2;
  var $11$s2;
  var $start$s2;
  var $k$s1;
  var $n$s1;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $n = __stackBase__, $n$s1 = $n >> 1;
  var $k = __stackBase__ + 4, $k$s1 = $k >> 1;
  var $start = __stackBase__ + 8, $start$s2 = $start >> 2;
  var $end = __stackBase__ + 12;
  HEAP16[$n$s1] = 0;
  HEAP16[$k$s1] = 0;
  HEAP32[$start$s2] = 0;
  HEAP32[$end >> 2] = 0;
  var $1 = _strstr($msg, 479780);
  do {
    if (($1 | 0) == 0) {
      var $6 = _strstr($msg, 478968);
      if (($6 | 0) != 0) {
        _sscanf($6, 478676, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $k, HEAP32[tempInt + 4 >> 2] = $n, HEAP32[tempInt + 8 >> 2] = $start, HEAP32[tempInt + 12 >> 2] = $end, tempInt));
        var $tag_0 = $6;
        break;
      }
      var $11$s2 = ($context + 8 | 0) >> 2;
      _free(HEAP32[HEAP32[$11$s2] >> 2]);
      HEAP32[HEAP32[$11$s2] >> 2] = 0;
      HEAP32[HEAP32[$11$s2] + 4 >> 2] = 0;
      HEAP16[HEAP32[$11$s2] + 8 >> 1] = 0;
      HEAP16[HEAP32[$11$s2] + 10 >> 1] = 0;
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      _sscanf($1, 479536, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $k, HEAP32[tempInt + 4 >> 2] = $n, HEAP32[tempInt + 8 >> 2] = $start, HEAP32[tempInt + 12 >> 2] = $end, tempInt));
      var $tag_0 = $1;
    }
  } while (0);
  var $tag_0;
  var $24 = HEAP16[$k$s1];
  var $25 = $24 & 65535;
  L1065 : do {
    if ($24 << 16 >> 16 != 0) {
      var $28 = HEAP16[$n$s1];
      if ($28 << 16 >> 16 == 0 | ($24 & 65535) > ($28 & 65535)) {
        break;
      }
      var $32 = HEAP32[$start$s2];
      if (($32 | 0) <= 0) {
        break;
      }
      var $35 = HEAP32[$end >> 2];
      if (!(($35 | 0) > 0 & ($32 | 0) < ($35 | 0))) {
        break;
      }
      if ($24 << 16 >> 16 == 1) {
        var $41 = $35 - $32 | 0;
        var $42 = $41 - 1 | 0;
        var $43$s2 = ($context + 8 | 0) >> 2;
        _free(HEAP32[HEAP32[$43$s2] >> 2]);
        HEAP32[HEAP32[$43$s2] >> 2] = 0;
        if (($35 | 0) != ($32 | 0)) {
          var $51 = _malloc($41);
          HEAP32[HEAP32[$43$s2] >> 2] = $51;
        }
        var $55 = HEAP32[$43$s2];
        var $57 = HEAP32[$55 >> 2];
        if (($57 | 0) == 0) {
          HEAP32[$55 + 4 >> 2] = 0;
          HEAP16[HEAP32[$43$s2] + 8 >> 1] = 0;
          HEAP16[HEAP32[$43$s2] + 10 >> 1] = 0;
          break;
        } else {
          _memmove($57, $tag_0 + HEAP32[$start$s2] | 0, $42, 1, 0);
          HEAP32[HEAP32[$43$s2] + 4 >> 2] = $42;
          var $64 = HEAP32[$43$s2];
          HEAP8[HEAP32[$64 >> 2] + HEAP32[$64 + 4 >> 2] | 0] = 0;
          HEAP16[HEAP32[$43$s2] + 8 >> 1] = HEAP16[$n$s1];
          HEAP16[HEAP32[$43$s2] + 10 >> 1] = HEAP16[$k$s1];
          break;
        }
      }
      var $83$s2 = ($context + 8 | 0) >> 2;
      var $84 = HEAP32[$83$s2];
      do {
        if ($28 << 16 >> 16 == HEAP16[$84 + 8 >> 1] << 16 >> 16) {
          if (($25 | 0) != (HEAPU16[$84 + 10 >> 1] + 1 | 0)) {
            break;
          }
          var $95 = $35 - $32 | 0;
          var $96 = $95 - 1 | 0;
          var $98 = HEAP32[$84 + 4 >> 2];
          var $99 = $98 + $95 | 0;
          do {
            if ($99 >>> 0 > $98 >>> 0) {
              var $106 = _realloc(HEAP32[$84 >> 2], $99);
              var $109 = HEAP32[$83$s2] | 0;
              if (($106 | 0) == 0) {
                var $133 = $109;
                break;
              }
              HEAP32[$109 >> 2] = $106;
              var $111 = HEAP32[$83$s2];
              _memmove(HEAP32[$111 >> 2] + HEAP32[$111 + 4 >> 2] | 0, $tag_0 + HEAP32[$start$s2] | 0, $96, 1, 0);
              var $120 = HEAP32[$83$s2] + 4 | 0;
              HEAP32[$120 >> 2] = HEAP32[$120 >> 2] + $96 | 0;
              var $123 = HEAP32[$83$s2];
              HEAP8[HEAP32[$123 >> 2] + HEAP32[$123 + 4 >> 2] | 0] = 0;
              HEAP16[HEAP32[$83$s2] + 10 >> 1] = HEAP16[$k$s1];
              break L1065;
            } else {
              var $133 = HEAP32[$83$s2] | 0;
            }
          } while (0);
          var $133;
          _free(HEAP32[$133 >> 2]);
          HEAP32[HEAP32[$83$s2] >> 2] = 0;
          HEAP32[HEAP32[$83$s2] + 4 >> 2] = 0;
          HEAP16[HEAP32[$83$s2] + 8 >> 1] = 0;
          HEAP16[HEAP32[$83$s2] + 10 >> 1] = 0;
          break L1065;
        }
      } while (0);
      _free(HEAP32[HEAP32[$83$s2] >> 2]);
      HEAP32[HEAP32[$83$s2] >> 2] = 0;
      HEAP32[HEAP32[$83$s2] + 4 >> 2] = 0;
      HEAP16[HEAP32[$83$s2] + 8 >> 1] = 0;
      HEAP16[HEAP32[$83$s2] + 10 >> 1] = 0;
    }
  } while (0);
  var $156$s2 = ($context + 8 | 0) >> 2;
  var $157 = HEAP32[$156$s2];
  var $159 = HEAP16[$157 + 8 >> 1];
  if ($159 << 16 >> 16 == 0) {
    var $_0 = 1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ($159 << 16 >> 16 != HEAP16[$157 + 10 >> 1] << 16 >> 16) {
    var $_0 = 1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$unfragmessagep >> 2] = HEAP32[$157 >> 2];
  HEAP32[HEAP32[$156$s2] >> 2] = 0;
  HEAP32[HEAP32[$156$s2] + 4 >> 2] = 0;
  HEAP16[HEAP32[$156$s2] + 8 >> 1] = 0;
  HEAP16[HEAP32[$156$s2] + 10 >> 1] = 0;
  var $_0 = 2;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_proto_fragment_accumulate["X"] = 1;
function _gpg_err_make7276($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function _encodeblock($out, $in, $len) {
  var $1 = HEAP8[$in];
  var $2 = $len >>> 0 > 1;
  do {
    if ($2) {
      var $phitmp = HEAPU8[$in + 1 | 0];
      if ($len >>> 0 <= 2) {
        var $12 = 0;
        var $11 = $phitmp;
        var $10 = 0;
        break;
      }
      var $12 = HEAPU8[$in + 2 | 0];
      var $11 = $phitmp;
      var $10 = 1;
    } else {
      var $12 = 0;
      var $11 = 0;
      var $10 = 0;
    }
  } while (0);
  var $10;
  var $11;
  var $12;
  var $13 = $1 & 255;
  HEAP8[$out] = HEAP8[($13 >>> 2) + 459568 | 0];
  HEAP8[$out + 1 | 0] = HEAP8[($11 >>> 4 | $13 << 4 & 48) + 459568 | 0];
  if ($2) {
    var $32 = HEAP8[($11 << 2 & 60 | $12 >>> 6) + 459568 | 0];
  } else {
    var $32 = 61;
  }
  var $32;
  HEAP8[$out + 2 | 0] = $32;
  if (!$10) {
    var $39 = 61;
    var $39;
    var $40 = $out + 3 | 0;
    HEAP8[$40] = $39;
    return;
  }
  var $39 = HEAP8[($12 & 63) + 459568 | 0];
  var $39;
  var $40 = $out + 3 | 0;
  HEAP8[$40] = $39;
  return;
}
function _decode($out, $in, $b64len) {
  if ($b64len >>> 0 < 2) {
    var $written_2 = 0;
    var $written_2;
    return $written_2;
  }
  var $5 = $in + 1 | 0;
  HEAP8[$out] = (HEAP8[$5] << 24 >> 24 >>> 4 | HEAP8[$in] << 2 & 255) & 255;
  if ($b64len >>> 0 <= 2) {
    var $written_2 = 1;
    var $written_2;
    return $written_2;
  }
  var $15 = $in + 2 | 0;
  HEAP8[$out + 1 | 0] = (HEAP8[$15] << 24 >> 24 >>> 2 | HEAP8[$5] << 4 & 255) & 255;
  if ($b64len >>> 0 <= 3) {
    var $written_2 = 2;
    var $written_2;
    return $written_2;
  }
  HEAP8[$out + 2 | 0] = HEAP8[$15] << 6 | HEAP8[$in + 3 | 0];
  var $written_2 = 3;
  var $written_2;
  return $written_2;
}
function _otrl_dh_keypair_init($kp) {
  HEAP32[$kp >> 2] = 0;
  HEAP32[$kp + 4 >> 2] = 0;
  HEAP32[$kp + 8 >> 2] = 0;
  return;
}
function _otrl_proto_fragment_create($mms, $fragment_count, $fragments, $context, $message) {
  var $8$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $1 = _strlen($message);
  var $5 = (HEAP32[$context + 280 >> 2] | 0) == 3 ? 37 : 19;
  var $7 = _malloc($fragment_count << 2);
  var $8 = $7, $8$s2 = $8 >> 2;
  if (($7 | 0) == 0) {
    var $_0 = _gcry_error70(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $10 = $mms - $5 | 0;
  var $11 = $context + 188 | 0;
  var $12 = $context + 40 | 0;
  var $13 = $context + 44 | 0;
  var $index_0 = 0;
  var $_01 = $message;
  var $indvars_iv11 = 1;
  while (1) {
    var $indvars_iv11;
    var $_01;
    var $index_0;
    var $17 = $indvars_iv11 & 65535;
    if (($17 | 0) > ($fragment_count | 0)) {
      label = 948;
      break;
    }
    var $20 = $1 - $index_0 | 0;
    var $_ = ($20 | 0) < ($10 | 0) ? $20 : $10;
    var $23 = _malloc($_ + 1 | 0);
    if (($23 | 0) == 0) {
      label = 935;
      break;
    }
    _strncpy($23, $_01, $_);
    HEAP8[$23 + $_ | 0] = 0;
    var $37 = $_ + $5 | 0;
    var $39 = _malloc($37 + 1 | 0);
    if (($39 | 0) == 0) {
      label = 940;
      break;
    }
    if ((HEAP32[$11 >> 2] | 0) == 3) {
      var $57 = HEAP32[$13 >> 2];
      _snprintf($39, $37, 478e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = HEAP32[$12 >> 2], HEAP32[tempInt + 4 >> 2] = $57, HEAP32[tempInt + 8 >> 2] = $17, HEAP32[tempInt + 12 >> 2] = $fragment_count, HEAP32[tempInt + 16 >> 2] = $23, tempInt));
    } else {
      _snprintf($39, $37, 478320, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $17, HEAP32[tempInt + 4 >> 2] = $fragment_count, HEAP32[tempInt + 8 >> 2] = $23, tempInt));
    }
    HEAP8[$39 + $37 | 0] = 0;
    HEAP32[($17 - 1 << 2 >> 2) + $8$s2] = $39;
    _free($23);
    var $index_0 = $_ + $index_0 | 0;
    var $_01 = $_01 + $_ | 0;
    var $indvars_iv11 = $indvars_iv11 + 1 & 65535;
  }
  if (label == 935) {
    L1140 : do {
      if (($17 - 1 | 0) > 0) {
        var $28 = ($indvars_iv11 & 65535) - 1 | 0;
        var $i_04 = 0;
        while (1) {
          var $i_04;
          var $30 = $i_04 + 1 | 0;
          _free(HEAP32[($i_04 << 2 >> 2) + $8$s2]);
          if (($30 | 0) == ($28 | 0)) {
            break L1140;
          } else {
            var $i_04 = $30;
          }
        }
      }
    } while (0);
    _free($7);
    var $_0 = _gcry_error70(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 940) {
    L1147 : do {
      if (($17 - 1 | 0) > 0) {
        var $44 = ($indvars_iv11 & 65535) - 1 | 0;
        var $i_12 = 0;
        while (1) {
          var $i_12;
          var $46 = $i_12 + 1 | 0;
          _free(HEAP32[($i_12 << 2 >> 2) + $8$s2]);
          if (($46 | 0) == ($44 | 0)) {
            break L1147;
          } else {
            var $i_12 = $46;
          }
        }
      }
    } while (0);
    _free($7);
    _free($23);
    var $_0 = _gcry_error70(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 948) {
    HEAP32[$fragments >> 2] = $8;
    var $_0 = _gcry_error70(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_otrl_proto_fragment_create["X"] = 1;
function _otrl_proto_fragment_free($fragments, $arraylen) {
  var $1 = HEAP32[$fragments >> 2];
  if (($1 | 0) == 0) {
    return;
  }
  var $3 = $arraylen & 65535;
  L1159 : do {
    if ($arraylen << 16 >> 16 != 0) {
      var $i_01 = 0;
      while (1) {
        var $i_01;
        var $6 = HEAP32[$1 + ($i_01 << 2) >> 2];
        if (($6 | 0) != 0) {
          _free($6);
        }
        var $10 = $i_01 + 1 | 0;
        if (($10 | 0) < ($3 | 0)) {
          var $i_01 = $10;
        } else {
          break L1159;
        }
      }
    }
  } while (0);
  _free($1);
  return;
}
function _reveal_macs($context, $sess1, $sess2) {
  var $16$s2;
  var $1 = $sess1 + 92 | 0;
  var $3 = $sess1 + 64 | 0;
  var $5 = $sess2 + 92 | 0;
  var $7 = $sess2 + 64 | 0;
  var $11 = HEAP32[$3 >> 2] + HEAP32[$1 >> 2] + HEAP32[$5 >> 2] + HEAP32[$7 >> 2] | 0;
  if (($11 | 0) == 0) {
    var $_0 = _gcry_error70(0);
    var $_0;
    return $_0;
  }
  var $16$s2 = ($context + 8 | 0) >> 2;
  var $17 = HEAP32[$16$s2];
  var $24 = _realloc(HEAP32[$17 + 568 >> 2], (HEAP32[$17 + 564 >> 2] + $11) * 20 & -1);
  if (($24 | 0) == 0) {
    var $_0 = _gcry_error70(32854);
    var $_0;
    return $_0;
  }
  if ((HEAP32[$1 >> 2] | 0) != 0) {
    _memmove($24 + (HEAP32[HEAP32[$16$s2] + 564 >> 2] * 20 & -1) | 0, $sess1 + 72 | 0, 20, 1, 0);
    var $39 = HEAP32[$16$s2] + 564 | 0;
    HEAP32[$39 >> 2] = HEAP32[$39 >> 2] + 1 | 0;
  }
  if ((HEAP32[$3 >> 2] | 0) != 0) {
    _memmove($24 + (HEAP32[HEAP32[$16$s2] + 564 >> 2] * 20 & -1) | 0, $sess1 + 44 | 0, 20, 1, 0);
    var $53 = HEAP32[$16$s2] + 564 | 0;
    HEAP32[$53 >> 2] = HEAP32[$53 >> 2] + 1 | 0;
  }
  if ((HEAP32[$5 >> 2] | 0) != 0) {
    _memmove($24 + (HEAP32[HEAP32[$16$s2] + 564 >> 2] * 20 & -1) | 0, $sess2 + 72 | 0, 20, 1, 0);
    var $67 = HEAP32[$16$s2] + 564 | 0;
    HEAP32[$67 >> 2] = HEAP32[$67 >> 2] + 1 | 0;
  }
  if ((HEAP32[$7 >> 2] | 0) != 0) {
    _memmove($24 + (HEAP32[HEAP32[$16$s2] + 564 >> 2] * 20 & -1) | 0, $sess2 + 44 | 0, 20, 1, 0);
    var $81 = HEAP32[$16$s2] + 564 | 0;
    HEAP32[$81 >> 2] = HEAP32[$81 >> 2] + 1 | 0;
  }
  HEAP32[HEAP32[$16$s2] + 568 >> 2] = $24;
  var $_0 = _gcry_error70(0);
  var $_0;
  return $_0;
}
_reveal_macs["X"] = 1;
function _gcry_err_make7175($code) {
  return _gpg_err_make7276($code);
}
function _otrl_base64_encode($base64data, $data, $datalen) {
  L1191 : do {
    if ($datalen >>> 0 > 2) {
      var $base64len_03 = 0;
      var $_024 = $datalen;
      var $_015 = $data;
      var $_06 = $base64data;
      while (1) {
        var $_06;
        var $_015;
        var $_024;
        var $base64len_03;
        _encodeblock($_06, $_015, 3);
        var $2 = $_06 + 4 | 0;
        var $3 = $base64len_03 + 4 | 0;
        var $4 = $_015 + 3 | 0;
        var $5 = $_024 - 3 | 0;
        if ($5 >>> 0 > 2) {
          var $base64len_03 = $3;
          var $_024 = $5;
          var $_015 = $4;
          var $_06 = $2;
        } else {
          var $base64len_0_lcssa = $3;
          var $_02_lcssa = $5;
          var $_01_lcssa = $4;
          var $_0_lcssa = $2;
          break L1191;
        }
      }
    } else {
      var $base64len_0_lcssa = 0;
      var $_02_lcssa = $datalen;
      var $_01_lcssa = $data;
      var $_0_lcssa = $base64data;
    }
  } while (0);
  var $_0_lcssa;
  var $_01_lcssa;
  var $_02_lcssa;
  var $base64len_0_lcssa;
  if (($_02_lcssa | 0) == 0) {
    var $base64len_1 = $base64len_0_lcssa;
    var $base64len_1;
    return $base64len_1;
  }
  _encodeblock($_0_lcssa, $_01_lcssa, $_02_lcssa);
  var $base64len_1 = $base64len_0_lcssa + 4 | 0;
  var $base64len_1;
  return $base64len_1;
}
function _otrl_base64_decode($data, $base64data, $base64len) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $b64 = __stackBase__;
  var $1 = $b64 | 0;
  var $2 = $b64 | 0;
  var $_0_ph_ph = $data;
  var $_01_ph_ph = $base64data;
  var $_02_ph_ph = $base64len;
  var $datalen_0_ph_ph = 0;
  L1200 : while (1) {
    var $datalen_0_ph_ph;
    var $_02_ph_ph;
    var $_01_ph_ph;
    var $_0_ph_ph;
    var $_01_ph6 = $_01_ph_ph;
    var $_02_ph5 = $_02_ph_ph;
    var $datalen_0_ph4 = $datalen_0_ph_ph;
    L1202 : while (1) {
      var $datalen_0_ph4;
      var $_02_ph5;
      var $_01_ph6;
      var $_01 = $_01_ph6;
      var $_02 = $_02_ph5;
      while (1) {
        var $_02;
        var $_01;
        if (($_02 | 0) == 0) {
          var $datalen_0_ph4_lcssa18 = $datalen_0_ph4;
          label = 1022;
          break L1200;
        }
        var $5 = HEAP8[$_01];
        var $6 = $_01 + 1 | 0;
        var $7 = $_02 - 1 | 0;
        if (($5 - 43 & 255) > 79) {
          var $_01 = $6;
          var $_02 = $7;
          continue;
        }
        if ($5 << 24 >> 24 == 61) {
          break;
        }
        var $18 = HEAP8[($5 << 24 >> 24) - 43 + 459484 | 0];
        if ($18 << 24 >> 24 == 36) {
          var $_01 = $6;
          var $_02 = $7;
        } else {
          break L1202;
        }
      }
      var $_01_ph6 = $6;
      var $_02_ph5 = 0;
      var $datalen_0_ph4 = _decode($_0_ph_ph, $1, 0) + $datalen_0_ph4 | 0;
    }
    HEAP8[$b64 | 0] = $18 - 62 & 255;
    var $_01_ph6_1 = $6;
    var $_02_ph5_1 = $7;
    var $datalen_0_ph4_1 = $datalen_0_ph4;
    L1211 : while (1) {
      var $datalen_0_ph4_1;
      var $_02_ph5_1;
      var $_01_ph6_1;
      var $_01_1 = $_01_ph6_1;
      var $_02_1 = $_02_ph5_1;
      while (1) {
        var $_02_1;
        var $_01_1;
        if (($_02_1 | 0) == 0) {
          var $datalen_0_ph4_lcssa18 = $datalen_0_ph4_1;
          label = 1019;
          break L1200;
        }
        var $25 = HEAP8[$_01_1];
        var $26 = $_01_1 + 1 | 0;
        var $27 = $_02_1 - 1 | 0;
        if (($25 - 43 & 255) > 79) {
          var $_01_1 = $26;
          var $_02_1 = $27;
          continue;
        }
        if ($25 << 24 >> 24 == 61) {
          break;
        }
        var $35 = HEAP8[($25 << 24 >> 24) - 43 + 459484 | 0];
        if ($35 << 24 >> 24 == 36) {
          var $_01_1 = $26;
          var $_02_1 = $27;
        } else {
          break L1211;
        }
      }
      var $_01_ph6_1 = $26;
      var $_02_ph5_1 = 0;
      var $datalen_0_ph4_1 = _decode($_0_ph_ph, $1, 1) + $datalen_0_ph4_1 | 0;
    }
    HEAP8[$b64 + 1 | 0] = $35 - 62 & 255;
    var $_01_ph6_2 = $26;
    var $_02_ph5_2 = $27;
    var $datalen_0_ph4_2 = $datalen_0_ph4_1;
    L1220 : while (1) {
      var $datalen_0_ph4_2;
      var $_02_ph5_2;
      var $_01_ph6_2;
      var $_01_2 = $_01_ph6_2;
      var $_02_2 = $_02_ph5_2;
      while (1) {
        var $_02_2;
        var $_01_2;
        if (($_02_2 | 0) == 0) {
          var $datalen_0_ph4_lcssa18 = $datalen_0_ph4_2;
          label = 1020;
          break L1200;
        }
        var $44 = HEAP8[$_01_2];
        var $45 = $_01_2 + 1 | 0;
        var $46 = $_02_2 - 1 | 0;
        if (($44 - 43 & 255) > 79) {
          var $_01_2 = $45;
          var $_02_2 = $46;
          continue;
        }
        if ($44 << 24 >> 24 == 61) {
          break;
        }
        var $54 = HEAP8[($44 << 24 >> 24) - 43 + 459484 | 0];
        if ($54 << 24 >> 24 == 36) {
          var $_01_2 = $45;
          var $_02_2 = $46;
        } else {
          break L1220;
        }
      }
      var $_01_ph6_2 = $45;
      var $_02_ph5_2 = 0;
      var $datalen_0_ph4_2 = _decode($_0_ph_ph, $1, 2) + $datalen_0_ph4_2 | 0;
    }
    HEAP8[$b64 + 2 | 0] = $54 - 62 & 255;
    var $_01_ph6_3 = $45;
    var $_02_ph5_3 = $46;
    var $datalen_0_ph4_3 = $datalen_0_ph4_2;
    L1229 : while (1) {
      var $datalen_0_ph4_3;
      var $_02_ph5_3;
      var $_01_ph6_3;
      var $_01_3 = $_01_ph6_3;
      var $_02_3 = $_02_ph5_3;
      while (1) {
        var $_02_3;
        var $_01_3;
        if (($_02_3 | 0) == 0) {
          var $datalen_0_ph4_lcssa18 = $datalen_0_ph4_3;
          label = 1021;
          break L1200;
        }
        var $63 = HEAP8[$_01_3];
        var $64 = $_01_3 + 1 | 0;
        var $65 = $_02_3 - 1 | 0;
        if (($63 - 43 & 255) > 79) {
          var $_01_3 = $64;
          var $_02_3 = $65;
          continue;
        }
        if ($63 << 24 >> 24 == 61) {
          break;
        }
        var $73 = HEAP8[($63 << 24 >> 24) - 43 + 459484 | 0];
        if ($73 << 24 >> 24 == 36) {
          var $_01_3 = $64;
          var $_02_3 = $65;
        } else {
          break L1229;
        }
      }
      var $_01_ph6_3 = $64;
      var $_02_ph5_3 = 0;
      var $datalen_0_ph4_3 = _decode($_0_ph_ph, $1, 3) + $datalen_0_ph4_3 | 0;
    }
    HEAP8[$b64 + 3 | 0] = $73 - 62 & 255;
    var $78 = _decode($_0_ph_ph, $2, 4);
    var $_0_ph_ph = $_0_ph_ph + $78 | 0;
    var $_01_ph_ph = $64;
    var $_02_ph_ph = $65;
    var $datalen_0_ph_ph = $78 + $datalen_0_ph4_3 | 0;
  }
  if (label == 1021) {
    var $datalen_0_ph4_lcssa18;
    STACKTOP = __stackBase__;
    return $datalen_0_ph4_lcssa18;
  } else if (label == 1022) {
    var $datalen_0_ph4_lcssa18;
    STACKTOP = __stackBase__;
    return $datalen_0_ph4_lcssa18;
  } else if (label == 1019) {
    var $datalen_0_ph4_lcssa18;
    STACKTOP = __stackBase__;
    return $datalen_0_ph4_lcssa18;
  } else if (label == 1020) {
    var $datalen_0_ph4_lcssa18;
    STACKTOP = __stackBase__;
    return $datalen_0_ph4_lcssa18;
  }
}
_otrl_base64_decode["X"] = 1;
function _otrl_base64_otr_encode($buf, $buflen) {
  var $3 = Math.floor((($buflen + 2 | 0) >>> 0) / 3) << 2;
  var $5 = _malloc($3 + 7 | 0);
  if (($5 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  HEAP8[$5] = HEAP8[468848];
  HEAP8[$5 + 1] = HEAP8[468849];
  HEAP8[$5 + 2] = HEAP8[468850];
  HEAP8[$5 + 3] = HEAP8[468851];
  HEAP8[$5 + 4] = HEAP8[468852];
  _otrl_base64_encode($5 + 5 | 0, $buf, $buflen);
  HEAP8[$3 + ($5 + 5) | 0] = 46;
  HEAP8[$3 + ($5 + 6) | 0] = 0;
  var $_0 = $5;
  var $_0;
  return $_0;
}
function _otrl_base64_otr_decode($msg, $bufp, $lenp) {
  var $1 = _strstr($msg, 468848);
  if (($1 | 0) == 0) {
    var $_0 = -2;
    var $_0;
    return $_0;
  }
  var $4 = _strchr($1, 46);
  if (($4 | 0) == 0) {
    var $_0 = -2;
    var $_0;
    return $_0;
  }
  var $9 = $4 - $1 | 0;
  var $12 = (($9 - 2 | 0) >>> 2) * 3 & -1;
  var $13 = _malloc($12);
  if (!(($13 | 0) != 0 | ($12 | 0) == 0)) {
    var $_0 = -1;
    var $_0;
    return $_0;
  }
  var $19 = _otrl_base64_decode($13, $1 + 5 | 0, $9 - 5 | 0);
  HEAP32[$bufp >> 2] = $13;
  HEAP32[$lenp >> 2] = $19;
  var $_0 = 0;
  var $_0;
  return $_0;
}
function _otrl_dh_init() {
  _gcry_mpi_scan(512656, 4, 483092, 0, 0);
  _gcry_mpi_scan(512660, 4, 468108, 0, 0);
  var $3 = _gcry_mpi_new(1536);
  HEAP32[128163] = $3;
  _gcry_mpi_sub_ui($3, HEAP32[128164], 2);
  return;
}
function _otrl_dh_keypair_copy($dst, $src) {
  HEAP32[$dst >> 2] = HEAP32[$src >> 2];
  HEAP32[$dst + 4 >> 2] = _gcry_mpi_copy(HEAP32[$src + 4 >> 2]);
  HEAP32[$dst + 8 >> 2] = _gcry_mpi_copy(HEAP32[$src + 8 >> 2]);
  return;
}
function _otrl_dh_keypair_free($kp) {
  var $1 = $kp + 4 | 0;
  _gcry_mpi_release(HEAP32[$1 >> 2]);
  var $3 = $kp + 8 | 0;
  _gcry_mpi_release(HEAP32[$3 >> 2]);
  HEAP32[$1 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  return;
}
function _otrl_dh_gen_keypair($groupid, $kp) {
  var $privkey$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $privkey = __stackBase__, $privkey$s2 = $privkey >> 2;
  HEAP32[$privkey$s2] = 0;
  if (($groupid | 0) == 5) {
    var $5 = _gcry_random_bytes_secure(40, 1);
    _gcry_mpi_scan($privkey, 5, $5, 40, 0);
    _gcry_free($5);
    HEAP32[$kp >> 2] = $groupid;
    HEAP32[$kp + 4 >> 2] = HEAP32[$privkey$s2];
    var $10 = _gcry_mpi_new(1536);
    HEAP32[$kp + 8 >> 2] = $10;
    _gcry_mpi_powm($10, HEAP32[128165], HEAP32[$privkey$s2], HEAP32[128164]);
    var $_0 = _gcry_error86(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    var $_0 = _gcry_error86(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
function _gcry_error86($code) {
  return _gcry_err_make97($code);
}
function _otrl_dh_session($sess, $kp, $y) {
  var $gablen$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $gablen = __stackBase__, $gablen$s2 = $gablen >> 2;
  _otrl_dh_session_blank($sess);
  if ((HEAP32[$kp >> 2] | 0) != 5) {
    var $_0 = _gcry_error86(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $7 = _gcry_mpi_new(1536);
  _gcry_mpi_powm($7, $y, HEAP32[$kp + 4 >> 2], HEAP32[128164]);
  _gcry_mpi_print(5, 0, 0, $gablen, $7);
  var $14 = _gcry_malloc_secure(HEAP32[$gablen$s2] + 5 | 0);
  if (($14 | 0) == 0) {
    _gcry_mpi_release($7);
    var $_0 = _gcry_error86(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP8[$14 + 1 | 0] = HEAP32[$gablen$s2] >>> 24 & 255;
  HEAP8[$14 + 2 | 0] = HEAP32[$gablen$s2] >>> 16 & 255;
  HEAP8[$14 + 3 | 0] = HEAP32[$gablen$s2] >>> 8 & 255;
  HEAP8[$14 + 4 | 0] = HEAP32[$gablen$s2] & 255;
  _gcry_mpi_print(5, $14 + 5 | 0, HEAP32[$gablen$s2], 0, $7);
  _gcry_mpi_release($7);
  var $37 = _gcry_malloc_secure(20);
  if (($37 | 0) == 0) {
    _gcry_free($14);
    var $_0 = _gcry_error86(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $45 = (_gcry_mpi_cmp(HEAP32[$kp + 8 >> 2], $y) | 0) > 0;
  var $_1 = $45 ? 2 : 1;
  HEAP8[$14] = $45 ? 1 : 2;
  _gcry_md_hash_buffer(2, $37, $14, HEAP32[$gablen$s2] + 5 | 0);
  var $48 = $sess + 32 | 0;
  var $49 = _gcry_cipher_open($48, 7, 6, 1);
  do {
    if (($49 | 0) == 0) {
      var $53 = _gcry_cipher_setkey(HEAP32[$48 >> 2], $37, 16);
      if (($53 | 0) != 0) {
        var $err_0 = $53;
        break;
      }
      var $56 = $sess + 44 | 0;
      _gcry_md_hash_buffer(2, $56, $37, 16);
      var $57 = $sess + 40 | 0;
      var $58 = _gcry_md_open($57, 2, 2);
      if (($58 | 0) != 0) {
        var $err_0 = $58;
        break;
      }
      var $62 = _gcry_md_setkey(HEAP32[$57 >> 2], $56, 20);
      if (($62 | 0) != 0) {
        var $err_0 = $62;
        break;
      }
      HEAP8[$14] = $_1;
      _gcry_md_hash_buffer(2, $37, $14, HEAP32[$gablen$s2] + 5 | 0);
      var $67 = $sess + 36 | 0;
      var $68 = _gcry_cipher_open($67, 7, 6, 1);
      if (($68 | 0) != 0) {
        var $err_0 = $68;
        break;
      }
      var $72 = _gcry_cipher_setkey(HEAP32[$67 >> 2], $37, 16);
      if (($72 | 0) != 0) {
        var $err_0 = $72;
        break;
      }
      var $75 = $sess + 72 | 0;
      _gcry_md_hash_buffer(2, $75, $37, 16);
      var $76 = $sess + 68 | 0;
      var $77 = _gcry_md_open($76, 2, 2);
      if (($77 | 0) != 0) {
        var $err_0 = $77;
        break;
      }
      var $81 = _gcry_md_setkey(HEAP32[$76 >> 2], $75, 20);
      if (($81 | 0) != 0) {
        var $err_0 = $81;
        break;
      }
      HEAP8[$14] = -1;
      _gcry_md_hash_buffer(8, $sess + 96 | 0, $14, HEAP32[$gablen$s2] + 5 | 0);
      _gcry_free($14);
      _gcry_free($37);
      var $_0 = _gcry_error86(0);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $err_0 = $49;
    }
  } while (0);
  var $err_0;
  _otrl_dh_session_free($sess);
  _gcry_free($14);
  _gcry_free($37);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_dh_session["X"] = 1;
function _otrl_dh_session_blank($sess) {
  _memset($sess | 0, 0, 128);
  return;
}
function _otrl_dh_session_free($sess) {
  _gcry_cipher_close(HEAP32[$sess + 32 >> 2]);
  _gcry_cipher_close(HEAP32[$sess + 36 >> 2]);
  _gcry_md_close(HEAP32[$sess + 40 >> 2]);
  _gcry_md_close(HEAP32[$sess + 68 >> 2]);
  _otrl_dh_session_blank($sess);
  return;
}
function _otrl_mem_is_secure($p) {
  return 1;
}
function _gpg_err_make98($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function _otrl_dh_incctr($ctr) {
  var label = 0;
  var $i_0 = 8;
  while (1) {
    var $i_0;
    if (($i_0 | 0) == 0) {
      label = 1079;
      break;
    }
    var $4 = $i_0 - 1 | 0;
    var $5 = $ctr + $4 | 0;
    var $7 = HEAP8[$5] + 1 & 255;
    HEAP8[$5] = $7;
    if ($7 << 24 >> 24 == 0) {
      var $i_0 = $4;
    } else {
      label = 1080;
      break;
    }
  }
  if (label == 1079) {
    return;
  } else if (label == 1080) {
    return;
  }
}
function _otrl_dh_cmpctr($ctr1, $ctr2) {
  var label = 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if (($i_0 | 0) >= 8) {
      var $_0 = 0;
      label = 1087;
      break;
    }
    var $5 = HEAP8[$ctr1 + $i_0 | 0];
    var $7 = HEAP8[$ctr2 + $i_0 | 0];
    if ($5 << 24 >> 24 == $7 << 24 >> 24) {
      var $i_0 = $i_0 + 1 | 0;
    } else {
      break;
    }
  }
  if (label == 1087) {
    var $_0;
    return $_0;
  }
  var $_0 = ($5 & 255) - ($7 & 255) | 0;
  var $_0;
  return $_0;
}
function _otrl_dh_compute_v2_auth_keys($our_dh, $their_pub, $sessionid, $sessionidlenp, $enc_c, $enc_cp, $mac_m1, $mac_m1p, $mac_m2, $mac_m2p) {
  var $slen$s2;
  var $enc_cp$s2 = $enc_cp >> 2;
  var $enc_c$s2 = $enc_c >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $slen = __stackBase__, $slen$s2 = $slen >> 2;
  HEAP32[$enc_c$s2] = 0;
  HEAP32[$enc_cp$s2] = 0;
  HEAP32[$mac_m1 >> 2] = 0;
  HEAP32[$mac_m1p >> 2] = 0;
  HEAP32[$mac_m2 >> 2] = 0;
  HEAP32[$mac_m2p >> 2] = 0;
  var $1 = __stackBase__ + 4 | 0;
  for (var $$dest = $1, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
    HEAP8[$$dest] = 0;
  }
  if ((HEAP32[$our_dh >> 2] | 0) != 5) {
    var $_0 = _gcry_error86(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if ((_gcry_mpi_cmp_ui($their_pub, 2) | 0) >= 0) {
      if ((_gcry_mpi_cmp($their_pub, HEAP32[128163]) | 0) > 0) {
        break;
      }
      var $17 = _gcry_mpi_new(1536);
      _gcry_mpi_powm($17, $their_pub, HEAP32[$our_dh + 4 >> 2], HEAP32[128164]);
      _gcry_mpi_print(5, 0, 0, $slen, $17);
      var $24 = _gcry_malloc_secure(HEAP32[$slen$s2] + 5 | 0);
      if (($24 | 0) == 0) {
        _gcry_mpi_release($17);
        var $_0 = _gcry_error86(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      HEAP8[$24 + 1 | 0] = HEAP32[$slen$s2] >>> 24 & 255;
      HEAP8[$24 + 2 | 0] = HEAP32[$slen$s2] >>> 16 & 255;
      HEAP8[$24 + 3 | 0] = HEAP32[$slen$s2] >>> 8 & 255;
      HEAP8[$24 + 4 | 0] = HEAP32[$slen$s2] & 255;
      _gcry_mpi_print(5, $24 + 5 | 0, HEAP32[$slen$s2], 0, $17);
      _gcry_mpi_release($17);
      var $47 = _gcry_malloc_secure(32);
      if (($47 | 0) == 0) {
        _gcry_free($24);
        var $_0 = _gcry_error86(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      HEAP8[$24] = 0;
      _gcry_md_hash_buffer(8, $47, $24, HEAP32[$slen$s2] + 5 | 0);
      var $54 = $47;
      var $55 = $sessionid;
      var $st$6$0 = $54 | 0;
      var $st$6$1 = $54 + 4 | 0;
      var $56$1 = HEAPU8[$st$6$1] | HEAPU8[$st$6$1 + 1] << 8 | HEAPU8[$st$6$1 + 2] << 16 | HEAPU8[$st$6$1 + 3] << 24 | 0;
      var $st$10$0 = $55 | 0;
      tempBigInt = HEAPU8[$st$6$0] | HEAPU8[$st$6$0 + 1] << 8 | HEAPU8[$st$6$0 + 2] << 16 | HEAPU8[$st$6$0 + 3] << 24 | 0;
      HEAP8[$st$10$0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$10$0 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$10$0 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$10$0 + 3] = tempBigInt & 255;
      var $st$10$1 = $55 + 4 | 0;
      tempBigInt = $56$1;
      HEAP8[$st$10$1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$10$1 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$10$1 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$10$1 + 3] = tempBigInt & 255;
      HEAP32[$sessionidlenp >> 2] = 8;
      HEAP8[$24] = 1;
      _gcry_md_hash_buffer(8, $47, $24, HEAP32[$slen$s2] + 5 | 0);
      var $59 = _gcry_cipher_open($enc_c, 7, 6, 1);
      do {
        if (($59 | 0) == 0) {
          var $63 = _gcry_cipher_setkey(HEAP32[$enc_c$s2], $47, 16);
          if (($63 | 0) != 0) {
            var $err_0 = $63;
            break;
          }
          var $67 = _gcry_cipher_setctr(HEAP32[$enc_c$s2], $1, 16);
          if (($67 | 0) != 0) {
            var $err_0 = $67;
            break;
          }
          var $70 = _gcry_cipher_open($enc_cp, 7, 6, 1);
          if (($70 | 0) != 0) {
            var $err_0 = $70;
            break;
          }
          var $75 = _gcry_cipher_setkey(HEAP32[$enc_cp$s2], $47 + 16 | 0, 16);
          if (($75 | 0) != 0) {
            var $err_0 = $75;
            break;
          }
          var $79 = _gcry_cipher_setctr(HEAP32[$enc_cp$s2], $1, 16);
          if (($79 | 0) != 0) {
            var $err_0 = $79;
            break;
          }
          HEAP8[$24] = 2;
          _gcry_md_hash_buffer(8, $47, $24, HEAP32[$slen$s2] + 5 | 0);
          var $84 = _gcry_md_open($mac_m1, 8, 2);
          if (($84 | 0) != 0) {
            var $err_0 = $84;
            break;
          }
          var $88 = _gcry_md_setkey(HEAP32[$mac_m1 >> 2], $47, 32);
          if (($88 | 0) != 0) {
            var $err_0 = $88;
            break;
          }
          HEAP8[$24] = 3;
          _gcry_md_hash_buffer(8, $47, $24, HEAP32[$slen$s2] + 5 | 0);
          var $93 = _gcry_md_open($mac_m2, 8, 2);
          if (($93 | 0) != 0) {
            var $err_0 = $93;
            break;
          }
          var $97 = _gcry_md_setkey(HEAP32[$mac_m2 >> 2], $47, 32);
          if (($97 | 0) != 0) {
            var $err_0 = $97;
            break;
          }
          HEAP8[$24] = 4;
          _gcry_md_hash_buffer(8, $47, $24, HEAP32[$slen$s2] + 5 | 0);
          var $102 = _gcry_md_open($mac_m1p, 8, 2);
          if (($102 | 0) != 0) {
            var $err_0 = $102;
            break;
          }
          var $106 = _gcry_md_setkey(HEAP32[$mac_m1p >> 2], $47, 32);
          if (($106 | 0) != 0) {
            var $err_0 = $106;
            break;
          }
          HEAP8[$24] = 5;
          _gcry_md_hash_buffer(8, $47, $24, HEAP32[$slen$s2] + 5 | 0);
          var $111 = _gcry_md_open($mac_m2p, 8, 2);
          if (($111 | 0) != 0) {
            var $err_0 = $111;
            break;
          }
          var $115 = _gcry_md_setkey(HEAP32[$mac_m2p >> 2], $47, 32);
          if (($115 | 0) != 0) {
            var $err_0 = $115;
            break;
          }
          _gcry_free($24);
          _gcry_free($47);
          var $_0 = _gcry_error86(0);
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        } else {
          var $err_0 = $59;
        }
      } while (0);
      var $err_0;
      _gcry_cipher_close(HEAP32[$enc_c$s2]);
      _gcry_cipher_close(HEAP32[$enc_cp$s2]);
      _gcry_md_close(HEAP32[$mac_m1 >> 2]);
      _gcry_md_close(HEAP32[$mac_m1p >> 2]);
      _gcry_md_close(HEAP32[$mac_m2 >> 2]);
      _gcry_md_close(HEAP32[$mac_m2p >> 2]);
      HEAP32[$enc_c$s2] = 0;
      HEAP32[$enc_cp$s2] = 0;
      HEAP32[$mac_m1 >> 2] = 0;
      HEAP32[$mac_m1p >> 2] = 0;
      HEAP32[$mac_m2 >> 2] = 0;
      HEAP32[$mac_m2p >> 2] = 0;
      _gcry_free($24);
      _gcry_free($47);
      var $_0 = $err_0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $_0 = _gcry_error86(55);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_dh_compute_v2_auth_keys["X"] = 1;
function _otrl_dh_compute_v1_session_id($our_dh, $their_pub, $sessionid, $sessionidlenp, $halfp) {
  var $slen$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $slen = __stackBase__, $slen$s2 = $slen >> 2;
  if ((HEAP32[$our_dh >> 2] | 0) != 5) {
    var $_0 = _gcry_error86(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if ((_gcry_mpi_cmp_ui($their_pub, 2) | 0) >= 0) {
      if ((_gcry_mpi_cmp($their_pub, HEAP32[128163]) | 0) > 0) {
        break;
      }
      var $16 = _gcry_mpi_new(1536);
      _gcry_mpi_powm($16, $their_pub, HEAP32[$our_dh + 4 >> 2], HEAP32[128164]);
      _gcry_mpi_print(5, 0, 0, $slen, $16);
      var $23 = _gcry_malloc_secure(HEAP32[$slen$s2] + 5 | 0);
      if (($23 | 0) == 0) {
        _gcry_mpi_release($16);
        var $_0 = _gcry_error86(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      HEAP8[$23 + 1 | 0] = HEAP32[$slen$s2] >>> 24 & 255;
      HEAP8[$23 + 2 | 0] = HEAP32[$slen$s2] >>> 16 & 255;
      HEAP8[$23 + 3 | 0] = HEAP32[$slen$s2] >>> 8 & 255;
      HEAP8[$23 + 4 | 0] = HEAP32[$slen$s2] & 255;
      _gcry_mpi_print(5, $23 + 5 | 0, HEAP32[$slen$s2], 0, $16);
      _gcry_mpi_release($16);
      var $46 = _gcry_malloc_secure(20);
      if (($46 | 0) == 0) {
        _gcry_free($23);
        var $_0 = _gcry_error86(32854);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        HEAP8[$23] = 0;
        _gcry_md_hash_buffer(2, $46, $23, HEAP32[$slen$s2] + 5 | 0);
        _memcpy($sessionid, $46, 20);
        HEAP32[$sessionidlenp >> 2] = 20;
        HEAP32[$halfp >> 2] = (_gcry_mpi_cmp(HEAP32[$our_dh + 8 >> 2], $their_pub) | 0) > 0 & 1;
        _gcry_free($46);
        _gcry_free($23);
        var $_0 = _gcry_error86(0);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    }
  } while (0);
  var $_0 = _gcry_error86(55);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_dh_compute_v1_session_id["X"] = 1;
function _gcry_err_make97($code) {
  return _gpg_err_make98($code);
}
function _otrl_mem_init() {
  HEAP32[113831] = 8;
  _gcry_set_allocation_handler(170, 170, 190, 240, 168);
  return;
}
function _otrl_mem_malloc($n) {
  var $2 = _llvm_uadd_with_overflow_i32(HEAP32[113831], $n);
  if (tempRet0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $5 = _malloc($2);
  if (($5 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  HEAP32[$5 >> 2] = $2;
  var $_0 = $5 + HEAP32[113831] | 0;
  var $_0;
  return $_0;
}
function _otrl_mem_realloc($p, $n) {
  if (($p | 0) == 0) {
    var $_0 = _otrl_mem_malloc($n);
    var $_0;
    return $_0;
  }
  if (($n | 0) == 0) {
    _otrl_mem_free($p);
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $8 = HEAP32[113831];
  var $10 = $p + -$8 | 0;
  var $12 = HEAP32[$10 >> 2];
  var $13 = _llvm_uadd_with_overflow_i32($8, $n);
  if (tempRet0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  do {
    if ($13 >>> 0 < $12 >>> 0) {
      var $18 = $p + ($13 - $8) | 0;
      var $19 = $12 - $13 | 0;
      _memset($18, -1, $19);
      _memset($18, -86, $19);
      _memset($18, 85, $19);
      _memset($18, 0, $19);
      var $new_p_0 = $10;
    } else {
      var $21 = _realloc($10, $13);
      if (($21 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $new_p_0 = $21;
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $new_p_0;
  HEAP32[$new_p_0 >> 2] = $13;
  var $_0 = $new_p_0 + HEAP32[113831] | 0;
  var $_0;
  return $_0;
}
function _otrl_mem_free($p) {
  var $3 = $p + -HEAP32[113831] | 0;
  var $5 = HEAP32[$3 >> 2];
  _memset($3, -1, $5);
  _memset($3, -86, $5);
  _memset($3, 85, $5);
  _memset($3, 0, $5);
  _free($3);
  return;
}
function _otrl_message_free($message) {
  _free($message);
  return;
}
Module["_otrl_message_free"] = _otrl_message_free;
function _otrl_message_sending($us, $ops, $opdata, $accountname, $protocol, $recipient, $their_instag, $original_msg, $tlvs, $messagep, $fragPolicy, $contextp, $add_appdata, $data) {
  var $61$s2;
  var $15$s2;
  var $converted_msg$s2;
  var $messagep$s2 = $messagep >> 2;
  var $ops$s2 = $ops >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $msgtosend = __stackBase__;
  var $context_added = __stackBase__ + 4;
  var $converted_msg = __stackBase__ + 8, $converted_msg$s2 = $converted_msg >> 2;
  HEAP32[$context_added >> 2] = 0;
  HEAP32[$converted_msg$s2] = 0;
  var $1 = ($messagep | 0) != 0;
  if ($1) {
    HEAP32[$messagep$s2] = 0;
  }
  var $4 = _gcry_error113(0);
  var $5 = ($contextp | 0) != 0;
  if ($5) {
    HEAP32[$contextp >> 2] = 0;
  }
  var $_not = $1 ^ 1;
  do {
    if (($accountname | 0) == 0 | ($protocol | 0) == 0 | ($recipient | 0) == 0 | ($original_msg | 0) == 0 | $_not) {
      var $err_0 = _gcry_error113(55);
      var $context_0 = 0;
    } else {
      var $15 = _otrl_context_find($us, $recipient, $accountname, $protocol, $their_instag, 1, $context_added, $add_appdata, $data), $15$s2 = $15 >> 2;
      do {
        if ((HEAP32[$context_added >> 2] | 0) != 0) {
          var $20 = HEAP32[$ops$s2 + 4];
          if (($20 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[$20]($opdata);
        }
      } while (0);
      if ((HEAP32[$15$s2 + 10] | 0) == 0) {
        _populate_context_instag($us, $ops, $opdata, $accountname, $protocol, $15);
      }
      if ($5) {
        HEAP32[$contextp >> 2] = $15;
      }
      var $32 = HEAP32[$ops$s2];
      if (($32 | 0) == 0) {
        var $policy_012 = 118;
      } else {
        var $35 = FUNCTION_TABLE[$32]($opdata, $15);
        if (($35 & 7 | 0) == 0) {
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        } else {
          var $policy_012 = $35;
        }
      }
      var $policy_012;
      if ((_otrl_proto_message_type($original_msg) | 0) == 2) {
        var $41 = _otrl_proto_default_query_msg($accountname, $policy_012);
        if (($41 | 0) != 0) {
          HEAP32[$messagep$s2] = $41;
        }
        HEAP32[$15$s2 + 71] = 1;
        var $err_0 = $4;
        var $context_0 = $15;
        break;
      }
      var $48 = HEAP32[$15$s2 + 12];
      if (($48 | 0) == 1) {
        var $123 = HEAP32[$ops$s2 + 21];
        do {
          if (($123 | 0) == 0) {
            label = 1203;
          } else {
            FUNCTION_TABLE[$123]($opdata, $15, 0, $converted_msg, $original_msg);
            var $126 = HEAP32[$converted_msg$s2];
            if (($126 | 0) == 0) {
              label = 1203;
              break;
            }
            var $128 = _otrl_proto_create_data($msgtosend, $15, $126, $tlvs, 0, 0);
            var $130 = HEAP32[$ops$s2 + 22];
            if (($130 | 0) == 0) {
              var $err_code_0 = $128;
              break;
            }
            FUNCTION_TABLE[$130]($opdata, $15, HEAP32[$converted_msg$s2]);
            HEAP32[$converted_msg$s2] = 0;
            var $err_code_0 = $128;
            break;
          }
        } while (0);
        if (label == 1203) {
          var $err_code_0 = _otrl_proto_create_data($msgtosend, $15, $original_msg, $tlvs, 0, 0);
        }
        var $err_code_0;
        if (($err_code_0 | 0) == 0) {
          var $138 = _time(0);
          HEAP32[HEAP32[$15$s2 + 2] + 576 >> 2] = $138;
          _otrl_context_update_recent_child($15, 1);
          HEAP32[$messagep$s2] = HEAP32[$msgtosend >> 2];
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        }
        var $145 = HEAP32[$ops$s2 + 19];
        if (($145 | 0) != 0) {
          FUNCTION_TABLE[$145]($opdata, 2, $15, 0, $4);
        }
        var $150 = HEAP32[$ops$s2 + 14];
        if (($150 | 0) == 0) {
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        }
        var $153 = FUNCTION_TABLE[$150]($opdata, $15, 1);
        var $156 = _malloc(_strlen($153) + 13 | 0);
        HEAP32[$messagep$s2] = $156;
        if (($156 | 0) != 0) {
          for (var $$src = 474188, $$dest = $156, $$stop = $$src + 13; $$src < $$stop; $$src++, $$dest++) {
            HEAP8[$$dest] = HEAP8[$$src];
          }
          _strcat(HEAP32[$messagep$s2], $153);
        }
        var $163 = HEAP32[$ops$s2 + 15];
        if (($163 | 0) != 0) {
          FUNCTION_TABLE[$163]($opdata, $153);
        }
        if ((HEAP32[$messagep$s2] | 0) != 0) {
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        }
        var $err_0 = _gcry_error113(32854);
        var $context_0 = $15;
        break;
      } else if (($48 | 0) == 0) {
        if (($policy_012 & 8 | 0) != 0) {
          var $54 = HEAP32[$ops$s2 + 19];
          if (($54 | 0) != 0) {
            FUNCTION_TABLE[$54]($opdata, 1, $15, 0, $4);
          }
          var $60 = _gcry_malloc_secure(_strlen($original_msg) + 1 | 0);
          var $61$s2 = ($15 + 8 | 0) >> 2;
          HEAP32[HEAP32[$61$s2] + 584 >> 2] = $60;
          if ((HEAP32[HEAP32[$61$s2] + 584 >> 2] | 0) == 0) {
            var $err_0 = $4;
            var $context_0 = $15;
            break;
          }
          var $69 = _otrl_proto_default_query_msg($accountname, $policy_012);
          _strcpy(HEAP32[HEAP32[$61$s2] + 584 >> 2], $original_msg);
          var $74 = _time(0);
          HEAP32[HEAP32[$61$s2] + 576 >> 2] = $74;
          _otrl_context_update_recent_child($15, 1);
          HEAP32[HEAP32[$61$s2] + 588 >> 2] = 2;
          if (($69 | 0) == 0) {
            var $err_0 = _gcry_error113(32854);
            var $context_0 = $15;
            break;
          } else {
            HEAP32[$messagep$s2] = $69;
            HEAP32[$15$s2 + 71] = 1;
            var $err_0 = $4;
            var $context_0 = $15;
            break;
          }
        }
        if (($policy_012 & 16 | 0) == 0) {
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        }
        var $88 = $15 + 284 | 0;
        if ((HEAP32[$88 >> 2] | 0) == 2) {
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        }
        var $92 = _strlen($original_msg);
        var $93 = $policy_012 & 1;
        var $95 = $policy_012 & 2;
        var $96 = ($95 | 0) == 0;
        var $98 = $policy_012 & 4;
        var $99 = ($98 | 0) == 0;
        var $101 = $92 + 16 | 0;
        var $102 = ($93 << 3) + $101 | 0;
        var $103 = ($95 << 2) + $102 | 0;
        var $106 = _malloc(($98 << 1 | 1) + $103 | 0);
        if (($106 | 0) == 0) {
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        }
        var $109 = ($93 | 0) == 0;
        _strcpy($106, $original_msg);
        var $111 = $106 + $92 | 0;
        for (var $$src = 490672, $$dest = $111, $$stop = $$src + 17; $$src < $$stop; $$src++, $$dest++) {
          HEAP8[$$dest] = HEAP8[$$src];
        }
        if (!$109) {
          var $113 = $106 + $101 | 0;
          for (var $$src = 489856, $$dest = $113, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
            HEAP8[$$dest] = HEAP8[$$src];
          }
        }
        if (!$96) {
          var $116 = $106 + $102 | 0;
          for (var $$src = 481300, $$dest = $116, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
            HEAP8[$$dest] = HEAP8[$$src];
          }
        }
        if (!$99) {
          var $119 = $106 + $103 | 0;
          for (var $$src = 477168, $$dest = $119, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
            HEAP8[$$dest] = HEAP8[$$src];
          }
        }
        HEAP32[$messagep$s2] = $106;
        HEAP32[$88 >> 2] = 1;
        var $err_0 = $4;
        var $context_0 = $15;
        break;
      } else if (($48 | 0) == 2) {
        var $173 = HEAP32[$ops$s2 + 19];
        if (($173 | 0) != 0) {
          FUNCTION_TABLE[$173]($opdata, 3, $15, 0, $4);
        }
        var $177 = _strdup(472128);
        HEAP32[$messagep$s2] = $177;
        if (($177 | 0) != 0) {
          var $err_0 = $4;
          var $context_0 = $15;
          break;
        }
        var $err_0 = _gcry_error113(32854);
        var $context_0 = $15;
        break;
      } else {
        var $err_0 = $4;
        var $context_0 = $15;
        break;
      }
    }
  } while (0);
  var $context_0;
  var $err_0;
  if (($fragPolicy | 0) == 0) {
    var $_0 = $err_0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($err_0 | 0) != 0 | $_not) {
    var $_0 = $err_0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $185 = HEAP32[$messagep$s2];
  if (($185 | 0) == 0 | ($context_0 | 0) == 0) {
    var $_0 = $err_0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $_0 = _fragment_and_send($ops, 0, $context_0, $185, $fragPolicy, $messagep);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
Module["_otrl_message_sending"] = _otrl_message_sending;
_otrl_message_sending["X"] = 1;
function _gcry_error113($code) {
  return _gcry_err_make115($code);
}
function _populate_context_instag($us, $ops, $opdata, $accountname, $protocol, $context) {
  var label = 0;
  var $1 = _otrl_instag_find($us, $accountname, $protocol);
  do {
    if (($1 | 0) == 0) {
      var $5 = HEAP32[$ops + 80 >> 2];
      if (($5 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[$5]($opdata, $accountname, $protocol);
      var $8 = _otrl_instag_find($us, $accountname, $protocol);
      if (($8 | 0) == 0) {
        break;
      } else {
        var $p_instag_02 = $8;
        label = 1232;
        break;
      }
    } else {
      var $p_instag_02 = $1;
      label = 1232;
    }
  } while (0);
  do {
    if (label == 1232) {
      var $p_instag_02;
      var $11 = HEAP32[$p_instag_02 + 16 >> 2];
      if ($11 >>> 0 <= 255) {
        break;
      }
      HEAP32[$context + 40 >> 2] = $11;
      return;
    }
  } while (0);
  HEAP32[$context + 40 >> 2] = _otrl_instag_get_new();
  return;
}
function _fragment_and_send($ops, $opdata, $context, $message, $fragPolicy, $returnFragment) {
  var $3$s2;
  var $fragments$s2;
  var $context$s2 = $context >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $fragments = __stackBase__, $fragments$s2 = $fragments >> 2;
  do {
    if (($message | 0) != 0) {
      var $3$s2 = ($ops + 12 | 0) >> 2;
      if ((HEAP32[$3$s2] | 0) == 0) {
        break;
      }
      var $8 = HEAP32[$ops + 40 >> 2];
      if (($8 | 0) == 0) {
        var $mms_0 = 0;
      } else {
        var $mms_0 = FUNCTION_TABLE[$8]($opdata, $context);
      }
      var $mms_0;
      var $13 = _strlen($message);
      if (!(($mms_0 | 0) != 0 & ($13 | 0) > ($mms_0 | 0))) {
        if (($fragPolicy | 0) == 1) {
          FUNCTION_TABLE[HEAP32[$3$s2]]($opdata, HEAP32[$context$s2 + 4], HEAP32[$context$s2 + 5], HEAP32[$context$s2 + 3], $message);
          break;
        } else {
          HEAP32[$returnFragment >> 2] = _strdup($message);
          break;
        }
      }
      var $23 = ($13 - 1 | 0) / ($mms_0 - ((HEAP32[$context$s2 + 70] | 0) == 3 ? 37 : 19) | 0) & -1;
      var $24 = $23 + 1 | 0;
      var $25 = _otrl_proto_fragment_create($mms_0, $24, $fragments, $context, $message);
      if (($25 | 0) != 0) {
        var $_0 = $25;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      if (($fragPolicy | 0) == 2) {
        HEAP32[$returnFragment >> 2] = _strdup(HEAP32[HEAP32[$fragments$s2] >> 2]);
      } else {
        FUNCTION_TABLE[HEAP32[$3$s2]]($opdata, HEAP32[$context$s2 + 4], HEAP32[$context$s2 + 5], HEAP32[$context$s2 + 3], HEAP32[HEAP32[$fragments$s2] >> 2]);
      }
      L1523 : do {
        if (($23 | 0) > 1) {
          var $44 = $context + 16 | 0;
          var $45 = $context + 20 | 0;
          var $46 = $context + 12 | 0;
          var $47 = HEAP32[$fragments$s2];
          var $i_01 = 1;
          while (1) {
            var $i_01;
            FUNCTION_TABLE[HEAP32[$3$s2]]($opdata, HEAP32[$44 >> 2], HEAP32[$45 >> 2], HEAP32[$46 >> 2], HEAP32[$47 + ($i_01 << 2) >> 2]);
            var $55 = $i_01 + 1 | 0;
            if (($55 | 0) == ($23 | 0)) {
              break L1523;
            } else {
              var $i_01 = $55;
            }
          }
        }
      } while (0);
      if (($fragPolicy | 0) == 3) {
        HEAP32[$returnFragment >> 2] = _strdup(HEAP32[HEAP32[$fragments$s2] + ($23 << 2) >> 2]);
      } else {
        FUNCTION_TABLE[HEAP32[$3$s2]]($opdata, HEAP32[$context$s2 + 4], HEAP32[$context$s2 + 5], HEAP32[$context$s2 + 3], HEAP32[HEAP32[$fragments$s2] + ($23 << 2) >> 2]);
      }
      _otrl_proto_fragment_free($fragments, $24 & 65535);
    }
  } while (0);
  var $_0 = _gcry_error113(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_fragment_and_send["X"] = 1;
function _otrl_message_initiate_smp($us, $ops, $opdata, $context, $secret, $secretlen) {
  _init_respond_smp($us, $ops, $opdata, $context, 0, $secret, $secretlen, 1);
  return;
}
Module["_otrl_message_initiate_smp"] = _otrl_message_initiate_smp;
function _init_respond_smp($us, $ops, $opdata, $context, $question, $secret, $secretlen, $initiating) {
  var $13$s2;
  var $sendsmp$s2;
  var $smpmsglen$s2;
  var $smpmsg$s2;
  var $context$s2 = $context >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  var $smpmsg = __stackBase__, $smpmsg$s2 = $smpmsg >> 2;
  var $smpmsglen = __stackBase__ + 4, $smpmsglen$s2 = $smpmsglen >> 2;
  var $sendsmp = __stackBase__ + 60, $sendsmp$s2 = $sendsmp >> 2;
  HEAP32[$smpmsg$s2] = 0;
  HEAP32[$sendsmp$s2] = 0;
  if (($context | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[$context$s2 + 12] | 0) != 1) {
    STACKTOP = __stackBase__;
    return;
  }
  var $7 = __stackBase__ + 40 | 0;
  _otrl_privkey_fingerprint_raw($us, $7, HEAP32[$context$s2 + 4], HEAP32[$context$s2 + 5]);
  var $13$s2 = ($context + 272 | 0) >> 2;
  var $16 = $secretlen + HEAP32[$13$s2] + 41 | 0;
  var $17 = _malloc($16);
  HEAP8[$17] = 1;
  var $18 = ($initiating | 0) != 0;
  var $19 = $17 + 1 | 0;
  if ($18) {
    _memmove($19, $7, 20, 1, 0);
    _memmove($17 + 21 | 0, HEAP32[HEAP32[$context$s2 + 62] + 8 >> 2], 20, 1, 0);
  } else {
    _memmove($19, HEAP32[HEAP32[$context$s2 + 62] + 8 >> 2], 20, 1, 0);
    _memmove($17 + 21 | 0, $7, 20, 1, 0);
  }
  _memmove($17 + 41 | 0, $context + 252 | 0, HEAP32[$13$s2], 1, 0);
  _memmove($17 + HEAP32[$13$s2] + 41 | 0, $secret, $secretlen, 1, 0);
  var $38 = __stackBase__ + 8 | 0;
  _gcry_md_hash_buffer(8, $38, $17, $16);
  _free($17);
  var $39 = $context + 296 | 0;
  var $40 = HEAP32[$39 >> 2];
  if ($18) {
    _otrl_sm_step1($40, $38, 32, $smpmsg, $smpmsglen);
  } else {
    _otrl_sm_step2b($40, $38, 32, $smpmsg, $smpmsglen);
  }
  var $46 = ($question | 0) != 0;
  do {
    if ($46) {
      var $49 = _strlen($question) + 1 | 0;
      var $52 = _malloc($49 + HEAP32[$smpmsglen$s2] | 0);
      if (($52 | 0) != 0) {
        _strcpy($52, $question);
        _memmove($52 + $49 | 0, HEAP32[$smpmsg$s2], HEAP32[$smpmsglen$s2], 1, 0);
        _free(HEAP32[$smpmsg$s2]);
        HEAP32[$smpmsg$s2] = $52;
        HEAP32[$smpmsglen$s2] = HEAP32[$smpmsglen$s2] + $49 | 0;
        break;
      }
      _free(HEAP32[$smpmsg$s2]);
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  if ($18) {
    var $67 = $46 ? 7 : 2;
  } else {
    var $67 = 3;
  }
  var $67;
  var $71 = _otrl_tlv_new($67, HEAP32[$smpmsglen$s2] & 65535, HEAP32[$smpmsg$s2]);
  if ((_otrl_proto_create_data($sendsmp, $context, 472128, $71, 1, 0) | 0) == 0) {
    _fragment_and_send($ops, $opdata, $context, HEAP32[$sendsmp$s2], 1, 0);
    HEAP32[HEAP32[$39 >> 2] + 44 >> 2] = $18 ? 1 : 2;
  }
  _free(HEAP32[$sendsmp$s2]);
  _otrl_tlv_free($71);
  _free(HEAP32[$smpmsg$s2]);
  STACKTOP = __stackBase__;
  return;
}
_init_respond_smp["X"] = 1;
function _otrl_message_initiate_smp_q($us, $ops, $opdata, $context, $question, $secret, $secretlen) {
  _init_respond_smp($us, $ops, $opdata, $context, $question, $secret, $secretlen, 1);
  return;
}
Module["_otrl_message_initiate_smp_q"] = _otrl_message_initiate_smp_q;
function _otrl_message_respond_smp($us, $ops, $opdata, $context, $secret, $secretlen) {
  _init_respond_smp($us, $ops, $opdata, $context, 0, $secret, $secretlen, 0);
  return;
}
Module["_otrl_message_respond_smp"] = _otrl_message_respond_smp;
function _otrl_message_abort_smp($us, $ops, $opdata, $context) {
  var $sendsmp$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $sendsmp = __stackBase__, $sendsmp$s2 = $sendsmp >> 2;
  var $1 = _otrl_tlv_new(6, 0, 472128);
  HEAP32[$sendsmp$s2] = 0;
  HEAP32[HEAP32[$context + 296 >> 2] + 44 >> 2] = 0;
  if ((_otrl_proto_create_data($sendsmp, $context, 472128, $1, 1, 0) | 0) == 0) {
    _fragment_and_send($ops, $opdata, $context, HEAP32[$sendsmp$s2], 1, 0);
  }
  _free(HEAP32[$sendsmp$s2]);
  _otrl_tlv_free($1);
  STACKTOP = __stackBase__;
  return;
}
Module["_otrl_message_abort_smp"] = _otrl_message_abort_smp;
function _otrl_message_receiving($us, $ops, $opdata, $accountname, $protocol, $sender, $message, $newmessagep, $tlvsp, $contextp, $add_appdata, $data) {
  var $437$s2;
  var $172$s2;
  var $164$s2;
  var $context_2$s2;
  var $context_3$s2;
  var $71$s2;
  var $converted_msg$s2;
  var $plaintext$s2;
  var $tlvs$s2;
  var $haveauthmsg$s2;
  var $their_instance$s2;
  var $our_instance$s2;
  var $edata$s2;
  var $unfragmessage$s2;
  var $context_added$s2;
  var $newmessagep$s2 = $newmessagep >> 2;
  var $ops$s2 = $ops >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  var $context_added = __stackBase__, $context_added$s2 = $context_added >> 2;
  var $unfragmessage = __stackBase__ + 4, $unfragmessage$s2 = $unfragmessage >> 2;
  var $edata = __stackBase__ + 8, $edata$s2 = $edata >> 2;
  var $our_instance = __stackBase__ + 36, $our_instance$s2 = $our_instance >> 2;
  var $their_instance = __stackBase__ + 40, $their_instance$s2 = $their_instance >> 2;
  var $startwhite = __stackBase__ + 44;
  var $endwhite = __stackBase__ + 48;
  var $haveauthmsg = __stackBase__ + 52, $haveauthmsg$s2 = $haveauthmsg >> 2;
  var $tlvs = __stackBase__ + 56, $tlvs$s2 = $tlvs >> 2;
  var $plaintext = __stackBase__ + 60, $plaintext$s2 = $plaintext >> 2;
  var $flags = __stackBase__ + 64;
  var $nextmsg = __stackBase__ + 68;
  var $nextmsglen = __stackBase__ + 72;
  var $sendsmp = __stackBase__ + 76;
  var $nextmsg2 = __stackBase__ + 80;
  var $nextmsglen3 = __stackBase__ + 84;
  var $sendsmp5 = __stackBase__ + 88;
  var $heartbeat = __stackBase__ + 92;
  var $converted_msg = __stackBase__ + 96, $converted_msg$s2 = $converted_msg >> 2;
  HEAP32[$context_added$s2] = 0;
  HEAP32[$unfragmessage$s2] = 0;
  HEAP32[$our_instance$s2] = 0;
  HEAP32[$their_instance$s2] = 0;
  if (($accountname | 0) == 0 | ($protocol | 0) == 0 | ($sender | 0) == 0 | ($message | 0) == 0 | ($newmessagep | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$newmessagep$s2] = 0;
  var $7 = ($tlvsp | 0) != 0;
  if ($7) {
    HEAP32[$tlvsp >> 2] = 0;
  }
  var $10 = ($contextp | 0) != 0;
  if ($10) {
    HEAP32[$contextp >> 2] = 0;
  }
  var $13 = _otrl_context_find($us, $sender, $accountname, $protocol, 0, 1, $context_added, $add_appdata, $data);
  do {
    if ((HEAP32[$context_added$s2] | 0) != 0) {
      var $18 = HEAP32[$ops$s2 + 4];
      if (($18 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[$18]($opdata);
    }
  } while (0);
  var $22 = _otrl_context_find($us, $sender, $accountname, $protocol, 1, 0, 0, $add_appdata, $data);
  var $23 = $13 + 40 | 0;
  if ((HEAP32[$23 >> 2] | 0) == 0) {
    _populate_context_instag($us, $ops, $opdata, $accountname, $protocol, $13);
  }
  var $29 = HEAP32[$ops$s2];
  do {
    if (($29 | 0) == 0) {
      var $policy_019 = 118;
    } else {
      var $32 = FUNCTION_TABLE[$29]($opdata, $13);
      if (($32 & 7 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $policy_019 = $32;
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $policy_019;
  var $35 = _strstr($message, 470740);
  do {
    if (($35 | 0) == 0) {
      var $_02 = $message;
      var $otrtag_0 = 0;
      var $fragment_assembled_0 = 0;
      var $context_1 = $13;
    } else {
      do {
        if ((_strstr($message, 469348) | 0) == 0) {
          var $context_0 = $13;
        } else {
          _sscanf($35, 467712, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $their_instance, HEAP32[tempInt + 4 >> 2] = $our_instance, tempInt));
          var $42 = HEAP32[$our_instance$s2];
          do {
            if (($42 | 0) != 0) {
              if ((HEAP32[$23 >> 2] | 0) == ($42 | 0)) {
                break;
              }
              var $49 = HEAP32[$ops$s2 + 19];
              if (($49 | 0) == 0) {
                var $_0 = 1;
                var $_0;
                STACKTOP = __stackBase__;
                return $_0;
              }
              var $52 = _gcry_error113(0);
              FUNCTION_TABLE[$49]($opdata, 15, $13, 0, $52);
              var $_0 = 1;
              var $_0;
              STACKTOP = __stackBase__;
              return $_0;
            }
          } while (0);
          var $54 = HEAP32[$their_instance$s2];
          if ($54 >>> 0 > 255) {
            var $context_0 = _otrl_context_find($us, $sender, $accountname, $protocol, $54, 1, $context_added, $add_appdata, $data);
            break;
          }
          _message_malformed($ops, $opdata, $13);
          var $_0 = 1;
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      var $context_0;
      var $60 = _otrl_proto_fragment_accumulate($unfragmessage, $context_0, $message);
      if (($60 | 0) == 2) {
        var $62 = HEAP32[$unfragmessage$s2];
        var $_02 = $62;
        var $otrtag_0 = _strstr($62, 470740);
        var $fragment_assembled_0 = 1;
        var $context_1 = $context_0;
        break;
      } else if (($60 | 0) == 1) {
        var $_0 = 1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        var $_02 = $message;
        var $otrtag_0 = $35;
        var $fragment_assembled_0 = 0;
        var $context_1 = $context_0;
        break;
      }
    }
  } while (0);
  var $context_1;
  var $fragment_assembled_0;
  var $otrtag_0;
  var $_02;
  var $65 = _otrl_proto_message_type($_02);
  var $66 = _otrl_proto_message_version($_02);
  do {
    if (($policy_019 & 16 | 0) != 0) {
      var $71$s2 = ($context_1 + 284 | 0) >> 2;
      if (($65 | 0) != 0) {
        HEAP32[$71$s2] = 3;
        break;
      }
      if ((HEAP32[$71$s2] | 0) != 1) {
        break;
      }
      HEAP32[$71$s2] = 2;
    }
  } while (0);
  L1619 : do {
    if (($66 | 0) == 1) {
      if (($policy_019 & 1 | 0) == 0) {
        var $_0 = 1;
      } else {
        var $context_3 = $context_1, $context_3$s2 = $context_3 >> 2;
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else if (($66 | 0) == 3) {
      if (($policy_019 & 4 | 0) == 0) {
        var $_0 = 1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      var $88 = _gcry_error113(55);
      if (($otrtag_0 | 0) == 0) {
        var $err_0 = $88;
      } else {
        var $err_0 = _otrl_proto_instance($otrtag_0, $their_instance, $our_instance);
      }
      var $err_0;
      var $93 = ($err_0 | 0) != 0;
      do {
        if ($93) {
          var $context_227 = $context_1;
        } else {
          var $cond = ($65 | 0) == 3;
          do {
            if ($cond) {
              var $96 = HEAP32[$our_instance$s2];
              if (($96 | 0) == 0) {
                break;
              }
              if ((HEAP32[$context_1 + 40 >> 2] | 0) != ($96 | 0)) {
                label = 1329;
                break;
              }
              if ($cond) {
                break;
              } else {
                label = 1328;
                break;
              }
            } else {
              label = 1328;
            }
          } while (0);
          do {
            if (label == 1328) {
              if ((HEAP32[$context_1 + 40 >> 2] | 0) == (HEAP32[$our_instance$s2] | 0)) {
                break;
              } else {
                label = 1329;
                break;
              }
            }
          } while (0);
          if (label == 1329) {
            var $110 = HEAP32[$ops$s2 + 19];
            if (($110 | 0) == 0) {
              var $_0 = 1;
              var $_0;
              STACKTOP = __stackBase__;
              return $_0;
            }
            var $113 = _gcry_error113(0);
            FUNCTION_TABLE[$110]($opdata, 15, $13, 0, $113);
            var $_0 = 1;
            var $_0;
            STACKTOP = __stackBase__;
            return $_0;
          }
          var $114 = HEAP32[$their_instance$s2];
          if ($114 >>> 0 > 255) {
            var $context_2 = _otrl_context_find($us, $sender, $accountname, $protocol, $114, 1, $context_added, $add_appdata, $data), $context_2$s2 = $context_2 >> 2;
          } else {
            var $context_2 = $context_1, $context_2$s2 = $context_2 >> 2;
          }
          var $context_2;
          if ($93 | HEAP32[$their_instance$s2] >>> 0 < 256) {
            var $context_227 = $context_2;
            break;
          }
          if ((HEAP32[$context_added$s2] | 0) == 0) {
            if (!(($13 | 0) != ($context_2 | 0) & ($65 | 0) == 4)) {
              var $context_3 = $context_2, $context_3$s2 = $context_3 >> 2;
              break L1619;
            }
            var $146 = $13 + 52 | 0;
            if ((HEAP32[$146 >> 2] | 0) != 1) {
              var $context_3 = $context_2, $context_3$s2 = $context_3 >> 2;
              break L1619;
            }
            var $151 = $context_2 + 52 | 0;
            if ((HEAP32[$151 >> 2] | 0) == 1) {
              var $context_3 = $context_2, $context_3$s2 = $context_3 >> 2;
              break L1619;
            }
            HEAP32[$context_2$s2 + 12] = HEAP32[$13 + 48 >> 2];
            HEAP32[$context_2$s2 + 47] = 3;
            HEAP32[$context_2$s2 + 70] = 3;
            _otrl_auth_copy_on_key($146, $151);
            var $context_3 = $context_2, $context_3$s2 = $context_3 >> 2;
            break L1619;
          }
          HEAP32[$context_2$s2 + 47] = 3;
          HEAP32[$context_2$s2 + 70] = 3;
          if ((HEAP32[$context_added$s2] | 0) != 0) {
            HEAP32[$context_2$s2 + 12] = HEAP32[$13 + 48 >> 2];
          }
          if (($65 | 0) == 4) {
            _otrl_auth_copy_on_key($13 + 52 | 0, $context_2 + 52 | 0);
          } else if (($65 | 0) != 3) {
            var $_0 = 1;
            var $_0;
            STACKTOP = __stackBase__;
            return $_0;
          }
          var $139 = HEAP32[$ops$s2 + 4];
          if (($139 | 0) == 0) {
            var $context_3 = $context_2, $context_3$s2 = $context_3 >> 2;
            break L1619;
          }
          FUNCTION_TABLE[$139]($opdata);
          var $context_3 = $context_2, $context_3$s2 = $context_3 >> 2;
          break L1619;
        }
      } while (0);
      var $context_227;
      _message_malformed($ops, $opdata, $context_227);
      var $_0 = 1;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else if (($66 | 0) == 2) {
      if (($policy_019 & 2 | 0) == 0) {
        var $_0 = 1;
      } else {
        var $context_3 = $context_1, $context_3$s2 = $context_3 >> 2;
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $context_3 = $context_1, $context_3$s2 = $context_3 >> 2;
    }
  } while (0);
  var $context_3;
  if ($10) {
    HEAP32[$contextp >> 2] = $context_3;
  }
  var $163 = _time(0);
  var $164$s2 = ($context_3 + 8 | 0) >> 2;
  HEAP32[HEAP32[$164$s2] + 580 >> 2] = $163;
  _otrl_context_update_recent_child($context_3, 0);
  HEAP32[$edata$s2] = 0;
  HEAP32[$edata$s2 + 1] = $us;
  HEAP32[$edata$s2 + 4] = $context_3;
  HEAP32[$edata$s2 + 2] = $ops;
  HEAP32[$edata$s2 + 3] = $opdata;
  var $172$s2 = ($edata + 20 | 0) >> 2;
  HEAP32[$172$s2] = -1;
  HEAP32[$edata$s2 + 6] = $newmessagep;
  do {
    if (($65 | 0) == 2) {
      if ((HEAP32[$context_3$s2 + 12] | 0) == 1) {
        var $179 = HEAP32[$164$s2];
        var $our_keyid_0 = HEAP32[$179 + 24 >> 2] - 1 | 0;
        var $our_dh_0 = $179 + 40 | 0;
      } else {
        var $our_keyid_0 = 0;
        var $our_dh_0 = 0;
      }
      var $our_dh_0;
      var $our_keyid_0;
      var $185 = _otrl_proto_query_bestversion($_02, $policy_019);
      do {
        if (($185 | 0) == 2) {
          _send_or_error_auth($ops, $opdata, _otrl_auth_start_v23($context_3 + 52 | 0, 2), $context_3, $us);
        } else if (($185 | 0) == 1) {
          var $193 = $context_3 + 16 | 0;
          var $194 = HEAP32[$193 >> 2];
          var $195 = $context_3 + 20 | 0;
          var $196 = HEAP32[$195 >> 2];
          var $197 = _otrl_privkey_find($us, $194, $196);
          if (($197 | 0) == 0) {
            var $201 = HEAP32[$ops$s2 + 1];
            if (($201 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[$201]($opdata, $194, $196);
            var $206 = _otrl_privkey_find($us, HEAP32[$193 >> 2], HEAP32[$195 >> 2]);
            if (($206 | 0) == 0) {
              break;
            } else {
              var $privkey_030 = $206;
            }
          } else {
            var $privkey_030 = $197;
          }
          var $privkey_030;
          _send_or_error_auth($ops, $opdata, _otrl_auth_start_v1($context_3 + 52 | 0, $our_dh_0, $our_keyid_0, $privkey_030), $context_3, $us);
        } else if (($185 | 0) == 3) {
          _send_or_error_auth($ops, $opdata, _otrl_auth_start_v23($context_3 + 52 | 0, 3), $context_3, $us);
        }
      } while (0);
      if ((HEAP32[$172$s2] | 0) != -1) {
        break;
      }
      HEAP32[$172$s2] = 1;
      break;
    } else if (($65 | 0) == 3) {
      _send_or_error_auth($ops, $opdata, _otrl_auth_handle_commit($context_3 + 52 | 0, $otrtag_0, $66), $context_3, $us);
      if ((HEAP32[$172$s2] | 0) != -1) {
        break;
      }
      HEAP32[$172$s2] = 1;
      break;
    } else if (($65 | 0) == 4) {
      var $220 = $context_3 + 16 | 0;
      var $221 = HEAP32[$220 >> 2];
      var $222 = $context_3 + 20 | 0;
      var $223 = HEAP32[$222 >> 2];
      var $224 = _otrl_privkey_find($us, $221, $223);
      do {
        if (($224 | 0) == 0) {
          var $228 = HEAP32[$ops$s2 + 1];
          if (($228 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[$228]($opdata, $221, $223);
          var $233 = _otrl_privkey_find($us, HEAP32[$220 >> 2], HEAP32[$222 >> 2]);
          if (($233 | 0) == 0) {
            break;
          } else {
            var $privkey_133 = $233;
            label = 1365;
            break;
          }
        } else {
          var $privkey_133 = $224;
          label = 1365;
        }
      } while (0);
      do {
        if (label == 1365) {
          var $privkey_133;
          var $236 = _otrl_auth_handle_key($context_3 + 52 | 0, $otrtag_0, $haveauthmsg, $privkey_133);
          if ((HEAP32[$haveauthmsg$s2] | $236 | 0) == 0) {
            break;
          }
          _send_or_error_auth($ops, $opdata, $236, $context_3, $us);
        }
      } while (0);
      if ((HEAP32[$172$s2] | 0) != -1) {
        break;
      }
      HEAP32[$172$s2] = 1;
      break;
    } else if (($65 | 0) == 5) {
      var $245 = $context_3 + 16 | 0;
      var $246 = HEAP32[$245 >> 2];
      var $247 = $context_3 + 20 | 0;
      var $248 = HEAP32[$247 >> 2];
      var $249 = _otrl_privkey_find($us, $246, $248);
      do {
        if (($249 | 0) == 0) {
          var $253 = HEAP32[$ops$s2 + 1];
          if (($253 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[$253]($opdata, $246, $248);
          var $258 = _otrl_privkey_find($us, HEAP32[$245 >> 2], HEAP32[$247 >> 2]);
          if (($258 | 0) == 0) {
            break;
          } else {
            var $privkey_236 = $258;
            label = 1372;
            break;
          }
        } else {
          var $privkey_236 = $249;
          label = 1372;
        }
      } while (0);
      do {
        if (label == 1372) {
          var $privkey_236;
          var $262 = _otrl_auth_handle_revealsig($context_3 + 52 | 0, $otrtag_0, $haveauthmsg, $privkey_236, 196, $edata);
          if ((HEAP32[$haveauthmsg$s2] | $262 | 0) == 0) {
            break;
          }
          _send_or_error_auth($ops, $opdata, $262, $context_3, $us);
          _maybe_resend($edata);
        }
      } while (0);
      if ((HEAP32[$172$s2] | 0) != -1) {
        break;
      }
      HEAP32[$172$s2] = 1;
      break;
    } else if (($65 | 0) == 6) {
      var $273 = _otrl_auth_handle_signature($context_3 + 52 | 0, $otrtag_0, $haveauthmsg, 196, $edata);
      if ((HEAP32[$haveauthmsg$s2] | $273 | 0) != 0) {
        _send_or_error_auth($ops, $opdata, $273, $context_3, $us);
        _maybe_resend($edata);
      }
      if ((HEAP32[$172$s2] | 0) != -1) {
        break;
      }
      HEAP32[$172$s2] = 1;
      break;
    } else if (($65 | 0) == 8) {
      var $320 = HEAP32[$context_3$s2 + 12];
      if (($320 | 0) == 0 | ($320 | 0) == 2) {
        _otrl_proto_data_read_flags($_02, $flags);
        if ((HEAP8[$flags] & 1) << 24 >> 24 != 0) {
          HEAP32[$172$s2] = 1;
          break;
        }
        do {
          if (($22 | 0) == 0 | ($22 | 0) == ($context_3 | 0)) {
            label = 1396;
          } else {
            if ((HEAP32[$22 + 48 >> 2] | 0) != 1) {
              label = 1396;
              break;
            }
            var $336 = HEAP32[$ops$s2 + 19];
            if (($336 | 0) == 0) {
              break;
            }
            var $339 = _gcry_error113(0);
            FUNCTION_TABLE[$336]($opdata, 15, $13, 0, $339);
            break;
          }
        } while (0);
        do {
          if (label == 1396) {
            var $342 = HEAP32[$ops$s2 + 19];
            if (($342 | 0) == 0) {
              break;
            }
            var $345 = _gcry_error113(0);
            FUNCTION_TABLE[$342]($opdata, 7, $context_3, 0, $345);
          }
        } while (0);
        HEAP32[$172$s2] = 1;
        break;
      } else if (($320 | 0) != 1) {
        break;
      }
      var $348 = _gcry_malloc_secure(32);
      var $349 = _otrl_proto_accept_data($plaintext, $tlvs, $context_3, $_02, $flags, $348);
      if (($349 | 0) != 0) {
        var $353 = (_gpg_err_code($349) | 0) == 70;
        if ((HEAP8[$flags] & 1) << 24 >> 24 != 0) {
          HEAP32[$172$s2] = 1;
          break;
        }
        var $360 = HEAP32[$ops$s2 + 19];
        var $361 = ($360 | 0) != 0;
        do {
          if ($353) {
            if (!$361) {
              break;
            }
            var $364 = _gcry_error113(0);
            FUNCTION_TABLE[$360]($opdata, 8, $context_3, 0, $364);
          } else {
            if (!$361) {
              break;
            }
            var $367 = _gcry_error113(0);
            FUNCTION_TABLE[$360]($opdata, 9, $context_3, 0, $367);
          }
        } while (0);
        var $369 = $ops + 12 | 0;
        do {
          if ((HEAP32[$369 >> 2] | 0) != 0) {
            var $374 = HEAP32[$ops$s2 + 14];
            if (($374 | 0) == 0) {
              break;
            }
            var $378 = FUNCTION_TABLE[$374]($opdata, $context_3, $353 ? 3 : 4);
            do {
              if (($378 | 0) != 0) {
                var $383 = _malloc(_strlen($378) + 13 | 0);
                if (($383 | 0) == 0) {
                  break;
                }
                for (var $$src = 474188, $$dest = $383, $$stop = $$src + 13; $$src < $$stop; $$src++, $$dest++) {
                  HEAP8[$$dest] = HEAP8[$$src];
                }
                _strcat($383, $378);
                FUNCTION_TABLE[HEAP32[$369 >> 2]]($opdata, $accountname, $protocol, $sender, $383);
                _free($383);
              }
            } while (0);
            var $390 = HEAP32[$ops$s2 + 15];
            if (($390 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[$390]($opdata, $378);
          }
        } while (0);
        HEAP32[$172$s2] = 1;
        break;
      }
      if ((_otrl_tlv_find(HEAP32[$tlvs$s2], 1) | 0) != 0) {
        _otrl_context_force_finished($context_3);
      }
      var $401 = _otrl_tlv_find(HEAP32[$tlvs$s2], 8);
      do {
        if (($401 | 0) != 0 & HEAP32[110121] >>> 0 > 262143) {
          var $407 = HEAP32[$ops$s2 + 13];
          if (($407 | 0) == 0) {
            break;
          }
          var $411 = HEAP16[$401 + 2 >> 1];
          if (($411 & 65535) <= 3) {
            break;
          }
          var $416 = HEAP32[$401 + 4 >> 2];
          FUNCTION_TABLE[$407]($opdata, $context_3, HEAPU8[$416 + 1 | 0] << 16 | HEAPU8[$416] << 24 | HEAPU8[$416 + 3 | 0] | HEAPU8[$416 + 2 | 0] << 8, $416 + 4 | 0, ($411 & 65535) - 4 | 0, $348);
        }
      } while (0);
      _gcry_free($348);
      var $437$s2 = ($context_3 + 296 | 0) >> 2;
      var $440 = HEAP32[HEAP32[$437$s2] + 44 >> 2];
      var $442 = _otrl_tlv_find(HEAP32[$tlvs$s2], 7);
      L1754 : do {
        if (($442 | 0) != 0) {
          do {
            if (($440 | 0) == 0) {
              var $447 = $442 + 2 | 0;
              var $448 = HEAP16[$447 >> 1];
              if ($448 << 16 >> 16 == 0) {
                break;
              }
              var $451 = $448 & 65535;
              var $452 = $442 + 4 | 0;
              var $453 = HEAP32[$452 >> 2];
              var $455 = _memchr($453, 0, $451 - 1 | 0);
              if (($455 | 0) == 0) {
                var $463 = $451;
              } else {
                var $463 = 1 - $453 + $455 | 0;
              }
              var $463;
              _otrl_sm_step2a(HEAP32[$437$s2], HEAP32[$452 >> 2] + $463 | 0, HEAPU16[$447 >> 1] - $463 | 0, 1);
              var $476 = HEAP32[$ops$s2 + 18];
              var $477 = ($476 | 0) != 0;
              if ((HEAP32[HEAP32[$437$s2] + 52 >> 2] | 0) != -2) {
                if (!$477) {
                  break L1754;
                }
                FUNCTION_TABLE[$476]($opdata, 4, $context_3, 25, $453);
                break L1754;
              }
              if ($477) {
                FUNCTION_TABLE[$476]($opdata, 3, $context_3, 0, 0);
              }
              HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
              HEAP32[HEAP32[$437$s2] + 52 >> 2] = 0;
              break L1754;
            }
          } while (0);
          var $489 = HEAP32[$ops$s2 + 18];
          if (($489 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[$489]($opdata, 1, $context_3, 0, 0);
        }
      } while (0);
      var $494 = _otrl_tlv_find(HEAP32[$tlvs$s2], 2);
      do {
        if (($494 | 0) != 0) {
          if (($440 | 0) != 0) {
            var $524 = HEAP32[$ops$s2 + 18];
            if (($524 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[$524]($opdata, 1, $context_3, 0, 0);
            break;
          }
          _otrl_sm_step2a(HEAP32[$437$s2], HEAP32[$494 + 4 >> 2], HEAPU16[$494 + 2 >> 1], 0);
          var $511 = HEAP32[$ops$s2 + 18];
          var $512 = ($511 | 0) != 0;
          if ((HEAP32[HEAP32[$437$s2] + 52 >> 2] | 0) != -2) {
            if (!$512) {
              break;
            }
            FUNCTION_TABLE[$511]($opdata, 5, $context_3, 25, 0);
            break;
          }
          if ($512) {
            FUNCTION_TABLE[$511]($opdata, 3, $context_3, 0, 0);
          }
          HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
          HEAP32[HEAP32[$437$s2] + 52 >> 2] = 0;
        }
      } while (0);
      var $529 = _otrl_tlv_find(HEAP32[$tlvs$s2], 3);
      do {
        if (($529 | 0) != 0) {
          if (($440 | 0) != 1) {
            var $578 = HEAP32[$ops$s2 + 18];
            if (($578 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[$578]($opdata, 1, $context_3, 0, 0);
            break;
          }
          _otrl_sm_step3(HEAP32[$437$s2], HEAP32[$529 + 4 >> 2], HEAPU16[$529 + 2 >> 1], $nextmsg, $nextmsglen);
          if ((HEAP32[HEAP32[$437$s2] + 52 >> 2] | 0) == -2) {
            var $566 = HEAP32[$ops$s2 + 18];
            if (($566 | 0) != 0) {
              FUNCTION_TABLE[$566]($opdata, 3, $context_3, 0, 0);
            }
            HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
            HEAP32[HEAP32[$437$s2] + 52 >> 2] = 0;
          } else {
            var $549 = _otrl_tlv_new(4, HEAP32[$nextmsglen >> 2] & 65535, HEAP32[$nextmsg >> 2]);
            if ((_otrl_proto_create_data($sendsmp, $context_3, 472128, $549, 1, 0) | 0) == 0) {
              _fragment_and_send($ops, $opdata, $context_3, HEAP32[$sendsmp >> 2], 1, 0);
            }
            _free(HEAP32[$sendsmp >> 2]);
            _otrl_tlv_free($549);
            var $558 = HEAP32[$ops$s2 + 18];
            if (($558 | 0) != 0) {
              FUNCTION_TABLE[$558]($opdata, 6, $context_3, 60, 0);
            }
            HEAP32[HEAP32[$437$s2] + 44 >> 2] = 3;
          }
          _free(HEAP32[$nextmsg >> 2]);
        }
      } while (0);
      var $583 = _otrl_tlv_find(HEAP32[$tlvs$s2], 4);
      do {
        if (($583 | 0) != 0) {
          if (($440 | 0) != 2) {
            var $646 = HEAP32[$ops$s2 + 18];
            if (($646 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[$646]($opdata, 1, $context_3, 0, 0);
            break;
          }
          var $594 = _otrl_sm_step4(HEAP32[$437$s2], HEAP32[$583 + 4 >> 2], HEAPU16[$583 + 2 >> 1], $nextmsg2, $nextmsglen3);
          if ((HEAP32[HEAP32[$437$s2] + 48 >> 2] | 0) == 0) {
            _set_smp_trust($ops, $opdata, $context_3, ($594 | 0) == (_gcry_error113(0) | 0) & 1);
          }
          if ((HEAP32[HEAP32[$437$s2] + 52 >> 2] | 0) == -2) {
            var $634 = HEAP32[$ops$s2 + 18];
            if (($634 | 0) != 0) {
              FUNCTION_TABLE[$634]($opdata, 3, $context_3, 0, 0);
            }
            HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
            HEAP32[HEAP32[$437$s2] + 52 >> 2] = 0;
          } else {
            var $612 = _otrl_tlv_new(5, HEAP32[$nextmsglen3 >> 2] & 65535, HEAP32[$nextmsg2 >> 2]);
            if ((_otrl_proto_create_data($sendsmp5, $context_3, 472128, $612, 1, 0) | 0) == 0) {
              _fragment_and_send($ops, $opdata, $context_3, HEAP32[$sendsmp5 >> 2], 1, 0);
            }
            _free(HEAP32[$sendsmp5 >> 2]);
            _otrl_tlv_free($612);
            var $621 = HEAP32[$ops$s2 + 18];
            if (($621 | 0) != 0) {
              FUNCTION_TABLE[$621]($opdata, (HEAP32[HEAP32[$437$s2] + 52 >> 2] | 0) == 1 ? 7 : 8, $context_3, 100, 0);
            }
            HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
          }
          _free(HEAP32[$nextmsg2 >> 2]);
        }
      } while (0);
      var $651 = _otrl_tlv_find(HEAP32[$tlvs$s2], 5);
      do {
        if (($651 | 0) != 0) {
          if (($440 | 0) != 3) {
            var $689 = HEAP32[$ops$s2 + 18];
            if (($689 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[$689]($opdata, 1, $context_3, 0, 0);
            break;
          }
          _set_smp_trust($ops, $opdata, $context_3, (_otrl_sm_step5(HEAP32[$437$s2], HEAP32[$651 + 4 >> 2], HEAPU16[$651 + 2 >> 1]) | 0) == (_gcry_error113(0) | 0) & 1);
          var $668 = HEAP32[HEAP32[$437$s2] + 52 >> 2];
          var $671 = HEAP32[$ops$s2 + 18];
          var $672 = ($671 | 0) != 0;
          if (($668 | 0) == -2) {
            if ($672) {
              FUNCTION_TABLE[$671]($opdata, 3, $context_3, 0, 0);
            }
            HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
            HEAP32[HEAP32[$437$s2] + 52 >> 2] = 0;
            break;
          } else {
            if ($672) {
              FUNCTION_TABLE[$671]($opdata, ($668 | 0) == 1 ? 7 : 8, $context_3, 100, 0);
            }
            HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
            break;
          }
        }
      } while (0);
      do {
        if ((_otrl_tlv_find(HEAP32[$tlvs$s2], 6) | 0) != 0) {
          HEAP32[HEAP32[$437$s2] + 44 >> 2] = 0;
          var $700 = HEAP32[$ops$s2 + 18];
          if (($700 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[$700]($opdata, 2, $context_3, 0, 0);
        }
      } while (0);
      do {
        if (HEAP8[HEAP32[$plaintext$s2]] << 24 >> 24 == 0) {
          var $709 = HEAP32[$ops$s2 + 19];
          if (($709 | 0) != 0) {
            var $712 = _gcry_error113(0);
            FUNCTION_TABLE[$709]($opdata, 10, $context_3, 0, $712);
          }
          HEAP32[$172$s2] = 1;
        } else {
          if ((HEAP32[$172$s2] | 0) == 1) {
            break;
          }
          if ((HEAP32[HEAP32[$164$s2] + 12 >> 2] | 0) == 0) {
            break;
          }
          var $723 = _time(0);
          if ((HEAP32[HEAP32[$164$s2] + 576 >> 2] | 0) >= ($723 - 60 | 0)) {
            break;
          }
          if ((_otrl_proto_create_data($heartbeat, $context_3, 472128, 0, 1, 0) | 0) != 0) {
            break;
          }
          var $734 = HEAP32[$ops$s2 + 3];
          if (($734 | 0) != 0) {
            FUNCTION_TABLE[$734]($opdata, $accountname, $protocol, $sender, HEAP32[$heartbeat >> 2]);
          }
          _free(HEAP32[$heartbeat >> 2]);
          HEAP32[HEAP32[$164$s2] + 576 >> 2] = $723;
          _otrl_context_update_recent_child($context_3, 1);
          var $743 = HEAP32[$ops$s2 + 19];
          if (($743 | 0) == 0) {
            break;
          }
          var $746 = _gcry_error113(0);
          FUNCTION_TABLE[$743]($opdata, 11, $context_3, 0, $746);
        }
      } while (0);
      var $748 = HEAP32[$tlvs$s2];
      if ($7) {
        HEAP32[$tlvsp >> 2] = $748;
      } else {
        _otrl_tlv_free($748);
      }
      if ((HEAP32[$172$s2] | 0) == 1) {
        _free(HEAP32[$plaintext$s2]);
        break;
      }
      HEAP32[$converted_msg$s2] = 0;
      HEAP32[$newmessagep$s2] = HEAP32[$plaintext$s2];
      HEAP32[$172$s2] = 0;
      var $757 = HEAP32[$ops$s2 + 21];
      if (($757 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[$757]($opdata, $context_3, 1, $converted_msg, HEAP32[$plaintext$s2]);
      if ((HEAP32[$converted_msg$s2] | 0) == 0) {
        break;
      }
      _free(HEAP32[$plaintext$s2]);
      HEAP32[$plaintext$s2] = 0;
      HEAP32[$newmessagep$s2] = _strdup(HEAP32[$converted_msg$s2]);
      var $768 = HEAP32[$ops$s2 + 22];
      if (($768 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[$768]($opdata, $context_3, HEAP32[$converted_msg$s2]);
      break;
    } else if (($65 | 0) == 7) {
      if ((HEAP32[$context_3$s2 + 12] | 0) == 1) {
        var $287 = HEAP32[$164$s2];
        var $our_keyid_1 = HEAP32[$287 + 24 >> 2] - 1 | 0;
        var $our_dh_1 = $287 + 40 | 0;
      } else {
        var $our_keyid_1 = 0;
        var $our_dh_1 = 0;
      }
      var $our_dh_1;
      var $our_keyid_1;
      var $293 = $context_3 + 16 | 0;
      var $294 = HEAP32[$293 >> 2];
      var $295 = $context_3 + 20 | 0;
      var $296 = HEAP32[$295 >> 2];
      var $297 = _otrl_privkey_find($us, $294, $296);
      do {
        if (($297 | 0) == 0) {
          var $301 = HEAP32[$ops$s2 + 1];
          if (($301 | 0) == 0) {
            break;
          }
          FUNCTION_TABLE[$301]($opdata, $294, $296);
          var $306 = _otrl_privkey_find($us, HEAP32[$293 >> 2], HEAP32[$295 >> 2]);
          if (($306 | 0) == 0) {
            break;
          } else {
            var $privkey_339 = $306;
            label = 1385;
            break;
          }
        } else {
          var $privkey_339 = $297;
          label = 1385;
        }
      } while (0);
      do {
        if (label == 1385) {
          var $privkey_339;
          var $310 = _otrl_auth_handle_v1_key_exchange($context_3 + 52 | 0, $_02, $haveauthmsg, $privkey_339, $our_dh_1, $our_keyid_1, 196, $edata);
          if ((HEAP32[$haveauthmsg$s2] | $310 | 0) == 0) {
            break;
          }
          _send_or_error_auth($ops, $opdata, $310, $context_3, $us);
          _maybe_resend($edata);
        }
      } while (0);
      if ((HEAP32[$172$s2] | 0) != -1) {
        break;
      }
      HEAP32[$172$s2] = 1;
      break;
    } else if (($65 | 0) == 9) {
      if (($policy_019 & 64 | 0) != 0) {
        var $778 = $context_3 + 16 | 0;
        var $780 = _otrl_proto_default_query_msg(HEAP32[$778 >> 2], $policy_019);
        do {
          if (($780 | 0) != 0) {
            var $784 = HEAP32[$ops$s2 + 3];
            if (($784 | 0) == 0) {
              break;
            }
            FUNCTION_TABLE[$784]($opdata, HEAP32[$778 >> 2], HEAP32[$context_3$s2 + 5], HEAP32[$context_3$s2 + 3], $780);
          }
        } while (0);
        _free($780);
      }
      if ((HEAP32[$context_3$s2 + 12] | 0) == 1) {
        HEAP32[HEAP32[$164$s2] + 588 >> 2] = 1;
      }
      var $802 = HEAP32[$ops$s2 + 19];
      if (($802 | 0) == 0) {
        break;
      }
      var $805 = _strstr($_02, 474188);
      if (($805 | 0) == 0) {
        break;
      }
      var $808 = $805 + 12 | 0;
      var $_ = HEAP8[$808] << 24 >> 24 == 32 ? $805 + 13 | 0 : $808;
      var $812 = _gcry_error113(0);
      FUNCTION_TABLE[$802]($opdata, 12, $context_3, $_, $812);
      HEAP32[$172$s2] = 1;
      break;
    } else if (($65 | 0) == 1) {
      var $814 = _otrl_proto_whitespace_bestversion($_02, $startwhite, $endwhite, $policy_019);
      do {
        if ((HEAP32[$startwhite >> 2] | 0) != 0) {
          var $818 = HEAP32[$endwhite >> 2];
          if (($818 | 0) == 0) {
            break;
          }
          var $821 = _strlen($818);
          var $822 = _strdup($_02);
          if (($822 | 0) == 0) {
            break;
          }
          var $827 = $_02;
          _memmove($822 + (HEAP32[$startwhite >> 2] - $827) | 0, $822 + (HEAP32[$endwhite >> 2] - $827) | 0, $821 + 1 | 0, 1, 0);
          HEAP32[$newmessagep$s2] = $822;
          HEAP32[$172$s2] = 0;
        }
      } while (0);
      if (($814 | 0) == 0) {
        label = 1533;
        break;
      }
      if ((HEAP32[$context_3$s2 + 12] | 0) == 1) {
        label = 1533;
        break;
      }
      if (($policy_019 & 32 | 0) == 0) {
        label = 1533;
        break;
      }
      if (($814 | 0) == 3) {
        _send_or_error_auth($ops, $opdata, _otrl_auth_start_v23($context_3 + 52 | 0, 3), $context_3, $us);
        label = 1533;
        break;
      } else if (($814 | 0) == 2) {
        _send_or_error_auth($ops, $opdata, _otrl_auth_start_v23($context_3 + 52 | 0, 2), $context_3, $us);
        label = 1533;
        break;
      } else if (($814 | 0) == 1) {
        var $852 = $context_3 + 16 | 0;
        var $853 = HEAP32[$852 >> 2];
        var $854 = $context_3 + 20 | 0;
        var $855 = HEAP32[$854 >> 2];
        var $856 = _otrl_privkey_find($us, $853, $855);
        if (($856 | 0) == 0) {
          var $860 = HEAP32[$ops$s2 + 1];
          if (($860 | 0) == 0) {
            label = 1533;
            break;
          }
          FUNCTION_TABLE[$860]($opdata, $853, $855);
          var $865 = _otrl_privkey_find($us, HEAP32[$852 >> 2], HEAP32[$854 >> 2]);
          if (($865 | 0) == 0) {
            label = 1533;
            break;
          } else {
            var $privkey_442 = $865;
          }
        } else {
          var $privkey_442 = $856;
        }
        var $privkey_442;
        _send_or_error_auth($ops, $opdata, _otrl_auth_start_v1($context_3 + 52 | 0, 0, 0, $privkey_442), $context_3, $us);
        label = 1533;
        break;
      } else {
        label = 1533;
        break;
      }
    } else if (($65 | 0) == 0) {
      label = 1533;
    } else if (($65 | 0) == 10) {
      var $886 = HEAP32[$ops$s2 + 19];
      if (($886 | 0) != 0) {
        var $889 = _gcry_error113(0);
        FUNCTION_TABLE[$886]($opdata, 14, $context_3, 0, $889);
      }
      if ((HEAP32[$172$s2] | 0) != -1) {
        break;
      }
      HEAP32[$172$s2] = 1;
      break;
    }
  } while (0);
  do {
    if (label == 1533) {
      if ((HEAP32[$22 + 48 >> 2] | 0) == 0) {
        if (($policy_019 & 8 | 0) == 0) {
          break;
        }
      }
      var $876 = HEAP32[$newmessagep$s2];
      var $878 = HEAP32[$ops$s2 + 19];
      if (($878 | 0) == 0) {
        break;
      }
      var $882 = _gcry_error113(0);
      FUNCTION_TABLE[$878]($opdata, 13, $context_3, ($876 | 0) == 0 ? $_02 : $876, $882);
      _free(HEAP32[$newmessagep$s2]);
      HEAP32[$newmessagep$s2] = 0;
      HEAP32[$172$s2] = 1;
    }
  } while (0);
  if (($fragment_assembled_0 | 0) != 0) {
    _free(HEAP32[$unfragmessage$s2]);
  }
  if ((HEAP32[$172$s2] | 0) == -1) {
    HEAP32[$172$s2] = 0;
  }
  var $_0 = HEAP32[$172$s2];
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
Module["_otrl_message_receiving"] = _otrl_message_receiving;
_otrl_message_receiving["X"] = 1;
function _otrl_message_poll_get_default_interval($us) {
  return 70;
}
function _gpg_err_code($err) {
  return $err & 65535;
}
function _message_malformed($ops, $opdata, $context) {
  var $2 = HEAP32[$ops + 76 >> 2];
  if (($2 | 0) != 0) {
    var $5 = _gcry_error113(0);
    FUNCTION_TABLE[$2]($opdata, 9, $context, 0, $5);
  }
  var $7 = $ops + 12 | 0;
  if ((HEAP32[$7 >> 2] | 0) == 0) {
    return;
  }
  var $12 = HEAP32[$ops + 56 >> 2];
  if (($12 | 0) == 0) {
    return;
  }
  var $15 = FUNCTION_TABLE[$12]($opdata, $context, 4);
  if (($15 | 0) == 0) {
    return;
  }
  var $20 = _malloc(_strlen($15) + 13 | 0);
  if (($20 | 0) != 0) {
    for (var $$src = 474188, $$dest = $20, $$stop = $$src + 13; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    _strcat($20, $15);
    FUNCTION_TABLE[HEAP32[$7 >> 2]]($opdata, HEAP32[$context + 16 >> 2], HEAP32[$context + 20 >> 2], HEAP32[$context + 12 >> 2], $20);
    _free($20);
  }
  var $33 = HEAP32[$ops + 60 >> 2];
  if (($33 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$33]($opdata, $15);
  return;
}
function _send_or_error_auth($ops, $opdata, $err, $context, $us) {
  var $context$s2 = $context >> 2;
  var label = 0;
  if (($err | 0) != 0) {
    var $47 = HEAP32[$ops + 76 >> 2];
    if (($47 | 0) == 0) {
      return;
    }
    FUNCTION_TABLE[$47]($opdata, 4, $context, 0, $err);
    return;
  }
  var $4 = HEAP32[$context$s2 + 55];
  if (($4 | 0) == 0) {
    return;
  }
  if (HEAP8[$4] << 24 >> 24 == 0) {
    return;
  }
  _fragment_and_send($ops, $opdata, $context, $4, 1, 0);
  var $11 = _time(0);
  var $12 = $context + 24 | 0;
  do {
    if ((HEAP32[$12 >> 2] | 0) == ($context | 0)) {
      if ((HEAP32[$context$s2 + 47] | 0) == 3) {
        break;
      } else {
        label = 1583;
        break;
      }
    } else {
      label = 1583;
    }
  } while (0);
  if (label == 1583) {
    HEAP32[HEAP32[$context$s2 + 2] + 576 >> 2] = $11;
    _otrl_context_update_recent_child($context, 1);
  }
  if ((HEAP32[$12 >> 2] | 0) != ($context | 0)) {
    return;
  }
  if ((HEAP32[$context$s2 + 13] | 0) != 1) {
    return;
  }
  if ((HEAP32[$context$s2 + 47] | 0) != 3) {
    return;
  }
  HEAP32[$context$s2 + 56] = $11;
  var $36 = $us + 16 | 0;
  if ((HEAP32[$36 >> 2] | 0) != 0 | ($ops | 0) == 0) {
    return;
  }
  var $42 = HEAP32[$ops + 92 >> 2];
  if (($42 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$42]($opdata, 70);
  HEAP32[$36 >> 2] = 1;
  return;
}
_send_or_error_auth["X"] = 1;
function _go_encrypted($auth, $asdata) {
  var $191$s2;
  var $109$s2;
  var $91$s2;
  var $69$s2;
  var $51$s2;
  var $2$s2;
  var $asdata$s2 = $asdata >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $fprint_added = __stackBase__;
  HEAP32[$fprint_added >> 2] = 0;
  var $2$s2 = ($asdata + 16 | 0) >> 2;
  var $3 = HEAP32[$2$s2];
  var $5 = HEAP32[$3 + 48 >> 2];
  var $7 = HEAP32[$3 + 248 >> 2];
  if ((_gcry_mpi_cmp(HEAP32[$auth + 80 >> 2], HEAP32[$auth + 16 >> 2]) | 0) == 0) {
    var $19 = HEAP32[HEAP32[$asdata$s2 + 2] + 76 >> 2];
    if (($19 | 0) != 0) {
      var $24 = HEAP32[$asdata$s2 + 3];
      var $25 = HEAP32[$2$s2];
      var $26 = _gcry_error113(0);
      FUNCTION_TABLE[$19]($24, 5, $25, 0, $26);
    }
    HEAP32[$asdata$s2 + 5] = 1;
    var $_0 = _gcry_error113(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $32 = HEAP32[$2$s2];
  var $34 = _otrl_context_find_fingerprint($32, $32 + 164 | 0, 1, $fprint_added);
  do {
    if ((HEAP32[$fprint_added >> 2] | 0) != 0) {
      var $39 = $asdata + 8 | 0;
      var $42 = HEAP32[HEAP32[$39 >> 2] + 20 >> 2];
      if (($42 | 0) != 0) {
        var $51 = HEAP32[$2$s2], $51$s2 = $51 >> 2;
        FUNCTION_TABLE[$42](HEAP32[$asdata$s2 + 3], HEAP32[$asdata$s2 + 1], HEAP32[$51$s2 + 4], HEAP32[$51$s2 + 5], HEAP32[$51$s2 + 3], $51 + 164 | 0);
      }
      var $62 = HEAP32[HEAP32[$39 >> 2] + 24 >> 2];
      if (($62 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[$62](HEAP32[$asdata$s2 + 3]);
    }
  } while (0);
  var $69$s2 = HEAP32[$2$s2] >> 2;
  var $73 = ($7 | 0) == ($34 | 0);
  do {
    if ((HEAP32[$69$s2 + 12] | 0) == 1 & $73) {
      var $76 = HEAP32[$69$s2 + 2];
      if ((HEAP32[$76 + 24 >> 2] - 1 | 0) != (HEAP32[$69$s2 + 18] | 0)) {
        break;
      }
      if ((_gcry_mpi_cmp(HEAP32[$76 + 48 >> 2], HEAP32[$69$s2 + 17]) | 0) != 0) {
        break;
      }
      var $91$s2 = HEAP32[$2$s2] >> 2;
      var $93 = HEAP32[$91$s2 + 2];
      var $95 = HEAP32[$93 + 12 >> 2];
      do {
        if (($95 | 0) == 0) {
          label = 1618;
        } else {
          if (($95 | 0) != (HEAP32[$91$s2 + 34] | 0)) {
            label = 1618;
            break;
          }
          if ((_gcry_mpi_cmp(HEAP32[$93 + 16 >> 2], HEAP32[$91$s2 + 33]) | 0) == 0) {
            break;
          } else {
            label = 1618;
            break;
          }
        }
      } while (0);
      if (label == 1618) {
        var $109$s2 = HEAP32[$2$s2] >> 2;
        var $111 = HEAP32[$109$s2 + 2];
        var $113 = HEAP32[$111 + 12 >> 2];
        if ($113 >>> 0 <= 1) {
          break;
        }
        if (($113 - 1 | 0) != (HEAP32[$109$s2 + 34] | 0)) {
          break;
        }
        var $122 = HEAP32[$111 + 20 >> 2];
        if (($122 | 0) == 0) {
          break;
        }
        if ((_gcry_mpi_cmp($122, HEAP32[$109$s2 + 33]) | 0) != 0) {
          break;
        }
      }
      var $134 = HEAP32[HEAP32[$asdata$s2 + 2] + 36 >> 2];
      if (($134 | 0) != 0) {
        var $140 = HEAP32[$2$s2];
        FUNCTION_TABLE[$134](HEAP32[$asdata$s2 + 3], $140, HEAP32[$140 + 184 >> 2]);
      }
      HEAP32[$asdata$s2 + 5] = 1;
      var $_0 = _gcry_error113(0);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $148 = HEAP32[$2$s2];
  _memcpy($148 + 252 | 0, $148 + 192 | 0, 20);
  var $151 = HEAP32[$2$s2];
  HEAP32[$151 + 272 >> 2] = HEAP32[$151 + 212 >> 2];
  var $155 = HEAP32[$2$s2];
  HEAP32[$155 + 276 >> 2] = HEAP32[$155 + 216 >> 2];
  var $159 = HEAP32[$2$s2];
  HEAP32[$159 + 280 >> 2] = HEAP32[$159 + 188 >> 2];
  var $163 = HEAP32[$2$s2];
  HEAP32[HEAP32[$163 + 8 >> 2] + 12 >> 2] = HEAP32[$163 + 136 >> 2];
  _gcry_mpi_release(HEAP32[HEAP32[HEAP32[$2$s2] + 8 >> 2] + 16 >> 2]);
  _gcry_mpi_release(HEAP32[HEAP32[HEAP32[$2$s2] + 8 >> 2] + 20 >> 2]);
  var $182 = _gcry_mpi_copy(HEAP32[HEAP32[$2$s2] + 132 >> 2]);
  HEAP32[HEAP32[HEAP32[$2$s2] + 8 >> 2] + 16 >> 2] = $182;
  HEAP32[HEAP32[HEAP32[$2$s2] + 8 >> 2] + 20 >> 2] = 0;
  var $191$s2 = HEAP32[$2$s2] >> 2;
  var $193 = HEAP32[$191$s2 + 2];
  do {
    if ((HEAP32[$193 + 24 >> 2] - 1 | 0) == (HEAP32[$191$s2 + 18] | 0)) {
      if ((_gcry_mpi_cmp(HEAP32[$193 + 48 >> 2], HEAP32[$191$s2 + 17]) | 0) == 0) {
        break;
      } else {
        label = 1627;
        break;
      }
    } else {
      label = 1627;
    }
  } while (0);
  if (label == 1627) {
    _otrl_dh_keypair_free(HEAP32[HEAP32[$2$s2] + 8 >> 2] + 28 | 0);
    _otrl_dh_keypair_free(HEAP32[HEAP32[$2$s2] + 8 >> 2] + 40 | 0);
    var $216 = HEAP32[$2$s2];
    _otrl_dh_keypair_copy(HEAP32[$216 + 8 >> 2] + 40 | 0, $216 + 60 | 0);
    var $223 = HEAP32[HEAP32[$2$s2] + 8 >> 2];
    _otrl_dh_gen_keypair(HEAP32[$223 + 40 >> 2], $223 + 28 | 0);
    var $228 = HEAP32[$2$s2];
    HEAP32[HEAP32[$228 + 8 >> 2] + 24 >> 2] = HEAP32[$228 + 72 >> 2] + 1 | 0;
  }
  _otrl_dh_session_free(HEAP32[HEAP32[$2$s2] + 8 >> 2] + 52 | 0);
  var $242 = HEAP32[HEAP32[$2$s2] + 8 >> 2];
  var $247 = _otrl_dh_session($242 + 52 | 0, $242 + 28 | 0, HEAP32[$242 + 16 >> 2]);
  if (($247 | 0) != 0) {
    var $_0 = $247;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _otrl_dh_session_free(HEAP32[HEAP32[$2$s2] + 8 >> 2] + 308 | 0);
  var $256 = HEAP32[HEAP32[$2$s2] + 8 >> 2];
  var $261 = _otrl_dh_session($256 + 308 | 0, $256 + 40 | 0, HEAP32[$256 + 16 >> 2]);
  if (($261 | 0) != 0) {
    var $_0 = $261;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $267 = HEAP32[HEAP32[$2$s2] + 8 >> 2] + 572 | 0;
  HEAP32[$267 >> 2] = HEAP32[$267 >> 2] + 1 | 0;
  HEAP32[HEAP32[$2$s2] + 248 >> 2] = $34;
  HEAP32[HEAP32[$2$s2] + 48 >> 2] = 1;
  var $275 = $asdata + 8 | 0;
  var $278 = HEAP32[HEAP32[$275 >> 2] + 16 >> 2];
  if (($278 | 0) != 0) {
    FUNCTION_TABLE[$278](HEAP32[$asdata$s2 + 3]);
  }
  var $286 = HEAP32[$275 >> 2];
  do {
    if (($5 | 0) == 1 & $73) {
      var $289 = HEAP32[$286 + 36 >> 2];
      if (($289 | 0) == 0) {
        break;
      }
      var $295 = HEAP32[$2$s2];
      FUNCTION_TABLE[$289](HEAP32[$asdata$s2 + 3], $295, HEAP32[$295 + 184 >> 2]);
    } else {
      var $300 = HEAP32[$286 + 28 >> 2];
      if (($300 | 0) == 0) {
        break;
      }
      FUNCTION_TABLE[$300](HEAP32[$asdata$s2 + 3], HEAP32[$2$s2]);
    }
  } while (0);
  HEAP32[$asdata$s2] = 1;
  var $_0 = _gpg_error();
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_go_encrypted["X"] = 1;
function _maybe_resend($edata) {
  var $9$s2;
  var $6$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $resendmsg = __stackBase__;
  if ((HEAP32[$edata >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $5 = _time(0);
  var $6$s2 = ($edata + 16 | 0) >> 2;
  var $7 = HEAP32[$6$s2];
  var $9$s2 = HEAP32[$7 + 8 >> 2] >> 2;
  var $11 = HEAP32[$9$s2 + 146];
  if (($11 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $15 = HEAP32[$9$s2 + 147];
  if (($15 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[$9$s2 + 144] | 0) < ($5 - 60 | 0)) {
    STACKTOP = __stackBase__;
    return;
  }
  var $23 = ($15 | 0) == 1;
  do {
    if ($23) {
      var $27 = $edata + 8 | 0;
      var $30 = HEAP32[HEAP32[$27 >> 2] + 64 >> 2];
      if (($30 | 0) == 0) {
        var $37 = 0;
      } else {
        var $37 = FUNCTION_TABLE[$30](HEAP32[$edata + 12 >> 2], $7);
      }
      var $37;
      var $38 = ($37 | 0) == 0;
      var $_ = $38 ? 490660 : $37;
      var $48 = _malloc(_strlen(HEAP32[HEAP32[HEAP32[$6$s2] + 8 >> 2] + 584 >> 2]) + _strlen($_) + 2 | 0);
      if (($48 | 0) == 0) {
        STACKTOP = __stackBase__;
        return;
      }
      _strcpy($48, $_);
      var $52 = $48 + _strlen($48) | 0;
      tempBigInt = 32;
      HEAP8[$52] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$52 + 1] = tempBigInt & 255;
      _strcat($48, HEAP32[HEAP32[HEAP32[$6$s2] + 8 >> 2] + 584 >> 2]);
      if (!$38) {
        FUNCTION_TABLE[HEAP32[HEAP32[$27 >> 2] + 68 >> 2]](HEAP32[$edata + 12 >> 2], $_);
      }
      var $67 = _otrl_proto_create_data($resendmsg, HEAP32[$6$s2], $48, 0, 0, 0);
      if (!$23) {
        var $70 = $67;
        break;
      }
      _free($48);
      var $70 = $67;
    } else {
      var $70 = _otrl_proto_create_data($resendmsg, HEAP32[$6$s2], $11, 0, 0, 0);
    }
  } while (0);
  var $70;
  if (($70 | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $73 = $edata + 8 | 0;
  var $75 = $edata + 12 | 0;
  _fragment_and_send(HEAP32[$73 >> 2], HEAP32[$75 >> 2], HEAP32[$6$s2], HEAP32[$resendmsg >> 2], 1, 0);
  _free(HEAP32[$resendmsg >> 2]);
  HEAP32[HEAP32[HEAP32[$6$s2] + 8 >> 2] + 576 >> 2] = $5;
  _otrl_context_update_recent_child(HEAP32[$6$s2], 1);
  do {
    if ($23) {
      var $89 = HEAP32[HEAP32[$73 >> 2] + 76 >> 2];
      if (($89 | 0) == 0) {
        break;
      }
      var $92 = HEAP32[$75 >> 2];
      var $93 = HEAP32[$6$s2];
      var $94 = _gcry_error113(0);
      FUNCTION_TABLE[$89]($92, 6, $93, 0, $94);
    }
  } while (0);
  HEAP32[$edata + 20 >> 2] = 1;
  STACKTOP = __stackBase__;
  return;
}
_maybe_resend["X"] = 1;
function _set_smp_trust($ops, $opdata, $context, $trusted) {
  _otrl_context_set_trust(HEAP32[$context + 248 >> 2], ($trusted | 0) != 0 ? 465680 : 472128);
  var $6 = HEAP32[$ops + 24 >> 2];
  if (($6 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$6]($opdata);
  return;
}
function _otrl_message_disconnect($us, $ops, $opdata, $accountname, $protocol, $username, $instance) {
  var $1 = _otrl_context_find($us, $username, $accountname, $protocol, $instance, 0, 0, 0, 0);
  if (($1 | 0) == 0) {
    return;
  }
  _disconnect_context($ops, $opdata, $1);
  return;
}
Module["_otrl_message_disconnect"] = _otrl_message_disconnect;
function _disconnect_context($ops, $opdata, $context) {
  var $encmsg$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $encmsg = __stackBase__, $encmsg$s2 = $encmsg >> 2;
  if (($context | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  do {
    if ((HEAP32[$context + 48 >> 2] | 0) == 1) {
      if ((HEAP32[HEAP32[$context + 8 >> 2] + 12 >> 2] | 0) == 0) {
        break;
      }
      var $14 = HEAP32[$ops + 8 >> 2];
      if (($14 | 0) == 0) {
        break;
      }
      var $17 = $context + 16 | 0;
      var $19 = $context + 20 | 0;
      var $21 = $context + 12 | 0;
      if ((FUNCTION_TABLE[$14]($opdata, HEAP32[$17 >> 2], HEAP32[$19 >> 2], HEAP32[$21 >> 2]) | 0) != 1) {
        break;
      }
      var $26 = $ops + 12 | 0;
      if ((HEAP32[$26 >> 2] | 0) == 0) {
        break;
      }
      HEAP32[$encmsg$s2] = 0;
      var $30 = _otrl_tlv_new(1, 0, 0);
      if ((_otrl_proto_create_data($encmsg, $context, 472128, $30, 1, 0) | 0) == 0) {
        FUNCTION_TABLE[HEAP32[$26 >> 2]]($opdata, HEAP32[$17 >> 2], HEAP32[$19 >> 2], HEAP32[$21 >> 2], HEAP32[$encmsg$s2]);
      }
      _free(HEAP32[$encmsg$s2]);
      _otrl_tlv_free($30);
    }
  } while (0);
  _otrl_context_force_plaintext($context);
  var $43 = HEAP32[$ops + 16 >> 2];
  if (($43 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  FUNCTION_TABLE[$43]($opdata);
  STACKTOP = __stackBase__;
  return;
}
_disconnect_context["X"] = 1;
function _otrl_message_disconnect_all_instances($us, $ops, $opdata, $accountname, $protocol, $username) {
  var label = 0;
  if (($username | 0) == 0 | ($accountname | 0) == 0 | ($protocol | 0) == 0) {
    return;
  }
  var $5 = _otrl_context_find($us, $username, $accountname, $protocol, 0, 0, 0, 0, 0);
  if (($5 | 0) == 0) {
    return;
  }
  var $7 = $5 + 24 | 0;
  var $c_iter_0 = $5;
  while (1) {
    var $c_iter_0;
    if (($c_iter_0 | 0) == 0) {
      label = 1704;
      break;
    }
    if ((HEAP32[$c_iter_0 + 24 >> 2] | 0) != (HEAP32[$7 >> 2] | 0)) {
      label = 1703;
      break;
    }
    _disconnect_context($ops, $opdata, $c_iter_0);
    var $c_iter_0 = HEAP32[$c_iter_0 >> 2];
  }
  if (label == 1703) {
    return;
  } else if (label == 1704) {
    return;
  }
}
function _otrl_message_symkey($us, $ops, $opdata, $context, $use, $usedata, $usedatalen, $symkey) {
  var $encmsg$s2;
  var $context$s2 = $context >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $encmsg = __stackBase__, $encmsg$s2 = $encmsg >> 2;
  do {
    if (($context | 0) != 0) {
      var $3 = ($usedatalen | 0) != 0;
      if ($3 & ($usedata | 0) == 0) {
        break;
      }
      do {
        if ((HEAP32[$context$s2 + 12] | 0) == 1) {
          if ((HEAP32[HEAP32[$context$s2 + 2] + 12 >> 2] | 0) == 0) {
            break;
          }
          var $18 = $usedatalen + 4 | 0;
          var $19 = _malloc($18);
          HEAP32[$encmsg$s2] = 0;
          HEAP8[$19] = $use >>> 24 & 255;
          HEAP8[$19 + 1 | 0] = $use >>> 16 & 255;
          HEAP8[$19 + 2 | 0] = $use >>> 8 & 255;
          HEAP8[$19 + 3 | 0] = $use & 255;
          if ($3) {
            _memmove($19 + 4 | 0, $usedata, $usedatalen, 1, 0);
          }
          var $34 = _otrl_tlv_new(8, $18 & 65535, $19);
          _free($19);
          var $35 = _otrl_proto_create_data($encmsg, $context, 472128, $34, 1, $symkey);
          do {
            if (($35 | 0) == 0) {
              var $39 = HEAP32[$ops + 12 >> 2];
              if (($39 | 0) == 0) {
                break;
              }
              FUNCTION_TABLE[$39]($opdata, HEAP32[$context$s2 + 4], HEAP32[$context$s2 + 5], HEAP32[$context$s2 + 3], HEAP32[$encmsg$s2]);
            }
          } while (0);
          _free(HEAP32[$encmsg$s2]);
          _otrl_tlv_free($34);
          var $_0 = $35;
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      var $_0 = _gcry_error113(55);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $_0 = _gcry_error113(55);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
Module["_otrl_message_symkey"] = _otrl_message_symkey;
_otrl_message_symkey["X"] = 1;
function _gpg_err_make114($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function _otrl_tlv_seriallen($tlv) {
  if (($tlv | 0) == 0) {
    var $totlen_0_lcssa = 0;
    var $totlen_0_lcssa;
    return $totlen_0_lcssa;
  } else {
    var $totlen_01 = 0;
    var $_02 = $tlv;
  }
  while (1) {
    var $_02;
    var $totlen_01;
    var $6 = $totlen_01 + HEAPU16[$_02 + 2 >> 1] + 4 | 0;
    var $8 = HEAP32[$_02 + 8 >> 2];
    if (($8 | 0) == 0) {
      var $totlen_0_lcssa = $6;
      break;
    } else {
      var $totlen_01 = $6;
      var $_02 = $8;
    }
  }
  var $totlen_0_lcssa;
  return $totlen_0_lcssa;
}
function _otrl_tlv_find($tlvs, $type) {
  var label = 0;
  var $_01 = $tlvs;
  while (1) {
    var $_01;
    if (($_01 | 0) == 0) {
      var $_0 = 0;
      label = 1737;
      break;
    }
    if (HEAP16[$_01 >> 1] << 16 >> 16 == $type << 16 >> 16) {
      var $_0 = $_01;
      label = 1738;
      break;
    }
    var $_01 = HEAP32[$_01 + 8 >> 2];
  }
  if (label == 1737) {
    var $_0;
    return $_0;
  } else if (label == 1738) {
    var $_0;
    return $_0;
  }
}
Module["_otrl_tlv_find"] = _otrl_tlv_find;
function _otrl_message_poll($us, $ops, $opdata) {
  var $contextp_03$s2;
  var $2 = _time(0) - 60 | 0;
  if (($us | 0) == 0) {
    return;
  }
  var $contextp_01 = HEAP32[$us >> 2];
  L2165 : do {
    if (($contextp_01 | 0) == 0) {
      var $still_waiting_0_lcssa = 0;
    } else {
      var $still_waiting_02 = 0;
      var $contextp_03 = $contextp_01, $contextp_03$s2 = $contextp_03 >> 2;
      while (1) {
        var $contextp_03;
        var $still_waiting_02;
        do {
          if ((HEAP32[$contextp_03$s2 + 6] | 0) == ($contextp_03 | 0)) {
            var $11 = $contextp_03 + 52 | 0;
            if ((HEAP32[$11 >> 2] | 0) != 1) {
              var $still_waiting_1 = $still_waiting_02;
              break;
            }
            if ((HEAP32[$contextp_03$s2 + 47] | 0) != 3) {
              var $still_waiting_1 = $still_waiting_02;
              break;
            }
            var $21 = HEAP32[$contextp_03$s2 + 56];
            if (($21 | 0) <= 0) {
              var $still_waiting_1 = $still_waiting_02;
              break;
            }
            if (($21 | 0) >= ($2 | 0)) {
              var $still_waiting_1 = 1;
              break;
            }
            _otrl_auth_clear($11);
            var $still_waiting_1 = $still_waiting_02;
          } else {
            var $still_waiting_1 = $still_waiting_02;
          }
        } while (0);
        var $still_waiting_1;
        var $contextp_0 = HEAP32[$contextp_03$s2];
        if (($contextp_0 | 0) == 0) {
          var $still_waiting_0_lcssa = $still_waiting_1;
          break L2165;
        } else {
          var $still_waiting_02 = $still_waiting_1;
          var $contextp_03 = $contextp_0, $contextp_03$s2 = $contextp_03 >> 2;
        }
      }
    }
  } while (0);
  var $still_waiting_0_lcssa;
  if (($still_waiting_0_lcssa | 0) != 0 | ($ops | 0) == 0) {
    return;
  }
  var $33 = HEAP32[$ops + 92 >> 2];
  if (($33 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$33]($opdata, 0);
  HEAP32[$us + 16 >> 2] = 0;
  return;
}
_otrl_message_poll["X"] = 1;
function _gpg_error() {
  return _gpg_err_make114(0, 0);
}
function _gcry_err_make115($code) {
  return _gpg_err_make114(32, $code);
}
function _otrl_userstate_create() {
  var $1$s2;
  var $1 = _malloc(20), $1$s2 = $1 >> 2;
  if (($1 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  HEAP32[$1$s2] = 0;
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = 0;
  HEAP32[$1$s2 + 3] = 0;
  HEAP32[$1$s2 + 4] = 0;
  var $_0 = $1;
  var $_0;
  return $_0;
}
Module["_otrl_userstate_create"] = _otrl_userstate_create;
function _otrl_userstate_free($us) {
  _otrl_context_forget_all($us);
  _otrl_privkey_forget_all($us);
  _otrl_privkey_pending_forget_all($us);
  _otrl_instag_forget_all($us);
  _free($us);
  return;
}
Module["_otrl_userstate_free"] = _otrl_userstate_free;
function _otrl_tlv_new($type, $len, $data) {
  var $13$s2;
  var $1 = _malloc(12);
  if (($1 | 0) == 0) {
    ___assert_func(488928, 32, 493572, 489584);
  }
  HEAP16[$1 >> 1] = $type;
  var $8 = $1 + 2 | 0;
  HEAP16[$8 >> 1] = $len;
  var $9 = $len & 65535;
  var $11 = _malloc($9 + 1 | 0);
  var $13$s2 = ($1 + 4 | 0) >> 2;
  HEAP32[$13$s2] = $11;
  if (($11 | 0) == 0) {
    ___assert_func(488928, 36, 493572, 481124);
  }
  _memmove(HEAP32[$13$s2], $data, $9, 1, 0);
  HEAP8[HEAP32[$13$s2] + HEAPU16[$8 >> 1] | 0] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  return $1;
}
function _otrl_tlv_parse($serialized, $seriallen) {
  var $tlv$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $tlv = __stackBase__, $tlv$s2 = $tlv >> 2;
  HEAP32[$tlv$s2] = 0;
  var $_0 = $serialized;
  var $_01 = $seriallen;
  var $tlvp_0 = $tlv;
  while (1) {
    var $tlvp_0;
    var $_01;
    var $_0;
    if ($_01 >>> 0 <= 3) {
      label = 1775;
      break;
    }
    var $11 = HEAPU8[$_0 + 2 | 0] << 8 | HEAPU8[$_0 + 3 | 0];
    var $12 = $_01 - 4 | 0;
    var $13 = $11 & 65535;
    if ($12 >>> 0 < $13 >>> 0) {
      label = 1774;
      break;
    }
    var $24 = _otrl_tlv_new(HEAPU8[$_0] << 8 | HEAPU8[$_0 + 1 | 0], $11, $_0 + 4 | 0);
    HEAP32[$tlvp_0 >> 2] = $24;
    var $_0 = $13 + ($_0 + 4) | 0;
    var $_01 = $12 - $13 | 0;
    var $tlvp_0 = $24 + 8 | 0;
  }
  if (label == 1774) {
    var $29 = HEAP32[$tlv$s2];
    STACKTOP = __stackBase__;
    return $29;
  } else if (label == 1775) {
    var $29 = HEAP32[$tlv$s2];
    STACKTOP = __stackBase__;
    return $29;
  }
}
function _otrl_tlv_free($tlv) {
  if (($tlv | 0) == 0) {
    return;
  } else {
    var $_01 = $tlv;
  }
  while (1) {
    var $_01;
    var $3 = HEAP32[$_01 + 8 >> 2];
    _free(HEAP32[$_01 + 4 >> 2]);
    _free($_01);
    if (($3 | 0) == 0) {
      break;
    } else {
      var $_01 = $3;
    }
  }
  return;
}
Module["_otrl_tlv_free"] = _otrl_tlv_free;
function _otrl_tlv_serialize($buf, $tlv) {
  var $9$s1;
  if (($tlv | 0) == 0) {
    return;
  } else {
    var $_012 = $tlv;
    var $_03 = $buf;
  }
  while (1) {
    var $_03;
    var $_012;
    var $2 = $_012 | 0;
    HEAP8[$_03] = HEAPU16[$2 >> 1] >>> 8 & 255;
    HEAP8[$_03 + 1 | 0] = HEAP16[$2 >> 1] & 255;
    var $9$s1 = ($_012 + 2 | 0) >> 1;
    HEAP8[$_03 + 2 | 0] = HEAPU16[$9$s1] >>> 8 & 255;
    HEAP8[$_03 + 3 | 0] = HEAP16[$9$s1] & 255;
    _memmove($_03 + 4 | 0, HEAP32[$_012 + 4 >> 2], HEAPU16[$9$s1], 1, 0);
    var $26 = HEAP32[$_012 + 8 >> 2];
    if (($26 | 0) == 0) {
      break;
    } else {
      var $_012 = $26;
      var $_03 = $_03 + HEAPU16[$9$s1] + 4 | 0;
    }
  }
  return;
}
function _otrl_auth_new($context) {
  HEAP32[$context + 52 >> 2] = 0;
  _otrl_dh_keypair_init($context + 60 | 0);
  HEAP32[$context + 220 >> 2] = 0;
  HEAP32[$context + 224 >> 2] = 0;
  var $6 = $context + 56 | 0;
  var $7 = $context + 72 | 0;
  for (var $$dest = $7 >> 2, $$stop = $$dest + 36; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  HEAP32[$6 >> 2] = $context;
  return;
}
function _otrl_auth_clear($auth) {
  var $auth$s2 = $auth >> 2;
  HEAP32[$auth$s2] = 0;
  _otrl_dh_keypair_free($auth + 8 | 0);
  HEAP32[$auth$s2 + 5] = 0;
  var $4 = $auth + 24 | 0;
  _free(HEAP32[$4 >> 2]);
  var $6 = $auth + 80 | 0;
  var $7 = $4;
  for (var $$dest = $7 >> 2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  _gcry_mpi_release(HEAP32[$6 >> 2]);
  HEAP32[$6 >> 2] = 0;
  HEAP32[$auth$s2 + 21] = 0;
  var $10 = $auth + 88 | 0;
  _gcry_cipher_close(HEAP32[$10 >> 2]);
  _gcry_cipher_close(HEAP32[$auth$s2 + 23]);
  _gcry_md_close(HEAP32[$auth$s2 + 24]);
  _gcry_md_close(HEAP32[$auth$s2 + 25]);
  _gcry_md_close(HEAP32[$auth$s2 + 26]);
  _gcry_md_close(HEAP32[$auth$s2 + 27]);
  var $22 = $auth + 168 | 0;
  var $23 = $10;
  for (var $$dest = $23 >> 2, $$stop = $$dest + 19; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  _free(HEAP32[$22 >> 2]);
  HEAP32[$22 >> 2] = 0;
  HEAP32[$auth$s2 + 43] = 0;
  return;
}
function _otrl_auth_start_v23($auth, $version) {
  var $21$s2;
  var $16$s2;
  var $3$s2;
  var $2$s2;
  var $enc$s2;
  var $npub$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $npub = __stackBase__, $npub$s2 = $npub >> 2;
  var $enc = __stackBase__ + 4, $enc$s2 = $enc >> 2;
  var $ctr = __stackBase__ + 8;
  HEAP32[$enc$s2] = 0;
  _otrl_auth_clear($auth);
  HEAP32[$auth + 132 >> 2] = 1;
  var $2$s2 = ($auth + 136 | 0) >> 2;
  HEAP32[$2$s2] = $version;
  var $3$s2 = ($auth + 4 | 0) >> 2;
  HEAP32[HEAP32[$3$s2] + 280 >> 2] = $version;
  _otrl_dh_gen_keypair(5, $auth + 8 | 0);
  HEAP32[$auth + 20 >> 2] = 1;
  var $9 = $auth + 32 | 0;
  _gcry_randomize($9, 16, 1);
  var $10 = $auth + 16 | 0;
  _gcry_mpi_print(5, 0, 0, $npub, HEAP32[$10 >> 2]);
  var $15 = _malloc(HEAP32[$npub$s2] + 4 | 0);
  var $16$s2 = ($auth + 24 | 0) >> 2;
  HEAP32[$16$s2] = $15;
  do {
    if (($15 | 0) == 0) {
      label = 1802;
    } else {
      var $19 = HEAP32[$npub$s2];
      var $21$s2 = ($auth + 28 | 0) >> 2;
      HEAP32[$21$s2] = $19 + 4 | 0;
      var $22 = HEAP32[$16$s2];
      HEAP8[$22] = HEAP32[$npub$s2] >>> 24 & 255;
      HEAP8[$22 + 1 | 0] = HEAP32[$npub$s2] >>> 16 & 255;
      HEAP8[$22 + 2 | 0] = HEAP32[$npub$s2] >>> 8 & 255;
      HEAP8[$22 + 3 | 0] = HEAP32[$npub$s2] & 255;
      _gcry_mpi_print(5, $22 + 4 | 0, $19, 0, HEAP32[$10 >> 2]);
      if (($19 | 0) != (HEAP32[$npub$s2] | 0)) {
        ___assert_func(487076, 172, 493668, 489380);
      }
      var $44 = $auth + 48 | 0;
      _gcry_md_hash_buffer(8, $44, HEAP32[$16$s2], HEAP32[$21$s2]);
      var $47 = _gcry_cipher_open($enc, 7, 6, 1);
      if (($47 | 0) != 0) {
        var $err_0 = $47;
        break;
      }
      var $51 = _gcry_cipher_setkey(HEAP32[$enc$s2], $9, 16);
      if (($51 | 0) != 0) {
        var $err_0 = $51;
        break;
      }
      var $54 = $ctr | 0;
      for (var $$dest = $54, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP8[$$dest] = 0;
      }
      var $56 = _gcry_cipher_setctr(HEAP32[$enc$s2], $54, 16);
      if (($56 | 0) != 0) {
        var $err_0 = $56;
        break;
      }
      var $62 = _gcry_cipher_encrypt(HEAP32[$enc$s2], HEAP32[$16$s2], HEAP32[$21$s2], 0, 0);
      if (($62 | 0) != 0) {
        var $err_0 = $62;
        break;
      }
      _gcry_cipher_close(HEAP32[$enc$s2]);
      HEAP32[$enc$s2] = 0;
      var $70 = ((HEAP32[$2$s2] | 0) == 3 ? 15 : 7) + HEAP32[$21$s2] | 0;
      var $71 = $70 + 36 | 0;
      var $72 = _malloc($71);
      if (($72 | 0) == 0) {
        label = 1802;
        break;
      }
      HEAP8[$72] = 0;
      HEAP8[$72 + 1 | 0] = HEAP32[$2$s2] & 255;
      HEAP8[$72 + 2 | 0] = 2;
      var $79 = $72 + 3 | 0;
      if ((HEAP32[$2$s2] | 0) == 3) {
        HEAP8[$79] = HEAP32[HEAP32[$3$s2] + 40 >> 2] >>> 24 & 255;
        HEAP8[$72 + 4 | 0] = HEAP32[HEAP32[$3$s2] + 40 >> 2] >>> 16 & 255;
        HEAP8[$72 + 5 | 0] = HEAP32[HEAP32[$3$s2] + 40 >> 2] >>> 8 & 255;
        HEAP8[$72 + 6 | 0] = HEAP32[HEAP32[$3$s2] + 40 >> 2] & 255;
        HEAP8[$72 + 7 | 0] = HEAP32[HEAP32[$3$s2] + 44 >> 2] >>> 24 & 255;
        HEAP8[$72 + 8 | 0] = HEAP32[HEAP32[$3$s2] + 44 >> 2] >>> 16 & 255;
        HEAP8[$72 + 9 | 0] = HEAP32[HEAP32[$3$s2] + 44 >> 2] >>> 8 & 255;
        HEAP8[$72 + 10 | 0] = HEAP32[HEAP32[$3$s2] + 44 >> 2] & 255;
        var $lenp_0 = $70 + 25 | 0;
        var $bufp_0 = $72 + 11 | 0;
      } else {
        var $lenp_0 = $70 + 33 | 0;
        var $bufp_0 = $79;
      }
      var $bufp_0;
      var $lenp_0;
      HEAP8[$bufp_0] = HEAP32[$21$s2] >>> 24 & 255;
      HEAP8[$bufp_0 + 1 | 0] = HEAP32[$21$s2] >>> 16 & 255;
      HEAP8[$bufp_0 + 2 | 0] = HEAP32[$21$s2] >>> 8 & 255;
      HEAP8[$bufp_0 + 3 | 0] = HEAP32[$21$s2] & 255;
      _memmove($bufp_0 + 4 | 0, HEAP32[$16$s2], HEAP32[$21$s2], 1, 0);
      var $149 = HEAP32[$21$s2];
      HEAP8[$149 + ($bufp_0 + 4) | 0] = 0;
      HEAP8[$149 + ($bufp_0 + 5) | 0] = 0;
      HEAP8[$149 + ($bufp_0 + 6) | 0] = 0;
      HEAP8[$149 + ($bufp_0 + 7) | 0] = 32;
      _memmove($149 + ($bufp_0 + 8) | 0, $44, 32, 1, 0);
      if (($lenp_0 - 4 - $149 | 0) != 36) {
        ___assert_func(487076, 228, 493668, 489380);
      }
      var $161 = $auth + 168 | 0;
      HEAP32[$161 >> 2] = _otrl_base64_otr_encode($72, $71);
      _free($72);
      if ((HEAP32[$161 >> 2] | 0) == 0) {
        label = 1802;
        break;
      }
      HEAP32[$auth >> 2] = 1;
      var $_0 = $62;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (label == 1802) {
    var $err_0 = _gcry_error142(32854);
  }
  var $err_0;
  _otrl_auth_clear($auth);
  _gcry_cipher_close(HEAP32[$enc$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_auth_start_v23["X"] = 1;
function _gcry_error142($code) {
  return _gcry_err_make159($code);
}
function _otrl_auth_handle_commit($auth, $commitmsg, $version) {
  var $93$s2;
  var $11$s2;
  var $buf$s2;
  var $auth$s2 = $auth >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  var $buf = __stackBase__, $buf$s2 = $buf >> 2;
  var $hashbuf = __stackBase__ + 4;
  var $buflen = __stackBase__ + 36;
  var $1 = _gcry_error142(0);
  HEAP32[$buf$s2] = 0;
  var $2 = $auth + 4 | 0;
  var $3 = HEAP32[$2 >> 2];
  var $6 = (HEAP32[$3 + 24 >> 2] | 0) == ($3 | 0);
  var $7 = _otrl_base64_otr_decode($commitmsg, $buf, $buflen);
  do {
    if (($7 | 0) == -2) {
      var $encbuf_0 = 0;
      label = 1832;
    } else if (($7 | 0) == -1) {
      var $encbuf_1 = 0;
      label = 1833;
    } else {
      var $9 = HEAP32[$buf$s2];
      var $10 = HEAP32[$buflen >> 2];
      var $11$s2 = ($auth + 136 | 0) >> 2;
      HEAP32[$11$s2] = $version;
      HEAP32[HEAP32[$2 >> 2] + 280 >> 2] = $version;
      if ($10 >>> 0 < 3) {
        var $encbuf_0 = 0;
        label = 1832;
        break;
      }
      if (HEAP8[$9] << 24 >> 24 != 0) {
        var $encbuf_0 = 0;
        label = 1832;
        break;
      }
      if (HEAP8[$9 + 2 | 0] << 24 >> 24 != 2) {
        var $encbuf_0 = 0;
        label = 1832;
        break;
      }
      if ((HEAP8[$9 + 1 | 0] - 1 & 255) >= 3) {
        var $encbuf_0 = 0;
        label = 1832;
        break;
      }
      var $26 = $9 + 3 | 0;
      var $27 = $10 - 3 | 0;
      if (($version | 0) == 3) {
        if ($27 >>> 0 < 8) {
          var $encbuf_0 = 0;
          label = 1832;
          break;
        }
        var $lenp_0 = $10 - 11 | 0;
        var $bufp_0 = $9 + 11 | 0;
      } else {
        var $lenp_0 = $27;
        var $bufp_0 = $26;
      }
      var $bufp_0;
      var $lenp_0;
      if ($lenp_0 >>> 0 < 4) {
        var $encbuf_0 = 0;
        label = 1832;
        break;
      }
      var $53 = HEAPU8[$bufp_0 + 1 | 0] << 16 | HEAPU8[$bufp_0] << 24 | HEAPU8[$bufp_0 + 3 | 0] | HEAPU8[$bufp_0 + 2 | 0] << 8;
      var $55 = $lenp_0 - 4 | 0;
      if ($55 >>> 0 < $53 >>> 0) {
        var $encbuf_0 = 0;
        label = 1832;
        break;
      }
      var $58 = _malloc($53);
      if (!(($58 | 0) != 0 | ($53 | 0) == 0)) {
        var $encbuf_1 = $58;
        label = 1833;
        break;
      }
      _memmove($58, $bufp_0 + 4 | 0, $53, 1, 0);
      var $62 = $55 - $53 | 0;
      if ($62 >>> 0 < 4) {
        var $encbuf_0 = $58;
        label = 1832;
        break;
      }
      if ((HEAPU8[$53 + ($bufp_0 + 5) | 0] << 16 | HEAPU8[$53 + ($bufp_0 + 4) | 0] << 24 | HEAPU8[$53 + ($bufp_0 + 7) | 0] | HEAPU8[$53 + ($bufp_0 + 6) | 0] << 8 | 0) != 32) {
        var $encbuf_0 = $58;
        label = 1832;
        break;
      }
      if (($62 - 4 | 0) >>> 0 < 32) {
        var $encbuf_0 = $58;
        label = 1832;
        break;
      }
      var $89 = $hashbuf | 0;
      _memcpy($89, $53 + ($bufp_0 + 8) | 0, 32);
      if (($62 | 0) != 36) {
        var $encbuf_0 = $58;
        label = 1832;
        break;
      }
      _free(HEAP32[$buf$s2]);
      HEAP32[$buf$s2] = 0;
      var $93$s2 = ($auth | 0) >> 2;
      var $94 = HEAP32[$93$s2];
      if (($94 | 0) == 0 | ($94 | 0) == 3 | ($94 | 0) == 4) {
        _otrl_auth_clear($auth);
        HEAP32[$11$s2] = $version;
        _otrl_dh_gen_keypair(5, $auth + 8 | 0);
        HEAP32[$auth$s2 + 5] = 1;
        HEAP32[$auth$s2 + 6] = $58;
        HEAP32[$auth$s2 + 7] = $53;
        _memcpy($auth + 48 | 0, $89, 32);
        var $102 = _create_key_message($auth);
        if (($102 | 0) != 0) {
          var $encbuf_2 = 0;
          var $err_1 = $102;
          break;
        }
        HEAP32[$93$s2] = 2;
        var $_0 = 0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (($94 | 0) == 1) {
        do {
          if (!$6) {
            if ((_memcmp($auth + 48 | 0, $89, 32) | 0) <= 0) {
              break;
            }
            _free($58);
            var $_0 = $1;
            var $_0;
            STACKTOP = __stackBase__;
            return $_0;
          }
        } while (0);
        _otrl_auth_clear($auth);
        HEAP32[$11$s2] = $version;
        _otrl_dh_gen_keypair(5, $auth + 8 | 0);
        HEAP32[$auth$s2 + 5] = 1;
        HEAP32[$auth$s2 + 6] = $58;
        HEAP32[$auth$s2 + 7] = $53;
        _memcpy($auth + 48 | 0, $89, 32);
        var $118 = _create_key_message($auth);
        if (($118 | 0) != 0) {
          var $encbuf_2 = 0;
          var $err_1 = $118;
          break;
        }
        HEAP32[$93$s2] = 2;
        var $_0 = 0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (($94 | 0) == 2) {
        var $122 = $auth + 24 | 0;
        _free(HEAP32[$122 >> 2]);
        HEAP32[$122 >> 2] = $58;
        HEAP32[$auth$s2 + 7] = $53;
        _memcpy($auth + 48 | 0, $89, 32);
        var $_0 = $1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        var $_0 = $1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    }
  } while (0);
  if (label == 1832) {
    var $encbuf_0;
    var $encbuf_2 = $encbuf_0;
    var $err_1 = _gcry_error142(55);
  } else if (label == 1833) {
    var $encbuf_1;
    var $encbuf_2 = $encbuf_1;
    var $err_1 = _gcry_error142(32854);
  }
  var $err_1;
  var $encbuf_2;
  _free(HEAP32[$buf$s2]);
  _free($encbuf_2);
  var $_0 = $err_1;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_auth_handle_commit["X"] = 1;
function _create_key_message($auth) {
  var $94$s2;
  var $23$s2;
  var $5$s2;
  var $npub$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $npub = __stackBase__, $npub$s2 = $npub >> 2;
  var $1 = _gcry_error142(0);
  var $2 = $auth + 16 | 0;
  _gcry_mpi_print(5, 0, 0, $npub, HEAP32[$2 >> 2]);
  var $5$s2 = ($auth + 136 | 0) >> 2;
  var $10 = ((HEAP32[$5$s2] | 0) == 3 ? 15 : 7) + HEAP32[$npub$s2] | 0;
  var $11 = _malloc($10);
  do {
    if (($11 | 0) != 0) {
      HEAP8[$11] = 0;
      HEAP8[$11 + 1 | 0] = HEAP32[$5$s2] & 255;
      HEAP8[$11 + 2 | 0] = 10;
      var $18 = $11 + 3 | 0;
      if ((HEAP32[$5$s2] | 0) == 3) {
        var $23$s2 = ($auth + 4 | 0) >> 2;
        HEAP8[$18] = HEAP32[HEAP32[$23$s2] + 40 >> 2] >>> 24 & 255;
        HEAP8[$11 + 4 | 0] = HEAP32[HEAP32[$23$s2] + 40 >> 2] >>> 16 & 255;
        HEAP8[$11 + 5 | 0] = HEAP32[HEAP32[$23$s2] + 40 >> 2] >>> 8 & 255;
        HEAP8[$11 + 6 | 0] = HEAP32[HEAP32[$23$s2] + 40 >> 2] & 255;
        HEAP8[$11 + 7 | 0] = HEAP32[HEAP32[$23$s2] + 44 >> 2] >>> 24 & 255;
        HEAP8[$11 + 8 | 0] = HEAP32[HEAP32[$23$s2] + 44 >> 2] >>> 16 & 255;
        HEAP8[$11 + 9 | 0] = HEAP32[HEAP32[$23$s2] + 44 >> 2] >>> 8 & 255;
        HEAP8[$11 + 10 | 0] = HEAP32[HEAP32[$23$s2] + 44 >> 2] & 255;
        var $lenp_0 = $10 - 11 | 0;
        var $bufp_0 = $11 + 11 | 0;
      } else {
        var $lenp_0 = $10 - 3 | 0;
        var $bufp_0 = $18;
      }
      var $bufp_0;
      var $lenp_0;
      HEAP8[$bufp_0] = HEAP32[$npub$s2] >>> 24 & 255;
      HEAP8[$bufp_0 + 1 | 0] = HEAP32[$npub$s2] >>> 16 & 255;
      HEAP8[$bufp_0 + 2 | 0] = HEAP32[$npub$s2] >>> 8 & 255;
      HEAP8[$bufp_0 + 3 | 0] = HEAP32[$npub$s2] & 255;
      var $87 = $lenp_0 - 4 | 0;
      _gcry_mpi_print(5, $bufp_0 + 4 | 0, $87, 0, HEAP32[$2 >> 2]);
      if (($87 | 0) != (HEAP32[$npub$s2] | 0)) {
        ___assert_func(487076, 277, 493788, 489380);
      }
      var $94$s2 = ($auth + 168 | 0) >> 2;
      _free(HEAP32[$94$s2]);
      HEAP32[$94$s2] = _otrl_base64_otr_encode($11, $10);
      _free($11);
      if ((HEAP32[$94$s2] | 0) == 0) {
        break;
      } else {
        var $_0 = $1;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $_0 = _gcry_error142(32854);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_create_key_message["X"] = 1;
function _otrl_auth_handle_key($auth, $keymsg, $havemsgp, $privkey) {
  var $67$s2;
  var $incoming_pub$s2;
  var $buf$s2;
  var $havemsgp$s2 = $havemsgp >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $buf = __stackBase__, $buf$s2 = $buf >> 2;
  var $buflen = __stackBase__ + 4;
  var $incoming_pub = __stackBase__ + 8, $incoming_pub$s2 = $incoming_pub >> 2;
  var $1 = _gcry_error142(0);
  HEAP32[$buf$s2] = 0;
  HEAP32[$incoming_pub$s2] = 0;
  HEAP32[$havemsgp$s2] = 0;
  var $2 = _otrl_proto_message_version($keymsg);
  var $3 = _otrl_base64_otr_decode($keymsg, $buf, $buflen);
  L2295 : do {
    if (($3 | 0) == -2) {
      label = 1876;
    } else if (($3 | 0) == -1) {
      var $err_1 = _gcry_error142(32854);
      break;
    } else {
      var $5 = HEAP32[$buf$s2];
      var $6 = HEAP32[$buflen >> 2];
      if ($6 >>> 0 < 3) {
        label = 1876;
        break;
      }
      if (HEAP8[$5] << 24 >> 24 != 0) {
        label = 1876;
        break;
      }
      if (HEAP8[$5 + 2 | 0] << 24 >> 24 != 10) {
        label = 1876;
        break;
      }
      if ((HEAP8[$5 + 1 | 0] - 1 & 255) >= 3) {
        label = 1876;
        break;
      }
      var $19 = $5 + 3 | 0;
      var $20 = $6 - 3 | 0;
      if (($2 | 0) == 3) {
        if ($20 >>> 0 < 8) {
          label = 1876;
          break;
        }
        var $lenp_0 = $6 - 11 | 0;
        var $bufp_0 = $5 + 11 | 0;
      } else {
        var $lenp_0 = $20;
        var $bufp_0 = $19;
      }
      var $bufp_0;
      var $lenp_0;
      if ($lenp_0 >>> 0 < 4) {
        label = 1876;
        break;
      }
      var $46 = HEAPU8[$bufp_0 + 1 | 0] << 16 | HEAPU8[$bufp_0] << 24 | HEAPU8[$bufp_0 + 3 | 0] | HEAPU8[$bufp_0 + 2 | 0] << 8;
      var $47 = $bufp_0 + 4 | 0;
      var $48 = $lenp_0 - 4 | 0;
      if (($46 | 0) == 0) {
        HEAP32[$incoming_pub$s2] = _gcry_mpi_set_ui(0, 0);
      } else {
        if ($48 >>> 0 < $46 >>> 0) {
          label = 1876;
          break;
        }
        _gcry_mpi_scan($incoming_pub, 5, $47, $46, 0);
      }
      if (($48 | 0) != ($46 | 0)) {
        label = 1876;
        break;
      }
      _free(HEAP32[$buf$s2]);
      HEAP32[$buf$s2] = 0;
      var $60 = $auth | 0;
      var $61 = HEAP32[$60 >> 2];
      do {
        if (($61 | 0) == 1) {
          if (($2 | 0) != (HEAP32[$auth + 136 >> 2] | 0)) {
            var $err_1 = $1;
            break L2295;
          }
          var $67$s2 = ($auth + 80 | 0) >> 2;
          _gcry_mpi_release(HEAP32[$67$s2]);
          HEAP32[$67$s2] = HEAP32[$incoming_pub$s2];
          HEAP32[$incoming_pub$s2] = 0;
          var $80 = _otrl_dh_compute_v2_auth_keys($auth + 8 | 0, HEAP32[$67$s2], $auth + 140 | 0, $auth + 160 | 0, $auth + 88 | 0, $auth + 92 | 0, $auth + 96 | 0, $auth + 100 | 0, $auth + 104 | 0, $auth + 108 | 0);
          if (($80 | 0) != 0) {
            var $err_1 = $80;
            break L2295;
          }
          var $83 = _create_revealsig_message($auth, $privkey);
          if (($83 | 0) != 0) {
            var $err_1 = $83;
            break L2295;
          }
          HEAP32[$havemsgp$s2] = 1;
          HEAP32[$60 >> 2] = 3;
          var $err_0 = 0;
        } else if (($61 | 0) == 3) {
          if ((_gcry_mpi_cmp(HEAP32[$incoming_pub$s2], HEAP32[$auth + 80 >> 2]) | 0) == 0) {
            HEAP32[$havemsgp$s2] = 1;
            var $err_0 = $1;
            break;
          } else {
            HEAP32[$havemsgp$s2] = 0;
            var $err_0 = $1;
            break;
          }
        } else if (($61 | 0) == 0 | ($61 | 0) == 2 | ($61 | 0) == 4) {
          HEAP32[$havemsgp$s2] = 0;
          var $err_0 = $1;
        } else {
          var $err_0 = $1;
        }
      } while (0);
      var $err_0;
      _gcry_mpi_release(HEAP32[$incoming_pub$s2]);
      var $_0 = $err_0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (label == 1876) {
    var $err_1 = _gcry_error142(55);
  }
  var $err_1;
  _free(HEAP32[$buf$s2]);
  _gcry_mpi_release(HEAP32[$incoming_pub$s2]);
  var $_0 = $err_1;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_auth_handle_key["X"] = 1;
function _create_revealsig_message($auth, $privkey) {
  var $110$s2;
  var $33$s2;
  var $14$s2;
  var $authlen$s2;
  var $authbuf$s2;
  var $auth$s2 = $auth >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $authbuf = __stackBase__, $authbuf$s2 = $authbuf >> 2;
  var $authlen = __stackBase__ + 4, $authlen$s2 = $authlen >> 2;
  HEAP32[$authbuf$s2] = 0;
  var $11 = _calculate_pubkey_auth($authbuf, $authlen, HEAP32[$auth$s2 + 24], HEAP32[$auth$s2 + 22], HEAP32[$auth$s2 + 4], HEAP32[$auth$s2 + 20], $privkey, HEAP32[$auth$s2 + 5]);
  if (($11 | 0) == 0) {
    var $14$s2 = ($auth + 136 | 0) >> 2;
    var $19 = ((HEAP32[$14$s2] | 0) == 3 ? 35 : 27) + HEAP32[$authlen$s2] | 0;
    var $20 = $19 + 20 | 0;
    var $21 = _malloc($20);
    do {
      if (($21 | 0) != 0) {
        HEAP8[$21] = 0;
        HEAP8[$21 + 1 | 0] = HEAP32[$14$s2] & 255;
        HEAP8[$21 + 2 | 0] = 17;
        var $28 = $21 + 3 | 0;
        if ((HEAP32[$14$s2] | 0) == 3) {
          var $33$s2 = ($auth + 4 | 0) >> 2;
          HEAP8[$28] = HEAP32[HEAP32[$33$s2] + 40 >> 2] >>> 24 & 255;
          HEAP8[$21 + 4 | 0] = HEAP32[HEAP32[$33$s2] + 40 >> 2] >>> 16 & 255;
          HEAP8[$21 + 5 | 0] = HEAP32[HEAP32[$33$s2] + 40 >> 2] >>> 8 & 255;
          HEAP8[$21 + 6 | 0] = HEAP32[HEAP32[$33$s2] + 40 >> 2] & 255;
          HEAP8[$21 + 7 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] >>> 24 & 255;
          HEAP8[$21 + 8 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] >>> 16 & 255;
          HEAP8[$21 + 9 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] >>> 8 & 255;
          HEAP8[$21 + 10 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] & 255;
          var $lenp_0 = $19 + 9 | 0;
          var $bufp_0 = $21 + 11 | 0;
        } else {
          var $lenp_0 = $19 + 17 | 0;
          var $bufp_0 = $28;
        }
        var $bufp_0;
        var $lenp_0;
        HEAP8[$bufp_0] = 0;
        HEAP8[$bufp_0 + 1 | 0] = 0;
        HEAP8[$bufp_0 + 2 | 0] = 0;
        HEAP8[$bufp_0 + 3 | 0] = 16;
        _memmove($bufp_0 + 4 | 0, $auth + 32 | 0, 16, 1, 0);
        var $87 = $bufp_0 + 20 | 0;
        HEAP8[$87] = HEAP32[$authlen$s2] >>> 24 & 255;
        HEAP8[$bufp_0 + 21 | 0] = HEAP32[$authlen$s2] >>> 16 & 255;
        HEAP8[$bufp_0 + 22 | 0] = HEAP32[$authlen$s2] >>> 8 & 255;
        HEAP8[$bufp_0 + 23 | 0] = HEAP32[$authlen$s2] & 255;
        _memmove($bufp_0 + 24 | 0, HEAP32[$authbuf$s2], HEAP32[$authlen$s2], 1, 0);
        var $105 = HEAP32[$authlen$s2];
        var $106 = $105 + ($bufp_0 + 24) | 0;
        _free(HEAP32[$authbuf$s2]);
        HEAP32[$authbuf$s2] = 0;
        var $110$s2 = ($auth + 104 | 0) >> 2;
        _gcry_md_reset(HEAP32[$110$s2]);
        _gcry_md_write(HEAP32[$110$s2], $87, $106 - $87 | 0);
        _memmove($106, _gcry_md_read(HEAP32[$110$s2], 8), 20, 1, 0);
        if (($lenp_0 - 24 - $105 | 0) != 20) {
          ___assert_func(487076, 695, 493760, 489380);
        }
        var $121 = $auth + 168 | 0;
        _free(HEAP32[$121 >> 2]);
        var $123 = _otrl_base64_otr_encode($21, $20);
        HEAP32[$121 >> 2] = $123;
        if (($123 | 0) == 0) {
          break;
        }
        _free($21);
        var $_0 = $11;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    } while (0);
    var $err_0 = _gcry_error142(32854);
    var $buf_0 = $21;
  } else {
    var $err_0 = $11;
    var $buf_0 = 0;
  }
  var $buf_0;
  var $err_0;
  _free($buf_0);
  _free(HEAP32[$authbuf$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_create_revealsig_message["X"] = 1;
function _otrl_auth_handle_revealsig($auth, $revealmsg, $havemsgp, $privkey, $auth_succeeded, $asdata) {
  var $160$s2;
  var $149$s2;
  var $84$s2;
  var $incoming_pub$s2;
  var $enc$s2;
  var $buf$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  var $buf = __stackBase__, $buf$s2 = $buf >> 2;
  var $buflen = __stackBase__ + 4;
  var $enc = __stackBase__ + 8, $enc$s2 = $enc >> 2;
  var $incoming_pub = __stackBase__ + 12, $incoming_pub$s2 = $incoming_pub >> 2;
  var $ctr = __stackBase__ + 16;
  var $hashbuf = __stackBase__ + 32;
  var $1 = _gcry_error142(0);
  HEAP32[$buf$s2] = 0;
  HEAP32[$enc$s2] = 0;
  HEAP32[$incoming_pub$s2] = 0;
  HEAP32[$havemsgp >> 2] = 0;
  var $2 = _otrl_base64_otr_decode($revealmsg, $buf, $buflen);
  do {
    if (($2 | 0) == -2) {
      var $gxbuf_0 = 0;
      label = 1929;
    } else if (($2 | 0) == -1) {
      var $gxbuf_1 = 0;
      label = 1930;
    } else {
      var $4 = HEAP32[$buf$s2];
      var $5 = HEAP32[$buflen >> 2];
      if ($5 >>> 0 < 3) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      var $9 = HEAP8[$4 + 1 | 0];
      if (HEAP8[$4] << 24 >> 24 != 0) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      if (HEAP8[$4 + 2 | 0] << 24 >> 24 != 17) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      if (($9 - 1 & 255) >= 3) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      var $18 = $4 + 3 | 0;
      var $19 = $5 - 3 | 0;
      if ($9 << 24 >> 24 == 3) {
        if ($19 >>> 0 < 8) {
          var $gxbuf_0 = 0;
          label = 1929;
          break;
        }
        var $lenp_0 = $5 - 11 | 0;
        var $bufp_0 = $4 + 11 | 0;
      } else {
        var $lenp_0 = $19;
        var $bufp_0 = $18;
      }
      var $bufp_0;
      var $lenp_0;
      if ($lenp_0 >>> 0 < 4) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      var $45 = HEAPU8[$bufp_0 + 1 | 0] << 16 | HEAPU8[$bufp_0] << 24 | HEAPU8[$bufp_0 + 3 | 0] | HEAPU8[$bufp_0 + 2 | 0] << 8;
      var $46 = $lenp_0 - 4 | 0;
      if (($45 | 0) != 16 | $46 >>> 0 < $45 >>> 0) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      var $51 = $auth + 32 | 0;
      _memmove($51, $bufp_0 + 4 | 0, $45, 1, 0);
      var $52 = $45 + ($bufp_0 + 4) | 0;
      var $53 = $46 - $45 | 0;
      if ($53 >>> 0 < 4) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      var $72 = HEAPU8[$45 + ($bufp_0 + 5) | 0] << 16 | HEAPU8[$52] << 24 | HEAPU8[$45 + ($bufp_0 + 7) | 0] | HEAPU8[$45 + ($bufp_0 + 6) | 0] << 8;
      var $_sum4 = $45 + 8 | 0;
      var $73 = $bufp_0 + $_sum4 | 0;
      var $74 = $53 - 4 | 0;
      if ($74 >>> 0 < $72 >>> 0) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      var $77 = $bufp_0 + $72 + $_sum4 | 0;
      if (($74 - $72 | 0) != 20) {
        var $gxbuf_0 = 0;
        label = 1929;
        break;
      }
      var $81 = $auth | 0;
      var $82 = HEAP32[$81 >> 2];
      if (($82 | 0) == 2) {
        var $84$s2 = ($auth + 28 | 0) >> 2;
        var $86 = _malloc(HEAP32[$84$s2]);
        if ((HEAP32[$84$s2] | 0) != 0 & ($86 | 0) == 0) {
          var $gxbuf_1 = $86;
          label = 1930;
          break;
        }
        var $91 = _gcry_cipher_open($enc, 7, 6, 1);
        if (($91 | 0) != 0) {
          var $gxbuf_2 = $86;
          var $err_2 = $91;
          break;
        }
        var $95 = _gcry_cipher_setkey(HEAP32[$enc$s2], $51, 16);
        if (($95 | 0) != 0) {
          var $gxbuf_2 = $86;
          var $err_2 = $95;
          break;
        }
        var $98 = $ctr | 0;
        for (var $$dest = $98, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
          HEAP8[$$dest] = 0;
        }
        var $100 = _gcry_cipher_setctr(HEAP32[$enc$s2], $98, 16);
        if (($100 | 0) != 0) {
          var $gxbuf_2 = $86;
          var $err_2 = $100;
          break;
        }
        var $104 = HEAP32[$84$s2];
        var $107 = _gcry_cipher_decrypt(HEAP32[$enc$s2], $86, $104, HEAP32[$auth + 24 >> 2], $104);
        if (($107 | 0) != 0) {
          var $gxbuf_2 = $86;
          var $err_2 = $107;
          break;
        }
        _gcry_cipher_close(HEAP32[$enc$s2]);
        HEAP32[$enc$s2] = 0;
        var $111 = $hashbuf | 0;
        _gcry_md_hash_buffer(8, $111, $86, HEAP32[$84$s2]);
        if ((_memcmp($111, $auth + 48 | 0, 32) | 0) != 0) {
          var $gxbuf_2 = $86;
          var $err_2 = $1;
          break;
        }
        var $117 = HEAP32[$84$s2];
        if ($117 >>> 0 < 4) {
          var $gxbuf_0 = $86;
          label = 1929;
          break;
        }
        var $136 = HEAPU8[$86 + 1 | 0] << 16 | HEAPU8[$86] << 24 | HEAPU8[$86 + 3 | 0] | HEAPU8[$86 + 2 | 0] << 8;
        var $137 = $86 + 4 | 0;
        var $138 = $117 - 4 | 0;
        if (($136 | 0) == 0) {
          HEAP32[$incoming_pub$s2] = _gcry_mpi_set_ui(0, 0);
        } else {
          if ($138 >>> 0 < $136 >>> 0) {
            var $gxbuf_0 = $86;
            label = 1929;
            break;
          }
          _gcry_mpi_scan($incoming_pub, 5, $137, $136, 0);
        }
        _free($86);
        if (($138 | 0) != ($136 | 0)) {
          var $gxbuf_0 = 0;
          label = 1929;
          break;
        }
        var $149$s2 = ($auth + 80 | 0) >> 2;
        _gcry_mpi_release(HEAP32[$149$s2]);
        HEAP32[$149$s2] = HEAP32[$incoming_pub$s2];
        HEAP32[$incoming_pub$s2] = 0;
        var $156 = $auth + 88 | 0;
        var $158 = $auth + 96 | 0;
        var $160 = $auth + 104 | 0, $160$s2 = $160 >> 2;
        var $162 = _otrl_dh_compute_v2_auth_keys($auth + 8 | 0, HEAP32[$149$s2], $auth + 140 | 0, $auth + 160 | 0, $156, $auth + 92 | 0, $158, $auth + 100 | 0, $160, $auth + 108 | 0);
        if (($162 | 0) != 0) {
          var $gxbuf_2 = 0;
          var $err_2 = $162;
          break;
        }
        _gcry_md_reset(HEAP32[$160$s2]);
        var $169 = $77 - $52 | 0;
        _gcry_md_write(HEAP32[$160$s2], $52, $169);
        if ((_memcmp($77, _gcry_md_read(HEAP32[$160$s2], 8), 20) | 0) != 0) {
          var $gxbuf_0 = 0;
          label = 1929;
          break;
        }
        var $183 = _check_pubkey_auth($auth + 112 | 0, $auth + 84 | 0, $73, $169 - 4 | 0, HEAP32[$158 >> 2], HEAP32[$156 >> 2], HEAP32[$auth + 16 >> 2], HEAP32[$149$s2]);
        if (($183 | 0) != 0) {
          var $gxbuf_2 = 0;
          var $err_2 = $183;
          break;
        }
        _free(HEAP32[$buf$s2]);
        HEAP32[$buf$s2] = 0;
        var $187 = _create_signature_message($auth, $privkey);
        if (($187 | 0) != 0) {
          var $gxbuf_2 = 0;
          var $err_2 = $187;
          break;
        }
        HEAP32[$auth + 164 >> 2] = 1;
        if (($auth_succeeded | 0) == 0) {
          var $err_0 = 0;
        } else {
          var $err_0 = FUNCTION_TABLE[$auth_succeeded]($auth, $asdata);
        }
        var $err_0;
        HEAP32[$havemsgp >> 2] = 1;
        HEAP32[$auth + 20 >> 2] = 0;
        HEAP32[$81 >> 2] = 0;
        var $_0 = $err_0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (($82 | 0) == 0 | ($82 | 0) == 1 | ($82 | 0) == 3 | ($82 | 0) == 4) {
        HEAP32[$havemsgp >> 2] = 0;
        _free(HEAP32[$buf$s2]);
        HEAP32[$buf$s2] = 0;
        var $_0 = $1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        var $_0 = $1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    }
  } while (0);
  if (label == 1929) {
    var $gxbuf_0;
    var $gxbuf_2 = $gxbuf_0;
    var $err_2 = _gcry_error142(55);
  } else if (label == 1930) {
    var $gxbuf_1;
    var $gxbuf_2 = $gxbuf_1;
    var $err_2 = _gcry_error142(32854);
  }
  var $err_2;
  var $gxbuf_2;
  _free(HEAP32[$buf$s2]);
  _free($gxbuf_2);
  _gcry_cipher_close(HEAP32[$enc$s2]);
  _gcry_mpi_release(HEAP32[$incoming_pub$s2]);
  var $_0 = $err_2;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_auth_handle_revealsig["X"] = 1;
function _check_pubkey_auth($fingerprintbufp, $keyidp, $authbuf, $authlen, $mackey, $enckey, $our_dh_pub, $their_dh_pub) {
  var $pubs$s2;
  var $y$s2;
  var $g$s2;
  var $q$s2;
  var $p$s2;
  var $theirpublen$s2;
  var $ourpublen$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  var $ourpublen = __stackBase__, $ourpublen$s2 = $ourpublen >> 2;
  var $theirpublen = __stackBase__ + 4, $theirpublen$s2 = $theirpublen >> 2;
  var $macbuf = __stackBase__ + 8;
  var $p = __stackBase__ + 40, $p$s2 = $p >> 2;
  var $q = __stackBase__ + 44, $q$s2 = $q >> 2;
  var $g = __stackBase__ + 48, $g$s2 = $g >> 2;
  var $y = __stackBase__ + 52, $y$s2 = $y >> 2;
  var $pubs = __stackBase__ + 56, $pubs$s2 = $pubs >> 2;
  HEAP32[$pubs$s2] = 0;
  var $1 = _gcry_cipher_decrypt($enckey, $authbuf, $authlen, 0, 0);
  L2393 : do {
    if (($1 | 0) == 0) {
      do {
        if ($authlen >>> 0 >= 2) {
          var $6 = HEAP8[$authbuf];
          var $10 = HEAP8[$authbuf + 1 | 0];
          var $12 = ($6 & 255) << 8 | $10 & 255;
          var $13 = $authbuf + 2 | 0;
          if ($12 << 16 >> 16 != 0) {
            break;
          }
          if (($authlen - 2 | 0) >>> 0 < 4) {
            break;
          }
          var $35 = HEAPU8[$authbuf + 3 | 0] << 16 | HEAPU8[$13] << 24 | HEAPU8[$authbuf + 5 | 0] | HEAPU8[$authbuf + 4 | 0] << 8;
          var $36 = $authbuf + 6 | 0;
          var $37 = $authlen - 6 | 0;
          if (($35 | 0) == 0) {
            HEAP32[$p$s2] = _gcry_mpi_set_ui(0, 0);
          } else {
            if ($37 >>> 0 < $35 >>> 0) {
              break;
            }
            _gcry_mpi_scan($p, 5, $36, $35, 0);
          }
          var $46 = $37 - $35 | 0;
          if ($46 >>> 0 < 4) {
            break;
          }
          var $66 = HEAPU8[$35 + ($authbuf + 7) | 0] << 16 | HEAPU8[$35 + ($authbuf + 6) | 0] << 24 | HEAPU8[$35 + ($authbuf + 9) | 0] | HEAPU8[$35 + ($authbuf + 8) | 0] << 8;
          var $_sum4 = $35 + 10 | 0;
          var $67 = $authbuf + $_sum4 | 0;
          var $68 = $46 - 4 | 0;
          if (($66 | 0) == 0) {
            HEAP32[$q$s2] = _gcry_mpi_set_ui(0, 0);
          } else {
            if ($68 >>> 0 < $66 >>> 0) {
              break;
            }
            _gcry_mpi_scan($q, 5, $67, $66, 0);
          }
          var $_sum5 = $66 + $_sum4 | 0;
          var $77 = $68 - $66 | 0;
          if ($77 >>> 0 < 4) {
            break;
          }
          var $97 = HEAPU8[$_sum5 + ($authbuf + 1) | 0] << 16 | HEAPU8[$authbuf + $_sum5 | 0] << 24 | HEAPU8[$_sum5 + ($authbuf + 3) | 0] | HEAPU8[$_sum5 + ($authbuf + 2) | 0] << 8;
          var $_sum9 = $_sum5 + 4 | 0;
          var $98 = $authbuf + $_sum9 | 0;
          var $99 = $77 - 4 | 0;
          if (($97 | 0) == 0) {
            HEAP32[$g$s2] = _gcry_mpi_set_ui(0, 0);
          } else {
            if ($99 >>> 0 < $97 >>> 0) {
              break;
            }
            _gcry_mpi_scan($g, 5, $98, $97, 0);
          }
          var $_sum10 = $97 + $_sum9 | 0;
          var $108 = $99 - $97 | 0;
          if ($108 >>> 0 < 4) {
            break;
          }
          var $128 = HEAPU8[$_sum10 + ($authbuf + 1) | 0] << 16 | HEAPU8[$authbuf + $_sum10 | 0] << 24 | HEAPU8[$_sum10 + ($authbuf + 3) | 0] | HEAPU8[$_sum10 + ($authbuf + 2) | 0] << 8;
          var $_sum14 = $_sum10 + 4 | 0;
          var $129 = $authbuf + $_sum14 | 0;
          var $130 = $108 - 4 | 0;
          if (($128 | 0) == 0) {
            HEAP32[$y$s2] = _gcry_mpi_set_ui(0, 0);
          } else {
            if ($130 >>> 0 < $128 >>> 0) {
              break;
            }
            _gcry_mpi_scan($y, 5, $129, $128, 0);
          }
          var $_sum15 = $128 + $_sum14 | 0;
          var $139 = $authbuf + $_sum15 | 0;
          var $140 = $130 - $128 | 0;
          var $143 = $139 - $13 | 0;
          _gcry_md_hash_buffer(2, $fingerprintbufp, $13, $143);
          var $145 = HEAP32[$q$s2];
          var $146 = HEAP32[$g$s2];
          var $147 = HEAP32[$y$s2];
          _gcry_sexp_build($pubs, 0, 476804, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[$p$s2], HEAP32[tempInt + 4 >> 2] = $145, HEAP32[tempInt + 8 >> 2] = $146, HEAP32[tempInt + 12 >> 2] = $147, tempInt));
          _gcry_mpi_release(HEAP32[$p$s2]);
          _gcry_mpi_release(HEAP32[$q$s2]);
          _gcry_mpi_release(HEAP32[$g$s2]);
          _gcry_mpi_release(HEAP32[$y$s2]);
          if ($140 >>> 0 < 4) {
            break;
          }
          var $155 = HEAP8[$139];
          var $159 = HEAP8[$_sum15 + ($authbuf + 1) | 0];
          var $163 = HEAP8[$_sum15 + ($authbuf + 2) | 0];
          var $167 = HEAP8[$_sum15 + ($authbuf + 3) | 0];
          var $171 = ($159 & 255) << 16 | ($155 & 255) << 24 | $167 & 255 | ($163 & 255) << 8;
          if (($171 | 0) == 0) {
            break;
          }
          _gcry_mpi_print(5, 0, 0, $ourpublen, $our_dh_pub);
          _gcry_mpi_print(5, 0, 0, $theirpublen, $their_dh_pub);
          var $182 = $143 + HEAP32[$ourpublen$s2] + HEAP32[$theirpublen$s2] + 10 | 0;
          var $183 = $182 + 4 | 0;
          var $184 = _malloc($183);
          if (($184 | 0) == 0) {
            var $err_0 = _gcry_error142(32854);
            break L2393;
          }
          HEAP8[$184] = HEAP32[$theirpublen$s2] >>> 24 & 255;
          HEAP8[$184 + 1 | 0] = HEAP32[$theirpublen$s2] >>> 16 & 255;
          HEAP8[$184 + 2 | 0] = HEAP32[$theirpublen$s2] >>> 8 & 255;
          HEAP8[$184 + 3 | 0] = HEAP32[$theirpublen$s2] & 255;
          _gcry_mpi_print(5, $184 + 4 | 0, $182, 0, $their_dh_pub);
          var $203 = HEAP32[$theirpublen$s2];
          HEAP8[$203 + ($184 + 4) | 0] = HEAP32[$ourpublen$s2] >>> 24 & 255;
          HEAP8[$203 + ($184 + 5) | 0] = HEAP32[$ourpublen$s2] >>> 16 & 255;
          HEAP8[$203 + ($184 + 6) | 0] = HEAP32[$ourpublen$s2] >>> 8 & 255;
          HEAP8[$203 + ($184 + 7) | 0] = HEAP32[$ourpublen$s2] & 255;
          var $_sum24 = $203 + 8 | 0;
          var $221 = $182 - $203 - 4 | 0;
          _gcry_mpi_print(5, $184 + $_sum24 | 0, $221, 0, $our_dh_pub);
          var $223 = HEAP32[$ourpublen$s2];
          var $_sum25 = $223 + $_sum24 | 0;
          HEAP8[$184 + $_sum25 | 0] = $6;
          HEAP8[$_sum25 + ($184 + 1) | 0] = $10;
          var $_sum27 = $_sum25 + 2 | 0;
          _memmove($184 + $_sum27 | 0, $13, $143, 1, 0);
          var $_sum28 = $_sum27 + $143 | 0;
          HEAP8[$184 + $_sum28 | 0] = $155;
          HEAP8[$_sum28 + ($184 + 1) | 0] = $159;
          HEAP8[$_sum28 + ($184 + 2) | 0] = $163;
          HEAP8[$_sum28 + ($184 + 3) | 0] = $167;
          if ((-2 - $143 + $221 - $223 | 0) != 4) {
            ___assert_func(487076, 604, 493808, 489380);
          }
          _gcry_md_reset($mackey);
          _gcry_md_write($mackey, $184, $183);
          var $237 = $macbuf | 0;
          _memmove($237, _gcry_md_read($mackey, 8), 32, 1, 0);
          _free($184);
          var $240 = _otrl_privkey_verify($_sum15 + ($authbuf + 4) | 0, $140 - 4 | 0, $12, HEAP32[$pubs$s2], $237, 32);
          if (($240 | 0) != 0) {
            var $err_0 = $240;
            break L2393;
          }
          _gcry_sexp_release(HEAP32[$pubs$s2]);
          HEAP32[$pubs$s2] = 0;
          HEAP32[$keyidp >> 2] = $171;
          var $_0 = 0;
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      var $err_0 = _gcry_error142(55);
    } else {
      var $err_0 = $1;
    }
  } while (0);
  var $err_0;
  _free(0);
  _gcry_sexp_release(HEAP32[$pubs$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_check_pubkey_auth["X"] = 1;
function _create_signature_message($auth, $privkey) {
  var $104$s2;
  var $33$s2;
  var $14$s2;
  var $authlen$s2;
  var $authbuf$s2;
  var $auth$s2 = $auth >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $authbuf = __stackBase__, $authbuf$s2 = $authbuf >> 2;
  var $authlen = __stackBase__ + 4, $authlen$s2 = $authlen >> 2;
  HEAP32[$authbuf$s2] = 0;
  var $11 = _calculate_pubkey_auth($authbuf, $authlen, HEAP32[$auth$s2 + 25], HEAP32[$auth$s2 + 23], HEAP32[$auth$s2 + 4], HEAP32[$auth$s2 + 20], $privkey, HEAP32[$auth$s2 + 5]);
  if (($11 | 0) == 0) {
    var $14$s2 = ($auth + 136 | 0) >> 2;
    var $19 = ((HEAP32[$14$s2] | 0) == 3 ? 15 : 7) + HEAP32[$authlen$s2] | 0;
    var $20 = $19 + 20 | 0;
    var $21 = _malloc($20);
    do {
      if (($21 | 0) != 0) {
        HEAP8[$21] = 0;
        HEAP8[$21 + 1 | 0] = HEAP32[$14$s2] & 255;
        HEAP8[$21 + 2 | 0] = 18;
        var $28 = $21 + 3 | 0;
        if ((HEAP32[$14$s2] | 0) == 3) {
          var $33$s2 = ($auth + 4 | 0) >> 2;
          HEAP8[$28] = HEAP32[HEAP32[$33$s2] + 40 >> 2] >>> 24 & 255;
          HEAP8[$21 + 4 | 0] = HEAP32[HEAP32[$33$s2] + 40 >> 2] >>> 16 & 255;
          HEAP8[$21 + 5 | 0] = HEAP32[HEAP32[$33$s2] + 40 >> 2] >>> 8 & 255;
          HEAP8[$21 + 6 | 0] = HEAP32[HEAP32[$33$s2] + 40 >> 2] & 255;
          HEAP8[$21 + 7 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] >>> 24 & 255;
          HEAP8[$21 + 8 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] >>> 16 & 255;
          HEAP8[$21 + 9 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] >>> 8 & 255;
          HEAP8[$21 + 10 | 0] = HEAP32[HEAP32[$33$s2] + 44 >> 2] & 255;
          var $lenp_0 = $19 + 9 | 0;
          var $bufp_0 = $21 + 11 | 0;
        } else {
          var $lenp_0 = $19 + 17 | 0;
          var $bufp_0 = $28;
        }
        var $bufp_0;
        var $lenp_0;
        HEAP8[$bufp_0] = HEAP32[$authlen$s2] >>> 24 & 255;
        HEAP8[$bufp_0 + 1 | 0] = HEAP32[$authlen$s2] >>> 16 & 255;
        HEAP8[$bufp_0 + 2 | 0] = HEAP32[$authlen$s2] >>> 8 & 255;
        HEAP8[$bufp_0 + 3 | 0] = HEAP32[$authlen$s2] & 255;
        _memmove($bufp_0 + 4 | 0, HEAP32[$authbuf$s2], HEAP32[$authlen$s2], 1, 0);
        var $99 = HEAP32[$authlen$s2];
        var $_sum = $99 + 4 | 0;
        _free(HEAP32[$authbuf$s2]);
        HEAP32[$authbuf$s2] = 0;
        var $104$s2 = ($auth + 108 | 0) >> 2;
        _gcry_md_reset(HEAP32[$104$s2]);
        _gcry_md_write(HEAP32[$104$s2], $bufp_0, $_sum);
        _memmove($bufp_0 + $_sum | 0, _gcry_md_read(HEAP32[$104$s2], 8), 20, 1, 0);
        if (($lenp_0 - 4 - $99 | 0) != 20) {
          ___assert_func(487076, 768, 493732, 489380);
        }
        var $112 = $auth + 168 | 0;
        _free(HEAP32[$112 >> 2]);
        var $114 = _otrl_base64_otr_encode($21, $20);
        HEAP32[$112 >> 2] = $114;
        if (($114 | 0) == 0) {
          break;
        }
        _free($21);
        var $_0 = $11;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    } while (0);
    var $err_0 = _gcry_error142(32854);
    var $buf_0 = $21;
  } else {
    var $err_0 = $11;
    var $buf_0 = 0;
  }
  var $buf_0;
  var $err_0;
  _free($buf_0);
  _free(HEAP32[$authbuf$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_create_signature_message["X"] = 1;
function _otrl_auth_handle_signature($auth, $sigmsg, $havemsgp, $auth_succeeded, $asdata) {
  var $57$s2;
  var $buf$s2;
  var $auth$s2 = $auth >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $buf = __stackBase__, $buf$s2 = $buf >> 2;
  var $buflen = __stackBase__ + 4;
  var $1 = _gcry_error142(0);
  HEAP32[$buf$s2] = 0;
  HEAP32[$havemsgp >> 2] = 0;
  var $2 = _otrl_base64_otr_decode($sigmsg, $buf, $buflen);
  do {
    if (($2 | 0) == -1) {
      var $err_2 = _gcry_error142(32854);
      break;
    } else if (($2 | 0) == -2) {
      label = 2004;
    } else {
      var $4 = HEAP32[$buf$s2];
      var $5 = HEAP32[$buflen >> 2];
      if ($5 >>> 0 < 3) {
        label = 2004;
        break;
      }
      var $9 = HEAP8[$4 + 1 | 0];
      if (HEAP8[$4] << 24 >> 24 != 0) {
        label = 2004;
        break;
      }
      if (HEAP8[$4 + 2 | 0] << 24 >> 24 != 18) {
        label = 2004;
        break;
      }
      if (($9 - 1 & 255) >= 3) {
        label = 2004;
        break;
      }
      var $18 = $4 + 3 | 0;
      var $19 = $5 - 3 | 0;
      if ($9 << 24 >> 24 == 3) {
        if ($19 >>> 0 < 8) {
          label = 2004;
          break;
        }
        var $lenp_0 = $5 - 11 | 0;
        var $bufp_0 = $4 + 11 | 0;
      } else {
        var $lenp_0 = $19;
        var $bufp_0 = $18;
      }
      var $bufp_0;
      var $lenp_0;
      if ($lenp_0 >>> 0 < 4) {
        label = 2004;
        break;
      }
      var $45 = HEAPU8[$bufp_0 + 1 | 0] << 16 | HEAPU8[$bufp_0] << 24 | HEAPU8[$bufp_0 + 3 | 0] | HEAPU8[$bufp_0 + 2 | 0] << 8;
      var $46 = $bufp_0 + 4 | 0;
      var $47 = $lenp_0 - 4 | 0;
      if ($47 >>> 0 < $45 >>> 0) {
        label = 2004;
        break;
      }
      var $_sum = $45 + 4 | 0;
      if (($47 - $45 | 0) != 20) {
        label = 2004;
        break;
      }
      var $54 = $auth | 0;
      var $55 = HEAP32[$54 >> 2];
      if (($55 | 0) == 3) {
        var $57$s2 = ($auth + 108 | 0) >> 2;
        _gcry_md_reset(HEAP32[$57$s2]);
        _gcry_md_write(HEAP32[$57$s2], $bufp_0, $_sum);
        if ((_memcmp($bufp_0 + $_sum | 0, _gcry_md_read(HEAP32[$57$s2], 8), 20) | 0) != 0) {
          label = 2004;
          break;
        }
        var $75 = _check_pubkey_auth($auth + 112 | 0, $auth + 84 | 0, $46, $45, HEAP32[$auth$s2 + 25], HEAP32[$auth$s2 + 23], HEAP32[$auth$s2 + 4], HEAP32[$auth$s2 + 20]);
        if (($75 | 0) != 0) {
          var $err_2 = $75;
          break;
        }
        _free(HEAP32[$buf$s2]);
        HEAP32[$buf$s2] = 0;
        HEAP32[$auth$s2 + 41] = 0;
        if (($auth_succeeded | 0) == 0) {
          var $err_0 = 0;
        } else {
          var $err_0 = FUNCTION_TABLE[$auth_succeeded]($auth, $asdata);
        }
        var $err_0;
        var $84 = $auth + 168 | 0;
        _free(HEAP32[$84 >> 2]);
        HEAP32[$84 >> 2] = 0;
        HEAP32[$havemsgp >> 2] = 0;
        HEAP32[$auth$s2 + 5] = 0;
        HEAP32[$54 >> 2] = 0;
        var $_0 = $err_0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (($55 | 0) == 0 | ($55 | 0) == 1 | ($55 | 0) == 2 | ($55 | 0) == 4) {
        HEAP32[$havemsgp >> 2] = 0;
        _free(HEAP32[$buf$s2]);
        HEAP32[$buf$s2] = 0;
        var $_0 = $1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        var $_0 = $1;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    }
  } while (0);
  if (label == 2004) {
    var $err_2 = _gcry_error142(55);
  }
  var $err_2;
  _free(HEAP32[$buf$s2]);
  var $_0 = $err_2;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_auth_handle_signature["X"] = 1;
function _otrl_auth_start_v1($auth, $our_dh, $our_keyid, $privkey) {
  var $auth$s2 = $auth >> 2;
  _otrl_auth_clear($auth);
  HEAP32[$auth$s2 + 33] = 1;
  HEAP32[$auth$s2 + 34] = 1;
  var $4 = $auth + 8 | 0;
  if (($our_dh | 0) == 0) {
    _otrl_dh_gen_keypair(5, $4);
    HEAP32[$auth$s2 + 5] = 1;
  } else {
    _otrl_dh_keypair_copy($4, $our_dh);
    HEAP32[$auth$s2 + 5] = $our_keyid;
  }
  var $11 = _create_v1_key_exchange_message($auth, 0, $privkey);
  if (($11 | 0) != 0) {
    return $11;
  }
  HEAP32[$auth$s2] = 4;
  return $11;
}
function _create_v1_key_exchange_message($auth, $reply, $privkey) {
  var $26$s2;
  var $10$s2;
  var $ourpublen$s2;
  var $sigbuf$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $sigbuf = __stackBase__, $sigbuf$s2 = $sigbuf >> 2;
  var $ourpublen = __stackBase__ + 4, $ourpublen$s2 = $ourpublen >> 2;
  var $siglen = __stackBase__ + 8;
  HEAP32[$sigbuf$s2] = 0;
  if (HEAP16[$privkey + 16 >> 1] << 16 >> 16 != 0) {
    var $_0 = _gpg_error155(55);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $7 = $auth + 16 | 0;
  _gcry_mpi_print(5, 0, 0, $ourpublen, HEAP32[$7 >> 2]);
  var $10$s2 = ($privkey + 28 | 0) >> 2;
  var $14 = HEAP32[$10$s2] + HEAP32[$ourpublen$s2] + 12 | 0;
  var $15 = $14 + 40 | 0;
  var $16 = _malloc($15);
  do {
    if (($16 | 0) == 0) {
      label = 2030;
    } else {
      HEAP8[$16] = HEAP8[480924];
      HEAP8[$16 + 1] = HEAP8[480925];
      HEAP8[$16 + 2] = HEAP8[480926];
      HEAP8[$16 + 3 | 0] = $reply;
      _memmove($16 + 4 | 0, HEAP32[$privkey + 24 >> 2], HEAP32[$10$s2], 1, 0);
      var $24 = HEAP32[$10$s2];
      var $26$s2 = ($auth + 20 | 0) >> 2;
      HEAP8[$24 + ($16 + 4) | 0] = HEAP32[$26$s2] >>> 24 & 255;
      HEAP8[$24 + ($16 + 5) | 0] = HEAP32[$26$s2] >>> 16 & 255;
      HEAP8[$24 + ($16 + 6) | 0] = HEAP32[$26$s2] >>> 8 & 255;
      HEAP8[$24 + ($16 + 7) | 0] = HEAP32[$26$s2] & 255;
      HEAP8[$24 + ($16 + 8) | 0] = HEAP32[$ourpublen$s2] >>> 24 & 255;
      HEAP8[$24 + ($16 + 9) | 0] = HEAP32[$ourpublen$s2] >>> 16 & 255;
      HEAP8[$24 + ($16 + 10) | 0] = HEAP32[$ourpublen$s2] >>> 8 & 255;
      HEAP8[$24 + ($16 + 11) | 0] = HEAP32[$ourpublen$s2] & 255;
      var $_sum8 = $24 + 12 | 0;
      var $58 = $14 + 28 - $24 | 0;
      _gcry_mpi_print(5, $16 + $_sum8 | 0, $58, 0, HEAP32[$7 >> 2]);
      var $61 = HEAP32[$ourpublen$s2];
      var $_sum9 = $61 + $_sum8 | 0;
      var $64 = __stackBase__ + 12 | 0;
      _gcry_md_hash_buffer(2, $64, $16, $_sum9);
      var $65 = _otrl_privkey_sign($sigbuf, $siglen, $privkey, $64, 20);
      if (($65 | 0) != 0) {
        var $err_0 = $65;
        break;
      }
      if ((HEAP32[$siglen >> 2] | 0) != 40) {
        var $err_0 = _gcry_error142(55);
        break;
      }
      _memmove($16 + $_sum9 | 0, HEAP32[$sigbuf$s2], 40, 1, 0);
      _free(HEAP32[$sigbuf$s2]);
      HEAP32[$sigbuf$s2] = 0;
      if (($58 - $61 | 0) != 40) {
        ___assert_func(487076, 1235, 493700, 489380);
      }
      var $76 = $auth + 168 | 0;
      _free(HEAP32[$76 >> 2]);
      var $78 = _otrl_base64_otr_encode($16, $15);
      HEAP32[$76 >> 2] = $78;
      if (($78 | 0) == 0) {
        label = 2030;
        break;
      }
      _free($16);
      var $_0 = $65;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (label == 2030) {
    var $err_0 = _gcry_error142(32854);
  }
  var $err_0;
  _free($16);
  _free(HEAP32[$sigbuf$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_create_v1_key_exchange_message["X"] = 1;
function _gpg_err_make158($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function _otrl_auth_handle_v1_key_exchange($auth, $keyexchmsg, $havemsgp, $privkey, $our_dh, $our_keyid, $auth_succeeded, $asdata) {
  var $230$s2;
  var $pubs$s2;
  var $received_pub$s2;
  var $y$s2;
  var $g$s2;
  var $q$s2;
  var $p$s2;
  var $buf$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  var $buf = __stackBase__, $buf$s2 = $buf >> 2;
  var $fingerprintbuf = __stackBase__ + 4;
  var $hashbuf = __stackBase__ + 24;
  var $p = __stackBase__ + 44, $p$s2 = $p >> 2;
  var $q = __stackBase__ + 48, $q$s2 = $q >> 2;
  var $g = __stackBase__ + 52, $g$s2 = $g >> 2;
  var $y = __stackBase__ + 56, $y$s2 = $y >> 2;
  var $received_pub = __stackBase__ + 60, $received_pub$s2 = $received_pub >> 2;
  var $pubs = __stackBase__ + 64, $pubs$s2 = $pubs >> 2;
  var $buflen = __stackBase__ + 68;
  HEAP32[$buf$s2] = 0;
  HEAP32[$received_pub$s2] = 0;
  HEAP32[$pubs$s2] = 0;
  HEAP32[$havemsgp >> 2] = 0;
  var $1 = _otrl_base64_otr_decode($keyexchmsg, $buf, $buflen);
  do {
    if (($1 | 0) == -2) {
      label = 2087;
    } else if (($1 | 0) == -1) {
      var $err_1 = _gcry_error142(32854);
      break;
    } else {
      var $3 = HEAP32[$buf$s2];
      var $4 = HEAP32[$buflen >> 2];
      if ($4 >>> 0 < 3) {
        label = 2087;
        break;
      }
      if ((_memcmp($3, 480924, 3) | 0) != 0 | ($4 | 0) == 3) {
        label = 2087;
        break;
      }
      var $12 = HEAP8[$3 + 3 | 0];
      var $13 = $3 + 4 | 0;
      if (($4 - 4 | 0) >>> 0 < 4) {
        label = 2087;
        break;
      }
      var $33 = HEAPU8[$3 + 5 | 0] << 16 | HEAPU8[$13] << 24 | HEAPU8[$3 + 7 | 0] | HEAPU8[$3 + 6 | 0] << 8;
      var $34 = $3 + 8 | 0;
      var $35 = $4 - 8 | 0;
      if (($33 | 0) == 0) {
        HEAP32[$p$s2] = _gcry_mpi_set_ui(0, 0);
      } else {
        if ($35 >>> 0 < $33 >>> 0) {
          label = 2087;
          break;
        }
        _gcry_mpi_scan($p, 5, $34, $33, 0);
      }
      var $44 = $35 - $33 | 0;
      if ($44 >>> 0 < 4) {
        label = 2087;
        break;
      }
      var $64 = HEAPU8[$33 + ($3 + 9) | 0] << 16 | HEAPU8[$33 + ($3 + 8) | 0] << 24 | HEAPU8[$33 + ($3 + 11) | 0] | HEAPU8[$33 + ($3 + 10) | 0] << 8;
      var $_sum4 = $33 + 12 | 0;
      var $65 = $3 + $_sum4 | 0;
      var $66 = $44 - 4 | 0;
      if (($64 | 0) == 0) {
        HEAP32[$q$s2] = _gcry_mpi_set_ui(0, 0);
      } else {
        if ($66 >>> 0 < $64 >>> 0) {
          label = 2087;
          break;
        }
        _gcry_mpi_scan($q, 5, $65, $64, 0);
      }
      var $_sum5 = $64 + $_sum4 | 0;
      var $75 = $66 - $64 | 0;
      if ($75 >>> 0 < 4) {
        label = 2087;
        break;
      }
      var $95 = HEAPU8[$_sum5 + ($3 + 1) | 0] << 16 | HEAPU8[$3 + $_sum5 | 0] << 24 | HEAPU8[$_sum5 + ($3 + 3) | 0] | HEAPU8[$_sum5 + ($3 + 2) | 0] << 8;
      var $_sum9 = $_sum5 + 4 | 0;
      var $96 = $3 + $_sum9 | 0;
      var $97 = $75 - 4 | 0;
      if (($95 | 0) == 0) {
        HEAP32[$g$s2] = _gcry_mpi_set_ui(0, 0);
      } else {
        if ($97 >>> 0 < $95 >>> 0) {
          label = 2087;
          break;
        }
        _gcry_mpi_scan($g, 5, $96, $95, 0);
      }
      var $_sum10 = $95 + $_sum9 | 0;
      var $106 = $97 - $95 | 0;
      if ($106 >>> 0 < 4) {
        label = 2087;
        break;
      }
      var $126 = HEAPU8[$_sum10 + ($3 + 1) | 0] << 16 | HEAPU8[$3 + $_sum10 | 0] << 24 | HEAPU8[$_sum10 + ($3 + 3) | 0] | HEAPU8[$_sum10 + ($3 + 2) | 0] << 8;
      var $_sum14 = $_sum10 + 4 | 0;
      var $127 = $3 + $_sum14 | 0;
      var $128 = $106 - 4 | 0;
      if (($126 | 0) == 0) {
        HEAP32[$y$s2] = _gcry_mpi_set_ui(0, 0);
      } else {
        if ($128 >>> 0 < $126 >>> 0) {
          label = 2087;
          break;
        }
        _gcry_mpi_scan($y, 5, $127, $126, 0);
      }
      var $_sum15 = $126 + $_sum14 | 0;
      var $137 = $3 + $_sum15 | 0;
      var $138 = $128 - $126 | 0;
      var $139 = $fingerprintbuf | 0;
      _gcry_md_hash_buffer(2, $139, $13, $137 - $13 | 0);
      var $144 = HEAP32[$q$s2];
      var $145 = HEAP32[$g$s2];
      var $146 = HEAP32[$y$s2];
      _gcry_sexp_build($pubs, 0, 476804, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[$p$s2], HEAP32[tempInt + 4 >> 2] = $144, HEAP32[tempInt + 8 >> 2] = $145, HEAP32[tempInt + 12 >> 2] = $146, tempInt));
      _gcry_mpi_release(HEAP32[$p$s2]);
      _gcry_mpi_release(HEAP32[$q$s2]);
      _gcry_mpi_release(HEAP32[$g$s2]);
      _gcry_mpi_release(HEAP32[$y$s2]);
      if ($138 >>> 0 < 4) {
        label = 2087;
        break;
      }
      var $170 = HEAPU8[$_sum15 + ($3 + 1) | 0] << 16 | HEAPU8[$137] << 24 | HEAPU8[$_sum15 + ($3 + 3) | 0] | HEAPU8[$_sum15 + ($3 + 2) | 0] << 8;
      if (($170 | 0) == 0) {
        label = 2087;
        break;
      }
      if (($138 - 4 | 0) >>> 0 < 4) {
        label = 2087;
        break;
      }
      var $193 = HEAPU8[$_sum15 + ($3 + 5) | 0] << 16 | HEAPU8[$_sum15 + ($3 + 4) | 0] << 24 | HEAPU8[$_sum15 + ($3 + 7) | 0] | HEAPU8[$_sum15 + ($3 + 6) | 0] << 8;
      var $_sum23 = $_sum15 + 8 | 0;
      var $194 = $3 + $_sum23 | 0;
      var $195 = $138 - 8 | 0;
      if (($193 | 0) == 0) {
        HEAP32[$received_pub$s2] = _gcry_mpi_set_ui(0, 0);
      } else {
        if ($195 >>> 0 < $193 >>> 0) {
          label = 2087;
          break;
        }
        _gcry_mpi_scan($received_pub, 5, $194, $193, 0);
      }
      var $204 = $3 + $193 + $_sum23 | 0;
      var $205 = $195 - $193 | 0;
      if (($205 | 0) != 40) {
        label = 2087;
        break;
      }
      var $208 = $hashbuf | 0;
      var $209 = HEAP32[$buf$s2];
      _gcry_md_hash_buffer(2, $208, $209, $204 - $209 | 0);
      var $214 = _otrl_privkey_verify($204, $205, 0, HEAP32[$pubs$s2], $208, 20);
      if (($214 | 0) != 0) {
        var $err_1 = $214;
        break;
      }
      _gcry_sexp_release(HEAP32[$pubs$s2]);
      HEAP32[$pubs$s2] = 0;
      _free(HEAP32[$buf$s2]);
      HEAP32[$buf$s2] = 0;
      var $219 = $auth | 0;
      var $220 = HEAP32[$219 >> 2];
      var $222 = $12 << 24 >> 24 == 1;
      if (($220 | 0) != 4 & $222) {
        var $err_1 = _gpg_error155(0);
        break;
      }
      if (($220 | 0) != 4) {
        _otrl_auth_clear($auth);
      }
      HEAP32[$auth + 84 >> 2] = $170;
      var $230$s2 = ($auth + 80 | 0) >> 2;
      _gcry_mpi_release(HEAP32[$230$s2]);
      HEAP32[$230$s2] = HEAP32[$received_pub$s2];
      HEAP32[$received_pub$s2] = 0;
      _memcpy($auth + 112 | 0, $139, 20);
      if ($222) {
        var $storemerge = 0;
      } else {
        do {
          if (($our_dh | 0) == 0) {
            var $240 = $auth + 20 | 0;
            if ((HEAP32[$240 >> 2] | 0) != 0) {
              break;
            }
            _otrl_dh_gen_keypair(5, $auth + 8 | 0);
            HEAP32[$240 >> 2] = 1;
          } else {
            _otrl_dh_keypair_copy($auth + 8 | 0, $our_dh);
            HEAP32[$auth + 20 >> 2] = $our_keyid;
          }
        } while (0);
        var $247 = _create_v1_key_exchange_message($auth, 1, $privkey);
        if (($247 | 0) == 0) {
          var $storemerge = 1;
        } else {
          var $err_1 = $247;
          break;
        }
      }
      var $storemerge;
      HEAP32[$havemsgp >> 2] = $storemerge;
      var $255 = _otrl_dh_compute_v1_session_id($auth + 8 | 0, HEAP32[$230$s2], $auth + 140 | 0, $auth + 160 | 0, $auth + 164 | 0);
      if (($255 | 0) != 0) {
        var $err_1 = $255;
        break;
      }
      HEAP32[$auth + 136 >> 2] = 1;
      if (($auth_succeeded | 0) == 0) {
        var $err_0 = 0;
      } else {
        var $err_0 = FUNCTION_TABLE[$auth_succeeded]($auth, $asdata);
      }
      var $err_0;
      HEAP32[$auth + 20 >> 2] = 0;
      HEAP32[$219 >> 2] = 0;
      var $_0 = $err_0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (label == 2087) {
    var $err_1 = _gcry_error142(55);
  }
  var $err_1;
  _free(HEAP32[$buf$s2]);
  _gcry_sexp_release(HEAP32[$pubs$s2]);
  _gcry_mpi_release(HEAP32[$received_pub$s2]);
  var $_0 = $err_1;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_auth_handle_v1_key_exchange["X"] = 1;
function _gpg_error155($code) {
  return _gpg_err_make158(0, $code);
}
function _otrl_auth_copy_on_key($m_auth, $auth) {
  var $2 = HEAP32[$m_auth >> 2];
  if (!(($2 | 0) == 1 | ($2 | 0) == 3)) {
    return;
  }
  var $4 = $auth + 8 | 0;
  _otrl_dh_keypair_free($4);
  HEAP32[$auth + 132 >> 2] = HEAP32[$m_auth + 132 >> 2];
  _otrl_dh_keypair_copy($4, $m_auth + 8 | 0);
  HEAP32[$auth + 20 >> 2] = HEAP32[$m_auth + 20 >> 2];
  _memmove($auth + 32 | 0, $m_auth + 32 | 0, 16, 1, 0);
  var $14 = $auth + 24 | 0;
  var $15 = HEAP32[$14 >> 2];
  if (($15 | 0) != 0) {
    _free($15);
  }
  var $19 = $m_auth + 28 | 0;
  var $21 = _malloc(HEAP32[$19 >> 2]);
  HEAP32[$14 >> 2] = $21;
  _memmove($21, HEAP32[$m_auth + 24 >> 2], HEAP32[$19 >> 2], 1, 0);
  _memmove($auth + 48 | 0, $m_auth + 48 | 0, 32, 1, 0);
  HEAP32[$auth >> 2] = 1;
  return;
}
function _calculate_pubkey_auth($authbufp, $authlenp, $mackey, $enckey, $our_dh_pub, $their_dh_pub, $privkey, $keyid) {
  var $52$s1;
  var $5$s2;
  var $siglen$s2;
  var $sigbuf$s2;
  var $theirpublen$s2;
  var $ourpublen$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  var $ourpublen = __stackBase__, $ourpublen$s2 = $ourpublen >> 2;
  var $theirpublen = __stackBase__ + 4, $theirpublen$s2 = $theirpublen >> 2;
  var $macbuf = __stackBase__ + 8;
  var $sigbuf = __stackBase__ + 40, $sigbuf$s2 = $sigbuf >> 2;
  var $siglen = __stackBase__ + 44, $siglen$s2 = $siglen >> 2;
  HEAP32[$sigbuf$s2] = 0;
  _gcry_mpi_print(5, 0, 0, $ourpublen, $our_dh_pub);
  _gcry_mpi_print(5, 0, 0, $theirpublen, $their_dh_pub);
  var $5$s2 = ($privkey + 28 | 0) >> 2;
  var $9 = HEAP32[$ourpublen$s2] + HEAP32[$theirpublen$s2] + HEAP32[$5$s2] + 10 | 0;
  var $10 = $9 + 4 | 0;
  var $11 = _malloc($10);
  do {
    if (($11 | 0) == 0) {
      label = 2110;
    } else {
      HEAP8[$11] = HEAP32[$ourpublen$s2] >>> 24 & 255;
      HEAP8[$11 + 1 | 0] = HEAP32[$ourpublen$s2] >>> 16 & 255;
      HEAP8[$11 + 2 | 0] = HEAP32[$ourpublen$s2] >>> 8 & 255;
      HEAP8[$11 + 3 | 0] = HEAP32[$ourpublen$s2] & 255;
      _gcry_mpi_print(5, $11 + 4 | 0, $9, 0, $our_dh_pub);
      var $30 = HEAP32[$ourpublen$s2];
      var $32 = $9 - $30 | 0;
      HEAP8[$30 + ($11 + 4) | 0] = HEAP32[$theirpublen$s2] >>> 24 & 255;
      HEAP8[$30 + ($11 + 5) | 0] = HEAP32[$theirpublen$s2] >>> 16 & 255;
      HEAP8[$30 + ($11 + 6) | 0] = HEAP32[$theirpublen$s2] >>> 8 & 255;
      HEAP8[$30 + ($11 + 7) | 0] = HEAP32[$theirpublen$s2] & 255;
      var $_sum4 = $30 + 8 | 0;
      _gcry_mpi_print(5, $11 + $_sum4 | 0, $32 - 4 | 0, 0, $their_dh_pub);
      var $50 = HEAP32[$theirpublen$s2];
      var $_sum5 = $50 + $_sum4 | 0;
      var $52$s1 = ($privkey + 16 | 0) >> 1;
      HEAP8[$11 + $_sum5 | 0] = HEAPU16[$52$s1] >>> 8 & 255;
      HEAP8[$_sum5 + ($11 + 1) | 0] = HEAP16[$52$s1] & 255;
      var $_sum7 = $_sum5 + 2 | 0;
      var $60 = $privkey + 24 | 0;
      _memmove($11 + $_sum7 | 0, HEAP32[$60 >> 2], HEAP32[$5$s2], 1, 0);
      var $63 = HEAP32[$5$s2];
      var $_sum8 = $63 + $_sum7 | 0;
      var $69 = $keyid >>> 24 & 255;
      HEAP8[$11 + $_sum8 | 0] = $69;
      var $71 = $keyid >>> 16 & 255;
      HEAP8[$_sum8 + ($11 + 1) | 0] = $71;
      var $74 = $keyid >>> 8 & 255;
      HEAP8[$_sum8 + ($11 + 2) | 0] = $74;
      var $76 = $keyid & 255;
      HEAP8[$_sum8 + ($11 + 3) | 0] = $76;
      if (($32 - 6 - $50 - $63 | 0) != 4) {
        ___assert_func(487076, 465, 493828, 489380);
      }
      _gcry_md_reset($mackey);
      _gcry_md_write($mackey, $11, $10);
      var $81 = $macbuf | 0;
      _memmove($81, _gcry_md_read($mackey, 8), 32, 1, 0);
      _free($11);
      var $83 = _otrl_privkey_sign($sigbuf, $siglen, $privkey, $81, 32);
      if (($83 | 0) != 0) {
        var $buf_1 = 0;
        var $err_0 = $83;
        break;
      }
      var $86 = HEAP32[$5$s2];
      var $87 = HEAP32[$siglen$s2];
      var $89 = $87 + ($86 + 6) | 0;
      var $90 = _malloc($89);
      if (($90 | 0) == 0) {
        label = 2110;
        break;
      }
      HEAP8[$90] = HEAPU16[$52$s1] >>> 8 & 255;
      HEAP8[$90 + 1 | 0] = HEAP16[$52$s1] & 255;
      _memmove($90 + 2 | 0, HEAP32[$60 >> 2], HEAP32[$5$s2], 1, 0);
      var $102 = HEAP32[$5$s2];
      HEAP8[$102 + ($90 + 2) | 0] = $69;
      HEAP8[$102 + ($90 + 3) | 0] = $71;
      HEAP8[$102 + ($90 + 4) | 0] = $74;
      HEAP8[$102 + ($90 + 5) | 0] = $76;
      _memmove($102 + ($90 + 6) | 0, HEAP32[$sigbuf$s2], HEAP32[$siglen$s2], 1, 0);
      var $112 = HEAP32[$siglen$s2];
      _free(HEAP32[$sigbuf$s2]);
      HEAP32[$sigbuf$s2] = 0;
      if (($86 + $87 - $102 | 0) != ($112 | 0)) {
        ___assert_func(487076, 501, 493828, 489380);
      }
      var $117 = _gcry_cipher_encrypt($enckey, $90, $89, 0, 0);
      if (($117 | 0) != 0) {
        var $buf_1 = $90;
        var $err_0 = $117;
        break;
      }
      HEAP32[$authbufp >> 2] = $90;
      HEAP32[$authlenp >> 2] = $89;
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (label == 2110) {
    var $buf_1 = 0;
    var $err_0 = _gcry_error142(32854);
  }
  var $err_0;
  var $buf_1;
  _free($buf_1);
  _free(HEAP32[$sigbuf$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_calculate_pubkey_auth["X"] = 1;
function _gcry_err_make159($code) {
  return _gpg_err_make158(32, $code);
}
function _otrl_sm_init() {
  _gcry_check_version(0);
  _gcry_mpi_scan(512068, 4, 480308, 0, 0);
  _gcry_mpi_scan(512060, 4, 488532, 0, 0);
  _gcry_mpi_scan(512072, 4, 484812, 0, 0);
  var $5 = _gcry_mpi_new(1536);
  HEAP32[128016] = $5;
  _gcry_mpi_sub_ui($5, HEAP32[128017], 2);
  return;
}
function _otrl_sm_state_new($smst) {
  var $1 = $smst;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  return;
}
function _otrl_sm_state_init($smst) {
  var $smst$s2 = $smst >> 2;
  _otrl_sm_state_free($smst);
  HEAP32[$smst$s2] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 1] = 0;
  HEAP32[$smst$s2 + 2] = 0;
  HEAP32[$smst$s2 + 3] = _gcry_mpi_copy(HEAP32[128018]);
  HEAP32[$smst$s2 + 4] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 5] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 6] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 7] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 8] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 9] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 10] = _gcry_mpi_new(1536);
  HEAP32[$smst$s2 + 12] = 0;
  HEAP32[$smst$s2 + 13] = 0;
  return;
}
function _otrl_sm_state_free($smst) {
  var $smst$s2 = $smst >> 2;
  _gcry_mpi_release(HEAP32[$smst$s2]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 1]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 2]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 3]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 4]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 5]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 6]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 7]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 8]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 9]);
  _gcry_mpi_release(HEAP32[$smst$s2 + 10]);
  _otrl_sm_state_new($smst);
  return;
}
function _otrl_sm_msg1_init($msg1) {
  var $1$s2;
  var $1 = _malloc(24), $1$s2 = $1 >> 2;
  var $2 = $1;
  HEAP32[$2 >> 2] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 3] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 4] = 0;
  HEAP32[$1$s2 + 5] = _gcry_mpi_new(1536);
  HEAP32[$msg1 >> 2] = $2;
  return;
}
function _otrl_sm_msg2_init($msg2) {
  var $1$s2;
  var $1 = _malloc(44), $1$s2 = $1 >> 2;
  var $2 = $1;
  HEAP32[$2 >> 2] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 3] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 4] = 0;
  HEAP32[$1$s2 + 5] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 6] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 7] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 8] = 0;
  HEAP32[$1$s2 + 9] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 10] = _gcry_mpi_new(1536);
  HEAP32[$msg2 >> 2] = $2;
  return;
}
function _otrl_sm_msg3_init($msg3) {
  var $1$s2;
  var $1 = _malloc(32), $1$s2 = $1 >> 2;
  var $2 = $1;
  HEAP32[$2 >> 2] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 1] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 2] = 0;
  HEAP32[$1$s2 + 3] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 4] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 5] = _gcry_mpi_new(1536);
  HEAP32[$1$s2 + 6] = 0;
  HEAP32[$1$s2 + 7] = _gcry_mpi_new(1536);
  HEAP32[$msg3 >> 2] = $2;
  return;
}
function _otrl_sm_msg4_init($msg4) {
  var $1 = _malloc(12);
  var $2 = $1;
  HEAP32[$2 >> 2] = _gcry_mpi_new(1536);
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = _gcry_mpi_new(1536);
  HEAP32[$msg4 >> 2] = $2;
  return;
}
function _otrl_sm_msg_free($message, $msglen) {
  var $1 = HEAP32[$message >> 2];
  L2614 : do {
    if (($msglen | 0) > 0) {
      var $i_01 = 0;
      while (1) {
        var $i_01;
        _gcry_mpi_release(HEAP32[$1 + ($i_01 << 2) >> 2]);
        var $5 = $i_01 + 1 | 0;
        if (($5 | 0) == ($msglen | 0)) {
          break L2614;
        } else {
          var $i_01 = $5;
        }
      }
    }
  } while (0);
  _free($1);
  HEAP32[$message >> 2] = 0;
  return;
}
function _otrl_sm_step1($astate, $secret, $secretlen, $output, $outputlen) {
  var $16$s2;
  var $14$s2;
  var $2$s2;
  var $msg1$s2;
  var $secret_mpi$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $secret_mpi = __stackBase__, $secret_mpi$s2 = $secret_mpi >> 2;
  var $msg1 = __stackBase__ + 4, $msg1$s2 = $msg1 >> 2;
  HEAP32[$secret_mpi$s2] = 0;
  HEAP32[$output >> 2] = 0;
  HEAP32[$outputlen >> 2] = 0;
  _gcry_mpi_scan($secret_mpi, 5, $secret, $secretlen, 0);
  var $2$s2 = ($astate + 12 | 0) >> 2;
  if ((HEAP32[$2$s2] | 0) == 0) {
    _otrl_sm_state_init($astate);
  }
  _gcry_mpi_set(HEAP32[$astate >> 2], HEAP32[$secret_mpi$s2]);
  _gcry_mpi_release(HEAP32[$secret_mpi$s2]);
  HEAP32[$astate + 48 >> 2] = 0;
  _otrl_sm_msg1_init($msg1);
  var $14$s2 = ($astate + 4 | 0) >> 2;
  HEAP32[$14$s2] = _randomExponent();
  var $16$s2 = ($astate + 8 | 0) >> 2;
  HEAP32[$16$s2] = _randomExponent();
  _gcry_mpi_powm(HEAP32[HEAP32[$msg1$s2] >> 2], HEAP32[$2$s2], HEAP32[$14$s2], HEAP32[128017]);
  var $22 = HEAP32[$msg1$s2];
  _otrl_sm_proof_know_log($22 + 4 | 0, $22 + 8 | 0, HEAP32[$2$s2], HEAP32[$14$s2], 1);
  _gcry_mpi_powm(HEAP32[HEAP32[$msg1$s2] + 12 >> 2], HEAP32[$2$s2], HEAP32[$16$s2], HEAP32[128017]);
  var $33 = HEAP32[$msg1$s2];
  _otrl_sm_proof_know_log($33 + 16 | 0, $33 + 20 | 0, HEAP32[$2$s2], HEAP32[$16$s2], 2);
  _serialize_mpi_array($output, $outputlen, 6, HEAP32[$msg1$s2]);
  _otrl_sm_msg_free($msg1, 6);
  HEAP32[$astate + 52 >> 2] = 0;
  var $40 = _gcry_error171(0);
  STACKTOP = __stackBase__;
  return $40;
}
_otrl_sm_step1["X"] = 1;
function _randomExponent() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $randexpon = __stackBase__;
  HEAP32[$randexpon >> 2] = 0;
  var $1 = _gcry_random_bytes_secure(192, 1);
  _gcry_mpi_scan($randexpon, 5, $1, 192, 0);
  _gcry_free($1);
  STACKTOP = __stackBase__;
  return HEAP32[$randexpon >> 2];
}
function _otrl_sm_proof_know_log($c, $d, $g, $x, $version) {
  var $1 = _randomExponent();
  var $2 = _gcry_mpi_new(1536);
  _gcry_mpi_powm($2, $g, $1, HEAP32[128017]);
  _otrl_sm_hash($c, $version, $2, 0);
  _gcry_mpi_mulm($2, $x, HEAP32[$c >> 2], HEAP32[128015]);
  _gcry_mpi_subm(HEAP32[$d >> 2], $1, $2, HEAP32[128015]);
  _gcry_mpi_release($2);
  _gcry_mpi_release($1);
  return;
}
function _serialize_mpi_array($buffer, $buflen, $count, $mpis) {
  var $1 = $count << 2;
  var $2 = _malloc($1);
  var $3 = $2;
  var $4 = _malloc($1);
  var $5 = $4;
  L2625 : do {
    if (($count | 0) == 0) {
      var $totalsize_0_lcssa = 0;
    } else {
      var $totalsize_010 = 0;
      var $i_011 = 0;
      while (1) {
        var $i_011;
        var $totalsize_010;
        var $8 = ($i_011 << 2) + $3 | 0;
        _gcry_mpi_aprint(5, ($i_011 << 2) + $5 | 0, $8, HEAP32[$mpis + ($i_011 << 2) >> 2]);
        var $13 = HEAP32[$8 >> 2] + $totalsize_010 | 0;
        var $14 = $i_011 + 1 | 0;
        if (($14 | 0) == ($count | 0)) {
          var $totalsize_0_lcssa = $13;
          break L2625;
        } else {
          var $totalsize_010 = $13;
          var $i_011 = $14;
        }
      }
    }
  } while (0);
  var $totalsize_0_lcssa;
  var $16 = $totalsize_0_lcssa + ($1 + 4) | 0;
  HEAP32[$buflen >> 2] = $16;
  var $17 = _malloc($16);
  HEAP32[$buffer >> 2] = $17;
  HEAP8[$17] = $count >>> 24 & 255;
  HEAP8[$17 + 1 | 0] = $count >>> 16 & 255;
  HEAP8[$17 + 2 | 0] = $count >>> 8 & 255;
  HEAP8[$17 + 3 | 0] = $count & 255;
  if (($count | 0) == 0) {
    _free($4);
    _free($2);
    return;
  }
  var $i_14 = 0;
  var $bufp_05 = $17 + 4 | 0;
  while (1) {
    var $bufp_05;
    var $i_14;
    var $32 = HEAP32[$3 + ($i_14 << 2) >> 2];
    HEAP8[$bufp_05] = $32 >>> 24 & 255;
    HEAP8[$bufp_05 + 1 | 0] = $32 >>> 16 & 255;
    HEAP8[$bufp_05 + 2 | 0] = $32 >>> 8 & 255;
    HEAP8[$bufp_05 + 3 | 0] = $32 & 255;
    L2634 : do {
      if (($32 | 0) != 0) {
        var $44 = ($i_14 << 2) + $5 | 0;
        var $j_02 = 0;
        while (1) {
          var $j_02;
          HEAP8[$j_02 + ($bufp_05 + 4) | 0] = HEAP8[HEAP32[$44 >> 2] + $j_02 | 0];
          var $50 = $j_02 + 1 | 0;
          if (($50 | 0) == ($32 | 0)) {
            break L2634;
          } else {
            var $j_02 = $50;
          }
        }
      }
    } while (0);
    _gcry_free(HEAP32[$5 + ($i_14 << 2) >> 2]);
    var $54 = $i_14 + 1 | 0;
    if (($54 | 0) == ($count | 0)) {
      break;
    } else {
      var $i_14 = $54;
      var $bufp_05 = $32 + ($bufp_05 + 4) | 0;
    }
  }
  _free($4);
  _free($2);
  return;
}
_serialize_mpi_array["X"] = 1;
function _gcry_error171($code) {
  return _gcry_err_make182($code);
}
function _otrl_sm_step2a($bstate, $input, $inputlen, $received_question) {
  var $53$s2;
  var $43$s2;
  var $1$s2;
  var $msg1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $msg1 = __stackBase__, $msg1$s2 = $msg1 >> 2;
  var $1$s2 = ($bstate + 12 | 0) >> 2;
  if ((HEAP32[$1$s2] | 0) == 0) {
    _otrl_sm_state_init($bstate);
  }
  HEAP32[$bstate + 48 >> 2] = $received_question;
  var $7 = $bstate + 52 | 0;
  HEAP32[$7 >> 2] = -2;
  var $8 = _unserialize_mpi_array($msg1, 6, $input, $inputlen);
  var $9 = _gcry_error171(0);
  if (($8 | 0) != ($9 | 0)) {
    var $_0 = $8;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if ((_check_group_elem(HEAP32[HEAP32[$msg1$s2] >> 2]) | 0) == 0) {
      if ((_check_expon(HEAP32[HEAP32[$msg1$s2] + 8 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[$msg1$s2] + 12 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg1$s2] + 20 >> 2]) | 0) != 0) {
        break;
      }
      _gcry_mpi_set(HEAP32[$bstate + 24 >> 2], HEAP32[HEAP32[$msg1$s2] + 12 >> 2]);
      var $43$s2 = HEAP32[$msg1$s2] >> 2;
      do {
        if ((_otrl_sm_check_know_log(HEAP32[$43$s2 + 1], HEAP32[$43$s2 + 2], HEAP32[$1$s2], HEAP32[$43$s2], 1) | 0) == 0) {
          var $53$s2 = HEAP32[$msg1$s2] >> 2;
          if ((_otrl_sm_check_know_log(HEAP32[$53$s2 + 4], HEAP32[$53$s2 + 5], HEAP32[$1$s2], HEAP32[$53$s2 + 3], 2) | 0) != 0) {
            break;
          }
          var $67 = $bstate + 4 | 0;
          HEAP32[$67 >> 2] = _randomExponent();
          var $69 = $bstate + 8 | 0;
          HEAP32[$69 >> 2] = _randomExponent();
          _gcry_mpi_powm(HEAP32[$bstate + 16 >> 2], HEAP32[HEAP32[$msg1$s2] >> 2], HEAP32[$67 >> 2], HEAP32[128017]);
          _gcry_mpi_powm(HEAP32[$bstate + 20 >> 2], HEAP32[HEAP32[$msg1$s2] + 12 >> 2], HEAP32[$69 >> 2], HEAP32[128017]);
          HEAP32[$7 >> 2] = 0;
          _otrl_sm_msg_free($msg1, 6);
          var $_0 = $9;
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      _otrl_sm_msg_free($msg1, 6);
      var $_0 = _gcry_error171(55);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  _otrl_sm_msg_free($msg1, 6);
  var $_0 = _gcry_error171(55);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_sm_step2a["X"] = 1;
function _unserialize_mpi_array($mpis, $expcount, $buffer, $buflen) {
  var $mpis$s2 = $mpis >> 2;
  HEAP32[$mpis$s2] = 0;
  do {
    if ($buflen >>> 0 >= 4) {
      var $19 = HEAPU8[$buffer + 1 | 0] << 16 | HEAPU8[$buffer] << 24 | HEAPU8[$buffer + 3 | 0] | HEAPU8[$buffer + 2 | 0] << 8;
      var $20 = $buffer + 4 | 0;
      var $21 = $buflen - 4 | 0;
      L2664 : do {
        if (($19 | 0) == ($expcount | 0)) {
          HEAP32[$mpis$s2] = _malloc($19 << 2);
          L2666 : do {
            if (($19 | 0) == 0) {
              var $bufp_0 = $20;
              var $lenp_0 = $21;
              var $i_1 = 0;
            } else {
              var $i_03 = 0;
              while (1) {
                var $i_03;
                HEAP32[HEAP32[$mpis$s2] + ($i_03 << 2) >> 2] = 0;
                var $30 = $i_03 + 1 | 0;
                if (($30 | 0) == ($19 | 0)) {
                  var $bufp_0 = $20;
                  var $lenp_0 = $21;
                  var $i_1 = 0;
                  break L2666;
                } else {
                  var $i_03 = $30;
                }
              }
            }
          } while (0);
          while (1) {
            var $i_1;
            var $lenp_0;
            var $bufp_0;
            if ($i_1 >>> 0 >= $19 >>> 0) {
              break;
            }
            if ($lenp_0 >>> 0 < 4) {
              break L2664;
            }
            var $51 = HEAPU8[$bufp_0 + 1 | 0] << 16 | HEAPU8[$bufp_0] << 24 | HEAPU8[$bufp_0 + 3 | 0] | HEAPU8[$bufp_0 + 2 | 0] << 8;
            var $52 = $bufp_0 + 4 | 0;
            var $53 = $lenp_0 - 4 | 0;
            if (($51 | 0) == 0) {
              var $62 = _gcry_mpi_set_ui(0, 0);
              HEAP32[HEAP32[$mpis$s2] + ($i_1 << 2) >> 2] = $62;
            } else {
              if ($53 >>> 0 < $51 >>> 0) {
                break L2664;
              }
              _gcry_mpi_scan(($i_1 << 2) + HEAP32[$mpis$s2] | 0, 5, $52, $51, 0);
            }
            var $bufp_0 = $51 + ($bufp_0 + 4) | 0;
            var $lenp_0 = $53 - $51 | 0;
            var $i_1 = $i_1 + 1 | 0;
          }
          var $_0 = _gcry_error171(0);
          var $_0;
          return $_0;
        }
      } while (0);
      if ((HEAP32[$mpis$s2] | 0) == 0) {
        break;
      }
      var $73 = HEAP32[$mpis$s2];
      L2682 : do {
        if (($19 | 0) == 0) {
          var $_lcssa = $73;
        } else {
          var $i_21 = 0;
          var $74 = $73;
          while (1) {
            var $74;
            var $i_21;
            _gcry_mpi_release(HEAP32[$74 + ($i_21 << 2) >> 2]);
            var $77 = $i_21 + 1 | 0;
            var $78 = HEAP32[$mpis$s2];
            if (($77 | 0) == ($19 | 0)) {
              var $_lcssa = $78;
              break L2682;
            } else {
              var $i_21 = $77;
              var $74 = $78;
            }
          }
        }
      } while (0);
      var $_lcssa;
      _free($_lcssa);
      HEAP32[$mpis$s2] = 0;
    }
  } while (0);
  var $_0 = _gcry_error171(55);
  var $_0;
  return $_0;
}
_unserialize_mpi_array["X"] = 1;
function _check_group_elem($g) {
  if ((_gcry_mpi_cmp_ui($g, 2) | 0) < 0) {
    return 1;
  } else {
    return (_gcry_mpi_cmp($g, HEAP32[128016]) | 0) > 0 & 1;
  }
}
function _check_expon($x) {
  if ((_gcry_mpi_cmp_ui($x, 1) | 0) < 0) {
    return 1;
  } else {
    return _gcry_mpi_cmp($x, HEAP32[128015]) >>> 31 ^ 1;
  }
}
function _otrl_sm_check_know_log($c, $d, $g, $x, $version) {
  var $hgdxc$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $hgdxc = __stackBase__, $hgdxc$s2 = $hgdxc >> 2;
  var $1 = _gcry_mpi_new(1536);
  var $2 = _gcry_mpi_new(1536);
  var $3 = _gcry_mpi_new(1536);
  HEAP32[$hgdxc$s2] = 0;
  _gcry_mpi_powm($1, $g, $d, HEAP32[128017]);
  _gcry_mpi_powm($2, $x, $c, HEAP32[128017]);
  _gcry_mpi_mulm($3, $1, $2, HEAP32[128017]);
  _otrl_sm_hash($hgdxc, $version, $3, 0);
  var $8 = _gcry_mpi_cmp(HEAP32[$hgdxc$s2], $c);
  _gcry_mpi_release($1);
  _gcry_mpi_release($2);
  _gcry_mpi_release($3);
  _gcry_mpi_release(HEAP32[$hgdxc$s2]);
  STACKTOP = __stackBase__;
  return $8;
}
function _otrl_sm_step2b($bstate, $secret, $secretlen, $output, $outputlen) {
  var $9$s2;
  var $secret_mpi$s2;
  var $msg2$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $msg2 = __stackBase__, $msg2$s2 = $msg2 >> 2;
  var $secret_mpi = __stackBase__ + 4, $secret_mpi$s2 = $secret_mpi >> 2;
  HEAP32[$secret_mpi$s2] = 0;
  HEAP32[$output >> 2] = 0;
  HEAP32[$outputlen >> 2] = 0;
  _gcry_mpi_scan($secret_mpi, 5, $secret, $secretlen, 0);
  var $2 = $bstate | 0;
  _gcry_mpi_set(HEAP32[$2 >> 2], HEAP32[$secret_mpi$s2]);
  _gcry_mpi_release(HEAP32[$secret_mpi$s2]);
  _otrl_sm_msg2_init($msg2);
  var $9$s2 = ($bstate + 12 | 0) >> 2;
  var $11 = $bstate + 4 | 0;
  _gcry_mpi_powm(HEAP32[HEAP32[$msg2$s2] >> 2], HEAP32[$9$s2], HEAP32[$11 >> 2], HEAP32[128017]);
  var $14 = HEAP32[$msg2$s2];
  _otrl_sm_proof_know_log($14 + 4 | 0, $14 + 8 | 0, HEAP32[$9$s2], HEAP32[$11 >> 2], 3);
  var $23 = $bstate + 8 | 0;
  _gcry_mpi_powm(HEAP32[HEAP32[$msg2$s2] + 12 >> 2], HEAP32[$9$s2], HEAP32[$23 >> 2], HEAP32[128017]);
  var $26 = HEAP32[$msg2$s2];
  _otrl_sm_proof_know_log($26 + 16 | 0, $26 + 20 | 0, HEAP32[$9$s2], HEAP32[$23 >> 2], 4);
  var $31 = _randomExponent();
  var $32 = _gcry_mpi_new(1536);
  var $33 = _gcry_mpi_new(1536);
  var $34 = $bstate + 28 | 0;
  _gcry_mpi_powm(HEAP32[$34 >> 2], HEAP32[$bstate + 20 >> 2], $31, HEAP32[128017]);
  _gcry_mpi_set(HEAP32[HEAP32[$msg2$s2] + 24 >> 2], HEAP32[$34 >> 2]);
  _gcry_mpi_powm($32, HEAP32[$9$s2], $31, HEAP32[128017]);
  _gcry_mpi_powm($33, HEAP32[$bstate + 16 >> 2], HEAP32[$2 >> 2], HEAP32[128017]);
  var $50 = $bstate + 32 | 0;
  _gcry_mpi_mulm(HEAP32[$50 >> 2], $32, $33, HEAP32[128017]);
  _gcry_mpi_set(HEAP32[HEAP32[$msg2$s2] + 28 >> 2], HEAP32[$50 >> 2]);
  var $58 = HEAP32[$msg2$s2];
  _otrl_sm_proof_equal_coords($58 + 32 | 0, $58 + 36 | 0, $58 + 40 | 0, $bstate, $31, 5);
  _serialize_mpi_array($output, $outputlen, 11, HEAP32[$msg2$s2]);
  _gcry_mpi_release($31);
  _gcry_mpi_release($32);
  _gcry_mpi_release($33);
  _otrl_sm_msg_free($msg2, 11);
  var $63 = _gcry_error171(0);
  STACKTOP = __stackBase__;
  return $63;
}
_otrl_sm_step2b["X"] = 1;
function _otrl_sm_proof_equal_coords($c, $d1, $d2, $state, $r, $version) {
  var $1 = _randomExponent();
  var $2 = _randomExponent();
  var $3 = _gcry_mpi_new(1536);
  var $4 = _gcry_mpi_new(1536);
  _gcry_mpi_powm($3, HEAP32[$state + 12 >> 2], $1, HEAP32[128017]);
  _gcry_mpi_powm($4, HEAP32[$state + 16 >> 2], $2, HEAP32[128017]);
  _gcry_mpi_mulm($4, $3, $4, HEAP32[128017]);
  _gcry_mpi_powm($3, HEAP32[$state + 20 >> 2], $1, HEAP32[128017]);
  _otrl_sm_hash($c, $version, $3, $4);
  _gcry_mpi_mulm($3, $r, HEAP32[$c >> 2], HEAP32[128015]);
  _gcry_mpi_subm(HEAP32[$d1 >> 2], $1, $3, HEAP32[128015]);
  _gcry_mpi_mulm($3, HEAP32[$state >> 2], HEAP32[$c >> 2], HEAP32[128015]);
  _gcry_mpi_subm(HEAP32[$d2 >> 2], $2, $3, HEAP32[128015]);
  _gcry_mpi_release($1);
  _gcry_mpi_release($2);
  _gcry_mpi_release($3);
  _gcry_mpi_release($4);
  return;
}
function _otrl_sm_step3($astate, $input, $inputlen, $output, $outputlen) {
  var $133$s2;
  var $119$s2;
  var $100$s2;
  var $72$s2;
  var $66$s2;
  var $61$s2;
  var $msg3$s2;
  var $msg2$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $msg2 = __stackBase__, $msg2$s2 = $msg2 >> 2;
  var $msg3 = __stackBase__ + 4, $msg3$s2 = $msg3 >> 2;
  HEAP32[$output >> 2] = 0;
  HEAP32[$outputlen >> 2] = 0;
  var $1 = $astate + 52 | 0;
  HEAP32[$1 >> 2] = -2;
  var $2 = _unserialize_mpi_array($msg2, 11, $input, $inputlen);
  var $3 = _gcry_error171(0);
  if (($2 | 0) != ($3 | 0)) {
    var $_0 = $2;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if ((_check_group_elem(HEAP32[HEAP32[$msg2$s2] >> 2]) | 0) == 0) {
      if ((_check_group_elem(HEAP32[HEAP32[$msg2$s2] + 12 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[$msg2$s2] + 24 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[$msg2$s2] + 28 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg2$s2] + 8 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg2$s2] + 20 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg2$s2] + 36 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg2$s2] + 40 >> 2]) | 0) != 0) {
        break;
      }
      _otrl_sm_msg3_init($msg3);
      _gcry_mpi_set(HEAP32[$astate + 24 >> 2], HEAP32[HEAP32[$msg2$s2] + 12 >> 2]);
      var $61$s2 = HEAP32[$msg2$s2] >> 2;
      var $66$s2 = ($astate + 12 | 0) >> 2;
      do {
        if ((_otrl_sm_check_know_log(HEAP32[$61$s2 + 1], HEAP32[$61$s2 + 2], HEAP32[$66$s2], HEAP32[$61$s2], 3) | 0) == 0) {
          var $72$s2 = HEAP32[$msg2$s2] >> 2;
          if ((_otrl_sm_check_know_log(HEAP32[$72$s2 + 4], HEAP32[$72$s2 + 5], HEAP32[$66$s2], HEAP32[$72$s2 + 3], 4) | 0) != 0) {
            break;
          }
          var $85 = $astate + 16 | 0;
          _gcry_mpi_powm(HEAP32[$85 >> 2], HEAP32[HEAP32[$msg2$s2] >> 2], HEAP32[$astate + 4 >> 2], HEAP32[128017]);
          var $92 = $astate + 20 | 0;
          var $97 = $astate + 8 | 0;
          _gcry_mpi_powm(HEAP32[$92 >> 2], HEAP32[HEAP32[$msg2$s2] + 12 >> 2], HEAP32[$97 >> 2], HEAP32[128017]);
          var $100$s2 = HEAP32[$msg2$s2] >> 2;
          if ((_otrl_sm_check_equal_coords(HEAP32[$100$s2 + 8], HEAP32[$100$s2 + 9], HEAP32[$100$s2 + 10], HEAP32[$100$s2 + 6], HEAP32[$100$s2 + 7], $astate, 5) | 0) == 0) {
            var $116 = _randomExponent();
            var $117 = _gcry_mpi_new(1536);
            var $118 = _gcry_mpi_new(1536);
            var $119$s2 = ($astate + 28 | 0) >> 2;
            _gcry_mpi_powm(HEAP32[$119$s2], HEAP32[$92 >> 2], $116, HEAP32[128017]);
            _gcry_mpi_set(HEAP32[HEAP32[$msg3$s2] >> 2], HEAP32[$119$s2]);
            _gcry_mpi_powm($117, HEAP32[$66$s2], $116, HEAP32[128017]);
            _gcry_mpi_powm($118, HEAP32[$85 >> 2], HEAP32[$astate >> 2], HEAP32[128017]);
            var $133$s2 = ($astate + 32 | 0) >> 2;
            _gcry_mpi_mulm(HEAP32[$133$s2], $117, $118, HEAP32[128017]);
            _gcry_mpi_set(HEAP32[HEAP32[$msg3$s2] + 4 >> 2], HEAP32[$133$s2]);
            var $141 = HEAP32[$msg3$s2];
            _otrl_sm_proof_equal_coords($141 + 8 | 0, $141 + 12 | 0, $141 + 16 | 0, $astate, $116, 6);
            var $145 = _gcry_mpi_new(1536);
            _gcry_mpi_invm($145, HEAP32[HEAP32[$msg2$s2] + 24 >> 2], HEAP32[128017]);
            _gcry_mpi_mulm(HEAP32[$astate + 36 >> 2], HEAP32[$119$s2], $145, HEAP32[128017]);
            _gcry_mpi_invm($145, HEAP32[HEAP32[$msg2$s2] + 28 >> 2], HEAP32[128017]);
            var $160 = $astate + 40 | 0;
            _gcry_mpi_mulm(HEAP32[$160 >> 2], HEAP32[$133$s2], $145, HEAP32[128017]);
            _gcry_mpi_powm(HEAP32[HEAP32[$msg3$s2] + 20 >> 2], HEAP32[$160 >> 2], HEAP32[$97 >> 2], HEAP32[128017]);
            var $170 = HEAP32[$msg3$s2];
            _otrl_sm_proof_equal_logs($170 + 24 | 0, $170 + 28 | 0, $astate, 7);
            _serialize_mpi_array($output, $outputlen, 8, HEAP32[$msg3$s2]);
            _otrl_sm_msg_free($msg2, 11);
            _otrl_sm_msg_free($msg3, 8);
            _gcry_mpi_release($116);
            _gcry_mpi_release($117);
            _gcry_mpi_release($118);
            _gcry_mpi_release($145);
            HEAP32[$1 >> 2] = 0;
            var $_0 = $3;
            var $_0;
            STACKTOP = __stackBase__;
            return $_0;
          } else {
            _otrl_sm_msg_free($msg2, 11);
            _otrl_sm_msg_free($msg3, 8);
            var $_0 = _gcry_error171(55);
            var $_0;
            STACKTOP = __stackBase__;
            return $_0;
          }
        }
      } while (0);
      _otrl_sm_msg_free($msg2, 11);
      _otrl_sm_msg_free($msg3, 8);
      var $_0 = _gcry_error171(55);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  _otrl_sm_msg_free($msg2, 11);
  var $_0 = _gcry_error171(55);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_sm_step3["X"] = 1;
function _otrl_sm_check_equal_coords($c, $d1, $d2, $p, $q, $state, $version) {
  var $cprime$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $cprime = __stackBase__, $cprime$s2 = $cprime >> 2;
  var $1 = _gcry_mpi_new(1536);
  var $2 = _gcry_mpi_new(1536);
  var $3 = _gcry_mpi_new(1536);
  HEAP32[$cprime$s2] = 0;
  _gcry_mpi_powm($2, HEAP32[$state + 20 >> 2], $d1, HEAP32[128017]);
  _gcry_mpi_powm($3, $p, $c, HEAP32[128017]);
  _gcry_mpi_mulm($1, $2, $3, HEAP32[128017]);
  _gcry_mpi_powm($2, HEAP32[$state + 12 >> 2], $d1, HEAP32[128017]);
  _gcry_mpi_powm($3, HEAP32[$state + 16 >> 2], $d2, HEAP32[128017]);
  _gcry_mpi_mulm($2, $2, $3, HEAP32[128017]);
  _gcry_mpi_powm($3, $q, $c, HEAP32[128017]);
  _gcry_mpi_mulm($2, $3, $2, HEAP32[128017]);
  _otrl_sm_hash($cprime, $version, $1, $2);
  var $19 = _gcry_mpi_cmp($c, HEAP32[$cprime$s2]);
  _gcry_mpi_release($1);
  _gcry_mpi_release($2);
  _gcry_mpi_release($3);
  _gcry_mpi_release(HEAP32[$cprime$s2]);
  STACKTOP = __stackBase__;
  return $19;
}
function _otrl_sm_proof_equal_logs($c, $d, $state, $version) {
  var $1 = _randomExponent();
  var $2 = _gcry_mpi_new(1536);
  var $3 = _gcry_mpi_new(1536);
  _gcry_mpi_powm($2, HEAP32[$state + 12 >> 2], $1, HEAP32[128017]);
  _gcry_mpi_powm($3, HEAP32[$state + 40 >> 2], $1, HEAP32[128017]);
  _otrl_sm_hash($c, $version, $2, $3);
  _gcry_mpi_mulm($2, HEAP32[$state + 8 >> 2], HEAP32[$c >> 2], HEAP32[128015]);
  _gcry_mpi_subm(HEAP32[$d >> 2], $1, $2, HEAP32[128015]);
  _gcry_mpi_release($1);
  _gcry_mpi_release($2);
  _gcry_mpi_release($3);
  return;
}
function _gpg_err_make183($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function _gpg_err_make203($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function _otrl_sm_step4($bstate, $input, $inputlen, $output, $outputlen) {
  var $78$s2;
  var $43$s2;
  var $msg4$s2;
  var $msg3$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $msg3 = __stackBase__, $msg3$s2 = $msg3 >> 2;
  var $msg4 = __stackBase__ + 4, $msg4$s2 = $msg4 >> 2;
  var $1 = _unserialize_mpi_array($msg3, 8, $input, $inputlen);
  HEAP32[$output >> 2] = 0;
  HEAP32[$outputlen >> 2] = 0;
  var $2 = $bstate + 52 | 0;
  HEAP32[$2 >> 2] = -2;
  var $3 = _gcry_error171(0);
  if (($1 | 0) != ($3 | 0)) {
    var $_0 = $1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _otrl_sm_msg4_init($msg4);
  do {
    if ((_check_group_elem(HEAP32[HEAP32[$msg3$s2] >> 2]) | 0) == 0) {
      if ((_check_group_elem(HEAP32[HEAP32[$msg3$s2] + 4 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_group_elem(HEAP32[HEAP32[$msg3$s2] + 20 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg3$s2] + 12 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg3$s2] + 16 >> 2]) | 0) != 0) {
        break;
      }
      if ((_check_expon(HEAP32[HEAP32[$msg3$s2] + 28 >> 2]) | 0) != 0) {
        break;
      }
      var $43$s2 = HEAP32[$msg3$s2] >> 2;
      if ((_otrl_sm_check_equal_coords(HEAP32[$43$s2 + 2], HEAP32[$43$s2 + 3], HEAP32[$43$s2 + 4], HEAP32[$43$s2], HEAP32[$43$s2 + 1], $bstate, 6) | 0) != 0) {
        _otrl_sm_msg_free($msg3, 8);
        _otrl_sm_msg_free($msg4, 3);
        var $_0 = _gcry_error171(55);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      var $58 = _gcry_mpi_new(1536);
      _gcry_mpi_invm($58, HEAP32[$bstate + 28 >> 2], HEAP32[128017]);
      var $63 = $bstate + 36 | 0;
      _gcry_mpi_mulm(HEAP32[$63 >> 2], HEAP32[HEAP32[$msg3$s2] >> 2], $58, HEAP32[128017]);
      _gcry_mpi_invm($58, HEAP32[$bstate + 32 >> 2], HEAP32[128017]);
      var $72 = $bstate + 40 | 0;
      _gcry_mpi_mulm(HEAP32[$72 >> 2], HEAP32[HEAP32[$msg3$s2] + 4 >> 2], $58, HEAP32[128017]);
      var $78$s2 = HEAP32[$msg3$s2] >> 2;
      if ((_otrl_sm_check_equal_logs(HEAP32[$78$s2 + 6], HEAP32[$78$s2 + 7], HEAP32[$78$s2 + 5], $bstate, 7) | 0) != 0) {
        _otrl_sm_msg_free($msg3, 8);
        _otrl_sm_msg_free($msg4, 3);
        _gcry_mpi_release($58);
        var $_0 = _gcry_error171(55);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      var $93 = $bstate + 8 | 0;
      _gcry_mpi_powm(HEAP32[HEAP32[$msg4$s2] >> 2], HEAP32[$72 >> 2], HEAP32[$93 >> 2], HEAP32[128017]);
      var $96 = HEAP32[$msg4$s2];
      _otrl_sm_proof_equal_logs($96 + 4 | 0, $96 + 8 | 0, $bstate, 8);
      _serialize_mpi_array($output, $outputlen, 3, HEAP32[$msg4$s2]);
      var $100 = _gcry_mpi_new(1536);
      _gcry_mpi_powm($100, HEAP32[HEAP32[$msg3$s2] + 20 >> 2], HEAP32[$93 >> 2], HEAP32[128017]);
      var $107 = _gcry_mpi_cmp($100, HEAP32[$63 >> 2]);
      _otrl_sm_msg_free($msg3, 8);
      _otrl_sm_msg_free($msg4, 3);
      _gcry_mpi_release($100);
      _gcry_mpi_release($58);
      var $108 = ($107 | 0) != 0;
      HEAP32[$2 >> 2] = $108 ? -1 : 1;
      if (!$108) {
        var $_0 = $3;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      var $_0 = _gcry_error171(55);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  _otrl_sm_msg_free($msg3, 8);
  _otrl_sm_msg_free($msg4, 3);
  var $_0 = _gcry_error171(55);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_sm_step4["X"] = 1;
function _otrl_sm_check_equal_logs($c, $d, $r, $state, $version) {
  var $cprime$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $cprime = __stackBase__, $cprime$s2 = $cprime >> 2;
  var $1 = _gcry_mpi_new(1536);
  var $2 = _gcry_mpi_new(1536);
  var $3 = _gcry_mpi_new(1536);
  HEAP32[$cprime$s2] = 0;
  _gcry_mpi_powm($2, HEAP32[$state + 12 >> 2], $d, HEAP32[128017]);
  _gcry_mpi_powm($3, HEAP32[$state + 24 >> 2], $c, HEAP32[128017]);
  _gcry_mpi_mulm($1, $2, $3, HEAP32[128017]);
  _gcry_mpi_powm($3, HEAP32[$state + 40 >> 2], $d, HEAP32[128017]);
  _gcry_mpi_powm($2, $r, $c, HEAP32[128017]);
  _gcry_mpi_mulm($2, $3, $2, HEAP32[128017]);
  _otrl_sm_hash($cprime, $version, $1, $2);
  var $17 = _gcry_mpi_cmp($c, HEAP32[$cprime$s2]);
  _gcry_mpi_release($1);
  _gcry_mpi_release($2);
  _gcry_mpi_release($3);
  _gcry_mpi_release(HEAP32[$cprime$s2]);
  STACKTOP = __stackBase__;
  return $17;
}
function _otrl_sm_step5($astate, $input, $inputlen) {
  var $19$s2;
  var $msg4$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $msg4 = __stackBase__, $msg4$s2 = $msg4 >> 2;
  var $1 = _unserialize_mpi_array($msg4, 3, $input, $inputlen);
  var $2 = $astate + 52 | 0;
  HEAP32[$2 >> 2] = -2;
  var $3 = _gcry_error171(0);
  if (($1 | 0) != ($3 | 0)) {
    var $_0 = $1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if ((_check_group_elem(HEAP32[HEAP32[$msg4$s2] >> 2]) | 0) == 0) {
      if ((_check_expon(HEAP32[HEAP32[$msg4$s2] + 8 >> 2]) | 0) != 0) {
        break;
      }
      var $19$s2 = HEAP32[$msg4$s2] >> 2;
      if ((_otrl_sm_check_equal_logs(HEAP32[$19$s2 + 1], HEAP32[$19$s2 + 2], HEAP32[$19$s2], $astate, 8) | 0) != 0) {
        _otrl_sm_msg_free($msg4, 3);
        var $_0 = _gcry_error171(55);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      var $30 = _gcry_mpi_new(1536);
      _gcry_mpi_powm($30, HEAP32[HEAP32[$msg4$s2] >> 2], HEAP32[$astate + 8 >> 2], HEAP32[128017]);
      var $38 = _gcry_mpi_cmp($30, HEAP32[$astate + 36 >> 2]);
      _gcry_mpi_release($30);
      _otrl_sm_msg_free($msg4, 3);
      var $39 = ($38 | 0) != 0;
      HEAP32[$2 >> 2] = $39 ? -1 : 1;
      if (!$39) {
        var $_0 = $3;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      var $_0 = _gcry_error171(55);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  _otrl_sm_msg_free($msg4, 3);
  var $_0 = _gcry_error171(55);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_otrl_sm_step5["X"] = 1;
function _otrl_sm_hash($hash, $version, $a, $b) {
  var $dataa$s2;
  var $sizeb$s2;
  var $sizea$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  var $output = __stackBase__;
  var $sizea = __stackBase__ + 32, $sizea$s2 = $sizea >> 2;
  var $sizeb = __stackBase__ + 36, $sizeb$s2 = $sizeb >> 2;
  var $dataa = __stackBase__ + 40, $dataa$s2 = $dataa >> 2;
  var $datab = __stackBase__ + 44;
  _gcry_mpi_aprint(5, $dataa, $sizea, $a);
  var $2 = HEAP32[$sizea$s2];
  var $3 = ($b | 0) != 0;
  if ($3) {
    _gcry_mpi_aprint(5, $datab, $sizeb, $b);
    var $totalsize_0 = $2 + HEAP32[$sizeb$s2] + 9 | 0;
  } else {
    HEAP32[$sizeb$s2] = 0;
    var $totalsize_0 = $2 + 5 | 0;
  }
  var $totalsize_0;
  var $12 = _malloc($totalsize_0);
  HEAP8[$12] = $version & 255;
  HEAP8[$12 + 1 | 0] = HEAP32[$sizea$s2] >>> 24 & 255;
  HEAP8[$12 + 2 | 0] = HEAP32[$sizea$s2] >>> 16 & 255;
  HEAP8[$12 + 3 | 0] = HEAP32[$sizea$s2] >>> 8 & 255;
  HEAP8[$12 + 4 | 0] = HEAP32[$sizea$s2] & 255;
  _memmove($12 + 5 | 0, HEAP32[$dataa$s2], HEAP32[$sizea$s2], 1, 0);
  if ($3) {
    HEAP8[$12 + HEAP32[$sizea$s2] + 5 | 0] = HEAP32[$sizeb$s2] >>> 24 & 255;
    HEAP8[$12 + HEAP32[$sizea$s2] + 6 | 0] = HEAP32[$sizeb$s2] >>> 16 & 255;
    HEAP8[$12 + HEAP32[$sizea$s2] + 7 | 0] = HEAP32[$sizeb$s2] >>> 8 & 255;
    HEAP8[$12 + HEAP32[$sizea$s2] + 8 | 0] = HEAP32[$sizeb$s2] & 255;
    _memmove($12 + HEAP32[$sizea$s2] + 9 | 0, HEAP32[$datab >> 2], HEAP32[$sizeb$s2], 1, 0);
    var $60 = $output | 0;
    _gcry_md_hash_buffer(8, $60, $12, $totalsize_0);
    _gcry_mpi_scan($hash, 5, $60, 32, 0);
    _free($12);
    _gcry_free(HEAP32[$dataa$s2]);
    _gcry_free(HEAP32[$datab >> 2]);
    STACKTOP = __stackBase__;
    return;
  } else {
    var $64 = $output | 0;
    _gcry_md_hash_buffer(8, $64, $12, $totalsize_0);
    _gcry_mpi_scan($hash, 5, $64, 32, 0);
    _free($12);
    _gcry_free(HEAP32[$dataa$s2]);
    STACKTOP = __stackBase__;
    return;
  }
}
_otrl_sm_hash["X"] = 1;
function _gcry_err_make182($code) {
  return _gpg_err_make183($code);
}
function _otrl_context_priv_new() {
  var $6$s2;
  var $1 = _malloc(592);
  var $2 = $1;
  if (($1 | 0) == 0) {
    ___assert_func(482708, 36, 493612, 488364);
  }
  var $6$s2 = ($1 + 564 | 0) >> 2;
  var $8 = $1 + 52 | 0;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 13; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  HEAP32[$6$s2] = 0;
  HEAP32[$6$s2 + 1] = 0;
  HEAP32[$6$s2 + 2] = 0;
  HEAP32[$6$s2 + 3] = 0;
  HEAP32[$6$s2 + 4] = 0;
  HEAP32[$6$s2 + 5] = 0;
  HEAP32[$6$s2 + 6] = 0;
  _otrl_dh_session_blank($8);
  _otrl_dh_session_blank($1 + 180 | 0);
  _otrl_dh_session_blank($1 + 308 | 0);
  _otrl_dh_session_blank($1 + 436 | 0);
  return $2;
}
function _otrl_context_priv_force_finished($context_priv) {
  var $5$s2;
  var $context_priv$s2 = $context_priv >> 2;
  _free(HEAP32[$context_priv$s2]);
  HEAP32[$context_priv$s2 + 141] = 0;
  var $4 = $context_priv + 568 | 0;
  var $5$s2 = $context_priv >> 2;
  HEAP32[$5$s2] = 0;
  HEAP32[$5$s2 + 1] = 0;
  HEAP32[$5$s2 + 2] = 0;
  _free(HEAP32[$4 >> 2]);
  HEAP32[$4 >> 2] = 0;
  var $7 = $context_priv + 584 | 0;
  _gcry_free(HEAP32[$7 >> 2]);
  HEAP32[$7 >> 2] = 0;
  HEAP32[$context_priv$s2 + 147] = 0;
  HEAP32[$context_priv$s2 + 3] = 0;
  var $11 = $context_priv + 16 | 0;
  _gcry_mpi_release(HEAP32[$11 >> 2]);
  HEAP32[$11 >> 2] = 0;
  var $13 = $context_priv + 20 | 0;
  _gcry_mpi_release(HEAP32[$13 >> 2]);
  HEAP32[$13 >> 2] = 0;
  HEAP32[$context_priv$s2 + 6] = 0;
  _otrl_dh_keypair_free($context_priv + 28 | 0);
  _otrl_dh_keypair_free($context_priv + 40 | 0);
  _otrl_dh_session_free($context_priv + 52 | 0);
  _otrl_dh_session_free($context_priv + 180 | 0);
  _otrl_dh_session_free($context_priv + 308 | 0);
  _otrl_dh_session_free($context_priv + 436 | 0);
  return;
}
function _otrl_instag_forget($instag) {
  if (($instag | 0) == 0) {
    return;
  }
  var $4 = HEAP32[$instag + 8 >> 2];
  if (($4 | 0) != 0) {
    _free($4);
  }
  var $9 = HEAP32[$instag + 12 >> 2];
  if (($9 | 0) != 0) {
    _free($9);
  }
  var $13 = $instag | 0;
  var $15 = $instag + 4 | 0;
  HEAP32[HEAP32[$15 >> 2] >> 2] = HEAP32[$13 >> 2];
  var $17 = HEAP32[$13 >> 2];
  if (($17 | 0) != 0) {
    HEAP32[$17 + 4 >> 2] = HEAP32[$15 >> 2];
  }
  _free($instag);
  return;
}
function _otrl_instag_forget_all($us) {
  var $1 = $us + 8 | 0;
  var $2 = HEAP32[$1 >> 2];
  if (($2 | 0) == 0) {
    return;
  } else {
    var $4 = $2;
  }
  while (1) {
    var $4;
    _otrl_instag_forget($4);
    var $5 = HEAP32[$1 >> 2];
    if (($5 | 0) == 0) {
      break;
    } else {
      var $4 = $5;
    }
  }
  return;
}
function _otrl_instag_find($us, $accountname, $protocol) {
  var label = 0;
  var $p_0_in = $us + 8 | 0;
  while (1) {
    var $p_0_in;
    var $p_0 = HEAP32[$p_0_in >> 2];
    if (($p_0 | 0) == 0) {
      var $_0 = 0;
      label = 2293;
      break;
    }
    if ((_strcmp(HEAP32[$p_0 + 8 >> 2], $accountname) | 0) == 0) {
      if ((_strcmp(HEAP32[$p_0 + 12 >> 2], $protocol) | 0) == 0) {
        var $_0 = $p_0;
        label = 2292;
        break;
      }
    }
    var $p_0_in = $p_0 | 0;
  }
  if (label == 2293) {
    var $_0;
    return $_0;
  } else if (label == 2292) {
    var $_0;
    return $_0;
  }
}
Module["_otrl_instag_find"] = _otrl_instag_find;
function _otrl_instag_read($us, $filename) {
  var $1 = _fopen($filename, 482540);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    var $8 = _otrl_instag_read_FILEp($us, $1);
    _fclose($1);
    var $_0 = $8;
    var $_0;
    return $_0;
  }
}
Module["_otrl_instag_read"] = _otrl_instag_read;
function _otrl_instag_read_FILEp($us, $instf) {
  var $10$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1004 | 0;
  var $storeline = __stackBase__;
  var $instag = __stackBase__ + 1e3;
  if (($instf | 0) == 0) {
    var $_0 = _gcry_error199(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $2 = $storeline | 0;
  var $3 = $storeline;
  var $4 = $us + 8 | 0;
  L2834 : while (1) {
    if ((_fgets($2, 1e3, $instf) | 0) == 0) {
      label = 2320;
      break;
    }
    HEAP32[$instag >> 2] = 0;
    var $10 = _malloc(20), $10$s2 = $10 >> 2;
    var $11 = $10;
    if (($10 | 0) == 0) {
      label = 2305;
      break;
    }
    var $16 = _strchr($2, 9);
    if (($16 | 0) == 0) {
      _free($10);
      continue;
    }
    HEAP8[$16] = 0;
    var $20 = $16 + 1 | 0;
    var $21 = $20;
    var $22 = $21 - $3 | 0;
    var $23 = _malloc($22);
    HEAP32[$10$s2 + 2] = $23;
    _memmove($23, $2, $22, 1, 0);
    var $26 = _strchr($20, 9);
    if (($26 | 0) == 0) {
      _free($10);
      continue;
    }
    HEAP8[$26] = 0;
    var $30 = $26 + 1 | 0;
    var $32 = $30 - $21 | 0;
    var $33 = _malloc($32);
    HEAP32[$10$s2 + 3] = $33;
    _memmove($33, $20, $32, 1, 0);
    var $36 = _strchr($30, 13);
    do {
      if (($36 | 0) == 0) {
        var $39 = _strchr($30, 10);
        if (($39 | 0) != 0) {
          var $pos_01 = $39;
          break;
        }
        _free($10);
        continue L2834;
      } else {
        var $pos_01 = $36;
      }
    } while (0);
    var $pos_01;
    HEAP8[$pos_01] = 0;
    if ((_strlen($30) | 0) != 8) {
      _free($10);
      continue;
    }
    _sscanf($30, 488296, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $instag, tempInt));
    var $47 = HEAP32[$instag >> 2];
    if ($47 >>> 0 < 256) {
      _free($10);
      continue;
    }
    HEAP32[$10$s2 + 4] = $47;
    var $53 = HEAP32[$4 >> 2];
    var $54 = $10;
    HEAP32[$54 >> 2] = $53;
    if (($53 | 0) != 0) {
      HEAP32[$53 + 4 >> 2] = $54;
    }
    HEAP32[$10$s2 + 1] = $4;
    HEAP32[$4 >> 2] = $11;
  }
  if (label == 2305) {
    var $_0 = _gcry_error199(32854);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 2320) {
    var $_0 = _gcry_error199(0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_otrl_instag_read_FILEp["X"] = 1;
function _gcry_error199($code) {
  return _gcry_err_make202($code);
}
function _otrl_instag_generate($us, $filename, $accountname, $protocol) {
  var $1 = _fopen($filename, 480184);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    var $8 = _otrl_instag_generate_FILEp($us, $1, $accountname, $protocol);
    _fclose($1);
    var $_0 = $8;
    var $_0;
    return $_0;
  }
}
Module["_otrl_instag_generate"] = _otrl_instag_generate;
function _otrl_instag_generate_FILEp($us, $instf, $accountname, $protocol) {
  var $6$s2;
  if (($accountname | 0) == 0 | ($protocol | 0) == 0) {
    var $_0 = _gcry_error199(0);
    var $_0;
    return $_0;
  }
  var $6 = _malloc(20), $6$s2 = $6 >> 2;
  HEAP32[$6$s2 + 2] = _strdup($accountname);
  HEAP32[$6$s2 + 3] = _strdup($protocol);
  HEAP32[$6$s2 + 4] = _otrl_instag_get_new();
  var $17 = $us + 8 | 0;
  var $18 = HEAP32[$17 >> 2];
  var $19 = $6;
  HEAP32[$19 >> 2] = $18;
  if (($18 | 0) != 0) {
    HEAP32[$18 + 4 >> 2] = $19;
  }
  HEAP32[$6$s2 + 1] = $17;
  HEAP32[$17 >> 2] = $6;
  _otrl_instag_write_FILEp($us, $instf);
  var $_0 = _gcry_error199(0);
  var $_0;
  return $_0;
}
function _otrl_instag_get_new() {
  while (1) {
    var $2 = _gcry_random_bytes(4, 1);
    var $4 = HEAP32[$2 >> 2];
    _gcry_free($2);
    if ($4 >>> 0 >= 256) {
      break;
    }
  }
  return $4;
}
function _otrl_instag_write_FILEp($us, $instf) {
  var $p_02$s2;
  var __stackBase__ = STACKTOP;
  _fwrite(476444, 103, 1, $instf);
  var $p_01 = HEAP32[$us + 8 >> 2];
  if (($p_01 | 0) == 0) {
    var $13 = _gcry_error199(0);
    STACKTOP = __stackBase__;
    return $13;
  } else {
    var $p_02 = $p_01, $p_02$s2 = $p_02 >> 2;
  }
  while (1) {
    var $p_02;
    var $7 = HEAP32[$p_02$s2 + 3];
    var $9 = HEAP32[$p_02$s2 + 4];
    _fprintf($instf, 473756, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[$p_02$s2 + 2], HEAP32[tempInt + 4 >> 2] = $7, HEAP32[tempInt + 8 >> 2] = $9, tempInt));
    var $p_0 = HEAP32[$p_02$s2];
    if (($p_0 | 0) == 0) {
      break;
    } else {
      var $p_02 = $p_0, $p_02$s2 = $p_02 >> 2;
    }
  }
  var $13 = _gcry_error199(0);
  STACKTOP = __stackBase__;
  return $13;
}
function _otrl_instag_write($us, $filename) {
  var $1 = _fopen($filename, 480184);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    var $8 = _otrl_instag_write_FILEp($us, $1);
    _fclose($1);
    var $_0 = $8;
    var $_0;
    return $_0;
  }
}
Module["_otrl_instag_write"] = _otrl_instag_write;
function _gcry_err_make202($code) {
  return _gpg_err_make203($code);
}
function _gcry_strerror($err) {
  return __gcry_strerror($err);
}
Module["_gcry_strerror"] = _gcry_strerror;
function _gcry_strsource($err) {
  return __gcry_strsource($err);
}
function _gcry_err_code_from_errno($err) {
  return __gcry_err_code_from_errno($err);
}
function _gcry_err_code_to_errno($code) {
  return __gcry_err_code_to_errno($code);
}
function _gcry_err_make_from_errno($source, $err) {
  return __gcry_err_make_from_errno($source, $err);
}
function _gcry_error_from_errno($err) {
  return __gcry_error_from_errno($err);
}
function _gcry_check_version($req_version) {
  return __gcry_check_version($req_version);
}
function _gcry_control($cmd, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  var $3 = __gcry_vcontrol($cmd, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return $3;
}
function _gcry_sexp_new($retsexp, $buffer, $length, $autodetect) {
  return __gcry_sexp_new($retsexp, $buffer, $length, $autodetect);
}
function _gcry_sexp_create($retsexp, $buffer, $length, $autodetect, $freefnc) {
  return __gcry_sexp_create($retsexp, $buffer, $length, $autodetect, $freefnc);
}
function _gcry_sexp_sscan($retsexp, $erroff, $buffer, $length) {
  return __gcry_sexp_sscan($retsexp, $erroff, $buffer, $length);
}
function _gcry_sexp_build($retsexp, $erroff, $format, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  var $3 = __gcry_sexp_vbuild($retsexp, $erroff, $format, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return $3;
}
function _gcry_sexp_build_array($retsexp, $erroff, $format, $arg_list) {
  return __gcry_sexp_build_array($retsexp, $erroff, $format, $arg_list);
}
function _gcry_sexp_release($sexp) {
  __gcry_sexp_release($sexp);
  return;
}
function _gcry_sexp_canon_len($buffer, $length, $erroff, $errcode) {
  return __gcry_sexp_canon_len($buffer, $length, $erroff, $errcode);
}
function _gcry_sexp_sprint($sexp, $mode, $buffer, $maxlength) {
  return __gcry_sexp_sprint($sexp, $mode, $buffer, $maxlength);
}
function _gcry_sexp_dump($a) {
  __gcry_sexp_dump($a);
  return;
}
function _gcry_sexp_find_token($list, $tok, $toklen) {
  return __gcry_sexp_find_token($list, $tok, $toklen);
}
function _gcry_sexp_length($list) {
  return __gcry_sexp_length($list);
}
function _gcry_sexp_nth($list, $number) {
  return __gcry_sexp_nth($list, $number);
}
function _gcry_sexp_car($list) {
  return __gcry_sexp_car($list);
}
function _gcry_sexp_cdr($list) {
  return __gcry_sexp_cdr($list);
}
function _gcry_sexp_cadr($list) {
  return __gcry_sexp_cadr($list);
}
function _gcry_sexp_nth_data($list, $number, $datalen) {
  return __gcry_sexp_nth_data($list, $number, $datalen);
}
function _gcry_sexp_nth_string($list, $number) {
  return __gcry_sexp_nth_string($list, $number);
}
function _gcry_sexp_cons($a, $b) {
  __gcry_sexp_cons(undef, undef);
  return 0;
}
function _gcry_sexp_alist($array) {
  __gcry_sexp_alist(undef);
  return 0;
}
function _gcry_sexp_vlist($a, varrp) {
  __gcry_bug(481488, 169, 494508);
  return 0;
}
function _gcry_sexp_append($a, $n) {
  __gcry_sexp_append(undef, undef);
  return 0;
}
function _gcry_sexp_prepend($a, $n) {
  __gcry_sexp_prepend(undef, undef);
  return 0;
}
function _gcry_sexp_nth_mpi($list, $number, $mpifmt) {
  return __gcry_sexp_nth_mpi($list, $number, $mpifmt);
}
function _gcry_mpi_new($nbits) {
  return __gcry_mpi_new($nbits);
}
function _gcry_mpi_snew($nbits) {
  return __gcry_mpi_snew($nbits);
}
function _gcry_mpi_release($a) {
  __gcry_mpi_release($a);
  return;
}
function _gcry_mpi_copy($a) {
  return __gcry_mpi_copy($a);
}
function _gcry_mpi_set($w, $u) {
  return __gcry_mpi_set($w, $u);
}
function _gcry_mpi_set_ui($w, $u) {
  return __gcry_mpi_set_ui($w, $u);
}
function _gcry_mpi_swap($a, $b) {
  __gcry_mpi_swap($a, $b);
  return;
}
function _gcry_mpi_cmp($u, $v) {
  return __gcry_mpi_cmp($u, $v);
}
function _gcry_mpi_cmp_ui($u, $v) {
  return __gcry_mpi_cmp_ui($u, $v);
}
function _gcry_mpi_scan($ret_mpi, $format, $buffer, $buflen, $nscanned) {
  return __gcry_mpi_scan($ret_mpi, $format, $buffer, $buflen, $nscanned);
}
function _gcry_mpi_print($format, $buffer, $buflen, $nwritten, $a) {
  return __gcry_mpi_print($format, $buffer, $buflen, $nwritten, $a);
}
function _gcry_mpi_aprint($format, $buffer, $nwritten, $a) {
  return __gcry_mpi_aprint($format, $buffer, $nwritten, $a);
}
function _gcry_mpi_dump($a) {
  __gcry_mpi_dump($a);
  return;
}
function _gcry_mpi_add($w, $u, $v) {
  __gcry_mpi_add($w, $u, $v);
  return;
}
function _gcry_mpi_add_ui($w, $u, $v) {
  __gcry_mpi_add_ui($w, $u, $v);
  return;
}
function _gcry_mpi_addm($w, $u, $v, $m) {
  __gcry_mpi_addm($w, $u, $v, $m);
  return;
}
function _gcry_mpi_sub($w, $u, $v) {
  __gcry_mpi_sub($w, $u, $v);
  return;
}
function _gcry_mpi_sub_ui($w, $u, $v) {
  __gcry_mpi_sub_ui($w, $u, $v);
  return;
}
function _gcry_mpi_subm($w, $u, $v, $m) {
  __gcry_mpi_subm($w, $u, $v, $m);
  return;
}
function _gcry_mpi_mul($w, $u, $v) {
  __gcry_mpi_mul($w, $u, $v);
  return;
}
function _gcry_mpi_mul_ui($w, $u, $v) {
  __gcry_mpi_mul_ui($w, $u, $v);
  return;
}
function _gcry_mpi_mulm($w, $u, $v, $m) {
  __gcry_mpi_mulm($w, $u, $v, $m);
  return;
}
function _gcry_mpi_mul_2exp($w, $u, $cnt) {
  __gcry_mpi_mul_2exp($w, $u, $cnt);
  return;
}
function _gcry_mpi_div($q, $r, $dividend, $divisor, $round) {
  __gcry_mpi_div($q, $r, $dividend, $divisor, $round);
  return;
}
function _gcry_mpi_mod($r, $dividend, $divisor) {
  __gcry_mpi_mod($r, $dividend, $divisor);
  return;
}
function _gcry_mpi_powm($w, $b, $e, $m) {
  __gcry_mpi_powm($w, $b, $e, $m);
  return;
}
function _gcry_mpi_gcd($g, $a, $b) {
  return __gcry_mpi_gcd($g, $a, $b);
}
function _gcry_mpi_invm($x, $a, $m) {
  __gcry_mpi_invm($x, $a, $m);
  return 1;
}
function _gcry_mpi_get_nbits($a) {
  return __gcry_mpi_get_nbits($a);
}
function _gcry_mpi_test_bit($a, $n) {
  return __gcry_mpi_test_bit($a, $n);
}
function _gcry_mpi_set_bit($a, $n) {
  __gcry_mpi_set_bit($a, $n);
  return;
}
function _gcry_mpi_clear_bit($a, $n) {
  __gcry_mpi_clear_bit($a, $n);
  return;
}
function _gcry_mpi_set_highbit($a, $n) {
  __gcry_mpi_set_highbit($a, $n);
  return;
}
function _gcry_mpi_clear_highbit($a, $n) {
  __gcry_mpi_clear_highbit($a, $n);
  return;
}
function _gcry_mpi_rshift($x, $a, $n) {
  __gcry_mpi_rshift($x, $a, $n);
  return;
}
function _gcry_mpi_lshift($x, $a, $n) {
  __gcry_mpi_lshift($x, $a, $n);
  return;
}
function _gcry_mpi_set_opaque($a, $p, $nbits) {
  return __gcry_mpi_set_opaque($a, $p, $nbits);
}
function _gcry_mpi_get_opaque($a, $nbits) {
  return __gcry_mpi_get_opaque($a, $nbits);
}
function _gcry_mpi_set_flag($a, $flag) {
  __gcry_mpi_set_flag($a, $flag);
  return;
}
function _gcry_mpi_get_flag($a, $flag) {
  return __gcry_mpi_get_flag($a, $flag);
}
function _gcry_cipher_open($handle, $algo, $mode, $flags) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[$handle >> 2] = 0;
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_cipher_open($handle, $algo, $mode, $flags);
    var $_0;
    return $_0;
  }
}
function _gpg_error261() {
  return _gpg_err_make308(1, 176);
}
function _gcry_cipher_close($h) {
  __gcry_cipher_close($h);
  return;
}
function _gcry_cipher_setkey($hd, $key, $keylen) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_cipher_setkey($hd, $key, $keylen);
    var $_0;
    return $_0;
  }
}
function _gcry_cipher_setiv($hd, $iv, $ivlen) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    __gcry_cipher_setiv($hd, $iv, $ivlen);
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function _gcry_cipher_setctr($hd, $ctr, $ctrlen) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_cipher_setctr($hd, $ctr, $ctrlen);
    var $_0;
    return $_0;
  }
}
function _gcry_cipher_ctl($h, $cmd, $buffer, $buflen) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_cipher_ctl($h, $cmd, $buffer, $buflen);
    var $_0;
    return $_0;
  }
}
function _gcry_cipher_info($h, $what, $buffer, $nbytes) {
  return __gcry_cipher_info(undef, undef, undef, undef);
}
function _gcry_cipher_algo_info($algo, $what, $buffer, $nbytes) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_cipher_algo_info($algo, $what, $buffer, $nbytes);
    var $_0;
    return $_0;
  }
}
function _gcry_cipher_algo_name($algorithm) {
  return __gcry_cipher_algo_name($algorithm);
}
function _gcry_cipher_map_name($name) {
  return __gcry_cipher_map_name($name);
}
function _gcry_cipher_mode_from_oid($string) {
  return __gcry_cipher_mode_from_oid($string);
}
function _gcry_cipher_encrypt($h, $out, $outsize, $in, $inlen) {
  if ((__gcry_global_is_operational() | 0) != 0) {
    var $_0 = __gcry_cipher_encrypt($h, $out, $outsize, $in, $inlen);
    var $_0;
    return $_0;
  }
  if (($out | 0) != 0) {
    _memset($out, 66, $outsize);
  }
  var $_0 = _gpg_error261();
  var $_0;
  return $_0;
}
function _gcry_cipher_decrypt($h, $out, $outsize, $in, $inlen) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_cipher_decrypt($h, $out, $outsize, $in, $inlen);
    var $_0;
    return $_0;
  }
}
function _gcry_cipher_get_algo_keylen($algo) {
  return __gcry_cipher_get_algo_keylen($algo);
}
function _gcry_cipher_get_algo_blklen($algo) {
  return __gcry_cipher_get_algo_blklen($algo);
}
function _gcry_cipher_list($list, $list_length) {
  __gcry_cipher_list($list, $list_length);
  return 0;
}
function _gcry_pk_encrypt($result, $data, $pkey) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[$result >> 2] = 0;
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_pk_encrypt($result, $data, $pkey);
    var $_0;
    return $_0;
  }
}
function _gcry_pk_decrypt($result, $data, $skey) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[$result >> 2] = 0;
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_pk_decrypt($result, $data, $skey);
    var $_0;
    return $_0;
  }
}
function _gcry_pk_sign($result, $data, $skey) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[$result >> 2] = 0;
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_pk_sign($result, $data, $skey);
    var $_0;
    return $_0;
  }
}
function _gcry_pk_verify($sigval, $data, $pkey) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_pk_verify($sigval, $data, $pkey);
    var $_0;
    return $_0;
  }
}
function _gcry_pk_testkey($key) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_pk_testkey($key);
    var $_0;
    return $_0;
  }
}
function _gcry_pk_genkey($r_key, $s_parms) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[$r_key >> 2] = 0;
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_pk_genkey($r_key, $s_parms);
    var $_0;
    return $_0;
  }
}
function _gcry_pk_ctl($cmd, $buffer, $buflen) {
  return __gcry_pk_ctl($cmd, $buffer, $buflen);
}
function _gcry_pk_algo_info($algo, $what, $buffer, $nbytes) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_pk_algo_info($algo, $what, $buffer, $nbytes);
    var $_0;
    return $_0;
  }
}
function _gcry_pk_algo_name($algorithm) {
  return __gcry_pk_algo_name($algorithm);
}
function _gcry_pk_map_name($name) {
  return __gcry_pk_map_name($name);
}
function _gcry_pk_get_nbits($key) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_pk_get_nbits($key);
  var $_0;
  return $_0;
}
function _gcry_pk_get_keygrip($key, $array) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_pk_get_keygrip($key, $array);
  var $_0;
  return $_0;
}
function _gcry_pk_get_curve($key, $iterator, $r_nbits) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_pk_get_curve($key, $iterator, $r_nbits);
  var $_0;
  return $_0;
}
function _gcry_pk_get_param($algo, $name) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_pk_get_param($algo, $name);
  var $_0;
  return $_0;
}
function _gcry_pk_list($list, $list_length) {
  __gcry_pk_list($list, $list_length);
  return 0;
}
function _gcry_md_open($h, $algo, $flags) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[$h >> 2] = 0;
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_md_open($h, $algo, $flags);
    var $_0;
    return $_0;
  }
}
function _gcry_md_close($hd) {
  __gcry_md_close($hd);
  return;
}
function _gcry_md_enable($hd, $algo) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_md_enable($hd, $algo);
    var $_0;
    return $_0;
  }
}
function _gcry_md_copy($bhd, $ahd) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    HEAP32[$bhd >> 2] = 0;
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_md_copy($bhd, $ahd);
    var $_0;
    return $_0;
  }
}
function _gcry_md_reset($hd) {
  __gcry_md_reset($hd);
  return;
}
function _gcry_md_ctl($hd, $cmd, $buffer, $buflen) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_md_ctl($hd, $cmd, $buffer, $buflen);
    var $_0;
    return $_0;
  }
}
function _gcry_md_write($hd, $buffer, $length) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    return;
  }
  __gcry_md_write($hd, $buffer, $length);
  return;
}
function _gcry_md_read($hd, $algo) {
  return __gcry_md_read($hd, $algo);
}
function _gcry_md_hash_buffer($algo, $digest, $buffer, $length) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481488, 843, 494588, 0, 488100);
  }
  __gcry_md_hash_buffer($algo, $digest, $buffer, $length);
  return;
}
function _gcry_md_get_algo($hd) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481488, 854, 494608, 0, 480096);
    var $_0 = 0;
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_md_get_algo($hd);
    var $_0;
    return $_0;
  }
}
function _gcry_md_get_algo_dlen($algo) {
  return __gcry_md_get_algo_dlen($algo);
}
function _gcry_md_is_enabled($a, $algo) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_md_is_enabled($a, $algo);
  var $_0;
  return $_0;
}
function _gcry_md_is_secure($a) {
  return __gcry_md_is_secure($a);
}
function _gcry_md_info($h, $what, $buffer, $nbytes) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_md_info($h, $what, $buffer, $nbytes);
    var $_0;
    return $_0;
  }
}
function _gcry_md_algo_info($algo, $what, $buffer, $nbytes) {
  return __gcry_md_algo_info($algo, $what, $buffer, $nbytes);
}
function _gcry_md_algo_name($algo) {
  return __gcry_md_algo_name($algo);
}
function _gcry_md_map_name($name) {
  return __gcry_md_map_name($name);
}
function _gcry_md_setkey($hd, $key, $keylen) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_md_setkey($hd, $key, $keylen);
    var $_0;
    return $_0;
  }
}
function _gcry_md_debug($hd, $suffix) {
  __gcry_md_debug($hd, $suffix);
  return;
}
function _gcry_md_list($list, $list_length) {
  __gcry_md_list($list, $list_length);
  return 0;
}
function _gcry_ac_data_new($data) {
  return __gcry_ac_data_new($data);
}
function _gcry_ac_data_destroy($data) {
  __gcry_ac_data_destroy($data);
  return;
}
function _gcry_ac_data_copy($data_cp, $data) {
  return __gcry_ac_data_copy($data_cp, $data);
}
function _gcry_ac_data_length($data) {
  return __gcry_ac_data_length($data);
}
function _gcry_ac_data_clear($data) {
  __gcry_ac_data_clear($data);
  return;
}
function _gcry_ac_data_set($data, $flags, $name, $mpi) {
  return __gcry_ac_data_set($data, $flags, $name, $mpi);
}
function _gcry_ac_data_get_name($data, $flags, $name, $mpi) {
  return __gcry_ac_data_get_name($data, $flags, $name, $mpi);
}
function _gcry_ac_data_get_index($data, $flags, $idx, $name, $mpi) {
  return __gcry_ac_data_get_index($data, $flags, $idx, $name, $mpi);
}
function _gcry_ac_data_to_sexp($data, $sexp, $identifiers) {
  return __gcry_ac_data_to_sexp($data, $sexp, $identifiers);
}
function _gcry_ac_data_from_sexp($data, $sexp, $identifiers) {
  return __gcry_ac_data_from_sexp($data, $sexp, $identifiers);
}
function _gcry_ac_io_init($ac_io, $mode, $type, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_ac_io_init_va($ac_io, $mode, $type, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function _gcry_ac_io_init_va($ac_io, $mode, $type, $ap) {
  __gcry_ac_io_init_va($ac_io, $mode, $type, $ap);
  return;
}
function _gcry_ac_open($handle, $algorithm, $flags) {
  return __gcry_ac_open($handle, $algorithm, $flags);
}
function _gcry_ac_close($handle) {
  __gcry_ac_close($handle);
  return;
}
function _gcry_ac_key_init($key, $handle, $type, $data) {
  return __gcry_ac_key_init($key, undef, $type, $data);
}
function _gcry_ac_key_pair_generate($handle, $nbits, $spec, $key_pair, $miscdata) {
  return __gcry_ac_key_pair_generate($handle, $nbits, $spec, $key_pair, undef);
}
function _gcry_ac_key_pair_extract($keypair, $which) {
  return __gcry_ac_key_pair_extract($keypair, $which);
}
function _gcry_ac_key_data_get($key) {
  return __gcry_ac_key_data_get($key);
}
function _gcry_ac_key_test($handle, $key) {
  return __gcry_ac_key_test($handle, $key);
}
function _gcry_ac_key_get_nbits($handle, $key, $nbits) {
  return __gcry_ac_key_get_nbits($handle, $key, $nbits);
}
function _gcry_ac_key_get_grip($handle, $key, $key_grip) {
  return __gcry_ac_key_get_grip($handle, $key, $key_grip);
}
function _gcry_ac_key_destroy($key) {
  __gcry_ac_key_destroy($key);
  return;
}
function _gcry_ac_key_pair_destroy($key_pair) {
  __gcry_ac_key_pair_destroy($key_pair);
  return;
}
function _gcry_ac_data_encode($method, $flags, $options, $io_read, $io_write) {
  return __gcry_ac_data_encode($method, $flags, $options, $io_read, $io_write);
}
function _gcry_ac_data_decode($method, $flags, $options, $io_read, $io_write) {
  return __gcry_ac_data_decode($method, $flags, $options, $io_read, $io_write);
}
function _gcry_ac_data_encrypt($handle, $flags, $key, $data_plain, $data_encrypted) {
  return __gcry_ac_data_encrypt($handle, $flags, $key, $data_plain, $data_encrypted);
}
function _gcry_ac_data_decrypt($handle, $flags, $key, $data_plain, $data_encrypted) {
  return __gcry_ac_data_decrypt($handle, $flags, $key, $data_plain, $data_encrypted);
}
function _gcry_ac_data_sign($handle, $key, $data, $data_signature) {
  return __gcry_ac_data_sign($handle, $key, $data, $data_signature);
}
function _gcry_ac_data_verify($handle, $key, $data, $data_signature) {
  return __gcry_ac_data_verify($handle, $key, $data, $data_signature);
}
function _gcry_ac_data_encrypt_scheme($handle, $scheme, $flags, $opts, $key, $io_message, $io_cipher) {
  return __gcry_ac_data_encrypt_scheme($handle, $scheme, undef, $opts, $key, $io_message, $io_cipher);
}
function _gcry_ac_data_decrypt_scheme($handle, $scheme, $flags, $opts, $key, $io_cipher, $io_message) {
  return __gcry_ac_data_decrypt_scheme($handle, $scheme, undef, $opts, $key, $io_cipher, $io_message);
}
function _gcry_ac_data_sign_scheme($handle, $scheme, $flags, $opts, $key, $io_message, $io_signature) {
  return __gcry_ac_data_sign_scheme($handle, $scheme, undef, $opts, $key, $io_message, $io_signature);
}
function _gcry_ac_data_verify_scheme($handle, $scheme, $flags, $opts, $key, $io_message, $io_signature) {
  return __gcry_ac_data_verify_scheme($handle, $scheme, undef, $opts, $key, $io_message, $io_signature);
}
function _gcry_ac_id_to_name($algorithm, $name) {
  var $1 = __gcry_pk_algo_name($algorithm);
  if (HEAP8[$1] << 24 >> 24 == 0) {
    var $_0 = _gcry_error294();
    var $_0;
    return $_0;
  } else {
    HEAP32[$name >> 2] = $1;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function _gcry_error294() {
  return _gcry_err_make307();
}
function _gcry_ac_name_to_id($name, $algorithm) {
  var $1 = __gcry_pk_map_name($name);
  if (($1 | 0) == 0) {
    var $_0 = _gcry_error294();
    var $_0;
    return $_0;
  } else {
    HEAP32[$algorithm >> 2] = $1;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function _gcry_kdf_derive($passphrase, $passphraselen, $algo, $hashalgo, $salt, $saltlen, $iterations, $keysize, $keybuffer) {
  return __gcry_kdf_derive($passphrase, $passphraselen, $algo, $hashalgo, $salt, $saltlen, $iterations, $keysize, $keybuffer);
}
function _gcry_random_add_bytes($buffer, $length, $quality) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    var $_0 = _gpg_error261();
    var $_0;
    return $_0;
  } else {
    var $_0 = __gcry_random_add_bytes($buffer, $length, $quality);
    var $_0;
    return $_0;
  }
}
function _gcry_mpi_randomize($w, $nbits, $level) {
  __gcry_mpi_randomize($w, $nbits, $level);
  return;
}
function _gcry_prime_generate($prime, $prime_bits, $factor_bits, $factors, $cb_func, $cb_arg, $random_level, $flags) {
  return __gcry_prime_generate($prime, $prime_bits, $factor_bits, $factors, $cb_func, $cb_arg, $random_level, $flags);
}
function _gcry_mpi_clear_flag($a, $flag) {
  __gcry_mpi_clear_flag(undef, $flag);
}
function _gcry_randomize($buffer, $length, $level) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481488, 1230, 494524, 1, 488100);
    __gcry_fips_noreturn();
  } else {
    __gcry_randomize($buffer, $length, $level);
    return;
  }
}
function _gcry_random_bytes($nbytes, $level) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481488, 1250, 494568, 1, 488100);
    __gcry_fips_noreturn();
  } else {
    return __gcry_random_bytes($nbytes, $level);
  }
}
function _gcry_random_bytes_secure($nbytes, $level) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481488, 1263, 494540, 1, 488100);
    __gcry_fips_noreturn();
  } else {
    return __gcry_random_bytes_secure($nbytes, $level);
  }
}
function _gcry_create_nonce($buffer, $length) {
  if ((__gcry_global_is_operational() | 0) == 0) {
    __gcry_fips_signal_error(481488, 1283, 494628, 1, 488100);
    __gcry_fips_noreturn();
  } else {
    __gcry_create_nonce($buffer, $length);
    return;
  }
}
function _gpg_err_make308($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function __gcry_ac_data_length($data) {
  return HEAP32[$data + 4 >> 2];
}
function _gcry_prime_group_generator($r_g, $prime, $factors, $start_g) {
  return __gcry_prime_group_generator($r_g, $prime, $factors, $start_g);
}
function _gcry_prime_release_factors($factors) {
  __gcry_prime_release_factors($factors);
  return;
}
function _gcry_prime_check($x, $flags) {
  return __gcry_prime_check($x, undef);
}
function _gcry_set_progress_handler($cb, $cb_data) {
  __gcry_set_progress_handler($cb, $cb_data);
  return;
}
function _gcry_set_allocation_handler($func_alloc, $func_alloc_secure, $func_secure_check, $func_realloc, $func_free) {
  __gcry_set_allocation_handler($func_alloc, $func_alloc_secure, $func_secure_check, $func_realloc, $func_free);
  return;
}
function _gcry_set_outofcore_handler($h, $opaque) {
  __gcry_set_outofcore_handler($h, $opaque);
  return;
}
function _gcry_set_fatalerror_handler($fnc, $opaque) {
  __gcry_set_fatalerror_handler($fnc, $opaque);
  return;
}
function _gcry_set_log_handler($f, $opaque) {
  __gcry_set_log_handler($f, $opaque);
  return;
}
function _gcry_set_gettext_handler($f) {
  __gcry_set_gettext_handler($f);
  return;
}
function _gcry_malloc($n) {
  return __gcry_malloc($n);
}
function _gcry_calloc($n, $m) {
  return __gcry_calloc($n, $m);
}
function _gcry_malloc_secure($n) {
  return __gcry_malloc_secure($n);
}
function _gcry_calloc_secure($n, $m) {
  return __gcry_calloc_secure($n, $m);
}
function _gcry_realloc($a, $n) {
  return __gcry_realloc($a, $n);
}
function _gcry_strdup($string) {
  return __gcry_strdup($string);
}
function _gcry_xmalloc($n) {
  return __gcry_xmalloc($n);
}
function _gcry_xcalloc($n, $m) {
  return __gcry_xcalloc($n, $m);
}
function _gcry_xmalloc_secure($n) {
  return __gcry_xmalloc_secure($n);
}
function _gcry_xcalloc_secure($n, $m) {
  return __gcry_xcalloc_secure($n, $m);
}
function _gcry_xrealloc($a, $n) {
  return __gcry_xrealloc($a, $n);
}
function _gcry_xstrdup($a) {
  return __gcry_xstrdup($a);
}
function _gcry_free($a) {
  __gcry_free($a);
  return;
}
function _gcry_is_secure($a) {
  return __gcry_is_secure($a);
}
function _gcry_cipher_register($cipher, $algorithm_id, $module) {
  return __gcry_cipher_register($cipher, 0, $algorithm_id, $module);
}
function _gcry_cipher_unregister($module) {
  __gcry_cipher_unregister($module);
  return;
}
function _gcry_pk_register($pubkey, $algorithm_id, $module) {
  return __gcry_pk_register($pubkey, 0, $algorithm_id, $module);
}
function _gcry_pk_unregister($module) {
  __gcry_pk_unregister($module);
  return;
}
function _gcry_md_register($digest, $algorithm_id, $module) {
  return __gcry_md_register($digest, 0, $algorithm_id, $module);
}
function _gcry_md_unregister($module) {
  __gcry_md_unregister($module);
  return;
}
function _gcry_err_make307() {
  return _gpg_err_make308(32, 4);
}
function __gcry_ac_data_new($data) {
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    return $_0;
  }
  var $6 = __gcry_malloc(8);
  if (($6 | 0) == 0) {
    var $_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$data >> 2] = $6;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function _gpg_error337() {
  return _gpg_err_make402(1, 60);
}
function __gcry_ac_data_destroy($data) {
  if (($data | 0) == 0) {
    return;
  }
  _ac_data_values_destroy($data);
  __gcry_free(HEAP32[$data >> 2]);
  __gcry_free($data);
  return;
}
function _ac_data_values_destroy($data) {
  var $1 = $data + 4 | 0;
  if ((HEAP32[$1 >> 2] | 0) == 0) {
    return;
  }
  var $4 = $data | 0;
  var $i_01 = 0;
  while (1) {
    var $i_01;
    var $6 = HEAP32[$4 >> 2];
    if ((HEAP32[($6 + 8 >> 2) + ($i_01 * 3 | 0)] & 1 | 0) != 0) {
      __gcry_mpi_release(HEAP32[($6 + 4 >> 2) + ($i_01 * 3 | 0)]);
      __gcry_free(HEAP32[(HEAP32[$4 >> 2] >> 2) + ($i_01 * 3 | 0)]);
    }
    var $18 = $i_01 + 1 | 0;
    if ($18 >>> 0 < HEAP32[$1 >> 2] >>> 0) {
      var $i_01 = $18;
    } else {
      break;
    }
  }
  return;
}
function __gcry_ac_data_copy($data_cp, $data) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $data_mpis = __stackBase__;
  HEAP32[$data_mpis >> 2] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = __gcry_malloc(8);
  var $7 = $6;
  do {
    if (($6 | 0) == 0) {
      var $24 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      if (($24 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $err_02 = $24;
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $12 = $data + 4 | 0;
      var $14 = _ac_data_mpi_copy(HEAP32[$data >> 2], HEAP32[$12 >> 2], $data_mpis);
      if (($14 | 0) != 0) {
        var $err_02 = $14;
        break;
      }
      HEAP32[$6 + 4 >> 2] = HEAP32[$12 >> 2];
      HEAP32[$6 >> 2] = HEAP32[$data_mpis >> 2];
      HEAP32[$data_cp >> 2] = $7;
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $err_02;
  __gcry_free($6);
  var $_0 = $err_02;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _ac_data_mpi_copy($data_mpis, $data_mpis_n, $data_mpis_cp) {
  var $3$s2;
  var label = 0;
  var $1 = $data_mpis_n * 12 & -1;
  var $2 = __gcry_malloc($1);
  var $3 = $2, $3$s2 = $3 >> 2;
  var $4 = ($2 | 0) != 0;
  if (!$4) {
    var $err_14 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $err_14;
    return $err_14;
  }
  _memset($2, 0, $1);
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if ($i_0 >>> 0 >= $data_mpis_n >>> 0) {
      break;
    }
    var $15 = __gcry_strdup(HEAP32[($data_mpis >> 2) + ($i_0 * 3 | 0)]);
    var $18 = __gcry_mpi_copy(HEAP32[($data_mpis + 4 >> 2) + ($i_0 * 3 | 0)]);
    if (($15 | 0) == 0 | ($18 | 0) == 0) {
      label = 2761;
      break;
    }
    HEAP32[$3$s2 + ($i_0 * 3 | 0) + 2] = 1;
    HEAP32[$3$s2 + ($i_0 * 3 | 0)] = $15;
    HEAP32[$3$s2 + ($i_0 * 3 | 0) + 1] = $18;
    var $i_0 = $i_0 + 1 | 0;
  }
  do {
    if (label == 2761) {
      var $29 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      __gcry_mpi_release($18);
      __gcry_free($15);
      if (($29 | 0) == 0) {
        break;
      }
      if (!$4) {
        var $err_14 = $29;
        var $err_14;
        return $err_14;
      }
      L3320 : do {
        if (($data_mpis_n | 0) != 0) {
          var $i_15 = 0;
          while (1) {
            var $i_15;
            __gcry_mpi_release(HEAP32[$3$s2 + ($i_15 * 3 | 0) + 1]);
            __gcry_free(HEAP32[$3$s2 + ($i_15 * 3 | 0)]);
            var $37 = $i_15 + 1 | 0;
            if (($37 | 0) == ($data_mpis_n | 0)) {
              break L3320;
            } else {
              var $i_15 = $37;
            }
          }
        }
      } while (0);
      __gcry_free($2);
      var $err_14 = $29;
      var $err_14;
      return $err_14;
    }
  } while (0);
  HEAP32[$data_mpis_cp >> 2] = $3;
  var $err_14 = 0;
  var $err_14;
  return $err_14;
}
_ac_data_mpi_copy["X"] = 1;
function __gcry_ac_data_set($data, $flags, $name, $mpi) {
  var $39$s2;
  var $25$s2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    return $_0;
  }
  L3332 : do {
    if ($flags >>> 0 > 3) {
      var $name_cp_1 = 0;
      var $mpi_cp_1 = 0;
      var $err_0 = _gcry_error346(45);
    } else {
      do {
        if (($flags & 2 | 0) == 0) {
          var $_01 = $flags;
          var $name_cp_0 = 0;
          var $mpi_cp_0 = 0;
        } else {
          var $13 = __gcry_strdup($name);
          var $14 = __gcry_mpi_copy($mpi);
          if (($13 | 0) != 0) {
            if (($14 | 0) != 0) {
              var $_01 = $flags | 1;
              var $name_cp_0 = $13;
              var $mpi_cp_0 = $14;
              break;
            }
          }
          var $name_cp_1 = $13;
          var $mpi_cp_1 = $14;
          var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          break L3332;
        }
      } while (0);
      var $mpi_cp_0;
      var $name_cp_0;
      var $_01;
      var $24 = $data | 0;
      var $25$s2 = ($data + 4 | 0) >> 2;
      var $26 = HEAP32[$25$s2];
      var $i_0 = 0;
      while (1) {
        var $i_0;
        if ($i_0 >>> 0 >= $26 >>> 0) {
          break;
        }
        if ((_strcmp($name, HEAP32[(HEAP32[$24 >> 2] >> 2) + ($i_0 * 3 | 0)]) | 0) == 0) {
          break;
        } else {
          var $i_0 = $i_0 + 1 | 0;
        }
      }
      var $37 = HEAP32[$25$s2];
      var $39$s2 = ($data | 0) >> 2;
      var $40 = HEAP32[$39$s2];
      do {
        if ($i_0 >>> 0 < $37 >>> 0) {
          if ((HEAP32[($40 + 8 >> 2) + ($i_0 * 3 | 0)] & 1 | 0) == 0) {
            break;
          }
          __gcry_mpi_release(HEAP32[($40 + 4 >> 2) + ($i_0 * 3 | 0)]);
          __gcry_free(HEAP32[(HEAP32[$39$s2] >> 2) + ($i_0 * 3 | 0)]);
        } else {
          var $56 = __gcry_realloc($40, ($37 * 12 & -1) + 12 | 0);
          var $57 = $56;
          if (($56 | 0) == 0) {
            var $name_cp_1 = $name_cp_0;
            var $mpi_cp_1 = $mpi_cp_0;
            var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
            break L3332;
          }
          if ((HEAP32[$39$s2] | 0) != ($57 | 0)) {
            HEAP32[$39$s2] = $57;
          }
          HEAP32[$25$s2] = HEAP32[$25$s2] + 1 | 0;
        }
      } while (0);
      HEAP32[(HEAP32[$39$s2] >> 2) + ($i_0 * 3 | 0)] = ($name_cp_0 | 0) != 0 ? $name_cp_0 : $name;
      HEAP32[(HEAP32[$39$s2] + 4 >> 2) + ($i_0 * 3 | 0)] = ($mpi_cp_0 | 0) != 0 ? $mpi_cp_0 : $mpi;
      HEAP32[(HEAP32[$39$s2] + 8 >> 2) + ($i_0 * 3 | 0)] = $_01;
      var $_0 = 0;
      var $_0;
      return $_0;
    }
  } while (0);
  var $err_0;
  var $mpi_cp_1;
  var $name_cp_1;
  if (($err_0 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  __gcry_mpi_release($mpi_cp_1);
  __gcry_free($name_cp_1);
  var $_0 = $err_0;
  var $_0;
  return $_0;
}
__gcry_ac_data_set["X"] = 1;
function _gcry_error346($code) {
  return _gcry_err_make401($code);
}
function __gcry_ac_data_get_name($data, $flags, $name, $mpi) {
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    return $_0;
  }
  if (($flags & -3 | 0) != 0) {
    var $_0 = _gcry_error346(45);
    var $_0;
    return $_0;
  }
  var $8 = $data | 0;
  var $9 = $data + 4 | 0;
  var $10 = HEAP32[$9 >> 2];
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if ($i_0 >>> 0 >= $10 >>> 0) {
      break;
    }
    if ((_strcmp($name, HEAP32[(HEAP32[$8 >> 2] >> 2) + ($i_0 * 3 | 0)]) | 0) == 0) {
      break;
    } else {
      var $i_0 = $i_0 + 1 | 0;
    }
  }
  if (($i_0 | 0) == (HEAP32[$9 >> 2] | 0)) {
    var $_0 = _gcry_error346(27);
    var $_0;
    return $_0;
  }
  var $33 = HEAP32[(HEAP32[$data >> 2] + 4 >> 2) + ($i_0 * 3 | 0)];
  do {
    if (($flags & 2 | 0) == 0) {
      var $mpi_return_0 = $33;
    } else {
      var $35 = __gcry_mpi_copy($33);
      if (($35 | 0) != 0) {
        var $mpi_return_0 = $35;
        break;
      }
      var $_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      var $_0;
      return $_0;
    }
  } while (0);
  var $mpi_return_0;
  HEAP32[$mpi >> 2] = $mpi_return_0;
  var $_0 = 0;
  var $_0;
  return $_0;
}
function __gcry_ac_data_get_index($data, $flags, $idx, $name, $mpi) {
  var $data$s2 = $data >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    return $_0;
  }
  L3391 : do {
    if (($flags & -3 | 0) == 0) {
      if (HEAP32[$data$s2 + 1] >>> 0 <= $idx >>> 0) {
        var $name_cp_2 = 0;
        var $err_0 = _gcry_error346(45);
        break;
      }
      do {
        if (($flags & 2 | 0) == 0) {
          var $name_cp_1 = 0;
          var $mpi_cp_0 = 0;
        } else {
          do {
            if (($name | 0) == 0) {
              var $name_cp_0 = 0;
            } else {
              var $26 = __gcry_strdup(HEAP32[(HEAP32[$data$s2] >> 2) + ($idx * 3 | 0)]);
              if (($26 | 0) != 0) {
                var $name_cp_0 = $26;
                break;
              }
              var $name_cp_2 = 0;
              var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
              break L3391;
            }
          } while (0);
          var $name_cp_0;
          if (($mpi | 0) == 0) {
            var $name_cp_1 = $name_cp_0;
            var $mpi_cp_0 = 0;
            break;
          }
          var $39 = __gcry_mpi_copy(HEAP32[(HEAP32[$data$s2] + 4 >> 2) + ($idx * 3 | 0)]);
          if (($39 | 0) != 0) {
            var $name_cp_1 = $name_cp_0;
            var $mpi_cp_0 = $39;
            break;
          }
          var $name_cp_2 = $name_cp_0;
          var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          break L3391;
        }
      } while (0);
      var $mpi_cp_0;
      var $name_cp_1;
      if (($name | 0) != 0) {
        if (($name_cp_1 | 0) == 0) {
          var $55 = HEAP32[(HEAP32[$data$s2] >> 2) + ($idx * 3 | 0)];
        } else {
          var $55 = $name_cp_1;
        }
        var $55;
        HEAP32[$name >> 2] = $55;
      }
      if (($mpi | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      if (($mpi_cp_0 | 0) == 0) {
        var $66 = HEAP32[(HEAP32[$data$s2] + 4 >> 2) + ($idx * 3 | 0)];
      } else {
        var $66 = $mpi_cp_0;
      }
      var $66;
      HEAP32[$mpi >> 2] = $66;
      var $_0 = 0;
      var $_0;
      return $_0;
    } else {
      var $name_cp_2 = 0;
      var $err_0 = _gcry_error346(45);
    }
  } while (0);
  var $err_0;
  var $name_cp_2;
  if (($err_0 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  __gcry_mpi_release(0);
  __gcry_free($name_cp_2);
  var $_0 = $err_0;
  var $_0;
  return $_0;
}
__gcry_ac_data_get_index["X"] = 1;
function __gcry_ac_data_to_sexp($data, $sexp, $identifiers) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $sexp_new = __stackBase__;
  var $label = __stackBase__ + 4;
  var $mpi = __stackBase__ + 8;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  L3429 : do {
    if (($identifiers | 0) == 0) {
      var $i_1 = 0;
      var $sexp_buffer_n_1 = 1;
    } else {
      var $7 = HEAP32[$identifiers >> 2];
      if (($7 | 0) == 0) {
        var $i_1 = 0;
        var $sexp_buffer_n_1 = 1;
        break;
      } else {
        var $sexp_buffer_n_02 = 1;
        var $i_03 = 0;
        var $9 = $7;
      }
      while (1) {
        var $9;
        var $i_03;
        var $sexp_buffer_n_02;
        var $12 = $sexp_buffer_n_02 + _strlen($9) + 2 | 0;
        var $13 = $i_03 + 1 | 0;
        var $15 = HEAP32[$identifiers + ($13 << 2) >> 2];
        if (($15 | 0) == 0) {
          var $i_1 = $13;
          var $sexp_buffer_n_1 = $12;
          break L3429;
        } else {
          var $sexp_buffer_n_02 = $12;
          var $i_03 = $13;
          var $9 = $15;
        }
      }
    }
  } while (0);
  var $sexp_buffer_n_1;
  var $i_1;
  var $17 = ($i_1 | 0) != 0;
  var $19 = __gcry_ac_data_length($data);
  var $i_2 = 0;
  var $sexp_buffer_n_3 = $17 ? $sexp_buffer_n_1 : $sexp_buffer_n_1 + 2 | 0;
  while (1) {
    var $sexp_buffer_n_3;
    var $i_2;
    if ($i_2 >>> 0 >= $19 >>> 0) {
      label = 2857;
      break;
    }
    var $23 = __gcry_ac_data_get_index($data, 0, $i_2, $label, 0);
    if (($23 | 0) != 0) {
      var $arg_list_0 = 0;
      var $err_4 = $23;
      var $sexp_buffer_0 = 0;
      break;
    }
    var $i_2 = $i_2 + 1 | 0;
    var $sexp_buffer_n_3 = $sexp_buffer_n_3 + _strlen(HEAP32[$label >> 2]) + 5 | 0;
  }
  L3438 : do {
    if (label == 2857) {
      var $32 = __gcry_malloc($sexp_buffer_n_3);
      if (($32 | 0) == 0) {
        var $arg_list_0 = 0;
        var $err_4 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $sexp_buffer_0 = 0;
        break;
      }
      HEAP8[$32] = 0;
      L3443 : do {
        if ($17) {
          var $sexp_buffer_n_414 = 0;
          var $i_315 = 0;
          while (1) {
            var $i_315;
            var $sexp_buffer_n_414;
            var $43 = _sprintf($32 + $sexp_buffer_n_414 | 0, 487396, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[$identifiers + ($i_315 << 2) >> 2], tempInt)) + $sexp_buffer_n_414 | 0;
            var $44 = $i_315 + 1 | 0;
            if (($44 | 0) == ($i_1 | 0)) {
              var $sexp_buffer_n_5 = $43;
              break L3443;
            } else {
              var $sexp_buffer_n_414 = $43;
              var $i_315 = $44;
            }
          }
        } else {
          var $46 = $32;
          tempBigInt = 40;
          HEAP8[$46] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$46 + 1] = tempBigInt & 255;
          var $sexp_buffer_n_5 = 1;
        }
      } while (0);
      var $sexp_buffer_n_5;
      var $49 = __gcry_malloc(($19 << 2) + 4 | 0);
      var $50 = $49;
      if (($49 | 0) == 0) {
        var $arg_list_0 = $50;
        var $err_4 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $sexp_buffer_0 = $32;
        break;
      }
      var $52 = $data | 0;
      var $i_4 = 0;
      var $sexp_buffer_n_6 = $sexp_buffer_n_5;
      while (1) {
        var $sexp_buffer_n_6;
        var $i_4;
        if ($i_4 >>> 0 >= $19 >>> 0) {
          break;
        }
        var $60 = __gcry_ac_data_get_index($data, 0, $i_4, $label, $mpi);
        if (($60 | 0) != 0) {
          var $arg_list_0 = $50;
          var $err_4 = $60;
          var $sexp_buffer_0 = $32;
          break L3438;
        }
        var $66 = _sprintf($32 + $sexp_buffer_n_6 | 0, 476160, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[$label >> 2], tempInt)) + $sexp_buffer_n_6 | 0;
        HEAP32[$50 + ($i_4 << 2) >> 2] = HEAP32[$52 >> 2] + $i_4 * 12 + 4 | 0;
        var $i_4 = $i_4 + 1 | 0;
        var $sexp_buffer_n_6 = $66;
      }
      L3456 : do {
        if ($17) {
          var $73 = $i_1 + $sexp_buffer_n_6 | 0;
          var $sexp_buffer_n_77 = $sexp_buffer_n_6;
          while (1) {
            var $sexp_buffer_n_77;
            var $76 = $32 + $sexp_buffer_n_77 | 0;
            tempBigInt = 41;
            HEAP8[$76] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$76 + 1] = tempBigInt & 255;
            var $77 = $sexp_buffer_n_77 + 1 | 0;
            if (($77 | 0) == ($73 | 0)) {
              break L3456;
            } else {
              var $sexp_buffer_n_77 = $77;
            }
          }
        } else {
          var $80 = $32 + $sexp_buffer_n_6 | 0;
          tempBigInt = 41;
          HEAP8[$80] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$80 + 1] = tempBigInt & 255;
        }
      } while (0);
      var $81 = __gcry_sexp_build_array($sexp_new, 0, $32, $50);
      if (($81 | 0) != 0) {
        var $arg_list_0 = $50;
        var $err_4 = $81;
        var $sexp_buffer_0 = $32;
        break;
      }
      HEAP32[$sexp >> 2] = HEAP32[$sexp_new >> 2];
      var $arg_list_0 = $50;
      var $err_4 = 0;
      var $sexp_buffer_0 = $32;
    }
  } while (0);
  var $sexp_buffer_0;
  var $err_4;
  var $arg_list_0;
  __gcry_free($sexp_buffer_0);
  __gcry_free($arg_list_0);
  var $_0 = $err_4;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_to_sexp["X"] = 1;
function __gcry_ac_data_from_sexp($data_set, $sexp, $identifiers) {
  var $data_n$s2;
  var $data_set_new$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $data_set_new = __stackBase__, $data_set_new$s2 = $data_set_new >> 2;
  var $data_n = __stackBase__ + 4, $data_n$s2 = $data_n >> 2;
  HEAP32[$data_set_new$s2] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if (($identifiers | 0) == 0) {
      var $skip_name_0 = 0;
      var $sexp_cur_1 = $sexp;
      label = 2892;
    } else {
      var $i_0 = 0;
      var $sexp_cur_0 = $sexp;
      while (1) {
        var $sexp_cur_0;
        var $i_0;
        var $7 = ($i_0 << 2) + $identifiers | 0;
        if ((HEAP32[$7 >> 2] | 0) == 0) {
          break;
        }
        var $11 = __gcry_sexp_nth_data($sexp_cur_0, 0, $data_n);
        var $12 = HEAP32[$data_n$s2];
        var $13 = HEAP32[$7 >> 2];
        if (($12 | 0) != (_strlen($13) | 0)) {
          label = 2884;
          break;
        }
        if ((_strncmp($11, $13, $12) | 0) != 0) {
          label = 2884;
          break;
        }
        var $22 = $i_0 + 1 | 0;
        if ((HEAP32[$identifiers + ($22 << 2) >> 2] | 0) == 0) {
          break;
        }
        var $27 = __gcry_sexp_nth($sexp_cur_0, 1);
        if (($27 | 0) == 0) {
          label = 2887;
          break;
        }
        if (($sexp_cur_0 | 0) == ($sexp | 0)) {
          var $i_0 = $22;
          var $sexp_cur_0 = $27;
          continue;
        }
        __gcry_sexp_release($sexp_cur_0);
        var $i_0 = $22;
        var $sexp_cur_0 = $27;
      }
      do {
        if (label == 2887) {
          var $err_0 = _gcry_error346(83);
          label = 2890;
          break;
        } else if (label == 2884) {
          var $err_0 = _gcry_error346(83);
          label = 2890;
          break;
        }
      } while (0);
      if (label == 2890) {
        var $err_0;
        if (($err_0 | 0) != 0) {
          var $err_3 = $err_0;
          var $sexp_cur_2 = $sexp_cur_0;
          var $sexp_tmp_5 = 0;
          var $mpi_2 = 0;
          var $string_2 = 0;
          break;
        }
      }
      var $skip_name_0 = ($i_0 | 0) != 0 & 1;
      var $sexp_cur_1 = $sexp_cur_0;
      label = 2892;
      break;
    }
  } while (0);
  L3485 : do {
    if (label == 2892) {
      var $sexp_cur_1;
      var $skip_name_0;
      var $37 = __gcry_ac_data_new($data_set_new);
      if (($37 | 0) != 0) {
        var $err_3 = $37;
        var $sexp_cur_2 = $sexp_cur_1;
        var $sexp_tmp_5 = 0;
        var $mpi_2 = 0;
        var $string_2 = 0;
        break;
      }
      if (($sexp_cur_1 | 0) == 0) {
        var $sexp_n_0 = 0;
      } else {
        var $sexp_n_0 = __gcry_sexp_length($sexp_cur_1) - $skip_name_0 | 0;
      }
      var $sexp_n_0;
      var $45 = HEAP32[$data_set_new$s2];
      var $i_1 = 0;
      var $err_1 = $37;
      while (1) {
        var $err_1;
        var $i_1;
        if ($i_1 >>> 0 >= $sexp_n_0 >>> 0) {
          var $err_2 = $err_1;
          var $sexp_tmp_4 = 0;
          var $string_1 = 0;
          break;
        }
        var $50 = __gcry_sexp_nth($sexp_cur_1, $i_1 + $skip_name_0 | 0);
        if (($50 | 0) == 0) {
          label = 2898;
          break;
        }
        var $55 = __gcry_sexp_nth_data($50, 0, $data_n);
        var $58 = __gcry_malloc(HEAP32[$data_n$s2] + 1 | 0);
        if (($58 | 0) == 0) {
          label = 2900;
          break;
        }
        _memcpy($58, $55, HEAP32[$data_n$s2]);
        HEAP8[$58 + HEAP32[$data_n$s2] | 0] = 0;
        var $68 = __gcry_sexp_nth_mpi($50, 1, 0);
        if (($68 | 0) == 0) {
          label = 2902;
          break;
        }
        var $73 = __gcry_ac_data_set($45, 1, $58, $68);
        if (($73 | 0) != 0) {
          var $err_3 = $73;
          var $sexp_cur_2 = $sexp_cur_1;
          var $sexp_tmp_5 = $50;
          var $mpi_2 = $68;
          var $string_2 = $58;
          break L3485;
        }
        __gcry_sexp_release($50);
        var $i_1 = $i_1 + 1 | 0;
        var $err_1 = 0;
      }
      if (label == 2902) {
        var $err_2 = _gcry_error346(83);
        var $sexp_tmp_4 = $50;
        var $string_1 = $58;
      } else if (label == 2900) {
        var $err_2 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $sexp_tmp_4 = $50;
        var $string_1 = 0;
      } else if (label == 2898) {
        var $err_2 = _gcry_error346(83);
        var $sexp_tmp_4 = 0;
        var $string_1 = 0;
      }
      var $string_1;
      var $sexp_tmp_4;
      var $err_2;
      if (($err_2 | 0) != 0) {
        var $err_3 = $err_2;
        var $sexp_cur_2 = $sexp_cur_1;
        var $sexp_tmp_5 = $sexp_tmp_4;
        var $mpi_2 = 0;
        var $string_2 = $string_1;
        break;
      }
      HEAP32[$data_set >> 2] = HEAP32[$data_set_new$s2];
      var $err_3 = 0;
      var $sexp_cur_2 = $sexp_cur_1;
      var $sexp_tmp_5 = $sexp_tmp_4;
      var $mpi_2 = 0;
      var $string_2 = $string_1;
    }
  } while (0);
  var $string_2;
  var $mpi_2;
  var $sexp_tmp_5;
  var $sexp_cur_2;
  var $err_3;
  if (($sexp_cur_2 | 0) != ($sexp | 0)) {
    __gcry_sexp_release($sexp_cur_2);
  }
  __gcry_sexp_release($sexp_tmp_5);
  __gcry_mpi_release($mpi_2);
  __gcry_free($string_2);
  if (($err_3 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ac_data_destroy(HEAP32[$data_set_new$s2]);
  var $_0 = $err_3;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_from_sexp["X"] = 1;
function _gcry_ac_data_dump($prefix, $data) {
  __gcry_ac_data_dump($prefix, $data);
  return;
}
function __gcry_ac_data_dump($prefix, $data) {
  var $mpi_buffer$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $mpi_buffer = __stackBase__, $mpi_buffer$s2 = $mpi_buffer >> 2;
  var $mpi_buffer_n = __stackBase__ + 4;
  var $name = __stackBase__ + 8;
  var $mpi = __stackBase__ + 12;
  if (($data | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[$mpi_buffer$s2] = 0;
  var $6 = __gcry_ac_data_length($data);
  var $7 = ($prefix | 0) != 0;
  var $8 = $7 ? $prefix : 479260;
  var $9 = $7 ? 478732 : 479260;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if ($i_0 >>> 0 >= $6 >>> 0) {
      break;
    }
    if ((__gcry_ac_data_get_index($data, 0, $i_0, $name, $mpi) | 0) != 0) {
      label = 2921;
      break;
    }
    if ((__gcry_mpi_aprint(4, $mpi_buffer, $mpi_buffer_n, HEAP32[$mpi >> 2]) | 0) != 0) {
      label = 2923;
      break;
    }
    var $22 = HEAP32[$name >> 2];
    var $23 = HEAP32[$mpi_buffer$s2];
    __gcry_log_printf(479596, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = $9, HEAP32[tempInt + 8 >> 2] = $22, HEAP32[tempInt + 12 >> 2] = $23, tempInt));
    __gcry_free(HEAP32[$mpi_buffer$s2]);
    HEAP32[$mpi_buffer$s2] = 0;
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 2921) {
    __gcry_log_error(479876, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  } else if (label == 2923) {
    __gcry_log_error(479876, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_free(HEAP32[$mpi_buffer$s2]);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_ac_data_clear($data) {
  _ac_data_values_destroy($data);
  var $1 = $data | 0;
  __gcry_free(HEAP32[$1 >> 2]);
  HEAP32[$1 >> 2] = 0;
  HEAP32[$data + 4 >> 2] = 0;
  return;
}
function __gcry_ac_io_init($ac_io, $mode, $type, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $ap = __stackBase__;
  HEAP32[$ap >> 2] = varrp;
  __gcry_ac_io_init_va($ac_io, $mode, $type, HEAP32[$ap >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_ac_open($handle, $algorithm, $flags) {
  var $14$s2;
  var $module$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $module = __stackBase__, $module$s2 = $module >> 2;
  HEAP32[$handle >> 2] = 0;
  HEAP32[$module$s2] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = __gcry_pk_aliased_algo_name($algorithm);
  do {
    if (($6 | 0) == 0) {
      var $err_0 = _gcry_error346(4);
      label = 2940;
      break;
    } else {
      var $11 = __gcry_pk_module_lookup($algorithm, $module);
      if (($11 | 0) != 0) {
        var $err_01 = $11;
        break;
      }
      var $14 = __gcry_malloc(16), $14$s2 = $14 >> 2;
      if (($14 | 0) == 0) {
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        label = 2940;
        break;
      } else {
        HEAP32[$14$s2] = $algorithm;
        HEAP32[$14$s2 + 1] = $6;
        HEAP32[$14$s2 + 2] = $flags;
        HEAP32[$14$s2 + 3] = HEAP32[$module$s2];
        HEAP32[$handle >> 2] = $14;
        var $err_0 = $11;
        label = 2940;
        break;
      }
    }
  } while (0);
  do {
    if (label == 2940) {
      var $err_0;
      if (($err_0 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $err_01 = $err_0;
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $err_01;
  __gcry_pk_module_release(HEAP32[$module$s2]);
  var $_0 = $err_01;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_ac_close($handle) {
  if (($handle | 0) == 0) {
    return;
  }
  __gcry_pk_module_release(HEAP32[$handle + 12 >> 2]);
  __gcry_free($handle);
  return;
}
function __gcry_ac_key_init($key, $handle, $type, $data) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $data_new = __stackBase__;
  L3555 : do {
    if ((__gcry_fips_mode() | 0) == 0) {
      var $6 = __gcry_malloc(8);
      var $7 = $6;
      do {
        if (($6 | 0) == 0) {
          var $19 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          if (($19 | 0) == 0) {
            var $_0 = 0;
            break L3555;
          } else {
            var $err_02 = $19;
          }
        } else {
          var $10 = __gcry_ac_data_copy($data_new, $data);
          if (($10 | 0) != 0) {
            var $err_02 = $10;
            break;
          }
          HEAP32[$6 >> 2] = HEAP32[$data_new >> 2];
          HEAP32[$6 + 4 >> 2] = $type;
          HEAP32[$key >> 2] = $7;
          var $_0 = 0;
          break L3555;
        }
      } while (0);
      var $err_02;
      __gcry_free($6);
      var $_0 = $err_02;
    } else {
      var $_0 = _gpg_error337();
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_ac_key_pair_generate($handle, $nbits, $key_spec, $key_pair, $misc_data) {
  var $66$s2;
  var $65$s2;
  var $key_data_public$s2;
  var $key_data_secret$s2;
  var $genkey_sexp_reply$s2;
  var $genkey_sexp_request$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $1 = __stackBase__;
  var $genkey_sexp_request = __stackBase__ + 4, $genkey_sexp_request$s2 = $genkey_sexp_request >> 2;
  var $genkey_sexp_reply = __stackBase__ + 8, $genkey_sexp_reply$s2 = $genkey_sexp_reply >> 2;
  var $key_data_secret = __stackBase__ + 12, $key_data_secret$s2 = $key_data_secret >> 2;
  var $key_data_public = __stackBase__ + 16, $key_data_public$s2 = $key_data_public >> 2;
  HEAP32[$1 >> 2] = $nbits;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$key_data_secret$s2] = 0;
  HEAP32[$key_data_public$s2] = 0;
  HEAP32[$genkey_sexp_request$s2] = 0;
  HEAP32[$genkey_sexp_reply$s2] = 0;
  var $7 = __gcry_malloc(8);
  var $8 = $7;
  do {
    if (($7 | 0) == 0) {
      var $arg_list_0 = 0;
      var $key_secret_0 = 0;
      var $key_public_0 = 0;
      var $key_sexp_0 = 0;
      var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      var $genkey_format_0 = 0;
    } else {
      var $15 = __gcry_malloc(8);
      var $16 = $15;
      if (($15 | 0) == 0) {
        var $arg_list_0 = 0;
        var $key_secret_0 = $16;
        var $key_public_0 = 0;
        var $key_sexp_0 = 0;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $genkey_format_0 = 0;
        break;
      }
      var $23 = __gcry_malloc(8);
      var $24 = $23;
      if (($23 | 0) == 0) {
        var $arg_list_0 = 0;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = 0;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $genkey_format_0 = 0;
        break;
      }
      var $31 = ($key_spec | 0) != 0;
      if ($31) {
        var $33 = HEAP32[$handle >> 2];
        var $_genkey_format_n_0 = ($33 | 0) == (HEAP32[116140] | 0) ? 28 : 22;
        var $genkey_format_n_2 = ($33 | 0) == (HEAP32[116143] | 0) ? $_genkey_format_n_0 + 6 | 0 : $_genkey_format_n_0;
      } else {
        var $genkey_format_n_2 = 22;
      }
      var $genkey_format_n_2;
      var $40 = __gcry_malloc($genkey_format_n_2);
      if (($40 | 0) == 0) {
        var $arg_list_0 = 0;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = 0;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $genkey_format_0 = 0;
        break;
      }
      HEAP8[$40] = 0;
      _memcpy($40 + _strlen($40) | 0, 467188, 20);
      do {
        if ($31) {
          var $48 = $handle | 0;
          if ((HEAP32[$48 >> 2] | 0) == (HEAP32[116140] | 0)) {
            var $endptr2 = $40 + _strlen($40) | 0;
            HEAP8[$endptr2] = HEAP8[465080];
            HEAP8[$endptr2 + 1] = HEAP8[465081];
            HEAP8[$endptr2 + 2] = HEAP8[465082];
            HEAP8[$endptr2 + 3] = HEAP8[465083];
            HEAP8[$endptr2 + 4] = HEAP8[465084];
            HEAP8[$endptr2 + 5] = HEAP8[465085];
            HEAP8[$endptr2 + 6] = HEAP8[465086];
          }
          if ((HEAP32[$48 >> 2] | 0) == (HEAP32[116143] | 0)) {
            var $endptr2_1 = $40 + _strlen($40) | 0;
            HEAP8[$endptr2_1] = HEAP8[465080];
            HEAP8[$endptr2_1 + 1] = HEAP8[465081];
            HEAP8[$endptr2_1 + 2] = HEAP8[465082];
            HEAP8[$endptr2_1 + 3] = HEAP8[465083];
            HEAP8[$endptr2_1 + 4] = HEAP8[465084];
            HEAP8[$endptr2_1 + 5] = HEAP8[465085];
            HEAP8[$endptr2_1 + 6] = HEAP8[465086];
          }
          var $endptr4 = $40 + _strlen($40) | 0;
          HEAP8[$endptr4] = HEAP8[490368];
          HEAP8[$endptr4 + 1] = HEAP8[490369];
          HEAP8[$endptr4 + 2] = HEAP8[490370];
          if (!$31) {
            var $arg_list_n_2 = 8;
            break;
          }
          var $58 = HEAP32[$handle >> 2];
          var $_arg_list_n_0 = ($58 | 0) == (HEAP32[116140] | 0) ? 4 : 2;
          var $arg_list_n_2 = (($58 | 0) == (HEAP32[116143] | 0) ? $_arg_list_n_0 + 2 | 0 : $_arg_list_n_0) << 2;
        } else {
          var $endptr6 = $40 + _strlen($40) | 0;
          HEAP8[$endptr6] = HEAP8[490368];
          HEAP8[$endptr6 + 1] = HEAP8[490369];
          HEAP8[$endptr6 + 2] = HEAP8[490370];
          var $arg_list_n_2 = 8;
        }
      } while (0);
      var $arg_list_n_2;
      var $65 = __gcry_malloc($arg_list_n_2), $65$s2 = $65 >> 2;
      var $66 = $65, $66$s2 = $66 >> 2;
      if (($65 | 0) == 0) {
        var $arg_list_0 = $66;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = 0;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $genkey_format_0 = $40;
        break;
      }
      var $73 = $handle + 4 | 0;
      HEAP32[$66$s2] = $73;
      HEAP32[$65$s2 + 1] = $1;
      do {
        if ($31) {
          var $80 = HEAP32[$handle >> 2];
          if (($80 | 0) == (HEAP32[116140] | 0)) {
            HEAP32[$65$s2 + 2] = 464564;
            HEAP32[$65$s2 + 3] = $key_spec + HEAP32[116142] | 0;
            var $j_1 = 4;
          } else {
            var $j_1 = 2;
          }
          var $j_1;
          if (($80 | 0) != (HEAP32[116143] | 0)) {
            break;
          }
          HEAP32[($j_1 << 2 >> 2) + $66$s2] = 464576;
          HEAP32[(($j_1 | 1) << 2 >> 2) + $66$s2] = $key_spec + HEAP32[116145] | 0;
        }
      } while (0);
      var $93 = __gcry_sexp_build_array($genkey_sexp_request, 0, $40, $66);
      if (($93 | 0) != 0) {
        var $arg_list_0 = $66;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = 0;
        var $err_0 = $93;
        var $genkey_format_0 = $40;
        break;
      }
      var $97 = __gcry_pk_genkey($genkey_sexp_reply, HEAP32[$genkey_sexp_request$s2]);
      if (($97 | 0) != 0) {
        var $arg_list_0 = $66;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = 0;
        var $err_0 = $97;
        var $genkey_format_0 = $40;
        break;
      }
      var $101 = __gcry_sexp_find_token(HEAP32[$genkey_sexp_reply$s2], 489392, 0);
      if (($101 | 0) == 0) {
        var $arg_list_0 = $66;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = 0;
        var $err_0 = _gcry_error346(63);
        var $genkey_format_0 = $40;
        break;
      }
      var $107 = _ac_data_extract(489392, HEAP32[$73 >> 2], $101, $key_data_secret);
      if (($107 | 0) != 0) {
        var $arg_list_0 = $66;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = $101;
        var $err_0 = $107;
        var $genkey_format_0 = $40;
        break;
      }
      __gcry_sexp_release($101);
      var $111 = __gcry_sexp_find_token(HEAP32[$genkey_sexp_reply$s2], 487740, 0);
      if (($111 | 0) == 0) {
        var $arg_list_0 = $66;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = 0;
        var $err_0 = _gcry_error346(63);
        var $genkey_format_0 = $40;
        break;
      }
      var $117 = _ac_data_extract(487740, HEAP32[$73 >> 2], $111, $key_data_public);
      if (($117 | 0) != 0) {
        var $arg_list_0 = $66;
        var $key_secret_0 = $16;
        var $key_public_0 = $24;
        var $key_sexp_0 = $111;
        var $err_0 = $117;
        var $genkey_format_0 = $40;
        break;
      }
      HEAP32[$15 + 4 >> 2] = 0;
      HEAP32[$15 >> 2] = HEAP32[$key_data_secret$s2];
      HEAP32[$23 + 4 >> 2] = 1;
      HEAP32[$23 >> 2] = HEAP32[$key_data_public$s2];
      HEAP32[$7 + 4 >> 2] = $16;
      HEAP32[$7 >> 2] = $24;
      HEAP32[$key_pair >> 2] = $8;
      var $arg_list_0 = $66;
      var $key_secret_0 = $16;
      var $key_public_0 = $24;
      var $key_sexp_0 = $111;
      var $err_0 = 0;
      var $genkey_format_0 = $40;
    }
  } while (0);
  var $genkey_format_0;
  var $err_0;
  var $key_sexp_0;
  var $key_public_0;
  var $key_secret_0;
  var $arg_list_0;
  __gcry_free($genkey_format_0);
  __gcry_free($arg_list_0);
  __gcry_sexp_release(HEAP32[$genkey_sexp_request$s2]);
  __gcry_sexp_release(HEAP32[$genkey_sexp_reply$s2]);
  __gcry_sexp_release($key_sexp_0);
  if (($err_0 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ac_data_destroy(HEAP32[$key_data_secret$s2]);
  __gcry_ac_data_destroy(HEAP32[$key_data_public$s2]);
  __gcry_free($key_secret_0);
  __gcry_free($key_public_0);
  __gcry_free($7);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_key_pair_generate["X"] = 1;
function _ac_data_extract($identifier, $algorithm, $sexp, $data) {
  var $data_new$s2;
  var $data_raw_n$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $data_raw_n = __stackBase__, $data_raw_n$s2 = $data_raw_n >> 2;
  var $data_new = __stackBase__ + 4, $data_new$s2 = $data_new >> 2;
  HEAP32[$data_new$s2] = 0;
  var $1 = __gcry_sexp_nth_data($sexp, 0, $data_raw_n);
  L3621 : do {
    if (($1 | 0) == 0) {
      label = 3003;
    } else {
      if ((_strncmp($identifier, $1, HEAP32[$data_raw_n$s2]) | 0) != 0) {
        label = 3003;
        break;
      }
      var $10 = __gcry_sexp_find_token($sexp, $algorithm, 0);
      if (($10 | 0) == 0) {
        var $err_2 = _gcry_error346(83);
        label = 3021;
        break;
      }
      var $16 = __gcry_sexp_length($10) - 1 | 0;
      var $17 = __gcry_ac_data_new($data_new);
      if (($17 | 0) != 0) {
        var $data_sexp_02 = $10;
        var $value_sexp_24 = 0;
        var $err_25 = $17;
        var $value_mpi_27 = 0;
        var $value_name_28 = 0;
        break;
      }
      var $19 = HEAP32[$data_new$s2];
      var $i_0 = 0;
      while (1) {
        var $i_0;
        if ($i_0 >>> 0 >= $16 >>> 0) {
          break;
        }
        var $23 = $i_0 + 1 | 0;
        var $24 = __gcry_sexp_nth($10, $23);
        if (($24 | 0) == 0) {
          label = 3010;
          break;
        }
        var $29 = __gcry_sexp_nth_data($24, 0, $data_raw_n);
        if (($29 | 0) == 0) {
          label = 3012;
          break;
        }
        var $34 = __gcry_sexp_nth_mpi($24, 1, 5);
        if (($34 | 0) == 0) {
          label = 3014;
          break;
        }
        var $41 = __gcry_malloc(HEAP32[$data_raw_n$s2] + 1 | 0);
        if (($41 | 0) == 0) {
          label = 3016;
          break;
        }
        _strncpy($41, $29, HEAP32[$data_raw_n$s2]);
        HEAP8[$41 + HEAP32[$data_raw_n$s2] | 0] = 0;
        var $52 = __gcry_ac_data_set($19, 1, $41, $34);
        if (($52 | 0) != 0) {
          var $data_sexp_02 = $10;
          var $value_sexp_24 = $24;
          var $err_25 = $52;
          var $value_mpi_27 = $34;
          var $value_name_28 = $41;
          break L3621;
        }
        __gcry_sexp_release($24);
        var $i_0 = $23;
      }
      do {
        if (label == 3010) {
          var $value_mpi_1 = 0;
          var $err_1 = _gcry_error346(83);
          var $value_sexp_1 = 0;
          label = 3019;
          break;
        } else if (label == 3012) {
          var $value_mpi_1 = 0;
          var $err_1 = _gcry_error346(83);
          var $value_sexp_1 = $24;
          label = 3019;
          break;
        } else if (label == 3014) {
          var $value_mpi_1 = 0;
          var $err_1 = _gcry_error346(63);
          var $value_sexp_1 = $24;
          label = 3019;
          break;
        } else if (label == 3016) {
          var $value_mpi_1 = $34;
          var $err_1 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
          var $value_sexp_1 = $24;
          label = 3019;
          break;
        }
      } while (0);
      if (label == 3019) {
        var $value_sexp_1;
        var $err_1;
        var $value_mpi_1;
        if (($err_1 | 0) != 0) {
          var $data_sexp_02 = $10;
          var $value_sexp_24 = $value_sexp_1;
          var $err_25 = $err_1;
          var $value_mpi_27 = $value_mpi_1;
          var $value_name_28 = 0;
          break;
        }
      }
      HEAP32[$data >> 2] = HEAP32[$data_new$s2];
      var $data_sexp_03 = $10;
      var $err_26 = 0;
      var $err_26;
      var $data_sexp_03;
      __gcry_sexp_release($data_sexp_03);
      STACKTOP = __stackBase__;
      return $err_26;
    }
  } while (0);
  do {
    if (label == 3003) {
      var $err_2 = _gcry_error346(83);
      label = 3021;
      break;
    }
  } while (0);
  do {
    if (label == 3021) {
      var $err_2;
      if (($err_2 | 0) == 0) {
        var $data_sexp_03 = 0;
        var $err_26 = 0;
      } else {
        var $data_sexp_02 = 0;
        var $value_sexp_24 = 0;
        var $err_25 = $err_2;
        var $value_mpi_27 = 0;
        var $value_name_28 = 0;
        break;
      }
      var $err_26;
      var $data_sexp_03;
      __gcry_sexp_release($data_sexp_03);
      STACKTOP = __stackBase__;
      return $err_26;
    }
  } while (0);
  var $value_name_28;
  var $value_mpi_27;
  var $err_25;
  var $value_sexp_24;
  var $data_sexp_02;
  __gcry_ac_data_destroy(HEAP32[$data_new$s2]);
  __gcry_mpi_release($value_mpi_27);
  __gcry_free($value_name_28);
  __gcry_sexp_release($value_sexp_24);
  var $data_sexp_03 = $data_sexp_02;
  var $err_26 = $err_25;
  var $err_26;
  var $data_sexp_03;
  __gcry_sexp_release($data_sexp_03);
  STACKTOP = __stackBase__;
  return $err_26;
}
_ac_data_extract["X"] = 1;
function __gcry_ac_key_pair_extract($key_pair, $which) {
  do {
    if ((__gcry_fips_mode() | 0) == 0) {
      if (($which | 0) == 1) {
        var $_0 = HEAP32[$key_pair >> 2];
        break;
      } else if (($which | 0) == 0) {
        var $_0 = HEAP32[$key_pair + 4 >> 2];
        break;
      } else {
        var $_0 = 0;
        break;
      }
    } else {
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  return $_0;
}
function __gcry_ac_key_destroy($key) {
  var $3$s2;
  if (($key | 0) == 0) {
    return;
  }
  var $3$s2 = ($key | 0) >> 2;
  if ((HEAP32[$3$s2] | 0) != 0) {
    var $6 = HEAP32[$3$s2];
    var $11 = HEAP32[$6 >> 2];
    L3665 : do {
      if ((HEAP32[$6 + 4 >> 2] | 0) == 0) {
        var $_lcssa = $11;
      } else {
        var $i_01 = 0;
        var $12 = $11;
        while (1) {
          var $12;
          var $i_01;
          var $14 = HEAP32[($12 + 4 >> 2) + ($i_01 * 3 | 0)];
          if (($14 | 0) != 0) {
            __gcry_mpi_release($14);
          }
          var $22 = HEAP32[(HEAP32[HEAP32[$3$s2] >> 2] >> 2) + ($i_01 * 3 | 0)];
          if (($22 | 0) != 0) {
            __gcry_free($22);
          }
          var $26 = $i_01 + 1 | 0;
          var $27 = HEAP32[$3$s2];
          var $32 = HEAP32[$27 >> 2];
          if ($26 >>> 0 < HEAP32[$27 + 4 >> 2] >>> 0) {
            var $i_01 = $26;
            var $12 = $32;
          } else {
            var $_lcssa = $32;
            break L3665;
          }
        }
      }
    } while (0);
    var $_lcssa;
    __gcry_free($_lcssa);
    __gcry_free(HEAP32[$3$s2]);
  }
  __gcry_free($key);
  return;
}
function __gcry_ac_io_init_va($ac_io, $mode, $type, $ap) {
  var $1$s2;
  var $ac_io$s2 = $ac_io >> 2;
  var $1$s2 = $ac_io >> 2;
  HEAP32[$1$s2] = 0;
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = 0;
  HEAP32[$1$s2 + 3] = 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  if ($mode >>> 0 >= 2) {
    __gcry_assert_failed(471692, 470300, 888, 495532);
  }
  if (($type | 0) != 0) {
    __gcry_assert_failed(468788, 470300, 889, 495532);
  }
  HEAP32[$ac_io$s2] = $mode;
  HEAP32[$ac_io$s2 + 1] = $type;
  if (($mode | 0) == 0) {
    HEAP32[$ac_io$s2 + 2] = HEAP32[$ap >> 2];
    HEAP32[$ac_io$s2 + 3] = HEAP32[$ap + 4 >> 2];
    return;
  } else if (($mode | 0) == 1) {
    HEAP32[$ac_io$s2 + 2] = HEAP32[$ap >> 2];
    HEAP32[$ac_io$s2 + 3] = HEAP32[$ap + 4 >> 2];
    return;
  } else {
    return;
  }
}
function __gcry_ac_key_pair_destroy($key_pair) {
  if (($key_pair | 0) == 0) {
    return;
  }
  __gcry_ac_key_destroy(HEAP32[$key_pair + 4 >> 2]);
  __gcry_ac_key_destroy(HEAP32[$key_pair >> 2]);
  __gcry_free($key_pair);
  return;
}
function __gcry_ac_key_data_get($key) {
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = HEAP32[$key >> 2];
  var $_0;
  return $_0;
}
function __gcry_ac_key_test($handle, $key) {
  var $key_sexp$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $key_sexp = __stackBase__, $key_sexp$s2 = $key_sexp >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$key_sexp$s2] = 0;
  var $14 = _ac_data_construct(HEAP32[(HEAP32[$key + 4 >> 2] << 2) + 464552 >> 2], 0, 0, HEAP32[$handle + 4 >> 2], HEAP32[$key >> 2], $key_sexp);
  if (($14 | 0) == 0) {
    var $err_0 = __gcry_pk_testkey(HEAP32[$key_sexp$s2]);
  } else {
    var $err_0 = $14;
  }
  var $err_0;
  __gcry_sexp_release(HEAP32[$key_sexp$s2]);
  var $_0 = _gcry_error346($err_0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _ac_data_construct($identifier, $include_flags, $flags, $algorithm, $data, $sexp) {
  var $sexp_new$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $sexp_new = __stackBase__, $sexp_new$s2 = $sexp_new >> 2;
  HEAP32[$sexp_new$s2] = 0;
  var $1 = __gcry_ac_data_length($data);
  var $3 = __gcry_malloc($1 << 3);
  var $4 = $3;
  do {
    if (($3 | 0) == 0) {
      var $sexp_format_0 = 0;
      var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    } else {
      L3716 : do {
        if (($1 | 0) != 0) {
          var $8 = HEAP32[$data >> 2];
          var $i_026 = 0;
          while (1) {
            var $i_026;
            var $16 = $i_026 << 1;
            HEAP32[$4 + ($16 << 2) >> 2] = $8 + $i_026 * 12 | 0;
            HEAP32[$4 + (($16 | 1) << 2) >> 2] = $8 + $i_026 * 12 + 4 | 0;
            var $22 = $i_026 + 1 | 0;
            if (($22 | 0) == ($1 | 0)) {
              break L3716;
            } else {
              var $i_026 = $22;
            }
          }
        }
      } while (0);
      var $23 = ($include_flags | 0) != 0;
      var $24 = $23 ? 10 : 3;
      var $25 = ($algorithm | 0) != 0;
      if ($25) {
        var $30 = _strlen($algorithm) + 2 | 0;
      } else {
        var $30 = 0;
      }
      var $30;
      var $31 = _strlen($identifier);
      if (($1 | 0) == 0) {
        var $sexp_format_n_0_lcssa = $30 + $24 + $31 | 0;
      } else {
        var $sexp_format_n_0_lcssa = $24 + $31 + $30 + ($1 * 6 & -1) | 0;
      }
      var $sexp_format_n_0_lcssa;
      do {
        if ($23) {
          if (($flags & 4 | 0) == 0) {
            var $sexp_format_n_3 = $sexp_format_n_0_lcssa;
            break;
          }
          var $sexp_format_n_3 = $sexp_format_n_0_lcssa + _strlen(480928) + 1 | 0;
        } else {
          var $sexp_format_n_3 = $sexp_format_n_0_lcssa;
        }
      } while (0);
      var $sexp_format_n_3;
      var $46 = __gcry_malloc($sexp_format_n_3);
      if (($46 | 0) == 0) {
        var $sexp_format_0 = 0;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        break;
      }
      HEAP8[$46] = 0;
      var $53 = $46 + _strlen($46) | 0;
      tempBigInt = 40;
      HEAP8[$53] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$53 + 1] = tempBigInt & 255;
      _strcat($46, $identifier);
      if ($23) {
        var $endptr2 = $46 + _strlen($46) | 0;
        HEAP8[$endptr2] = HEAP8[482088];
        HEAP8[$endptr2 + 1] = HEAP8[482089];
        HEAP8[$endptr2 + 2] = HEAP8[482090];
        HEAP8[$endptr2 + 3] = HEAP8[482091];
        HEAP8[$endptr2 + 4] = HEAP8[482092];
        HEAP8[$endptr2 + 5] = HEAP8[482093];
        HEAP8[$endptr2 + 6] = HEAP8[482094];
        if (($flags & 4 | 0) != 0) {
          var $59 = $46 + _strlen($46) | 0;
          tempBigInt = 32;
          HEAP8[$59] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$59 + 1] = tempBigInt & 255;
          _strcat($46, 480928);
        }
        var $62 = $46 + _strlen($46) | 0;
        tempBigInt = 41;
        HEAP8[$62] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[$62 + 1] = tempBigInt & 255;
      }
      if ($25) {
        var $65 = $46 + _strlen($46) | 0;
        tempBigInt = 40;
        HEAP8[$65] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[$65 + 1] = tempBigInt & 255;
        _strcat($46, $algorithm);
      }
      L3743 : do {
        if (($1 | 0) != 0) {
          var $i_415 = 0;
          while (1) {
            var $i_415;
            var $endptr10 = $46 + _strlen($46) | 0;
            HEAP8[$endptr10] = HEAP8[465080];
            HEAP8[$endptr10 + 1] = HEAP8[465081];
            HEAP8[$endptr10 + 2] = HEAP8[465082];
            HEAP8[$endptr10 + 3] = HEAP8[465083];
            HEAP8[$endptr10 + 4] = HEAP8[465084];
            HEAP8[$endptr10 + 5] = HEAP8[465085];
            HEAP8[$endptr10 + 6] = HEAP8[465086];
            var $68 = $i_415 + 1 | 0;
            if (($68 | 0) == ($1 | 0)) {
              break L3743;
            } else {
              var $i_415 = $68;
            }
          }
        }
      } while (0);
      if ($25) {
        var $70 = $46 + _strlen($46) | 0;
        tempBigInt = 41;
        HEAP8[$70] = tempBigInt & 255;
        tempBigInt = tempBigInt >> 8;
        HEAP8[$70 + 1] = tempBigInt & 255;
      }
      var $72 = $46 + _strlen($46) | 0;
      tempBigInt = 41;
      HEAP8[$72] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$72 + 1] = tempBigInt & 255;
      var $73 = __gcry_sexp_build_array($sexp_new, 0, $46, $4);
      if (($73 | 0) != 0) {
        var $sexp_format_0 = $46;
        var $err_0 = $73;
        break;
      }
      HEAP32[$sexp >> 2] = HEAP32[$sexp_new$s2];
      var $sexp_format_0 = $46;
      var $err_0 = 0;
    }
  } while (0);
  var $err_0;
  var $sexp_format_0;
  __gcry_free($sexp_format_0);
  __gcry_free($3);
  if (($err_0 | 0) == 0) {
    STACKTOP = __stackBase__;
    return $err_0;
  }
  __gcry_sexp_release(HEAP32[$sexp_new$s2]);
  STACKTOP = __stackBase__;
  return $err_0;
}
_ac_data_construct["X"] = 1;
function __gcry_ac_key_get_nbits($handle, $key, $nbits) {
  var $key_sexp$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $key_sexp = __stackBase__, $key_sexp$s2 = $key_sexp >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$key_sexp$s2] = 0;
  var $14 = _ac_data_construct(HEAP32[(HEAP32[$key + 4 >> 2] << 2) + 464552 >> 2], 0, 0, HEAP32[$handle + 4 >> 2], HEAP32[$key >> 2], $key_sexp);
  do {
    if (($14 | 0) == 0) {
      var $18 = __gcry_pk_get_nbits(HEAP32[$key_sexp$s2]);
      if (($18 | 0) == 0) {
        var $err_0 = _gcry_error346(4);
        break;
      } else {
        HEAP32[$nbits >> 2] = $18;
        var $err_0 = $14;
        break;
      }
    } else {
      var $err_0 = $14;
    }
  } while (0);
  var $err_0;
  __gcry_sexp_release(HEAP32[$key_sexp$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_ac_key_get_grip($handle, $key, $key_grip) {
  var $key_sexp$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $key_sexp = __stackBase__, $key_sexp$s2 = $key_sexp >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$key_sexp$s2] = 0;
  var $14 = _ac_data_construct(HEAP32[(HEAP32[$key + 4 >> 2] << 2) + 464552 >> 2], 0, 0, HEAP32[$handle + 4 >> 2], HEAP32[$key >> 2], $key_sexp);
  do {
    if (($14 | 0) == 0) {
      if ((__gcry_pk_get_keygrip(HEAP32[$key_sexp$s2], $key_grip) | 0) != 0) {
        var $err_0 = 0;
        break;
      }
      var $err_0 = _gcry_error346(65);
    } else {
      var $err_0 = $14;
    }
  } while (0);
  var $err_0;
  __gcry_sexp_release(HEAP32[$key_sexp$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_ac_data_encrypt($handle, $flags, $key, $data_plain, $data_encrypted) {
  var $14$s2;
  var $sexp_key$s2;
  var $sexp_reply$s2;
  var $sexp_request$s2;
  var $data_value$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $data_encrypted_new = __stackBase__;
  var $data_value = __stackBase__ + 4, $data_value$s2 = $data_value >> 2;
  var $sexp_request = __stackBase__ + 8, $sexp_request$s2 = $sexp_request >> 2;
  var $sexp_reply = __stackBase__ + 12, $sexp_reply$s2 = $sexp_reply >> 2;
  var $sexp_key = __stackBase__ + 16, $sexp_key$s2 = $sexp_key >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$data_encrypted_new >> 2] = 0;
  HEAP32[$sexp_request$s2] = 0;
  HEAP32[$sexp_reply$s2] = 0;
  HEAP32[$data_value$s2] = 0;
  HEAP32[$sexp_key$s2] = 0;
  var $7 = HEAP32[$key + 4 >> 2];
  do {
    if (($7 | 0) == 1) {
      var $14$s2 = ($handle + 4 | 0) >> 2;
      var $18 = _ac_data_construct(HEAP32[($7 << 2) + 464552 >> 2], 0, 0, HEAP32[$14$s2], HEAP32[$key >> 2], $sexp_key);
      if (($18 | 0) != 0) {
        var $err_0 = $18;
        break;
      }
      var $21 = __gcry_ac_data_new($data_value);
      if (($21 | 0) != 0) {
        var $err_0 = $21;
        break;
      }
      var $25 = __gcry_ac_data_set(HEAP32[$data_value$s2], 0, 487052, $data_plain);
      if (($25 | 0) != 0) {
        var $err_0 = $25;
        break;
      }
      var $30 = _ac_data_construct(486116, 1, $flags, HEAP32[$14$s2], HEAP32[$data_value$s2], $sexp_request);
      if (($30 | 0) != 0) {
        var $err_0 = $30;
        break;
      }
      var $35 = __gcry_pk_encrypt($sexp_reply, HEAP32[$sexp_request$s2], HEAP32[$sexp_key$s2]);
      if (($35 | 0) != 0) {
        var $err_0 = $35;
        break;
      }
      var $40 = _ac_data_extract(485268, HEAP32[$14$s2], HEAP32[$sexp_reply$s2], $data_encrypted_new);
      if (($40 | 0) != 0) {
        var $err_0 = $40;
        break;
      }
      HEAP32[$data_encrypted >> 2] = HEAP32[$data_encrypted_new >> 2];
      var $err_0 = 0;
    } else {
      var $err_0 = _gcry_error346(125);
    }
  } while (0);
  var $err_0;
  __gcry_sexp_release(HEAP32[$sexp_request$s2]);
  __gcry_sexp_release(HEAP32[$sexp_reply$s2]);
  __gcry_sexp_release(HEAP32[$sexp_key$s2]);
  __gcry_ac_data_destroy(HEAP32[$data_value$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_encrypt["X"] = 1;
function __gcry_ac_data_decrypt($handle, $flags, $key, $data_plain, $data_encrypted) {
  var $sexp_key$s2;
  var $sexp_reply$s2;
  var $sexp_request$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $sexp_request = __stackBase__, $sexp_request$s2 = $sexp_request >> 2;
  var $sexp_reply = __stackBase__ + 4, $sexp_reply$s2 = $sexp_reply >> 2;
  var $sexp_key = __stackBase__ + 8, $sexp_key$s2 = $sexp_key >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$sexp_request$s2] = 0;
  HEAP32[$sexp_reply$s2] = 0;
  HEAP32[$sexp_key$s2] = 0;
  var $7 = HEAP32[$key + 4 >> 2];
  do {
    if (($7 | 0) == 0) {
      var $14 = $handle + 4 | 0;
      var $18 = _ac_data_construct(HEAP32[($7 << 2) + 464552 >> 2], 0, 0, HEAP32[$14 >> 2], HEAP32[$key >> 2], $sexp_key);
      if (($18 | 0) != 0) {
        var $err_0 = $18;
        var $sexp_value_0 = 0;
        break;
      }
      var $22 = _ac_data_construct(485268, 1, $flags, HEAP32[$14 >> 2], $data_encrypted, $sexp_request);
      if (($22 | 0) != 0) {
        var $err_0 = $22;
        var $sexp_value_0 = 0;
        break;
      }
      var $27 = __gcry_pk_decrypt($sexp_reply, HEAP32[$sexp_request$s2], HEAP32[$sexp_key$s2]);
      if (($27 | 0) != 0) {
        var $err_0 = $27;
        var $sexp_value_0 = 0;
        break;
      }
      var $31 = __gcry_sexp_find_token(HEAP32[$sexp_reply$s2], 487052, 0);
      if (($31 | 0) == 0) {
        var $err_0 = _gcry_error346(1);
        var $sexp_value_0 = 0;
        break;
      }
      var $36 = __gcry_sexp_nth_mpi($31, 1, 5);
      if (($36 | 0) == 0) {
        var $err_0 = _gcry_error346(1);
        var $sexp_value_0 = $31;
        break;
      } else {
        HEAP32[$data_plain >> 2] = $36;
        var $err_0 = $27;
        var $sexp_value_0 = $31;
        break;
      }
    } else {
      var $err_0 = _gcry_error346(125);
      var $sexp_value_0 = 0;
    }
  } while (0);
  var $sexp_value_0;
  var $err_0;
  __gcry_sexp_release(HEAP32[$sexp_request$s2]);
  __gcry_sexp_release(HEAP32[$sexp_reply$s2]);
  __gcry_sexp_release($sexp_value_0);
  __gcry_sexp_release(HEAP32[$sexp_key$s2]);
  var $_0 = _gcry_error346($err_0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_decrypt["X"] = 1;
function __gcry_ac_data_sign($handle, $key, $data, $data_signature) {
  var $sexp_key$s2;
  var $sexp_reply$s2;
  var $sexp_request$s2;
  var $data_value$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $data_signed = __stackBase__;
  var $data_value = __stackBase__ + 4, $data_value$s2 = $data_value >> 2;
  var $sexp_request = __stackBase__ + 8, $sexp_request$s2 = $sexp_request >> 2;
  var $sexp_reply = __stackBase__ + 12, $sexp_reply$s2 = $sexp_reply >> 2;
  var $sexp_key = __stackBase__ + 16, $sexp_key$s2 = $sexp_key >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$data_signed >> 2] = 0;
  HEAP32[$data_value$s2] = 0;
  HEAP32[$sexp_request$s2] = 0;
  HEAP32[$sexp_reply$s2] = 0;
  HEAP32[$sexp_key$s2] = 0;
  var $7 = HEAP32[$key + 4 >> 2];
  do {
    if (($7 | 0) == 0) {
      var $14 = $handle + 4 | 0;
      var $18 = _ac_data_construct(HEAP32[($7 << 2) + 464552 >> 2], 0, 0, HEAP32[$14 >> 2], HEAP32[$key >> 2], $sexp_key);
      if (($18 | 0) != 0) {
        var $err_0 = $18;
        break;
      }
      var $21 = __gcry_ac_data_new($data_value);
      if (($21 | 0) != 0) {
        var $err_0 = $21;
        break;
      }
      var $25 = __gcry_ac_data_set(HEAP32[$data_value$s2], 0, 487052, $data);
      if (($25 | 0) != 0) {
        var $err_0 = $25;
        break;
      }
      var $29 = _ac_data_construct(486116, 1, 0, 0, HEAP32[$data_value$s2], $sexp_request);
      if (($29 | 0) != 0) {
        var $err_0 = $29;
        break;
      }
      var $34 = __gcry_pk_sign($sexp_reply, HEAP32[$sexp_request$s2], HEAP32[$sexp_key$s2]);
      if (($34 | 0) != 0) {
        var $err_0 = $34;
        break;
      }
      var $39 = _ac_data_extract(484376, HEAP32[$14 >> 2], HEAP32[$sexp_reply$s2], $data_signed);
      if (($39 | 0) != 0) {
        var $err_0 = $39;
        break;
      }
      HEAP32[$data_signature >> 2] = HEAP32[$data_signed >> 2];
      var $err_0 = 0;
    } else {
      var $err_0 = _gcry_error346(125);
    }
  } while (0);
  var $err_0;
  __gcry_sexp_release(HEAP32[$sexp_request$s2]);
  __gcry_sexp_release(HEAP32[$sexp_reply$s2]);
  __gcry_sexp_release(HEAP32[$sexp_key$s2]);
  __gcry_ac_data_destroy(HEAP32[$data_value$s2]);
  var $_0 = _gcry_error346($err_0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_sign["X"] = 1;
function __gcry_ac_data_verify($handle, $key, $data, $data_signature) {
  var $sexp_key$s2;
  var $sexp_data$s2;
  var $data_value$s2;
  var $sexp_signature$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $sexp_signature = __stackBase__, $sexp_signature$s2 = $sexp_signature >> 2;
  var $data_value = __stackBase__ + 4, $data_value$s2 = $data_value >> 2;
  var $sexp_data = __stackBase__ + 8, $sexp_data$s2 = $sexp_data >> 2;
  var $sexp_key = __stackBase__ + 12, $sexp_key$s2 = $sexp_key >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$sexp_signature$s2] = 0;
  HEAP32[$data_value$s2] = 0;
  HEAP32[$sexp_data$s2] = 0;
  HEAP32[$sexp_key$s2] = 0;
  var $6 = $handle + 4 | 0;
  var $10 = _ac_data_construct(487740, 0, 0, HEAP32[$6 >> 2], HEAP32[$key >> 2], $sexp_key);
  do {
    if (($10 | 0) == 0) {
      if ((HEAP32[$key + 4 >> 2] | 0) != 1) {
        var $err_0 = _gcry_error346(125);
        break;
      }
      var $20 = _ac_data_construct(484376, 1, 0, HEAP32[$6 >> 2], $data_signature, $sexp_signature);
      if (($20 | 0) != 0) {
        var $err_0 = $20;
        break;
      }
      var $23 = __gcry_ac_data_new($data_value);
      if (($23 | 0) != 0) {
        var $err_0 = $23;
        break;
      }
      var $27 = __gcry_ac_data_set(HEAP32[$data_value$s2], 0, 487052, $data);
      if (($27 | 0) != 0) {
        var $err_0 = $27;
        break;
      }
      var $31 = _ac_data_construct(486116, 1, 0, 0, HEAP32[$data_value$s2], $sexp_data);
      if (($31 | 0) != 0) {
        var $err_0 = $31;
        break;
      }
      var $err_0 = __gcry_pk_verify(HEAP32[$sexp_signature$s2], HEAP32[$sexp_data$s2], HEAP32[$sexp_key$s2]);
    } else {
      var $err_0 = $10;
    }
  } while (0);
  var $err_0;
  __gcry_sexp_release(HEAP32[$sexp_signature$s2]);
  __gcry_sexp_release(HEAP32[$sexp_data$s2]);
  __gcry_sexp_release(HEAP32[$sexp_key$s2]);
  __gcry_ac_data_destroy(HEAP32[$data_value$s2]);
  var $_0 = _gcry_error346($err_0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_verify["X"] = 1;
function __gcry_ac_data_encode($method, $flags, $options, $ac_io_read, $ac_io_write) {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $_0 = _ac_data_dencode($method, 0, $flags, $options, $ac_io_read, $ac_io_write);
    var $_0;
    return $_0;
  } else {
    var $_0 = _gpg_error337();
    var $_0;
    return $_0;
  }
}
function _ac_data_dencode($method, $action, $flags, $options, $ac_io_read, $ac_io_write) {
  var $i_0 = 0;
  while (1) {
    var $i_0;
    var $2 = $i_0 >>> 0 < 2;
    if (!$2) {
      break;
    }
    if ((HEAP32[($i_0 * 3 | 0) + 116148] | 0) == ($method | 0)) {
      break;
    } else {
      var $i_0 = $i_0 + 1 | 0;
    }
  }
  do {
    if (($i_0 | 0) == 2) {
      var $err_0 = _gcry_error346(27);
    } else {
      if (($action | 0) == 0) {
        if (!$2) {
          var $err_0 = 0;
          break;
        }
        var $err_0 = FUNCTION_TABLE[HEAP32[($i_0 * 3 | 0) + 116149]]($flags, $options, $ac_io_read, $ac_io_write);
        break;
      } else if (($action | 0) == 1) {
        if (($i_0 | 0) != 0) {
          var $err_0 = 0;
          break;
        }
        var $err_0 = FUNCTION_TABLE[HEAP32[($i_0 * 3 | 0) + 116150]]($flags, $options, $ac_io_read, $ac_io_write);
        break;
      } else {
        var $err_0 = _gcry_error346(45);
        break;
      }
    }
  } while (0);
  var $err_0;
  return $err_0;
}
function __gcry_ac_data_decode($method, $flags, $options, $ac_io_read, $ac_io_write) {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $_0 = _ac_data_dencode($method, 1, $flags, $options, $ac_io_read, $ac_io_write);
    var $_0;
    return $_0;
  } else {
    var $_0 = _gpg_error337();
    var $_0;
    return $_0;
  }
}
function __gcry_ac_mpi_to_os($mpi, $os, $os_n) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $digit = __stackBase__;
  if ((__gcry_fips_mode() | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $4 = __gcry_mpi_new(0);
  __gcry_mpi_set_ui($4, 256);
  var $6 = __gcry_mpi_copy($mpi);
  L3876 : do {
    if ((__gcry_mpi_cmp_ui($6, 0) | 0) == 0) {
      var $n_0_lcssa = 0;
    } else {
      var $n_05 = 0;
      while (1) {
        var $n_05;
        var $9 = $n_05 + 1 | 0;
        __gcry_mpi_div($6, 0, $6, $4, 0);
        if ((__gcry_mpi_cmp_ui($6, 0) | 0) == 0) {
          var $n_0_lcssa = $9;
          break L3876;
        } else {
          var $n_05 = $9;
        }
      }
    }
  } while (0);
  var $n_0_lcssa;
  __gcry_mpi_set($6, $mpi);
  var $13 = __gcry_mpi_new(0);
  L3880 : do {
    if (($n_0_lcssa | 0) != 0 & ($os_n | 0) != 0) {
      var $16 = $os_n - 1 | 0;
      var $17 = -$n_0_lcssa | 0;
      var $18 = -$os_n | 0;
      var $20 = -($17 >>> 0 > $18 >>> 0 ? $17 : $18) | 0;
      var $i_03 = 0;
      while (1) {
        var $i_03;
        __gcry_mpi_mod($13, $6, $4);
        __gcry_mpi_get_ui($13, $digit);
        __gcry_mpi_div($6, 0, $6, $4, 0);
        HEAP8[$os + ($16 - $i_03) | 0] = HEAP32[$digit >> 2] & 255;
        var $29 = $i_03 + 1 | 0;
        if (($29 | 0) == ($20 | 0)) {
          var $i_0_lcssa = $20;
          break L3880;
        } else {
          var $i_03 = $29;
        }
      }
    } else {
      var $i_0_lcssa = 0;
    }
  } while (0);
  var $i_0_lcssa;
  L3885 : do {
    if ($i_0_lcssa >>> 0 < $os_n >>> 0) {
      var $22 = $os_n - 1 | 0;
      var $i_11 = $i_0_lcssa;
      while (1) {
        var $i_11;
        HEAP8[$os + ($22 - $i_11) | 0] = 0;
        var $32 = $i_11 + 1 | 0;
        if (($32 | 0) == ($os_n | 0)) {
          break L3885;
        } else {
          var $i_11 = $32;
        }
      }
    }
  } while (0);
  __gcry_mpi_release($4);
  __gcry_mpi_release($13);
  __gcry_mpi_release($6);
  STACKTOP = __stackBase__;
  return;
}
__gcry_ac_mpi_to_os["X"] = 1;
function __gcry_ac_mpi_to_os_alloc($mpi, $os, $os_n) {
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    return $_0;
  }
  var $8 = (__gcry_mpi_get_nbits($mpi) + 7 | 0) >>> 3;
  var $9 = __gcry_malloc($8);
  if (($9 | 0) == 0) {
    var $_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    __gcry_ac_mpi_to_os($mpi, $9, $8);
    HEAP32[$os >> 2] = $9;
    HEAP32[$os_n >> 2] = $8;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function __gcry_ac_os_to_mpi($mpi, $os, $os_n) {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  var $4 = __gcry_mpi_new(0);
  __gcry_mpi_set_ui($4, 1);
  var $6 = __gcry_mpi_new(0);
  __gcry_mpi_set_ui($6, 0);
  var $8 = __gcry_mpi_new(0);
  L3905 : do {
    if (($os_n | 0) != 0) {
      var $10 = $os_n - 1 | 0;
      var $i_01 = 0;
      while (1) {
        var $i_01;
        __gcry_mpi_mul_ui($8, $4, HEAPU8[$os + ($10 - $i_01) | 0]);
        __gcry_mpi_add($6, $6, $8);
        __gcry_mpi_mul_ui($4, $4, 256);
        var $16 = $i_01 + 1 | 0;
        if (($16 | 0) == ($os_n | 0)) {
          break L3905;
        } else {
          var $i_01 = $16;
        }
      }
    }
  } while (0);
  __gcry_mpi_release($8);
  __gcry_mpi_release($4);
  __gcry_mpi_set($mpi, $6);
  __gcry_mpi_release($6);
  return;
}
function _ac_scheme_get($scheme) {
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if ($i_0 >>> 0 >= 2) {
      break;
    }
    if ((HEAP32[($i_0 << 4) + 464520 >> 2] | 0) == ($scheme | 0)) {
      break;
    } else {
      var $i_0 = $i_0 + 1 | 0;
    }
  }
  if (($i_0 | 0) == 2) {
    var $ac_scheme_0 = 0;
    var $ac_scheme_0;
    return $ac_scheme_0;
  }
  var $ac_scheme_0 = ($i_0 << 4) + 464520 | 0;
  var $ac_scheme_0;
  return $ac_scheme_0;
}
function __gcry_ac_data_encrypt_scheme($handle, $scheme_id, $flags, $opts, $key, $io_message, $io_cipher) {
  var $6$s2;
  var $opts_em$s2;
  var $buffer$s2;
  var $mpi_encrypted$s2;
  var $data_encrypted$s2;
  var $em$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  var $io_em = __stackBase__;
  var $em = __stackBase__ + 16, $em$s2 = $em >> 2;
  var $em_n = __stackBase__ + 20;
  var $data_encrypted = __stackBase__ + 24, $data_encrypted$s2 = $data_encrypted >> 2;
  var $mpi_encrypted = __stackBase__ + 28, $mpi_encrypted$s2 = $mpi_encrypted >> 2;
  var $buffer = __stackBase__ + 32, $buffer$s2 = $buffer >> 2;
  var $buffer_n = __stackBase__ + 36;
  var $opts_em = __stackBase__ + 40, $opts_em$s2 = $opts_em >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$data_encrypted$s2] = 0;
  HEAP32[$mpi_encrypted$s2] = 0;
  HEAP32[$opts_em$s2] = 0;
  HEAP32[$buffer$s2] = 0;
  HEAP32[$em$s2] = 0;
  var $6 = _ac_scheme_get($scheme_id), $6$s2 = $6 >> 2;
  do {
    if (($6 | 0) == 0) {
      var $mpi_plain_0 = 0;
      var $err_0 = _gcry_error346(23);
    } else {
      if ((HEAP32[$key + 4 >> 2] | 0) != 1) {
        var $mpi_plain_0 = 0;
        var $err_0 = _gcry_error346(125);
        break;
      }
      var $21 = _ac_dencode_prepare($handle, $key, $opts, HEAP32[$6$s2 + 2], HEAP32[$6$s2 + 3], $opts_em);
      if (($21 | 0) != 0) {
        var $mpi_plain_0 = 0;
        var $err_0 = $21;
        break;
      }
      __gcry_ac_io_init($io_em, 1, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $em, HEAP32[tempInt + 4 >> 2] = $em_n, tempInt));
      var $27 = __gcry_ac_data_encode(HEAP32[$6$s2 + 1], 0, HEAP32[$opts_em$s2], $io_message, $io_em);
      if (($27 | 0) != 0) {
        var $mpi_plain_0 = 0;
        var $err_0 = $27;
        break;
      }
      var $30 = __gcry_mpi_snew(0);
      __gcry_ac_os_to_mpi($30, HEAP32[$em$s2], HEAP32[$em_n >> 2]);
      var $33 = __gcry_ac_data_encrypt($handle, 0, $key, $30, $data_encrypted);
      if (($33 | 0) != 0) {
        var $mpi_plain_0 = $30;
        var $err_0 = $33;
        break;
      }
      var $37 = _ac_data_set_to_mpi(HEAP32[$data_encrypted$s2], $mpi_encrypted);
      if (($37 | 0) != 0) {
        var $mpi_plain_0 = $30;
        var $err_0 = $37;
        break;
      }
      var $41 = __gcry_ac_mpi_to_os_alloc(HEAP32[$mpi_encrypted$s2], $buffer, $buffer_n);
      if (($41 | 0) != 0) {
        var $mpi_plain_0 = $30;
        var $err_0 = $41;
        break;
      }
      var $mpi_plain_0 = $30;
      var $err_0 = __gcry_ac_io_write($io_cipher, HEAP32[$buffer$s2], HEAP32[$buffer_n >> 2]);
    }
  } while (0);
  var $err_0;
  var $mpi_plain_0;
  __gcry_ac_data_destroy(HEAP32[$data_encrypted$s2]);
  __gcry_mpi_release(HEAP32[$mpi_encrypted$s2]);
  __gcry_mpi_release($mpi_plain_0);
  __gcry_free(HEAP32[$opts_em$s2]);
  __gcry_free(HEAP32[$buffer$s2]);
  __gcry_free(HEAP32[$em$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_encrypt_scheme["X"] = 1;
function _ac_dencode_prepare($handle, $key, $opts, $scheme_2, $scheme_3, $opts_em) {
  var $1 = __gcry_malloc($scheme_3);
  do {
    if (($1 | 0) == 0) {
      var $9 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      if (($9 | 0) == 0) {
        var $err_01 = 0;
      } else {
        var $err_03 = $9;
        break;
      }
      var $err_01;
      return $err_01;
    } else {
      var $4 = FUNCTION_TABLE[$scheme_2]($handle, $key, $opts, $1);
      if (($4 | 0) != 0) {
        var $err_03 = $4;
        break;
      }
      HEAP32[$opts_em >> 2] = $1;
      var $err_01 = 0;
      var $err_01;
      return $err_01;
    }
  } while (0);
  var $err_03;
  _free($1);
  var $err_01 = $err_03;
  var $err_01;
  return $err_01;
}
function _ac_data_set_to_mpi($data, $mpi) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $mpi_new = __stackBase__;
  do {
    if ((__gcry_ac_data_length($data) | 0) == 1) {
      var $6 = __gcry_ac_data_get_index($data, 2, 0, 0, $mpi_new);
      if (($6 | 0) != 0) {
        var $err_0 = $6;
        break;
      }
      HEAP32[$mpi >> 2] = HEAP32[$mpi_new >> 2];
      var $err_0 = 0;
    } else {
      var $err_0 = _gcry_error346(70);
    }
  } while (0);
  var $err_0;
  STACKTOP = __stackBase__;
  return $err_0;
}
function __gcry_ac_data_decrypt_scheme($handle, $scheme_id, $flags, $opts, $key, $io_cipher, $io_message) {
  var $6$s2;
  var $c$s2;
  var $elements_enc$s2;
  var $opts_em$s2;
  var $mpi_decrypted$s2;
  var $em$s2;
  var $data_encrypted$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  var $io_em = __stackBase__;
  var $data_encrypted = __stackBase__ + 16, $data_encrypted$s2 = $data_encrypted >> 2;
  var $em = __stackBase__ + 20, $em$s2 = $em >> 2;
  var $em_n = __stackBase__ + 24;
  var $mpi_decrypted = __stackBase__ + 28, $mpi_decrypted$s2 = $mpi_decrypted >> 2;
  var $opts_em = __stackBase__ + 32, $opts_em$s2 = $opts_em >> 2;
  var $elements_enc = __stackBase__ + 36, $elements_enc$s2 = $elements_enc >> 2;
  var $c = __stackBase__ + 40, $c$s2 = $c >> 2;
  var $c_n = __stackBase__ + 44;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$data_encrypted$s2] = 0;
  HEAP32[$mpi_decrypted$s2] = 0;
  HEAP32[$elements_enc$s2] = 0;
  HEAP32[$opts_em$s2] = 0;
  HEAP32[$em$s2] = 0;
  HEAP32[$c$s2] = 0;
  var $6 = _ac_scheme_get($scheme_id), $6$s2 = $6 >> 2;
  do {
    if (($6 | 0) == 0) {
      var $mpi_encrypted_0 = 0;
      var $err_0 = _gcry_error346(23);
    } else {
      if ((HEAP32[$key + 4 >> 2] | 0) != 0) {
        var $mpi_encrypted_0 = 0;
        var $err_0 = _gcry_error346(125);
        break;
      }
      var $17 = __gcry_ac_io_read_all($io_cipher, $c, $c_n);
      if (($17 | 0) != 0) {
        var $mpi_encrypted_0 = 0;
        var $err_0 = $17;
        break;
      }
      var $20 = __gcry_mpi_snew(0);
      __gcry_ac_os_to_mpi($20, HEAP32[$c$s2], HEAP32[$c_n >> 2]);
      var $25 = __gcry_pk_get_elements(HEAP32[$handle >> 2], $elements_enc, 0);
      if (($25 | 0) != 0) {
        var $mpi_encrypted_0 = $20;
        var $err_0 = $25;
        break;
      }
      if ((_strlen(HEAP32[$elements_enc$s2]) | 0) != 1) {
        var $mpi_encrypted_0 = $20;
        var $err_0 = _gcry_error346(70);
        break;
      }
      var $34 = __gcry_ac_data_new($data_encrypted);
      if (($34 | 0) != 0) {
        var $mpi_encrypted_0 = $20;
        var $err_0 = $34;
        break;
      }
      var $39 = __gcry_ac_data_set(HEAP32[$data_encrypted$s2], 3, HEAP32[$elements_enc$s2], $20);
      if (($39 | 0) != 0) {
        var $mpi_encrypted_0 = $20;
        var $err_0 = $39;
        break;
      }
      var $43 = __gcry_ac_data_decrypt($handle, 0, $key, $mpi_decrypted, HEAP32[$data_encrypted$s2]);
      if (($43 | 0) != 0) {
        var $mpi_encrypted_0 = $20;
        var $err_0 = $43;
        break;
      }
      var $47 = __gcry_ac_mpi_to_os_alloc(HEAP32[$mpi_decrypted$s2], $em, $em_n);
      if (($47 | 0) != 0) {
        var $mpi_encrypted_0 = $20;
        var $err_0 = $47;
        break;
      }
      var $54 = _ac_dencode_prepare($handle, $key, $opts, HEAP32[$6$s2 + 2], HEAP32[$6$s2 + 3], $opts_em);
      if (($54 | 0) != 0) {
        var $mpi_encrypted_0 = $20;
        var $err_0 = $54;
        break;
      }
      var $59 = HEAP32[$em_n >> 2];
      __gcry_ac_io_init($io_em, 0, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[$em$s2], HEAP32[tempInt + 4 >> 2] = $59, tempInt));
      var $mpi_encrypted_0 = $20;
      var $err_0 = __gcry_ac_data_decode(HEAP32[$6$s2 + 1], 0, HEAP32[$opts_em$s2], $io_em, $io_message);
    }
  } while (0);
  var $err_0;
  var $mpi_encrypted_0;
  __gcry_ac_data_destroy(HEAP32[$data_encrypted$s2]);
  __gcry_mpi_release($mpi_encrypted_0);
  __gcry_mpi_release(HEAP32[$mpi_decrypted$s2]);
  _free(HEAP32[$elements_enc$s2]);
  __gcry_free(HEAP32[$opts_em$s2]);
  __gcry_free(HEAP32[$em$s2]);
  __gcry_free(HEAP32[$c$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_decrypt_scheme["X"] = 1;
function __gcry_ac_io_read_all($ac_io, $buffer, $buffer_n) {
  var $buf_n$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1028 | 0;
  var $buf_n = __stackBase__ + 1024, $buf_n$s2 = $buf_n >> 2;
  var $1 = __stackBase__ | 0;
  var $buffer_new_n_0 = 0;
  var $buffer_new_0 = 0;
  while (1) {
    var $buffer_new_0;
    var $buffer_new_n_0;
    HEAP32[$buf_n$s2] = 1024;
    var $3 = __gcry_ac_io_read($ac_io, $buffer_new_n_0, $1, $buf_n);
    if (($3 | 0) != 0) {
      var $err_02 = $3;
      label = 3305;
      break;
    }
    var $6 = HEAP32[$buf_n$s2];
    if (($6 | 0) == 0) {
      label = 3304;
      break;
    }
    var $10 = __gcry_realloc($buffer_new_0, $6 + $buffer_new_n_0 | 0);
    if (($10 | 0) == 0) {
      label = 3303;
      break;
    }
    _memcpy($10 + $buffer_new_n_0 | 0, $1, HEAP32[$buf_n$s2]);
    var $buffer_new_n_0 = HEAP32[$buf_n$s2] + $buffer_new_n_0 | 0;
    var $buffer_new_0 = $10;
  }
  do {
    if (label == 3303) {
      var $20 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      if (($20 | 0) == 0) {
        label = 3304;
        break;
      } else {
        var $err_02 = $20;
        label = 3305;
        break;
      }
    }
  } while (0);
  if (label == 3304) {
    HEAP32[$buffer_n >> 2] = $buffer_new_n_0;
    HEAP32[$buffer >> 2] = $buffer_new_0;
    var $err_01 = 0;
    var $err_01;
    STACKTOP = __stackBase__;
    return $err_01;
  } else if (label == 3305) {
    var $err_02;
    __gcry_free($buffer_new_0);
    var $err_01 = $err_02;
    var $err_01;
    STACKTOP = __stackBase__;
    return $err_01;
  }
}
function __gcry_ac_data_sign_scheme($handle, $scheme_id, $flags, $opts, $key, $io_message, $io_signature) {
  var $12$s2;
  var $mpi_signed$s2;
  var $buffer$s2;
  var $opts_em$s2;
  var $em$s2;
  var $data_signed$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  var $io_em = __stackBase__;
  var $data_signed = __stackBase__ + 16, $data_signed$s2 = $data_signed >> 2;
  var $em = __stackBase__ + 20, $em$s2 = $em >> 2;
  var $em_n = __stackBase__ + 24;
  var $opts_em = __stackBase__ + 28, $opts_em$s2 = $opts_em >> 2;
  var $buffer = __stackBase__ + 32, $buffer$s2 = $buffer >> 2;
  var $buffer_n = __stackBase__ + 36;
  var $mpi_signed = __stackBase__ + 40, $mpi_signed$s2 = $mpi_signed >> 2;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$data_signed$s2] = 0;
  HEAP32[$mpi_signed$s2] = 0;
  HEAP32[$opts_em$s2] = 0;
  HEAP32[$buffer$s2] = 0;
  HEAP32[$em$s2] = 0;
  do {
    if ((HEAP32[$key + 4 >> 2] | 0) == 0) {
      var $12 = _ac_scheme_get($scheme_id), $12$s2 = $12 >> 2;
      if (($12 | 0) == 0) {
        var $mpi_0 = 0;
        var $err_0 = _gcry_error346(24);
        break;
      }
      var $21 = _ac_dencode_prepare($handle, $key, $opts, HEAP32[$12$s2 + 2], HEAP32[$12$s2 + 3], $opts_em);
      if (($21 | 0) != 0) {
        var $mpi_0 = 0;
        var $err_0 = $21;
        break;
      }
      __gcry_ac_io_init($io_em, 1, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $em, HEAP32[tempInt + 4 >> 2] = $em_n, tempInt));
      var $27 = __gcry_ac_data_encode(HEAP32[$12$s2 + 1], 0, HEAP32[$opts_em$s2], $io_message, $io_em);
      if (($27 | 0) != 0) {
        var $mpi_0 = 0;
        var $err_0 = $27;
        break;
      }
      var $30 = __gcry_mpi_new(0);
      __gcry_ac_os_to_mpi($30, HEAP32[$em$s2], HEAP32[$em_n >> 2]);
      var $33 = __gcry_ac_data_sign($handle, $key, $30, $data_signed);
      if (($33 | 0) != 0) {
        var $mpi_0 = $30;
        var $err_0 = $33;
        break;
      }
      var $37 = _ac_data_set_to_mpi(HEAP32[$data_signed$s2], $mpi_signed);
      if (($37 | 0) != 0) {
        var $mpi_0 = $30;
        var $err_0 = $37;
        break;
      }
      var $41 = __gcry_ac_mpi_to_os_alloc(HEAP32[$mpi_signed$s2], $buffer, $buffer_n);
      if (($41 | 0) != 0) {
        var $mpi_0 = $30;
        var $err_0 = $41;
        break;
      }
      var $mpi_0 = $30;
      var $err_0 = __gcry_ac_io_write($io_signature, HEAP32[$buffer$s2], HEAP32[$buffer_n >> 2]);
    } else {
      var $mpi_0 = 0;
      var $err_0 = _gcry_error346(125);
    }
  } while (0);
  var $err_0;
  var $mpi_0;
  __gcry_ac_data_destroy(HEAP32[$data_signed$s2]);
  __gcry_mpi_release(HEAP32[$mpi_signed$s2]);
  __gcry_mpi_release($mpi_0);
  __gcry_free(HEAP32[$opts_em$s2]);
  __gcry_free(HEAP32[$buffer$s2]);
  __gcry_free(HEAP32[$em$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_sign_scheme["X"] = 1;
function __gcry_ac_data_verify_scheme($handle, $scheme_id, $flags, $opts, $key, $io_message, $io_signature) {
  var $12$s2;
  var $s$s2;
  var $elements_sig$s2;
  var $opts_em$s2;
  var $em$s2;
  var $data_signed$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  var $io_em = __stackBase__;
  var $data_signed = __stackBase__ + 16, $data_signed$s2 = $data_signed >> 2;
  var $em = __stackBase__ + 20, $em$s2 = $em >> 2;
  var $em_n = __stackBase__ + 24;
  var $opts_em = __stackBase__ + 28, $opts_em$s2 = $opts_em >> 2;
  var $elements_sig = __stackBase__ + 32, $elements_sig$s2 = $elements_sig >> 2;
  var $s = __stackBase__ + 36, $s$s2 = $s >> 2;
  var $s_n = __stackBase__ + 40;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error337();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$elements_sig$s2] = 0;
  HEAP32[$data_signed$s2] = 0;
  HEAP32[$opts_em$s2] = 0;
  HEAP32[$em$s2] = 0;
  HEAP32[$s$s2] = 0;
  do {
    if ((HEAP32[$key + 4 >> 2] | 0) == 1) {
      var $12 = _ac_scheme_get($scheme_id), $12$s2 = $12 >> 2;
      if (($12 | 0) == 0) {
        var $mpi_data_0 = 0;
        var $mpi_signature_0 = 0;
        var $err_0 = _gcry_error346(24);
        break;
      }
      var $21 = _ac_dencode_prepare($handle, $key, $opts, HEAP32[$12$s2 + 2], HEAP32[$12$s2 + 3], $opts_em);
      if (($21 | 0) != 0) {
        var $mpi_data_0 = 0;
        var $mpi_signature_0 = 0;
        var $err_0 = $21;
        break;
      }
      __gcry_ac_io_init($io_em, 1, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $em, HEAP32[tempInt + 4 >> 2] = $em_n, tempInt));
      var $27 = __gcry_ac_data_encode(HEAP32[$12$s2 + 1], 0, HEAP32[$opts_em$s2], $io_message, $io_em);
      if (($27 | 0) != 0) {
        var $mpi_data_0 = 0;
        var $mpi_signature_0 = 0;
        var $err_0 = $27;
        break;
      }
      var $30 = __gcry_mpi_new(0);
      __gcry_ac_os_to_mpi($30, HEAP32[$em$s2], HEAP32[$em_n >> 2]);
      var $33 = __gcry_ac_io_read_all($io_signature, $s, $s_n);
      if (($33 | 0) != 0) {
        var $mpi_data_0 = $30;
        var $mpi_signature_0 = 0;
        var $err_0 = $33;
        break;
      }
      var $36 = __gcry_mpi_new(0);
      __gcry_ac_os_to_mpi($36, HEAP32[$s$s2], HEAP32[$s_n >> 2]);
      var $41 = __gcry_pk_get_elements(HEAP32[$handle >> 2], 0, $elements_sig);
      if (($41 | 0) != 0) {
        var $mpi_data_0 = $30;
        var $mpi_signature_0 = $36;
        var $err_0 = $41;
        break;
      }
      if ((_strlen(HEAP32[$elements_sig$s2]) | 0) != 1) {
        var $mpi_data_0 = $30;
        var $mpi_signature_0 = $36;
        var $err_0 = _gcry_error346(70);
        break;
      }
      var $50 = __gcry_ac_data_new($data_signed);
      if (($50 | 0) != 0) {
        var $mpi_data_0 = $30;
        var $mpi_signature_0 = $36;
        var $err_0 = $50;
        break;
      }
      var $55 = __gcry_ac_data_set(HEAP32[$data_signed$s2], 3, HEAP32[$elements_sig$s2], $36);
      if (($55 | 0) != 0) {
        var $mpi_data_0 = $30;
        var $mpi_signature_0 = $36;
        var $err_0 = $55;
        break;
      }
      __gcry_mpi_release($36);
      var $mpi_data_0 = $30;
      var $mpi_signature_0 = 0;
      var $err_0 = __gcry_ac_data_verify($handle, $key, $30, HEAP32[$data_signed$s2]);
    } else {
      var $mpi_data_0 = 0;
      var $mpi_signature_0 = 0;
      var $err_0 = _gcry_error346(125);
    }
  } while (0);
  var $err_0;
  var $mpi_signature_0;
  var $mpi_data_0;
  __gcry_ac_data_destroy(HEAP32[$data_signed$s2]);
  __gcry_mpi_release($mpi_signature_0);
  __gcry_mpi_release($mpi_data_0);
  _free(HEAP32[$elements_sig$s2]);
  __gcry_free(HEAP32[$opts_em$s2]);
  __gcry_free(HEAP32[$em$s2]);
  __gcry_free(HEAP32[$s$s2]);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_ac_data_verify_scheme["X"] = 1;
function __gcry_ac_init() {
  return (__gcry_fips_mode() | 0) == 0 ? 0 : 60;
}
function _ac_es_dencode_prepare_pkcs_v1_5($handle, $key, $opts, $opts_em) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $nbits = __stackBase__;
  var $1 = __gcry_ac_key_get_nbits($handle, $key, $nbits);
  if (($1 | 0) != 0) {
    STACKTOP = __stackBase__;
    return $1;
  }
  HEAP32[$opts_em >> 2] = HEAP32[$nbits >> 2];
  STACKTOP = __stackBase__;
  return $1;
}
function _ac_ssa_dencode_prepare_pkcs_v1_5($handle, $key, $opts, $opts_em) {
  var $k$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $k = __stackBase__, $k$s2 = $k >> 2;
  var $1 = __gcry_ac_key_get_nbits($handle, $key, $k);
  if (($1 | 0) != 0) {
    STACKTOP = __stackBase__;
    return $1;
  }
  HEAP32[$k$s2] = (HEAP32[$k$s2] + 7 | 0) >>> 3;
  HEAP32[$opts_em >> 2] = HEAP32[$opts >> 2];
  HEAP32[$opts_em + 4 >> 2] = HEAP32[$k$s2];
  STACKTOP = __stackBase__;
  return $1;
}
function _eme_pkcs_v1_5_encode($flags, $opts, $ac_io_read, $ac_io_write) {
  var $m_n$s2;
  var $m$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $m = __stackBase__, $m$s2 = $m >> 2;
  var $m_n = __stackBase__ + 4, $m_n$s2 = $m_n >> 2;
  HEAP32[$m$s2] = 0;
  var $1 = __gcry_ac_io_read_all($ac_io_read, $m, $m_n);
  do {
    if (($1 | 0) == 0) {
      var $6 = HEAP32[$opts >> 2] >>> 3;
      if (HEAP32[$m_n$s2] >>> 0 > ($6 - 11 | 0) >>> 0) {
        var $buffer_0 = 0;
        var $err_0 = _gcry_error346(66);
        break;
      }
      var $13 = $6 - 1 | 0;
      var $14 = __gcry_malloc($13);
      if (($14 | 0) == 0) {
        var $buffer_0 = 0;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        break;
      } else {
        var $22 = $6 - HEAP32[$m_n$s2] | 0;
        _em_randomize_nonzero($14 + 1 | 0, $22 - 3 | 0);
        HEAP8[$14] = 2;
        HEAP8[$14 + ($22 - 2) | 0] = 0;
        _memcpy($14 + ($22 - 1) | 0, HEAP32[$m$s2], HEAP32[$m_n$s2]);
        var $buffer_0 = $14;
        var $err_0 = __gcry_ac_io_write($ac_io_write, $14, $13);
        break;
      }
    } else {
      var $buffer_0 = 0;
      var $err_0 = $1;
    }
  } while (0);
  var $err_0;
  var $buffer_0;
  __gcry_free($buffer_0);
  __gcry_free(HEAP32[$m$s2]);
  STACKTOP = __stackBase__;
  return $err_0;
}
function _eme_pkcs_v1_5_decode($flags, $opts, $ac_io_read, $ac_io_write) {
  var $em_n$s2;
  var $em$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $em = __stackBase__, $em$s2 = $em >> 2;
  var $em_n = __stackBase__ + 4, $em_n$s2 = $em_n >> 2;
  HEAP32[$em$s2] = 0;
  var $1 = __gcry_ac_io_read_all($ac_io_read, $em, $em_n);
  L4051 : do {
    if (($1 | 0) == 0) {
      var $6 = HEAP32[$opts >> 2] >>> 3;
      var $7 = HEAP32[$em_n$s2];
      var $8 = HEAP32[$em$s2];
      var $i_0 = 0;
      while (1) {
        var $i_0;
        if ($i_0 >>> 0 >= $7 >>> 0) {
          var $16 = $7;
          break;
        }
        if (HEAP8[$8 + $i_0 | 0] << 24 >> 24 == 0) {
          label = 3366;
          break;
        } else {
          var $i_0 = $i_0 + 1 | 0;
        }
      }
      if (label == 3366) {
        var $16 = HEAP32[$em_n$s2];
      }
      var $16;
      do {
        if ($16 >>> 0 > 9) {
          if (($16 | 0) != ($6 - 1 | 0)) {
            break;
          }
          if (!(HEAP8[HEAP32[$em$s2]] << 24 >> 24 == 2 & $i_0 >>> 0 < $16 >>> 0 & ($i_0 - 1 | 0) >>> 0 > 7)) {
            break;
          }
          var $31 = $i_0 + 1 | 0;
          var $33 = __gcry_malloc($16 - $31 | 0);
          if (($33 | 0) == 0) {
            var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
            var $buffer_0 = 0;
            break L4051;
          } else {
            _memcpy($33, HEAP32[$em$s2] + $31 | 0, HEAP32[$em_n$s2] - $31 | 0);
            var $err_0 = __gcry_ac_io_write($ac_io_write, $33, HEAP32[$em_n$s2] - $31 | 0);
            var $buffer_0 = $33;
            break L4051;
          }
        }
      } while (0);
      var $err_0 = _gcry_error346(152);
      var $buffer_0 = 0;
    } else {
      var $err_0 = $1;
      var $buffer_0 = 0;
    }
  } while (0);
  var $buffer_0;
  var $err_0;
  __gcry_free($buffer_0);
  __gcry_free(HEAP32[$em$s2]);
  STACKTOP = __stackBase__;
  return $err_0;
}
_eme_pkcs_v1_5_decode["X"] = 1;
function __gcry_ac_io_write($ac_io, $buffer, $buffer_n) {
  var $15$s2;
  var $10$s2;
  var $ac_io$s2 = $ac_io >> 2;
  if ((HEAP32[$ac_io$s2] | 0) != 1) {
    __gcry_assert_failed(482724, 470300, 949, 495492);
  }
  var $7 = HEAP32[$ac_io$s2 + 1];
  if (($7 | 0) == 0) {
    var $10$s2 = ($ac_io + 8 | 0) >> 2;
    var $12 = HEAP32[HEAP32[$10$s2] >> 2];
    if (($12 | 0) != 0) {
      var $15$s2 = ($ac_io + 12 | 0) >> 2;
      var $20 = __gcry_realloc($12, HEAP32[HEAP32[$15$s2] >> 2] + $buffer_n | 0);
      if (($20 | 0) == 0) {
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        var $err_0;
        return $err_0;
      }
      var $27 = HEAP32[$10$s2];
      if ((HEAP32[$27 >> 2] | 0) != ($20 | 0)) {
        HEAP32[$27 >> 2] = $20;
      }
      _memcpy($20 + HEAP32[HEAP32[$15$s2] >> 2] | 0, $buffer, $buffer_n);
      var $37 = HEAP32[$15$s2];
      HEAP32[$37 >> 2] = HEAP32[$37 >> 2] + $buffer_n | 0;
      var $err_0 = 0;
      var $err_0;
      return $err_0;
    }
    if ((__gcry_is_secure($buffer) | 0) == 0) {
      var $p_0 = __gcry_malloc($buffer_n);
    } else {
      var $p_0 = __gcry_malloc_secure($buffer_n);
    }
    var $p_0;
    if (($p_0 | 0) == 0) {
      var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
      var $err_0;
      return $err_0;
    } else {
      _memcpy($p_0, $buffer, $buffer_n);
      HEAP32[HEAP32[$10$s2] >> 2] = $p_0;
      HEAP32[HEAP32[$ac_io$s2 + 3] >> 2] = $buffer_n;
      var $err_0 = 0;
      var $err_0;
      return $err_0;
    }
  } else if (($7 | 0) == 1) {
    var $err_0 = FUNCTION_TABLE[HEAP32[$ac_io$s2 + 2]](HEAP32[$ac_io$s2 + 3], $buffer, $buffer_n);
    var $err_0;
    return $err_0;
  } else {
    var $err_0 = 0;
    var $err_0;
    return $err_0;
  }
}
__gcry_ac_io_write["X"] = 1;
function __gcry_ac_io_read($ac_io, $nread, $buffer, $buffer_n) {
  var $ac_io$s2 = $ac_io >> 2;
  if ((HEAP32[$ac_io$s2] | 0) != 0) {
    __gcry_assert_failed(483624, 470300, 1009, 495512);
  }
  var $7 = HEAP32[$ac_io$s2 + 1];
  if (($7 | 0) == 0) {
    var $13 = HEAP32[$ac_io$s2 + 3] - $nread | 0;
    var $14 = HEAP32[$buffer_n >> 2];
    var $_ = $14 >>> 0 > $13 >>> 0 ? $13 : $14;
    _memcpy($buffer, HEAP32[$ac_io$s2 + 2] + $nread | 0, $_);
    HEAP32[$buffer_n >> 2] = $_;
    var $err_0 = 0;
    var $err_0;
    return $err_0;
  } else if (($7 | 0) == 1) {
    var $err_0 = FUNCTION_TABLE[HEAP32[$ac_io$s2 + 2]](HEAP32[$ac_io$s2 + 3], $buffer, $buffer_n);
    var $err_0;
    return $err_0;
  } else {
    var $err_0 = 0;
    var $err_0;
    return $err_0;
  }
}
function _gpg_err_make402($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function _emsa_pkcs_v1_5_encode($flags, $opts, $ac_io_read, $ac_io_write) {
  var $1$s2;
  var $asn_n$s2;
  var $md$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  var $md = __stackBase__, $md$s2 = $md >> 2;
  var $asn = __stackBase__ + 4;
  var $asn17 = $asn | 0;
  var $asn_n = STACKTOP, $asn_n$s2 = $asn_n >> 2;
  STACKTOP = STACKTOP + 4 | 0;
  HEAP32[$md$s2] = 0;
  var $1$s2 = $opts >> 2;
  var $3 = __gcry_md_open($md, HEAP32[$1$s2], 0);
  do {
    if (($3 | 0) == 0) {
      HEAP32[$asn_n$s2] = 100;
      var $8 = __gcry_md_algo_info(HEAP32[$1$s2], 10, $asn | 0, $asn_n);
      if (($8 | 0) != 0) {
        var $buffer_0 = 0;
        var $ps_0 = 0;
        var $t_0 = 0;
        var $err_0 = $8;
        break;
      }
      var $12 = __gcry_md_get_algo_dlen(HEAP32[$1$s2]);
      var $15 = __gcry_ac_io_process($ac_io_read, HEAP32[$md$s2]);
      if (($15 | 0) != 0) {
        var $buffer_0 = 0;
        var $ps_0 = 0;
        var $t_0 = 0;
        var $err_0 = $15;
        break;
      }
      var $19 = __gcry_md_read(HEAP32[$md$s2], 0);
      var $20 = HEAP32[$asn_n$s2];
      var $21 = $20 + $12 | 0;
      var $22 = __gcry_malloc($21);
      if (($22 | 0) == 0) {
        var $buffer_0 = 0;
        var $ps_0 = 0;
        var $t_0 = 0;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        break;
      }
      if ((HEAP32[$asn_n$s2] | 0) != 0) {
        var $30 = HEAP32[$asn_n$s2];
        _memcpy($22, $asn17, $30 >>> 0 > 1 ? $30 : 1);
      }
      L4123 : do {
        if (($12 | 0) != 0) {
          var $i_110 = 0;
          while (1) {
            var $i_110;
            HEAP8[$22 + HEAP32[$asn_n$s2] + $i_110 | 0] = HEAP8[$19 + $i_110 | 0];
            var $38 = $i_110 + 1 | 0;
            if (($38 | 0) == ($12 | 0)) {
              break L4123;
            } else {
              var $i_110 = $38;
            }
          }
        }
      } while (0);
      var $41 = HEAP32[$opts + 4 >> 2];
      if ($41 >>> 0 < ($21 + 11 | 0) >>> 0) {
        var $buffer_0 = 0;
        var $ps_0 = 0;
        var $t_0 = $22;
        var $err_0 = _gcry_error346(66);
        break;
      }
      var $47 = $41 - $21 | 0;
      var $48 = $47 - 3 | 0;
      var $49 = __gcry_malloc($48);
      if (($49 | 0) == 0) {
        var $buffer_0 = 0;
        var $ps_0 = 0;
        var $t_0 = $22;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        break;
      }
      if (($48 | 0) != 0) {
        _memset($49, -1, $41 - 3 - ($12 + $20) | 0);
      }
      var $60 = __gcry_malloc($41);
      if (($60 | 0) == 0) {
        var $buffer_0 = 0;
        var $ps_0 = $49;
        var $t_0 = $22;
        var $err_0 = __gcry_error_from_errno(HEAP32[___errno_location() >> 2]);
        break;
      }
      HEAP8[$60] = 0;
      HEAP8[$60 + 1 | 0] = 1;
      if (($48 | 0) != 0) {
        _memcpy($60 + 2 | 0, $49, $41 - 3 - ($12 + $20) | 0);
      }
      HEAP8[$60 + ($47 - 1) | 0] = 0;
      if (($21 | 0) != 0) {
        var $76 = $12 + $20 | 0;
        _memcpy($60 + ($41 - $76) | 0, $22, $76);
      }
      var $buffer_0 = $60;
      var $ps_0 = $49;
      var $t_0 = $22;
      var $err_0 = __gcry_ac_io_write($ac_io_write, $60, $41);
    } else {
      var $buffer_0 = 0;
      var $ps_0 = 0;
      var $t_0 = 0;
      var $err_0 = $3;
    }
  } while (0);
  var $err_0;
  var $t_0;
  var $ps_0;
  var $buffer_0;
  __gcry_md_close(HEAP32[$md$s2]);
  __gcry_free($buffer_0);
  __gcry_free($ps_0);
  __gcry_free($t_0);
  STACKTOP = __stackBase__;
  return $err_0;
}
_emsa_pkcs_v1_5_encode["X"] = 1;
function __gcry_ac_io_process($ac_io, $opaque) {
  var $buffer_n$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1028 | 0;
  var $buffer_n = __stackBase__ + 1024, $buffer_n$s2 = $buffer_n >> 2;
  var $1 = __stackBase__ | 0;
  var $nread_0 = 0;
  while (1) {
    var $nread_0;
    HEAP32[$buffer_n$s2] = 1024;
    var $3 = __gcry_ac_io_read($ac_io, $nread_0, $1, $buffer_n);
    if (($3 | 0) != 0) {
      var $err_0 = $3;
      break;
    }
    var $6 = HEAP32[$buffer_n$s2];
    if (($6 | 0) == 0) {
      var $err_0 = 0;
      break;
    }
    var $9 = _emsa_pkcs_v1_5_encode_data_cb($opaque, $1, $6);
    if (($9 | 0) != 0) {
      var $err_0 = $9;
      break;
    }
    var $nread_0 = HEAP32[$buffer_n$s2] + $nread_0 | 0;
  }
  var $err_0;
  STACKTOP = __stackBase__;
  return $err_0;
}
function _emsa_pkcs_v1_5_encode_data_cb($opaque, $buffer, $buffer_n) {
  __gcry_md_write($opaque, $buffer, $buffer_n);
  return 0;
}
function _em_randomize_nonzero($buffer, $buffer_n) {
  var label = 0;
  do {
    if (($buffer_n | 0) == 0) {
      var $i_1 = 0;
      var $zeros_0 = 0;
    } else {
      _memset($buffer, 0, $buffer_n);
      var $i_1 = 0;
      var $zeros_0 = 0;
      break;
    }
  } while (0);
  while (1) {
    var $zeros_0;
    var $i_1;
    if ($i_1 >>> 0 < $buffer_n >>> 0) {
      var $_zeros_0 = (HEAP8[$buffer + $i_1 | 0] << 24 >> 24 == 0 & 1) + $zeros_0 | 0;
      var $i_1 = $i_1 + 1 | 0;
      var $zeros_0 = $_zeros_0;
      continue;
    }
    if (($zeros_0 | 0) == 0) {
      label = 3456;
      break;
    }
    var $13 = ($zeros_0 >>> 7) + $zeros_0 | 0;
    var $14 = __gcry_random_bytes_secure($13, 1);
    var $j_0 = 0;
    var $i_2 = 0;
    var $zeros_2 = $zeros_0;
    L4163 : while (1) {
      var $zeros_2;
      var $i_2;
      var $j_0;
      if (!(($zeros_2 | 0) != 0 & $i_2 >>> 0 < $buffer_n >>> 0 & $j_0 >>> 0 < $13 >>> 0)) {
        break;
      }
      var $20 = $buffer + $i_2 | 0;
      if (HEAP8[$20] << 24 >> 24 == 0) {
        var $j_1 = $j_0;
        while (1) {
          var $j_1;
          if ($j_1 >>> 0 >= $13 >>> 0) {
            break L4163;
          }
          var $26 = HEAP8[$14 + $j_1 | 0];
          var $28 = $j_1 + 1 | 0;
          if ($26 << 24 >> 24 == 0) {
            var $j_1 = $28;
          } else {
            break;
          }
        }
        HEAP8[$20] = $26;
        var $j_2 = $28;
        var $zeros_3 = $zeros_2 - 1 | 0;
      } else {
        var $j_2 = $j_0;
        var $zeros_3 = $zeros_2;
      }
      var $zeros_3;
      var $j_2;
      var $j_0 = $j_2;
      var $i_2 = $i_2 + 1 | 0;
      var $zeros_2 = $zeros_3;
    }
    __gcry_free($14);
    if (($zeros_2 | 0) == 0) {
      label = 3457;
      break;
    } else {
      var $i_1 = 0;
      var $zeros_0 = 0;
    }
  }
  if (label == 3456) {
    return;
  } else if (label == 3457) {
    return;
  }
}
_em_randomize_nonzero["X"] = 1;
function _gcry_err_make401($code) {
  return _gpg_err_make402(32, $code);
}
function __gcry_cipher_register($cipher, $extraspec, $algorithm_id, $module) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $mod = __stackBase__;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error425(60);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(459160);
  var $11 = __gcry_module_add(459164, 0, $cipher, ($extraspec | 0) != 0 ? $extraspec : 457124, $mod);
  __gcry_ath_mutex_unlock(459160);
  if (($11 | 0) == 0) {
    HEAP32[$module >> 2] = HEAP32[$mod >> 2];
    HEAP32[$algorithm_id >> 2] = HEAP32[HEAP32[$mod >> 2] + 24 >> 2];
  }
  var $_0 = _gcry_error426($11);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gpg_error425($code) {
  return _gpg_err_make463(1, $code);
}
function _gcry_error426($code) {
  return _gcry_err_make462($code);
}
function __gcry_cipher_unregister($module) {
  __gcry_ath_mutex_lock(459160);
  __gcry_module_release($module);
  __gcry_ath_mutex_unlock(459160);
  return;
}
function __gcry_cipher_map_name($string) {
  var $algorithm$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $algorithm = __stackBase__, $algorithm$s2 = $algorithm >> 2;
  HEAP32[$algorithm$s2] = 0;
  if (($string | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  do {
    if ((_search_oid($string, $algorithm, 0) | 0) == 0) {
      var $11 = _gcry_cipher_lookup_name($string);
      if (($11 | 0) == 0) {
        break;
      }
      HEAP32[$algorithm$s2] = HEAP32[$11 + 24 >> 2];
      __gcry_module_release($11);
    }
  } while (0);
  __gcry_ath_mutex_unlock(459160);
  var $_0 = HEAP32[$algorithm$s2];
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _search_oid($oid, $algorithm, $oid_spec) {
  var $17$s2;
  do {
    if (($oid | 0) == 0) {
      var $_0 = 0;
    } else {
      if ((_strncmp($oid, 482700, 4) | 0) != 0) {
        if ((_strncmp($oid, 482072, 4) | 0) != 0) {
          var $_0 = $oid;
          break;
        }
      }
      var $_0 = $oid + 4 | 0;
    }
  } while (0);
  var $_0;
  var $11 = _gcry_cipher_lookup_oid($_0);
  if (($11 | 0) == 0) {
    var $ret_2 = 0;
    var $ret_2;
    return $ret_2;
  }
  var $17$s2 = (HEAP32[$11 + 8 >> 2] + 8 | 0) >> 2;
  var $20 = HEAP32[HEAP32[$17$s2] >> 2];
  L4211 : do {
    if (($20 | 0) == 0) {
      var $ret_0_lcssa = 0;
    } else {
      var $22 = ($algorithm | 0) == 0;
      var $23 = ($oid_spec | 0) == 0;
      var $24 = $oid_spec;
      var $25 = $11 + 24 | 0;
      var $ret_01 = 0;
      var $i_02 = 0;
      var $27 = $20;
      while (1) {
        var $27;
        var $i_02;
        var $ret_01;
        do {
          if ((_strcasecmp($_0, $27) | 0) == 0) {
            if (!$22) {
              HEAP32[$algorithm >> 2] = HEAP32[$25 >> 2];
            }
            if ($23) {
              var $ret_1 = 1;
              break;
            }
            var $37 = ($i_02 << 3) + HEAP32[$17$s2] | 0;
            var $38$1 = HEAP32[$37 + 4 >> 2];
            HEAP32[$24 >> 2] = HEAP32[$37 >> 2];
            HEAP32[$24 + 4 >> 2] = $38$1;
            var $ret_1 = 1;
          } else {
            var $ret_1 = $ret_01;
          }
        } while (0);
        var $ret_1;
        var $40 = $i_02 + 1 | 0;
        var $43 = HEAP32[HEAP32[$17$s2] + ($40 << 3) >> 2];
        if (($43 | 0) != 0 & ($ret_1 | 0) == 0) {
          var $ret_01 = $ret_1;
          var $i_02 = $40;
          var $27 = $43;
        } else {
          var $ret_0_lcssa = $ret_1;
          break L4211;
        }
      }
    }
  } while (0);
  var $ret_0_lcssa;
  __gcry_module_release($11);
  var $ret_2 = $ret_0_lcssa;
  var $ret_2;
  return $ret_2;
}
_search_oid["X"] = 1;
function _gcry_cipher_lookup_name($name) {
  return __gcry_module_lookup(HEAP32[114791], $name, 194);
}
function __gcry_cipher_mode_from_oid($string) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $oid_spec = __stackBase__;
  if (($string | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(459160);
  if ((_search_oid($string, 0, $oid_spec) | 0) == 0) {
    var $mode_0 = 0;
  } else {
    var $mode_0 = HEAP32[$oid_spec + 4 >> 2];
  }
  var $mode_0;
  __gcry_ath_mutex_unlock(459160);
  var $_0 = $mode_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_cipher_algo_name($algorithm) {
  return _cipher_algo_to_string($algorithm);
}
function _cipher_algo_to_string($algorithm) {
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  var $7 = __gcry_module_lookup_id(HEAP32[114791], $algorithm);
  if (($7 | 0) == 0) {
    var $name_0 = 483620;
    var $name_0;
    var $15 = __gcry_ath_mutex_unlock(459160);
    return $name_0;
  }
  var $13 = HEAP32[HEAP32[$7 + 8 >> 2] >> 2];
  __gcry_module_release($7);
  var $name_0 = $13;
  var $name_0;
  var $15 = __gcry_ath_mutex_unlock(459160);
  return $name_0;
}
function __gcry_cipher_open($handle, $algo, $mode, $flags) {
  var $h_1$s2;
  var $18$s2;
  var $8$s2;
  var label = 0;
  var $1 = $flags & 1;
  __gcry_fast_random_poll();
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  var $8 = __gcry_module_lookup_id(HEAP32[114791], $algo), $8$s2 = $8 >> 2;
  var $9 = ($8 | 0) != 0;
  do {
    if ($9) {
      if ((HEAP32[$8$s2 + 4] & 1 | 0) != 0) {
        label = 3517;
        break;
      }
      var $18 = HEAP32[$8$s2 + 2], $18$s2 = $18 >> 2;
      var $19 = $18;
      var $22 = HEAP32[$8$s2 + 3];
      __gcry_ath_mutex_unlock(459160);
      var $24 = $flags >>> 0 > 15;
      var $_err_0 = $24 ? 12 : 0;
      if ($24) {
        var $err_3 = $_err_0;
        var $h_2 = 0;
        break;
      }
      if (($mode | 0) == 4) {
        if ((HEAP32[$18$s2 + 9] | 0) == 136) {
          var $err_3 = 71;
          var $h_2 = 0;
          break;
        }
        var $45 = (HEAP32[$18$s2 + 10] | 0) == 352;
        if ($45 | $24) {
          var $err_3 = $45 ? 71 : $_err_0;
          var $h_2 = 0;
          break;
        }
      } else if (($mode | 0) == 1 | ($mode | 0) == 3 | ($mode | 0) == 2 | ($mode | 0) == 5 | ($mode | 0) == 6 | ($mode | 0) == 7) {
        if ((HEAP32[$18$s2 + 7] | 0) == 202) {
          var $err_3 = 71;
          var $h_2 = 0;
          break;
        }
        var $35 = (HEAP32[$18$s2 + 8] | 0) == 372;
        if ($35 | $24) {
          var $err_3 = $35 ? 71 : $_err_0;
          var $h_2 = 0;
          break;
        }
      } else if (($mode | 0) == 0) {
        if ((__gcry_fips_mode() | 0) != 0) {
          var $err_3 = 71;
          var $h_2 = 0;
          break;
        }
        var $51 = (__gcry_get_debug_flag(0) | 0) == 0;
        if ($51 | $24) {
          var $err_3 = $51 ? 71 : $_err_0;
          var $h_2 = 0;
          break;
        }
      } else {
        var $err_3 = 71;
        var $h_2 = 0;
        break;
      }
      var $57 = (HEAP32[$18$s2 + 5] << 1) + 143 | 0;
      var $58 = ($1 | 0) != 0;
      if ($58) {
        var $h_0_in = __gcry_calloc_secure(1, $57);
      } else {
        var $h_0_in = __gcry_calloc(1, $57);
      }
      var $h_0_in;
      var $h_0 = $h_0_in;
      if (($h_0_in | 0) == 0) {
        var $err_3 = _gpg_err_code_from_syserror();
        var $h_2 = $h_0;
        break;
      }
      var $69 = $h_0_in & 15;
      if (($69 | 0) == 0) {
        var $off_0 = 0;
        var $h_1 = $h_0, $h_1$s2 = $h_1 >> 2;
      } else {
        var $72 = 16 - $69 | 0;
        var $off_0 = $72;
        var $h_1 = $h_0_in + $72 | 0, $h_1$s2 = $h_1 >> 2;
      }
      var $h_1;
      var $off_0;
      HEAP32[$h_1$s2] = $58 ? 1183944770 : 604576100;
      HEAP32[$h_1$s2 + 1] = $57 - $off_0 | 0;
      HEAP32[$h_1$s2 + 2] = $off_0;
      HEAP32[$h_1$s2 + 3] = $19;
      HEAP32[$h_1$s2 + 4] = $22;
      HEAP32[$h_1$s2 + 5] = $8;
      HEAP32[$h_1$s2 + 6] = $algo;
      HEAP32[$h_1$s2 + 12] = $mode;
      HEAP32[$h_1$s2 + 13] = $flags;
      if (($algo - 7 | 0) >>> 0 >= 3) {
        var $err_3 = $_err_0;
        var $h_2 = $h_1;
        break;
      }
      HEAP32[$h_1$s2 + 7] = 106;
      HEAP32[$h_1$s2 + 8] = 144;
      HEAP32[$h_1$s2 + 9] = 366;
      HEAP32[$h_1$s2 + 10] = 134;
      HEAP32[$h_1$s2 + 11] = 118;
      var $err_3 = $_err_0;
      var $h_2 = $h_1;
      break;
    } else {
      label = 3517;
    }
  } while (0);
  if (label == 3517) {
    __gcry_ath_mutex_unlock(459160);
    var $err_3 = 12;
    var $h_2 = 0;
  }
  var $h_2;
  var $err_3;
  var $93 = ($err_3 | 0) != 0;
  if (!($93 & $9)) {
    var $98 = $93 ? 0 : $h_2;
    HEAP32[$handle >> 2] = $98;
    var $99 = _gcry_error426($err_3);
    return $99;
  }
  __gcry_ath_mutex_lock(459160);
  __gcry_module_release($8);
  __gcry_ath_mutex_unlock(459160);
  var $98 = $93 ? 0 : $h_2;
  HEAP32[$handle >> 2] = $98;
  var $99 = _gcry_error426($err_3);
  return $99;
}
__gcry_cipher_open["X"] = 1;
function __gcry_cipher_encrypt($h, $out, $outsize, $in, $inlen) {
  if (($in | 0) == 0) {
    var $err_0 = _cipher_encrypt($h, $out, $outsize, $out, $outsize);
  } else {
    var $err_0 = _cipher_encrypt($h, $out, $outsize, $in, $inlen);
  }
  var $err_0;
  if (($err_0 | 0) == 0 | ($out | 0) == 0) {
    var $11 = _gcry_error426($err_0);
    return $11;
  }
  _memset($out, 66, $outsize);
  var $11 = _gcry_error426($err_0);
  return $11;
}
function _cipher_register_default() {
  var $4$s2;
  var label = 0;
  var $err_0 = 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    var $err_0;
    if (($err_0 | 0) != 0) {
      label = 3565;
      break;
    }
    var $4$s2 = (($i_0 << 4) + 459168 | 0) >> 2;
    if (($i_0 | 0) == 18) {
      label = 3566;
      break;
    }
    var $8 = HEAP32[$4$s2] + 24 | 0;
    if ((HEAP32[$8 >> 2] | 0) == 0) {
      HEAP32[$8 >> 2] = 90;
    }
    var $14 = HEAP32[$4$s2] + 28 | 0;
    if ((HEAP32[$14 >> 2] | 0) == 0) {
      HEAP32[$14 >> 2] = 202;
    }
    var $20 = HEAP32[$4$s2] + 32 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 0) {
      HEAP32[$20 >> 2] = 372;
    }
    var $26 = HEAP32[$4$s2] + 36 | 0;
    if ((HEAP32[$26 >> 2] | 0) == 0) {
      HEAP32[$26 >> 2] = 136;
    }
    var $32 = HEAP32[$4$s2] + 40 | 0;
    if ((HEAP32[$32 >> 2] | 0) == 0) {
      HEAP32[$32 >> 2] = 352;
    }
    do {
      if ((__gcry_fips_mode() | 0) == 0) {
        label = 3563;
      } else {
        if ((228 >>> ($i_0 >>> 0) & 1 | 0) == 0) {
          var $err_1 = $err_0;
          break;
        } else {
          label = 3563;
          break;
        }
      }
    } while (0);
    if (label == 3563) {
      label = 0;
      var $err_1 = __gcry_module_add(459164, HEAP32[($i_0 << 4) + 459176 >> 2], HEAP32[$4$s2], HEAP32[($i_0 << 4) + 459172 >> 2], 0);
    }
    var $err_1;
    var $err_0 = $err_1;
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 3565) {
    __gcry_bug(479480, 326, 494936);
  } else if (label == 3566) {
    return;
  }
}
_cipher_register_default["X"] = 1;
function _dummy_encrypt_block($c, $outbuf, $inbuf) {
  __gcry_bug(479480, 255, 494764);
}
function _dummy_decrypt_block($c, $outbuf, $inbuf) {
  __gcry_bug(479480, 265, 494824);
}
function _dummy_encrypt_stream($c, $outbuf, $inbuf, $n) {
  __gcry_bug(479480, 277, 494740);
}
function _dummy_decrypt_stream($c, $outbuf, $inbuf, $n) {
  __gcry_bug(479480, 289, 494800);
}
function __gcry_cipher_close($h) {
  if (($h | 0) == 0) {
    return;
  }
  var $3 = $h | 0;
  var $4 = HEAP32[$3 >> 2];
  if (!(($4 | 0) == 1183944770 | ($4 | 0) == 604576100)) {
    __gcry_fatal_error(63, 474228);
  }
  HEAP32[$3 >> 2] = 0;
  __gcry_ath_mutex_lock(459160);
  __gcry_module_release(HEAP32[$h + 20 >> 2]);
  __gcry_ath_mutex_unlock(459160);
  var $12 = HEAP32[$h + 8 >> 2];
  var $13 = $h;
  var $15 = HEAP32[$h + 4 >> 2];
  L4324 : do {
    if (($15 | 0) != 0) {
      var $_vptr_01 = $13;
      var $_vlen_02 = $15;
      while (1) {
        var $_vlen_02;
        var $_vptr_01;
        HEAP8[$_vptr_01] = 0;
        var $18 = $_vlen_02 - 1 | 0;
        if (($18 | 0) == 0) {
          break L4324;
        } else {
          var $_vptr_01 = $_vptr_01 + 1 | 0;
          var $_vlen_02 = $18;
        }
      }
    }
  } while (0);
  __gcry_free($13 + -$12 | 0);
  return;
}
function _gpg_err_code451($err) {
  return $err & 65535;
}
function __gcry_cipher_decrypt($h, $out, $outsize, $in, $inlen) {
  if (($in | 0) == 0) {
    var $err_0 = _cipher_decrypt($h, $out, $outsize, $out, $outsize);
  } else {
    var $err_0 = _cipher_decrypt($h, $out, $outsize, $in, $inlen);
  }
  var $err_0;
  return _gcry_error426($err_0);
}
function __gcry_cipher_setkey($hd, $key, $keylen) {
  return _cipher_setkey($hd, $key, $keylen);
}
function _cipher_setkey($c, $key, $keylen) {
  var $1 = $c + 12 | 0;
  var $6 = $c + 128 | 0;
  var $7 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($6, $key, $keylen);
  if (($7 | 0) == 0) {
    var $12 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2];
    _memcpy($6 + $12 | 0, $6, $12);
    var $15 = $c + 56 | 0;
    HEAP32[$15 >> 2] = HEAP32[$15 >> 2] | 1;
    var $24 = _gcry_error426($7);
    return $24;
  } else {
    var $20 = $c + 56 | 0;
    HEAP32[$20 >> 2] = HEAP32[$20 >> 2] & -2;
    var $24 = _gcry_error426($7);
    return $24;
  }
}
function __gcry_cipher_setiv($hd, $iv, $ivlen) {
  _cipher_setiv($hd, $iv, $ivlen);
  return 0;
}
function _cipher_setiv($c, $iv, $ivlen) {
  var $3$s2;
  var __stackBase__ = STACKTOP;
  var $2 = $c + 64 | 0;
  var $3$s2 = ($c + 12 | 0) >> 2;
  _memset($2, 0, HEAP32[HEAP32[$3$s2] + 12 >> 2]);
  if (($iv | 0) == 0) {
    var $25 = $c + 56 | 0;
    HEAP32[$25 >> 2] = HEAP32[$25 >> 2] & -3;
    var $29 = $c + 112 | 0;
    HEAP32[$29 >> 2] = 0;
    STACKTOP = __stackBase__;
    return;
  }
  var $11 = HEAP32[HEAP32[$3$s2] + 12 >> 2];
  if (($11 | 0) != ($ivlen | 0)) {
    __gcry_log_info(489204, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $ivlen, HEAP32[tempInt + 4 >> 2] = $11, tempInt));
    __gcry_fips_signal_error(479480, 924, 494920, 0, 487684);
  }
  var $17 = HEAP32[HEAP32[$3$s2] + 12 >> 2];
  _memcpy($2, $iv, $17 >>> 0 < $ivlen >>> 0 ? $17 : $ivlen);
  var $20 = $c + 56 | 0;
  HEAP32[$20 >> 2] = HEAP32[$20 >> 2] | 2;
  var $29 = $c + 112 | 0;
  HEAP32[$29 >> 2] = 0;
  STACKTOP = __stackBase__;
  return;
}
function __gcry_cipher_setctr($hd, $ctr, $ctrlen) {
  var $1 = ($ctr | 0) != 0;
  do {
    if ($1) {
      var $6 = HEAP32[HEAP32[$hd + 12 >> 2] + 12 >> 2];
      if (($6 | 0) == ($ctrlen | 0)) {
        _memcpy($hd + 80 | 0, $ctr, $6);
        HEAP32[$hd + 112 >> 2] = 0;
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      if (($ctrlen | 0) == 0 | $1 ^ 1) {
        break;
      }
      var $_0 = _gpg_error425(45);
      var $_0;
      return $_0;
    }
  } while (0);
  _memset($hd + 80 | 0, 0, HEAP32[HEAP32[$hd + 12 >> 2] + 12 >> 2]);
  HEAP32[$hd + 112 >> 2] = 0;
  var $_0 = 0;
  var $_0;
  return $_0;
}
function _cipher_reset($c) {
  var $3$s2;
  var $2 = $c + 128 | 0;
  var $3$s2 = ($c + 12 | 0) >> 2;
  var $6 = HEAP32[HEAP32[$3$s2] + 20 >> 2];
  _memcpy($2, $2 + $6 | 0, $6);
  HEAP32[$c + 56 >> 2] = 0;
  _memset($c + 64 | 0, 0, HEAP32[HEAP32[$3$s2] + 12 >> 2]);
  _memset($c + 96 | 0, 0, HEAP32[HEAP32[$3$s2] + 12 >> 2]);
  _memset($c + 80 | 0, 0, HEAP32[HEAP32[$3$s2] + 12 >> 2]);
  return;
}
function _cipher_sync($c) {
  var $6$s2;
  if ((HEAP32[$c + 52 >> 2] & 2 | 0) == 0) {
    return;
  }
  var $6$s2 = ($c + 112 | 0) >> 2;
  var $7 = HEAP32[$6$s2];
  if (($7 | 0) == 0) {
    return;
  }
  var $11 = $c + 64 | 0;
  var $13 = $c + 12 | 0;
  _memmove($11 + $7 | 0, $11, HEAP32[HEAP32[$13 >> 2] + 12 >> 2] - $7 | 0, 1, 0);
  var $21 = HEAP32[$6$s2];
  _memcpy($11, HEAP32[HEAP32[$13 >> 2] + 12 >> 2] - $21 + $c + 96 | 0, $21);
  HEAP32[$6$s2] = 0;
  return;
}
function _disable_cipher_algo($algorithm) {
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  var $7 = __gcry_module_lookup_id(HEAP32[114791], $algorithm);
  if (($7 | 0) == 0) {
    var $18 = __gcry_ath_mutex_unlock(459160);
    return;
  }
  var $10 = $7 + 16 | 0;
  var $11 = HEAP32[$10 >> 2];
  if (($11 & 1 | 0) == 0) {
    HEAP32[$10 >> 2] = $11 | 1;
  }
  __gcry_module_release($7);
  var $18 = __gcry_ath_mutex_unlock(459160);
  return;
}
function __gcry_cipher_info($h, $cmd, $buffer, $nbytes) {
  return _gcry_error426(61);
}
function __gcry_cipher_algo_info($algo, $what, $buffer, $nbytes) {
  do {
    if (($what | 0) == 7) {
      if (($buffer | 0) != 0 | ($nbytes | 0) == 0) {
        var $err_0 = 12;
        break;
      }
      var $14 = _cipher_get_blocksize($algo);
      if (!(($14 | 0) != 0 & $14 >>> 0 < 1e4)) {
        var $err_0 = 12;
        break;
      }
      HEAP32[$nbytes >> 2] = $14;
      var $err_0 = 0;
    } else if (($what | 0) == 6) {
      if (($buffer | 0) != 0 | ($nbytes | 0) == 0) {
        var $err_0 = 12;
        break;
      }
      var $5 = _cipher_get_keylen($algo);
      if (!(($5 | 0) != 0 & $5 >>> 0 < 513)) {
        var $err_0 = 12;
        break;
      }
      HEAP32[$nbytes >> 2] = $5 >>> 3;
      var $err_0 = 0;
    } else if (($what | 0) == 8) {
      if (!(($buffer | 0) == 0 & ($nbytes | 0) == 0)) {
        var $err_0 = 45;
        break;
      }
      var $err_0 = _check_cipher_algo($algo);
    } else {
      var $err_0 = 61;
    }
  } while (0);
  var $err_0;
  return _gcry_error426($err_0);
}
function _check_cipher_algo($algorithm) {
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  var $7 = __gcry_module_lookup_id(HEAP32[114791], $algorithm);
  if (($7 | 0) == 0) {
    var $err_1 = 12;
    var $err_1;
    var $15 = __gcry_ath_mutex_unlock(459160);
    return $err_1;
  }
  var $_ = (HEAP32[$7 + 16 >> 2] & 1 | 0) == 0 ? 0 : 12;
  __gcry_module_release($7);
  var $err_1 = $_;
  var $err_1;
  var $15 = __gcry_ath_mutex_unlock(459160);
  return $err_1;
}
function __gcry_cipher_get_algo_keylen($algo) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $n = __stackBase__;
  if ((__gcry_cipher_algo_info($algo, 6, 0, $n) | 0) != 0) {
    HEAP32[$n >> 2] = 0;
  }
  STACKTOP = __stackBase__;
  return HEAP32[$n >> 2];
}
function __gcry_cipher_get_algo_blklen($algo) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $n = __stackBase__;
  if ((__gcry_cipher_algo_info($algo, 7, 0, $n) | 0) != 0) {
    HEAP32[$n >> 2] = 0;
  }
  STACKTOP = __stackBase__;
  return HEAP32[$n >> 2];
}
function __gcry_cipher_init() {
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  return 0;
}
function __gcry_cipher_list($list, $list_length) {
  __gcry_ath_mutex_lock(459160);
  __gcry_module_list(HEAP32[114791], $list, $list_length);
  __gcry_ath_mutex_unlock(459160);
  return 0;
}
function __gcry_cipher_selftest($algo, $extended, $report) {
  var $7$s2;
  var label = 0;
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  var $7 = __gcry_module_lookup_id(HEAP32[114791], $algo), $7$s2 = $7 >> 2;
  var $8 = ($7 | 0) != 0;
  do {
    if ($8) {
      if ((HEAP32[$7$s2 + 4] & 1 | 0) != 0) {
        label = 3660;
        break;
      }
      var $17 = HEAP32[$7$s2 + 3];
      __gcry_ath_mutex_unlock(459160);
      if (($17 | 0) == 0) {
        label = 3664;
        break;
      }
      var $22 = HEAP32[$17 >> 2];
      if (($22 | 0) == 0) {
        label = 3664;
        break;
      }
      var $ec_0 = FUNCTION_TABLE[$22]($algo, $extended, $report);
      break;
    } else {
      label = 3660;
    }
  } while (0);
  do {
    if (label == 3660) {
      __gcry_ath_mutex_unlock(459160);
      label = 3664;
      break;
    }
  } while (0);
  do {
    if (label == 3664) {
      if (($report | 0) == 0) {
        var $ec_0 = 12;
        break;
      }
      do {
        if ($8) {
          if ((HEAP32[$7$s2 + 4] & 1 | 0) == 0) {
            var $37 = 471548;
            break;
          } else {
            label = 3667;
            break;
          }
        } else {
          label = 3667;
        }
      } while (0);
      if (label == 3667) {
        var $37 = $8 ? 470200 : 468636;
      }
      var $37;
      FUNCTION_TABLE[$report](475960, $algo, 473156, $37);
      var $ec_0 = 12;
    }
  } while (0);
  var $ec_0;
  if (!$8) {
    var $43 = _gpg_error425($ec_0);
    return $43;
  }
  __gcry_ath_mutex_lock(459160);
  __gcry_module_release($7);
  __gcry_ath_mutex_unlock(459160);
  var $43 = _gpg_error425($ec_0);
  return $43;
}
__gcry_cipher_selftest["X"] = 1;
function _do_ecb_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $1 = $c + 12 | 0;
  var $4 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2];
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  if ((($inbuflen >>> 0) % ($4 >>> 0) | 0) != 0) {
    var $_0 = 139;
    var $_0;
    return $_0;
  }
  var $10 = Math.floor(($inbuflen >>> 0) / ($4 >>> 0));
  if (($10 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $13 = $c + 128 | 0;
  var $_023 = $inbuf;
  var $_014 = $outbuf;
  var $n_05 = 0;
  while (1) {
    var $n_05;
    var $_014;
    var $_023;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($13, $_014, $_023);
    var $20 = $n_05 + 1 | 0;
    if ($20 >>> 0 < $10 >>> 0) {
      var $_023 = $_023 + $4 | 0;
      var $_014 = $_014 + $4 | 0;
      var $n_05 = $20;
    } else {
      var $_0 = 0;
      break;
    }
  }
  var $_0;
  return $_0;
}
function _cipher_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var __stackBase__ = STACKTOP;
  var $2 = HEAP32[$c + 48 >> 2];
  L4454 : do {
    if (($2 | 0) == 5) {
      var $rc_0 = _do_ofb_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 4) {
      FUNCTION_TABLE[HEAP32[HEAP32[$c + 12 >> 2] + 36 >> 2]]($c + 128 | 0, $outbuf, $inbuf, $inbuflen);
      var $rc_0 = 0;
    } else if (($2 | 0) == 7) {
      var $rc_0 = _do_aeswrap_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 0) {
      do {
        if ((__gcry_fips_mode() | 0) == 0) {
          if ((__gcry_get_debug_flag(0) | 0) == 0) {
            break;
          }
          if (($inbuf | 0) == ($outbuf | 0)) {
            var $rc_0 = 0;
            break L4454;
          }
          _memmove($outbuf, $inbuf, $inbuflen, 1, 0);
          var $rc_0 = 0;
          break L4454;
        }
      } while (0);
      __gcry_fips_signal_error(479480, 1742, 494960, 0, 487004);
      var $rc_0 = 71;
    } else if (($2 | 0) == 6) {
      var $rc_0 = _do_ctr_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 3) {
      var $rc_0 = _do_cbc_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 1) {
      var $rc_0 = _do_ecb_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 2) {
      var $rc_0 = _do_cfb_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else {
      __gcry_log_fatal(484280, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt));
    }
  } while (0);
  var $rc_0;
  STACKTOP = __stackBase__;
  return $rc_0;
}
function _cipher_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var __stackBase__ = STACKTOP;
  var $2 = HEAP32[$c + 48 >> 2];
  L4471 : do {
    if (($2 | 0) == 7) {
      var $rc_0 = _do_aeswrap_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 3) {
      var $rc_0 = _do_cbc_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 4) {
      FUNCTION_TABLE[HEAP32[HEAP32[$c + 12 >> 2] + 40 >> 2]]($c + 128 | 0, $outbuf, $inbuf, $inbuflen);
      var $rc_0 = 0;
    } else if (($2 | 0) == 1) {
      var $rc_0 = _do_ecb_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 5) {
      var $rc_0 = _do_ofb_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 6) {
      var $rc_0 = _do_ctr_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else if (($2 | 0) == 0) {
      do {
        if ((__gcry_fips_mode() | 0) == 0) {
          if ((__gcry_get_debug_flag(0) | 0) == 0) {
            break;
          }
          if (($inbuf | 0) == ($outbuf | 0)) {
            var $rc_0 = 0;
            break L4471;
          }
          _memmove($outbuf, $inbuf, $inbuflen, 1, 0);
          var $rc_0 = 0;
          break L4471;
        }
      } while (0);
      __gcry_fips_signal_error(479480, 1834, 494976, 0, 487004);
      var $rc_0 = 71;
    } else if (($2 | 0) == 2) {
      var $rc_0 = _do_cfb_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
    } else {
      __gcry_log_fatal(486072, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt));
    }
  } while (0);
  var $rc_0;
  STACKTOP = __stackBase__;
  return $rc_0;
}
function __gcry_cipher_ctl($h, $cmd, $buffer, $buflen) {
  var $19$s2;
  var $8$s2;
  L4488 : do {
    if (($cmd | 0) == 3) {
      _cipher_sync($h);
      var $rc_0 = 0;
    } else if (($cmd | 0) == 12) {
      if (($buffer | 0) != 0 & ($h | 0) == 0 & ($buflen | 0) == 4) {
        _disable_cipher_algo(HEAP32[$buffer >> 2]);
        var $rc_0 = 0;
        break;
      }
      var $_0 = _gcry_error426(12);
      var $_0;
      return $_0;
    } else if (($cmd | 0) == 43) {
      var $rc_0 = _gpg_err_code451(__gcry_cipher_setctr($h, $buffer, $buflen));
    } else if (($cmd | 0) == 41) {
      var $8$s2 = ($h + 52 | 0) >> 2;
      var $9 = HEAP32[$8$s2];
      if (($buflen | 0) == 0) {
        HEAP32[$8$s2] = $9 & -5;
        var $rc_0 = 0;
        break;
      }
      if (($9 & 8 | 0) != 0) {
        var $rc_0 = 72;
        break;
      }
      HEAP32[$8$s2] = $9 | 4;
      var $rc_0 = 0;
    } else if (($cmd | 0) == 2) {
      _cipher_setiv($h, $buffer, $buflen);
      var $rc_0 = 0;
    } else if (($cmd | 0) == 1) {
      var $rc_0 = _cipher_setkey($h, $buffer, $buflen);
    } else if (($cmd | 0) == 62) {
      var $49 = $h + 12 | 0;
      var $52 = HEAP32[HEAP32[$49 >> 2] + 12 >> 2];
      if (($52 + 1 | 0) >>> 0 > $buflen >>> 0) {
        var $rc_0 = 66;
        break;
      }
      var $57 = HEAP32[$h + 112 >> 2];
      var $_ = ($57 | 0) == 0 ? $52 : $57;
      if ($_ >>> 0 > $52 >>> 0) {
        __gcry_assert_failed(486544, 479480, 2004, 495472);
      }
      HEAP8[$buffer] = $_ & 255;
      if (($_ | 0) == 0) {
        var $rc_0 = 0;
        break;
      }
      var $ivp_03 = $h + (HEAP32[HEAP32[$49 >> 2] + 12 >> 2] - $_) + 64 | 0;
      var $n_14 = $_;
      var $buffer_pn = $buffer;
      while (1) {
        var $buffer_pn;
        var $n_14;
        var $ivp_03;
        var $dst_05 = $buffer_pn + 1 | 0;
        var $71 = $n_14 - 1 | 0;
        HEAP8[$dst_05] = HEAP8[$ivp_03];
        if (($71 | 0) == 0) {
          var $rc_0 = 0;
          break L4488;
        } else {
          var $ivp_03 = $ivp_03 + 1 | 0;
          var $n_14 = $71;
          var $buffer_pn = $dst_05;
        }
      }
    } else if (($cmd | 0) == 42) {
      var $19$s2 = ($h + 52 | 0) >> 2;
      var $20 = HEAP32[$19$s2];
      if (($buflen | 0) == 0) {
        HEAP32[$19$s2] = $20 & -9;
        var $rc_0 = 0;
        break;
      }
      if (($20 & 4 | 0) != 0) {
        var $rc_0 = 72;
        break;
      }
      HEAP32[$19$s2] = $20 | 8;
      var $rc_0 = 0;
    } else if (($cmd | 0) == 4) {
      _cipher_reset($h);
      var $rc_0 = 0;
    } else if (($cmd | 0) == 61) {
      var $42 = HEAP32[HEAP32[$h + 16 >> 2] + 4 >> 2];
      if (($42 | 0) == 0) {
        var $rc_0 = 60;
        break;
      }
      var $rc_0 = FUNCTION_TABLE[$42]($h + 128 | 0, 1, 0, 0);
    } else {
      var $rc_0 = 61;
    }
  } while (0);
  var $rc_0;
  var $_0 = _gcry_error426($rc_0);
  var $_0;
  return $_0;
}
__gcry_cipher_ctl["X"] = 1;
function _cipher_get_keylen($algorithm) {
  var __stackBase__ = STACKTOP;
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  var $7 = __gcry_module_lookup_id(HEAP32[114791], $algorithm);
  if (($7 | 0) == 0) {
    __gcry_log_bug(465020, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
  }
  var $14 = HEAP32[HEAP32[$7 + 8 >> 2] + 16 >> 2];
  if (($14 | 0) == 0) {
    __gcry_log_bug(490276, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
  } else {
    __gcry_module_release($7);
    __gcry_ath_mutex_unlock(459160);
    STACKTOP = __stackBase__;
    return $14;
  }
}
function _cipher_get_blocksize($algorithm) {
  var __stackBase__ = STACKTOP;
  __gcry_ath_mutex_lock(459160);
  if (!HEAP8[457948]) {
    _cipher_register_default();
    HEAP8[457948] = 1;
  }
  __gcry_ath_mutex_unlock(459160);
  __gcry_ath_mutex_lock(459160);
  var $7 = __gcry_module_lookup_id(HEAP32[114791], $algorithm);
  if (($7 | 0) == 0) {
    __gcry_log_bug(465020, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
  }
  var $14 = HEAP32[HEAP32[$7 + 8 >> 2] + 12 >> 2];
  if (($14 | 0) == 0) {
    __gcry_log_bug(467012, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
  } else {
    __gcry_module_release($7);
    __gcry_ath_mutex_unlock(459160);
    STACKTOP = __stackBase__;
    return $14;
  }
}
function _do_cbc_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $1$s2;
  var $1$s2 = ($c + 12 | 0) >> 2;
  var $4 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
  var $5 = Math.floor(($inbuflen >>> 0) / ($4 >>> 0));
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  var $8 = ($inbuflen >>> 0) % ($4 >>> 0);
  var $9 = ($8 | 0) == 0;
  do {
    if (!$9) {
      if ($4 >>> 0 >= $inbuflen >>> 0) {
        var $_0 = 139;
        var $_0;
        return $_0;
      }
      if ((HEAP32[$c + 52 >> 2] & 4 | 0) == 0) {
        var $_0 = 139;
      } else {
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $18 = $c + 52 | 0;
  var $22 = $4 >>> 0 < $inbuflen >>> 0;
  if ((HEAP32[$18 >> 2] & 4 | 0) != 0 & $22) {
    _memcpy($c + 96 | 0, $c + 64 | 0, $4);
    var $nblocks_1 = ($9 ? -2 : -1) + $5 | 0;
  } else {
    var $nblocks_1 = $5;
  }
  var $nblocks_1;
  var $29 = HEAP32[$c + 40 >> 2];
  L4555 : do {
    if (($29 | 0) == 0) {
      if (($nblocks_1 | 0) == 0) {
        var $_1 = $outbuf;
        var $_13 = $inbuf;
        break;
      }
      var $32 = $c + 96 | 0;
      var $34 = $c + 128 | 0;
      var $36 = $c + 64 | 0;
      var $37 = ($4 | 0) == 0;
      var $n_021 = 0;
      var $_0222 = $inbuf;
      var $_0123 = $outbuf;
      while (1) {
        var $_0123;
        var $_0222;
        var $n_021;
        _memcpy($32, $_0222, $4);
        FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 32 >> 2]]($34, $_0123, $_0222);
        L4561 : do {
          if (!$37) {
            var $ivp_015 = $36;
            var $i_016 = 0;
            while (1) {
              var $i_016;
              var $ivp_015;
              var $52 = $_0123 + $i_016 | 0;
              HEAP8[$52] = HEAP8[$52] ^ HEAP8[$ivp_015];
              var $55 = $i_016 + 1 | 0;
              if (($55 | 0) == ($4 | 0)) {
                break L4561;
              } else {
                var $ivp_015 = $ivp_015 + 1 | 0;
                var $i_016 = $55;
              }
            }
          }
        } while (0);
        _memcpy($36, $32, $4);
        var $58 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
        var $59 = $_0222 + $58 | 0;
        var $60 = $_0123 + $58 | 0;
        var $61 = $n_021 + 1 | 0;
        if (($61 | 0) == ($nblocks_1 | 0)) {
          var $_1 = $60;
          var $_13 = $59;
          break L4555;
        } else {
          var $n_021 = $61;
          var $_0222 = $59;
          var $_0123 = $60;
        }
      }
    } else {
      FUNCTION_TABLE[$29]($c + 128 | 0, $c + 64 | 0, $outbuf, $inbuf, $nblocks_1);
      var $43 = $nblocks_1 * $4 & -1;
      var $_1 = $outbuf + $43 | 0;
      var $_13 = $inbuf + $43 | 0;
    }
  } while (0);
  var $_13;
  var $_1;
  if (!((HEAP32[$18 >> 2] & 4 | 0) != 0 & $22)) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_5 = $9 ? $4 : $8;
  var $66 = $c + 96 | 0;
  var $67 = $c + 64 | 0;
  var $68 = $67;
  var $69 = $67;
  _memcpy($66, $69, $4);
  _memcpy($69, $_13 + $4 | 0, $_5);
  var $75 = $c + 128 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 32 >> 2]]($75, $_1, $_13);
  L4569 : do {
    if (($_5 | 0) > 0) {
      var $ivp_110 = $69;
      var $i_111 = 0;
      while (1) {
        var $i_111;
        var $ivp_110;
        var $79 = $_1 + $i_111 | 0;
        HEAP8[$79] = HEAP8[$79] ^ HEAP8[$ivp_110];
        var $82 = $i_111 + 1 | 0;
        if (($82 | 0) == ($_5 | 0)) {
          break L4569;
        } else {
          var $ivp_110 = $ivp_110 + 1 | 0;
          var $i_111 = $82;
        }
      }
    }
  } while (0);
  _memcpy($_1 + $4 | 0, $_1, $_5);
  L4573 : do {
    if ($_5 >>> 0 < $4 >>> 0) {
      var $i_28 = $_5;
      while (1) {
        var $i_28;
        HEAP8[$68 + $i_28 | 0] = HEAP8[$_1 + $i_28 | 0];
        var $88 = $i_28 + 1 | 0;
        if (($88 | 0) == ($4 | 0)) {
          break L4573;
        } else {
          var $i_28 = $88;
        }
      }
    }
  } while (0);
  FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 32 >> 2]]($75, $_1, $69);
  if (($4 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  } else {
    var $ivp_26 = $66;
    var $i_37 = 0;
  }
  while (1) {
    var $i_37;
    var $ivp_26;
    var $95 = $_1 + $i_37 | 0;
    HEAP8[$95] = HEAP8[$95] ^ HEAP8[$ivp_26];
    var $98 = $i_37 + 1 | 0;
    if (($98 | 0) == ($4 | 0)) {
      var $_0 = 0;
      break;
    } else {
      var $ivp_26 = $ivp_26 + 1 | 0;
      var $i_37 = $98;
    }
  }
  var $_0;
  return $_0;
}
_do_cbc_decrypt["X"] = 1;
function _do_cfb_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $8$s2;
  var $1$s2;
  var label = 0;
  var $1$s2 = ($c + 12 | 0) >> 2;
  var $4 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
  var $5 = $4 << 1;
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  var $8$s2 = ($c + 112 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  if ($9 >>> 0 >= $inbuflen >>> 0) {
    if (($inbuflen | 0) == 0) {
      var $_0 = 0;
      var $_0;
      return $_0;
    }
    var $ivp_018 = $c + ($4 - $9) + 64 | 0;
    var $_01119 = $inbuflen;
    var $_0220 = $inbuf;
    var $_0121 = $outbuf;
    while (1) {
      var $_0121;
      var $_0220;
      var $_01119;
      var $ivp_018;
      var $18 = HEAP8[$_0220];
      HEAP8[$_0121] = HEAP8[$ivp_018] ^ $18;
      HEAP8[$ivp_018] = $18;
      var $23 = $_01119 - 1 | 0;
      HEAP32[$8$s2] = HEAP32[$8$s2] - 1 | 0;
      if (($23 | 0) == 0) {
        var $_0 = 0;
        break;
      } else {
        var $ivp_018 = $ivp_018 + 1 | 0;
        var $_01119 = $23;
        var $_0220 = $_0220 + 1 | 0;
        var $_0121 = $_0121 + 1 | 0;
      }
    }
    var $_0;
    return $_0;
  }
  L4595 : do {
    if (($9 | 0) == 0) {
      var $_2 = $outbuf;
      var $_24 = $inbuf;
      var $_112 = $inbuflen;
    } else {
      var $30 = $inbuflen - $9 | 0;
      if ((HEAP32[$8$s2] | 0) == 0) {
        var $_2 = $outbuf;
        var $_24 = $inbuf;
        var $_112 = $30;
        break;
      }
      var $ivp_123 = $c + ($4 - $9) + 64 | 0;
      var $_1324 = $inbuf;
      var $_125 = $outbuf;
      while (1) {
        var $_125;
        var $_1324;
        var $ivp_123;
        var $36 = $_1324 + 1 | 0;
        var $37 = HEAP8[$_1324];
        var $40 = $_125 + 1 | 0;
        HEAP8[$_125] = HEAP8[$ivp_123] ^ $37;
        HEAP8[$ivp_123] = $37;
        var $43 = HEAP32[$8$s2] - 1 | 0;
        HEAP32[$8$s2] = $43;
        if (($43 | 0) == 0) {
          var $_2 = $40;
          var $_24 = $36;
          var $_112 = $30;
          break L4595;
        } else {
          var $ivp_123 = $ivp_123 + 1 | 0;
          var $_1324 = $36;
          var $_125 = $40;
        }
      }
    }
  } while (0);
  var $_112;
  var $_24;
  var $_2;
  do {
    if ($_112 >>> 0 < $5 >>> 0) {
      label = 3795;
    } else {
      var $48 = HEAP32[$c + 32 >> 2];
      if (($48 | 0) == 0) {
        label = 3795;
        break;
      }
      var $57 = Math.floor(($_112 >>> 0) / ($4 >>> 0));
      FUNCTION_TABLE[$48]($c + 128 | 0, $c + 64 | 0, $_2, $_24, $57);
      var $62 = $57 * $4 & -1;
      var $_5 = $_2 + $62 | 0;
      var $_57 = $_24 + $62 | 0;
      var $_314 = $_112 - $62 | 0;
      break;
    }
  } while (0);
  L4604 : do {
    if (label == 3795) {
      if ($_112 >>> 0 < $5 >>> 0) {
        var $_5 = $_2;
        var $_57 = $_24;
        var $_314 = $_112;
        break;
      }
      var $52 = $c + 128 | 0;
      var $54 = $c + 64 | 0;
      var $55 = ($4 | 0) == 0;
      var $_21352 = $_112;
      var $_3553 = $_24;
      var $_354 = $_2;
      while (1) {
        var $_354;
        var $_3553;
        var $_21352;
        FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($52, $54, $54);
        if ($55) {
          var $_46_lcssa = $_3553;
          var $_4_lcssa = $_354;
        } else {
          var $scevgep70 = $_354 + $4 | 0;
          var $lftr_limit72 = $_354 + $4 | 0;
          var $ivp_242 = $54;
          var $_4643 = $_3553;
          var $_444 = $_354;
          while (1) {
            var $_444;
            var $_4643;
            var $ivp_242;
            var $72 = HEAP8[$_4643];
            var $75 = $_444 + 1 | 0;
            HEAP8[$_444] = HEAP8[$ivp_242] ^ $72;
            HEAP8[$ivp_242] = $72;
            if (($75 | 0) == ($lftr_limit72 | 0)) {
              break;
            } else {
              var $ivp_242 = $ivp_242 + 1 | 0;
              var $_4643 = $_4643 + 1 | 0;
              var $_444 = $75;
            }
          }
          var $_46_lcssa = $_3553 + $4 | 0;
          var $_4_lcssa = $scevgep70;
        }
        var $_4_lcssa;
        var $_46_lcssa;
        var $78 = $_21352 - $4 | 0;
        if ($78 >>> 0 < $5 >>> 0) {
          var $_5 = $_4_lcssa;
          var $_57 = $_46_lcssa;
          var $_314 = $78;
          break L4604;
        } else {
          var $_21352 = $78;
          var $_3553 = $_46_lcssa;
          var $_354 = $_4_lcssa;
        }
      }
    }
  } while (0);
  var $_314;
  var $_57;
  var $_5;
  if ($_314 >>> 0 < $4 >>> 0) {
    var $_7 = $_5;
    var $_79 = $_57;
    var $_415 = $_314;
  } else {
    var $84 = $c + 64 | 0;
    _memcpy($c + 96 | 0, $84, $4);
    FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($c + 128 | 0, $84, $84);
    if (($4 | 0) == 0) {
      var $_68_lcssa = $_57;
      var $_6_lcssa = $_5;
    } else {
      var $scevgep = $_5 + $4 | 0;
      var $lftr_limit = $_5 + $4 | 0;
      var $ivp_328 = $84;
      var $_6829 = $_57;
      var $_630 = $_5;
      while (1) {
        var $_630;
        var $_6829;
        var $ivp_328;
        var $93 = HEAP8[$_6829];
        var $96 = $_630 + 1 | 0;
        HEAP8[$_630] = HEAP8[$ivp_328] ^ $93;
        HEAP8[$ivp_328] = $93;
        if (($96 | 0) == ($lftr_limit | 0)) {
          break;
        } else {
          var $ivp_328 = $ivp_328 + 1 | 0;
          var $_6829 = $_6829 + 1 | 0;
          var $_630 = $96;
        }
      }
      var $_68_lcssa = $_57 + $4 | 0;
      var $_6_lcssa = $scevgep;
    }
    var $_6_lcssa;
    var $_68_lcssa;
    var $_7 = $_6_lcssa;
    var $_79 = $_68_lcssa;
    var $_415 = $_314 - $4 | 0;
  }
  var $_415;
  var $_79;
  var $_7;
  if (($_415 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $104 = $c + 64 | 0;
  _memcpy($c + 96 | 0, $104, $4);
  FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($c + 128 | 0, $104, $104);
  HEAP32[$8$s2] = $4 - $_415 | 0;
  var $ivp_436 = $104;
  var $_51637 = $_415;
  var $_81038 = $_79;
  var $_839 = $_7;
  while (1) {
    var $_839;
    var $_81038;
    var $_51637;
    var $ivp_436;
    var $113 = HEAP8[$_81038];
    HEAP8[$_839] = HEAP8[$ivp_436] ^ $113;
    HEAP8[$ivp_436] = $113;
    var $118 = $_51637 - 1 | 0;
    if (($118 | 0) == 0) {
      var $_0 = 0;
      break;
    } else {
      var $ivp_436 = $ivp_436 + 1 | 0;
      var $_51637 = $118;
      var $_81038 = $_81038 + 1 | 0;
      var $_839 = $_839 + 1 | 0;
    }
  }
  var $_0;
  return $_0;
}
_do_cfb_decrypt["X"] = 1;
function _do_ofb_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $7$s2;
  var $1$s2;
  var $1$s2 = ($c + 12 | 0) >> 2;
  var $4 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  var $7$s2 = ($c + 112 | 0) >> 2;
  var $8 = HEAP32[$7$s2];
  if ($8 >>> 0 >= $inbuflen >>> 0) {
    if (($inbuflen | 0) == 0) {
      var $_0 = 0;
      var $_0;
      return $_0;
    }
    var $_0711 = $inbuflen;
    var $_0212 = $inbuf;
    var $ivp_013 = $c + ($4 - $8) + 64 | 0;
    var $_0114 = $outbuf;
    while (1) {
      var $_0114;
      var $ivp_013;
      var $_0212;
      var $_0711;
      HEAP8[$_0114] = HEAP8[$_0212] ^ HEAP8[$ivp_013];
      var $22 = $_0711 - 1 | 0;
      HEAP32[$7$s2] = HEAP32[$7$s2] - 1 | 0;
      if (($22 | 0) == 0) {
        var $_0 = 0;
        break;
      } else {
        var $_0711 = $22;
        var $_0212 = $_0212 + 1 | 0;
        var $ivp_013 = $ivp_013 + 1 | 0;
        var $_0114 = $_0114 + 1 | 0;
      }
    }
    var $_0;
    return $_0;
  }
  L4644 : do {
    if (($8 | 0) == 0) {
      var $_2_ph = $outbuf;
      var $_24_ph = $inbuf;
      var $_18_ph = $inbuflen;
    } else {
      var $29 = $inbuflen - $8 | 0;
      if ((HEAP32[$7$s2] | 0) == 0) {
        var $_2_ph = $outbuf;
        var $_24_ph = $inbuf;
        var $_18_ph = $29;
        break;
      }
      var $_1316 = $inbuf;
      var $ivp_117 = $c + ($4 - $8) + 64 | 0;
      var $_118 = $outbuf;
      while (1) {
        var $_118;
        var $ivp_117;
        var $_1316;
        var $37 = $_1316 + 1 | 0;
        var $40 = $_118 + 1 | 0;
        HEAP8[$_118] = HEAP8[$_1316] ^ HEAP8[$ivp_117];
        var $42 = HEAP32[$7$s2] - 1 | 0;
        HEAP32[$7$s2] = $42;
        if (($42 | 0) == 0) {
          var $_2_ph = $40;
          var $_24_ph = $37;
          var $_18_ph = $29;
          break L4644;
        } else {
          var $_1316 = $37;
          var $ivp_117 = $ivp_117 + 1 | 0;
          var $_118 = $40;
        }
      }
    }
  } while (0);
  var $_18_ph;
  var $_24_ph;
  var $_2_ph;
  L4650 : do {
    if ($_18_ph >>> 0 < $4 >>> 0) {
      var $_18_lcssa = $_18_ph;
      var $_24_lcssa = $_24_ph;
      var $_2_lcssa = $_2_ph;
    } else {
      var $45 = $c + 96 | 0;
      var $47 = $c + 64 | 0;
      var $49 = $c + 128 | 0;
      var $50 = ($4 | 0) == 0;
      var $_1834 = $_18_ph;
      var $_2435 = $_24_ph;
      var $_236 = $_2_ph;
      while (1) {
        var $_236;
        var $_2435;
        var $_1834;
        _memcpy($45, $47, $4);
        FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($49, $47, $47);
        if ($50) {
          var $_35_lcssa = $_2435;
          var $_3_lcssa = $_236;
        } else {
          var $scevgep = $_236 + $4 | 0;
          var $lftr_limit = $_236 + $4 | 0;
          var $_3527 = $_2435;
          var $ivp_228 = $47;
          var $_329 = $_236;
          while (1) {
            var $_329;
            var $ivp_228;
            var $_3527;
            var $61 = $_329 + 1 | 0;
            HEAP8[$_329] = HEAP8[$_3527] ^ HEAP8[$ivp_228];
            if (($61 | 0) == ($lftr_limit | 0)) {
              break;
            } else {
              var $_3527 = $_3527 + 1 | 0;
              var $ivp_228 = $ivp_228 + 1 | 0;
              var $_329 = $61;
            }
          }
          var $_35_lcssa = $_2435 + $4 | 0;
          var $_3_lcssa = $scevgep;
        }
        var $_3_lcssa;
        var $_35_lcssa;
        var $63 = $_1834 - $4 | 0;
        if ($63 >>> 0 < $4 >>> 0) {
          var $_18_lcssa = $63;
          var $_24_lcssa = $_35_lcssa;
          var $_2_lcssa = $_3_lcssa;
          break L4650;
        } else {
          var $_1834 = $63;
          var $_2435 = $_35_lcssa;
          var $_236 = $_3_lcssa;
        }
      }
    }
  } while (0);
  var $_2_lcssa;
  var $_24_lcssa;
  var $_18_lcssa;
  if (($_18_lcssa | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $68 = $c + 64 | 0;
  _memcpy($c + 96 | 0, $68, $4);
  FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($c + 128 | 0, $68, $68);
  HEAP32[$7$s2] = $4 - $_18_lcssa | 0;
  var $_2922 = $_18_lcssa;
  var $_4623 = $_24_lcssa;
  var $ivp_324 = $68;
  var $_425 = $_2_lcssa;
  while (1) {
    var $_425;
    var $ivp_324;
    var $_4623;
    var $_2922;
    HEAP8[$_425] = HEAP8[$_4623] ^ HEAP8[$ivp_324];
    var $82 = $_2922 - 1 | 0;
    if (($82 | 0) == 0) {
      var $_0 = 0;
      break;
    } else {
      var $_2922 = $82;
      var $_4623 = $_4623 + 1 | 0;
      var $ivp_324 = $ivp_324 + 1 | 0;
      var $_425 = $_425 + 1 | 0;
    }
  }
  var $_0;
  return $_0;
}
_do_ofb_decrypt["X"] = 1;
function _do_ctr_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  return _do_ctr_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen);
}
function _do_aeswrap_decrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $t = __stackBase__;
  var $1 = $c + 12 | 0;
  if ((HEAP32[HEAP32[$1 >> 2] + 12 >> 2] | 0) != 16) {
    var $_0 = 139;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($outbuflen + 8 | 0) >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($inbuflen & 7 | 0) != 0 | $inbuflen >>> 0 < 24) {
    var $_0 = 45;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $14 = $c + 96 | 0;
  var $15 = $c + 80 | 0;
  var $16 = $inbuf;
  var $17 = $14;
  var $st$5$0 = $16 | 0;
  var $st$5$1 = $16 + 4 | 0;
  var $18$1 = HEAPU8[$st$5$1] | HEAPU8[$st$5$1 + 1] << 8 | HEAPU8[$st$5$1 + 2] << 16 | HEAPU8[$st$5$1 + 3] << 24 | 0;
  var $st$9$0 = $17 | 0;
  tempBigInt = HEAPU8[$st$5$0] | HEAPU8[$st$5$0 + 1] << 8 | HEAPU8[$st$5$0 + 2] << 16 | HEAPU8[$st$5$0 + 3] << 24 | 0;
  HEAP8[$st$9$0] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$st$9$0 + 1] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$st$9$0 + 2] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$st$9$0 + 3] = tempBigInt & 255;
  var $st$9$1 = $17 + 4 | 0;
  tempBigInt = $18$1;
  HEAP8[$st$9$1] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$st$9$1 + 1] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$st$9$1 + 2] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$st$9$1 + 3] = tempBigInt & 255;
  _memmove($outbuf, $inbuf + 8 | 0, $inbuflen - 8 | 0, 1, 0);
  var $21 = ($inbuflen >>> 3) - 1 | 0;
  var $22 = $21 * 6 & -1;
  HEAP8[$t + 7 | 0] = $22 & 255;
  HEAP8[$t + 6 | 0] = $22 >>> 8 & 255;
  HEAP8[$t + 5 | 0] = $22 >>> 16 & 255;
  HEAP8[$t + 4 | 0] = $22 >>> 24 & 255;
  var $34 = $15;
  HEAP8[$t + 3 | 0] = 0;
  HEAP8[$t + 2 | 0] = 0;
  HEAP8[$t + 1 | 0] = 0;
  HEAP8[$t | 0] = 0;
  var $39 = ($21 | 0) == 0;
  var $41 = $c + 88 | 0;
  var $43 = $c + 128 | 0;
  var $44 = $15 | 0;
  var $j_09 = 5;
  while (1) {
    var $j_09;
    L4680 : do {
      if (!$39) {
        var $i_07 = $21;
        while (1) {
          var $i_07;
          HEAP8[$34] = HEAP8[$t | 0] ^ HEAP8[$c + 96 | 0];
          HEAP8[$34 + 1 | 0] = HEAP8[$t + 1 | 0] ^ HEAP8[$c + 97 | 0];
          HEAP8[$34 + 2 | 0] = HEAP8[$t + 2 | 0] ^ HEAP8[$c + 98 | 0];
          HEAP8[$34 + 3 | 0] = HEAP8[$t + 3 | 0] ^ HEAP8[$c + 99 | 0];
          HEAP8[$34 + 4 | 0] = HEAP8[$t + 4 | 0] ^ HEAP8[$c + 100 | 0];
          HEAP8[$34 + 5 | 0] = HEAP8[$t + 5 | 0] ^ HEAP8[$c + 101 | 0];
          HEAP8[$34 + 6 | 0] = HEAP8[$t + 6 | 0] ^ HEAP8[$c + 102 | 0];
          HEAP8[$34 + 7 | 0] = HEAP8[$t + 7 | 0] ^ HEAP8[$c + 103 | 0];
          var $95 = $outbuf + (($i_07 << 3) - 8) | 0;
          var $st$60$0 = $95 | 0;
          var $st$60$1 = $95 + 4 | 0;
          var $96$1 = HEAPU8[$st$60$1] | HEAPU8[$st$60$1 + 1] << 8 | HEAPU8[$st$60$1 + 2] << 16 | HEAPU8[$st$60$1 + 3] << 24 | 0;
          var $st$64$0 = $41 | 0;
          tempBigInt = HEAPU8[$st$60$0] | HEAPU8[$st$60$0 + 1] << 8 | HEAPU8[$st$60$0 + 2] << 16 | HEAPU8[$st$60$0 + 3] << 24 | 0;
          HEAP8[$st$64$0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$64$0 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$64$0 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$64$0 + 3] = tempBigInt & 255;
          var $st$64$1 = $41 + 4 | 0;
          tempBigInt = $96$1;
          HEAP8[$st$64$1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$64$1 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$64$1 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$64$1 + 3] = tempBigInt & 255;
          FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($43, $34, $34);
          var $x_3 = 7;
          while (1) {
            var $x_3;
            if (($x_3 | 0) <= -1) {
              break;
            }
            var $103 = $t + $x_3 | 0;
            var $104 = HEAP8[$103];
            HEAP8[$103] = $104 - 1 & 255;
            if ($104 << 24 >> 24 == 0) {
              var $x_3 = $x_3 - 1 | 0;
            } else {
              break;
            }
          }
          var $st$0$0 = $44 | 0;
          var $st$0$1 = $44 + 4 | 0;
          var $109$1 = HEAPU8[$st$0$1] | HEAPU8[$st$0$1 + 1] << 8 | HEAPU8[$st$0$1 + 2] << 16 | HEAPU8[$st$0$1 + 3] << 24 | 0;
          var $st$4$0 = $17 | 0;
          tempBigInt = HEAPU8[$st$0$0] | HEAPU8[$st$0$0 + 1] << 8 | HEAPU8[$st$0$0 + 2] << 16 | HEAPU8[$st$0$0 + 3] << 24 | 0;
          HEAP8[$st$4$0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$4$0 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$4$0 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$4$0 + 3] = tempBigInt & 255;
          var $st$4$1 = $17 + 4 | 0;
          tempBigInt = $109$1;
          HEAP8[$st$4$1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$4$1 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$4$1 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$4$1 + 3] = tempBigInt & 255;
          var $st$8$0 = $41 | 0;
          var $st$8$1 = $41 + 4 | 0;
          var $110$1 = HEAPU8[$st$8$1] | HEAPU8[$st$8$1 + 1] << 8 | HEAPU8[$st$8$1 + 2] << 16 | HEAPU8[$st$8$1 + 3] << 24 | 0;
          var $st$12$0 = $95 | 0;
          tempBigInt = HEAPU8[$st$8$0] | HEAPU8[$st$8$0 + 1] << 8 | HEAPU8[$st$8$0 + 2] << 16 | HEAPU8[$st$8$0 + 3] << 24 | 0;
          HEAP8[$st$12$0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$12$0 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$12$0 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$12$0 + 3] = tempBigInt & 255;
          var $st$12$1 = $95 + 4 | 0;
          tempBigInt = $110$1;
          HEAP8[$st$12$1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$12$1 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$12$1 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$12$1 + 3] = tempBigInt & 255;
          var $111 = $i_07 - 1 | 0;
          if (($111 | 0) == 0) {
            break L4680;
          } else {
            var $i_07 = $111;
          }
        }
      }
    } while (0);
    if (($j_09 | 0) > 0) {
      var $j_09 = $j_09 - 1 | 0;
    } else {
      break;
    }
  }
  if ((HEAP32[$c + 56 >> 2] & 2 | 0) == 0) {
    var $x_4 = 0;
  } else {
    var $_0 = (_memcmp($14, $c + 64 | 0, 8) | 0) != 0 ? 10 : 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  while (1) {
    var $x_4;
    if (($x_4 | 0) >= 8) {
      var $_0 = 0;
      label = 3863;
      break;
    }
    if (HEAP8[$c + ($x_4 + 96) | 0] << 24 >> 24 == -90) {
      var $x_4 = $x_4 + 1 | 0;
    } else {
      var $_0 = 10;
      label = 3864;
      break;
    }
  }
  if (label == 3864) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 3863) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_do_aeswrap_decrypt["X"] = 1;
function _do_ctr_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $7$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $tmp = __stackBase__;
  var $1 = $c + 12 | 0;
  var $4 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2];
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $7$s2 = ($c + 112 | 0) >> 2;
  var $8 = HEAP32[$7$s2];
  if (($8 | 0) == 0) {
    var $_01 = $outbuf;
    var $_02 = $inbuf;
    var $_04 = $inbuflen;
  } else {
    if ($8 >>> 0 >= $4 >>> 0) {
      __gcry_assert_failed(485224, 479480, 1463, 494904);
    }
    L4707 : do {
      if (($inbuflen | 0) != 0 & (HEAP32[$7$s2] | 0) != 0) {
        var $i_07 = $4 - $8 | 0;
        var $n_08 = 0;
        var $19 = $inbuf;
        while (1) {
          var $19;
          var $n_08;
          var $i_07;
          HEAP8[$outbuf + $n_08 | 0] = HEAP8[$c + ($i_07 + 96) | 0] ^ HEAP8[$19];
          var $26 = HEAP32[$7$s2] - 1 | 0;
          HEAP32[$7$s2] = $26;
          var $27 = $n_08 + 1 | 0;
          var $31 = $inbuf + $27 | 0;
          if ($27 >>> 0 < $inbuflen >>> 0 & ($26 | 0) != 0) {
            var $i_07 = $i_07 + 1 | 0;
            var $n_08 = $27;
            var $19 = $31;
          } else {
            var $n_0_lcssa = $27;
            var $_lcssa = $31;
            break L4707;
          }
        }
      } else {
        var $n_0_lcssa = 0;
        var $_lcssa = $inbuf;
      }
    } while (0);
    var $_lcssa;
    var $n_0_lcssa;
    var $_01 = $outbuf + $n_0_lcssa | 0;
    var $_02 = $_lcssa;
    var $_04 = $inbuflen - $n_0_lcssa | 0;
  }
  var $_04;
  var $_02;
  var $_01;
  var $35 = Math.floor(($_04 >>> 0) / ($4 >>> 0));
  do {
    if (($35 | 0) == 0) {
      var $_1 = $_01;
      var $_13 = $_02;
      var $_15 = $_04;
    } else {
      var $39 = HEAP32[$c + 44 >> 2];
      if (($39 | 0) == 0) {
        var $_1 = $_01;
        var $_13 = $_02;
        var $_15 = $_04;
        break;
      }
      FUNCTION_TABLE[$39]($c + 128 | 0, $c + 80 | 0, $_01, $_02, $35);
      var $46 = $35 * $4 & -1;
      var $_1 = $_01 + $46 | 0;
      var $_13 = $_02 + $46 | 0;
      var $_15 = $_04 - $46 | 0;
    }
  } while (0);
  var $_15;
  var $_13;
  var $_1;
  if (($_15 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $53 = $c + 128 | 0;
  var $54 = $tmp | 0;
  var $55 = $c + 80 | 0;
  var $56 = $55;
  var $57 = $55;
  var $n_114 = 0;
  var $59 = 0;
  while (1) {
    var $59;
    var $n_114;
    L4722 : do {
      if (($59 | 0) == 0) {
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($53, $54, $57);
        var $i_1 = $4;
        while (1) {
          var $i_1;
          if (($i_1 | 0) <= 0) {
            break L4722;
          }
          var $68 = $i_1 - 1 | 0;
          var $69 = $56 + $68 | 0;
          var $71 = HEAP8[$69] + 1 & 255;
          HEAP8[$69] = $71;
          if ($71 << 24 >> 24 == 0) {
            var $i_1 = $68;
          } else {
            break L4722;
          }
        }
      }
    } while (0);
    HEAP8[$_1 + $n_114 | 0] = HEAP8[$tmp + $59 | 0] ^ HEAP8[$_13 + $n_114 | 0];
    var $79 = $n_114 + 1 | 0;
    var $80 = ($79 >>> 0) % ($4 >>> 0);
    if (($79 | 0) == ($_15 | 0)) {
      break;
    } else {
      var $n_114 = $79;
      var $59 = $80;
    }
  }
  var $82 = (($4 - $80 | 0) >>> 0) % ($4 >>> 0);
  HEAP32[$7$s2] = $82;
  if (($82 | 0) != 0) {
    _memcpy($c + ($80 + 96) | 0, $tmp + $80 | 0, $82);
  }
  HEAP8[$tmp | 0] = 0;
  HEAP8[$tmp + 1 | 0] = 0;
  HEAP8[$tmp + 2 | 0] = 0;
  HEAP8[$tmp + 3 | 0] = 0;
  HEAP8[$tmp + 4 | 0] = 0;
  HEAP8[$tmp + 5 | 0] = 0;
  HEAP8[$tmp + 6 | 0] = 0;
  HEAP8[$tmp + 7 | 0] = 0;
  HEAP8[$tmp + 8 | 0] = 0;
  HEAP8[$tmp + 9 | 0] = 0;
  HEAP8[$tmp + 10 | 0] = 0;
  HEAP8[$tmp + 11 | 0] = 0;
  HEAP8[$tmp + 12 | 0] = 0;
  HEAP8[$tmp + 13 | 0] = 0;
  HEAP8[$tmp + 14 | 0] = 0;
  HEAP8[$tmp + 15 | 0] = 0;
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_do_ctr_encrypt["X"] = 1;
function _dummy_setkey($c, $key, $keylen) {
  return 0;
}
function _gpg_err_make463($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function _do_ecb_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $1 = $c + 12 | 0;
  var $4 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2];
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  if ((($inbuflen >>> 0) % ($4 >>> 0) | 0) != 0) {
    var $_0 = 139;
    var $_0;
    return $_0;
  }
  var $10 = Math.floor(($inbuflen >>> 0) / ($4 >>> 0));
  if (($10 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $13 = $c + 128 | 0;
  var $_023 = $inbuf;
  var $_014 = $outbuf;
  var $n_05 = 0;
  while (1) {
    var $n_05;
    var $_014;
    var $_023;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($13, $_014, $_023);
    var $20 = $n_05 + 1 | 0;
    if ($20 >>> 0 < $10 >>> 0) {
      var $_023 = $_023 + $4 | 0;
      var $_014 = $_014 + $4 | 0;
      var $n_05 = $20;
    } else {
      var $_0 = 0;
      break;
    }
  }
  var $_0;
  return $_0;
}
function _do_cbc_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $6$s2;
  var $1$s2;
  var $c28 = $c;
  var $1$s2 = ($c + 12 | 0) >> 2;
  var $4 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
  var $5 = Math.floor(($inbuflen >>> 0) / ($4 >>> 0));
  var $6$s2 = ($c + 52 | 0) >> 2;
  var $7 = HEAP32[$6$s2];
  if ((($7 & 8 | 0) != 0 ? $4 : $inbuflen) >>> 0 > $outbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  var $13 = ($inbuflen >>> 0) % ($4 >>> 0);
  var $14 = ($13 | 0) == 0;
  do {
    if (!$14) {
      if ($4 >>> 0 >= $inbuflen >>> 0) {
        var $_0 = 139;
        var $_0;
        return $_0;
      }
      if (($7 & 4 | 0) == 0) {
        var $_0 = 139;
      } else {
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $21 = HEAP32[$6$s2];
  var $24 = $4 >>> 0 < $inbuflen >>> 0;
  var $or_cond6 = ($21 & 4 | 0) != 0 & $24 & $14;
  var $nblocks_0 = ($or_cond6 << 31 >> 31) + $5 | 0;
  var $27 = HEAP32[$c + 36 >> 2];
  do {
    if (($27 | 0) == 0) {
      if (($nblocks_0 | 0) == 0) {
        var $_2 = $outbuf;
        var $_13 = $inbuf;
        break;
      }
      var $31 = $c + 64 | 0;
      var $32 = ($4 | 0) == 0;
      var $34 = $c + 128 | 0;
      var $38 = $4 * (($or_cond6 << 31 >> 31) + Math.floor(($inbuflen >>> 0) / ($4 >>> 0))) & -1;
      var $n_021 = 0;
      var $_0222 = $inbuf;
      var $_0123 = $outbuf;
      while (1) {
        var $_0123;
        var $_0222;
        var $n_021;
        L35 : do {
          if (!$32) {
            var $ivp_015 = $31;
            var $i_016 = 0;
            while (1) {
              var $i_016;
              var $ivp_015;
              HEAP8[$_0123 + $i_016 | 0] = HEAP8[$ivp_015] ^ HEAP8[$_0222 + $i_016 | 0];
              var $59 = $i_016 + 1 | 0;
              if (($59 | 0) == ($4 | 0)) {
                break L35;
              } else {
                var $ivp_015 = $ivp_015 + 1 | 0;
                var $i_016 = $59;
              }
            }
          }
        } while (0);
        FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($34, $_0123, $_0123);
        _memcpy($31, $_0123, $4);
        if ((HEAP32[$6$s2] & 8 | 0) == 0) {
          var $_1 = $_0123 + $4 | 0;
        } else {
          var $_1 = $_0123;
        }
        var $_1;
        var $70 = $n_021 + 1 | 0;
        if ($70 >>> 0 < $nblocks_0 >>> 0) {
          var $n_021 = $70;
          var $_0222 = $_0222 + $4 | 0;
          var $_0123 = $_1;
        } else {
          break;
        }
      }
      var $_2 = $_1;
      var $_13 = $inbuf + $38 | 0;
    } else {
      FUNCTION_TABLE[$27]($c + 128 | 0, $c + 64 | 0, $outbuf, $inbuf, $nblocks_0, $21 & 8);
      var $45 = $nblocks_0 * $4 & -1;
      var $46 = $inbuf + $45 | 0;
      if ((HEAP32[$6$s2] & 8 | 0) != 0) {
        var $_2 = $outbuf;
        var $_13 = $46;
        break;
      }
      var $_2 = $outbuf + $45 | 0;
      var $_13 = $46;
    }
  } while (0);
  var $_13;
  var $_2;
  if (!((HEAP32[$6$s2] & 4 | 0) != 0 & $24)) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_ = $14 ? $4 : $13;
  var $77 = $_2 + -$4 | 0;
  var $79 = $c + 64 | 0;
  if (($_ | 0) > 0) {
    var $81 = $_ + 64 | 0;
    var $ivp_110 = $79;
    var $i_111 = 0;
    while (1) {
      var $i_111;
      var $ivp_110;
      var $85 = HEAP8[$_13 + $i_111 | 0];
      var $86 = $_2 + ($i_111 - $4) | 0;
      HEAP8[$_2 + $i_111 | 0] = HEAP8[$86];
      HEAP8[$86] = HEAP8[$ivp_110] ^ $85;
      var $92 = $i_111 + 1 | 0;
      if (($92 | 0) == ($_ | 0)) {
        break;
      } else {
        var $ivp_110 = $ivp_110 + 1 | 0;
        var $i_111 = $92;
      }
    }
    var $ivp_1_lcssa = $c28 + $81 | 0;
    var $i_1_lcssa = $_;
  } else {
    var $ivp_1_lcssa = $79;
    var $i_1_lcssa = 0;
  }
  var $i_1_lcssa;
  var $ivp_1_lcssa;
  L55 : do {
    if ($i_1_lcssa >>> 0 < $4 >>> 0) {
      var $ivp_28 = $ivp_1_lcssa;
      var $i_29 = $i_1_lcssa;
      while (1) {
        var $i_29;
        var $ivp_28;
        HEAP8[$_2 + ($i_29 - $4) | 0] = HEAP8[$ivp_28];
        var $96 = $i_29 + 1 | 0;
        if (($96 | 0) == ($4 | 0)) {
          break L55;
        } else {
          var $ivp_28 = $ivp_28 + 1 | 0;
          var $i_29 = $96;
        }
      }
    }
  } while (0);
  FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($c + 128 | 0, $77, $77);
  _memcpy($79, $77, $4);
  var $_0 = 0;
  var $_0;
  return $_0;
}
_do_cbc_encrypt["X"] = 1;
function _do_cfb_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $8$s2;
  var $1$s2;
  var label = 0;
  var $1$s2 = ($c + 12 | 0) >> 2;
  var $4 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
  var $5 = $4 << 1;
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  var $8$s2 = ($c + 112 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  if ($9 >>> 0 >= $inbuflen >>> 0) {
    if (($inbuflen | 0) == 0) {
      var $_0 = 0;
      var $_0;
      return $_0;
    }
    var $ivp_018 = $c + ($4 - $9) + 64 | 0;
    var $_01119 = $inbuflen;
    var $_0220 = $inbuf;
    var $_0121 = $outbuf;
    while (1) {
      var $_0121;
      var $_0220;
      var $_01119;
      var $ivp_018;
      var $21 = HEAP8[$ivp_018] ^ HEAP8[$_0220];
      HEAP8[$ivp_018] = $21;
      HEAP8[$_0121] = $21;
      var $23 = $_01119 - 1 | 0;
      HEAP32[$8$s2] = HEAP32[$8$s2] - 1 | 0;
      if (($23 | 0) == 0) {
        var $_0 = 0;
        break;
      } else {
        var $ivp_018 = $ivp_018 + 1 | 0;
        var $_01119 = $23;
        var $_0220 = $_0220 + 1 | 0;
        var $_0121 = $_0121 + 1 | 0;
      }
    }
    var $_0;
    return $_0;
  }
  L73 : do {
    if (($9 | 0) == 0) {
      var $_2 = $outbuf;
      var $_24 = $inbuf;
      var $_112 = $inbuflen;
    } else {
      var $30 = $inbuflen - $9 | 0;
      if ((HEAP32[$8$s2] | 0) == 0) {
        var $_2 = $outbuf;
        var $_24 = $inbuf;
        var $_112 = $30;
        break;
      }
      var $ivp_123 = $c + ($4 - $9) + 64 | 0;
      var $_1324 = $inbuf;
      var $_125 = $outbuf;
      while (1) {
        var $_125;
        var $_1324;
        var $ivp_123;
        var $36 = $_1324 + 1 | 0;
        var $40 = HEAP8[$ivp_123] ^ HEAP8[$_1324];
        HEAP8[$ivp_123] = $40;
        var $41 = $_125 + 1 | 0;
        HEAP8[$_125] = $40;
        var $43 = HEAP32[$8$s2] - 1 | 0;
        HEAP32[$8$s2] = $43;
        if (($43 | 0) == 0) {
          var $_2 = $41;
          var $_24 = $36;
          var $_112 = $30;
          break L73;
        } else {
          var $ivp_123 = $ivp_123 + 1 | 0;
          var $_1324 = $36;
          var $_125 = $41;
        }
      }
    }
  } while (0);
  var $_112;
  var $_24;
  var $_2;
  do {
    if ($_112 >>> 0 < $5 >>> 0) {
      label = 57;
    } else {
      var $48 = HEAP32[$c + 28 >> 2];
      if (($48 | 0) == 0) {
        label = 57;
        break;
      }
      var $57 = Math.floor(($_112 >>> 0) / ($4 >>> 0));
      FUNCTION_TABLE[$48]($c + 128 | 0, $c + 64 | 0, $_2, $_24, $57);
      var $62 = $57 * $4 & -1;
      var $_5 = $_2 + $62 | 0;
      var $_57 = $_24 + $62 | 0;
      var $_314 = $_112 - $62 | 0;
      break;
    }
  } while (0);
  L82 : do {
    if (label == 57) {
      if ($_112 >>> 0 < $5 >>> 0) {
        var $_5 = $_2;
        var $_57 = $_24;
        var $_314 = $_112;
        break;
      }
      var $52 = $c + 128 | 0;
      var $54 = $c + 64 | 0;
      var $55 = ($4 | 0) == 0;
      var $_21352 = $_112;
      var $_3553 = $_24;
      var $_354 = $_2;
      while (1) {
        var $_354;
        var $_3553;
        var $_21352;
        FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($52, $54, $54);
        if ($55) {
          var $_46_lcssa = $_3553;
          var $_4_lcssa = $_354;
        } else {
          var $scevgep65 = $_354 + $4 | 0;
          var $lftr_limit67 = $_354 + $4 | 0;
          var $ivp_242 = $54;
          var $_4643 = $_3553;
          var $_445 = $_354;
          while (1) {
            var $_445;
            var $_4643;
            var $ivp_242;
            var $75 = HEAP8[$ivp_242] ^ HEAP8[$_4643];
            HEAP8[$ivp_242] = $75;
            var $76 = $_445 + 1 | 0;
            HEAP8[$_445] = $75;
            if (($76 | 0) == ($lftr_limit67 | 0)) {
              break;
            } else {
              var $ivp_242 = $ivp_242 + 1 | 0;
              var $_4643 = $_4643 + 1 | 0;
              var $_445 = $76;
            }
          }
          var $_46_lcssa = $_3553 + $4 | 0;
          var $_4_lcssa = $scevgep65;
        }
        var $_4_lcssa;
        var $_46_lcssa;
        var $78 = $_21352 - $4 | 0;
        if ($78 >>> 0 < $5 >>> 0) {
          var $_5 = $_4_lcssa;
          var $_57 = $_46_lcssa;
          var $_314 = $78;
          break L82;
        } else {
          var $_21352 = $78;
          var $_3553 = $_46_lcssa;
          var $_354 = $_4_lcssa;
        }
      }
    }
  } while (0);
  var $_314;
  var $_57;
  var $_5;
  if ($_314 >>> 0 < $4 >>> 0) {
    var $_7 = $_5;
    var $_79 = $_57;
    var $_415 = $_314;
  } else {
    var $84 = $c + 64 | 0;
    _memcpy($c + 96 | 0, $84, $4);
    FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($c + 128 | 0, $84, $84);
    if (($4 | 0) == 0) {
      var $_68_lcssa = $_57;
      var $_6_lcssa = $_5;
    } else {
      var $scevgep = $_5 + $4 | 0;
      var $lftr_limit = $_5 + $4 | 0;
      var $ivp_328 = $84;
      var $_6829 = $_57;
      var $_630 = $_5;
      while (1) {
        var $_630;
        var $_6829;
        var $ivp_328;
        var $96 = HEAP8[$ivp_328] ^ HEAP8[$_6829];
        HEAP8[$ivp_328] = $96;
        var $97 = $_630 + 1 | 0;
        HEAP8[$_630] = $96;
        if (($97 | 0) == ($lftr_limit | 0)) {
          break;
        } else {
          var $ivp_328 = $ivp_328 + 1 | 0;
          var $_6829 = $_6829 + 1 | 0;
          var $_630 = $97;
        }
      }
      var $_68_lcssa = $_57 + $4 | 0;
      var $_6_lcssa = $scevgep;
    }
    var $_6_lcssa;
    var $_68_lcssa;
    var $_7 = $_6_lcssa;
    var $_79 = $_68_lcssa;
    var $_415 = $_314 - $4 | 0;
  }
  var $_415;
  var $_79;
  var $_7;
  if (($_415 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $104 = $c + 64 | 0;
  _memcpy($c + 96 | 0, $104, $4);
  FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($c + 128 | 0, $104, $104);
  HEAP32[$8$s2] = $4 - $_415 | 0;
  var $ivp_436 = $104;
  var $_51637 = $_415;
  var $_81038 = $_79;
  var $_839 = $_7;
  while (1) {
    var $_839;
    var $_81038;
    var $_51637;
    var $ivp_436;
    var $116 = HEAP8[$ivp_436] ^ HEAP8[$_81038];
    HEAP8[$ivp_436] = $116;
    HEAP8[$_839] = $116;
    var $118 = $_51637 - 1 | 0;
    if (($118 | 0) == 0) {
      var $_0 = 0;
      break;
    } else {
      var $ivp_436 = $ivp_436 + 1 | 0;
      var $_51637 = $118;
      var $_81038 = $_81038 + 1 | 0;
      var $_839 = $_839 + 1 | 0;
    }
  }
  var $_0;
  return $_0;
}
_do_cfb_encrypt["X"] = 1;
function _do_ofb_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var $7$s2;
  var $1$s2;
  var $1$s2 = ($c + 12 | 0) >> 2;
  var $4 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
  if ($outbuflen >>> 0 < $inbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    return $_0;
  }
  var $7$s2 = ($c + 112 | 0) >> 2;
  var $8 = HEAP32[$7$s2];
  if ($8 >>> 0 >= $inbuflen >>> 0) {
    if (($inbuflen | 0) == 0) {
      var $_0 = 0;
      var $_0;
      return $_0;
    }
    var $_0711 = $inbuflen;
    var $_0212 = $inbuf;
    var $ivp_013 = $c + ($4 - $8) + 64 | 0;
    var $_0114 = $outbuf;
    while (1) {
      var $_0114;
      var $ivp_013;
      var $_0212;
      var $_0711;
      HEAP8[$_0114] = HEAP8[$_0212] ^ HEAP8[$ivp_013];
      var $22 = $_0711 - 1 | 0;
      HEAP32[$7$s2] = HEAP32[$7$s2] - 1 | 0;
      if (($22 | 0) == 0) {
        var $_0 = 0;
        break;
      } else {
        var $_0711 = $22;
        var $_0212 = $_0212 + 1 | 0;
        var $ivp_013 = $ivp_013 + 1 | 0;
        var $_0114 = $_0114 + 1 | 0;
      }
    }
    var $_0;
    return $_0;
  }
  L122 : do {
    if (($8 | 0) == 0) {
      var $_2_ph = $outbuf;
      var $_24_ph = $inbuf;
      var $_18_ph = $inbuflen;
    } else {
      var $29 = $inbuflen - $8 | 0;
      if ((HEAP32[$7$s2] | 0) == 0) {
        var $_2_ph = $outbuf;
        var $_24_ph = $inbuf;
        var $_18_ph = $29;
        break;
      }
      var $_1316 = $inbuf;
      var $ivp_117 = $c + ($4 - $8) + 64 | 0;
      var $_118 = $outbuf;
      while (1) {
        var $_118;
        var $ivp_117;
        var $_1316;
        var $37 = $_1316 + 1 | 0;
        var $40 = $_118 + 1 | 0;
        HEAP8[$_118] = HEAP8[$_1316] ^ HEAP8[$ivp_117];
        var $42 = HEAP32[$7$s2] - 1 | 0;
        HEAP32[$7$s2] = $42;
        if (($42 | 0) == 0) {
          var $_2_ph = $40;
          var $_24_ph = $37;
          var $_18_ph = $29;
          break L122;
        } else {
          var $_1316 = $37;
          var $ivp_117 = $ivp_117 + 1 | 0;
          var $_118 = $40;
        }
      }
    }
  } while (0);
  var $_18_ph;
  var $_24_ph;
  var $_2_ph;
  L128 : do {
    if ($_18_ph >>> 0 < $4 >>> 0) {
      var $_18_lcssa = $_18_ph;
      var $_24_lcssa = $_24_ph;
      var $_2_lcssa = $_2_ph;
    } else {
      var $45 = $c + 96 | 0;
      var $47 = $c + 64 | 0;
      var $49 = $c + 128 | 0;
      var $50 = ($4 | 0) == 0;
      var $_1834 = $_18_ph;
      var $_2435 = $_24_ph;
      var $_236 = $_2_ph;
      while (1) {
        var $_236;
        var $_2435;
        var $_1834;
        _memcpy($45, $47, $4);
        FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($49, $47, $47);
        if ($50) {
          var $_35_lcssa = $_2435;
          var $_3_lcssa = $_236;
        } else {
          var $scevgep = $_236 + $4 | 0;
          var $lftr_limit = $_236 + $4 | 0;
          var $_3527 = $_2435;
          var $ivp_228 = $47;
          var $_329 = $_236;
          while (1) {
            var $_329;
            var $ivp_228;
            var $_3527;
            var $61 = $_329 + 1 | 0;
            HEAP8[$_329] = HEAP8[$_3527] ^ HEAP8[$ivp_228];
            if (($61 | 0) == ($lftr_limit | 0)) {
              break;
            } else {
              var $_3527 = $_3527 + 1 | 0;
              var $ivp_228 = $ivp_228 + 1 | 0;
              var $_329 = $61;
            }
          }
          var $_35_lcssa = $_2435 + $4 | 0;
          var $_3_lcssa = $scevgep;
        }
        var $_3_lcssa;
        var $_35_lcssa;
        var $63 = $_1834 - $4 | 0;
        if ($63 >>> 0 < $4 >>> 0) {
          var $_18_lcssa = $63;
          var $_24_lcssa = $_35_lcssa;
          var $_2_lcssa = $_3_lcssa;
          break L128;
        } else {
          var $_1834 = $63;
          var $_2435 = $_35_lcssa;
          var $_236 = $_3_lcssa;
        }
      }
    }
  } while (0);
  var $_2_lcssa;
  var $_24_lcssa;
  var $_18_lcssa;
  if (($_18_lcssa | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $68 = $c + 64 | 0;
  _memcpy($c + 96 | 0, $68, $4);
  FUNCTION_TABLE[HEAP32[HEAP32[$1$s2] + 28 >> 2]]($c + 128 | 0, $68, $68);
  HEAP32[$7$s2] = $4 - $_18_lcssa | 0;
  var $_2922 = $_18_lcssa;
  var $_4623 = $_24_lcssa;
  var $ivp_324 = $68;
  var $_425 = $_2_lcssa;
  while (1) {
    var $_425;
    var $ivp_324;
    var $_4623;
    var $_2922;
    HEAP8[$_425] = HEAP8[$_4623] ^ HEAP8[$ivp_324];
    var $82 = $_2922 - 1 | 0;
    if (($82 | 0) == 0) {
      var $_0 = 0;
      break;
    } else {
      var $_2922 = $82;
      var $_4623 = $_4623 + 1 | 0;
      var $ivp_324 = $ivp_324 + 1 | 0;
      var $_425 = $_425 + 1 | 0;
    }
  }
  var $_0;
  return $_0;
}
_do_ofb_encrypt["X"] = 1;
function _do_aeswrap_encrypt($c, $outbuf, $outbuflen, $inbuf, $inbuflen) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $t = __stackBase__;
  var $tmpcast = $t;
  var $1 = $c + 12 | 0;
  if ((HEAP32[HEAP32[$1 >> 2] + 12 >> 2] | 0) != 16) {
    var $_0 = 139;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($inbuflen + 8 | 0) >>> 0 > $outbuflen >>> 0) {
    var $_0 = 200;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($inbuflen & 7 | 0) != 0) {
    var $_0 = 45;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $13 = $inbuflen >>> 3;
  if ($inbuflen >>> 0 < 16) {
    var $_0 = 45;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $16 = $c + 80 | 0;
  var $17 = $16;
  if ((HEAP32[$c + 56 >> 2] & 2 | 0) == 0) {
    var $28 = $outbuf;
    var $st$3$0 = $28 | 0;
    tempBigInt = -1499027802;
    HEAP8[$st$3$0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$3$0 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$3$0 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$3$0 + 3] = tempBigInt & 255;
    var $st$3$1 = $28 + 4 | 0;
    tempBigInt = -1499027802;
    HEAP8[$st$3$1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$3$1 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$3$1 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$3$1 + 3] = tempBigInt & 255;
  } else {
    var $24 = $c + 64 | 0;
    var $25 = $outbuf;
    var $st$2$0 = $24 | 0;
    var $st$2$1 = $24 + 4 | 0;
    var $26$1 = HEAPU8[$st$2$1] | HEAPU8[$st$2$1 + 1] << 8 | HEAPU8[$st$2$1 + 2] << 16 | HEAPU8[$st$2$1 + 3] << 24 | 0;
    var $st$6$0 = $25 | 0;
    tempBigInt = HEAPU8[$st$2$0] | HEAPU8[$st$2$0 + 1] << 8 | HEAPU8[$st$2$0 + 2] << 16 | HEAPU8[$st$2$0 + 3] << 24 | 0;
    HEAP8[$st$6$0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$6$0 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$6$0 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$6$0 + 3] = tempBigInt & 255;
    var $st$6$1 = $25 + 4 | 0;
    tempBigInt = $26$1;
    HEAP8[$st$6$1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$6$1 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$6$1 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$6$1 + 3] = tempBigInt & 255;
  }
  _memmove($outbuf + 8 | 0, $inbuf, $inbuflen, 1, 0);
  HEAP32[$t >> 2] = 0;
  HEAP32[$t + 4 >> 2] = 0;
  var $31 = ($13 | 0) == 0;
  var $32 = $outbuf;
  var $33 = $16 | 0;
  var $35 = $c + 88 | 0;
  var $37 = $c + 128 | 0;
  var $j_04 = 0;
  while (1) {
    var $j_04;
    L164 : do {
      if (!$31) {
        var $i_02 = 1;
        while (1) {
          var $i_02;
          var $st$1$0 = $32 | 0;
          var $st$1$1 = $32 + 4 | 0;
          var $38$1 = HEAPU8[$st$1$1] | HEAPU8[$st$1$1 + 1] << 8 | HEAPU8[$st$1$1 + 2] << 16 | HEAPU8[$st$1$1 + 3] << 24 | 0;
          var $st$5$0 = $33 | 0;
          tempBigInt = HEAPU8[$st$1$0] | HEAPU8[$st$1$0 + 1] << 8 | HEAPU8[$st$1$0 + 2] << 16 | HEAPU8[$st$1$0 + 3] << 24 | 0;
          HEAP8[$st$5$0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$0 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$0 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$0 + 3] = tempBigInt & 255;
          var $st$5$1 = $33 + 4 | 0;
          tempBigInt = $38$1;
          HEAP8[$st$5$1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$1 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$1 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$5$1 + 3] = tempBigInt & 255;
          var $41 = ($i_02 << 3) + $outbuf | 0;
          var $st$12$0 = $41 | 0;
          var $st$12$1 = $41 + 4 | 0;
          var $42$1 = HEAPU8[$st$12$1] | HEAPU8[$st$12$1 + 1] << 8 | HEAPU8[$st$12$1 + 2] << 16 | HEAPU8[$st$12$1 + 3] << 24 | 0;
          var $st$16$0 = $35 | 0;
          tempBigInt = HEAPU8[$st$12$0] | HEAPU8[$st$12$0 + 1] << 8 | HEAPU8[$st$12$0 + 2] << 16 | HEAPU8[$st$12$0 + 3] << 24 | 0;
          HEAP8[$st$16$0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$16$0 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$16$0 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$16$0 + 3] = tempBigInt & 255;
          var $st$16$1 = $35 + 4 | 0;
          tempBigInt = $42$1;
          HEAP8[$st$16$1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$16$1 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$16$1 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$16$1 + 3] = tempBigInt & 255;
          FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($37, $17, $17);
          var $x_0 = 7;
          while (1) {
            var $x_0;
            if (($x_0 | 0) <= -1) {
              break;
            }
            var $49 = $tmpcast + $x_0 | 0;
            var $51 = HEAP8[$49] + 1 & 255;
            HEAP8[$49] = $51;
            if ($51 << 24 >> 24 == 0) {
              var $x_0 = $x_0 - 1 | 0;
            } else {
              break;
            }
          }
          HEAP8[$outbuf] = HEAP8[$t] ^ HEAP8[$17];
          HEAP8[$outbuf + 1 | 0] = HEAP8[$tmpcast + 1 | 0] ^ HEAP8[$17 + 1 | 0];
          HEAP8[$outbuf + 2 | 0] = HEAP8[$tmpcast + 2 | 0] ^ HEAP8[$17 + 2 | 0];
          HEAP8[$outbuf + 3 | 0] = HEAP8[$tmpcast + 3 | 0] ^ HEAP8[$17 + 3 | 0];
          HEAP8[$outbuf + 4 | 0] = HEAP8[$tmpcast + 4 | 0] ^ HEAP8[$17 + 4 | 0];
          HEAP8[$outbuf + 5 | 0] = HEAP8[$tmpcast + 5 | 0] ^ HEAP8[$17 + 5 | 0];
          HEAP8[$outbuf + 6 | 0] = HEAP8[$tmpcast + 6 | 0] ^ HEAP8[$17 + 6 | 0];
          HEAP8[$outbuf + 7 | 0] = HEAP8[$tmpcast + 7 | 0] ^ HEAP8[$17 + 7 | 0];
          var $st$54$0 = $35 | 0;
          var $st$54$1 = $35 + 4 | 0;
          var $100$1 = HEAPU8[$st$54$1] | HEAPU8[$st$54$1 + 1] << 8 | HEAPU8[$st$54$1 + 2] << 16 | HEAPU8[$st$54$1 + 3] << 24 | 0;
          var $st$58$0 = $41 | 0;
          tempBigInt = HEAPU8[$st$54$0] | HEAPU8[$st$54$0 + 1] << 8 | HEAPU8[$st$54$0 + 2] << 16 | HEAPU8[$st$54$0 + 3] << 24 | 0;
          HEAP8[$st$58$0] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$58$0 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$58$0 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$58$0 + 3] = tempBigInt & 255;
          var $st$58$1 = $41 + 4 | 0;
          tempBigInt = $100$1;
          HEAP8[$st$58$1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$58$1 + 1] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$58$1 + 2] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$st$58$1 + 3] = tempBigInt & 255;
          var $101 = $i_02 + 1 | 0;
          if ($101 >>> 0 > $13 >>> 0) {
            break L164;
          } else {
            var $i_02 = $101;
          }
        }
      }
    } while (0);
    var $103 = $j_04 + 1 | 0;
    if (($103 | 0) == 6) {
      var $_0 = 0;
      break;
    } else {
      var $j_04 = $103;
    }
  }
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_do_aeswrap_encrypt["X"] = 1;
function _gcry_cipher_lookup_func_name($spec, $data) {
  var $3 = HEAP32[$spec + 4 >> 2];
  var $7 = (_strcasecmp($data, HEAP32[$spec >> 2]) | 0) == 0;
  var $8 = $7 & 1;
  if (($3 | 0) == 0) {
    var $ret_1 = $8;
    var $ret_1;
    return $ret_1;
  }
  var $10 = HEAP32[$3 >> 2];
  if (($10 | 0) != 0 & ($7 ^ 1)) {
    var $i_02 = 0;
    var $13 = $10;
  } else {
    var $ret_1 = $8;
    var $ret_1;
    return $ret_1;
  }
  while (1) {
    var $13;
    var $i_02;
    var $15 = (_strcasecmp($data, $13) | 0) == 0;
    var $16 = $i_02 + 1 | 0;
    var $18 = HEAP32[$3 + ($16 << 2) >> 2];
    if (($18 | 0) != 0 & ($15 ^ 1)) {
      var $i_02 = $16;
      var $13 = $18;
    } else {
      break;
    }
  }
  var $ret_1 = $15 & 1;
  var $ret_1;
  return $ret_1;
}
function _gcry_cipher_lookup_oid($oid) {
  return __gcry_module_lookup(HEAP32[114791], $oid, 16);
}
function _gcry_cipher_lookup_func_oid($spec, $data) {
  var $3 = HEAP32[$spec + 8 >> 2];
  if (($3 | 0) == 0) {
    var $ret_2 = 0;
    var $ret_2;
    return $ret_2;
  }
  var $6 = HEAP32[$3 >> 2];
  if (($6 | 0) == 0) {
    var $ret_2 = 0;
    var $ret_2;
    return $ret_2;
  } else {
    var $ret_01 = 0;
    var $i_02 = 0;
    var $8 = $6;
  }
  while (1) {
    var $8;
    var $i_02;
    var $ret_01;
    var $_ret_0 = (_strcasecmp($data, $8) | 0) == 0 ? 1 : $ret_01;
    var $11 = $i_02 + 1 | 0;
    var $13 = HEAP32[$3 + ($11 << 3) >> 2];
    if (($13 | 0) != 0 & ($_ret_0 | 0) == 0) {
      var $ret_01 = $_ret_0;
      var $i_02 = $11;
      var $8 = $13;
    } else {
      var $ret_2 = $_ret_0;
      break;
    }
  }
  var $ret_2;
  return $ret_2;
}
function _gcry_err_make462($code) {
  return _gpg_err_make463(32, $code);
}
function _do_des_setkey($context, $key, $keylen) {
  if (($keylen | 0) != 8) {
    var $_0 = 44;
    var $_0;
    return $_0;
  }
  _des_setkey($context, $key);
  var $5 = (_is_weak_key($key) | 0) == 0;
  __gcry_burn_stack(64);
  var $_0 = $5 ? 0 : 43;
  var $_0;
  return $_0;
}
function _do_des_encrypt($context, $outbuf, $inbuf) {
  _des_ecb_crypt($context, $inbuf, $outbuf, 0);
  __gcry_burn_stack(32);
  return;
}
function _do_des_decrypt($context, $outbuf, $inbuf) {
  _des_ecb_crypt($context, $inbuf, $outbuf, 1);
  __gcry_burn_stack(32);
  return;
}
function _do_tripledes_set_extra_info($context, $what, $buffer, $buflen) {
  if (($what | 0) == 1) {
    HEAP32[$context + 768 >> 2] = 1;
    var $ec_0 = 0;
  } else {
    var $ec_0 = 61;
  }
  var $ec_0;
  return $ec_0;
}
function _do_tripledes_setkey($context, $key, $keylen) {
  if (($keylen | 0) != 24) {
    var $_0 = 44;
    var $_0;
    return $_0;
  }
  var $4 = $key + 8 | 0;
  var $5 = $key + 16 | 0;
  _tripledes_set3keys($context, $key, $4, $5);
  L209 : do {
    if ((HEAP32[$context + 768 >> 2] | 0) == 0) {
      do {
        if ((_is_weak_key($key) | 0) == 0) {
          if ((_is_weak_key($4) | 0) != 0) {
            break;
          }
          if ((_is_weak_key($5) | 0) == 0) {
            break L209;
          }
        }
      } while (0);
      __gcry_burn_stack(64);
      var $_0 = 43;
      var $_0;
      return $_0;
    }
  } while (0);
  __gcry_burn_stack(64);
  var $_0 = 0;
  var $_0;
  return $_0;
}
function _do_tripledes_encrypt($context, $outbuf, $inbuf) {
  _tripledes_ecb_crypt($context, $inbuf, $outbuf, 0);
  __gcry_burn_stack(32);
  return;
}
function _do_tripledes_decrypt($context, $outbuf, $inbuf) {
  _tripledes_ecb_crypt($context, $inbuf, $outbuf, 1);
  __gcry_burn_stack(32);
  return;
}
function _run_selftests($algo, $extended, $report) {
  if (($algo | 0) == 2) {
    var $ec_0 = _selftest_fips($report);
  } else {
    var $ec_0 = 12;
  }
  var $ec_0;
  return $ec_0;
}
function _selftest_fips($report) {
  var $1 = _selftest();
  do {
    if (($1 | 0) == 0) {
      var $_0 = 0;
    } else {
      if (($report | 0) == 0) {
        var $_0 = 50;
        break;
      }
      FUNCTION_TABLE[$report](475776, 2, 478956, $1);
      var $_0 = 50;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _selftest() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2292 | 0;
  var $key = __stackBase__;
  var $input = __stackBase__ + 8;
  var $result = __stackBase__ + 16;
  var $temp1 = __stackBase__ + 24;
  var $temp3 = __stackBase__ + 40;
  var $input2 = __stackBase__ + 304;
  var $key1 = __stackBase__ + 312;
  var $key2 = __stackBase__ + 320;
  var $result3 = __stackBase__ + 328;
  var $des3 = __stackBase__ + 336;
  var $testdata = __stackBase__ + 1108;
  var $result4 = __stackBase__ + 1508;
  var $des36 = __stackBase__ + 1516;
  var $h = __stackBase__ + 2288;
  var $st$18$0 = $key | 0;
  HEAP32[$st$18$0 >> 2] = 1431655765;
  var $st$18$1 = $key + 4 | 0;
  HEAP32[$st$18$1 >> 2] = 1431655765;
  HEAP32[$input >> 2] = -1;
  HEAP32[$input + 4 >> 2] = -1;
  HEAP32[$result >> 2] = -1180864988;
  HEAP32[$result + 4 >> 2] = 439898309;
  var $1 = __stackBase__ + 48 | 0;
  var $2 = $key;
  var $3 = $input;
  var $4 = $temp1;
  var $5 = __stackBase__ + 32 | 0;
  var $6 = $temp3;
  var $i_012 = 0;
  while (1) {
    var $i_012;
    _des_setkey($1, $2);
    _des_ecb_crypt($1, $3, $4, 0);
    _des_ecb_crypt($1, $4, $5, 0);
    _des_setkey($1, $5);
    _des_ecb_crypt($1, $4, $6, 1);
    var $8$1 = HEAP32[$temp3 + 4 >> 2];
    HEAP32[$key >> 2] = HEAP32[$temp3 >> 2];
    HEAP32[$key + 4 >> 2] = $8$1;
    var $st$14$0 = $temp1 | 0;
    var $st$14$1 = $temp1 + 4 | 0;
    var $9$1 = HEAP32[$st$14$1 >> 2];
    var $st$18$0 = $input | 0;
    HEAP32[$st$18$0 >> 2] = HEAP32[$st$14$0 >> 2];
    var $st$18$1 = $input + 4 | 0;
    HEAP32[$st$18$1 >> 2] = $9$1;
    var $10 = $i_012 + 1 | 0;
    if (($10 | 0) == 64) {
      break;
    } else {
      var $i_012 = $10;
    }
  }
  if ((_memcmp($temp3, $result, 8) | 0) != 0) {
    var $_0 = 473072;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$input2 >> 2] = -1732584194;
  HEAP32[$input2 + 4 >> 2] = 271733878;
  HEAP32[$key1 >> 2] = 2018915346;
  HEAP32[$key1 + 4 >> 2] = -253838182;
  var $st$14$0 = $key2 | 0;
  HEAP32[$st$14$0 >> 2] = 1144201745;
  var $st$14$1 = $key2 + 4 | 0;
  HEAP32[$st$14$1 >> 2] = -573789441;
  HEAP32[$result3 >> 2] = 591083643;
  HEAP32[$result3 + 4 >> 2] = -752452190;
  var $17 = $des3 | 0;
  var $18 = $key1;
  var $19 = $key2;
  var $20 = $input2;
  var $i1_011 = 0;
  while (1) {
    var $i1_011;
    _tripledes_set2keys($17, $18, $19);
    _tripledes_ecb_crypt($17, $20, $18, 0);
    _tripledes_ecb_crypt($17, $20, $19, 1);
    _tripledes_set3keys($17, $18, $20, $19);
    _tripledes_ecb_crypt($17, $20, $20, 0);
    var $22 = $i1_011 + 1 | 0;
    if (($22 | 0) == 16) {
      break;
    } else {
      var $i1_011 = $22;
    }
  }
  if ((_memcmp($input2, $result3, 8) | 0) != 0) {
    var $_0 = 468528;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _memcpy($testdata | 0, 414852, 400);
  var $30 = $des36 | 0;
  var $31 = $result4 | 0;
  var $i5_0 = 0;
  while (1) {
    var $i5_0;
    if ($i5_0 >>> 0 >= 10) {
      label = 182;
      break;
    }
    _tripledes_set3keys($30, $testdata + $i5_0 * 40 | 0, $testdata + $i5_0 * 40 + 8 | 0, $testdata + $i5_0 * 40 + 16 | 0);
    var $38 = $testdata + $i5_0 * 40 + 24 | 0;
    _tripledes_ecb_crypt($30, $38, $31, 0);
    var $39 = $testdata + $i5_0 * 40 + 32 | 0;
    if ((_memcmp($39, $31, 8) | 0) != 0) {
      var $_0 = 466864;
      label = 190;
      break;
    }
    _tripledes_ecb_crypt($30, $39, $31, 1);
    if ((_memcmp($38, $31, 8) | 0) == 0) {
      var $i5_0 = $i5_0 + 1 | 0;
    } else {
      var $_0 = 464972;
      label = 189;
      break;
    }
  }
  if (label == 182) {
    if ((__gcry_md_open($h, 2, 0) | 0) != 0) {
      var $_0 = 490256;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    var $49 = HEAP32[$h >> 2];
    var $i7_08 = 0;
    while (1) {
      var $i7_08;
      __gcry_md_write($49, ($i7_08 << 3) + 409800 | 0, 8);
      var $52 = $i7_08 + 1 | 0;
      if (($52 | 0) == 64) {
        break;
      } else {
        var $i7_08 = $52;
      }
    }
    var $55 = _memcmp(__gcry_md_read($49, 2), 409780, 20);
    __gcry_md_close(HEAP32[$h >> 2]);
    if (($55 | 0) == 0) {
      var $i7_1 = 0;
    } else {
      var $_0 = 489156;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    while (1) {
      var $i7_1;
      if (($i7_1 | 0) >= 64) {
        var $_0 = 0;
        label = 194;
        break;
      }
      if ((_is_weak_key(($i7_1 << 3) + 409800 | 0) | 0) == 0) {
        var $_0 = 487644;
        label = 195;
        break;
      } else {
        var $i7_1 = $i7_1 + 1 | 0;
      }
    }
    if (label == 194) {
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else if (label == 195) {
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } else if (label == 189) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 190) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_selftest["X"] = 1;
function _des_setkey($ctx, $key) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  do {
    if ((__gcry_fips_mode() | 0) != 0 | HEAP8[455264]) {
      label = 200;
    } else {
      HEAP8[455264] = 1;
      var $4 = _selftest();
      HEAP32[114484] = $4;
      if (($4 | 0) == 0) {
        break;
      }
      __gcry_log_error(486984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
      label = 200;
      break;
    }
  } while (0);
  do {
    if (label == 200) {
      if ((HEAP32[114484] | 0) == 0) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  _des_key_schedule($key, $ctx | 0);
  __gcry_burn_stack(32);
  var $i_01 = 0;
  while (1) {
    var $i_01;
    HEAP32[$ctx + ($i_01 << 2) + 128 >> 2] = HEAP32[$ctx + (30 - $i_01 << 2) >> 2];
    HEAP32[$ctx + (($i_01 | 1) << 2) + 128 >> 2] = HEAP32[$ctx + (31 - $i_01 << 2) >> 2];
    var $20 = $i_01 + 2 | 0;
    if (($20 | 0) < 32) {
      var $i_01 = $20;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _des_ecb_crypt($ctx, $from, $to, $mode) {
  var $4$s2;
  var $4$s2 = (($mode | 0) == 0 ? $ctx | 0 : $ctx + 128 | 0) >> 2;
  var $21 = HEAPU8[$from + 1 | 0] << 16 | HEAPU8[$from] << 24 | HEAPU8[$from + 3 | 0] | HEAPU8[$from + 2 | 0] << 8;
  var $39 = HEAPU8[$from + 5 | 0] << 16 | HEAPU8[$from + 4 | 0] << 24 | HEAPU8[$from + 7 | 0] | HEAPU8[$from + 6 | 0] << 8;
  var $42 = ($39 ^ $21 >>> 4) & 252645135;
  var $43 = $42 ^ $39;
  var $45 = $42 << 4 ^ $21;
  var $47 = $45 >>> 16 ^ $43 & 65535;
  var $48 = $47 ^ $43;
  var $50 = $47 << 16 ^ $45;
  var $53 = ($48 >>> 2 ^ $50) & 858993459;
  var $54 = $53 ^ $50;
  var $56 = $53 << 2 ^ $48;
  var $59 = ($56 >>> 8 ^ $54) & 16711935;
  var $60 = $59 ^ $54;
  var $62 = $59 << 8 ^ $56;
  var $63 = $62 << 1;
  var $67 = ($63 ^ $60) & -1431655766;
  var $68 = $67 ^ ($63 | $62 >>> 31);
  var $69 = $67 ^ $60;
  var $75 = $68 ^ HEAP32[$4$s2];
  var $96 = ($68 << 28 | $68 >>> 4) ^ HEAP32[$4$s2 + 1];
  var $119 = HEAP32[(($75 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($75 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($75 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($75 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($96 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($96 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($96 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($96 >>> 24 & 63) << 2) + 426908 >> 2] ^ ($69 << 1 | $69 >>> 31);
  var $122 = $119 ^ HEAP32[$4$s2 + 2];
  var $143 = ($119 << 28 | $119 >>> 4) ^ HEAP32[$4$s2 + 3];
  var $166 = HEAP32[(($122 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($122 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($122 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($122 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($143 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($143 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($143 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($143 >>> 24 & 63) << 2) + 426908 >> 2] ^ $68;
  var $169 = $166 ^ HEAP32[$4$s2 + 4];
  var $190 = ($166 << 28 | $166 >>> 4) ^ HEAP32[$4$s2 + 5];
  var $213 = HEAP32[(($169 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($169 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($169 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($169 >>> 24 & 63) << 2) + 424604 >> 2] ^ $119 ^ HEAP32[(($190 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($190 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($190 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($190 >>> 24 & 63) << 2) + 426908 >> 2];
  var $216 = $213 ^ HEAP32[$4$s2 + 6];
  var $237 = HEAP32[$4$s2 + 7] ^ ($213 << 28 | $213 >>> 4);
  var $260 = HEAP32[(($216 & 63) << 2) + 416924 >> 2] ^ $166 ^ HEAP32[(($216 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($216 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($216 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($237 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($237 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($237 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($237 >>> 24 & 63) << 2) + 426908 >> 2];
  var $263 = $260 ^ HEAP32[$4$s2 + 8];
  var $284 = HEAP32[$4$s2 + 9] ^ ($260 << 28 | $260 >>> 4);
  var $307 = HEAP32[(($263 & 63) << 2) + 416924 >> 2] ^ $213 ^ HEAP32[(($263 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($263 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($263 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($284 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($284 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($284 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($284 >>> 24 & 63) << 2) + 426908 >> 2];
  var $310 = $307 ^ HEAP32[$4$s2 + 10];
  var $331 = HEAP32[$4$s2 + 11] ^ ($307 << 28 | $307 >>> 4);
  var $354 = HEAP32[(($310 & 63) << 2) + 416924 >> 2] ^ $260 ^ HEAP32[(($310 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($310 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($310 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($331 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($331 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($331 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($331 >>> 24 & 63) << 2) + 426908 >> 2];
  var $357 = $354 ^ HEAP32[$4$s2 + 12];
  var $378 = HEAP32[$4$s2 + 13] ^ ($354 << 28 | $354 >>> 4);
  var $401 = HEAP32[(($357 & 63) << 2) + 416924 >> 2] ^ $307 ^ HEAP32[(($357 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($357 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($357 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($378 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($378 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($378 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($378 >>> 24 & 63) << 2) + 426908 >> 2];
  var $404 = $401 ^ HEAP32[$4$s2 + 14];
  var $425 = HEAP32[$4$s2 + 15] ^ ($401 << 28 | $401 >>> 4);
  var $448 = HEAP32[(($404 & 63) << 2) + 416924 >> 2] ^ $354 ^ HEAP32[(($404 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($404 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($404 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($425 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($425 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($425 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($425 >>> 24 & 63) << 2) + 426908 >> 2];
  var $451 = $448 ^ HEAP32[$4$s2 + 16];
  var $472 = HEAP32[$4$s2 + 17] ^ ($448 << 28 | $448 >>> 4);
  var $495 = HEAP32[(($451 & 63) << 2) + 416924 >> 2] ^ $401 ^ HEAP32[(($451 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($451 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($451 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($472 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($472 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($472 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($472 >>> 24 & 63) << 2) + 426908 >> 2];
  var $498 = $495 ^ HEAP32[$4$s2 + 18];
  var $519 = HEAP32[$4$s2 + 19] ^ ($495 << 28 | $495 >>> 4);
  var $542 = HEAP32[(($498 & 63) << 2) + 416924 >> 2] ^ $448 ^ HEAP32[(($498 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($498 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($498 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($519 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($519 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($519 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($519 >>> 24 & 63) << 2) + 426908 >> 2];
  var $545 = $542 ^ HEAP32[$4$s2 + 20];
  var $566 = HEAP32[$4$s2 + 21] ^ ($542 << 28 | $542 >>> 4);
  var $589 = HEAP32[(($545 & 63) << 2) + 416924 >> 2] ^ $495 ^ HEAP32[(($545 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($545 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($545 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($566 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($566 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($566 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($566 >>> 24 & 63) << 2) + 426908 >> 2];
  var $592 = $589 ^ HEAP32[$4$s2 + 22];
  var $613 = HEAP32[$4$s2 + 23] ^ ($589 << 28 | $589 >>> 4);
  var $636 = HEAP32[(($592 & 63) << 2) + 416924 >> 2] ^ $542 ^ HEAP32[(($592 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($592 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($592 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($613 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($613 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($613 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($613 >>> 24 & 63) << 2) + 426908 >> 2];
  var $639 = $636 ^ HEAP32[$4$s2 + 24];
  var $660 = HEAP32[$4$s2 + 25] ^ ($636 << 28 | $636 >>> 4);
  var $683 = HEAP32[(($639 & 63) << 2) + 416924 >> 2] ^ $589 ^ HEAP32[(($639 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($639 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($639 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($660 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($660 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($660 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($660 >>> 24 & 63) << 2) + 426908 >> 2];
  var $686 = $683 ^ HEAP32[$4$s2 + 26];
  var $707 = HEAP32[$4$s2 + 27] ^ ($683 << 28 | $683 >>> 4);
  var $730 = HEAP32[(($686 & 63) << 2) + 416924 >> 2] ^ $636 ^ HEAP32[(($686 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($686 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($686 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($707 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($707 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($707 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($707 >>> 24 & 63) << 2) + 426908 >> 2];
  var $733 = $730 ^ HEAP32[$4$s2 + 28];
  var $754 = HEAP32[$4$s2 + 29] ^ ($730 << 28 | $730 >>> 4);
  var $777 = HEAP32[(($733 & 63) << 2) + 416924 >> 2] ^ $683 ^ HEAP32[(($733 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($733 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($733 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($754 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($754 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($754 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($754 >>> 24 & 63) << 2) + 426908 >> 2];
  var $780 = $777 ^ HEAP32[$4$s2 + 30];
  var $800 = HEAP32[$4$s2 + 31] ^ ($777 << 28 | $777 >>> 4);
  var $823 = HEAP32[(($780 & 63) << 2) + 416924 >> 2] ^ $730 ^ HEAP32[(($780 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($780 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($780 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($800 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($800 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($800 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($800 >>> 24 & 63) << 2) + 426908 >> 2];
  var $826 = $823 << 31 | $823 >>> 1;
  var $828 = ($826 ^ $777) & -1431655766;
  var $829 = $828 ^ $826;
  var $830 = $828 ^ $777;
  var $833 = $830 << 31 | $830 >>> 1;
  var $836 = ($833 >>> 8 ^ $829) & 16711935;
  var $837 = $836 ^ $829;
  var $839 = $836 << 8 ^ $833;
  var $842 = ($839 >>> 2 ^ $837) & 858993459;
  var $843 = $842 ^ $837;
  var $845 = $842 << 2 ^ $839;
  var $847 = $845 & 65535 ^ $843 >>> 16;
  var $848 = $847 ^ $845;
  var $850 = $847 << 16 ^ $843;
  var $853 = ($850 >>> 4 ^ $848) & 252645135;
  var $854 = $853 ^ $848;
  var $856 = $853 << 4 ^ $850;
  HEAP8[$to] = $856 >>> 24 & 255;
  HEAP8[$to + 1 | 0] = $856 >>> 16 & 255;
  HEAP8[$to + 2 | 0] = $856 >>> 8 & 255;
  HEAP8[$to + 3 | 0] = $856 & 255;
  HEAP8[$to + 4 | 0] = $854 >>> 24 & 255;
  HEAP8[$to + 5 | 0] = $854 >>> 16 & 255;
  HEAP8[$to + 6 | 0] = $854 >>> 8 & 255;
  HEAP8[$to + 7 | 0] = $854 & 255;
  return;
}
_des_ecb_crypt["X"] = 1;
function _tripledes_set2keys($ctx, $key1, $key2) {
  var $ctx$s2 = $ctx >> 2;
  _des_key_schedule($key1, $ctx | 0);
  _des_key_schedule($key2, $ctx + 512 | 0);
  __gcry_burn_stack(32);
  var $i_01 = 0;
  while (1) {
    var $i_01;
    var $7 = ($i_01 << 2) + $ctx + 384 | 0;
    HEAP32[$7 >> 2] = HEAP32[(30 - $i_01 << 2 >> 2) + $ctx$s2];
    var $11 = $i_01 | 1;
    var $12 = ($11 << 2) + $ctx + 384 | 0;
    HEAP32[$12 >> 2] = HEAP32[(31 - $i_01 << 2 >> 2) + $ctx$s2];
    HEAP32[($i_01 + 32 << 2 >> 2) + $ctx$s2] = HEAP32[((62 - $i_01 << 2) + 384 >> 2) + $ctx$s2];
    HEAP32[($i_01 + 33 << 2 >> 2) + $ctx$s2] = HEAP32[((63 - $i_01 << 2) + 384 >> 2) + $ctx$s2];
    var $25 = $i_01 + 64 | 0;
    HEAP32[($25 << 2 >> 2) + $ctx$s2] = HEAP32[($i_01 << 2 >> 2) + $ctx$s2];
    var $29 = $i_01 + 65 | 0;
    HEAP32[($29 << 2 >> 2) + $ctx$s2] = HEAP32[($11 << 2 >> 2) + $ctx$s2];
    HEAP32[(($25 << 2) + 384 >> 2) + $ctx$s2] = HEAP32[$7 >> 2];
    HEAP32[(($29 << 2) + 384 >> 2) + $ctx$s2] = HEAP32[$12 >> 2];
    var $35 = $i_01 + 2 | 0;
    if (($35 | 0) < 32) {
      var $i_01 = $35;
    } else {
      break;
    }
  }
  return;
}
_tripledes_set2keys["X"] = 1;
function _tripledes_ecb_crypt($ctx, $from, $to, $mode) {
  var $4$s2;
  var $4$s2 = (($mode | 0) == 0 ? $ctx | 0 : $ctx + 384 | 0) >> 2;
  var $21 = HEAPU8[$from + 1 | 0] << 16 | HEAPU8[$from] << 24 | HEAPU8[$from + 3 | 0] | HEAPU8[$from + 2 | 0] << 8;
  var $39 = HEAPU8[$from + 5 | 0] << 16 | HEAPU8[$from + 4 | 0] << 24 | HEAPU8[$from + 7 | 0] | HEAPU8[$from + 6 | 0] << 8;
  var $42 = ($39 ^ $21 >>> 4) & 252645135;
  var $43 = $42 ^ $39;
  var $45 = $42 << 4 ^ $21;
  var $47 = $45 >>> 16 ^ $43 & 65535;
  var $48 = $47 ^ $43;
  var $50 = $47 << 16 ^ $45;
  var $53 = ($48 >>> 2 ^ $50) & 858993459;
  var $54 = $53 ^ $50;
  var $56 = $53 << 2 ^ $48;
  var $59 = ($56 >>> 8 ^ $54) & 16711935;
  var $60 = $59 ^ $54;
  var $62 = $59 << 8 ^ $56;
  var $63 = $62 << 1;
  var $67 = ($63 ^ $60) & -1431655766;
  var $68 = $67 ^ ($63 | $62 >>> 31);
  var $69 = $67 ^ $60;
  var $75 = $68 ^ HEAP32[$4$s2];
  var $96 = ($68 << 28 | $68 >>> 4) ^ HEAP32[$4$s2 + 1];
  var $119 = HEAP32[(($75 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($75 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($75 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($75 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($96 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($96 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($96 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($96 >>> 24 & 63) << 2) + 426908 >> 2] ^ ($69 << 1 | $69 >>> 31);
  var $122 = $119 ^ HEAP32[$4$s2 + 2];
  var $143 = ($119 << 28 | $119 >>> 4) ^ HEAP32[$4$s2 + 3];
  var $166 = HEAP32[(($122 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($122 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($122 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($122 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($143 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($143 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($143 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($143 >>> 24 & 63) << 2) + 426908 >> 2] ^ $68;
  var $169 = $166 ^ HEAP32[$4$s2 + 4];
  var $190 = ($166 << 28 | $166 >>> 4) ^ HEAP32[$4$s2 + 5];
  var $213 = HEAP32[(($169 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($169 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($169 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($169 >>> 24 & 63) << 2) + 424604 >> 2] ^ $119 ^ HEAP32[(($190 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($190 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($190 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($190 >>> 24 & 63) << 2) + 426908 >> 2];
  var $216 = $213 ^ HEAP32[$4$s2 + 6];
  var $237 = HEAP32[$4$s2 + 7] ^ ($213 << 28 | $213 >>> 4);
  var $260 = HEAP32[(($216 & 63) << 2) + 416924 >> 2] ^ $166 ^ HEAP32[(($216 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($216 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($216 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($237 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($237 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($237 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($237 >>> 24 & 63) << 2) + 426908 >> 2];
  var $263 = $260 ^ HEAP32[$4$s2 + 8];
  var $284 = HEAP32[$4$s2 + 9] ^ ($260 << 28 | $260 >>> 4);
  var $307 = HEAP32[(($263 & 63) << 2) + 416924 >> 2] ^ $213 ^ HEAP32[(($263 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($263 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($263 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($284 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($284 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($284 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($284 >>> 24 & 63) << 2) + 426908 >> 2];
  var $310 = $307 ^ HEAP32[$4$s2 + 10];
  var $331 = HEAP32[$4$s2 + 11] ^ ($307 << 28 | $307 >>> 4);
  var $354 = HEAP32[(($310 & 63) << 2) + 416924 >> 2] ^ $260 ^ HEAP32[(($310 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($310 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($310 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($331 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($331 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($331 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($331 >>> 24 & 63) << 2) + 426908 >> 2];
  var $357 = $354 ^ HEAP32[$4$s2 + 12];
  var $378 = HEAP32[$4$s2 + 13] ^ ($354 << 28 | $354 >>> 4);
  var $401 = HEAP32[(($357 & 63) << 2) + 416924 >> 2] ^ $307 ^ HEAP32[(($357 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($357 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($357 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($378 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($378 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($378 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($378 >>> 24 & 63) << 2) + 426908 >> 2];
  var $404 = $401 ^ HEAP32[$4$s2 + 14];
  var $425 = HEAP32[$4$s2 + 15] ^ ($401 << 28 | $401 >>> 4);
  var $448 = HEAP32[(($404 & 63) << 2) + 416924 >> 2] ^ $354 ^ HEAP32[(($404 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($404 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($404 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($425 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($425 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($425 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($425 >>> 24 & 63) << 2) + 426908 >> 2];
  var $451 = $448 ^ HEAP32[$4$s2 + 16];
  var $472 = HEAP32[$4$s2 + 17] ^ ($448 << 28 | $448 >>> 4);
  var $495 = HEAP32[(($451 & 63) << 2) + 416924 >> 2] ^ $401 ^ HEAP32[(($451 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($451 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($451 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($472 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($472 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($472 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($472 >>> 24 & 63) << 2) + 426908 >> 2];
  var $498 = $495 ^ HEAP32[$4$s2 + 18];
  var $519 = HEAP32[$4$s2 + 19] ^ ($495 << 28 | $495 >>> 4);
  var $542 = HEAP32[(($498 & 63) << 2) + 416924 >> 2] ^ $448 ^ HEAP32[(($498 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($498 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($498 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($519 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($519 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($519 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($519 >>> 24 & 63) << 2) + 426908 >> 2];
  var $545 = $542 ^ HEAP32[$4$s2 + 20];
  var $566 = HEAP32[$4$s2 + 21] ^ ($542 << 28 | $542 >>> 4);
  var $589 = HEAP32[(($545 & 63) << 2) + 416924 >> 2] ^ $495 ^ HEAP32[(($545 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($545 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($545 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($566 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($566 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($566 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($566 >>> 24 & 63) << 2) + 426908 >> 2];
  var $592 = $589 ^ HEAP32[$4$s2 + 22];
  var $613 = HEAP32[$4$s2 + 23] ^ ($589 << 28 | $589 >>> 4);
  var $636 = HEAP32[(($592 & 63) << 2) + 416924 >> 2] ^ $542 ^ HEAP32[(($592 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($592 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($592 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($613 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($613 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($613 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($613 >>> 24 & 63) << 2) + 426908 >> 2];
  var $639 = $636 ^ HEAP32[$4$s2 + 24];
  var $660 = HEAP32[$4$s2 + 25] ^ ($636 << 28 | $636 >>> 4);
  var $683 = HEAP32[(($639 & 63) << 2) + 416924 >> 2] ^ $589 ^ HEAP32[(($639 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($639 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($639 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($660 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($660 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($660 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($660 >>> 24 & 63) << 2) + 426908 >> 2];
  var $686 = $683 ^ HEAP32[$4$s2 + 26];
  var $707 = HEAP32[$4$s2 + 27] ^ ($683 << 28 | $683 >>> 4);
  var $730 = HEAP32[(($686 & 63) << 2) + 416924 >> 2] ^ $636 ^ HEAP32[(($686 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($686 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($686 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($707 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($707 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($707 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($707 >>> 24 & 63) << 2) + 426908 >> 2];
  var $733 = $730 ^ HEAP32[$4$s2 + 28];
  var $754 = HEAP32[$4$s2 + 29] ^ ($730 << 28 | $730 >>> 4);
  var $777 = HEAP32[(($733 & 63) << 2) + 416924 >> 2] ^ $683 ^ HEAP32[(($733 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($733 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($733 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($754 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($754 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($754 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($754 >>> 24 & 63) << 2) + 426908 >> 2];
  var $780 = $777 ^ HEAP32[$4$s2 + 30];
  var $798 = $777 << 28 | $777 >>> 4;
  var $801 = HEAP32[$4$s2 + 31] ^ $798;
  var $819 = HEAP32[$4$s2 + 32] ^ $777;
  var $837 = HEAP32[$4$s2 + 33] ^ $798;
  var $868 = HEAP32[(($780 & 63) << 2) + 416924 >> 2] ^ $730 ^ HEAP32[(($780 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($780 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($780 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($801 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($801 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($801 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($801 >>> 24 & 63) << 2) + 426908 >> 2] ^ HEAP32[(($819 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($819 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($819 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($819 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($837 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($837 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($837 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($837 >>> 24 & 63) << 2) + 426908 >> 2];
  var $871 = $868 ^ HEAP32[$4$s2 + 34];
  var $892 = HEAP32[$4$s2 + 35] ^ ($868 << 28 | $868 >>> 4);
  var $915 = HEAP32[(($871 & 63) << 2) + 416924 >> 2] ^ $777 ^ HEAP32[(($871 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($871 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($871 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($892 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($892 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($892 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($892 >>> 24 & 63) << 2) + 426908 >> 2];
  var $918 = $915 ^ HEAP32[$4$s2 + 36];
  var $939 = HEAP32[$4$s2 + 37] ^ ($915 << 28 | $915 >>> 4);
  var $962 = HEAP32[(($918 & 63) << 2) + 416924 >> 2] ^ $868 ^ HEAP32[(($918 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($918 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($918 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($939 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($939 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($939 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($939 >>> 24 & 63) << 2) + 426908 >> 2];
  var $965 = $962 ^ HEAP32[$4$s2 + 38];
  var $986 = HEAP32[$4$s2 + 39] ^ ($962 << 28 | $962 >>> 4);
  var $1009 = HEAP32[(($965 & 63) << 2) + 416924 >> 2] ^ $915 ^ HEAP32[(($965 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($965 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($965 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($986 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($986 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($986 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($986 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1012 = $1009 ^ HEAP32[$4$s2 + 40];
  var $1033 = HEAP32[$4$s2 + 41] ^ ($1009 << 28 | $1009 >>> 4);
  var $1056 = HEAP32[(($1012 & 63) << 2) + 416924 >> 2] ^ $962 ^ HEAP32[(($1012 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1012 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1012 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1033 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1033 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1033 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1033 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1059 = $1056 ^ HEAP32[$4$s2 + 42];
  var $1080 = HEAP32[$4$s2 + 43] ^ ($1056 << 28 | $1056 >>> 4);
  var $1103 = HEAP32[(($1059 & 63) << 2) + 416924 >> 2] ^ $1009 ^ HEAP32[(($1059 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1059 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1059 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1080 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1080 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1080 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1080 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1106 = $1103 ^ HEAP32[$4$s2 + 44];
  var $1127 = HEAP32[$4$s2 + 45] ^ ($1103 << 28 | $1103 >>> 4);
  var $1150 = HEAP32[(($1106 & 63) << 2) + 416924 >> 2] ^ $1056 ^ HEAP32[(($1106 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1106 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1106 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1127 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1127 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1127 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1127 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1153 = $1150 ^ HEAP32[$4$s2 + 46];
  var $1174 = HEAP32[$4$s2 + 47] ^ ($1150 << 28 | $1150 >>> 4);
  var $1197 = HEAP32[(($1153 & 63) << 2) + 416924 >> 2] ^ $1103 ^ HEAP32[(($1153 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1153 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1153 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1174 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1174 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1174 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1174 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1200 = $1197 ^ HEAP32[$4$s2 + 48];
  var $1221 = HEAP32[$4$s2 + 49] ^ ($1197 << 28 | $1197 >>> 4);
  var $1244 = HEAP32[(($1200 & 63) << 2) + 416924 >> 2] ^ $1150 ^ HEAP32[(($1200 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1200 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1200 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1221 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1221 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1221 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1221 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1247 = $1244 ^ HEAP32[$4$s2 + 50];
  var $1268 = HEAP32[$4$s2 + 51] ^ ($1244 << 28 | $1244 >>> 4);
  var $1291 = HEAP32[(($1247 & 63) << 2) + 416924 >> 2] ^ $1197 ^ HEAP32[(($1247 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1247 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1247 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1268 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1268 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1268 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1268 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1294 = $1291 ^ HEAP32[$4$s2 + 52];
  var $1315 = HEAP32[$4$s2 + 53] ^ ($1291 << 28 | $1291 >>> 4);
  var $1338 = HEAP32[(($1294 & 63) << 2) + 416924 >> 2] ^ $1244 ^ HEAP32[(($1294 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1294 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1294 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1315 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1315 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1315 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1315 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1341 = $1338 ^ HEAP32[$4$s2 + 54];
  var $1362 = HEAP32[$4$s2 + 55] ^ ($1338 << 28 | $1338 >>> 4);
  var $1385 = HEAP32[(($1341 & 63) << 2) + 416924 >> 2] ^ $1291 ^ HEAP32[(($1341 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1341 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1341 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1362 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1362 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1362 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1362 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1388 = $1385 ^ HEAP32[$4$s2 + 56];
  var $1409 = HEAP32[$4$s2 + 57] ^ ($1385 << 28 | $1385 >>> 4);
  var $1432 = HEAP32[(($1388 & 63) << 2) + 416924 >> 2] ^ $1338 ^ HEAP32[(($1388 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1388 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1388 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1409 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1409 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1409 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1409 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1435 = $1432 ^ HEAP32[$4$s2 + 58];
  var $1456 = HEAP32[$4$s2 + 59] ^ ($1432 << 28 | $1432 >>> 4);
  var $1479 = HEAP32[(($1435 & 63) << 2) + 416924 >> 2] ^ $1385 ^ HEAP32[(($1435 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1435 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1435 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1456 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1456 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1456 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1456 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1482 = $1479 ^ HEAP32[$4$s2 + 60];
  var $1503 = HEAP32[$4$s2 + 61] ^ ($1479 << 28 | $1479 >>> 4);
  var $1526 = HEAP32[(($1482 & 63) << 2) + 416924 >> 2] ^ $1432 ^ HEAP32[(($1482 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1482 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1482 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1503 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1503 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1503 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1503 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1529 = $1526 ^ HEAP32[$4$s2 + 62];
  var $1547 = $1526 << 28 | $1526 >>> 4;
  var $1550 = HEAP32[$4$s2 + 63] ^ $1547;
  var $1568 = HEAP32[$4$s2 + 64] ^ $1526;
  var $1586 = HEAP32[$4$s2 + 65] ^ $1547;
  var $1617 = HEAP32[(($1529 & 63) << 2) + 416924 >> 2] ^ $1479 ^ HEAP32[(($1529 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1529 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1529 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1550 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1550 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1550 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1550 >>> 24 & 63) << 2) + 426908 >> 2] ^ HEAP32[(($1568 & 63) << 2) + 416924 >> 2] ^ HEAP32[(($1568 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1568 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1568 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1586 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1586 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1586 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1586 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1620 = $1617 ^ HEAP32[$4$s2 + 66];
  var $1641 = HEAP32[$4$s2 + 67] ^ ($1617 << 28 | $1617 >>> 4);
  var $1664 = HEAP32[(($1620 & 63) << 2) + 416924 >> 2] ^ $1526 ^ HEAP32[(($1620 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1620 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1620 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1641 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1641 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1641 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1641 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1667 = $1664 ^ HEAP32[$4$s2 + 68];
  var $1688 = HEAP32[$4$s2 + 69] ^ ($1664 << 28 | $1664 >>> 4);
  var $1711 = HEAP32[(($1667 & 63) << 2) + 416924 >> 2] ^ $1617 ^ HEAP32[(($1667 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1667 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1667 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1688 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1688 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1688 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1688 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1714 = $1711 ^ HEAP32[$4$s2 + 70];
  var $1735 = HEAP32[$4$s2 + 71] ^ ($1711 << 28 | $1711 >>> 4);
  var $1758 = HEAP32[(($1714 & 63) << 2) + 416924 >> 2] ^ $1664 ^ HEAP32[(($1714 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1714 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1714 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1735 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1735 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1735 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1735 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1761 = $1758 ^ HEAP32[$4$s2 + 72];
  var $1782 = HEAP32[$4$s2 + 73] ^ ($1758 << 28 | $1758 >>> 4);
  var $1805 = HEAP32[(($1761 & 63) << 2) + 416924 >> 2] ^ $1711 ^ HEAP32[(($1761 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1761 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1761 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1782 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1782 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1782 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1782 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1808 = $1805 ^ HEAP32[$4$s2 + 74];
  var $1829 = HEAP32[$4$s2 + 75] ^ ($1805 << 28 | $1805 >>> 4);
  var $1852 = HEAP32[(($1808 & 63) << 2) + 416924 >> 2] ^ $1758 ^ HEAP32[(($1808 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1808 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1808 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1829 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1829 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1829 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1829 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1855 = $1852 ^ HEAP32[$4$s2 + 76];
  var $1876 = HEAP32[$4$s2 + 77] ^ ($1852 << 28 | $1852 >>> 4);
  var $1899 = HEAP32[(($1855 & 63) << 2) + 416924 >> 2] ^ $1805 ^ HEAP32[(($1855 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1855 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1855 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1876 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1876 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1876 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1876 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1902 = $1899 ^ HEAP32[$4$s2 + 78];
  var $1923 = HEAP32[$4$s2 + 79] ^ ($1899 << 28 | $1899 >>> 4);
  var $1946 = HEAP32[(($1902 & 63) << 2) + 416924 >> 2] ^ $1852 ^ HEAP32[(($1902 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1902 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1902 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1923 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1923 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1923 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1923 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1949 = $1946 ^ HEAP32[$4$s2 + 80];
  var $1970 = HEAP32[$4$s2 + 81] ^ ($1946 << 28 | $1946 >>> 4);
  var $1993 = HEAP32[(($1949 & 63) << 2) + 416924 >> 2] ^ $1899 ^ HEAP32[(($1949 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1949 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1949 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($1970 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($1970 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($1970 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($1970 >>> 24 & 63) << 2) + 426908 >> 2];
  var $1996 = $1993 ^ HEAP32[$4$s2 + 82];
  var $2017 = HEAP32[$4$s2 + 83] ^ ($1993 << 28 | $1993 >>> 4);
  var $2040 = HEAP32[(($1996 & 63) << 2) + 416924 >> 2] ^ $1946 ^ HEAP32[(($1996 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($1996 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($1996 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($2017 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($2017 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($2017 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($2017 >>> 24 & 63) << 2) + 426908 >> 2];
  var $2043 = $2040 ^ HEAP32[$4$s2 + 84];
  var $2064 = HEAP32[$4$s2 + 85] ^ ($2040 << 28 | $2040 >>> 4);
  var $2087 = HEAP32[(($2043 & 63) << 2) + 416924 >> 2] ^ $1993 ^ HEAP32[(($2043 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($2043 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($2043 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($2064 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($2064 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($2064 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($2064 >>> 24 & 63) << 2) + 426908 >> 2];
  var $2090 = $2087 ^ HEAP32[$4$s2 + 86];
  var $2111 = HEAP32[$4$s2 + 87] ^ ($2087 << 28 | $2087 >>> 4);
  var $2134 = HEAP32[(($2090 & 63) << 2) + 416924 >> 2] ^ $2040 ^ HEAP32[(($2090 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($2090 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($2090 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($2111 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($2111 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($2111 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($2111 >>> 24 & 63) << 2) + 426908 >> 2];
  var $2137 = $2134 ^ HEAP32[$4$s2 + 88];
  var $2158 = HEAP32[$4$s2 + 89] ^ ($2134 << 28 | $2134 >>> 4);
  var $2181 = HEAP32[(($2137 & 63) << 2) + 416924 >> 2] ^ $2087 ^ HEAP32[(($2137 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($2137 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($2137 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($2158 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($2158 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($2158 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($2158 >>> 24 & 63) << 2) + 426908 >> 2];
  var $2184 = $2181 ^ HEAP32[$4$s2 + 90];
  var $2205 = HEAP32[$4$s2 + 91] ^ ($2181 << 28 | $2181 >>> 4);
  var $2228 = HEAP32[(($2184 & 63) << 2) + 416924 >> 2] ^ $2134 ^ HEAP32[(($2184 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($2184 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($2184 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($2205 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($2205 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($2205 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($2205 >>> 24 & 63) << 2) + 426908 >> 2];
  var $2231 = $2228 ^ HEAP32[$4$s2 + 92];
  var $2252 = HEAP32[$4$s2 + 93] ^ ($2228 << 28 | $2228 >>> 4);
  var $2275 = HEAP32[(($2231 & 63) << 2) + 416924 >> 2] ^ $2181 ^ HEAP32[(($2231 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($2231 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($2231 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($2252 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($2252 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($2252 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($2252 >>> 24 & 63) << 2) + 426908 >> 2];
  var $2278 = $2275 ^ HEAP32[$4$s2 + 94];
  var $2298 = HEAP32[$4$s2 + 95] ^ ($2275 << 28 | $2275 >>> 4);
  var $2321 = HEAP32[(($2278 & 63) << 2) + 416924 >> 2] ^ $2228 ^ HEAP32[(($2278 >>> 8 & 63) << 2) + 417436 >> 2] ^ HEAP32[(($2278 >>> 16 & 63) << 2) + 419996 >> 2] ^ HEAP32[(($2278 >>> 24 & 63) << 2) + 424604 >> 2] ^ HEAP32[(($2298 & 63) << 2) + 417180 >> 2] ^ HEAP32[(($2298 >>> 8 & 63) << 2) + 417692 >> 2] ^ HEAP32[(($2298 >>> 16 & 63) << 2) + 422300 >> 2] ^ HEAP32[(($2298 >>> 24 & 63) << 2) + 426908 >> 2];
  var $2324 = $2321 << 31 | $2321 >>> 1;
  var $2326 = ($2324 ^ $2275) & -1431655766;
  var $2327 = $2326 ^ $2324;
  var $2328 = $2326 ^ $2275;
  var $2331 = $2328 << 31 | $2328 >>> 1;
  var $2334 = ($2331 >>> 8 ^ $2327) & 16711935;
  var $2335 = $2334 ^ $2327;
  var $2337 = $2334 << 8 ^ $2331;
  var $2340 = ($2337 >>> 2 ^ $2335) & 858993459;
  var $2341 = $2340 ^ $2335;
  var $2343 = $2340 << 2 ^ $2337;
  var $2345 = $2343 & 65535 ^ $2341 >>> 16;
  var $2346 = $2345 ^ $2343;
  var $2348 = $2345 << 16 ^ $2341;
  var $2351 = ($2348 >>> 4 ^ $2346) & 252645135;
  var $2352 = $2351 ^ $2346;
  var $2354 = $2351 << 4 ^ $2348;
  HEAP8[$to] = $2354 >>> 24 & 255;
  HEAP8[$to + 1 | 0] = $2354 >>> 16 & 255;
  HEAP8[$to + 2 | 0] = $2354 >>> 8 & 255;
  HEAP8[$to + 3 | 0] = $2354 & 255;
  HEAP8[$to + 4 | 0] = $2352 >>> 24 & 255;
  HEAP8[$to + 5 | 0] = $2352 >>> 16 & 255;
  HEAP8[$to + 6 | 0] = $2352 >>> 8 & 255;
  HEAP8[$to + 7 | 0] = $2352 & 255;
  return;
}
_tripledes_ecb_crypt["X"] = 1;
function _gpg_err_code485($err) {
  return $err & 65535;
}
function _gpg_err_make489($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 16777216;
  }
  var $6;
  return $6;
}
function _working_memcmp($a, $b) {
  var label = 0;
  var $_01 = $a;
  var $_02 = $b;
  var $_03 = 8;
  while (1) {
    var $_03;
    var $_02;
    var $_01;
    if (($_03 | 0) == 0) {
      var $_0 = 0;
      label = 221;
      break;
    }
    var $4 = HEAP8[$_01];
    var $5 = HEAP8[$_02];
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
      break;
    }
    var $_01 = $_01 + 1 | 0;
    var $_02 = $_02 + 1 | 0;
    var $_03 = $_03 - 1 | 0;
  }
  if (label == 221) {
    var $_0;
    return $_0;
  }
  var $_0 = ($4 & 255) - ($5 & 255) | 0;
  var $_0;
  return $_0;
}
function _des_key_schedule($rawkey, $subkey) {
  var $17 = HEAPU8[$rawkey + 1 | 0] << 16 | HEAPU8[$rawkey] << 24 | HEAPU8[$rawkey + 3 | 0] | HEAPU8[$rawkey + 2 | 0] << 8;
  var $35 = HEAPU8[$rawkey + 5 | 0] << 16 | HEAPU8[$rawkey + 4 | 0] << 24 | HEAPU8[$rawkey + 7 | 0] | HEAPU8[$rawkey + 6 | 0] << 8;
  var $38 = ($35 >>> 4 ^ $17) & 252645135;
  var $39 = $38 ^ $17;
  var $41 = $38 << 4 ^ $35;
  var $43 = ($41 ^ $39) & 269488144;
  var $44 = $43 ^ $39;
  var $45 = $43 ^ $41;
  var $right_01 = (HEAP32[(($45 >>> 9 & 15) << 2) + 438900 >> 2] << 2 | HEAP32[(($45 >>> 1 & 15) << 2) + 438900 >> 2] << 3 | HEAP32[(($45 >>> 25 & 15) << 2) + 438900 >> 2] | HEAP32[(($45 >>> 17 & 15) << 2) + 438900 >> 2] << 1 | HEAP32[(($45 >>> 4 & 15) << 2) + 438900 >> 2] << 7 | HEAP32[(($45 >>> 12 & 15) << 2) + 438900 >> 2] << 6 | HEAP32[(($45 >>> 20 & 15) << 2) + 438900 >> 2] << 5 | HEAP32[($45 >>> 28 << 2) + 438900 >> 2] << 4) & 268435455;
  var $left_02 = (HEAP32[(($44 >>> 8 & 15) << 2) + 451092 >> 2] << 2 | HEAP32[(($44 & 15) << 2) + 451092 >> 2] << 3 | HEAP32[(($44 >>> 24 & 15) << 2) + 451092 >> 2] | HEAP32[(($44 >>> 16 & 15) << 2) + 451092 >> 2] << 1 | HEAP32[(($44 >>> 5 & 15) << 2) + 451092 >> 2] << 7 | HEAP32[(($44 >>> 13 & 15) << 2) + 451092 >> 2] << 6 | HEAP32[(($44 >>> 21 & 15) << 2) + 451092 >> 2] << 5 | HEAP32[($44 >>> 29 << 2) + 451092 >> 2] << 4) & 268435455;
  var $_03 = $subkey;
  var $round_04 = 0;
  while (1) {
    var $round_04;
    var $_03;
    var $left_02;
    var $right_01;
    var $140 = HEAPU8[$round_04 + 457040 | 0];
    var $142 = 28 - $140 | 0;
    var $144 = $left_02 >>> ($142 >>> 0) | $left_02 << $140;
    var $145 = $144 & 268435455;
    var $148 = $right_01 >>> ($142 >>> 0) | $right_01 << $140;
    var $149 = $148 & 268435455;
    var $164 = $144 << 10;
    var $178 = $149 >>> 14;
    var $185 = $149 >>> 3;
    HEAP32[$_03 >> 2] = $148 >>> 24 & 1 | $148 & 256 | $148 >>> 26 & 2 | $148 >>> 18 & 4 | $148 >>> 10 & 16 | $148 >>> 5 & 32 | $148 >>> 1 & 1024 | $148 << 6 & 2048 | $148 >>> 4 & 4096 | $148 >>> 13 & 8192 | $144 >>> 10 & 65536 | $164 & 262144 | $144 >>> 1 & 1048576 | $144 << 9 & 2097152 | $144 << 6 & 16777216 | $144 << 18 & 34078720 | $144 << 14 & 134217728 | $144 << 28 & 268435456 | $144 << 4 & 603979776 | $185 & 8 | $178 & 512 | $145 << 2 & 131072;
    var $215 = $144 << 15;
    HEAP32[$_03 + 4 >> 2] = $148 >>> 21 & 2 | $148 & 512 | $148 >>> 7 & 32 | $148 << 7 & 256 | $148 >>> 9 & 1024 | $148 << 8 & 4096 | $148 >>> 2 & 8192 | $144 >>> 4 & 65536 | $215 & 131072 | $144 >>> 6 & 262144 | $144 << 11 & 1048576 | $144 << 16 & 2097152 | $144 >>> 2 & 33554432 | $144 << 22 & 67108864 | $164 & 134217728 | $144 << 17 & 268435456 | $215 & 536870912 | $149 << 2 & 4 | $185 & 17 | $178 & 2056 | $145 << 3 & 524288 | $145 << 1 & 16777216;
    var $276 = $round_04 + 1 | 0;
    if (($276 | 0) == 16) {
      break;
    } else {
      var $right_01 = $149;
      var $left_02 = $145;
      var $_03 = $_03 + 8 | 0;
      var $round_04 = $276;
    }
  }
  return;
}
_des_key_schedule["X"] = 1;
function _tripledes_set3keys($ctx, $key1, $key2, $key3) {
  var $ctx$s2 = $ctx >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  do {
    if ((__gcry_fips_mode() | 0) != 0 | HEAP8[455264]) {
      label = 229;
    } else {
      HEAP8[455264] = 1;
      var $4 = _selftest();
      HEAP32[102599] = $4;
      if (($4 | 0) == 0) {
        break;
      }
      __gcry_log_error(486984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
      label = 229;
      break;
    }
  } while (0);
  do {
    if (label == 229) {
      if ((HEAP32[102599] | 0) == 0) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  _des_key_schedule($key1, $ctx | 0);
  _des_key_schedule($key2, $ctx + 512 | 0);
  _des_key_schedule($key3, $ctx + 256 | 0);
  __gcry_burn_stack(32);
  var $i_01 = 0;
  while (1) {
    var $i_01;
    HEAP32[(($i_01 << 2) + 384 >> 2) + $ctx$s2] = HEAP32[(94 - $i_01 << 2 >> 2) + $ctx$s2];
    HEAP32[((($i_01 | 1) << 2) + 384 >> 2) + $ctx$s2] = HEAP32[(95 - $i_01 << 2 >> 2) + $ctx$s2];
    HEAP32[($i_01 + 32 << 2 >> 2) + $ctx$s2] = HEAP32[((62 - $i_01 << 2) + 384 >> 2) + $ctx$s2];
    HEAP32[($i_01 + 33 << 2 >> 2) + $ctx$s2] = HEAP32[((63 - $i_01 << 2) + 384 >> 2) + $ctx$s2];
    HEAP32[(($i_01 + 64 << 2) + 384 >> 2) + $ctx$s2] = HEAP32[(30 - $i_01 << 2 >> 2) + $ctx$s2];
    HEAP32[(($i_01 + 65 << 2) + 384 >> 2) + $ctx$s2] = HEAP32[(31 - $i_01 << 2 >> 2) + $ctx$s2];
    var $42 = $i_01 + 2 | 0;
    if (($42 | 0) < 32) {
      var $i_01 = $42;
    } else {
      break;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
_tripledes_set3keys["X"] = 1;
function _is_weak_key($key) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $work = __stackBase__;
  HEAP8[$work | 0] = HEAP8[$key] & -2;
  HEAP8[$work + 1 | 0] = HEAP8[$key + 1 | 0] & -2;
  HEAP8[$work + 2 | 0] = HEAP8[$key + 2 | 0] & -2;
  HEAP8[$work + 3 | 0] = HEAP8[$key + 3 | 0] & -2;
  HEAP8[$work + 4 | 0] = HEAP8[$key + 4 | 0] & -2;
  HEAP8[$work + 5 | 0] = HEAP8[$key + 5 | 0] & -2;
  HEAP8[$work + 6 | 0] = HEAP8[$key + 6 | 0] & -2;
  HEAP8[$work + 7 | 0] = HEAP8[$key + 7 | 0] & -2;
  var $31 = $work | 0;
  var $right_0_ph = 63;
  var $left_0_ph = 0;
  L311 : while (1) {
    var $left_0_ph;
    var $right_0_ph;
    var $right_0 = $right_0_ph;
    while (1) {
      var $right_0;
      if (($left_0_ph | 0) > ($right_0 | 0)) {
        var $_0 = 0;
        label = 242;
        break L311;
      }
      var $36 = ($right_0 + $left_0_ph | 0) / 2 & -1;
      var $38 = _working_memcmp($31, ($36 << 3) + 409800 | 0);
      if (($38 | 0) == 0) {
        var $_0 = -1;
        label = 243;
        break L311;
      }
      if (($38 | 0) > 0) {
        break;
      } else {
        var $right_0 = $36 - 1 | 0;
      }
    }
    var $right_0_ph = $right_0;
    var $left_0_ph = $36 + 1 | 0;
  }
  if (label == 243) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 242) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_is_weak_key["X"] = 1;
function _openpgp_s2k($passphrase, $passphraselen, $algo, $hashalgo, $salt, $saltlen, $iterations, $keysize, $keybuffer) {
  var $20$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $md = __stackBase__;
  do {
    if (($algo | 0) == 19 | ($algo | 0) == 17) {
      if (($salt | 0) != 0 & ($saltlen | 0) == 8) {
        break;
      } else {
        var $_0 = 55;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if ((__gcry_is_secure($passphrase) | 0) == 0) {
    var $11 = (__gcry_is_secure($keybuffer) | 0) != 0;
  } else {
    var $11 = 1;
  }
  var $11;
  var $14 = _gpg_err_code485(__gcry_md_open($md, $hashalgo, $11 & 1));
  if (($14 | 0) != 0) {
    var $_0 = $14;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  L332 : do {
    if (($keysize | 0) != 0) {
      var $17 = HEAP32[$md >> 2];
      var $18 = $passphraselen + 8 | 0;
      var $_iterations = $18 >>> 0 > $iterations >>> 0 ? $18 : $iterations;
      var $20$s2 = ($17 + 4 | 0) >> 2;
      var $21 = $17 + 8 | 0;
      var $used_011 = 0;
      var $indvars_iv = 0;
      while (1) {
        var $indvars_iv;
        var $used_011;
        L336 : do {
          if (($indvars_iv | 0) != 0) {
            __gcry_md_reset($17);
            if (($indvars_iv | 0) > 0) {
              var $i_06 = 0;
            } else {
              break;
            }
            while (1) {
              var $i_06;
              if ((HEAP32[$20$s2] | 0) == (HEAP32[$21 >> 2] | 0)) {
                __gcry_md_write($17, 0, 0);
              }
              var $31 = HEAP32[$20$s2];
              HEAP32[$20$s2] = $31 + 1 | 0;
              HEAP8[$17 + ($31 + 12) | 0] = 0;
              var $34 = $i_06 + 1 | 0;
              if (($34 | 0) == ($indvars_iv | 0)) {
                break L336;
              } else {
                var $i_06 = $34;
              }
            }
          }
        } while (0);
        L344 : do {
          if (($algo | 0) == 17) {
            var $count_0_lcssa = $18;
            label = 259;
          } else if (($algo | 0) == 19) {
            if ($_iterations >>> 0 > $18 >>> 0) {
              var $count_05 = $_iterations;
            } else {
              var $count_0_lcssa = $_iterations;
              label = 259;
              break;
            }
            while (1) {
              var $count_05;
              __gcry_md_write($17, $salt, $saltlen);
              __gcry_md_write($17, $passphrase, $passphraselen);
              var $36 = $count_05 - $18 | 0;
              if ($36 >>> 0 > $18 >>> 0) {
                var $count_05 = $36;
              } else {
                var $count_0_lcssa = $36;
                label = 259;
                break L344;
              }
            }
          } else {
            __gcry_md_write($17, $passphrase, $passphraselen);
            break;
          }
        } while (0);
        do {
          if (label == 259) {
            label = 0;
            var $count_0_lcssa;
            if ($count_0_lcssa >>> 0 < $saltlen >>> 0) {
              __gcry_md_write($17, $salt, $count_0_lcssa);
              break;
            } else {
              __gcry_md_write($17, $salt, $saltlen);
              __gcry_md_write($17, $passphrase, $count_0_lcssa - $saltlen | 0);
              break;
            }
          }
        } while (0);
        __gcry_md_ctl($17, 5, 0, 0);
        var $45 = __gcry_md_get_algo_dlen($hashalgo);
        var $46 = $keysize - $used_011 | 0;
        var $_ = $45 >>> 0 > $46 >>> 0 ? $46 : $45;
        _memcpy($keybuffer + $used_011 | 0, __gcry_md_read($17, $hashalgo), $_);
        var $50 = $_ + $used_011 | 0;
        if ($50 >>> 0 < $keysize >>> 0) {
          var $used_011 = $50;
          var $indvars_iv = $indvars_iv + 1 | 0;
        } else {
          break L332;
        }
      }
    }
  } while (0);
  __gcry_md_close(HEAP32[$md >> 2]);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_openpgp_s2k["X"] = 1;
function _pkdf2($passphrase, $passphraselen, $hashalgo, $salt, $saltlen, $iterations, $keysize, $keybuffer) {
  var $md$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $md = __stackBase__, $md$s2 = $md >> 2;
  if (($salt | 0) == 0 | ($saltlen | 0) == 0 | ($iterations | 0) == 0 | ($keysize | 0) == 0) {
    var $_0 = 55;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = __gcry_md_get_algo_dlen($hashalgo);
  if (($6 | 0) == 0) {
    var $_0 = 5;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_is_secure($passphrase) | 0) == 0) {
    var $15 = (__gcry_is_secure($keybuffer) | 0) != 0;
  } else {
    var $15 = 1;
  }
  var $15;
  var $17 = Math.floor((($keysize - 1 | 0) >>> 0) / ($6 >>> 0));
  var $18 = $17 + 1 | 0;
  var $20 = $keysize - ($17 * $6 & -1) | 0;
  var $21 = $saltlen + 4 | 0;
  var $22 = $6 + $21 | 0;
  var $23 = $22 + $6 | 0;
  if ($15) {
    var $29 = __gcry_malloc_secure($23);
  } else {
    var $29 = __gcry_malloc($23);
  }
  var $29;
  if (($29 | 0) == 0) {
    var $_0 = _gpg_err_code_from_syserror();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $34 = $29 + $saltlen | 0;
  var $35 = $29 + $21 | 0;
  var $36 = $29 + $22 | 0;
  var $40 = _gpg_err_code485(__gcry_md_open($md, $hashalgo, $15 & 1 | 2));
  if (($40 | 0) != 0) {
    __gcry_free($29);
    var $_0 = $40;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _memcpy($29, $salt, $saltlen);
  var $45 = $saltlen + ($29 + 1) | 0;
  var $47 = $saltlen + ($29 + 2) | 0;
  var $49 = $saltlen + ($29 + 3) | 0;
  var $50 = ($6 | 0) == 0;
  var $lidx_0 = 1;
  var $dk_0 = $keybuffer;
  L379 : while (1) {
    var $dk_0;
    var $lidx_0;
    var $53 = HEAP32[$md$s2];
    if ($lidx_0 >>> 0 > $18 >>> 0) {
      label = 295;
      break;
    }
    var $55 = $lidx_0 >>> 24 & 255;
    var $57 = $lidx_0 >>> 16 & 255;
    var $59 = $lidx_0 >>> 8 & 255;
    var $60 = $lidx_0 & 255;
    var $61 = HEAP32[$md$s2];
    var $iter_0 = 0;
    while (1) {
      var $iter_0;
      if ($iter_0 >>> 0 >= $iterations >>> 0) {
        break;
      }
      var $66 = _gpg_err_code485(__gcry_md_setkey($53, $passphrase, $passphraselen));
      if (($66 | 0) != 0) {
        label = 285;
        break L379;
      }
      L386 : do {
        if (($iter_0 | 0) == 0) {
          HEAP8[$34] = $55;
          HEAP8[$45] = $57;
          HEAP8[$47] = $59;
          HEAP8[$49] = $60;
          __gcry_md_write($61, $29, $21);
          _memcpy($36, __gcry_md_read($61, 0), $6);
          _memcpy($35, $36, $6);
        } else {
          __gcry_md_write($61, $36, $6);
          _memcpy($36, __gcry_md_read($61, 0), $6);
          if ($50) {
            break;
          } else {
            var $i_06 = 0;
          }
          while (1) {
            var $i_06;
            var $78 = $29 + $i_06 + $21 | 0;
            HEAP8[$78] = HEAP8[$78] ^ HEAP8[$29 + $i_06 + $22 | 0];
            var $81 = $i_06 + 1 | 0;
            if (($81 | 0) == ($6 | 0)) {
              break L386;
            } else {
              var $i_06 = $81;
            }
          }
        }
      } while (0);
      var $iter_0 = $iter_0 + 1 | 0;
    }
    if (($lidx_0 | 0) == ($18 | 0)) {
      _memcpy($dk_0, $35, $20);
      var $dk_1 = $dk_0;
    } else {
      _memcpy($dk_0, $35, $6);
      var $dk_1 = $dk_0 + $6 | 0;
    }
    var $dk_1;
    var $lidx_0 = $lidx_0 + 1 | 0;
    var $dk_0 = $dk_1;
  }
  if (label == 285) {
    __gcry_md_close(HEAP32[$md$s2]);
    __gcry_free($29);
    var $_0 = $66;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 295) {
    __gcry_md_close($53);
    __gcry_free($29);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_pkdf2["X"] = 1;
function __gcry_kdf_derive($passphrase, $passphraselen, $algo, $subalgo, $salt, $saltlen, $iterations, $keysize, $keybuffer) {
  do {
    if (($passphrase | 0) == 0 | ($passphraselen | 0) == 0) {
      var $ec_0 = 79;
    } else {
      if (($keybuffer | 0) == 0 | ($keysize | 0) == 0) {
        var $ec_0 = 55;
        break;
      }
      if (($algo | 0) == 16 | ($algo | 0) == 17 | ($algo | 0) == 19) {
        var $ec_0 = _openpgp_s2k($passphrase, $passphraselen, $algo, $subalgo, $salt, $saltlen, $iterations, $keysize, $keybuffer);
        break;
      } else if (($algo | 0) == 34) {
        var $ec_0 = _pkdf2($passphrase, $passphraselen, $subalgo, $salt, $saltlen, $iterations, $keysize, $keybuffer);
        break;
      } else if (($algo | 0) == 33) {
        var $ec_0 = 84;
        break;
      } else {
        var $ec_0 = 149;
        break;
      }
    }
  } while (0);
  var $ec_0;
  return _gpg_error488($ec_0);
}
function _gpg_error488($code) {
  return _gpg_err_make489($code);
}
function __gcry_md_register($digest, $extraspec, $algorithm_id, $module) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $mod = __stackBase__;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error518(60);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(457668);
  var $11 = __gcry_module_add(457672, 0, $digest, ($extraspec | 0) != 0 ? $extraspec : 457120, $mod);
  __gcry_ath_mutex_unlock(457668);
  if (($11 | 0) == 0) {
    HEAP32[$module >> 2] = HEAP32[$mod >> 2];
    HEAP32[$algorithm_id >> 2] = HEAP32[HEAP32[$mod >> 2] + 24 >> 2];
  }
  var $_0 = _gcry_error519($11);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gpg_error518($code) {
  return _gpg_err_make565(1, $code);
}
function _gcry_error519($code) {
  return _gcry_err_make564($code);
}
function __gcry_md_unregister($module) {
  __gcry_ath_mutex_lock(457668);
  __gcry_module_release($module);
  __gcry_ath_mutex_unlock(457668);
  return;
}
function __gcry_md_map_name($string) {
  var $algorithm$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $algorithm = __stackBase__, $algorithm$s2 = $algorithm >> 2;
  HEAP32[$algorithm$s2] = 0;
  if (($string | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  __gcry_ath_mutex_lock(457668);
  do {
    if ((_search_oid524($string, $algorithm) | 0) == 0) {
      var $11 = _gcry_md_lookup_name($string);
      if (($11 | 0) == 0) {
        break;
      }
      HEAP32[$algorithm$s2] = HEAP32[$11 + 24 >> 2];
      __gcry_module_release($11);
    }
  } while (0);
  __gcry_ath_mutex_unlock(457668);
  var $_0 = HEAP32[$algorithm$s2];
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _search_oid524($oid, $algorithm) {
  do {
    if (($oid | 0) == 0) {
      var $_0 = 0;
    } else {
      if ((_strncmp($oid, 479588, 4) | 0) != 0) {
        if ((_strncmp($oid, 478992, 4) | 0) != 0) {
          var $_0 = $oid;
          break;
        }
      }
      var $_0 = $oid + 4 | 0;
    }
  } while (0);
  var $_0;
  var $11 = _gcry_md_lookup_oid($_0);
  if (($11 | 0) == 0) {
    var $ret_2 = 0;
    var $ret_2;
    return $ret_2;
  }
  var $17 = HEAP32[$11 + 8 >> 2] + 12 | 0;
  var $20 = HEAP32[HEAP32[$17 >> 2] >> 2];
  L446 : do {
    if (($20 | 0) == 0) {
      var $ret_0_lcssa = 0;
    } else {
      var $22 = ($algorithm | 0) == 0;
      var $23 = $11 + 24 | 0;
      var $ret_01 = 0;
      var $i_02 = 0;
      var $25 = $20;
      while (1) {
        var $25;
        var $i_02;
        var $ret_01;
        var $_not = (_strcasecmp($_0, $25) | 0) != 0;
        if ($_not | $22) {
          var $ret_1 = $_not ? $ret_01 : 1;
        } else {
          HEAP32[$algorithm >> 2] = HEAP32[$23 >> 2];
          var $ret_1 = 1;
        }
        var $ret_1;
        var $30 = $i_02 + 1 | 0;
        var $33 = HEAP32[HEAP32[$17 >> 2] + ($30 << 2) >> 2];
        if (($33 | 0) != 0 & ($ret_1 | 0) == 0) {
          var $ret_01 = $ret_1;
          var $i_02 = $30;
          var $25 = $33;
        } else {
          var $ret_0_lcssa = $ret_1;
          break L446;
        }
      }
    }
  } while (0);
  var $ret_0_lcssa;
  __gcry_module_release($11);
  var $ret_2 = $ret_0_lcssa;
  var $ret_2;
  return $ret_2;
}
_search_oid524["X"] = 1;
function _gcry_md_lookup_name($name) {
  return __gcry_module_lookup(HEAP32[114418], $name, 294);
}
function __gcry_md_algo_name($algorithm) {
  var $1 = _digest_algo_to_string($algorithm);
  return ($1 | 0) != 0 ? $1 : 472356;
}
function _digest_algo_to_string($algorithm) {
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  __gcry_ath_mutex_lock(457668);
  var $7 = __gcry_module_lookup_id(HEAP32[114418], $algorithm);
  if (($7 | 0) == 0) {
    var $name_0 = 0;
    var $name_0;
    var $15 = __gcry_ath_mutex_unlock(457668);
    return $name_0;
  }
  var $13 = HEAP32[HEAP32[$7 + 8 >> 2] >> 2];
  __gcry_module_release($7);
  var $name_0 = $13;
  var $name_0;
  var $15 = __gcry_ath_mutex_unlock(457668);
  return $name_0;
}
function __gcry_md_open($h, $algo, $flags) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $hd = __stackBase__;
  if ($flags >>> 0 > 3) {
    var $err_0 = 45;
  } else {
    var $err_0 = _md_open($hd, $algo, $flags & 1, $flags & 2);
  }
  var $err_0;
  HEAP32[$h >> 2] = ($err_0 | 0) != 0 ? 0 : HEAP32[$hd >> 2];
  var $10 = _gcry_error519($err_0);
  STACKTOP = __stackBase__;
  return $10;
}
function _md_open($h, $algo, $secure, $hmac) {
  var $24$s2;
  var $hd_0_in$s2;
  var $1 = ($secure | 0) != 0;
  var $2 = $1 ? 528 : 1040;
  var $3 = $2 | 32;
  if ($1) {
    var $hd_0_in = __gcry_malloc_secure($3), $hd_0_in$s2 = $hd_0_in >> 2;
  } else {
    var $hd_0_in = __gcry_malloc($3), $hd_0_in$s2 = $hd_0_in >> 2;
  }
  var $hd_0_in;
  var $hd_0 = $hd_0_in;
  do {
    if (($hd_0_in | 0) == 0) {
      var $13 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      if (($13 | 0) == 0) {
        break;
      } else {
        var $err_29 = $13;
      }
      var $err_29;
      return $err_29;
    }
  } while (0);
  var $15 = $hd_0_in + $2 | 0;
  var $17 = $hd_0_in;
  HEAP32[$17 >> 2] = $15;
  HEAP32[$hd_0_in$s2 + 2] = $2 - 15 | 0;
  HEAP32[$hd_0_in$s2 + 1] = 0;
  var $24$s2 = HEAP32[$17 >> 2] >> 2;
  HEAP32[$24$s2] = 0;
  HEAP32[$24$s2 + 1] = 0;
  HEAP32[$24$s2 + 2] = 0;
  HEAP32[$24$s2 + 3] = 0;
  HEAP32[$24$s2 + 4] = 0;
  HEAP32[$24$s2 + 5] = 0;
  HEAP32[$24$s2 + 6] = 0;
  HEAP32[$24$s2 + 7] = 0;
  HEAP32[$15 >> 2] = $1 ? 378630161 : 285677921;
  HEAP32[(($2 | 4) >> 2) + $hd_0_in$s2] = $3;
  HEAP32[(($2 | 8) >> 2) + $hd_0_in$s2] = $secure;
  do {
    if (($hmac | 0) != 0) {
      var $_ = ($algo - 9 | 0) >>> 0 < 2 ? 128 : 64;
      HEAP32[($2 + 28 >> 2) + $hd_0_in$s2] = $_;
      var $36 = __gcry_malloc_secure($_ << 1);
      HEAP32[($2 + 24 >> 2) + $hd_0_in$s2] = $36;
      if (($36 | 0) != 0) {
        break;
      }
      var $43 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      _md_close($hd_0);
      if (($43 | 0) == 0) {
        break;
      } else {
        var $err_29 = $43;
      }
      var $err_29;
      return $err_29;
    }
  } while (0);
  __gcry_fast_random_poll();
  do {
    if (($algo | 0) != 0) {
      var $47 = _md_enable($hd_0, $algo);
      if (($47 | 0) == 0) {
        break;
      }
      _md_close($hd_0);
      var $err_29 = $47;
      var $err_29;
      return $err_29;
    }
  } while (0);
  HEAP32[$h >> 2] = $hd_0;
  var $err_29 = 0;
  var $err_29;
  return $err_29;
}
_md_open["X"] = 1;
function __gcry_md_enable($hd, $algorithm) {
  return _gcry_error519(_md_enable($hd, $algorithm));
}
function _md_enable($hd, $algorithm) {
  var $entry_1_in$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $2 = HEAP32[$hd >> 2];
  var $3 = $2 + 20 | 0;
  var $entry_0_in = $3;
  while (1) {
    var $entry_0_in;
    var $entry_0 = HEAP32[$entry_0_in >> 2];
    if (($entry_0 | 0) == 0) {
      break;
    }
    if ((HEAP32[HEAP32[$entry_0 + 4 >> 2] + 24 >> 2] | 0) == ($algorithm | 0)) {
      var $_0 = 0;
      label = 395;
      break;
    } else {
      var $entry_0_in = $entry_0 + 8 | 0;
    }
  }
  if (label == 395) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  __gcry_ath_mutex_lock(457668);
  var $20 = __gcry_module_lookup_id(HEAP32[114418], $algorithm);
  __gcry_ath_mutex_unlock(457668);
  var $22 = ($20 | 0) != 0;
  if (!$22) {
    __gcry_log_debug(479836, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
    var $_0 = 5;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $25 = HEAP32[$20 + 8 >> 2];
  var $26 = $25;
  do {
    if (($algorithm | 0) == 1) {
      if ((__gcry_fips_mode() | 0) == 0) {
        label = 386;
        break;
      }
      __gcry_inactivate_fips_mode(475736);
      var $33 = (__gcry_enforced_fips_mode() | 0) == 0;
      if ($33) {
        label = 386;
        break;
      } else {
        var $err_2 = $33 ? 0 : 5;
        break;
      }
    } else {
      label = 386;
    }
  } while (0);
  do {
    if (label == 386) {
      var $37 = HEAP32[$25 + 36 >> 2] + 16 | 0;
      if ((HEAP32[$2 + 8 >> 2] | 0) == 0) {
        var $entry_1_in = __gcry_malloc($37), $entry_1_in$s2 = $entry_1_in >> 2;
      } else {
        var $entry_1_in = __gcry_malloc_secure($37), $entry_1_in$s2 = $entry_1_in >> 2;
      }
      var $entry_1_in;
      if (($entry_1_in | 0) == 0) {
        var $err_2 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
        break;
      }
      var $52 = $entry_1_in;
      HEAP32[$52 >> 2] = $26;
      HEAP32[$entry_1_in$s2 + 1] = $20;
      HEAP32[$entry_1_in$s2 + 2] = HEAP32[$3 >> 2];
      HEAP32[$entry_1_in$s2 + 3] = $37;
      HEAP32[$3 >> 2] = $entry_1_in;
      FUNCTION_TABLE[HEAP32[HEAP32[$52 >> 2] + 20 >> 2]]($entry_1_in + 16 | 0);
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $err_2;
  if (($err_2 | 0) == 0 | $22 ^ 1) {
    var $_0 = $err_2;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(457668);
  __gcry_module_release($20);
  __gcry_ath_mutex_unlock(457668);
  var $_0 = $err_2;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_md_enable["X"] = 1;
function __gcry_md_copy($handle, $hd) {
  var $1 = _md_copy($hd, $handle);
  if (($1 | 0) != 0) {
    HEAP32[$handle >> 2] = 0;
  }
  return _gcry_error519($1);
}
function __gcry_md_reset($a) {
  var $1$s2;
  var $1$s2 = ($a | 0) >> 2;
  HEAP32[HEAP32[$1$s2] + 16 >> 2] = 0;
  HEAP32[$a + 4 >> 2] = 0;
  var $r_01 = HEAP32[HEAP32[$1$s2] + 20 >> 2];
  L527 : do {
    if (($r_01 | 0) != 0) {
      var $r_02 = $r_01;
      while (1) {
        var $r_02;
        var $9 = $r_02 + 16 | 0;
        var $10 = $r_02 | 0;
        _memset($9, 0, HEAP32[HEAP32[$10 >> 2] + 36 >> 2]);
        FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 20 >> 2]]($9);
        var $r_0 = HEAP32[$r_02 + 8 >> 2];
        if (($r_0 | 0) == 0) {
          break L527;
        } else {
          var $r_02 = $r_0;
        }
      }
    }
  } while (0);
  var $19 = HEAP32[$1$s2];
  var $21 = HEAP32[$19 + 24 >> 2];
  if (($21 | 0) == 0) {
    return;
  }
  _md_write($a, $21, HEAP32[$19 + 28 >> 2]);
  return;
}
function __gcry_md_close($hd) {
  _md_close($hd);
  return;
}
function _md_close($a) {
  var $r_013$s2;
  var $3$s2;
  if (($a | 0) == 0) {
    return;
  }
  var $3$s2 = ($a | 0) >> 2;
  if ((HEAP32[HEAP32[$3$s2] + 12 >> 2] | 0) != 0) {
    _md_stop_debug($a);
  }
  var $12 = HEAP32[HEAP32[$3$s2] + 20 >> 2];
  L543 : do {
    if (($12 | 0) != 0) {
      var $r_013 = $12, $r_013$s2 = $r_013 >> 2;
      while (1) {
        var $r_013;
        var $15 = HEAP32[$r_013$s2 + 2];
        __gcry_ath_mutex_lock(457668);
        __gcry_module_release(HEAP32[$r_013$s2 + 1]);
        __gcry_ath_mutex_unlock(457668);
        var $20 = $r_013;
        var $22 = HEAP32[$r_013$s2 + 3];
        L546 : do {
          if (($22 | 0) != 0) {
            var $_vlen_08 = $22;
            var $_vptr_09 = $20;
            while (1) {
              var $_vptr_09;
              var $_vlen_08;
              HEAP8[$_vptr_09] = 0;
              var $25 = $_vlen_08 - 1 | 0;
              if (($25 | 0) == 0) {
                break L546;
              } else {
                var $_vlen_08 = $25;
                var $_vptr_09 = $_vptr_09 + 1 | 0;
              }
            }
          }
        } while (0);
        __gcry_free($20);
        if (($15 | 0) == 0) {
          break L543;
        } else {
          var $r_013 = $15, $r_013$s2 = $r_013 >> 2;
        }
      }
    }
  } while (0);
  var $28 = HEAP32[$3$s2];
  var $30 = HEAP32[$28 + 24 >> 2];
  if (($30 | 0) != 0) {
    var $35 = HEAP32[$28 + 28 >> 2] << 1;
    L553 : do {
      if (($35 | 0) != 0) {
        var $_vlen2_01 = $35;
        var $_vptr1_02 = $30;
        while (1) {
          var $_vptr1_02;
          var $_vlen2_01;
          HEAP8[$_vptr1_02] = 0;
          var $38 = $_vlen2_01 - 1 | 0;
          if (($38 | 0) == 0) {
            break L553;
          } else {
            var $_vlen2_01 = $38;
            var $_vptr1_02 = $_vptr1_02 + 1 | 0;
          }
        }
      }
    } while (0);
    __gcry_free(HEAP32[HEAP32[$3$s2] + 24 >> 2]);
  }
  var $44 = $a;
  var $47 = HEAP32[HEAP32[$3$s2] + 4 >> 2];
  L558 : do {
    if (($47 | 0) != 0) {
      var $_vptr3_03 = $44;
      var $_vlen4_04 = $47;
      while (1) {
        var $_vlen4_04;
        var $_vptr3_03;
        HEAP8[$_vptr3_03] = 0;
        var $50 = $_vlen4_04 - 1 | 0;
        if (($50 | 0) == 0) {
          break L558;
        } else {
          var $_vptr3_03 = $_vptr3_03 + 1 | 0;
          var $_vlen4_04 = $50;
        }
      }
    }
  } while (0);
  __gcry_free($44);
  return;
}
_md_close["X"] = 1;
function __gcry_md_write($hd, $inbuf, $inlen) {
  _md_write($hd, $inbuf, $inlen);
  return;
}
function __gcry_md_ctl($hd, $cmd, $buffer, $buflen) {
  if (($cmd | 0) == 33) {
    _md_stop_debug($hd);
    var $rc_0 = 0;
  } else if (($cmd | 0) == 32) {
    _md_start_debug($hd, $buffer);
    var $rc_0 = 0;
  } else if (($cmd | 0) == 1) {
    var $rc_0 = _gcry_err_code(__gcry_md_setkey($hd, $buffer, $buflen));
  } else if (($cmd | 0) == 5) {
    _md_final($hd);
    var $rc_0 = 0;
  } else {
    var $rc_0 = 61;
  }
  var $rc_0;
  return _gcry_error519($rc_0);
}
function _md_register_default() {
  var label = 0;
  var $err_0 = 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    var $err_0;
    if (($err_0 | 0) != 0) {
      label = 444;
      break;
    }
    var $4 = ($i_0 << 4) + 457676 | 0;
    if (($i_0 | 0) == 15) {
      label = 445;
      break;
    }
    do {
      if ((__gcry_fips_mode() | 0) == 0) {
        label = 442;
      } else {
        if ((2007 >>> ($i_0 >>> 0) & 1 | 0) == 0) {
          var $err_1 = $err_0;
          break;
        }
        if (($i_0 | 0) != 4) {
          label = 442;
          break;
        }
        if ((__gcry_enforced_fips_mode() | 0) == 0) {
          label = 442;
          break;
        } else {
          var $err_1 = $err_0;
          break;
        }
      }
    } while (0);
    if (label == 442) {
      label = 0;
      var $err_1 = __gcry_module_add(457672, HEAP32[($i_0 << 4) + 457684 >> 2], HEAP32[$4 >> 2], HEAP32[($i_0 << 4) + 457680 >> 2], 0);
    }
    var $err_1;
    var $err_0 = $err_1;
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 444) {
    __gcry_bug(485804, 200, 494260);
  } else if (label == 445) {
    return;
  }
}
function _md_copy($ahd, $b_hd) {
  var $44$s2;
  var $27$s2;
  var $bhd_0_in$s2;
  var $11$s2;
  var label = 0;
  var $1 = $ahd | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3 = $ahd + 4 | 0;
  if ((HEAP32[$3 >> 2] | 0) != 0) {
    _md_write($ahd, 0, 0);
  }
  var $11 = HEAP32[$1 >> 2] - $ahd | 0, $11$s2 = $11 >> 2;
  var $12 = $2 + 8 | 0;
  var $15 = $11 + 32 | 0;
  if ((HEAP32[$12 >> 2] | 0) == 0) {
    var $bhd_0_in = __gcry_malloc($15), $bhd_0_in$s2 = $bhd_0_in >> 2;
  } else {
    var $bhd_0_in = __gcry_malloc_secure($15), $bhd_0_in$s2 = $bhd_0_in >> 2;
  }
  var $bhd_0_in;
  var $bhd_0 = $bhd_0_in;
  do {
    if (($bhd_0_in | 0) == 0) {
      var $25 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      if (($25 | 0) == 0) {
        break;
      } else {
        var $err_278 = $25;
      }
      var $err_278;
      return $err_278;
    }
  } while (0);
  var $27 = $bhd_0_in + $11 | 0, $27$s2 = $27 >> 2;
  HEAP32[$bhd_0_in$s2] = $27;
  var $31 = HEAP32[$ahd + 8 >> 2];
  if (($31 | 0) != ($11 - 15 | 0)) {
    __gcry_assert_failed(481980, 485804, 655, 494300);
  }
  HEAP32[$bhd_0_in$s2 + 2] = $31;
  HEAP32[$bhd_0_in$s2 + 1] = 0;
  if ((HEAP32[$3 >> 2] | 0) != 0) {
    __gcry_assert_failed(481460, 485804, 658, 494300);
  }
  var $44$s2 = $2 >> 2;
  HEAP32[$27$s2] = HEAP32[$44$s2];
  HEAP32[$27$s2 + 1] = HEAP32[$44$s2 + 1];
  HEAP32[$27$s2 + 2] = HEAP32[$44$s2 + 2];
  HEAP32[$27$s2 + 3] = HEAP32[$44$s2 + 3];
  HEAP32[$27$s2 + 4] = HEAP32[$44$s2 + 4];
  HEAP32[$27$s2 + 5] = HEAP32[$44$s2 + 5];
  HEAP32[$27$s2 + 6] = HEAP32[$44$s2 + 6];
  HEAP32[$27$s2 + 7] = HEAP32[$44$s2 + 7];
  HEAP32[$11$s2 + ($bhd_0_in$s2 + 5)] = 0;
  HEAP32[$11$s2 + ($bhd_0_in$s2 + 3)] = 0;
  var $49 = $2 + 24 | 0;
  do {
    if ((HEAP32[$49 >> 2] | 0) != 0) {
      var $53 = $2 + 28 | 0;
      var $56 = __gcry_malloc_secure(HEAP32[$53 >> 2] << 1);
      HEAP32[$11$s2 + ($bhd_0_in$s2 + 6)] = $56;
      if (($56 | 0) != 0) {
        _memcpy($56, HEAP32[$49 >> 2], HEAP32[$53 >> 2] << 1);
        break;
      }
      var $67 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      _md_close($bhd_0);
      if (($67 | 0) == 0) {
        break;
      } else {
        var $err_278 = $67;
      }
      var $err_278;
      return $err_278;
    }
  } while (0);
  var $71 = $11 + ($bhd_0_in + 20) | 0;
  var $ar_0_in = $2 + 20 | 0;
  while (1) {
    var $ar_0_in;
    var $ar_0 = HEAP32[$ar_0_in >> 2];
    if (($ar_0 | 0) == 0) {
      var $err_2 = 0;
      break;
    }
    var $77 = $ar_0 | 0;
    var $81 = HEAP32[HEAP32[$77 >> 2] + 36 >> 2] + 16 | 0;
    if ((HEAP32[$12 >> 2] | 0) == 0) {
      var $br_0_in = __gcry_malloc($81);
    } else {
      var $br_0_in = __gcry_malloc_secure($81);
    }
    var $br_0_in;
    if (($br_0_in | 0) == 0) {
      label = 467;
      break;
    }
    _memcpy($br_0_in, $ar_0, HEAP32[HEAP32[$77 >> 2] + 36 >> 2] + 16 | 0);
    HEAP32[$br_0_in + 8 >> 2] = HEAP32[$71 >> 2];
    HEAP32[$71 >> 2] = $br_0_in;
    __gcry_ath_mutex_lock(457668);
    __gcry_module_use(HEAP32[$br_0_in + 4 >> 2]);
    __gcry_ath_mutex_unlock(457668);
    var $ar_0_in = $ar_0 + 8 | 0;
  }
  if (label == 467) {
    var $91 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
    _md_close($bhd_0);
    var $err_2 = $91;
  }
  var $err_2;
  var $110 = ($err_2 | 0) == 0;
  do {
    if ((HEAP32[$2 + 12 >> 2] | 0) != 0 & $110) {
      _md_start_debug($bhd_0, 480852);
      if ($110) {
        break;
      } else {
        var $err_278 = $err_2;
      }
      var $err_278;
      return $err_278;
    } else {
      if ($110) {
        break;
      } else {
        var $err_278 = $err_2;
      }
      var $err_278;
      return $err_278;
    }
  } while (0);
  HEAP32[$b_hd >> 2] = $bhd_0;
  var $err_278 = 0;
  var $err_278;
  return $err_278;
}
_md_copy["X"] = 1;
function _md_write($a, $inbuf, $inlen) {
  var $r_02$s2;
  var $28$s2;
  var $1$s2;
  var $1$s2 = ($a | 0) >> 2;
  var $4 = HEAP32[HEAP32[$1$s2] + 12 >> 2];
  do {
    if (($4 | 0) != 0) {
      var $8 = HEAP32[$a + 4 >> 2];
      do {
        if (($8 | 0) != 0) {
          if ((_fwrite($a + 12 | 0, $8, 1, $4) | 0) == 1) {
            break;
          }
          __gcry_bug(485804, 794, 494248);
        }
      } while (0);
      if (($inlen | 0) == 0) {
        break;
      }
      if ((_fwrite($inbuf, $inlen, 1, HEAP32[HEAP32[$1$s2] + 12 >> 2]) | 0) == 1) {
        break;
      }
      __gcry_bug(485804, 796, 494248);
    }
  } while (0);
  var $r_01 = HEAP32[HEAP32[$1$s2] + 20 >> 2];
  var $28$s2 = ($a + 4 | 0) >> 2;
  if (($r_01 | 0) == 0) {
    HEAP32[$28$s2] = 0;
    return;
  }
  var $29 = $a + 12 | 0;
  var $r_02 = $r_01, $r_02$s2 = $r_02 >> 2;
  while (1) {
    var $r_02;
    var $31 = HEAP32[$28$s2];
    if (($31 | 0) != 0) {
      FUNCTION_TABLE[HEAP32[HEAP32[$r_02$s2] + 24 >> 2]]($r_02 + 16 | 0, $29, $31);
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$r_02$s2] + 24 >> 2]]($r_02 + 16 | 0, $inbuf, $inlen);
    var $r_0 = HEAP32[$r_02$s2 + 2];
    if (($r_0 | 0) == 0) {
      break;
    } else {
      var $r_02 = $r_0, $r_02$s2 = $r_02 >> 2;
    }
  }
  HEAP32[$28$s2] = 0;
  return;
}
_md_write["X"] = 1;
function _gpg_err_code563($err) {
  return $err & 65535;
}
function _gpg_err_make565($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function _md4_init($context) {
  var $context$s2 = $context >> 2;
  HEAP32[$context$s2] = 1732584193;
  HEAP32[$context$s2 + 1] = -271733879;
  HEAP32[$context$s2 + 2] = -1732584194;
  HEAP32[$context$s2 + 3] = 271733878;
  HEAP32[$context$s2 + 4] = 0;
  HEAP32[$context$s2 + 21] = 0;
  return;
}
function _gcry_err_code($err) {
  return _gpg_err_code563($err);
}
function __gcry_md_setkey($hd, $key, $keylen) {
  do {
    if ((HEAP32[HEAP32[$hd >> 2] + 24 >> 2] | 0) == 0) {
      var $rc_0 = 70;
    } else {
      var $7 = _prepare_macpads($hd, $key, $keylen);
      if (($7 | 0) != 0) {
        var $rc_0 = $7;
        break;
      }
      __gcry_md_reset($hd);
      var $rc_0 = 0;
    }
  } while (0);
  var $rc_0;
  return _gcry_error519($rc_0);
}
function _md_start_debug($md, $suffix) {
  var $4$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 52 | 0;
  if ((__gcry_fips_mode() | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $4$s2 = ($md | 0) >> 2;
  if ((HEAP32[HEAP32[$4$s2] + 12 >> 2] | 0) != 0) {
    __gcry_log_debug(490208, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = __stackBase__;
    return;
  }
  var $12 = HEAP32[112770] + 1 | 0;
  HEAP32[112770] = $12;
  var $13 = __stackBase__ | 0;
  _snprintf($13, 49, 489128, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $12, HEAP32[tempInt + 4 >> 2] = $suffix, tempInt));
  var $15 = _fopen($13, 487624);
  HEAP32[HEAP32[$4$s2] + 12 >> 2] = $15;
  if ((HEAP32[HEAP32[$4$s2] + 12 >> 2] | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_log_debug(486912, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $13, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _md_stop_debug($md) {
  var $1$s2;
  var $b$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $b$s2 = __stackBase__ >> 2;
  var $c = __stackBase__ + 8;
  var $1$s2 = ($md | 0) >> 2;
  if ((HEAP32[HEAP32[$1$s2] + 12 >> 2] | 0) != 0) {
    if ((HEAP32[$md + 4 >> 2] | 0) != 0) {
      _md_write($md, 0, 0);
    }
    _fclose(HEAP32[HEAP32[$1$s2] + 12 >> 2]);
    HEAP32[HEAP32[$1$s2] + 12 >> 2] = 0;
  }
  HEAP32[$b$s2] = 42;
  HEAP32[$b$s2 + 1] = 0;
  var $23$0 = (i64Math.multiply($md, 0, HEAP32[$b$s2], HEAP32[$b$s2 + 1]), HEAP32[tempDoublePtr >> 2]);
  var $23$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$c >> 2] = $23$0;
  HEAP32[$c + 4 >> 2] = $23$1;
  STACKTOP = __stackBase__;
  return;
}
function __gcry_md_debug($hd, $suffix) {
  if (($suffix | 0) == 0) {
    _md_stop_debug($hd);
    return;
  } else {
    _md_start_debug($hd, $suffix);
    return;
  }
}
function __gcry_md_read($hd, $algo) {
  __gcry_md_ctl($hd, 5, 0, 0);
  return _md_read($hd, $algo);
}
function __gcry_md_get($hd, $algo, $buffer, $buflen) {
  __gcry_fips_signal_error(485804, 1e3, 495336, 0, 478912);
  return 63;
}
function _md_digest_length($algorithm) {
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  __gcry_ath_mutex_lock(457668);
  var $7 = __gcry_module_lookup_id(HEAP32[114418], $algorithm);
  if (($7 | 0) == 0) {
    var $mdlen_0 = 0;
    var $mdlen_0;
    var $16 = __gcry_ath_mutex_unlock(457668);
    return $mdlen_0;
  }
  var $14 = HEAP32[HEAP32[$7 + 8 >> 2] + 16 >> 2];
  __gcry_module_release($7);
  var $mdlen_0 = $14;
  var $mdlen_0;
  var $16 = __gcry_ath_mutex_unlock(457668);
  return $mdlen_0;
}
function __gcry_md_get_algo($hd) {
  return _md_get_algo($hd);
}
function _md_get_algo($a) {
  var __stackBase__ = STACKTOP;
  var $4 = HEAP32[HEAP32[$a >> 2] + 20 >> 2];
  if (($4 | 0) == 0) {
    var $16 = 0;
    var $16;
    STACKTOP = __stackBase__;
    return $16;
  }
  if ((HEAP32[$4 + 8 >> 2] | 0) != 0) {
    __gcry_fips_signal_error(485804, 1055, 494288, 0, 485132);
    __gcry_log_error(484192, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  var $16 = HEAP32[HEAP32[$4 + 4 >> 2] + 24 >> 2];
  var $16;
  STACKTOP = __stackBase__;
  return $16;
}
function __gcry_md_get_algo_dlen($algorithm) {
  return _md_digest_length($algorithm);
}
function __gcry_md_algo_info($algo, $what, $buffer, $nbytes) {
  var $asnlen$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $asnlen = __stackBase__, $asnlen$s2 = $asnlen >> 2;
  L707 : do {
    if (($what | 0) == 10) {
      var $7 = _check_digest_algo($algo);
      if (($7 | 0) != 0) {
        var $err_0 = $7;
        break;
      }
      var $10 = _md_asn_oid($algo, $asnlen);
      var $11 = ($buffer | 0) != 0;
      do {
        if ($11) {
          var $14 = HEAP32[$asnlen$s2];
          if (HEAP32[$nbytes >> 2] >>> 0 < $14 >>> 0) {
            break;
          }
          _memcpy($buffer, $10, $14);
          HEAP32[$nbytes >> 2] = HEAP32[$asnlen$s2];
          var $err_0 = $7;
          break L707;
        } else {
          if (($nbytes | 0) == 0) {
            break;
          }
          HEAP32[$nbytes >> 2] = HEAP32[$asnlen$s2];
          var $err_0 = $7;
          break L707;
        }
      } while (0);
      var $err_0 = $11 ? 66 : 45;
    } else if (($what | 0) == 8) {
      if (!(($buffer | 0) == 0 & ($nbytes | 0) == 0)) {
        var $err_0 = 45;
        break;
      }
      var $err_0 = _check_digest_algo($algo);
    } else {
      var $err_0 = 61;
    }
  } while (0);
  var $err_0;
  var $21 = _gcry_error519($err_0);
  STACKTOP = __stackBase__;
  return $21;
}
function _check_digest_algo($algorithm) {
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  __gcry_ath_mutex_lock(457668);
  var $7 = __gcry_module_lookup_id(HEAP32[114418], $algorithm);
  if (($7 | 0) == 0) {
    var $rc_0 = 5;
    var $rc_0;
    var $11 = __gcry_ath_mutex_unlock(457668);
    return $rc_0;
  }
  __gcry_module_release($7);
  var $rc_0 = 0;
  var $rc_0;
  var $11 = __gcry_ath_mutex_unlock(457668);
  return $rc_0;
}
function __gcry_md_info($h, $cmd, $buffer, $nbytes) {
  L728 : do {
    if (($cmd | 0) == 9) {
      HEAP32[$nbytes >> 2] = HEAP32[HEAP32[$h >> 2] + 8 >> 2];
      var $err_0 = 0;
    } else if (($cmd | 0) == 35) {
      if (($buffer | 0) == 0) {
        var $err_0 = 45;
        break;
      }
      if (($nbytes | 0) != 0) {
        if ((HEAP32[$nbytes >> 2] | 0) != 4) {
          var $err_0 = 45;
          break;
        }
      }
      var $15 = HEAP32[$buffer >> 2];
      HEAP32[$nbytes >> 2] = 0;
      var $r_0_in = HEAP32[$h >> 2] + 20 | 0;
      while (1) {
        var $r_0_in;
        var $r_0 = HEAP32[$r_0_in >> 2];
        if (($r_0 | 0) == 0) {
          var $err_0 = 0;
          break L728;
        }
        if ((HEAP32[HEAP32[$r_0 + 4 >> 2] + 24 >> 2] | 0) == ($15 | 0)) {
          break;
        } else {
          var $r_0_in = $r_0 + 8 | 0;
        }
      }
      HEAP32[$nbytes >> 2] = 1;
      var $err_0 = 0;
    } else {
      var $err_0 = 61;
    }
  } while (0);
  var $err_0;
  return _gcry_error519($err_0);
}
function __gcry_md_init() {
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  return 0;
}
function __gcry_md_is_secure($a) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $value = __stackBase__;
  if ((__gcry_md_info($a, 9, 0, $value) | 0) != 0) {
    HEAP32[$value >> 2] = 1;
  }
  STACKTOP = __stackBase__;
  return HEAP32[$value >> 2];
}
function __gcry_md_is_enabled($a, $algo) {
  var $value$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $1 = __stackBase__;
  var $value = __stackBase__ + 4, $value$s2 = $value >> 2;
  HEAP32[$1 >> 2] = $algo;
  HEAP32[$value$s2] = 4;
  if ((__gcry_md_info($a, 35, $1, $value) | 0) != 0) {
    HEAP32[$value$s2] = 0;
  }
  STACKTOP = __stackBase__;
  return HEAP32[$value$s2];
}
function __gcry_md_list($list, $list_length) {
  __gcry_ath_mutex_lock(457668);
  __gcry_module_list(HEAP32[114418], $list, $list_length);
  __gcry_ath_mutex_unlock(457668);
  return 0;
}
function __gcry_md_selftest($algo, $extended, $report) {
  var $7$s2;
  var label = 0;
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  __gcry_ath_mutex_lock(457668);
  var $7 = __gcry_module_lookup_id(HEAP32[114418], $algo), $7$s2 = $7 >> 2;
  var $8 = ($7 | 0) != 0;
  do {
    if ($8) {
      if ((HEAP32[$7$s2 + 4] & 1 | 0) != 0) {
        label = 587;
        break;
      }
      var $17 = HEAP32[$7$s2 + 3];
      __gcry_ath_mutex_unlock(457668);
      if (($17 | 0) == 0) {
        label = 591;
        break;
      }
      var $22 = HEAP32[$17 >> 2];
      if (($22 | 0) == 0) {
        label = 591;
        break;
      }
      var $ec_0 = FUNCTION_TABLE[$22]($algo, $extended, $report);
      break;
    } else {
      label = 587;
    }
  } while (0);
  do {
    if (label == 587) {
      __gcry_ath_mutex_unlock(457668);
      label = 591;
      break;
    }
  } while (0);
  do {
    if (label == 591) {
      if (($report | 0) == 0) {
        var $ec_0 = 5;
        break;
      }
      do {
        if ($8) {
          if ((HEAP32[$7$s2 + 4] & 1 | 0) == 0) {
            var $37 = 468492;
            break;
          } else {
            label = 594;
            break;
          }
        } else {
          label = 594;
        }
      } while (0);
      if (label == 594) {
        var $37 = $8 ? 466844 : 464928;
      }
      var $37;
      FUNCTION_TABLE[$report](471460, $algo, 470120, $37);
      var $ec_0 = 5;
    }
  } while (0);
  var $ec_0;
  if (!$8) {
    var $43 = _gpg_error518($ec_0);
    return $43;
  }
  __gcry_ath_mutex_lock(457668);
  __gcry_module_release($7);
  __gcry_ath_mutex_unlock(457668);
  var $43 = _gpg_error518($ec_0);
  return $43;
}
__gcry_md_selftest["X"] = 1;
function _gcry_md_lookup_func_name($spec, $data) {
  return (_strcasecmp(HEAP32[$spec >> 2], $data) | 0) == 0 & 1;
}
function _gcry_md_lookup_oid($oid) {
  return __gcry_module_lookup(HEAP32[114418], $oid, 66);
}
function _gcry_md_lookup_func_oid($spec, $data) {
  var $3 = HEAP32[$spec + 12 >> 2];
  if (($3 | 0) == 0) {
    var $ret_2 = 0;
    var $ret_2;
    return $ret_2;
  }
  var $6 = HEAP32[$3 >> 2];
  if (($6 | 0) == 0) {
    var $ret_2 = 0;
    var $ret_2;
    return $ret_2;
  } else {
    var $ret_01 = 0;
    var $i_02 = 0;
    var $8 = $6;
  }
  while (1) {
    var $8;
    var $i_02;
    var $ret_01;
    var $_ret_0 = (_strcasecmp($data, $8) | 0) == 0 ? 1 : $ret_01;
    var $11 = $i_02 + 1 | 0;
    var $13 = HEAP32[$3 + ($11 << 2) >> 2];
    if (($13 | 0) != 0 & ($_ret_0 | 0) == 0) {
      var $ret_01 = $_ret_0;
      var $i_02 = $11;
      var $8 = $13;
    } else {
      var $ret_2 = $_ret_0;
      break;
    }
  }
  var $ret_2;
  return $ret_2;
}
function _gcry_err_make564($code) {
  return _gpg_err_make565(32, $code);
}
function _md_final($a) {
  var $1$s2;
  var $om$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $om = __stackBase__, $om$s2 = $om >> 2;
  var $1$s2 = ($a | 0) >> 2;
  if ((HEAP32[HEAP32[$1$s2] + 16 >> 2] | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[$a + 4 >> 2] | 0) != 0) {
    _md_write($a, 0, 0);
  }
  var $r_01 = HEAP32[HEAP32[$1$s2] + 20 >> 2];
  L796 : do {
    if (($r_01 | 0) != 0) {
      var $r_02 = $r_01;
      while (1) {
        var $r_02;
        FUNCTION_TABLE[HEAP32[HEAP32[$r_02 >> 2] + 28 >> 2]]($r_02 + 16 | 0);
        var $r_0 = HEAP32[$r_02 + 8 >> 2];
        if (($r_0 | 0) == 0) {
          break L796;
        } else {
          var $r_02 = $r_0;
        }
      }
    }
  } while (0);
  HEAP32[HEAP32[$1$s2] + 16 >> 2] = 1;
  if ((HEAP32[HEAP32[$1$s2] + 24 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $30 = _md_get_algo($a);
  var $31 = _md_read($a, $30);
  var $32 = _md_digest_length($30);
  var $36 = _md_open($om, $30, HEAP32[HEAP32[$1$s2] + 8 >> 2], 0);
  if (($36 | 0) != 0) {
    __gcry_fatal_error($36, 0);
  }
  var $41 = HEAP32[$1$s2];
  var $45 = HEAP32[$41 + 28 >> 2];
  _md_write(HEAP32[$om$s2], HEAP32[$41 + 24 >> 2] + $45 | 0, $45);
  _md_write(HEAP32[$om$s2], $31, $32);
  _md_final(HEAP32[$om$s2]);
  _memcpy($31, _md_read(HEAP32[$om$s2], $30), $32);
  _md_close(HEAP32[$om$s2]);
  STACKTOP = __stackBase__;
  return;
}
_md_final["X"] = 1;
function _prepare_macpads($hd, $key, $keylen) {
  var $4$s2;
  var $1 = _md_get_algo($hd);
  if (($1 | 0) == 0) {
    var $_0 = 5;
    var $_0;
    return $_0;
  }
  var $4$s2 = ($hd | 0) >> 2;
  do {
    if (HEAP32[HEAP32[$4$s2] + 28 >> 2] >>> 0 < $keylen >>> 0) {
      var $11 = __gcry_malloc_secure(_md_digest_length($1));
      if (($11 | 0) == 0) {
        var $_0 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
        var $_0;
        return $_0;
      } else {
        __gcry_md_hash_buffer($1, $11, $key, $keylen);
        var $18 = _md_digest_length($1);
        if ($18 >>> 0 <= HEAP32[HEAP32[$4$s2] + 28 >> 2] >>> 0) {
          var $helpkey_0 = $11;
          var $_01 = $11;
          var $_02 = $18;
          break;
        }
        __gcry_assert_failed(482660, 485804, 871, 494128);
      }
    } else {
      var $helpkey_0 = 0;
      var $_01 = $key;
      var $_02 = $keylen;
    }
  } while (0);
  var $_02;
  var $_01;
  var $helpkey_0;
  var $25 = HEAP32[$4$s2];
  _memset(HEAP32[$25 + 24 >> 2], 0, HEAP32[$25 + 28 >> 2] << 1);
  var $31 = HEAP32[$4$s2];
  var $33 = HEAP32[$31 + 24 >> 2];
  var $35 = HEAP32[$31 + 28 >> 2];
  _memcpy($33, $_01, $_02);
  _memcpy($33 + $35 | 0, $_01, $_02);
  L819 : do {
    if ((HEAP32[HEAP32[$4$s2] + 28 >> 2] | 0) > 0) {
      var $i_03 = 0;
      while (1) {
        var $i_03;
        var $41 = $33 + $i_03 | 0;
        HEAP8[$41] = HEAP8[$41] ^ 54;
        var $44 = $33 + $i_03 + $35 | 0;
        HEAP8[$44] = HEAP8[$44] ^ 92;
        var $47 = $i_03 + 1 | 0;
        if (($47 | 0) < (HEAP32[HEAP32[$4$s2] + 28 >> 2] | 0)) {
          var $i_03 = $47;
        } else {
          break L819;
        }
      }
    }
  } while (0);
  __gcry_free($helpkey_0);
  var $_0 = 0;
  var $_0;
  return $_0;
}
_prepare_macpads["X"] = 1;
function _md_read($a, $algo) {
  var $r_0$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $4 = HEAP32[HEAP32[$a >> 2] + 20 >> 2];
  if (($algo | 0) == 0) {
    if (($4 | 0) == 0) {
      __gcry_bug(485804, 969, 494280);
    }
    if ((HEAP32[$4 + 8 >> 2] | 0) != 0) {
      __gcry_log_debug(483576, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 32 >> 2]]($4 + 16 | 0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    var $r_0 = $4, $r_0$s2 = $r_0 >> 2;
    while (1) {
      var $r_0;
      if (($r_0 | 0) == 0) {
        label = 648;
        break;
      }
      if ((HEAP32[HEAP32[$r_0$s2 + 1] + 24 >> 2] | 0) == ($algo | 0)) {
        break;
      }
      var $r_0 = HEAP32[$r_0$s2 + 2], $r_0$s2 = $r_0 >> 2;
    }
    if (label == 648) {
      __gcry_bug(485804, 969, 494280);
    }
    var $_0 = FUNCTION_TABLE[HEAP32[HEAP32[$r_0$s2] + 32 >> 2]]($r_0 + 16 | 0);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
function __gcry_md_hash_buffer($algo, $digest, $buffer, $length) {
  var $h$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $h = __stackBase__, $h$s2 = $h >> 2;
  do {
    if (($algo | 0) == 3) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_rmd160_hash_buffer($digest, $buffer, $length);
      STACKTOP = __stackBase__;
      return;
    } else if (($algo | 0) == 2) {
      __gcry_sha1_hash_buffer($digest, $buffer, $length);
      STACKTOP = __stackBase__;
      return;
    } else if (($algo | 0) == 1) {
      if ((__gcry_fips_mode() | 0) == 0) {
        break;
      }
      __gcry_inactivate_fips_mode(475736);
      if ((__gcry_enforced_fips_mode() | 0) == 0) {
        break;
      }
      __gcry_fips_noreturn();
    }
  } while (0);
  var $14 = _md_open($h, $algo, 0, 0);
  if (($14 | 0) != 0) {
    var $18 = _gpg_strerror(_gcry_error519($14));
    __gcry_log_bug(473020, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $algo, HEAP32[tempInt + 4 >> 2] = $18, tempInt));
  }
  _md_write(HEAP32[$h$s2], $buffer, $length);
  _md_final(HEAP32[$h$s2]);
  _memcpy($digest, _md_read(HEAP32[$h$s2], $algo), _md_digest_length($algo));
  _md_close(HEAP32[$h$s2]);
  STACKTOP = __stackBase__;
  return;
}
function _md_asn_oid($algorithm, $asnlen) {
  var __stackBase__ = STACKTOP;
  __gcry_ath_mutex_lock(457668);
  if (!HEAP8[457944]) {
    _md_register_default();
    HEAP8[457944] = 1;
  }
  __gcry_ath_mutex_unlock(457668);
  __gcry_ath_mutex_lock(457668);
  var $7 = __gcry_module_lookup_id(HEAP32[114418], $algorithm);
  if (($7 | 0) == 0) {
    __gcry_log_bug(486008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
  }
  if (($asnlen | 0) != 0) {
    HEAP32[$asnlen >> 2] = HEAP32[HEAP32[$7 + 8 >> 2] + 8 >> 2];
  }
  var $22 = HEAP32[HEAP32[$7 + 8 >> 2] + 4 >> 2];
  __gcry_module_release($7);
  __gcry_ath_mutex_unlock(457668);
  STACKTOP = __stackBase__;
  return $22;
}
function _md4_read($context) {
  return $context + 20 | 0;
}
function _transform($ctx, $data) {
  var $7$s2;
  var $5$s2;
  var $3$s2;
  var $1 = $ctx | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3$s2 = ($ctx + 4 | 0) >> 2;
  var $4 = HEAP32[$3$s2];
  var $5$s2 = ($ctx + 8 | 0) >> 2;
  var $6 = HEAP32[$5$s2];
  var $7$s2 = ($ctx + 12 | 0) >> 2;
  var $8 = HEAP32[$7$s2];
  var $9 = $data;
  var $st$9$0 = $9 | 0;
  var $st$9$1 = $9 + 4 | 0;
  var $st$9$2 = $9 + 8 | 0;
  var $st$9$3 = $9 + 12 | 0;
  var $st$9$4 = $9 + 16 | 0;
  var $st$9$5 = $9 + 20 | 0;
  var $st$9$6 = $9 + 24 | 0;
  var $st$9$7 = $9 + 28 | 0;
  var $st$9$8 = $9 + 32 | 0;
  var $st$9$9 = $9 + 36 | 0;
  var $st$9$10 = $9 + 40 | 0;
  var $st$9$11 = $9 + 44 | 0;
  var $st$9$12 = $9 + 48 | 0;
  var $st$9$13 = $9 + 52 | 0;
  var $st$9$14 = $9 + 56 | 0;
  var $st$9$15 = $9 + 60 | 0;
  var $13 = HEAPU8[$st$9$0] | HEAPU8[$st$9$0 + 1] << 8 | HEAPU8[$st$9$0 + 2] << 16 | HEAPU8[$st$9$0 + 3] << 24 | 0;
  var $15 = $13 + $2 + (($8 ^ $6) & $4 ^ $8) | 0;
  var $18 = $15 << 3 | $15 >>> 29;
  var $23 = HEAPU8[$st$9$1] | HEAPU8[$st$9$1 + 1] << 8 | HEAPU8[$st$9$1 + 2] << 16 | HEAPU8[$st$9$1 + 3] << 24 | 0;
  var $25 = $23 + $8 + ($18 & ($6 ^ $4) ^ $6) | 0;
  var $28 = $25 << 7 | $25 >>> 25;
  var $33 = HEAPU8[$st$9$2] | HEAPU8[$st$9$2 + 1] << 8 | HEAPU8[$st$9$2 + 2] << 16 | HEAPU8[$st$9$2 + 3] << 24 | 0;
  var $35 = $33 + $6 + ($28 & ($18 ^ $4) ^ $4) | 0;
  var $38 = $35 << 11 | $35 >>> 21;
  var $43 = HEAPU8[$st$9$3] | HEAPU8[$st$9$3 + 1] << 8 | HEAPU8[$st$9$3 + 2] << 16 | HEAPU8[$st$9$3 + 3] << 24 | 0;
  var $45 = $43 + $4 + ($38 & ($28 ^ $18) ^ $18) | 0;
  var $48 = $45 << 19 | $45 >>> 13;
  var $53 = HEAPU8[$st$9$4] | HEAPU8[$st$9$4 + 1] << 8 | HEAPU8[$st$9$4 + 2] << 16 | HEAPU8[$st$9$4 + 3] << 24 | 0;
  var $55 = $18 + $53 + ($48 & ($38 ^ $28) ^ $28) | 0;
  var $58 = $55 << 3 | $55 >>> 29;
  var $63 = HEAPU8[$st$9$5] | HEAPU8[$st$9$5 + 1] << 8 | HEAPU8[$st$9$5 + 2] << 16 | HEAPU8[$st$9$5 + 3] << 24 | 0;
  var $65 = $28 + $63 + ($58 & ($48 ^ $38) ^ $38) | 0;
  var $68 = $65 << 7 | $65 >>> 25;
  var $73 = HEAPU8[$st$9$6] | HEAPU8[$st$9$6 + 1] << 8 | HEAPU8[$st$9$6 + 2] << 16 | HEAPU8[$st$9$6 + 3] << 24 | 0;
  var $75 = $38 + $73 + ($68 & ($58 ^ $48) ^ $48) | 0;
  var $78 = $75 << 11 | $75 >>> 21;
  var $83 = HEAPU8[$st$9$7] | HEAPU8[$st$9$7 + 1] << 8 | HEAPU8[$st$9$7 + 2] << 16 | HEAPU8[$st$9$7 + 3] << 24 | 0;
  var $85 = $48 + $83 + ($78 & ($68 ^ $58) ^ $58) | 0;
  var $88 = $85 << 19 | $85 >>> 13;
  var $93 = HEAPU8[$st$9$8] | HEAPU8[$st$9$8 + 1] << 8 | HEAPU8[$st$9$8 + 2] << 16 | HEAPU8[$st$9$8 + 3] << 24 | 0;
  var $95 = $58 + $93 + ($88 & ($78 ^ $68) ^ $68) | 0;
  var $98 = $95 << 3 | $95 >>> 29;
  var $103 = HEAPU8[$st$9$9] | HEAPU8[$st$9$9 + 1] << 8 | HEAPU8[$st$9$9 + 2] << 16 | HEAPU8[$st$9$9 + 3] << 24 | 0;
  var $105 = $68 + $103 + ($98 & ($88 ^ $78) ^ $78) | 0;
  var $108 = $105 << 7 | $105 >>> 25;
  var $113 = HEAPU8[$st$9$10] | HEAPU8[$st$9$10 + 1] << 8 | HEAPU8[$st$9$10 + 2] << 16 | HEAPU8[$st$9$10 + 3] << 24 | 0;
  var $115 = $78 + $113 + ($108 & ($98 ^ $88) ^ $88) | 0;
  var $118 = $115 << 11 | $115 >>> 21;
  var $123 = HEAPU8[$st$9$11] | HEAPU8[$st$9$11 + 1] << 8 | HEAPU8[$st$9$11 + 2] << 16 | HEAPU8[$st$9$11 + 3] << 24 | 0;
  var $125 = $88 + $123 + ($118 & ($108 ^ $98) ^ $98) | 0;
  var $128 = $125 << 19 | $125 >>> 13;
  var $133 = HEAPU8[$st$9$12] | HEAPU8[$st$9$12 + 1] << 8 | HEAPU8[$st$9$12 + 2] << 16 | HEAPU8[$st$9$12 + 3] << 24 | 0;
  var $135 = $98 + $133 + ($128 & ($118 ^ $108) ^ $108) | 0;
  var $138 = $135 << 3 | $135 >>> 29;
  var $143 = HEAPU8[$st$9$13] | HEAPU8[$st$9$13 + 1] << 8 | HEAPU8[$st$9$13 + 2] << 16 | HEAPU8[$st$9$13 + 3] << 24 | 0;
  var $145 = $108 + $143 + ($138 & ($128 ^ $118) ^ $118) | 0;
  var $148 = $145 << 7 | $145 >>> 25;
  var $153 = HEAPU8[$st$9$14] | HEAPU8[$st$9$14 + 1] << 8 | HEAPU8[$st$9$14 + 2] << 16 | HEAPU8[$st$9$14 + 3] << 24 | 0;
  var $155 = $118 + $153 + ($148 & ($138 ^ $128) ^ $128) | 0;
  var $158 = $155 << 11 | $155 >>> 21;
  var $163 = HEAPU8[$st$9$15] | HEAPU8[$st$9$15 + 1] << 8 | HEAPU8[$st$9$15 + 2] << 16 | HEAPU8[$st$9$15 + 3] << 24 | 0;
  var $165 = $128 + $163 + ($158 & ($148 ^ $138) ^ $138) | 0;
  var $168 = $165 << 19 | $165 >>> 13;
  var $169 = $168 & $158;
  var $175 = $13 + $138 + (($168 | $158) & $148 | $169) + 1518500249 | 0;
  var $178 = $175 << 3 | $175 >>> 29;
  var $179 = $178 & $168;
  var $185 = $53 + $148 + ($178 & $158 | $169 | $179) + 1518500249 | 0;
  var $188 = $185 << 5 | $185 >>> 27;
  var $189 = $188 & $178;
  var $195 = $93 + $158 + ($188 & $168 | $179 | $189) + 1518500249 | 0;
  var $198 = $195 << 9 | $195 >>> 23;
  var $199 = $198 & $188;
  var $205 = $133 + $168 + ($198 & $178 | $189 | $199) + 1518500249 | 0;
  var $208 = $205 << 13 | $205 >>> 19;
  var $209 = $208 & $198;
  var $215 = $23 + $178 + ($208 & $188 | $199 | $209) + 1518500249 | 0;
  var $218 = $215 << 3 | $215 >>> 29;
  var $219 = $218 & $208;
  var $225 = $63 + $188 + ($218 & $198 | $209 | $219) + 1518500249 | 0;
  var $228 = $225 << 5 | $225 >>> 27;
  var $229 = $228 & $218;
  var $235 = $103 + $198 + ($228 & $208 | $219 | $229) + 1518500249 | 0;
  var $238 = $235 << 9 | $235 >>> 23;
  var $239 = $238 & $228;
  var $245 = $143 + $208 + ($238 & $218 | $229 | $239) + 1518500249 | 0;
  var $248 = $245 << 13 | $245 >>> 19;
  var $249 = $248 & $238;
  var $255 = $33 + $218 + ($248 & $228 | $239 | $249) + 1518500249 | 0;
  var $258 = $255 << 3 | $255 >>> 29;
  var $259 = $258 & $248;
  var $265 = $73 + $228 + ($258 & $238 | $249 | $259) + 1518500249 | 0;
  var $268 = $265 << 5 | $265 >>> 27;
  var $269 = $268 & $258;
  var $275 = $113 + $238 + ($268 & $248 | $259 | $269) + 1518500249 | 0;
  var $278 = $275 << 9 | $275 >>> 23;
  var $279 = $278 & $268;
  var $285 = $153 + $248 + ($278 & $258 | $269 | $279) + 1518500249 | 0;
  var $288 = $285 << 13 | $285 >>> 19;
  var $289 = $288 & $278;
  var $295 = $43 + $258 + ($288 & $268 | $279 | $289) + 1518500249 | 0;
  var $298 = $295 << 3 | $295 >>> 29;
  var $299 = $298 & $288;
  var $305 = $83 + $268 + ($298 & $278 | $289 | $299) + 1518500249 | 0;
  var $308 = $305 << 5 | $305 >>> 27;
  var $309 = $308 & $298;
  var $315 = $123 + $278 + ($308 & $288 | $299 | $309) + 1518500249 | 0;
  var $318 = $315 << 9 | $315 >>> 23;
  var $324 = $163 + $288 + ($318 & ($308 | $298) | $309) + 1518500249 | 0;
  var $327 = $324 << 13 | $324 >>> 19;
  var $332 = $13 + $298 + ($318 ^ $308 ^ $327) + 1859775393 | 0;
  var $335 = $332 << 3 | $332 >>> 29;
  var $340 = $93 + $308 + ($327 ^ $318 ^ $335) + 1859775393 | 0;
  var $343 = $340 << 9 | $340 >>> 23;
  var $348 = $53 + $318 + ($335 ^ $327 ^ $343) + 1859775393 | 0;
  var $351 = $348 << 11 | $348 >>> 21;
  var $356 = $133 + $327 + ($343 ^ $335 ^ $351) + 1859775393 | 0;
  var $359 = $356 << 15 | $356 >>> 17;
  var $364 = $33 + $335 + ($351 ^ $343 ^ $359) + 1859775393 | 0;
  var $367 = $364 << 3 | $364 >>> 29;
  var $372 = $113 + $343 + ($359 ^ $351 ^ $367) + 1859775393 | 0;
  var $375 = $372 << 9 | $372 >>> 23;
  var $380 = $73 + $351 + ($367 ^ $359 ^ $375) + 1859775393 | 0;
  var $383 = $380 << 11 | $380 >>> 21;
  var $388 = $153 + $359 + ($375 ^ $367 ^ $383) + 1859775393 | 0;
  var $391 = $388 << 15 | $388 >>> 17;
  var $396 = $23 + $367 + ($383 ^ $375 ^ $391) + 1859775393 | 0;
  var $399 = $396 << 3 | $396 >>> 29;
  var $404 = $103 + $375 + ($391 ^ $383 ^ $399) + 1859775393 | 0;
  var $407 = $404 << 9 | $404 >>> 23;
  var $412 = $63 + $383 + ($399 ^ $391 ^ $407) + 1859775393 | 0;
  var $415 = $412 << 11 | $412 >>> 21;
  var $420 = $143 + $391 + ($407 ^ $399 ^ $415) + 1859775393 | 0;
  var $423 = $420 << 15 | $420 >>> 17;
  var $428 = $43 + $399 + ($415 ^ $407 ^ $423) + 1859775393 | 0;
  var $431 = $428 << 3 | $428 >>> 29;
  var $436 = $123 + $407 + ($423 ^ $415 ^ $431) + 1859775393 | 0;
  var $439 = $436 << 9 | $436 >>> 23;
  var $444 = $83 + $415 + ($431 ^ $423 ^ $439) + 1859775393 | 0;
  var $447 = $444 << 11 | $444 >>> 21;
  var $452 = $163 + $423 + ($439 ^ $431 ^ $447) + 1859775393 | 0;
  HEAP32[$1 >> 2] = $431 + $2 | 0;
  HEAP32[$3$s2] = ($452 << 15 | $452 >>> 17) + HEAP32[$3$s2] | 0;
  HEAP32[$5$s2] = $447 + HEAP32[$5$s2] | 0;
  HEAP32[$7$s2] = $439 + HEAP32[$7$s2] | 0;
  return;
}
_transform["X"] = 1;
function _md5_init($context) {
  var $context$s2 = $context >> 2;
  HEAP32[$context$s2] = 1732584193;
  HEAP32[$context$s2 + 1] = -271733879;
  HEAP32[$context$s2 + 2] = -1732584194;
  HEAP32[$context$s2 + 3] = 271733878;
  HEAP32[$context$s2 + 4] = 0;
  HEAP32[$context$s2 + 21] = 0;
  return;
}
function _md5_read($context) {
  return $context + 20 | 0;
}
function _md4_write($context, $inbuf_arg, $inlen) {
  var $3$s2;
  var label = 0;
  var $1 = $context;
  var $3$s2 = ($context + 84 | 0) >> 2;
  var $4 = $context + 20 | 0;
  var $6 = $context + 16 | 0;
  var $inlen_tr = $inlen;
  var $inbuf_arg_tr = $inbuf_arg;
  L872 : while (1) {
    var $inbuf_arg_tr;
    var $inlen_tr;
    if ((HEAP32[$3$s2] | 0) == 64) {
      _transform($1, $4);
      __gcry_burn_stack(104);
      HEAP32[$3$s2] = 0;
      HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1 | 0;
    }
    if (($inbuf_arg_tr | 0) == 0) {
      label = 693;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1 = $inbuf_arg_tr;
      var $_1 = $inlen_tr;
      break;
    } else {
      var $inbuf_0 = $inbuf_arg_tr;
      var $_0 = $inlen_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $inlen_tr = 0;
        var $inbuf_arg_tr = 0;
        continue L872;
      }
      var $19 = HEAP32[$3$s2];
      if (($19 | 0) >= 64) {
        label = 685;
        break L872;
      }
      var $23 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $19 + 1 | 0;
      HEAP8[$19 + ($context + 20) | 0] = $23;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 685) {
    _md4_write($context, 0, 0);
    var $inbuf_1 = $inbuf_0;
    var $_1 = $_0;
  } else if (label == 693) {
    return;
  }
  var $_1;
  var $inbuf_1;
  __gcry_burn_stack(104);
  L886 : do {
    if ($_1 >>> 0 > 63) {
      var $29 = $context + 16 | 0;
      var $_23 = $_1;
      var $inbuf_24 = $inbuf_1;
      while (1) {
        var $inbuf_24;
        var $_23;
        _transform($1, $inbuf_24);
        HEAP32[$3$s2] = 0;
        HEAP32[$29 >> 2] = HEAP32[$29 >> 2] + 1 | 0;
        var $33 = $_23 - 64 | 0;
        var $34 = $inbuf_24 + 64 | 0;
        if ($33 >>> 0 > 63) {
          var $_23 = $33;
          var $inbuf_24 = $34;
        } else {
          var $inbuf_3 = $34;
          var $_3 = $33;
          break L886;
        }
      }
    } else {
      var $inbuf_3 = $inbuf_1;
      var $_3 = $_1;
    }
  } while (0);
  while (1) {
    var $_3;
    var $inbuf_3;
    if (($_3 | 0) == 0) {
      label = 695;
      break;
    }
    var $38 = HEAP32[$3$s2];
    if (($38 | 0) >= 64) {
      label = 694;
      break;
    }
    var $42 = HEAP8[$inbuf_3];
    HEAP32[$3$s2] = $38 + 1 | 0;
    HEAP8[$38 + ($context + 20) | 0] = $42;
    var $inbuf_3 = $inbuf_3 + 1 | 0;
    var $_3 = $_3 - 1 | 0;
  }
  if (label == 694) {
    return;
  } else if (label == 695) {
    return;
  }
}
_md4_write["X"] = 1;
function _md4_final($context) {
  var $8$s2;
  var $context$s2 = $context >> 2;
  var $1 = $context;
  _md4_write($context, 0, 0);
  var $4 = HEAP32[$context$s2 + 4];
  var $8$s2 = ($context + 84 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10 = _llvm_uadd_with_overflow_i32($4 << 6, $9);
  var $msb_0 = (tempRet0 & 1) + ($4 >>> 26) | 0;
  var $13 = $10 << 3;
  var $16 = $msb_0 << 3 | $10 >>> 29;
  HEAP32[$8$s2] = $9 + 1 | 0;
  var $19 = $context + 20 | 0;
  HEAP8[$9 + ($context + 20) | 0] = -128;
  var $21 = HEAP32[$8$s2];
  L898 : do {
    if (($9 | 0) < 56) {
      if (($21 | 0) < 56) {
        var $24 = $21;
      } else {
        break;
      }
      while (1) {
        var $24;
        HEAP32[$8$s2] = $24 + 1 | 0;
        HEAP8[$24 + ($context + 20) | 0] = 0;
        var $27 = HEAP32[$8$s2];
        if (($27 | 0) < 56) {
          var $24 = $27;
        } else {
          break L898;
        }
      }
    } else {
      L903 : do {
        if (($21 | 0) < 64) {
          var $29 = $21;
          while (1) {
            var $29;
            HEAP32[$8$s2] = $29 + 1 | 0;
            HEAP8[$29 + ($context + 20) | 0] = 0;
            var $32 = HEAP32[$8$s2];
            if (($32 | 0) < 64) {
              var $29 = $32;
            } else {
              break L903;
            }
          }
        }
      } while (0);
      _md4_write($context, 0, 0);
      _memset($19, 0, 56);
    }
  } while (0);
  HEAP8[$context + 76 | 0] = $13 & 255;
  HEAP8[$context + 77 | 0] = $10 >>> 5 & 255;
  HEAP8[$context + 78 | 0] = $10 >>> 13 & 255;
  HEAP8[$context + 79 | 0] = $10 >>> 21 & 255;
  HEAP8[$context + 80 | 0] = $16 & 255;
  HEAP8[$context + 81 | 0] = $msb_0 >>> 5 & 255;
  HEAP8[$context + 82 | 0] = $msb_0 >>> 13 & 255;
  HEAP8[$context + 83 | 0] = $msb_0 >>> 21 & 255;
  _transform($1, $19);
  __gcry_burn_stack(104);
  HEAP32[$19 >> 2] = HEAP32[$context$s2];
  HEAP32[$context$s2 + 6] = HEAP32[$context$s2 + 1];
  HEAP32[$context$s2 + 7] = HEAP32[$context$s2 + 2];
  HEAP32[$context$s2 + 8] = HEAP32[$context$s2 + 3];
  return;
}
_md4_final["X"] = 1;
function _md5_write($context, $inbuf_arg, $inlen) {
  var $3$s2;
  var label = 0;
  var $1 = $context;
  var $3$s2 = ($context + 84 | 0) >> 2;
  var $4 = $context + 20 | 0;
  var $6 = $context + 16 | 0;
  var $inlen_tr = $inlen;
  var $inbuf_arg_tr = $inbuf_arg;
  L909 : while (1) {
    var $inbuf_arg_tr;
    var $inlen_tr;
    if ((HEAP32[$3$s2] | 0) == 64) {
      _transform576($1, $4);
      __gcry_burn_stack(104);
      HEAP32[$3$s2] = 0;
      HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1 | 0;
    }
    if (($inbuf_arg_tr | 0) == 0) {
      label = 719;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1 = $inbuf_arg_tr;
      var $_1 = $inlen_tr;
      break;
    } else {
      var $inbuf_0 = $inbuf_arg_tr;
      var $_0 = $inlen_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $inlen_tr = 0;
        var $inbuf_arg_tr = 0;
        continue L909;
      }
      var $19 = HEAP32[$3$s2];
      if (($19 | 0) >= 64) {
        label = 711;
        break L909;
      }
      var $23 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $19 + 1 | 0;
      HEAP8[$19 + ($context + 20) | 0] = $23;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 711) {
    _md5_write($context, 0, 0);
    var $inbuf_1 = $inbuf_0;
    var $_1 = $_0;
  } else if (label == 719) {
    return;
  }
  var $_1;
  var $inbuf_1;
  __gcry_burn_stack(104);
  L923 : do {
    if ($_1 >>> 0 > 63) {
      var $29 = $context + 16 | 0;
      var $_23 = $_1;
      var $inbuf_24 = $inbuf_1;
      while (1) {
        var $inbuf_24;
        var $_23;
        _transform576($1, $inbuf_24);
        HEAP32[$3$s2] = 0;
        HEAP32[$29 >> 2] = HEAP32[$29 >> 2] + 1 | 0;
        var $33 = $_23 - 64 | 0;
        var $34 = $inbuf_24 + 64 | 0;
        if ($33 >>> 0 > 63) {
          var $_23 = $33;
          var $inbuf_24 = $34;
        } else {
          var $inbuf_3 = $34;
          var $_3 = $33;
          break L923;
        }
      }
    } else {
      var $inbuf_3 = $inbuf_1;
      var $_3 = $_1;
    }
  } while (0);
  while (1) {
    var $_3;
    var $inbuf_3;
    if (($_3 | 0) == 0) {
      label = 721;
      break;
    }
    var $38 = HEAP32[$3$s2];
    if (($38 | 0) >= 64) {
      label = 720;
      break;
    }
    var $42 = HEAP8[$inbuf_3];
    HEAP32[$3$s2] = $38 + 1 | 0;
    HEAP8[$38 + ($context + 20) | 0] = $42;
    var $inbuf_3 = $inbuf_3 + 1 | 0;
    var $_3 = $_3 - 1 | 0;
  }
  if (label == 720) {
    return;
  } else if (label == 721) {
    return;
  }
}
_md5_write["X"] = 1;
function _md5_final($context) {
  var $8$s2;
  var $context$s2 = $context >> 2;
  var $1 = $context;
  _md5_write($context, 0, 0);
  var $4 = HEAP32[$context$s2 + 4];
  var $8$s2 = ($context + 84 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10 = _llvm_uadd_with_overflow_i32($4 << 6, $9);
  var $msb_0 = (tempRet0 & 1) + ($4 >>> 26) | 0;
  var $13 = $10 << 3;
  var $16 = $msb_0 << 3 | $10 >>> 29;
  HEAP32[$8$s2] = $9 + 1 | 0;
  var $19 = $context + 20 | 0;
  HEAP8[$9 + ($context + 20) | 0] = -128;
  var $21 = HEAP32[$8$s2];
  L935 : do {
    if (($9 | 0) < 56) {
      if (($21 | 0) < 56) {
        var $24 = $21;
      } else {
        break;
      }
      while (1) {
        var $24;
        HEAP32[$8$s2] = $24 + 1 | 0;
        HEAP8[$24 + ($context + 20) | 0] = 0;
        var $27 = HEAP32[$8$s2];
        if (($27 | 0) < 56) {
          var $24 = $27;
        } else {
          break L935;
        }
      }
    } else {
      L940 : do {
        if (($21 | 0) < 64) {
          var $29 = $21;
          while (1) {
            var $29;
            HEAP32[$8$s2] = $29 + 1 | 0;
            HEAP8[$29 + ($context + 20) | 0] = 0;
            var $32 = HEAP32[$8$s2];
            if (($32 | 0) < 64) {
              var $29 = $32;
            } else {
              break L940;
            }
          }
        }
      } while (0);
      _md5_write($context, 0, 0);
      _memset($19, 0, 56);
    }
  } while (0);
  HEAP8[$context + 76 | 0] = $13 & 255;
  HEAP8[$context + 77 | 0] = $10 >>> 5 & 255;
  HEAP8[$context + 78 | 0] = $10 >>> 13 & 255;
  HEAP8[$context + 79 | 0] = $10 >>> 21 & 255;
  HEAP8[$context + 80 | 0] = $16 & 255;
  HEAP8[$context + 81 | 0] = $msb_0 >>> 5 & 255;
  HEAP8[$context + 82 | 0] = $msb_0 >>> 13 & 255;
  HEAP8[$context + 83 | 0] = $msb_0 >>> 21 & 255;
  _transform576($1, $19);
  __gcry_burn_stack(104);
  HEAP32[$19 >> 2] = HEAP32[$context$s2];
  HEAP32[$context$s2 + 6] = HEAP32[$context$s2 + 1];
  HEAP32[$context$s2 + 7] = HEAP32[$context$s2 + 2];
  HEAP32[$context$s2 + 8] = HEAP32[$context$s2 + 3];
  return;
}
_md5_final["X"] = 1;
function __gcry_register_primegen_progress($cb, $cb_data) {
  HEAP32[110041] = $cb;
  HEAP32[110037] = $cb_data;
  return;
}
function _transform576($ctx, $data) {
  var $7$s2;
  var $5$s2;
  var $3$s2;
  var $1 = $ctx | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3$s2 = ($ctx + 4 | 0) >> 2;
  var $4 = HEAP32[$3$s2];
  var $5$s2 = ($ctx + 8 | 0) >> 2;
  var $6 = HEAP32[$5$s2];
  var $7$s2 = ($ctx + 12 | 0) >> 2;
  var $8 = HEAP32[$7$s2];
  var $9 = $data;
  var $st$9$0 = $9 | 0;
  var $st$9$1 = $9 + 4 | 0;
  var $st$9$2 = $9 + 8 | 0;
  var $st$9$3 = $9 + 12 | 0;
  var $st$9$4 = $9 + 16 | 0;
  var $st$9$5 = $9 + 20 | 0;
  var $st$9$6 = $9 + 24 | 0;
  var $st$9$7 = $9 + 28 | 0;
  var $st$9$8 = $9 + 32 | 0;
  var $st$9$9 = $9 + 36 | 0;
  var $st$9$10 = $9 + 40 | 0;
  var $st$9$11 = $9 + 44 | 0;
  var $st$9$12 = $9 + 48 | 0;
  var $st$9$13 = $9 + 52 | 0;
  var $st$9$14 = $9 + 56 | 0;
  var $st$9$15 = $9 + 60 | 0;
  var $13 = HEAPU8[$st$9$0] | HEAPU8[$st$9$0 + 1] << 8 | HEAPU8[$st$9$0 + 2] << 16 | HEAPU8[$st$9$0 + 3] << 24 | 0;
  var $16 = $2 - 680876936 + $13 + (($8 ^ $6) & $4 ^ $8) | 0;
  var $20 = ($16 << 7 | $16 >>> 25) + $4 | 0;
  var $25 = HEAPU8[$st$9$1] | HEAPU8[$st$9$1 + 1] << 8 | HEAPU8[$st$9$1 + 2] << 16 | HEAPU8[$st$9$1 + 3] << 24 | 0;
  var $28 = $8 - 389564586 + $25 + ($20 & ($6 ^ $4) ^ $6) | 0;
  var $32 = ($28 << 12 | $28 >>> 20) + $20 | 0;
  var $37 = HEAPU8[$st$9$2] | HEAPU8[$st$9$2 + 1] << 8 | HEAPU8[$st$9$2 + 2] << 16 | HEAPU8[$st$9$2 + 3] << 24 | 0;
  var $40 = $6 + $37 + ($32 & ($20 ^ $4) ^ $4) + 606105819 | 0;
  var $44 = ($40 << 17 | $40 >>> 15) + $32 | 0;
  var $49 = HEAPU8[$st$9$3] | HEAPU8[$st$9$3 + 1] << 8 | HEAPU8[$st$9$3 + 2] << 16 | HEAPU8[$st$9$3 + 3] << 24 | 0;
  var $52 = $4 - 1044525330 + $49 + ($44 & ($32 ^ $20) ^ $20) | 0;
  var $56 = ($52 << 22 | $52 >>> 10) + $44 | 0;
  var $61 = HEAPU8[$st$9$4] | HEAPU8[$st$9$4 + 1] << 8 | HEAPU8[$st$9$4 + 2] << 16 | HEAPU8[$st$9$4 + 3] << 24 | 0;
  var $64 = $61 - 176418897 + $20 + ($56 & ($44 ^ $32) ^ $32) | 0;
  var $68 = ($64 << 7 | $64 >>> 25) + $56 | 0;
  var $73 = HEAPU8[$st$9$5] | HEAPU8[$st$9$5 + 1] << 8 | HEAPU8[$st$9$5 + 2] << 16 | HEAPU8[$st$9$5 + 3] << 24 | 0;
  var $76 = $73 + $32 + ($68 & ($56 ^ $44) ^ $44) + 1200080426 | 0;
  var $80 = ($76 << 12 | $76 >>> 20) + $68 | 0;
  var $85 = HEAPU8[$st$9$6] | HEAPU8[$st$9$6 + 1] << 8 | HEAPU8[$st$9$6 + 2] << 16 | HEAPU8[$st$9$6 + 3] << 24 | 0;
  var $88 = $85 - 1473231341 + $44 + ($80 & ($68 ^ $56) ^ $56) | 0;
  var $92 = ($88 << 17 | $88 >>> 15) + $80 | 0;
  var $97 = HEAPU8[$st$9$7] | HEAPU8[$st$9$7 + 1] << 8 | HEAPU8[$st$9$7 + 2] << 16 | HEAPU8[$st$9$7 + 3] << 24 | 0;
  var $100 = $97 - 45705983 + $56 + ($92 & ($80 ^ $68) ^ $68) | 0;
  var $104 = ($100 << 22 | $100 >>> 10) + $92 | 0;
  var $109 = HEAPU8[$st$9$8] | HEAPU8[$st$9$8 + 1] << 8 | HEAPU8[$st$9$8 + 2] << 16 | HEAPU8[$st$9$8 + 3] << 24 | 0;
  var $112 = $109 + $68 + ($104 & ($92 ^ $80) ^ $80) + 1770035416 | 0;
  var $116 = ($112 << 7 | $112 >>> 25) + $104 | 0;
  var $121 = HEAPU8[$st$9$9] | HEAPU8[$st$9$9 + 1] << 8 | HEAPU8[$st$9$9 + 2] << 16 | HEAPU8[$st$9$9 + 3] << 24 | 0;
  var $124 = $121 - 1958414417 + $80 + ($116 & ($104 ^ $92) ^ $92) | 0;
  var $128 = ($124 << 12 | $124 >>> 20) + $116 | 0;
  var $133 = HEAPU8[$st$9$10] | HEAPU8[$st$9$10 + 1] << 8 | HEAPU8[$st$9$10 + 2] << 16 | HEAPU8[$st$9$10 + 3] << 24 | 0;
  var $136 = $133 - 42063 + $92 + ($128 & ($116 ^ $104) ^ $104) | 0;
  var $140 = ($136 << 17 | $136 >>> 15) + $128 | 0;
  var $145 = HEAPU8[$st$9$11] | HEAPU8[$st$9$11 + 1] << 8 | HEAPU8[$st$9$11 + 2] << 16 | HEAPU8[$st$9$11 + 3] << 24 | 0;
  var $148 = $145 - 1990404162 + $104 + ($140 & ($128 ^ $116) ^ $116) | 0;
  var $152 = ($148 << 22 | $148 >>> 10) + $140 | 0;
  var $157 = HEAPU8[$st$9$12] | HEAPU8[$st$9$12 + 1] << 8 | HEAPU8[$st$9$12 + 2] << 16 | HEAPU8[$st$9$12 + 3] << 24 | 0;
  var $160 = $157 + $116 + ($152 & ($140 ^ $128) ^ $128) + 1804603682 | 0;
  var $164 = ($160 << 7 | $160 >>> 25) + $152 | 0;
  var $169 = HEAPU8[$st$9$13] | HEAPU8[$st$9$13 + 1] << 8 | HEAPU8[$st$9$13 + 2] << 16 | HEAPU8[$st$9$13 + 3] << 24 | 0;
  var $172 = $169 - 40341101 + $128 + ($164 & ($152 ^ $140) ^ $140) | 0;
  var $176 = ($172 << 12 | $172 >>> 20) + $164 | 0;
  var $181 = HEAPU8[$st$9$14] | HEAPU8[$st$9$14 + 1] << 8 | HEAPU8[$st$9$14 + 2] << 16 | HEAPU8[$st$9$14 + 3] << 24 | 0;
  var $184 = $181 - 1502002290 + $140 + ($176 & ($164 ^ $152) ^ $152) | 0;
  var $188 = ($184 << 17 | $184 >>> 15) + $176 | 0;
  var $193 = HEAPU8[$st$9$15] | HEAPU8[$st$9$15 + 1] << 8 | HEAPU8[$st$9$15 + 2] << 16 | HEAPU8[$st$9$15 + 3] << 24 | 0;
  var $196 = $193 + $152 + ($188 & ($176 ^ $164) ^ $164) + 1236535329 | 0;
  var $200 = ($196 << 22 | $196 >>> 10) + $188 | 0;
  var $206 = $25 - 165796510 + $164 + (($200 ^ $188) & $176 ^ $188) | 0;
  var $210 = ($206 << 5 | $206 >>> 27) + $200 | 0;
  var $216 = $85 - 1069501632 + $176 + (($210 ^ $200) & $188 ^ $200) | 0;
  var $220 = ($216 << 9 | $216 >>> 23) + $210 | 0;
  var $226 = $145 + $188 + (($220 ^ $210) & $200 ^ $210) + 643717713 | 0;
  var $230 = ($226 << 14 | $226 >>> 18) + $220 | 0;
  var $236 = $13 - 373897302 + $200 + (($230 ^ $220) & $210 ^ $220) | 0;
  var $240 = ($236 << 20 | $236 >>> 12) + $230 | 0;
  var $246 = $73 - 701558691 + $210 + (($240 ^ $230) & $220 ^ $230) | 0;
  var $250 = ($246 << 5 | $246 >>> 27) + $240 | 0;
  var $256 = $133 + $220 + (($250 ^ $240) & $230 ^ $240) + 38016083 | 0;
  var $260 = ($256 << 9 | $256 >>> 23) + $250 | 0;
  var $266 = $193 - 660478335 + $230 + (($260 ^ $250) & $240 ^ $250) | 0;
  var $270 = ($266 << 14 | $266 >>> 18) + $260 | 0;
  var $276 = $61 - 405537848 + $240 + (($270 ^ $260) & $250 ^ $260) | 0;
  var $280 = ($276 << 20 | $276 >>> 12) + $270 | 0;
  var $286 = $121 + $250 + (($280 ^ $270) & $260 ^ $270) + 568446438 | 0;
  var $290 = ($286 << 5 | $286 >>> 27) + $280 | 0;
  var $296 = $181 - 1019803690 + $260 + (($290 ^ $280) & $270 ^ $280) | 0;
  var $300 = ($296 << 9 | $296 >>> 23) + $290 | 0;
  var $306 = $49 - 187363961 + $270 + (($300 ^ $290) & $280 ^ $290) | 0;
  var $310 = ($306 << 14 | $306 >>> 18) + $300 | 0;
  var $316 = $109 + $280 + (($310 ^ $300) & $290 ^ $300) + 1163531501 | 0;
  var $320 = ($316 << 20 | $316 >>> 12) + $310 | 0;
  var $326 = $169 - 1444681467 + $290 + (($320 ^ $310) & $300 ^ $310) | 0;
  var $330 = ($326 << 5 | $326 >>> 27) + $320 | 0;
  var $336 = $37 - 51403784 + $300 + (($330 ^ $320) & $310 ^ $320) | 0;
  var $340 = ($336 << 9 | $336 >>> 23) + $330 | 0;
  var $346 = $97 + $310 + (($340 ^ $330) & $320 ^ $330) + 1735328473 | 0;
  var $350 = ($346 << 14 | $346 >>> 18) + $340 | 0;
  var $356 = $157 - 1926607734 + $320 + (($350 ^ $340) & $330 ^ $340) | 0;
  var $360 = ($356 << 20 | $356 >>> 12) + $350 | 0;
  var $365 = $73 - 378558 + $330 + ($350 ^ $340 ^ $360) | 0;
  var $369 = ($365 << 4 | $365 >>> 28) + $360 | 0;
  var $374 = $109 - 2022574463 + $340 + ($360 ^ $350 ^ $369) | 0;
  var $378 = ($374 << 11 | $374 >>> 21) + $369 | 0;
  var $383 = $145 + $350 + ($369 ^ $360 ^ $378) + 1839030562 | 0;
  var $387 = ($383 << 16 | $383 >>> 16) + $378 | 0;
  var $392 = $181 - 35309556 + $360 + ($378 ^ $369 ^ $387) | 0;
  var $396 = ($392 << 23 | $392 >>> 9) + $387 | 0;
  var $401 = $25 - 1530992060 + $369 + ($387 ^ $378 ^ $396) | 0;
  var $405 = ($401 << 4 | $401 >>> 28) + $396 | 0;
  var $410 = $61 + $378 + ($396 ^ $387 ^ $405) + 1272893353 | 0;
  var $414 = ($410 << 11 | $410 >>> 21) + $405 | 0;
  var $419 = $97 - 155497632 + $387 + ($405 ^ $396 ^ $414) | 0;
  var $423 = ($419 << 16 | $419 >>> 16) + $414 | 0;
  var $428 = $133 - 1094730640 + $396 + ($414 ^ $405 ^ $423) | 0;
  var $432 = ($428 << 23 | $428 >>> 9) + $423 | 0;
  var $437 = $169 + $405 + ($423 ^ $414 ^ $432) + 681279174 | 0;
  var $441 = ($437 << 4 | $437 >>> 28) + $432 | 0;
  var $446 = $13 - 358537222 + $414 + ($432 ^ $423 ^ $441) | 0;
  var $450 = ($446 << 11 | $446 >>> 21) + $441 | 0;
  var $455 = $49 - 722521979 + $423 + ($441 ^ $432 ^ $450) | 0;
  var $459 = ($455 << 16 | $455 >>> 16) + $450 | 0;
  var $464 = $85 + $432 + ($450 ^ $441 ^ $459) + 76029189 | 0;
  var $468 = ($464 << 23 | $464 >>> 9) + $459 | 0;
  var $473 = $121 - 640364487 + $441 + ($459 ^ $450 ^ $468) | 0;
  var $477 = ($473 << 4 | $473 >>> 28) + $468 | 0;
  var $482 = $157 - 421815835 + $450 + ($468 ^ $459 ^ $477) | 0;
  var $486 = ($482 << 11 | $482 >>> 21) + $477 | 0;
  var $491 = $193 + $459 + ($477 ^ $468 ^ $486) + 530742520 | 0;
  var $495 = ($491 << 16 | $491 >>> 16) + $486 | 0;
  var $500 = $37 - 995338651 + $468 + ($486 ^ $477 ^ $495) | 0;
  var $504 = ($500 << 23 | $500 >>> 9) + $495 | 0;
  var $510 = $13 - 198630844 + $477 + (($504 | $486 ^ -1) ^ $495) | 0;
  var $514 = ($510 << 6 | $510 >>> 26) + $504 | 0;
  var $520 = $97 + $486 + (($514 | $495 ^ -1) ^ $504) + 1126891415 | 0;
  var $524 = ($520 << 10 | $520 >>> 22) + $514 | 0;
  var $530 = $181 - 1416354905 + $495 + (($524 | $504 ^ -1) ^ $514) | 0;
  var $534 = ($530 << 15 | $530 >>> 17) + $524 | 0;
  var $540 = $73 - 57434055 + $504 + (($534 | $514 ^ -1) ^ $524) | 0;
  var $544 = ($540 << 21 | $540 >>> 11) + $534 | 0;
  var $550 = $157 + $514 + (($544 | $524 ^ -1) ^ $534) + 1700485571 | 0;
  var $554 = ($550 << 6 | $550 >>> 26) + $544 | 0;
  var $560 = $49 - 1894986606 + $524 + (($554 | $534 ^ -1) ^ $544) | 0;
  var $564 = ($560 << 10 | $560 >>> 22) + $554 | 0;
  var $570 = $133 - 1051523 + $534 + (($564 | $544 ^ -1) ^ $554) | 0;
  var $574 = ($570 << 15 | $570 >>> 17) + $564 | 0;
  var $580 = $25 - 2054922799 + $544 + (($574 | $554 ^ -1) ^ $564) | 0;
  var $584 = ($580 << 21 | $580 >>> 11) + $574 | 0;
  var $590 = $109 + $554 + (($584 | $564 ^ -1) ^ $574) + 1873313359 | 0;
  var $594 = ($590 << 6 | $590 >>> 26) + $584 | 0;
  var $600 = $193 - 30611744 + $564 + (($594 | $574 ^ -1) ^ $584) | 0;
  var $604 = ($600 << 10 | $600 >>> 22) + $594 | 0;
  var $610 = $85 - 1560198380 + $574 + (($604 | $584 ^ -1) ^ $594) | 0;
  var $614 = ($610 << 15 | $610 >>> 17) + $604 | 0;
  var $620 = $169 + $584 + (($614 | $594 ^ -1) ^ $604) + 1309151649 | 0;
  var $624 = ($620 << 21 | $620 >>> 11) + $614 | 0;
  var $630 = $61 - 145523070 + $594 + (($624 | $604 ^ -1) ^ $614) | 0;
  var $634 = ($630 << 6 | $630 >>> 26) + $624 | 0;
  var $640 = $145 - 1120210379 + $604 + (($634 | $614 ^ -1) ^ $624) | 0;
  var $644 = ($640 << 10 | $640 >>> 22) + $634 | 0;
  var $650 = $37 + $614 + (($644 | $624 ^ -1) ^ $634) + 718787259 | 0;
  var $654 = ($650 << 15 | $650 >>> 17) + $644 | 0;
  var $660 = $121 - 343485551 + $624 + (($654 | $634 ^ -1) ^ $644) | 0;
  HEAP32[$1 >> 2] = $634 + $2 | 0;
  HEAP32[$3$s2] = $654 + HEAP32[$3$s2] + ($660 << 21 | $660 >>> 11) | 0;
  HEAP32[$5$s2] = $654 + HEAP32[$5$s2] | 0;
  HEAP32[$7$s2] = $644 + HEAP32[$7$s2] | 0;
  return;
}
_transform576["X"] = 1;
function __gcry_generate_secret_prime($nbits, $random_level, $extra_check, $extra_check_arg) {
  var $1 = _gen_prime($nbits, 1, $random_level, $extra_check, $extra_check_arg);
  _progress(10);
  return $1;
}
function _progress($c) {
  var $1 = HEAP32[110041];
  if (($1 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$1](HEAP32[110037], 479808, $c, 0, 0);
  return;
}
function __gcry_generate_public_prime($nbits, $random_level, $extra_check, $extra_check_arg) {
  var $1 = _gen_prime($nbits, 0, $random_level, $extra_check, $extra_check_arg);
  _progress(10);
  return $1;
}
function __gcry_generate_elg_prime($mode, $pbits, $qbits, $g, $ret_factors) {
  var $prime$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $prime = __stackBase__, $prime$s2 = $prime >> 2;
  HEAP32[$prime$s2] = 0;
  if ((_prime_generate_internal(($mode | 0) == 1 & 1, $prime, $pbits, $qbits, $g, $ret_factors, 0, 0, 0, 0, 0) | 0) != 0) {
    HEAP32[$prime$s2] = 0;
  }
  STACKTOP = __stackBase__;
  return HEAP32[$prime$s2];
}
function _gen_prime($nbits, $secret, $randomlevel, $extra_check, $extra_check_arg) {
  var $count2$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $count2 = __stackBase__, $count2$s2 = $count2 >> 2;
  if ($nbits >>> 0 < 16) {
    __gcry_log_fatal(488952, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 16, tempInt));
  }
  var $4 = __gcry_xmalloc(2672);
  var $5 = $4;
  var $6 = __gcry_mpi_alloc_set_ui(2);
  var $7 = __gcry_mpi_alloc_set_ui(3);
  var $8 = ($secret | 0) != 0;
  if ($8) {
    var $14 = __gcry_mpi_snew($nbits);
  } else {
    var $14 = __gcry_mpi_new($nbits);
  }
  var $14;
  var $15 = __gcry_mpi_alloc_like($14);
  var $16 = __gcry_mpi_alloc_like($14);
  var $17 = __gcry_mpi_alloc_like($14);
  HEAP32[$count2$s2] = 0;
  var $18 = $nbits - 1 | 0;
  var $19 = $nbits - 2 | 0;
  var $20 = $18 - $secret | 0;
  var $21 = ($extra_check | 0) == 0;
  L966 : while (1) {
    __gcry_mpi_randomize($14, $nbits, $randomlevel);
    __gcry_mpi_set_highbit($14, $18);
    if ($8) {
      __gcry_mpi_set_bit($14, $19);
    }
    __gcry_mpi_set_bit($14, 0);
    var $i_01 = 0;
    while (1) {
      var $i_01;
      HEAP32[$5 + ($i_01 << 2) >> 2] = __gcry_mpi_fdiv_r_ui(0, $14, HEAPU16[($i_01 << 1) + 411568 >> 1]);
      var $31 = $i_01 + 1 | 0;
      if (($31 | 0) == 668) {
        var $dotcount_0 = 0;
        var $step_0 = 0;
        break;
      } else {
        var $i_01 = $31;
      }
    }
    L973 : while (1) {
      var $step_0;
      var $dotcount_0;
      if ($step_0 >>> 0 < 2e4) {
        var $i_1 = 0;
      } else {
        break;
      }
      while (1) {
        var $i_1;
        var $37 = HEAPU16[($i_1 << 1) + 411568 >> 1];
        var $38 = ($i_1 | 0) != 668;
        if (!$38) {
          label = 758;
          break;
        }
        var $39 = ($i_1 << 2) + $5 | 0;
        var $40 = HEAP32[$39 >> 2];
        var $41 = $40 + $step_0 | 0;
        if ($41 >>> 0 < $37 >>> 0) {
          var $_lcssa = $41;
        } else {
          var $43 = $40;
          while (1) {
            var $43;
            var $44 = $43 - $37 | 0;
            var $45 = $44 + $step_0 | 0;
            if ($45 >>> 0 < $37 >>> 0) {
              break;
            } else {
              var $43 = $44;
            }
          }
          HEAP32[$39 >> 2] = $44;
          var $_lcssa = $45;
        }
        var $_lcssa;
        if (($_lcssa | 0) == 0) {
          label = 757;
          break;
        } else {
          var $i_1 = $i_1 + 1 | 0;
        }
      }
      do {
        if (label == 757) {
          label = 0;
          if ($38) {
            var $dotcount_1 = $dotcount_0;
            break;
          } else {
            label = 758;
            break;
          }
        }
      } while (0);
      do {
        if (label == 758) {
          label = 0;
          __gcry_mpi_add_ui($17, $14, $step_0);
          HEAP32[$count2$s2] = HEAP32[$count2$s2] + 1 | 0;
          __gcry_mpi_sub_ui($16, $17, 1);
          __gcry_mpi_powm($15, $6, $16, $17);
          do {
            if ((__gcry_mpi_cmp_ui($15, 1) | 0) == 0) {
              if ((_is_prime($17, 5, $count2) | 0) == 0) {
                break;
              }
              if ((__gcry_mpi_test_bit($17, $20) | 0) == 0) {
                label = 761;
                break L973;
              }
              if ($21) {
                label = 770;
                break L966;
              }
              if ((FUNCTION_TABLE[$extra_check]($extra_check_arg, $17) | 0) == 0) {
                label = 771;
                break L966;
              }
              _progress(47);
            }
          } while (0);
          var $69 = $dotcount_0 + 1 | 0;
          if (($69 | 0) != 10) {
            var $dotcount_1 = $69;
            break;
          }
          _progress(46);
          var $dotcount_1 = 0;
        }
      } while (0);
      var $dotcount_1;
      var $dotcount_0 = $dotcount_1;
      var $step_0 = $step_0 + 2 | 0;
    }
    if (label == 761) {
      label = 0;
      _progress(10);
      __gcry_log_debug(487572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    _progress(58);
  }
  if (label == 770) {
    __gcry_mpi_free($6);
    __gcry_mpi_free($7);
    __gcry_mpi_free($15);
    __gcry_mpi_free($16);
    __gcry_mpi_free($14);
    __gcry_free($4);
    STACKTOP = __stackBase__;
    return $17;
  } else if (label == 771) {
    __gcry_mpi_free($6);
    __gcry_mpi_free($7);
    __gcry_mpi_free($15);
    __gcry_mpi_free($16);
    __gcry_mpi_free($14);
    __gcry_free($4);
    STACKTOP = __stackBase__;
    return $17;
  }
}
_gen_prime["X"] = 1;
function _prime_generate_internal($need_q_factor, $prime_generated, $pbits, $qbits, $g, $ret_factors, $randomlevel, $flags, $all_factors, $cb_func, $cb_arg) {
  var $242$s2;
  var $200$s2;
  var $94$s2;
  var $124$s2;
  var $56$s2;
  var $48$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $1 = $flags & 1;
  if ($pbits >>> 0 < 48) {
    var $_0 = 45;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $5 = $randomlevel >>> 0 > 1 ? 1 : $randomlevel;
  if (($qbits | 0) == 0) {
    var $_01 = Math.floor(($pbits >>> 0) / 3);
  } else {
    var $_01 = $qbits;
  }
  var $_01;
  var $10 = $pbits - $_01 | 0;
  var $11 = $10 - 1 | 0;
  var $n_0 = 1;
  while (1) {
    var $n_0;
    if (Math.floor(($11 >>> 0) / ($n_0 >>> 0)) >>> 0 < $_01 >>> 0) {
      break;
    } else {
      var $n_0 = $n_0 + 1 | 0;
    }
  }
  var $17 = $n_0 - 1 | 0;
  var $18 = __gcry_mpi_alloc_set_ui(2);
  do {
    if (($17 | 0) == 0) {
      label = 891;
    } else {
      var $21 = ($need_q_factor | 0) != 0;
      if ($21 & $17 >>> 0 < 2) {
        label = 891;
        break;
      }
      if ($21) {
        var $25 = $n_0 - 2 | 0;
        var $29 = Math.floor((($pbits - 1 - ($_01 << 1) | 0) >>> 0) / ($25 >>> 0));
        var $_1 = $10 - ($29 * $25 & -1) | 0;
        var $n_1 = $25;
        var $fbits_0 = $29;
      } else {
        var $33 = Math.floor(($11 >>> 0) / ($17 >>> 0));
        var $_1 = $pbits - ($33 * $17 & -1) | 0;
        var $n_1 = $17;
        var $fbits_0 = $33;
      }
      var $fbits_0;
      var $n_1;
      var $_1;
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        __gcry_log_debug(486852, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = $pbits, HEAP32[tempInt + 4 >> 2] = $_01, HEAP32[tempInt + 8 >> 2] = $_1, HEAP32[tempInt + 12 >> 2] = $fbits_0, HEAP32[tempInt + 16 >> 2] = $n_1, tempInt));
      }
      var $41 = __gcry_mpi_new($pbits);
      var $42 = _gen_prime($_1, $1, $randomlevel, 0, 0);
      if ($21) {
        var $q_factor_0 = _gen_prime($_01, $1, $randomlevel, 0, 0);
      } else {
        var $q_factor_0 = 0;
      }
      var $q_factor_0;
      var $46 = $n_1 + 2 | 0;
      var $47 = __gcry_calloc($46, 4);
      var $48 = $47, $48$s2 = $48 >> 2;
      if (($47 | 0) == 0) {
        var $52 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
        __gcry_free(0);
        var $err_32527 = $52;
        var $q_factor_1132428 = $q_factor_0;
        var $factors_new_1172229 = 0;
        var $q_1182130 = $42;
        var $prime_0192031 = $41;
        break;
      }
      var $55 = __gcry_malloc($n_1 << 2);
      var $56$s2 = $55 >> 2;
      do {
        if (($55 | 0) == 0) {
          var $61 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
          __gcry_free($55);
          var $q_118151 = $42;
          var $factors_new_117152 = 0;
          var $perms_214153 = 0;
          var $err_3154 = $61;
          label = 893;
          break;
        } else {
          if (($n_1 | 0) != 0) {
            _memset($55, -1, $n_1 << 2);
          }
          var $_ = ($n_1 * 3 & -1) + ($21 ? 10 : 5) | 0;
          var $m_1 = $_ >>> 0 < 30 ? 30 : $_;
          var $66 = __gcry_calloc($m_1, 4);
          var $67 = $66;
          do {
            if (($66 | 0) == 0) {
              var $err_3 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
              var $perms_214 = 0;
              var $factors_new_117 = 0;
              var $q_118 = $42;
            } else {
              var $69 = ($n_1 | 0) == 0;
              var $70 = ($n_1 | 0) == 0;
              var $71 = ($m_1 | 0) == 0;
              var $72 = $n_1 << 2;
              var $count2_0_ph = 0;
              var $_2_ph = $_1;
              var $count1_0_ph = 0;
              var $q_0_ph = $42;
              var $perms_0_ph = 0;
              L1035 : while (1) {
                var $perms_0_ph;
                var $q_0_ph;
                var $count1_0_ph;
                var $_2_ph;
                var $count2_0_ph;
                var $count2_0_ph73 = $count2_0_ph;
                var $count1_0_ph71 = $count1_0_ph;
                var $perms_0_ph70 = $perms_0_ph;
                while (1) {
                  var $perms_0_ph70;
                  var $count1_0_ph71;
                  var $count2_0_ph73;
                  var $perms_0 = $perms_0_ph70;
                  while (1) {
                    var $perms_0;
                    if (!$69) {
                      _memset($55, -1, $72);
                    }
                    if (($perms_0 | 0) == 0) {
                      label = 798;
                      break;
                    }
                    _m_out_of_n($perms_0, $n_1, $m_1);
                    if ((__gcry_ath_mutex_lock(440168) | 0) == 0) {
                      var $j_0 = 0;
                      var $i_4 = 0;
                      var $is_locked_2 = 1;
                    } else {
                      var $err_1 = 63;
                      var $factors_new_1 = 0;
                      var $perms_2 = $perms_0;
                      break L1035;
                    }
                    while (1) {
                      var $is_locked_2;
                      var $i_4;
                      var $j_0;
                      if (!($i_4 >>> 0 < $m_1 >>> 0 & $j_0 >>> 0 < $n_1 >>> 0)) {
                        break;
                      }
                      if (HEAP8[$perms_0 + $i_4 | 0] << 24 >> 24 == 0) {
                        var $j_1 = $j_0;
                        var $is_locked_4 = $is_locked_2;
                      } else {
                        var $124$s2 = (($i_4 << 2) + $67 | 0) >> 2;
                        var $125 = HEAP32[$124$s2];
                        do {
                          if (($125 | 0) != 0 | ($is_locked_2 | 0) == 0) {
                            var $is_locked_3 = $is_locked_2;
                            var $135 = $125;
                            label = 819;
                          } else {
                            var $129 = _get_pool_prime($fbits_0, $5);
                            HEAP32[$124$s2] = $129;
                            if (($129 | 0) != 0) {
                              var $is_locked_311 = $is_locked_2;
                              break;
                            }
                            if ((__gcry_ath_mutex_unlock(440168) | 0) != 0) {
                              var $err_1 = 63;
                              var $factors_new_1 = 0;
                              var $perms_2 = $perms_0;
                              break L1035;
                            }
                            var $is_locked_3 = 0;
                            var $135 = HEAP32[$124$s2];
                            label = 819;
                            break;
                          }
                        } while (0);
                        do {
                          if (label == 819) {
                            label = 0;
                            var $135;
                            var $is_locked_3;
                            if (($135 | 0) != 0) {
                              var $is_locked_311 = $is_locked_3;
                              break;
                            }
                            HEAP32[$124$s2] = _gen_prime($fbits_0, 0, $5, 0, 0);
                            var $is_locked_311 = $is_locked_3;
                          }
                        } while (0);
                        var $is_locked_311;
                        HEAP32[($j_0 << 2 >> 2) + $56$s2] = $i_4;
                        HEAP32[($j_0 << 2 >> 2) + $48$s2] = HEAP32[$124$s2];
                        var $j_1 = $j_0 + 1 | 0;
                        var $is_locked_4 = $is_locked_311;
                      }
                      var $is_locked_4;
                      var $j_1;
                      var $j_0 = $j_1;
                      var $i_4 = $i_4 + 1 | 0;
                      var $is_locked_2 = $is_locked_4;
                    }
                    if (($is_locked_2 | 0) != 0) {
                      if ((__gcry_ath_mutex_unlock(440168) | 0) != 0) {
                        var $err_1 = 63;
                        var $factors_new_1 = 0;
                        var $perms_2 = $perms_0;
                        break L1035;
                      }
                    }
                    if (($i_4 | 0) != ($n_1 | 0)) {
                      var $perms_1 = $perms_0;
                      break;
                    }
                    __gcry_free($perms_0);
                    _progress(33);
                    var $perms_0 = 0;
                  }
                  do {
                    if (label == 798) {
                      label = 0;
                      L1066 : do {
                        if (!$71) {
                          var $i_251 = 0;
                          while (1) {
                            var $i_251;
                            var $78 = ($i_251 << 2) + $67 | 0;
                            __gcry_mpi_free(HEAP32[$78 >> 2]);
                            HEAP32[$78 >> 2] = 0;
                            var $80 = $i_251 + 1 | 0;
                            if ($80 >>> 0 < $m_1 >>> 0) {
                              var $i_251 = $80;
                            } else {
                              break L1066;
                            }
                          }
                        }
                      } while (0);
                      var $82 = __gcry_calloc(1, $m_1);
                      if (($82 | 0) == 0) {
                        label = 801;
                        break L1035;
                      }
                      if ((__gcry_ath_mutex_lock(440168) | 0) == 0) {
                        var $i_3 = 0;
                        var $is_locked_0 = 1;
                      } else {
                        var $err_1 = 63;
                        var $factors_new_1 = 0;
                        var $perms_2 = $82;
                        break L1035;
                      }
                      while (1) {
                        var $is_locked_0;
                        var $i_3;
                        if ($i_3 >>> 0 >= $n_1 >>> 0) {
                          break;
                        }
                        HEAP8[$82 + $i_3 | 0] = 1;
                        var $94$s2 = (($i_3 << 2) + $67 | 0) >> 2;
                        HEAP32[$94$s2] = 0;
                        do {
                          if (($is_locked_0 | 0) == 0) {
                            label = 808;
                          } else {
                            var $97 = _get_pool_prime($fbits_0, $5);
                            HEAP32[$94$s2] = $97;
                            if (($97 | 0) != 0) {
                              var $is_locked_16 = $is_locked_0;
                              break;
                            }
                            if ((__gcry_ath_mutex_unlock(440168) | 0) != 0) {
                              var $err_1 = 63;
                              var $factors_new_1 = 0;
                              var $perms_2 = $82;
                              break L1035;
                            }
                            if ((HEAP32[$94$s2] | 0) == 0) {
                              label = 808;
                              break;
                            } else {
                              var $is_locked_16 = 0;
                              break;
                            }
                          }
                        } while (0);
                        if (label == 808) {
                          label = 0;
                          HEAP32[$94$s2] = _gen_prime($fbits_0, 0, $5, 0, 0);
                          var $is_locked_16 = 0;
                        }
                        var $is_locked_16;
                        HEAP32[($i_3 << 2 >> 2) + $56$s2] = $i_3;
                        HEAP32[($i_3 << 2 >> 2) + $48$s2] = HEAP32[$94$s2];
                        var $i_3 = $i_3 + 1 | 0;
                        var $is_locked_0 = $is_locked_16;
                      }
                      if (($is_locked_0 | 0) == 0) {
                        var $perms_1 = $82;
                        break;
                      }
                      if ((__gcry_ath_mutex_unlock(440168) | 0) == 0) {
                        var $perms_1 = $82;
                      } else {
                        var $err_1 = 63;
                        var $factors_new_1 = 0;
                        var $perms_2 = $82;
                        break L1035;
                      }
                    }
                  } while (0);
                  var $perms_1;
                  __gcry_mpi_set($41, $q_0_ph);
                  __gcry_mpi_mul_ui($41, $41, 2);
                  if ($21) {
                    __gcry_mpi_mul($41, $41, $q_factor_0);
                  }
                  L1087 : do {
                    if (!$70) {
                      var $i_558 = 0;
                      while (1) {
                        var $i_558;
                        __gcry_mpi_mul($41, $41, HEAP32[($i_558 << 2 >> 2) + $48$s2]);
                        var $156 = $i_558 + 1 | 0;
                        if (($156 | 0) == ($n_1 | 0)) {
                          break L1087;
                        } else {
                          var $i_558 = $156;
                        }
                      }
                    }
                  } while (0);
                  __gcry_mpi_add_ui($41, $41, 1);
                  var $157 = __gcry_mpi_get_nbits($41);
                  if ($157 >>> 0 < $pbits >>> 0) {
                    var $160 = $count1_0_ph71 + 1 | 0;
                    if ($160 >>> 0 > 20) {
                      label = 833;
                      break;
                    } else {
                      var $count1_1 = $160;
                    }
                  } else {
                    var $count1_1 = 0;
                  }
                  var $count1_1;
                  if ($157 >>> 0 > $pbits >>> 0) {
                    var $168 = $count2_0_ph73 + 1 | 0;
                    if ($168 >>> 0 > 20) {
                      label = 837;
                      break;
                    } else {
                      var $count2_1 = $168;
                    }
                  } else {
                    var $count2_1 = 0;
                  }
                  var $count2_1;
                  if (($157 | 0) != ($pbits | 0)) {
                    var $count2_0_ph73 = $count2_1;
                    var $count1_0_ph71 = $count1_1;
                    var $perms_0_ph70 = $perms_1;
                    continue;
                  }
                  if ((_check_prime($41, $18, 5, $cb_func, $cb_arg) | 0) == 0) {
                    var $count2_0_ph73 = $count2_1;
                    var $count1_0_ph71 = $count1_1;
                    var $perms_0_ph70 = $perms_1;
                  } else {
                    label = 841;
                    break L1035;
                  }
                }
                if (label == 833) {
                  label = 0;
                  var $163 = $_2_ph + 1 | 0;
                  _progress(62);
                  __gcry_mpi_free($q_0_ph);
                  var $count2_0_ph = $count2_0_ph73;
                  var $_2_ph = $163;
                  var $count1_0_ph = 0;
                  var $q_0_ph = _gen_prime($163, $1, $randomlevel, 0, 0);
                  var $perms_0_ph = $perms_1;
                  continue;
                } else if (label == 837) {
                  label = 0;
                  var $171 = $_2_ph - 1 | 0;
                  _progress(60);
                  __gcry_mpi_free($q_0_ph);
                  var $count2_0_ph = 0;
                  var $_2_ph = $171;
                  var $count1_0_ph = $count1_1;
                  var $q_0_ph = _gen_prime($171, $1, $randomlevel, 0, 0);
                  var $perms_0_ph = $perms_1;
                  continue;
                }
              }
              L1101 : do {
                if (label == 801) {
                  var $err_1 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
                  var $factors_new_1 = 0;
                  var $perms_2 = 0;
                } else if (label == 841) {
                  if ((__gcry_get_debug_flag(1) | 0) != 0) {
                    _progress(10);
                    __gcry_log_mpidump(485984, $41);
                    __gcry_log_mpidump(485108, $q_0_ph);
                    if ($21) {
                      __gcry_log_mpidump(484176, $q_factor_0);
                    }
                    L1109 : do {
                      if (($n_1 | 0) != 0) {
                        var $i_634 = 0;
                        while (1) {
                          var $i_634;
                          __gcry_log_mpidump(483560, HEAP32[($i_634 << 2 >> 2) + $48$s2]);
                          var $185 = $i_634 + 1 | 0;
                          if (($185 | 0) == ($n_1 | 0)) {
                            break L1109;
                          } else {
                            var $i_634 = $185;
                          }
                        }
                      }
                    } while (0);
                    var $186 = __gcry_mpi_get_nbits($41);
                    var $187 = __gcry_mpi_get_nbits($q_0_ph);
                    __gcry_log_debug(482628, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $186, HEAP32[tempInt + 4 >> 2] = $187, tempInt));
                    if ($21) {
                      var $189 = __gcry_mpi_get_nbits($q_factor_0);
                      __gcry_log_debug(481972, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $189, tempInt));
                    }
                    L1116 : do {
                      if (($n_1 | 0) != 0) {
                        var $i_732 = 0;
                        while (1) {
                          var $i_732;
                          var $193 = __gcry_mpi_get_nbits(HEAP32[($i_732 << 2 >> 2) + $48$s2]);
                          __gcry_log_debug(481448, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $i_732, HEAP32[tempInt + 4 >> 2] = $193, tempInt));
                          var $194 = $i_732 + 1 | 0;
                          if (($194 | 0) == ($n_1 | 0)) {
                            break L1116;
                          } else {
                            var $i_732 = $194;
                          }
                        }
                      }
                    } while (0);
                    _progress(10);
                  }
                  L1121 : do {
                    if (($ret_factors | 0) == 0) {
                      var $factors_new_0 = 0;
                    } else {
                      var $199 = __gcry_calloc($n_1 + 4 | 0, 4);
                      var $200 = $199, $200$s2 = $200 >> 2;
                      if (($199 | 0) == 0) {
                        var $err_1 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
                        var $factors_new_1 = $200;
                        var $perms_2 = $perms_1;
                        break L1101;
                      }
                      if (($all_factors | 0) != 0) {
                        HEAP32[$200$s2] = __gcry_mpi_set_ui(0, 2);
                        HEAP32[$199 + 4 >> 2] = __gcry_mpi_copy($q_0_ph);
                        if ($21) {
                          HEAP32[$199 + 8 >> 2] = __gcry_mpi_copy($q_factor_0);
                          var $i_9_ph = 3;
                        } else {
                          var $i_9_ph = 2;
                        }
                        var $i_9_ph;
                        if (($n_1 | 0) == 0) {
                          var $factors_new_0 = $200;
                          break;
                        } else {
                          var $i_938 = $i_9_ph;
                          var $j_239 = 0;
                        }
                        while (1) {
                          var $j_239;
                          var $i_938;
                          HEAP32[($i_938 << 2 >> 2) + $200$s2] = __gcry_mpi_copy(HEAP32[($j_239 << 2 >> 2) + $48$s2]);
                          var $223 = $j_239 + 1 | 0;
                          if (($223 | 0) == ($n_1 | 0)) {
                            var $factors_new_0 = $200;
                            break L1121;
                          } else {
                            var $i_938 = $i_938 + 1 | 0;
                            var $j_239 = $223;
                          }
                        }
                      }
                      if ($21) {
                        HEAP32[$200$s2] = __gcry_mpi_copy($q_factor_0);
                        if (($n_1 | 0) == 0) {
                          var $factors_new_0 = $200;
                          break;
                        } else {
                          var $i_1046 = 1;
                        }
                        while (1) {
                          var $i_1046;
                          HEAP32[($i_1046 << 2 >> 2) + $200$s2] = __gcry_mpi_copy(HEAP32[($i_1046 << 2 >> 2) + $48$s2]);
                          var $233 = $i_1046 + 1 | 0;
                          if ($233 >>> 0 > $n_1 >>> 0) {
                            var $factors_new_0 = $200;
                            break L1121;
                          } else {
                            var $i_1046 = $233;
                          }
                        }
                      } else {
                        if (($n_1 | 0) == 0) {
                          var $factors_new_0 = $200;
                          break;
                        } else {
                          var $i_1143 = 0;
                        }
                        while (1) {
                          var $i_1143;
                          HEAP32[($i_1143 << 2 >> 2) + $200$s2] = __gcry_mpi_copy(HEAP32[($i_1143 << 2 >> 2) + $48$s2]);
                          var $239 = $i_1143 + 1 | 0;
                          if (($239 | 0) == ($n_1 | 0)) {
                            var $factors_new_0 = $200;
                            break L1121;
                          } else {
                            var $i_1143 = $239;
                          }
                        }
                      }
                    }
                  } while (0);
                  var $factors_new_0;
                  do {
                    if (($g | 0) == 0) {
                      var $err_0 = 0;
                    } else {
                      var $242$s2 = ($41 + 4 | 0) >> 2;
                      var $244 = __gcry_mpi_alloc(HEAP32[$242$s2]);
                      var $246 = __gcry_mpi_alloc(HEAP32[$242$s2]);
                      var $248 = __gcry_mpi_alloc(HEAP32[$242$s2]);
                      if ($21) {
                        var $err_0 = 69;
                        break;
                      }
                      HEAP32[($n_1 << 2 >> 2) + $48$s2] = $q_0_ph;
                      var $253 = ($n_1 + 1 << 2) + $48 | 0;
                      HEAP32[$253 >> 2] = __gcry_mpi_alloc_set_ui(2);
                      __gcry_mpi_sub_ui($248, $41, 1);
                      __gcry_mpi_set_ui($g, 2);
                      while (1) {
                        __gcry_mpi_add_ui($g, $g, 1);
                        do {
                          if ((__gcry_get_debug_flag(1) | 0) == 0) {
                            _progress(94);
                            var $i_12 = 0;
                            break;
                          } else {
                            __gcry_log_debug(471116, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
                            __gcry_mpi_dump($g);
                            __gcry_log_printf(484936, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
                            var $i_12 = 0;
                            break;
                          }
                        } while (0);
                        while (1) {
                          var $i_12;
                          var $260 = $i_12 >>> 0 < $46 >>> 0;
                          if (!$260) {
                            break;
                          }
                          __gcry_mpi_fdiv_q($244, $248, HEAP32[($i_12 << 2 >> 2) + $48$s2]);
                          __gcry_mpi_powm($246, $g, $244, $41);
                          if ((__gcry_mpi_cmp_ui($246, 1) | 0) == 0) {
                            break;
                          } else {
                            var $i_12 = $i_12 + 1 | 0;
                          }
                        }
                        if ((__gcry_get_debug_flag(1) | 0) != 0) {
                          _progress(10);
                        }
                        if (!$260) {
                          break;
                        }
                      }
                      __gcry_mpi_free(HEAP32[$253 >> 2]);
                      __gcry_mpi_free($244);
                      __gcry_mpi_free($246);
                      __gcry_mpi_free($248);
                      var $err_0 = 0;
                    }
                  } while (0);
                  var $err_0;
                  if ((__gcry_get_debug_flag(1) | 0) != 0) {
                    var $err_1 = $err_0;
                    var $factors_new_1 = $factors_new_0;
                    var $perms_2 = $perms_1;
                    break;
                  }
                  _progress(10);
                  var $err_1 = $err_0;
                  var $factors_new_1 = $factors_new_0;
                  var $perms_2 = $perms_1;
                }
              } while (0);
              var $perms_2;
              var $factors_new_1;
              var $err_1;
              if (($66 | 0) == 0) {
                var $err_3 = $err_1;
                var $perms_214 = $perms_2;
                var $factors_new_117 = $factors_new_1;
                var $q_118 = $q_0_ph;
                break;
              }
              var $281 = (__gcry_ath_mutex_lock(440168) | 0) == 0;
              L1162 : do {
                if (($m_1 | 0) != 0) {
                  var $_not5 = $281 ^ 1;
                  var $i_1379 = 0;
                  while (1) {
                    var $i_1379;
                    var $284 = ($i_1379 << 2) + $67 | 0;
                    do {
                      if ((HEAP32[$284 >> 2] | 0) != 0) {
                        var $j_3 = 0;
                        while (1) {
                          var $j_3;
                          if ($j_3 >>> 0 >= $n_1 >>> 0) {
                            break;
                          }
                          if ((HEAP32[($j_3 << 2 >> 2) + $56$s2] | 0) == ($i_1379 | 0)) {
                            break;
                          } else {
                            var $j_3 = $j_3 + 1 | 0;
                          }
                        }
                        var $294 = HEAP32[$284 >> 2];
                        if (($j_3 | 0) != ($n_1 | 0) | $_not5) {
                          __gcry_mpi_free($294);
                          break;
                        } else {
                          _save_pool_prime($294, $5);
                          break;
                        }
                      }
                    } while (0);
                    var $298 = $i_1379 + 1 | 0;
                    if ($298 >>> 0 < $m_1 >>> 0) {
                      var $i_1379 = $298;
                    } else {
                      break L1162;
                    }
                  }
                }
              } while (0);
              if ($281) {
                var $err_2 = (__gcry_ath_mutex_unlock(440168) | 0) == 0 ? $err_1 : 63;
              } else {
                var $err_2 = $err_1;
              }
              var $err_2;
              __gcry_free($66);
              var $err_3 = $err_2;
              var $perms_214 = $perms_2;
              var $factors_new_117 = $factors_new_1;
              var $q_118 = $q_0_ph;
            }
          } while (0);
          var $q_118;
          var $factors_new_117;
          var $perms_214;
          var $err_3;
          __gcry_free($55);
          if (($47 | 0) == 0) {
            var $q_118146 = $q_118;
            var $factors_new_117147 = $factors_new_117;
            var $perms_214148 = $perms_214;
            var $err_3149 = $err_3;
            break;
          } else {
            var $q_118151 = $q_118;
            var $factors_new_117152 = $factors_new_117;
            var $perms_214153 = $perms_214;
            var $err_3154 = $err_3;
            label = 893;
            break;
          }
        }
      } while (0);
      if (label == 893) {
        var $err_3154;
        var $perms_214153;
        var $factors_new_117152;
        var $q_118151;
        __gcry_free($47);
        var $q_118146 = $q_118151;
        var $factors_new_117147 = $factors_new_117152;
        var $perms_214148 = $perms_214153;
        var $err_3149 = $err_3154;
      }
      var $err_3149;
      var $perms_214148;
      var $factors_new_117147;
      var $q_118146;
      if (($perms_214148 | 0) == 0) {
        var $err_32527 = $err_3149;
        var $q_factor_1132428 = $q_factor_0;
        var $factors_new_1172229 = $factors_new_117147;
        var $q_1182130 = $q_118146;
        var $prime_0192031 = $41;
        break;
      }
      __gcry_free($perms_214148);
      var $err_32527 = $err_3149;
      var $q_factor_1132428 = $q_factor_0;
      var $factors_new_1172229 = $factors_new_117147;
      var $q_1182130 = $q_118146;
      var $prime_0192031 = $41;
      break;
    }
  } while (0);
  if (label == 891) {
    __gcry_free(0);
    var $err_32527 = 45;
    var $q_factor_1132428 = 0;
    var $factors_new_1172229 = 0;
    var $q_1182130 = 0;
    var $prime_0192031 = 0;
  }
  var $prime_0192031;
  var $q_1182130;
  var $factors_new_1172229;
  var $q_factor_1132428;
  var $err_32527;
  __gcry_mpi_free($18);
  __gcry_mpi_free($q_1182130);
  __gcry_mpi_free($q_factor_1132428);
  if (($err_32527 | 0) == 0) {
    HEAP32[$prime_generated >> 2] = $prime_0192031;
    if (($ret_factors | 0) == 0) {
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    HEAP32[$ret_factors >> 2] = $factors_new_1172229;
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($factors_new_1172229 | 0) != 0) {
    var $316 = HEAP32[$factors_new_1172229 >> 2];
    L1198 : do {
      if (($316 | 0) != 0) {
        var $i_1488 = 0;
        var $318 = $316;
        while (1) {
          var $318;
          var $i_1488;
          __gcry_mpi_free($318);
          var $319 = $i_1488 + 1 | 0;
          var $321 = HEAP32[$factors_new_1172229 + ($319 << 2) >> 2];
          if (($321 | 0) == 0) {
            break L1198;
          } else {
            var $i_1488 = $319;
            var $318 = $321;
          }
        }
      }
    } while (0);
    __gcry_free($factors_new_1172229);
  }
  __gcry_mpi_free($prime_0192031);
  var $_0 = $err_32527;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_prime_generate_internal["X"] = 1;
function __gcry_prime_generate($prime, $prime_bits, $factor_bits, $factors, $cb_func, $cb_arg, $random_level, $flags) {
  var $prime_generated$s2;
  var $factors_generated$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $factors_generated = __stackBase__, $factors_generated$s2 = $factors_generated >> 2;
  var $prime_generated = __stackBase__ + 4, $prime_generated$s2 = $prime_generated >> 2;
  HEAP32[$factors_generated$s2] = 0;
  HEAP32[$prime_generated$s2] = 0;
  if (($prime | 0) == 0) {
    var $_0 = _gpg_error602();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$prime >> 2] = 0;
  var $6 = ($factors | 0) != 0;
  var $7 = _prime_generate_internal($flags >>> 1 & 1, $prime_generated, $prime_bits, $factor_bits, 0, $6 ? $factors_generated : 0, $random_level, $flags, 1, $cb_func, $cb_arg);
  do {
    if (($7 | 0) != 0 | ($cb_func | 0) == 0) {
      label = 917;
    } else {
      if ((FUNCTION_TABLE[$cb_func]($cb_arg, 0, HEAP32[$prime_generated$s2]) | 0) != 0) {
        label = 917;
        break;
      }
      __gcry_mpi_free(HEAP32[$prime_generated$s2]);
      if (!$6) {
        var $err_01 = 1;
        break;
      }
      var $16 = HEAP32[$factors_generated$s2];
      var $17 = HEAP32[$16 >> 2];
      L1213 : do {
        if (($17 | 0) == 0) {
          var $_lcssa = $16;
        } else {
          var $i_02 = 0;
          var $19 = $17;
          while (1) {
            var $19;
            var $i_02;
            __gcry_mpi_free($19);
            var $20 = $i_02 + 1 | 0;
            var $21 = HEAP32[$factors_generated$s2];
            var $23 = HEAP32[$21 + ($20 << 2) >> 2];
            if (($23 | 0) == 0) {
              var $_lcssa = $21;
              break L1213;
            } else {
              var $i_02 = $20;
              var $19 = $23;
            }
          }
        }
      } while (0);
      var $_lcssa;
      __gcry_free($_lcssa);
      var $err_01 = 1;
      break;
    }
  } while (0);
  do {
    if (label == 917) {
      if (($7 | 0) != 0) {
        var $err_01 = $7;
        break;
      }
      if ($6) {
        HEAP32[$factors >> 2] = HEAP32[$factors_generated$s2];
      }
      HEAP32[$prime >> 2] = HEAP32[$prime_generated$s2];
      var $err_01 = $7;
    }
  } while (0);
  var $err_01;
  var $_0 = _gcry_error603($err_01);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_prime_generate["X"] = 1;
function _gpg_error602() {
  return _gpg_err_make612(1, 45);
}
function _gcry_error603($code) {
  return _gcry_err_make611($code);
}
function __gcry_prime_check($x, $flags) {
  var $1 = __gcry_mpi_alloc_set_ui(2);
  var $_ = (_check_prime($x, $1, 64, 0, 0) | 0) == 0 ? 21 : 0;
  __gcry_mpi_free($1);
  return _gcry_error603($_);
}
function _check_prime($prime, $val_2, $rm_rounds, $cb_func, $cb_arg) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $count = __stackBase__;
  HEAP32[$count >> 2] = 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if (($i_0 | 0) == 668) {
      label = 931;
      break;
    }
    if ((__gcry_mpi_divisible_ui($prime, HEAPU16[($i_0 << 1) + 411568 >> 1]) | 0) == 0) {
      var $i_0 = $i_0 + 1 | 0;
    } else {
      var $_0 = 0;
      break;
    }
  }
  L1232 : do {
    if (label == 931) {
      var $11 = __gcry_mpi_alloc_like($prime);
      var $12 = __gcry_mpi_alloc_like($prime);
      __gcry_mpi_sub_ui($12, $prime, 1);
      __gcry_mpi_powm($11, $val_2, $12, $prime);
      __gcry_mpi_free($12);
      var $14 = (__gcry_mpi_cmp_ui($11, 1) | 0) == 0;
      __gcry_mpi_free($11);
      if (!$14) {
        _progress(46);
        var $_0 = 0;
        break;
      }
      var $17 = ($cb_func | 0) != 0;
      do {
        if ($17) {
          if ((FUNCTION_TABLE[$cb_func]($cb_arg, 2, $prime) | 0) == 0) {
            break;
          } else {
            label = 935;
            break;
          }
        } else {
          label = 935;
        }
      } while (0);
      do {
        if (label == 935) {
          if ((_is_prime($prime, $rm_rounds, $count) | 0) == 0) {
            break;
          }
          if (!$17) {
            var $_0 = 1;
            break L1232;
          }
          if ((FUNCTION_TABLE[$cb_func]($cb_arg, 1, $prime) | 0) != 0) {
            var $_0 = 1;
            break L1232;
          }
        }
      } while (0);
      _progress(46);
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gpg_err_code610($err) {
  return $err & 65535;
}
function _gpg_err_make612($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function __gcry_prime_group_generator($r_g, $prime, $factors, $start_g) {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_mpi_new(0);
  var $2 = __gcry_mpi_new(0);
  var $3 = __gcry_mpi_new(0);
  if (($start_g | 0) == 0) {
    var $10 = __gcry_mpi_set_ui(0, 3);
  } else {
    var $10 = __gcry_mpi_copy($start_g);
  }
  var $10;
  if (($factors | 0) == 0 | ($r_g | 0) == 0 | ($prime | 0) == 0) {
    var $_0 = _gpg_error602();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$r_g >> 2] = 0;
  var $n_0 = 0;
  while (1) {
    var $n_0;
    if ((HEAP32[$factors + ($n_0 << 2) >> 2] | 0) == 0) {
      break;
    } else {
      var $n_0 = $n_0 + 1 | 0;
    }
  }
  if (($n_0 | 0) < 2) {
    var $_0 = _gpg_error602();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_mpi_sub_ui($3, $prime, 1);
  while (1) {
    do {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        _progress(94);
        var $i_0 = 0;
        break;
      } else {
        __gcry_log_debug(471116, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        __gcry_mpi_dump($10);
        __gcry_log_debug(484936, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        var $i_0 = 0;
        break;
      }
    } while (0);
    while (1) {
      var $i_0;
      var $32 = ($i_0 | 0) < ($n_0 | 0);
      if (!$32) {
        break;
      }
      __gcry_mpi_fdiv_q($1, $3, HEAP32[$factors + ($i_0 << 2) >> 2]);
      __gcry_mpi_powm($2, $10, $1, $prime);
      if ((__gcry_mpi_cmp_ui($2, 1) | 0) == 0) {
        break;
      } else {
        var $i_0 = $i_0 + 1 | 0;
      }
    }
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress(10);
    }
    if (!$32) {
      break;
    }
    __gcry_mpi_add_ui($10, $10, 1);
  }
  __gcry_mpi_release($1);
  __gcry_mpi_release($2);
  __gcry_mpi_release($3);
  HEAP32[$r_g >> 2] = $10;
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_prime_group_generator["X"] = 1;
function __gcry_prime_release_factors($factors) {
  if (($factors | 0) == 0) {
    return;
  }
  var $2 = HEAP32[$factors >> 2];
  L1286 : do {
    if (($2 | 0) != 0) {
      var $i_01 = 0;
      var $4 = $2;
      while (1) {
        var $4;
        var $i_01;
        __gcry_mpi_free($4);
        var $5 = $i_01 + 1 | 0;
        var $7 = HEAP32[$factors + ($5 << 2) >> 2];
        if (($7 | 0) == 0) {
          break L1286;
        } else {
          var $i_01 = $5;
          var $4 = $7;
        }
      }
    }
  } while (0);
  __gcry_free($factors);
  return;
}
function __gcry_derive_x931_prime($xp, $xp1, $xp2, $e, $r_p1, $r_p2) {
  if (($xp | 0) == 0 | ($xp1 | 0) == 0 | ($xp2 | 0) == 0 | ($e | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if ((__gcry_mpi_test_bit($e, 0) | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $9 = _find_x931_prime($xp1);
  var $10 = _find_x931_prime($xp2);
  var $11 = __gcry_mpi_alloc_like($xp);
  __gcry_mpi_mul($11, $9, $10);
  var $12 = __gcry_mpi_alloc_like($9);
  __gcry_mpi_invm($12, $10, $9);
  __gcry_mpi_mul($12, $12, $10);
  var $14 = __gcry_mpi_alloc_like($10);
  __gcry_mpi_invm($14, $9, $10);
  __gcry_mpi_mul($14, $14, $9);
  __gcry_mpi_sub($12, $12, $14);
  if ((HEAP32[$12 + 8 >> 2] | 0) != 0) {
    __gcry_mpi_add($12, $12, $11);
  }
  __gcry_mpi_subm($14, $12, $xp, $11);
  __gcry_mpi_add($14, $14, $xp);
  __gcry_mpi_free($12);
  if ((__gcry_mpi_cmp($14, $xp) | 0) < 0) {
    __gcry_mpi_add($14, $14, $11);
  }
  var $25 = __gcry_mpi_alloc_set_ui(2);
  var $26 = __gcry_mpi_alloc_like($14);
  __gcry_mpi_sub_ui($11, $11, 1);
  __gcry_mpi_sub_ui($14, $14, 1);
  while (1) {
    var $28 = __gcry_mpi_gcd($26, $e, $14);
    __gcry_mpi_add_ui($14, $14, 1);
    if (($28 | 0) == 0) {
      _progress(47);
    } else {
      if ((_check_prime($14, $25, 64, 0, 0) | 0) != 0) {
        break;
      }
    }
    __gcry_mpi_add($14, $14, $11);
  }
  __gcry_mpi_free($26);
  __gcry_mpi_free($25);
  __gcry_mpi_free($11);
  _progress(10);
  if (($r_p1 | 0) == 0) {
    __gcry_mpi_free($9);
  } else {
    HEAP32[$r_p1 >> 2] = $9;
  }
  if (($r_p2 | 0) == 0) {
    __gcry_mpi_free($10);
    var $_0 = $14;
    var $_0;
    return $_0;
  } else {
    HEAP32[$r_p2 >> 2] = $10;
    var $_0 = $14;
    var $_0;
    return $_0;
  }
}
__gcry_derive_x931_prime["X"] = 1;
function _find_x931_prime($pfirst) {
  var $1 = __gcry_mpi_alloc_set_ui(2);
  var $2 = __gcry_mpi_copy($pfirst);
  __gcry_mpi_set_bit($2, 0);
  if ((_check_prime($2, $1, 64, 0, 0) | 0) != 0) {
    __gcry_mpi_free($1);
    return $2;
  }
  while (1) {
    __gcry_mpi_add_ui($2, $2, 2);
    if ((_check_prime($2, $1, 64, 0, 0) | 0) != 0) {
      break;
    }
  }
  __gcry_mpi_free($1);
  return $2;
}
function __gcry_generate_fips186_2_prime($pbits, $qbits, $seed, $seedlen, $r_q, $r_p, $r_counter, $r_seed, $r_seedlen) {
  var $prime_q$s2;
  var $tmpval$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 68 | 0;
  var $seed_help_buffer = __stackBase__;
  var $digest = __stackBase__ + 20;
  var $tmpval = __stackBase__ + 40, $tmpval$s2 = $tmpval >> 2;
  var $value_u = __stackBase__ + 44;
  var $prime_q = __stackBase__ + 64, $prime_q$s2 = $prime_q >> 2;
  HEAP32[$tmpval$s2] = 0;
  HEAP32[$prime_q$s2] = 0;
  if (!(($pbits | 0) == 1024 & ($qbits | 0) == 160)) {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4 = ($seed | 0) != 0;
  do {
    if (!(($seedlen | 0) == 0 & ($4 ^ 1))) {
      if (!$4) {
        var $_0 = 45;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      if ($qbits >>> 3 >>> 0 > $seedlen >>> 0) {
        var $_0 = 45;
      } else {
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $13 = __gcry_malloc($seedlen >>> 0 < 20 ? 20 : $seedlen);
  L1337 : do {
    if (($13 | 0) == 0) {
      var $prime_p_2 = 0;
      var $value_x_0 = 0;
      var $value_w_0 = 0;
      var $val_2_0 = 0;
      var $ec_2 = _gpg_err_code_from_syserror();
      var $seed_plus_0 = 0;
    } else {
      var $18 = __gcry_mpi_alloc_set_ui(2);
      var $19 = $pbits - 1 | 0;
      var $20 = Math.floor(($19 >>> 0) / ($qbits >>> 0));
      var $22 = $19 - ($20 * $qbits & -1) | 0;
      var $23 = __gcry_mpi_new($pbits);
      var $24 = __gcry_mpi_new($pbits);
      var $25 = $seed_help_buffer | 0;
      var $26 = $value_u | 0;
      var $27 = $digest | 0;
      var $28 = $qbits - 1 | 0;
      var $prime_p_0_ph = 0;
      var $_01_ph = $seed;
      var $_02_ph = $seedlen;
      L1340 : while (1) {
        var $_02_ph;
        var $_01_ph;
        var $prime_p_0_ph;
        var $_01 = $_01_ph;
        var $_02 = $_02_ph;
        while (1) {
          var $_02;
          var $_01;
          if (($_01 | 0) == 0) {
            __gcry_create_nonce($25, 20);
            var $_1 = $25;
            var $_13 = 20;
          } else {
            var $_1 = $_01;
            var $_13 = $_02;
          }
          var $_13;
          var $_1;
          _memcpy($13, $_1, $_13);
          var $33 = $_13 - 1 | 0;
          var $i_0 = $33;
          while (1) {
            var $i_0;
            if (($i_0 | 0) <= -1) {
              break;
            }
            var $37 = $13 + $i_0 | 0;
            var $39 = HEAP8[$37] + 1 & 255;
            HEAP8[$37] = $39;
            if ($39 << 24 >> 24 == 0) {
              var $i_0 = $i_0 - 1 | 0;
            } else {
              break;
            }
          }
          __gcry_md_hash_buffer(2, $26, $_1, $_13);
          __gcry_md_hash_buffer(2, $27, $13, $_13);
          var $i_16 = 0;
          while (1) {
            var $i_16;
            var $46 = $value_u + $i_16 | 0;
            HEAP8[$46] = HEAP8[$46] ^ HEAP8[$digest + $i_16 | 0];
            var $49 = $i_16 + 1 | 0;
            if (($49 | 0) == 20) {
              break;
            } else {
              var $i_16 = $49;
            }
          }
          __gcry_mpi_release(HEAP32[$prime_q$s2]);
          HEAP32[$prime_q$s2] = 0;
          var $53 = _gpg_err_code610(__gcry_mpi_scan($prime_q, 5, $26, 20, 0));
          if (($53 | 0) != 0) {
            var $prime_p_2 = $prime_p_0_ph;
            var $value_x_0 = $24;
            var $value_w_0 = $23;
            var $val_2_0 = $18;
            var $ec_2 = $53;
            var $seed_plus_0 = $13;
            break L1337;
          }
          __gcry_mpi_set_highbit(HEAP32[$prime_q$s2], $28);
          __gcry_mpi_set_bit(HEAP32[$prime_q$s2], 0);
          if ((_check_prime(HEAP32[$prime_q$s2], $18, 64, 0, 0) | 0) == 0) {
            var $_01 = 0;
            var $_02 = $_13;
          } else {
            break;
          }
        }
        var $62 = __gcry_mpi_new($pbits);
        var $counter_0 = 0;
        var $ec_0 = $53;
        while (1) {
          var $ec_0;
          var $counter_0;
          __gcry_mpi_set_ui($23, 0);
          var $value_k_0 = 0;
          var $ec_1 = $ec_0;
          while (1) {
            var $ec_1;
            var $value_k_0;
            if (($value_k_0 | 0) > ($20 | 0)) {
              break;
            } else {
              var $i_2 = $33;
            }
            while (1) {
              var $i_2;
              if (($i_2 | 0) <= -1) {
                break;
              }
              var $69 = $13 + $i_2 | 0;
              var $71 = HEAP8[$69] + 1 & 255;
              HEAP8[$69] = $71;
              if ($71 << 24 >> 24 == 0) {
                var $i_2 = $i_2 - 1 | 0;
              } else {
                break;
              }
            }
            __gcry_md_hash_buffer(2, $27, $13, $_13);
            __gcry_mpi_release(HEAP32[$tmpval$s2]);
            HEAP32[$tmpval$s2] = 0;
            var $77 = _gpg_err_code610(__gcry_mpi_scan($tmpval, 5, $27, 20, 0));
            if (($77 | 0) != 0) {
              var $prime_p_2 = $62;
              var $value_x_0 = $24;
              var $value_w_0 = $23;
              var $val_2_0 = $18;
              var $ec_2 = $77;
              var $seed_plus_0 = $13;
              break L1337;
            }
            if (($value_k_0 | 0) == ($20 | 0)) {
              __gcry_mpi_clear_highbit(HEAP32[$tmpval$s2], $22);
            }
            var $84 = HEAP32[$tmpval$s2];
            __gcry_mpi_lshift($84, $84, $value_k_0 * $qbits & -1);
            __gcry_mpi_add($23, $23, HEAP32[$tmpval$s2]);
            var $value_k_0 = $value_k_0 + 1 | 0;
            var $ec_1 = $77;
          }
          __gcry_mpi_set_ui($24, 0);
          __gcry_mpi_set_highbit($24, $19);
          __gcry_mpi_add($24, $24, $23);
          __gcry_mpi_mul_2exp(HEAP32[$tmpval$s2], HEAP32[$prime_q$s2], 1);
          var $92 = HEAP32[$tmpval$s2];
          __gcry_mpi_mod($92, $24, $92);
          var $93 = HEAP32[$tmpval$s2];
          __gcry_mpi_sub_ui($93, $93, 1);
          __gcry_mpi_sub($62, $24, HEAP32[$tmpval$s2]);
          if (__gcry_mpi_get_nbits($62) >>> 0 >= $19 >>> 0) {
            if ((_check_prime($62, $18, 64, 0, 0) | 0) != 0) {
              break L1340;
            }
          }
          var $101 = $counter_0 + 1 | 0;
          if (($101 | 0) > 4095) {
            var $prime_p_0_ph = $62;
            var $_01_ph = $_1;
            var $_02_ph = $_13;
            continue L1340;
          } else {
            var $counter_0 = $101;
            var $ec_0 = $ec_1;
          }
        }
      }
      if (($r_q | 0) != 0) {
        HEAP32[$r_q >> 2] = HEAP32[$prime_q$s2];
        HEAP32[$prime_q$s2] = 0;
      }
      if (($r_p | 0) == 0) {
        var $prime_p_1 = $62;
      } else {
        HEAP32[$r_p >> 2] = $62;
        var $prime_p_1 = 0;
      }
      var $prime_p_1;
      if (($r_counter | 0) != 0) {
        HEAP32[$r_counter >> 2] = $counter_0;
      }
      if (($r_seed | 0) == 0 | ($r_seedlen | 0) == 0) {
        var $prime_p_2 = $prime_p_1;
        var $value_x_0 = $24;
        var $value_w_0 = $23;
        var $val_2_0 = $18;
        var $ec_2 = $ec_1;
        var $seed_plus_0 = $13;
        break;
      }
      _memcpy($13, $_1, $_13);
      HEAP32[$r_seed >> 2] = $13;
      HEAP32[$r_seedlen >> 2] = $_13;
      var $prime_p_2 = $prime_p_1;
      var $value_x_0 = $24;
      var $value_w_0 = $23;
      var $val_2_0 = $18;
      var $ec_2 = $ec_1;
      var $seed_plus_0 = 0;
    }
  } while (0);
  var $seed_plus_0;
  var $ec_2;
  var $val_2_0;
  var $value_w_0;
  var $value_x_0;
  var $prime_p_2;
  __gcry_mpi_release(HEAP32[$tmpval$s2]);
  __gcry_mpi_release($value_x_0);
  __gcry_mpi_release($value_w_0);
  __gcry_mpi_release($prime_p_2);
  __gcry_mpi_release(HEAP32[$prime_q$s2]);
  __gcry_free($seed_plus_0);
  __gcry_mpi_release($val_2_0);
  var $_0 = $ec_2;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_generate_fips186_2_prime["X"] = 1;
function _gcry_err_make611($code) {
  return _gpg_err_make612(32, $code);
}
function __gcry_generate_fips186_3_prime($pbits, $qbits, $seed, $seedlen, $r_q, $r_p, $r_counter, $r_seed, $r_seedlen, $r_hashalgo) {
  var $prime_q$s2;
  var $tmpval$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  var $seed_help_buffer = __stackBase__;
  var $digest = __stackBase__ + 32;
  var $tmpval = __stackBase__ + 64, $tmpval$s2 = $tmpval >> 2;
  var $value_u = __stackBase__ + 68;
  var $prime_q = __stackBase__ + 100, $prime_q$s2 = $prime_q >> 2;
  HEAP32[$tmpval$s2] = 0;
  HEAP32[$prime_q$s2] = 0;
  do {
    if (($pbits | 0) == 1024 & ($qbits | 0) == 160) {
      var $hashalgo_0 = 2;
    } else {
      var $4 = ($pbits | 0) == 2048;
      if ($4 & ($qbits | 0) == 224) {
        var $hashalgo_0 = 11;
        break;
      }
      if (($4 | ($pbits | 0) == 3072) & ($qbits | 0) == 256) {
        var $hashalgo_0 = 8;
        break;
      } else {
        var $_0 = 44;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $hashalgo_0;
  var $11 = _gpg_err_code610(__gcry_md_algo_info($hashalgo_0, 8, 0, 0));
  if (($11 | 0) != 0) {
    var $_0 = $11;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $14 = $qbits >>> 3;
  var $15 = $qbits >>> 0 < 264;
  if (!$15) {
    __gcry_assert_failed(478620, 475480, 1684, 495420);
  }
  if ((__gcry_md_get_algo_dlen($hashalgo_0) | 0) != ($14 | 0)) {
    __gcry_assert_failed(472904, 475480, 1685, 495420);
  }
  var $_not = ($seed | 0) == 0;
  do {
    if (!($_not & ($seedlen | 0) == 0)) {
      if ($_not | $14 >>> 0 > $seedlen >>> 0) {
        var $_0 = 45;
      } else {
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $28 = __gcry_malloc($seedlen >>> 0 < 32 ? 32 : $seedlen);
  L1405 : do {
    if (($28 | 0) == 0) {
      var $prime_p_2 = 0;
      var $value_x_0 = 0;
      var $value_w_0 = 0;
      var $val_2_0 = 0;
      var $ec_2 = _gpg_err_code_from_syserror();
      var $seed_plus_1 = 0;
    } else {
      var $33 = __gcry_mpi_alloc_set_ui(2);
      var $34 = __gcry_mpi_new($pbits);
      var $35 = __gcry_mpi_new($pbits);
      var $39 = Math.floor((($pbits - 1 + $qbits | 0) >>> 0) / ($qbits >>> 0)) - 1 | 0;
      var $40 = $pbits - 1 | 0;
      var $42 = $40 - ($39 * $qbits & -1) | 0;
      var $43 = $seed_help_buffer | 0;
      var $44 = $value_u | 0;
      var $45 = $14 - 1 | 0;
      var $46 = $value_u + $45 | 0;
      var $47 = $qbits - 1 | 0;
      var $48 = $digest | 0;
      var $49 = $pbits << 2;
      var $prime_p_0_ph = 0;
      var $_01_ph = $seed;
      var $_02_ph = $seedlen;
      L1408 : while (1) {
        var $_02_ph;
        var $_01_ph;
        var $prime_p_0_ph;
        var $_01 = $_01_ph;
        var $_02 = $_02_ph;
        while (1) {
          var $_02;
          var $_01;
          if (($_01 | 0) == 0) {
            if (!$15) {
              label = 1064;
              break L1408;
            }
            __gcry_create_nonce($43, $14);
            var $_1 = $43;
            var $_13 = $14;
          } else {
            var $_1 = $_01;
            var $_13 = $_02;
          }
          var $_13;
          var $_1;
          __gcry_md_hash_buffer($hashalgo_0, $44, $_1, $_13);
          L1416 : do {
            if ((HEAP8[$46] & 1) << 24 >> 24 == 0) {
              var $i_0 = $45;
              while (1) {
                var $i_0;
                if (($i_0 | 0) <= -1) {
                  break L1416;
                }
                var $61 = $value_u + $i_0 | 0;
                var $63 = HEAP8[$61] + 1 & 255;
                HEAP8[$61] = $63;
                if ($63 << 24 >> 24 == 0) {
                  var $i_0 = $i_0 - 1 | 0;
                } else {
                  break L1416;
                }
              }
            }
          } while (0);
          __gcry_mpi_release(HEAP32[$prime_q$s2]);
          HEAP32[$prime_q$s2] = 0;
          var $68 = _gpg_err_code610(__gcry_mpi_scan($prime_q, 5, $44, 32, 0));
          if (($68 | 0) != 0) {
            var $prime_p_2 = $prime_p_0_ph;
            var $value_x_0 = $35;
            var $value_w_0 = $34;
            var $val_2_0 = $33;
            var $ec_2 = $68;
            var $seed_plus_1 = $28;
            break L1405;
          }
          __gcry_mpi_set_highbit(HEAP32[$prime_q$s2], $47);
          if ((_check_prime(HEAP32[$prime_q$s2], $33, 64, 0, 0) | 0) == 0) {
            var $_01 = 0;
            var $_02 = $_13;
          } else {
            break;
          }
        }
        _memcpy($28, $_1, $_13);
        var $76 = __gcry_mpi_new($pbits);
        var $counter_0 = 0;
        var $ec_0 = $68;
        while (1) {
          var $ec_0;
          var $counter_0;
          __gcry_mpi_set_ui($34, 0);
          var $value_j_0 = 0;
          var $ec_1 = $ec_0;
          while (1) {
            var $ec_1;
            var $value_j_0;
            if (($value_j_0 | 0) > ($39 | 0)) {
              break;
            } else {
              var $i_1_in = $_13;
            }
            while (1) {
              var $i_1_in;
              var $i_1 = $i_1_in - 1 | 0;
              if (($i_1 | 0) <= -1) {
                break;
              }
              var $83 = $28 + $i_1 | 0;
              var $85 = HEAP8[$83] + 1 & 255;
              HEAP8[$83] = $85;
              if ($85 << 24 >> 24 == 0) {
                var $i_1_in = $i_1;
              } else {
                break;
              }
            }
            __gcry_md_hash_buffer(2, $48, $28, $_13);
            __gcry_mpi_release(HEAP32[$tmpval$s2]);
            HEAP32[$tmpval$s2] = 0;
            var $90 = _gpg_err_code610(__gcry_mpi_scan($tmpval, 5, $48, 32, 0));
            if (($90 | 0) != 0) {
              var $prime_p_2 = $76;
              var $value_x_0 = $35;
              var $value_w_0 = $34;
              var $val_2_0 = $33;
              var $ec_2 = $90;
              var $seed_plus_1 = $28;
              break L1405;
            }
            if (($value_j_0 | 0) == ($39 | 0)) {
              __gcry_mpi_clear_highbit(HEAP32[$tmpval$s2], $42);
            }
            var $97 = HEAP32[$tmpval$s2];
            __gcry_mpi_lshift($97, $97, $value_j_0 * $qbits & -1);
            __gcry_mpi_add($34, $34, HEAP32[$tmpval$s2]);
            var $value_j_0 = $value_j_0 + 1 | 0;
            var $ec_1 = $90;
          }
          __gcry_mpi_set_ui($35, 0);
          __gcry_mpi_set_highbit($35, $40);
          __gcry_mpi_add($35, $35, $34);
          __gcry_mpi_mul_2exp(HEAP32[$tmpval$s2], HEAP32[$prime_q$s2], 1);
          var $105 = HEAP32[$tmpval$s2];
          __gcry_mpi_mod($105, $35, $105);
          var $106 = HEAP32[$tmpval$s2];
          __gcry_mpi_sub_ui($106, $106, 1);
          __gcry_mpi_sub($76, $35, HEAP32[$tmpval$s2]);
          if (__gcry_mpi_get_nbits($76) >>> 0 >= $40 >>> 0) {
            if ((_check_prime($76, $33, 64, 0, 0) | 0) != 0) {
              break L1408;
            }
          }
          var $114 = $counter_0 + 1 | 0;
          if ($114 >>> 0 < $49 >>> 0) {
            var $counter_0 = $114;
            var $ec_0 = $ec_1;
          } else {
            var $prime_p_0_ph = $76;
            var $_01_ph = $_1;
            var $_02_ph = $_13;
            continue L1408;
          }
        }
      }
      if (label == 1064) {
        __gcry_assert_failed(471368, 475480, 1720, 495420);
      }
      var $117 = __gcry_mpi_get_nbits($76);
      var $119 = __gcry_mpi_get_nbits(HEAP32[$prime_q$s2]);
      __gcry_log_debug(470056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $117, HEAP32[tempInt + 4 >> 2] = $119, HEAP32[tempInt + 8 >> 2] = $counter_0, tempInt));
      __gcry_log_printhex(468384, $_1, $_13);
      __gcry_log_mpidump(466696, $76);
      __gcry_log_mpidump(464896, HEAP32[$prime_q$s2]);
      if (($r_q | 0) != 0) {
        HEAP32[$r_q >> 2] = HEAP32[$prime_q$s2];
        HEAP32[$prime_q$s2] = 0;
      }
      if (($r_p | 0) == 0) {
        var $prime_p_1 = $76;
      } else {
        HEAP32[$r_p >> 2] = $76;
        var $prime_p_1 = 0;
      }
      var $prime_p_1;
      if (($r_counter | 0) != 0) {
        HEAP32[$r_counter >> 2] = $counter_0;
      }
      if (($r_seed | 0) == 0 | ($r_seedlen | 0) == 0) {
        var $seed_plus_0 = $28;
      } else {
        _memcpy($28, $_1, $_13);
        HEAP32[$r_seed >> 2] = $28;
        HEAP32[$r_seedlen >> 2] = $_13;
        var $seed_plus_0 = 0;
      }
      var $seed_plus_0;
      if (($r_hashalgo | 0) == 0) {
        var $prime_p_2 = $prime_p_1;
        var $value_x_0 = $35;
        var $value_w_0 = $34;
        var $val_2_0 = $33;
        var $ec_2 = $ec_1;
        var $seed_plus_1 = $seed_plus_0;
        break;
      }
      HEAP32[$r_hashalgo >> 2] = $hashalgo_0;
      var $prime_p_2 = $prime_p_1;
      var $value_x_0 = $35;
      var $value_w_0 = $34;
      var $val_2_0 = $33;
      var $ec_2 = $ec_1;
      var $seed_plus_1 = $seed_plus_0;
    }
  } while (0);
  var $seed_plus_1;
  var $ec_2;
  var $val_2_0;
  var $value_w_0;
  var $value_x_0;
  var $prime_p_2;
  __gcry_mpi_release(HEAP32[$tmpval$s2]);
  __gcry_mpi_release($value_x_0);
  __gcry_mpi_release($value_w_0);
  __gcry_mpi_release($prime_p_2);
  __gcry_mpi_release(HEAP32[$prime_q$s2]);
  __gcry_free($seed_plus_1);
  __gcry_mpi_release($val_2_0);
  var $_0 = $ec_2;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_generate_fips186_3_prime["X"] = 1;
function _is_prime($n, $steps, $count) {
  var $1$s2;
  var label = 0;
  var $1$s2 = ($n + 4 | 0) >> 2;
  var $3 = __gcry_mpi_alloc(HEAP32[$1$s2]);
  var $5 = __gcry_mpi_alloc(HEAP32[$1$s2]);
  var $7 = __gcry_mpi_alloc(HEAP32[$1$s2]);
  var $9 = __gcry_mpi_alloc(HEAP32[$1$s2]);
  var $10 = __gcry_mpi_alloc_set_ui(2);
  var $11 = __gcry_mpi_get_nbits($n);
  var $_steps = ($steps | 0) < 5 ? 5 : $steps;
  __gcry_mpi_sub_ui($9, $n, 1);
  var $13 = __gcry_mpi_copy($9);
  var $14 = __gcry_mpi_trailing_zeros($13);
  __gcry_mpi_tdiv_q_2exp($13, $13, $14);
  var $15 = $11 - 2 | 0;
  var $i_0 = 0;
  L1458 : while (1) {
    var $i_0;
    if ($i_0 >>> 0 >= $_steps >>> 0) {
      var $rc_0 = 1;
      label = 1118;
      break;
    }
    HEAP32[$count >> 2] = HEAP32[$count >> 2] + 1 | 0;
    if (($i_0 | 0) == 0) {
      __gcry_mpi_set_ui($3, 2);
    } else {
      __gcry_mpi_randomize($3, $11, 0);
      var $26 = (__gcry_mpi_test_bit($3, $15) | 0) == 0;
      __gcry_mpi_set_highbit($3, $15);
      if ($26) {
        __gcry_mpi_clear_bit($3, $15);
      }
      if ((__gcry_mpi_cmp($3, $9) | 0) >= 0) {
        label = 1117;
        break;
      }
      if ((__gcry_mpi_cmp_ui($3, 1) | 0) <= 0) {
        label = 1116;
        break;
      }
    }
    __gcry_mpi_powm($5, $3, $13, $n);
    do {
      if ((__gcry_mpi_cmp_ui($5, 1) | 0) != 0) {
        if ((__gcry_mpi_cmp($5, $9) | 0) == 0) {
          break;
        } else {
          var $j_0 = 1;
        }
        while (1) {
          var $j_0;
          if ($j_0 >>> 0 >= $14 >>> 0) {
            break;
          }
          if ((__gcry_mpi_cmp($5, $9) | 0) == 0) {
            break;
          }
          __gcry_mpi_powm($5, $5, $10, $n);
          if ((__gcry_mpi_cmp_ui($5, 1) | 0) == 0) {
            var $rc_0 = 0;
            label = 1119;
            break L1458;
          } else {
            var $j_0 = $j_0 + 1 | 0;
          }
        }
        if ((__gcry_mpi_cmp($5, $9) | 0) != 0) {
          var $rc_0 = 0;
          label = 1120;
          break L1458;
        }
      }
    } while (0);
    _progress(43);
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 1116) {
    __gcry_assert_failed(490132, 475480, 958, 494320);
  } else if (label == 1117) {
    __gcry_assert_failed(490132, 475480, 958, 494320);
  } else if (label == 1118) {
    var $rc_0;
    __gcry_mpi_free($3);
    __gcry_mpi_free($5);
    __gcry_mpi_free($7);
    __gcry_mpi_free($9);
    __gcry_mpi_free($13);
    __gcry_mpi_free($10);
    return $rc_0;
  } else if (label == 1119) {
    var $rc_0;
    __gcry_mpi_free($3);
    __gcry_mpi_free($5);
    __gcry_mpi_free($7);
    __gcry_mpi_free($9);
    __gcry_mpi_free($13);
    __gcry_mpi_free($10);
    return $rc_0;
  } else if (label == 1120) {
    var $rc_0;
    __gcry_mpi_free($3);
    __gcry_mpi_free($5);
    __gcry_mpi_free($7);
    __gcry_mpi_free($9);
    __gcry_mpi_free($13);
    __gcry_mpi_free($10);
    return $rc_0;
  }
}
_is_prime["X"] = 1;
function _init_encoding_ctx($ctx, $op, $nbits) {
  var $ctx$s2 = $ctx >> 2;
  HEAP32[$ctx$s2] = $op;
  HEAP32[$ctx$s2 + 1] = $nbits;
  HEAP32[$ctx$s2 + 2] = 4;
  HEAP32[$ctx$s2 + 3] = 0;
  HEAP32[$ctx$s2 + 4] = 2;
  HEAP32[$ctx$s2 + 5] = 0;
  HEAP32[$ctx$s2 + 6] = 0;
  HEAP32[$ctx$s2 + 7] = 20;
  HEAP32[$ctx$s2 + 8] = 0;
  HEAP32[$ctx$s2 + 9] = 0;
  return;
}
function _save_pool_prime($prime, $randomlevel) {
  var $item_4$s2;
  var label = 0;
  var $n_0 = 0;
  var $item_0_in = 440172;
  while (1) {
    var $item_0_in;
    var $n_0;
    var $item_0 = HEAP32[$item_0_in >> 2];
    if (($item_0 | 0) == 0) {
      label = 1126;
      break;
    }
    if ((HEAP32[$item_0 + 4 >> 2] | 0) == 0) {
      var $item_4 = $item_0, $item_4$s2 = $item_4 >> 2;
      break;
    }
    var $n_0 = $n_0 + 1 | 0;
    var $item_0_in = $item_0 | 0;
  }
  L1489 : do {
    if (label == 1126) {
      do {
        if ($n_0 >>> 0 > 100) {
          var $item2_04 = HEAP32[110043];
          if (($item2_04 | 0) == 0) {
            break;
          }
          var $11 = $n_0 >>> 0 < 3;
          var $item_15 = 0;
          var $item2_06 = $item2_04;
          while (1) {
            var $item2_06;
            var $item_15;
            if ($11) {
              var $14 = $item2_06 + 4 | 0;
              __gcry_mpi_release(HEAP32[$14 >> 2]);
              HEAP32[$14 >> 2] = 0;
              var $item_2 = ($item_15 | 0) == 0 ? $item2_06 : $item_15;
            } else {
              var $item_2 = $item_15;
            }
            var $item_2;
            var $item2_0 = HEAP32[$item2_06 >> 2];
            if (($item2_0 | 0) == 0) {
              break;
            } else {
              var $item_15 = $item_2;
              var $item2_06 = $item2_0;
            }
          }
          if (($item_2 | 0) != 0) {
            var $item_4 = $item_2, $item_4$s2 = $item_4 >> 2;
            break L1489;
          }
        }
      } while (0);
      var $21 = __gcry_calloc(1, 16);
      var $22 = $21;
      if (($21 | 0) != 0) {
        HEAP32[$21 >> 2] = HEAP32[110043];
        HEAP32[110043] = $22;
        var $item_4 = $22, $item_4$s2 = $item_4 >> 2;
        break;
      }
      __gcry_mpi_release($prime);
      return;
    }
  } while (0);
  var $item_4;
  HEAP32[$item_4$s2 + 1] = $prime;
  HEAP32[$item_4$s2 + 2] = __gcry_mpi_get_nbits($prime);
  HEAP32[$item_4$s2 + 3] = $randomlevel;
  return;
}
_save_pool_prime["X"] = 1;
function __gcry_pk_register($pubkey, $extraspec, $algorithm_id, $module) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $mod = __stackBase__;
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = _gpg_error650(60);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_ath_mutex_lock(439944);
  var $11 = __gcry_module_add(439948, 0, $pubkey, ($extraspec | 0) != 0 ? $extraspec : 457096, $mod);
  __gcry_ath_mutex_unlock(439944);
  if (($11 | 0) != 0) {
    var $_0 = $11;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$module >> 2] = HEAP32[$mod >> 2];
  HEAP32[$algorithm_id >> 2] = HEAP32[HEAP32[$mod >> 2] + 24 >> 2];
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gpg_error650($code) {
  return _gpg_err_make695(1, $code);
}
function __gcry_pk_unregister($module) {
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release($module);
  __gcry_ath_mutex_unlock(439944);
  return;
}
function __gcry_pk_map_name($string) {
  if (($string | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $8 = _gcry_pk_lookup_name($string);
  if (($8 | 0) == 0) {
    var $algorithm_0 = 0;
  } else {
    var $12 = HEAP32[$8 + 24 >> 2];
    __gcry_module_release($8);
    var $algorithm_0 = $12;
  }
  var $algorithm_0;
  __gcry_ath_mutex_unlock(439944);
  var $_0 = $algorithm_0;
  var $_0;
  return $_0;
}
function _gcry_pk_lookup_name($name) {
  return __gcry_module_lookup(HEAP32[109987], $name, 116);
}
function __gcry_pk_algo_name($algorithm) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $name_0 = 470608;
    var $name_0;
    var $15 = __gcry_ath_mutex_unlock(439944);
    return $name_0;
  }
  var $13 = HEAP32[HEAP32[$7 + 8 >> 2] >> 2];
  __gcry_module_release($7);
  var $name_0 = $13;
  var $name_0;
  var $15 = __gcry_ath_mutex_unlock(439944);
  return $name_0;
}
function __gcry_pk_aliased_algo_name($algorithm) {
  var label = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $name_1 = 0;
    var $name_1;
    var $26 = __gcry_ath_mutex_unlock(439944);
    return $name_1;
  }
  var $11 = HEAP32[$7 + 8 >> 2];
  var $14 = HEAP32[$11 + 4 >> 2];
  do {
    if (($14 | 0) == 0) {
      label = 1173;
    } else {
      var $17 = HEAP32[$14 >> 2];
      if (($17 | 0) == 0) {
        label = 1173;
        break;
      }
      if (HEAP8[$17] << 24 >> 24 == 0) {
        label = 1173;
        break;
      } else {
        var $name_0 = $17;
        break;
      }
    }
  } while (0);
  if (label == 1173) {
    var $name_0 = HEAP32[$11 >> 2];
  }
  var $name_0;
  __gcry_module_release($7);
  var $name_1 = $name_0;
  var $name_1;
  var $26 = __gcry_ath_mutex_unlock(439944);
  return $name_1;
}
function _sexp_to_key($sexp, $want_private, $override_elems, $retarray, $retalgo) {
  var $28$s2;
  var label = 0;
  var $1 = ($want_private | 0) != 0;
  var $3 = __gcry_sexp_find_token($sexp, $1 ? 478976 : 479572, 0);
  if (($3 | 0) == 0) {
    var $_0 = 65;
    var $_0;
    return $_0;
  }
  var $6 = __gcry_sexp_cadr($3);
  __gcry_sexp_release($3);
  var $7 = __gcry_sexp_nth_string($6, 0);
  if (($7 | 0) == 0) {
    __gcry_sexp_release($6);
    var $_0 = 65;
    var $_0;
    return $_0;
  }
  __gcry_ath_mutex_lock(439944);
  var $12 = _gcry_pk_lookup_name($7);
  __gcry_ath_mutex_unlock(439944);
  do {
    if ((_strcmp($7, 466612) | 0) == 0) {
      var $23 = 1;
    } else {
      if ((_strcmp($7, 466408) | 0) == 0) {
        var $23 = 1;
        break;
      }
      var $23 = (_strcmp($7, 477380) | 0) == 0;
    }
  } while (0);
  var $23;
  __gcry_free($7);
  if (($12 | 0) == 0) {
    __gcry_sexp_release($6);
    var $_0 = 4;
    var $_0;
    return $_0;
  }
  var $28$s2 = HEAP32[$12 + 8 >> 2] >> 2;
  var $31 = HEAP32[$12 + 12 >> 2];
  do {
    if (($override_elems | 0) == 0) {
      if ($1) {
        var $elems_0 = HEAP32[$28$s2 + 3];
        break;
      } else {
        var $elems_0 = HEAP32[$28$s2 + 2];
        break;
      }
    } else {
      var $elems_0 = $override_elems;
    }
  } while (0);
  var $elems_0;
  var $45 = __gcry_calloc(_strlen($elems_0) + 1 | 0, 4);
  var $46 = $45;
  do {
    if (($45 | 0) == 0) {
      var $49 = _gpg_err_code_from_syserror();
      if (($49 | 0) == 0) {
        label = 1193;
        break;
      }
      __gcry_sexp_release($6);
      var $err_12 = $49;
      break;
    } else {
      label = 1193;
    }
  } while (0);
  do {
    if (label == 1193) {
      if ($23) {
        var $err_1 = _sexp_elements_extract_ecc($6, $elems_0, $46, $31);
      } else {
        var $err_1 = _sexp_elements_extract($6, $elems_0, $46, HEAP32[$28$s2]);
      }
      var $err_1;
      __gcry_sexp_release($6);
      if (($err_1 | 0) != 0) {
        var $err_12 = $err_1;
        break;
      }
      HEAP32[$retarray >> 2] = $46;
      HEAP32[$retalgo >> 2] = $12;
      var $_0 = 0;
      var $_0;
      return $_0;
    }
  } while (0);
  var $err_12;
  __gcry_free($45);
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release($12);
  __gcry_ath_mutex_unlock(439944);
  var $_0 = $err_12;
  var $_0;
  return $_0;
}
_sexp_to_key["X"] = 1;
function _get_pool_prime($nbits, $randomlevel) {
  var label = 0;
  var $item_0_in = 440172;
  L1588 : while (1) {
    var $item_0_in;
    var $item_0 = HEAP32[$item_0_in >> 2];
    if (($item_0 | 0) == 0) {
      var $_0 = 0;
      label = 1214;
      break;
    }
    var $4 = $item_0 + 4 | 0;
    var $5 = HEAP32[$4 >> 2];
    do {
      if (($5 | 0) != 0) {
        if ((HEAP32[$item_0 + 8 >> 2] | 0) != ($nbits | 0)) {
          break;
        }
        if ((HEAP32[$item_0 + 12 >> 2] | 0) == ($randomlevel | 0)) {
          break L1588;
        }
      }
    } while (0);
    var $item_0_in = $item_0 | 0;
  }
  if (label == 1214) {
    var $_0;
    return $_0;
  }
  HEAP32[$4 >> 2] = 0;
  if ((__gcry_mpi_get_nbits($5) | 0) == ($nbits | 0)) {
    var $_0 = $5;
    var $_0;
    return $_0;
  } else {
    __gcry_assert_failed(480704, 475480, 210, 494356);
  }
}
function _m_out_of_n($array, $m, $n) {
  var label = 0;
  if (!(($m | 0) != 0 & ($m | 0) < ($n | 0))) {
    return;
  }
  if (($m | 0) == 1) {
    var $i_0 = 0;
    while (1) {
      var $i_0;
      if (($i_0 | 0) >= ($n | 0)) {
        label = 1222;
        break;
      }
      var $10 = $array + $i_0 | 0;
      var $13 = $i_0 + 1 | 0;
      if (HEAP8[$10] << 24 >> 24 == 0) {
        var $i_0 = $13;
      } else {
        break;
      }
    }
    if (label == 1222) {
      __gcry_bug(475480, 1025, 494308);
    }
    HEAP8[$10] = 0;
    HEAP8[$array + (($13 | 0) < ($n | 0) ? $13 : 0) | 0] = 1;
    return;
  }
  var $6 = $array + ($n - 1) | 0;
  var $7 = $n - 1 | 0;
  var $j_0 = 1;
  while (1) {
    var $j_0;
    if (($j_0 | 0) >= ($n | 0)) {
      var $j1_0 = 0;
      break;
    }
    if (HEAP8[$6] << 24 >> 24 == HEAP8[$array + ($7 - $j_0) | 0] << 24 >> 24) {
      var $j_0 = $j_0 + 1 | 0;
    } else {
      var $j1_0 = $j_0;
      break;
    }
  }
  var $j1_0;
  var $33 = HEAP8[$array + ($n - 1) | 0] << 24 >> 24 != 0;
  do {
    if (($m & 1 | 0) == 0) {
      if (!$33) {
        var $58 = $n - $j1_0 | 0;
        var $k2_0 = $58 + 1 | 0;
        var $k1_0 = $58;
        break;
      }
      if (($j1_0 & 1 | 0) != 0) {
        label = 1237;
        break;
      }
      var $64 = $n - $j1_0 | 0;
      var $65 = $64 + 2 | 0;
      var $k2_0 = ($65 | 0) > ($n | 0) ? $n : $65;
      var $k1_0 = $64;
      break;
    } else {
      if ($33) {
        if (($j1_0 & 1 | 0) == 0) {
          label = 1237;
          break;
        }
        var $39 = $n - $j1_0 | 0;
        var $40 = $39 + 2 | 0;
        var $k2_0 = ($40 | 0) > ($n | 0) ? $n : $40;
        var $k1_0 = $39;
        break;
      }
      var $43 = $n - $j1_0 | 0;
      var $44 = $43 - 1 | 0;
      if (($44 | 0) == 0) {
        var $k2_0 = $43;
        var $k1_0 = 0;
        break;
      }
      if (HEAP8[$array + $44 | 0] << 24 >> 24 != 0) {
        if (HEAP8[$array + ($43 - 2) | 0] << 24 >> 24 != 0) {
          var $k2_0 = $44;
          var $k1_0 = $n;
          break;
        }
      }
      var $k2_0 = $44;
      var $k1_0 = $43;
      break;
    }
  } while (0);
  do {
    if (label == 1237) {
      var $68 = $n - $j1_0 | 0;
      var $69 = $68 - 1 | 0;
      var $70 = $68 + 1 | 0;
      var $i_2 = 1;
      while (1) {
        var $i_2;
        if (($i_2 | 0) > ($69 | 0)) {
          label = 1242;
          break;
        }
        var $74 = $70 - $i_2 | 0;
        var $75 = $74 - 1 | 0;
        if (HEAP8[$array + $75 | 0] << 24 >> 24 == 0) {
          var $i_2 = $i_2 + 1 | 0;
        } else {
          break;
        }
      }
      if (label == 1242) {
        var $k2_0 = 1 - $m + $n | 0;
        var $k1_0 = 1;
        break;
      }
      if (HEAP8[$array + ($74 - 2) | 0] << 24 >> 24 != 0) {
        var $k2_0 = $68;
        var $k1_0 = $75;
        break;
      }
      var $k2_0 = $n + 1 - $j1_0 | 0;
      var $k1_0 = $75;
    }
  } while (0);
  var $k1_0;
  var $k2_0;
  var $93 = $array + ($k1_0 - 1) | 0;
  HEAP8[$93] = HEAP8[$93] << 24 >> 24 == 0 & 1;
  var $98 = $array + ($k2_0 - 1) | 0;
  HEAP8[$98] = HEAP8[$98] << 24 >> 24 == 0 & 1;
  return;
}
_m_out_of_n["X"] = 1;
function _pk_register_default() {
  var $3$s2;
  var label = 0;
  var $err_0 = 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    var $err_0;
    if ($err_0) {
      label = 1266;
      break;
    }
    var $3$s2 = (($i_0 << 4) + 439952 | 0) >> 2;
    if (($i_0 | 0) == 6) {
      label = 1267;
      break;
    }
    var $7 = HEAP32[$3$s2] + 32 | 0;
    if ((HEAP32[$7 >> 2] | 0) == 0) {
      HEAP32[$7 >> 2] = 250;
    }
    var $13 = HEAP32[$3$s2] + 36 | 0;
    if ((HEAP32[$13 >> 2] | 0) == 0) {
      HEAP32[$13 >> 2] = 182;
    }
    var $19 = HEAP32[$3$s2] + 40 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 0) {
      HEAP32[$19 >> 2] = 232;
    }
    var $25 = HEAP32[$3$s2] + 44 | 0;
    if ((HEAP32[$25 >> 2] | 0) == 0) {
      HEAP32[$25 >> 2] = 56;
    }
    var $31 = HEAP32[$3$s2] + 48 | 0;
    if ((HEAP32[$31 >> 2] | 0) == 0) {
      HEAP32[$31 >> 2] = 308;
    }
    var $37 = HEAP32[$3$s2] + 52 | 0;
    if ((HEAP32[$37 >> 2] | 0) == 0) {
      HEAP32[$37 >> 2] = 300;
    }
    var $43 = HEAP32[$3$s2] + 56 | 0;
    if ((HEAP32[$43 >> 2] | 0) == 0) {
      HEAP32[$43 >> 2] = 368;
    }
    var $err_0 = (__gcry_module_add(439948, HEAP32[($i_0 << 4) + 439960 >> 2], HEAP32[$3$s2], HEAP32[($i_0 << 4) + 439956 >> 2], 0) | 0) != 0;
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 1267) {
    return;
  } else if (label == 1266) {
    __gcry_bug(478540, 226, 494200);
  }
}
_pk_register_default["X"] = 1;
function __gcry_pk_encrypt($r_ciph, $s_data, $s_pkey) {
  var $13$s2;
  var $module$s2;
  var $ctx$s2;
  var $data$s2;
  var $pkey$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  var $pkey = __stackBase__, $pkey$s2 = $pkey >> 2;
  var $data = __stackBase__ + 4, $data$s2 = $data >> 2;
  var $ctx = __stackBase__ + 8, $ctx$s2 = $ctx >> 2;
  var $module = __stackBase__ + 48, $module$s2 = $module >> 2;
  var $em = __stackBase__ + 52;
  HEAP32[$pkey$s2] = 0;
  HEAP32[$data$s2] = 0;
  HEAP32[$module$s2] = 0;
  HEAP32[$r_ciph >> 2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $5 = _sexp_to_key($s_pkey, 0, 0, $pkey, $module);
  do {
    if (($5 | 0) == 0) {
      var $8 = HEAP32[$module$s2];
      if (($8 | 0) == 0) {
        __gcry_assert_failed(484672, 478540, 2861, 495256);
      }
      var $13$s2 = HEAP32[$8 + 8 >> 2] >> 2;
      var $16 = HEAP32[$13$s2 + 1];
      do {
        if (($16 | 0) == 0) {
          label = 1276;
        } else {
          var $19 = HEAP32[$16 >> 2];
          if (($19 | 0) == 0) {
            label = 1276;
            break;
          }
          if (HEAP8[$19] << 24 >> 24 == 0) {
            label = 1276;
            break;
          } else {
            var $algo_name_0 = $19;
            break;
          }
        }
      } while (0);
      if (label == 1276) {
        var $algo_name_0 = HEAP32[$13$s2];
      }
      var $algo_name_0;
      var $29 = HEAP32[$13$s2 + 4];
      _init_encoding_ctx($ctx, 0, __gcry_pk_get_nbits($s_pkey));
      var $31 = _sexp_data_to_mpi($s_data, $data, $ctx);
      if (($31 | 0) != 0) {
        var $ciph_0 = 0;
        var $rc_0 = $31;
        break;
      }
      var $36 = __gcry_calloc(_strlen($29) + 1 | 0, 4);
      var $37 = $36;
      if (($36 | 0) == 0) {
        var $ciph_0 = $37;
        var $rc_0 = _gpg_err_code_from_syserror();
        break;
      }
      var $49 = _pubkey_encrypt(HEAP32[HEAP32[$module$s2] + 24 >> 2], $37, HEAP32[$data$s2], HEAP32[$pkey$s2], HEAP32[$ctx$s2 + 3]);
      __gcry_mpi_free(HEAP32[$data$s2]);
      HEAP32[$data$s2] = 0;
      if (($49 | 0) != 0) {
        var $ciph_0 = $37;
        var $rc_0 = $49;
        break;
      }
      if ((HEAP32[$ctx$s2 + 2] - 1 | 0) >>> 0 < 2) {
        var $59 = (HEAP32[$ctx$s2 + 1] + 7 | 0) >>> 3;
        var $61 = _octet_string_from_mpi($em, 0, HEAP32[$37 >> 2], $59);
        if (($61 | 0) != 0) {
          var $ciph_0 = $37;
          var $rc_0 = $61;
          break;
        }
        var $64 = HEAP32[$em >> 2];
        var $66 = _gcry_err_code663(__gcry_sexp_build($r_ciph, 0, 475344, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $algo_name_0, HEAP32[tempInt + 4 >> 2] = $59, HEAP32[tempInt + 8 >> 2] = $64, tempInt)));
        __gcry_free(HEAP32[$em >> 2]);
        var $ciph_0 = $37;
        var $rc_0 = $66;
        break;
      }
      var $69 = _strlen($29);
      var $74 = __gcry_malloc(($69 * 5 & -1) + _strlen($algo_name_0) + 19 | 0);
      if (($74 | 0) == 0) {
        var $ciph_0 = $37;
        var $rc_0 = _gpg_err_code_from_syserror();
        break;
      }
      var $80 = _stpcpy(_stpcpy($74, 472780), $algo_name_0);
      L1700 : do {
        if (HEAP8[$29] << 24 >> 24 == 0) {
          var $p_0_lcssa = $80;
        } else {
          var $p_02 = $80;
          var $i_03 = 0;
          var $83 = $29;
          while (1) {
            var $83;
            var $i_03;
            var $p_02;
            HEAP8[$p_02] = 40;
            HEAP8[$p_02 + 1 | 0] = HEAP8[$83];
            var $87 = _stpcpy($p_02 + 2 | 0, 471272);
            var $88 = $i_03 + 1 | 0;
            var $89 = $29 + $88 | 0;
            if (HEAP8[$89] << 24 >> 24 == 0) {
              var $p_0_lcssa = $87;
              break L1700;
            } else {
              var $p_02 = $87;
              var $i_03 = $88;
              var $83 = $89;
            }
          }
        }
      } while (0);
      var $p_0_lcssa;
      HEAP8[$p_0_lcssa] = HEAP8[469976];
      HEAP8[$p_0_lcssa + 1] = HEAP8[469977];
      HEAP8[$p_0_lcssa + 2] = HEAP8[469978];
      var $93 = _malloc($69 << 2);
      var $94 = $93;
      if (($93 | 0) == 0) {
        var $ciph_0 = $37;
        var $rc_0 = _gpg_err_code_from_syserror();
        break;
      }
      L1707 : do {
        if (($69 | 0) != 0) {
          var $i_11 = 0;
          while (1) {
            var $i_11;
            HEAP32[$94 + ($i_11 << 2) >> 2] = ($i_11 << 2) + $37 | 0;
            var $102 = $i_11 + 1 | 0;
            if (($102 | 0) == ($69 | 0)) {
              break L1707;
            } else {
              var $i_11 = $102;
            }
          }
        }
      } while (0);
      var $103 = __gcry_sexp_build_array($r_ciph, 0, $74, $94);
      _free($93);
      if (($103 | 0) == 0) {
        __gcry_free($74);
        var $ciph_0 = $37;
        var $rc_0 = 0;
        break;
      } else {
        __gcry_bug(478540, 2957, 495256);
      }
    } else {
      var $ciph_0 = 0;
      var $rc_0 = $5;
    }
  } while (0);
  var $rc_0;
  var $ciph_0;
  var $108 = HEAP32[$pkey$s2];
  if (($108 | 0) != 0) {
    _release_mpi_array($108);
    __gcry_free(HEAP32[$pkey$s2]);
  }
  if (($ciph_0 | 0) != 0) {
    _release_mpi_array($ciph_0);
    __gcry_free($ciph_0);
  }
  if ((HEAP32[$module$s2] | 0) == 0) {
    var $125 = $ctx + 20 | 0;
    var $126 = HEAP32[$125 >> 2];
    __gcry_free($126);
    var $127 = _gcry_error664($rc_0);
    STACKTOP = __stackBase__;
    return $127;
  }
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release(HEAP32[$module$s2]);
  __gcry_ath_mutex_unlock(439944);
  var $125 = $ctx + 20 | 0;
  var $126 = HEAP32[$125 >> 2];
  __gcry_free($126);
  var $127 = _gcry_error664($rc_0);
  STACKTOP = __stackBase__;
  return $127;
}



__gcry_pk_encrypt["X"] = 1;
function __gcry_pk_get_nbits($key) {
  var $keyarr$s2;
  var $module$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $module = __stackBase__, $module$s2 = $module >> 2;
  var $keyarr = __stackBase__ + 4, $keyarr$s2 = $keyarr >> 2;
  HEAP32[$module$s2] = 0;
  HEAP32[$keyarr$s2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $5 = _sexp_to_key($key, 0, 0, $keyarr, $module);
  if (($5 | 0) == 65) {
    var $rc_0 = _sexp_to_key($key, 1, 0, $keyarr, $module);
  } else {
    var $rc_0 = $5;
  }
  var $rc_0;
  if (($rc_0 | 0) != 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $12 = HEAP32[$module$s2];
  var $21 = FUNCTION_TABLE[HEAP32[HEAP32[$12 + 8 >> 2] + 56 >> 2]](HEAP32[$12 + 24 >> 2], HEAP32[$keyarr$s2]);
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release(HEAP32[$module$s2]);
  __gcry_ath_mutex_unlock(439944);
  _release_mpi_array(HEAP32[$keyarr$s2]);
  __gcry_free(HEAP32[$keyarr$s2]);
  var $_0 = $21;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _sexp_data_to_mpi($input, $ret_mpi, $ctx) {
  var $69$s2;
  var $n$s2;
  var $ctx$s2 = $ctx >> 2;
  var $ret_mpi$s2 = $ret_mpi >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  var $valuelen = __stackBase__ + 4;
  var $valuelen2 = __stackBase__ + 8;
  var $valuelen4 = __stackBase__ + 12;
  var $valuelen9 = __stackBase__ + 16;
  HEAP32[$ret_mpi$s2] = 0;
  var $1 = __gcry_sexp_find_token($input, 468484, 0);
  if (($1 | 0) == 0) {
    var $4 = __gcry_sexp_nth_mpi($input, 0, 0);
    HEAP32[$ret_mpi$s2] = $4;
    var $_0 = ($4 | 0) != 0 ? 0 : 65;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $8 = __gcry_sexp_find_token($1, 474736, 0);
  if (($8 | 0) == 0) {
    var $unknown_flag_2 = 0;
    var $parsed_flags_2 = 0;
  } else {
    var $12 = $ctx + 8 | 0;
    var $13 = $ctx + 8 | 0;
    var $14 = $ctx + 8 | 0;
    var $15 = $ctx + 8 | 0;
    var $i_0_in_ph = __gcry_sexp_length($8);
    var $unknown_flag_0_ph = 0;
    var $parsed_flags_0_ph = 0;
    L1743 : while (1) {
      var $parsed_flags_0_ph;
      var $unknown_flag_0_ph;
      var $i_0_in_ph;
      var $i_0_in_ph43 = $i_0_in_ph;
      var $unknown_flag_0_ph42 = $unknown_flag_0_ph;
      while (1) {
        var $unknown_flag_0_ph42;
        var $i_0_in_ph43;
        var $i_0_in = $i_0_in_ph43;
        L1747 : while (1) {
          var $i_0_in;
          var $i_0 = $i_0_in - 1 | 0;
          if (($i_0 | 0) <= 0) {
            break L1743;
          }
          var $18 = __gcry_sexp_nth_data($8, $i_0, $n);
          if (($18 | 0) == 0) {
            var $i_0_in = $i_0;
            continue;
          }
          var $21 = HEAP32[$n$s2];
          if (($21 | 0) == 3) {
            do {
              if ((_memcmp($18, 471856, 3) | 0) == 0) {
                if ((HEAP32[$12 >> 2] | 0) != 4) {
                  break;
                }
                HEAP32[$12 >> 2] = 0;
                var $i_0_in = $i_0;
                continue L1747;
              }
            } while (0);
            var $31 = HEAP32[$n$s2];
          } else {
            var $31 = $21;
          }
          var $31;
          do {
            if (($31 | 0) == 5) {
              if ((_memcmp($18, 471756, 5) | 0) != 0) {
                break;
              }
              if ((HEAP32[$13 >> 2] | 0) != 4) {
                break;
              }
              HEAP32[$13 >> 2] = 1;
              var $i_0_in = $i_0;
              continue L1747;
            }
          } while (0);
          var $41 = HEAP32[$n$s2];
          if (($41 | 0) == 4) {
            do {
              if ((_memcmp($18, 471572, 4) | 0) == 0) {
                if ((HEAP32[$14 >> 2] | 0) != 4) {
                  break;
                }
                HEAP32[$14 >> 2] = 2;
                var $i_0_in = $i_0;
                continue L1747;
              }
            } while (0);
            var $51 = HEAP32[$n$s2];
          } else {
            var $51 = $41;
          }
          var $51;
          if (($51 | 0) != 3) {
            break;
          }
          if ((_memcmp($18, 471456, 3) | 0) != 0) {
            break;
          }
          if ((HEAP32[$15 >> 2] | 0) != 4) {
            break;
          }
          HEAP32[$15 >> 2] = 3;
          var $i_0_in = $i_0;
        }
        if ((HEAP32[$n$s2] | 0) == 11) {
          break;
        } else {
          var $i_0_in_ph43 = $i_0;
          var $unknown_flag_0_ph42 = 1;
        }
      }
      var $65 = (_memcmp($18, 471328, 11) | 0) == 0;
      var $i_0_in_ph = $i_0;
      var $unknown_flag_0_ph = $65 ? $unknown_flag_0_ph42 : 1;
      var $parsed_flags_0_ph = $65 & 1 | $parsed_flags_0_ph;
    }
    __gcry_sexp_release($8);
    var $unknown_flag_2 = $unknown_flag_0_ph42;
    var $parsed_flags_2 = $parsed_flags_0_ph;
  }
  var $parsed_flags_2;
  var $unknown_flag_2;
  var $69$s2 = ($ctx + 8 | 0) >> 2;
  if ((HEAP32[$69$s2] | 0) == 4) {
    HEAP32[$69$s2] = 0;
  }
  var $74 = __gcry_sexp_find_token($1, 468376, 0);
  var $75 = ($74 | 0) != 0;
  do {
    if ($75) {
      var $82 = 0;
      var $81 = 0;
      label = 1346;
    } else {
      var $77 = __gcry_sexp_find_token($1, 468272, 0);
      var $78 = ($77 | 0) != 0;
      if ($75 ^ $78) {
        var $82 = $77;
        var $81 = $78;
        label = 1346;
        break;
      } else {
        var $rc_8 = 65;
        var $305 = $77;
        break;
      }
    }
  } while (0);
  L1782 : do {
    if (label == 1346) {
      var $81;
      var $82;
      if (($unknown_flag_2 | 0) != 0) {
        var $rc_8 = 72;
        var $305 = $82;
        break;
      }
      var $85 = HEAP32[$69$s2];
      var $_not14 = $81 ^ 1;
      if (!(($85 | 0) != 0 | $_not14)) {
        var $87 = __gcry_sexp_nth_mpi($82, 1, 5);
        HEAP32[$ret_mpi$s2] = $87;
        var $rc_8 = ($87 | 0) == 0 ? 65 : 0;
        var $305 = $82;
        break;
      }
      do {
        if (!(($85 | 0) != 1 | $_not14)) {
          if ((HEAP32[$ctx$s2] | 0) != 0) {
            break;
          }
          var $95 = __gcry_sexp_nth_data($82, 1, $valuelen);
          if (!(($95 | 0) != 0 & (HEAP32[$valuelen >> 2] | 0) != 0)) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $100 = __gcry_sexp_find_token($1, 470928, 0);
          L1792 : do {
            if (($100 | 0) == 0) {
              var $random_override_len_1 = 0;
              var $random_override_1 = 0;
            } else {
              var $103 = __gcry_sexp_nth_data($100, 1, $n);
              if (($103 | 0) == 0) {
                __gcry_sexp_release($100);
                var $rc_8 = 68;
                var $305 = $82;
                break L1782;
              }
              var $106 = HEAP32[$n$s2];
              do {
                if (($106 | 0) == 0) {
                  var $random_override_len_0_ph = 0;
                  var $random_override_0_ph = 0;
                } else {
                  var $109 = __gcry_malloc($106);
                  if (($109 | 0) == 0) {
                    var $115 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release($100);
                    if (($115 | 0) == 0) {
                      var $random_override_len_1 = 0;
                      var $random_override_1 = 0;
                      break L1792;
                    } else {
                      var $rc_8 = $115;
                      var $305 = $82;
                      break L1782;
                    }
                  } else {
                    _memcpy($109, $103, HEAP32[$n$s2]);
                    var $random_override_len_0_ph = HEAP32[$n$s2];
                    var $random_override_0_ph = $109;
                    break;
                  }
                }
              } while (0);
              var $random_override_0_ph;
              var $random_override_len_0_ph;
              __gcry_sexp_release($100);
              var $random_override_len_1 = $random_override_len_0_ph;
              var $random_override_1 = $random_override_0_ph;
            }
          } while (0);
          var $random_override_1;
          var $random_override_len_1;
          var $121 = _pkcs1_encode_for_encryption($ret_mpi, HEAP32[$ctx$s2 + 1], $95, HEAP32[$valuelen >> 2], $random_override_1, $random_override_len_1);
          __gcry_free($random_override_1);
          var $rc_8 = $121;
          var $305 = $82;
          break L1782;
        }
      } while (0);
      var $_not19 = $75 ^ 1;
      do {
        if (!((HEAP32[$69$s2] | 0) != 1 | $_not19)) {
          if ((HEAP32[$ctx$s2] - 2 | 0) >>> 0 >= 2) {
            break;
          }
          if ((__gcry_sexp_length($74) | 0) != 3) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $131 = __gcry_sexp_nth_data($74, 1, $n);
          var $133 = HEAP32[$n$s2];
          if (!(($131 | 0) != 0 & ($133 | 0) != 0)) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $136 = _get_hash_algo($131, $133);
          var $137 = $ctx + 16 | 0;
          HEAP32[$137 >> 2] = $136;
          if (($136 | 0) == 0) {
            var $rc_8 = 5;
            var $305 = $82;
            break L1782;
          }
          var $140 = __gcry_sexp_nth_data($74, 2, $valuelen2);
          var $142 = HEAP32[$valuelen2 >> 2];
          if (!(($140 | 0) != 0 & ($142 | 0) != 0)) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $rc_8 = _pkcs1_encode_for_signature($ret_mpi, HEAP32[$ctx$s2 + 1], $140, $142, HEAP32[$137 >> 2]);
          var $305 = $82;
          break L1782;
        }
      } while (0);
      do {
        if (!((HEAP32[$69$s2] | 0) != 2 | $_not14)) {
          if ((HEAP32[$ctx$s2] | 0) != 0) {
            break;
          }
          var $156 = __gcry_sexp_nth_data($82, 1, $valuelen4);
          if (!(($156 | 0) != 0 & (HEAP32[$valuelen4 >> 2] | 0) != 0)) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $161 = __gcry_sexp_find_token($1, 471244, 0);
          do {
            if (($161 | 0) != 0) {
              var $164 = __gcry_sexp_nth_data($161, 1, $n);
              if (($164 | 0) == 0) {
                __gcry_sexp_release($161);
                var $rc_8 = 68;
                var $305 = $82;
                break L1782;
              } else {
                var $168 = _get_hash_algo($164, HEAP32[$n$s2]);
                HEAP32[$ctx$s2 + 4] = $168;
                var $170 = ($168 | 0) == 0;
                __gcry_sexp_release($161);
                if ($170) {
                  var $rc_8 = $170 ? 5 : 0;
                  var $305 = $82;
                  break L1782;
                } else {
                  break;
                }
              }
            }
          } while (0);
          var $172 = __gcry_sexp_find_token($1, 471076, 0);
          L1823 : do {
            if (($172 | 0) != 0) {
              var $175 = __gcry_sexp_nth_data($172, 1, $n);
              if (($175 | 0) == 0) {
                __gcry_sexp_release($172);
                var $rc_8 = 68;
                var $305 = $82;
                break L1782;
              }
              var $178 = HEAP32[$n$s2];
              do {
                if (($178 | 0) != 0) {
                  var $181 = __gcry_malloc($178);
                  HEAP32[$ctx$s2 + 5] = $181;
                  if (($181 | 0) == 0) {
                    var $189 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release($172);
                    if (($189 | 0) == 0) {
                      break L1823;
                    } else {
                      var $rc_8 = $189;
                      var $305 = $82;
                      break L1782;
                    }
                  } else {
                    _memcpy($181, $175, HEAP32[$n$s2]);
                    HEAP32[$ctx$s2 + 6] = HEAP32[$n$s2];
                    break;
                  }
                }
              } while (0);
              __gcry_sexp_release($172);
            }
          } while (0);
          var $192 = __gcry_sexp_find_token($1, 470928, 0);
          L1835 : do {
            if (($192 | 0) == 0) {
              var $random_override_len7_1 = 0;
              var $random_override6_1 = 0;
            } else {
              var $195 = __gcry_sexp_nth_data($192, 1, $n);
              if (($195 | 0) == 0) {
                __gcry_sexp_release($192);
                var $rc_8 = 68;
                var $305 = $82;
                break L1782;
              }
              var $198 = HEAP32[$n$s2];
              do {
                if (($198 | 0) == 0) {
                  var $random_override_len7_0_ph = 0;
                  var $random_override6_0_ph = 0;
                } else {
                  var $201 = __gcry_malloc($198);
                  if (($201 | 0) == 0) {
                    var $207 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release($192);
                    if (($207 | 0) == 0) {
                      var $random_override_len7_1 = 0;
                      var $random_override6_1 = 0;
                      break L1835;
                    } else {
                      var $rc_8 = $207;
                      var $305 = $82;
                      break L1782;
                    }
                  } else {
                    _memcpy($201, $195, HEAP32[$n$s2]);
                    var $random_override_len7_0_ph = HEAP32[$n$s2];
                    var $random_override6_0_ph = $201;
                    break;
                  }
                }
              } while (0);
              var $random_override6_0_ph;
              var $random_override_len7_0_ph;
              __gcry_sexp_release($192);
              var $random_override_len7_1 = $random_override_len7_0_ph;
              var $random_override6_1 = $random_override6_0_ph;
            }
          } while (0);
          var $random_override6_1;
          var $random_override_len7_1;
          var $219 = _oaep_encode($ret_mpi, HEAP32[$ctx$s2 + 1], HEAP32[$ctx$s2 + 4], $156, HEAP32[$valuelen4 >> 2], HEAP32[$ctx$s2 + 5], HEAP32[$ctx$s2 + 6], $random_override6_1, $random_override_len7_1);
          __gcry_free($random_override6_1);
          var $rc_8 = $219;
          var $305 = $82;
          break L1782;
        }
      } while (0);
      do {
        if (!((HEAP32[$69$s2] | 0) != 3 | $_not19)) {
          if ((HEAP32[$ctx$s2] | 0) != 2) {
            break;
          }
          if ((__gcry_sexp_length($74) | 0) != 3) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $230 = __gcry_sexp_nth_data($74, 1, $n);
          var $232 = HEAP32[$n$s2];
          if (!(($230 | 0) != 0 & ($232 | 0) != 0)) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $235 = _get_hash_algo($230, $232);
          var $236 = $ctx + 16 | 0;
          HEAP32[$236 >> 2] = $235;
          if (($235 | 0) == 0) {
            var $rc_8 = 5;
            var $305 = $82;
            break L1782;
          }
          var $239 = __gcry_sexp_nth_data($74, 2, $valuelen9);
          if (!(($239 | 0) != 0 & (HEAP32[$valuelen9 >> 2] | 0) != 0)) {
            var $rc_8 = 65;
            var $305 = $82;
            break L1782;
          }
          var $244 = __gcry_sexp_find_token($1, 467988, 0);
          if (($244 | 0) != 0) {
            var $247 = __gcry_sexp_nth_data($244, 1, $n);
            if (($247 | 0) == 0) {
              var $rc_8 = 68;
              var $305 = $82;
              break L1782;
            }
            HEAP32[$ctx$s2 + 7] = _strtoul($247, 0, 10);
            __gcry_sexp_release($244);
          }
          var $253 = __gcry_sexp_find_token($1, 470928, 0);
          L1859 : do {
            if (($253 | 0) == 0) {
              var $random_override_len11_1 = 0;
              var $random_override10_1 = 0;
            } else {
              var $256 = __gcry_sexp_nth_data($253, 1, $n);
              if (($256 | 0) == 0) {
                __gcry_sexp_release($253);
                var $rc_8 = 68;
                var $305 = $82;
                break L1782;
              }
              var $259 = HEAP32[$n$s2];
              do {
                if (($259 | 0) == 0) {
                  var $random_override_len11_0_ph = 0;
                  var $random_override10_0_ph = 0;
                } else {
                  var $262 = __gcry_malloc($259);
                  if (($262 | 0) == 0) {
                    var $268 = _gpg_err_code_from_syserror();
                    __gcry_sexp_release($253);
                    if (($268 | 0) == 0) {
                      var $random_override_len11_1 = 0;
                      var $random_override10_1 = 0;
                      break L1859;
                    } else {
                      var $rc_8 = $268;
                      var $305 = $82;
                      break L1782;
                    }
                  } else {
                    _memcpy($262, $256, HEAP32[$n$s2]);
                    var $random_override_len11_0_ph = HEAP32[$n$s2];
                    var $random_override10_0_ph = $262;
                    break;
                  }
                }
              } while (0);
              var $random_override10_0_ph;
              var $random_override_len11_0_ph;
              __gcry_sexp_release($253);
              var $random_override_len11_1 = $random_override_len11_0_ph;
              var $random_override10_1 = $random_override10_0_ph;
            }
          } while (0);
          var $random_override10_1;
          var $random_override_len11_1;
          var $278 = _pss_encode($ret_mpi, HEAP32[$ctx$s2 + 1] - 1 | 0, HEAP32[$236 >> 2], $239, HEAP32[$valuelen9 >> 2], HEAP32[$ctx$s2 + 7], $random_override10_1, $random_override_len11_1);
          __gcry_free($random_override10_1);
          var $rc_8 = $278;
          var $305 = $82;
          break L1782;
        }
      } while (0);
      if ((HEAP32[$69$s2] | 0) != 3 | $_not19) {
        var $rc_8 = 70;
        var $305 = $82;
        break;
      }
      if ((HEAP32[$ctx$s2] | 0) != 3) {
        var $rc_8 = 70;
        var $305 = $82;
        break;
      }
      if ((__gcry_sexp_length($74) | 0) != 3) {
        var $rc_8 = 65;
        var $305 = $82;
        break;
      }
      var $289 = __gcry_sexp_nth_data($74, 1, $n);
      var $291 = HEAP32[$n$s2];
      if (!(($289 | 0) != 0 & ($291 | 0) != 0)) {
        var $rc_8 = 65;
        var $305 = $82;
        break;
      }
      var $294 = _get_hash_algo($289, $291);
      HEAP32[$ctx$s2 + 4] = $294;
      if (($294 | 0) == 0) {
        var $rc_8 = 5;
        var $305 = $82;
        break;
      }
      var $298 = __gcry_sexp_nth_mpi($74, 2, 5);
      HEAP32[$ret_mpi$s2] = $298;
      HEAP32[$ctx$s2 + 8] = 272;
      HEAP32[$ctx$s2 + 9] = HEAP32[$ret_mpi$s2];
      var $rc_8 = ($298 | 0) == 0 ? 65 : 0;
      var $305 = $82;
    }
  } while (0);
  var $305;
  var $rc_8;
  __gcry_sexp_release($1);
  __gcry_sexp_release($74);
  __gcry_sexp_release($305);
  if (($rc_8 | 0) == 0) {
    HEAP32[$ctx$s2 + 3] = $parsed_flags_2;
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    var $310 = $ctx + 20 | 0;
    __gcry_free(HEAP32[$310 >> 2]);
    HEAP32[$310 >> 2] = 0;
    var $_0 = $rc_8;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_sexp_data_to_mpi["X"] = 1;
function _pubkey_encrypt($algorithm, $resarr, $data, $pkey, $flags) {
  var __stackBase__ = STACKTOP;
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(468912, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
      L1887 : do {
        if ((_pubkey_get_npkey($algorithm) | 0) > 0) {
          var $i_02 = 0;
          while (1) {
            var $i_02;
            __gcry_log_mpidump(468696, HEAP32[$pkey + ($i_02 << 2) >> 2]);
            var $11 = $i_02 + 1 | 0;
            if (($11 | 0) < (_pubkey_get_npkey($algorithm) | 0)) {
              var $i_02 = $11;
            } else {
              break L1887;
            }
          }
        }
      } while (0);
      __gcry_log_mpidump(473164, $data);
    }
  } while (0);
  __gcry_ath_mutex_lock(439944);
  var $17 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($17 | 0) == 0) {
    __gcry_ath_mutex_unlock(439944);
    var $rc_01 = 4;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  var $26 = FUNCTION_TABLE[HEAP32[HEAP32[$17 + 8 >> 2] + 40 >> 2]]($algorithm, $resarr, $data, $pkey, $flags);
  __gcry_module_release($17);
  __gcry_ath_mutex_unlock(439944);
  if (($26 | 0) != 0) {
    var $rc_01 = $26;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    var $rc_01 = 0;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    var $rc_01 = $26;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((_pubkey_get_nenc($algorithm) | 0) > 0) {
    var $i_13 = 0;
  } else {
    var $rc_01 = $26;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  while (1) {
    var $i_13;
    __gcry_log_mpidump(468656, HEAP32[$resarr + ($i_13 << 2) >> 2]);
    var $39 = $i_13 + 1 | 0;
    if (($39 | 0) < (_pubkey_get_nenc($algorithm) | 0)) {
      var $i_13 = $39;
    } else {
      var $rc_01 = $26;
      break;
    }
  }
  var $rc_01;
  STACKTOP = __stackBase__;
  return $rc_01;
}
_pubkey_encrypt["X"] = 1;
function _octet_string_from_mpi($r_frame, $space, $value, $nbytes) {
  var $nframe$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $nframe = __stackBase__, $nframe$s2 = $nframe >> 2;
  var $1 = ($r_frame | 0) != 0;
  var $2 = ($space | 0) != 0;
  L1911 : do {
    if ($1 ^ $2) {
      if ($1) {
        HEAP32[$r_frame >> 2] = 0;
      }
      var $7 = _gcry_err_code663(__gcry_mpi_print(5, 0, 0, $nframe, $value));
      if (($7 | 0) != 0) {
        var $_0 = $7;
        break;
      }
      var $10 = HEAP32[$nframe$s2];
      if ($10 >>> 0 > $nbytes >>> 0) {
        var $_0 = 67;
        break;
      }
      var $_ = $10 >>> 0 < $nbytes >>> 0 ? $nbytes - $10 | 0 : 0;
      var $15 = $_ + $10 | 0;
      do {
        if ($2) {
          var $frame_0 = $space;
        } else {
          do {
            if (($value | 0) == 0) {
              label = 1451;
            } else {
              if ((HEAP32[$value + 12 >> 2] & 1 | 0) == 0) {
                label = 1451;
                break;
              }
              var $28 = __gcry_malloc_secure($15);
              break;
            }
          } while (0);
          if (label == 1451) {
            var $28 = __gcry_malloc($15);
          }
          var $28;
          if (($28 | 0) != 0) {
            var $frame_0 = $28;
            break;
          }
          var $_0 = _gpg_err_code_from_syserror();
          break L1911;
        }
      } while (0);
      var $frame_0;
      if (($_ | 0) != 0) {
        _memset($frame_0, 0, $_);
      }
      var $36 = HEAP32[$nframe$s2];
      HEAP32[$nframe$s2] = $36 + $_ | 0;
      var $40 = _gcry_err_code663(__gcry_mpi_print(5, $frame_0 + $_ | 0, $36, 0, $value));
      if (($40 | 0) != 0) {
        __gcry_free($frame_0);
        var $_0 = $40;
        break;
      }
      if (!$1) {
        var $_0 = 0;
        break;
      }
      HEAP32[$r_frame >> 2] = $frame_0;
      var $_0 = 0;
    } else {
      var $_0 = 45;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_octet_string_from_mpi["X"] = 1;
function _gcry_err_code663($err) {
  return _gpg_err_code693($err);
}
function _release_mpi_array($array) {
  var $1 = HEAP32[$array >> 2];
  if (($1 | 0) == 0) {
    return;
  } else {
    var $_01 = $array;
    var $3 = $1;
  }
  while (1) {
    var $3;
    var $_01;
    __gcry_mpi_free($3);
    HEAP32[$_01 >> 2] = 0;
    var $4 = $_01 + 4 | 0;
    var $5 = HEAP32[$4 >> 2];
    if (($5 | 0) == 0) {
      break;
    } else {
      var $_01 = $4;
      var $3 = $5;
    }
  }
  return;
}
function _gcry_error664($code) {
  return _gcry_err_make694($code);
}
function __gcry_pk_decrypt($r_plain, $s_data, $s_skey) {
  var $1$s2;
  var $module_key$s2;
  var $module_enc$s2;
  var $ctx$s2;
  var $unpadlen$s2;
  var $unpad$s2;
  var $plain$s2;
  var $data$s2;
  var $skey$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 76 | 0;
  var $skey = __stackBase__, $skey$s2 = $skey >> 2;
  var $data = __stackBase__ + 4, $data$s2 = $data >> 2;
  var $plain = __stackBase__ + 8, $plain$s2 = $plain >> 2;
  var $unpad = __stackBase__ + 12, $unpad$s2 = $unpad >> 2;
  var $unpadlen = __stackBase__ + 16, $unpadlen$s2 = $unpadlen >> 2;
  var $modern = __stackBase__ + 20;
  var $flags = __stackBase__ + 24;
  var $ctx = __stackBase__ + 28, $ctx$s2 = $ctx >> 2;
  var $module_enc = __stackBase__ + 68, $module_enc$s2 = $module_enc >> 2;
  var $module_key = __stackBase__ + 72, $module_key$s2 = $module_key >> 2;
  HEAP32[$skey$s2] = 0;
  HEAP32[$data$s2] = 0;
  HEAP32[$plain$s2] = 0;
  HEAP32[$unpad$s2] = 0;
  HEAP32[$unpadlen$s2] = 0;
  HEAP32[$module_enc$s2] = 0;
  HEAP32[$module_key$s2] = 0;
  HEAP32[$r_plain >> 2] = 0;
  var $1$s2 = ($ctx + 20 | 0) >> 2;
  HEAP32[$1$s2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $6 = _sexp_to_key($s_skey, 1, 0, $skey, $module_key);
  do {
    if (($6 | 0) == 0) {
      _init_encoding_ctx($ctx, 1, __gcry_pk_get_nbits($s_skey));
      var $10 = _sexp_to_enc($s_data, $data, $module_enc, $modern, $flags, $ctx);
      if (($10 | 0) != 0) {
        var $rc_0 = $10;
        break;
      }
      var $15 = HEAP32[HEAP32[$module_key$s2] + 24 >> 2];
      if (($15 | 0) != (HEAP32[HEAP32[$module_enc$s2] + 24 >> 2] | 0)) {
        var $rc_0 = 70;
        break;
      }
      var $24 = _pubkey_decrypt($15, $plain, HEAP32[$data$s2], HEAP32[$skey$s2], HEAP32[$flags >> 2]);
      if (($24 | 0) != 0) {
        var $rc_0 = $24;
        break;
      }
      var $28 = HEAP32[$ctx$s2 + 2];
      if (($28 | 0) == 2) {
        var $48 = _oaep_decode($unpad, $unpadlen, __gcry_pk_get_nbits($s_skey), HEAP32[$ctx$s2 + 4], HEAP32[$plain$s2], HEAP32[$1$s2], HEAP32[$ctx$s2 + 6]);
        __gcry_mpi_free(HEAP32[$plain$s2]);
        HEAP32[$plain$s2] = 0;
        if (($48 | 0) != 0) {
          var $rc_0 = $48;
          break;
        }
        var $53 = HEAP32[$unpad$s2];
        var $rc_0 = _gcry_err_code663(__gcry_sexp_build($r_plain, 0, 468280, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[$unpadlen$s2], HEAP32[tempInt + 4 >> 2] = $53, tempInt)));
        break;
      } else if (($28 | 0) == 1) {
        var $32 = _pkcs1_decode_for_encryption($unpad, $unpadlen, __gcry_pk_get_nbits($s_skey), HEAP32[$plain$s2]);
        __gcry_mpi_free(HEAP32[$plain$s2]);
        HEAP32[$plain$s2] = 0;
        if (($32 | 0) != 0) {
          var $rc_0 = $32;
          break;
        }
        var $37 = HEAP32[$unpad$s2];
        var $rc_0 = _gcry_err_code663(__gcry_sexp_build($r_plain, 0, 468280, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[$unpadlen$s2], HEAP32[tempInt + 4 >> 2] = $37, tempInt)));
        break;
      } else {
        var $rc_0 = _gcry_err_code663(__gcry_sexp_build($r_plain, 0, (HEAP32[$modern >> 2] | 0) != 0 ? 466632 : 464872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[$plain$s2], tempInt)));
        break;
      }
    } else {
      var $rc_0 = $6;
    }
  } while (0);
  var $rc_0;
  __gcry_free(HEAP32[$unpad$s2]);
  var $65 = HEAP32[$skey$s2];
  if (($65 | 0) != 0) {
    _release_mpi_array($65);
    __gcry_free(HEAP32[$skey$s2]);
  }
  __gcry_mpi_free(HEAP32[$plain$s2]);
  var $72 = HEAP32[$data$s2];
  if (($72 | 0) != 0) {
    _release_mpi_array($72);
    __gcry_free(HEAP32[$data$s2]);
  }
  do {
    if ((HEAP32[$module_key$s2] | 0) == 0) {
      if ((HEAP32[$module_enc$s2] | 0) != 0) {
        break;
      }
      var $95 = HEAP32[$1$s2];
      __gcry_free($95);
      var $96 = _gcry_error664($rc_0);
      STACKTOP = __stackBase__;
      return $96;
    }
  } while (0);
  __gcry_ath_mutex_lock(439944);
  var $85 = HEAP32[$module_key$s2];
  if (($85 | 0) != 0) {
    __gcry_module_release($85);
  }
  var $89 = HEAP32[$module_enc$s2];
  if (($89 | 0) != 0) {
    __gcry_module_release($89);
  }
  __gcry_ath_mutex_unlock(439944);
  var $95 = HEAP32[$1$s2];
  __gcry_free($95);
  var $96 = _gcry_error664($rc_0);
  STACKTOP = __stackBase__;
  return $96;
}
__gcry_pk_decrypt["X"] = 1;
function _sexp_to_enc($sexp, $retarray, $retalgo, $ret_modern, $flags, $ctx) {
  var $n$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  HEAP32[$ret_modern >> 2] = 0;
  var $1 = __gcry_sexp_find_token($sexp, 472132, 0);
  L1978 : do {
    if (($1 | 0) == 0) {
      var $array_0 = 0;
      var $parsed_flags_3 = 0;
      var $name_1 = 0;
      var $module_0 = 0;
      var $err_3 = 65;
      var $list_1 = 0;
      var $l2_1 = 0;
    } else {
      var $4 = __gcry_sexp_nth($1, 1);
      if (($4 | 0) == 0) {
        var $array_0 = 0;
        var $parsed_flags_3 = 0;
        var $name_1 = 0;
        var $module_0 = 0;
        var $err_3 = 68;
        var $list_1 = $1;
        var $l2_1 = 0;
        break;
      }
      var $7 = __gcry_sexp_nth_string($4, 0);
      if (($7 | 0) == 0) {
        var $array_0 = 0;
        var $parsed_flags_3 = 0;
        var $name_1 = 0;
        var $module_0 = 0;
        var $err_3 = 65;
        var $list_1 = $1;
        var $l2_1 = $4;
        break;
      }
      if ((_strcmp($7, 474736) | 0) == 0) {
        HEAP32[$ret_modern >> 2] = 1;
        var $14 = $ctx + 8 | 0;
        var $15 = $ctx + 8 | 0;
        var $16 = $ctx + 8 | 0;
        var $17 = $ctx + 8 | 0;
        var $i_0_in_ph = __gcry_sexp_length($4);
        var $parsed_flags_0_ph = 0;
        L1984 : while (1) {
          var $parsed_flags_0_ph;
          var $i_0_in_ph;
          var $i_0_in = $i_0_in_ph;
          L1986 : while (1) {
            var $i_0_in;
            var $i_0 = $i_0_in - 1 | 0;
            if (($i_0 | 0) <= 0) {
              break L1984;
            }
            var $20 = __gcry_sexp_nth_data($4, $i_0, $n);
            if (($20 | 0) == 0) {
              var $i_0_in = $i_0;
              continue;
            }
            var $23 = HEAP32[$n$s2];
            if (($23 | 0) == 3) {
              do {
                if ((_memcmp($20, 471856, 3) | 0) == 0) {
                  if ((HEAP32[$14 >> 2] | 0) != 4) {
                    break;
                  }
                  HEAP32[$14 >> 2] = 0;
                  var $i_0_in = $i_0;
                  continue L1986;
                }
              } while (0);
              var $33 = HEAP32[$n$s2];
            } else {
              var $33 = $23;
            }
            var $33;
            do {
              if (($33 | 0) == 5) {
                if ((_memcmp($20, 471756, 5) | 0) != 0) {
                  break;
                }
                if ((HEAP32[$15 >> 2] | 0) != 4) {
                  break;
                }
                HEAP32[$15 >> 2] = 1;
                var $i_0_in = $i_0;
                continue L1986;
              }
            } while (0);
            var $43 = HEAP32[$n$s2];
            if (($43 | 0) != 4) {
              var $52 = $43;
              break;
            }
            if ((_memcmp($20, 471572, 4) | 0) != 0) {
              label = 1515;
              break;
            }
            if ((HEAP32[$16 >> 2] | 0) != 4) {
              label = 1515;
              break;
            }
            HEAP32[$16 >> 2] = 2;
            var $i_0_in = $i_0;
          }
          if (label == 1515) {
            label = 0;
            var $52 = HEAP32[$n$s2];
          }
          var $52;
          do {
            if (($52 | 0) == 3) {
              if ((_memcmp($20, 471456, 3) | 0) != 0) {
                break;
              }
              if ((HEAP32[$17 >> 2] | 0) == 4) {
                var $array_0 = 0;
                var $parsed_flags_3 = $parsed_flags_0_ph;
                var $name_1 = $7;
                var $module_0 = 0;
                var $err_3 = 70;
                var $list_1 = $1;
                var $l2_1 = $4;
                break L1978;
              }
            }
          } while (0);
          if ((HEAP32[$n$s2] | 0) != 11) {
            var $array_0 = 0;
            var $parsed_flags_3 = $parsed_flags_0_ph;
            var $name_1 = $7;
            var $module_0 = 0;
            var $err_3 = 72;
            var $list_1 = $1;
            var $l2_1 = $4;
            break L1978;
          }
          if ((_memcmp($20, 471328, 11) | 0) == 0) {
            var $i_0_in_ph = $i_0;
            var $parsed_flags_0_ph = $parsed_flags_0_ph | 1;
          } else {
            var $array_0 = 0;
            var $parsed_flags_3 = $parsed_flags_0_ph;
            var $name_1 = $7;
            var $module_0 = 0;
            var $err_3 = 72;
            var $list_1 = $1;
            var $l2_1 = $4;
            break L1978;
          }
        }
        __gcry_sexp_release($4);
        L2014 : do {
          if ((HEAP32[$ctx + 8 >> 2] | 0) == 2) {
            var $72 = __gcry_sexp_find_token($1, 471244, 0);
            do {
              if (($72 | 0) != 0) {
                var $75 = __gcry_sexp_nth_data($72, 1, $n);
                if (($75 | 0) == 0) {
                  __gcry_sexp_release($72);
                  var $array_0 = 0;
                  var $parsed_flags_3 = $parsed_flags_0_ph;
                  var $name_1 = $7;
                  var $module_0 = 0;
                  var $err_3 = 68;
                  var $list_1 = $1;
                  var $l2_1 = $72;
                  break L1978;
                } else {
                  var $79 = _get_hash_algo($75, HEAP32[$n$s2]);
                  HEAP32[$ctx + 16 >> 2] = $79;
                  var $81 = ($79 | 0) == 0;
                  __gcry_sexp_release($72);
                  if ($81) {
                    var $array_0 = 0;
                    var $parsed_flags_3 = $parsed_flags_0_ph;
                    var $name_1 = $7;
                    var $module_0 = 0;
                    var $err_3 = $81 ? 5 : 0;
                    var $list_1 = $1;
                    var $l2_1 = $72;
                    break L1978;
                  } else {
                    break;
                  }
                }
              }
            } while (0);
            var $83 = __gcry_sexp_find_token($1, 471076, 0);
            if (($83 | 0) == 0) {
              var $i_1 = 2;
              break;
            }
            var $86 = __gcry_sexp_nth_data($83, 1, $n);
            if (($86 | 0) == 0) {
              __gcry_sexp_release($83);
              var $array_0 = 0;
              var $parsed_flags_3 = $parsed_flags_0_ph;
              var $name_1 = $7;
              var $module_0 = 0;
              var $err_3 = 68;
              var $list_1 = $1;
              var $l2_1 = $83;
              break L1978;
            }
            var $89 = HEAP32[$n$s2];
            do {
              if (($89 | 0) != 0) {
                var $92 = __gcry_malloc($89);
                HEAP32[$ctx + 20 >> 2] = $92;
                if (($92 | 0) == 0) {
                  var $100 = _gpg_err_code_from_syserror();
                  __gcry_sexp_release($83);
                  if (($100 | 0) == 0) {
                    var $i_1 = 2;
                    break L2014;
                  } else {
                    var $array_0 = 0;
                    var $parsed_flags_3 = $parsed_flags_0_ph;
                    var $name_1 = $7;
                    var $module_0 = 0;
                    var $err_3 = $100;
                    var $list_1 = $1;
                    var $l2_1 = $83;
                    break L1978;
                  }
                } else {
                  _memcpy($92, $86, HEAP32[$n$s2]);
                  HEAP32[$ctx + 24 >> 2] = HEAP32[$n$s2];
                  break;
                }
              }
            } while (0);
            __gcry_sexp_release($83);
            var $i_1 = 2;
            break;
          } else {
            var $i_1 = 2;
          }
        } while (0);
        L2032 : while (1) {
          var $i_1;
          var $102 = __gcry_sexp_nth($1, $i_1);
          var $103 = ($102 | 0) != 0;
          if (!$103) {
            var $array_0 = 0;
            var $parsed_flags_3 = $parsed_flags_0_ph;
            var $name_1 = $7;
            var $module_0 = 0;
            var $err_3 = 68;
            var $list_1 = $1;
            var $l2_1 = 0;
            break L1978;
          }
          var $105 = __gcry_sexp_nth_data($102, 0, $n);
          var $106 = HEAP32[$n$s2];
          do {
            if (($106 | 0) == 9) {
              if ((_memcmp($105, 471244, 9) | 0) == 0) {
                break;
              }
              var $112 = HEAP32[$n$s2];
              label = 1538;
              break;
            } else {
              var $112 = $106;
              label = 1538;
            }
          } while (0);
          do {
            if (label == 1538) {
              label = 0;
              var $112;
              if (($112 | 0) == 5) {
                if ((_memcmp($105, 471076, 5) | 0) == 0) {
                  break;
                }
              }
              if ((HEAP32[$n$s2] | 0) != 15) {
                break L2032;
              }
              if ((_memcmp($105, 470928, 15) | 0) != 0) {
                break L2032;
              }
            }
          } while (0);
          __gcry_sexp_release($102);
          var $i_1 = $i_1 + 1 | 0;
        }
        if (!$103) {
          var $array_0 = 0;
          var $parsed_flags_3 = $parsed_flags_0_ph;
          var $name_1 = $7;
          var $module_0 = 0;
          var $err_3 = 68;
          var $list_1 = $1;
          var $l2_1 = 0;
          break;
        }
        __gcry_free($7);
        var $127 = __gcry_sexp_nth_string($102, 0);
        if (($127 | 0) == 0) {
          var $array_0 = 0;
          var $parsed_flags_3 = $parsed_flags_0_ph;
          var $name_1 = 0;
          var $module_0 = 0;
          var $err_3 = 65;
          var $list_1 = $1;
          var $l2_1 = $102;
          break;
        }
        __gcry_sexp_release($1);
        var $parsed_flags_2 = $parsed_flags_0_ph;
        var $name_0 = $127;
        var $list_0 = $102;
        var $l2_0 = 0;
      } else {
        var $parsed_flags_2 = 0;
        var $name_0 = $7;
        var $list_0 = $1;
        var $l2_0 = $4;
      }
      var $l2_0;
      var $list_0;
      var $name_0;
      var $parsed_flags_2;
      __gcry_ath_mutex_lock(439944);
      var $132 = _gcry_pk_lookup_name($name_0);
      __gcry_ath_mutex_unlock(439944);
      if (($132 | 0) == 0) {
        var $array_0 = 0;
        var $parsed_flags_3 = $parsed_flags_2;
        var $name_1 = $name_0;
        var $module_0 = 0;
        var $err_3 = 4;
        var $list_1 = $list_0;
        var $l2_1 = $l2_0;
        break;
      }
      var $140 = HEAP32[HEAP32[$132 + 8 >> 2] + 16 >> 2];
      var $143 = __gcry_calloc(_strlen($140) + 1 | 0, 4);
      var $144 = $143;
      if (($143 | 0) == 0) {
        var $array_0 = $144;
        var $parsed_flags_3 = $parsed_flags_2;
        var $name_1 = $name_0;
        var $module_0 = $132;
        var $err_3 = _gpg_err_code_from_syserror();
        var $list_1 = $list_0;
        var $l2_1 = $l2_0;
        break;
      } else {
        var $array_0 = $144;
        var $parsed_flags_3 = $parsed_flags_2;
        var $name_1 = $name_0;
        var $module_0 = $132;
        var $err_3 = _sexp_elements_extract($list_0, $140, $144, 0);
        var $list_1 = $list_0;
        var $l2_1 = $l2_0;
        break;
      }
    }
  } while (0);
  var $l2_1;
  var $list_1;
  var $err_3;
  var $module_0;
  var $name_1;
  var $parsed_flags_3;
  var $array_0;
  __gcry_sexp_release($list_1);
  __gcry_sexp_release($l2_1);
  __gcry_free($name_1);
  if (($err_3 | 0) == 0) {
    HEAP32[$retarray >> 2] = $array_0;
    HEAP32[$retalgo >> 2] = $module_0;
    HEAP32[$flags >> 2] = $parsed_flags_3;
    STACKTOP = __stackBase__;
    return $err_3;
  } else {
    __gcry_ath_mutex_lock(439944);
    __gcry_module_release($module_0);
    __gcry_ath_mutex_unlock(439944);
    __gcry_free($array_0);
    var $155 = $ctx + 20 | 0;
    __gcry_free(HEAP32[$155 >> 2]);
    HEAP32[$155 >> 2] = 0;
    STACKTOP = __stackBase__;
    return $err_3;
  }
}
_sexp_to_enc["X"] = 1;
function _pubkey_decrypt($algorithm, $result, $data, $skey, $flags) {
  var __stackBase__ = STACKTOP;
  HEAP32[$result >> 2] = 0;
  L2060 : do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(472360, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
      L2063 : do {
        if ((_pubkey_get_nskey($algorithm) | 0) > 0) {
          var $i_03 = 0;
          while (1) {
            var $i_03;
            __gcry_log_mpidump(473384, HEAP32[$skey + ($i_03 << 2) >> 2]);
            var $13 = $i_03 + 1 | 0;
            if (($13 | 0) < (_pubkey_get_nskey($algorithm) | 0)) {
              var $i_03 = $13;
            } else {
              break L2063;
            }
          }
        }
      } while (0);
      if ((_pubkey_get_nenc($algorithm) | 0) > 0) {
        var $i_12 = 0;
      } else {
        break;
      }
      while (1) {
        var $i_12;
        __gcry_log_mpidump(473164, HEAP32[$data + ($i_12 << 2) >> 2]);
        var $18 = $i_12 + 1 | 0;
        if (($18 | 0) < (_pubkey_get_nenc($algorithm) | 0)) {
          var $i_12 = $18;
        } else {
          break L2060;
        }
      }
    }
  } while (0);
  __gcry_ath_mutex_lock(439944);
  var $23 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($23 | 0) == 0) {
    __gcry_ath_mutex_unlock(439944);
    var $rc_01 = 4;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  var $32 = FUNCTION_TABLE[HEAP32[HEAP32[$23 + 8 >> 2] + 44 >> 2]]($algorithm, $result, $data, $skey, $flags);
  __gcry_module_release($23);
  __gcry_ath_mutex_unlock(439944);
  if (($32 | 0) != 0) {
    var $rc_01 = $32;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    var $rc_01 = 0;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    var $rc_01 = $32;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  __gcry_log_mpidump(472196, HEAP32[$result >> 2]);
  var $rc_01 = $32;
  var $rc_01;
  STACKTOP = __stackBase__;
  return $rc_01;
}
_pubkey_decrypt["X"] = 1;
function _pkcs1_decode_for_encryption($r_result, $r_resultlen, $nbits, $value) {
  var $n$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  var $2 = ($nbits + 7 | 0) >>> 3;
  HEAP32[$r_result >> 2] = 0;
  var $3 = __gcry_malloc_secure($2);
  do {
    if (($3 | 0) == 0) {
      var $_0 = _gpg_err_code_from_syserror();
    } else {
      var $8 = __gcry_mpi_print(5, $3, $2, $n, $value);
      if (($8 | 0) != 0) {
        __gcry_free($3);
        var $_0 = _gcry_err_code663($8);
        break;
      }
      var $13 = HEAP32[$n$s2];
      if ($13 >>> 0 < 4) {
        __gcry_free($3);
        var $_0 = 155;
        break;
      }
      HEAP32[$n$s2] = 0;
      if (HEAP8[$3] << 24 >> 24 == 0) {
        HEAP32[$n$s2] = 1;
      }
      var $21 = HEAP32[$n$s2];
      HEAP32[$n$s2] = $21 + 1 | 0;
      if (HEAP8[$3 + $21 | 0] << 24 >> 24 != 2) {
        __gcry_free($3);
        var $_0 = 155;
        break;
      }
      while (1) {
        var $27 = HEAP32[$n$s2];
        if ($27 >>> 0 >= $13 >>> 0) {
          break;
        }
        if (HEAP8[$3 + $27 | 0] << 24 >> 24 == 0) {
          break;
        }
        HEAP32[$n$s2] = $27 + 1 | 0;
      }
      var $36 = HEAP32[$n$s2] + 1 | 0;
      if ($36 >>> 0 >= $13 >>> 0) {
        __gcry_free($3);
        var $_0 = 155;
        break;
      }
      HEAP32[$n$s2] = $36;
      _memmove($3, $3 + $36 | 0, $13 - $36 | 0, 1, 0);
      HEAP32[$r_result >> 2] = $3;
      var $43 = $13 - HEAP32[$n$s2] | 0;
      HEAP32[$r_resultlen >> 2] = $43;
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $_0 = 0;
        break;
      }
      __gcry_log_printhex(472520, HEAP32[$r_result >> 2], $43);
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_pkcs1_decode_for_encryption["X"] = 1;
function _oaep_decode($r_result, $r_resultlen, $nbits, $algo, $value, $label, $labellen) {
  var $frame$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $frame = __stackBase__, $frame$s2 = $frame >> 2;
  HEAP32[$frame$s2] = 0;
  var $2 = ($nbits + 7 | 0) >>> 3;
  HEAP32[$r_result >> 2] = 0;
  var $or_cond = ($label | 0) == 0 | ($labellen | 0) == 0;
  var $5 = __gcry_md_get_algo_dlen($algo);
  var $6 = __gcry_malloc($5);
  if (($6 | 0) == 0) {
    var $_0 = _gpg_err_code_from_syserror();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_md_hash_buffer($algo, $6, $or_cond ? 472864 : $label, $or_cond ? 0 : $labellen);
  if ((_octet_string_from_mpi($frame, 0, $value, $2) | 0) != 0) {
    __gcry_free($6);
    var $_0 = 155;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ($2 >>> 0 < (($5 << 1) + 2 | 0) >>> 0) {
    __gcry_free(HEAP32[$frame$s2]);
    __gcry_free($6);
    var $_0 = 155;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $21 = $2 - 1 | 0;
  var $22 = __gcry_malloc_secure($21);
  if (($22 | 0) == 0) {
    var $25 = _gpg_err_code_from_syserror();
    __gcry_free(HEAP32[$frame$s2]);
    __gcry_free($6);
    var $_0 = $25;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $28 = $22 + $5 | 0;
  var $29 = HEAP32[$frame$s2];
  var $_sum = $5 + 1 | 0;
  var $31 = $21 - $5 | 0;
  var $_ = (_mgf1($22, $5, $29 + $_sum | 0, $31, $algo) | 0) != 0 & 1;
  L2126 : do {
    if (($5 | 0) != 0) {
      var $n_010 = 0;
      while (1) {
        var $n_010;
        var $_sum7 = $n_010 + 1 | 0;
        var $36 = $22 + $n_010 | 0;
        HEAP8[$36] = HEAP8[$36] ^ HEAP8[$29 + $_sum7 | 0];
        if (($_sum7 | 0) == ($5 | 0)) {
          break L2126;
        } else {
          var $n_010 = $_sum7;
        }
      }
    }
  } while (0);
  var $__ = (_mgf1($28, $31, $22, $5, $algo) | 0) == 0 ? $_ : 1;
  L2130 : do {
    if (($21 | 0) != ($5 | 0)) {
      var $n_19 = 0;
      while (1) {
        var $n_19;
        var $44 = $22 + $n_19 + $5 | 0;
        HEAP8[$44] = HEAP8[$44] ^ HEAP8[$29 + $n_19 + $_sum | 0];
        var $47 = $n_19 + 1 | 0;
        if ($47 >>> 0 < $31 >>> 0) {
          var $n_19 = $47;
        } else {
          break L2130;
        }
      }
    }
  } while (0);
  var $49 = _memcmp($6, $28, $5);
  var $n_2 = $5;
  while (1) {
    var $n_2;
    if ($n_2 >>> 0 >= $31 >>> 0) {
      break;
    }
    if (HEAP8[$22 + $n_2 + $5 | 0] << 24 >> 24 == 1) {
      break;
    } else {
      var $n_2 = $n_2 + 1 | 0;
    }
  }
  var $60 = HEAP8[HEAP32[$frame$s2]] << 24 >> 24 == 0;
  __gcry_free($6);
  __gcry_free(HEAP32[$frame$s2]);
  if (!($60 & (($49 | $__ | 0) == 0 & ($n_2 | 0) != ($31 | 0)))) {
    __gcry_free($22);
    var $_0 = 155;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $68 = $n_2 + 1 | 0;
  var $70 = $31 - $68 | 0;
  _memmove($22, $22 + $68 + $5 | 0, $70, 1, 0);
  HEAP32[$r_result >> 2] = $22;
  HEAP32[$r_resultlen >> 2] = $70;
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_log_printhex(472704, HEAP32[$r_result >> 2], $70);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_oaep_decode["X"] = 1;
function _pubkey_sign($algorithm, $resarr, $data, $skey) {
  var __stackBase__ = STACKTOP;
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(473424, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
      L2150 : do {
        if ((_pubkey_get_nskey($algorithm) | 0) > 0) {
          var $i_02 = 0;
          while (1) {
            var $i_02;
            __gcry_log_mpidump(473384, HEAP32[$skey + ($i_02 << 2) >> 2]);
            var $11 = $i_02 + 1 | 0;
            if (($11 | 0) < (_pubkey_get_nskey($algorithm) | 0)) {
              var $i_02 = $11;
            } else {
              break L2150;
            }
          }
        }
      } while (0);
      __gcry_log_mpidump(473164, $data);
    }
  } while (0);
  __gcry_ath_mutex_lock(439944);
  var $17 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($17 | 0) == 0) {
    __gcry_ath_mutex_unlock(439944);
    var $rc_01 = 4;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  var $26 = FUNCTION_TABLE[HEAP32[HEAP32[$17 + 8 >> 2] + 48 >> 2]]($algorithm, $resarr, $data, $skey);
  __gcry_module_release($17);
  __gcry_ath_mutex_unlock(439944);
  if (($26 | 0) != 0) {
    var $rc_01 = $26;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    var $rc_01 = 0;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((__gcry_fips_mode() | 0) != 0) {
    var $rc_01 = $26;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  if ((_pubkey_get_nsig($algorithm) | 0) > 0) {
    var $i_13 = 0;
  } else {
    var $rc_01 = $26;
    var $rc_01;
    STACKTOP = __stackBase__;
    return $rc_01;
  }
  while (1) {
    var $i_13;
    __gcry_log_mpidump(473012, HEAP32[$resarr + ($i_13 << 2) >> 2]);
    var $39 = $i_13 + 1 | 0;
    if (($39 | 0) < (_pubkey_get_nsig($algorithm) | 0)) {
      var $i_13 = $39;
    } else {
      var $rc_01 = $26;
      break;
    }
  }
  var $rc_01;
  STACKTOP = __stackBase__;
  return $rc_01;
}
_pubkey_sign["X"] = 1;
function __gcry_pk_verify($s_sig, $s_hash, $s_pkey) {
  var $sig$s2;
  var $hash$s2;
  var $pkey$s2;
  var $module_sig$s2;
  var $module_key$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 60 | 0;
  var $module_key = __stackBase__, $module_key$s2 = $module_key >> 2;
  var $module_sig = __stackBase__ + 4, $module_sig$s2 = $module_sig >> 2;
  var $pkey = __stackBase__ + 8, $pkey$s2 = $pkey >> 2;
  var $hash = __stackBase__ + 12, $hash$s2 = $hash >> 2;
  var $sig = __stackBase__ + 16, $sig$s2 = $sig >> 2;
  var $ctx = __stackBase__ + 20;
  HEAP32[$module_key$s2] = 0;
  HEAP32[$module_sig$s2] = 0;
  HEAP32[$pkey$s2] = 0;
  HEAP32[$hash$s2] = 0;
  HEAP32[$sig$s2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $5 = _sexp_to_key($s_pkey, 0, 0, $pkey, $module_key);
  do {
    if (($5 | 0) == 0) {
      var $8 = _sexp_to_sig($s_sig, $sig, $module_sig);
      if (($8 | 0) != 0) {
        var $rc_0 = $8;
        break;
      }
      if ((HEAP32[HEAP32[$module_key$s2] + 24 >> 2] | 0) != (HEAP32[HEAP32[$module_sig$s2] + 24 >> 2] | 0)) {
        var $rc_0 = 70;
        break;
      }
      _init_encoding_ctx($ctx, 3, __gcry_pk_get_nbits($s_pkey));
      var $20 = _sexp_data_to_mpi($s_hash, $hash, $ctx);
      if (($20 | 0) != 0) {
        var $rc_0 = $20;
        break;
      }
      var $rc_0 = _pubkey_verify(HEAP32[HEAP32[$module_key$s2] + 24 >> 2], HEAP32[$hash$s2], HEAP32[$sig$s2], HEAP32[$pkey$s2], HEAP32[$ctx + 32 >> 2], $ctx);
    } else {
      var $rc_0 = $5;
    }
  } while (0);
  var $rc_0;
  var $34 = HEAP32[$pkey$s2];
  if (($34 | 0) != 0) {
    _release_mpi_array($34);
    __gcry_free(HEAP32[$pkey$s2]);
  }
  var $40 = HEAP32[$sig$s2];
  if (($40 | 0) != 0) {
    _release_mpi_array($40);
    __gcry_free(HEAP32[$sig$s2]);
  }
  var $46 = HEAP32[$hash$s2];
  if (($46 | 0) != 0) {
    __gcry_mpi_free($46);
  }
  do {
    if ((HEAP32[$module_key$s2] | 0) == 0) {
      if ((HEAP32[$module_sig$s2] | 0) != 0) {
        break;
      }
      var $67 = _gcry_error664($rc_0);
      STACKTOP = __stackBase__;
      return $67;
    }
  } while (0);
  __gcry_ath_mutex_lock(439944);
  var $57 = HEAP32[$module_key$s2];
  if (($57 | 0) != 0) {
    __gcry_module_release($57);
  }
  var $61 = HEAP32[$module_sig$s2];
  if (($61 | 0) != 0) {
    __gcry_module_release($61);
  }
  __gcry_ath_mutex_unlock(439944);
  var $67 = _gcry_error664($rc_0);
  STACKTOP = __stackBase__;
  return $67;
}
__gcry_pk_verify["X"] = 1;
function _sexp_to_sig($sexp, $retarray, $retalgo) {
  var label = 0;
  var $1 = __gcry_sexp_find_token($sexp, 475012, 0);
  if (($1 | 0) == 0) {
    var $_0 = 65;
    var $_0;
    return $_0;
  }
  var $4 = __gcry_sexp_nth($1, 1);
  if (($4 | 0) == 0) {
    __gcry_sexp_release($1);
    var $_0 = 68;
    var $_0;
    return $_0;
  }
  var $8 = __gcry_sexp_nth_string($4, 0);
  if (($8 | 0) == 0) {
    __gcry_sexp_release($1);
    __gcry_sexp_release($4);
    var $_0 = 65;
    var $_0;
    return $_0;
  }
  do {
    if ((_strcmp($8, 474736) | 0) == 0) {
      __gcry_free($8);
      __gcry_sexp_release($4);
      var $15 = __gcry_sexp_nth($1, 2);
      if (($15 | 0) != 0) {
        var $name_0 = __gcry_sexp_nth_string($15, 0);
        var $l2_0 = $15;
        break;
      }
      __gcry_sexp_release($1);
      var $_0 = 65;
      var $_0;
      return $_0;
    } else {
      var $name_0 = $8;
      var $l2_0 = $4;
    }
  } while (0);
  var $l2_0;
  var $name_0;
  __gcry_ath_mutex_lock(439944);
  var $22 = _gcry_pk_lookup_name($name_0);
  __gcry_ath_mutex_unlock(439944);
  __gcry_free($name_0);
  if (($22 | 0) == 0) {
    __gcry_sexp_release($l2_0);
    __gcry_sexp_release($1);
    var $_0 = 4;
    var $_0;
    return $_0;
  }
  var $31 = HEAP32[HEAP32[$22 + 8 >> 2] + 20 >> 2];
  var $34 = __gcry_calloc(_strlen($31) + 1 | 0, 4);
  var $35 = $34;
  do {
    if (($34 | 0) == 0) {
      var $38 = _gpg_err_code_from_syserror();
      if (($38 | 0) == 0) {
        label = 1674;
        break;
      } else {
        var $err_1 = $38;
        break;
      }
    } else {
      label = 1674;
    }
  } while (0);
  if (label == 1674) {
    var $err_1 = _sexp_elements_extract($1, $31, $35, 0);
  }
  var $err_1;
  __gcry_sexp_release($l2_0);
  __gcry_sexp_release($1);
  if (($err_1 | 0) == 0) {
    HEAP32[$retarray >> 2] = $35;
    HEAP32[$retalgo >> 2] = $22;
    var $_0 = 0;
    var $_0;
    return $_0;
  } else {
    __gcry_ath_mutex_lock(439944);
    __gcry_module_release($22);
    __gcry_ath_mutex_unlock(439944);
    __gcry_free($34);
    var $_0 = $err_1;
    var $_0;
    return $_0;
  }
}
_sexp_to_sig["X"] = 1;
function _pubkey_verify($algorithm, $hash, $data, $pkey, $cmp, $opaquev) {
  var __stackBase__ = STACKTOP;
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      __gcry_log_debug(475968, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $algorithm, tempInt));
      L2240 : do {
        if ((_pubkey_get_npkey($algorithm) | 0) > 0) {
          var $i_02 = 0;
          while (1) {
            var $i_02;
            __gcry_log_mpidump(475728, HEAP32[$pkey + ($i_02 << 2) >> 2]);
            var $13 = $i_02 + 1 | 0;
            if (($13 | 0) < (_pubkey_get_npkey($algorithm) | 0)) {
              var $i_02 = $13;
            } else {
              break L2240;
            }
          }
        }
      } while (0);
      L2244 : do {
        if ((_pubkey_get_nsig($algorithm) | 0) > 0) {
          var $i_11 = 0;
          while (1) {
            var $i_11;
            __gcry_log_mpidump(475436, HEAP32[$data + ($i_11 << 2) >> 2]);
            var $18 = $i_11 + 1 | 0;
            if (($18 | 0) < (_pubkey_get_nsig($algorithm) | 0)) {
              var $i_11 = $18;
            } else {
              break L2244;
            }
          }
        }
      } while (0);
      __gcry_log_mpidump(475152, $hash);
    }
  } while (0);
  __gcry_ath_mutex_lock(439944);
  var $24 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($24 | 0) == 0) {
    var $rc_0 = 4;
    var $rc_0;
    var $34 = __gcry_ath_mutex_unlock(439944);
    STACKTOP = __stackBase__;
    return $rc_0;
  }
  var $32 = FUNCTION_TABLE[HEAP32[HEAP32[$24 + 8 >> 2] + 52 >> 2]]($algorithm, $hash, $data, $pkey, $cmp, $opaquev);
  __gcry_module_release($24);
  var $rc_0 = $32;
  var $rc_0;
  var $34 = __gcry_ath_mutex_unlock(439944);
  STACKTOP = __stackBase__;
  return $rc_0;
}
function __gcry_pk_testkey($s_key) {
  var $key$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $module = __stackBase__;
  var $key = __stackBase__ + 4, $key$s2 = $key >> 2;
  HEAP32[$module >> 2] = 0;
  HEAP32[$key$s2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $5 = _sexp_to_key($s_key, 1, 0, $key, $module);
  if (($5 | 0) != 0) {
    var $rc_0 = $5;
    var $rc_0;
    var $17 = _gcry_error664($rc_0);
    STACKTOP = __stackBase__;
    return $17;
  }
  var $12 = _pubkey_check_secret_key(HEAP32[HEAP32[$module >> 2] + 24 >> 2], HEAP32[$key$s2]);
  _release_mpi_array(HEAP32[$key$s2]);
  __gcry_free(HEAP32[$key$s2]);
  var $rc_0 = $12;
  var $rc_0;
  var $17 = _gcry_error664($rc_0);
  STACKTOP = __stackBase__;
  return $17;
}
function _pubkey_check_secret_key($algorithm, $skey) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $err_0 = 4;
    var $err_0;
    var $17 = __gcry_ath_mutex_unlock(439944);
    return $err_0;
  }
  var $15 = FUNCTION_TABLE[HEAP32[HEAP32[$7 + 8 >> 2] + 36 >> 2]]($algorithm, $skey);
  __gcry_module_release($7);
  var $err_0 = $15;
  var $err_0;
  var $17 = __gcry_ath_mutex_unlock(439944);
  return $err_0;
}
function __gcry_pk_sign($r_sig, $s_hash, $s_skey) {
  var $13$s2;
  var $module$s2;
  var $hash$s2;
  var $skey$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  var $skey = __stackBase__, $skey$s2 = $skey >> 2;
  var $hash = __stackBase__ + 4, $hash$s2 = $hash >> 2;
  var $module = __stackBase__ + 8, $module$s2 = $module >> 2;
  var $ctx = __stackBase__ + 12;
  var $em = __stackBase__ + 52;
  HEAP32[$skey$s2] = 0;
  HEAP32[$hash$s2] = 0;
  HEAP32[$module$s2] = 0;
  HEAP32[$r_sig >> 2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $5 = _sexp_to_key($s_skey, 1, 0, $skey, $module);
  do {
    if (($5 | 0) == 0) {
      var $8 = HEAP32[$module$s2];
      if (($8 | 0) == 0) {
        __gcry_assert_failed(484672, 478540, 3162, 495224);
      }
      var $13$s2 = HEAP32[$8 + 8 >> 2] >> 2;
      var $16 = HEAP32[$13$s2 + 1];
      do {
        if (($16 | 0) == 0) {
          label = 1720;
        } else {
          var $19 = HEAP32[$16 >> 2];
          if (($19 | 0) == 0) {
            label = 1720;
            break;
          }
          if (HEAP8[$19] << 24 >> 24 == 0) {
            label = 1720;
            break;
          } else {
            var $algo_name_0 = $19;
            break;
          }
        }
      } while (0);
      if (label == 1720) {
        var $algo_name_0 = HEAP32[$13$s2];
      }
      var $algo_name_0;
      var $29 = HEAP32[$13$s2 + 5];
      _init_encoding_ctx($ctx, 2, __gcry_pk_get_nbits($s_skey));
      var $31 = _sexp_data_to_mpi($s_hash, $hash, $ctx);
      if (($31 | 0) != 0) {
        var $rc_0 = $31;
        var $result_0 = 0;
        break;
      }
      var $36 = __gcry_calloc(_strlen($29) + 1 | 0, 4);
      var $37 = $36;
      if (($36 | 0) == 0) {
        var $rc_0 = _gpg_err_code_from_syserror();
        var $result_0 = $37;
        break;
      }
      var $47 = _pubkey_sign(HEAP32[HEAP32[$module$s2] + 24 >> 2], $37, HEAP32[$hash$s2], HEAP32[$skey$s2]);
      if (($47 | 0) != 0) {
        var $rc_0 = $47;
        var $result_0 = $37;
        break;
      }
      var $51 = HEAP32[$ctx + 8 >> 2];
      if (($51 | 0) == 3 | ($51 | 0) == 1) {
        var $56 = (HEAP32[$ctx + 4 >> 2] + 7 | 0) >>> 3;
        var $58 = _octet_string_from_mpi($em, 0, HEAP32[$37 >> 2], $56);
        if (($58 | 0) != 0) {
          var $rc_0 = $58;
          var $result_0 = $37;
          break;
        }
        var $61 = HEAP32[$em >> 2];
        var $63 = _gcry_err_code663(__gcry_sexp_build($r_sig, 0, 490100, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $algo_name_0, HEAP32[tempInt + 4 >> 2] = $56, HEAP32[tempInt + 8 >> 2] = $61, tempInt)));
        __gcry_free(HEAP32[$em >> 2]);
        var $rc_0 = $63;
        var $result_0 = $37;
        break;
      }
      var $66 = _strlen($algo_name_0);
      var $67 = _strlen($29);
      var $71 = __gcry_malloc($66 + ($67 * 10 & -1) + 20 | 0);
      if (($71 | 0) == 0) {
        var $rc_0 = _gpg_err_code_from_syserror();
        var $result_0 = $37;
        break;
      }
      var $77 = _stpcpy(_stpcpy($71, 488508), $algo_name_0);
      L2296 : do {
        if (HEAP8[$29] << 24 >> 24 == 0) {
          var $p_0_lcssa = $77;
        } else {
          var $i_02 = 0;
          var $p_03 = $77;
          var $80 = $29;
          while (1) {
            var $80;
            var $p_03;
            var $i_02;
            HEAP8[$p_03] = 40;
            HEAP8[$p_03 + 1 | 0] = HEAP8[$80];
            var $84 = _stpcpy($p_03 + 2 | 0, 487552);
            var $85 = $i_02 + 1 | 0;
            var $86 = $29 + $85 | 0;
            if (HEAP8[$86] << 24 >> 24 == 0) {
              var $p_0_lcssa = $84;
              break L2296;
            } else {
              var $i_02 = $85;
              var $p_03 = $84;
              var $80 = $86;
            }
          }
        }
      } while (0);
      var $p_0_lcssa;
      HEAP8[$p_0_lcssa] = HEAP8[469976];
      HEAP8[$p_0_lcssa + 1] = HEAP8[469977];
      HEAP8[$p_0_lcssa + 2] = HEAP8[469978];
      var $90 = _malloc($67 << 2);
      var $91 = $90;
      if (($90 | 0) == 0) {
        var $rc_0 = _gpg_err_code_from_syserror();
        var $result_0 = $37;
        break;
      }
      L2303 : do {
        if (($67 | 0) != 0) {
          var $i_11 = 0;
          while (1) {
            var $i_11;
            HEAP32[$91 + ($i_11 << 2) >> 2] = ($i_11 << 2) + $37 | 0;
            var $99 = $i_11 + 1 | 0;
            if (($99 | 0) == ($67 | 0)) {
              break L2303;
            } else {
              var $i_11 = $99;
            }
          }
        }
      } while (0);
      var $100 = __gcry_sexp_build_array($r_sig, 0, $71, $91);
      _free($90);
      if (($100 | 0) == 0) {
        __gcry_free($71);
        var $rc_0 = 0;
        var $result_0 = $37;
        break;
      } else {
        __gcry_bug(478540, 3249, 495224);
      }
    } else {
      var $rc_0 = $5;
      var $result_0 = 0;
    }
  } while (0);
  var $result_0;
  var $rc_0;
  var $105 = HEAP32[$skey$s2];
  if (($105 | 0) != 0) {
    _release_mpi_array($105);
    __gcry_free(HEAP32[$skey$s2]);
  }
  var $111 = HEAP32[$hash$s2];
  if (($111 | 0) != 0) {
    __gcry_mpi_free($111);
  }
  if (($result_0 | 0) == 0) {
    var $119 = _gcry_error664($rc_0);
    STACKTOP = __stackBase__;
    return $119;
  }
  _release_mpi_array($result_0);
  __gcry_free($result_0);
  var $119 = _gcry_error664($rc_0);
  STACKTOP = __stackBase__;
  return $119;
}
__gcry_pk_sign["X"] = 1;
function _pubkey_generate($algorithm, $nbits, $use_e, $genparms, $skey, $retfactors, $r_extrainfo) {
  var label = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $ec_1 = 4;
    var $ec_1;
    var $29 = __gcry_ath_mutex_unlock(439944);
    return $ec_1;
  }
  var $11 = HEAP32[$7 + 12 >> 2];
  do {
    if (($11 | 0) == 0) {
      label = 1754;
    } else {
      var $16 = HEAP32[$11 + 4 >> 2];
      if (($16 | 0) == 0) {
        label = 1754;
        break;
      }
      var $ec_0 = FUNCTION_TABLE[$16]($algorithm, $nbits, $use_e, $genparms, $skey, $retfactors, $r_extrainfo);
      break;
    }
  } while (0);
  if (label == 1754) {
    var $ec_0 = FUNCTION_TABLE[HEAP32[HEAP32[$7 + 8 >> 2] + 32 >> 2]]($algorithm, $nbits, $use_e, $skey, $retfactors);
  }
  var $ec_0;
  __gcry_module_release($7);
  var $ec_1 = $ec_0;
  var $ec_1;
  var $29 = __gcry_ath_mutex_unlock(439944);
  return $ec_1;
}
function __gcry_pk_get_keygrip($key, $array) {
  var $md$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  var $md = __stackBase__, $md$s2 = $md >> 2;
  var $datalen = __stackBase__ + 4;
  var $buf = __stackBase__ + 8;
  HEAP32[$md$s2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $5 = __gcry_sexp_find_token($key, 479572, 0);
  do {
    if (($5 | 0) == 0) {
      var $8 = __gcry_sexp_find_token($key, 478976, 0);
      if (($8 | 0) != 0) {
        var $list_24 = $8;
        break;
      }
      var $11 = __gcry_sexp_find_token($key, 478704, 0);
      if (($11 | 0) != 0) {
        var $list_24 = $11;
        break;
      }
      var $13 = __gcry_sexp_find_token($key, 478344, 0);
      if (($13 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $list_24 = $13;
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $list_24 = $5;
    }
  } while (0);
  var $list_24;
  var $15 = __gcry_sexp_cadr($list_24);
  __gcry_sexp_release($list_24);
  var $16 = __gcry_sexp_nth_string($15, 0);
  L2345 : do {
    if (($16 | 0) == 0) {
      var $okay_0 = 0;
      var $l2_2 = 0;
    } else {
      __gcry_ath_mutex_lock(439944);
      var $20 = _gcry_pk_lookup_name($16);
      __gcry_ath_mutex_unlock(439944);
      if (($20 | 0) == 0) {
        var $okay_0 = 0;
        var $l2_2 = 0;
        break;
      }
      var $27 = HEAP32[$20 + 12 >> 2];
      var $30 = HEAP32[HEAP32[$20 + 8 >> 2] + 24 >> 2];
      if (($30 | 0) == 0) {
        var $okay_0 = 0;
        var $l2_2 = 0;
        break;
      }
      if ((__gcry_md_open($md, 2, 0) | 0) != 0) {
        var $okay_0 = 0;
        var $l2_2 = 0;
        break;
      }
      do {
        if (($27 | 0) == 0) {
          label = 1770;
        } else {
          var $41 = HEAP32[$27 + 8 >> 2];
          if (($41 | 0) == 0) {
            label = 1770;
            break;
          }
          if ((FUNCTION_TABLE[$41](HEAP32[$md$s2], $15) | 0) == 0) {
            break;
          } else {
            var $okay_0 = 0;
            var $l2_2 = 0;
            break L2345;
          }
        }
      } while (0);
      L2353 : do {
        if (label == 1770) {
          var $37 = $buf | 0;
          var $s_0 = $30;
          while (1) {
            var $s_0;
            if (HEAP8[$s_0] << 24 >> 24 == 0) {
              break L2353;
            }
            var $51 = __gcry_sexp_find_token($15, $s_0, 1);
            if (($51 | 0) == 0) {
              var $okay_0 = 0;
              var $l2_2 = 0;
              break L2345;
            }
            var $54 = __gcry_sexp_nth_data($51, 1, $datalen);
            if (($54 | 0) == 0) {
              var $okay_0 = 0;
              var $l2_2 = $51;
              break L2345;
            }
            var $59 = HEAP32[$datalen >> 2];
            _snprintf($37, 30, 478032, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP8[$s_0] << 24 >> 24, HEAP32[tempInt + 4 >> 2] = $59, tempInt));
            __gcry_md_write(HEAP32[$md$s2], $37, _strlen($37));
            __gcry_md_write(HEAP32[$md$s2], $54, HEAP32[$datalen >> 2]);
            __gcry_sexp_release($51);
            __gcry_md_write(HEAP32[$md$s2], 480296, 1);
            var $s_0 = $s_0 + 1 | 0;
          }
        }
      } while (0);
      if (($array | 0) == 0) {
        var $69 = __gcry_malloc(20);
        if (($69 | 0) == 0) {
          var $okay_0 = 0;
          var $l2_2 = 0;
          break;
        } else {
          var $_01 = $69;
        }
      } else {
        var $_01 = $array;
      }
      var $_01;
      _memcpy($_01, __gcry_md_read(HEAP32[$md$s2], 2), 20);
      var $okay_0 = $_01;
      var $l2_2 = 0;
    }
  } while (0);
  var $l2_2;
  var $okay_0;
  __gcry_free($16);
  __gcry_sexp_release($l2_2);
  __gcry_md_close(HEAP32[$md$s2]);
  __gcry_sexp_release($15);
  var $_0 = $okay_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_pk_get_keygrip["X"] = 1;
function __gcry_pk_get_curve($key, $iterator, $r_nbits) {
  var $module$s2;
  var $pkey$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $pkey = __stackBase__, $pkey$s2 = $pkey >> 2;
  var $module = __stackBase__ + 4, $module$s2 = $module >> 2;
  HEAP32[$pkey$s2] = 0;
  HEAP32[$module$s2] = 0;
  if (($r_nbits | 0) != 0) {
    HEAP32[$r_nbits >> 2] = 0;
  }
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  do {
    if (($key | 0) == 0) {
      __gcry_ath_mutex_lock(439944);
      HEAP32[$module$s2] = _gcry_pk_lookup_name(477380);
      __gcry_ath_mutex_unlock(439944);
      if ((HEAP32[$module$s2] | 0) == 0) {
        var $result_0 = 0;
        var $list_2 = 0;
        var $name_1 = 0;
        break;
      } else {
        var $_01 = $iterator;
        var $list_1 = 0;
        var $name_0 = 0;
        label = 1794;
        break;
      }
    } else {
      var $10 = __gcry_sexp_find_token($key, 479572, 0);
      var $11 = ($10 | 0) != 0;
      var $_ = $11 & 1 ^ 1;
      do {
        if ($11) {
          var $list_02 = $10;
        } else {
          var $14 = __gcry_sexp_find_token($key, 478976, 0);
          if (($14 | 0) == 0) {
            var $_0 = 0;
          } else {
            var $list_02 = $14;
            break;
          }
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      var $list_02;
      var $16 = __gcry_sexp_cadr($list_02);
      __gcry_sexp_release($list_02);
      var $17 = __gcry_sexp_nth_string($16, 0);
      if (($17 | 0) == 0) {
        var $result_0 = 0;
        var $list_2 = $16;
        var $name_1 = 0;
        break;
      }
      if ((_sexp_to_key($key, $_, 477700, $pkey, $module) | 0) == 0) {
        var $_01 = 0;
        var $list_1 = $16;
        var $name_0 = $17;
        label = 1794;
        break;
      } else {
        var $result_0 = 0;
        var $list_2 = $16;
        var $name_1 = $17;
        break;
      }
    }
  } while (0);
  do {
    if (label == 1794) {
      var $name_0;
      var $list_1;
      var $_01;
      var $31 = HEAP32[HEAP32[$module$s2] + 12 >> 2];
      if (($31 | 0) == 0) {
        var $result_0 = 0;
        var $list_2 = $list_1;
        var $name_1 = $name_0;
        break;
      }
      var $36 = HEAP32[$31 + 16 >> 2];
      if (($36 | 0) == 0) {
        var $result_0 = 0;
        var $list_2 = $list_1;
        var $name_1 = $name_0;
        break;
      }
      var $result_0 = FUNCTION_TABLE[$36](HEAP32[$pkey$s2], $_01, $r_nbits);
      var $list_2 = $list_1;
      var $name_1 = $name_0;
    }
  } while (0);
  var $name_1;
  var $list_2;
  var $result_0;
  var $42 = HEAP32[$pkey$s2];
  if (($42 | 0) != 0) {
    _release_mpi_array($42);
    __gcry_free(HEAP32[$pkey$s2]);
  }
  if ((HEAP32[$module$s2] | 0) != 0) {
    __gcry_ath_mutex_lock(439944);
    __gcry_module_release(HEAP32[$module$s2]);
    __gcry_ath_mutex_unlock(439944);
  }
  __gcry_free($name_1);
  __gcry_sexp_release($list_2);
  var $_0 = $result_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_pk_get_curve["X"] = 1;
function __gcry_pk_get_param($algo, $name) {
  if (($algo - 301 | 0) >>> 0 > 1) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $8 = _gcry_pk_lookup_name(477380);
  __gcry_ath_mutex_unlock(439944);
  if (($8 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $13 = HEAP32[$8 + 12 >> 2];
  do {
    if (($13 | 0) == 0) {
      var $result_0 = 0;
    } else {
      var $18 = HEAP32[$13 + 20 >> 2];
      if (($18 | 0) == 0) {
        var $result_0 = 0;
        break;
      }
      var $result_0 = FUNCTION_TABLE[$18]($name);
    }
  } while (0);
  var $result_0;
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release($8);
  __gcry_ath_mutex_unlock(439944);
  var $_0 = $result_0;
  var $_0;
  return $_0;
}
function __gcry_pk_ctl($cmd, $buffer, $buflen) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  do {
    if (($cmd | 0) == 12) {
      if (!(($buffer | 0) != 0 & ($buflen | 0) == 4)) {
        var $err_0 = 45;
        break;
      }
      _disable_pubkey_algo(HEAP32[$buffer >> 2]);
      var $err_0 = 0;
    } else {
      var $err_0 = 61;
    }
  } while (0);
  var $err_0;
  return _gcry_error664($err_0);
}
function _disable_pubkey_algo($algorithm) {
  __gcry_ath_mutex_lock(439944);
  var $3 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($3 | 0) == 0) {
    var $14 = __gcry_ath_mutex_unlock(439944);
    return;
  }
  var $6 = $3 + 16 | 0;
  var $7 = HEAP32[$6 >> 2];
  if (($7 & 1 | 0) == 0) {
    HEAP32[$6 >> 2] = $7 | 1;
  }
  __gcry_module_release($3);
  var $14 = __gcry_ath_mutex_unlock(439944);
  return;
}
function __gcry_pk_genkey($r_key, $s_parms) {
  var $195$s2;
  var $21$s2;
  var $mpis$s2;
  var $extrainfo$s2;
  var $factors$s2;
  var $skey$s2;
  var $n$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 284 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  var $skey = __stackBase__ + 4, $skey$s2 = $skey >> 2;
  var $factors = __stackBase__ + 52, $factors$s2 = $factors >> 2;
  var $extrainfo = __stackBase__ + 56, $extrainfo$s2 = $extrainfo >> 2;
  var $buf = __stackBase__ + 60;
  var $buf1 = __stackBase__ + 112;
  var $mpis = __stackBase__ + 164, $mpis$s2 = $mpis >> 2;
  HEAP32[$factors$s2] = 0;
  HEAP32[$extrainfo$s2] = 0;
  var $1 = $skey | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$r_key >> 2] = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $6 = __gcry_sexp_find_token($s_parms, 486828, 0);
  do {
    if (($6 | 0) == 0) {
      var $module_0 = 0;
      var $list_0 = 0;
      var $l2_1 = 0;
      var $rc_0 = 65;
    } else {
      var $9 = __gcry_sexp_cadr($6);
      __gcry_sexp_release($6);
      if (($9 | 0) == 0) {
        var $module_0 = 0;
        var $list_0 = 0;
        var $l2_1 = 0;
        var $rc_0 = 68;
        break;
      }
      var $12 = __gcry_sexp_nth_string($9, 0);
      if (($12 | 0) == 0) {
        var $module_0 = 0;
        var $list_0 = $9;
        var $l2_1 = 0;
        var $rc_0 = 65;
        break;
      }
      __gcry_ath_mutex_lock(439944);
      var $16 = _gcry_pk_lookup_name($12);
      __gcry_ath_mutex_unlock(439944);
      __gcry_free($12);
      if (($16 | 0) == 0) {
        var $module_0 = 0;
        var $list_0 = $9;
        var $l2_1 = 0;
        var $rc_0 = 4;
        break;
      }
      var $21$s2 = HEAP32[$16 + 8 >> 2] >> 2;
      var $22 = $16 + 24 | 0;
      var $23 = HEAP32[$22 >> 2];
      var $26 = HEAP32[$21$s2 + 1];
      do {
        if (($26 | 0) == 0) {
          label = 1839;
        } else {
          var $29 = HEAP32[$26 >> 2];
          if (($29 | 0) == 0) {
            label = 1839;
            break;
          }
          if (HEAP8[$29] << 24 >> 24 == 0) {
            label = 1839;
            break;
          } else {
            var $algo_name_0 = $29;
            break;
          }
        }
      } while (0);
      if (label == 1839) {
        var $algo_name_0 = HEAP32[$21$s2];
      }
      var $algo_name_0;
      var $39 = HEAP32[$21$s2 + 2];
      var $42 = HEAP32[$21$s2 + 3];
      if (_strlen($42) >>> 0 > 11) {
        __gcry_bug(478540, 3476, 495240);
      }
      var $47 = __gcry_sexp_find_token($9, 485944, 0);
      if (($47 | 0) == 0) {
        var $use_e_0 = 65537;
      } else {
        var $50 = __gcry_sexp_nth_data($47, 1, $n);
        if (($50 | 0) == 0) {
          var $module_0 = $16;
          var $list_0 = $9;
          var $l2_1 = $47;
          var $rc_0 = 65;
          break;
        }
        var $53 = HEAP32[$n$s2];
        if ($53 >>> 0 > 48) {
          var $module_0 = $16;
          var $list_0 = $9;
          var $l2_1 = $47;
          var $rc_0 = 65;
          break;
        }
        var $56 = $buf | 0;
        _memcpy($56, $50, $53);
        HEAP8[$buf + HEAP32[$n$s2] | 0] = 0;
        var $59 = _strtoul($56, 0, 0);
        __gcry_sexp_release($47);
        var $use_e_0 = $59;
      }
      var $use_e_0;
      var $61 = __gcry_sexp_find_token($9, 485052, 0);
      if (($61 | 0) == 0) {
        var $nbits_0 = 0;
      } else {
        var $64 = __gcry_sexp_nth_data($61, 1, $n);
        if (($64 | 0) == 0) {
          var $module_0 = $16;
          var $list_0 = $9;
          var $l2_1 = $61;
          var $rc_0 = 65;
          break;
        }
        var $67 = HEAP32[$n$s2];
        if ($67 >>> 0 > 48) {
          var $module_0 = $16;
          var $list_0 = $9;
          var $l2_1 = $61;
          var $rc_0 = 65;
          break;
        }
        var $70 = $buf1 | 0;
        _memcpy($70, $64, $67);
        HEAP8[$buf1 + HEAP32[$n$s2] | 0] = 0;
        var $73 = _strtoul($70, 0, 0);
        __gcry_sexp_release($61);
        var $nbits_0 = $73;
      }
      var $nbits_0;
      var $76 = _pubkey_generate(HEAP32[$22 >> 2], $nbits_0, $use_e_0, $9, $1, $factors, $extrainfo);
      __gcry_sexp_release($9);
      if (($76 | 0) != 0) {
        var $module_0 = $16;
        var $list_0 = 0;
        var $l2_1 = 0;
        var $rc_0 = $76;
        break;
      }
      var $81 = _strlen($39) + _strlen($42) | 0;
      L2453 : do {
        if ((HEAP32[$factors$s2] | 0) == 0) {
          var $nelem_1 = $81;
        } else {
          if ((HEAP32[HEAP32[$factors$s2] >> 2] | 0) == 0) {
            var $nelem_1 = $81;
            break;
          }
          var $87 = HEAP32[$factors$s2];
          var $nelem_03 = $81;
          var $i_04 = 0;
          while (1) {
            var $i_04;
            var $nelem_03;
            var $89 = $nelem_03 + 1 | 0;
            var $90 = $i_04 + 1 | 0;
            if ((HEAP32[$87 + ($90 << 2) >> 2] | 0) == 0) {
              var $nelem_1 = $89;
              break L2453;
            } else {
              var $nelem_03 = $89;
              var $i_04 = $90;
            }
          }
        }
      } while (0);
      var $nelem_1;
      var $98 = (_strlen($algo_name_0) << 1) + ($nelem_1 * 10 & -1) + 305 | 0;
      if ($nelem_1 >>> 0 > 30) {
        __gcry_bug(478540, 3551, 495240);
      }
      var $102 = __gcry_malloc($98);
      if (($102 | 0) == 0) {
        var $module_0 = $16;
        var $list_0 = 0;
        var $l2_1 = 0;
        var $rc_0 = _gpg_err_code_from_syserror();
        break;
      }
      var $109 = _stpcpy(_stpcpy(_stpcpy($102, 484136), 483544), $algo_name_0);
      L2465 : do {
        if (HEAP8[$39] << 24 >> 24 == 0) {
          var $p_0_lcssa = $109;
          var $nelem_2_lcssa = 0;
        } else {
          var $p_036 = $109;
          var $i_138 = 0;
          var $112 = $39;
          while (1) {
            var $112;
            var $i_138;
            var $p_036;
            HEAP8[$p_036] = 40;
            HEAP8[$p_036 + 1 | 0] = HEAP8[$112];
            var $116 = _stpcpy($p_036 + 2 | 0, 471272);
            var $119 = $i_138 + 1 | 0;
            HEAP32[($i_138 << 2 >> 2) + $mpis$s2] = HEAP32[($i_138 << 2 >> 2) + $skey$s2];
            var $121 = $39 + $119 | 0;
            if (HEAP8[$121] << 24 >> 24 == 0) {
              var $p_0_lcssa = $116;
              var $nelem_2_lcssa = $119;
              break L2465;
            } else {
              var $p_036 = $116;
              var $i_138 = $119;
              var $112 = $121;
            }
          }
        }
      } while (0);
      var $nelem_2_lcssa;
      var $p_0_lcssa;
      do {
        if ((HEAP32[$extrainfo$s2] | 0) == 0) {
          var $percent_s_idx_0 = -1;
          var $p_1 = $p_0_lcssa;
        } else {
          if (($23 - 301 | 0) >>> 0 >= 2) {
            var $percent_s_idx_0 = -1;
            var $p_1 = $p_0_lcssa;
            break;
          }
          var $percent_s_idx_0 = $nelem_2_lcssa;
          var $p_1 = _stpcpy($p_0_lcssa, 482620);
        }
      } while (0);
      var $p_1;
      var $percent_s_idx_0;
      var $133 = _stpcpy(_stpcpy(_stpcpy($p_1, 469976), 481920), $algo_name_0);
      L2473 : do {
        if (HEAP8[$42] << 24 >> 24 == 0) {
          var $p_2_lcssa = $133;
          var $nelem_3_lcssa = $nelem_2_lcssa;
          var $i_2_lcssa = 0;
        } else {
          var $p_227 = $133;
          var $nelem_328 = $nelem_2_lcssa;
          var $i_229 = 0;
          var $136 = $42;
          while (1) {
            var $136;
            var $i_229;
            var $nelem_328;
            var $p_227;
            HEAP8[$p_227] = 40;
            HEAP8[$p_227 + 1 | 0] = HEAP8[$136];
            var $140 = _stpcpy($p_227 + 2 | 0, 471272);
            var $143 = $nelem_328 + 1 | 0;
            HEAP32[($nelem_328 << 2 >> 2) + $mpis$s2] = HEAP32[($i_229 << 2 >> 2) + $skey$s2];
            var $145 = $i_229 + 1 | 0;
            var $146 = $42 + $145 | 0;
            if (HEAP8[$146] << 24 >> 24 == 0) {
              var $p_2_lcssa = $140;
              var $nelem_3_lcssa = $143;
              var $i_2_lcssa = $145;
              break L2473;
            } else {
              var $p_227 = $140;
              var $nelem_328 = $143;
              var $i_229 = $145;
              var $136 = $146;
            }
          }
        }
      } while (0);
      var $i_2_lcssa;
      var $nelem_3_lcssa;
      var $p_2_lcssa;
      var $149 = _stpcpy($p_2_lcssa, 469976);
      HEAP32[($i_2_lcssa << 2 >> 2) + $skey$s2] = 0;
      var $153 = ($percent_s_idx_0 | 0) == -1;
      do {
        if ((HEAP32[$extrainfo$s2] | 0) != 0 & $153) {
          var $nelem_5 = $nelem_3_lcssa;
          var $p_4 = _stpcpy($149, 482620);
        } else {
          var $157 = HEAP32[$factors$s2];
          if (($157 | 0) == 0) {
            var $nelem_5 = $nelem_3_lcssa;
            var $p_4 = $149;
            break;
          }
          if ((HEAP32[$157 >> 2] | 0) == 0) {
            var $nelem_5 = $nelem_3_lcssa;
            var $p_4 = $149;
            break;
          }
          var $163 = _stpcpy($149, 481408);
          L2482 : do {
            if ((HEAP32[HEAP32[$factors$s2] >> 2] | 0) == 0) {
              var $p_3_lcssa = $163;
              var $nelem_4_lcssa = $nelem_3_lcssa;
            } else {
              var $p_35 = $163;
              var $nelem_46 = $nelem_3_lcssa;
              var $i_37 = 0;
              while (1) {
                var $i_37;
                var $nelem_46;
                var $p_35;
                var $167 = _stpcpy($p_35, 464872);
                var $171 = $nelem_46 + 1 | 0;
                HEAP32[($nelem_46 << 2 >> 2) + $mpis$s2] = HEAP32[HEAP32[$factors$s2] + ($i_37 << 2) >> 2];
                var $173 = $i_37 + 1 | 0;
                if ((HEAP32[HEAP32[$factors$s2] + ($173 << 2) >> 2] | 0) == 0) {
                  var $p_3_lcssa = $167;
                  var $nelem_4_lcssa = $171;
                  break L2482;
                } else {
                  var $p_35 = $167;
                  var $nelem_46 = $171;
                  var $i_37 = $173;
                }
              }
            }
          } while (0);
          var $nelem_4_lcssa;
          var $p_3_lcssa;
          var $nelem_5 = $nelem_4_lcssa;
          var $p_4 = _stpcpy($p_3_lcssa, 469976);
        }
      } while (0);
      var $p_4;
      var $nelem_5;
      var $180 = $p_4;
      tempBigInt = 41;
      HEAP8[$180] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$180 + 1] = tempBigInt & 255;
      if (($p_4 - $102 | 0) >>> 0 >= $98 >>> 0) {
        __gcry_assert_failed(479788, 478540, 3609, 495240);
      }
      if ($nelem_5 >>> 0 < 30) {
        _memset(($nelem_5 << 2) + $mpis | 0, 0, 120 - ($nelem_5 << 2) | 0);
      }
      var $190 = _strlen($39);
      var $191 = _strlen($42);
      var $192 = $191 + $190 | 0;
      var $194 = __gcry_calloc($nelem_1 + 1 | 0, 4);
      var $195 = $194, $195$s2 = $195 >> 2;
      if (($194 | 0) == 0) {
        var $module_0 = $16;
        var $list_0 = 0;
        var $l2_1 = 0;
        var $rc_0 = _gpg_err_code_from_syserror();
        break;
      }
      L2496 : do {
        if (($192 | 0) > 0) {
          var $198 = $extrainfo;
          var $199 = $191 + $190 | 0;
          var $j_017 = 0;
          var $i_418 = 0;
          while (1) {
            var $i_418;
            var $j_017;
            if (($i_418 | 0) == ($percent_s_idx_0 | 0)) {
              HEAP32[($j_017 << 2 >> 2) + $195$s2] = $198;
              var $j_1 = $j_017 + 1 | 0;
            } else {
              var $j_1 = $j_017;
            }
            var $j_1;
            var $210 = $j_1 + 1 | 0;
            HEAP32[($j_1 << 2 >> 2) + $195$s2] = ($i_418 << 2) + $mpis | 0;
            var $212 = $i_418 + 1 | 0;
            if (($212 | 0) == ($199 | 0)) {
              var $j_0_lcssa = $210;
              var $i_4_lcssa = $199;
              break L2496;
            } else {
              var $j_017 = $210;
              var $i_418 = $212;
            }
          }
        } else {
          var $j_0_lcssa = 0;
          var $i_4_lcssa = 0;
        }
      } while (0);
      var $i_4_lcssa;
      var $j_0_lcssa;
      L2504 : do {
        if ((HEAP32[$extrainfo$s2] | 0) != 0 & $153) {
          HEAP32[($j_0_lcssa << 2 >> 2) + $195$s2] = $extrainfo;
        } else {
          var $219 = HEAP32[$factors$s2];
          if (($219 | 0) == 0) {
            break;
          }
          if (!((HEAP32[$219 >> 2] | 0) != 0 & $i_4_lcssa >>> 0 < $nelem_1 >>> 0)) {
            break;
          }
          var $225 = HEAP32[$factors$s2];
          var $j_213 = $j_0_lcssa;
          var $i_514 = $i_4_lcssa;
          while (1) {
            var $i_514;
            var $j_213;
            HEAP32[($j_213 << 2 >> 2) + $195$s2] = ($i_514 - $192 << 2) + $225 | 0;
            var $231 = $i_514 + 1 | 0;
            if (($231 | 0) == ($nelem_1 | 0)) {
              break L2504;
            } else {
              var $j_213 = $j_213 + 1 | 0;
              var $i_514 = $231;
            }
          }
        }
      } while (0);
      var $232 = __gcry_sexp_build_array($r_key, 0, $102, $195);
      __gcry_free($194);
      if (($232 | 0) == 0) {
        __gcry_free($102);
        var $module_0 = $16;
        var $list_0 = 0;
        var $l2_1 = 0;
        var $rc_0 = 0;
        break;
      } else {
        __gcry_bug(478540, 3641, 495240);
      }
    }
  } while (0);
  var $rc_0;
  var $l2_1;
  var $list_0;
  var $module_0;
  __gcry_free(0);
  __gcry_sexp_release(HEAP32[$extrainfo$s2]);
  _release_mpi_array($1);
  var $238 = HEAP32[$factors$s2];
  if (($238 | 0) != 0) {
    _release_mpi_array($238);
    __gcry_free(HEAP32[$factors$s2]);
  }
  __gcry_sexp_release(0);
  __gcry_sexp_release($l2_1);
  __gcry_sexp_release($list_0);
  if (($module_0 | 0) == 0) {
    var $249 = _gcry_error664($rc_0);
    STACKTOP = __stackBase__;
    return $249;
  }
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release($module_0);
  __gcry_ath_mutex_unlock(439944);
  var $249 = _gcry_error664($rc_0);
  STACKTOP = __stackBase__;
  return $249;
}
__gcry_pk_genkey["X"] = 1;
function _gpg_err_code693($err) {
  return $err & 65535;
}
function _gpg_err_make695($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function __gcry_pk_algo_info($algorithm, $what, $buffer, $nbytes) {
  var $nbytes$s2 = $nbytes >> 2;
  do {
    if (($what | 0) == 8) {
      if (($nbytes | 0) == 0) {
        var $6 = 0;
      } else {
        var $6 = HEAP32[$nbytes$s2];
      }
      var $6;
      if (($buffer | 0) != 0) {
        var $err_0 = 45;
        break;
      }
      var $err_0 = (_check_pubkey_algo($algorithm, $6) | 0) == 0 ? 0 : 4;
    } else if (($what | 0) == 15) {
      HEAP32[$nbytes$s2] = _pubkey_get_npkey($algorithm);
      var $err_0 = 0;
    } else if (($what | 0) == 17) {
      HEAP32[$nbytes$s2] = _pubkey_get_nsig($algorithm);
      var $err_0 = 0;
    } else if (($what | 0) == 16) {
      HEAP32[$nbytes$s2] = _pubkey_get_nskey($algorithm);
      var $err_0 = 0;
    } else if (($what | 0) == 34) {
      __gcry_ath_mutex_lock(439944);
      if (!HEAP8[457940]) {
        _pk_register_default();
        HEAP8[457940] = 1;
      }
      __gcry_ath_mutex_unlock(439944);
      __gcry_ath_mutex_lock(439944);
      var $18 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
      if (($18 | 0) == 0) {
        var $use1_0 = 0;
      } else {
        var $25 = HEAP32[HEAP32[$18 + 8 >> 2] + 28 >> 2];
        __gcry_module_release($18);
        var $use1_0 = $25;
      }
      var $use1_0;
      __gcry_ath_mutex_unlock(439944);
      HEAP32[$nbytes$s2] = $use1_0;
      var $err_0 = 0;
    } else if (($what | 0) == 18) {
      HEAP32[$nbytes$s2] = _pubkey_get_nenc($algorithm);
      var $err_0 = 0;
    } else {
      var $err_0 = 61;
    }
  } while (0);
  var $err_0;
  return _gcry_error664($err_0);
}
__gcry_pk_algo_info["X"] = 1;
function _check_pubkey_algo($algorithm, $use) {
  var label = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $err_1 = 4;
    var $err_1;
    var $36 = __gcry_ath_mutex_unlock(439944);
    return $err_1;
  }
  var $11 = HEAP32[$7 + 8 >> 2];
  do {
    if (($use & 1 | 0) == 0) {
      label = 1926;
    } else {
      if ((HEAP32[$11 + 28 >> 2] & 1 | 0) == 0) {
        var $err_0 = 41;
        break;
      } else {
        label = 1926;
        break;
      }
    }
  } while (0);
  do {
    if (label == 1926) {
      if (($use & 2 | 0) != 0) {
        if ((HEAP32[$11 + 28 >> 2] & 2 | 0) == 0) {
          var $err_0 = 41;
          break;
        }
      }
      var $err_0 = HEAP32[$7 + 16 >> 2] << 2 & 4;
    }
  } while (0);
  var $err_0;
  __gcry_module_release($7);
  var $err_1 = $err_0;
  var $err_1;
  var $36 = __gcry_ath_mutex_unlock(439944);
  return $err_1;
}
function _pubkey_get_npkey($algorithm) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $npkey_0 = 0;
    var $npkey_0;
    var $17 = __gcry_ath_mutex_unlock(439944);
    return $npkey_0;
  }
  var $15 = _strlen(HEAP32[HEAP32[$7 + 8 >> 2] + 8 >> 2]);
  __gcry_module_release($7);
  var $npkey_0 = $15;
  var $npkey_0;
  var $17 = __gcry_ath_mutex_unlock(439944);
  return $npkey_0;
}
function _pubkey_get_nskey($algorithm) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $nskey_0 = 0;
    var $nskey_0;
    var $17 = __gcry_ath_mutex_unlock(439944);
    return $nskey_0;
  }
  var $15 = _strlen(HEAP32[HEAP32[$7 + 8 >> 2] + 12 >> 2]);
  __gcry_module_release($7);
  var $nskey_0 = $15;
  var $nskey_0;
  var $17 = __gcry_ath_mutex_unlock(439944);
  return $nskey_0;
}
function _pubkey_get_nsig($algorithm) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $nsig_0 = 0;
    var $nsig_0;
    var $17 = __gcry_ath_mutex_unlock(439944);
    return $nsig_0;
  }
  var $15 = _strlen(HEAP32[HEAP32[$7 + 8 >> 2] + 20 >> 2]);
  __gcry_module_release($7);
  var $nsig_0 = $15;
  var $nsig_0;
  var $17 = __gcry_ath_mutex_unlock(439944);
  return $nsig_0;
}
function _pubkey_get_nenc($algorithm) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $nenc_0 = 0;
    var $nenc_0;
    var $17 = __gcry_ath_mutex_unlock(439944);
    return $nenc_0;
  }
  var $15 = _strlen(HEAP32[HEAP32[$7 + 8 >> 2] + 16 >> 2]);
  __gcry_module_release($7);
  var $nenc_0 = $15;
  var $nenc_0;
  var $17 = __gcry_ath_mutex_unlock(439944);
  return $nenc_0;
}
function __gcry_pk_init() {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  return 0;
}
function __gcry_pk_module_lookup($algorithm, $module) {
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algorithm);
  if (($7 | 0) == 0) {
    var $err_0 = 4;
    var $err_0;
    var $11 = __gcry_ath_mutex_unlock(439944);
    return $err_0;
  }
  HEAP32[$module >> 2] = $7;
  var $err_0 = 0;
  var $err_0;
  var $11 = __gcry_ath_mutex_unlock(439944);
  return $err_0;
}
function __gcry_pk_module_release($module) {
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release($module);
  __gcry_ath_mutex_unlock(439944);
  return;
}
function __gcry_pk_list($list, $list_length) {
  __gcry_ath_mutex_lock(439944);
  __gcry_module_list(HEAP32[109987], $list, $list_length);
  __gcry_ath_mutex_unlock(439944);
  return 0;
}
function __gcry_pk_selftest($algo, $extended, $report) {
  var $7$s2;
  var label = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  __gcry_ath_mutex_lock(439944);
  var $7 = __gcry_module_lookup_id(HEAP32[109987], $algo), $7$s2 = $7 >> 2;
  var $8 = ($7 | 0) != 0;
  do {
    if ($8) {
      if ((HEAP32[$7$s2 + 4] & 1 | 0) != 0) {
        label = 1977;
        break;
      }
      var $17 = HEAP32[$7$s2 + 3];
      __gcry_ath_mutex_unlock(439944);
      if (($17 | 0) == 0) {
        label = 1981;
        break;
      }
      var $22 = HEAP32[$17 >> 2];
      if (($22 | 0) == 0) {
        label = 1981;
        break;
      }
      var $ec_0 = FUNCTION_TABLE[$22]($algo, $extended, $report);
      break;
    } else {
      label = 1977;
    }
  } while (0);
  do {
    if (label == 1977) {
      __gcry_ath_mutex_unlock(439944);
      label = 1981;
      break;
    }
  } while (0);
  do {
    if (label == 1981) {
      if (($report | 0) == 0) {
        var $ec_0 = 4;
        break;
      }
      do {
        if ($8) {
          if ((HEAP32[$7$s2 + 4] & 1 | 0) == 0) {
            var $37 = 476660;
            break;
          } else {
            label = 1984;
            break;
          }
        } else {
          label = 1984;
        }
      } while (0);
      if (label == 1984) {
        var $37 = $8 ? 476388 : 476172;
      }
      var $37;
      FUNCTION_TABLE[$report](477224, $algo, 484672, $37);
      var $ec_0 = 4;
    }
  } while (0);
  var $ec_0;
  if (!$8) {
    var $43 = _gpg_error650($ec_0);
    return $43;
  }
  __gcry_ath_mutex_lock(439944);
  __gcry_module_release($7);
  __gcry_ath_mutex_unlock(439944);
  var $43 = _gpg_error650($ec_0);
  return $43;
}
__gcry_pk_selftest["X"] = 1;
function __gcry_pk_get_elements($algo, $enc, $sig) {
  var label = 0;
  __gcry_ath_mutex_lock(439944);
  if (!HEAP8[457940]) {
    _pk_register_default();
    HEAP8[457940] = 1;
  }
  __gcry_ath_mutex_unlock(439944);
  var $6 = __gcry_module_lookup_id(HEAP32[109987], $algo);
  do {
    if (($6 | 0) == 0) {
      __gcry_module_release($6);
      var $err_03 = 63;
      var $enc_cp_14 = 0;
    } else {
      var $10 = HEAP32[$6 + 8 >> 2];
      var $11 = ($enc | 0) != 0;
      do {
        if ($11) {
          var $16 = _strdup(HEAP32[$10 + 16 >> 2]);
          if (($16 | 0) != 0) {
            var $enc_cp_0 = $16;
            label = 1998;
            break;
          }
          var $enc_cp_1 = 0;
          var $err_0 = _gpg_err_code_from_syserror();
          break;
        } else {
          var $enc_cp_0 = 0;
          label = 1998;
        }
      } while (0);
      L2644 : do {
        if (label == 1998) {
          var $enc_cp_0;
          var $21 = ($sig | 0) != 0;
          do {
            if ($21) {
              var $26 = _strdup(HEAP32[$10 + 20 >> 2]);
              if (($26 | 0) != 0) {
                var $sig_cp_0 = $26;
                break;
              }
              var $enc_cp_1 = $enc_cp_0;
              var $err_0 = _gpg_err_code_from_syserror();
              break L2644;
            } else {
              var $sig_cp_0 = 0;
            }
          } while (0);
          var $sig_cp_0;
          if ($11) {
            HEAP32[$enc >> 2] = $enc_cp_0;
          }
          if ($21) {
            HEAP32[$sig >> 2] = $sig_cp_0;
          }
          __gcry_module_release($6);
          var $err_01 = 0;
          var $err_01;
          return $err_01;
        }
      } while (0);
      var $err_0;
      var $enc_cp_1;
      __gcry_module_release($6);
      if (($err_0 | 0) == 0) {
        var $err_01 = 0;
      } else {
        var $err_03 = $err_0;
        var $enc_cp_14 = $enc_cp_1;
        break;
      }
      var $err_01;
      return $err_01;
    }
  } while (0);
  var $enc_cp_14;
  var $err_03;
  _free($enc_cp_14);
  _free(0);
  var $err_01 = $err_03;
  var $err_01;
  return $err_01;
}
__gcry_pk_get_elements["X"] = 1;
function _sexp_elements_extract($key_sexp, $element_names, $elements, $algo_name) {
  var $elements$s2 = $elements >> 2;
  var label = 0;
  do {
    if (HEAP8[$element_names] << 24 >> 24 == 0) {
      var $name_1 = $element_names;
      var $idx_1 = 0;
      label = 2018;
    } else {
      var $err_09 = 0;
      var $idx_010 = 0;
      var $name_011 = $element_names;
      while (1) {
        var $name_011;
        var $idx_010;
        var $err_09;
        var $3 = __gcry_sexp_find_token($key_sexp, $name_011, 1);
        if (($3 | 0) == 0) {
          HEAP32[($idx_010 << 2 >> 2) + $elements$s2] = 0;
          var $err_1 = $err_09;
        } else {
          var $9 = ($idx_010 << 2) + $elements | 0;
          HEAP32[$9 >> 2] = __gcry_sexp_nth_mpi($3, 1, 5);
          __gcry_sexp_release($3);
          var $err_1 = (HEAP32[$9 >> 2] | 0) == 0 ? 65 : $err_09;
        }
        var $err_1;
        var $13 = $name_011 + 1 | 0;
        var $14 = $idx_010 + 1 | 0;
        var $17 = ($err_1 | 0) == 0;
        if (HEAP8[$13] << 24 >> 24 != 0 & $17) {
          var $err_09 = $err_1;
          var $idx_010 = $14;
          var $name_011 = $13;
        } else {
          break;
        }
      }
      if ($17) {
        var $name_1 = $element_names;
        var $idx_1 = 0;
        label = 2018;
        break;
      } else {
        var $err_22_ph = $err_1;
        var $idx_24_ph = $14;
        break;
      }
    }
  } while (0);
  L2670 : do {
    if (label == 2018) {
      while (1) {
        label = 0;
        var $idx_1;
        var $name_1;
        if (HEAP8[$name_1] << 24 >> 24 == 0) {
          var $err_2 = 0;
          break;
        }
        if ((HEAP32[($idx_1 << 2 >> 2) + $elements$s2] | 0) == 0) {
          label = 2021;
          break;
        }
        var $name_1 = $name_1 + 1 | 0;
        var $idx_1 = $idx_1 + 1 | 0;
      }
      do {
        if (label == 2021) {
          if (HEAP8[$name_1] << 24 >> 24 == 0) {
            var $err_2 = 0;
            break;
          }
          if (($algo_name | 0) == 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          if ((_strcmp($algo_name, 474432) | 0) != 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          if ((_strcmp($element_names, 474204) | 0) != 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          if ((HEAP32[$elements$s2] | 0) == 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          if ((HEAP32[$elements$s2 + 1] | 0) == 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          if ((HEAP32[$elements$s2 + 2] | 0) == 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          if ((HEAP32[$elements$s2 + 3] | 0) != 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          if ((HEAP32[$elements$s2 + 4] | 0) != 0) {
            var $err_22_ph = 68;
            var $idx_24_ph = $idx_1;
            break L2670;
          }
          var $err_2 = (HEAP32[$elements$s2 + 5] | 0) == 0 ? 0 : 68;
        }
      } while (0);
      var $err_2;
      if (($err_2 | 0) == 0) {
        var $err_23 = 0;
      } else {
        var $err_22_ph = $err_2;
        var $idx_24_ph = $idx_1;
        break;
      }
      var $err_23;
      return $err_23;
    }
  } while (0);
  var $idx_24_ph;
  var $err_22_ph;
  if (($idx_24_ph | 0) > 0) {
    var $i_05 = 0;
  } else {
    var $err_23 = $err_22_ph;
    var $err_23;
    return $err_23;
  }
  while (1) {
    var $i_05;
    var $63 = HEAP32[($i_05 << 2 >> 2) + $elements$s2];
    if (($63 | 0) != 0) {
      __gcry_free($63);
    }
    var $67 = $i_05 + 1 | 0;
    if (($67 | 0) == ($idx_24_ph | 0)) {
      var $err_23 = $err_22_ph;
      break;
    } else {
      var $i_05 = $67;
    }
  }
  var $err_23;
  return $err_23;
}
_sexp_elements_extract["X"] = 1;
function _mgf1($output, $outlen, $seed, $seedlen, $algo) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $hd = __stackBase__;
  var $c = __stackBase__ + 4;
  var $1 = __gcry_md_open($hd, $algo, 0);
  if (($1 | 0) != 0) {
    var $_0 = _gpg_err_code693($1);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = __gcry_md_get_algo_dlen($algo);
  L2702 : do {
    if (($outlen | 0) != 0) {
      var $8 = $c | 0;
      var $9 = $c + 1 | 0;
      var $10 = $c + 2 | 0;
      var $11 = $c + 3 | 0;
      var $12 = HEAP32[$hd >> 2];
      var $nbytes_01 = 0;
      var $idx_02 = 0;
      while (1) {
        var $idx_02;
        var $nbytes_01;
        if (($idx_02 | 0) != 0) {
          __gcry_md_reset($12);
        }
        HEAP8[$8] = $idx_02 >>> 24 & 255;
        HEAP8[$9] = $idx_02 >>> 16 & 255;
        HEAP8[$10] = $idx_02 >>> 8 & 255;
        HEAP8[$11] = $idx_02 & 255;
        __gcry_md_write($12, $seed, $seedlen);
        __gcry_md_write($12, $8, 4);
        var $26 = $outlen - $nbytes_01 | 0;
        var $_ = $26 >>> 0 < $6 >>> 0 ? $26 : $6;
        _memcpy($output + $nbytes_01 | 0, __gcry_md_read($12, 0), $_);
        var $29 = $_ + $nbytes_01 | 0;
        if ($29 >>> 0 < $outlen >>> 0) {
          var $nbytes_01 = $29;
          var $idx_02 = $idx_02 + 1 | 0;
        } else {
          break L2702;
        }
      }
    }
  } while (0);
  __gcry_md_close(HEAP32[$hd >> 2]);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_mgf1["X"] = 1;
function _get_hash_algo($s, $n) {
  var label = 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    var $cond = ($i_0 | 0) == 12;
    if ($cond) {
      break;
    }
    var $4 = HEAP32[($i_0 << 3) + 455328 >> 2];
    if ((_strlen($4) | 0) == ($n | 0)) {
      if ((_memcmp($4, $s, $n) | 0) == 0) {
        label = 2056;
        break;
      }
    }
    var $i_0 = $i_0 + 1 | 0;
  }
  do {
    if (label == 2056) {
      if ($cond) {
        break;
      }
      var $algo_0 = HEAP32[($i_0 << 3) + 455332 >> 2];
      var $algo_0;
      return $algo_0;
    }
  } while (0);
  var $17 = __gcry_malloc($n + 1 | 0);
  if (($17 | 0) == 0) {
    var $algo_0 = 0;
    var $algo_0;
    return $algo_0;
  }
  _memcpy($17, $s, $n);
  HEAP8[$17 + $n | 0] = 0;
  var $21 = __gcry_md_map_name($17);
  __gcry_free($17);
  var $algo_0 = $21;
  var $algo_0;
  return $algo_0;
}
function _gcry_err_make694($code) {
  return _gpg_err_make695(32, $code);
}
function _pkcs1_encode_for_encryption($r_result, $nbits, $value, $valuelen, $random_override, $random_override_len) {
  var $nframe$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $nframe = __stackBase__, $nframe$s2 = $nframe >> 2;
  var $2 = ($nbits + 7 | 0) >>> 3;
  HEAP32[$nframe$s2] = $2;
  if (!(($valuelen + 7 | 0) >>> 0 <= $2 >>> 0 & ($2 | 0) != 0)) {
    var $_0 = 66;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $7 = __gcry_malloc_secure($2);
  if (($7 | 0) == 0) {
    var $_0 = _gpg_err_code_from_syserror();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP8[$7] = 0;
  HEAP8[$7 + 1 | 0] = 2;
  var $15 = -3 - $valuelen + HEAP32[$nframe$s2] | 0;
  if (($15 | 0) <= 0) {
    __gcry_assert_failed(466836, 478540, 893, 494172);
  }
  do {
    if (($random_override | 0) == 0) {
      var $33 = __gcry_random_bytes_secure($15, 1);
      var $34 = ($15 | 0) < 1;
      var $k_0 = 0;
      var $j1_0 = 0;
      while (1) {
        var $j1_0;
        var $k_0;
        if (($j1_0 | 0) < ($15 | 0)) {
          var $k_0 = (HEAP8[$33 + $j1_0 | 0] << 24 >> 24 == 0 & 1) + $k_0 | 0;
          var $j1_0 = $j1_0 + 1 | 0;
          continue;
        }
        if (($k_0 | 0) == 0) {
          break;
        }
        var $47 = $k_0 + (($k_0 | 0) / 128 & -1) + 3 | 0;
        var $48 = __gcry_random_bytes_secure($47, 1);
        L2758 : do {
          if (!($34 | ($47 | 0) == 0)) {
            var $j1_14 = 0;
            var $k_25 = $47;
            while (1) {
              var $k_25;
              var $j1_14;
              var $50 = $33 + $j1_14 | 0;
              if (HEAP8[$50] << 24 >> 24 == 0) {
                var $54 = $k_25 - 1 | 0;
                HEAP8[$50] = HEAP8[$48 + $54 | 0];
                var $k_3 = $54;
              } else {
                var $k_3 = $k_25;
              }
              var $k_3;
              var $j1_1_ = (HEAP8[$50] << 24 >> 24 != 0 & 1) + $j1_14 | 0;
              if (($j1_1_ | 0) >= ($15 | 0) | ($k_3 | 0) == 0) {
                break L2758;
              } else {
                var $j1_14 = $j1_1_;
                var $k_25 = $k_3;
              }
            }
          }
        } while (0);
        __gcry_free($48);
        var $k_0 = 0;
        var $j1_0 = 0;
      }
      _memcpy($7 + 2 | 0, $33, $15);
      __gcry_free($33);
      var $n_0_in = $15;
    } else {
      if (($15 | 0) == ($random_override_len | 0)) {
        var $j_0 = 0;
      } else {
        __gcry_free($7);
        var $_0 = 45;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      while (1) {
        var $j_0;
        if ($j_0 >>> 0 >= $random_override_len >>> 0) {
          label = 2076;
          break;
        }
        if (HEAP8[$random_override + $j_0 | 0] << 24 >> 24 == 0) {
          break;
        } else {
          var $j_0 = $j_0 + 1 | 0;
        }
      }
      if (label == 2076) {
        _memcpy($7 + 2 | 0, $random_override, $random_override_len);
        var $n_0_in = $random_override_len;
        break;
      }
      __gcry_free($7);
      var $_0 = 45;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $n_0_in;
  var $65 = $n_0_in + 3 | 0;
  HEAP8[$n_0_in + ($7 + 2) | 0] = 0;
  _memcpy($7 + $65 | 0, $value, $valuelen);
  var $68 = $65 + $valuelen | 0;
  if (($68 | 0) != (HEAP32[$nframe$s2] | 0)) {
    __gcry_assert_failed(467208, 478540, 951, 494172);
  }
  var $73 = __gcry_mpi_scan($r_result, 5, $7, $68, $nframe);
  do {
    if (($73 | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $rc_0 = 0;
        break;
      }
      __gcry_log_mpidump(466660, HEAP32[$r_result >> 2]);
      var $rc_0 = 0;
    } else {
      var $rc_0 = _gcry_err_code663($73);
    }
  } while (0);
  var $rc_0;
  __gcry_free($7);
  var $_0 = $rc_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_pkcs1_encode_for_encryption["X"] = 1;
function _oaep_encode($r_result, $nbits, $algo, $value, $valuelen, $label, $labellen, $random_override, $random_override_len) {
  var $2 = ($nbits + 7 | 0) >>> 3;
  HEAP32[$r_result >> 2] = 0;
  var $or_cond = ($label | 0) == 0 | ($labellen | 0) == 0;
  var $5 = __gcry_md_get_algo_dlen($algo);
  if (($2 - 2 - ($5 << 1) | 0) >>> 0 < $valuelen >>> 0 | ($2 | 0) == 0) {
    var $_0 = 66;
    var $_0;
    return $_0;
  }
  var $12 = __gcry_calloc_secure(1, $2);
  if (($12 | 0) == 0) {
    var $_0 = _gpg_err_code_from_syserror();
    var $_0;
    return $_0;
  }
  var $17 = $12 + 1 | 0;
  var $_sum = $5 + 1 | 0;
  var $18 = $12 + $_sum | 0;
  __gcry_md_hash_buffer($algo, $18, $or_cond ? 472864 : $label, $or_cond ? 0 : $labellen);
  var $19 = $2 - $valuelen | 0;
  HEAP8[$12 + ($19 - 1) | 0] = 1;
  _memcpy($12 + $19 | 0, $value, $valuelen);
  do {
    if (($random_override | 0) == 0) {
      __gcry_randomize($17, $5, 1);
    } else {
      if (($5 | 0) == ($random_override_len | 0)) {
        _memcpy($17, $random_override, $5);
        break;
      }
      __gcry_free($12);
      var $_0 = 45;
      var $_0;
      return $_0;
    }
  } while (0);
  var $31 = $2 - $5 - 1 | 0;
  var $32 = __gcry_malloc_secure($31);
  if (($32 | 0) == 0) {
    var $35 = _gpg_err_code_from_syserror();
    __gcry_free($12);
    var $_0 = $35;
    var $_0;
    return $_0;
  }
  var $37 = _mgf1($32, $31, $17, $5, $algo);
  if (($37 | 0) != 0) {
    __gcry_free($32);
    __gcry_free($12);
    var $_0 = $37;
    var $_0;
    return $_0;
  }
  L2800 : do {
    if ($_sum >>> 0 < $2 >>> 0) {
      var $p_08 = $32;
      var $n_09 = $_sum;
      while (1) {
        var $n_09;
        var $p_08;
        var $43 = $12 + $n_09 | 0;
        HEAP8[$43] = HEAP8[$43] ^ HEAP8[$p_08];
        var $46 = $n_09 + 1 | 0;
        if ($46 >>> 0 < $2 >>> 0) {
          var $p_08 = $p_08 + 1 | 0;
          var $n_09 = $46;
        } else {
          break L2800;
        }
      }
    }
  } while (0);
  __gcry_free($32);
  var $48 = __gcry_malloc_secure($5);
  if (($48 | 0) == 0) {
    var $51 = _gpg_err_code_from_syserror();
    __gcry_free($12);
    var $_0 = $51;
    var $_0;
    return $_0;
  }
  var $53 = _mgf1($48, $5, $18, $31, $algo);
  if (($53 | 0) != 0) {
    __gcry_free($48);
    __gcry_free($12);
    var $_0 = $53;
    var $_0;
    return $_0;
  }
  L2812 : do {
    if ($_sum >>> 0 > 1) {
      var $56 = $5 + 1 | 0;
      var $p_15 = $48;
      var $n_16 = 1;
      while (1) {
        var $n_16;
        var $p_15;
        var $61 = $12 + $n_16 | 0;
        HEAP8[$61] = HEAP8[$61] ^ HEAP8[$p_15];
        var $64 = $n_16 + 1 | 0;
        if (($64 | 0) == ($56 | 0)) {
          break L2812;
        } else {
          var $p_15 = $p_15 + 1 | 0;
          var $n_16 = $64;
        }
      }
    }
  } while (0);
  __gcry_free($48);
  var $65 = __gcry_mpi_scan($r_result, 5, $12, $2, 0);
  do {
    if (($65 | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $rc_0 = $53;
        break;
      }
      __gcry_log_mpidump(467736, HEAP32[$r_result >> 2]);
      var $rc_0 = $53;
    } else {
      var $rc_0 = _gcry_err_code663($65);
    }
  } while (0);
  var $rc_0;
  __gcry_free($12);
  var $_0 = $rc_0;
  var $_0;
  return $_0;
}
_oaep_encode["X"] = 1;
function _pss_verify_cmp($opaque, $tmp) {
  return _pss_verify(HEAP32[$opaque + 36 >> 2], $tmp, HEAP32[$opaque + 4 >> 2] - 1 | 0, HEAP32[$opaque + 16 >> 2], HEAP32[$opaque + 28 >> 2]);
}
function _gcry_pk_lookup_func_name($spec, $data) {
  var label = 0;
  var $3 = HEAP32[$spec + 4 >> 2];
  var $ret_0 = _strcasecmp($data, HEAP32[$spec >> 2]);
  var $aliases_0 = $3;
  while (1) {
    var $aliases_0;
    var $ret_0;
    var $8 = ($ret_0 | 0) != 0;
    if (!$8) {
      label = 2142;
      break;
    }
    var $10 = HEAP32[$aliases_0 >> 2];
    if (($10 | 0) == 0) {
      label = 2141;
      break;
    }
    var $ret_0 = _strcasecmp($data, $10);
    var $aliases_0 = $aliases_0 + 4 | 0;
  }
  if (label == 2142) {
    var $15 = $8 & 1;
    var $16 = $15 ^ 1;
    return $16;
  } else if (label == 2141) {
    var $15 = $8 & 1;
    var $16 = $15 ^ 1;
    return $16;
  }
}
function _dummy_generate($algorithm, $nbits, $dummy, $skey, $retfactors) {
  __gcry_fips_signal_error(478540, 120, 494724, 0, 465696);
  return 69;
}
function _dummy_check_secret_key($algorithm, $skey) {
  __gcry_fips_signal_error(478540, 129, 494860, 0, 465696);
  return 69;
}
function _dummy_encrypt($algorithm, $resarr, $data, $pkey, $flags) {
  __gcry_fips_signal_error(478540, 142, 494784, 0, 465696);
  return 69;
}
function _dummy_decrypt($algorithm, $result, $data, $skey, $flags) {
  __gcry_fips_signal_error(478540, 155, 494844, 0, 465696);
  return 69;
}
function _dummy_sign($algorithm, $resarr, $data, $skey) {
  __gcry_fips_signal_error(478540, 167, 494696, 0, 465696);
  return 69;
}
function _dummy_verify($algorithm, $hash, $data, $pkey, $cmp, $opaquev) {
  __gcry_fips_signal_error(478540, 182, 494680, 0, 465696);
  return 69;
}
function _dummy_get_nbits($algorithm, $pkey) {
  __gcry_fips_signal_error(478540, 191, 494708, 0, 465696);
  return 0;
}
function _do_setkey($context, $key, $keylen) {
  return _setkey_core($context, $key, $keylen, 1);
}
function _pkcs1_encode_for_signature($r_result, $nbits, $value, $valuelen, $algo) {
  var $asnlen$s2;
  var $nframe$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  var $nframe = __stackBase__ + 100, $nframe$s2 = $nframe >> 2;
  var $asnlen = __stackBase__ + 104, $asnlen$s2 = $asnlen >> 2;
  HEAP32[$nframe$s2] = ($nbits + 7 | 0) >>> 3;
  HEAP32[$asnlen$s2] = 100;
  var $3 = __gcry_md_get_algo_dlen($algo);
  var $4 = __stackBase__ | 0;
  if ((__gcry_md_algo_info($algo, 10, $4, $asnlen) | 0) != 0) {
    var $_0 = 69;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($3 | 0) != ($valuelen | 0)) {
    var $_0 = 70;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($3 | 0) == 0) {
    var $_0 = 66;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $15 = HEAP32[$nframe$s2];
  if (($3 + HEAP32[$asnlen$s2] + 4 | 0) >>> 0 > $15 >>> 0) {
    var $_0 = 66;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $18 = __gcry_malloc($15);
  if (($18 | 0) == 0) {
    var $_0 = _gpg_err_code_from_syserror();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP8[$18] = 0;
  HEAP8[$18 + 1 | 0] = 1;
  var $27 = HEAP32[$nframe$s2] - $valuelen - HEAP32[$asnlen$s2] | 0;
  var $28 = $27 - 3 | 0;
  if (($28 | 0) <= 1) {
    __gcry_assert_failed(467320, 478540, 1104, 494144);
  }
  _memset($18 + 2 | 0, -1, $28);
  HEAP8[$18 + ($27 - 1) | 0] = 0;
  _memcpy($18 + $27 | 0, $4, HEAP32[$asnlen$s2]);
  var $38 = HEAP32[$asnlen$s2] + $27 | 0;
  _memcpy($18 + $38 | 0, $value, $valuelen);
  var $40 = $38 + $valuelen | 0;
  if (($40 | 0) != (HEAP32[$nframe$s2] | 0)) {
    __gcry_assert_failed(467208, 478540, 1112, 494144);
  }
  var $45 = __gcry_mpi_scan($r_result, 5, $18, $40, $nframe);
  do {
    if (($45 | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $rc_0 = 0;
        break;
      }
      __gcry_log_mpidump(467040, HEAP32[$r_result >> 2]);
      var $rc_0 = 0;
    } else {
      var $rc_0 = _gcry_err_code663($45);
    }
  } while (0);
  var $rc_0;
  __gcry_free($18);
  var $_0 = $rc_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_pkcs1_encode_for_signature["X"] = 1;
function _pss_encode($r_result, $nbits, $algo, $value, $valuelen, $saltlen, $random_override, $random_override_len) {
  var label = 0;
  var $1 = $nbits + 7 | 0;
  var $2 = $1 >>> 3;
  var $3 = __gcry_md_get_algo_dlen($algo);
  if (($3 | 0) == 0) {
    __gcry_assert_failed(467928, 478540, 1541, 494116);
  }
  var $7 = $3 + 8 | 0;
  var $8 = $7 + $saltlen | 0;
  var $10 = $2 - $3 - 1 | 0;
  var $11 = $8 + $10 | 0;
  var $12 = __gcry_malloc($11);
  var $13 = ($12 | 0) != 0;
  if (!$13) {
    var $rc_078 = _gpg_err_code_from_syserror();
    var $rc_078;
    return $rc_078;
  }
  var $16 = $12 + $7 | 0;
  var $17 = $12 + $8 | 0;
  do {
    if (($3 | 0) == ($valuelen | 0)) {
      _memcpy($12 + 8 | 0, $value, $3);
      do {
        if ($2 >>> 0 < ($3 + ($saltlen + 2) | 0) >>> 0) {
          var $rc_07 = 66;
        } else {
          var $25 = __gcry_malloc($2);
          if (($25 | 0) == 0) {
            var $rc_07 = _gpg_err_code_from_syserror();
            break;
          }
          var $_sum2 = $2 - 1 | 0;
          var $_sum3 = $_sum2 - $3 | 0;
          var $30 = $25 + $_sum3 | 0;
          do {
            if (($saltlen | 0) == 0) {
              label = 2186;
            } else {
              if (($random_override | 0) == 0) {
                __gcry_randomize($16, $saltlen, 1);
                label = 2186;
                break;
              }
              if (($random_override_len | 0) != ($saltlen | 0)) {
                var $rc_0 = 45;
                break;
              }
              _memcpy($16, $random_override, $saltlen);
              label = 2186;
              break;
            }
          } while (0);
          do {
            if (label == 2186) {
              var $39 = $12;
              var $st$3$0 = $39 | 0;
              tempBigInt = 0;
              HEAP8[$st$3$0] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$st$3$0 + 1] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$st$3$0 + 2] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$st$3$0 + 3] = tempBigInt & 255;
              var $st$3$1 = $39 + 4 | 0;
              tempBigInt = 0;
              HEAP8[$st$3$1] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$st$3$1 + 1] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$st$3$1 + 2] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$st$3$1 + 3] = tempBigInt & 255;
              __gcry_md_hash_buffer($algo, $30, $12, $8);
              var $_sum4 = $_sum3 - $saltlen | 0;
              var $_sum5 = $_sum4 - 1 | 0;
              _memset($25, 0, $_sum5);
              HEAP8[$25 + $_sum5 | 0] = 1;
              _memcpy($25 + $_sum4 | 0, $16, $saltlen);
              _mgf1($17, $10, $30, $3, $algo);
              L2892 : do {
                if (($10 | 0) != 0) {
                  var $p_013 = $17;
                  var $n_014 = 0;
                  while (1) {
                    var $n_014;
                    var $p_013;
                    var $45 = $25 + $n_014 | 0;
                    HEAP8[$45] = HEAP8[$45] ^ HEAP8[$p_013];
                    var $48 = $n_014 + 1 | 0;
                    if ($48 >>> 0 < $10 >>> 0) {
                      var $p_013 = $p_013 + 1 | 0;
                      var $n_014 = $48;
                    } else {
                      break L2892;
                    }
                  }
                }
              } while (0);
              HEAP8[$25] = HEAPU8[$25] & 255 >>> ((($1 & -8) - $nbits | 0) >>> 0) & 255;
              HEAP8[$25 + $_sum2 | 0] = -68;
              var $59 = __gcry_mpi_scan($r_result, 5, $25, $2, 0);
              if (($59 | 0) != 0) {
                var $rc_0 = _gcry_err_code663($59);
                break;
              }
              if ((__gcry_get_debug_flag(1) | 0) == 0) {
                var $rc_0 = 0;
                break;
              }
              __gcry_log_mpidump(467856, HEAP32[$r_result >> 2]);
              var $rc_0 = 0;
            }
          } while (0);
          var $rc_0;
          if (($25 | 0) == 0) {
            var $rc_07 = $rc_0;
            break;
          }
          L2902 : do {
            if (($2 | 0) != 0) {
              var $_vptr_011 = $25;
              var $_vlen_012 = $2;
              while (1) {
                var $_vlen_012;
                var $_vptr_011;
                HEAP8[$_vptr_011] = 0;
                var $72 = $_vlen_012 - 1 | 0;
                if (($72 | 0) == 0) {
                  break L2902;
                } else {
                  var $_vptr_011 = $_vptr_011 + 1 | 0;
                  var $_vlen_012 = $72;
                }
              }
            }
          } while (0);
          __gcry_free($25);
          var $rc_07 = $rc_0;
        }
      } while (0);
      var $rc_07;
      if ($13) {
        var $rc_079_ph = $rc_07;
        break;
      } else {
        var $rc_078 = $rc_07;
      }
      var $rc_078;
      return $rc_078;
    } else {
      var $rc_079_ph = 139;
    }
  } while (0);
  var $rc_079_ph;
  L2909 : do {
    if (($11 | 0) != 0) {
      var $_vptr1_018 = $12;
      var $_vlen2_019 = $11;
      while (1) {
        var $_vlen2_019;
        var $_vptr1_018;
        HEAP8[$_vptr1_018] = 0;
        var $76 = $_vlen2_019 - 1 | 0;
        if (($76 | 0) == 0) {
          break L2909;
        } else {
          var $_vptr1_018 = $_vptr1_018 + 1 | 0;
          var $_vlen2_019 = $76;
        }
      }
    }
  } while (0);
  __gcry_free($12);
  var $rc_078 = $rc_079_ph;
  var $rc_078;
  return $rc_078;
}
_pss_encode["X"] = 1;
function _pss_verify($value, $encoded, $nbits, $algo, $saltlen) {
  var $em$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $em = __stackBase__, $em$s2 = $em >> 2;
  HEAP32[$em$s2] = 0;
  var $1 = $nbits + 7 | 0;
  var $2 = $1 >>> 3;
  var $3 = __gcry_md_get_algo_dlen($algo);
  if (($3 | 0) == 0) {
    __gcry_assert_failed(467928, 478540, 1669, 494104);
  }
  var $7 = $3 + 8 | 0;
  var $8 = $7 + $saltlen | 0;
  var $9 = $2 - $3 | 0;
  var $10 = $9 - 1 | 0;
  var $_ = $8 >>> 0 < $10 >>> 0 ? $10 : $8;
  var $12 = $_ + $3 | 0;
  var $13 = __gcry_malloc($12);
  var $14 = ($13 | 0) != 0;
  do {
    if ($14) {
      var $18 = $13 + $_ | 0;
      var $19 = _octet_string_from_mpi(0, $18, $value, $3);
      if (($19 | 0) != 0) {
        var $rc_0_ph = $19;
        label = 2221;
        break;
      }
      var $22 = _octet_string_from_mpi($em, 0, $encoded, $2);
      if (($22 | 0) != 0) {
        var $rc_0_ph = $22;
        label = 2221;
        break;
      }
      if ($2 >>> 0 < ($3 + ($saltlen + 2) | 0) >>> 0) {
        var $rc_0_ph = 66;
        label = 2221;
        break;
      }
      var $29 = $2 - 1 | 0;
      var $30 = HEAP32[$em$s2];
      if (HEAP8[$30 + $29 | 0] << 24 >> 24 != -68) {
        var $rc_0 = 8;
        var $86 = $30;
        break;
      }
      var $35 = $30 + ($29 - $3) | 0;
      var $40 = 255 >>> ((($1 & -8) - $nbits | 0) >>> 0);
      if ((HEAPU8[$30] & ($40 ^ -1) | 0) != 0) {
        var $rc_0_ph = 8;
        label = 2221;
        break;
      }
      _mgf1($13, $10, $35, $3, $algo);
      L2925 : do {
        if (($10 | 0) != 0) {
          var $p_03 = $13;
          var $n_04 = 0;
          while (1) {
            var $n_04;
            var $p_03;
            var $49 = HEAP32[$em$s2] + $n_04 | 0;
            HEAP8[$49] = HEAP8[$49] ^ HEAP8[$p_03];
            var $52 = $n_04 + 1 | 0;
            if ($52 >>> 0 < $10 >>> 0) {
              var $p_03 = $p_03 + 1 | 0;
              var $n_04 = $52;
            } else {
              break L2925;
            }
          }
        }
      } while (0);
      var $55 = HEAP32[$em$s2];
      HEAP8[$55] = HEAPU8[$55] & $40 & 255;
      var $61 = $9 - $saltlen - 2 | 0;
      var $62 = HEAP32[$em$s2];
      var $n_1 = 0;
      while (1) {
        var $n_1;
        if ($n_1 >>> 0 >= $61 >>> 0) {
          break;
        }
        if (HEAP8[$62 + $n_1 | 0] << 24 >> 24 == 0) {
          var $n_1 = $n_1 + 1 | 0;
        } else {
          break;
        }
      }
      if (($n_1 | 0) != ($61 | 0)) {
        var $rc_0_ph = 8;
        label = 2221;
        break;
      }
      var $72 = HEAP32[$em$s2];
      if (HEAP8[$72 + $n_1 | 0] << 24 >> 24 != 1) {
        var $rc_0 = 8;
        var $86 = $72;
        break;
      }
      var $79 = $13;
      var $st$5$0 = $79 | 0;
      tempBigInt = 0;
      HEAP8[$st$5$0] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$5$0 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$5$0 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$5$0 + 3] = tempBigInt & 255;
      var $st$5$1 = $79 + 4 | 0;
      tempBigInt = 0;
      HEAP8[$st$5$1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$5$1 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$5$1 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$st$5$1 + 3] = tempBigInt & 255;
      _memcpy($13 + 8 | 0, $18, $3);
      _memcpy($13 + $7 | 0, $n_1 + ($72 + 1) | 0, $saltlen);
      __gcry_md_hash_buffer($algo, $13, $13, $8);
      var $rc_0_ph = (_memcmp($35, $13, $3) | 0) != 0 ? 8 : 0;
      label = 2221;
      break;
    } else {
      var $rc_0_ph = _gpg_err_code_from_syserror();
      label = 2221;
      break;
    }
  } while (0);
  if (label == 2221) {
    var $rc_0_ph;
    var $rc_0 = $rc_0_ph;
    var $86 = HEAP32[$em$s2];
  }
  var $86;
  var $rc_0;
  if (($86 | 0) != 0) {
    L2941 : do {
      if (($2 | 0) != 0) {
        var $_vptr_05 = $86;
        var $_vlen_06 = $2;
        while (1) {
          var $_vlen_06;
          var $_vptr_05;
          HEAP8[$_vptr_05] = 0;
          var $90 = $_vlen_06 - 1 | 0;
          if (($90 | 0) == 0) {
            break L2941;
          } else {
            var $_vptr_05 = $_vptr_05 + 1 | 0;
            var $_vlen_06 = $90;
          }
        }
      }
    } while (0);
    __gcry_free(HEAP32[$em$s2]);
  }
  if (!$14) {
    STACKTOP = __stackBase__;
    return $rc_0;
  }
  L2949 : do {
    if (($12 | 0) != 0) {
      var $_vptr1_010 = $13;
      var $_vlen2_011 = $12;
      while (1) {
        var $_vlen2_011;
        var $_vptr1_010;
        HEAP8[$_vptr1_010] = 0;
        var $96 = $_vlen2_011 - 1 | 0;
        if (($96 | 0) == 0) {
          break L2949;
        } else {
          var $_vptr1_010 = $_vptr1_010 + 1 | 0;
          var $_vlen2_011 = $96;
        }
      }
    }
  } while (0);
  __gcry_free($13);
  STACKTOP = __stackBase__;
  return $rc_0;
}
_pss_verify["X"] = 1;
function _sexp_elements_extract_ecc($key_sexp, $element_names, $elements, $extraspec) {
  var $params14$s2;
  var $params$s2;
  var $elements$s2 = $elements >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $params = __stackBase__, $params$s2 = $params >> 2;
  var $params14$s2 = $params >> 2;
  if (HEAP8[$element_names] << 24 >> 24 == 0) {
    __gcry_assert_failed(466196, 478540, 1872, 494032);
  } else {
    var $idx_011 = 0;
    var $name_012 = $element_names;
  }
  while (1) {
    var $name_012;
    var $idx_011;
    HEAP32[($idx_011 << 2 >> 2) + $elements$s2] = 0;
    var $4 = $name_012 + 1 | 0;
    var $5 = $idx_011 + 1 | 0;
    if (HEAP8[$4] << 24 >> 24 == 0) {
      break;
    } else {
      var $idx_011 = $5;
      var $name_012 = $4;
    }
  }
  if (($5 | 0) <= 4) {
    __gcry_assert_failed(466196, 478540, 1872, 494032);
  }
  do {
    if (($5 | 0) == 5) {
      HEAP32[$elements$s2 + 5] = 0;
      var $name_1 = $element_names;
      var $idx_1 = 0;
      break;
    } else {
      var $name_1 = $element_names;
      var $idx_1 = 0;
    }
  } while (0);
  while (1) {
    var $idx_1;
    var $name_1;
    if (HEAP8[$name_1] << 24 >> 24 == 0) {
      label = 2244;
      break;
    }
    var $15 = __gcry_sexp_find_token($key_sexp, $name_1, 1);
    if (($15 | 0) == 0) {
      HEAP32[($idx_1 << 2 >> 2) + $elements$s2] = 0;
    } else {
      var $21 = ($idx_1 << 2) + $elements | 0;
      HEAP32[$21 >> 2] = __gcry_sexp_nth_mpi($15, 1, 5);
      __gcry_sexp_release($15);
      if ((HEAP32[$21 >> 2] | 0) == 0) {
        var $err_11_ph = 65;
        break;
      }
    }
    var $name_1 = $name_1 + 1 | 0;
    var $idx_1 = $idx_1 + 1 | 0;
  }
  L2972 : do {
    if (label == 2244) {
      var $28 = __gcry_sexp_find_token($key_sexp, 465868, 5);
      do {
        if (($28 | 0) == 0) {
          var $err_0 = 0;
        } else {
          var $31 = $extraspec + 12 | 0;
          if ((HEAP32[$31 >> 2] | 0) == 0) {
            __gcry_sexp_release($28);
            var $err_11_ph = 65;
            break L2972;
          }
          HEAP32[$params14$s2] = 0;
          HEAP32[$params14$s2 + 1] = 0;
          HEAP32[$params14$s2 + 2] = 0;
          HEAP32[$params14$s2 + 3] = 0;
          HEAP32[$params14$s2 + 4] = 0;
          HEAP32[$params14$s2 + 5] = 0;
          var $35 = __gcry_sexp_nth_string($28, 1);
          __gcry_sexp_release($28);
          if (($35 | 0) == 0) {
            var $err_11_ph = 65;
            break L2972;
          }
          var $40 = FUNCTION_TABLE[HEAP32[$31 >> 2]]($35, $params | 0);
          __gcry_free($35);
          if (($40 | 0) != 0) {
            var $err_11_ph = $40;
            break L2972;
          }
          var $45 = HEAP32[$params$s2];
          if ((HEAP32[$elements$s2] | 0) == 0) {
            HEAP32[$elements$s2] = $45;
          } else {
            __gcry_mpi_free($45);
          }
          var $49 = $elements + 4 | 0;
          var $53 = HEAP32[$params$s2 + 1];
          if ((HEAP32[$49 >> 2] | 0) == 0) {
            HEAP32[$49 >> 2] = $53;
          } else {
            __gcry_mpi_free($53);
          }
          var $81 = $elements + 8 | 0;
          var $85 = HEAP32[$params$s2 + 2];
          if ((HEAP32[$81 >> 2] | 0) == 0) {
            HEAP32[$81 >> 2] = $85;
          } else {
            __gcry_mpi_free($85);
          }
          var $89 = $elements + 12 | 0;
          var $93 = HEAP32[$params$s2 + 3];
          if ((HEAP32[$89 >> 2] | 0) == 0) {
            HEAP32[$89 >> 2] = $93;
          } else {
            __gcry_mpi_free($93);
          }
          var $97 = $elements + 16 | 0;
          var $101 = HEAP32[$params$s2 + 4];
          if ((HEAP32[$97 >> 2] | 0) == 0) {
            HEAP32[$97 >> 2] = $101;
          } else {
            __gcry_mpi_free($101);
          }
          var $105 = $elements + 20 | 0;
          var $109 = HEAP32[$params$s2 + 5];
          if ((HEAP32[$105 >> 2] | 0) == 0) {
            HEAP32[$105 >> 2] = $109;
            var $err_0 = $40;
            break;
          } else {
            __gcry_mpi_free($109);
            var $err_0 = $40;
            break;
          }
        }
      } while (0);
      var $err_0;
      var $name_2 = $element_names;
      var $idx_4 = 0;
      while (1) {
        var $idx_4;
        var $name_2;
        if (HEAP8[$name_2] << 24 >> 24 == 0) {
          break;
        }
        if ((HEAP32[($idx_4 << 2 >> 2) + $elements$s2] | 0) == 0) {
          var $err_11_ph = 68;
          break L2972;
        }
        var $name_2 = $name_2 + 1 | 0;
        var $idx_4 = $idx_4 + 1 | 0;
      }
      if (($err_0 | 0) == 0) {
        var $err_12 = 0;
      } else {
        var $err_11_ph = $err_0;
        break;
      }
      var $err_12;
      STACKTOP = __stackBase__;
      return $err_12;
    }
  } while (0);
  var $err_11_ph;
  if (HEAP8[$element_names] << 24 >> 24 == 0) {
    var $err_12 = $err_11_ph;
    var $err_12;
    STACKTOP = __stackBase__;
    return $err_12;
  } else {
    var $idx_57 = 0;
    var $name_38 = $element_names;
  }
  while (1) {
    var $name_38;
    var $idx_57;
    var $70 = HEAP32[($idx_57 << 2 >> 2) + $elements$s2];
    if (($70 | 0) != 0) {
      __gcry_free($70);
    }
    var $74 = $name_38 + 1 | 0;
    if (HEAP8[$74] << 24 >> 24 == 0) {
      var $err_12 = $err_11_ph;
      break;
    } else {
      var $idx_57 = $idx_57 + 1 | 0;
      var $name_38 = $74;
    }
  }
  var $err_12;
  STACKTOP = __stackBase__;
  return $err_12;
}
_sexp_elements_extract_ecc["X"] = 1;
function _do_encrypt($context, $outbuf, $inbuf) {
  var $32$s1;
  var $32$s1 = $context >> 1;
  var $i_02 = 0;
  var $word0_03 = HEAPU8[$inbuf + 1 | 0] << 8 | HEAPU8[$inbuf];
  var $word1_04 = HEAPU8[$inbuf + 3 | 0] << 8 | HEAPU8[$inbuf + 2 | 0];
  var $word2_05 = HEAPU8[$inbuf + 5 | 0] << 8 | HEAPU8[$inbuf + 4 | 0];
  var $word3_06 = HEAPU8[$inbuf + 7 | 0] << 8 | HEAPU8[$inbuf + 6 | 0];
  while (1) {
    var $word3_06;
    var $word2_05;
    var $word1_04;
    var $word0_03;
    var $i_02;
    var $34 = $i_02 << 2;
    var $42 = ((($word3_06 & $word2_05) + $word0_03 & 65535) + ($word1_04 & ($word3_06 ^ -1)) & 65535) + HEAP16[($34 << 1 >> 1) + $32$s1] & 65535;
    var $45 = $42 << 1 | ($42 & 65535) >>> 15;
    var $54 = ((HEAP16[(($34 | 1) << 1 >> 1) + $32$s1] + $word1_04 & 65535) + ($word2_05 & ($45 ^ -1)) & 65535) + ($45 & $word3_06) & 65535;
    var $57 = $54 << 2 | ($54 & 65535) >>> 14;
    var $66 = ((HEAP16[(($34 | 2) << 1 >> 1) + $32$s1] + $word2_05 & 65535) + ($word3_06 & ($57 ^ -1)) & 65535) + ($57 & $45) & 65535;
    var $69 = $66 << 3 | ($66 & 65535) >>> 13;
    var $78 = ((HEAP16[(($34 | 3) << 1 >> 1) + $32$s1] + $word3_06 & 65535) + ($45 & ($69 ^ -1)) & 65535) + ($69 & $57) & 65535;
    var $81 = $78 << 5 | ($78 & 65535) >>> 11;
    if (($i_02 | 0) == 10 | ($i_02 | 0) == 4) {
      var $87 = HEAP16[(($81 & 63) << 1 >> 1) + $32$s1] + $45 & 65535;
      var $92 = HEAP16[(($87 & 63) << 1 >> 1) + $32$s1] + $57 & 65535;
      var $97 = HEAP16[(($92 & 63) << 1 >> 1) + $32$s1] + $69 & 65535;
      var $word3_1 = HEAP16[(($97 & 63) << 1 >> 1) + $32$s1] + $81 & 65535;
      var $word2_1 = $97;
      var $word1_1 = $92;
      var $word0_1 = $87;
    } else {
      var $word3_1 = $81;
      var $word2_1 = $69;
      var $word1_1 = $57;
      var $word0_1 = $45;
    }
    var $word0_1;
    var $word1_1;
    var $word2_1;
    var $word3_1;
    var $104 = $i_02 + 1 | 0;
    if (($104 | 0) == 16) {
      break;
    } else {
      var $i_02 = $104;
      var $word0_03 = $word0_1;
      var $word1_04 = $word1_1;
      var $word2_05 = $word2_1;
      var $word3_06 = $word3_1;
    }
  }
  HEAP8[$outbuf] = $word0_1 & 255;
  HEAP8[$outbuf + 1 | 0] = ($word0_1 & 65535) >>> 8 & 255;
  HEAP8[$outbuf + 2 | 0] = $word1_1 & 255;
  HEAP8[$outbuf + 3 | 0] = ($word1_1 & 65535) >>> 8 & 255;
  HEAP8[$outbuf + 4 | 0] = $word2_1 & 255;
  HEAP8[$outbuf + 5 | 0] = ($word2_1 & 65535) >>> 8 & 255;
  HEAP8[$outbuf + 6 | 0] = $word3_1 & 255;
  HEAP8[$outbuf + 7 | 0] = ($word3_1 & 65535) >>> 8 & 255;
  return;
}
_do_encrypt["X"] = 1;
function _do_decrypt($context, $outbuf, $inbuf) {
  var $32$s1;
  var $32$s1 = $context >> 1;
  var $i_021 = 15;
  var $word0_022 = HEAPU8[$inbuf + 1 | 0] << 8 | HEAPU8[$inbuf];
  var $word1_023 = HEAPU8[$inbuf + 3 | 0] << 8 | HEAPU8[$inbuf + 2 | 0];
  var $word2_024 = HEAPU8[$inbuf + 5 | 0] << 8 | HEAPU8[$inbuf + 4 | 0];
  var $word3_025 = HEAPU8[$inbuf + 7 | 0] << 8 | HEAPU8[$inbuf + 6 | 0];
  while (1) {
    var $word3_025;
    var $word2_024;
    var $word1_023;
    var $word0_022;
    var $i_021;
    var $34 = $i_021 << 2;
    var $44 = ((($word3_025 & 65535) >>> 5 | $word3_025 << 11) - (($word0_022 & ($word2_024 ^ -1)) + ($word2_024 & $word1_023) & 65535) & 65535) - HEAP16[(($34 | 3) << 1 >> 1) + $32$s1] & 65535;
    var $54 = (((($word2_024 & 65535) >>> 3 | $word2_024 << 13) - ($word1_023 & $word0_022) & 65535) - HEAP16[(($34 | 2) << 1 >> 1) + $32$s1] & 65535) - ($44 & ($word1_023 ^ -1)) & 65535;
    var $64 = (((($word1_023 & 65535) >>> 2 | $word1_023 << 14) - HEAP16[(($34 | 1) << 1 >> 1) + $32$s1] & 65535) - ($44 & $word0_022) & 65535) - ($54 & ($word0_022 ^ -1)) & 65535;
    var $73 = (((($word0_022 & 65535) >>> 1 | $word0_022 << 15) - HEAP16[($34 << 1 >> 1) + $32$s1] & 65535) - ($54 & $44) & 65535) - ($64 & ($44 ^ -1)) & 65535;
    if (($i_021 | 0) == 11 | ($i_021 | 0) == 5) {
      var $80 = $44 - HEAP16[(($54 & 63) << 1 >> 1) + $32$s1] & 65535;
      var $word3_1 = $80;
      var $word2_1 = $54 - HEAP16[(($64 & 63) << 1 >> 1) + $32$s1] & 65535;
      var $word1_1 = $64 - HEAP16[(($73 & 63) << 1 >> 1) + $32$s1] & 65535;
      var $word0_1 = $73 - HEAP16[(($80 & 63) << 1 >> 1) + $32$s1] & 65535;
    } else {
      var $word3_1 = $44;
      var $word2_1 = $54;
      var $word1_1 = $64;
      var $word0_1 = $73;
    }
    var $word0_1;
    var $word1_1;
    var $word2_1;
    var $word3_1;
    if (($i_021 | 0) > 0) {
      var $i_021 = $i_021 - 1 | 0;
      var $word0_022 = $word0_1;
      var $word1_023 = $word1_1;
      var $word2_024 = $word2_1;
      var $word3_025 = $word3_1;
    } else {
      break;
    }
  }
  HEAP8[$outbuf] = $word0_1 & 255;
  HEAP8[$outbuf + 1 | 0] = ($word0_1 & 65535) >>> 8 & 255;
  HEAP8[$outbuf + 2 | 0] = $word1_1 & 255;
  HEAP8[$outbuf + 3 | 0] = ($word1_1 & 65535) >>> 8 & 255;
  HEAP8[$outbuf + 4 | 0] = $word2_1 & 255;
  HEAP8[$outbuf + 5 | 0] = ($word2_1 & 65535) >>> 8 & 255;
  HEAP8[$outbuf + 6 | 0] = $word3_1 & 255;
  HEAP8[$outbuf + 7 | 0] = ($word3_1 & 65535) >>> 8 & 255;
  return;
}
_do_decrypt["X"] = 1;
function _setkey_core($context, $key, $keylen, $with_phase2) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $1 = $keylen << 3;
  do {
    if (HEAP8[412960]) {
      label = 2295;
    } else {
      HEAP8[412960] = 1;
      var $3 = _selftest707();
      HEAP32[103239] = $3;
      if (($3 | 0) == 0) {
        break;
      }
      __gcry_log_error(484032, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $3, tempInt));
      label = 2295;
      break;
    }
  } while (0);
  do {
    if (label == 2295) {
      if ((HEAP32[103239] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if ($keylen >>> 0 < 5) {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $9 = $context;
  var $i_07 = 0;
  while (1) {
    var $i_07;
    HEAP8[$context + $i_07 | 0] = HEAP8[$key + $i_07 | 0];
    var $15 = $i_07 + 1 | 0;
    if (($15 | 0) == ($keylen | 0)) {
      break;
    } else {
      var $i_07 = $15;
    }
  }
  L3048 : do {
    if ($keylen >>> 0 < 128) {
      var $i_15 = $keylen;
      while (1) {
        var $i_15;
        HEAP8[$context + $i_15 | 0] = HEAP8[(HEAPU8[$context + ($i_15 - 1) | 0] + HEAPU8[$context + ($i_15 - $keylen) | 0] & 255) + 438964 | 0];
        var $29 = $i_15 + 1 | 0;
        if (($29 | 0) == 128) {
          break L3048;
        } else {
          var $i_15 = $29;
        }
      }
    }
  } while (0);
  HEAP8[$context] = HEAP8[HEAPU8[$context] + 438964 | 0];
  L3052 : do {
    if (($with_phase2 | 0) == 0) {
      var $i_33 = 0;
    } else {
      var $36 = $1 >> 3;
      var $37 = 128 - $36 | 0;
      var $38 = $context + $37 | 0;
      var $42 = HEAP8[HEAPU8[$38] + 438964 | 0];
      HEAP8[$38] = $42;
      if (($36 | 0) == 128) {
        var $i_33 = 0;
        break;
      } else {
        var $x_01 = $42;
        var $_in = $37;
      }
      while (1) {
        var $_in;
        var $x_01;
        var $44 = $_in - 1 | 0;
        var $51 = HEAP8[((HEAP8[$context + $44 + $36 | 0] ^ $x_01) & 255) + 438964 | 0];
        HEAP8[$context + $44 | 0] = $51;
        if (($44 | 0) == 0) {
          var $i_33 = 0;
          break L3052;
        } else {
          var $x_01 = $51;
          var $_in = $44;
        }
      }
    }
  } while (0);
  while (1) {
    var $i_33;
    var $54 = $i_33 << 1;
    HEAP16[$9 + ($i_33 << 1) >> 1] = HEAPU8[$context + ($54 | 1) | 0] << 8 | HEAPU8[$context + $54 | 0];
    var $65 = $i_33 + 1 | 0;
    if (($65 | 0) == 64) {
      var $_0 = 0;
      break;
    } else {
      var $i_33 = $65;
    }
  }
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_setkey_core["X"] = 1;
function _selftest707() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 144 | 0;
  var $1 = __stackBase__;
  _setkey_core($1, 415832, 16, 0);
  var $3 = __stackBase__ + 128 | 0;
  _do_encrypt($1, $3, 415604);
  do {
    if ((_memcmp($3, 416648, 8) | 0) == 0) {
      _setkey_core($1, 415832, 16, 0);
      _do_decrypt($1, $3, $3);
      if ((_memcmp($3, 415604, 8) | 0) != 0) {
        var $_0 = 475116;
        break;
      }
      _setkey_core($1, 415768, 16, 0);
      _do_encrypt($1, $3, 415588);
      if ((_memcmp($3, 416600, 8) | 0) != 0) {
        var $_0 = 472668;
        break;
      }
      _setkey_core($1, 415768, 16, 0);
      _do_decrypt($1, $3, $3);
      if ((_memcmp($3, 415588, 8) | 0) != 0) {
        var $_0 = 471204;
        break;
      }
      _setkey_core($1, 415688, 16, 0);
      _do_encrypt($1, $3, 415564);
      if ((_memcmp($3, 416560, 8) | 0) != 0) {
        var $_0 = 469932;
        break;
      }
      _setkey_core($1, 415688, 16, 0);
      _do_decrypt($1, $3, $3);
      var $_0 = (_memcmp($3, 415564, 8) | 0) == 0 ? 0 : 468236;
    } else {
      var $_0 = 478252;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_aes_cfb_enc($context, $iv, $outbuf_arg, $inbuf_arg, $nblocks) {
  var $1 = $context;
  if (($nblocks | 0) == 0) {
    __gcry_burn_stack(56);
    return;
  } else {
    var $_05 = $nblocks;
    var $outbuf_06 = $outbuf_arg;
    var $inbuf_07 = $inbuf_arg;
  }
  while (1) {
    var $inbuf_07;
    var $outbuf_06;
    var $_05;
    _do_encrypt_aligned($1, $iv, $iv);
    var $6 = $iv + 1 | 0;
    var $8 = HEAP8[$iv] ^ HEAP8[$inbuf_07];
    HEAP8[$iv] = $8;
    HEAP8[$outbuf_06] = $8;
    var $12 = $iv + 2 | 0;
    var $14 = HEAP8[$6] ^ HEAP8[$inbuf_07 + 1 | 0];
    HEAP8[$6] = $14;
    HEAP8[$outbuf_06 + 1 | 0] = $14;
    var $18 = $iv + 3 | 0;
    var $20 = HEAP8[$12] ^ HEAP8[$inbuf_07 + 2 | 0];
    HEAP8[$12] = $20;
    HEAP8[$outbuf_06 + 2 | 0] = $20;
    var $24 = $iv + 4 | 0;
    var $26 = HEAP8[$18] ^ HEAP8[$inbuf_07 + 3 | 0];
    HEAP8[$18] = $26;
    HEAP8[$outbuf_06 + 3 | 0] = $26;
    var $30 = $iv + 5 | 0;
    var $32 = HEAP8[$24] ^ HEAP8[$inbuf_07 + 4 | 0];
    HEAP8[$24] = $32;
    HEAP8[$outbuf_06 + 4 | 0] = $32;
    var $36 = $iv + 6 | 0;
    var $38 = HEAP8[$30] ^ HEAP8[$inbuf_07 + 5 | 0];
    HEAP8[$30] = $38;
    HEAP8[$outbuf_06 + 5 | 0] = $38;
    var $42 = $iv + 7 | 0;
    var $44 = HEAP8[$36] ^ HEAP8[$inbuf_07 + 6 | 0];
    HEAP8[$36] = $44;
    HEAP8[$outbuf_06 + 6 | 0] = $44;
    var $48 = $iv + 8 | 0;
    var $50 = HEAP8[$42] ^ HEAP8[$inbuf_07 + 7 | 0];
    HEAP8[$42] = $50;
    HEAP8[$outbuf_06 + 7 | 0] = $50;
    var $54 = $iv + 9 | 0;
    var $56 = HEAP8[$48] ^ HEAP8[$inbuf_07 + 8 | 0];
    HEAP8[$48] = $56;
    HEAP8[$outbuf_06 + 8 | 0] = $56;
    var $60 = $iv + 10 | 0;
    var $62 = HEAP8[$54] ^ HEAP8[$inbuf_07 + 9 | 0];
    HEAP8[$54] = $62;
    HEAP8[$outbuf_06 + 9 | 0] = $62;
    var $66 = $iv + 11 | 0;
    var $68 = HEAP8[$60] ^ HEAP8[$inbuf_07 + 10 | 0];
    HEAP8[$60] = $68;
    HEAP8[$outbuf_06 + 10 | 0] = $68;
    var $72 = $iv + 12 | 0;
    var $74 = HEAP8[$66] ^ HEAP8[$inbuf_07 + 11 | 0];
    HEAP8[$66] = $74;
    HEAP8[$outbuf_06 + 11 | 0] = $74;
    var $78 = $iv + 13 | 0;
    var $80 = HEAP8[$72] ^ HEAP8[$inbuf_07 + 12 | 0];
    HEAP8[$72] = $80;
    HEAP8[$outbuf_06 + 12 | 0] = $80;
    var $84 = $iv + 14 | 0;
    var $86 = HEAP8[$78] ^ HEAP8[$inbuf_07 + 13 | 0];
    HEAP8[$78] = $86;
    HEAP8[$outbuf_06 + 13 | 0] = $86;
    var $90 = $iv + 15 | 0;
    var $92 = HEAP8[$84] ^ HEAP8[$inbuf_07 + 14 | 0];
    HEAP8[$84] = $92;
    HEAP8[$outbuf_06 + 14 | 0] = $92;
    var $96 = HEAP8[$90] ^ HEAP8[$inbuf_07 + 15 | 0];
    HEAP8[$90] = $96;
    HEAP8[$outbuf_06 + 15 | 0] = $96;
    var $97 = $_05 - 1 | 0;
    if (($97 | 0) == 0) {
      break;
    } else {
      var $_05 = $97;
      var $outbuf_06 = $outbuf_06 + 16 | 0;
      var $inbuf_07 = $inbuf_07 + 16 | 0;
    }
  }
  __gcry_burn_stack(56);
  return;
}
__gcry_aes_cfb_enc["X"] = 1;
function _do_encrypt_aligned($ctx, $b, $a) {
  var $121$s2;
  var $98$s2;
  var $75$s2;
  var $52$s2;
  var $5$s2;
  var $ctx$s2 = $ctx >> 2;
  var $2 = HEAP32[$ctx$s2 + 120];
  var $5$s2 = $ctx >> 2;
  var $9 = HEAP32[$ctx$s2] ^ HEAP32[$a >> 2];
  var $16 = HEAP32[$ctx$s2 + 1] ^ HEAP32[$a + 4 >> 2];
  var $23 = HEAP32[$ctx$s2 + 2] ^ HEAP32[$a + 8 >> 2];
  var $30 = HEAP32[$ctx$s2 + 3] ^ HEAP32[$a + 12 >> 2];
  var $52$s2 = $b >> 2;
  HEAP32[$52$s2] = HEAP32[(($16 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($9 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($23 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($30 >>> 24 << 2) + 503868 >> 2];
  var $74 = $b + 4 | 0;
  var $75$s2 = $74 >> 2;
  HEAP32[$75$s2] = HEAP32[(($23 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($16 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($30 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($9 >>> 24 << 2) + 503868 >> 2];
  var $97 = $b + 8 | 0;
  var $98$s2 = $97 >> 2;
  HEAP32[$98$s2] = HEAP32[(($30 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($23 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($9 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($16 >>> 24 << 2) + 503868 >> 2];
  var $120 = $b + 12 | 0;
  var $121$s2 = $120 >> 2;
  HEAP32[$121$s2] = HEAP32[(($9 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($30 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($16 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($23 >>> 24 << 2) + 503868 >> 2];
  var $122 = $2 - 1 | 0;
  var $124 = HEAP32[$52$s2];
  L3074 : do {
    if (($122 | 0) > 1) {
      var $125 = $2 - 1 | 0;
      var $r_035 = 1;
      var $127 = $124;
      while (1) {
        var $127;
        var $r_035;
        var $131 = HEAP32[($r_035 << 4 >> 2) + $5$s2] ^ $127;
        var $136 = HEAP32[(($r_035 << 4) + 4 >> 2) + $5$s2] ^ HEAP32[$75$s2];
        var $141 = HEAP32[(($r_035 << 4) + 8 >> 2) + $5$s2] ^ HEAP32[$98$s2];
        var $146 = HEAP32[(($r_035 << 4) + 12 >> 2) + $5$s2] ^ HEAP32[$121$s2];
        HEAP32[$52$s2] = HEAP32[(($136 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($131 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($141 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($146 >>> 24 << 2) + 503868 >> 2];
        HEAP32[$75$s2] = HEAP32[(($141 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($136 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($146 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($131 >>> 24 << 2) + 503868 >> 2];
        HEAP32[$98$s2] = HEAP32[(($146 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($141 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($131 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($136 >>> 24 << 2) + 503868 >> 2];
        HEAP32[$121$s2] = HEAP32[(($131 >>> 8 & 255) << 2) + 505916 >> 2] ^ HEAP32[(($146 & 255) << 2) + 506940 >> 2] ^ HEAP32[(($136 >>> 16 & 255) << 2) + 504892 >> 2] ^ HEAP32[($141 >>> 24 << 2) + 503868 >> 2];
        var $231 = $r_035 + 1 | 0;
        var $232 = HEAP32[$52$s2];
        if (($231 | 0) == ($125 | 0)) {
          var $_lcssa34 = $232;
          break L3074;
        } else {
          var $r_035 = $231;
          var $127 = $232;
        }
      }
    } else {
      var $_lcssa34 = $124;
    }
  } while (0);
  var $_lcssa34;
  var $236 = HEAP32[($122 << 4 >> 2) + $5$s2] ^ $_lcssa34;
  var $241 = HEAP32[(($122 << 4) + 4 >> 2) + $5$s2] ^ HEAP32[$75$s2];
  var $246 = HEAP32[(($122 << 4) + 8 >> 2) + $5$s2] ^ HEAP32[$98$s2];
  var $251 = HEAP32[(($122 << 4) + 12 >> 2) + $5$s2] ^ HEAP32[$121$s2];
  HEAP8[$b] = HEAP8[(($236 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 1 | 0] = HEAP8[(($241 >>> 8 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 2 | 0] = HEAP8[(($246 >>> 16 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 3 | 0] = HEAP8[($251 >>> 24 << 2) + 506941 | 0];
  HEAP8[$74] = HEAP8[(($241 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 5 | 0] = HEAP8[(($246 >>> 8 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 6 | 0] = HEAP8[(($251 >>> 16 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 7 | 0] = HEAP8[($236 >>> 24 << 2) + 506941 | 0];
  HEAP8[$97] = HEAP8[(($246 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 9 | 0] = HEAP8[(($251 >>> 8 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 10 | 0] = HEAP8[(($236 >>> 16 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 11 | 0] = HEAP8[($241 >>> 24 << 2) + 506941 | 0];
  HEAP8[$120] = HEAP8[(($251 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 13 | 0] = HEAP8[(($236 >>> 8 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 14 | 0] = HEAP8[(($241 >>> 16 & 255) << 2) + 506941 | 0];
  HEAP8[$b + 15 | 0] = HEAP8[($246 >>> 24 << 2) + 506941 | 0];
  HEAP32[$52$s2] = HEAP32[$52$s2] ^ HEAP32[($2 << 4 >> 2) + $5$s2];
  HEAP32[$75$s2] = HEAP32[$75$s2] ^ HEAP32[(($2 << 4) + 4 >> 2) + $5$s2];
  HEAP32[$98$s2] = HEAP32[$98$s2] ^ HEAP32[(($2 << 4) + 8 >> 2) + $5$s2];
  HEAP32[$121$s2] = HEAP32[$121$s2] ^ HEAP32[(($2 << 4) + 12 >> 2) + $5$s2];
  return;
}
_do_encrypt_aligned["X"] = 1;
function __gcry_aes_cbc_enc($context, $iv, $outbuf_arg, $inbuf_arg, $nblocks, $cbc_mac) {
  var $1 = $context;
  if (($nblocks | 0) == 0) {
    __gcry_burn_stack(56);
    return;
  }
  var $3 = ($cbc_mac | 0) == 0;
  var $_03 = $nblocks;
  var $outbuf_04 = $outbuf_arg;
  var $inbuf_05 = $inbuf_arg;
  while (1) {
    var $inbuf_05;
    var $outbuf_04;
    var $_03;
    HEAP8[$outbuf_04] = HEAP8[$iv] ^ HEAP8[$inbuf_05];
    HEAP8[$outbuf_04 + 1 | 0] = HEAP8[$iv + 1 | 0] ^ HEAP8[$inbuf_05 + 1 | 0];
    HEAP8[$outbuf_04 + 2 | 0] = HEAP8[$iv + 2 | 0] ^ HEAP8[$inbuf_05 + 2 | 0];
    HEAP8[$outbuf_04 + 3 | 0] = HEAP8[$iv + 3 | 0] ^ HEAP8[$inbuf_05 + 3 | 0];
    HEAP8[$outbuf_04 + 4 | 0] = HEAP8[$iv + 4 | 0] ^ HEAP8[$inbuf_05 + 4 | 0];
    HEAP8[$outbuf_04 + 5 | 0] = HEAP8[$iv + 5 | 0] ^ HEAP8[$inbuf_05 + 5 | 0];
    HEAP8[$outbuf_04 + 6 | 0] = HEAP8[$iv + 6 | 0] ^ HEAP8[$inbuf_05 + 6 | 0];
    HEAP8[$outbuf_04 + 7 | 0] = HEAP8[$iv + 7 | 0] ^ HEAP8[$inbuf_05 + 7 | 0];
    HEAP8[$outbuf_04 + 8 | 0] = HEAP8[$iv + 8 | 0] ^ HEAP8[$inbuf_05 + 8 | 0];
    HEAP8[$outbuf_04 + 9 | 0] = HEAP8[$iv + 9 | 0] ^ HEAP8[$inbuf_05 + 9 | 0];
    HEAP8[$outbuf_04 + 10 | 0] = HEAP8[$iv + 10 | 0] ^ HEAP8[$inbuf_05 + 10 | 0];
    HEAP8[$outbuf_04 + 11 | 0] = HEAP8[$iv + 11 | 0] ^ HEAP8[$inbuf_05 + 11 | 0];
    HEAP8[$outbuf_04 + 12 | 0] = HEAP8[$iv + 12 | 0] ^ HEAP8[$inbuf_05 + 12 | 0];
    HEAP8[$outbuf_04 + 13 | 0] = HEAP8[$iv + 13 | 0] ^ HEAP8[$inbuf_05 + 13 | 0];
    HEAP8[$outbuf_04 + 14 | 0] = HEAP8[$iv + 14 | 0] ^ HEAP8[$inbuf_05 + 14 | 0];
    HEAP8[$outbuf_04 + 15 | 0] = HEAP8[$iv + 15 | 0] ^ HEAP8[$inbuf_05 + 15 | 0];
    _do_encrypt765($1, $outbuf_04, $outbuf_04);
    for (var $$src = $outbuf_04, $$dest = $iv, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $99 = $_03 - 1 | 0;
    if (($99 | 0) == 0) {
      break;
    } else {
      var $_03 = $99;
      var $outbuf_04 = $3 ? $outbuf_04 + 16 | 0 : $outbuf_04;
      var $inbuf_05 = $inbuf_05 + 16 | 0;
    }
  }
  __gcry_burn_stack(56);
  return;
}
__gcry_aes_cbc_enc["X"] = 1;
function _do_encrypt765($ctx, $bx, $ax) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $a = __stackBase__;
  var $b = __stackBase__ + 16;
  do {
    if (($ax & 15 | 0) == 0) {
      if (($bx & 15 | 0) != 0) {
        break;
      }
      _do_encrypt_aligned($ctx, $bx, $ax);
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  var $9 = $a;
  for (var $$src = $ax, $$dest = $9, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src];
  }
  var $10 = $b;
  _do_encrypt_aligned($ctx, $10, $9);
  for (var $$src = $10, $$dest = $bx, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src];
  }
  STACKTOP = __stackBase__;
  return;
}
function __gcry_aes_ctr_enc($context, $ctr, $outbuf_arg, $inbuf_arg, $nblocks) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $tmp = __stackBase__;
  var $1 = $context;
  if (($nblocks | 0) == 0) {
    __gcry_burn_stack(56);
    STACKTOP = __stackBase__;
    return;
  }
  var $3 = $tmp;
  var $_05 = $nblocks;
  var $outbuf_06 = $outbuf_arg;
  var $inbuf_07 = $inbuf_arg;
  while (1) {
    var $inbuf_07;
    var $outbuf_06;
    var $_05;
    _do_encrypt_aligned($1, $3, $ctr);
    var $scevgep = $outbuf_06 + 16 | 0;
    var $6 = $3 + 1 | 0;
    var $8 = HEAP8[$3] ^ HEAP8[$inbuf_07];
    HEAP8[$3] = $8;
    HEAP8[$outbuf_06] = $8;
    var $12 = $3 + 2 | 0;
    var $14 = HEAP8[$6] ^ HEAP8[$inbuf_07 + 1 | 0];
    HEAP8[$6] = $14;
    HEAP8[$outbuf_06 + 1 | 0] = $14;
    var $18 = $3 + 3 | 0;
    var $20 = HEAP8[$12] ^ HEAP8[$inbuf_07 + 2 | 0];
    HEAP8[$12] = $20;
    HEAP8[$outbuf_06 + 2 | 0] = $20;
    var $25 = $tmp + 4 | 0;
    var $27 = HEAP8[$18] ^ HEAP8[$inbuf_07 + 3 | 0];
    HEAP8[$18] = $27;
    HEAP8[$outbuf_06 + 3 | 0] = $27;
    var $31 = $25 + 1 | 0;
    var $33 = HEAP8[$25] ^ HEAP8[$inbuf_07 + 4 | 0];
    HEAP8[$25] = $33;
    HEAP8[$outbuf_06 + 4 | 0] = $33;
    var $37 = $25 + 2 | 0;
    var $39 = HEAP8[$31] ^ HEAP8[$inbuf_07 + 5 | 0];
    HEAP8[$31] = $39;
    HEAP8[$outbuf_06 + 5 | 0] = $39;
    var $43 = $25 + 3 | 0;
    var $45 = HEAP8[$37] ^ HEAP8[$inbuf_07 + 6 | 0];
    HEAP8[$37] = $45;
    HEAP8[$outbuf_06 + 6 | 0] = $45;
    var $50 = $tmp + 8 | 0;
    var $52 = HEAP8[$43] ^ HEAP8[$inbuf_07 + 7 | 0];
    HEAP8[$43] = $52;
    HEAP8[$outbuf_06 + 7 | 0] = $52;
    var $56 = $50 + 1 | 0;
    var $58 = HEAP8[$50] ^ HEAP8[$inbuf_07 + 8 | 0];
    HEAP8[$50] = $58;
    HEAP8[$outbuf_06 + 8 | 0] = $58;
    var $62 = $50 + 2 | 0;
    var $64 = HEAP8[$56] ^ HEAP8[$inbuf_07 + 9 | 0];
    HEAP8[$56] = $64;
    HEAP8[$outbuf_06 + 9 | 0] = $64;
    var $68 = $50 + 3 | 0;
    var $70 = HEAP8[$62] ^ HEAP8[$inbuf_07 + 10 | 0];
    HEAP8[$62] = $70;
    HEAP8[$outbuf_06 + 10 | 0] = $70;
    var $75 = $tmp + 12 | 0;
    var $77 = HEAP8[$68] ^ HEAP8[$inbuf_07 + 11 | 0];
    HEAP8[$68] = $77;
    HEAP8[$outbuf_06 + 11 | 0] = $77;
    var $81 = $75 + 1 | 0;
    var $83 = HEAP8[$75] ^ HEAP8[$inbuf_07 + 12 | 0];
    HEAP8[$75] = $83;
    HEAP8[$outbuf_06 + 12 | 0] = $83;
    var $87 = $75 + 2 | 0;
    var $89 = HEAP8[$81] ^ HEAP8[$inbuf_07 + 13 | 0];
    HEAP8[$81] = $89;
    HEAP8[$outbuf_06 + 13 | 0] = $89;
    var $93 = $75 + 3 | 0;
    var $95 = HEAP8[$87] ^ HEAP8[$inbuf_07 + 14 | 0];
    HEAP8[$87] = $95;
    HEAP8[$outbuf_06 + 14 | 0] = $95;
    var $99 = HEAP8[$93] ^ HEAP8[$inbuf_07 + 15 | 0];
    HEAP8[$93] = $99;
    HEAP8[$outbuf_06 + 15 | 0] = $99;
    var $scevgep9 = $inbuf_07 + 16 | 0;
    var $i_1 = 16;
    while (1) {
      var $i_1;
      if (($i_1 | 0) <= 0) {
        break;
      }
      var $103 = $i_1 - 1 | 0;
      var $104 = $ctr + $103 | 0;
      var $106 = HEAP8[$104] + 1 & 255;
      HEAP8[$104] = $106;
      if ($106 << 24 >> 24 == 0) {
        var $i_1 = $103;
      } else {
        break;
      }
    }
    var $109 = $_05 - 1 | 0;
    if (($109 | 0) == 0) {
      break;
    } else {
      var $_05 = $109;
      var $outbuf_06 = $scevgep;
      var $inbuf_07 = $scevgep9;
    }
  }
  __gcry_burn_stack(56);
  STACKTOP = __stackBase__;
  return;
}
__gcry_aes_ctr_enc["X"] = 1;
function __gcry_aes_cfb_dec($context, $iv, $outbuf_arg, $inbuf_arg, $nblocks) {
  var $1 = $context;
  if (($nblocks | 0) == 0) {
    __gcry_burn_stack(56);
    return;
  } else {
    var $_05 = $nblocks;
    var $outbuf_06 = $outbuf_arg;
    var $inbuf_07 = $inbuf_arg;
  }
  while (1) {
    var $inbuf_07;
    var $outbuf_06;
    var $_05;
    _do_encrypt_aligned($1, $iv, $iv);
    var $5 = HEAP8[$inbuf_07];
    HEAP8[$outbuf_06] = HEAP8[$iv] ^ $5;
    var $9 = $iv + 1 | 0;
    HEAP8[$iv] = $5;
    var $11 = HEAP8[$inbuf_07 + 1 | 0];
    HEAP8[$outbuf_06 + 1 | 0] = HEAP8[$9] ^ $11;
    var $15 = $iv + 2 | 0;
    HEAP8[$9] = $11;
    var $17 = HEAP8[$inbuf_07 + 2 | 0];
    HEAP8[$outbuf_06 + 2 | 0] = HEAP8[$15] ^ $17;
    var $21 = $iv + 3 | 0;
    HEAP8[$15] = $17;
    var $23 = HEAP8[$inbuf_07 + 3 | 0];
    HEAP8[$outbuf_06 + 3 | 0] = HEAP8[$21] ^ $23;
    var $27 = $iv + 4 | 0;
    HEAP8[$21] = $23;
    var $29 = HEAP8[$inbuf_07 + 4 | 0];
    HEAP8[$outbuf_06 + 4 | 0] = HEAP8[$27] ^ $29;
    var $33 = $iv + 5 | 0;
    HEAP8[$27] = $29;
    var $35 = HEAP8[$inbuf_07 + 5 | 0];
    HEAP8[$outbuf_06 + 5 | 0] = HEAP8[$33] ^ $35;
    var $39 = $iv + 6 | 0;
    HEAP8[$33] = $35;
    var $41 = HEAP8[$inbuf_07 + 6 | 0];
    HEAP8[$outbuf_06 + 6 | 0] = HEAP8[$39] ^ $41;
    var $45 = $iv + 7 | 0;
    HEAP8[$39] = $41;
    var $47 = HEAP8[$inbuf_07 + 7 | 0];
    HEAP8[$outbuf_06 + 7 | 0] = HEAP8[$45] ^ $47;
    var $51 = $iv + 8 | 0;
    HEAP8[$45] = $47;
    var $53 = HEAP8[$inbuf_07 + 8 | 0];
    HEAP8[$outbuf_06 + 8 | 0] = HEAP8[$51] ^ $53;
    var $57 = $iv + 9 | 0;
    HEAP8[$51] = $53;
    var $59 = HEAP8[$inbuf_07 + 9 | 0];
    HEAP8[$outbuf_06 + 9 | 0] = HEAP8[$57] ^ $59;
    var $63 = $iv + 10 | 0;
    HEAP8[$57] = $59;
    var $65 = HEAP8[$inbuf_07 + 10 | 0];
    HEAP8[$outbuf_06 + 10 | 0] = HEAP8[$63] ^ $65;
    var $69 = $iv + 11 | 0;
    HEAP8[$63] = $65;
    var $71 = HEAP8[$inbuf_07 + 11 | 0];
    HEAP8[$outbuf_06 + 11 | 0] = HEAP8[$69] ^ $71;
    var $75 = $iv + 12 | 0;
    HEAP8[$69] = $71;
    var $77 = HEAP8[$inbuf_07 + 12 | 0];
    HEAP8[$outbuf_06 + 12 | 0] = HEAP8[$75] ^ $77;
    var $81 = $iv + 13 | 0;
    HEAP8[$75] = $77;
    var $83 = HEAP8[$inbuf_07 + 13 | 0];
    HEAP8[$outbuf_06 + 13 | 0] = HEAP8[$81] ^ $83;
    var $87 = $iv + 14 | 0;
    HEAP8[$81] = $83;
    var $89 = HEAP8[$inbuf_07 + 14 | 0];
    HEAP8[$outbuf_06 + 14 | 0] = HEAP8[$87] ^ $89;
    var $93 = $iv + 15 | 0;
    HEAP8[$87] = $89;
    var $94 = HEAP8[$inbuf_07 + 15 | 0];
    HEAP8[$outbuf_06 + 15 | 0] = HEAP8[$93] ^ $94;
    HEAP8[$93] = $94;
    var $97 = $_05 - 1 | 0;
    if (($97 | 0) == 0) {
      break;
    } else {
      var $_05 = $97;
      var $outbuf_06 = $outbuf_06 + 16 | 0;
      var $inbuf_07 = $inbuf_07 + 16 | 0;
    }
  }
  __gcry_burn_stack(56);
  return;
}
__gcry_aes_cfb_dec["X"] = 1;
function __gcry_aes_cbc_dec($context, $iv, $outbuf_arg, $inbuf_arg, $nblocks) {
  var $1 = $context;
  if (($nblocks | 0) == 0) {
    __gcry_burn_stack(88);
    return;
  }
  var $3 = $iv;
  var $4 = $iv + 1 | 0;
  var $_04 = $nblocks;
  var $outbuf_05 = $outbuf_arg;
  var $inbuf_06 = $inbuf_arg;
  while (1) {
    var $inbuf_06;
    var $outbuf_05;
    var $_04;
    var $6 = $inbuf_06;
    var $st$4$0 = $6 | 0;
    var $srcval1$0 = HEAPU8[$st$4$0] | HEAPU8[$st$4$0 + 1] << 8 | HEAPU8[$st$4$0 + 2] << 16 | HEAPU8[$st$4$0 + 3] << 24 | 0;
    var $st$4$1 = $6 + 4 | 0;
    var $srcval1$1 = HEAPU8[$st$4$1] | HEAPU8[$st$4$1 + 1] << 8 | HEAPU8[$st$4$1 + 2] << 16 | HEAPU8[$st$4$1 + 3] << 24 | 0;
    var $st$4$2 = $6 + 8 | 0;
    var $srcval1$2 = HEAPU8[$st$4$2] | HEAPU8[$st$4$2 + 1] << 8 | HEAPU8[$st$4$2 + 2] << 16 | HEAPU8[$st$4$2 + 3] << 24 | 0;
    var $st$4$3 = $6 + 12 | 0;
    var $srcval1$3 = HEAPU8[$st$4$3] | HEAPU8[$st$4$3 + 1] << 8 | HEAPU8[$st$4$3 + 2] << 16 | HEAPU8[$st$4$3 + 3] << 24 | 0;
    _do_decrypt772($1, $outbuf_05, $inbuf_06);
    HEAP8[$outbuf_05] = HEAP8[$outbuf_05] ^ HEAP8[$iv];
    var $12 = $outbuf_05 + 1 | 0;
    HEAP8[$12] = HEAP8[$12] ^ HEAP8[$4];
    var $17 = $outbuf_05 + 2 | 0;
    HEAP8[$17] = HEAP8[$17] ^ HEAP8[$iv + 2 | 0];
    var $22 = $outbuf_05 + 3 | 0;
    HEAP8[$22] = HEAP8[$22] ^ HEAP8[$iv + 3 | 0];
    var $27 = $outbuf_05 + 4 | 0;
    HEAP8[$27] = HEAP8[$27] ^ HEAP8[$iv + 4 | 0];
    var $32 = $outbuf_05 + 5 | 0;
    HEAP8[$32] = HEAP8[$32] ^ HEAP8[$iv + 5 | 0];
    var $37 = $outbuf_05 + 6 | 0;
    HEAP8[$37] = HEAP8[$37] ^ HEAP8[$iv + 6 | 0];
    var $42 = $outbuf_05 + 7 | 0;
    HEAP8[$42] = HEAP8[$42] ^ HEAP8[$iv + 7 | 0];
    var $47 = $outbuf_05 + 8 | 0;
    HEAP8[$47] = HEAP8[$47] ^ HEAP8[$iv + 8 | 0];
    var $52 = $outbuf_05 + 9 | 0;
    HEAP8[$52] = HEAP8[$52] ^ HEAP8[$iv + 9 | 0];
    var $57 = $outbuf_05 + 10 | 0;
    HEAP8[$57] = HEAP8[$57] ^ HEAP8[$iv + 10 | 0];
    var $62 = $outbuf_05 + 11 | 0;
    HEAP8[$62] = HEAP8[$62] ^ HEAP8[$iv + 11 | 0];
    var $67 = $outbuf_05 + 12 | 0;
    HEAP8[$67] = HEAP8[$67] ^ HEAP8[$iv + 12 | 0];
    var $72 = $outbuf_05 + 13 | 0;
    HEAP8[$72] = HEAP8[$72] ^ HEAP8[$iv + 13 | 0];
    var $77 = $outbuf_05 + 14 | 0;
    HEAP8[$77] = HEAP8[$77] ^ HEAP8[$iv + 14 | 0];
    var $81 = $outbuf_05 + 15 | 0;
    HEAP8[$81] = HEAP8[$81] ^ HEAP8[$iv + 15 | 0];
    var $st$106$0 = $3 | 0;
    tempBigInt = $srcval1$0;
    HEAP8[$st$106$0] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$0 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$0 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$0 + 3] = tempBigInt & 255;
    var $st$106$1 = $3 + 4 | 0;
    tempBigInt = $srcval1$1;
    HEAP8[$st$106$1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$1 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$1 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$1 + 3] = tempBigInt & 255;
    var $st$106$2 = $3 + 8 | 0;
    tempBigInt = $srcval1$2;
    HEAP8[$st$106$2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$2 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$2 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$2 + 3] = tempBigInt & 255;
    var $st$106$3 = $3 + 12 | 0;
    tempBigInt = $srcval1$3;
    HEAP8[$st$106$3] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$3 + 1] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$3 + 2] = tempBigInt & 255;
    tempBigInt = tempBigInt >> 8;
    HEAP8[$st$106$3 + 3] = tempBigInt & 255;
    var $86 = $_04 - 1 | 0;
    if (($86 | 0) == 0) {
      break;
    } else {
      var $_04 = $86;
      var $outbuf_05 = $outbuf_05 + 16 | 0;
      var $inbuf_06 = $inbuf_06 + 16 | 0;
    }
  }
  __gcry_burn_stack(88);
  return;
}
__gcry_aes_cbc_dec["X"] = 1;
function _prepare_decryption($ctx) {
  var $3$s2;
  var $1$s2;
  var $1$s2 = $ctx >> 2;
  var $3$s2 = ($ctx + 240 | 0) >> 2;
  var $r_012 = 0;
  while (1) {
    var $r_012;
    HEAP32[($r_012 << 4 >> 2) + $3$s2] = HEAP32[($r_012 << 4 >> 2) + $1$s2];
    HEAP32[(($r_012 << 4) + 4 >> 2) + $3$s2] = HEAP32[(($r_012 << 4) + 4 >> 2) + $1$s2];
    HEAP32[(($r_012 << 4) + 8 >> 2) + $3$s2] = HEAP32[(($r_012 << 4) + 8 >> 2) + $1$s2];
    HEAP32[(($r_012 << 4) + 12 >> 2) + $3$s2] = HEAP32[(($r_012 << 4) + 12 >> 2) + $1$s2];
    var $30 = $r_012 + 1 | 0;
    if (($30 | 0) == 15) {
      break;
    } else {
      var $r_012 = $30;
    }
  }
  var $4 = $ctx + 480 | 0;
  if ((HEAP32[$4 >> 2] | 0) <= 1) {
    return;
  }
  var $8 = $ctx + 240 | 0;
  var $r_111 = 1;
  while (1) {
    var $r_111;
    var $32 = ($r_111 << 4) + $8 | 0;
    HEAP32[$32 >> 2] = HEAP32[(HEAPU8[($r_111 << 4) + $8 + 1 | 0] << 2) + 497724 >> 2] ^ HEAP32[(HEAPU8[$32 | 0] << 2) + 498748 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 2 | 0] << 2) + 496700 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 3 | 0] << 2) + 495676 >> 2];
    var $61 = ($r_111 << 4) + $8 + 4 | 0;
    HEAP32[$61 >> 2] = HEAP32[(HEAPU8[($r_111 << 4) + $8 + 5 | 0] << 2) + 497724 >> 2] ^ HEAP32[(HEAPU8[$61] << 2) + 498748 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 6 | 0] << 2) + 496700 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 7 | 0] << 2) + 495676 >> 2];
    var $89 = ($r_111 << 4) + $8 + 8 | 0;
    HEAP32[$89 >> 2] = HEAP32[(HEAPU8[($r_111 << 4) + $8 + 9 | 0] << 2) + 497724 >> 2] ^ HEAP32[(HEAPU8[$89] << 2) + 498748 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 10 | 0] << 2) + 496700 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 11 | 0] << 2) + 495676 >> 2];
    var $117 = ($r_111 << 4) + $8 + 12 | 0;
    HEAP32[$117 >> 2] = HEAP32[(HEAPU8[($r_111 << 4) + $8 + 13 | 0] << 2) + 497724 >> 2] ^ HEAP32[(HEAPU8[$117] << 2) + 498748 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 14 | 0] << 2) + 496700 >> 2] ^ HEAP32[(HEAPU8[($r_111 << 4) + $8 + 15 | 0] << 2) + 495676 >> 2];
    var $145 = $r_111 + 1 | 0;
    if (($145 | 0) < (HEAP32[$4 >> 2] | 0)) {
      var $r_111 = $145;
    } else {
      break;
    }
  }
  return;
}
_prepare_decryption["X"] = 1;
function _do_decrypt772($ctx, $bx, $ax) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $a = __stackBase__;
  var $b = __stackBase__ + 16;
  var $1 = $ctx + 484 | 0;
  if ((HEAP32[$1 >> 2] | 0) == 0) {
    _prepare_decryption($ctx);
    __gcry_burn_stack(64);
    HEAP32[$1 >> 2] = 1;
  }
  do {
    if (($ax & 15 | 0) == 0) {
      if (($bx & 15 | 0) != 0) {
        break;
      }
      _do_decrypt_aligned($ctx, $bx, $ax);
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  var $14 = $a;
  for (var $$src = $ax, $$dest = $14, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src];
  }
  var $15 = $b;
  _do_decrypt_aligned($ctx, $15, $14);
  for (var $$src = $15, $$dest = $bx, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src];
  }
  STACKTOP = __stackBase__;
  return;
}
function _rijndael_setkey($context, $key, $keylen) {
  var $2 = _do_setkey774($context, $key, $keylen);
  __gcry_burn_stack(164);
  return $2;
}
function _rijndael_encrypt($context, $b, $a) {
  _do_encrypt765($context, $b, $a);
  __gcry_burn_stack(64);
  return;
}
function _rijndael_decrypt($context, $b, $a) {
  _do_decrypt772($context, $b, $a);
  __gcry_burn_stack(64);
  return;
}
function _run_selftests773($algo, $extended, $report) {
  if (($algo | 0) == 8) {
    var $ec_0 = _selftest_fips_192($report);
  } else if (($algo | 0) == 9) {
    var $ec_0 = _selftest_fips_256($report);
  } else if (($algo | 0) == 7) {
    var $ec_0 = _selftest_fips_128($extended, $report);
  } else {
    var $ec_0 = 12;
  }
  var $ec_0;
  return $ec_0;
}
function _selftest_fips_128($extended, $report) {
  var label = 0;
  var $1 = _selftest_basic_128();
  do {
    if (($1 | 0) == 0) {
      if (($extended | 0) == 0) {
        var $_0 = 0;
        break;
      }
      var $6 = _selftest_fips_128_38a(2);
      if (($6 | 0) != 0) {
        var $errtxt_0 = $6;
        var $what_0 = 480256;
        label = 2387;
        break;
      }
      var $9 = _selftest_fips_128_38a(5);
      if (($9 | 0) == 0) {
        var $_0 = 0;
        break;
      } else {
        var $errtxt_0 = $9;
        var $what_0 = 479776;
        label = 2387;
        break;
      }
    } else {
      var $errtxt_0 = $1;
      var $what_0 = 484972;
      label = 2387;
    }
  } while (0);
  do {
    if (label == 2387) {
      var $what_0;
      var $errtxt_0;
      if (($report | 0) == 0) {
        var $_0 = 50;
        break;
      }
      FUNCTION_TABLE[$report](484120, 7, $what_0, $errtxt_0);
      var $_0 = 50;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _selftest_fips_192($report) {
  var $1 = _selftest_basic_192();
  do {
    if (($1 | 0) == 0) {
      var $_0 = 0;
    } else {
      if (($report | 0) == 0) {
        var $_0 = 50;
        break;
      }
      FUNCTION_TABLE[$report](484120, 8, 484972, $1);
      var $_0 = 50;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _selftest_fips_256($report) {
  var $1 = _selftest_basic_256();
  do {
    if (($1 | 0) == 0) {
      var $_0 = 0;
    } else {
      if (($report | 0) == 0) {
        var $_0 = 50;
        break;
      }
      FUNCTION_TABLE[$report](484120, 9, 484972, $1);
      var $_0 = 50;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _selftest_basic_256() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 504 | 0;
  var $1 = __stackBase__;
  _rijndael_setkey($1, 416720, 32);
  var $3 = __stackBase__ + 488 | 0;
  _rijndael_encrypt($1, $3, 416704);
  if ((_memcmp($3, 416752, 16) | 0) != 0) {
    var $_0 = 483512;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _rijndael_decrypt($1, $3, $3);
  var $_0 = (_memcmp($3, 416704, 16) | 0) == 0 ? 0 : 482576;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _selftest_basic_192() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 504 | 0;
  var $1 = __stackBase__;
  _rijndael_setkey($1, 416784, 24);
  var $3 = __stackBase__ + 488 | 0;
  _rijndael_encrypt($1, $3, 416768);
  if ((_memcmp($3, 416808, 16) | 0) != 0) {
    var $_0 = 481880;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _rijndael_decrypt($1, $3, $3);
  var $_0 = (_memcmp($3, 416768, 16) | 0) == 0 ? 0 : 481376;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _selftest_basic_128() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 504 | 0;
  var $1 = __stackBase__;
  _rijndael_setkey($1, 416840, 16);
  var $3 = __stackBase__ + 488 | 0;
  _rijndael_encrypt($1, $3, 416824);
  if ((_memcmp($3, 416856, 16) | 0) != 0) {
    var $_0 = 476608;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _rijndael_decrypt($1, $3, $3);
  var $_0 = (_memcmp($3, 416824, 16) | 0) == 0 ? 0 : 476196;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _selftest_fips_128_38a($requested_mode) {
  var $hddec$s2;
  var $hdenc$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 352 | 0;
  var $tv = __stackBase__;
  var $scratch = __stackBase__ + 328;
  var $hdenc = __stackBase__ + 344, $hdenc$s2 = $hdenc >> 2;
  var $hddec = __stackBase__ + 348, $hddec$s2 = $hddec >> 2;
  var $1 = $tv;
  for (var $$src = 104058, $$dest = $1 >> 2, $$stop = $$src + 82; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  HEAP32[$hdenc$s2] = 0;
  HEAP32[$hddec$s2] = 0;
  var $tvi_0 = 0;
  while (1) {
    var $tvi_0;
    if ($tvi_0 >>> 0 >= 2) {
      break;
    }
    if ((HEAP32[($tv >> 2) + ($tvi_0 * 41 | 0)] | 0) == ($requested_mode | 0)) {
      break;
    } else {
      var $tvi_0 = $tvi_0 + 1 | 0;
    }
  }
  if (($tvi_0 | 0) == 2) {
    __gcry_cipher_close(HEAP32[$hdenc$s2]);
    __gcry_cipher_close(HEAP32[$hddec$s2]);
    var $_0 = 479508;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $15 = $tv + $tvi_0 * 164 | 0;
  if ((__gcry_cipher_open($hdenc, 7, HEAP32[$15 >> 2], 0) | 0) != 0) {
    __gcry_cipher_close(HEAP32[$hdenc$s2]);
    __gcry_cipher_close(HEAP32[$hddec$s2]);
    var $_0 = 478948;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $25 = (__gcry_cipher_open($hddec, 7, HEAP32[$15 >> 2], 0) | 0) == 0;
  var $26 = HEAP32[$hdenc$s2];
  if (!$25) {
    __gcry_cipher_close($26);
    __gcry_cipher_close(HEAP32[$hddec$s2]);
    var $_0 = 478948;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $30 = $tv + $tvi_0 * 164 + 4 | 0;
  do {
    if ((__gcry_cipher_setkey($26, $30, 16) | 0) == 0) {
      var $37 = (__gcry_cipher_setkey(HEAP32[$hddec$s2], $30, 16) | 0) == 0;
      var $38 = HEAP32[$hdenc$s2];
      if (!$37) {
        var $40 = $38;
        break;
      }
      var $43 = $tv + $tvi_0 * 164 + 20 | 0;
      __gcry_cipher_setiv($38, $43, 16);
      __gcry_cipher_setiv(HEAP32[$hddec$s2], $43, 16);
      var $47 = HEAP32[$hdenc$s2];
      var $48 = $scratch | 0;
      var $49 = HEAP32[$hddec$s2];
      var $idx_0 = 0;
      while (1) {
        var $idx_0;
        if ($idx_0 >>> 0 >= 4) {
          label = 2436;
          break;
        }
        var $53 = ($idx_0 << 5) + $tv + $tvi_0 * 164 + 36 | 0;
        if ((__gcry_cipher_encrypt($47, $48, 16, $53, 16) | 0) != 0) {
          label = 2429;
          break;
        }
        var $60 = ($idx_0 << 5) + $tv + $tvi_0 * 164 + 52 | 0;
        if ((_memcmp($48, $60, 16) | 0) != 0) {
          label = 2431;
          break;
        }
        if ((__gcry_cipher_decrypt($49, $48, 16, $60, 16) | 0) != 0) {
          label = 2433;
          break;
        }
        if ((_memcmp($48, $53, 16) | 0) == 0) {
          var $idx_0 = $idx_0 + 1 | 0;
        } else {
          label = 2435;
          break;
        }
      }
      if (label == 2431) {
        __gcry_cipher_close(HEAP32[$hdenc$s2]);
        __gcry_cipher_close(HEAP32[$hddec$s2]);
        var $_0 = 477668;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 2436) {
        __gcry_cipher_close($47);
        __gcry_cipher_close(HEAP32[$hddec$s2]);
        var $_0 = 0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 2435) {
        __gcry_cipher_close(HEAP32[$hdenc$s2]);
        __gcry_cipher_close(HEAP32[$hddec$s2]);
        var $_0 = 477204;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 2433) {
        __gcry_cipher_close(HEAP32[$hdenc$s2]);
        __gcry_cipher_close(HEAP32[$hddec$s2]);
        var $_0 = 477356;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else if (label == 2429) {
        __gcry_cipher_close(HEAP32[$hdenc$s2]);
        __gcry_cipher_close(HEAP32[$hddec$s2]);
        var $_0 = 477984;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    } else {
      var $40 = HEAP32[$hdenc$s2];
    }
  } while (0);
  var $40;
  __gcry_cipher_close($40);
  __gcry_cipher_close(HEAP32[$hddec$s2]);
  var $_0 = 478668;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_selftest_fips_128_38a["X"] = 1;
function _do_setkey774($ctx, $key, $keylen) {
  var $38$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $ctx54 = $ctx;
  var $k = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $tk = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $1 = $tk;
  do {
    if ((__gcry_fips_mode() | 0) != 0 | HEAP8[457628]) {
      label = 2450;
    } else {
      HEAP8[457628] = 1;
      var $5 = _selftest775();
      HEAP32[114406] = $5;
      if (($5 | 0) == 0) {
        break;
      }
      __gcry_log_error(475996, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $5, tempInt));
      label = 2450;
      break;
    }
  } while (0);
  do {
    if (label == 2450) {
      if ((HEAP32[114406] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  HEAP32[$ctx + 484 >> 2] = 0;
  if (($keylen | 0) == 16) {
    var $KC_0 = 4;
    var $rounds_0 = 10;
  } else if (($keylen | 0) == 32) {
    var $KC_0 = 8;
    var $rounds_0 = 14;
  } else if (($keylen | 0) == 24) {
    var $KC_0 = 6;
    var $rounds_0 = 12;
  } else {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $rounds_0;
  var $KC_0;
  HEAP32[$ctx + 480 >> 2] = $rounds_0;
  var $14 = $k;
  var $i_049 = 0;
  while (1) {
    var $i_049;
    HEAP8[($i_049 >> 2 << 2) + ($i_049 & 3) + $14 | 0] = HEAP8[$key + $i_049 | 0];
    var $21 = $i_049 + 1 | 0;
    if (($21 | 0) == ($keylen | 0)) {
      break;
    } else {
      var $i_049 = $21;
    }
  }
  var $22 = $KC_0 - 1 | 0;
  var $23 = $k;
  var $24 = $tk;
  var $j_048 = $22;
  while (1) {
    var $j_048;
    HEAP32[$24 + ($j_048 << 2) >> 2] = HEAP32[$23 + ($j_048 << 2) >> 2];
    if (($j_048 | 0) > 0) {
      var $j_048 = $j_048 - 1 | 0;
    } else {
      break;
    }
  }
  var $25 = $rounds_0 | 1;
  var $r_045 = 0;
  var $j_146 = 0;
  var $t_047 = 0;
  while (1) {
    var $t_047;
    var $j_146;
    var $r_045;
    if (($j_146 | 0) < ($KC_0 | 0) & ($t_047 | 0) < 4) {
      var $49 = $j_146 - $KC_0 | 0;
      var $50 = $t_047 - 4 | 0;
      var $umax58 = $49 >>> 0 > $50 >>> 0 ? $49 : $50;
      var $56 = $j_146 - $KC_0 | 0;
      var $57 = $t_047 - 4 | 0;
      _memcpy(($r_045 << 4) + ($t_047 << 2) + $ctx54 | 0, ($j_146 << 2) + $1 | 0, ($56 >>> 0 > $57 >>> 0 ? $56 : $57) * -4 & -1);
      var $j_2_lcssa = $j_146 - $umax58 | 0;
      var $t_1_lcssa = $t_047 - $umax58 | 0;
    } else {
      var $j_2_lcssa = $j_146;
      var $t_1_lcssa = $t_047;
    }
    var $t_1_lcssa;
    var $j_2_lcssa;
    var $62 = ($t_1_lcssa | 0) == 4;
    var $_r_0 = ($62 & 1) + $r_045 | 0;
    var $_t_1 = $62 ? 0 : $t_1_lcssa;
    if (($j_2_lcssa | 0) < ($KC_0 | 0) & ($_r_0 | 0) < ($25 | 0)) {
      var $r_045 = $_r_0;
      var $j_146 = $j_2_lcssa;
      var $t_047 = $_t_1;
    } else {
      break;
    }
  }
  var $36 = $rounds_0 | 1;
  if (($_r_0 | 0) >= ($36 | 0)) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $38 = $tk, $38$s2 = $38 >> 2;
  var $39 = ($22 << 2) + $38 + 1 | 0;
  var $40 = $tk;
  var $41 = ($22 << 2) + $38 + 2 | 0;
  var $42 = $40 + 1 | 0;
  var $43 = ($22 << 2) + $38 + 3 | 0;
  var $44 = $40 + 2 | 0;
  var $45 = ($22 << 2) + $38 | 0;
  var $46 = $40 + 3 | 0;
  var $47 = ($KC_0 | 0) == 8;
  var $48 = $KC_0 >>> 1;
  var $r_132 = $_r_0;
  var $t_233 = $_t_1;
  var $rconpointer_034 = 0;
  while (1) {
    var $rconpointer_034;
    var $t_233;
    var $r_132;
    HEAP8[$1] = HEAP8[$1] ^ HEAP8[HEAPU8[$39] + 512332 | 0];
    HEAP8[$42] = HEAP8[$42] ^ HEAP8[HEAPU8[$41] + 512332 | 0];
    HEAP8[$44] = HEAP8[$44] ^ HEAP8[HEAPU8[$43] + 512332 | 0];
    HEAP8[$46] = HEAP8[$46] ^ HEAP8[HEAPU8[$45] + 512332 | 0];
    var $92 = $rconpointer_034 + 1 | 0;
    HEAP8[$1] = (HEAPU8[$1] ^ HEAP32[($rconpointer_034 << 2) + 439228 >> 2]) & 255;
    L3250 : do {
      if ($47) {
        var $j_410 = 1;
        while (1) {
          var $j_410;
          var $114 = ($j_410 << 2) + $38 | 0;
          HEAP32[$114 >> 2] = HEAP32[$114 >> 2] ^ HEAP32[($j_410 - 1 << 2 >> 2) + $38$s2];
          var $117 = $j_410 + 1 | 0;
          if (($117 | 0) < ($48 | 0)) {
            var $j_410 = $117;
          } else {
            break;
          }
        }
        var $119 = $48 - 1 | 0;
        var $125 = ($48 << 2) + $38 | 0;
        HEAP8[$125] = HEAP8[$125] ^ HEAP8[HEAPU8[($119 << 2) + $38 | 0] + 512332 | 0];
        var $133 = ($48 << 2) + $38 + 1 | 0;
        HEAP8[$133] = HEAP8[$133] ^ HEAP8[HEAPU8[($119 << 2) + $38 + 1 | 0] + 512332 | 0];
        var $141 = ($48 << 2) + $38 + 2 | 0;
        HEAP8[$141] = HEAP8[$141] ^ HEAP8[HEAPU8[($119 << 2) + $38 + 2 | 0] + 512332 | 0];
        var $149 = ($48 << 2) + $38 + 3 | 0;
        HEAP8[$149] = HEAP8[$149] ^ HEAP8[HEAPU8[($119 << 2) + $38 + 3 | 0] + 512332 | 0];
        var $j_512 = $48 + 1 | 0;
        if ($j_512 >>> 0 < $KC_0 >>> 0) {
          var $j_5_in13 = $48;
          var $j_514 = $j_512;
        } else {
          break;
        }
        while (1) {
          var $j_514;
          var $j_5_in13;
          var $157 = ($j_514 << 2) + $38 | 0;
          HEAP32[$157 >> 2] = HEAP32[$157 >> 2] ^ HEAP32[($j_5_in13 << 2 >> 2) + $38$s2];
          var $j_5 = $j_514 + 1 | 0;
          if (($j_5 | 0) < ($KC_0 | 0)) {
            var $j_5_in13 = $j_514;
            var $j_514 = $j_5;
          } else {
            break L3250;
          }
        }
      } else {
        var $j_38 = 1;
        while (1) {
          var $j_38;
          var $104 = ($j_38 << 2) + $38 | 0;
          HEAP32[$104 >> 2] = HEAP32[$104 >> 2] ^ HEAP32[($j_38 - 1 << 2 >> 2) + $38$s2];
          var $107 = $j_38 + 1 | 0;
          if (($107 | 0) < ($KC_0 | 0)) {
            var $j_38 = $107;
          } else {
            break L3250;
          }
        }
      }
    } while (0);
    L3259 : do {
      if (($r_132 | 0) < ($36 | 0)) {
        var $r_226 = $r_132;
        var $j_627 = 0;
        var $t_328 = $t_233;
        while (1) {
          var $t_328;
          var $j_627;
          var $r_226;
          if (($j_627 | 0) < ($KC_0 | 0) & ($t_328 | 0) < 4) {
            var $164 = $j_627 - $KC_0 | 0;
            var $165 = $t_328 - 4 | 0;
            var $umax = $164 >>> 0 > $165 >>> 0 ? $164 : $165;
            var $171 = $j_627 - $KC_0 | 0;
            var $172 = $t_328 - 4 | 0;
            _memcpy(($r_226 << 4) + ($t_328 << 2) + $ctx54 | 0, ($j_627 << 2) + $1 | 0, ($171 >>> 0 > $172 >>> 0 ? $171 : $172) * -4 & -1);
            var $j_7_lcssa = $j_627 - $umax | 0;
            var $t_4_lcssa = $t_328 - $umax | 0;
          } else {
            var $j_7_lcssa = $j_627;
            var $t_4_lcssa = $t_328;
          }
          var $t_4_lcssa;
          var $j_7_lcssa;
          var $177 = ($t_4_lcssa | 0) == 4;
          var $_r_2 = ($177 & 1) + $r_226 | 0;
          var $_t_4 = $177 ? 0 : $t_4_lcssa;
          if (($j_7_lcssa | 0) < ($KC_0 | 0) & ($_r_2 | 0) < ($36 | 0)) {
            var $r_226 = $_r_2;
            var $j_627 = $j_7_lcssa;
            var $t_328 = $_t_4;
          } else {
            var $r_2_lcssa = $_r_2;
            var $t_3_lcssa = $_t_4;
            break L3259;
          }
        }
      } else {
        var $r_2_lcssa = $r_132;
        var $t_3_lcssa = $t_233;
      }
    } while (0);
    var $t_3_lcssa;
    var $r_2_lcssa;
    if (($r_2_lcssa | 0) < ($36 | 0)) {
      var $r_132 = $r_2_lcssa;
      var $t_233 = $t_3_lcssa;
      var $rconpointer_034 = $92;
    } else {
      var $_0 = 0;
      break;
    }
  }
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_do_setkey774["X"] = 1;
function _selftest775() {
  var $1 = _selftest_basic_128();
  if (($1 | 0) != 0) {
    var $_0 = $1;
    var $_0;
    return $_0;
  }
  var $4 = _selftest_basic_192();
  if (($4 | 0) == 0) {
    return _selftest_basic_256();
  } else {
    var $_0 = $4;
    var $_0;
    return $_0;
  }
}
function _do_decrypt_aligned($ctx, $b, $a) {
  var $122$s2;
  var $99$s2;
  var $76$s2;
  var $53$s2;
  var $6$s2;
  var $ctx$s2 = $ctx >> 2;
  var $2 = HEAP32[$ctx$s2 + 120];
  var $5 = $ctx + 240 | 0;
  var $6$s2 = $5 >> 2;
  var $10 = HEAP32[($2 << 4 >> 2) + $6$s2] ^ HEAP32[$a >> 2];
  var $17 = HEAP32[(($2 << 4) + 4 >> 2) + $6$s2] ^ HEAP32[$a + 4 >> 2];
  var $24 = HEAP32[(($2 << 4) + 8 >> 2) + $6$s2] ^ HEAP32[$a + 8 >> 2];
  var $31 = HEAP32[(($2 << 4) + 12 >> 2) + $6$s2] ^ HEAP32[$a + 12 >> 2];
  var $53$s2 = $b >> 2;
  HEAP32[$53$s2] = HEAP32[(($31 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($10 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($24 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($17 >>> 24 << 2) + 499772 >> 2];
  var $75 = $b + 4 | 0;
  var $76$s2 = $75 >> 2;
  HEAP32[$76$s2] = HEAP32[(($10 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($17 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($31 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($24 >>> 24 << 2) + 499772 >> 2];
  var $98 = $b + 8 | 0;
  var $99$s2 = $98 >> 2;
  HEAP32[$99$s2] = HEAP32[(($17 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($24 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($10 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($31 >>> 24 << 2) + 499772 >> 2];
  var $120 = HEAP32[(($24 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($31 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($17 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($10 >>> 24 << 2) + 499772 >> 2];
  var $121 = $b + 12 | 0;
  var $122$s2 = $121 >> 2;
  HEAP32[$122$s2] = $120;
  var $r_034 = $2 - 1 | 0;
  var $124 = HEAP32[$53$s2];
  L3275 : do {
    if (($r_034 | 0) > 1) {
      var $storemerge35 = $120;
      var $r_036 = $r_034;
      var $125 = $124;
      while (1) {
        var $125;
        var $r_036;
        var $storemerge35;
        var $129 = HEAP32[($r_036 << 4 >> 2) + $6$s2] ^ $125;
        var $134 = HEAP32[(($r_036 << 4) + 4 >> 2) + $6$s2] ^ HEAP32[$76$s2];
        var $139 = HEAP32[(($r_036 << 4) + 8 >> 2) + $6$s2] ^ HEAP32[$99$s2];
        var $143 = HEAP32[(($r_036 << 4) + 12 >> 2) + $6$s2] ^ $storemerge35;
        HEAP32[$53$s2] = HEAP32[(($143 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($129 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($139 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($134 >>> 24 << 2) + 499772 >> 2];
        HEAP32[$76$s2] = HEAP32[(($129 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($134 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($143 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($139 >>> 24 << 2) + 499772 >> 2];
        HEAP32[$99$s2] = HEAP32[(($134 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($139 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($129 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($143 >>> 24 << 2) + 499772 >> 2];
        var $227 = HEAP32[(($139 >>> 8 & 255) << 2) + 501820 >> 2] ^ HEAP32[(($143 & 255) << 2) + 502844 >> 2] ^ HEAP32[(($134 >>> 16 & 255) << 2) + 500796 >> 2] ^ HEAP32[($129 >>> 24 << 2) + 499772 >> 2];
        HEAP32[$122$s2] = $227;
        var $r_0 = $r_036 - 1 | 0;
        var $229 = HEAP32[$53$s2];
        if (($r_0 | 0) > 1) {
          var $storemerge35 = $227;
          var $r_036 = $r_0;
          var $125 = $229;
        } else {
          var $storemerge_lcssa = $227;
          var $_lcssa = $229;
          break L3275;
        }
      }
    } else {
      var $storemerge_lcssa = $120;
      var $_lcssa = $124;
    }
  } while (0);
  var $_lcssa;
  var $storemerge_lcssa;
  var $233 = HEAP32[$ctx$s2 + 64] ^ $_lcssa;
  var $238 = HEAP32[$ctx$s2 + 65] ^ HEAP32[$76$s2];
  var $243 = HEAP32[$ctx$s2 + 66] ^ HEAP32[$99$s2];
  var $247 = HEAP32[$ctx$s2 + 67] ^ $storemerge_lcssa;
  HEAP8[$b] = HEAP8[($233 & 255) + 512076 | 0];
  HEAP8[$b + 1 | 0] = HEAP8[($247 >>> 8 & 255) + 512076 | 0];
  HEAP8[$b + 2 | 0] = HEAP8[($243 >>> 16 & 255) + 512076 | 0];
  HEAP8[$b + 3 | 0] = HEAP8[($238 >>> 24) + 512076 | 0];
  HEAP8[$75] = HEAP8[($238 & 255) + 512076 | 0];
  HEAP8[$b + 5 | 0] = HEAP8[($233 >>> 8 & 255) + 512076 | 0];
  HEAP8[$b + 6 | 0] = HEAP8[($247 >>> 16 & 255) + 512076 | 0];
  HEAP8[$b + 7 | 0] = HEAP8[($243 >>> 24) + 512076 | 0];
  HEAP8[$98] = HEAP8[($243 & 255) + 512076 | 0];
  HEAP8[$b + 9 | 0] = HEAP8[($238 >>> 8 & 255) + 512076 | 0];
  HEAP8[$b + 10 | 0] = HEAP8[($233 >>> 16 & 255) + 512076 | 0];
  HEAP8[$b + 11 | 0] = HEAP8[($247 >>> 24) + 512076 | 0];
  HEAP8[$121] = HEAP8[($247 & 255) + 512076 | 0];
  HEAP8[$b + 13 | 0] = HEAP8[($243 >>> 8 & 255) + 512076 | 0];
  HEAP8[$b + 14 | 0] = HEAP8[($238 >>> 16 & 255) + 512076 | 0];
  HEAP8[$b + 15 | 0] = HEAP8[($233 >>> 24) + 512076 | 0];
  HEAP32[$53$s2] = HEAP32[$53$s2] ^ HEAP32[$5 >> 2];
  HEAP32[$76$s2] = HEAP32[$76$s2] ^ HEAP32[$5 + 4 >> 2];
  HEAP32[$99$s2] = HEAP32[$99$s2] ^ HEAP32[$ctx$s2 + 62];
  HEAP32[$122$s2] = HEAP32[$122$s2] ^ HEAP32[$ctx$s2 + 63];
  return;
}
_do_decrypt_aligned["X"] = 1;
function __gcry_rmd160_init($context) {
  var $context$s2 = $context >> 2;
  HEAP32[$context$s2] = 1732584193;
  HEAP32[$context$s2 + 1] = -271733879;
  HEAP32[$context$s2 + 2] = -1732584194;
  HEAP32[$context$s2 + 3] = 271733878;
  HEAP32[$context$s2 + 4] = -1009589776;
  HEAP32[$context$s2 + 5] = 0;
  HEAP32[$context$s2 + 22] = 0;
  return;
}
function __gcry_rmd160_mixblock($hd, $blockof64byte) {
  var $blockof64byte$s2 = $blockof64byte >> 2;
  var $hd$s2 = $hd >> 2;
  _transform782($hd, $blockof64byte);
  HEAP32[$blockof64byte$s2] = HEAP32[$hd$s2];
  HEAP32[$blockof64byte$s2 + 1] = HEAP32[$hd$s2 + 1];
  HEAP32[$blockof64byte$s2 + 2] = HEAP32[$hd$s2 + 2];
  HEAP32[$blockof64byte$s2 + 3] = HEAP32[$hd$s2 + 3];
  HEAP32[$blockof64byte$s2 + 4] = HEAP32[$hd$s2 + 4];
  return;
}
function _transform782($hd, $data) {
  var $10$s2;
  var $8$s2;
  var $2$s2;
  var $1 = $data;
  var $st$1$0 = $1 | 0;
  var $st$1$1 = $1 + 4 | 0;
  var $st$1$2 = $1 + 8 | 0;
  var $st$1$3 = $1 + 12 | 0;
  var $st$1$4 = $1 + 16 | 0;
  var $st$1$5 = $1 + 20 | 0;
  var $st$1$6 = $1 + 24 | 0;
  var $st$1$7 = $1 + 28 | 0;
  var $st$1$8 = $1 + 32 | 0;
  var $st$1$9 = $1 + 36 | 0;
  var $st$1$10 = $1 + 40 | 0;
  var $st$1$11 = $1 + 44 | 0;
  var $st$1$12 = $1 + 48 | 0;
  var $st$1$13 = $1 + 52 | 0;
  var $st$1$14 = $1 + 56 | 0;
  var $st$1$15 = $1 + 60 | 0;
  var $2$s2 = ($hd | 0) >> 2;
  var $3 = HEAP32[$2$s2];
  var $4 = $hd + 4 | 0;
  var $5 = HEAP32[$4 >> 2];
  var $6 = $hd + 8 | 0;
  var $7 = HEAP32[$6 >> 2];
  var $8$s2 = ($hd + 12 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10$s2 = ($hd + 16 | 0) >> 2;
  var $11 = HEAP32[$10$s2];
  var $14 = HEAPU8[$st$1$0] | HEAPU8[$st$1$0 + 1] << 8 | HEAPU8[$st$1$0 + 2] << 16 | HEAPU8[$st$1$0 + 3] << 24 | 0;
  var $16 = $3 + $14 + ($7 ^ $5 ^ $9) | 0;
  var $20 = ($16 << 11 | $16 >>> 21) + $11 | 0;
  var $23 = $7 << 10 | $7 >>> 22;
  var $27 = HEAPU8[$st$1$1] | HEAPU8[$st$1$1 + 1] << 8 | HEAPU8[$st$1$1 + 2] << 16 | HEAPU8[$st$1$1 + 3] << 24 | 0;
  var $29 = $11 + $27 + ($23 ^ $5 ^ $20) | 0;
  var $33 = ($29 << 14 | $29 >>> 18) + $9 | 0;
  var $36 = $5 << 10 | $5 >>> 22;
  var $40 = HEAPU8[$st$1$2] | HEAPU8[$st$1$2 + 1] << 8 | HEAPU8[$st$1$2 + 2] << 16 | HEAPU8[$st$1$2 + 3] << 24 | 0;
  var $42 = $9 + $40 + ($20 ^ $36 ^ $33) | 0;
  var $46 = ($42 << 15 | $42 >>> 17) + $23 | 0;
  var $49 = $20 << 10 | $20 >>> 22;
  var $53 = HEAPU8[$st$1$3] | HEAPU8[$st$1$3 + 1] << 8 | HEAPU8[$st$1$3 + 2] << 16 | HEAPU8[$st$1$3 + 3] << 24 | 0;
  var $55 = $23 + $53 + ($33 ^ $49 ^ $46) | 0;
  var $59 = ($55 << 12 | $55 >>> 20) + $36 | 0;
  var $62 = $33 << 10 | $33 >>> 22;
  var $66 = HEAPU8[$st$1$4] | HEAPU8[$st$1$4 + 1] << 8 | HEAPU8[$st$1$4 + 2] << 16 | HEAPU8[$st$1$4 + 3] << 24 | 0;
  var $68 = $36 + $66 + ($46 ^ $62 ^ $59) | 0;
  var $72 = ($68 << 5 | $68 >>> 27) + $49 | 0;
  var $75 = $46 << 10 | $46 >>> 22;
  var $79 = HEAPU8[$st$1$5] | HEAPU8[$st$1$5 + 1] << 8 | HEAPU8[$st$1$5 + 2] << 16 | HEAPU8[$st$1$5 + 3] << 24 | 0;
  var $81 = $49 + $79 + ($59 ^ $75 ^ $72) | 0;
  var $85 = ($81 << 8 | $81 >>> 24) + $62 | 0;
  var $88 = $59 << 10 | $59 >>> 22;
  var $92 = HEAPU8[$st$1$6] | HEAPU8[$st$1$6 + 1] << 8 | HEAPU8[$st$1$6 + 2] << 16 | HEAPU8[$st$1$6 + 3] << 24 | 0;
  var $94 = $62 + $92 + ($72 ^ $88 ^ $85) | 0;
  var $98 = ($94 << 7 | $94 >>> 25) + $75 | 0;
  var $101 = $72 << 10 | $72 >>> 22;
  var $105 = HEAPU8[$st$1$7] | HEAPU8[$st$1$7 + 1] << 8 | HEAPU8[$st$1$7 + 2] << 16 | HEAPU8[$st$1$7 + 3] << 24 | 0;
  var $107 = $75 + $105 + ($85 ^ $101 ^ $98) | 0;
  var $111 = ($107 << 9 | $107 >>> 23) + $88 | 0;
  var $114 = $85 << 10 | $85 >>> 22;
  var $118 = HEAPU8[$st$1$8] | HEAPU8[$st$1$8 + 1] << 8 | HEAPU8[$st$1$8 + 2] << 16 | HEAPU8[$st$1$8 + 3] << 24 | 0;
  var $120 = $88 + $118 + ($98 ^ $114 ^ $111) | 0;
  var $124 = ($120 << 11 | $120 >>> 21) + $101 | 0;
  var $127 = $98 << 10 | $98 >>> 22;
  var $131 = HEAPU8[$st$1$9] | HEAPU8[$st$1$9 + 1] << 8 | HEAPU8[$st$1$9 + 2] << 16 | HEAPU8[$st$1$9 + 3] << 24 | 0;
  var $133 = $101 + $131 + ($111 ^ $127 ^ $124) | 0;
  var $137 = ($133 << 13 | $133 >>> 19) + $114 | 0;
  var $140 = $111 << 10 | $111 >>> 22;
  var $144 = HEAPU8[$st$1$10] | HEAPU8[$st$1$10 + 1] << 8 | HEAPU8[$st$1$10 + 2] << 16 | HEAPU8[$st$1$10 + 3] << 24 | 0;
  var $146 = $114 + $144 + ($124 ^ $140 ^ $137) | 0;
  var $150 = ($146 << 14 | $146 >>> 18) + $127 | 0;
  var $153 = $124 << 10 | $124 >>> 22;
  var $157 = HEAPU8[$st$1$11] | HEAPU8[$st$1$11 + 1] << 8 | HEAPU8[$st$1$11 + 2] << 16 | HEAPU8[$st$1$11 + 3] << 24 | 0;
  var $159 = $127 + $157 + ($137 ^ $153 ^ $150) | 0;
  var $163 = ($159 << 15 | $159 >>> 17) + $140 | 0;
  var $166 = $137 << 10 | $137 >>> 22;
  var $170 = HEAPU8[$st$1$12] | HEAPU8[$st$1$12 + 1] << 8 | HEAPU8[$st$1$12 + 2] << 16 | HEAPU8[$st$1$12 + 3] << 24 | 0;
  var $172 = $140 + $170 + ($150 ^ $166 ^ $163) | 0;
  var $176 = ($172 << 6 | $172 >>> 26) + $153 | 0;
  var $179 = $150 << 10 | $150 >>> 22;
  var $183 = HEAPU8[$st$1$13] | HEAPU8[$st$1$13 + 1] << 8 | HEAPU8[$st$1$13 + 2] << 16 | HEAPU8[$st$1$13 + 3] << 24 | 0;
  var $185 = $153 + $183 + ($163 ^ $179 ^ $176) | 0;
  var $189 = ($185 << 7 | $185 >>> 25) + $166 | 0;
  var $192 = $163 << 10 | $163 >>> 22;
  var $196 = HEAPU8[$st$1$14] | HEAPU8[$st$1$14 + 1] << 8 | HEAPU8[$st$1$14 + 2] << 16 | HEAPU8[$st$1$14 + 3] << 24 | 0;
  var $198 = $166 + $196 + ($176 ^ $192 ^ $189) | 0;
  var $202 = ($198 << 9 | $198 >>> 23) + $179 | 0;
  var $205 = $176 << 10 | $176 >>> 22;
  var $209 = HEAPU8[$st$1$15] | HEAPU8[$st$1$15 + 1] << 8 | HEAPU8[$st$1$15 + 2] << 16 | HEAPU8[$st$1$15 + 3] << 24 | 0;
  var $211 = $179 + $209 + ($189 ^ $205 ^ $202) | 0;
  var $215 = ($211 << 8 | $211 >>> 24) + $192 | 0;
  var $218 = $189 << 10 | $189 >>> 22;
  var $225 = $105 + $192 + ($215 & $202 | $218 & ($215 ^ -1)) + 1518500249 | 0;
  var $229 = ($225 << 7 | $225 >>> 25) + $205 | 0;
  var $232 = $202 << 10 | $202 >>> 22;
  var $239 = $66 + $205 + ($229 & $215 | $232 & ($229 ^ -1)) + 1518500249 | 0;
  var $243 = ($239 << 6 | $239 >>> 26) + $218 | 0;
  var $246 = $215 << 10 | $215 >>> 22;
  var $253 = $183 + $218 + ($243 & $229 | $246 & ($243 ^ -1)) + 1518500249 | 0;
  var $257 = ($253 << 8 | $253 >>> 24) + $232 | 0;
  var $260 = $229 << 10 | $229 >>> 22;
  var $267 = $27 + $232 + ($257 & $243 | $260 & ($257 ^ -1)) + 1518500249 | 0;
  var $271 = ($267 << 13 | $267 >>> 19) + $246 | 0;
  var $274 = $243 << 10 | $243 >>> 22;
  var $281 = $144 + $246 + ($271 & $257 | $274 & ($271 ^ -1)) + 1518500249 | 0;
  var $285 = ($281 << 11 | $281 >>> 21) + $260 | 0;
  var $288 = $257 << 10 | $257 >>> 22;
  var $295 = $92 + $260 + ($285 & $271 | $288 & ($285 ^ -1)) + 1518500249 | 0;
  var $299 = ($295 << 9 | $295 >>> 23) + $274 | 0;
  var $302 = $271 << 10 | $271 >>> 22;
  var $309 = $209 + $274 + ($299 & $285 | $302 & ($299 ^ -1)) + 1518500249 | 0;
  var $313 = ($309 << 7 | $309 >>> 25) + $288 | 0;
  var $316 = $285 << 10 | $285 >>> 22;
  var $323 = $53 + $288 + ($313 & $299 | $316 & ($313 ^ -1)) + 1518500249 | 0;
  var $327 = ($323 << 15 | $323 >>> 17) + $302 | 0;
  var $330 = $299 << 10 | $299 >>> 22;
  var $337 = $170 + $302 + ($327 & $313 | $330 & ($327 ^ -1)) + 1518500249 | 0;
  var $341 = ($337 << 7 | $337 >>> 25) + $316 | 0;
  var $344 = $313 << 10 | $313 >>> 22;
  var $351 = $14 + $316 + ($341 & $327 | $344 & ($341 ^ -1)) + 1518500249 | 0;
  var $355 = ($351 << 12 | $351 >>> 20) + $330 | 0;
  var $358 = $327 << 10 | $327 >>> 22;
  var $365 = $131 + $330 + ($355 & $341 | $358 & ($355 ^ -1)) + 1518500249 | 0;
  var $369 = ($365 << 15 | $365 >>> 17) + $344 | 0;
  var $372 = $341 << 10 | $341 >>> 22;
  var $379 = $79 + $344 + ($369 & $355 | $372 & ($369 ^ -1)) + 1518500249 | 0;
  var $383 = ($379 << 9 | $379 >>> 23) + $358 | 0;
  var $386 = $355 << 10 | $355 >>> 22;
  var $393 = $40 + $358 + ($383 & $369 | $386 & ($383 ^ -1)) + 1518500249 | 0;
  var $397 = ($393 << 11 | $393 >>> 21) + $372 | 0;
  var $400 = $369 << 10 | $369 >>> 22;
  var $407 = $196 + $372 + ($397 & $383 | $400 & ($397 ^ -1)) + 1518500249 | 0;
  var $411 = ($407 << 7 | $407 >>> 25) + $386 | 0;
  var $414 = $383 << 10 | $383 >>> 22;
  var $421 = $157 + $386 + ($411 & $397 | $414 & ($411 ^ -1)) + 1518500249 | 0;
  var $425 = ($421 << 13 | $421 >>> 19) + $400 | 0;
  var $428 = $397 << 10 | $397 >>> 22;
  var $430 = $425 ^ -1;
  var $435 = $118 + $400 + ($425 & $411 | $428 & $430) + 1518500249 | 0;
  var $439 = ($435 << 12 | $435 >>> 20) + $414 | 0;
  var $442 = $411 << 10 | $411 >>> 22;
  var $447 = $53 + $414 + (($439 | $430) ^ $442) + 1859775393 | 0;
  var $451 = ($447 << 11 | $447 >>> 21) + $428 | 0;
  var $454 = $425 << 10 | $425 >>> 22;
  var $460 = $144 + $428 + (($451 | $439 ^ -1) ^ $454) + 1859775393 | 0;
  var $464 = ($460 << 13 | $460 >>> 19) + $442 | 0;
  var $467 = $439 << 10 | $439 >>> 22;
  var $473 = $196 + $442 + (($464 | $451 ^ -1) ^ $467) + 1859775393 | 0;
  var $477 = ($473 << 6 | $473 >>> 26) + $454 | 0;
  var $480 = $451 << 10 | $451 >>> 22;
  var $486 = $66 + $454 + (($477 | $464 ^ -1) ^ $480) + 1859775393 | 0;
  var $490 = ($486 << 7 | $486 >>> 25) + $467 | 0;
  var $493 = $464 << 10 | $464 >>> 22;
  var $499 = $131 + $467 + (($490 | $477 ^ -1) ^ $493) + 1859775393 | 0;
  var $503 = ($499 << 14 | $499 >>> 18) + $480 | 0;
  var $506 = $477 << 10 | $477 >>> 22;
  var $512 = $209 + $480 + (($503 | $490 ^ -1) ^ $506) + 1859775393 | 0;
  var $516 = ($512 << 9 | $512 >>> 23) + $493 | 0;
  var $519 = $490 << 10 | $490 >>> 22;
  var $525 = $118 + $493 + (($516 | $503 ^ -1) ^ $519) + 1859775393 | 0;
  var $529 = ($525 << 13 | $525 >>> 19) + $506 | 0;
  var $532 = $503 << 10 | $503 >>> 22;
  var $538 = $27 + $506 + (($529 | $516 ^ -1) ^ $532) + 1859775393 | 0;
  var $542 = ($538 << 15 | $538 >>> 17) + $519 | 0;
  var $545 = $516 << 10 | $516 >>> 22;
  var $551 = $40 + $519 + (($542 | $529 ^ -1) ^ $545) + 1859775393 | 0;
  var $555 = ($551 << 14 | $551 >>> 18) + $532 | 0;
  var $558 = $529 << 10 | $529 >>> 22;
  var $564 = $105 + $532 + (($555 | $542 ^ -1) ^ $558) + 1859775393 | 0;
  var $568 = ($564 << 8 | $564 >>> 24) + $545 | 0;
  var $571 = $542 << 10 | $542 >>> 22;
  var $577 = $14 + $545 + (($568 | $555 ^ -1) ^ $571) + 1859775393 | 0;
  var $581 = ($577 << 13 | $577 >>> 19) + $558 | 0;
  var $584 = $555 << 10 | $555 >>> 22;
  var $590 = $92 + $558 + (($581 | $568 ^ -1) ^ $584) + 1859775393 | 0;
  var $594 = ($590 << 6 | $590 >>> 26) + $571 | 0;
  var $597 = $568 << 10 | $568 >>> 22;
  var $603 = $183 + $571 + (($594 | $581 ^ -1) ^ $597) + 1859775393 | 0;
  var $607 = ($603 << 5 | $603 >>> 27) + $584 | 0;
  var $610 = $581 << 10 | $581 >>> 22;
  var $616 = $157 + $584 + (($607 | $594 ^ -1) ^ $610) + 1859775393 | 0;
  var $620 = ($616 << 12 | $616 >>> 20) + $597 | 0;
  var $623 = $594 << 10 | $594 >>> 22;
  var $629 = $79 + $597 + (($620 | $607 ^ -1) ^ $623) + 1859775393 | 0;
  var $633 = ($629 << 7 | $629 >>> 25) + $610 | 0;
  var $636 = $607 << 10 | $607 >>> 22;
  var $642 = $170 + $610 + (($633 | $620 ^ -1) ^ $636) + 1859775393 | 0;
  var $646 = ($642 << 5 | $642 >>> 27) + $623 | 0;
  var $649 = $620 << 10 | $620 >>> 22;
  var $656 = $27 - 1894007588 + $623 + ($646 & $649 | $633 & ($649 ^ -1)) | 0;
  var $660 = ($656 << 11 | $656 >>> 21) + $636 | 0;
  var $663 = $633 << 10 | $633 >>> 22;
  var $670 = $131 - 1894007588 + $636 + ($660 & $663 | $646 & ($663 ^ -1)) | 0;
  var $674 = ($670 << 12 | $670 >>> 20) + $649 | 0;
  var $677 = $646 << 10 | $646 >>> 22;
  var $684 = $157 - 1894007588 + $649 + ($674 & $677 | $660 & ($677 ^ -1)) | 0;
  var $688 = ($684 << 14 | $684 >>> 18) + $663 | 0;
  var $691 = $660 << 10 | $660 >>> 22;
  var $698 = $144 - 1894007588 + $663 + ($688 & $691 | $674 & ($691 ^ -1)) | 0;
  var $702 = ($698 << 15 | $698 >>> 17) + $677 | 0;
  var $705 = $674 << 10 | $674 >>> 22;
  var $712 = $14 - 1894007588 + $677 + ($702 & $705 | $688 & ($705 ^ -1)) | 0;
  var $716 = ($712 << 14 | $712 >>> 18) + $691 | 0;
  var $719 = $688 << 10 | $688 >>> 22;
  var $726 = $118 - 1894007588 + $691 + ($716 & $719 | $702 & ($719 ^ -1)) | 0;
  var $730 = ($726 << 15 | $726 >>> 17) + $705 | 0;
  var $733 = $702 << 10 | $702 >>> 22;
  var $740 = $170 - 1894007588 + $705 + ($730 & $733 | $716 & ($733 ^ -1)) | 0;
  var $744 = ($740 << 9 | $740 >>> 23) + $719 | 0;
  var $747 = $716 << 10 | $716 >>> 22;
  var $754 = $66 - 1894007588 + $719 + ($744 & $747 | $730 & ($747 ^ -1)) | 0;
  var $758 = ($754 << 8 | $754 >>> 24) + $733 | 0;
  var $761 = $730 << 10 | $730 >>> 22;
  var $768 = $183 - 1894007588 + $733 + ($758 & $761 | $744 & ($761 ^ -1)) | 0;
  var $772 = ($768 << 9 | $768 >>> 23) + $747 | 0;
  var $775 = $744 << 10 | $744 >>> 22;
  var $782 = $53 - 1894007588 + $747 + ($772 & $775 | $758 & ($775 ^ -1)) | 0;
  var $786 = ($782 << 14 | $782 >>> 18) + $761 | 0;
  var $789 = $758 << 10 | $758 >>> 22;
  var $796 = $105 - 1894007588 + $761 + ($786 & $789 | $772 & ($789 ^ -1)) | 0;
  var $800 = ($796 << 5 | $796 >>> 27) + $775 | 0;
  var $803 = $772 << 10 | $772 >>> 22;
  var $810 = $209 - 1894007588 + $775 + ($800 & $803 | $786 & ($803 ^ -1)) | 0;
  var $814 = ($810 << 6 | $810 >>> 26) + $789 | 0;
  var $817 = $786 << 10 | $786 >>> 22;
  var $824 = $196 - 1894007588 + $789 + ($814 & $817 | $800 & ($817 ^ -1)) | 0;
  var $828 = ($824 << 8 | $824 >>> 24) + $803 | 0;
  var $831 = $800 << 10 | $800 >>> 22;
  var $838 = $79 - 1894007588 + $803 + ($828 & $831 | $814 & ($831 ^ -1)) | 0;
  var $842 = ($838 << 6 | $838 >>> 26) + $817 | 0;
  var $845 = $814 << 10 | $814 >>> 22;
  var $852 = $92 - 1894007588 + $817 + ($842 & $845 | $828 & ($845 ^ -1)) | 0;
  var $856 = ($852 << 5 | $852 >>> 27) + $831 | 0;
  var $859 = $828 << 10 | $828 >>> 22;
  var $866 = $40 - 1894007588 + $831 + ($856 & $859 | $842 & ($859 ^ -1)) | 0;
  var $870 = ($866 << 12 | $866 >>> 20) + $845 | 0;
  var $873 = $842 << 10 | $842 >>> 22;
  var $879 = $66 - 1454113458 + $845 + ($870 ^ ($856 | $873 ^ -1)) | 0;
  var $883 = ($879 << 9 | $879 >>> 23) + $859 | 0;
  var $886 = $856 << 10 | $856 >>> 22;
  var $892 = $14 - 1454113458 + $859 + ($883 ^ ($870 | $886 ^ -1)) | 0;
  var $896 = ($892 << 15 | $892 >>> 17) + $873 | 0;
  var $899 = $870 << 10 | $870 >>> 22;
  var $905 = $79 - 1454113458 + $873 + ($896 ^ ($883 | $899 ^ -1)) | 0;
  var $909 = ($905 << 5 | $905 >>> 27) + $886 | 0;
  var $912 = $883 << 10 | $883 >>> 22;
  var $918 = $131 - 1454113458 + $886 + ($909 ^ ($896 | $912 ^ -1)) | 0;
  var $922 = ($918 << 11 | $918 >>> 21) + $899 | 0;
  var $925 = $896 << 10 | $896 >>> 22;
  var $931 = $105 - 1454113458 + $899 + ($922 ^ ($909 | $925 ^ -1)) | 0;
  var $935 = ($931 << 6 | $931 >>> 26) + $912 | 0;
  var $938 = $909 << 10 | $909 >>> 22;
  var $944 = $170 - 1454113458 + $912 + ($935 ^ ($922 | $938 ^ -1)) | 0;
  var $948 = ($944 << 8 | $944 >>> 24) + $925 | 0;
  var $951 = $922 << 10 | $922 >>> 22;
  var $957 = $40 - 1454113458 + $925 + ($948 ^ ($935 | $951 ^ -1)) | 0;
  var $961 = ($957 << 13 | $957 >>> 19) + $938 | 0;
  var $964 = $935 << 10 | $935 >>> 22;
  var $970 = $144 - 1454113458 + $938 + ($961 ^ ($948 | $964 ^ -1)) | 0;
  var $974 = ($970 << 12 | $970 >>> 20) + $951 | 0;
  var $977 = $948 << 10 | $948 >>> 22;
  var $983 = $196 - 1454113458 + $951 + ($974 ^ ($961 | $977 ^ -1)) | 0;
  var $987 = ($983 << 5 | $983 >>> 27) + $964 | 0;
  var $990 = $961 << 10 | $961 >>> 22;
  var $996 = $27 - 1454113458 + $964 + ($987 ^ ($974 | $990 ^ -1)) | 0;
  var $1000 = ($996 << 12 | $996 >>> 20) + $977 | 0;
  var $1003 = $974 << 10 | $974 >>> 22;
  var $1009 = $53 - 1454113458 + $977 + ($1000 ^ ($987 | $1003 ^ -1)) | 0;
  var $1013 = ($1009 << 13 | $1009 >>> 19) + $990 | 0;
  var $1016 = $987 << 10 | $987 >>> 22;
  var $1022 = $118 - 1454113458 + $990 + ($1013 ^ ($1000 | $1016 ^ -1)) | 0;
  var $1026 = ($1022 << 14 | $1022 >>> 18) + $1003 | 0;
  var $1029 = $1000 << 10 | $1000 >>> 22;
  var $1035 = $157 - 1454113458 + $1003 + ($1026 ^ ($1013 | $1029 ^ -1)) | 0;
  var $1039 = ($1035 << 11 | $1035 >>> 21) + $1016 | 0;
  var $1042 = $1013 << 10 | $1013 >>> 22;
  var $1048 = $92 - 1454113458 + $1016 + ($1039 ^ ($1026 | $1042 ^ -1)) | 0;
  var $1052 = ($1048 << 8 | $1048 >>> 24) + $1029 | 0;
  var $1055 = $1026 << 10 | $1026 >>> 22;
  var $1061 = $209 - 1454113458 + $1029 + ($1052 ^ ($1039 | $1055 ^ -1)) | 0;
  var $1065 = ($1061 << 5 | $1061 >>> 27) + $1042 | 0;
  var $1068 = $1039 << 10 | $1039 >>> 22;
  var $1074 = $183 - 1454113458 + $1042 + ($1065 ^ ($1052 | $1068 ^ -1)) | 0;
  var $1086 = $3 + $79 + (($7 | $9 ^ -1) ^ $5) + 1352829926 | 0;
  var $1090 = ($1086 << 8 | $1086 >>> 24) + $11 | 0;
  var $1096 = $196 + $11 + ($1090 ^ ($5 | $23 ^ -1)) + 1352829926 | 0;
  var $1100 = ($1096 << 9 | $1096 >>> 23) + $9 | 0;
  var $1106 = $105 + $9 + ($1100 ^ ($1090 | $36 ^ -1)) + 1352829926 | 0;
  var $1110 = ($1106 << 9 | $1106 >>> 23) + $23 | 0;
  var $1113 = $1090 << 10 | $1090 >>> 22;
  var $1119 = $14 + $23 + ($1110 ^ ($1100 | $1113 ^ -1)) + 1352829926 | 0;
  var $1123 = ($1119 << 11 | $1119 >>> 21) + $36 | 0;
  var $1126 = $1100 << 10 | $1100 >>> 22;
  var $1132 = $131 + $36 + ($1123 ^ ($1110 | $1126 ^ -1)) + 1352829926 | 0;
  var $1136 = ($1132 << 13 | $1132 >>> 19) + $1113 | 0;
  var $1139 = $1110 << 10 | $1110 >>> 22;
  var $1145 = $40 + $1113 + ($1136 ^ ($1123 | $1139 ^ -1)) + 1352829926 | 0;
  var $1149 = ($1145 << 15 | $1145 >>> 17) + $1126 | 0;
  var $1152 = $1123 << 10 | $1123 >>> 22;
  var $1158 = $157 + $1126 + ($1149 ^ ($1136 | $1152 ^ -1)) + 1352829926 | 0;
  var $1162 = ($1158 << 15 | $1158 >>> 17) + $1139 | 0;
  var $1165 = $1136 << 10 | $1136 >>> 22;
  var $1171 = $66 + $1139 + ($1162 ^ ($1149 | $1165 ^ -1)) + 1352829926 | 0;
  var $1175 = ($1171 << 5 | $1171 >>> 27) + $1152 | 0;
  var $1178 = $1149 << 10 | $1149 >>> 22;
  var $1184 = $183 + $1152 + ($1175 ^ ($1162 | $1178 ^ -1)) + 1352829926 | 0;
  var $1188 = ($1184 << 7 | $1184 >>> 25) + $1165 | 0;
  var $1191 = $1162 << 10 | $1162 >>> 22;
  var $1197 = $92 + $1165 + ($1188 ^ ($1175 | $1191 ^ -1)) + 1352829926 | 0;
  var $1201 = ($1197 << 7 | $1197 >>> 25) + $1178 | 0;
  var $1204 = $1175 << 10 | $1175 >>> 22;
  var $1210 = $209 + $1178 + ($1201 ^ ($1188 | $1204 ^ -1)) + 1352829926 | 0;
  var $1214 = ($1210 << 8 | $1210 >>> 24) + $1191 | 0;
  var $1217 = $1188 << 10 | $1188 >>> 22;
  var $1223 = $118 + $1191 + ($1214 ^ ($1201 | $1217 ^ -1)) + 1352829926 | 0;
  var $1227 = ($1223 << 11 | $1223 >>> 21) + $1204 | 0;
  var $1230 = $1201 << 10 | $1201 >>> 22;
  var $1236 = $27 + $1204 + ($1227 ^ ($1214 | $1230 ^ -1)) + 1352829926 | 0;
  var $1240 = ($1236 << 14 | $1236 >>> 18) + $1217 | 0;
  var $1243 = $1214 << 10 | $1214 >>> 22;
  var $1249 = $144 + $1217 + ($1240 ^ ($1227 | $1243 ^ -1)) + 1352829926 | 0;
  var $1253 = ($1249 << 14 | $1249 >>> 18) + $1230 | 0;
  var $1256 = $1227 << 10 | $1227 >>> 22;
  var $1262 = $53 + $1230 + ($1253 ^ ($1240 | $1256 ^ -1)) + 1352829926 | 0;
  var $1266 = ($1262 << 12 | $1262 >>> 20) + $1243 | 0;
  var $1269 = $1240 << 10 | $1240 >>> 22;
  var $1275 = $170 + $1243 + ($1266 ^ ($1253 | $1269 ^ -1)) + 1352829926 | 0;
  var $1279 = ($1275 << 6 | $1275 >>> 26) + $1256 | 0;
  var $1282 = $1253 << 10 | $1253 >>> 22;
  var $1289 = $92 + $1256 + ($1279 & $1282 | $1266 & ($1282 ^ -1)) + 1548603684 | 0;
  var $1293 = ($1289 << 9 | $1289 >>> 23) + $1269 | 0;
  var $1296 = $1266 << 10 | $1266 >>> 22;
  var $1303 = $157 + $1269 + ($1293 & $1296 | $1279 & ($1296 ^ -1)) + 1548603684 | 0;
  var $1307 = ($1303 << 13 | $1303 >>> 19) + $1282 | 0;
  var $1310 = $1279 << 10 | $1279 >>> 22;
  var $1317 = $53 + $1282 + ($1307 & $1310 | $1293 & ($1310 ^ -1)) + 1548603684 | 0;
  var $1321 = ($1317 << 15 | $1317 >>> 17) + $1296 | 0;
  var $1324 = $1293 << 10 | $1293 >>> 22;
  var $1331 = $105 + $1296 + ($1321 & $1324 | $1307 & ($1324 ^ -1)) + 1548603684 | 0;
  var $1335 = ($1331 << 7 | $1331 >>> 25) + $1310 | 0;
  var $1338 = $1307 << 10 | $1307 >>> 22;
  var $1345 = $14 + $1310 + ($1335 & $1338 | $1321 & ($1338 ^ -1)) + 1548603684 | 0;
  var $1349 = ($1345 << 12 | $1345 >>> 20) + $1324 | 0;
  var $1352 = $1321 << 10 | $1321 >>> 22;
  var $1359 = $183 + $1324 + ($1349 & $1352 | $1335 & ($1352 ^ -1)) + 1548603684 | 0;
  var $1363 = ($1359 << 8 | $1359 >>> 24) + $1338 | 0;
  var $1366 = $1335 << 10 | $1335 >>> 22;
  var $1373 = $79 + $1338 + ($1363 & $1366 | $1349 & ($1366 ^ -1)) + 1548603684 | 0;
  var $1377 = ($1373 << 9 | $1373 >>> 23) + $1352 | 0;
  var $1380 = $1349 << 10 | $1349 >>> 22;
  var $1387 = $144 + $1352 + ($1377 & $1380 | $1363 & ($1380 ^ -1)) + 1548603684 | 0;
  var $1391 = ($1387 << 11 | $1387 >>> 21) + $1366 | 0;
  var $1394 = $1363 << 10 | $1363 >>> 22;
  var $1401 = $196 + $1366 + ($1391 & $1394 | $1377 & ($1394 ^ -1)) + 1548603684 | 0;
  var $1405 = ($1401 << 7 | $1401 >>> 25) + $1380 | 0;
  var $1408 = $1377 << 10 | $1377 >>> 22;
  var $1415 = $209 + $1380 + ($1405 & $1408 | $1391 & ($1408 ^ -1)) + 1548603684 | 0;
  var $1419 = ($1415 << 7 | $1415 >>> 25) + $1394 | 0;
  var $1422 = $1391 << 10 | $1391 >>> 22;
  var $1429 = $118 + $1394 + ($1419 & $1422 | $1405 & ($1422 ^ -1)) + 1548603684 | 0;
  var $1433 = ($1429 << 12 | $1429 >>> 20) + $1408 | 0;
  var $1436 = $1405 << 10 | $1405 >>> 22;
  var $1443 = $170 + $1408 + ($1433 & $1436 | $1419 & ($1436 ^ -1)) + 1548603684 | 0;
  var $1447 = ($1443 << 7 | $1443 >>> 25) + $1422 | 0;
  var $1450 = $1419 << 10 | $1419 >>> 22;
  var $1457 = $66 + $1422 + ($1447 & $1450 | $1433 & ($1450 ^ -1)) + 1548603684 | 0;
  var $1461 = ($1457 << 6 | $1457 >>> 26) + $1436 | 0;
  var $1464 = $1433 << 10 | $1433 >>> 22;
  var $1471 = $131 + $1436 + ($1461 & $1464 | $1447 & ($1464 ^ -1)) + 1548603684 | 0;
  var $1475 = ($1471 << 15 | $1471 >>> 17) + $1450 | 0;
  var $1478 = $1447 << 10 | $1447 >>> 22;
  var $1485 = $27 + $1450 + ($1475 & $1478 | $1461 & ($1478 ^ -1)) + 1548603684 | 0;
  var $1489 = ($1485 << 13 | $1485 >>> 19) + $1464 | 0;
  var $1492 = $1461 << 10 | $1461 >>> 22;
  var $1499 = $40 + $1464 + ($1489 & $1492 | $1475 & ($1492 ^ -1)) + 1548603684 | 0;
  var $1503 = ($1499 << 11 | $1499 >>> 21) + $1478 | 0;
  var $1506 = $1475 << 10 | $1475 >>> 22;
  var $1512 = $209 + $1478 + (($1503 | $1489 ^ -1) ^ $1506) + 1836072691 | 0;
  var $1516 = ($1512 << 9 | $1512 >>> 23) + $1492 | 0;
  var $1519 = $1489 << 10 | $1489 >>> 22;
  var $1525 = $79 + $1492 + (($1516 | $1503 ^ -1) ^ $1519) + 1836072691 | 0;
  var $1529 = ($1525 << 7 | $1525 >>> 25) + $1506 | 0;
  var $1532 = $1503 << 10 | $1503 >>> 22;
  var $1538 = $27 + $1506 + (($1529 | $1516 ^ -1) ^ $1532) + 1836072691 | 0;
  var $1542 = ($1538 << 15 | $1538 >>> 17) + $1519 | 0;
  var $1545 = $1516 << 10 | $1516 >>> 22;
  var $1551 = $53 + $1519 + (($1542 | $1529 ^ -1) ^ $1545) + 1836072691 | 0;
  var $1555 = ($1551 << 11 | $1551 >>> 21) + $1532 | 0;
  var $1558 = $1529 << 10 | $1529 >>> 22;
  var $1564 = $105 + $1532 + (($1555 | $1542 ^ -1) ^ $1558) + 1836072691 | 0;
  var $1568 = ($1564 << 8 | $1564 >>> 24) + $1545 | 0;
  var $1571 = $1542 << 10 | $1542 >>> 22;
  var $1577 = $196 + $1545 + (($1568 | $1555 ^ -1) ^ $1571) + 1836072691 | 0;
  var $1581 = ($1577 << 6 | $1577 >>> 26) + $1558 | 0;
  var $1584 = $1555 << 10 | $1555 >>> 22;
  var $1590 = $92 + $1558 + (($1581 | $1568 ^ -1) ^ $1584) + 1836072691 | 0;
  var $1594 = ($1590 << 6 | $1590 >>> 26) + $1571 | 0;
  var $1597 = $1568 << 10 | $1568 >>> 22;
  var $1603 = $131 + $1571 + (($1594 | $1581 ^ -1) ^ $1597) + 1836072691 | 0;
  var $1607 = ($1603 << 14 | $1603 >>> 18) + $1584 | 0;
  var $1610 = $1581 << 10 | $1581 >>> 22;
  var $1616 = $157 + $1584 + (($1607 | $1594 ^ -1) ^ $1610) + 1836072691 | 0;
  var $1620 = ($1616 << 12 | $1616 >>> 20) + $1597 | 0;
  var $1623 = $1594 << 10 | $1594 >>> 22;
  var $1629 = $118 + $1597 + (($1620 | $1607 ^ -1) ^ $1623) + 1836072691 | 0;
  var $1633 = ($1629 << 13 | $1629 >>> 19) + $1610 | 0;
  var $1636 = $1607 << 10 | $1607 >>> 22;
  var $1642 = $170 + $1610 + (($1633 | $1620 ^ -1) ^ $1636) + 1836072691 | 0;
  var $1646 = ($1642 << 5 | $1642 >>> 27) + $1623 | 0;
  var $1649 = $1620 << 10 | $1620 >>> 22;
  var $1655 = $40 + $1623 + (($1646 | $1633 ^ -1) ^ $1649) + 1836072691 | 0;
  var $1659 = ($1655 << 14 | $1655 >>> 18) + $1636 | 0;
  var $1662 = $1633 << 10 | $1633 >>> 22;
  var $1668 = $144 + $1636 + (($1659 | $1646 ^ -1) ^ $1662) + 1836072691 | 0;
  var $1672 = ($1668 << 13 | $1668 >>> 19) + $1649 | 0;
  var $1675 = $1646 << 10 | $1646 >>> 22;
  var $1681 = $14 + $1649 + (($1672 | $1659 ^ -1) ^ $1675) + 1836072691 | 0;
  var $1685 = ($1681 << 13 | $1681 >>> 19) + $1662 | 0;
  var $1688 = $1659 << 10 | $1659 >>> 22;
  var $1694 = $66 + $1662 + (($1685 | $1672 ^ -1) ^ $1688) + 1836072691 | 0;
  var $1698 = ($1694 << 7 | $1694 >>> 25) + $1675 | 0;
  var $1701 = $1672 << 10 | $1672 >>> 22;
  var $1707 = $183 + $1675 + (($1698 | $1685 ^ -1) ^ $1701) + 1836072691 | 0;
  var $1711 = ($1707 << 5 | $1707 >>> 27) + $1688 | 0;
  var $1714 = $1685 << 10 | $1685 >>> 22;
  var $1721 = $118 + $1688 + ($1711 & $1698 | $1714 & ($1711 ^ -1)) + 2053994217 | 0;
  var $1725 = ($1721 << 15 | $1721 >>> 17) + $1701 | 0;
  var $1728 = $1698 << 10 | $1698 >>> 22;
  var $1735 = $92 + $1701 + ($1725 & $1711 | $1728 & ($1725 ^ -1)) + 2053994217 | 0;
  var $1739 = ($1735 << 5 | $1735 >>> 27) + $1714 | 0;
  var $1742 = $1711 << 10 | $1711 >>> 22;
  var $1749 = $66 + $1714 + ($1739 & $1725 | $1742 & ($1739 ^ -1)) + 2053994217 | 0;
  var $1753 = ($1749 << 8 | $1749 >>> 24) + $1728 | 0;
  var $1756 = $1725 << 10 | $1725 >>> 22;
  var $1763 = $27 + $1728 + ($1753 & $1739 | $1756 & ($1753 ^ -1)) + 2053994217 | 0;
  var $1767 = ($1763 << 11 | $1763 >>> 21) + $1742 | 0;
  var $1770 = $1739 << 10 | $1739 >>> 22;
  var $1777 = $53 + $1742 + ($1767 & $1753 | $1770 & ($1767 ^ -1)) + 2053994217 | 0;
  var $1781 = ($1777 << 14 | $1777 >>> 18) + $1756 | 0;
  var $1784 = $1753 << 10 | $1753 >>> 22;
  var $1791 = $157 + $1756 + ($1781 & $1767 | $1784 & ($1781 ^ -1)) + 2053994217 | 0;
  var $1795 = ($1791 << 14 | $1791 >>> 18) + $1770 | 0;
  var $1798 = $1767 << 10 | $1767 >>> 22;
  var $1805 = $209 + $1770 + ($1795 & $1781 | $1798 & ($1795 ^ -1)) + 2053994217 | 0;
  var $1809 = ($1805 << 6 | $1805 >>> 26) + $1784 | 0;
  var $1812 = $1781 << 10 | $1781 >>> 22;
  var $1819 = $14 + $1784 + ($1809 & $1795 | $1812 & ($1809 ^ -1)) + 2053994217 | 0;
  var $1823 = ($1819 << 14 | $1819 >>> 18) + $1798 | 0;
  var $1826 = $1795 << 10 | $1795 >>> 22;
  var $1833 = $79 + $1798 + ($1823 & $1809 | $1826 & ($1823 ^ -1)) + 2053994217 | 0;
  var $1837 = ($1833 << 6 | $1833 >>> 26) + $1812 | 0;
  var $1840 = $1809 << 10 | $1809 >>> 22;
  var $1847 = $170 + $1812 + ($1837 & $1823 | $1840 & ($1837 ^ -1)) + 2053994217 | 0;
  var $1851 = ($1847 << 9 | $1847 >>> 23) + $1826 | 0;
  var $1854 = $1823 << 10 | $1823 >>> 22;
  var $1861 = $40 + $1826 + ($1851 & $1837 | $1854 & ($1851 ^ -1)) + 2053994217 | 0;
  var $1865 = ($1861 << 12 | $1861 >>> 20) + $1840 | 0;
  var $1868 = $1837 << 10 | $1837 >>> 22;
  var $1875 = $183 + $1840 + ($1865 & $1851 | $1868 & ($1865 ^ -1)) + 2053994217 | 0;
  var $1879 = ($1875 << 9 | $1875 >>> 23) + $1854 | 0;
  var $1882 = $1851 << 10 | $1851 >>> 22;
  var $1889 = $131 + $1854 + ($1879 & $1865 | $1882 & ($1879 ^ -1)) + 2053994217 | 0;
  var $1893 = ($1889 << 12 | $1889 >>> 20) + $1868 | 0;
  var $1896 = $1865 << 10 | $1865 >>> 22;
  var $1903 = $105 + $1868 + ($1893 & $1879 | $1896 & ($1893 ^ -1)) + 2053994217 | 0;
  var $1907 = ($1903 << 5 | $1903 >>> 27) + $1882 | 0;
  var $1910 = $1879 << 10 | $1879 >>> 22;
  var $1917 = $144 + $1882 + ($1907 & $1893 | $1910 & ($1907 ^ -1)) + 2053994217 | 0;
  var $1921 = ($1917 << 15 | $1917 >>> 17) + $1896 | 0;
  var $1924 = $1893 << 10 | $1893 >>> 22;
  var $1931 = $196 + $1896 + ($1921 & $1907 | $1924 & ($1921 ^ -1)) + 2053994217 | 0;
  var $1935 = ($1931 << 8 | $1931 >>> 24) + $1910 | 0;
  var $1938 = $1907 << 10 | $1907 >>> 22;
  var $1942 = $1910 + $170 + ($1921 ^ $1938 ^ $1935) | 0;
  var $1946 = ($1942 << 8 | $1942 >>> 24) + $1924 | 0;
  var $1949 = $1921 << 10 | $1921 >>> 22;
  var $1953 = $1924 + $209 + ($1935 ^ $1949 ^ $1946) | 0;
  var $1957 = ($1953 << 5 | $1953 >>> 27) + $1938 | 0;
  var $1960 = $1935 << 10 | $1935 >>> 22;
  var $1964 = $1938 + $144 + ($1946 ^ $1960 ^ $1957) | 0;
  var $1968 = ($1964 << 12 | $1964 >>> 20) + $1949 | 0;
  var $1971 = $1946 << 10 | $1946 >>> 22;
  var $1975 = $1949 + $66 + ($1957 ^ $1971 ^ $1968) | 0;
  var $1979 = ($1975 << 9 | $1975 >>> 23) + $1960 | 0;
  var $1982 = $1957 << 10 | $1957 >>> 22;
  var $1986 = $1960 + $27 + ($1968 ^ $1982 ^ $1979) | 0;
  var $1990 = ($1986 << 12 | $1986 >>> 20) + $1971 | 0;
  var $1993 = $1968 << 10 | $1968 >>> 22;
  var $1997 = $1971 + $79 + ($1979 ^ $1993 ^ $1990) | 0;
  var $2001 = ($1997 << 5 | $1997 >>> 27) + $1982 | 0;
  var $2004 = $1979 << 10 | $1979 >>> 22;
  var $2008 = $1982 + $118 + ($1990 ^ $2004 ^ $2001) | 0;
  var $2012 = ($2008 << 14 | $2008 >>> 18) + $1993 | 0;
  var $2015 = $1990 << 10 | $1990 >>> 22;
  var $2019 = $1993 + $105 + ($2001 ^ $2015 ^ $2012) | 0;
  var $2023 = ($2019 << 6 | $2019 >>> 26) + $2004 | 0;
  var $2026 = $2001 << 10 | $2001 >>> 22;
  var $2030 = $2004 + $92 + ($2012 ^ $2026 ^ $2023) | 0;
  var $2034 = ($2030 << 8 | $2030 >>> 24) + $2015 | 0;
  var $2037 = $2012 << 10 | $2012 >>> 22;
  var $2041 = $2015 + $40 + ($2023 ^ $2037 ^ $2034) | 0;
  var $2045 = ($2041 << 13 | $2041 >>> 19) + $2026 | 0;
  var $2048 = $2023 << 10 | $2023 >>> 22;
  var $2052 = $2026 + $183 + ($2034 ^ $2048 ^ $2045) | 0;
  var $2056 = ($2052 << 6 | $2052 >>> 26) + $2037 | 0;
  var $2059 = $2034 << 10 | $2034 >>> 22;
  var $2063 = $2037 + $196 + ($2045 ^ $2059 ^ $2056) | 0;
  var $2067 = ($2063 << 5 | $2063 >>> 27) + $2048 | 0;
  var $2070 = $2045 << 10 | $2045 >>> 22;
  var $2074 = $2048 + $14 + ($2056 ^ $2070 ^ $2067) | 0;
  var $2078 = ($2074 << 15 | $2074 >>> 17) + $2059 | 0;
  var $2081 = $2056 << 10 | $2056 >>> 22;
  var $2085 = $2059 + $53 + ($2067 ^ $2081 ^ $2078) | 0;
  var $2089 = ($2085 << 13 | $2085 >>> 19) + $2070 | 0;
  var $2092 = $2067 << 10 | $2067 >>> 22;
  var $2096 = $2070 + $131 + ($2078 ^ $2092 ^ $2089) | 0;
  var $2100 = ($2096 << 11 | $2096 >>> 21) + $2081 | 0;
  var $2103 = $2078 << 10 | $2078 >>> 22;
  var $2107 = $2081 + $157 + ($2089 ^ $2103 ^ $2100) | 0;
  HEAP32[$4 >> 2] = $2103 + $7 + ($1052 << 10 | $1052 >>> 22) | 0;
  HEAP32[$6 >> 2] = $2092 + HEAP32[$8$s2] + $1068 | 0;
  HEAP32[$8$s2] = $1055 + HEAP32[$10$s2] + $2092 + ($2107 << 11 | $2107 >>> 21) | 0;
  HEAP32[$10$s2] = $1055 + HEAP32[$2$s2] + $2100 + ($1074 << 6 | $1074 >>> 26) | 0;
  HEAP32[$2$s2] = ($2089 << 10 | $2089 >>> 22) + $5 + $1065 | 0;
  return;
}
_transform782["X"] = 1;
function _rmd160_read($context) {
  return $context + 24 | 0;
}
function __gcry_rmd160_hash_buffer($outbuf, $buffer, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  var $hd = __stackBase__;
  var $1 = $hd;
  __gcry_rmd160_init($1);
  _rmd160_write($1, $buffer, $length);
  _rmd160_final($1);
  _memcpy($outbuf, $hd + 24 | 0, 20);
  STACKTOP = __stackBase__;
  return;
}
function _rmd160_write($context, $inbuf_arg, $inlen) {
  var $3$s2;
  var label = 0;
  var $1 = $context;
  var $3$s2 = ($context + 88 | 0) >> 2;
  var $4 = $context + 24 | 0;
  var $6 = $context + 20 | 0;
  var $inlen_tr = $inlen;
  var $inbuf_arg_tr = $inbuf_arg;
  L3285 : while (1) {
    var $inbuf_arg_tr;
    var $inlen_tr;
    if ((HEAP32[$3$s2] | 0) == 64) {
      _transform782($1, $4);
      __gcry_burn_stack(128);
      HEAP32[$3$s2] = 0;
      HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1 | 0;
    }
    if (($inbuf_arg_tr | 0) == 0) {
      label = 2510;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1_ph = $inbuf_arg_tr;
      var $_1_ph = $inlen_tr;
      break;
    } else {
      var $inbuf_0 = $inbuf_arg_tr;
      var $_0 = $inlen_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $inlen_tr = 0;
        var $inbuf_arg_tr = 0;
        continue L3285;
      }
      var $19 = HEAP32[$3$s2];
      if (($19 | 0) >= 64) {
        label = 2501;
        break L3285;
      }
      var $23 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $19 + 1 | 0;
      HEAP8[$19 + ($context + 24) | 0] = $23;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 2510) {
    return;
  } else if (label == 2501) {
    _rmd160_write($context, 0, 0);
    var $inbuf_1_ph = $inbuf_0;
    var $_1_ph = $_0;
  }
  var $_1_ph;
  var $inbuf_1_ph;
  L3299 : do {
    if ($_1_ph >>> 0 > 63) {
      var $29 = $context + 20 | 0;
      var $_13 = $_1_ph;
      var $inbuf_14 = $inbuf_1_ph;
      while (1) {
        var $inbuf_14;
        var $_13;
        _transform782($1, $inbuf_14);
        HEAP32[$3$s2] = 0;
        HEAP32[$29 >> 2] = HEAP32[$29 >> 2] + 1 | 0;
        var $33 = $_13 - 64 | 0;
        var $34 = $inbuf_14 + 64 | 0;
        if ($33 >>> 0 > 63) {
          var $_13 = $33;
          var $inbuf_14 = $34;
        } else {
          var $_1_lcssa = $33;
          var $inbuf_1_lcssa = $34;
          break L3299;
        }
      }
    } else {
      var $_1_lcssa = $_1_ph;
      var $inbuf_1_lcssa = $inbuf_1_ph;
    }
  } while (0);
  var $inbuf_1_lcssa;
  var $_1_lcssa;
  __gcry_burn_stack(128);
  var $inbuf_2 = $inbuf_1_lcssa;
  var $_2 = $_1_lcssa;
  while (1) {
    var $_2;
    var $inbuf_2;
    if (($_2 | 0) == 0) {
      label = 2512;
      break;
    }
    var $39 = HEAP32[$3$s2];
    if (($39 | 0) >= 64) {
      label = 2511;
      break;
    }
    var $43 = HEAP8[$inbuf_2];
    HEAP32[$3$s2] = $39 + 1 | 0;
    HEAP8[$39 + ($context + 24) | 0] = $43;
    var $inbuf_2 = $inbuf_2 + 1 | 0;
    var $_2 = $_2 - 1 | 0;
  }
  if (label == 2512) {
    return;
  } else if (label == 2511) {
    return;
  }
}
_rmd160_write["X"] = 1;
function _rmd160_final($context) {
  var $8$s2;
  var $context$s2 = $context >> 2;
  var $1 = $context;
  _rmd160_write($context, 0, 0);
  var $4 = HEAP32[$context$s2 + 5];
  var $8$s2 = ($context + 88 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10 = _llvm_uadd_with_overflow_i32($4 << 6, $9);
  var $msb_0 = (tempRet0 & 1) + ($4 >>> 26) | 0;
  var $13 = $10 << 3;
  var $16 = $msb_0 << 3 | $10 >>> 29;
  HEAP32[$8$s2] = $9 + 1 | 0;
  var $19 = $context + 24 | 0;
  HEAP8[$9 + ($context + 24) | 0] = -128;
  var $21 = HEAP32[$8$s2];
  L3312 : do {
    if (($9 | 0) < 56) {
      if (($21 | 0) < 56) {
        var $24 = $21;
      } else {
        break;
      }
      while (1) {
        var $24;
        HEAP32[$8$s2] = $24 + 1 | 0;
        HEAP8[$24 + ($context + 24) | 0] = 0;
        var $27 = HEAP32[$8$s2];
        if (($27 | 0) < 56) {
          var $24 = $27;
        } else {
          break L3312;
        }
      }
    } else {
      L3314 : do {
        if (($21 | 0) < 64) {
          var $29 = $21;
          while (1) {
            var $29;
            HEAP32[$8$s2] = $29 + 1 | 0;
            HEAP8[$29 + ($context + 24) | 0] = 0;
            var $32 = HEAP32[$8$s2];
            if (($32 | 0) < 64) {
              var $29 = $32;
            } else {
              break L3314;
            }
          }
        }
      } while (0);
      _rmd160_write($context, 0, 0);
      _memset($19, 0, 56);
    }
  } while (0);
  HEAP8[$context + 80 | 0] = $13 & 255;
  HEAP8[$context + 81 | 0] = $10 >>> 5 & 255;
  HEAP8[$context + 82 | 0] = $10 >>> 13 & 255;
  HEAP8[$context + 83 | 0] = $10 >>> 21 & 255;
  HEAP8[$context + 84 | 0] = $16 & 255;
  HEAP8[$context + 85 | 0] = $msb_0 >>> 5 & 255;
  HEAP8[$context + 86 | 0] = $msb_0 >>> 13 & 255;
  HEAP8[$context + 87 | 0] = $msb_0 >>> 21 & 255;
  _transform782($1, $19);
  __gcry_burn_stack(128);
  HEAP32[$19 >> 2] = HEAP32[$context$s2];
  HEAP32[$context$s2 + 7] = HEAP32[$context$s2 + 1];
  HEAP32[$context$s2 + 8] = HEAP32[$context$s2 + 2];
  HEAP32[$context$s2 + 9] = HEAP32[$context$s2 + 3];
  HEAP32[$context$s2 + 10] = HEAP32[$context$s2 + 4];
  return;
}
_rmd160_final["X"] = 1;
function _rsa_generate($algo, $nbits, $evalue, $skey, $retfactors) {
  return _rsa_generate_ext($algo, $nbits, $evalue, 0, $skey, $retfactors, 0);
}
function _rsa_check_secret_key($algo, $skey) {
  var $sk$s2;
  var $skey$s2 = $skey >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  HEAP32[$sk$s2] = HEAP32[$skey$s2];
  HEAP32[$sk$s2 + 1] = HEAP32[$skey$s2 + 1];
  HEAP32[$sk$s2 + 2] = HEAP32[$skey$s2 + 2];
  var $11 = $sk + 12 | 0;
  HEAP32[$11 >> 2] = HEAP32[$skey$s2 + 3];
  var $14 = $sk + 16 | 0;
  HEAP32[$14 >> 2] = HEAP32[$skey$s2 + 4];
  var $16 = HEAP32[$skey$s2 + 5];
  HEAP32[$sk$s2 + 5] = $16;
  if ((HEAP32[$11 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 68;
  }
  if ((HEAP32[$14 >> 2] | 0) == 0 | ($16 | 0) == 0) {
    STACKTOP = __stackBase__;
    return 68;
  } else {
    var $_ = (_check_secret_key($sk) | 0) == 0 ? 7 : 0;
    STACKTOP = __stackBase__;
    return $_;
  }
}
function _rsa_encrypt($algo, $resarr, $data, $pkey, $flags) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $pk = __stackBase__;
  var $2 = $pk | 0;
  HEAP32[$2 >> 2] = HEAP32[$pkey >> 2];
  HEAP32[$pk + 4 >> 2] = HEAP32[$pkey + 4 >> 2];
  var $9 = __gcry_mpi_alloc(HEAP32[HEAP32[$2 >> 2] + 4 >> 2]);
  HEAP32[$resarr >> 2] = $9;
  _public($9, $data, $pk);
  STACKTOP = __stackBase__;
  return 0;
}
function _rsa_decrypt($algo, $result, $data, $skey, $flags) {
  var $2$s2;
  var $sk$s2;
  var $skey$s2 = $skey >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $2$s2 = ($sk | 0) >> 2;
  HEAP32[$2$s2] = HEAP32[$skey$s2];
  var $5 = $sk + 4 | 0;
  HEAP32[$5 >> 2] = HEAP32[$skey$s2 + 1];
  HEAP32[$sk$s2 + 2] = HEAP32[$skey$s2 + 2];
  HEAP32[$sk$s2 + 3] = HEAP32[$skey$s2 + 3];
  HEAP32[$sk$s2 + 4] = HEAP32[$skey$s2 + 4];
  HEAP32[$sk$s2 + 5] = HEAP32[$skey$s2 + 5];
  var $20 = __gcry_mpi_snew(__gcry_mpi_get_nbits(HEAP32[$2$s2]));
  if (($flags & 1 | 0) == 0) {
    var $27 = __gcry_mpi_snew(__gcry_mpi_get_nbits(HEAP32[$2$s2]));
    var $30 = __gcry_mpi_snew(__gcry_mpi_get_nbits(HEAP32[$2$s2]));
    __gcry_mpi_randomize($27, __gcry_mpi_get_nbits(HEAP32[$2$s2]), 0);
    __gcry_mpi_mod($27, $27, HEAP32[$2$s2]);
    __gcry_mpi_invm($30, $27, HEAP32[$2$s2]);
    var $39 = _rsa_blind(HEAP32[$data >> 2], $27, HEAP32[$5 >> 2], HEAP32[$2$s2]);
    _secret($20, $39, $sk);
    var $40 = __gcry_mpi_copy($20);
    __gcry_mpi_release($20);
    var $42 = _rsa_unblind($40, $30, HEAP32[$2$s2]);
    __gcry_mpi_release($40);
    __gcry_mpi_release($39);
    __gcry_mpi_release($27);
    __gcry_mpi_release($30);
    var $y_08 = $42;
    var $y_08;
    HEAP32[$result >> 2] = $y_08;
    STACKTOP = __stackBase__;
    return 0;
  } else {
    _secret($20, HEAP32[$data >> 2], $sk);
    var $y_08 = $20;
    var $y_08;
    HEAP32[$result >> 2] = $y_08;
    STACKTOP = __stackBase__;
    return 0;
  }
}
_rsa_decrypt["X"] = 1;
function _rsa_sign($algo, $resarr, $data, $skey) {
  var $sk$s2;
  var $skey$s2 = $skey >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $2 = $sk | 0;
  HEAP32[$2 >> 2] = HEAP32[$skey$s2];
  HEAP32[$sk$s2 + 1] = HEAP32[$skey$s2 + 1];
  HEAP32[$sk$s2 + 2] = HEAP32[$skey$s2 + 2];
  HEAP32[$sk$s2 + 3] = HEAP32[$skey$s2 + 3];
  HEAP32[$sk$s2 + 4] = HEAP32[$skey$s2 + 4];
  HEAP32[$sk$s2 + 5] = HEAP32[$skey$s2 + 5];
  var $21 = __gcry_mpi_alloc(HEAP32[HEAP32[$2 >> 2] + 4 >> 2]);
  HEAP32[$resarr >> 2] = $21;
  _secret($21, $data, $sk);
  STACKTOP = __stackBase__;
  return 0;
}
function _rsa_verify($algo, $hash, $data, $pkey, $cmp, $opaquev) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $pk = __stackBase__;
  HEAP32[$pk >> 2] = HEAP32[$pkey >> 2];
  HEAP32[$pk + 4 >> 2] = HEAP32[$pkey + 4 >> 2];
  var $6 = __gcry_mpi_new(160);
  _public($6, HEAP32[$data >> 2], $pk);
  if (($cmp | 0) == 0) {
    var $rc_0 = (__gcry_mpi_cmp($6, $hash) | 0) != 0 ? 8 : 0;
    var $rc_0;
    __gcry_mpi_release($6);
    STACKTOP = __stackBase__;
    return $rc_0;
  } else {
    var $rc_0 = FUNCTION_TABLE[$cmp]($opaquev, $6);
    var $rc_0;
    __gcry_mpi_release($6);
    STACKTOP = __stackBase__;
    return $rc_0;
  }
}
function _rsa_get_nbits($algo, $pkey) {
  return __gcry_mpi_get_nbits(HEAP32[$pkey >> 2]);
}
function _run_selftests847($algo, $extended, $report) {
  if (($algo | 0) == 1) {
    var $ec_0 = _selftests_rsa($report);
  } else {
    var $ec_0 = 4;
  }
  var $ec_0;
  return $ec_0;
}
function _rsa_generate_ext($algo, $nbits, $evalue, $genparms, $skey, $retfactors, $r_extrainfo) {
  var $sk$s2;
  var $skey$s2 = $skey >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $swapped = __stackBase__ + 24;
  HEAP32[$retfactors >> 2] = 0;
  do {
    if (($genparms | 0) == 0) {
      label = 2547;
    } else {
      var $3 = __gcry_sexp_find_token($genparms, 469824, 0);
      if (($3 | 0) == 0) {
        label = 2547;
        break;
      } else {
        var $11 = $3;
        label = 2550;
        break;
      }
    }
  } while (0);
  do {
    if (label == 2547) {
      var $5 = __gcry_sexp_find_token($genparms, 468116, 0);
      if (($5 | 0) != 0) {
        __gcry_sexp_release($5);
        var $11 = 0;
        label = 2550;
        break;
      }
      if ((__gcry_fips_mode() | 0) != 0) {
        var $11 = 0;
        label = 2550;
        break;
      }
      var $33 = __gcry_sexp_find_token($genparms, 464808, 0);
      if (($33 | 0) == 0) {
        var $transient_key_0 = 0;
      } else {
        __gcry_sexp_release($33);
        var $transient_key_0 = 1;
      }
      var $transient_key_0;
      var $ec_0 = _generate_std($sk, $nbits, $evalue, $transient_key_0);
      label = 2556;
      break;
    }
  } while (0);
  do {
    if (label == 2550) {
      var $11;
      var $12 = _generate_x931($sk, $nbits, $evalue, $11, $swapped);
      __gcry_sexp_release($11);
      if (($12 | 0) != 0 | ($r_extrainfo | 0) == 0 | (HEAP32[$swapped >> 2] | 0) == 0) {
        var $ec_0 = $12;
        label = 2556;
        break;
      }
      var $18 = __gcry_sexp_new($r_extrainfo, 466416, 0, 1);
      if (($18 | 0) == 0) {
        break;
      }
      var $20 = $sk | 0;
      __gcry_mpi_release(HEAP32[$20 >> 2]);
      HEAP32[$20 >> 2] = 0;
      var $22 = $sk + 4 | 0;
      __gcry_mpi_release(HEAP32[$22 >> 2]);
      HEAP32[$22 >> 2] = 0;
      var $24 = $sk + 12 | 0;
      __gcry_mpi_release(HEAP32[$24 >> 2]);
      HEAP32[$24 >> 2] = 0;
      var $26 = $sk + 16 | 0;
      __gcry_mpi_release(HEAP32[$26 >> 2]);
      HEAP32[$26 >> 2] = 0;
      var $28 = $sk + 8 | 0;
      __gcry_mpi_release(HEAP32[$28 >> 2]);
      HEAP32[$28 >> 2] = 0;
      var $30 = $sk + 20 | 0;
      __gcry_mpi_release(HEAP32[$30 >> 2]);
      HEAP32[$30 >> 2] = 0;
      var $ec_09 = $18;
      var $ec_09;
      STACKTOP = __stackBase__;
      return $ec_09;
    }
  } while (0);
  do {
    if (label == 2556) {
      var $ec_0;
      if (($ec_0 | 0) == 0) {
        break;
      } else {
        var $ec_09 = $ec_0;
      }
      var $ec_09;
      STACKTOP = __stackBase__;
      return $ec_09;
    }
  } while (0);
  HEAP32[$skey$s2] = HEAP32[$sk$s2];
  HEAP32[$skey$s2 + 1] = HEAP32[$sk$s2 + 1];
  HEAP32[$skey$s2 + 2] = HEAP32[$sk$s2 + 2];
  HEAP32[$skey$s2 + 3] = HEAP32[$sk$s2 + 3];
  HEAP32[$skey$s2 + 4] = HEAP32[$sk$s2 + 4];
  HEAP32[$skey$s2 + 5] = HEAP32[$sk$s2 + 5];
  var $ec_09 = 0;
  var $ec_09;
  STACKTOP = __stackBase__;
  return $ec_09;
}
_rsa_generate_ext["X"] = 1;
function _compute_keygrip($md, $keyparam) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $datalen = __stackBase__;
  var $1 = __gcry_sexp_find_token($keyparam, 471084, 1);
  do {
    if (($1 | 0) == 0) {
      var $_0 = 68;
    } else {
      var $4 = __gcry_sexp_nth_data($1, 1, $datalen);
      if (($4 | 0) == 0) {
        __gcry_sexp_release($1);
        var $_0 = 68;
        break;
      } else {
        __gcry_md_write($md, $4, HEAP32[$datalen >> 2]);
        __gcry_sexp_release($1);
        var $_0 = 0;
        break;
      }
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _generate_x931($sk, $nbits, $e_value, $deriveparms, $swapped) {
  var $123$s2;
  var $122$s2;
  var $121$s2;
  var $120$s2;
  var $119$s2;
  var $118$s2;
  var $tbl$s2;
  var $xq$s2;
  var $xq2$s2;
  var $xq1$s2;
  var $xp$s2;
  var $xp2$s2;
  var $xp1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  var $xp1 = __stackBase__, $xp1$s2 = $xp1 >> 2;
  var $xp2 = __stackBase__ + 4, $xp2$s2 = $xp2 >> 2;
  var $xp = __stackBase__ + 8, $xp$s2 = $xp >> 2;
  var $xq1 = __stackBase__ + 12, $xq1$s2 = $xq1 >> 2;
  var $xq2 = __stackBase__ + 16, $xq2$s2 = $xq2 >> 2;
  var $xq = __stackBase__ + 20, $xq$s2 = $xq >> 2;
  var $tbl = __stackBase__ + 24, $tbl$s2 = $tbl >> 2;
  HEAP32[$swapped >> 2] = 0;
  var $_e_value = ($e_value | 0) == 1 ? 65537 : $e_value;
  if (($nbits & 255 | 0) != 0 | $nbits >>> 0 < 1024 | $_e_value >>> 0 < 3 | ($_e_value & 1 | 0) == 0) {
    var $_0 = 55;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$xp1$s2] = 0;
  HEAP32[$xp2$s2] = 0;
  HEAP32[$xp$s2] = 0;
  HEAP32[$xq1$s2] = 0;
  HEAP32[$xq2$s2] = 0;
  HEAP32[$xq$s2] = 0;
  L3382 : do {
    if (($deriveparms | 0) == 0) {
      var $9 = $nbits >>> 1;
      HEAP32[$xp$s2] = _gen_x931_parm_xp($9);
      var $11 = __gcry_mpi_snew($9);
      var $12 = $9 - 100 | 0;
      while (1) {
        __gcry_mpi_release(HEAP32[$xq$s2]);
        var $15 = _gen_x931_parm_xp($9);
        HEAP32[$xq$s2] = $15;
        __gcry_mpi_sub($11, HEAP32[$xp$s2], $15);
        if (__gcry_mpi_get_nbits($11) >>> 0 > $12 >>> 0) {
          break;
        }
      }
      __gcry_mpi_release($11);
      HEAP32[$xp1$s2] = _gen_x931_parm_xi();
      HEAP32[$xp2$s2] = _gen_x931_parm_xi();
      HEAP32[$xq1$s2] = _gen_x931_parm_xi();
      HEAP32[$xq2$s2] = _gen_x931_parm_xi();
    } else {
      var $25 = $tbl;
      for (var $$dest = $25 >> 2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0;
      }
      HEAP32[$tbl$s2] = 480244;
      HEAP32[$tbl$s2 + 2] = 479772;
      HEAP32[$tbl$s2 + 4] = 479504;
      HEAP32[$tbl$s2 + 6] = 478944;
      HEAP32[$tbl$s2 + 8] = 478616;
      HEAP32[$tbl$s2 + 10] = 478308;
      HEAP32[$tbl$s2 + 1] = $xp1;
      HEAP32[$tbl$s2 + 3] = $xp2;
      HEAP32[$tbl$s2 + 5] = $xp;
      HEAP32[$tbl$s2 + 7] = $xq1;
      HEAP32[$tbl$s2 + 9] = $xq2;
      HEAP32[$tbl$s2 + 11] = $xq;
      var $39 = HEAP32[$tbl$s2];
      L3384 : do {
        if (($39 | 0) == 0) {
          var $idx_1 = 0;
        } else {
          var $idx_010 = 0;
          var $41 = $39;
          while (1) {
            var $41;
            var $idx_010;
            var $42 = __gcry_sexp_find_token($deriveparms, $41, 0);
            if (($42 | 0) != 0) {
              var $45 = __gcry_sexp_nth_mpi($42, 1, 5);
              HEAP32[HEAP32[(($idx_010 << 3) + 4 >> 2) + $tbl$s2] >> 2] = $45;
              __gcry_sexp_release($42);
            }
            var $49 = $idx_010 + 1 | 0;
            var $51 = HEAP32[($49 << 3 >> 2) + $tbl$s2];
            if (($51 | 0) == 0) {
              var $idx_1 = 0;
              break L3384;
            } else {
              var $idx_010 = $49;
              var $41 = $51;
            }
          }
        }
      } while (0);
      while (1) {
        var $idx_1;
        var $53 = ($idx_1 << 3) + $tbl | 0;
        if ((HEAP32[$53 >> 2] | 0) == 0) {
          break L3382;
        }
        if ((HEAP32[HEAP32[(($idx_1 << 3) + 4 >> 2) + $tbl$s2] >> 2] | 0) == 0) {
          break;
        } else {
          var $idx_1 = $idx_1 + 1 | 0;
        }
      }
      if ((HEAP32[$53 >> 2] | 0) == 0) {
        break;
      }
      if ((HEAP32[$tbl$s2] | 0) == 0) {
        var $_0 = 128;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        var $idx_27 = 0;
      }
      while (1) {
        var $idx_27;
        __gcry_mpi_release(HEAP32[HEAP32[(($idx_27 << 3) + 4 >> 2) + $tbl$s2] >> 2]);
        var $70 = $idx_27 + 1 | 0;
        if ((HEAP32[($70 << 3 >> 2) + $tbl$s2] | 0) == 0) {
          var $_0 = 128;
          break;
        } else {
          var $idx_27 = $70;
        }
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $74 = __gcry_mpi_alloc_set_ui($_e_value);
  var $78 = __gcry_derive_x931_prime(HEAP32[$xp$s2], HEAP32[$xp1$s2], HEAP32[$xp2$s2], $74, 0, 0);
  var $82 = __gcry_derive_x931_prime(HEAP32[$xq$s2], HEAP32[$xq1$s2], HEAP32[$xq2$s2], $74, 0, 0);
  __gcry_mpi_release(HEAP32[$xp$s2]);
  HEAP32[$xp$s2] = 0;
  __gcry_mpi_release(HEAP32[$xp1$s2]);
  HEAP32[$xp1$s2] = 0;
  __gcry_mpi_release(HEAP32[$xp2$s2]);
  HEAP32[$xp2$s2] = 0;
  __gcry_mpi_release(HEAP32[$xq$s2]);
  HEAP32[$xq$s2] = 0;
  __gcry_mpi_release(HEAP32[$xq1$s2]);
  HEAP32[$xq1$s2] = 0;
  __gcry_mpi_release(HEAP32[$xq2$s2]);
  HEAP32[$xq2$s2] = 0;
  if (($78 | 0) == 0 | ($82 | 0) == 0) {
    __gcry_mpi_release($78);
    __gcry_mpi_release($82);
    __gcry_mpi_release($74);
    var $_0 = 21;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_mpi_cmp($78, $82) | 0) > 0) {
    __gcry_mpi_swap($78, $82);
    HEAP32[$swapped >> 2] = 1;
  }
  var $97 = __gcry_mpi_new($nbits);
  __gcry_mpi_mul($97, $78, $82);
  var $98 = $nbits >>> 1;
  var $99 = __gcry_mpi_snew($98);
  var $100 = __gcry_mpi_snew($98);
  var $101 = __gcry_mpi_snew($nbits);
  __gcry_mpi_sub_ui($99, $78, 1);
  __gcry_mpi_sub_ui($100, $82, 1);
  __gcry_mpi_mul($101, $99, $100);
  var $102 = __gcry_mpi_snew($nbits);
  if ((__gcry_mpi_gcd($102, $74, $101) | 0) == 0) {
    __gcry_assert_failed(477940, 490036, 531, 494384);
  }
  __gcry_mpi_gcd($102, $99, $100);
  __gcry_mpi_release($100);
  __gcry_mpi_fdiv_q($99, $101, $102);
  __gcry_mpi_release($101);
  __gcry_mpi_invm($102, $74, $99);
  __gcry_mpi_invm($99, $78, $82);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    if ((HEAP32[$swapped >> 2] | 0) != 0) {
      __gcry_log_debug(477644, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    __gcry_log_mpidump(477352, $78);
    __gcry_log_mpidump(477200, $82);
    __gcry_log_mpidump(476600, $97);
    __gcry_log_mpidump(476192, $74);
    __gcry_log_mpidump(475992, $102);
    __gcry_log_mpidump(475748, $99);
  }
  var $118$s2 = ($sk | 0) >> 2;
  HEAP32[$118$s2] = $97;
  var $119$s2 = ($sk + 4 | 0) >> 2;
  HEAP32[$119$s2] = $74;
  var $120$s2 = ($sk + 12 | 0) >> 2;
  HEAP32[$120$s2] = $78;
  var $121$s2 = ($sk + 16 | 0) >> 2;
  HEAP32[$121$s2] = $82;
  var $122$s2 = ($sk + 8 | 0) >> 2;
  HEAP32[$122$s2] = $102;
  var $123$s2 = ($sk + 20 | 0) >> 2;
  HEAP32[$123$s2] = $99;
  if ((_test_keys($sk, $nbits - 64 | 0) | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_mpi_release(HEAP32[$118$s2]);
  HEAP32[$118$s2] = 0;
  __gcry_mpi_release(HEAP32[$119$s2]);
  HEAP32[$119$s2] = 0;
  __gcry_mpi_release(HEAP32[$120$s2]);
  HEAP32[$120$s2] = 0;
  __gcry_mpi_release(HEAP32[$121$s2]);
  HEAP32[$121$s2] = 0;
  __gcry_mpi_release(HEAP32[$122$s2]);
  HEAP32[$122$s2] = 0;
  __gcry_mpi_release(HEAP32[$123$s2]);
  HEAP32[$123$s2] = 0;
  __gcry_fips_signal_error(490036, 576, 494384, 0, 481336);
  var $_0 = 50;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_generate_x931["X"] = 1;
function _gpg_err_code849($err) {
  return $err & 65535;
}
function _check_exponent($arg, $a) {
  __gcry_mpi_sub_ui($a, $a, 1);
  var $2 = __gcry_mpi_alloc_like($a);
  var $5 = (__gcry_mpi_gcd($2, $arg, $a) | 0) == 0 & 1;
  __gcry_mpi_release($2);
  __gcry_mpi_add_ui($a, $a, 1);
  return $5;
}
function _test_keys($sk, $nbits) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $pk = __stackBase__;
  var $1 = __gcry_mpi_new($nbits);
  var $2 = __gcry_mpi_new($nbits);
  var $3 = __gcry_mpi_new($nbits);
  var $4 = __gcry_mpi_new($nbits);
  HEAP32[$pk >> 2] = HEAP32[$sk >> 2];
  HEAP32[$pk + 4 >> 2] = HEAP32[$sk + 4 >> 2];
  __gcry_mpi_randomize($1, $nbits, 0);
  _public($2, $1, $pk);
  do {
    if ((__gcry_mpi_cmp($2, $1) | 0) == 0) {
      var $result_0 = -1;
    } else {
      _secret($3, $2, $sk);
      if ((__gcry_mpi_cmp($3, $1) | 0) != 0) {
        var $result_0 = -1;
        break;
      }
      __gcry_mpi_randomize($1, $nbits, 0);
      _secret($4, $1, $sk);
      _public($3, $4, $pk);
      if ((__gcry_mpi_cmp($3, $1) | 0) != 0) {
        var $result_0 = -1;
        break;
      }
      __gcry_mpi_add_ui($4, $4, 1);
      _public($3, $4, $pk);
      var $result_0 = ((__gcry_mpi_cmp($3, $1) | 0) == 0) << 31 >> 31;
    }
  } while (0);
  var $result_0;
  __gcry_mpi_release($4);
  __gcry_mpi_release($3);
  __gcry_mpi_release($2);
  __gcry_mpi_release($1);
  STACKTOP = __stackBase__;
  return $result_0;
}
function _public($output, $input, $pkey) {
  if (($output | 0) == ($input | 0)) {
    var $6 = __gcry_mpi_alloc(HEAP32[$input + 4 >> 2] << 1);
    __gcry_mpi_powm($6, $input, HEAP32[$pkey + 4 >> 2], HEAP32[$pkey >> 2]);
    __gcry_mpi_set($output, $6);
    __gcry_mpi_free($6);
    return;
  } else {
    __gcry_mpi_powm($output, $input, HEAP32[$pkey + 4 >> 2], HEAP32[$pkey >> 2]);
    return;
  }
}
function _secret($output, $input, $skey) {
  var $18$s2;
  var $5$s2;
  var $1$s2;
  var $1$s2 = ($skey + 12 | 0) >> 2;
  do {
    if ((HEAP32[$1$s2] | 0) != 0) {
      var $5$s2 = ($skey + 16 | 0) >> 2;
      if ((HEAP32[$5$s2] | 0) == 0) {
        break;
      }
      var $9 = $skey + 20 | 0;
      if ((HEAP32[$9 >> 2] | 0) == 0) {
        break;
      }
      var $18$s2 = ($skey | 0) >> 2;
      var $23 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[$18$s2] + 4 >> 2] + 1 | 0);
      var $28 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[$18$s2] + 4 >> 2] + 1 | 0);
      var $33 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[$18$s2] + 4 >> 2] + 1 | 0);
      __gcry_mpi_sub_ui($33, HEAP32[$1$s2], 1);
      var $35 = $skey + 8 | 0;
      __gcry_mpi_fdiv_r($33, HEAP32[$35 >> 2], $33);
      __gcry_mpi_powm($23, $input, $33, HEAP32[$1$s2]);
      __gcry_mpi_sub_ui($33, HEAP32[$5$s2], 1);
      __gcry_mpi_fdiv_r($33, HEAP32[$35 >> 2], $33);
      __gcry_mpi_powm($28, $input, $33, HEAP32[$5$s2]);
      __gcry_mpi_sub($33, $28, $23);
      if ((HEAP32[$33 + 8 >> 2] | 0) != 0) {
        __gcry_mpi_add($33, $33, HEAP32[$5$s2]);
      }
      __gcry_mpi_mulm($33, HEAP32[$9 >> 2], $33, HEAP32[$5$s2]);
      __gcry_mpi_mul($33, $33, HEAP32[$1$s2]);
      __gcry_mpi_add($output, $23, $33);
      __gcry_mpi_free($33);
      __gcry_mpi_free($23);
      __gcry_mpi_free($28);
      return;
    }
  } while (0);
  __gcry_mpi_powm($output, $input, HEAP32[$skey + 8 >> 2], HEAP32[$skey >> 2]);
  return;
}
_secret["X"] = 1;
function _selftests_rsa($report) {
  var $pkey$s2;
  var $skey$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $skey = __stackBase__, $skey$s2 = $skey >> 2;
  var $pkey = __stackBase__ + 4, $pkey$s2 = $pkey >> 2;
  HEAP32[$skey$s2] = 0;
  HEAP32[$pkey$s2] = 0;
  var $1 = __gcry_sexp_sscan($skey, 0, 428132, 1029);
  do {
    if (($1 | 0) == 0) {
      var $4 = __gcry_sexp_sscan($pkey, 0, 430084, 316);
      if (($4 | 0) != 0) {
        var $err_01 = $4;
        label = 2625;
        break;
      }
      var $9 = __gcry_pk_testkey(HEAP32[$skey$s2]);
      if (($9 | 0) != 0) {
        var $what_0 = 474768;
        var $errtxt_0 = __gcry_strerror($9);
        break;
      }
      var $16 = _selftest_sign_1024(HEAP32[$pkey$s2], HEAP32[$skey$s2]);
      if (($16 | 0) != 0) {
        var $what_0 = 474480;
        var $errtxt_0 = $16;
        break;
      }
      var $21 = _selftest_encr_1024(HEAP32[$pkey$s2], HEAP32[$skey$s2]);
      if (($21 | 0) != 0) {
        var $what_0 = 474212;
        var $errtxt_0 = $21;
        break;
      }
      __gcry_sexp_release(HEAP32[$pkey$s2]);
      __gcry_sexp_release(HEAP32[$skey$s2]);
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $err_01 = $1;
      label = 2625;
    }
  } while (0);
  if (label == 2625) {
    var $err_01;
    var $what_0 = 475024;
    var $errtxt_0 = __gcry_strerror($err_01);
  }
  var $errtxt_0;
  var $what_0;
  __gcry_sexp_release(HEAP32[$pkey$s2]);
  __gcry_sexp_release(HEAP32[$skey$s2]);
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  FUNCTION_TABLE[$report](473812, 1, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _selftest_sign_1024($pkey, $skey) {
  var $sig$s2;
  var $data_bad$s2;
  var $data$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $data = __stackBase__, $data$s2 = $data >> 2;
  var $data_bad = __stackBase__ + 4, $data_bad$s2 = $data_bad >> 2;
  var $sig = __stackBase__ + 8, $sig$s2 = $sig >> 2;
  HEAP32[$data$s2] = 0;
  HEAP32[$data_bad$s2] = 0;
  HEAP32[$sig$s2] = 0;
  do {
    if ((__gcry_sexp_sscan($data, 0, 415472, 75) | 0) == 0) {
      if ((__gcry_sexp_sscan($data_bad, 0, 415324, 75) | 0) != 0) {
        var $errtxt_0 = 473172;
        break;
      }
      if ((__gcry_pk_sign($sig, HEAP32[$data$s2], $skey) | 0) != 0) {
        var $errtxt_0 = 471580;
        break;
      }
      if ((__gcry_pk_verify(HEAP32[$sig$s2], HEAP32[$data$s2], $pkey) | 0) != 0) {
        var $errtxt_0 = 471468;
        break;
      }
      var $errtxt_0 = (_gcry_err_code848(__gcry_pk_verify(HEAP32[$sig$s2], HEAP32[$data_bad$s2], $pkey)) | 0) == 8 ? 0 : 471340;
    } else {
      var $errtxt_0 = 473172;
    }
  } while (0);
  var $errtxt_0;
  __gcry_sexp_release(HEAP32[$sig$s2]);
  __gcry_sexp_release(HEAP32[$data_bad$s2]);
  __gcry_sexp_release(HEAP32[$data$s2]);
  STACKTOP = __stackBase__;
  return $errtxt_0;
}
function _selftest_encr_1024($pkey, $skey) {
  var $decr$s2;
  var $encr$s2;
  var $plain$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $plain = __stackBase__, $plain$s2 = $plain >> 2;
  var $encr = __stackBase__ + 4, $encr$s2 = $encr >> 2;
  var $decr = __stackBase__ + 8, $decr$s2 = $decr >> 2;
  HEAP32[$plain$s2] = 0;
  HEAP32[$encr$s2] = 0;
  HEAP32[$decr$s2] = 0;
  var $1 = __gcry_mpi_new(1e3);
  __gcry_mpi_randomize($1, 1e3, 0);
  do {
    if ((__gcry_sexp_build($plain, 0, 473392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $1, tempInt)) | 0) == 0) {
      if ((__gcry_pk_encrypt($encr, HEAP32[$plain$s2], $pkey) | 0) != 0) {
        var $tmplist_0 = 0;
        var $decr_plaintext_1 = 0;
        var $errtxt_0 = 473056;
        var $ciphertext_0 = 0;
        break;
      }
      var $10 = _extract_a_from_sexp(HEAP32[$encr$s2]);
      if (($10 | 0) == 0) {
        var $tmplist_0 = 0;
        var $decr_plaintext_1 = 0;
        var $errtxt_0 = 472868;
        var $ciphertext_0 = 0;
        break;
      }
      if ((__gcry_mpi_cmp($1, $10) | 0) == 0) {
        var $tmplist_0 = 0;
        var $decr_plaintext_1 = 0;
        var $errtxt_0 = 472744;
        var $ciphertext_0 = $10;
        break;
      }
      if ((__gcry_pk_decrypt($decr, HEAP32[$encr$s2], $skey) | 0) != 0) {
        var $tmplist_0 = 0;
        var $decr_plaintext_1 = 0;
        var $errtxt_0 = 472580;
        var $ciphertext_0 = $10;
        break;
      }
      var $21 = __gcry_sexp_find_token(HEAP32[$decr$s2], 472400, 0);
      if (($21 | 0) == 0) {
        var $decr_plaintext_0 = __gcry_sexp_nth_mpi(HEAP32[$decr$s2], 0, 5);
      } else {
        var $decr_plaintext_0 = __gcry_sexp_nth_mpi($21, 1, 5);
      }
      var $decr_plaintext_0;
      if (($decr_plaintext_0 | 0) == 0) {
        var $tmplist_0 = $21;
        var $decr_plaintext_1 = 0;
        var $errtxt_0 = 472248;
        var $ciphertext_0 = $10;
        break;
      }
      var $tmplist_0 = $21;
      var $decr_plaintext_1 = $decr_plaintext_0;
      var $errtxt_0 = (__gcry_mpi_cmp($1, $decr_plaintext_0) | 0) == 0 ? 0 : 472140;
      var $ciphertext_0 = $10;
    } else {
      var $tmplist_0 = 0;
      var $decr_plaintext_1 = 0;
      var $errtxt_0 = 473172;
      var $ciphertext_0 = 0;
    }
  } while (0);
  var $ciphertext_0;
  var $errtxt_0;
  var $decr_plaintext_1;
  var $tmplist_0;
  __gcry_sexp_release($tmplist_0);
  __gcry_mpi_release($decr_plaintext_1);
  __gcry_sexp_release(HEAP32[$decr$s2]);
  __gcry_mpi_release($ciphertext_0);
  __gcry_sexp_release(HEAP32[$encr$s2]);
  __gcry_sexp_release(HEAP32[$plain$s2]);
  __gcry_mpi_release($1);
  STACKTOP = __stackBase__;
  return $errtxt_0;
}
_selftest_encr_1024["X"] = 1;
function _extract_a_from_sexp($encr_data) {
  var $1 = __gcry_sexp_find_token($encr_data, 471952, 0);
  if (($1 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $4 = __gcry_sexp_find_token($1, 471764, 0);
  __gcry_sexp_release($1);
  if (($4 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $7 = __gcry_sexp_find_token($4, 475020, 0);
  __gcry_sexp_release($4);
  if (($7 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $10 = __gcry_sexp_nth_mpi($7, 1, 0);
  __gcry_sexp_release($7);
  var $_0 = $10;
  var $_0;
  return $_0;
}
function _gcry_err_code848($err) {
  return _gpg_err_code849($err);
}
function _rsa_blind($x, $r, $e, $n) {
  var $2 = __gcry_mpi_snew(__gcry_mpi_get_nbits($n));
  var $4 = __gcry_mpi_snew(__gcry_mpi_get_nbits($n));
  __gcry_mpi_powm($2, $r, $e, $n);
  __gcry_mpi_mulm($4, $2, $x, $n);
  __gcry_mpi_release($2);
  return $4;
}
function _rsa_unblind($x, $ri, $n) {
  var $2 = __gcry_mpi_snew(__gcry_mpi_get_nbits($n));
  __gcry_mpi_mulm($2, $ri, $x, $n);
  return $2;
}
function _check_secret_key($sk) {
  var $1 = $sk + 12 | 0;
  var $6 = __gcry_mpi_alloc(HEAP32[HEAP32[$1 >> 2] + 4 >> 2] << 1);
  __gcry_mpi_mul($6, HEAP32[$1 >> 2], HEAP32[$sk + 16 >> 2]);
  var $12 = __gcry_mpi_cmp($6, HEAP32[$sk >> 2]);
  __gcry_mpi_free($6);
  return ($12 | 0) == 0 & 1;
}
function _seed_setkey($context, $key, $keylen) {
  var $2 = _do_setkey866($context, $key, $keylen);
  __gcry_burn_stack(40);
  return $2;
}
function _seed_encrypt($context, $outbuf, $inbuf) {
  _do_encrypt865($context, $outbuf, $inbuf);
  __gcry_burn_stack(24);
  return;
}
function _seed_decrypt($context, $outbuf, $inbuf) {
  _do_decrypt864($context, $outbuf, $inbuf);
  __gcry_burn_stack(24);
  return;
}
function _generate_std($sk, $nbits, $use_e, $transient_key) {
  var $72$s2;
  var $71$s2;
  var $70$s2;
  var $69$s2;
  var $68$s2;
  var $67$s2;
  var label = 0;
  do {
    if ((__gcry_fips_mode() | 0) != 0) {
      if ($nbits >>> 0 > 1023 & ($transient_key | 0) == 0) {
        break;
      } else {
        var $_0 = 55;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $8 = ($transient_key | 0) != 0 ? 1 : 2;
  var $nbits_ = ($nbits & 1) + $nbits | 0;
  var $_02 = ($use_e | 0) == 1 ? 65537 : $use_e;
  var $11 = __gcry_mpi_alloc(1);
  if (($_02 | 0) == 0) {
    __gcry_mpi_set_ui($11, 41);
    var $_1 = 0;
  } else {
    __gcry_mpi_set_ui($11, $_02 | 1);
    var $_1 = 1;
  }
  var $_1;
  var $19 = __gcry_mpi_new($nbits_);
  var $20 = $nbits_ >>> 1;
  var $21 = $11;
  var $q_0 = 0;
  var $p_0 = 0;
  while (1) {
    var $p_0;
    var $q_0;
    if (($p_0 | 0) != 0) {
      __gcry_mpi_release($p_0);
    }
    if (($q_0 | 0) != 0) {
      __gcry_mpi_release($q_0);
    }
    if ($_1) {
      var $30 = __gcry_generate_secret_prime($20, $8, 214, $21);
      var $q_1 = __gcry_generate_secret_prime($20, $8, 214, $21);
      var $p_1 = $30;
    } else {
      var $33 = __gcry_generate_secret_prime($20, $8, 0, 0);
      var $q_1 = __gcry_generate_secret_prime($20, $8, 0, 0);
      var $p_1 = $33;
    }
    var $p_1;
    var $q_1;
    if ((__gcry_mpi_cmp($p_1, $q_1) | 0) > 0) {
      __gcry_mpi_swap($p_1, $q_1);
    }
    __gcry_mpi_mul($19, $p_1, $q_1);
    if ((__gcry_mpi_get_nbits($19) | 0) == ($nbits_ | 0)) {
      break;
    } else {
      var $q_0 = $q_1;
      var $p_0 = $p_1;
    }
  }
  var $43 = $p_1 + 4 | 0;
  var $45 = __gcry_mpi_alloc_secure(HEAP32[$43 >> 2]);
  var $47 = __gcry_mpi_alloc_secure(HEAP32[$43 >> 2]);
  var $48 = __gcry_mpi_snew($nbits_);
  var $49 = __gcry_mpi_snew($nbits_);
  var $50 = __gcry_mpi_snew($nbits_);
  __gcry_mpi_sub_ui($45, $p_1, 1);
  __gcry_mpi_sub_ui($47, $q_1, 1);
  __gcry_mpi_mul($48, $45, $47);
  __gcry_mpi_gcd($49, $45, $47);
  __gcry_mpi_fdiv_q($50, $48, $49);
  while (1) {
    if ((__gcry_mpi_gcd($45, $11, $48) | 0) != 0) {
      break;
    }
    if ($_1) {
      label = 2689;
      break;
    }
    __gcry_mpi_add_ui($11, $11, 2);
  }
  if (label == 2689) {
    __gcry_bug(490036, 276, 494400);
  }
  var $59 = __gcry_mpi_snew($nbits_);
  __gcry_mpi_invm($59, $11, $50);
  var $61 = __gcry_mpi_snew($nbits_);
  __gcry_mpi_invm($61, $p_1, $q_1);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_mpidump(488416, $p_1);
    __gcry_log_mpidump(487488, $q_1);
    __gcry_log_mpidump(486736, $48);
    __gcry_log_mpidump(485876, $49);
    __gcry_log_mpidump(484920, $50);
    __gcry_log_mpidump(484112, $19);
    __gcry_log_mpidump(483488, $11);
    __gcry_log_mpidump(482568, $59);
    __gcry_log_mpidump(481872, $61);
  }
  __gcry_mpi_release($45);
  __gcry_mpi_release($47);
  __gcry_mpi_release($48);
  __gcry_mpi_release($50);
  __gcry_mpi_release($49);
  var $67$s2 = ($sk | 0) >> 2;
  HEAP32[$67$s2] = $19;
  var $68$s2 = ($sk + 4 | 0) >> 2;
  HEAP32[$68$s2] = $11;
  var $69$s2 = ($sk + 12 | 0) >> 2;
  HEAP32[$69$s2] = $p_1;
  var $70$s2 = ($sk + 16 | 0) >> 2;
  HEAP32[$70$s2] = $q_1;
  var $71$s2 = ($sk + 8 | 0) >> 2;
  HEAP32[$71$s2] = $59;
  var $72$s2 = ($sk + 20 | 0) >> 2;
  HEAP32[$72$s2] = $61;
  if ((_test_keys($sk, $nbits_ - 64 | 0) | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  __gcry_mpi_release(HEAP32[$67$s2]);
  HEAP32[$67$s2] = 0;
  __gcry_mpi_release(HEAP32[$68$s2]);
  HEAP32[$68$s2] = 0;
  __gcry_mpi_release(HEAP32[$69$s2]);
  HEAP32[$69$s2] = 0;
  __gcry_mpi_release(HEAP32[$70$s2]);
  HEAP32[$70$s2] = 0;
  __gcry_mpi_release(HEAP32[$71$s2]);
  HEAP32[$71$s2] = 0;
  __gcry_mpi_release(HEAP32[$72$s2]);
  HEAP32[$72$s2] = 0;
  __gcry_fips_signal_error(490036, 323, 494400, 0, 481336);
  var $_0 = 50;
  var $_0;
  return $_0;
}
_generate_std["X"] = 1;
function _gen_x931_parm_xp($nbits) {
  var $1 = __gcry_mpi_snew($nbits);
  __gcry_mpi_randomize($1, $nbits, 2);
  __gcry_mpi_set_highbit($1, $nbits - 1 | 0);
  __gcry_mpi_set_bit($1, $nbits - 2 | 0);
  if ((__gcry_mpi_get_nbits($1) | 0) == ($nbits | 0)) {
    return $1;
  } else {
    __gcry_assert_failed(475160, 490036, 349, 494460);
  }
}
function _gen_x931_parm_xi() {
  var $1 = __gcry_mpi_snew(101);
  __gcry_mpi_randomize($1, 101, 2);
  __gcry_mpi_set_highbit($1, 100);
  if ((__gcry_mpi_get_nbits($1) | 0) == 101) {
    return $1;
  } else {
    __gcry_assert_failed(475444, 490036, 364, 494480);
  }
}
function _do_decrypt864($ctx, $outbuf, $inbuf) {
  var $ctx$s2 = $ctx >> 2;
  var $53 = HEAPU8[$inbuf + 9 | 0] << 16 | HEAPU8[$inbuf + 8 | 0] << 24 | HEAPU8[$inbuf + 11 | 0] | HEAPU8[$inbuf + 10 | 0] << 8;
  var $71 = HEAPU8[$inbuf + 13 | 0] << 16 | HEAPU8[$inbuf + 12 | 0] << 24 | HEAPU8[$inbuf + 15 | 0] | HEAPU8[$inbuf + 14 | 0] << 8;
  var $74 = HEAP32[$ctx$s2 + 30] ^ $53;
  var $78 = HEAP32[$ctx$s2 + 31] ^ $74 ^ $71;
  var $95 = HEAP32[(($78 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($78 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($78 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($78 >>> 24 << 2) + 507964 >> 2];
  var $96 = $95 + $74 | 0;
  var $113 = HEAP32[(($96 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($96 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($96 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($96 >>> 24 << 2) + 507964 >> 2];
  var $114 = $113 + $95 | 0;
  var $131 = HEAP32[(($114 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($114 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($114 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($114 >>> 24 << 2) + 507964 >> 2];
  var $133 = $131 + $113 ^ (HEAPU8[$inbuf + 1 | 0] << 16 | HEAPU8[$inbuf] << 24 | HEAPU8[$inbuf + 3 | 0] | HEAPU8[$inbuf + 2 | 0] << 8);
  var $134 = $131 ^ (HEAPU8[$inbuf + 5 | 0] << 16 | HEAPU8[$inbuf + 4 | 0] << 24 | HEAPU8[$inbuf + 7 | 0] | HEAPU8[$inbuf + 6 | 0] << 8);
  var $137 = $133 ^ HEAP32[$ctx$s2 + 28];
  var $141 = $134 ^ HEAP32[$ctx$s2 + 29] ^ $137;
  var $158 = HEAP32[(($141 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($141 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($141 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($141 >>> 24 << 2) + 507964 >> 2];
  var $159 = $158 + $137 | 0;
  var $176 = HEAP32[(($159 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($159 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($159 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($159 >>> 24 << 2) + 507964 >> 2];
  var $177 = $176 + $158 | 0;
  var $194 = HEAP32[(($177 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($177 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($177 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($177 >>> 24 << 2) + 507964 >> 2];
  var $196 = $194 + $176 ^ $53;
  var $197 = $194 ^ $71;
  var $200 = $196 ^ HEAP32[$ctx$s2 + 26];
  var $204 = $197 ^ HEAP32[$ctx$s2 + 27] ^ $200;
  var $221 = HEAP32[(($204 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($204 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($204 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($204 >>> 24 << 2) + 507964 >> 2];
  var $222 = $221 + $200 | 0;
  var $239 = HEAP32[(($222 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($222 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($222 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($222 >>> 24 << 2) + 507964 >> 2];
  var $240 = $239 + $221 | 0;
  var $257 = HEAP32[(($240 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($240 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($240 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($240 >>> 24 << 2) + 507964 >> 2];
  var $259 = $257 + $239 ^ $133;
  var $260 = $257 ^ $134;
  var $263 = $259 ^ HEAP32[$ctx$s2 + 24];
  var $267 = $260 ^ HEAP32[$ctx$s2 + 25] ^ $263;
  var $284 = HEAP32[(($267 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($267 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($267 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($267 >>> 24 << 2) + 507964 >> 2];
  var $285 = $284 + $263 | 0;
  var $302 = HEAP32[(($285 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($285 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($285 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($285 >>> 24 << 2) + 507964 >> 2];
  var $303 = $302 + $284 | 0;
  var $320 = HEAP32[(($303 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($303 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($303 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($303 >>> 24 << 2) + 507964 >> 2];
  var $322 = $320 + $302 ^ $196;
  var $323 = $320 ^ $197;
  var $326 = $322 ^ HEAP32[$ctx$s2 + 22];
  var $330 = $323 ^ HEAP32[$ctx$s2 + 23] ^ $326;
  var $347 = HEAP32[(($330 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($330 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($330 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($330 >>> 24 << 2) + 507964 >> 2];
  var $348 = $347 + $326 | 0;
  var $365 = HEAP32[(($348 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($348 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($348 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($348 >>> 24 << 2) + 507964 >> 2];
  var $366 = $365 + $347 | 0;
  var $383 = HEAP32[(($366 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($366 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($366 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($366 >>> 24 << 2) + 507964 >> 2];
  var $385 = $383 + $365 ^ $259;
  var $386 = $383 ^ $260;
  var $389 = $385 ^ HEAP32[$ctx$s2 + 20];
  var $393 = $386 ^ HEAP32[$ctx$s2 + 21] ^ $389;
  var $410 = HEAP32[(($393 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($393 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($393 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($393 >>> 24 << 2) + 507964 >> 2];
  var $411 = $410 + $389 | 0;
  var $428 = HEAP32[(($411 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($411 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($411 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($411 >>> 24 << 2) + 507964 >> 2];
  var $429 = $428 + $410 | 0;
  var $446 = HEAP32[(($429 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($429 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($429 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($429 >>> 24 << 2) + 507964 >> 2];
  var $448 = $446 + $428 ^ $322;
  var $449 = $446 ^ $323;
  var $452 = $448 ^ HEAP32[$ctx$s2 + 18];
  var $456 = $449 ^ HEAP32[$ctx$s2 + 19] ^ $452;
  var $473 = HEAP32[(($456 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($456 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($456 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($456 >>> 24 << 2) + 507964 >> 2];
  var $474 = $473 + $452 | 0;
  var $491 = HEAP32[(($474 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($474 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($474 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($474 >>> 24 << 2) + 507964 >> 2];
  var $492 = $491 + $473 | 0;
  var $509 = HEAP32[(($492 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($492 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($492 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($492 >>> 24 << 2) + 507964 >> 2];
  var $511 = $509 + $491 ^ $385;
  var $512 = $509 ^ $386;
  var $515 = $511 ^ HEAP32[$ctx$s2 + 16];
  var $519 = $512 ^ HEAP32[$ctx$s2 + 17] ^ $515;
  var $536 = HEAP32[(($519 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($519 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($519 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($519 >>> 24 << 2) + 507964 >> 2];
  var $537 = $536 + $515 | 0;
  var $554 = HEAP32[(($537 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($537 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($537 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($537 >>> 24 << 2) + 507964 >> 2];
  var $555 = $554 + $536 | 0;
  var $572 = HEAP32[(($555 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($555 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($555 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($555 >>> 24 << 2) + 507964 >> 2];
  var $574 = $572 + $554 ^ $448;
  var $575 = $572 ^ $449;
  var $578 = $574 ^ HEAP32[$ctx$s2 + 14];
  var $582 = $575 ^ HEAP32[$ctx$s2 + 15] ^ $578;
  var $599 = HEAP32[(($582 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($582 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($582 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($582 >>> 24 << 2) + 507964 >> 2];
  var $600 = $599 + $578 | 0;
  var $617 = HEAP32[(($600 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($600 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($600 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($600 >>> 24 << 2) + 507964 >> 2];
  var $618 = $617 + $599 | 0;
  var $635 = HEAP32[(($618 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($618 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($618 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($618 >>> 24 << 2) + 507964 >> 2];
  var $637 = $635 + $617 ^ $511;
  var $638 = $635 ^ $512;
  var $641 = $637 ^ HEAP32[$ctx$s2 + 12];
  var $645 = $638 ^ HEAP32[$ctx$s2 + 13] ^ $641;
  var $662 = HEAP32[(($645 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($645 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($645 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($645 >>> 24 << 2) + 507964 >> 2];
  var $663 = $662 + $641 | 0;
  var $680 = HEAP32[(($663 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($663 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($663 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($663 >>> 24 << 2) + 507964 >> 2];
  var $681 = $680 + $662 | 0;
  var $698 = HEAP32[(($681 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($681 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($681 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($681 >>> 24 << 2) + 507964 >> 2];
  var $700 = $698 + $680 ^ $574;
  var $701 = $698 ^ $575;
  var $704 = $700 ^ HEAP32[$ctx$s2 + 10];
  var $708 = $701 ^ HEAP32[$ctx$s2 + 11] ^ $704;
  var $725 = HEAP32[(($708 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($708 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($708 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($708 >>> 24 << 2) + 507964 >> 2];
  var $726 = $725 + $704 | 0;
  var $743 = HEAP32[(($726 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($726 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($726 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($726 >>> 24 << 2) + 507964 >> 2];
  var $744 = $743 + $725 | 0;
  var $761 = HEAP32[(($744 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($744 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($744 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($744 >>> 24 << 2) + 507964 >> 2];
  var $763 = $761 + $743 ^ $637;
  var $764 = $761 ^ $638;
  var $767 = $763 ^ HEAP32[$ctx$s2 + 8];
  var $771 = $764 ^ HEAP32[$ctx$s2 + 9] ^ $767;
  var $788 = HEAP32[(($771 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($771 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($771 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($771 >>> 24 << 2) + 507964 >> 2];
  var $789 = $788 + $767 | 0;
  var $806 = HEAP32[(($789 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($789 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($789 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($789 >>> 24 << 2) + 507964 >> 2];
  var $807 = $806 + $788 | 0;
  var $824 = HEAP32[(($807 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($807 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($807 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($807 >>> 24 << 2) + 507964 >> 2];
  var $826 = $824 + $806 ^ $700;
  var $827 = $824 ^ $701;
  var $830 = $826 ^ HEAP32[$ctx$s2 + 6];
  var $834 = $827 ^ HEAP32[$ctx$s2 + 7] ^ $830;
  var $851 = HEAP32[(($834 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($834 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($834 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($834 >>> 24 << 2) + 507964 >> 2];
  var $852 = $851 + $830 | 0;
  var $869 = HEAP32[(($852 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($852 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($852 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($852 >>> 24 << 2) + 507964 >> 2];
  var $870 = $869 + $851 | 0;
  var $887 = HEAP32[(($870 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($870 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($870 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($870 >>> 24 << 2) + 507964 >> 2];
  var $889 = $887 + $869 ^ $763;
  var $890 = $887 ^ $764;
  var $893 = $889 ^ HEAP32[$ctx$s2 + 4];
  var $897 = $890 ^ HEAP32[$ctx$s2 + 5] ^ $893;
  var $914 = HEAP32[(($897 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($897 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($897 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($897 >>> 24 << 2) + 507964 >> 2];
  var $915 = $914 + $893 | 0;
  var $932 = HEAP32[(($915 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($915 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($915 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($915 >>> 24 << 2) + 507964 >> 2];
  var $933 = $932 + $914 | 0;
  var $950 = HEAP32[(($933 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($933 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($933 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($933 >>> 24 << 2) + 507964 >> 2];
  var $952 = $950 + $932 ^ $826;
  var $953 = $950 ^ $827;
  var $956 = $952 ^ HEAP32[$ctx$s2 + 2];
  var $960 = $953 ^ HEAP32[$ctx$s2 + 3] ^ $956;
  var $977 = HEAP32[(($960 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($960 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($960 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($960 >>> 24 << 2) + 507964 >> 2];
  var $978 = $977 + $956 | 0;
  var $995 = HEAP32[(($978 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($978 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($978 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($978 >>> 24 << 2) + 507964 >> 2];
  var $996 = $995 + $977 | 0;
  var $1013 = HEAP32[(($996 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($996 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($996 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($996 >>> 24 << 2) + 507964 >> 2];
  var $1015 = $1013 + $995 ^ $889;
  var $1016 = $1013 ^ $890;
  var $1019 = $1015 ^ HEAP32[$ctx$s2];
  var $1023 = $1016 ^ HEAP32[$ctx$s2 + 1] ^ $1019;
  var $1040 = HEAP32[(($1023 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($1023 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($1023 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($1023 >>> 24 << 2) + 507964 >> 2];
  var $1041 = $1040 + $1019 | 0;
  var $1058 = HEAP32[(($1041 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($1041 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($1041 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($1041 >>> 24 << 2) + 507964 >> 2];
  var $1059 = $1058 + $1040 | 0;
  var $1076 = HEAP32[(($1059 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($1059 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($1059 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($1059 >>> 24 << 2) + 507964 >> 2];
  var $1078 = $1076 + $1058 ^ $952;
  var $1079 = $1076 ^ $953;
  HEAP8[$outbuf] = $1078 >>> 24 & 255;
  HEAP8[$outbuf + 1 | 0] = $1078 >>> 16 & 255;
  HEAP8[$outbuf + 2 | 0] = $1078 >>> 8 & 255;
  HEAP8[$outbuf + 3 | 0] = $1078 & 255;
  HEAP8[$outbuf + 4 | 0] = $1079 >>> 24 & 255;
  HEAP8[$outbuf + 5 | 0] = $1079 >>> 16 & 255;
  HEAP8[$outbuf + 6 | 0] = $1079 >>> 8 & 255;
  HEAP8[$outbuf + 7 | 0] = $1079 & 255;
  HEAP8[$outbuf + 8 | 0] = $1015 >>> 24 & 255;
  HEAP8[$outbuf + 9 | 0] = $1015 >>> 16 & 255;
  HEAP8[$outbuf + 10 | 0] = $1015 >>> 8 & 255;
  HEAP8[$outbuf + 11 | 0] = $1015 & 255;
  HEAP8[$outbuf + 12 | 0] = $1016 >>> 24 & 255;
  HEAP8[$outbuf + 13 | 0] = $1016 >>> 16 & 255;
  HEAP8[$outbuf + 14 | 0] = $1016 >>> 8 & 255;
  HEAP8[$outbuf + 15 | 0] = $1016 & 255;
  return;
}
_do_decrypt864["X"] = 1;
function _do_encrypt865($ctx, $outbuf, $inbuf) {
  var $ctx$s2 = $ctx >> 2;
  var $53 = HEAPU8[$inbuf + 9 | 0] << 16 | HEAPU8[$inbuf + 8 | 0] << 24 | HEAPU8[$inbuf + 11 | 0] | HEAPU8[$inbuf + 10 | 0] << 8;
  var $71 = HEAPU8[$inbuf + 13 | 0] << 16 | HEAPU8[$inbuf + 12 | 0] << 24 | HEAPU8[$inbuf + 15 | 0] | HEAPU8[$inbuf + 14 | 0] << 8;
  var $74 = HEAP32[$ctx$s2] ^ $53;
  var $78 = HEAP32[$ctx$s2 + 1] ^ $74 ^ $71;
  var $95 = HEAP32[(($78 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($78 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($78 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($78 >>> 24 << 2) + 507964 >> 2];
  var $96 = $95 + $74 | 0;
  var $113 = HEAP32[(($96 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($96 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($96 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($96 >>> 24 << 2) + 507964 >> 2];
  var $114 = $113 + $95 | 0;
  var $131 = HEAP32[(($114 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($114 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($114 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($114 >>> 24 << 2) + 507964 >> 2];
  var $133 = $131 + $113 ^ (HEAPU8[$inbuf + 1 | 0] << 16 | HEAPU8[$inbuf] << 24 | HEAPU8[$inbuf + 3 | 0] | HEAPU8[$inbuf + 2 | 0] << 8);
  var $134 = $131 ^ (HEAPU8[$inbuf + 5 | 0] << 16 | HEAPU8[$inbuf + 4 | 0] << 24 | HEAPU8[$inbuf + 7 | 0] | HEAPU8[$inbuf + 6 | 0] << 8);
  var $137 = $133 ^ HEAP32[$ctx$s2 + 2];
  var $141 = $134 ^ HEAP32[$ctx$s2 + 3] ^ $137;
  var $158 = HEAP32[(($141 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($141 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($141 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($141 >>> 24 << 2) + 507964 >> 2];
  var $159 = $158 + $137 | 0;
  var $176 = HEAP32[(($159 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($159 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($159 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($159 >>> 24 << 2) + 507964 >> 2];
  var $177 = $176 + $158 | 0;
  var $194 = HEAP32[(($177 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($177 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($177 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($177 >>> 24 << 2) + 507964 >> 2];
  var $196 = $194 + $176 ^ $53;
  var $197 = $194 ^ $71;
  var $200 = $196 ^ HEAP32[$ctx$s2 + 4];
  var $204 = $197 ^ HEAP32[$ctx$s2 + 5] ^ $200;
  var $221 = HEAP32[(($204 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($204 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($204 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($204 >>> 24 << 2) + 507964 >> 2];
  var $222 = $221 + $200 | 0;
  var $239 = HEAP32[(($222 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($222 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($222 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($222 >>> 24 << 2) + 507964 >> 2];
  var $240 = $239 + $221 | 0;
  var $257 = HEAP32[(($240 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($240 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($240 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($240 >>> 24 << 2) + 507964 >> 2];
  var $259 = $257 + $239 ^ $133;
  var $260 = $257 ^ $134;
  var $263 = $259 ^ HEAP32[$ctx$s2 + 6];
  var $267 = $260 ^ HEAP32[$ctx$s2 + 7] ^ $263;
  var $284 = HEAP32[(($267 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($267 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($267 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($267 >>> 24 << 2) + 507964 >> 2];
  var $285 = $284 + $263 | 0;
  var $302 = HEAP32[(($285 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($285 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($285 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($285 >>> 24 << 2) + 507964 >> 2];
  var $303 = $302 + $284 | 0;
  var $320 = HEAP32[(($303 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($303 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($303 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($303 >>> 24 << 2) + 507964 >> 2];
  var $322 = $320 + $302 ^ $196;
  var $323 = $320 ^ $197;
  var $326 = $322 ^ HEAP32[$ctx$s2 + 8];
  var $330 = $323 ^ HEAP32[$ctx$s2 + 9] ^ $326;
  var $347 = HEAP32[(($330 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($330 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($330 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($330 >>> 24 << 2) + 507964 >> 2];
  var $348 = $347 + $326 | 0;
  var $365 = HEAP32[(($348 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($348 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($348 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($348 >>> 24 << 2) + 507964 >> 2];
  var $366 = $365 + $347 | 0;
  var $383 = HEAP32[(($366 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($366 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($366 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($366 >>> 24 << 2) + 507964 >> 2];
  var $385 = $383 + $365 ^ $259;
  var $386 = $383 ^ $260;
  var $389 = $385 ^ HEAP32[$ctx$s2 + 10];
  var $393 = $386 ^ HEAP32[$ctx$s2 + 11] ^ $389;
  var $410 = HEAP32[(($393 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($393 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($393 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($393 >>> 24 << 2) + 507964 >> 2];
  var $411 = $410 + $389 | 0;
  var $428 = HEAP32[(($411 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($411 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($411 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($411 >>> 24 << 2) + 507964 >> 2];
  var $429 = $428 + $410 | 0;
  var $446 = HEAP32[(($429 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($429 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($429 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($429 >>> 24 << 2) + 507964 >> 2];
  var $448 = $446 + $428 ^ $322;
  var $449 = $446 ^ $323;
  var $452 = $448 ^ HEAP32[$ctx$s2 + 12];
  var $456 = $449 ^ HEAP32[$ctx$s2 + 13] ^ $452;
  var $473 = HEAP32[(($456 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($456 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($456 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($456 >>> 24 << 2) + 507964 >> 2];
  var $474 = $473 + $452 | 0;
  var $491 = HEAP32[(($474 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($474 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($474 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($474 >>> 24 << 2) + 507964 >> 2];
  var $492 = $491 + $473 | 0;
  var $509 = HEAP32[(($492 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($492 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($492 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($492 >>> 24 << 2) + 507964 >> 2];
  var $511 = $509 + $491 ^ $385;
  var $512 = $509 ^ $386;
  var $515 = $511 ^ HEAP32[$ctx$s2 + 14];
  var $519 = $512 ^ HEAP32[$ctx$s2 + 15] ^ $515;
  var $536 = HEAP32[(($519 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($519 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($519 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($519 >>> 24 << 2) + 507964 >> 2];
  var $537 = $536 + $515 | 0;
  var $554 = HEAP32[(($537 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($537 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($537 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($537 >>> 24 << 2) + 507964 >> 2];
  var $555 = $554 + $536 | 0;
  var $572 = HEAP32[(($555 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($555 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($555 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($555 >>> 24 << 2) + 507964 >> 2];
  var $574 = $572 + $554 ^ $448;
  var $575 = $572 ^ $449;
  var $578 = $574 ^ HEAP32[$ctx$s2 + 16];
  var $582 = $575 ^ HEAP32[$ctx$s2 + 17] ^ $578;
  var $599 = HEAP32[(($582 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($582 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($582 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($582 >>> 24 << 2) + 507964 >> 2];
  var $600 = $599 + $578 | 0;
  var $617 = HEAP32[(($600 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($600 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($600 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($600 >>> 24 << 2) + 507964 >> 2];
  var $618 = $617 + $599 | 0;
  var $635 = HEAP32[(($618 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($618 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($618 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($618 >>> 24 << 2) + 507964 >> 2];
  var $637 = $635 + $617 ^ $511;
  var $638 = $635 ^ $512;
  var $641 = $637 ^ HEAP32[$ctx$s2 + 18];
  var $645 = $638 ^ HEAP32[$ctx$s2 + 19] ^ $641;
  var $662 = HEAP32[(($645 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($645 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($645 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($645 >>> 24 << 2) + 507964 >> 2];
  var $663 = $662 + $641 | 0;
  var $680 = HEAP32[(($663 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($663 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($663 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($663 >>> 24 << 2) + 507964 >> 2];
  var $681 = $680 + $662 | 0;
  var $698 = HEAP32[(($681 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($681 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($681 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($681 >>> 24 << 2) + 507964 >> 2];
  var $700 = $698 + $680 ^ $574;
  var $701 = $698 ^ $575;
  var $704 = $700 ^ HEAP32[$ctx$s2 + 20];
  var $708 = $701 ^ HEAP32[$ctx$s2 + 21] ^ $704;
  var $725 = HEAP32[(($708 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($708 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($708 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($708 >>> 24 << 2) + 507964 >> 2];
  var $726 = $725 + $704 | 0;
  var $743 = HEAP32[(($726 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($726 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($726 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($726 >>> 24 << 2) + 507964 >> 2];
  var $744 = $743 + $725 | 0;
  var $761 = HEAP32[(($744 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($744 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($744 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($744 >>> 24 << 2) + 507964 >> 2];
  var $763 = $761 + $743 ^ $637;
  var $764 = $761 ^ $638;
  var $767 = $763 ^ HEAP32[$ctx$s2 + 22];
  var $771 = $764 ^ HEAP32[$ctx$s2 + 23] ^ $767;
  var $788 = HEAP32[(($771 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($771 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($771 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($771 >>> 24 << 2) + 507964 >> 2];
  var $789 = $788 + $767 | 0;
  var $806 = HEAP32[(($789 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($789 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($789 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($789 >>> 24 << 2) + 507964 >> 2];
  var $807 = $806 + $788 | 0;
  var $824 = HEAP32[(($807 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($807 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($807 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($807 >>> 24 << 2) + 507964 >> 2];
  var $826 = $824 + $806 ^ $700;
  var $827 = $824 ^ $701;
  var $830 = $826 ^ HEAP32[$ctx$s2 + 24];
  var $834 = $827 ^ HEAP32[$ctx$s2 + 25] ^ $830;
  var $851 = HEAP32[(($834 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($834 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($834 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($834 >>> 24 << 2) + 507964 >> 2];
  var $852 = $851 + $830 | 0;
  var $869 = HEAP32[(($852 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($852 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($852 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($852 >>> 24 << 2) + 507964 >> 2];
  var $870 = $869 + $851 | 0;
  var $887 = HEAP32[(($870 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($870 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($870 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($870 >>> 24 << 2) + 507964 >> 2];
  var $889 = $887 + $869 ^ $763;
  var $890 = $887 ^ $764;
  var $893 = $889 ^ HEAP32[$ctx$s2 + 26];
  var $897 = $890 ^ HEAP32[$ctx$s2 + 27] ^ $893;
  var $914 = HEAP32[(($897 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($897 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($897 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($897 >>> 24 << 2) + 507964 >> 2];
  var $915 = $914 + $893 | 0;
  var $932 = HEAP32[(($915 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($915 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($915 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($915 >>> 24 << 2) + 507964 >> 2];
  var $933 = $932 + $914 | 0;
  var $950 = HEAP32[(($933 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($933 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($933 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($933 >>> 24 << 2) + 507964 >> 2];
  var $952 = $950 + $932 ^ $826;
  var $953 = $950 ^ $827;
  var $956 = $952 ^ HEAP32[$ctx$s2 + 28];
  var $960 = $953 ^ HEAP32[$ctx$s2 + 29] ^ $956;
  var $977 = HEAP32[(($960 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($960 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($960 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($960 >>> 24 << 2) + 507964 >> 2];
  var $978 = $977 + $956 | 0;
  var $995 = HEAP32[(($978 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($978 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($978 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($978 >>> 24 << 2) + 507964 >> 2];
  var $996 = $995 + $977 | 0;
  var $1013 = HEAP32[(($996 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($996 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($996 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($996 >>> 24 << 2) + 507964 >> 2];
  var $1015 = $1013 + $995 ^ $889;
  var $1016 = $1013 ^ $890;
  var $1019 = $1015 ^ HEAP32[$ctx$s2 + 30];
  var $1023 = $1016 ^ HEAP32[$ctx$s2 + 31] ^ $1019;
  var $1040 = HEAP32[(($1023 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($1023 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($1023 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($1023 >>> 24 << 2) + 507964 >> 2];
  var $1041 = $1040 + $1019 | 0;
  var $1058 = HEAP32[(($1041 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($1041 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($1041 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($1041 >>> 24 << 2) + 507964 >> 2];
  var $1059 = $1058 + $1040 | 0;
  var $1076 = HEAP32[(($1059 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($1059 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($1059 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($1059 >>> 24 << 2) + 507964 >> 2];
  var $1078 = $1076 + $1058 ^ $952;
  var $1079 = $1076 ^ $953;
  HEAP8[$outbuf] = $1078 >>> 24 & 255;
  HEAP8[$outbuf + 1 | 0] = $1078 >>> 16 & 255;
  HEAP8[$outbuf + 2 | 0] = $1078 >>> 8 & 255;
  HEAP8[$outbuf + 3 | 0] = $1078 & 255;
  HEAP8[$outbuf + 4 | 0] = $1079 >>> 24 & 255;
  HEAP8[$outbuf + 5 | 0] = $1079 >>> 16 & 255;
  HEAP8[$outbuf + 6 | 0] = $1079 >>> 8 & 255;
  HEAP8[$outbuf + 7 | 0] = $1079 & 255;
  HEAP8[$outbuf + 8 | 0] = $1015 >>> 24 & 255;
  HEAP8[$outbuf + 9 | 0] = $1015 >>> 16 & 255;
  HEAP8[$outbuf + 10 | 0] = $1015 >>> 8 & 255;
  HEAP8[$outbuf + 11 | 0] = $1015 & 255;
  HEAP8[$outbuf + 12 | 0] = $1016 >>> 24 & 255;
  HEAP8[$outbuf + 13 | 0] = $1016 >>> 16 & 255;
  HEAP8[$outbuf + 14 | 0] = $1016 >>> 8 & 255;
  HEAP8[$outbuf + 15 | 0] = $1016 & 255;
  return;
}
_do_encrypt865["X"] = 1;
function _do_setkey866($ctx, $key, $keylen) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $1 = $ctx | 0;
  do {
    if (HEAP8[457632]) {
      label = 5;
    } else {
      HEAP8[457632] = 1;
      var $3 = _selftest867();
      HEAP32[114405] = $3;
      if (($3 | 0) == 0) {
        break;
      }
      __gcry_log_error(482656, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $3, tempInt));
      label = 5;
      break;
    }
  } while (0);
  do {
    if (label == 5) {
      if ((HEAP32[114405] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (($keylen | 0) != 16) {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $x3_01 = HEAPU8[$key + 9 | 0] << 16 | HEAPU8[$key + 8 | 0] << 24 | HEAPU8[$key + 11 | 0] | HEAPU8[$key + 10 | 0] << 8;
  var $x2_02 = HEAPU8[$key + 5 | 0] << 16 | HEAPU8[$key + 4 | 0] << 24 | HEAPU8[$key + 7 | 0] | HEAPU8[$key + 6 | 0] << 8;
  var $x1_03 = HEAPU8[$key + 1 | 0] << 16 | HEAPU8[$key] << 24 | HEAPU8[$key + 3 | 0] | HEAPU8[$key + 2 | 0] << 8;
  var $x4_04 = HEAPU8[$key + 13 | 0] << 16 | HEAPU8[$key + 12 | 0] << 24 | HEAPU8[$key + 15 | 0] | HEAPU8[$key + 14 | 0] << 8;
  var $keyout_05 = $1;
  var $i_06 = 0;
  while (1) {
    var $i_06;
    var $keyout_05;
    var $x4_04;
    var $x1_03;
    var $x2_02;
    var $x3_01;
    var $83 = HEAP32[($i_06 << 2) + 512588 >> 2];
    var $85 = $x1_03 + $x3_01 - $83 | 0;
    var $87 = $x2_02 - $x4_04 + $83 | 0;
    HEAP32[$keyout_05 >> 2] = HEAP32[(($85 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($85 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($85 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($85 >>> 24 << 2) + 507964 >> 2];
    HEAP32[$keyout_05 + 4 >> 2] = HEAP32[(($87 >>> 8 & 255) << 2) + 510012 >> 2] ^ HEAP32[(($87 & 255) << 2) + 511036 >> 2] ^ HEAP32[(($87 >>> 16 & 255) << 2) + 508988 >> 2] ^ HEAP32[($87 >>> 24 << 2) + 507964 >> 2];
    if (($i_06 & 1 | 0) == 0) {
      var $x4_1 = $x4_04;
      var $x1_1 = $x1_03 >>> 8 | $x2_02 << 24;
      var $x2_1 = $x1_03 << 24 | $x2_02 >>> 8;
      var $x3_1 = $x3_01;
    } else {
      var $x4_1 = $x4_04 << 8 | $x3_01 >>> 24;
      var $x1_1 = $x1_03;
      var $x2_1 = $x2_02;
      var $x3_1 = $x4_04 >>> 24 | $x3_01 << 8;
    }
    var $x3_1;
    var $x2_1;
    var $x1_1;
    var $x4_1;
    var $141 = $i_06 + 1 | 0;
    if (($141 | 0) == 16) {
      var $_0 = 0;
      break;
    } else {
      var $x3_01 = $x3_1;
      var $x2_02 = $x2_1;
      var $x1_03 = $x1_1;
      var $x4_04 = $x4_1;
      var $keyout_05 = $keyout_05 + 8 | 0;
      var $i_06 = $141;
    }
  }
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_do_setkey866["X"] = 1;
function _selftest867() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 144 | 0;
  var $1 = __stackBase__;
  _seed_setkey($1, 415864, 16);
  var $3 = __stackBase__ + 128 | 0;
  _seed_encrypt($1, $3, 415644);
  if ((_memcmp($3, 416672, 16) | 0) != 0) {
    var $_0 = 477712;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _seed_decrypt($1, $3, $3);
  var $_0 = (_memcmp($3, 415644, 16) | 0) == 0 ? 0 : 474824;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _serpent_setkey($ctx, $key, $key_length) {
  var __stackBase__ = STACKTOP;
  var $1 = $ctx;
  if (!HEAP8[413308]) {
    var $3 = _serpent_test();
    HEAP32[103326] = $3;
    if (($3 | 0) != 0) {
      __gcry_log_error(474784, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $3, tempInt));
    }
    HEAP8[413308] = 1;
  }
  if ((HEAP32[103326] | 0) != 0) {
    var $ret_0 = 50;
    var $ret_0;
    STACKTOP = __stackBase__;
    return $ret_0;
  }
  _serpent_setkey_internal($1, $key, $key_length);
  __gcry_burn_stack(32);
  var $ret_0 = 0;
  var $ret_0;
  STACKTOP = __stackBase__;
  return $ret_0;
}
function _serpent_encrypt($ctx, $buffer_out, $buffer_in) {
  _serpent_encrypt_internal($ctx, $buffer_in, $buffer_out);
  __gcry_burn_stack(32);
  return;
}
function _serpent_decrypt($ctx, $buffer_out, $buffer_in) {
  _serpent_decrypt_internal($ctx, $buffer_in, $buffer_out);
  __gcry_burn_stack(32);
  return;
}
function _serpent_decrypt_internal($context, $input, $output) {
  var $context$s2 = $context >> 2;
  var $10 = HEAP32[$context$s2 + 128] ^ HEAP32[$input >> 2];
  var $13 = HEAP32[$context$s2 + 129] ^ HEAP32[$input + 4 >> 2];
  var $16 = HEAP32[$context$s2 + 130] ^ HEAP32[$input + 8 >> 2];
  var $19 = HEAP32[$context$s2 + 131] ^ HEAP32[$input + 12 >> 2];
  var $20 = $13 & $10;
  var $23 = $19 & ($13 | $10);
  var $24 = $23 ^ ($16 | $20);
  var $25 = $23 ^ $13;
  var $31 = ($24 ^ ($19 ^ -1) | $25) ^ $10;
  var $39 = HEAP32[$context$s2 + 124] ^ $16 ^ $25 ^ ($31 | $19);
  var $42 = $31 ^ HEAP32[$context$s2 + 125];
  var $46 = ($19 ^ $13 | $20) ^ HEAP32[$context$s2 + 126] ^ ($19 | $10) & $16;
  var $49 = HEAP32[$context$s2 + 127] ^ $24;
  var $58 = ($46 >>> 22 | $46 << 10) ^ $49 ^ $42 << 7;
  var $60 = $42 ^ $49 ^ ($39 >>> 5 | $39 << 27);
  var $69 = $58 ^ ($49 >>> 7 | $49 << 25) ^ $60 << 3;
  var $71 = ($42 >>> 1 | $42 << 31) ^ $58 ^ $60;
  var $74 = $58 >>> 3 | $58 << 29;
  var $77 = $60 >>> 13 | $60 << 19;
  var $78 = $77 ^ $74;
  var $79 = $74 ^ -1;
  var $82 = $78 & $71 | $69;
  var $83 = $77 & ($71 | $79);
  var $86 = $69 ^ $71 ^ ($77 | $79);
  var $88 = $82 ^ ($83 ^ -1);
  var $94 = $88 ^ HEAP32[$context$s2 + 120];
  var $97 = $86 ^ HEAP32[$context$s2 + 121];
  var $102 = ($69 | $79) ^ HEAP32[$context$s2 + 122] ^ $78 ^ $88 & $71;
  var $108 = $77 ^ HEAP32[$context$s2 + 123] ^ $83 ^ $86 ^ $82 & $78;
  var $117 = $108 ^ $97 << 7 ^ ($102 >>> 22 | $102 << 10);
  var $119 = $108 ^ $97 ^ ($94 >>> 5 | $94 << 27);
  var $128 = $119 << 3 ^ ($108 >>> 7 | $108 << 25) ^ $117;
  var $130 = $119 ^ ($97 >>> 1 | $97 << 31) ^ $117;
  var $133 = $117 >>> 3 | $117 << 29;
  var $136 = $119 >>> 13 | $119 << 19;
  var $137 = $128 & $136;
  var $138 = $137 ^ $133;
  var $142 = $128 ^ $136 ^ $138 & $130;
  var $146 = ($133 & $136 | $130) ^ $137;
  var $152 = $142 ^ HEAP32[$context$s2 + 116];
  var $155 = $146 ^ $142 ^ HEAP32[$context$s2 + 117];
  var $161 = $130 ^ HEAP32[$context$s2 + 118] ^ $128 ^ $138 ^ ($146 | $142);
  var $165 = $138 ^ HEAP32[$context$s2 + 119] ^ ($142 & $136 | $130 ^ -1);
  var $174 = $165 ^ $155 << 7 ^ ($161 >>> 22 | $161 << 10);
  var $176 = $165 ^ $155 ^ ($152 >>> 5 | $152 << 27);
  var $185 = $176 << 3 ^ ($165 >>> 7 | $165 << 25) ^ $174;
  var $187 = $176 ^ ($155 >>> 1 | $155 << 31) ^ $174;
  var $190 = $174 >>> 3 | $174 << 29;
  var $193 = $176 >>> 13 | $176 << 19;
  var $194 = $185 | $187;
  var $196 = $194 & $193;
  var $197 = ($190 | $185) ^ $187;
  var $199 = $197 & $193;
  var $201 = $190 ^ $185 ^ $199;
  var $202 = $201 | $196 ^ -1;
  var $209 = $193 ^ HEAP32[$context$s2 + 112] ^ $197 ^ $202;
  var $212 = $201 ^ HEAP32[$context$s2 + 113];
  var $217 = $194 ^ HEAP32[$context$s2 + 114] ^ $202 ^ ($199 ^ $193 | $190);
  var $222 = $185 ^ HEAP32[$context$s2 + 115] ^ $197 ^ $196;
  var $231 = $212 << 7 ^ $222 ^ ($217 >>> 22 | $217 << 10);
  var $233 = $212 ^ $222 ^ ($209 >>> 5 | $209 << 27);
  var $242 = $233 << 3 ^ ($222 >>> 7 | $222 << 25) ^ $231;
  var $244 = $233 ^ ($212 >>> 1 | $212 << 31) ^ $231;
  var $247 = $231 >>> 3 | $231 << 29;
  var $250 = $233 >>> 13 | $233 << 19;
  var $251 = $247 | $242;
  var $252 = $242 | $250;
  var $253 = $252 ^ $247;
  var $255 = $242 ^ $250;
  var $258 = ($252 ^ $244) & $253 ^ $255;
  var $260 = $251 & $244 ^ $253;
  var $267 = $260 ^ HEAP32[$context$s2 + 108];
  var $271 = $244 ^ HEAP32[$context$s2 + 109] ^ ($260 | $255) & ($253 ^ $250);
  var $274 = $258 ^ HEAP32[$context$s2 + 110];
  var $279 = $255 ^ HEAP32[$context$s2 + 111] ^ $251 ^ ($258 & $250 | $244);
  var $288 = $279 ^ $271 << 7 ^ ($274 >>> 22 | $274 << 10);
  var $290 = ($267 >>> 5 | $267 << 27) ^ $271 ^ $279;
  var $299 = $288 ^ $290 << 3 ^ ($279 >>> 7 | $279 << 25);
  var $301 = ($271 >>> 1 | $271 << 31) ^ $290 ^ $288;
  var $304 = $288 >>> 3 | $288 << 29;
  var $307 = $290 >>> 13 | $290 << 19;
  var $308 = $304 ^ $299;
  var $312 = $299 ^ $307 ^ ($308 | $301);
  var $313 = $304 | $307;
  var $317 = $304 & $307 | $299 ^ -1;
  var $320 = $313 & $301 ^ $317;
  var $321 = ($312 | $299) & $301 ^ $313 & $308;
  var $325 = $312 ^ HEAP32[$context$s2 + 104];
  var $328 = $321 ^ HEAP32[$context$s2 + 105];
  var $334 = $317 ^ HEAP32[$context$s2 + 106] ^ $312 ^ $320 & $304 ^ $321;
  var $337 = $320 ^ HEAP32[$context$s2 + 107];
  var $346 = $328 << 7 ^ $337 ^ ($334 >>> 22 | $334 << 10);
  var $348 = ($325 >>> 5 | $325 << 27) ^ $337 ^ $328;
  var $357 = $348 << 3 ^ ($337 >>> 7 | $337 << 25) ^ $346;
  var $359 = ($328 >>> 1 | $328 << 31) ^ $348 ^ $346;
  var $362 = $346 >>> 3 | $346 << 29;
  var $365 = $348 >>> 13 | $348 << 19;
  var $366 = $359 ^ $365;
  var $368 = $362 & $365;
  var $369 = $362 ^ ($359 | $357);
  var $371 = ($369 | $365) & $366;
  var $377 = $371 ^ (($368 | $357) ^ -1);
  var $378 = ($371 ^ $359) & $357 ^ ($369 | $368);
  var $385 = $362 ^ HEAP32[$context$s2 + 100] ^ $371 ^ ($377 | $365) ^ $378;
  var $388 = $378 ^ HEAP32[$context$s2 + 101];
  var $391 = $377 ^ HEAP32[$context$s2 + 102];
  var $395 = $366 ^ HEAP32[$context$s2 + 103] ^ $369;
  var $404 = ($391 >>> 22 | $391 << 10) ^ $395 ^ $388 << 7;
  var $406 = $388 ^ $395 ^ ($385 >>> 5 | $385 << 27);
  var $415 = $404 ^ ($395 >>> 7 | $395 << 25) ^ $406 << 3;
  var $417 = ($388 >>> 1 | $388 << 31) ^ $404 ^ $406;
  var $420 = $404 >>> 3 | $404 << 29;
  var $423 = $406 >>> 13 | $406 << 19;
  var $424 = $415 ^ $420;
  var $426 = $417 | $420;
  var $428 = ($423 | $417) ^ $424;
  var $430 = $428 ^ -1;
  var $434 = ($424 & $420 | $423) ^ ($415 ^ $417) & $426;
  var $436 = $434 ^ ($428 | $423);
  var $437 = ($415 | $430) ^ $426;
  var $444 = $420 ^ HEAP32[$context$s2 + 96] ^ $423 ^ ($436 & $428 | $437);
  var $447 = $434 ^ HEAP32[$context$s2 + 97];
  var $450 = HEAP32[$context$s2 + 98] ^ $430;
  var $454 = $437 ^ HEAP32[$context$s2 + 99] ^ $436;
  var $463 = $447 << 7 ^ ($450 >>> 22 | $450 << 10) ^ $454;
  var $465 = $454 ^ $447 ^ ($444 >>> 5 | $444 << 27);
  var $474 = ($454 >>> 7 | $454 << 25) ^ $463 ^ $465 << 3;
  var $476 = $463 ^ ($447 >>> 1 | $447 << 31) ^ $465;
  var $479 = $463 >>> 3 | $463 << 29;
  var $482 = $465 >>> 13 | $465 << 19;
  var $483 = $482 & $476;
  var $486 = ($482 | $476) & $474;
  var $487 = ($483 | $479) ^ $486;
  var $488 = $486 ^ $476;
  var $494 = ($487 ^ ($474 ^ -1) | $488) ^ $482;
  var $502 = $479 ^ HEAP32[$context$s2 + 92] ^ $488 ^ ($494 | $474);
  var $505 = $494 ^ HEAP32[$context$s2 + 93];
  var $509 = ($483 | $474 ^ $476) ^ HEAP32[$context$s2 + 94] ^ ($482 | $474) & $479;
  var $512 = $487 ^ HEAP32[$context$s2 + 95];
  var $521 = ($509 >>> 22 | $509 << 10) ^ $512 ^ $505 << 7;
  var $523 = $505 ^ $512 ^ ($502 >>> 5 | $502 << 27);
  var $532 = $521 ^ ($512 >>> 7 | $512 << 25) ^ $523 << 3;
  var $534 = ($505 >>> 1 | $505 << 31) ^ $521 ^ $523;
  var $537 = $521 >>> 3 | $521 << 29;
  var $540 = $523 >>> 13 | $523 << 19;
  var $541 = $540 ^ $537;
  var $542 = $537 ^ -1;
  var $545 = $541 & $534 | $532;
  var $546 = $540 & ($534 | $542);
  var $549 = $532 ^ $534 ^ ($540 | $542);
  var $551 = $545 ^ ($546 ^ -1);
  var $557 = $551 ^ HEAP32[$context$s2 + 88];
  var $560 = $549 ^ HEAP32[$context$s2 + 89];
  var $565 = ($532 | $542) ^ HEAP32[$context$s2 + 90] ^ $541 ^ $551 & $534;
  var $571 = $540 ^ HEAP32[$context$s2 + 91] ^ $546 ^ $549 ^ $545 & $541;
  var $580 = $571 ^ $560 << 7 ^ ($565 >>> 22 | $565 << 10);
  var $582 = $571 ^ $560 ^ ($557 >>> 5 | $557 << 27);
  var $591 = $582 << 3 ^ ($571 >>> 7 | $571 << 25) ^ $580;
  var $593 = $582 ^ ($560 >>> 1 | $560 << 31) ^ $580;
  var $596 = $580 >>> 3 | $580 << 29;
  var $599 = $582 >>> 13 | $582 << 19;
  var $600 = $591 & $599;
  var $601 = $600 ^ $596;
  var $605 = $591 ^ $599 ^ $601 & $593;
  var $609 = ($596 & $599 | $593) ^ $600;
  var $615 = $605 ^ HEAP32[$context$s2 + 84];
  var $618 = $609 ^ $605 ^ HEAP32[$context$s2 + 85];
  var $624 = $593 ^ HEAP32[$context$s2 + 86] ^ $591 ^ $601 ^ ($609 | $605);
  var $628 = $601 ^ HEAP32[$context$s2 + 87] ^ ($605 & $599 | $593 ^ -1);
  var $637 = $628 ^ $618 << 7 ^ ($624 >>> 22 | $624 << 10);
  var $639 = $628 ^ $618 ^ ($615 >>> 5 | $615 << 27);
  var $648 = $639 << 3 ^ ($628 >>> 7 | $628 << 25) ^ $637;
  var $650 = $639 ^ ($618 >>> 1 | $618 << 31) ^ $637;
  var $653 = $637 >>> 3 | $637 << 29;
  var $656 = $639 >>> 13 | $639 << 19;
  var $657 = $648 | $650;
  var $659 = $657 & $656;
  var $660 = ($653 | $648) ^ $650;
  var $662 = $660 & $656;
  var $664 = $653 ^ $648 ^ $662;
  var $665 = $664 | $659 ^ -1;
  var $672 = $656 ^ HEAP32[$context$s2 + 80] ^ $660 ^ $665;
  var $675 = $664 ^ HEAP32[$context$s2 + 81];
  var $680 = $657 ^ HEAP32[$context$s2 + 82] ^ $665 ^ ($662 ^ $656 | $653);
  var $685 = $648 ^ HEAP32[$context$s2 + 83] ^ $660 ^ $659;
  var $694 = $675 << 7 ^ $685 ^ ($680 >>> 22 | $680 << 10);
  var $696 = $675 ^ $685 ^ ($672 >>> 5 | $672 << 27);
  var $705 = $696 << 3 ^ ($685 >>> 7 | $685 << 25) ^ $694;
  var $707 = $696 ^ ($675 >>> 1 | $675 << 31) ^ $694;
  var $710 = $694 >>> 3 | $694 << 29;
  var $713 = $696 >>> 13 | $696 << 19;
  var $714 = $710 | $705;
  var $715 = $705 | $713;
  var $716 = $715 ^ $710;
  var $718 = $705 ^ $713;
  var $721 = ($715 ^ $707) & $716 ^ $718;
  var $723 = $714 & $707 ^ $716;
  var $730 = $723 ^ HEAP32[$context$s2 + 76];
  var $734 = $707 ^ HEAP32[$context$s2 + 77] ^ ($723 | $718) & ($716 ^ $713);
  var $737 = $721 ^ HEAP32[$context$s2 + 78];
  var $742 = $718 ^ HEAP32[$context$s2 + 79] ^ $714 ^ ($721 & $713 | $707);
  var $751 = $742 ^ $734 << 7 ^ ($737 >>> 22 | $737 << 10);
  var $753 = ($730 >>> 5 | $730 << 27) ^ $734 ^ $742;
  var $762 = $751 ^ $753 << 3 ^ ($742 >>> 7 | $742 << 25);
  var $764 = ($734 >>> 1 | $734 << 31) ^ $753 ^ $751;
  var $767 = $751 >>> 3 | $751 << 29;
  var $770 = $753 >>> 13 | $753 << 19;
  var $771 = $767 ^ $762;
  var $775 = $762 ^ $770 ^ ($771 | $764);
  var $776 = $767 | $770;
  var $780 = $767 & $770 | $762 ^ -1;
  var $783 = $776 & $764 ^ $780;
  var $784 = ($775 | $762) & $764 ^ $776 & $771;
  var $788 = $775 ^ HEAP32[$context$s2 + 72];
  var $791 = $784 ^ HEAP32[$context$s2 + 73];
  var $797 = $780 ^ HEAP32[$context$s2 + 74] ^ $775 ^ $783 & $767 ^ $784;
  var $800 = $783 ^ HEAP32[$context$s2 + 75];
  var $809 = $791 << 7 ^ $800 ^ ($797 >>> 22 | $797 << 10);
  var $811 = ($788 >>> 5 | $788 << 27) ^ $800 ^ $791;
  var $820 = $811 << 3 ^ ($800 >>> 7 | $800 << 25) ^ $809;
  var $822 = ($791 >>> 1 | $791 << 31) ^ $811 ^ $809;
  var $825 = $809 >>> 3 | $809 << 29;
  var $828 = $811 >>> 13 | $811 << 19;
  var $829 = $822 ^ $828;
  var $831 = $825 & $828;
  var $832 = $825 ^ ($822 | $820);
  var $834 = ($832 | $828) & $829;
  var $840 = $834 ^ (($831 | $820) ^ -1);
  var $841 = ($834 ^ $822) & $820 ^ ($832 | $831);
  var $848 = $825 ^ HEAP32[$context$s2 + 68] ^ $834 ^ ($840 | $828) ^ $841;
  var $851 = $841 ^ HEAP32[$context$s2 + 69];
  var $854 = $840 ^ HEAP32[$context$s2 + 70];
  var $858 = $829 ^ HEAP32[$context$s2 + 71] ^ $832;
  var $867 = ($854 >>> 22 | $854 << 10) ^ $858 ^ $851 << 7;
  var $869 = $851 ^ $858 ^ ($848 >>> 5 | $848 << 27);
  var $878 = $867 ^ ($858 >>> 7 | $858 << 25) ^ $869 << 3;
  var $880 = ($851 >>> 1 | $851 << 31) ^ $867 ^ $869;
  var $883 = $867 >>> 3 | $867 << 29;
  var $886 = $869 >>> 13 | $869 << 19;
  var $887 = $878 ^ $883;
  var $889 = $880 | $883;
  var $891 = ($886 | $880) ^ $887;
  var $893 = $891 ^ -1;
  var $897 = ($887 & $883 | $886) ^ ($878 ^ $880) & $889;
  var $899 = $897 ^ ($891 | $886);
  var $900 = ($878 | $893) ^ $889;
  var $907 = $883 ^ HEAP32[$context$s2 + 64] ^ $886 ^ ($899 & $891 | $900);
  var $910 = $897 ^ HEAP32[$context$s2 + 65];
  var $913 = HEAP32[$context$s2 + 66] ^ $893;
  var $917 = $900 ^ HEAP32[$context$s2 + 67] ^ $899;
  var $926 = $910 << 7 ^ ($913 >>> 22 | $913 << 10) ^ $917;
  var $928 = $917 ^ $910 ^ ($907 >>> 5 | $907 << 27);
  var $937 = ($917 >>> 7 | $917 << 25) ^ $926 ^ $928 << 3;
  var $939 = $926 ^ ($910 >>> 1 | $910 << 31) ^ $928;
  var $942 = $926 >>> 3 | $926 << 29;
  var $945 = $928 >>> 13 | $928 << 19;
  var $946 = $945 & $939;
  var $949 = ($945 | $939) & $937;
  var $950 = ($946 | $942) ^ $949;
  var $951 = $949 ^ $939;
  var $957 = ($950 ^ ($937 ^ -1) | $951) ^ $945;
  var $965 = $942 ^ HEAP32[$context$s2 + 60] ^ $951 ^ ($957 | $937);
  var $968 = $957 ^ HEAP32[$context$s2 + 61];
  var $972 = ($946 | $937 ^ $939) ^ HEAP32[$context$s2 + 62] ^ ($945 | $937) & $942;
  var $975 = $950 ^ HEAP32[$context$s2 + 63];
  var $984 = ($972 >>> 22 | $972 << 10) ^ $975 ^ $968 << 7;
  var $986 = $968 ^ $975 ^ ($965 >>> 5 | $965 << 27);
  var $995 = $984 ^ ($975 >>> 7 | $975 << 25) ^ $986 << 3;
  var $997 = ($968 >>> 1 | $968 << 31) ^ $984 ^ $986;
  var $1000 = $984 >>> 3 | $984 << 29;
  var $1003 = $986 >>> 13 | $986 << 19;
  var $1004 = $1003 ^ $1000;
  var $1005 = $1000 ^ -1;
  var $1008 = $1004 & $997 | $995;
  var $1009 = $1003 & ($997 | $1005);
  var $1012 = $995 ^ $997 ^ ($1003 | $1005);
  var $1014 = $1008 ^ ($1009 ^ -1);
  var $1020 = $1014 ^ HEAP32[$context$s2 + 56];
  var $1023 = $1012 ^ HEAP32[$context$s2 + 57];
  var $1028 = ($995 | $1005) ^ HEAP32[$context$s2 + 58] ^ $1004 ^ $1014 & $997;
  var $1034 = $1003 ^ HEAP32[$context$s2 + 59] ^ $1009 ^ $1012 ^ $1008 & $1004;
  var $1043 = $1034 ^ $1023 << 7 ^ ($1028 >>> 22 | $1028 << 10);
  var $1045 = $1034 ^ $1023 ^ ($1020 >>> 5 | $1020 << 27);
  var $1054 = $1045 << 3 ^ ($1034 >>> 7 | $1034 << 25) ^ $1043;
  var $1056 = $1045 ^ ($1023 >>> 1 | $1023 << 31) ^ $1043;
  var $1059 = $1043 >>> 3 | $1043 << 29;
  var $1062 = $1045 >>> 13 | $1045 << 19;
  var $1063 = $1054 & $1062;
  var $1064 = $1063 ^ $1059;
  var $1068 = $1054 ^ $1062 ^ $1064 & $1056;
  var $1072 = ($1059 & $1062 | $1056) ^ $1063;
  var $1078 = $1068 ^ HEAP32[$context$s2 + 52];
  var $1081 = $1072 ^ $1068 ^ HEAP32[$context$s2 + 53];
  var $1087 = $1056 ^ HEAP32[$context$s2 + 54] ^ $1054 ^ $1064 ^ ($1072 | $1068);
  var $1091 = $1064 ^ HEAP32[$context$s2 + 55] ^ ($1068 & $1062 | $1056 ^ -1);
  var $1100 = $1091 ^ $1081 << 7 ^ ($1087 >>> 22 | $1087 << 10);
  var $1102 = $1091 ^ $1081 ^ ($1078 >>> 5 | $1078 << 27);
  var $1111 = $1102 << 3 ^ ($1091 >>> 7 | $1091 << 25) ^ $1100;
  var $1113 = $1102 ^ ($1081 >>> 1 | $1081 << 31) ^ $1100;
  var $1116 = $1100 >>> 3 | $1100 << 29;
  var $1119 = $1102 >>> 13 | $1102 << 19;
  var $1120 = $1111 | $1113;
  var $1122 = $1120 & $1119;
  var $1123 = ($1116 | $1111) ^ $1113;
  var $1125 = $1123 & $1119;
  var $1127 = $1116 ^ $1111 ^ $1125;
  var $1128 = $1127 | $1122 ^ -1;
  var $1135 = $1119 ^ HEAP32[$context$s2 + 48] ^ $1123 ^ $1128;
  var $1138 = $1127 ^ HEAP32[$context$s2 + 49];
  var $1143 = $1120 ^ HEAP32[$context$s2 + 50] ^ $1128 ^ ($1125 ^ $1119 | $1116);
  var $1148 = $1111 ^ HEAP32[$context$s2 + 51] ^ $1123 ^ $1122;
  var $1157 = $1138 << 7 ^ $1148 ^ ($1143 >>> 22 | $1143 << 10);
  var $1159 = $1138 ^ $1148 ^ ($1135 >>> 5 | $1135 << 27);
  var $1168 = $1159 << 3 ^ ($1148 >>> 7 | $1148 << 25) ^ $1157;
  var $1170 = $1159 ^ ($1138 >>> 1 | $1138 << 31) ^ $1157;
  var $1173 = $1157 >>> 3 | $1157 << 29;
  var $1176 = $1159 >>> 13 | $1159 << 19;
  var $1177 = $1173 | $1168;
  var $1178 = $1168 | $1176;
  var $1179 = $1178 ^ $1173;
  var $1181 = $1168 ^ $1176;
  var $1184 = ($1178 ^ $1170) & $1179 ^ $1181;
  var $1186 = $1177 & $1170 ^ $1179;
  var $1193 = $1186 ^ HEAP32[$context$s2 + 44];
  var $1197 = $1170 ^ HEAP32[$context$s2 + 45] ^ ($1186 | $1181) & ($1179 ^ $1176);
  var $1200 = $1184 ^ HEAP32[$context$s2 + 46];
  var $1205 = $1181 ^ HEAP32[$context$s2 + 47] ^ $1177 ^ ($1184 & $1176 | $1170);
  var $1214 = $1205 ^ $1197 << 7 ^ ($1200 >>> 22 | $1200 << 10);
  var $1216 = ($1193 >>> 5 | $1193 << 27) ^ $1197 ^ $1205;
  var $1225 = $1214 ^ $1216 << 3 ^ ($1205 >>> 7 | $1205 << 25);
  var $1227 = ($1197 >>> 1 | $1197 << 31) ^ $1216 ^ $1214;
  var $1230 = $1214 >>> 3 | $1214 << 29;
  var $1233 = $1216 >>> 13 | $1216 << 19;
  var $1234 = $1230 ^ $1225;
  var $1238 = $1225 ^ $1233 ^ ($1234 | $1227);
  var $1239 = $1230 | $1233;
  var $1243 = $1230 & $1233 | $1225 ^ -1;
  var $1246 = $1239 & $1227 ^ $1243;
  var $1247 = ($1238 | $1225) & $1227 ^ $1239 & $1234;
  var $1251 = $1238 ^ HEAP32[$context$s2 + 40];
  var $1254 = $1247 ^ HEAP32[$context$s2 + 41];
  var $1260 = $1243 ^ HEAP32[$context$s2 + 42] ^ $1238 ^ $1246 & $1230 ^ $1247;
  var $1263 = $1246 ^ HEAP32[$context$s2 + 43];
  var $1272 = $1254 << 7 ^ $1263 ^ ($1260 >>> 22 | $1260 << 10);
  var $1274 = ($1251 >>> 5 | $1251 << 27) ^ $1263 ^ $1254;
  var $1283 = $1274 << 3 ^ ($1263 >>> 7 | $1263 << 25) ^ $1272;
  var $1285 = ($1254 >>> 1 | $1254 << 31) ^ $1274 ^ $1272;
  var $1288 = $1272 >>> 3 | $1272 << 29;
  var $1291 = $1274 >>> 13 | $1274 << 19;
  var $1292 = $1285 ^ $1291;
  var $1294 = $1288 & $1291;
  var $1295 = $1288 ^ ($1285 | $1283);
  var $1297 = ($1295 | $1291) & $1292;
  var $1303 = $1297 ^ (($1294 | $1283) ^ -1);
  var $1304 = ($1297 ^ $1285) & $1283 ^ ($1295 | $1294);
  var $1311 = $1288 ^ HEAP32[$context$s2 + 36] ^ $1297 ^ ($1303 | $1291) ^ $1304;
  var $1314 = $1304 ^ HEAP32[$context$s2 + 37];
  var $1317 = $1303 ^ HEAP32[$context$s2 + 38];
  var $1321 = $1292 ^ HEAP32[$context$s2 + 39] ^ $1295;
  var $1330 = ($1317 >>> 22 | $1317 << 10) ^ $1321 ^ $1314 << 7;
  var $1332 = $1314 ^ $1321 ^ ($1311 >>> 5 | $1311 << 27);
  var $1341 = $1330 ^ ($1321 >>> 7 | $1321 << 25) ^ $1332 << 3;
  var $1343 = ($1314 >>> 1 | $1314 << 31) ^ $1330 ^ $1332;
  var $1346 = $1330 >>> 3 | $1330 << 29;
  var $1349 = $1332 >>> 13 | $1332 << 19;
  var $1350 = $1341 ^ $1346;
  var $1352 = $1343 | $1346;
  var $1354 = ($1349 | $1343) ^ $1350;
  var $1356 = $1354 ^ -1;
  var $1360 = ($1350 & $1346 | $1349) ^ ($1341 ^ $1343) & $1352;
  var $1362 = $1360 ^ ($1354 | $1349);
  var $1363 = ($1341 | $1356) ^ $1352;
  var $1370 = $1346 ^ HEAP32[$context$s2 + 32] ^ $1349 ^ ($1362 & $1354 | $1363);
  var $1373 = $1360 ^ HEAP32[$context$s2 + 33];
  var $1376 = HEAP32[$context$s2 + 34] ^ $1356;
  var $1380 = $1363 ^ HEAP32[$context$s2 + 35] ^ $1362;
  var $1389 = $1373 << 7 ^ ($1376 >>> 22 | $1376 << 10) ^ $1380;
  var $1391 = $1380 ^ $1373 ^ ($1370 >>> 5 | $1370 << 27);
  var $1400 = ($1380 >>> 7 | $1380 << 25) ^ $1389 ^ $1391 << 3;
  var $1402 = $1389 ^ ($1373 >>> 1 | $1373 << 31) ^ $1391;
  var $1405 = $1389 >>> 3 | $1389 << 29;
  var $1408 = $1391 >>> 13 | $1391 << 19;
  var $1409 = $1408 & $1402;
  var $1412 = ($1408 | $1402) & $1400;
  var $1413 = ($1409 | $1405) ^ $1412;
  var $1414 = $1412 ^ $1402;
  var $1420 = ($1413 ^ ($1400 ^ -1) | $1414) ^ $1408;
  var $1428 = $1405 ^ HEAP32[$context$s2 + 28] ^ $1414 ^ ($1420 | $1400);
  var $1431 = $1420 ^ HEAP32[$context$s2 + 29];
  var $1435 = ($1409 | $1400 ^ $1402) ^ HEAP32[$context$s2 + 30] ^ ($1408 | $1400) & $1405;
  var $1438 = $1413 ^ HEAP32[$context$s2 + 31];
  var $1447 = ($1435 >>> 22 | $1435 << 10) ^ $1438 ^ $1431 << 7;
  var $1449 = $1431 ^ $1438 ^ ($1428 >>> 5 | $1428 << 27);
  var $1458 = $1447 ^ ($1438 >>> 7 | $1438 << 25) ^ $1449 << 3;
  var $1460 = ($1431 >>> 1 | $1431 << 31) ^ $1447 ^ $1449;
  var $1463 = $1447 >>> 3 | $1447 << 29;
  var $1466 = $1449 >>> 13 | $1449 << 19;
  var $1467 = $1466 ^ $1463;
  var $1468 = $1463 ^ -1;
  var $1471 = $1467 & $1460 | $1458;
  var $1472 = $1466 & ($1460 | $1468);
  var $1475 = $1458 ^ $1460 ^ ($1466 | $1468);
  var $1477 = $1471 ^ ($1472 ^ -1);
  var $1483 = $1477 ^ HEAP32[$context$s2 + 24];
  var $1486 = $1475 ^ HEAP32[$context$s2 + 25];
  var $1491 = ($1458 | $1468) ^ HEAP32[$context$s2 + 26] ^ $1467 ^ $1477 & $1460;
  var $1497 = $1466 ^ HEAP32[$context$s2 + 27] ^ $1472 ^ $1475 ^ $1471 & $1467;
  var $1506 = $1497 ^ $1486 << 7 ^ ($1491 >>> 22 | $1491 << 10);
  var $1508 = $1497 ^ $1486 ^ ($1483 >>> 5 | $1483 << 27);
  var $1517 = $1508 << 3 ^ ($1497 >>> 7 | $1497 << 25) ^ $1506;
  var $1519 = $1508 ^ ($1486 >>> 1 | $1486 << 31) ^ $1506;
  var $1522 = $1506 >>> 3 | $1506 << 29;
  var $1525 = $1508 >>> 13 | $1508 << 19;
  var $1526 = $1517 & $1525;
  var $1527 = $1526 ^ $1522;
  var $1531 = $1517 ^ $1525 ^ $1527 & $1519;
  var $1535 = ($1522 & $1525 | $1519) ^ $1526;
  var $1541 = $1531 ^ HEAP32[$context$s2 + 20];
  var $1544 = $1535 ^ $1531 ^ HEAP32[$context$s2 + 21];
  var $1550 = $1519 ^ HEAP32[$context$s2 + 22] ^ $1517 ^ $1527 ^ ($1535 | $1531);
  var $1554 = $1527 ^ HEAP32[$context$s2 + 23] ^ ($1531 & $1525 | $1519 ^ -1);
  var $1563 = $1554 ^ $1544 << 7 ^ ($1550 >>> 22 | $1550 << 10);
  var $1565 = $1554 ^ $1544 ^ ($1541 >>> 5 | $1541 << 27);
  var $1574 = $1565 << 3 ^ ($1554 >>> 7 | $1554 << 25) ^ $1563;
  var $1576 = $1565 ^ ($1544 >>> 1 | $1544 << 31) ^ $1563;
  var $1579 = $1563 >>> 3 | $1563 << 29;
  var $1582 = $1565 >>> 13 | $1565 << 19;
  var $1583 = $1574 | $1576;
  var $1585 = $1583 & $1582;
  var $1586 = ($1579 | $1574) ^ $1576;
  var $1588 = $1586 & $1582;
  var $1590 = $1579 ^ $1574 ^ $1588;
  var $1591 = $1590 | $1585 ^ -1;
  var $1598 = $1582 ^ HEAP32[$context$s2 + 16] ^ $1586 ^ $1591;
  var $1601 = $1590 ^ HEAP32[$context$s2 + 17];
  var $1606 = $1583 ^ HEAP32[$context$s2 + 18] ^ $1591 ^ ($1588 ^ $1582 | $1579);
  var $1611 = $1574 ^ HEAP32[$context$s2 + 19] ^ $1586 ^ $1585;
  var $1620 = $1601 << 7 ^ $1611 ^ ($1606 >>> 22 | $1606 << 10);
  var $1622 = $1601 ^ $1611 ^ ($1598 >>> 5 | $1598 << 27);
  var $1631 = $1622 << 3 ^ ($1611 >>> 7 | $1611 << 25) ^ $1620;
  var $1633 = $1622 ^ ($1601 >>> 1 | $1601 << 31) ^ $1620;
  var $1636 = $1620 >>> 3 | $1620 << 29;
  var $1639 = $1622 >>> 13 | $1622 << 19;
  var $1640 = $1636 | $1631;
  var $1641 = $1631 | $1639;
  var $1642 = $1641 ^ $1636;
  var $1644 = $1631 ^ $1639;
  var $1647 = ($1641 ^ $1633) & $1642 ^ $1644;
  var $1649 = $1640 & $1633 ^ $1642;
  var $1656 = $1649 ^ HEAP32[$context$s2 + 12];
  var $1660 = $1633 ^ HEAP32[$context$s2 + 13] ^ ($1649 | $1644) & ($1642 ^ $1639);
  var $1663 = $1647 ^ HEAP32[$context$s2 + 14];
  var $1668 = $1644 ^ HEAP32[$context$s2 + 15] ^ $1640 ^ ($1647 & $1639 | $1633);
  var $1677 = $1668 ^ $1660 << 7 ^ ($1663 >>> 22 | $1663 << 10);
  var $1679 = ($1656 >>> 5 | $1656 << 27) ^ $1660 ^ $1668;
  var $1688 = $1677 ^ $1679 << 3 ^ ($1668 >>> 7 | $1668 << 25);
  var $1690 = ($1660 >>> 1 | $1660 << 31) ^ $1679 ^ $1677;
  var $1693 = $1677 >>> 3 | $1677 << 29;
  var $1696 = $1679 >>> 13 | $1679 << 19;
  var $1697 = $1693 ^ $1688;
  var $1701 = $1688 ^ $1696 ^ ($1697 | $1690);
  var $1702 = $1693 | $1696;
  var $1706 = $1693 & $1696 | $1688 ^ -1;
  var $1709 = $1702 & $1690 ^ $1706;
  var $1710 = ($1701 | $1688) & $1690 ^ $1702 & $1697;
  var $1714 = $1701 ^ HEAP32[$context$s2 + 8];
  var $1717 = $1710 ^ HEAP32[$context$s2 + 9];
  var $1723 = $1706 ^ HEAP32[$context$s2 + 10] ^ $1701 ^ $1709 & $1693 ^ $1710;
  var $1726 = $1709 ^ HEAP32[$context$s2 + 11];
  var $1735 = $1717 << 7 ^ $1726 ^ ($1723 >>> 22 | $1723 << 10);
  var $1737 = ($1714 >>> 5 | $1714 << 27) ^ $1726 ^ $1717;
  var $1746 = $1737 << 3 ^ ($1726 >>> 7 | $1726 << 25) ^ $1735;
  var $1748 = ($1717 >>> 1 | $1717 << 31) ^ $1737 ^ $1735;
  var $1751 = $1735 >>> 3 | $1735 << 29;
  var $1754 = $1737 >>> 13 | $1737 << 19;
  var $1755 = $1748 ^ $1754;
  var $1757 = $1751 & $1754;
  var $1758 = $1751 ^ ($1748 | $1746);
  var $1760 = ($1758 | $1754) & $1755;
  var $1766 = $1760 ^ (($1757 | $1746) ^ -1);
  var $1767 = ($1760 ^ $1748) & $1746 ^ ($1758 | $1757);
  var $1774 = $1751 ^ HEAP32[$context$s2 + 4] ^ $1760 ^ ($1766 | $1754) ^ $1767;
  var $1777 = $1767 ^ HEAP32[$context$s2 + 5];
  var $1780 = $1766 ^ HEAP32[$context$s2 + 6];
  var $1784 = $1755 ^ HEAP32[$context$s2 + 7] ^ $1758;
  var $1793 = ($1780 >>> 22 | $1780 << 10) ^ $1784 ^ $1777 << 7;
  var $1795 = $1777 ^ $1784 ^ ($1774 >>> 5 | $1774 << 27);
  var $1804 = $1793 ^ ($1784 >>> 7 | $1784 << 25) ^ $1795 << 3;
  var $1806 = ($1777 >>> 1 | $1777 << 31) ^ $1793 ^ $1795;
  var $1809 = $1793 >>> 3 | $1793 << 29;
  var $1812 = $1795 >>> 13 | $1795 << 19;
  var $1813 = $1804 ^ $1809;
  var $1815 = $1806 | $1809;
  var $1817 = ($1812 | $1806) ^ $1813;
  var $1819 = $1817 ^ -1;
  var $1823 = ($1813 & $1809 | $1812) ^ ($1804 ^ $1806) & $1815;
  var $1825 = $1823 ^ ($1817 | $1812);
  var $1826 = ($1804 | $1819) ^ $1815;
  var $1836 = $1823 ^ HEAP32[$context$s2 + 1];
  var $1839 = HEAP32[$context$s2 + 2] ^ $1819;
  var $1843 = $1826 ^ HEAP32[$context$s2 + 3] ^ $1825;
  HEAP32[$output >> 2] = $1809 ^ HEAP32[$context$s2] ^ $1812 ^ ($1825 & $1817 | $1826);
  HEAP32[$output + 4 >> 2] = $1836;
  HEAP32[$output + 8 >> 2] = $1839;
  HEAP32[$output + 12 >> 2] = $1843;
  return;
}
_serpent_decrypt_internal["X"] = 1;
function _serpent_encrypt_internal($context, $input, $output) {
  var $context$s2 = $context >> 2;
  var $10 = HEAP32[$context$s2] ^ HEAP32[$input >> 2];
  var $13 = HEAP32[$context$s2 + 1] ^ HEAP32[$input + 4 >> 2];
  var $16 = HEAP32[$context$s2 + 2] ^ HEAP32[$input + 8 >> 2];
  var $19 = HEAP32[$context$s2 + 3] ^ HEAP32[$input + 12 >> 2];
  var $23 = $16 ^ $13 ^ ($19 | $10);
  var $25 = $19 ^ $10;
  var $26 = $16 | $13;
  var $28 = $26 & ($13 ^ $10);
  var $29 = ($23 | $16) & $19 ^ $28;
  var $34 = $25 ^ ($26 ^ -1) ^ $29 & $28;
  var $37 = $34 << 13 | $34 >>> 19;
  var $40 = $29 << 3 | $29 >>> 29;
  var $45 = $19 ^ $16 ^ $25 & $13 ^ $40 ^ $34 ^ $37;
  var $48 = $40 ^ $23 ^ $37 << 3;
  var $51 = $45 << 1 | $45 >>> 31;
  var $54 = $48 << 7 | $48 >>> 25;
  var $56 = $51 ^ $37 ^ $54;
  var $59 = $51 << 7 ^ $40 ^ $54;
  var $68 = ($56 << 5 | $56 >>> 27) ^ HEAP32[$context$s2 + 4];
  var $71 = $51 ^ HEAP32[$context$s2 + 5];
  var $74 = ($59 << 22 | $59 >>> 10) ^ HEAP32[$context$s2 + 6];
  var $77 = $54 ^ HEAP32[$context$s2 + 7];
  var $78 = $68 | $77;
  var $79 = $74 ^ $77;
  var $82 = $68 | $71 ^ -1;
  var $86 = $79 ^ $82;
  var $87 = (($74 ^ $68) & $77 | $71) ^ $79 & $78;
  var $90 = $78 ^ $77 & $71 ^ $86;
  var $94 = ($90 | $87) & $82 ^ $74;
  var $97 = $94 << 13 | $94 >>> 19;
  var $100 = $86 << 3 | $86 >>> 29;
  var $102 = $90 ^ $87 ^ $100 ^ $97;
  var $106 = $100 ^ ($87 ^ -1) ^ $97 << 3;
  var $109 = $102 << 1 | $102 >>> 31;
  var $112 = $106 << 7 | $106 >>> 25;
  var $114 = $109 ^ $97 ^ $112;
  var $117 = $109 << 7 ^ $100 ^ $112;
  var $126 = ($114 << 5 | $114 >>> 27) ^ HEAP32[$context$s2 + 8];
  var $129 = $109 ^ HEAP32[$context$s2 + 9];
  var $132 = ($117 << 22 | $117 >>> 10) ^ HEAP32[$context$s2 + 10];
  var $135 = $112 ^ HEAP32[$context$s2 + 11];
  var $136 = $132 | $126;
  var $137 = $126 ^ $129;
  var $138 = $136 ^ $135;
  var $139 = $138 ^ $137;
  var $140 = $139 ^ $132;
  var $144 = ($140 | $129) ^ $138;
  var $146 = ($144 | $137) ^ ($140 ^ $129) & $136;
  var $150 = ($126 | $135) ^ $129 ^ $144 ^ $146;
  var $153 = $139 << 13 | $139 >>> 19;
  var $156 = $150 << 3 | $150 >>> 29;
  var $158 = $146 ^ $153 ^ $156;
  var $162 = $144 ^ ($153 << 3 ^ -1) ^ $156;
  var $165 = $158 << 1 | $158 >>> 31;
  var $168 = $162 << 7 | $162 >>> 25;
  var $170 = $168 ^ $153 ^ $165;
  var $173 = $168 ^ $156 ^ $165 << 7;
  var $182 = ($170 << 5 | $170 >>> 27) ^ HEAP32[$context$s2 + 12];
  var $185 = $165 ^ HEAP32[$context$s2 + 13];
  var $188 = ($173 << 22 | $173 >>> 10) ^ HEAP32[$context$s2 + 14];
  var $191 = $168 ^ HEAP32[$context$s2 + 15];
  var $193 = $182 | $191;
  var $195 = ($182 ^ $188) & $193;
  var $196 = $182 & $191 | $185;
  var $198 = $195 ^ $191;
  var $199 = $182 & $185 | $188;
  var $202 = $199 ^ $185 ^ $198;
  var $207 = $199 ^ $193 ^ $196 & $191;
  var $208 = ($202 | $191) & $185 ^ ($198 | $182);
  var $211 = $208 << 13 | $208 >>> 19;
  var $214 = $207 << 3 | $207 >>> 29;
  var $217 = $196 ^ $195 ^ $214 ^ $211;
  var $220 = $214 ^ $202 ^ $211 << 3;
  var $223 = $217 << 1 | $217 >>> 31;
  var $226 = $220 << 7 | $220 >>> 25;
  var $228 = $223 ^ $211 ^ $226;
  var $231 = $223 << 7 ^ $214 ^ $226;
  var $240 = ($228 << 5 | $228 >>> 27) ^ HEAP32[$context$s2 + 16];
  var $243 = $223 ^ HEAP32[$context$s2 + 17];
  var $246 = ($231 << 22 | $231 >>> 10) ^ HEAP32[$context$s2 + 18];
  var $249 = $226 ^ HEAP32[$context$s2 + 19];
  var $252 = ($246 | $243) ^ $240;
  var $253 = $249 ^ $243;
  var $254 = $252 | $249;
  var $255 = ($240 | $243) & $249;
  var $256 = $252 ^ $255;
  var $257 = $256 & $253;
  var $259 = $246 & $243;
  var $264 = $257 ^ ($252 | $259);
  var $267 = $255 ^ ($246 ^ -1) ^ $254 & $253;
  var $270 = $267 << 13 | $267 >>> 19;
  var $273 = $264 << 3 | $264 >>> 29;
  var $276 = ($257 ^ $253 | $259) ^ $254 & $240 ^ $273 ^ $270;
  var $279 = $273 ^ $256 ^ $270 << 3;
  var $282 = $276 << 1 | $276 >>> 31;
  var $285 = $279 << 7 | $279 >>> 25;
  var $287 = $285 ^ $270 ^ $282;
  var $290 = $285 ^ $273 ^ $282 << 7;
  var $299 = ($287 << 5 | $287 >>> 27) ^ HEAP32[$context$s2 + 20];
  var $302 = $282 ^ HEAP32[$context$s2 + 21];
  var $307 = $285 ^ HEAP32[$context$s2 + 23];
  var $308 = $302 ^ $307;
  var $310 = $299 & $308;
  var $313 = ($302 | $307) ^ HEAP32[$context$s2 + 22] ^ ($290 << 22 | $290 >>> 10) ^ $310;
  var $314 = $313 ^ -1;
  var $315 = $299 ^ $308;
  var $316 = $307 | $314;
  var $322 = ($316 ^ $307 | $315) ^ ($313 | $302);
  var $325 = $314 << 13 | $314 >>> 19;
  var $328 = $322 << 3 | $322 >>> 29;
  var $331 = $316 ^ $315 ^ $325 ^ $328;
  var $336 = ($315 | $302) ^ $308 ^ ($310 | $314) ^ $325 << 3 ^ $328;
  var $339 = $331 << 1 | $331 >>> 31;
  var $342 = $336 << 7 | $336 >>> 25;
  var $344 = $342 ^ $325 ^ $339;
  var $347 = $342 ^ $328 ^ $339 << 7;
  var $356 = ($344 << 5 | $344 >>> 27) ^ HEAP32[$context$s2 + 24];
  var $359 = $339 ^ HEAP32[$context$s2 + 25];
  var $362 = ($347 << 22 | $347 >>> 10) ^ HEAP32[$context$s2 + 26];
  var $365 = $342 ^ HEAP32[$context$s2 + 27];
  var $367 = $356 ^ $365;
  var $371 = $362 ^ ($359 ^ -1) ^ $356 & $365;
  var $372 = $367 & ($362 | $359);
  var $378 = $372 ^ (($356 | $362) ^ -1) ^ $371 & $359;
  var $382 = $356 ^ $359 ^ $371 & $367 ^ $378;
  var $385 = $382 << 13 | $382 >>> 19;
  var $388 = $378 << 3 | $378 >>> 29;
  var $390 = $388 ^ $371 ^ $385;
  var $395 = $362 ^ ($359 | $365) ^ $372 ^ $388 ^ $385 << 3;
  var $398 = $390 << 1 | $390 >>> 31;
  var $401 = $395 << 7 | $395 >>> 25;
  var $403 = $398 ^ $385 ^ $401;
  var $406 = $398 << 7 ^ $388 ^ $401;
  var $415 = ($403 << 5 | $403 >>> 27) ^ HEAP32[$context$s2 + 28];
  var $418 = $398 ^ HEAP32[$context$s2 + 29];
  var $421 = ($406 << 22 | $406 >>> 10) ^ HEAP32[$context$s2 + 30];
  var $424 = $401 ^ HEAP32[$context$s2 + 31];
  var $425 = $421 & $415;
  var $426 = $424 ^ -1;
  var $428 = $425 | $418;
  var $429 = $415 & $418;
  var $431 = $421 ^ $415 & $426 ^ $428;
  var $436 = ($429 | $424) ^ $415 ^ ($431 | $421);
  var $442 = $421 ^ $429 ^ ($436 ^ $425 | $426);
  var $443 = ($436 ^ $418 | $431 & $428) ^ $415;
  var $446 = $442 << 13 | $442 >>> 19;
  var $449 = $443 << 3 | $443 >>> 29;
  var $451 = $449 ^ $436 ^ $446;
  var $454 = $449 ^ $431 ^ $446 << 3;
  var $457 = $451 << 1 | $451 >>> 31;
  var $460 = $454 << 7 | $454 >>> 25;
  var $462 = $460 ^ $446 ^ $457;
  var $465 = $460 ^ $449 ^ $457 << 7;
  var $474 = ($462 << 5 | $462 >>> 27) ^ HEAP32[$context$s2 + 32];
  var $477 = $457 ^ HEAP32[$context$s2 + 33];
  var $480 = ($465 << 22 | $465 >>> 10) ^ HEAP32[$context$s2 + 34];
  var $483 = $460 ^ HEAP32[$context$s2 + 35];
  var $487 = $480 ^ $477 ^ ($474 | $483);
  var $489 = $474 ^ $483;
  var $490 = $480 | $477;
  var $492 = ($474 ^ $477) & $490;
  var $493 = ($487 | $480) & $483 ^ $492;
  var $498 = $490 ^ ($489 ^ -1) ^ $493 & $492;
  var $501 = $498 << 13 | $498 >>> 19;
  var $504 = $493 << 3 | $493 >>> 29;
  var $509 = $480 ^ $483 ^ $489 & $477 ^ $504 ^ $498 ^ $501;
  var $512 = $504 ^ $487 ^ $501 << 3;
  var $515 = $509 << 1 | $509 >>> 31;
  var $518 = $512 << 7 | $512 >>> 25;
  var $520 = $515 ^ $501 ^ $518;
  var $523 = $515 << 7 ^ $504 ^ $518;
  var $532 = ($520 << 5 | $520 >>> 27) ^ HEAP32[$context$s2 + 36];
  var $535 = $515 ^ HEAP32[$context$s2 + 37];
  var $538 = ($523 << 22 | $523 >>> 10) ^ HEAP32[$context$s2 + 38];
  var $541 = $518 ^ HEAP32[$context$s2 + 39];
  var $542 = $532 | $541;
  var $543 = $538 ^ $541;
  var $546 = $532 | $535 ^ -1;
  var $550 = $543 ^ $546;
  var $551 = (($538 ^ $532) & $541 | $535) ^ $543 & $542;
  var $554 = $542 ^ $541 & $535 ^ $550;
  var $558 = ($554 | $551) & $546 ^ $538;
  var $561 = $558 << 13 | $558 >>> 19;
  var $564 = $550 << 3 | $550 >>> 29;
  var $566 = $554 ^ $551 ^ $564 ^ $561;
  var $570 = $564 ^ ($551 ^ -1) ^ $561 << 3;
  var $573 = $566 << 1 | $566 >>> 31;
  var $576 = $570 << 7 | $570 >>> 25;
  var $578 = $573 ^ $561 ^ $576;
  var $581 = $573 << 7 ^ $564 ^ $576;
  var $590 = ($578 << 5 | $578 >>> 27) ^ HEAP32[$context$s2 + 40];
  var $593 = $573 ^ HEAP32[$context$s2 + 41];
  var $596 = ($581 << 22 | $581 >>> 10) ^ HEAP32[$context$s2 + 42];
  var $599 = $576 ^ HEAP32[$context$s2 + 43];
  var $600 = $596 | $590;
  var $601 = $590 ^ $593;
  var $602 = $600 ^ $599;
  var $603 = $602 ^ $601;
  var $604 = $603 ^ $596;
  var $608 = ($604 | $593) ^ $602;
  var $610 = ($608 | $601) ^ ($604 ^ $593) & $600;
  var $614 = ($590 | $599) ^ $593 ^ $608 ^ $610;
  var $617 = $603 << 13 | $603 >>> 19;
  var $620 = $614 << 3 | $614 >>> 29;
  var $622 = $610 ^ $617 ^ $620;
  var $626 = $608 ^ ($617 << 3 ^ -1) ^ $620;
  var $629 = $622 << 1 | $622 >>> 31;
  var $632 = $626 << 7 | $626 >>> 25;
  var $634 = $632 ^ $617 ^ $629;
  var $637 = $632 ^ $620 ^ $629 << 7;
  var $646 = ($634 << 5 | $634 >>> 27) ^ HEAP32[$context$s2 + 44];
  var $649 = $629 ^ HEAP32[$context$s2 + 45];
  var $652 = ($637 << 22 | $637 >>> 10) ^ HEAP32[$context$s2 + 46];
  var $655 = $632 ^ HEAP32[$context$s2 + 47];
  var $657 = $646 | $655;
  var $659 = ($646 ^ $652) & $657;
  var $660 = $646 & $655 | $649;
  var $662 = $659 ^ $655;
  var $663 = $646 & $649 | $652;
  var $666 = $663 ^ $649 ^ $662;
  var $671 = $663 ^ $657 ^ $660 & $655;
  var $672 = ($666 | $655) & $649 ^ ($662 | $646);
  var $675 = $672 << 13 | $672 >>> 19;
  var $678 = $671 << 3 | $671 >>> 29;
  var $681 = $660 ^ $659 ^ $678 ^ $675;
  var $684 = $678 ^ $666 ^ $675 << 3;
  var $687 = $681 << 1 | $681 >>> 31;
  var $690 = $684 << 7 | $684 >>> 25;
  var $692 = $687 ^ $675 ^ $690;
  var $695 = $687 << 7 ^ $678 ^ $690;
  var $704 = ($692 << 5 | $692 >>> 27) ^ HEAP32[$context$s2 + 48];
  var $707 = $687 ^ HEAP32[$context$s2 + 49];
  var $710 = ($695 << 22 | $695 >>> 10) ^ HEAP32[$context$s2 + 50];
  var $713 = $690 ^ HEAP32[$context$s2 + 51];
  var $716 = ($710 | $707) ^ $704;
  var $717 = $713 ^ $707;
  var $718 = $716 | $713;
  var $719 = ($704 | $707) & $713;
  var $720 = $716 ^ $719;
  var $721 = $720 & $717;
  var $723 = $710 & $707;
  var $728 = $721 ^ ($716 | $723);
  var $731 = $719 ^ ($710 ^ -1) ^ $718 & $717;
  var $734 = $731 << 13 | $731 >>> 19;
  var $737 = $728 << 3 | $728 >>> 29;
  var $740 = ($721 ^ $717 | $723) ^ $718 & $704 ^ $737 ^ $734;
  var $743 = $737 ^ $720 ^ $734 << 3;
  var $746 = $740 << 1 | $740 >>> 31;
  var $749 = $743 << 7 | $743 >>> 25;
  var $751 = $749 ^ $734 ^ $746;
  var $754 = $749 ^ $737 ^ $746 << 7;
  var $763 = ($751 << 5 | $751 >>> 27) ^ HEAP32[$context$s2 + 52];
  var $766 = $746 ^ HEAP32[$context$s2 + 53];
  var $771 = $749 ^ HEAP32[$context$s2 + 55];
  var $772 = $766 ^ $771;
  var $774 = $763 & $772;
  var $777 = ($766 | $771) ^ HEAP32[$context$s2 + 54] ^ ($754 << 22 | $754 >>> 10) ^ $774;
  var $778 = $777 ^ -1;
  var $779 = $763 ^ $772;
  var $780 = $771 | $778;
  var $786 = ($780 ^ $771 | $779) ^ ($777 | $766);
  var $789 = $778 << 13 | $778 >>> 19;
  var $792 = $786 << 3 | $786 >>> 29;
  var $795 = $780 ^ $779 ^ $789 ^ $792;
  var $800 = ($779 | $766) ^ $772 ^ ($774 | $778) ^ $789 << 3 ^ $792;
  var $803 = $795 << 1 | $795 >>> 31;
  var $806 = $800 << 7 | $800 >>> 25;
  var $808 = $806 ^ $789 ^ $803;
  var $811 = $806 ^ $792 ^ $803 << 7;
  var $820 = ($808 << 5 | $808 >>> 27) ^ HEAP32[$context$s2 + 56];
  var $823 = $803 ^ HEAP32[$context$s2 + 57];
  var $826 = ($811 << 22 | $811 >>> 10) ^ HEAP32[$context$s2 + 58];
  var $829 = $806 ^ HEAP32[$context$s2 + 59];
  var $831 = $820 ^ $829;
  var $835 = $826 ^ ($823 ^ -1) ^ $820 & $829;
  var $836 = $831 & ($826 | $823);
  var $842 = $836 ^ (($820 | $826) ^ -1) ^ $835 & $823;
  var $846 = $820 ^ $823 ^ $835 & $831 ^ $842;
  var $849 = $846 << 13 | $846 >>> 19;
  var $852 = $842 << 3 | $842 >>> 29;
  var $854 = $852 ^ $835 ^ $849;
  var $859 = $826 ^ ($823 | $829) ^ $836 ^ $852 ^ $849 << 3;
  var $862 = $854 << 1 | $854 >>> 31;
  var $865 = $859 << 7 | $859 >>> 25;
  var $867 = $862 ^ $849 ^ $865;
  var $870 = $862 << 7 ^ $852 ^ $865;
  var $879 = ($867 << 5 | $867 >>> 27) ^ HEAP32[$context$s2 + 60];
  var $882 = $862 ^ HEAP32[$context$s2 + 61];
  var $885 = ($870 << 22 | $870 >>> 10) ^ HEAP32[$context$s2 + 62];
  var $888 = $865 ^ HEAP32[$context$s2 + 63];
  var $889 = $885 & $879;
  var $890 = $888 ^ -1;
  var $892 = $889 | $882;
  var $893 = $879 & $882;
  var $895 = $885 ^ $879 & $890 ^ $892;
  var $900 = ($893 | $888) ^ $879 ^ ($895 | $885);
  var $906 = $885 ^ $893 ^ ($900 ^ $889 | $890);
  var $907 = ($900 ^ $882 | $895 & $892) ^ $879;
  var $910 = $906 << 13 | $906 >>> 19;
  var $913 = $907 << 3 | $907 >>> 29;
  var $915 = $913 ^ $900 ^ $910;
  var $918 = $913 ^ $895 ^ $910 << 3;
  var $921 = $915 << 1 | $915 >>> 31;
  var $924 = $918 << 7 | $918 >>> 25;
  var $926 = $924 ^ $910 ^ $921;
  var $929 = $924 ^ $913 ^ $921 << 7;
  var $938 = ($926 << 5 | $926 >>> 27) ^ HEAP32[$context$s2 + 64];
  var $941 = $921 ^ HEAP32[$context$s2 + 65];
  var $944 = ($929 << 22 | $929 >>> 10) ^ HEAP32[$context$s2 + 66];
  var $947 = $924 ^ HEAP32[$context$s2 + 67];
  var $951 = $944 ^ $941 ^ ($938 | $947);
  var $953 = $938 ^ $947;
  var $954 = $944 | $941;
  var $956 = ($938 ^ $941) & $954;
  var $957 = ($951 | $944) & $947 ^ $956;
  var $962 = $954 ^ ($953 ^ -1) ^ $957 & $956;
  var $965 = $962 << 13 | $962 >>> 19;
  var $968 = $957 << 3 | $957 >>> 29;
  var $973 = $944 ^ $947 ^ $953 & $941 ^ $968 ^ $962 ^ $965;
  var $976 = $968 ^ $951 ^ $965 << 3;
  var $979 = $973 << 1 | $973 >>> 31;
  var $982 = $976 << 7 | $976 >>> 25;
  var $984 = $979 ^ $965 ^ $982;
  var $987 = $979 << 7 ^ $968 ^ $982;
  var $996 = ($984 << 5 | $984 >>> 27) ^ HEAP32[$context$s2 + 68];
  var $999 = $979 ^ HEAP32[$context$s2 + 69];
  var $1002 = ($987 << 22 | $987 >>> 10) ^ HEAP32[$context$s2 + 70];
  var $1005 = $982 ^ HEAP32[$context$s2 + 71];
  var $1006 = $996 | $1005;
  var $1007 = $1002 ^ $1005;
  var $1010 = $996 | $999 ^ -1;
  var $1014 = $1007 ^ $1010;
  var $1015 = (($1002 ^ $996) & $1005 | $999) ^ $1007 & $1006;
  var $1018 = $1006 ^ $1005 & $999 ^ $1014;
  var $1022 = ($1018 | $1015) & $1010 ^ $1002;
  var $1025 = $1022 << 13 | $1022 >>> 19;
  var $1028 = $1014 << 3 | $1014 >>> 29;
  var $1030 = $1018 ^ $1015 ^ $1028 ^ $1025;
  var $1034 = $1028 ^ ($1015 ^ -1) ^ $1025 << 3;
  var $1037 = $1030 << 1 | $1030 >>> 31;
  var $1040 = $1034 << 7 | $1034 >>> 25;
  var $1042 = $1037 ^ $1025 ^ $1040;
  var $1045 = $1037 << 7 ^ $1028 ^ $1040;
  var $1054 = ($1042 << 5 | $1042 >>> 27) ^ HEAP32[$context$s2 + 72];
  var $1057 = $1037 ^ HEAP32[$context$s2 + 73];
  var $1060 = ($1045 << 22 | $1045 >>> 10) ^ HEAP32[$context$s2 + 74];
  var $1063 = $1040 ^ HEAP32[$context$s2 + 75];
  var $1064 = $1060 | $1054;
  var $1065 = $1054 ^ $1057;
  var $1066 = $1064 ^ $1063;
  var $1067 = $1066 ^ $1065;
  var $1068 = $1067 ^ $1060;
  var $1072 = ($1068 | $1057) ^ $1066;
  var $1074 = ($1072 | $1065) ^ ($1068 ^ $1057) & $1064;
  var $1078 = ($1054 | $1063) ^ $1057 ^ $1072 ^ $1074;
  var $1081 = $1067 << 13 | $1067 >>> 19;
  var $1084 = $1078 << 3 | $1078 >>> 29;
  var $1086 = $1074 ^ $1081 ^ $1084;
  var $1090 = $1072 ^ ($1081 << 3 ^ -1) ^ $1084;
  var $1093 = $1086 << 1 | $1086 >>> 31;
  var $1096 = $1090 << 7 | $1090 >>> 25;
  var $1098 = $1096 ^ $1081 ^ $1093;
  var $1101 = $1096 ^ $1084 ^ $1093 << 7;
  var $1110 = ($1098 << 5 | $1098 >>> 27) ^ HEAP32[$context$s2 + 76];
  var $1113 = $1093 ^ HEAP32[$context$s2 + 77];
  var $1116 = ($1101 << 22 | $1101 >>> 10) ^ HEAP32[$context$s2 + 78];
  var $1119 = $1096 ^ HEAP32[$context$s2 + 79];
  var $1121 = $1110 | $1119;
  var $1123 = ($1110 ^ $1116) & $1121;
  var $1124 = $1110 & $1119 | $1113;
  var $1126 = $1123 ^ $1119;
  var $1127 = $1110 & $1113 | $1116;
  var $1130 = $1127 ^ $1113 ^ $1126;
  var $1135 = $1127 ^ $1121 ^ $1124 & $1119;
  var $1136 = ($1130 | $1119) & $1113 ^ ($1126 | $1110);
  var $1139 = $1136 << 13 | $1136 >>> 19;
  var $1142 = $1135 << 3 | $1135 >>> 29;
  var $1145 = $1124 ^ $1123 ^ $1142 ^ $1139;
  var $1148 = $1142 ^ $1130 ^ $1139 << 3;
  var $1151 = $1145 << 1 | $1145 >>> 31;
  var $1154 = $1148 << 7 | $1148 >>> 25;
  var $1156 = $1151 ^ $1139 ^ $1154;
  var $1159 = $1151 << 7 ^ $1142 ^ $1154;
  var $1168 = ($1156 << 5 | $1156 >>> 27) ^ HEAP32[$context$s2 + 80];
  var $1171 = $1151 ^ HEAP32[$context$s2 + 81];
  var $1174 = ($1159 << 22 | $1159 >>> 10) ^ HEAP32[$context$s2 + 82];
  var $1177 = $1154 ^ HEAP32[$context$s2 + 83];
  var $1180 = ($1174 | $1171) ^ $1168;
  var $1181 = $1177 ^ $1171;
  var $1182 = $1180 | $1177;
  var $1183 = ($1168 | $1171) & $1177;
  var $1184 = $1180 ^ $1183;
  var $1185 = $1184 & $1181;
  var $1187 = $1174 & $1171;
  var $1192 = $1185 ^ ($1180 | $1187);
  var $1195 = $1183 ^ ($1174 ^ -1) ^ $1182 & $1181;
  var $1198 = $1195 << 13 | $1195 >>> 19;
  var $1201 = $1192 << 3 | $1192 >>> 29;
  var $1204 = ($1185 ^ $1181 | $1187) ^ $1182 & $1168 ^ $1201 ^ $1198;
  var $1207 = $1201 ^ $1184 ^ $1198 << 3;
  var $1210 = $1204 << 1 | $1204 >>> 31;
  var $1213 = $1207 << 7 | $1207 >>> 25;
  var $1215 = $1213 ^ $1198 ^ $1210;
  var $1218 = $1213 ^ $1201 ^ $1210 << 7;
  var $1227 = ($1215 << 5 | $1215 >>> 27) ^ HEAP32[$context$s2 + 84];
  var $1230 = $1210 ^ HEAP32[$context$s2 + 85];
  var $1235 = $1213 ^ HEAP32[$context$s2 + 87];
  var $1236 = $1230 ^ $1235;
  var $1238 = $1227 & $1236;
  var $1241 = ($1230 | $1235) ^ HEAP32[$context$s2 + 86] ^ ($1218 << 22 | $1218 >>> 10) ^ $1238;
  var $1242 = $1241 ^ -1;
  var $1243 = $1227 ^ $1236;
  var $1244 = $1235 | $1242;
  var $1250 = ($1244 ^ $1235 | $1243) ^ ($1241 | $1230);
  var $1253 = $1242 << 13 | $1242 >>> 19;
  var $1256 = $1250 << 3 | $1250 >>> 29;
  var $1259 = $1244 ^ $1243 ^ $1253 ^ $1256;
  var $1264 = ($1243 | $1230) ^ $1236 ^ ($1238 | $1242) ^ $1253 << 3 ^ $1256;
  var $1267 = $1259 << 1 | $1259 >>> 31;
  var $1270 = $1264 << 7 | $1264 >>> 25;
  var $1272 = $1270 ^ $1253 ^ $1267;
  var $1275 = $1270 ^ $1256 ^ $1267 << 7;
  var $1284 = ($1272 << 5 | $1272 >>> 27) ^ HEAP32[$context$s2 + 88];
  var $1287 = $1267 ^ HEAP32[$context$s2 + 89];
  var $1290 = ($1275 << 22 | $1275 >>> 10) ^ HEAP32[$context$s2 + 90];
  var $1293 = $1270 ^ HEAP32[$context$s2 + 91];
  var $1295 = $1284 ^ $1293;
  var $1299 = $1290 ^ ($1287 ^ -1) ^ $1284 & $1293;
  var $1300 = $1295 & ($1290 | $1287);
  var $1306 = $1300 ^ (($1284 | $1290) ^ -1) ^ $1299 & $1287;
  var $1310 = $1284 ^ $1287 ^ $1299 & $1295 ^ $1306;
  var $1313 = $1310 << 13 | $1310 >>> 19;
  var $1316 = $1306 << 3 | $1306 >>> 29;
  var $1318 = $1316 ^ $1299 ^ $1313;
  var $1323 = $1290 ^ ($1287 | $1293) ^ $1300 ^ $1316 ^ $1313 << 3;
  var $1326 = $1318 << 1 | $1318 >>> 31;
  var $1329 = $1323 << 7 | $1323 >>> 25;
  var $1331 = $1326 ^ $1313 ^ $1329;
  var $1334 = $1326 << 7 ^ $1316 ^ $1329;
  var $1343 = ($1331 << 5 | $1331 >>> 27) ^ HEAP32[$context$s2 + 92];
  var $1346 = $1326 ^ HEAP32[$context$s2 + 93];
  var $1349 = ($1334 << 22 | $1334 >>> 10) ^ HEAP32[$context$s2 + 94];
  var $1352 = $1329 ^ HEAP32[$context$s2 + 95];
  var $1353 = $1349 & $1343;
  var $1354 = $1352 ^ -1;
  var $1356 = $1353 | $1346;
  var $1357 = $1343 & $1346;
  var $1359 = $1349 ^ $1343 & $1354 ^ $1356;
  var $1364 = ($1357 | $1352) ^ $1343 ^ ($1359 | $1349);
  var $1370 = $1349 ^ $1357 ^ ($1364 ^ $1353 | $1354);
  var $1371 = ($1364 ^ $1346 | $1359 & $1356) ^ $1343;
  var $1374 = $1370 << 13 | $1370 >>> 19;
  var $1377 = $1371 << 3 | $1371 >>> 29;
  var $1379 = $1377 ^ $1364 ^ $1374;
  var $1382 = $1377 ^ $1359 ^ $1374 << 3;
  var $1385 = $1379 << 1 | $1379 >>> 31;
  var $1388 = $1382 << 7 | $1382 >>> 25;
  var $1390 = $1388 ^ $1374 ^ $1385;
  var $1393 = $1388 ^ $1377 ^ $1385 << 7;
  var $1402 = ($1390 << 5 | $1390 >>> 27) ^ HEAP32[$context$s2 + 96];
  var $1405 = $1385 ^ HEAP32[$context$s2 + 97];
  var $1408 = ($1393 << 22 | $1393 >>> 10) ^ HEAP32[$context$s2 + 98];
  var $1411 = $1388 ^ HEAP32[$context$s2 + 99];
  var $1415 = $1408 ^ $1405 ^ ($1402 | $1411);
  var $1417 = $1402 ^ $1411;
  var $1418 = $1408 | $1405;
  var $1420 = ($1402 ^ $1405) & $1418;
  var $1421 = ($1415 | $1408) & $1411 ^ $1420;
  var $1426 = $1418 ^ ($1417 ^ -1) ^ $1421 & $1420;
  var $1429 = $1426 << 13 | $1426 >>> 19;
  var $1432 = $1421 << 3 | $1421 >>> 29;
  var $1437 = $1408 ^ $1411 ^ $1417 & $1405 ^ $1432 ^ $1426 ^ $1429;
  var $1440 = $1432 ^ $1415 ^ $1429 << 3;
  var $1443 = $1437 << 1 | $1437 >>> 31;
  var $1446 = $1440 << 7 | $1440 >>> 25;
  var $1448 = $1443 ^ $1429 ^ $1446;
  var $1451 = $1443 << 7 ^ $1432 ^ $1446;
  var $1460 = ($1448 << 5 | $1448 >>> 27) ^ HEAP32[$context$s2 + 100];
  var $1463 = $1443 ^ HEAP32[$context$s2 + 101];
  var $1466 = ($1451 << 22 | $1451 >>> 10) ^ HEAP32[$context$s2 + 102];
  var $1469 = $1446 ^ HEAP32[$context$s2 + 103];
  var $1470 = $1460 | $1469;
  var $1471 = $1466 ^ $1469;
  var $1474 = $1460 | $1463 ^ -1;
  var $1478 = $1471 ^ $1474;
  var $1479 = (($1466 ^ $1460) & $1469 | $1463) ^ $1471 & $1470;
  var $1482 = $1470 ^ $1469 & $1463 ^ $1478;
  var $1486 = ($1482 | $1479) & $1474 ^ $1466;
  var $1489 = $1486 << 13 | $1486 >>> 19;
  var $1492 = $1478 << 3 | $1478 >>> 29;
  var $1494 = $1482 ^ $1479 ^ $1492 ^ $1489;
  var $1498 = $1492 ^ ($1479 ^ -1) ^ $1489 << 3;
  var $1501 = $1494 << 1 | $1494 >>> 31;
  var $1504 = $1498 << 7 | $1498 >>> 25;
  var $1506 = $1501 ^ $1489 ^ $1504;
  var $1509 = $1501 << 7 ^ $1492 ^ $1504;
  var $1518 = ($1506 << 5 | $1506 >>> 27) ^ HEAP32[$context$s2 + 104];
  var $1521 = $1501 ^ HEAP32[$context$s2 + 105];
  var $1524 = ($1509 << 22 | $1509 >>> 10) ^ HEAP32[$context$s2 + 106];
  var $1527 = $1504 ^ HEAP32[$context$s2 + 107];
  var $1528 = $1524 | $1518;
  var $1529 = $1518 ^ $1521;
  var $1530 = $1528 ^ $1527;
  var $1531 = $1530 ^ $1529;
  var $1532 = $1531 ^ $1524;
  var $1536 = ($1532 | $1521) ^ $1530;
  var $1538 = ($1536 | $1529) ^ ($1532 ^ $1521) & $1528;
  var $1542 = ($1518 | $1527) ^ $1521 ^ $1536 ^ $1538;
  var $1545 = $1531 << 13 | $1531 >>> 19;
  var $1548 = $1542 << 3 | $1542 >>> 29;
  var $1550 = $1538 ^ $1545 ^ $1548;
  var $1554 = $1536 ^ ($1545 << 3 ^ -1) ^ $1548;
  var $1557 = $1550 << 1 | $1550 >>> 31;
  var $1560 = $1554 << 7 | $1554 >>> 25;
  var $1562 = $1560 ^ $1545 ^ $1557;
  var $1565 = $1560 ^ $1548 ^ $1557 << 7;
  var $1574 = ($1562 << 5 | $1562 >>> 27) ^ HEAP32[$context$s2 + 108];
  var $1577 = $1557 ^ HEAP32[$context$s2 + 109];
  var $1580 = ($1565 << 22 | $1565 >>> 10) ^ HEAP32[$context$s2 + 110];
  var $1583 = $1560 ^ HEAP32[$context$s2 + 111];
  var $1585 = $1574 | $1583;
  var $1587 = ($1574 ^ $1580) & $1585;
  var $1588 = $1574 & $1583 | $1577;
  var $1590 = $1587 ^ $1583;
  var $1591 = $1574 & $1577 | $1580;
  var $1594 = $1591 ^ $1577 ^ $1590;
  var $1599 = $1591 ^ $1585 ^ $1588 & $1583;
  var $1600 = ($1594 | $1583) & $1577 ^ ($1590 | $1574);
  var $1603 = $1600 << 13 | $1600 >>> 19;
  var $1606 = $1599 << 3 | $1599 >>> 29;
  var $1609 = $1588 ^ $1587 ^ $1606 ^ $1603;
  var $1612 = $1606 ^ $1594 ^ $1603 << 3;
  var $1615 = $1609 << 1 | $1609 >>> 31;
  var $1618 = $1612 << 7 | $1612 >>> 25;
  var $1620 = $1615 ^ $1603 ^ $1618;
  var $1623 = $1615 << 7 ^ $1606 ^ $1618;
  var $1632 = ($1620 << 5 | $1620 >>> 27) ^ HEAP32[$context$s2 + 112];
  var $1635 = $1615 ^ HEAP32[$context$s2 + 113];
  var $1638 = ($1623 << 22 | $1623 >>> 10) ^ HEAP32[$context$s2 + 114];
  var $1641 = $1618 ^ HEAP32[$context$s2 + 115];
  var $1644 = ($1638 | $1635) ^ $1632;
  var $1645 = $1641 ^ $1635;
  var $1646 = $1644 | $1641;
  var $1647 = ($1632 | $1635) & $1641;
  var $1648 = $1644 ^ $1647;
  var $1649 = $1648 & $1645;
  var $1651 = $1638 & $1635;
  var $1656 = $1649 ^ ($1644 | $1651);
  var $1659 = $1647 ^ ($1638 ^ -1) ^ $1646 & $1645;
  var $1662 = $1659 << 13 | $1659 >>> 19;
  var $1665 = $1656 << 3 | $1656 >>> 29;
  var $1668 = ($1649 ^ $1645 | $1651) ^ $1646 & $1632 ^ $1665 ^ $1662;
  var $1671 = $1665 ^ $1648 ^ $1662 << 3;
  var $1674 = $1668 << 1 | $1668 >>> 31;
  var $1677 = $1671 << 7 | $1671 >>> 25;
  var $1679 = $1677 ^ $1662 ^ $1674;
  var $1682 = $1677 ^ $1665 ^ $1674 << 7;
  var $1691 = ($1679 << 5 | $1679 >>> 27) ^ HEAP32[$context$s2 + 116];
  var $1694 = $1674 ^ HEAP32[$context$s2 + 117];
  var $1699 = $1677 ^ HEAP32[$context$s2 + 119];
  var $1700 = $1694 ^ $1699;
  var $1702 = $1691 & $1700;
  var $1705 = ($1694 | $1699) ^ HEAP32[$context$s2 + 118] ^ ($1682 << 22 | $1682 >>> 10) ^ $1702;
  var $1706 = $1705 ^ -1;
  var $1707 = $1691 ^ $1700;
  var $1708 = $1699 | $1706;
  var $1714 = ($1708 ^ $1699 | $1707) ^ ($1705 | $1694);
  var $1717 = $1706 << 13 | $1706 >>> 19;
  var $1720 = $1714 << 3 | $1714 >>> 29;
  var $1723 = $1708 ^ $1707 ^ $1717 ^ $1720;
  var $1728 = ($1707 | $1694) ^ $1700 ^ ($1702 | $1706) ^ $1717 << 3 ^ $1720;
  var $1731 = $1723 << 1 | $1723 >>> 31;
  var $1734 = $1728 << 7 | $1728 >>> 25;
  var $1736 = $1734 ^ $1717 ^ $1731;
  var $1739 = $1734 ^ $1720 ^ $1731 << 7;
  var $1748 = ($1736 << 5 | $1736 >>> 27) ^ HEAP32[$context$s2 + 120];
  var $1751 = $1731 ^ HEAP32[$context$s2 + 121];
  var $1754 = ($1739 << 22 | $1739 >>> 10) ^ HEAP32[$context$s2 + 122];
  var $1757 = $1734 ^ HEAP32[$context$s2 + 123];
  var $1759 = $1748 ^ $1757;
  var $1763 = $1754 ^ ($1751 ^ -1) ^ $1748 & $1757;
  var $1764 = $1759 & ($1754 | $1751);
  var $1770 = $1764 ^ (($1748 | $1754) ^ -1) ^ $1763 & $1751;
  var $1774 = $1748 ^ $1751 ^ $1763 & $1759 ^ $1770;
  var $1777 = $1774 << 13 | $1774 >>> 19;
  var $1780 = $1770 << 3 | $1770 >>> 29;
  var $1782 = $1780 ^ $1763 ^ $1777;
  var $1787 = $1754 ^ ($1751 | $1757) ^ $1764 ^ $1780 ^ $1777 << 3;
  var $1790 = $1782 << 1 | $1782 >>> 31;
  var $1793 = $1787 << 7 | $1787 >>> 25;
  var $1795 = $1790 ^ $1777 ^ $1793;
  var $1798 = $1790 << 7 ^ $1780 ^ $1793;
  var $1807 = ($1795 << 5 | $1795 >>> 27) ^ HEAP32[$context$s2 + 124];
  var $1810 = $1790 ^ HEAP32[$context$s2 + 125];
  var $1813 = ($1798 << 22 | $1798 >>> 10) ^ HEAP32[$context$s2 + 126];
  var $1816 = $1793 ^ HEAP32[$context$s2 + 127];
  var $1817 = $1813 & $1807;
  var $1818 = $1816 ^ -1;
  var $1820 = $1817 | $1810;
  var $1821 = $1807 & $1810;
  var $1823 = $1813 ^ $1807 & $1818 ^ $1820;
  var $1828 = ($1821 | $1816) ^ $1807 ^ ($1823 | $1813);
  var $1840 = $1828 ^ HEAP32[$context$s2 + 129];
  var $1844 = $1807 ^ HEAP32[$context$s2 + 130] ^ ($1828 ^ $1810 | $1823 & $1820);
  var $1847 = $1823 ^ HEAP32[$context$s2 + 131];
  HEAP32[$output >> 2] = $1821 ^ HEAP32[$context$s2 + 128] ^ $1813 ^ ($1828 ^ $1817 | $1818);
  HEAP32[$output + 4 >> 2] = $1840;
  HEAP32[$output + 8 >> 2] = $1844;
  HEAP32[$output + 12 >> 2] = $1847;
  return;
}
_serpent_encrypt_internal["X"] = 1;
function _serpent_test() {
  var $3$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 544 | 0;
  var $context = __stackBase__;
  var $scratch1 = __stackBase__ + 528;
  var $scratch1_sub = $scratch1 | 0;
  var $1 = $scratch1;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    var $3$s2 = ($i_0 * 68 + 412964 | 0) >> 2;
    var $4 = HEAP32[$3$s2];
    if (($4 | 0) == 0) {
      var $_0_ph = 0;
      label = 43;
      break;
    }
    _serpent_setkey_internal($context, $i_0 * 68 + 412968 | 0, $4);
    var $8 = $i_0 * 68 + 413e3 | 0;
    _serpent_encrypt_internal($context, $8, $scratch1_sub);
    var $10 = $i_0 * 68 + 413016 | 0;
    if ((_memcmp($1, $10, 16) | 0) != 0) {
      var $14 = HEAP32[$3$s2];
      if (($14 | 0) == 32) {
        label = 38;
        break;
      } else if (($14 | 0) == 16) {
        var $_0_ph = 472408;
        label = 43;
        break;
      } else if (($14 | 0) == 24) {
        var $_0 = 471004;
        break;
      }
    }
    _serpent_decrypt_internal($context, $10, $scratch1_sub);
    if ((_memcmp($1, $8, 16) | 0) != 0) {
      var $21 = HEAP32[$3$s2];
      if (($21 | 0) == 32) {
        label = 41;
        break;
      } else if (($21 | 0) == 16) {
        var $_0_ph = 467952;
        label = 43;
        break;
      } else if (($21 | 0) == 24) {
        var $_0 = 466232;
        break;
      }
    }
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 38) {
    var $_0 = 469696;
  } else if (label == 41) {
    var $_0 = 464752;
  } else if (label == 43) {
    var $_0_ph;
    var $_0 = $_0_ph;
  }
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _serpent_setkey_internal($context, $key, $key_length) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $1 = __stackBase__ | 0;
  _serpent_key_prepare($key, $key_length, $1);
  _serpent_subkeys_generate($1, $context | 0);
  __gcry_burn_stack(1088);
  STACKTOP = __stackBase__;
  return;
}
function _serpent_key_prepare($key, $key_length, $key_prepared) {
  var $1 = $key_length >>> 2;
  do {
    if (($1 | 0) == 0) {
      HEAP32[$key_prepared >> 2] = 1;
      var $i_0_lcssa710 = 0;
    } else {
      var $3 = $key;
      var $i_03 = 0;
      while (1) {
        var $i_03;
        HEAP32[$key_prepared + ($i_03 << 2) >> 2] = HEAP32[$3 + ($i_03 << 2) >> 2];
        var $8 = $i_03 + 1 | 0;
        if ($8 >>> 0 < $1 >>> 0) {
          var $i_03 = $8;
        } else {
          break;
        }
      }
      var $11 = $key_length >>> 2;
      if ($key_length >>> 0 >= 32) {
        return;
      }
      HEAP32[$key_prepared + ($11 << 2) >> 2] = 1;
      if (($11 + 1 | 0) >>> 0 < 8) {
        var $i_0_lcssa710 = $11;
        break;
      }
      return;
    }
  } while (0);
  var $i_0_lcssa710;
  _memset(($i_0_lcssa710 + 1 << 2) + $key_prepared | 0, 0, 28 - ($i_0_lcssa710 << 2) | 0);
  return;
}
function _serpent_subkeys_generate($key, $subkeys) {
  var $scevgep1112$s2;
  var $scevgep10$s2;
  var $1032$s2;
  var $1027$s2;
  var $992$s2;
  var $990$s2;
  var $959$s2;
  var $955$s2;
  var $953$s2;
  var $892$s2;
  var $754$s2;
  var $749$s2;
  var $714$s2;
  var $712$s2;
  var $681$s2;
  var $677$s2;
  var $675$s2;
  var $614$s2;
  var $476$s2;
  var $471$s2;
  var $436$s2;
  var $434$s2;
  var $403$s2;
  var $399$s2;
  var $397$s2;
  var $336$s2;
  var $198$s2;
  var $193$s2;
  var $158$s2;
  var $156$s2;
  var $125$s2;
  var $121$s2;
  var $119$s2;
  var $58$s2;
  var $k$s2;
  var $w_real15$s2;
  var $w_real$s2;
  var $key16$s2;
  var __stackBase__ = STACKTOP;
  var $key16$s2 = $key >> 2;
  var $w_real = STACKTOP, $w_real$s2 = $w_real >> 2;
  STACKTOP = STACKTOP + 560 | 0;
  var $w_real15$s2 = $w_real >> 2;
  var $k = STACKTOP, $k$s2 = $k >> 2;
  STACKTOP = STACKTOP + 528 | 0;
  HEAP32[$w_real15$s2] = HEAP32[$key16$s2];
  HEAP32[$w_real15$s2 + 1] = HEAP32[$key16$s2 + 1];
  HEAP32[$w_real15$s2 + 2] = HEAP32[$key16$s2 + 2];
  HEAP32[$w_real15$s2 + 3] = HEAP32[$key16$s2 + 3];
  HEAP32[$w_real15$s2 + 4] = HEAP32[$key16$s2 + 4];
  HEAP32[$w_real15$s2 + 5] = HEAP32[$key16$s2 + 5];
  HEAP32[$w_real15$s2 + 6] = HEAP32[$key16$s2 + 6];
  HEAP32[$w_real15$s2 + 7] = HEAP32[$key16$s2 + 7];
  var $0 = $w_real + 32 | 0;
  var $i_18 = 0;
  while (1) {
    var $i_18;
    var $14 = $i_18 ^ -1640531527 ^ HEAP32[($i_18 << 2 >> 2) + $w_real$s2] ^ HEAP32[($i_18 + 3 << 2 >> 2) + $w_real$s2] ^ HEAP32[($i_18 + 5 << 2 >> 2) + $w_real$s2] ^ HEAP32[($i_18 + 7 << 2 >> 2) + $w_real$s2];
    HEAP32[($i_18 + 8 << 2 >> 2) + $w_real$s2] = $14 << 11 | $14 >>> 21;
    var $19 = $i_18 + 1 | 0;
    if (($19 | 0) == 132) {
      break;
    } else {
      var $i_18 = $19;
    }
  }
  var $21 = HEAP32[$0 >> 2];
  var $23 = HEAP32[$w_real$s2 + 10];
  var $25 = $w_real + 44 | 0;
  var $26 = HEAP32[$25 >> 2];
  var $27 = $26 | $21;
  var $29 = $27 & ($23 ^ $21);
  var $30 = $w_real + 36 | 0;
  var $31 = HEAP32[$30 >> 2];
  var $32 = $31 | $26 & $21;
  var $34 = $29 ^ $26;
  var $35 = $31 & $21 | $23;
  var $38 = $35 ^ $31 ^ $34;
  HEAP32[$k$s2 + 3] = $38;
  var $43 = HEAP32[$0 >> 2] | $34;
  var $45 = ($38 | HEAP32[$25 >> 2]) & HEAP32[$30 >> 2];
  HEAP32[$k$s2 + 2] = $35 ^ $27 ^ $32 & $26;
  HEAP32[$k$s2] = $45 ^ $43;
  HEAP32[$k$s2 + 1] = $32 ^ $29;
  var $53 = $w_real + 48 | 0;
  var $54 = HEAP32[$53 >> 2];
  var $55 = $w_real + 56 | 0;
  var $57 = HEAP32[$55 >> 2] | $54;
  var $58$s2 = ($w_real + 52 | 0) >> 2;
  var $60 = HEAP32[$58$s2] ^ $54;
  var $61 = $w_real + 60 | 0;
  var $63 = HEAP32[$61 >> 2] ^ $57;
  var $64 = $63 ^ $60;
  HEAP32[$k$s2 + 4] = $64;
  var $67 = $64 ^ HEAP32[$55 >> 2];
  var $68 = HEAP32[$58$s2];
  var $72 = ($67 | $68) ^ $63;
  var $74 = ($72 | $60) ^ ($67 ^ $68) & $57;
  HEAP32[$k$s2 + 5] = $74;
  var $78 = HEAP32[$61 >> 2] | HEAP32[$53 >> 2];
  var $79 = HEAP32[$58$s2];
  HEAP32[$k$s2 + 7] = $72 ^ -1;
  HEAP32[$k$s2 + 6] = $79 ^ $78 ^ $72 ^ $74;
  var $87 = HEAP32[$w_real$s2 + 16];
  var $88 = $w_real + 76 | 0;
  var $89 = HEAP32[$88 >> 2];
  var $90 = $89 | $87;
  var $91 = $w_real + 72 | 0;
  var $92 = HEAP32[$91 >> 2];
  var $93 = $92 ^ $89;
  var $94 = $w_real + 68 | 0;
  var $95 = HEAP32[$94 >> 2];
  var $98 = $87 | $95 ^ -1;
  var $102 = $98 ^ $93;
  HEAP32[$k$s2 + 10] = $102;
  var $104 = (($92 ^ $87) & $89 | $95) ^ $93 & $90;
  var $107 = HEAP32[$88 >> 2] & HEAP32[$94 >> 2];
  HEAP32[$k$s2 + 11] = $104 ^ -1;
  var $111 = $102 ^ $90 ^ $107;
  HEAP32[$k$s2 + 9] = $111 ^ $104;
  HEAP32[$k$s2 + 8] = ($111 | $104) & $98 ^ HEAP32[$91 >> 2];
  var $119$s2 = ($w_real + 84 | 0) >> 2;
  var $120 = HEAP32[$119$s2];
  var $121$s2 = ($w_real + 88 | 0) >> 2;
  var $123 = $w_real + 80 | 0;
  var $124 = HEAP32[$123 >> 2];
  var $125$s2 = ($w_real + 92 | 0) >> 2;
  var $130 = HEAP32[$121$s2] ^ $120 ^ (HEAP32[$125$s2] | $124);
  HEAP32[$k$s2 + 15] = $130;
  var $132 = HEAP32[$121$s2];
  var $135 = HEAP32[$125$s2];
  var $136 = $135 ^ HEAP32[$123 >> 2];
  var $138 = HEAP32[$119$s2] | $132;
  var $140 = $138 & ($124 ^ $120);
  var $141 = $140 ^ $135 & ($130 | $132);
  HEAP32[$k$s2 + 14] = $141;
  var $144 = HEAP32[$121$s2];
  var $145 = HEAP32[$125$s2];
  var $147 = HEAP32[$119$s2] & $136;
  var $150 = $138 ^ ($136 ^ -1) ^ $141 & $140;
  HEAP32[$k$s2 + 12] = $150;
  HEAP32[$k$s2 + 13] = $145 ^ $144 ^ $147 ^ $150;
  var $156$s2 = ($w_real + 96 | 0) >> 2;
  var $157 = HEAP32[$156$s2];
  var $158$s2 = ($w_real + 104 | 0) >> 2;
  var $159 = HEAP32[$158$s2];
  var $160 = $159 & $157;
  var $161 = $w_real + 108 | 0;
  var $163 = HEAP32[$161 >> 2] ^ -1;
  var $165 = $w_real + 100 | 0;
  var $166 = HEAP32[$165 >> 2];
  var $167 = $166 | $160;
  var $168 = $166 & $157;
  var $170 = $157 & $163 ^ $159 ^ $167;
  HEAP32[$k$s2 + 19] = $170;
  var $179 = ($170 | HEAP32[$158$s2]) ^ (HEAP32[$161 >> 2] | $168) ^ HEAP32[$156$s2];
  HEAP32[$k$s2 + 17] = $179;
  var $185 = $179 ^ HEAP32[$165 >> 2] | $170 & $167;
  HEAP32[$k$s2 + 16] = HEAP32[$158$s2] ^ $168 ^ ($179 ^ $160 | $163);
  HEAP32[$k$s2 + 18] = $185 ^ HEAP32[$156$s2];
  var $193$s2 = ($w_real + 112 | 0) >> 2;
  var $194 = HEAP32[$193$s2];
  var $195 = $w_real + 124 | 0;
  var $196 = HEAP32[$195 >> 2];
  var $198$s2 = ($w_real + 116 | 0) >> 2;
  var $199 = HEAP32[$198$s2];
  var $200 = $w_real + 120 | 0;
  var $201 = HEAP32[$200 >> 2];
  var $202 = $196 ^ $194;
  var $206 = $199 ^ ($196 & $194 ^ -1) ^ $201;
  var $207 = $k + 84 | 0;
  HEAP32[$207 >> 2] = $206;
  var $208 = ($201 | $199) & $202;
  var $209 = HEAP32[$198$s2];
  var $212 = HEAP32[$200 >> 2];
  var $215 = HEAP32[$195 >> 2] | $209;
  var $219 = $k + 88 | 0;
  HEAP32[$219 >> 2] = $208 ^ ($209 & $206 ^ -1) ^ ($212 | HEAP32[$193$s2]);
  var $221 = HEAP32[$207 >> 2] & $202;
  HEAP32[$k$s2 + 23] = $212 ^ $208 ^ $215;
  HEAP32[$k$s2 + 20] = HEAP32[$193$s2] ^ $221 ^ HEAP32[$198$s2] ^ HEAP32[$219 >> 2];
  var $232 = $w_real + 132 | 0;
  var $233 = HEAP32[$232 >> 2];
  var $234 = $w_real + 140 | 0;
  var $235 = HEAP32[$234 >> 2];
  var $236 = $235 ^ $233;
  var $238 = $w_real + 128 | 0;
  var $240 = HEAP32[$238 >> 2] & $236;
  var $244 = $240 ^ ($235 | $233) ^ HEAP32[$w_real$s2 + 34];
  var $245 = $244 ^ -1;
  HEAP32[$k$s2 + 24] = $245;
  var $248 = HEAP32[$238 >> 2] ^ $236;
  var $249 = HEAP32[$234 >> 2];
  var $250 = $249 | $245;
  var $251 = HEAP32[$232 >> 2];
  HEAP32[$k$s2 + 26] = ($250 ^ $249 | $248) ^ ($251 | $244);
  HEAP32[$k$s2 + 25] = $250 ^ $248;
  HEAP32[$k$s2 + 27] = ($240 | $245) ^ $236 ^ ($251 | $248);
  var $264 = $w_real + 144 | 0;
  var $265 = HEAP32[$264 >> 2];
  var $266 = $w_real + 148 | 0;
  var $267 = HEAP32[$266 >> 2];
  var $269 = $w_real + 152 | 0;
  var $272 = (HEAP32[$269 >> 2] | $267) ^ $265;
  var $274 = HEAP32[$w_real$s2 + 39];
  var $275 = $274 ^ $267;
  var $276 = $272 | $274;
  var $277 = $274 & ($267 | $265);
  var $278 = $272 ^ $277;
  HEAP32[$k$s2 + 31] = $278;
  var $280 = $278 & $275;
  var $282 = HEAP32[$269 >> 2];
  var $284 = HEAP32[$266 >> 2] & $282;
  var $288 = HEAP32[$264 >> 2] & $276;
  HEAP32[$k$s2 + 30] = ($284 | $272) ^ $280;
  HEAP32[$k$s2 + 29] = ($280 ^ $275 | $284) ^ $288;
  HEAP32[$k$s2 + 28] = $282 ^ ($277 ^ -1) ^ $276 & $275;
  var $298 = $w_real + 160 | 0;
  var $299 = HEAP32[$298 >> 2];
  var $301 = HEAP32[$w_real$s2 + 42];
  var $303 = $w_real + 172 | 0;
  var $304 = HEAP32[$303 >> 2];
  var $305 = $304 | $299;
  var $307 = $305 & ($301 ^ $299);
  var $308 = $w_real + 164 | 0;
  var $309 = HEAP32[$308 >> 2];
  var $310 = $309 | $304 & $299;
  var $312 = $307 ^ $304;
  var $313 = $309 & $299 | $301;
  var $316 = $313 ^ $309 ^ $312;
  HEAP32[$k$s2 + 35] = $316;
  var $321 = HEAP32[$298 >> 2] | $312;
  var $323 = ($316 | HEAP32[$303 >> 2]) & HEAP32[$308 >> 2];
  HEAP32[$k$s2 + 34] = $313 ^ $305 ^ $310 & $304;
  HEAP32[$k$s2 + 32] = $323 ^ $321;
  HEAP32[$k$s2 + 33] = $310 ^ $307;
  var $331 = $w_real + 176 | 0;
  var $332 = HEAP32[$331 >> 2];
  var $333 = $w_real + 184 | 0;
  var $335 = HEAP32[$333 >> 2] | $332;
  var $336$s2 = ($w_real + 180 | 0) >> 2;
  var $338 = HEAP32[$336$s2] ^ $332;
  var $339 = $w_real + 188 | 0;
  var $341 = HEAP32[$339 >> 2] ^ $335;
  var $342 = $341 ^ $338;
  HEAP32[$k$s2 + 36] = $342;
  var $345 = $342 ^ HEAP32[$333 >> 2];
  var $346 = HEAP32[$336$s2];
  var $350 = ($345 | $346) ^ $341;
  var $352 = ($350 | $338) ^ ($345 ^ $346) & $335;
  HEAP32[$k$s2 + 37] = $352;
  var $356 = HEAP32[$339 >> 2] | HEAP32[$331 >> 2];
  var $357 = HEAP32[$336$s2];
  HEAP32[$k$s2 + 39] = $350 ^ -1;
  HEAP32[$k$s2 + 38] = $357 ^ $356 ^ $350 ^ $352;
  var $365 = HEAP32[$w_real$s2 + 48];
  var $366 = $w_real + 204 | 0;
  var $367 = HEAP32[$366 >> 2];
  var $368 = $367 | $365;
  var $369 = $w_real + 200 | 0;
  var $370 = HEAP32[$369 >> 2];
  var $371 = $370 ^ $367;
  var $372 = $w_real + 196 | 0;
  var $373 = HEAP32[$372 >> 2];
  var $376 = $365 | $373 ^ -1;
  var $380 = $376 ^ $371;
  HEAP32[$k$s2 + 42] = $380;
  var $382 = (($370 ^ $365) & $367 | $373) ^ $371 & $368;
  var $385 = HEAP32[$366 >> 2] & HEAP32[$372 >> 2];
  HEAP32[$k$s2 + 43] = $382 ^ -1;
  var $389 = $380 ^ $368 ^ $385;
  HEAP32[$k$s2 + 41] = $389 ^ $382;
  HEAP32[$k$s2 + 40] = ($389 | $382) & $376 ^ HEAP32[$369 >> 2];
  var $397$s2 = ($w_real + 212 | 0) >> 2;
  var $398 = HEAP32[$397$s2];
  var $399$s2 = ($w_real + 216 | 0) >> 2;
  var $401 = $w_real + 208 | 0;
  var $402 = HEAP32[$401 >> 2];
  var $403$s2 = ($w_real + 220 | 0) >> 2;
  var $408 = HEAP32[$399$s2] ^ $398 ^ (HEAP32[$403$s2] | $402);
  HEAP32[$k$s2 + 47] = $408;
  var $410 = HEAP32[$399$s2];
  var $413 = HEAP32[$403$s2];
  var $414 = $413 ^ HEAP32[$401 >> 2];
  var $416 = HEAP32[$397$s2] | $410;
  var $418 = $416 & ($402 ^ $398);
  var $419 = $418 ^ $413 & ($408 | $410);
  HEAP32[$k$s2 + 46] = $419;
  var $422 = HEAP32[$399$s2];
  var $423 = HEAP32[$403$s2];
  var $425 = HEAP32[$397$s2] & $414;
  var $428 = $416 ^ ($414 ^ -1) ^ $419 & $418;
  HEAP32[$k$s2 + 44] = $428;
  HEAP32[$k$s2 + 45] = $423 ^ $422 ^ $425 ^ $428;
  var $434$s2 = ($w_real + 224 | 0) >> 2;
  var $435 = HEAP32[$434$s2];
  var $436$s2 = ($w_real + 232 | 0) >> 2;
  var $437 = HEAP32[$436$s2];
  var $438 = $437 & $435;
  var $439 = $w_real + 236 | 0;
  var $441 = HEAP32[$439 >> 2] ^ -1;
  var $443 = $w_real + 228 | 0;
  var $444 = HEAP32[$443 >> 2];
  var $445 = $444 | $438;
  var $446 = $444 & $435;
  var $448 = $435 & $441 ^ $437 ^ $445;
  HEAP32[$k$s2 + 51] = $448;
  var $457 = ($448 | HEAP32[$436$s2]) ^ (HEAP32[$439 >> 2] | $446) ^ HEAP32[$434$s2];
  HEAP32[$k$s2 + 49] = $457;
  var $463 = $457 ^ HEAP32[$443 >> 2] | $448 & $445;
  HEAP32[$k$s2 + 48] = HEAP32[$436$s2] ^ $446 ^ ($457 ^ $438 | $441);
  HEAP32[$k$s2 + 50] = $463 ^ HEAP32[$434$s2];
  var $471$s2 = ($w_real + 240 | 0) >> 2;
  var $472 = HEAP32[$471$s2];
  var $473 = $w_real + 252 | 0;
  var $474 = HEAP32[$473 >> 2];
  var $476$s2 = ($w_real + 244 | 0) >> 2;
  var $477 = HEAP32[$476$s2];
  var $478 = $w_real + 248 | 0;
  var $479 = HEAP32[$478 >> 2];
  var $480 = $474 ^ $472;
  var $484 = $477 ^ ($474 & $472 ^ -1) ^ $479;
  var $485 = $k + 212 | 0;
  HEAP32[$485 >> 2] = $484;
  var $486 = ($479 | $477) & $480;
  var $487 = HEAP32[$476$s2];
  var $490 = HEAP32[$478 >> 2];
  var $493 = HEAP32[$473 >> 2] | $487;
  var $497 = $k + 216 | 0;
  HEAP32[$497 >> 2] = $486 ^ ($487 & $484 ^ -1) ^ ($490 | HEAP32[$471$s2]);
  var $499 = HEAP32[$485 >> 2] & $480;
  HEAP32[$k$s2 + 55] = $490 ^ $486 ^ $493;
  HEAP32[$k$s2 + 52] = HEAP32[$471$s2] ^ $499 ^ HEAP32[$476$s2] ^ HEAP32[$497 >> 2];
  var $510 = $w_real + 260 | 0;
  var $511 = HEAP32[$510 >> 2];
  var $512 = $w_real + 268 | 0;
  var $513 = HEAP32[$512 >> 2];
  var $514 = $513 ^ $511;
  var $516 = $w_real + 256 | 0;
  var $518 = HEAP32[$516 >> 2] & $514;
  var $522 = $518 ^ ($513 | $511) ^ HEAP32[$w_real$s2 + 66];
  var $523 = $522 ^ -1;
  HEAP32[$k$s2 + 56] = $523;
  var $526 = HEAP32[$516 >> 2] ^ $514;
  var $527 = HEAP32[$512 >> 2];
  var $528 = $527 | $523;
  var $529 = HEAP32[$510 >> 2];
  HEAP32[$k$s2 + 58] = ($528 ^ $527 | $526) ^ ($529 | $522);
  HEAP32[$k$s2 + 57] = $528 ^ $526;
  HEAP32[$k$s2 + 59] = ($518 | $523) ^ $514 ^ ($529 | $526);
  var $542 = $w_real + 272 | 0;
  var $543 = HEAP32[$542 >> 2];
  var $544 = $w_real + 276 | 0;
  var $545 = HEAP32[$544 >> 2];
  var $547 = $w_real + 280 | 0;
  var $550 = (HEAP32[$547 >> 2] | $545) ^ $543;
  var $552 = HEAP32[$w_real$s2 + 71];
  var $553 = $552 ^ $545;
  var $554 = $550 | $552;
  var $555 = $552 & ($545 | $543);
  var $556 = $550 ^ $555;
  HEAP32[$k$s2 + 63] = $556;
  var $558 = $556 & $553;
  var $560 = HEAP32[$547 >> 2];
  var $562 = HEAP32[$544 >> 2] & $560;
  var $566 = HEAP32[$542 >> 2] & $554;
  HEAP32[$k$s2 + 62] = ($562 | $550) ^ $558;
  HEAP32[$k$s2 + 61] = ($558 ^ $553 | $562) ^ $566;
  HEAP32[$k$s2 + 60] = $560 ^ ($555 ^ -1) ^ $554 & $553;
  var $576 = $w_real + 288 | 0;
  var $577 = HEAP32[$576 >> 2];
  var $579 = HEAP32[$w_real$s2 + 74];
  var $581 = $w_real + 300 | 0;
  var $582 = HEAP32[$581 >> 2];
  var $583 = $582 | $577;
  var $585 = $583 & ($579 ^ $577);
  var $586 = $w_real + 292 | 0;
  var $587 = HEAP32[$586 >> 2];
  var $588 = $587 | $582 & $577;
  var $590 = $585 ^ $582;
  var $591 = $587 & $577 | $579;
  var $594 = $591 ^ $587 ^ $590;
  HEAP32[$k$s2 + 67] = $594;
  var $599 = HEAP32[$576 >> 2] | $590;
  var $601 = ($594 | HEAP32[$581 >> 2]) & HEAP32[$586 >> 2];
  HEAP32[$k$s2 + 66] = $591 ^ $583 ^ $588 & $582;
  HEAP32[$k$s2 + 64] = $601 ^ $599;
  HEAP32[$k$s2 + 65] = $588 ^ $585;
  var $609 = $w_real + 304 | 0;
  var $610 = HEAP32[$609 >> 2];
  var $611 = $w_real + 312 | 0;
  var $613 = HEAP32[$611 >> 2] | $610;
  var $614$s2 = ($w_real + 308 | 0) >> 2;
  var $616 = HEAP32[$614$s2] ^ $610;
  var $617 = $w_real + 316 | 0;
  var $619 = HEAP32[$617 >> 2] ^ $613;
  var $620 = $619 ^ $616;
  HEAP32[$k$s2 + 68] = $620;
  var $623 = $620 ^ HEAP32[$611 >> 2];
  var $624 = HEAP32[$614$s2];
  var $628 = ($623 | $624) ^ $619;
  var $630 = ($628 | $616) ^ ($623 ^ $624) & $613;
  HEAP32[$k$s2 + 69] = $630;
  var $634 = HEAP32[$617 >> 2] | HEAP32[$609 >> 2];
  var $635 = HEAP32[$614$s2];
  HEAP32[$k$s2 + 71] = $628 ^ -1;
  HEAP32[$k$s2 + 70] = $635 ^ $634 ^ $628 ^ $630;
  var $643 = HEAP32[$w_real$s2 + 80];
  var $644 = $w_real + 332 | 0;
  var $645 = HEAP32[$644 >> 2];
  var $646 = $645 | $643;
  var $647 = $w_real + 328 | 0;
  var $648 = HEAP32[$647 >> 2];
  var $649 = $648 ^ $645;
  var $650 = $w_real + 324 | 0;
  var $651 = HEAP32[$650 >> 2];
  var $654 = $643 | $651 ^ -1;
  var $658 = $654 ^ $649;
  HEAP32[$k$s2 + 74] = $658;
  var $660 = (($648 ^ $643) & $645 | $651) ^ $649 & $646;
  var $663 = HEAP32[$644 >> 2] & HEAP32[$650 >> 2];
  HEAP32[$k$s2 + 75] = $660 ^ -1;
  var $667 = $658 ^ $646 ^ $663;
  HEAP32[$k$s2 + 73] = $667 ^ $660;
  HEAP32[$k$s2 + 72] = ($667 | $660) & $654 ^ HEAP32[$647 >> 2];
  var $675$s2 = ($w_real + 340 | 0) >> 2;
  var $676 = HEAP32[$675$s2];
  var $677$s2 = ($w_real + 344 | 0) >> 2;
  var $679 = $w_real + 336 | 0;
  var $680 = HEAP32[$679 >> 2];
  var $681$s2 = ($w_real + 348 | 0) >> 2;
  var $686 = HEAP32[$677$s2] ^ $676 ^ (HEAP32[$681$s2] | $680);
  HEAP32[$k$s2 + 79] = $686;
  var $688 = HEAP32[$677$s2];
  var $691 = HEAP32[$681$s2];
  var $692 = $691 ^ HEAP32[$679 >> 2];
  var $694 = HEAP32[$675$s2] | $688;
  var $696 = $694 & ($680 ^ $676);
  var $697 = $696 ^ $691 & ($686 | $688);
  HEAP32[$k$s2 + 78] = $697;
  var $700 = HEAP32[$677$s2];
  var $701 = HEAP32[$681$s2];
  var $703 = HEAP32[$675$s2] & $692;
  var $706 = $694 ^ ($692 ^ -1) ^ $697 & $696;
  HEAP32[$k$s2 + 76] = $706;
  HEAP32[$k$s2 + 77] = $701 ^ $700 ^ $703 ^ $706;
  var $712$s2 = ($w_real + 352 | 0) >> 2;
  var $713 = HEAP32[$712$s2];
  var $714$s2 = ($w_real + 360 | 0) >> 2;
  var $715 = HEAP32[$714$s2];
  var $716 = $715 & $713;
  var $717 = $w_real + 364 | 0;
  var $719 = HEAP32[$717 >> 2] ^ -1;
  var $721 = $w_real + 356 | 0;
  var $722 = HEAP32[$721 >> 2];
  var $723 = $722 | $716;
  var $724 = $722 & $713;
  var $726 = $713 & $719 ^ $715 ^ $723;
  HEAP32[$k$s2 + 83] = $726;
  var $735 = ($726 | HEAP32[$714$s2]) ^ (HEAP32[$717 >> 2] | $724) ^ HEAP32[$712$s2];
  HEAP32[$k$s2 + 81] = $735;
  var $741 = $735 ^ HEAP32[$721 >> 2] | $726 & $723;
  HEAP32[$k$s2 + 80] = HEAP32[$714$s2] ^ $724 ^ ($735 ^ $716 | $719);
  HEAP32[$k$s2 + 82] = $741 ^ HEAP32[$712$s2];
  var $749$s2 = ($w_real + 368 | 0) >> 2;
  var $750 = HEAP32[$749$s2];
  var $751 = $w_real + 380 | 0;
  var $752 = HEAP32[$751 >> 2];
  var $754$s2 = ($w_real + 372 | 0) >> 2;
  var $755 = HEAP32[$754$s2];
  var $756 = $w_real + 376 | 0;
  var $757 = HEAP32[$756 >> 2];
  var $758 = $752 ^ $750;
  var $762 = $755 ^ ($752 & $750 ^ -1) ^ $757;
  var $763 = $k + 340 | 0;
  HEAP32[$763 >> 2] = $762;
  var $764 = ($757 | $755) & $758;
  var $765 = HEAP32[$754$s2];
  var $768 = HEAP32[$756 >> 2];
  var $771 = HEAP32[$751 >> 2] | $765;
  var $775 = $k + 344 | 0;
  HEAP32[$775 >> 2] = $764 ^ ($765 & $762 ^ -1) ^ ($768 | HEAP32[$749$s2]);
  var $777 = HEAP32[$763 >> 2] & $758;
  HEAP32[$k$s2 + 87] = $768 ^ $764 ^ $771;
  HEAP32[$k$s2 + 84] = HEAP32[$749$s2] ^ $777 ^ HEAP32[$754$s2] ^ HEAP32[$775 >> 2];
  var $788 = $w_real + 388 | 0;
  var $789 = HEAP32[$788 >> 2];
  var $790 = $w_real + 396 | 0;
  var $791 = HEAP32[$790 >> 2];
  var $792 = $791 ^ $789;
  var $794 = $w_real + 384 | 0;
  var $796 = HEAP32[$794 >> 2] & $792;
  var $800 = $796 ^ ($791 | $789) ^ HEAP32[$w_real$s2 + 98];
  var $801 = $800 ^ -1;
  HEAP32[$k$s2 + 88] = $801;
  var $804 = HEAP32[$794 >> 2] ^ $792;
  var $805 = HEAP32[$790 >> 2];
  var $806 = $805 | $801;
  var $807 = HEAP32[$788 >> 2];
  HEAP32[$k$s2 + 90] = ($806 ^ $805 | $804) ^ ($807 | $800);
  HEAP32[$k$s2 + 89] = $806 ^ $804;
  HEAP32[$k$s2 + 91] = ($796 | $801) ^ $792 ^ ($807 | $804);
  var $820 = $w_real + 400 | 0;
  var $821 = HEAP32[$820 >> 2];
  var $822 = $w_real + 404 | 0;
  var $823 = HEAP32[$822 >> 2];
  var $825 = $w_real + 408 | 0;
  var $828 = (HEAP32[$825 >> 2] | $823) ^ $821;
  var $830 = HEAP32[$w_real$s2 + 103];
  var $831 = $830 ^ $823;
  var $832 = $828 | $830;
  var $833 = $830 & ($823 | $821);
  var $834 = $828 ^ $833;
  HEAP32[$k$s2 + 95] = $834;
  var $836 = $834 & $831;
  var $838 = HEAP32[$825 >> 2];
  var $840 = HEAP32[$822 >> 2] & $838;
  var $844 = HEAP32[$820 >> 2] & $832;
  HEAP32[$k$s2 + 94] = ($840 | $828) ^ $836;
  HEAP32[$k$s2 + 93] = ($836 ^ $831 | $840) ^ $844;
  HEAP32[$k$s2 + 92] = $838 ^ ($833 ^ -1) ^ $832 & $831;
  var $854 = $w_real + 416 | 0;
  var $855 = HEAP32[$854 >> 2];
  var $857 = HEAP32[$w_real$s2 + 106];
  var $859 = $w_real + 428 | 0;
  var $860 = HEAP32[$859 >> 2];
  var $861 = $860 | $855;
  var $863 = $861 & ($857 ^ $855);
  var $864 = $w_real + 420 | 0;
  var $865 = HEAP32[$864 >> 2];
  var $866 = $865 | $860 & $855;
  var $868 = $863 ^ $860;
  var $869 = $865 & $855 | $857;
  var $872 = $869 ^ $865 ^ $868;
  HEAP32[$k$s2 + 99] = $872;
  var $877 = HEAP32[$854 >> 2] | $868;
  var $879 = ($872 | HEAP32[$859 >> 2]) & HEAP32[$864 >> 2];
  HEAP32[$k$s2 + 98] = $869 ^ $861 ^ $866 & $860;
  HEAP32[$k$s2 + 96] = $879 ^ $877;
  HEAP32[$k$s2 + 97] = $866 ^ $863;
  var $887 = $w_real + 432 | 0;
  var $888 = HEAP32[$887 >> 2];
  var $889 = $w_real + 440 | 0;
  var $891 = HEAP32[$889 >> 2] | $888;
  var $892$s2 = ($w_real + 436 | 0) >> 2;
  var $894 = HEAP32[$892$s2] ^ $888;
  var $895 = $w_real + 444 | 0;
  var $897 = HEAP32[$895 >> 2] ^ $891;
  var $898 = $897 ^ $894;
  HEAP32[$k$s2 + 100] = $898;
  var $901 = $898 ^ HEAP32[$889 >> 2];
  var $902 = HEAP32[$892$s2];
  var $906 = ($901 | $902) ^ $897;
  var $908 = ($906 | $894) ^ ($901 ^ $902) & $891;
  HEAP32[$k$s2 + 101] = $908;
  var $912 = HEAP32[$895 >> 2] | HEAP32[$887 >> 2];
  var $913 = HEAP32[$892$s2];
  HEAP32[$k$s2 + 103] = $906 ^ -1;
  HEAP32[$k$s2 + 102] = $913 ^ $912 ^ $906 ^ $908;
  var $921 = HEAP32[$w_real$s2 + 112];
  var $922 = $w_real + 460 | 0;
  var $923 = HEAP32[$922 >> 2];
  var $924 = $923 | $921;
  var $925 = $w_real + 456 | 0;
  var $926 = HEAP32[$925 >> 2];
  var $927 = $926 ^ $923;
  var $928 = $w_real + 452 | 0;
  var $929 = HEAP32[$928 >> 2];
  var $932 = $921 | $929 ^ -1;
  var $936 = $932 ^ $927;
  HEAP32[$k$s2 + 106] = $936;
  var $938 = (($926 ^ $921) & $923 | $929) ^ $927 & $924;
  var $941 = HEAP32[$922 >> 2] & HEAP32[$928 >> 2];
  HEAP32[$k$s2 + 107] = $938 ^ -1;
  var $945 = $936 ^ $924 ^ $941;
  HEAP32[$k$s2 + 105] = $945 ^ $938;
  HEAP32[$k$s2 + 104] = ($945 | $938) & $932 ^ HEAP32[$925 >> 2];
  var $953$s2 = ($w_real + 468 | 0) >> 2;
  var $954 = HEAP32[$953$s2];
  var $955$s2 = ($w_real + 472 | 0) >> 2;
  var $957 = $w_real + 464 | 0;
  var $958 = HEAP32[$957 >> 2];
  var $959$s2 = ($w_real + 476 | 0) >> 2;
  var $964 = HEAP32[$955$s2] ^ $954 ^ (HEAP32[$959$s2] | $958);
  HEAP32[$k$s2 + 111] = $964;
  var $966 = HEAP32[$955$s2];
  var $969 = HEAP32[$959$s2];
  var $970 = $969 ^ HEAP32[$957 >> 2];
  var $972 = HEAP32[$953$s2] | $966;
  var $974 = $972 & ($958 ^ $954);
  var $975 = $974 ^ $969 & ($964 | $966);
  HEAP32[$k$s2 + 110] = $975;
  var $978 = HEAP32[$955$s2];
  var $979 = HEAP32[$959$s2];
  var $981 = HEAP32[$953$s2] & $970;
  var $984 = $972 ^ ($970 ^ -1) ^ $975 & $974;
  HEAP32[$k$s2 + 108] = $984;
  HEAP32[$k$s2 + 109] = $979 ^ $978 ^ $981 ^ $984;
  var $990$s2 = ($w_real + 480 | 0) >> 2;
  var $991 = HEAP32[$990$s2];
  var $992$s2 = ($w_real + 488 | 0) >> 2;
  var $993 = HEAP32[$992$s2];
  var $994 = $993 & $991;
  var $995 = $w_real + 492 | 0;
  var $997 = HEAP32[$995 >> 2] ^ -1;
  var $999 = $w_real + 484 | 0;
  var $1000 = HEAP32[$999 >> 2];
  var $1001 = $1000 | $994;
  var $1002 = $1000 & $991;
  var $1004 = $991 & $997 ^ $993 ^ $1001;
  HEAP32[$k$s2 + 115] = $1004;
  var $1013 = ($1004 | HEAP32[$992$s2]) ^ (HEAP32[$995 >> 2] | $1002) ^ HEAP32[$990$s2];
  HEAP32[$k$s2 + 113] = $1013;
  var $1019 = $1013 ^ HEAP32[$999 >> 2] | $1004 & $1001;
  HEAP32[$k$s2 + 112] = HEAP32[$992$s2] ^ $1002 ^ ($1013 ^ $994 | $997);
  HEAP32[$k$s2 + 114] = $1019 ^ HEAP32[$990$s2];
  var $1027$s2 = ($w_real + 496 | 0) >> 2;
  var $1028 = HEAP32[$1027$s2];
  var $1029 = $w_real + 508 | 0;
  var $1030 = HEAP32[$1029 >> 2];
  var $1032$s2 = ($w_real + 500 | 0) >> 2;
  var $1033 = HEAP32[$1032$s2];
  var $1034 = $w_real + 504 | 0;
  var $1035 = HEAP32[$1034 >> 2];
  var $1036 = $1030 ^ $1028;
  var $1040 = $1033 ^ ($1030 & $1028 ^ -1) ^ $1035;
  var $1041 = $k + 468 | 0;
  HEAP32[$1041 >> 2] = $1040;
  var $1042 = ($1035 | $1033) & $1036;
  var $1043 = HEAP32[$1032$s2];
  var $1046 = HEAP32[$1034 >> 2];
  var $1049 = HEAP32[$1029 >> 2] | $1043;
  var $1053 = $k + 472 | 0;
  HEAP32[$1053 >> 2] = $1042 ^ ($1043 & $1040 ^ -1) ^ ($1046 | HEAP32[$1027$s2]);
  var $1055 = HEAP32[$1041 >> 2] & $1036;
  HEAP32[$k$s2 + 119] = $1046 ^ $1042 ^ $1049;
  HEAP32[$k$s2 + 116] = HEAP32[$1027$s2] ^ $1055 ^ HEAP32[$1032$s2] ^ HEAP32[$1053 >> 2];
  var $1066 = $w_real + 516 | 0;
  var $1067 = HEAP32[$1066 >> 2];
  var $1068 = $w_real + 524 | 0;
  var $1069 = HEAP32[$1068 >> 2];
  var $1070 = $1069 ^ $1067;
  var $1072 = $w_real + 512 | 0;
  var $1074 = HEAP32[$1072 >> 2] & $1070;
  var $1078 = $1074 ^ ($1069 | $1067) ^ HEAP32[$w_real$s2 + 130];
  var $1079 = $1078 ^ -1;
  HEAP32[$k$s2 + 120] = $1079;
  var $1082 = HEAP32[$1072 >> 2] ^ $1070;
  var $1083 = HEAP32[$1068 >> 2];
  var $1084 = $1083 | $1079;
  var $1085 = HEAP32[$1066 >> 2];
  HEAP32[$k$s2 + 122] = ($1084 ^ $1083 | $1082) ^ ($1085 | $1078);
  HEAP32[$k$s2 + 121] = $1084 ^ $1082;
  HEAP32[$k$s2 + 123] = ($1074 | $1079) ^ $1070 ^ ($1085 | $1082);
  var $1098 = $w_real + 528 | 0;
  var $1099 = HEAP32[$1098 >> 2];
  var $1100 = $w_real + 532 | 0;
  var $1101 = HEAP32[$1100 >> 2];
  var $1103 = $w_real + 536 | 0;
  var $1106 = (HEAP32[$1103 >> 2] | $1101) ^ $1099;
  var $1108 = HEAP32[$w_real$s2 + 135];
  var $1109 = $1108 ^ $1101;
  var $1110 = $1106 | $1108;
  var $1111 = $1108 & ($1101 | $1099);
  var $1112 = $1106 ^ $1111;
  HEAP32[$k$s2 + 127] = $1112;
  var $1114 = $1112 & $1109;
  var $1116 = HEAP32[$1103 >> 2];
  var $1118 = HEAP32[$1100 >> 2] & $1116;
  var $1122 = HEAP32[$1098 >> 2] & $1110;
  HEAP32[$k$s2 + 126] = ($1118 | $1106) ^ $1114;
  HEAP32[$k$s2 + 125] = ($1114 ^ $1109 | $1118) ^ $1122;
  HEAP32[$k$s2 + 124] = $1116 ^ ($1111 ^ -1) ^ $1110 & $1109;
  var $1132 = $w_real + 544 | 0;
  var $1133 = HEAP32[$1132 >> 2];
  var $1135 = HEAP32[$w_real$s2 + 138];
  var $1137 = $w_real + 556 | 0;
  var $1138 = HEAP32[$1137 >> 2];
  var $1139 = $1138 | $1133;
  var $1141 = $1139 & ($1135 ^ $1133);
  var $1142 = $w_real + 548 | 0;
  var $1143 = HEAP32[$1142 >> 2];
  var $1144 = $1143 | $1138 & $1133;
  var $1146 = $1141 ^ $1138;
  var $1147 = $1143 & $1133 | $1135;
  var $1150 = $1147 ^ $1143 ^ $1146;
  HEAP32[$k$s2 + 131] = $1150;
  var $1155 = HEAP32[$1132 >> 2] | $1146;
  var $1157 = ($1150 | HEAP32[$1137 >> 2]) & HEAP32[$1142 >> 2];
  HEAP32[$k$s2 + 130] = $1147 ^ $1139 ^ $1144 & $1138;
  HEAP32[$k$s2 + 128] = $1157 ^ $1155;
  HEAP32[$k$s2 + 129] = $1144 ^ $1141;
  var $i_26 = 0;
  while (1) {
    var $i_26;
    var $scevgep10$s2 = (($i_26 << 4) + $subkeys | 0) >> 2;
    var $scevgep1112$s2 = (($i_26 << 4) + $k | 0) >> 2;
    HEAP32[$scevgep10$s2] = HEAP32[$scevgep1112$s2];
    HEAP32[$scevgep10$s2 + 1] = HEAP32[$scevgep1112$s2 + 1];
    HEAP32[$scevgep10$s2 + 2] = HEAP32[$scevgep1112$s2 + 2];
    HEAP32[$scevgep10$s2 + 3] = HEAP32[$scevgep1112$s2 + 3];
    var $1167 = $i_26 + 1 | 0;
    if (($1167 | 0) == 33) {
      break;
    } else {
      var $i_26 = $1167;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
_serpent_subkeys_generate["X"] = 1;
function _sha1_init($context) {
  var $context$s2 = $context >> 2;
  HEAP32[$context$s2] = 1732584193;
  HEAP32[$context$s2 + 1] = -271733879;
  HEAP32[$context$s2 + 2] = -1732584194;
  HEAP32[$context$s2 + 3] = 271733878;
  HEAP32[$context$s2 + 4] = -1009589776;
  HEAP32[$context$s2 + 5] = 0;
  HEAP32[$context$s2 + 22] = 0;
  return;
}
function _sha1_read($context) {
  return $context + 24 | 0;
}
function __gcry_sha1_hash_buffer($outbuf, $buffer, $length) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  var $hd = __stackBase__;
  var $1 = $hd;
  _sha1_init($1);
  _sha1_write($1, $buffer, $length);
  _sha1_final($1);
  _memcpy($outbuf, $hd + 24 | 0, 20);
  STACKTOP = __stackBase__;
  return;
}
function _sha1_write($context, $inbuf_arg, $inlen) {
  var $3$s2;
  var label = 0;
  var $1 = $context;
  var $3$s2 = ($context + 88 | 0) >> 2;
  var $4 = $context + 24 | 0;
  var $6 = $context + 20 | 0;
  var $inlen_tr = $inlen;
  var $inbuf_arg_tr = $inbuf_arg;
  L79 : while (1) {
    var $inbuf_arg_tr;
    var $inlen_tr;
    if ((HEAP32[$3$s2] | 0) == 64) {
      _transform908($1, $4, 1);
      __gcry_burn_stack(104);
      HEAP32[$3$s2] = 0;
      HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1 | 0;
    }
    if (($inbuf_arg_tr | 0) == 0) {
      label = 81;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1 = $inbuf_arg_tr;
      var $_1 = $inlen_tr;
      break;
    } else {
      var $inbuf_0 = $inbuf_arg_tr;
      var $_0 = $inlen_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $inlen_tr = 0;
        var $inbuf_arg_tr = 0;
        continue L79;
      }
      var $19 = HEAP32[$3$s2];
      if (($19 | 0) >= 64) {
        label = 73;
        break L79;
      }
      var $23 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $19 + 1 | 0;
      HEAP8[$19 + ($context + 24) | 0] = $23;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 73) {
    _sha1_write($context, 0, 0);
    var $inbuf_1 = $inbuf_0;
    var $_1 = $_0;
  } else if (label == 81) {
    return;
  }
  var $_1;
  var $inbuf_1;
  var $27 = $_1 >>> 6;
  if (($27 | 0) == 0) {
    var $inbuf_2 = $inbuf_1;
    var $_2 = $_1;
  } else {
    _transform908($1, $inbuf_1, $27);
    HEAP32[$3$s2] = 0;
    var $31 = $context + 20 | 0;
    HEAP32[$31 >> 2] = HEAP32[$31 >> 2] + $27 | 0;
    var $34 = $_1 & -64;
    var $inbuf_2 = $inbuf_1 + $34 | 0;
    var $_2 = $_1 - $34 | 0;
  }
  var $_2;
  var $inbuf_2;
  __gcry_burn_stack(104);
  var $inbuf_3 = $inbuf_2;
  var $_3 = $_2;
  while (1) {
    var $_3;
    var $inbuf_3;
    if (($_3 | 0) == 0) {
      label = 82;
      break;
    }
    var $41 = HEAP32[$3$s2];
    if (($41 | 0) >= 64) {
      label = 83;
      break;
    }
    var $45 = HEAP8[$inbuf_3];
    HEAP32[$3$s2] = $41 + 1 | 0;
    HEAP8[$41 + ($context + 24) | 0] = $45;
    var $inbuf_3 = $inbuf_3 + 1 | 0;
    var $_3 = $_3 - 1 | 0;
  }
  if (label == 82) {
    return;
  } else if (label == 83) {
    return;
  }
}
_sha1_write["X"] = 1;
function _sha1_final($context) {
  var $124$s2;
  var $107$s2;
  var $90$s2;
  var $73$s2;
  var $56$s2;
  var $8$s2;
  var $1 = $context;
  _sha1_write($context, 0, 0);
  var $4 = HEAP32[$context + 20 >> 2];
  var $8$s2 = ($context + 88 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10 = _llvm_uadd_with_overflow_i32($4 << 6, $9);
  var $msb_0 = (tempRet0 & 1) + ($4 >>> 26) | 0;
  var $13 = $10 << 3;
  var $16 = $msb_0 << 3 | $10 >>> 29;
  HEAP32[$8$s2] = $9 + 1 | 0;
  var $19 = $context + 24 | 0;
  HEAP8[$9 + ($context + 24) | 0] = -128;
  var $21 = HEAP32[$8$s2];
  L104 : do {
    if (($9 | 0) < 56) {
      if (($21 | 0) < 56) {
        var $24 = $21;
      } else {
        break;
      }
      while (1) {
        var $24;
        HEAP32[$8$s2] = $24 + 1 | 0;
        HEAP8[$24 + ($context + 24) | 0] = 0;
        var $27 = HEAP32[$8$s2];
        if (($27 | 0) < 56) {
          var $24 = $27;
        } else {
          break L104;
        }
      }
    } else {
      L106 : do {
        if (($21 | 0) < 64) {
          var $29 = $21;
          while (1) {
            var $29;
            HEAP32[$8$s2] = $29 + 1 | 0;
            HEAP8[$29 + ($context + 24) | 0] = 0;
            var $32 = HEAP32[$8$s2];
            if (($32 | 0) < 64) {
              var $29 = $32;
            } else {
              break L106;
            }
          }
        }
      } while (0);
      _sha1_write($context, 0, 0);
      _memset($19, 0, 56);
    }
  } while (0);
  HEAP8[$context + 80 | 0] = $msb_0 >>> 21 & 255;
  HEAP8[$context + 81 | 0] = $msb_0 >>> 13 & 255;
  HEAP8[$context + 82 | 0] = $msb_0 >>> 5 & 255;
  HEAP8[$context + 83 | 0] = $16 & 255;
  HEAP8[$context + 84 | 0] = $10 >>> 21 & 255;
  HEAP8[$context + 85 | 0] = $10 >>> 13 & 255;
  HEAP8[$context + 86 | 0] = $10 >>> 5 & 255;
  HEAP8[$context + 87 | 0] = $13 & 255;
  _transform908($1, $19, 1);
  __gcry_burn_stack(104);
  var $56$s2 = $context >> 2;
  HEAP8[$19] = HEAP32[$56$s2] >>> 24 & 255;
  HEAP8[$context + 25 | 0] = HEAP32[$56$s2] >>> 16 & 255;
  HEAP8[$context + 26 | 0] = HEAP32[$56$s2] >>> 8 & 255;
  HEAP8[$context + 27 | 0] = HEAP32[$56$s2] & 255;
  var $73$s2 = ($context + 4 | 0) >> 2;
  HEAP8[$context + 28 | 0] = HEAP32[$73$s2] >>> 24 & 255;
  HEAP8[$context + 29 | 0] = HEAP32[$73$s2] >>> 16 & 255;
  HEAP8[$context + 30 | 0] = HEAP32[$73$s2] >>> 8 & 255;
  HEAP8[$context + 31 | 0] = HEAP32[$73$s2] & 255;
  var $90$s2 = ($context + 8 | 0) >> 2;
  HEAP8[$context + 32 | 0] = HEAP32[$90$s2] >>> 24 & 255;
  HEAP8[$context + 33 | 0] = HEAP32[$90$s2] >>> 16 & 255;
  HEAP8[$context + 34 | 0] = HEAP32[$90$s2] >>> 8 & 255;
  HEAP8[$context + 35 | 0] = HEAP32[$90$s2] & 255;
  var $107$s2 = ($context + 12 | 0) >> 2;
  HEAP8[$context + 36 | 0] = HEAP32[$107$s2] >>> 24 & 255;
  HEAP8[$context + 37 | 0] = HEAP32[$107$s2] >>> 16 & 255;
  HEAP8[$context + 38 | 0] = HEAP32[$107$s2] >>> 8 & 255;
  HEAP8[$context + 39 | 0] = HEAP32[$107$s2] & 255;
  var $124$s2 = ($context + 16 | 0) >> 2;
  HEAP8[$context + 40 | 0] = HEAP32[$124$s2] >>> 24 & 255;
  HEAP8[$context + 41 | 0] = HEAP32[$124$s2] >>> 16 & 255;
  HEAP8[$context + 42 | 0] = HEAP32[$124$s2] >>> 8 & 255;
  HEAP8[$context + 43 | 0] = HEAP32[$124$s2] & 255;
  return;
}
_sha1_final["X"] = 1;
function _run_selftests907($algo, $extended, $report) {
  if (($algo | 0) == 2) {
    var $ec_0 = _selftests_sha1($extended, $report);
  } else {
    var $ec_0 = 5;
  }
  var $ec_0;
  return $ec_0;
}
function _selftests_sha1($extended, $report) {
  var $1 = __gcry_hash_selftest_check_one(2, 0, 477640, 3, 474744, 20);
  do {
    if (($1 | 0) == 0) {
      if (($extended | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      var $6 = __gcry_hash_selftest_check_one(2, 0, 470944, 56, 469672, 20);
      if (($6 | 0) != 0) {
        var $errtxt_0 = $6;
        var $what_0 = 472388;
        break;
      }
      var $9 = __gcry_hash_selftest_check_one(2, 1, 0, 0, 466208, 20);
      if (($9 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $errtxt_0 = $9;
        var $what_0 = 467936;
        break;
      }
      var $_0;
      return $_0;
    } else {
      var $errtxt_0 = $1;
      var $what_0 = 482552;
    }
  } while (0);
  var $what_0;
  var $errtxt_0;
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    return $_0;
  }
  FUNCTION_TABLE[$report](464744, 2, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  return $_0;
}
function _transform908($hd, $data, $nblocks) {
  var $23$s2;
  var $22$s2;
  var $21$s2;
  var $20$s2;
  var $19$s2;
  var $18$s2;
  var $17$s2;
  var $16$s2;
  var $15$s2;
  var $14$s2;
  var $13$s2;
  var $12$s2;
  var $11$s2;
  var $10$s2;
  var $9$s2;
  var $8$s2;
  var $7$s2;
  var $6$s2;
  var $5$s2;
  var $4$s2;
  var $2$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  var $x = __stackBase__;
  if (($nblocks | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $2$s2 = ($x | 0) >> 2;
  var $3 = $x;
  var $4$s2 = ($hd | 0) >> 2;
  var $5$s2 = ($hd + 4 | 0) >> 2;
  var $6$s2 = ($hd + 8 | 0) >> 2;
  var $7$s2 = ($hd + 12 | 0) >> 2;
  var $8$s2 = ($hd + 16 | 0) >> 2;
  var $9$s2 = ($x + 4 | 0) >> 2;
  var $10$s2 = ($x + 8 | 0) >> 2;
  var $11$s2 = ($x + 12 | 0) >> 2;
  var $12$s2 = ($x + 16 | 0) >> 2;
  var $13$s2 = ($x + 20 | 0) >> 2;
  var $14$s2 = ($x + 24 | 0) >> 2;
  var $15$s2 = ($x + 28 | 0) >> 2;
  var $16$s2 = ($x + 32 | 0) >> 2;
  var $17$s2 = ($x + 36 | 0) >> 2;
  var $18$s2 = ($x + 40 | 0) >> 2;
  var $19$s2 = ($x + 44 | 0) >> 2;
  var $20$s2 = ($x + 48 | 0) >> 2;
  var $21$s2 = ($x + 52 | 0) >> 2;
  var $22$s2 = ($x + 56 | 0) >> 2;
  var $23$s2 = ($x + 60 | 0) >> 2;
  var $_015 = $nblocks;
  var $_06 = $data;
  while (1) {
    var $_06;
    var $_015;
    var $i_02 = 0;
    var $_13 = $_06;
    var $p_04 = $3;
    while (1) {
      var $p_04;
      var $_13;
      var $i_02;
      HEAP8[$p_04 + 3 | 0] = HEAP8[$_13];
      HEAP8[$p_04 + 2 | 0] = HEAP8[$_13 + 1 | 0];
      HEAP8[$p_04 + 1 | 0] = HEAP8[$_13 + 2 | 0];
      HEAP8[$p_04] = HEAP8[$_13 + 3 | 0];
      var $37 = $i_02 + 1 | 0;
      if (($37 | 0) == 16) {
        break;
      } else {
        var $i_02 = $37;
        var $_13 = $_13 + 4 | 0;
        var $p_04 = $p_04 + 4 | 0;
      }
    }
    var $40 = HEAP32[$4$s2];
    var $41 = HEAP32[$5$s2];
    var $42 = HEAP32[$6$s2];
    var $43 = HEAP32[$7$s2];
    var $51 = HEAP32[$2$s2];
    var $55 = ($40 << 5 | $40 >>> 27) + HEAP32[$8$s2] + $51 + (($43 ^ $42) & $41 ^ $43) + 1518500249 | 0;
    var $58 = $41 << 30 | $41 >>> 2;
    var $69 = $43 + (($58 ^ $42) & $40 ^ $42) + HEAP32[$9$s2] + ($55 << 5 | $55 >>> 27) + 1518500249 | 0;
    var $72 = $40 << 30 | $40 >>> 2;
    var $79 = HEAP32[$10$s2];
    var $83 = $42 + $79 + ($55 & ($58 ^ $72) ^ $58) + ($69 << 5 | $69 >>> 27) + 1518500249 | 0;
    var $86 = $55 << 30 | $55 >>> 2;
    var $97 = $58 + HEAP32[$11$s2] + ($69 & ($86 ^ $72) ^ $72) + ($83 << 5 | $83 >>> 27) + 1518500249 | 0;
    var $100 = $69 << 30 | $69 >>> 2;
    var $111 = $72 + HEAP32[$12$s2] + ($83 & ($100 ^ $86) ^ $86) + ($97 << 5 | $97 >>> 27) + 1518500249 | 0;
    var $114 = $83 << 30 | $83 >>> 2;
    var $125 = $86 + HEAP32[$13$s2] + ($97 & ($114 ^ $100) ^ $100) + ($111 << 5 | $111 >>> 27) + 1518500249 | 0;
    var $128 = $97 << 30 | $97 >>> 2;
    var $139 = HEAP32[$14$s2] + $100 + ($111 & ($128 ^ $114) ^ $114) + ($125 << 5 | $125 >>> 27) + 1518500249 | 0;
    var $142 = $111 << 30 | $111 >>> 2;
    var $153 = HEAP32[$15$s2] + $114 + ($125 & ($142 ^ $128) ^ $128) + ($139 << 5 | $139 >>> 27) + 1518500249 | 0;
    var $156 = $125 << 30 | $125 >>> 2;
    var $163 = HEAP32[$16$s2];
    var $167 = $163 + $128 + ($139 & ($156 ^ $142) ^ $142) + ($153 << 5 | $153 >>> 27) + 1518500249 | 0;
    var $170 = $139 << 30 | $139 >>> 2;
    var $181 = HEAP32[$17$s2] + $142 + ($153 & ($170 ^ $156) ^ $156) + ($167 << 5 | $167 >>> 27) + 1518500249 | 0;
    var $184 = $153 << 30 | $153 >>> 2;
    var $195 = HEAP32[$18$s2] + $156 + ($167 & ($184 ^ $170) ^ $170) + ($181 << 5 | $181 >>> 27) + 1518500249 | 0;
    var $198 = $167 << 30 | $167 >>> 2;
    var $209 = HEAP32[$19$s2] + $170 + ($181 & ($198 ^ $184) ^ $184) + ($195 << 5 | $195 >>> 27) + 1518500249 | 0;
    var $212 = $181 << 30 | $181 >>> 2;
    var $223 = HEAP32[$20$s2] + $184 + ($195 & ($212 ^ $198) ^ $198) + ($209 << 5 | $209 >>> 27) + 1518500249 | 0;
    var $226 = $195 << 30 | $195 >>> 2;
    var $233 = HEAP32[$21$s2];
    var $237 = $233 + $198 + ($209 & ($226 ^ $212) ^ $212) + ($223 << 5 | $223 >>> 27) + 1518500249 | 0;
    var $240 = $209 << 30 | $209 >>> 2;
    var $251 = HEAP32[$22$s2] + $212 + ($223 & ($240 ^ $226) ^ $226) + ($237 << 5 | $237 >>> 27) + 1518500249 | 0;
    var $254 = $223 << 30 | $223 >>> 2;
    var $265 = HEAP32[$23$s2] + $226 + ($237 & ($254 ^ $240) ^ $240) + ($251 << 5 | $251 >>> 27) + 1518500249 | 0;
    var $268 = $237 << 30 | $237 >>> 2;
    var $277 = $79 ^ $51 ^ $163 ^ $233;
    var $280 = $277 << 1 | $277 >>> 31;
    HEAP32[$2$s2] = $280;
    var $284 = $280 + $240 + ($251 & ($268 ^ $254) ^ $254) + ($265 << 5 | $265 >>> 27) + 1518500249 | 0;
    var $287 = $251 << 30 | $251 >>> 2;
    var $300 = HEAP32[$11$s2] ^ HEAP32[$9$s2] ^ HEAP32[$17$s2] ^ HEAP32[$22$s2];
    var $303 = $300 << 1 | $300 >>> 31;
    HEAP32[$9$s2] = $303;
    var $307 = $303 + $254 + ($265 & ($287 ^ $268) ^ $268) + ($284 << 5 | $284 >>> 27) + 1518500249 | 0;
    var $310 = $265 << 30 | $265 >>> 2;
    var $323 = HEAP32[$12$s2] ^ HEAP32[$10$s2] ^ HEAP32[$18$s2] ^ HEAP32[$23$s2];
    var $326 = $323 << 1 | $323 >>> 31;
    HEAP32[$10$s2] = $326;
    var $330 = $326 + $268 + ($284 & ($310 ^ $287) ^ $287) + ($307 << 5 | $307 >>> 27) + 1518500249 | 0;
    var $333 = $284 << 30 | $284 >>> 2;
    var $346 = HEAP32[$13$s2] ^ HEAP32[$11$s2] ^ HEAP32[$19$s2] ^ HEAP32[$2$s2];
    var $349 = $346 << 1 | $346 >>> 31;
    HEAP32[$11$s2] = $349;
    var $353 = $349 + $287 + ($307 & ($333 ^ $310) ^ $310) + ($330 << 5 | $330 >>> 27) + 1518500249 | 0;
    var $356 = $307 << 30 | $307 >>> 2;
    var $368 = HEAP32[$14$s2] ^ HEAP32[$12$s2] ^ HEAP32[$20$s2] ^ HEAP32[$9$s2];
    var $371 = $368 << 1 | $368 >>> 31;
    HEAP32[$12$s2] = $371;
    var $375 = $371 + $310 + ($356 ^ $333 ^ $330) + ($353 << 5 | $353 >>> 27) + 1859775393 | 0;
    var $378 = $330 << 30 | $330 >>> 2;
    var $390 = HEAP32[$15$s2] ^ HEAP32[$13$s2] ^ HEAP32[$21$s2] ^ HEAP32[$10$s2];
    var $393 = $390 << 1 | $390 >>> 31;
    HEAP32[$13$s2] = $393;
    var $397 = $393 + $333 + ($378 ^ $356 ^ $353) + ($375 << 5 | $375 >>> 27) + 1859775393 | 0;
    var $400 = $353 << 30 | $353 >>> 2;
    var $412 = HEAP32[$16$s2] ^ HEAP32[$14$s2] ^ HEAP32[$22$s2] ^ HEAP32[$11$s2];
    var $415 = $412 << 1 | $412 >>> 31;
    HEAP32[$14$s2] = $415;
    var $419 = $415 + $356 + ($400 ^ $378 ^ $375) + ($397 << 5 | $397 >>> 27) + 1859775393 | 0;
    var $422 = $375 << 30 | $375 >>> 2;
    var $434 = HEAP32[$17$s2] ^ HEAP32[$15$s2] ^ HEAP32[$23$s2] ^ HEAP32[$12$s2];
    var $437 = $434 << 1 | $434 >>> 31;
    HEAP32[$15$s2] = $437;
    var $441 = $437 + $378 + ($422 ^ $400 ^ $397) + ($419 << 5 | $419 >>> 27) + 1859775393 | 0;
    var $444 = $397 << 30 | $397 >>> 2;
    var $456 = HEAP32[$18$s2] ^ HEAP32[$16$s2] ^ HEAP32[$2$s2] ^ HEAP32[$13$s2];
    var $459 = $456 << 1 | $456 >>> 31;
    HEAP32[$16$s2] = $459;
    var $463 = $459 + $400 + ($444 ^ $422 ^ $419) + ($441 << 5 | $441 >>> 27) + 1859775393 | 0;
    var $466 = $419 << 30 | $419 >>> 2;
    var $478 = HEAP32[$19$s2] ^ HEAP32[$17$s2] ^ HEAP32[$9$s2] ^ HEAP32[$14$s2];
    var $481 = $478 << 1 | $478 >>> 31;
    HEAP32[$17$s2] = $481;
    var $485 = $481 + $422 + ($466 ^ $444 ^ $441) + ($463 << 5 | $463 >>> 27) + 1859775393 | 0;
    var $488 = $441 << 30 | $441 >>> 2;
    var $500 = HEAP32[$20$s2] ^ HEAP32[$18$s2] ^ HEAP32[$10$s2] ^ HEAP32[$15$s2];
    var $503 = $500 << 1 | $500 >>> 31;
    HEAP32[$18$s2] = $503;
    var $507 = $503 + $444 + ($488 ^ $466 ^ $463) + ($485 << 5 | $485 >>> 27) + 1859775393 | 0;
    var $510 = $463 << 30 | $463 >>> 2;
    var $522 = HEAP32[$21$s2] ^ HEAP32[$19$s2] ^ HEAP32[$11$s2] ^ HEAP32[$16$s2];
    var $525 = $522 << 1 | $522 >>> 31;
    HEAP32[$19$s2] = $525;
    var $529 = $525 + $466 + ($510 ^ $488 ^ $485) + ($507 << 5 | $507 >>> 27) + 1859775393 | 0;
    var $532 = $485 << 30 | $485 >>> 2;
    var $544 = HEAP32[$22$s2] ^ HEAP32[$20$s2] ^ HEAP32[$12$s2] ^ HEAP32[$17$s2];
    var $547 = $544 << 1 | $544 >>> 31;
    HEAP32[$20$s2] = $547;
    var $551 = $547 + $488 + ($532 ^ $510 ^ $507) + ($529 << 5 | $529 >>> 27) + 1859775393 | 0;
    var $554 = $507 << 30 | $507 >>> 2;
    var $566 = HEAP32[$23$s2] ^ HEAP32[$21$s2] ^ HEAP32[$13$s2] ^ HEAP32[$18$s2];
    var $569 = $566 << 1 | $566 >>> 31;
    HEAP32[$21$s2] = $569;
    var $573 = $569 + $510 + ($554 ^ $532 ^ $529) + ($551 << 5 | $551 >>> 27) + 1859775393 | 0;
    var $576 = $529 << 30 | $529 >>> 2;
    var $588 = HEAP32[$2$s2] ^ HEAP32[$22$s2] ^ HEAP32[$14$s2] ^ HEAP32[$19$s2];
    var $591 = $588 << 1 | $588 >>> 31;
    HEAP32[$22$s2] = $591;
    var $595 = $591 + $532 + ($576 ^ $554 ^ $551) + ($573 << 5 | $573 >>> 27) + 1859775393 | 0;
    var $598 = $551 << 30 | $551 >>> 2;
    var $610 = HEAP32[$9$s2] ^ HEAP32[$23$s2] ^ HEAP32[$15$s2] ^ HEAP32[$20$s2];
    var $613 = $610 << 1 | $610 >>> 31;
    HEAP32[$23$s2] = $613;
    var $617 = $613 + $554 + ($598 ^ $576 ^ $573) + ($595 << 5 | $595 >>> 27) + 1859775393 | 0;
    var $620 = $573 << 30 | $573 >>> 2;
    var $632 = HEAP32[$10$s2] ^ HEAP32[$2$s2] ^ HEAP32[$16$s2] ^ HEAP32[$21$s2];
    var $635 = $632 << 1 | $632 >>> 31;
    HEAP32[$2$s2] = $635;
    var $639 = $635 + $576 + ($620 ^ $598 ^ $595) + ($617 << 5 | $617 >>> 27) + 1859775393 | 0;
    var $642 = $595 << 30 | $595 >>> 2;
    var $654 = HEAP32[$11$s2] ^ HEAP32[$9$s2] ^ HEAP32[$17$s2] ^ HEAP32[$22$s2];
    var $657 = $654 << 1 | $654 >>> 31;
    HEAP32[$9$s2] = $657;
    var $661 = $657 + $598 + ($642 ^ $620 ^ $617) + ($639 << 5 | $639 >>> 27) + 1859775393 | 0;
    var $664 = $617 << 30 | $617 >>> 2;
    var $676 = HEAP32[$12$s2] ^ HEAP32[$10$s2] ^ HEAP32[$18$s2] ^ HEAP32[$23$s2];
    var $679 = $676 << 1 | $676 >>> 31;
    HEAP32[$10$s2] = $679;
    var $683 = $679 + $620 + ($664 ^ $642 ^ $639) + ($661 << 5 | $661 >>> 27) + 1859775393 | 0;
    var $686 = $639 << 30 | $639 >>> 2;
    var $698 = HEAP32[$13$s2] ^ HEAP32[$11$s2] ^ HEAP32[$19$s2] ^ HEAP32[$2$s2];
    var $701 = $698 << 1 | $698 >>> 31;
    HEAP32[$11$s2] = $701;
    var $705 = $642 + $701 + ($686 ^ $664 ^ $661) + ($683 << 5 | $683 >>> 27) + 1859775393 | 0;
    var $708 = $661 << 30 | $661 >>> 2;
    var $720 = HEAP32[$14$s2] ^ HEAP32[$12$s2] ^ HEAP32[$20$s2] ^ HEAP32[$9$s2];
    var $723 = $720 << 1 | $720 >>> 31;
    HEAP32[$12$s2] = $723;
    var $727 = $664 + $723 + ($708 ^ $686 ^ $683) + ($705 << 5 | $705 >>> 27) + 1859775393 | 0;
    var $730 = $683 << 30 | $683 >>> 2;
    var $742 = HEAP32[$15$s2] ^ HEAP32[$13$s2] ^ HEAP32[$21$s2] ^ HEAP32[$10$s2];
    var $745 = $742 << 1 | $742 >>> 31;
    HEAP32[$13$s2] = $745;
    var $749 = $686 + $745 + ($730 ^ $708 ^ $705) + ($727 << 5 | $727 >>> 27) + 1859775393 | 0;
    var $752 = $705 << 30 | $705 >>> 2;
    var $764 = HEAP32[$16$s2] ^ HEAP32[$14$s2] ^ HEAP32[$22$s2] ^ HEAP32[$11$s2];
    var $767 = $764 << 1 | $764 >>> 31;
    HEAP32[$14$s2] = $767;
    var $771 = $708 + $767 + ($752 ^ $730 ^ $727) + ($749 << 5 | $749 >>> 27) + 1859775393 | 0;
    var $774 = $727 << 30 | $727 >>> 2;
    var $786 = HEAP32[$17$s2] ^ HEAP32[$15$s2] ^ HEAP32[$23$s2] ^ HEAP32[$12$s2];
    var $789 = $786 << 1 | $786 >>> 31;
    HEAP32[$15$s2] = $789;
    var $793 = $730 + $789 + ($774 ^ $752 ^ $749) + ($771 << 5 | $771 >>> 27) + 1859775393 | 0;
    var $796 = $749 << 30 | $749 >>> 2;
    var $810 = HEAP32[$18$s2] ^ HEAP32[$16$s2] ^ HEAP32[$2$s2] ^ HEAP32[$13$s2];
    var $813 = $810 << 1 | $810 >>> 31;
    HEAP32[$16$s2] = $813;
    var $817 = $752 - 1894007588 + $813 + (($771 | $796) & $774 | $771 & $796) + ($793 << 5 | $793 >>> 27) | 0;
    var $820 = $771 << 30 | $771 >>> 2;
    var $834 = HEAP32[$19$s2] ^ HEAP32[$17$s2] ^ HEAP32[$9$s2] ^ HEAP32[$14$s2];
    var $837 = $834 << 1 | $834 >>> 31;
    HEAP32[$17$s2] = $837;
    var $841 = $774 - 1894007588 + $837 + (($793 | $820) & $796 | $793 & $820) + ($817 << 5 | $817 >>> 27) | 0;
    var $844 = $793 << 30 | $793 >>> 2;
    var $858 = HEAP32[$20$s2] ^ HEAP32[$18$s2] ^ HEAP32[$10$s2] ^ HEAP32[$15$s2];
    var $861 = $858 << 1 | $858 >>> 31;
    HEAP32[$18$s2] = $861;
    var $865 = $796 - 1894007588 + $861 + (($817 | $844) & $820 | $817 & $844) + ($841 << 5 | $841 >>> 27) | 0;
    var $868 = $817 << 30 | $817 >>> 2;
    var $882 = HEAP32[$21$s2] ^ HEAP32[$19$s2] ^ HEAP32[$11$s2] ^ HEAP32[$16$s2];
    var $885 = $882 << 1 | $882 >>> 31;
    HEAP32[$19$s2] = $885;
    var $889 = $820 - 1894007588 + $885 + (($841 | $868) & $844 | $841 & $868) + ($865 << 5 | $865 >>> 27) | 0;
    var $892 = $841 << 30 | $841 >>> 2;
    var $906 = HEAP32[$22$s2] ^ HEAP32[$20$s2] ^ HEAP32[$12$s2] ^ HEAP32[$17$s2];
    var $909 = $906 << 1 | $906 >>> 31;
    HEAP32[$20$s2] = $909;
    var $913 = $844 - 1894007588 + $909 + (($865 | $892) & $868 | $865 & $892) + ($889 << 5 | $889 >>> 27) | 0;
    var $916 = $865 << 30 | $865 >>> 2;
    var $930 = HEAP32[$23$s2] ^ HEAP32[$21$s2] ^ HEAP32[$13$s2] ^ HEAP32[$18$s2];
    var $933 = $930 << 1 | $930 >>> 31;
    HEAP32[$21$s2] = $933;
    var $937 = $868 - 1894007588 + (($889 | $916) & $892 | $889 & $916) + $933 + ($913 << 5 | $913 >>> 27) | 0;
    var $940 = $889 << 30 | $889 >>> 2;
    var $954 = HEAP32[$2$s2] ^ HEAP32[$22$s2] ^ HEAP32[$14$s2] ^ HEAP32[$19$s2];
    var $957 = $954 << 1 | $954 >>> 31;
    HEAP32[$22$s2] = $957;
    var $961 = $892 - 1894007588 + (($913 | $940) & $916 | $913 & $940) + $957 + ($937 << 5 | $937 >>> 27) | 0;
    var $964 = $913 << 30 | $913 >>> 2;
    var $978 = HEAP32[$9$s2] ^ HEAP32[$23$s2] ^ HEAP32[$15$s2] ^ HEAP32[$20$s2];
    var $981 = $978 << 1 | $978 >>> 31;
    HEAP32[$23$s2] = $981;
    var $985 = $916 - 1894007588 + (($937 | $964) & $940 | $937 & $964) + ($961 << 5 | $961 >>> 27) + $981 | 0;
    var $988 = $937 << 30 | $937 >>> 2;
    var $1002 = HEAP32[$10$s2] ^ HEAP32[$2$s2] ^ HEAP32[$16$s2] ^ HEAP32[$21$s2];
    var $1005 = $1002 << 1 | $1002 >>> 31;
    HEAP32[$2$s2] = $1005;
    var $1009 = $940 - 1894007588 + (($961 | $988) & $964 | $961 & $988) + ($985 << 5 | $985 >>> 27) + $1005 | 0;
    var $1012 = $961 << 30 | $961 >>> 2;
    var $1026 = HEAP32[$11$s2] ^ HEAP32[$9$s2] ^ HEAP32[$17$s2] ^ HEAP32[$22$s2];
    var $1029 = $1026 << 1 | $1026 >>> 31;
    HEAP32[$9$s2] = $1029;
    var $1033 = $964 - 1894007588 + (($985 | $1012) & $988 | $985 & $1012) + ($1009 << 5 | $1009 >>> 27) + $1029 | 0;
    var $1036 = $985 << 30 | $985 >>> 2;
    var $1050 = HEAP32[$12$s2] ^ HEAP32[$10$s2] ^ HEAP32[$18$s2] ^ HEAP32[$23$s2];
    var $1053 = $1050 << 1 | $1050 >>> 31;
    HEAP32[$10$s2] = $1053;
    var $1057 = $988 - 1894007588 + (($1009 | $1036) & $1012 | $1009 & $1036) + ($1033 << 5 | $1033 >>> 27) + $1053 | 0;
    var $1060 = $1009 << 30 | $1009 >>> 2;
    var $1074 = HEAP32[$13$s2] ^ HEAP32[$11$s2] ^ HEAP32[$19$s2] ^ HEAP32[$2$s2];
    var $1077 = $1074 << 1 | $1074 >>> 31;
    HEAP32[$11$s2] = $1077;
    var $1081 = $1012 - 1894007588 + (($1033 | $1060) & $1036 | $1033 & $1060) + ($1057 << 5 | $1057 >>> 27) + $1077 | 0;
    var $1084 = $1033 << 30 | $1033 >>> 2;
    var $1098 = HEAP32[$14$s2] ^ HEAP32[$12$s2] ^ HEAP32[$20$s2] ^ HEAP32[$9$s2];
    var $1101 = $1098 << 1 | $1098 >>> 31;
    HEAP32[$12$s2] = $1101;
    var $1105 = $1036 - 1894007588 + (($1057 | $1084) & $1060 | $1057 & $1084) + ($1081 << 5 | $1081 >>> 27) + $1101 | 0;
    var $1108 = $1057 << 30 | $1057 >>> 2;
    var $1122 = HEAP32[$15$s2] ^ HEAP32[$13$s2] ^ HEAP32[$21$s2] ^ HEAP32[$10$s2];
    var $1125 = $1122 << 1 | $1122 >>> 31;
    HEAP32[$13$s2] = $1125;
    var $1129 = $1060 - 1894007588 + (($1081 | $1108) & $1084 | $1081 & $1108) + ($1105 << 5 | $1105 >>> 27) + $1125 | 0;
    var $1132 = $1081 << 30 | $1081 >>> 2;
    var $1146 = HEAP32[$16$s2] ^ HEAP32[$14$s2] ^ HEAP32[$22$s2] ^ HEAP32[$11$s2];
    var $1149 = $1146 << 1 | $1146 >>> 31;
    HEAP32[$14$s2] = $1149;
    var $1153 = $1084 - 1894007588 + (($1105 | $1132) & $1108 | $1105 & $1132) + ($1129 << 5 | $1129 >>> 27) + $1149 | 0;
    var $1156 = $1105 << 30 | $1105 >>> 2;
    var $1170 = HEAP32[$17$s2] ^ HEAP32[$15$s2] ^ HEAP32[$23$s2] ^ HEAP32[$12$s2];
    var $1173 = $1170 << 1 | $1170 >>> 31;
    HEAP32[$15$s2] = $1173;
    var $1177 = $1108 - 1894007588 + (($1129 | $1156) & $1132 | $1129 & $1156) + ($1153 << 5 | $1153 >>> 27) + $1173 | 0;
    var $1180 = $1129 << 30 | $1129 >>> 2;
    var $1194 = HEAP32[$18$s2] ^ HEAP32[$16$s2] ^ HEAP32[$2$s2] ^ HEAP32[$13$s2];
    var $1197 = $1194 << 1 | $1194 >>> 31;
    HEAP32[$16$s2] = $1197;
    var $1201 = $1132 - 1894007588 + (($1153 | $1180) & $1156 | $1153 & $1180) + ($1177 << 5 | $1177 >>> 27) + $1197 | 0;
    var $1204 = $1153 << 30 | $1153 >>> 2;
    var $1218 = HEAP32[$19$s2] ^ HEAP32[$17$s2] ^ HEAP32[$9$s2] ^ HEAP32[$14$s2];
    var $1221 = $1218 << 1 | $1218 >>> 31;
    HEAP32[$17$s2] = $1221;
    var $1225 = $1156 - 1894007588 + (($1177 | $1204) & $1180 | $1177 & $1204) + ($1201 << 5 | $1201 >>> 27) + $1221 | 0;
    var $1228 = $1177 << 30 | $1177 >>> 2;
    var $1242 = HEAP32[$20$s2] ^ HEAP32[$18$s2] ^ HEAP32[$10$s2] ^ HEAP32[$15$s2];
    var $1245 = $1242 << 1 | $1242 >>> 31;
    HEAP32[$18$s2] = $1245;
    var $1249 = $1180 - 1894007588 + (($1201 | $1228) & $1204 | $1201 & $1228) + ($1225 << 5 | $1225 >>> 27) + $1245 | 0;
    var $1252 = $1201 << 30 | $1201 >>> 2;
    var $1266 = HEAP32[$21$s2] ^ HEAP32[$19$s2] ^ HEAP32[$11$s2] ^ HEAP32[$16$s2];
    var $1269 = $1266 << 1 | $1266 >>> 31;
    HEAP32[$19$s2] = $1269;
    var $1273 = $1204 - 1894007588 + (($1225 | $1252) & $1228 | $1225 & $1252) + ($1249 << 5 | $1249 >>> 27) + $1269 | 0;
    var $1276 = $1225 << 30 | $1225 >>> 2;
    var $1288 = HEAP32[$22$s2] ^ HEAP32[$20$s2] ^ HEAP32[$12$s2] ^ HEAP32[$17$s2];
    var $1291 = $1288 << 1 | $1288 >>> 31;
    HEAP32[$20$s2] = $1291;
    var $1295 = $1228 - 899497514 + ($1276 ^ $1252 ^ $1249) + ($1273 << 5 | $1273 >>> 27) + $1291 | 0;
    var $1298 = $1249 << 30 | $1249 >>> 2;
    var $1310 = HEAP32[$23$s2] ^ HEAP32[$21$s2] ^ HEAP32[$13$s2] ^ HEAP32[$18$s2];
    var $1313 = $1310 << 1 | $1310 >>> 31;
    HEAP32[$21$s2] = $1313;
    var $1317 = $1252 - 899497514 + ($1298 ^ $1276 ^ $1273) + ($1295 << 5 | $1295 >>> 27) + $1313 | 0;
    var $1320 = $1273 << 30 | $1273 >>> 2;
    var $1332 = HEAP32[$2$s2] ^ HEAP32[$22$s2] ^ HEAP32[$14$s2] ^ HEAP32[$19$s2];
    var $1335 = $1332 << 1 | $1332 >>> 31;
    HEAP32[$22$s2] = $1335;
    var $1339 = $1276 - 899497514 + ($1320 ^ $1298 ^ $1295) + ($1317 << 5 | $1317 >>> 27) + $1335 | 0;
    var $1342 = $1295 << 30 | $1295 >>> 2;
    var $1354 = HEAP32[$9$s2] ^ HEAP32[$23$s2] ^ HEAP32[$15$s2] ^ HEAP32[$20$s2];
    var $1357 = $1354 << 1 | $1354 >>> 31;
    HEAP32[$23$s2] = $1357;
    var $1361 = $1298 - 899497514 + ($1342 ^ $1320 ^ $1317) + ($1339 << 5 | $1339 >>> 27) + $1357 | 0;
    var $1364 = $1317 << 30 | $1317 >>> 2;
    var $1376 = HEAP32[$10$s2] ^ HEAP32[$2$s2] ^ HEAP32[$16$s2] ^ HEAP32[$21$s2];
    var $1379 = $1376 << 1 | $1376 >>> 31;
    HEAP32[$2$s2] = $1379;
    var $1383 = $1320 - 899497514 + ($1364 ^ $1342 ^ $1339) + ($1361 << 5 | $1361 >>> 27) + $1379 | 0;
    var $1386 = $1339 << 30 | $1339 >>> 2;
    var $1398 = HEAP32[$11$s2] ^ HEAP32[$9$s2] ^ HEAP32[$17$s2] ^ HEAP32[$22$s2];
    var $1401 = $1398 << 1 | $1398 >>> 31;
    HEAP32[$9$s2] = $1401;
    var $1405 = $1342 - 899497514 + ($1386 ^ $1364 ^ $1361) + ($1383 << 5 | $1383 >>> 27) + $1401 | 0;
    var $1408 = $1361 << 30 | $1361 >>> 2;
    var $1420 = HEAP32[$12$s2] ^ HEAP32[$10$s2] ^ HEAP32[$18$s2] ^ HEAP32[$23$s2];
    var $1423 = $1420 << 1 | $1420 >>> 31;
    HEAP32[$10$s2] = $1423;
    var $1427 = $1364 - 899497514 + ($1408 ^ $1386 ^ $1383) + ($1405 << 5 | $1405 >>> 27) + $1423 | 0;
    var $1430 = $1383 << 30 | $1383 >>> 2;
    var $1442 = HEAP32[$13$s2] ^ HEAP32[$11$s2] ^ HEAP32[$19$s2] ^ HEAP32[$2$s2];
    var $1445 = $1442 << 1 | $1442 >>> 31;
    HEAP32[$11$s2] = $1445;
    var $1449 = $1386 - 899497514 + ($1430 ^ $1408 ^ $1405) + ($1427 << 5 | $1427 >>> 27) + $1445 | 0;
    var $1452 = $1405 << 30 | $1405 >>> 2;
    var $1464 = HEAP32[$14$s2] ^ HEAP32[$12$s2] ^ HEAP32[$20$s2] ^ HEAP32[$9$s2];
    var $1467 = $1464 << 1 | $1464 >>> 31;
    HEAP32[$12$s2] = $1467;
    var $1471 = $1408 - 899497514 + ($1452 ^ $1430 ^ $1427) + ($1449 << 5 | $1449 >>> 27) + $1467 | 0;
    var $1474 = $1427 << 30 | $1427 >>> 2;
    var $1486 = HEAP32[$15$s2] ^ HEAP32[$13$s2] ^ HEAP32[$21$s2] ^ HEAP32[$10$s2];
    var $1489 = $1486 << 1 | $1486 >>> 31;
    HEAP32[$13$s2] = $1489;
    var $1493 = $1430 - 899497514 + ($1474 ^ $1452 ^ $1449) + ($1471 << 5 | $1471 >>> 27) + $1489 | 0;
    var $1496 = $1449 << 30 | $1449 >>> 2;
    var $1508 = HEAP32[$16$s2] ^ HEAP32[$14$s2] ^ HEAP32[$22$s2] ^ HEAP32[$11$s2];
    var $1511 = $1508 << 1 | $1508 >>> 31;
    HEAP32[$14$s2] = $1511;
    var $1515 = $1452 - 899497514 + ($1496 ^ $1474 ^ $1471) + ($1493 << 5 | $1493 >>> 27) + $1511 | 0;
    var $1518 = $1471 << 30 | $1471 >>> 2;
    var $1530 = HEAP32[$17$s2] ^ HEAP32[$15$s2] ^ HEAP32[$23$s2] ^ HEAP32[$12$s2];
    var $1533 = $1530 << 1 | $1530 >>> 31;
    HEAP32[$15$s2] = $1533;
    var $1537 = $1474 - 899497514 + ($1518 ^ $1496 ^ $1493) + ($1515 << 5 | $1515 >>> 27) + $1533 | 0;
    var $1540 = $1493 << 30 | $1493 >>> 2;
    var $1552 = HEAP32[$18$s2] ^ HEAP32[$16$s2] ^ HEAP32[$2$s2] ^ HEAP32[$13$s2];
    var $1555 = $1552 << 1 | $1552 >>> 31;
    HEAP32[$16$s2] = $1555;
    var $1559 = $1496 - 899497514 + ($1540 ^ $1518 ^ $1515) + ($1537 << 5 | $1537 >>> 27) + $1555 | 0;
    var $1562 = $1515 << 30 | $1515 >>> 2;
    var $1574 = HEAP32[$19$s2] ^ HEAP32[$17$s2] ^ HEAP32[$9$s2] ^ HEAP32[$14$s2];
    var $1577 = $1574 << 1 | $1574 >>> 31;
    HEAP32[$17$s2] = $1577;
    var $1581 = $1518 - 899497514 + ($1562 ^ $1540 ^ $1537) + ($1559 << 5 | $1559 >>> 27) + $1577 | 0;
    var $1584 = $1537 << 30 | $1537 >>> 2;
    var $1596 = HEAP32[$20$s2] ^ HEAP32[$18$s2] ^ HEAP32[$10$s2] ^ HEAP32[$15$s2];
    var $1599 = $1596 << 1 | $1596 >>> 31;
    HEAP32[$18$s2] = $1599;
    var $1603 = $1540 - 899497514 + ($1584 ^ $1562 ^ $1559) + ($1581 << 5 | $1581 >>> 27) + $1599 | 0;
    var $1606 = $1559 << 30 | $1559 >>> 2;
    var $1618 = HEAP32[$21$s2] ^ HEAP32[$19$s2] ^ HEAP32[$11$s2] ^ HEAP32[$16$s2];
    var $1621 = $1618 << 1 | $1618 >>> 31;
    HEAP32[$19$s2] = $1621;
    var $1625 = $1562 - 899497514 + ($1606 ^ $1584 ^ $1581) + ($1603 << 5 | $1603 >>> 27) + $1621 | 0;
    var $1628 = $1581 << 30 | $1581 >>> 2;
    var $1640 = HEAP32[$22$s2] ^ HEAP32[$20$s2] ^ HEAP32[$12$s2] ^ HEAP32[$17$s2];
    var $1643 = $1640 << 1 | $1640 >>> 31;
    HEAP32[$20$s2] = $1643;
    var $1647 = $1584 - 899497514 + ($1628 ^ $1606 ^ $1603) + ($1625 << 5 | $1625 >>> 27) + $1643 | 0;
    var $1650 = $1603 << 30 | $1603 >>> 2;
    var $1662 = HEAP32[$23$s2] ^ HEAP32[$21$s2] ^ HEAP32[$13$s2] ^ HEAP32[$18$s2];
    var $1665 = $1662 << 1 | $1662 >>> 31;
    HEAP32[$21$s2] = $1665;
    var $1669 = $1606 - 899497514 + ($1650 ^ $1628 ^ $1625) + ($1647 << 5 | $1647 >>> 27) + $1665 | 0;
    var $1672 = $1625 << 30 | $1625 >>> 2;
    var $1684 = HEAP32[$2$s2] ^ HEAP32[$22$s2] ^ HEAP32[$14$s2] ^ HEAP32[$19$s2];
    var $1687 = $1684 << 1 | $1684 >>> 31;
    HEAP32[$22$s2] = $1687;
    var $1691 = $1628 - 899497514 + ($1672 ^ $1650 ^ $1647) + ($1669 << 5 | $1669 >>> 27) + $1687 | 0;
    var $1694 = $1647 << 30 | $1647 >>> 2;
    var $1706 = HEAP32[$9$s2] ^ HEAP32[$23$s2] ^ HEAP32[$15$s2] ^ HEAP32[$20$s2];
    var $1709 = $1706 << 1 | $1706 >>> 31;
    HEAP32[$23$s2] = $1709;
    HEAP32[$4$s2] = $1650 - 899497514 + ($1694 ^ $1672 ^ $1669) + HEAP32[$4$s2] + $1709 + ($1691 << 5 | $1691 >>> 27) | 0;
    HEAP32[$5$s2] = HEAP32[$5$s2] + $1691 | 0;
    HEAP32[$6$s2] = HEAP32[$6$s2] + ($1669 << 30 | $1669 >>> 2) | 0;
    HEAP32[$7$s2] = HEAP32[$7$s2] + $1694 | 0;
    HEAP32[$8$s2] = HEAP32[$8$s2] + $1672 | 0;
    var $1727 = $_015 - 1 | 0;
    if (($1727 | 0) == 0) {
      break;
    } else {
      var $_015 = $1727;
      var $_06 = $_06 + 64 | 0;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
_transform908["X"] = 1;
function _Sum1($x) {
  return ($x >>> 11 | $x << 21) ^ ($x >>> 25 | $x << 7) ^ ($x >>> 6 | $x << 26);
}
function _Cho($x, $y, $z) {
  return ($z ^ $y) & $x ^ $z;
}
function _Sum0($x) {
  return ($x >>> 13 | $x << 19) ^ ($x >>> 22 | $x << 10) ^ ($x >>> 2 | $x << 30);
}
function _Maj($x, $y, $z) {
  return ($y | $x) & $z | $y & $x;
}
function _sha224_init($context) {
  var $context$s2 = $context >> 2;
  HEAP32[$context$s2] = -1056596264;
  HEAP32[$context$s2 + 1] = 914150663;
  HEAP32[$context$s2 + 2] = 812702999;
  HEAP32[$context$s2 + 3] = -150054599;
  HEAP32[$context$s2 + 4] = -4191439;
  HEAP32[$context$s2 + 5] = 1750603025;
  HEAP32[$context$s2 + 6] = 1694076839;
  HEAP32[$context$s2 + 7] = -1090891868;
  HEAP32[$context$s2 + 8] = 0;
  HEAP32[$context$s2 + 25] = 0;
  return;
}
function _sha256_read($context) {
  return $context + 36 | 0;
}
function _sha256_init($context) {
  var $context$s2 = $context >> 2;
  HEAP32[$context$s2] = 1779033703;
  HEAP32[$context$s2 + 1] = -1150833019;
  HEAP32[$context$s2 + 2] = 1013904242;
  HEAP32[$context$s2 + 3] = -1521486534;
  HEAP32[$context$s2 + 4] = 1359893119;
  HEAP32[$context$s2 + 5] = -1694144372;
  HEAP32[$context$s2 + 6] = 528734635;
  HEAP32[$context$s2 + 7] = 1541459225;
  HEAP32[$context$s2 + 8] = 0;
  HEAP32[$context$s2 + 25] = 0;
  return;
}
function _sha512_init($context) {
  var $1 = $context;
  HEAP32[$1 >> 2] = -205731576;
  HEAP32[$1 + 4 >> 2] = 1779033703;
  var $3 = $context + 8 | 0;
  HEAP32[$3 >> 2] = -2067093701;
  HEAP32[$3 + 4 >> 2] = -1150833019;
  var $5 = $context + 16 | 0;
  HEAP32[$5 >> 2] = -23791573;
  HEAP32[$5 + 4 >> 2] = 1013904242;
  var $7 = $context + 24 | 0;
  HEAP32[$7 >> 2] = 1595750129;
  HEAP32[$7 + 4 >> 2] = -1521486534;
  var $9 = $context + 32 | 0;
  HEAP32[$9 >> 2] = -1377402159;
  HEAP32[$9 + 4 >> 2] = 1359893119;
  var $11 = $context + 40 | 0;
  HEAP32[$11 >> 2] = 725511199;
  HEAP32[$11 + 4 >> 2] = -1694144372;
  var $13 = $context + 48 | 0;
  HEAP32[$13 >> 2] = -79577749;
  HEAP32[$13 + 4 >> 2] = 528734635;
  var $15 = $context + 56 | 0;
  HEAP32[$15 >> 2] = 327033209;
  HEAP32[$15 + 4 >> 2] = 1541459225;
  var $17 = $context + 64 | 0;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$17 + 4 >> 2] = 0;
  HEAP32[$context + 200 >> 2] = 0;
  return;
}
_sha512_init["X"] = 1;
function _sha256_write($context, $inbuf_arg, $inlen) {
  var $3$s2;
  var label = 0;
  var $1 = $context;
  var $3$s2 = ($context + 100 | 0) >> 2;
  var $4 = $context + 36 | 0;
  var $6 = $context + 32 | 0;
  var $inlen_tr = $inlen;
  var $inbuf_arg_tr = $inbuf_arg;
  L150 : while (1) {
    var $inbuf_arg_tr;
    var $inlen_tr;
    if ((HEAP32[$3$s2] | 0) == 64) {
      _transform935($1, $4);
      __gcry_burn_stack(328);
      HEAP32[$3$s2] = 0;
      HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1 | 0;
    }
    if (($inbuf_arg_tr | 0) == 0) {
      label = 138;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1_ph = $inbuf_arg_tr;
      var $_1_ph = $inlen_tr;
      break;
    } else {
      var $inbuf_0 = $inbuf_arg_tr;
      var $_0 = $inlen_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $inlen_tr = 0;
        var $inbuf_arg_tr = 0;
        continue L150;
      }
      var $19 = HEAP32[$3$s2];
      if (($19 | 0) >= 64) {
        label = 129;
        break L150;
      }
      var $23 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $19 + 1 | 0;
      HEAP8[$19 + ($context + 36) | 0] = $23;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 129) {
    _sha256_write($context, 0, 0);
    var $inbuf_1_ph = $inbuf_0;
    var $_1_ph = $_0;
  } else if (label == 138) {
    return;
  }
  var $_1_ph;
  var $inbuf_1_ph;
  L164 : do {
    if ($_1_ph >>> 0 > 63) {
      var $29 = $context + 32 | 0;
      var $_13 = $_1_ph;
      var $inbuf_14 = $inbuf_1_ph;
      while (1) {
        var $inbuf_14;
        var $_13;
        _transform935($1, $inbuf_14);
        HEAP32[$3$s2] = 0;
        HEAP32[$29 >> 2] = HEAP32[$29 >> 2] + 1 | 0;
        var $33 = $_13 - 64 | 0;
        var $34 = $inbuf_14 + 64 | 0;
        if ($33 >>> 0 > 63) {
          var $_13 = $33;
          var $inbuf_14 = $34;
        } else {
          var $_1_lcssa = $33;
          var $inbuf_1_lcssa = $34;
          break L164;
        }
      }
    } else {
      var $_1_lcssa = $_1_ph;
      var $inbuf_1_lcssa = $inbuf_1_ph;
    }
  } while (0);
  var $inbuf_1_lcssa;
  var $_1_lcssa;
  __gcry_burn_stack(328);
  var $inbuf_2 = $inbuf_1_lcssa;
  var $_2 = $_1_lcssa;
  while (1) {
    var $_2;
    var $inbuf_2;
    if (($_2 | 0) == 0) {
      label = 140;
      break;
    }
    var $39 = HEAP32[$3$s2];
    if (($39 | 0) >= 64) {
      label = 139;
      break;
    }
    var $43 = HEAP8[$inbuf_2];
    HEAP32[$3$s2] = $39 + 1 | 0;
    HEAP8[$39 + ($context + 36) | 0] = $43;
    var $inbuf_2 = $inbuf_2 + 1 | 0;
    var $_2 = $_2 - 1 | 0;
  }
  if (label == 139) {
    return;
  } else if (label == 140) {
    return;
  }
}
_sha256_write["X"] = 1;
function _sha256_final($context) {
  var $175$s2;
  var $158$s2;
  var $141$s2;
  var $124$s2;
  var $107$s2;
  var $90$s2;
  var $73$s2;
  var $56$s2;
  var $8$s2;
  var $1 = $context;
  _sha256_write($context, 0, 0);
  var $4 = HEAP32[$context + 32 >> 2];
  var $8$s2 = ($context + 100 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10 = _llvm_uadd_with_overflow_i32($4 << 6, $9);
  var $msb_0 = (tempRet0 & 1) + ($4 >>> 26) | 0;
  var $13 = $10 << 3;
  var $16 = $msb_0 << 3 | $10 >>> 29;
  HEAP32[$8$s2] = $9 + 1 | 0;
  var $19 = $context + 36 | 0;
  HEAP8[$9 + ($context + 36) | 0] = -128;
  var $21 = HEAP32[$8$s2];
  L177 : do {
    if (($9 | 0) < 56) {
      if (($21 | 0) < 56) {
        var $24 = $21;
      } else {
        break;
      }
      while (1) {
        var $24;
        HEAP32[$8$s2] = $24 + 1 | 0;
        HEAP8[$24 + ($context + 36) | 0] = 0;
        var $27 = HEAP32[$8$s2];
        if (($27 | 0) < 56) {
          var $24 = $27;
        } else {
          break L177;
        }
      }
    } else {
      L179 : do {
        if (($21 | 0) < 64) {
          var $29 = $21;
          while (1) {
            var $29;
            HEAP32[$8$s2] = $29 + 1 | 0;
            HEAP8[$29 + ($context + 36) | 0] = 0;
            var $32 = HEAP32[$8$s2];
            if (($32 | 0) < 64) {
              var $29 = $32;
            } else {
              break L179;
            }
          }
        }
      } while (0);
      _sha256_write($context, 0, 0);
      _memset($19, 0, 56);
    }
  } while (0);
  HEAP8[$context + 92 | 0] = $msb_0 >>> 21 & 255;
  HEAP8[$context + 93 | 0] = $msb_0 >>> 13 & 255;
  HEAP8[$context + 94 | 0] = $msb_0 >>> 5 & 255;
  HEAP8[$context + 95 | 0] = $16 & 255;
  HEAP8[$context + 96 | 0] = $10 >>> 21 & 255;
  HEAP8[$context + 97 | 0] = $10 >>> 13 & 255;
  HEAP8[$context + 98 | 0] = $10 >>> 5 & 255;
  HEAP8[$context + 99 | 0] = $13 & 255;
  _transform935($1, $19);
  __gcry_burn_stack(328);
  var $56$s2 = $context >> 2;
  HEAP8[$19] = HEAP32[$56$s2] >>> 24 & 255;
  HEAP8[$context + 37 | 0] = HEAP32[$56$s2] >>> 16 & 255;
  HEAP8[$context + 38 | 0] = HEAP32[$56$s2] >>> 8 & 255;
  HEAP8[$context + 39 | 0] = HEAP32[$56$s2] & 255;
  var $73$s2 = ($context + 4 | 0) >> 2;
  HEAP8[$context + 40 | 0] = HEAP32[$73$s2] >>> 24 & 255;
  HEAP8[$context + 41 | 0] = HEAP32[$73$s2] >>> 16 & 255;
  HEAP8[$context + 42 | 0] = HEAP32[$73$s2] >>> 8 & 255;
  HEAP8[$context + 43 | 0] = HEAP32[$73$s2] & 255;
  var $90$s2 = ($context + 8 | 0) >> 2;
  HEAP8[$context + 44 | 0] = HEAP32[$90$s2] >>> 24 & 255;
  HEAP8[$context + 45 | 0] = HEAP32[$90$s2] >>> 16 & 255;
  HEAP8[$context + 46 | 0] = HEAP32[$90$s2] >>> 8 & 255;
  HEAP8[$context + 47 | 0] = HEAP32[$90$s2] & 255;
  var $107$s2 = ($context + 12 | 0) >> 2;
  HEAP8[$context + 48 | 0] = HEAP32[$107$s2] >>> 24 & 255;
  HEAP8[$context + 49 | 0] = HEAP32[$107$s2] >>> 16 & 255;
  HEAP8[$context + 50 | 0] = HEAP32[$107$s2] >>> 8 & 255;
  HEAP8[$context + 51 | 0] = HEAP32[$107$s2] & 255;
  var $124$s2 = ($context + 16 | 0) >> 2;
  HEAP8[$context + 52 | 0] = HEAP32[$124$s2] >>> 24 & 255;
  HEAP8[$context + 53 | 0] = HEAP32[$124$s2] >>> 16 & 255;
  HEAP8[$context + 54 | 0] = HEAP32[$124$s2] >>> 8 & 255;
  HEAP8[$context + 55 | 0] = HEAP32[$124$s2] & 255;
  var $141$s2 = ($context + 20 | 0) >> 2;
  HEAP8[$context + 56 | 0] = HEAP32[$141$s2] >>> 24 & 255;
  HEAP8[$context + 57 | 0] = HEAP32[$141$s2] >>> 16 & 255;
  HEAP8[$context + 58 | 0] = HEAP32[$141$s2] >>> 8 & 255;
  HEAP8[$context + 59 | 0] = HEAP32[$141$s2] & 255;
  var $158$s2 = ($context + 24 | 0) >> 2;
  HEAP8[$context + 60 | 0] = HEAP32[$158$s2] >>> 24 & 255;
  HEAP8[$context + 61 | 0] = HEAP32[$158$s2] >>> 16 & 255;
  HEAP8[$context + 62 | 0] = HEAP32[$158$s2] >>> 8 & 255;
  HEAP8[$context + 63 | 0] = HEAP32[$158$s2] & 255;
  var $175$s2 = ($context + 28 | 0) >> 2;
  HEAP8[$context + 64 | 0] = HEAP32[$175$s2] >>> 24 & 255;
  HEAP8[$context + 65 | 0] = HEAP32[$175$s2] >>> 16 & 255;
  HEAP8[$context + 66 | 0] = HEAP32[$175$s2] >>> 8 & 255;
  HEAP8[$context + 67 | 0] = HEAP32[$175$s2] & 255;
  return;
}
_sha256_final["X"] = 1;
function _run_selftests934($algo, $extended, $report) {
  if (($algo | 0) == 11) {
    var $ec_0 = _selftests_sha224($extended, $report);
  } else if (($algo | 0) == 8) {
    var $ec_0 = _selftests_sha256($extended, $report);
  } else {
    var $ec_0 = 5;
  }
  var $ec_0;
  return $ec_0;
}
function _selftests_sha224($extended, $report) {
  var $1 = __gcry_hash_selftest_check_one(11, 0, 470864, 3, 486652, 28);
  do {
    if (($1 | 0) == 0) {
      if (($extended | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      var $6 = __gcry_hash_selftest_check_one(11, 0, 466004, 56, 485772, 28);
      if (($6 | 0) != 0) {
        var $errtxt_0 = $6;
        var $what_0 = 467900;
        break;
      }
      var $9 = __gcry_hash_selftest_check_one(11, 1, 0, 0, 484876, 28);
      if (($9 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $errtxt_0 = $9;
        var $what_0 = 489940;
        break;
      }
      var $_0;
      return $_0;
    } else {
      var $errtxt_0 = $1;
      var $what_0 = 472296;
    }
  } while (0);
  var $what_0;
  var $errtxt_0;
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    return $_0;
  }
  FUNCTION_TABLE[$report](487448, 11, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  return $_0;
}
function _selftests_sha256($extended, $report) {
  var $1 = __gcry_hash_selftest_check_one(8, 0, 470864, 3, 469564, 32);
  do {
    if (($1 | 0) == 0) {
      if (($extended | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      var $6 = __gcry_hash_selftest_check_one(8, 0, 466004, 56, 464696, 32);
      if (($6 | 0) != 0) {
        var $errtxt_0 = $6;
        var $what_0 = 467900;
        break;
      }
      var $9 = __gcry_hash_selftest_check_one(8, 1, 0, 0, 488260, 32);
      if (($9 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $errtxt_0 = $9;
        var $what_0 = 489940;
        break;
      }
      var $_0;
      return $_0;
    } else {
      var $errtxt_0 = $1;
      var $what_0 = 472296;
    }
  } while (0);
  var $what_0;
  var $errtxt_0;
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    return $_0;
  }
  FUNCTION_TABLE[$report](487448, 8, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  return $_0;
}
function _transform935($hd, $data) {
  var $16$s2;
  var $14$s2;
  var $12$s2;
  var $10$s2;
  var $8$s2;
  var $6$s2;
  var $4$s2;
  var $2$s2;
  var $w$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  var $1 = __stackBase__;
  var $w = STACKTOP, $w$s2 = $w >> 2;
  STACKTOP = STACKTOP + 256 | 0;
  var $2$s2 = ($hd | 0) >> 2;
  var $3 = HEAP32[$2$s2];
  var $4$s2 = ($hd + 4 | 0) >> 2;
  var $5 = HEAP32[$4$s2];
  var $6$s2 = ($hd + 8 | 0) >> 2;
  var $7 = HEAP32[$6$s2];
  var $8$s2 = ($hd + 12 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10$s2 = ($hd + 16 | 0) >> 2;
  var $11 = HEAP32[$10$s2];
  var $12$s2 = ($hd + 20 | 0) >> 2;
  var $13 = HEAP32[$12$s2];
  var $14$s2 = ($hd + 24 | 0) >> 2;
  var $15 = HEAP32[$14$s2];
  var $16$s2 = ($hd + 28 | 0) >> 2;
  var $17 = HEAP32[$16$s2];
  var $i_014 = 0;
  var $_015 = $data;
  var $p2_016 = $1;
  while (1) {
    var $p2_016;
    var $_015;
    var $i_014;
    HEAP8[$p2_016 + 3 | 0] = HEAP8[$_015];
    HEAP8[$p2_016 + 2 | 0] = HEAP8[$_015 + 1 | 0];
    HEAP8[$p2_016 + 1 | 0] = HEAP8[$_015 + 2 | 0];
    HEAP8[$p2_016] = HEAP8[$_015 + 3 | 0];
    var $30 = $i_014 + 1 | 0;
    if (($30 | 0) == 16) {
      break;
    } else {
      var $i_014 = $30;
      var $_015 = $_015 + 4 | 0;
      var $p2_016 = $p2_016 + 4 | 0;
    }
  }
  var $w26 = $w;
  for (var $$src = $1 >> 2, $$dest = $w26 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $i_211 = 16;
  while (1) {
    var $i_211;
    var $35 = HEAP32[($i_211 - 2 << 2 >> 2) + $w$s2];
    var $50 = HEAP32[($i_211 - 15 << 2 >> 2) + $w$s2];
    HEAP32[($i_211 << 2 >> 2) + $w$s2] = HEAP32[($i_211 - 16 << 2 >> 2) + $w$s2] + HEAP32[($i_211 - 7 << 2 >> 2) + $w$s2] + (($35 >>> 19 | $35 << 13) ^ $35 >>> 10 ^ ($35 >>> 17 | $35 << 15)) + (($50 >>> 18 | $50 << 14) ^ $50 >>> 3 ^ ($50 >>> 7 | $50 << 25)) | 0;
    var $67 = $i_211 + 1 | 0;
    if (($67 | 0) == 64) {
      var $i_31 = 0;
      var $h_02 = $17;
      var $g_03 = $15;
      var $f_04 = $13;
      var $e_05 = $11;
      var $d_06 = $9;
      var $c_07 = $7;
      var $b_08 = $5;
      var $a_09 = $3;
      break;
    } else {
      var $i_211 = $67;
    }
  }
  while (1) {
    var $a_09;
    var $b_08;
    var $c_07;
    var $d_06;
    var $e_05;
    var $f_04;
    var $g_03;
    var $h_02;
    var $i_31;
    var $68 = _Sum1($e_05);
    var $77 = _Cho($e_05, $f_04, $g_03) + ($68 + $h_02) + HEAP32[($i_31 << 2) + 411296 >> 2] + HEAP32[($i_31 << 2 >> 2) + $w$s2] | 0;
    var $80 = $77 + $d_06 | 0;
    var $82 = _Sum0($a_09) + $77 + _Maj($a_09, $b_08, $c_07) | 0;
    var $83 = _Sum1($80);
    var $85 = $i_31 | 1;
    var $93 = _Cho($80, $e_05, $f_04) + ($83 + $g_03) + HEAP32[($85 << 2) + 411296 >> 2] + HEAP32[($85 << 2 >> 2) + $w$s2] | 0;
    var $96 = $93 + $c_07 | 0;
    var $98 = _Sum0($82) + $93 + _Maj($82, $a_09, $b_08) | 0;
    var $99 = _Sum1($96);
    var $101 = $i_31 | 2;
    var $109 = _Cho($96, $80, $e_05) + ($99 + $f_04) + HEAP32[($101 << 2) + 411296 >> 2] + HEAP32[($101 << 2 >> 2) + $w$s2] | 0;
    var $112 = $109 + $b_08 | 0;
    var $114 = _Sum0($98) + $109 + _Maj($98, $82, $a_09) | 0;
    var $115 = _Sum1($112);
    var $117 = $i_31 | 3;
    var $125 = _Cho($112, $96, $80) + ($115 + $e_05) + HEAP32[($117 << 2) + 411296 >> 2] + HEAP32[($117 << 2 >> 2) + $w$s2] | 0;
    var $128 = $125 + $a_09 | 0;
    var $130 = _Sum0($114) + $125 + _Maj($114, $98, $82) | 0;
    var $131 = _Sum1($128);
    var $133 = $i_31 | 4;
    var $141 = _Cho($128, $112, $96) + ($131 + $80) + HEAP32[($133 << 2) + 411296 >> 2] + HEAP32[($133 << 2 >> 2) + $w$s2] | 0;
    var $144 = $141 + $82 | 0;
    var $146 = _Sum0($130) + $141 + _Maj($130, $114, $98) | 0;
    var $147 = _Sum1($144);
    var $149 = $i_31 | 5;
    var $157 = _Cho($144, $128, $112) + ($147 + $96) + HEAP32[($149 << 2) + 411296 >> 2] + HEAP32[($149 << 2 >> 2) + $w$s2] | 0;
    var $160 = $157 + $98 | 0;
    var $162 = _Sum0($146) + $157 + _Maj($146, $130, $114) | 0;
    var $163 = _Sum1($160);
    var $165 = $i_31 | 6;
    var $173 = _Cho($160, $144, $128) + ($163 + $112) + HEAP32[($165 << 2) + 411296 >> 2] + HEAP32[($165 << 2 >> 2) + $w$s2] | 0;
    var $176 = $173 + $114 | 0;
    var $178 = _Sum0($162) + $173 + _Maj($162, $146, $130) | 0;
    var $179 = _Sum1($176);
    var $181 = $i_31 | 7;
    var $189 = _Cho($176, $160, $144) + ($179 + $128) + HEAP32[($181 << 2) + 411296 >> 2] + HEAP32[($181 << 2 >> 2) + $w$s2] | 0;
    var $192 = $189 + $130 | 0;
    var $194 = _Sum0($178) + $189 + _Maj($178, $162, $146) | 0;
    var $195 = $i_31 + 8 | 0;
    if (($195 | 0) < 64) {
      var $i_31 = $195;
      var $h_02 = $144;
      var $g_03 = $160;
      var $f_04 = $176;
      var $e_05 = $192;
      var $d_06 = $146;
      var $c_07 = $162;
      var $b_08 = $178;
      var $a_09 = $194;
    } else {
      break;
    }
  }
  HEAP32[$2$s2] = HEAP32[$2$s2] + $194 | 0;
  HEAP32[$4$s2] = HEAP32[$4$s2] + $178 | 0;
  HEAP32[$6$s2] = HEAP32[$6$s2] + $162 | 0;
  HEAP32[$8$s2] = HEAP32[$8$s2] + $146 | 0;
  HEAP32[$10$s2] = HEAP32[$10$s2] + $192 | 0;
  HEAP32[$12$s2] = HEAP32[$12$s2] + $176 | 0;
  HEAP32[$14$s2] = HEAP32[$14$s2] + $160 | 0;
  HEAP32[$16$s2] = HEAP32[$16$s2] + $144 | 0;
  STACKTOP = __stackBase__;
  return;
}
_transform935["X"] = 1;
function _sha512_write($context, $inbuf_arg, $inlen) {
  var $29$s2;
  var $6$s2;
  var $3$s2;
  var label = 0;
  var $1 = $context;
  var $3$s2 = ($context + 200 | 0) >> 2;
  var $4 = $context + 72 | 0;
  var $6$s2 = ($context + 64 | 0) >> 2;
  var $inlen_tr = $inlen;
  var $inbuf_arg_tr = $inbuf_arg;
  L228 : while (1) {
    var $inbuf_arg_tr;
    var $inlen_tr;
    if ((HEAP32[$3$s2] | 0) == 128) {
      _transform963($1, $4);
      __gcry_burn_stack(768);
      HEAP32[$3$s2] = 0;
      var $11$0 = (i64Math.add(HEAP32[$6$s2], HEAP32[$6$s2 + 1], 1, 0), HEAP32[tempDoublePtr >> 2]);
      var $11$1 = HEAP32[tempDoublePtr + 4 >> 2];
      HEAP32[$6$s2] = $11$0;
      HEAP32[$6$s2 + 1] = $11$1;
    }
    if (($inbuf_arg_tr | 0) == 0) {
      label = 198;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1_ph = $inbuf_arg_tr;
      var $_1_ph = $inlen_tr;
      break;
    } else {
      var $inbuf_0 = $inbuf_arg_tr;
      var $_0 = $inlen_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $inlen_tr = 0;
        var $inbuf_arg_tr = 0;
        continue L228;
      }
      var $19 = HEAP32[$3$s2];
      if (($19 | 0) >= 128) {
        label = 188;
        break L228;
      }
      var $23 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $19 + 1 | 0;
      HEAP8[$19 + ($context + 72) | 0] = $23;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 188) {
    _sha512_write($context, 0, 0);
    var $inbuf_1_ph = $inbuf_0;
    var $_1_ph = $_0;
  } else if (label == 198) {
    return;
  }
  var $_1_ph;
  var $inbuf_1_ph;
  L242 : do {
    if ($_1_ph >>> 0 > 127) {
      var $29$s2 = ($context + 64 | 0) >> 2;
      var $_13 = $_1_ph;
      var $inbuf_14 = $inbuf_1_ph;
      while (1) {
        var $inbuf_14;
        var $_13;
        _transform963($1, $inbuf_14);
        HEAP32[$3$s2] = 0;
        var $32$0 = (i64Math.add(HEAP32[$29$s2], HEAP32[$29$s2 + 1], 1, 0), HEAP32[tempDoublePtr >> 2]);
        var $32$1 = HEAP32[tempDoublePtr + 4 >> 2];
        HEAP32[$29$s2] = $32$0;
        HEAP32[$29$s2 + 1] = $32$1;
        var $33 = $_13 - 128 | 0;
        var $34 = $inbuf_14 + 128 | 0;
        if ($33 >>> 0 > 127) {
          var $_13 = $33;
          var $inbuf_14 = $34;
        } else {
          var $_1_lcssa = $33;
          var $inbuf_1_lcssa = $34;
          break L242;
        }
      }
    } else {
      var $_1_lcssa = $_1_ph;
      var $inbuf_1_lcssa = $inbuf_1_ph;
    }
  } while (0);
  var $inbuf_1_lcssa;
  var $_1_lcssa;
  __gcry_burn_stack(768);
  var $inbuf_2 = $inbuf_1_lcssa;
  var $_2 = $_1_lcssa;
  while (1) {
    var $_2;
    var $inbuf_2;
    if (($_2 | 0) == 0) {
      label = 197;
      break;
    }
    var $39 = HEAP32[$3$s2];
    if (($39 | 0) >= 128) {
      label = 199;
      break;
    }
    var $43 = HEAP8[$inbuf_2];
    HEAP32[$3$s2] = $39 + 1 | 0;
    HEAP8[$39 + ($context + 72) | 0] = $43;
    var $inbuf_2 = $inbuf_2 + 1 | 0;
    var $_2 = $_2 - 1 | 0;
  }
  if (label == 197) {
    return;
  } else if (label == 199) {
    return;
  }
}
_sha512_write["X"] = 1;
function _ROTR($x$0, $x$1, $n$0, $n$1) {
  Runtime.bitshift64($x$0, $x$1, 2, $n$0);
  var $1$0 = HEAP32[tempDoublePtr >> 2], $1$1 = HEAP32[tempDoublePtr + 4 >> 2];
  Runtime.bitshift64($x$0, $x$1, 0, (i64Math.subtract(64, 0, $n$0, $n$1), HEAP32[tempDoublePtr >> 2]));
  var $4$0 = HEAP32[tempDoublePtr >> 2] | $1$0;
  return tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | $1$1, $4$0;
}
function _Ch($x$0, $x$1, $y$0, $y$1, $z$0, $z$1) {
  return tempRet0 = $z$1 & ($x$1 ^ -1) ^ $y$1 & $x$1, $z$0 & ($x$0 ^ -1) ^ $y$0 & $x$0;
}
function _Maj966($x$0, $x$1, $y$0, $y$1, $z$0, $z$1) {
  return tempRet0 = ($z$1 ^ $y$1) & $x$1 ^ $z$1 & $y$1, ($z$0 ^ $y$0) & $x$0 ^ $z$0 & $y$0;
}
function _sha512_read($context) {
  return $context + 72 | 0;
}
function _sha384_init($context) {
  var $1 = $context;
  HEAP32[$1 >> 2] = -1056596264;
  HEAP32[$1 + 4 >> 2] = -876896931;
  var $3 = $context + 8 | 0;
  HEAP32[$3 >> 2] = 914150663;
  HEAP32[$3 + 4 >> 2] = 1654270250;
  var $5 = $context + 16 | 0;
  HEAP32[$5 >> 2] = 812702999;
  HEAP32[$5 + 4 >> 2] = -1856437926;
  var $7 = $context + 24 | 0;
  HEAP32[$7 >> 2] = -150054599;
  HEAP32[$7 + 4 >> 2] = 355462360;
  var $9 = $context + 32 | 0;
  HEAP32[$9 >> 2] = -4191439;
  HEAP32[$9 + 4 >> 2] = 1731405415;
  var $11 = $context + 40 | 0;
  HEAP32[$11 >> 2] = 1750603025;
  HEAP32[$11 + 4 >> 2] = -1900787065;
  var $13 = $context + 48 | 0;
  HEAP32[$13 >> 2] = 1694076839;
  HEAP32[$13 + 4 >> 2] = -619958771;
  var $15 = $context + 56 | 0;
  HEAP32[$15 >> 2] = -1090891868;
  HEAP32[$15 + 4 >> 2] = 1203062813;
  var $17 = $context + 64 | 0;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$17 + 4 >> 2] = 0;
  HEAP32[$context + 200 >> 2] = 0;
  return;
}
_sha384_init["X"] = 1;
function _sha512_final($context) {
  var $312$s2;
  var $279$s2;
  var $246$s2;
  var $213$s2;
  var $180$s2;
  var $147$s2;
  var $114$s2;
  var $81$s2;
  var $8$s2;
  var $1 = $context;
  _sha512_write($context, 0, 0);
  var $3 = $context + 64 | 0;
  var $4$0 = HEAP32[$3 >> 2];
  var $4$1 = HEAP32[$3 + 4 >> 2];
  var $8$s2 = ($context + 200 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $11$0 = _llvm_uadd_with_overflow_i64($4$0 << 7 | 0 >>> 25, $4$1 << 7 | $4$0 >>> 25, $9, ($9 | 0) < 0 ? -1 : 0);
  var $11$1 = tempRet0;
  var $msb_0$0 = (i64Math.add(tempRet1 & 1, 0, $4$1 >>> 25 | 0 << 7, 0 >>> 25 | 0 << 7), HEAP32[tempDoublePtr >> 2]);
  var $msb_0$1 = HEAP32[tempDoublePtr + 4 >> 2];
  var $14$0 = $11$0 << 3 | 0 >>> 29;
  var $17$0 = $msb_0$0 << 3 | 0 >>> 29 | ($11$1 >>> 29 | 0 << 3);
  HEAP32[$8$s2] = $9 + 1 | 0;
  var $20 = $context + 72 | 0;
  HEAP8[$9 + ($context + 72) | 0] = -128;
  var $22 = HEAP32[$8$s2];
  L260 : do {
    if (($9 | 0) < 112) {
      if (($22 | 0) < 112) {
        var $25 = $22;
      } else {
        break;
      }
      while (1) {
        var $25;
        HEAP32[$8$s2] = $25 + 1 | 0;
        HEAP8[$25 + ($context + 72) | 0] = 0;
        var $28 = HEAP32[$8$s2];
        if (($28 | 0) < 112) {
          var $25 = $28;
        } else {
          break L260;
        }
      }
    } else {
      L265 : do {
        if (($22 | 0) < 128) {
          var $30 = $22;
          while (1) {
            var $30;
            HEAP32[$8$s2] = $30 + 1 | 0;
            HEAP8[$30 + ($context + 72) | 0] = 0;
            var $33 = HEAP32[$8$s2];
            if (($33 | 0) < 128) {
              var $30 = $33;
            } else {
              break L265;
            }
          }
        }
      } while (0);
      _sha512_write($context, 0, 0);
      _memset($20, 0, 112);
    }
  } while (0);
  HEAP8[$context + 184 | 0] = ($msb_0$1 >>> 21 | 0 << 11) & 255;
  HEAP8[$context + 185 | 0] = ($msb_0$1 >>> 13 | 0 << 19) & 255;
  HEAP8[$context + 186 | 0] = ($msb_0$1 >>> 5 | 0 << 27) & 255;
  HEAP8[$context + 187 | 0] = ($msb_0$0 >>> 29 | $msb_0$1 << 3) & 255;
  HEAP8[$context + 188 | 0] = ($msb_0$0 >>> 21 | $msb_0$1 << 11) & 255;
  HEAP8[$context + 189 | 0] = ($msb_0$0 >>> 13 | $msb_0$1 << 19) & 255;
  HEAP8[$context + 190 | 0] = ($msb_0$0 >>> 5 | $msb_0$1 << 27) & 255;
  HEAP8[$context + 191 | 0] = $17$0 & 255;
  HEAP8[$context + 192 | 0] = ($11$1 >>> 21 | 0 << 11) & 255;
  HEAP8[$context + 193 | 0] = ($11$1 >>> 13 | 0 << 19) & 255;
  HEAP8[$context + 194 | 0] = ($11$1 >>> 5 | 0 << 27) & 255;
  HEAP8[$context + 195 | 0] = ($11$0 >>> 29 | $11$1 << 3) & 255;
  HEAP8[$context + 196 | 0] = ($11$0 >>> 21 | $11$1 << 11) & 255;
  HEAP8[$context + 197 | 0] = ($11$0 >>> 13 | $11$1 << 19) & 255;
  HEAP8[$context + 198 | 0] = ($11$0 >>> 5 | $11$1 << 27) & 255;
  HEAP8[$context + 199 | 0] = $14$0 & 255;
  _transform963($1, $20);
  __gcry_burn_stack(768);
  var $81$s2 = $context >> 2;
  HEAP8[$20] = (HEAP32[$81$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 73 | 0] = (HEAP32[$81$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 74 | 0] = (HEAP32[$81$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 75 | 0] = HEAP32[$81$s2 + 1] & 255;
  HEAP8[$context + 76 | 0] = (HEAP32[$81$s2] >>> 24 | HEAP32[$81$s2 + 1] << 8) & 255;
  HEAP8[$context + 77 | 0] = (HEAP32[$81$s2] >>> 16 | HEAP32[$81$s2 + 1] << 16) & 255;
  HEAP8[$context + 78 | 0] = (HEAP32[$81$s2] >>> 8 | HEAP32[$81$s2 + 1] << 24) & 255;
  HEAP8[$context + 79 | 0] = HEAP32[$81$s2] & 255;
  var $114$s2 = ($context + 8 | 0) >> 2;
  HEAP8[$context + 80 | 0] = (HEAP32[$114$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 81 | 0] = (HEAP32[$114$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 82 | 0] = (HEAP32[$114$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 83 | 0] = HEAP32[$114$s2 + 1] & 255;
  HEAP8[$context + 84 | 0] = (HEAP32[$114$s2] >>> 24 | HEAP32[$114$s2 + 1] << 8) & 255;
  HEAP8[$context + 85 | 0] = (HEAP32[$114$s2] >>> 16 | HEAP32[$114$s2 + 1] << 16) & 255;
  HEAP8[$context + 86 | 0] = (HEAP32[$114$s2] >>> 8 | HEAP32[$114$s2 + 1] << 24) & 255;
  HEAP8[$context + 87 | 0] = HEAP32[$114$s2] & 255;
  var $147$s2 = ($context + 16 | 0) >> 2;
  HEAP8[$context + 88 | 0] = (HEAP32[$147$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 89 | 0] = (HEAP32[$147$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 90 | 0] = (HEAP32[$147$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 91 | 0] = HEAP32[$147$s2 + 1] & 255;
  HEAP8[$context + 92 | 0] = (HEAP32[$147$s2] >>> 24 | HEAP32[$147$s2 + 1] << 8) & 255;
  HEAP8[$context + 93 | 0] = (HEAP32[$147$s2] >>> 16 | HEAP32[$147$s2 + 1] << 16) & 255;
  HEAP8[$context + 94 | 0] = (HEAP32[$147$s2] >>> 8 | HEAP32[$147$s2 + 1] << 24) & 255;
  HEAP8[$context + 95 | 0] = HEAP32[$147$s2] & 255;
  var $180$s2 = ($context + 24 | 0) >> 2;
  HEAP8[$context + 96 | 0] = (HEAP32[$180$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 97 | 0] = (HEAP32[$180$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 98 | 0] = (HEAP32[$180$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 99 | 0] = HEAP32[$180$s2 + 1] & 255;
  HEAP8[$context + 100 | 0] = (HEAP32[$180$s2] >>> 24 | HEAP32[$180$s2 + 1] << 8) & 255;
  HEAP8[$context + 101 | 0] = (HEAP32[$180$s2] >>> 16 | HEAP32[$180$s2 + 1] << 16) & 255;
  HEAP8[$context + 102 | 0] = (HEAP32[$180$s2] >>> 8 | HEAP32[$180$s2 + 1] << 24) & 255;
  HEAP8[$context + 103 | 0] = HEAP32[$180$s2] & 255;
  var $213$s2 = ($context + 32 | 0) >> 2;
  HEAP8[$context + 104 | 0] = (HEAP32[$213$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 105 | 0] = (HEAP32[$213$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 106 | 0] = (HEAP32[$213$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 107 | 0] = HEAP32[$213$s2 + 1] & 255;
  HEAP8[$context + 108 | 0] = (HEAP32[$213$s2] >>> 24 | HEAP32[$213$s2 + 1] << 8) & 255;
  HEAP8[$context + 109 | 0] = (HEAP32[$213$s2] >>> 16 | HEAP32[$213$s2 + 1] << 16) & 255;
  HEAP8[$context + 110 | 0] = (HEAP32[$213$s2] >>> 8 | HEAP32[$213$s2 + 1] << 24) & 255;
  HEAP8[$context + 111 | 0] = HEAP32[$213$s2] & 255;
  var $246$s2 = ($context + 40 | 0) >> 2;
  HEAP8[$context + 112 | 0] = (HEAP32[$246$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 113 | 0] = (HEAP32[$246$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 114 | 0] = (HEAP32[$246$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 115 | 0] = HEAP32[$246$s2 + 1] & 255;
  HEAP8[$context + 116 | 0] = (HEAP32[$246$s2] >>> 24 | HEAP32[$246$s2 + 1] << 8) & 255;
  HEAP8[$context + 117 | 0] = (HEAP32[$246$s2] >>> 16 | HEAP32[$246$s2 + 1] << 16) & 255;
  HEAP8[$context + 118 | 0] = (HEAP32[$246$s2] >>> 8 | HEAP32[$246$s2 + 1] << 24) & 255;
  HEAP8[$context + 119 | 0] = HEAP32[$246$s2] & 255;
  var $279$s2 = ($context + 48 | 0) >> 2;
  HEAP8[$context + 120 | 0] = (HEAP32[$279$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 121 | 0] = (HEAP32[$279$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 122 | 0] = (HEAP32[$279$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 123 | 0] = HEAP32[$279$s2 + 1] & 255;
  HEAP8[$context + 124 | 0] = (HEAP32[$279$s2] >>> 24 | HEAP32[$279$s2 + 1] << 8) & 255;
  HEAP8[$context + 125 | 0] = (HEAP32[$279$s2] >>> 16 | HEAP32[$279$s2 + 1] << 16) & 255;
  HEAP8[$context + 126 | 0] = (HEAP32[$279$s2] >>> 8 | HEAP32[$279$s2 + 1] << 24) & 255;
  HEAP8[$context + 127 | 0] = HEAP32[$279$s2] & 255;
  var $312$s2 = ($context + 56 | 0) >> 2;
  HEAP8[$context + 128 | 0] = (HEAP32[$312$s2 + 1] >>> 24 | 0 << 8) & 255;
  HEAP8[$context + 129 | 0] = (HEAP32[$312$s2 + 1] >>> 16 | 0 << 16) & 255;
  HEAP8[$context + 130 | 0] = (HEAP32[$312$s2 + 1] >>> 8 | 0 << 24) & 255;
  HEAP8[$context + 131 | 0] = HEAP32[$312$s2 + 1] & 255;
  HEAP8[$context + 132 | 0] = (HEAP32[$312$s2] >>> 24 | HEAP32[$312$s2 + 1] << 8) & 255;
  HEAP8[$context + 133 | 0] = (HEAP32[$312$s2] >>> 16 | HEAP32[$312$s2 + 1] << 16) & 255;
  HEAP8[$context + 134 | 0] = (HEAP32[$312$s2] >>> 8 | HEAP32[$312$s2 + 1] << 24) & 255;
  HEAP8[$context + 135 | 0] = HEAP32[$312$s2] & 255;
  return;
}
_sha512_final["X"] = 1;
function _run_selftests962($algo, $extended, $report) {
  if (($algo | 0) == 10) {
    var $ec_0 = _selftests_sha512($extended, $report);
  } else if (($algo | 0) == 9) {
    var $ec_0 = _selftests_sha384($extended, $report);
  } else {
    var $ec_0 = 5;
  }
  var $ec_0;
  return $ec_0;
}
function _selftests_sha384($extended, $report) {
  var $1 = __gcry_hash_selftest_check_one(9, 0, 470860, 3, 486600, 48);
  do {
    if (($1 | 0) == 0) {
      if (($extended | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      var $6 = __gcry_hash_selftest_check_one(9, 0, 465888, 112, 485720, 48);
      if (($6 | 0) != 0) {
        var $errtxt_0 = $6;
        var $what_0 = 467888;
        break;
      }
      var $9 = __gcry_hash_selftest_check_one(9, 1, 0, 0, 484824, 48);
      if (($9 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $errtxt_0 = $9;
        var $what_0 = 489924;
        break;
      }
      var $_0;
      return $_0;
    } else {
      var $errtxt_0 = $1;
      var $what_0 = 472280;
    }
  } while (0);
  var $what_0;
  var $errtxt_0;
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    return $_0;
  }
  FUNCTION_TABLE[$report](487440, 9, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  return $_0;
}
function _selftests_sha512($extended, $report) {
  var $1 = __gcry_hash_selftest_check_one(10, 0, 470860, 3, 469496, 64);
  do {
    if (($1 | 0) == 0) {
      if (($extended | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      var $6 = __gcry_hash_selftest_check_one(10, 0, 465888, 112, 464628, 64);
      if (($6 | 0) != 0) {
        var $errtxt_0 = $6;
        var $what_0 = 467888;
        break;
      }
      var $9 = __gcry_hash_selftest_check_one(10, 1, 0, 0, 488192, 64);
      if (($9 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $errtxt_0 = $9;
        var $what_0 = 489924;
        break;
      }
      var $_0;
      return $_0;
    } else {
      var $errtxt_0 = $1;
      var $what_0 = 472280;
    }
  } while (0);
  var $what_0;
  var $errtxt_0;
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    return $_0;
  }
  FUNCTION_TABLE[$report](487440, 10, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  return $_0;
}
function _transform963($hd, $data) {
  var $15$s2;
  var $13$s2;
  var $st$27$1$s2;
  var $st$27$0$s2;
  var $11$s2;
  var $9$s2;
  var $5$s2;
  var $3$s2;
  var $1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 640 | 0;
  var $w = __stackBase__;
  var $1$s2 = ($hd | 0) >> 2;
  var $2$0 = HEAP32[$1$s2];
  var $2$1 = HEAP32[$1$s2 + 1];
  var $3$s2 = ($hd + 8 | 0) >> 2;
  var $4$0 = HEAP32[$3$s2];
  var $4$1 = HEAP32[$3$s2 + 1];
  var $5 = $hd + 16 | 0, $5$s2 = $5 >> 2;
  var $6$0 = HEAP32[$5$s2];
  var $6$1 = HEAP32[$5$s2 + 1];
  var $7 = $hd + 24 | 0;
  var $8$0 = HEAP32[$7 >> 2];
  var $8$1 = HEAP32[$7 + 4 >> 2];
  var $9 = $hd + 32 | 0, $9$s2 = $9 >> 2;
  var $st$22$0 = $9 | 0;
  var $10$0 = HEAP32[$st$22$0 >> 2];
  var $st$22$1 = $9 + 4 | 0;
  var $10$1 = HEAP32[$st$22$1 >> 2];
  var $11 = $hd + 40 | 0, $11$s2 = $11 >> 2;
  var $st$27$0 = $11 | 0, $st$27$0$s2 = $st$27$0 >> 2;
  var $12$0 = HEAP32[$st$27$0$s2];
  var $st$27$1 = $11 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
  var $12$1 = HEAP32[$st$27$1$s2];
  var $13 = $hd + 48 | 0, $13$s2 = $13 >> 2;
  var $st$32$0 = $13 | 0;
  var $14$0 = HEAP32[$st$32$0 >> 2];
  var $st$32$1 = $13 + 4 | 0;
  var $14$1 = HEAP32[$st$32$1 >> 2];
  var $15$s2 = ($hd + 56 | 0) >> 2;
  var $16$0 = HEAP32[$15$s2];
  var $16$1 = HEAP32[$15$s2 + 1];
  var $i_012 = 0;
  var $_013 = $data;
  var $p2_014 = $w;
  while (1) {
    var $p2_014;
    var $_013;
    var $i_012;
    HEAP8[$p2_014 + 7 | 0] = HEAP8[$_013];
    HEAP8[$p2_014 + 6 | 0] = HEAP8[$_013 + 1 | 0];
    HEAP8[$p2_014 + 5 | 0] = HEAP8[$_013 + 2 | 0];
    HEAP8[$p2_014 + 4 | 0] = HEAP8[$_013 + 3 | 0];
    HEAP8[$p2_014 + 3 | 0] = HEAP8[$_013 + 4 | 0];
    HEAP8[$p2_014 + 2 | 0] = HEAP8[$_013 + 5 | 0];
    HEAP8[$p2_014 + 1 | 0] = HEAP8[$_013 + 6 | 0];
    HEAP8[$p2_014] = HEAP8[$_013 + 7 | 0];
    var $42 = $i_012 + 1 | 0;
    if (($42 | 0) == 16) {
      var $t_011 = 16;
      break;
    } else {
      var $i_012 = $42;
      var $_013 = $_013 + 8 | 0;
      var $p2_014 = $p2_014 + 8 | 0;
    }
  }
  while (1) {
    var $t_011;
    var $45 = ($t_011 - 2 << 3) + $w | 0;
    var $46$0 = HEAP32[$45 >> 2];
    var $46$1 = HEAP32[$45 + 4 >> 2];
    var $47$0 = _ROTR($46$0, $46$1, 19, 0);
    var $47$1 = tempRet0;
    var $48$0 = _ROTR($46$0, $46$1, 61, 0);
    var $51$1 = $47$1 ^ ($46$1 >>> 6 | 0 << 26) ^ tempRet0;
    var $53 = ($t_011 - 7 << 3) + $w | 0;
    var $st$23$0 = $53 | 0;
    var $54$0 = HEAP32[$st$23$0 >> 2];
    var $st$23$1 = $53 + 4 | 0;
    var $54$1 = HEAP32[$st$23$1 >> 2];
    var $56 = ($t_011 - 15 << 3) + $w | 0;
    var $57$0 = HEAP32[$56 >> 2];
    var $57$1 = HEAP32[$56 + 4 >> 2];
    var $58$0 = _ROTR($57$0, $57$1, 1, 0);
    var $58$1 = tempRet0;
    var $59$0 = _ROTR($57$0, $57$1, 8, 0);
    var $62$1 = $58$1 ^ ($57$1 >>> 7 | 0 << 25) ^ tempRet0;
    var $64 = ($t_011 - 16 << 3) + $w | 0;
    var $65$0 = HEAP32[$64 >> 2];
    var $65$1 = HEAP32[$64 + 4 >> 2];
    var $68$0 = (i64Math.add((i64Math.add((i64Math.add($47$0 ^ ($46$0 >>> 6 | $46$1 << 26) ^ $48$0, $51$1, $54$0, $54$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $65$0, $65$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $58$0 ^ ($57$0 >>> 7 | $57$1 << 25) ^ $59$0, $62$1), HEAP32[tempDoublePtr >> 2]);
    var $68$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $69 = ($t_011 << 3) + $w | 0;
    HEAP32[$69 >> 2] = $68$0;
    HEAP32[$69 + 4 >> 2] = $68$1;
    var $70 = $t_011 + 1 | 0;
    if (($70 | 0) == 80) {
      var $t_11 = 0;
      var $h_02$1 = $16$1;
      var $h_02$0 = $16$0;
      var $g_03$1 = $14$1;
      var $g_03$0 = $14$0;
      var $f_04$1 = $12$1;
      var $f_04$0 = $12$0;
      var $e_05$1 = $10$1;
      var $e_05$0 = $10$0;
      var $d_06$1 = $8$1;
      var $d_06$0 = $8$0;
      var $c_07$1 = $6$1;
      var $c_07$0 = $6$0;
      var $b_08$1 = $4$1;
      var $b_08$0 = $4$0;
      var $a_09$1 = $2$1;
      var $a_09$0 = $2$0;
      break;
    } else {
      var $t_011 = $70;
    }
  }
  while (1) {
    var $a_09$0;
    var $a_09$1;
    var $b_08$0;
    var $b_08$1;
    var $c_07$0;
    var $c_07$1;
    var $d_06$0;
    var $d_06$1;
    var $e_05$0;
    var $e_05$1;
    var $f_04$0;
    var $f_04$1;
    var $g_03$0;
    var $g_03$1;
    var $h_02$0;
    var $h_02$1;
    var $t_11;
    var $71$0 = _Sum1964($e_05$0, $e_05$1);
    var $71$1 = tempRet0;
    var $72$0 = _Ch($e_05$0, $e_05$1, $f_04$0, $f_04$1, $g_03$0, $g_03$1);
    var $72$1 = tempRet0;
    var $73 = ($t_11 << 3) + 410400 | 0;
    var $st$22$0 = $73 | 0;
    var $74$0 = HEAP32[$st$22$0 >> 2];
    var $st$22$1 = $73 + 4 | 0;
    var $74$1 = HEAP32[$st$22$1 >> 2];
    var $75 = ($t_11 << 3) + $w | 0;
    var $st$27$0 = $75 | 0, $st$27$0$s2 = $st$27$0 >> 2;
    var $76$0 = HEAP32[$st$27$0$s2];
    var $st$27$1 = $75 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
    var $76$1 = HEAP32[$st$27$1$s2];
    var $80$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($71$0, $71$1, $h_02$0, $h_02$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $72$0, $72$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $74$0, $74$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $76$0, $76$1), HEAP32[tempDoublePtr >> 2]);
    var $80$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $81$0 = _Sum0965($a_09$0, $a_09$1);
    var $81$1 = tempRet0;
    var $82$0 = _Maj966($a_09$0, $a_09$1, $b_08$0, $b_08$1, $c_07$0, $c_07$1);
    var $82$1 = tempRet0;
    var $83$0 = (i64Math.add($80$0, $80$1, $d_06$0, $d_06$1), HEAP32[tempDoublePtr >> 2]);
    var $83$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $85$0 = (i64Math.add((i64Math.add($81$0, $81$1, $80$0, $80$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $82$0, $82$1), HEAP32[tempDoublePtr >> 2]);
    var $85$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $86$0 = _Sum1964($83$0, $83$1);
    var $86$1 = tempRet0;
    var $87$0 = _Ch($83$0, $83$1, $e_05$0, $e_05$1, $f_04$0, $f_04$1);
    var $87$1 = tempRet0;
    var $88 = $t_11 | 1;
    var $89 = ($88 << 3) + 410400 | 0;
    var $90$0 = HEAP32[$89 >> 2];
    var $90$1 = HEAP32[$89 + 4 >> 2];
    var $91 = ($88 << 3) + $w | 0;
    var $92$0 = HEAP32[$91 >> 2];
    var $92$1 = HEAP32[$91 + 4 >> 2];
    var $96$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($86$0, $86$1, $g_03$0, $g_03$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $87$0, $87$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $90$0, $90$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $92$0, $92$1), HEAP32[tempDoublePtr >> 2]);
    var $96$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $97$0 = _Sum0965($85$0, $85$1);
    var $97$1 = tempRet0;
    var $98$0 = _Maj966($85$0, $85$1, $a_09$0, $a_09$1, $b_08$0, $b_08$1);
    var $98$1 = tempRet0;
    var $99$0 = (i64Math.add($96$0, $96$1, $c_07$0, $c_07$1), HEAP32[tempDoublePtr >> 2]);
    var $99$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $101$0 = (i64Math.add((i64Math.add($97$0, $97$1, $96$0, $96$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $98$0, $98$1), HEAP32[tempDoublePtr >> 2]);
    var $101$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $102$0 = _Sum1964($99$0, $99$1);
    var $102$1 = tempRet0;
    var $103$0 = _Ch($99$0, $99$1, $83$0, $83$1, $e_05$0, $e_05$1);
    var $103$1 = tempRet0;
    var $104 = $t_11 | 2;
    var $105 = ($104 << 3) + 410400 | 0;
    var $106$0 = HEAP32[$105 >> 2];
    var $106$1 = HEAP32[$105 + 4 >> 2];
    var $107 = ($104 << 3) + $w | 0;
    var $108$0 = HEAP32[$107 >> 2];
    var $108$1 = HEAP32[$107 + 4 >> 2];
    var $112$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($102$0, $102$1, $f_04$0, $f_04$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $103$0, $103$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $106$0, $106$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $108$0, $108$1), HEAP32[tempDoublePtr >> 2]);
    var $112$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $113$0 = _Sum0965($101$0, $101$1);
    var $113$1 = tempRet0;
    var $114$0 = _Maj966($101$0, $101$1, $85$0, $85$1, $a_09$0, $a_09$1);
    var $114$1 = tempRet0;
    var $115$0 = (i64Math.add($112$0, $112$1, $b_08$0, $b_08$1), HEAP32[tempDoublePtr >> 2]);
    var $115$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $117$0 = (i64Math.add((i64Math.add($113$0, $113$1, $112$0, $112$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $114$0, $114$1), HEAP32[tempDoublePtr >> 2]);
    var $117$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $118$0 = _Sum1964($115$0, $115$1);
    var $118$1 = tempRet0;
    var $119$0 = _Ch($115$0, $115$1, $99$0, $99$1, $83$0, $83$1);
    var $119$1 = tempRet0;
    var $120 = $t_11 | 3;
    var $121 = ($120 << 3) + 410400 | 0;
    var $122$0 = HEAP32[$121 >> 2];
    var $122$1 = HEAP32[$121 + 4 >> 2];
    var $123 = ($120 << 3) + $w | 0;
    var $124$0 = HEAP32[$123 >> 2];
    var $124$1 = HEAP32[$123 + 4 >> 2];
    var $128$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($118$0, $118$1, $e_05$0, $e_05$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $119$0, $119$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $122$0, $122$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $124$0, $124$1), HEAP32[tempDoublePtr >> 2]);
    var $128$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $129$0 = _Sum0965($117$0, $117$1);
    var $129$1 = tempRet0;
    var $130$0 = _Maj966($117$0, $117$1, $101$0, $101$1, $85$0, $85$1);
    var $130$1 = tempRet0;
    var $131$0 = (i64Math.add($128$0, $128$1, $a_09$0, $a_09$1), HEAP32[tempDoublePtr >> 2]);
    var $131$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $133$0 = (i64Math.add((i64Math.add($129$0, $129$1, $128$0, $128$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $130$0, $130$1), HEAP32[tempDoublePtr >> 2]);
    var $133$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $134$0 = _Sum1964($131$0, $131$1);
    var $134$1 = tempRet0;
    var $135$0 = _Ch($131$0, $131$1, $115$0, $115$1, $99$0, $99$1);
    var $135$1 = tempRet0;
    var $136 = $t_11 | 4;
    var $137 = ($136 << 3) + 410400 | 0;
    var $138$0 = HEAP32[$137 >> 2];
    var $138$1 = HEAP32[$137 + 4 >> 2];
    var $139 = ($136 << 3) + $w | 0;
    var $140$0 = HEAP32[$139 >> 2];
    var $140$1 = HEAP32[$139 + 4 >> 2];
    var $144$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($134$0, $134$1, $83$0, $83$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $135$0, $135$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $138$0, $138$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $140$0, $140$1), HEAP32[tempDoublePtr >> 2]);
    var $144$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $145$0 = _Sum0965($133$0, $133$1);
    var $145$1 = tempRet0;
    var $146$0 = _Maj966($133$0, $133$1, $117$0, $117$1, $101$0, $101$1);
    var $146$1 = tempRet0;
    var $147$0 = (i64Math.add($144$0, $144$1, $85$0, $85$1), HEAP32[tempDoublePtr >> 2]);
    var $147$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $149$0 = (i64Math.add((i64Math.add($145$0, $145$1, $144$0, $144$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $146$0, $146$1), HEAP32[tempDoublePtr >> 2]);
    var $149$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $150$0 = _Sum1964($147$0, $147$1);
    var $150$1 = tempRet0;
    var $151$0 = _Ch($147$0, $147$1, $131$0, $131$1, $115$0, $115$1);
    var $151$1 = tempRet0;
    var $152 = $t_11 | 5;
    var $153 = ($152 << 3) + 410400 | 0;
    var $154$0 = HEAP32[$153 >> 2];
    var $154$1 = HEAP32[$153 + 4 >> 2];
    var $155 = ($152 << 3) + $w | 0;
    var $156$0 = HEAP32[$155 >> 2];
    var $156$1 = HEAP32[$155 + 4 >> 2];
    var $160$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($150$0, $150$1, $99$0, $99$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $151$0, $151$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $154$0, $154$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $156$0, $156$1), HEAP32[tempDoublePtr >> 2]);
    var $160$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $161$0 = _Sum0965($149$0, $149$1);
    var $161$1 = tempRet0;
    var $162$0 = _Maj966($149$0, $149$1, $133$0, $133$1, $117$0, $117$1);
    var $162$1 = tempRet0;
    var $163$0 = (i64Math.add($160$0, $160$1, $101$0, $101$1), HEAP32[tempDoublePtr >> 2]);
    var $163$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $165$0 = (i64Math.add((i64Math.add($161$0, $161$1, $160$0, $160$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $162$0, $162$1), HEAP32[tempDoublePtr >> 2]);
    var $165$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $166$0 = _Sum1964($163$0, $163$1);
    var $166$1 = tempRet0;
    var $167$0 = _Ch($163$0, $163$1, $147$0, $147$1, $131$0, $131$1);
    var $167$1 = tempRet0;
    var $168 = $t_11 | 6;
    var $169 = ($168 << 3) + 410400 | 0;
    var $170$0 = HEAP32[$169 >> 2];
    var $170$1 = HEAP32[$169 + 4 >> 2];
    var $171 = ($168 << 3) + $w | 0;
    var $172$0 = HEAP32[$171 >> 2];
    var $172$1 = HEAP32[$171 + 4 >> 2];
    var $176$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($166$0, $166$1, $115$0, $115$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $167$0, $167$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $170$0, $170$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $172$0, $172$1), HEAP32[tempDoublePtr >> 2]);
    var $176$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $177$0 = _Sum0965($165$0, $165$1);
    var $177$1 = tempRet0;
    var $178$0 = _Maj966($165$0, $165$1, $149$0, $149$1, $133$0, $133$1);
    var $178$1 = tempRet0;
    var $179$0 = (i64Math.add($176$0, $176$1, $117$0, $117$1), HEAP32[tempDoublePtr >> 2]);
    var $179$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $181$0 = (i64Math.add((i64Math.add($177$0, $177$1, $176$0, $176$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $178$0, $178$1), HEAP32[tempDoublePtr >> 2]);
    var $181$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $182$0 = _Sum1964($179$0, $179$1);
    var $182$1 = tempRet0;
    var $183$0 = _Ch($179$0, $179$1, $163$0, $163$1, $147$0, $147$1);
    var $183$1 = tempRet0;
    var $184 = $t_11 | 7;
    var $185 = ($184 << 3) + 410400 | 0;
    var $186$0 = HEAP32[$185 >> 2];
    var $186$1 = HEAP32[$185 + 4 >> 2];
    var $187 = ($184 << 3) + $w | 0;
    var $188$0 = HEAP32[$187 >> 2];
    var $188$1 = HEAP32[$187 + 4 >> 2];
    var $192$0 = (i64Math.add((i64Math.add((i64Math.add((i64Math.add($182$0, $182$1, $131$0, $131$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $183$0, $183$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $186$0, $186$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $188$0, $188$1), HEAP32[tempDoublePtr >> 2]);
    var $192$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $193$0 = _Sum0965($181$0, $181$1);
    var $193$1 = tempRet0;
    var $194$0 = _Maj966($181$0, $181$1, $165$0, $165$1, $149$0, $149$1);
    var $194$1 = tempRet0;
    var $195$0 = (i64Math.add($192$0, $192$1, $133$0, $133$1), HEAP32[tempDoublePtr >> 2]);
    var $195$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $197$0 = (i64Math.add((i64Math.add($193$0, $193$1, $192$0, $192$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $194$0, $194$1), HEAP32[tempDoublePtr >> 2]);
    var $197$1 = HEAP32[tempDoublePtr + 4 >> 2];
    var $198 = $t_11 + 8 | 0;
    if (($198 | 0) < 80) {
      var $t_11 = $198;
      var $h_02$1 = $147$1;
      var $h_02$0 = $147$0;
      var $g_03$1 = $163$1;
      var $g_03$0 = $163$0;
      var $f_04$1 = $179$1;
      var $f_04$0 = $179$0;
      var $e_05$1 = $195$1;
      var $e_05$0 = $195$0;
      var $d_06$1 = $149$1;
      var $d_06$0 = $149$0;
      var $c_07$1 = $165$1;
      var $c_07$0 = $165$0;
      var $b_08$1 = $181$1;
      var $b_08$0 = $181$0;
      var $a_09$1 = $197$1;
      var $a_09$0 = $197$0;
    } else {
      break;
    }
  }
  var $202$0 = (i64Math.add(HEAP32[$1$s2], HEAP32[$1$s2 + 1], $197$0, $197$1), HEAP32[tempDoublePtr >> 2]);
  var $202$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$1$s2] = $202$0;
  HEAP32[$1$s2 + 1] = $202$1;
  var $204$0 = (i64Math.add(HEAP32[$3$s2], HEAP32[$3$s2 + 1], $181$0, $181$1), HEAP32[tempDoublePtr >> 2]);
  var $204$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$3$s2] = $204$0;
  HEAP32[$3$s2 + 1] = $204$1;
  var $206$0 = (i64Math.add(HEAP32[$5$s2], HEAP32[$5$s2 + 1], $165$0, $165$1), HEAP32[tempDoublePtr >> 2]);
  var $206$1 = HEAP32[tempDoublePtr + 4 >> 2];
  var $st$23$0 = $5 | 0;
  HEAP32[$st$23$0 >> 2] = $206$0;
  var $st$23$1 = $5 + 4 | 0;
  HEAP32[$st$23$1 >> 2] = $206$1;
  var $st$27$0 = $7 | 0, $st$27$0$s2 = $st$27$0 >> 2;
  var $st$27$1 = $7 + 4 | 0, $st$27$1$s2 = $st$27$1 >> 2;
  var $208$0 = (i64Math.add(HEAP32[$st$27$0$s2], HEAP32[$st$27$1$s2], $149$0, $149$1), HEAP32[tempDoublePtr >> 2]);
  var $208$1 = HEAP32[tempDoublePtr + 4 >> 2];
  var $st$32$0 = $7 | 0;
  HEAP32[$st$32$0 >> 2] = $208$0;
  var $st$32$1 = $7 + 4 | 0;
  HEAP32[$st$32$1 >> 2] = $208$1;
  var $210$0 = (i64Math.add(HEAP32[$9$s2], HEAP32[$9$s2 + 1], $195$0, $195$1), HEAP32[tempDoublePtr >> 2]);
  var $210$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$9$s2] = $210$0;
  HEAP32[$9$s2 + 1] = $210$1;
  var $212$0 = (i64Math.add(HEAP32[$11$s2], HEAP32[$11$s2 + 1], $179$0, $179$1), HEAP32[tempDoublePtr >> 2]);
  var $212$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$11$s2] = $212$0;
  HEAP32[$11$s2 + 1] = $212$1;
  var $214$0 = (i64Math.add(HEAP32[$13$s2], HEAP32[$13$s2 + 1], $163$0, $163$1), HEAP32[tempDoublePtr >> 2]);
  var $214$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$13$s2] = $214$0;
  HEAP32[$13$s2 + 1] = $214$1;
  var $216$0 = (i64Math.add(HEAP32[$15$s2], HEAP32[$15$s2 + 1], $147$0, $147$1), HEAP32[tempDoublePtr >> 2]);
  var $216$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$15$s2] = $216$0;
  HEAP32[$15$s2 + 1] = $216$1;
  STACKTOP = __stackBase__;
  return;
}
_transform963["X"] = 1;
function _Sum1964($x$0, $x$1) {
  var $1$0 = _ROTR($x$0, $x$1, 14, 0);
  var $1$1 = tempRet0;
  var $2$0 = _ROTR($x$0, $x$1, 18, 0);
  var $2$1 = tempRet0;
  var $3$0 = _ROTR($x$0, $x$1, 41, 0);
  return tempRet0 = $2$1 ^ $1$1 ^ tempRet0, $2$0 ^ $1$0 ^ $3$0;
}
function _Sum0965($x$0, $x$1) {
  var $1$0 = _ROTR($x$0, $x$1, 28, 0);
  var $1$1 = tempRet0;
  var $2$0 = _ROTR($x$0, $x$1, 34, 0);
  var $2$1 = tempRet0;
  var $3$0 = _ROTR($x$0, $x$1, 39, 0);
  return tempRet0 = $2$1 ^ $1$1 ^ tempRet0, $2$0 ^ $1$0 ^ $3$0;
}
function _tiger_init($context) {
  _do_init($context, 0);
  return;
}
function _tiger_write($context, $inbuf_arg, $inlen) {
  var $3$s2;
  var label = 0;
  var $1 = $context;
  var $3$s2 = ($context + 88 | 0) >> 2;
  var $4 = $context + 24 | 0;
  var $6 = $context + 92 | 0;
  var $inlen_tr = $inlen;
  var $inbuf_arg_tr = $inbuf_arg;
  L313 : while (1) {
    var $inbuf_arg_tr;
    var $inlen_tr;
    if ((HEAP32[$3$s2] | 0) == 64) {
      _transform981($1, $4);
      __gcry_burn_stack(212);
      HEAP32[$3$s2] = 0;
      HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1 | 0;
    }
    if (($inbuf_arg_tr | 0) == 0) {
      label = 265;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1_ph = $inbuf_arg_tr;
      var $_1_ph = $inlen_tr;
      break;
    } else {
      var $inbuf_0 = $inbuf_arg_tr;
      var $_0 = $inlen_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $inlen_tr = 0;
        var $inbuf_arg_tr = 0;
        continue L313;
      }
      var $19 = HEAP32[$3$s2];
      if (($19 | 0) >= 64) {
        label = 254;
        break L313;
      }
      var $23 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $19 + 1 | 0;
      HEAP8[$19 + ($context + 24) | 0] = $23;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 254) {
    _tiger_write($context, 0, 0);
    var $inbuf_1_ph = $inbuf_0;
    var $_1_ph = $_0;
  } else if (label == 265) {
    return;
  }
  var $_1_ph;
  var $inbuf_1_ph;
  L327 : do {
    if ($_1_ph >>> 0 > 63) {
      var $29 = $context + 92 | 0;
      var $_13 = $_1_ph;
      var $inbuf_14 = $inbuf_1_ph;
      while (1) {
        var $inbuf_14;
        var $_13;
        _transform981($1, $inbuf_14);
        HEAP32[$3$s2] = 0;
        HEAP32[$29 >> 2] = HEAP32[$29 >> 2] + 1 | 0;
        var $33 = $_13 - 64 | 0;
        var $34 = $inbuf_14 + 64 | 0;
        if ($33 >>> 0 > 63) {
          var $_13 = $33;
          var $inbuf_14 = $34;
        } else {
          var $_1_lcssa = $33;
          var $inbuf_1_lcssa = $34;
          break L327;
        }
      }
    } else {
      var $_1_lcssa = $_1_ph;
      var $inbuf_1_lcssa = $inbuf_1_ph;
    }
  } while (0);
  var $inbuf_1_lcssa;
  var $_1_lcssa;
  __gcry_burn_stack(212);
  var $inbuf_2 = $inbuf_1_lcssa;
  var $_2 = $_1_lcssa;
  while (1) {
    var $_2;
    var $inbuf_2;
    if (($_2 | 0) == 0) {
      label = 263;
      break;
    }
    var $39 = HEAP32[$3$s2];
    if (($39 | 0) >= 64) {
      label = 264;
      break;
    }
    var $43 = HEAP8[$inbuf_2];
    HEAP32[$3$s2] = $39 + 1 | 0;
    HEAP8[$39 + ($context + 24) | 0] = $43;
    var $inbuf_2 = $inbuf_2 + 1 | 0;
    var $_2 = $_2 - 1 | 0;
  }
  if (label == 263) {
    return;
  } else if (label == 264) {
    return;
  }
}
_tiger_write["X"] = 1;
function _tiger_read($context) {
  return $context + 24 | 0;
}
function _do_init($context, $variant) {
  var $1 = $context;
  HEAP32[$1 >> 2] = -1985229329;
  HEAP32[$1 + 4 >> 2] = 19088743;
  var $3 = $context + 8 | 0;
  HEAP32[$3 >> 2] = 1985229328;
  HEAP32[$3 + 4 >> 2] = -19088744;
  var $5 = $context + 16 | 0;
  HEAP32[$5 >> 2] = -1011687033;
  HEAP32[$5 + 4 >> 2] = -258562636;
  HEAP32[$context + 92 >> 2] = 0;
  HEAP32[$context + 88 >> 2] = 0;
  HEAP32[$context + 96 >> 2] = $variant;
  return;
}
function _key_schedule($x) {
  var $29$s2;
  var $22$s2;
  var $19$s2;
  var $16$s2;
  var $9$s2;
  var $6$s2;
  var $1$s2;
  var $x$s2 = $x >> 2;
  var $1$s2 = ($x + 56 | 0) >> 2;
  var $5$0 = (i64Math.subtract(HEAP32[$x$s2], HEAP32[$x$s2 + 1], HEAP32[$1$s2] ^ -1515870811, HEAP32[$1$s2 + 1] ^ -1515870811), HEAP32[tempDoublePtr >> 2]);
  var $5$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$x$s2] = $5$0;
  HEAP32[$x$s2 + 1] = $5$1;
  var $6$s2 = ($x + 8 | 0) >> 2;
  var $8$0 = HEAP32[$6$s2] ^ $5$0;
  var $8$1 = HEAP32[$6$s2 + 1] ^ $5$1;
  HEAP32[$6$s2] = $8$0;
  HEAP32[$6$s2 + 1] = $8$1;
  var $9$s2 = ($x + 16 | 0) >> 2;
  var $11$0 = (i64Math.add(HEAP32[$9$s2], HEAP32[$9$s2 + 1], $8$0, $8$1), HEAP32[tempDoublePtr >> 2]);
  var $11$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$9$s2] = $11$0;
  HEAP32[$9$s2 + 1] = $11$1;
  var $12$0 = HEAP32[$6$s2];
  var $16$s2 = ($x + 24 | 0) >> 2;
  var $18$0 = (i64Math.subtract(HEAP32[$16$s2], HEAP32[$16$s2 + 1], $11$0 ^ -524288 ^ ($12$0 << 19 | 0 >>> 13), $11$1 ^ -1 ^ (HEAP32[$6$s2 + 1] << 19 | $12$0 >>> 13)), HEAP32[tempDoublePtr >> 2]);
  var $18$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$16$s2] = $18$0;
  HEAP32[$16$s2 + 1] = $18$1;
  var $19$s2 = ($x + 32 | 0) >> 2;
  var $21$0 = $18$0 ^ HEAP32[$19$s2];
  var $21$1 = $18$1 ^ HEAP32[$19$s2 + 1];
  HEAP32[$19$s2] = $21$0;
  HEAP32[$19$s2 + 1] = $21$1;
  var $22$s2 = ($x + 40 | 0) >> 2;
  var $24$0 = (i64Math.add($21$0, $21$1, HEAP32[$22$s2], HEAP32[$22$s2 + 1]), HEAP32[tempDoublePtr >> 2]);
  var $24$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$22$s2] = $24$0;
  HEAP32[$22$s2 + 1] = $24$1;
  var $25$1 = HEAP32[$19$s2 + 1];
  var $29$s2 = ($x + 48 | 0) >> 2;
  var $31$0 = (i64Math.subtract(HEAP32[$29$s2], HEAP32[$29$s2 + 1], $24$0 ^ -1 ^ (HEAP32[$19$s2] >>> 23 | $25$1 << 9), $24$1 ^ 511 ^ ($25$1 >>> 23 | 0 << 9)), HEAP32[tempDoublePtr >> 2]);
  var $31$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$29$s2] = $31$0;
  HEAP32[$29$s2 + 1] = $31$1;
  var $33$0 = $31$0 ^ HEAP32[$1$s2];
  var $33$1 = $31$1 ^ HEAP32[$1$s2 + 1];
  HEAP32[$1$s2] = $33$0;
  HEAP32[$1$s2 + 1] = $33$1;
  var $35$0 = (i64Math.add($33$0, $33$1, HEAP32[$x$s2], HEAP32[$x$s2 + 1]), HEAP32[tempDoublePtr >> 2]);
  var $35$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$x$s2] = $35$0;
  HEAP32[$x$s2 + 1] = $35$1;
  var $36$0 = HEAP32[$1$s2];
  var $41$0 = (i64Math.subtract(HEAP32[$6$s2], HEAP32[$6$s2 + 1], ($36$0 << 19 | 0 >>> 13) ^ -524288 ^ $35$0, (HEAP32[$1$s2 + 1] << 19 | $36$0 >>> 13) ^ -1 ^ $35$1), HEAP32[tempDoublePtr >> 2]);
  var $41$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$6$s2] = $41$0;
  HEAP32[$6$s2 + 1] = $41$1;
  var $43$0 = $41$0 ^ HEAP32[$9$s2];
  var $43$1 = $41$1 ^ HEAP32[$9$s2 + 1];
  HEAP32[$9$s2] = $43$0;
  HEAP32[$9$s2 + 1] = $43$1;
  var $45$0 = (i64Math.add($43$0, $43$1, HEAP32[$16$s2], HEAP32[$16$s2 + 1]), HEAP32[tempDoublePtr >> 2]);
  var $45$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$16$s2] = $45$0;
  HEAP32[$16$s2 + 1] = $45$1;
  var $46$1 = HEAP32[$9$s2 + 1];
  var $51$0 = (i64Math.subtract(HEAP32[$19$s2], HEAP32[$19$s2 + 1], (HEAP32[$9$s2] >>> 23 | $46$1 << 9) ^ -1 ^ $45$0, ($46$1 >>> 23 | 0 << 9) ^ 511 ^ $45$1), HEAP32[tempDoublePtr >> 2]);
  var $51$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$19$s2] = $51$0;
  HEAP32[$19$s2 + 1] = $51$1;
  var $53$0 = $51$0 ^ HEAP32[$22$s2];
  var $53$1 = $51$1 ^ HEAP32[$22$s2 + 1];
  HEAP32[$22$s2] = $53$0;
  HEAP32[$22$s2 + 1] = $53$1;
  var $55$0 = (i64Math.add($53$0, $53$1, HEAP32[$29$s2], HEAP32[$29$s2 + 1]), HEAP32[tempDoublePtr >> 2]);
  var $55$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$29$s2] = $55$0;
  HEAP32[$29$s2 + 1] = $55$1;
  var $58$0 = (i64Math.subtract(HEAP32[$1$s2], HEAP32[$1$s2 + 1], $55$0 ^ -1985229329, $55$1 ^ 19088743), HEAP32[tempDoublePtr >> 2]);
  var $58$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$1$s2] = $58$0;
  HEAP32[$1$s2 + 1] = $58$1;
  return;
}
_key_schedule["X"] = 1;
function _tiger_round($ra, $rb, $rc, $x$0, $x$1, $mul) {
  var $2$0 = HEAP32[$rb >> 2];
  var $2$1 = HEAP32[$rb + 4 >> 2];
  var $4$0 = HEAP32[$rc >> 2] ^ $x$0;
  var $4$1 = HEAP32[$rc + 4 >> 2] ^ $x$1;
  var $6 = (($4$0 & 255) << 3) + 424860 | 0;
  var $10 = ((($4$0 >>> 16 | $4$1 << 16) & 255) << 3) + 422556 | 0;
  var $14 = (($4$1 & 255) << 3) + 420252 | 0;
  var $18 = ((($4$1 >>> 16 | 0 << 16) & 255) << 3) + 417948 | 0;
  var $23$0 = (i64Math.subtract(HEAP32[$ra >> 2], HEAP32[$ra + 4 >> 2], HEAP32[$10 >> 2] ^ HEAP32[$6 >> 2] ^ HEAP32[$14 >> 2] ^ HEAP32[$18 >> 2], HEAP32[$10 + 4 >> 2] ^ HEAP32[$6 + 4 >> 2] ^ HEAP32[$14 + 4 >> 2] ^ HEAP32[$18 + 4 >> 2]), HEAP32[tempDoublePtr >> 2]);
  var $23$1 = HEAP32[tempDoublePtr + 4 >> 2];
  var $26 = ((($4$0 >>> 8 | $4$1 << 24) & 255) << 3) + 417948 | 0;
  var $30 = ((($4$0 >>> 24 | $4$1 << 8) & 255) << 3) + 420252 | 0;
  var $34 = ((($4$1 >>> 8 | 0 << 24) & 255) << 3) + 422556 | 0;
  var $38 = (($4$1 >>> 24 | 0 << 8) << 3) + 424860 | 0;
  var $45$0 = (i64Math.multiply((i64Math.add(HEAP32[$30 >> 2] ^ HEAP32[$26 >> 2] ^ HEAP32[$34 >> 2] ^ HEAP32[$38 >> 2], HEAP32[$30 + 4 >> 2] ^ HEAP32[$26 + 4 >> 2] ^ HEAP32[$34 + 4 >> 2] ^ HEAP32[$38 + 4 >> 2], $2$0, $2$1), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $mul, ($mul | 0) < 0 ? -1 : 0), HEAP32[tempDoublePtr >> 2]);
  var $45$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$ra >> 2] = $23$0;
  HEAP32[$ra + 4 >> 2] = $23$1;
  HEAP32[$rb >> 2] = $45$0;
  HEAP32[$rb + 4 >> 2] = $45$1;
  HEAP32[$rc >> 2] = $4$0;
  HEAP32[$rc + 4 >> 2] = $4$1;
  return;
}
_tiger_round["X"] = 1;
function _tiger_final($context) {
  var $226$s2;
  var $193$s2;
  var $130$s2;
  var $97$s2;
  var $63$s2;
  var $13$s2;
  var $1 = $context;
  var $3 = $context + 96 | 0;
  var $6 = (HEAP32[$3 >> 2] | 0) == 2 ? -128 : 1;
  _tiger_write($context, 0, 0);
  var $9 = HEAP32[$context + 92 >> 2];
  var $13$s2 = ($context + 88 | 0) >> 2;
  var $14 = HEAP32[$13$s2];
  var $15 = _llvm_uadd_with_overflow_i32($9 << 6, $14);
  var $msb_0 = (tempRet0 & 1) + ($9 >>> 26) | 0;
  var $18 = $15 << 3;
  var $21 = $msb_0 << 3 | $15 >>> 29;
  HEAP32[$13$s2] = $14 + 1 | 0;
  var $24 = $context + 24 | 0;
  HEAP8[$14 + ($context + 24) | 0] = $6;
  var $26 = HEAP32[$13$s2];
  L344 : do {
    if (($14 | 0) < 56) {
      if (($26 | 0) < 56) {
        var $29 = $26;
      } else {
        break;
      }
      while (1) {
        var $29;
        HEAP32[$13$s2] = $29 + 1 | 0;
        HEAP8[$29 + ($context + 24) | 0] = 0;
        var $32 = HEAP32[$13$s2];
        if (($32 | 0) < 56) {
          var $29 = $32;
        } else {
          break L344;
        }
      }
    } else {
      L346 : do {
        if (($26 | 0) < 64) {
          var $34 = $26;
          while (1) {
            var $34;
            HEAP32[$13$s2] = $34 + 1 | 0;
            HEAP8[$34 + ($context + 24) | 0] = 0;
            var $37 = HEAP32[$13$s2];
            if (($37 | 0) < 64) {
              var $34 = $37;
            } else {
              break L346;
            }
          }
        }
      } while (0);
      _tiger_write($context, 0, 0);
      _memset($24, 0, 56);
    }
  } while (0);
  HEAP8[$context + 80 | 0] = $18 & 255;
  HEAP8[$context + 81 | 0] = $15 >>> 5 & 255;
  HEAP8[$context + 82 | 0] = $15 >>> 13 & 255;
  HEAP8[$context + 83 | 0] = $15 >>> 21 & 255;
  HEAP8[$context + 84 | 0] = $21 & 255;
  HEAP8[$context + 85 | 0] = $msb_0 >>> 5 & 255;
  HEAP8[$context + 86 | 0] = $msb_0 >>> 13 & 255;
  HEAP8[$context + 87 | 0] = $msb_0 >>> 21 & 255;
  _transform981($1, $24);
  __gcry_burn_stack(212);
  var $63$s2 = $context >> 2;
  var $64$0 = HEAP32[$63$s2];
  if ((HEAP32[$3 >> 2] | 0) == 0) {
    HEAP8[$24] = (HEAP32[$63$s2 + 1] >>> 24 | 0 << 8) & 255;
    HEAP8[$context + 25 | 0] = (HEAP32[$63$s2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[$context + 26 | 0] = (HEAP32[$63$s2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[$context + 27 | 0] = HEAP32[$63$s2 + 1] & 255;
    HEAP8[$context + 28 | 0] = (HEAP32[$63$s2] >>> 24 | HEAP32[$63$s2 + 1] << 8) & 255;
    HEAP8[$context + 29 | 0] = (HEAP32[$63$s2] >>> 16 | HEAP32[$63$s2 + 1] << 16) & 255;
    HEAP8[$context + 30 | 0] = (HEAP32[$63$s2] >>> 8 | HEAP32[$63$s2 + 1] << 24) & 255;
    HEAP8[$context + 31 | 0] = HEAP32[$63$s2] & 255;
    var $97 = $context + 8 | 0, $97$s2 = $97 >> 2;
    var $st$76$0 = $97 | 0;
    var $st$76$1 = $97 + 4 | 0;
    HEAP8[$context + 32 | 0] = (HEAP32[$st$76$1 >> 2] >>> 24 | 0 << 8) & 255;
    HEAP8[$context + 33 | 0] = (HEAP32[$97$s2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[$context + 34 | 0] = (HEAP32[$97$s2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[$context + 35 | 0] = HEAP32[$97$s2 + 1] & 255;
    HEAP8[$context + 36 | 0] = (HEAP32[$97$s2] >>> 24 | HEAP32[$97$s2 + 1] << 8) & 255;
    HEAP8[$context + 37 | 0] = (HEAP32[$97$s2] >>> 16 | HEAP32[$97$s2 + 1] << 16) & 255;
    HEAP8[$context + 38 | 0] = (HEAP32[$97$s2] >>> 8 | HEAP32[$97$s2 + 1] << 24) & 255;
    HEAP8[$context + 39 | 0] = HEAP32[$97$s2] & 255;
    var $130 = $context + 16 | 0, $130$s2 = $130 >> 2;
    var $st$156$0 = $130 | 0;
    var $st$156$1 = $130 + 4 | 0;
    HEAP8[$context + 40 | 0] = (HEAP32[$st$156$1 >> 2] >>> 24 | 0 << 8) & 255;
    HEAP8[$context + 41 | 0] = (HEAP32[$130$s2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[$context + 42 | 0] = (HEAP32[$130$s2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[$context + 43 | 0] = HEAP32[$130$s2 + 1] & 255;
    HEAP8[$context + 44 | 0] = (HEAP32[$130$s2] >>> 24 | HEAP32[$130$s2 + 1] << 8) & 255;
    HEAP8[$context + 45 | 0] = (HEAP32[$130$s2] >>> 16 | HEAP32[$130$s2 + 1] << 16) & 255;
    HEAP8[$context + 46 | 0] = (HEAP32[$130$s2] >>> 8 | HEAP32[$130$s2 + 1] << 24) & 255;
    HEAP8[$context + 47 | 0] = HEAP32[$130$s2] & 255;
    return;
  } else {
    HEAP8[$24] = $64$0 & 255;
    HEAP8[$context + 25 | 0] = (HEAP32[$63$s2] >>> 8 | HEAP32[$63$s2 + 1] << 24) & 255;
    HEAP8[$context + 26 | 0] = (HEAP32[$63$s2] >>> 16 | HEAP32[$63$s2 + 1] << 16) & 255;
    HEAP8[$context + 27 | 0] = (HEAP32[$63$s2] >>> 24 | HEAP32[$63$s2 + 1] << 8) & 255;
    HEAP8[$context + 28 | 0] = HEAP32[$63$s2 + 1] & 255;
    HEAP8[$context + 29 | 0] = (HEAP32[$63$s2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[$context + 30 | 0] = (HEAP32[$63$s2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[$context + 31 | 0] = (HEAP32[$63$s2 + 1] >>> 24 | 0 << 8) & 255;
    var $193 = $context + 8 | 0, $193$s2 = $193 >> 2;
    var $st$76$0 = $193 | 0;
    var $st$76$1 = $193 + 4 | 0;
    HEAP8[$context + 32 | 0] = HEAP32[$st$76$0 >> 2] & 255;
    HEAP8[$context + 33 | 0] = (HEAP32[$193$s2] >>> 8 | HEAP32[$193$s2 + 1] << 24) & 255;
    HEAP8[$context + 34 | 0] = (HEAP32[$193$s2] >>> 16 | HEAP32[$193$s2 + 1] << 16) & 255;
    HEAP8[$context + 35 | 0] = (HEAP32[$193$s2] >>> 24 | HEAP32[$193$s2 + 1] << 8) & 255;
    HEAP8[$context + 36 | 0] = HEAP32[$193$s2 + 1] & 255;
    HEAP8[$context + 37 | 0] = (HEAP32[$193$s2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[$context + 38 | 0] = (HEAP32[$193$s2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[$context + 39 | 0] = (HEAP32[$193$s2 + 1] >>> 24 | 0 << 8) & 255;
    var $226 = $context + 16 | 0, $226$s2 = $226 >> 2;
    var $st$156$0 = $226 | 0;
    var $st$156$1 = $226 + 4 | 0;
    HEAP8[$context + 40 | 0] = HEAP32[$st$156$0 >> 2] & 255;
    HEAP8[$context + 41 | 0] = (HEAP32[$226$s2] >>> 8 | HEAP32[$226$s2 + 1] << 24) & 255;
    HEAP8[$context + 42 | 0] = (HEAP32[$226$s2] >>> 16 | HEAP32[$226$s2 + 1] << 16) & 255;
    HEAP8[$context + 43 | 0] = (HEAP32[$226$s2] >>> 24 | HEAP32[$226$s2 + 1] << 8) & 255;
    HEAP8[$context + 44 | 0] = HEAP32[$226$s2 + 1] & 255;
    HEAP8[$context + 45 | 0] = (HEAP32[$226$s2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[$context + 46 | 0] = (HEAP32[$226$s2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[$context + 47 | 0] = (HEAP32[$226$s2 + 1] >>> 24 | 0 << 8) & 255;
    return;
  }
}
_tiger_final["X"] = 1;
function _tiger1_init($context) {
  _do_init($context, 1);
  return;
}
function _tiger2_init($context) {
  _do_init($context, 2);
  return;
}
function _transform981($hd, $data) {
  var $7$s2;
  var $5$s2;
  var $3$s2;
  var $c$s2;
  var $b$s2;
  var $a$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  var $a = __stackBase__, $a$s2 = $a >> 2;
  var $b = __stackBase__ + 8, $b$s2 = $b >> 2;
  var $c = __stackBase__ + 16, $c$s2 = $c >> 2;
  var $x = __stackBase__ + 24;
  var $1 = $x | 0;
  _memcpy($x, $data, 64);
  var $3$s2 = ($hd | 0) >> 2;
  var $4$0 = HEAP32[$3$s2];
  var $4$1 = HEAP32[$3$s2 + 1];
  HEAP32[$a$s2] = $4$0;
  HEAP32[$a$s2 + 1] = $4$1;
  var $5$s2 = ($hd + 8 | 0) >> 2;
  var $6$0 = HEAP32[$5$s2];
  var $6$1 = HEAP32[$5$s2 + 1];
  HEAP32[$b$s2] = $6$0;
  HEAP32[$b$s2 + 1] = $6$1;
  var $7$s2 = ($hd + 16 | 0) >> 2;
  var $8$0 = HEAP32[$7$s2];
  var $8$1 = HEAP32[$7$s2 + 1];
  HEAP32[$c$s2] = $8$0;
  HEAP32[$c$s2 + 1] = $8$1;
  _pass($a, $b, $c, $1, 5);
  _key_schedule($1);
  _pass($c, $a, $b, $1, 7);
  _key_schedule($1);
  _pass($b, $c, $a, $1, 9);
  var $10$1 = HEAP32[$a$s2 + 1] ^ $4$1;
  HEAP32[$a$s2] = HEAP32[$a$s2] ^ $4$0;
  HEAP32[$a$s2 + 1] = $10$1;
  var $12$0 = (i64Math.subtract(HEAP32[$b$s2], HEAP32[$b$s2 + 1], $6$0, $6$1), HEAP32[tempDoublePtr >> 2]);
  var $12$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$b$s2] = $12$0;
  HEAP32[$b$s2 + 1] = $12$1;
  var $14$0 = (i64Math.add(HEAP32[$c$s2], HEAP32[$c$s2 + 1], $8$0, $8$1), HEAP32[tempDoublePtr >> 2]);
  var $14$1 = HEAP32[tempDoublePtr + 4 >> 2];
  HEAP32[$c$s2] = $14$0;
  HEAP32[$c$s2 + 1] = $14$1;
  var $15$1 = HEAP32[$a$s2 + 1];
  HEAP32[$3$s2] = HEAP32[$a$s2];
  HEAP32[$3$s2 + 1] = $15$1;
  var $16$1 = HEAP32[$b$s2 + 1];
  HEAP32[$5$s2] = HEAP32[$b$s2];
  HEAP32[$5$s2 + 1] = $16$1;
  var $17$1 = HEAP32[$c$s2 + 1];
  HEAP32[$7$s2] = HEAP32[$c$s2];
  HEAP32[$7$s2 + 1] = $17$1;
  STACKTOP = __stackBase__;
  return;
}
_transform981["X"] = 1;
function _pass($ra, $rb, $rc, $x, $mul) {
  var $c$s2;
  var $b$s2;
  var $a$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $a = __stackBase__, $a$s2 = $a >> 2;
  var $b = __stackBase__ + 8, $b$s2 = $b >> 2;
  var $c = __stackBase__ + 16, $c$s2 = $c >> 2;
  var $1$1 = HEAP32[$ra + 4 >> 2];
  HEAP32[$a$s2] = HEAP32[$ra >> 2];
  HEAP32[$a$s2 + 1] = $1$1;
  var $2$1 = HEAP32[$rb + 4 >> 2];
  HEAP32[$b$s2] = HEAP32[$rb >> 2];
  HEAP32[$b$s2 + 1] = $2$1;
  var $3$1 = HEAP32[$rc + 4 >> 2];
  HEAP32[$c$s2] = HEAP32[$rc >> 2];
  HEAP32[$c$s2 + 1] = $3$1;
  _tiger_round($a, $b, $c, HEAP32[$x >> 2], HEAP32[$x + 4 >> 2], $mul);
  var $5 = $x + 8 | 0;
  _tiger_round($b, $c, $a, HEAP32[$5 >> 2], HEAP32[$5 + 4 >> 2], $mul);
  var $7 = $x + 16 | 0;
  _tiger_round($c, $a, $b, HEAP32[$7 >> 2], HEAP32[$7 + 4 >> 2], $mul);
  var $9 = $x + 24 | 0;
  _tiger_round($a, $b, $c, HEAP32[$9 >> 2], HEAP32[$9 + 4 >> 2], $mul);
  var $11 = $x + 32 | 0;
  _tiger_round($b, $c, $a, HEAP32[$11 >> 2], HEAP32[$11 + 4 >> 2], $mul);
  var $13 = $x + 40 | 0;
  _tiger_round($c, $a, $b, HEAP32[$13 >> 2], HEAP32[$13 + 4 >> 2], $mul);
  var $15 = $x + 48 | 0;
  _tiger_round($a, $b, $c, HEAP32[$15 >> 2], HEAP32[$15 + 4 >> 2], $mul);
  var $17 = $x + 56 | 0;
  _tiger_round($b, $c, $a, HEAP32[$17 >> 2], HEAP32[$17 + 4 >> 2], $mul);
  var $19$1 = HEAP32[$a$s2 + 1];
  HEAP32[$ra >> 2] = HEAP32[$a$s2];
  HEAP32[$ra + 4 >> 2] = $19$1;
  var $20$1 = HEAP32[$b$s2 + 1];
  HEAP32[$rb >> 2] = HEAP32[$b$s2];
  HEAP32[$rb + 4 >> 2] = $20$1;
  var $21$1 = HEAP32[$c$s2 + 1];
  HEAP32[$rc >> 2] = HEAP32[$c$s2];
  HEAP32[$rc + 4 >> 2] = $21$1;
  STACKTOP = __stackBase__;
  return;
}
_pass["X"] = 1;
function _twofish_setkey($context, $key, $keylen) {
  var $2 = _do_twofish_setkey($context, $key, $keylen);
  __gcry_burn_stack(47);
  return $2;
}
function _twofish_encrypt($context, $out, $in) {
  _do_twofish_encrypt($context, $out, $in);
  __gcry_burn_stack(36);
  return;
}
function _twofish_decrypt($context, $out, $in) {
  _do_twofish_decrypt($context, $out, $in);
  __gcry_burn_stack(36);
  return;
}
function _do_twofish_decrypt($ctx, $out, $in) {
  var $ctx$s2 = $ctx >> 2;
  var $20 = (HEAPU8[$in + 1 | 0] << 8 | HEAPU8[$in] | HEAPU8[$in + 2 | 0] << 16 | HEAPU8[$in + 3 | 0] << 24) ^ HEAP32[$ctx$s2 + 1028];
  var $41 = (HEAPU8[$in + 5 | 0] << 8 | HEAPU8[$in + 4 | 0] | HEAPU8[$in + 6 | 0] << 16 | HEAPU8[$in + 7 | 0] << 24) ^ HEAP32[$ctx$s2 + 1029];
  var $62 = (HEAPU8[$in + 9 | 0] << 8 | HEAPU8[$in + 8 | 0] | HEAPU8[$in + 10 | 0] << 16 | HEAPU8[$in + 11 | 0] << 24) ^ HEAP32[$ctx$s2 + 1030];
  var $116 = HEAP32[((($41 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($41 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($41 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($41 >>> 24 << 2 >> 2) + $ctx$s2];
  var $117 = $116 + (HEAP32[((($20 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($20 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($20 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($20 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $123 = (HEAPU8[$in + 13 | 0] << 8 | HEAPU8[$in + 12 | 0] | HEAPU8[$in + 14 | 0] << 16 | HEAPU8[$in + 15 | 0] << 24) ^ HEAP32[$ctx$s2 + 1031] ^ $116 + HEAP32[$ctx$s2 + 1063] + $117;
  var $124 = $123 >>> 1;
  var $126 = $124 | $123 << 31;
  var $133 = $117 + HEAP32[$ctx$s2 + 1062] ^ ($62 << 1 | $62 >>> 31);
  var $167 = HEAP32[((($123 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($124 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($123 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($126 >>> 24 << 2 >> 2) + $ctx$s2];
  var $168 = $167 + (HEAP32[((($133 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($133 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($133 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($133 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $173 = $167 + HEAP32[$ctx$s2 + 1061] + $168 ^ $41;
  var $174 = $173 >>> 1;
  var $176 = $174 | $173 << 31;
  var $183 = $168 + HEAP32[$ctx$s2 + 1060] ^ ($20 << 1 | $20 >>> 31);
  var $217 = HEAP32[((($173 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($174 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($173 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($176 >>> 24 << 2 >> 2) + $ctx$s2];
  var $218 = $217 + (HEAP32[((($183 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($183 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($183 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($183 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $223 = $217 + HEAP32[$ctx$s2 + 1059] + $218 ^ $126;
  var $224 = $223 >>> 1;
  var $226 = $224 | $223 << 31;
  var $233 = $218 + HEAP32[$ctx$s2 + 1058] ^ ($133 << 1 | $133 >>> 31);
  var $267 = HEAP32[((($223 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($224 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($223 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($226 >>> 24 << 2 >> 2) + $ctx$s2];
  var $268 = $267 + (HEAP32[((($233 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($233 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($233 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($233 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $273 = $267 + HEAP32[$ctx$s2 + 1057] + $268 ^ $176;
  var $274 = $273 >>> 1;
  var $276 = $274 | $273 << 31;
  var $283 = $268 + HEAP32[$ctx$s2 + 1056] ^ ($183 << 1 | $183 >>> 31);
  var $317 = HEAP32[((($273 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($274 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($273 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($276 >>> 24 << 2 >> 2) + $ctx$s2];
  var $318 = $317 + (HEAP32[((($283 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($283 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($283 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($283 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $323 = $317 + HEAP32[$ctx$s2 + 1055] + $318 ^ $226;
  var $324 = $323 >>> 1;
  var $326 = $324 | $323 << 31;
  var $333 = $318 + HEAP32[$ctx$s2 + 1054] ^ ($233 << 1 | $233 >>> 31);
  var $367 = HEAP32[((($323 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($324 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($323 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($326 >>> 24 << 2 >> 2) + $ctx$s2];
  var $368 = $367 + (HEAP32[((($333 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($333 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($333 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($333 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $373 = $367 + HEAP32[$ctx$s2 + 1053] + $368 ^ $276;
  var $374 = $373 >>> 1;
  var $376 = $374 | $373 << 31;
  var $383 = $368 + HEAP32[$ctx$s2 + 1052] ^ ($283 << 1 | $283 >>> 31);
  var $417 = HEAP32[((($373 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($374 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($373 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($376 >>> 24 << 2 >> 2) + $ctx$s2];
  var $418 = $417 + (HEAP32[((($383 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($383 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($383 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($383 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $423 = $417 + HEAP32[$ctx$s2 + 1051] + $418 ^ $326;
  var $424 = $423 >>> 1;
  var $426 = $424 | $423 << 31;
  var $433 = $418 + HEAP32[$ctx$s2 + 1050] ^ ($333 << 1 | $333 >>> 31);
  var $467 = HEAP32[((($423 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($424 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($423 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($426 >>> 24 << 2 >> 2) + $ctx$s2];
  var $468 = $467 + (HEAP32[((($433 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($433 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($433 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($433 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $473 = $467 + HEAP32[$ctx$s2 + 1049] + $468 ^ $376;
  var $474 = $473 >>> 1;
  var $476 = $474 | $473 << 31;
  var $483 = $468 + HEAP32[$ctx$s2 + 1048] ^ ($383 << 1 | $383 >>> 31);
  var $517 = HEAP32[((($473 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($474 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($473 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($476 >>> 24 << 2 >> 2) + $ctx$s2];
  var $518 = $517 + (HEAP32[((($483 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($483 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($483 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($483 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $523 = $517 + HEAP32[$ctx$s2 + 1047] + $518 ^ $426;
  var $524 = $523 >>> 1;
  var $526 = $524 | $523 << 31;
  var $533 = $518 + HEAP32[$ctx$s2 + 1046] ^ ($433 << 1 | $433 >>> 31);
  var $567 = HEAP32[((($523 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($524 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($523 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($526 >>> 24 << 2 >> 2) + $ctx$s2];
  var $568 = $567 + (HEAP32[((($533 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($533 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($533 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($533 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $573 = $567 + HEAP32[$ctx$s2 + 1045] + $568 ^ $476;
  var $574 = $573 >>> 1;
  var $576 = $574 | $573 << 31;
  var $583 = $568 + HEAP32[$ctx$s2 + 1044] ^ ($483 << 1 | $483 >>> 31);
  var $617 = HEAP32[((($573 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($574 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($573 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($576 >>> 24 << 2 >> 2) + $ctx$s2];
  var $618 = $617 + (HEAP32[((($583 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($583 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($583 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($583 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $623 = $617 + HEAP32[$ctx$s2 + 1043] + $618 ^ $526;
  var $624 = $623 >>> 1;
  var $626 = $624 | $623 << 31;
  var $633 = $618 + HEAP32[$ctx$s2 + 1042] ^ ($533 << 1 | $533 >>> 31);
  var $667 = HEAP32[((($623 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($624 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($623 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($626 >>> 24 << 2 >> 2) + $ctx$s2];
  var $668 = $667 + (HEAP32[((($633 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($633 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($633 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($633 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $673 = $667 + HEAP32[$ctx$s2 + 1041] + $668 ^ $576;
  var $674 = $673 >>> 1;
  var $676 = $674 | $673 << 31;
  var $683 = $668 + HEAP32[$ctx$s2 + 1040] ^ ($583 << 1 | $583 >>> 31);
  var $717 = HEAP32[((($673 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($674 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($673 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($676 >>> 24 << 2 >> 2) + $ctx$s2];
  var $718 = $717 + (HEAP32[((($683 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($683 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($683 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($683 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $723 = $717 + HEAP32[$ctx$s2 + 1039] + $718 ^ $626;
  var $724 = $723 >>> 1;
  var $726 = $724 | $723 << 31;
  var $733 = $718 + HEAP32[$ctx$s2 + 1038] ^ ($633 << 1 | $633 >>> 31);
  var $767 = HEAP32[((($723 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($724 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($723 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($726 >>> 24 << 2 >> 2) + $ctx$s2];
  var $768 = $767 + (HEAP32[((($733 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($733 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($733 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($733 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $773 = $767 + HEAP32[$ctx$s2 + 1037] + $768 ^ $676;
  var $774 = $773 >>> 1;
  var $776 = $774 | $773 << 31;
  var $783 = $768 + HEAP32[$ctx$s2 + 1036] ^ ($683 << 1 | $683 >>> 31);
  var $817 = HEAP32[((($773 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($774 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($773 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($776 >>> 24 << 2 >> 2) + $ctx$s2];
  var $818 = $817 + (HEAP32[((($783 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($783 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($783 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($783 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $823 = $817 + HEAP32[$ctx$s2 + 1035] + $818 ^ $726;
  var $824 = $823 >>> 1;
  var $826 = $824 | $823 << 31;
  var $833 = $818 + HEAP32[$ctx$s2 + 1034] ^ ($733 << 1 | $733 >>> 31);
  var $867 = HEAP32[((($823 >>> 9 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($824 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($823 >>> 17 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($826 >>> 24 << 2 >> 2) + $ctx$s2];
  var $868 = $867 + (HEAP32[((($833 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($833 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($833 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($833 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $873 = $867 + HEAP32[$ctx$s2 + 1033] + $868 ^ $776;
  var $882 = $868 + HEAP32[$ctx$s2 + 1032] | 0;
  var $885 = HEAP32[$ctx$s2 + 1024] ^ $833;
  HEAP8[$out] = $885 & 255;
  HEAP8[$out + 1 | 0] = $885 >>> 8 & 255;
  HEAP8[$out + 2 | 0] = $885 >>> 16 & 255;
  HEAP8[$out + 3 | 0] = $885 >>> 24 & 255;
  var $898 = HEAP32[$ctx$s2 + 1025] ^ $826;
  HEAP8[$out + 4 | 0] = $898 & 255;
  HEAP8[$out + 5 | 0] = $898 >>> 8 & 255;
  HEAP8[$out + 6 | 0] = $898 >>> 16 & 255;
  HEAP8[$out + 7 | 0] = $898 >>> 24 & 255;
  var $913 = $882 ^ ($783 << 1 | $783 >>> 31) ^ HEAP32[$ctx$s2 + 1026];
  HEAP8[$out + 8 | 0] = $913 & 255;
  HEAP8[$out + 9 | 0] = $913 >>> 8 & 255;
  HEAP8[$out + 10 | 0] = $913 >>> 16 & 255;
  HEAP8[$out + 11 | 0] = $913 >>> 24 & 255;
  var $927 = ($873 >>> 1 | $873 << 31) ^ HEAP32[$ctx$s2 + 1027];
  HEAP8[$out + 12 | 0] = $927 & 255;
  HEAP8[$out + 13 | 0] = $927 >>> 8 & 255;
  HEAP8[$out + 14 | 0] = $927 >>> 16 & 255;
  HEAP8[$out + 15 | 0] = $927 >>> 24 & 255;
  return;
}
_do_twofish_decrypt["X"] = 1;
function _do_twofish_encrypt($ctx, $out, $in) {
  var $ctx$s2 = $ctx >> 2;
  var $20 = (HEAPU8[$in + 1 | 0] << 8 | HEAPU8[$in] | HEAPU8[$in + 2 | 0] << 16 | HEAPU8[$in + 3 | 0] << 24) ^ HEAP32[$ctx$s2 + 1024];
  var $41 = (HEAPU8[$in + 5 | 0] << 8 | HEAPU8[$in + 4 | 0] | HEAPU8[$in + 6 | 0] << 16 | HEAPU8[$in + 7 | 0] << 24) ^ HEAP32[$ctx$s2 + 1025];
  var $82 = (HEAPU8[$in + 13 | 0] << 8 | HEAPU8[$in + 12 | 0] | HEAPU8[$in + 14 | 0] << 16 | HEAPU8[$in + 15 | 0] << 24) ^ HEAP32[$ctx$s2 + 1027];
  var $116 = HEAP32[((($41 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($41 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($41 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($41 >>> 24 << 2 >> 2) + $ctx$s2];
  var $117 = $116 + (HEAP32[((($20 >>> 8 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($20 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($20 >>> 16 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($20 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $126 = (HEAPU8[$in + 9 | 0] << 8 | HEAPU8[$in + 8 | 0] | HEAPU8[$in + 10 | 0] << 16 | HEAPU8[$in + 11 | 0] << 24) ^ HEAP32[$ctx$s2 + 1026] ^ $117 + HEAP32[$ctx$s2 + 1032];
  var $127 = $126 >>> 1;
  var $129 = $127 | $126 << 31;
  var $133 = HEAP32[$ctx$s2 + 1033] + $116 + $117 ^ ($82 << 1 | $82 >>> 31);
  var $167 = HEAP32[((($133 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($133 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($133 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($133 >>> 24 << 2 >> 2) + $ctx$s2];
  var $168 = $167 + (HEAP32[((($126 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($127 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($126 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($129 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $176 = $168 + HEAP32[$ctx$s2 + 1034] ^ $20;
  var $177 = $176 >>> 1;
  var $179 = $177 | $176 << 31;
  var $183 = HEAP32[$ctx$s2 + 1035] + $167 + $168 ^ ($41 << 1 | $41 >>> 31);
  var $217 = HEAP32[((($183 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($183 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($183 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($183 >>> 24 << 2 >> 2) + $ctx$s2];
  var $218 = $217 + (HEAP32[((($176 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($177 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($176 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($179 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $226 = $218 + HEAP32[$ctx$s2 + 1036] ^ $129;
  var $227 = $226 >>> 1;
  var $229 = $227 | $226 << 31;
  var $233 = HEAP32[$ctx$s2 + 1037] + $217 + $218 ^ ($133 << 1 | $133 >>> 31);
  var $267 = HEAP32[((($233 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($233 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($233 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($233 >>> 24 << 2 >> 2) + $ctx$s2];
  var $268 = $267 + (HEAP32[((($226 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($227 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($226 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($229 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $276 = $268 + HEAP32[$ctx$s2 + 1038] ^ $179;
  var $277 = $276 >>> 1;
  var $279 = $277 | $276 << 31;
  var $283 = HEAP32[$ctx$s2 + 1039] + $267 + $268 ^ ($183 << 1 | $183 >>> 31);
  var $317 = HEAP32[((($283 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($283 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($283 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($283 >>> 24 << 2 >> 2) + $ctx$s2];
  var $318 = $317 + (HEAP32[((($276 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($277 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($276 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($279 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $326 = $318 + HEAP32[$ctx$s2 + 1040] ^ $229;
  var $327 = $326 >>> 1;
  var $329 = $327 | $326 << 31;
  var $333 = HEAP32[$ctx$s2 + 1041] + $317 + $318 ^ ($233 << 1 | $233 >>> 31);
  var $367 = HEAP32[((($333 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($333 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($333 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($333 >>> 24 << 2 >> 2) + $ctx$s2];
  var $368 = $367 + (HEAP32[((($326 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($327 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($326 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($329 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $376 = $368 + HEAP32[$ctx$s2 + 1042] ^ $279;
  var $377 = $376 >>> 1;
  var $379 = $377 | $376 << 31;
  var $383 = HEAP32[$ctx$s2 + 1043] + $367 + $368 ^ ($283 << 1 | $283 >>> 31);
  var $417 = HEAP32[((($383 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($383 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($383 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($383 >>> 24 << 2 >> 2) + $ctx$s2];
  var $418 = $417 + (HEAP32[((($376 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($377 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($376 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($379 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $426 = $418 + HEAP32[$ctx$s2 + 1044] ^ $329;
  var $427 = $426 >>> 1;
  var $429 = $427 | $426 << 31;
  var $433 = HEAP32[$ctx$s2 + 1045] + $417 + $418 ^ ($333 << 1 | $333 >>> 31);
  var $467 = HEAP32[((($433 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($433 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($433 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($433 >>> 24 << 2 >> 2) + $ctx$s2];
  var $468 = $467 + (HEAP32[((($426 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($427 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($426 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($429 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $476 = $468 + HEAP32[$ctx$s2 + 1046] ^ $379;
  var $477 = $476 >>> 1;
  var $479 = $477 | $476 << 31;
  var $483 = HEAP32[$ctx$s2 + 1047] + $467 + $468 ^ ($383 << 1 | $383 >>> 31);
  var $517 = HEAP32[((($483 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($483 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($483 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($483 >>> 24 << 2 >> 2) + $ctx$s2];
  var $518 = $517 + (HEAP32[((($476 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($477 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($476 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($479 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $526 = $518 + HEAP32[$ctx$s2 + 1048] ^ $429;
  var $527 = $526 >>> 1;
  var $529 = $527 | $526 << 31;
  var $533 = HEAP32[$ctx$s2 + 1049] + $517 + $518 ^ ($433 << 1 | $433 >>> 31);
  var $567 = HEAP32[((($533 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($533 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($533 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($533 >>> 24 << 2 >> 2) + $ctx$s2];
  var $568 = $567 + (HEAP32[((($526 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($527 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($526 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($529 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $576 = $568 + HEAP32[$ctx$s2 + 1050] ^ $479;
  var $577 = $576 >>> 1;
  var $579 = $577 | $576 << 31;
  var $583 = HEAP32[$ctx$s2 + 1051] + $567 + $568 ^ ($483 << 1 | $483 >>> 31);
  var $617 = HEAP32[((($583 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($583 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($583 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($583 >>> 24 << 2 >> 2) + $ctx$s2];
  var $618 = $617 + (HEAP32[((($576 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($577 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($576 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($579 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $626 = $618 + HEAP32[$ctx$s2 + 1052] ^ $529;
  var $627 = $626 >>> 1;
  var $629 = $627 | $626 << 31;
  var $633 = HEAP32[$ctx$s2 + 1053] + $617 + $618 ^ ($533 << 1 | $533 >>> 31);
  var $667 = HEAP32[((($633 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($633 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($633 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($633 >>> 24 << 2 >> 2) + $ctx$s2];
  var $668 = $667 + (HEAP32[((($626 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($627 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($626 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($629 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $676 = $668 + HEAP32[$ctx$s2 + 1054] ^ $579;
  var $677 = $676 >>> 1;
  var $679 = $677 | $676 << 31;
  var $683 = HEAP32[$ctx$s2 + 1055] + $667 + $668 ^ ($583 << 1 | $583 >>> 31);
  var $717 = HEAP32[((($683 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($683 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($683 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($683 >>> 24 << 2 >> 2) + $ctx$s2];
  var $718 = $717 + (HEAP32[((($676 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($677 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($676 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($679 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $726 = $718 + HEAP32[$ctx$s2 + 1056] ^ $629;
  var $727 = $726 >>> 1;
  var $729 = $727 | $726 << 31;
  var $733 = HEAP32[$ctx$s2 + 1057] + $717 + $718 ^ ($633 << 1 | $633 >>> 31);
  var $767 = HEAP32[((($733 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($733 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($733 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($733 >>> 24 << 2 >> 2) + $ctx$s2];
  var $768 = $767 + (HEAP32[((($726 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($727 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($726 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($729 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $776 = $768 + HEAP32[$ctx$s2 + 1058] ^ $679;
  var $777 = $776 >>> 1;
  var $779 = $777 | $776 << 31;
  var $783 = HEAP32[$ctx$s2 + 1059] + $767 + $768 ^ ($683 << 1 | $683 >>> 31);
  var $817 = HEAP32[((($783 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($783 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($783 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($783 >>> 24 << 2 >> 2) + $ctx$s2];
  var $818 = $817 + (HEAP32[((($776 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($777 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($776 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($779 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $826 = $818 + HEAP32[$ctx$s2 + 1060] ^ $729;
  var $827 = $826 >>> 1;
  var $829 = $827 | $826 << 31;
  var $833 = HEAP32[$ctx$s2 + 1061] + $817 + $818 ^ ($733 << 1 | $733 >>> 31);
  var $867 = HEAP32[((($833 >>> 8 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[((($833 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[((($833 >>> 16 & 255) << 2) + 3072 >> 2) + $ctx$s2] ^ HEAP32[($833 >>> 24 << 2 >> 2) + $ctx$s2];
  var $868 = $867 + (HEAP32[((($826 >>> 9 & 255) << 2) + 1024 >> 2) + $ctx$s2] ^ HEAP32[(($827 & 255) << 2 >> 2) + $ctx$s2] ^ HEAP32[((($826 >>> 17 & 255) << 2) + 2048 >> 2) + $ctx$s2] ^ HEAP32[(($829 >>> 24 << 2) + 3072 >> 2) + $ctx$s2]) | 0;
  var $872 = HEAP32[$ctx$s2 + 1063] + $867 + $868 | 0;
  var $876 = $868 + HEAP32[$ctx$s2 + 1062] ^ $779;
  var $885 = HEAP32[$ctx$s2 + 1028] ^ $829;
  HEAP8[$out] = $885 & 255;
  HEAP8[$out + 1 | 0] = $885 >>> 8 & 255;
  HEAP8[$out + 2 | 0] = $885 >>> 16 & 255;
  HEAP8[$out + 3 | 0] = $885 >>> 24 & 255;
  var $898 = HEAP32[$ctx$s2 + 1029] ^ $833;
  HEAP8[$out + 4 | 0] = $898 & 255;
  HEAP8[$out + 5 | 0] = $898 >>> 8 & 255;
  HEAP8[$out + 6 | 0] = $898 >>> 16 & 255;
  HEAP8[$out + 7 | 0] = $898 >>> 24 & 255;
  var $912 = ($876 >>> 1 | $876 << 31) ^ HEAP32[$ctx$s2 + 1030];
  HEAP8[$out + 8 | 0] = $912 & 255;
  HEAP8[$out + 9 | 0] = $912 >>> 8 & 255;
  HEAP8[$out + 10 | 0] = $912 >>> 16 & 255;
  HEAP8[$out + 11 | 0] = $912 >>> 24 & 255;
  var $927 = $872 ^ ($783 << 1 | $783 >>> 31) ^ HEAP32[$ctx$s2 + 1031];
  HEAP8[$out + 12 | 0] = $927 & 255;
  HEAP8[$out + 13 | 0] = $927 >>> 8 & 255;
  HEAP8[$out + 14 | 0] = $927 >>> 16 & 255;
  HEAP8[$out + 15 | 0] = $927 >>> 24 & 255;
  return;
}
_do_twofish_encrypt["X"] = 1;
function _do_twofish_setkey($ctx, $key, $keylen) {
  var $ctx$s2 = $ctx >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  if (($keylen - 16 | 16 | 0) != 16) {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if (HEAP8[457616]) {
      label = 295;
    } else {
      HEAP8[457616] = 1;
      var $6 = _selftest996();
      HEAP32[114403] = $6;
      if (($6 | 0) == 0) {
        break;
      }
      __gcry_log_error(477348, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $6, tempInt));
      label = 295;
      break;
    }
  } while (0);
  do {
    if (label == 295) {
      if ((HEAP32[114403] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $11 = HEAP8[$key];
  if ($11 << 24 >> 24 == 0) {
    var $sa_0 = 0;
    var $sc_0 = 0;
    var $sd_0 = 0;
  } else {
    var $18 = HEAPU8[($11 & 255) - 1 + 440220 | 0];
    var $sa_0 = HEAP8[$18 + 455464 | 0];
    var $sc_0 = HEAP8[$18 + 455465 | 0];
    var $sd_0 = HEAP8[$18 + 455509 | 0];
  }
  var $sd_0;
  var $sc_0;
  var $sa_0;
  var $28 = $key + 1 | 0;
  var $29 = HEAP8[$28];
  if ($29 << 24 >> 24 == 0) {
    var $sa_1 = $sa_0;
    var $sb_1 = $sd_0;
    var $sc_1 = $sc_0;
    var $sd_1 = $sd_0;
  } else {
    var $36 = HEAPU8[($29 & 255) - 1 + 440220 | 0];
    var $sa_1 = HEAP8[$36 + 455509 | 0] ^ $sa_0;
    var $sb_1 = HEAP8[$36 + 455628 | 0] ^ $sd_0;
    var $sc_1 = HEAP8[$36 + 455532 | 0] ^ $sc_0;
    var $sd_1 = HEAP8[$36 + 455602 | 0] ^ $sd_0;
  }
  var $sd_1;
  var $sc_1;
  var $sb_1;
  var $sa_1;
  var $54 = $key + 2 | 0;
  var $55 = HEAP8[$54];
  if ($55 << 24 >> 24 == 0) {
    var $sa_2 = $sa_1;
    var $sb_2 = $sb_1;
    var $sc_2 = $sc_1;
    var $sd_2 = $sd_1;
  } else {
    var $62 = HEAPU8[($55 & 255) - 1 + 440220 | 0];
    var $sa_2 = HEAP8[$62 + 455602 | 0] ^ $sa_1;
    var $sb_2 = HEAP8[$62 + 455677 | 0] ^ $sb_1;
    var $sc_2 = HEAP8[$62 + 455655 | 0] ^ $sc_1;
    var $sd_2 = HEAP8[$62 + 455673 | 0] ^ $sd_1;
  }
  var $sd_2;
  var $sc_2;
  var $sb_2;
  var $sa_2;
  var $80 = $key + 3 | 0;
  var $81 = HEAP8[$80];
  if ($81 << 24 >> 24 == 0) {
    var $sa_3 = $sa_2;
    var $sb_3 = $sb_2;
    var $sc_3 = $sc_2;
    var $sd_3 = $sd_2;
  } else {
    var $88 = HEAPU8[($81 & 255) - 1 + 440220 | 0];
    var $sa_3 = HEAP8[$88 + 455673 | 0] ^ $sa_2;
    var $sb_3 = HEAP8[$88 + 455591 | 0] ^ $sb_2;
    var $sc_3 = HEAP8[$88 + 455525 | 0] ^ $sc_2;
    var $sd_3 = HEAP8[$88 + 455617 | 0] ^ $sd_2;
  }
  var $sd_3;
  var $sc_3;
  var $sb_3;
  var $sa_3;
  var $106 = $key + 4 | 0;
  var $107 = HEAP8[$106];
  if ($107 << 24 >> 24 == 0) {
    var $sa_4 = $sa_3;
    var $sb_4 = $sb_3;
    var $sc_4 = $sc_3;
    var $sd_4 = $sd_3;
  } else {
    var $114 = HEAPU8[($107 & 255) - 1 + 440220 | 0];
    var $sa_4 = HEAP8[$114 + 455617 | 0] ^ $sa_3;
    var $sb_4 = HEAP8[$114 + 455534 | 0] ^ $sb_3;
    var $sc_4 = HEAP8[$114 + 455566 | 0] ^ $sc_3;
    var $sd_4 = HEAP8[$114 + 455614 | 0] ^ $sd_3;
  }
  var $sd_4;
  var $sc_4;
  var $sb_4;
  var $sa_4;
  var $132 = $key + 5 | 0;
  var $133 = HEAP8[$132];
  if ($133 << 24 >> 24 == 0) {
    var $sa_5 = $sa_4;
    var $sb_5 = $sb_4;
    var $sc_5 = $sc_4;
    var $sd_5 = $sd_4;
  } else {
    var $140 = HEAPU8[($133 & 255) - 1 + 440220 | 0];
    var $sa_5 = HEAP8[$140 + 455614 | 0] ^ $sa_4;
    var $sb_5 = HEAP8[$140 + 455524 | 0] ^ $sb_4;
    var $sc_5 = HEAP8[$140 + 455555 | 0] ^ $sc_4;
    var $sd_5 = HEAP8[$140 + 455701 | 0] ^ $sd_4;
  }
  var $sd_5;
  var $sc_5;
  var $sb_5;
  var $sa_5;
  var $158 = $key + 6 | 0;
  var $159 = HEAP8[$158];
  if ($159 << 24 >> 24 == 0) {
    var $sa_6 = $sa_5;
    var $sb_6 = $sb_5;
    var $sc_6 = $sc_5;
    var $sd_6 = $sd_5;
  } else {
    var $166 = HEAPU8[($159 & 255) - 1 + 440220 | 0];
    var $sa_6 = HEAP8[$166 + 455701 | 0] ^ $sa_5;
    var $sb_6 = HEAP8[$166 + 455519 | 0] ^ $sb_5;
    var $sc_6 = HEAP8[$166 + 455543 | 0] ^ $sc_5;
    var $sd_6 = HEAP8[$166 + 455688 | 0] ^ $sd_5;
  }
  var $sd_6;
  var $sc_6;
  var $sb_6;
  var $sa_6;
  var $184 = $key + 7 | 0;
  var $185 = HEAP8[$184];
  if ($185 << 24 >> 24 == 0) {
    var $sa_7 = $sa_6;
    var $sb_7 = $sb_6;
    var $sc_7 = $sc_6;
    var $sd_7 = $sd_6;
  } else {
    var $192 = HEAPU8[($185 & 255) - 1 + 440220 | 0];
    var $sa_7 = HEAP8[$192 + 455688 | 0] ^ $sa_6;
    var $sb_7 = HEAP8[$192 + 455672 | 0] ^ $sb_6;
    var $sc_7 = HEAP8[$192 + 455604 | 0] ^ $sc_6;
    var $sd_7 = HEAP8[$192 + 455487 | 0] ^ $sd_6;
  }
  var $sd_7;
  var $sc_7;
  var $sb_7;
  var $sa_7;
  var $210 = $key + 8 | 0;
  var $211 = HEAP8[$210];
  if ($211 << 24 >> 24 == 0) {
    var $se_0 = 0;
    var $sg_0 = 0;
    var $sh_0 = 0;
  } else {
    var $218 = HEAPU8[($211 & 255) - 1 + 440220 | 0];
    var $se_0 = HEAP8[$218 + 455464 | 0];
    var $sg_0 = HEAP8[$218 + 455465 | 0];
    var $sh_0 = HEAP8[$218 + 455509 | 0];
  }
  var $sh_0;
  var $sg_0;
  var $se_0;
  var $228 = $key + 9 | 0;
  var $229 = HEAP8[$228];
  if ($229 << 24 >> 24 == 0) {
    var $se_1 = $se_0;
    var $sf_1 = $sh_0;
    var $sg_1 = $sg_0;
    var $sh_1 = $sh_0;
  } else {
    var $236 = HEAPU8[($229 & 255) - 1 + 440220 | 0];
    var $se_1 = HEAP8[$236 + 455509 | 0] ^ $se_0;
    var $sf_1 = HEAP8[$236 + 455628 | 0] ^ $sh_0;
    var $sg_1 = HEAP8[$236 + 455532 | 0] ^ $sg_0;
    var $sh_1 = HEAP8[$236 + 455602 | 0] ^ $sh_0;
  }
  var $sh_1;
  var $sg_1;
  var $sf_1;
  var $se_1;
  var $254 = $key + 10 | 0;
  var $255 = HEAP8[$254];
  if ($255 << 24 >> 24 == 0) {
    var $se_2 = $se_1;
    var $sf_2 = $sf_1;
    var $sg_2 = $sg_1;
    var $sh_2 = $sh_1;
  } else {
    var $262 = HEAPU8[($255 & 255) - 1 + 440220 | 0];
    var $se_2 = HEAP8[$262 + 455602 | 0] ^ $se_1;
    var $sf_2 = HEAP8[$262 + 455677 | 0] ^ $sf_1;
    var $sg_2 = HEAP8[$262 + 455655 | 0] ^ $sg_1;
    var $sh_2 = HEAP8[$262 + 455673 | 0] ^ $sh_1;
  }
  var $sh_2;
  var $sg_2;
  var $sf_2;
  var $se_2;
  var $280 = $key + 11 | 0;
  var $281 = HEAP8[$280];
  if ($281 << 24 >> 24 == 0) {
    var $se_3 = $se_2;
    var $sf_3 = $sf_2;
    var $sg_3 = $sg_2;
    var $sh_3 = $sh_2;
  } else {
    var $288 = HEAPU8[($281 & 255) - 1 + 440220 | 0];
    var $se_3 = HEAP8[$288 + 455673 | 0] ^ $se_2;
    var $sf_3 = HEAP8[$288 + 455591 | 0] ^ $sf_2;
    var $sg_3 = HEAP8[$288 + 455525 | 0] ^ $sg_2;
    var $sh_3 = HEAP8[$288 + 455617 | 0] ^ $sh_2;
  }
  var $sh_3;
  var $sg_3;
  var $sf_3;
  var $se_3;
  var $306 = $key + 12 | 0;
  var $307 = HEAP8[$306];
  if ($307 << 24 >> 24 == 0) {
    var $se_4 = $se_3;
    var $sf_4 = $sf_3;
    var $sg_4 = $sg_3;
    var $sh_4 = $sh_3;
  } else {
    var $314 = HEAPU8[($307 & 255) - 1 + 440220 | 0];
    var $se_4 = HEAP8[$314 + 455617 | 0] ^ $se_3;
    var $sf_4 = HEAP8[$314 + 455534 | 0] ^ $sf_3;
    var $sg_4 = HEAP8[$314 + 455566 | 0] ^ $sg_3;
    var $sh_4 = HEAP8[$314 + 455614 | 0] ^ $sh_3;
  }
  var $sh_4;
  var $sg_4;
  var $sf_4;
  var $se_4;
  var $332 = $key + 13 | 0;
  var $333 = HEAP8[$332];
  if ($333 << 24 >> 24 == 0) {
    var $se_5 = $se_4;
    var $sf_5 = $sf_4;
    var $sg_5 = $sg_4;
    var $sh_5 = $sh_4;
  } else {
    var $340 = HEAPU8[($333 & 255) - 1 + 440220 | 0];
    var $se_5 = HEAP8[$340 + 455614 | 0] ^ $se_4;
    var $sf_5 = HEAP8[$340 + 455524 | 0] ^ $sf_4;
    var $sg_5 = HEAP8[$340 + 455555 | 0] ^ $sg_4;
    var $sh_5 = HEAP8[$340 + 455701 | 0] ^ $sh_4;
  }
  var $sh_5;
  var $sg_5;
  var $sf_5;
  var $se_5;
  var $358 = $key + 14 | 0;
  var $359 = HEAP8[$358];
  if ($359 << 24 >> 24 == 0) {
    var $se_6 = $se_5;
    var $sf_6 = $sf_5;
    var $sg_6 = $sg_5;
    var $sh_6 = $sh_5;
  } else {
    var $366 = HEAPU8[($359 & 255) - 1 + 440220 | 0];
    var $se_6 = HEAP8[$366 + 455701 | 0] ^ $se_5;
    var $sf_6 = HEAP8[$366 + 455519 | 0] ^ $sf_5;
    var $sg_6 = HEAP8[$366 + 455543 | 0] ^ $sg_5;
    var $sh_6 = HEAP8[$366 + 455688 | 0] ^ $sh_5;
  }
  var $sh_6;
  var $sg_6;
  var $sf_6;
  var $se_6;
  var $384 = $key + 15 | 0;
  var $385 = HEAP8[$384];
  if ($385 << 24 >> 24 == 0) {
    var $se_7 = $se_6;
    var $sf_7 = $sf_6;
    var $sg_7 = $sg_6;
    var $sh_7 = $sh_6;
  } else {
    var $392 = HEAPU8[($385 & 255) - 1 + 440220 | 0];
    var $se_7 = HEAP8[$392 + 455688 | 0] ^ $se_6;
    var $sf_7 = HEAP8[$392 + 455672 | 0] ^ $sf_6;
    var $sg_7 = HEAP8[$392 + 455604 | 0] ^ $sg_6;
    var $sh_7 = HEAP8[$392 + 455487 | 0] ^ $sh_6;
  }
  var $sh_7;
  var $sg_7;
  var $sf_7;
  var $se_7;
  if (($keylen | 0) != 32) {
    var $k_11 = 1;
    var $j_12 = 0;
    var $i_13 = 0;
    while (1) {
      var $i_13;
      var $j_12;
      var $k_11;
      var $4409 = $j_12 + 463860 | 0;
      HEAP32[($i_13 << 2 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[$4409] ^ $sa_7) & 255) + 439688 | 0] ^ $se_7) & 255) << 2) + 446984 >> 2];
      var $4420 = $k_11 + 463860 | 0;
      HEAP32[(($i_13 << 2) + 1024 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[$4420] ^ $sb_7) & 255) + 439688 | 0] ^ $sf_7) & 255) << 2) + 448008 >> 2];
      HEAP32[(($i_13 << 2) + 2048 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[$4409] ^ $sc_7) & 255) + 439432 | 0] ^ $sg_7) & 255) << 2) + 449032 >> 2];
      HEAP32[(($i_13 << 2) + 3072 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[$4420] ^ $sd_7) & 255) + 439432 | 0] ^ $sh_7) & 255) << 2) + 450056 >> 2];
      var $4451 = $i_13 + 1 | 0;
      if (($4451 | 0) == 256) {
        break;
      } else {
        var $k_11 = $k_11 + 2 | 0;
        var $j_12 = $j_12 + 2 | 0;
        var $i_13 = $4451;
      }
    }
    var $4540 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 243) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 103) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 103) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 243) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $4543 = $4540 << 8 | $4540 >>> 24;
    var $4544 = $4543 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 117) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 169) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 169) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 117) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $4545 = $4544 + $4543 | 0;
    HEAP32[$ctx$s2 + 1024] = $4544;
    HEAP32[$ctx$s2 + 1025] = $4545 << 9 | $4545 >>> 23;
    var $4636 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 244) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 232) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 232) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 244) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $4639 = $4636 << 8 | $4636 >>> 24;
    var $4640 = $4639 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 198) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 179) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 179) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 198) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $4641 = $4640 + $4639 | 0;
    HEAP32[$ctx$s2 + 1026] = $4640;
    HEAP32[$ctx$s2 + 1027] = $4641 << 9 | $4641 >>> 23;
    var $4732 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 123) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 253) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 253) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 123) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $4735 = $4732 << 8 | $4732 >>> 24;
    var $4736 = $4735 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 219) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 4) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 4) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 219) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $4737 = $4736 + $4735 | 0;
    HEAP32[$ctx$s2 + 1028] = $4736;
    HEAP32[$ctx$s2 + 1029] = $4737 << 9 | $4737 >>> 23;
    var $4828 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 200) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 118) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 118) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 200) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $4831 = $4828 << 8 | $4828 >>> 24;
    var $4832 = $4831 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 251) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 163) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 163) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 251) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $4833 = $4832 + $4831 | 0;
    HEAP32[$ctx$s2 + 1030] = $4832;
    HEAP32[$ctx$s2 + 1031] = $4833 << 9 | $4833 >>> 23;
    var $4924 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 211) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 146) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 146) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 211) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $4927 = $4924 << 8 | $4924 >>> 24;
    var $4928 = $4927 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 74) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 154) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 154) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 74) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $4929 = $4928 + $4927 | 0;
    HEAP32[$ctx$s2 + 1032] = $4928;
    HEAP32[$ctx$s2 + 1033] = $4929 << 9 | $4929 >>> 23;
    var $5020 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 107) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 120) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 120) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 107) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5023 = $5020 << 8 | $5020 >>> 24;
    var $5024 = $5023 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 230) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 128) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 128) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 230) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5025 = $5024 + $5023 | 0;
    HEAP32[$ctx$s2 + 1034] = $5024;
    HEAP32[$ctx$s2 + 1035] = $5025 << 9 | $5025 >>> 23;
    var $5116 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 125) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 221) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 221) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 125) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5119 = $5116 << 8 | $5116 >>> 24;
    var $5120 = $5119 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 69) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 228) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 228) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 69) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5121 = $5120 + $5119 | 0;
    HEAP32[$ctx$s2 + 1036] = $5120;
    HEAP32[$ctx$s2 + 1037] = $5121 << 9 | $5121 >>> 23;
    var $5212 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 75) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 56) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 56) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 75) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5215 = $5212 << 8 | $5212 >>> 24;
    var $5216 = $5215 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 232) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 209) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 209) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 232) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5217 = $5216 + $5215 | 0;
    HEAP32[$ctx$s2 + 1038] = $5216;
    HEAP32[$ctx$s2 + 1039] = $5217 << 9 | $5217 >>> 23;
    var $5308 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 50) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 198) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 198) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 50) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5311 = $5308 << 8 | $5308 >>> 24;
    var $5312 = $5311 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 214) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 13) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 13) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 214) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5313 = $5312 + $5311 | 0;
    HEAP32[$ctx$s2 + 1040] = $5312;
    HEAP32[$ctx$s2 + 1041] = $5313 << 9 | $5313 >>> 23;
    var $5404 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 253) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 152) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 152) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 253) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5407 = $5404 << 8 | $5404 >>> 24;
    var $5408 = $5407 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 216) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 53) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 53) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 216) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5409 = $5408 + $5407 | 0;
    HEAP32[$ctx$s2 + 1042] = $5408;
    HEAP32[$ctx$s2 + 1043] = $5409 << 9 | $5409 >>> 23;
    var $5500 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 113) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 247) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 247) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 113) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5503 = $5500 << 8 | $5500 >>> 24;
    var $5504 = $5503 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 55) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 24) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 24) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 55) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5505 = $5504 + $5503 | 0;
    HEAP32[$ctx$s2 + 1044] = $5504;
    HEAP32[$ctx$s2 + 1045] = $5505 << 9 | $5505 >>> 23;
    var $5596 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 225) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 108) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 108) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 225) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5599 = $5596 << 8 | $5596 >>> 24;
    var $5600 = $5599 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 241) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 236) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 236) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 241) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5601 = $5600 + $5599 | 0;
    HEAP32[$ctx$s2 + 1046] = $5600;
    HEAP32[$ctx$s2 + 1047] = $5601 << 9 | $5601 >>> 23;
    var $5692 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 15) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 117) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 117) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 15) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5695 = $5692 << 8 | $5692 >>> 24;
    var $5696 = $5695 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 48) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 67) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 67) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 48) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5697 = $5696 + $5695 | 0;
    HEAP32[$ctx$s2 + 1048] = $5696;
    HEAP32[$ctx$s2 + 1049] = $5697 << 9 | $5697 >>> 23;
    var $5788 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 27) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 38) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 38) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 27) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5791 = $5788 << 8 | $5788 >>> 24;
    var $5792 = $5791 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 248) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 55) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 55) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 248) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5793 = $5792 + $5791 | 0;
    HEAP32[$ctx$s2 + 1050] = $5792;
    HEAP32[$ctx$s2 + 1051] = $5793 << 9 | $5793 >>> 23;
    var $5884 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 250) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 19) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 19) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 250) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5887 = $5884 << 8 | $5884 >>> 24;
    var $5888 = $5887 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 135) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 250) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 250) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 135) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5889 = $5888 + $5887 | 0;
    HEAP32[$ctx$s2 + 1052] = $5888;
    HEAP32[$ctx$s2 + 1053] = $5889 << 9 | $5889 >>> 23;
    var $5980 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 63) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 72) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 72) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 63) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $5983 = $5980 << 8 | $5980 >>> 24;
    var $5984 = $5983 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 6) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 148) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 148) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 6) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $5985 = $5984 + $5983 | 0;
    HEAP32[$ctx$s2 + 1054] = $5984;
    HEAP32[$ctx$s2 + 1055] = $5985 << 9 | $5985 >>> 23;
    var $6076 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 186) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 208) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 208) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 186) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $6079 = $6076 << 8 | $6076 >>> 24;
    var $6080 = $6079 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 94) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 242) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 242) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 94) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $6081 = $6080 + $6079 | 0;
    HEAP32[$ctx$s2 + 1056] = $6080;
    HEAP32[$ctx$s2 + 1057] = $6081 << 9 | $6081 >>> 23;
    var $6172 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 91) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 48) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 48) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 91) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $6175 = $6172 << 8 | $6172 >>> 24;
    var $6176 = $6175 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 174) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 139) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 139) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 174) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $6177 = $6176 + $6175 | 0;
    HEAP32[$ctx$s2 + 1058] = $6176;
    HEAP32[$ctx$s2 + 1059] = $6177 << 9 | $6177 >>> 23;
    var $6266 = HEAP32[(((HEAP8[$132] ^ HEAP8[HEAPU8[$332] + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 84) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 84) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[HEAPU8[$384] + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $6269 = $6266 << 8 | $6266 >>> 24;
    var $6270 = $6269 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 138) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 132) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 132) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 138) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $6271 = $6270 + $6269 | 0;
    HEAP32[$ctx$s2 + 1060] = $6270;
    HEAP32[$ctx$s2 + 1061] = $6271 << 9 | $6271 >>> 23;
    var $6362 = HEAP32[(((HEAP8[$132] ^ HEAP8[(HEAPU8[$332] ^ 157) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[(HEAPU8[$306] ^ 35) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[(HEAPU8[$358] ^ 35) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[(HEAPU8[$384] ^ 157) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
    var $6365 = $6362 << 8 | $6362 >>> 24;
    var $6366 = $6365 + (HEAP32[(((HEAP8[$28] ^ HEAP8[(HEAPU8[$228] ^ 188) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[(HEAPU8[$210] ^ 223) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[(HEAPU8[$254] ^ 223) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[(HEAPU8[$280] ^ 188) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
    var $6367 = $6366 + $6365 | 0;
    HEAP32[$ctx$s2 + 1062] = $6366;
    HEAP32[$ctx$s2 + 1063] = $6367 << 9 | $6367 >>> 23;
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $412 = $key + 16 | 0;
  var $413 = HEAP8[$412];
  if ($413 << 24 >> 24 == 0) {
    var $si_0 = 0;
    var $sk_0 = 0;
    var $sl_0 = 0;
  } else {
    var $420 = HEAPU8[($413 & 255) - 1 + 440220 | 0];
    var $si_0 = HEAP8[$420 + 455464 | 0];
    var $sk_0 = HEAP8[$420 + 455465 | 0];
    var $sl_0 = HEAP8[$420 + 455509 | 0];
  }
  var $sl_0;
  var $sk_0;
  var $si_0;
  var $430 = $key + 17 | 0;
  var $431 = HEAP8[$430];
  if ($431 << 24 >> 24 == 0) {
    var $si_1 = $si_0;
    var $sj_1 = $sl_0;
    var $sk_1 = $sk_0;
    var $sl_1 = $sl_0;
  } else {
    var $438 = HEAPU8[($431 & 255) - 1 + 440220 | 0];
    var $si_1 = HEAP8[$438 + 455509 | 0] ^ $si_0;
    var $sj_1 = HEAP8[$438 + 455628 | 0] ^ $sl_0;
    var $sk_1 = HEAP8[$438 + 455532 | 0] ^ $sk_0;
    var $sl_1 = HEAP8[$438 + 455602 | 0] ^ $sl_0;
  }
  var $sl_1;
  var $sk_1;
  var $sj_1;
  var $si_1;
  var $456 = $key + 18 | 0;
  var $457 = HEAP8[$456];
  if ($457 << 24 >> 24 == 0) {
    var $si_2 = $si_1;
    var $sj_2 = $sj_1;
    var $sk_2 = $sk_1;
    var $sl_2 = $sl_1;
  } else {
    var $464 = HEAPU8[($457 & 255) - 1 + 440220 | 0];
    var $si_2 = HEAP8[$464 + 455602 | 0] ^ $si_1;
    var $sj_2 = HEAP8[$464 + 455677 | 0] ^ $sj_1;
    var $sk_2 = HEAP8[$464 + 455655 | 0] ^ $sk_1;
    var $sl_2 = HEAP8[$464 + 455673 | 0] ^ $sl_1;
  }
  var $sl_2;
  var $sk_2;
  var $sj_2;
  var $si_2;
  var $482 = $key + 19 | 0;
  var $483 = HEAP8[$482];
  if ($483 << 24 >> 24 == 0) {
    var $si_3 = $si_2;
    var $sj_3 = $sj_2;
    var $sk_3 = $sk_2;
    var $sl_3 = $sl_2;
  } else {
    var $490 = HEAPU8[($483 & 255) - 1 + 440220 | 0];
    var $si_3 = HEAP8[$490 + 455673 | 0] ^ $si_2;
    var $sj_3 = HEAP8[$490 + 455591 | 0] ^ $sj_2;
    var $sk_3 = HEAP8[$490 + 455525 | 0] ^ $sk_2;
    var $sl_3 = HEAP8[$490 + 455617 | 0] ^ $sl_2;
  }
  var $sl_3;
  var $sk_3;
  var $sj_3;
  var $si_3;
  var $508 = $key + 20 | 0;
  var $509 = HEAP8[$508];
  if ($509 << 24 >> 24 == 0) {
    var $si_4 = $si_3;
    var $sj_4 = $sj_3;
    var $sk_4 = $sk_3;
    var $sl_4 = $sl_3;
  } else {
    var $516 = HEAPU8[($509 & 255) - 1 + 440220 | 0];
    var $si_4 = HEAP8[$516 + 455617 | 0] ^ $si_3;
    var $sj_4 = HEAP8[$516 + 455534 | 0] ^ $sj_3;
    var $sk_4 = HEAP8[$516 + 455566 | 0] ^ $sk_3;
    var $sl_4 = HEAP8[$516 + 455614 | 0] ^ $sl_3;
  }
  var $sl_4;
  var $sk_4;
  var $sj_4;
  var $si_4;
  var $534 = $key + 21 | 0;
  var $535 = HEAP8[$534];
  if ($535 << 24 >> 24 == 0) {
    var $si_5 = $si_4;
    var $sj_5 = $sj_4;
    var $sk_5 = $sk_4;
    var $sl_5 = $sl_4;
  } else {
    var $542 = HEAPU8[($535 & 255) - 1 + 440220 | 0];
    var $si_5 = HEAP8[$542 + 455614 | 0] ^ $si_4;
    var $sj_5 = HEAP8[$542 + 455524 | 0] ^ $sj_4;
    var $sk_5 = HEAP8[$542 + 455555 | 0] ^ $sk_4;
    var $sl_5 = HEAP8[$542 + 455701 | 0] ^ $sl_4;
  }
  var $sl_5;
  var $sk_5;
  var $sj_5;
  var $si_5;
  var $560 = $key + 22 | 0;
  var $561 = HEAP8[$560];
  if ($561 << 24 >> 24 == 0) {
    var $si_6 = $si_5;
    var $sj_6 = $sj_5;
    var $sk_6 = $sk_5;
    var $sl_6 = $sl_5;
  } else {
    var $568 = HEAPU8[($561 & 255) - 1 + 440220 | 0];
    var $si_6 = HEAP8[$568 + 455701 | 0] ^ $si_5;
    var $sj_6 = HEAP8[$568 + 455519 | 0] ^ $sj_5;
    var $sk_6 = HEAP8[$568 + 455543 | 0] ^ $sk_5;
    var $sl_6 = HEAP8[$568 + 455688 | 0] ^ $sl_5;
  }
  var $sl_6;
  var $sk_6;
  var $sj_6;
  var $si_6;
  var $586 = $key + 23 | 0;
  var $587 = HEAP8[$586];
  if ($587 << 24 >> 24 == 0) {
    var $si_7 = $si_6;
    var $sj_7 = $sj_6;
    var $sk_7 = $sk_6;
    var $sl_7 = $sl_6;
  } else {
    var $594 = HEAPU8[($587 & 255) - 1 + 440220 | 0];
    var $si_7 = HEAP8[$594 + 455688 | 0] ^ $si_6;
    var $sj_7 = HEAP8[$594 + 455672 | 0] ^ $sj_6;
    var $sk_7 = HEAP8[$594 + 455604 | 0] ^ $sk_6;
    var $sl_7 = HEAP8[$594 + 455487 | 0] ^ $sl_6;
  }
  var $sl_7;
  var $sk_7;
  var $sj_7;
  var $si_7;
  var $612 = $key + 24 | 0;
  var $613 = HEAP8[$612];
  if ($613 << 24 >> 24 == 0) {
    var $so_0 = 0;
    var $sm_0 = 0;
    var $sn_0 = 0;
  } else {
    var $620 = HEAPU8[($613 & 255) - 1 + 440220 | 0];
    var $so_0 = HEAP8[$620 + 455465 | 0];
    var $sm_0 = HEAP8[$620 + 455464 | 0];
    var $sn_0 = HEAP8[$620 + 455509 | 0];
  }
  var $sn_0;
  var $sm_0;
  var $so_0;
  var $630 = $key + 25 | 0;
  var $631 = HEAP8[$630];
  if ($631 << 24 >> 24 == 0) {
    var $sp_1 = $sn_0;
    var $so_1 = $so_0;
    var $sm_1 = $sm_0;
    var $sn_1 = $sn_0;
  } else {
    var $638 = HEAPU8[($631 & 255) - 1 + 440220 | 0];
    var $sp_1 = HEAP8[$638 + 455602 | 0] ^ $sn_0;
    var $so_1 = HEAP8[$638 + 455532 | 0] ^ $so_0;
    var $sm_1 = HEAP8[$638 + 455509 | 0] ^ $sm_0;
    var $sn_1 = HEAP8[$638 + 455628 | 0] ^ $sn_0;
  }
  var $sn_1;
  var $sm_1;
  var $so_1;
  var $sp_1;
  var $656 = $key + 26 | 0;
  var $657 = HEAP8[$656];
  if ($657 << 24 >> 24 == 0) {
    var $sp_2 = $sp_1;
    var $so_2 = $so_1;
    var $sm_2 = $sm_1;
    var $sn_2 = $sn_1;
  } else {
    var $664 = HEAPU8[($657 & 255) - 1 + 440220 | 0];
    var $sp_2 = HEAP8[$664 + 455673 | 0] ^ $sp_1;
    var $so_2 = HEAP8[$664 + 455655 | 0] ^ $so_1;
    var $sm_2 = HEAP8[$664 + 455602 | 0] ^ $sm_1;
    var $sn_2 = HEAP8[$664 + 455677 | 0] ^ $sn_1;
  }
  var $sn_2;
  var $sm_2;
  var $so_2;
  var $sp_2;
  var $682 = $key + 27 | 0;
  var $683 = HEAP8[$682];
  if ($683 << 24 >> 24 == 0) {
    var $sp_3 = $sp_2;
    var $so_3 = $so_2;
    var $sm_3 = $sm_2;
    var $sn_3 = $sn_2;
  } else {
    var $690 = HEAPU8[($683 & 255) - 1 + 440220 | 0];
    var $sp_3 = HEAP8[$690 + 455617 | 0] ^ $sp_2;
    var $so_3 = HEAP8[$690 + 455525 | 0] ^ $so_2;
    var $sm_3 = HEAP8[$690 + 455673 | 0] ^ $sm_2;
    var $sn_3 = HEAP8[$690 + 455591 | 0] ^ $sn_2;
  }
  var $sn_3;
  var $sm_3;
  var $so_3;
  var $sp_3;
  var $708 = $key + 28 | 0;
  var $709 = HEAP8[$708];
  if ($709 << 24 >> 24 == 0) {
    var $sp_4 = $sp_3;
    var $so_4 = $so_3;
    var $sm_4 = $sm_3;
    var $sn_4 = $sn_3;
  } else {
    var $716 = HEAPU8[($709 & 255) - 1 + 440220 | 0];
    var $sp_4 = HEAP8[$716 + 455614 | 0] ^ $sp_3;
    var $so_4 = HEAP8[$716 + 455566 | 0] ^ $so_3;
    var $sm_4 = HEAP8[$716 + 455617 | 0] ^ $sm_3;
    var $sn_4 = HEAP8[$716 + 455534 | 0] ^ $sn_3;
  }
  var $sn_4;
  var $sm_4;
  var $so_4;
  var $sp_4;
  var $734 = $key + 29 | 0;
  var $735 = HEAP8[$734];
  if ($735 << 24 >> 24 == 0) {
    var $sp_5 = $sp_4;
    var $so_5 = $so_4;
    var $sm_5 = $sm_4;
    var $sn_5 = $sn_4;
  } else {
    var $742 = HEAPU8[($735 & 255) - 1 + 440220 | 0];
    var $sp_5 = HEAP8[$742 + 455701 | 0] ^ $sp_4;
    var $so_5 = HEAP8[$742 + 455555 | 0] ^ $so_4;
    var $sm_5 = HEAP8[$742 + 455614 | 0] ^ $sm_4;
    var $sn_5 = HEAP8[$742 + 455524 | 0] ^ $sn_4;
  }
  var $sn_5;
  var $sm_5;
  var $so_5;
  var $sp_5;
  var $760 = $key + 30 | 0;
  var $761 = HEAP8[$760];
  if ($761 << 24 >> 24 == 0) {
    var $sp_6 = $sp_5;
    var $so_6 = $so_5;
    var $sm_6 = $sm_5;
    var $sn_6 = $sn_5;
  } else {
    var $768 = HEAPU8[($761 & 255) - 1 + 440220 | 0];
    var $sp_6 = HEAP8[$768 + 455688 | 0] ^ $sp_5;
    var $so_6 = HEAP8[$768 + 455543 | 0] ^ $so_5;
    var $sm_6 = HEAP8[$768 + 455701 | 0] ^ $sm_5;
    var $sn_6 = HEAP8[$768 + 455519 | 0] ^ $sn_5;
  }
  var $sn_6;
  var $sm_6;
  var $so_6;
  var $sp_6;
  var $786 = $key + 31 | 0;
  var $787 = HEAP8[$786];
  if ($787 << 24 >> 24 == 0) {
    var $sp_7 = $sp_6;
    var $so_7 = $so_6;
    var $sm_7 = $sm_6;
    var $sn_7 = $sn_6;
  } else {
    var $794 = HEAPU8[($787 & 255) - 1 + 440220 | 0];
    var $sp_7 = HEAP8[$794 + 455487 | 0] ^ $sp_6;
    var $so_7 = HEAP8[$794 + 455604 | 0] ^ $so_6;
    var $sm_7 = HEAP8[$794 + 455688 | 0] ^ $sm_6;
    var $sn_7 = HEAP8[$794 + 455672 | 0] ^ $sn_6;
  }
  var $sn_7;
  var $sm_7;
  var $so_7;
  var $sp_7;
  var $k_04 = 1;
  var $j_05 = 0;
  var $i_06 = 0;
  while (1) {
    var $i_06;
    var $j_05;
    var $k_04;
    var $813 = $k_04 + 463860 | 0;
    HEAP32[($i_06 << 2 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[$813] ^ $sa_7) & 255) + 439432 | 0] ^ $se_7) & 255) + 439688 | 0] ^ $si_7) & 255) + 439688 | 0] ^ $sm_7) & 255) << 2) + 446984 >> 2];
    var $832 = $j_05 + 463860 | 0;
    HEAP32[(($i_06 << 2) + 1024 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[$832] ^ $sb_7) & 255) + 439432 | 0] ^ $sf_7) & 255) + 439432 | 0] ^ $sj_7) & 255) + 439688 | 0] ^ $sn_7) & 255) << 2) + 448008 >> 2];
    HEAP32[(($i_06 << 2) + 2048 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[$832] ^ $sc_7) & 255) + 439688 | 0] ^ $sg_7) & 255) + 439688 | 0] ^ $sk_7) & 255) + 439432 | 0] ^ $so_7) & 255) << 2) + 449032 >> 2];
    HEAP32[(($i_06 << 2) + 3072 >> 2) + $ctx$s2] = HEAP32[(((HEAP8[((HEAP8[((HEAP8[((HEAP8[$813] ^ $sd_7) & 255) + 439688 | 0] ^ $sh_7) & 255) + 439432 | 0] ^ $sl_7) & 255) + 439432 | 0] ^ $sp_7) & 255) << 2) + 450056 >> 2];
    var $887 = $i_06 + 1 | 0;
    if (($887 | 0) == 256) {
      break;
    } else {
      var $k_04 = $k_04 + 2 | 0;
      var $j_05 = $j_05 + 2 | 0;
      var $i_06 = $887;
    }
  }
  var $1056 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 103) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 243) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 103) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 243) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $1059 = $1056 << 8 | $1056 >>> 24;
  var $1060 = $1059 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 169) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 117) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 169) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 117) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $1061 = $1060 + $1059 | 0;
  HEAP32[$ctx$s2 + 1024] = $1060;
  HEAP32[$ctx$s2 + 1025] = $1061 << 9 | $1061 >>> 23;
  var $1232 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 232) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 244) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 232) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 244) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $1235 = $1232 << 8 | $1232 >>> 24;
  var $1236 = $1235 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 179) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 198) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 179) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 198) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $1237 = $1236 + $1235 | 0;
  HEAP32[$ctx$s2 + 1026] = $1236;
  HEAP32[$ctx$s2 + 1027] = $1237 << 9 | $1237 >>> 23;
  var $1408 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 253) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 123) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 253) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 123) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $1411 = $1408 << 8 | $1408 >>> 24;
  var $1412 = $1411 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 4) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 219) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 4) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 219) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $1413 = $1412 + $1411 | 0;
  HEAP32[$ctx$s2 + 1028] = $1412;
  HEAP32[$ctx$s2 + 1029] = $1413 << 9 | $1413 >>> 23;
  var $1584 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 118) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 200) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 118) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 200) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $1587 = $1584 << 8 | $1584 >>> 24;
  var $1588 = $1587 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 163) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 251) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 163) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 251) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $1589 = $1588 + $1587 | 0;
  HEAP32[$ctx$s2 + 1030] = $1588;
  HEAP32[$ctx$s2 + 1031] = $1589 << 9 | $1589 >>> 23;
  var $1760 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 146) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 211) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 146) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 211) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $1763 = $1760 << 8 | $1760 >>> 24;
  var $1764 = $1763 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 154) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 74) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 154) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 74) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $1765 = $1764 + $1763 | 0;
  HEAP32[$ctx$s2 + 1032] = $1764;
  HEAP32[$ctx$s2 + 1033] = $1765 << 9 | $1765 >>> 23;
  var $1936 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 120) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 107) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 120) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 107) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $1939 = $1936 << 8 | $1936 >>> 24;
  var $1940 = $1939 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 128) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 230) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 128) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 230) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $1941 = $1940 + $1939 | 0;
  HEAP32[$ctx$s2 + 1034] = $1940;
  HEAP32[$ctx$s2 + 1035] = $1941 << 9 | $1941 >>> 23;
  var $2112 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 221) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 125) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 221) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 125) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $2115 = $2112 << 8 | $2112 >>> 24;
  var $2116 = $2115 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 228) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 69) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 228) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 69) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $2117 = $2116 + $2115 | 0;
  HEAP32[$ctx$s2 + 1036] = $2116;
  HEAP32[$ctx$s2 + 1037] = $2117 << 9 | $2117 >>> 23;
  var $2288 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 56) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 75) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 56) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 75) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $2291 = $2288 << 8 | $2288 >>> 24;
  var $2292 = $2291 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 209) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 232) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 209) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 232) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $2293 = $2292 + $2291 | 0;
  HEAP32[$ctx$s2 + 1038] = $2292;
  HEAP32[$ctx$s2 + 1039] = $2293 << 9 | $2293 >>> 23;
  var $2464 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 198) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 50) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 198) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 50) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $2467 = $2464 << 8 | $2464 >>> 24;
  var $2468 = $2467 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 13) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 214) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 13) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 214) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $2469 = $2468 + $2467 | 0;
  HEAP32[$ctx$s2 + 1040] = $2468;
  HEAP32[$ctx$s2 + 1041] = $2469 << 9 | $2469 >>> 23;
  var $2640 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 152) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 253) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 152) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 253) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $2643 = $2640 << 8 | $2640 >>> 24;
  var $2644 = $2643 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 53) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 216) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 53) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 216) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $2645 = $2644 + $2643 | 0;
  HEAP32[$ctx$s2 + 1042] = $2644;
  HEAP32[$ctx$s2 + 1043] = $2645 << 9 | $2645 >>> 23;
  var $2816 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 247) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 113) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 247) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 113) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $2819 = $2816 << 8 | $2816 >>> 24;
  var $2820 = $2819 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 24) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 55) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 24) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 55) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $2821 = $2820 + $2819 | 0;
  HEAP32[$ctx$s2 + 1044] = $2820;
  HEAP32[$ctx$s2 + 1045] = $2821 << 9 | $2821 >>> 23;
  var $2992 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 108) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 225) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 108) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 225) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $2995 = $2992 << 8 | $2992 >>> 24;
  var $2996 = $2995 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 236) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 241) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 236) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 241) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $2997 = $2996 + $2995 | 0;
  HEAP32[$ctx$s2 + 1046] = $2996;
  HEAP32[$ctx$s2 + 1047] = $2997 << 9 | $2997 >>> 23;
  var $3168 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 117) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 15) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 117) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 15) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $3171 = $3168 << 8 | $3168 >>> 24;
  var $3172 = $3171 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 67) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 48) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 67) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 48) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $3173 = $3172 + $3171 | 0;
  HEAP32[$ctx$s2 + 1048] = $3172;
  HEAP32[$ctx$s2 + 1049] = $3173 << 9 | $3173 >>> 23;
  var $3344 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 38) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 27) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 38) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 27) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $3347 = $3344 << 8 | $3344 >>> 24;
  var $3348 = $3347 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 55) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 248) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 55) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 248) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $3349 = $3348 + $3347 | 0;
  HEAP32[$ctx$s2 + 1050] = $3348;
  HEAP32[$ctx$s2 + 1051] = $3349 << 9 | $3349 >>> 23;
  var $3520 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 19) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 250) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 19) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 250) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $3523 = $3520 << 8 | $3520 >>> 24;
  var $3524 = $3523 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 250) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 135) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 250) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 135) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $3525 = $3524 + $3523 | 0;
  HEAP32[$ctx$s2 + 1052] = $3524;
  HEAP32[$ctx$s2 + 1053] = $3525 << 9 | $3525 >>> 23;
  var $3696 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 72) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 63) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 72) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 63) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $3699 = $3696 << 8 | $3696 >>> 24;
  var $3700 = $3699 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 148) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 6) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 148) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 6) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $3701 = $3700 + $3699 | 0;
  HEAP32[$ctx$s2 + 1054] = $3700;
  HEAP32[$ctx$s2 + 1055] = $3701 << 9 | $3701 >>> 23;
  var $3872 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 208) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 186) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 208) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 186) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $3875 = $3872 << 8 | $3872 >>> 24;
  var $3876 = $3875 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 242) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 94) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 242) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 94) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $3877 = $3876 + $3875 | 0;
  HEAP32[$ctx$s2 + 1056] = $3876;
  HEAP32[$ctx$s2 + 1057] = $3877 << 9 | $3877 >>> 23;
  var $4048 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 48) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 91) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 48) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 91) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $4051 = $4048 << 8 | $4048 >>> 24;
  var $4052 = $4051 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 139) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 174) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 139) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 174) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $4053 = $4052 + $4051 | 0;
  HEAP32[$ctx$s2 + 1058] = $4052;
  HEAP32[$ctx$s2 + 1059] = $4053 << 9 | $4053 >>> 23;
  var $4222 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 84) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[HEAPU8[$708] + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 84) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[HEAPU8[$786] + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $4225 = $4222 << 8 | $4222 >>> 24;
  var $4226 = $4225 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 132) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 138) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 132) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 138) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $4227 = $4226 + $4225 | 0;
  HEAP32[$ctx$s2 + 1060] = $4226;
  HEAP32[$ctx$s2 + 1061] = $4227 << 9 | $4227 >>> 23;
  var $4398 = HEAP32[(((HEAP8[$132] ^ HEAP8[((HEAP8[$332] ^ HEAP8[((HEAP8[$534] ^ HEAP8[(HEAPU8[$734] ^ 35) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$106] ^ HEAP8[((HEAP8[$306] ^ HEAP8[((HEAP8[$508] ^ HEAP8[(HEAPU8[$708] ^ 157) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$158] ^ HEAP8[((HEAP8[$358] ^ HEAP8[((HEAP8[$560] ^ HEAP8[(HEAPU8[$760] ^ 35) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$184] ^ HEAP8[((HEAP8[$384] ^ HEAP8[((HEAP8[$586] ^ HEAP8[(HEAPU8[$786] ^ 157) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2];
  var $4401 = $4398 << 8 | $4398 >>> 24;
  var $4402 = $4401 + (HEAP32[(((HEAP8[$28] ^ HEAP8[((HEAP8[$228] ^ HEAP8[((HEAP8[$430] ^ HEAP8[(HEAPU8[$630] ^ 223) + 439432 | 0]) & 255) + 439432 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 448008 >> 2] ^ HEAP32[(((HEAP8[$key] ^ HEAP8[((HEAP8[$210] ^ HEAP8[((HEAP8[$412] ^ HEAP8[(HEAPU8[$612] ^ 188) + 439432 | 0]) & 255) + 439688 | 0]) & 255) + 439688 | 0]) & 255) << 2) + 446984 >> 2] ^ HEAP32[(((HEAP8[$54] ^ HEAP8[((HEAP8[$254] ^ HEAP8[((HEAP8[$456] ^ HEAP8[(HEAPU8[$656] ^ 223) + 439688 | 0]) & 255) + 439688 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 449032 >> 2] ^ HEAP32[(((HEAP8[$80] ^ HEAP8[((HEAP8[$280] ^ HEAP8[((HEAP8[$482] ^ HEAP8[(HEAPU8[$682] ^ 188) + 439688 | 0]) & 255) + 439432 | 0]) & 255) + 439432 | 0]) & 255) << 2) + 450056 >> 2]) | 0;
  var $4403 = $4402 + $4401 | 0;
  HEAP32[$ctx$s2 + 1062] = $4402;
  HEAP32[$ctx$s2 + 1063] = $4403 << 9 | $4403 >>> 23;
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_do_twofish_setkey["X"] = 1;
function _whirlpool_read($ctx) {
  return $ctx + 64 | 0;
}
function _selftest996() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4272 | 0;
  var $1 = __stackBase__;
  _twofish_setkey($1, 415848, 16);
  var $3 = __stackBase__ + 4256 | 0;
  _twofish_encrypt($1, $3, 415612);
  do {
    if ((_memcmp($3, 416656, 16) | 0) == 0) {
      _twofish_decrypt($1, $3, $3);
      if ((_memcmp($3, 415612, 16) | 0) != 0) {
        var $_0 = 472212;
        break;
      }
      _twofish_setkey($1, 415736, 32);
      _twofish_encrypt($1, $3, 415572);
      if ((_memcmp($3, 416584, 16) | 0) != 0) {
        var $_0 = 470824;
        break;
      }
      _twofish_decrypt($1, $3, $3);
      var $_0 = (_memcmp($3, 415572, 16) | 0) == 0 ? 0 : 469448;
    } else {
      var $_0 = 474444;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _whirlpool_init($ctx) {
  for (var $$dest = $ctx >> 2, $$stop = $$dest + 41; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  return;
}
function _whirlpool_write($ctx, $buffer, $buffer_n) {
  _whirlpool_add($ctx, $buffer, $buffer_n);
  return;
}
function _whirlpool_final($ctx) {
  var $27$s2;
  var $3$s2;
  var label = 0;
  var $1 = $ctx;
  _whirlpool_add($1, 0, 0);
  var $3$s2 = ($ctx + 128 | 0) >> 2;
  var $4 = HEAP32[$3$s2];
  HEAP32[$3$s2] = $4 + 1 | 0;
  HEAP8[$4 + ($ctx + 64) | 0] = -128;
  var $7 = HEAP32[$3$s2];
  do {
    if ($7 >>> 0 > 32) {
      L497 : do {
        if ($7 >>> 0 < 64) {
          var $10 = $7;
          while (1) {
            var $10;
            HEAP32[$3$s2] = $10 + 1 | 0;
            HEAP8[$10 + ($ctx + 64) | 0] = 0;
            var $_pr = HEAP32[$3$s2];
            if ($_pr >>> 0 < 64) {
              var $10 = $_pr;
            } else {
              break L497;
            }
          }
        }
      } while (0);
      _whirlpool_add($1, 0, 0);
      label = 383;
      break;
    } else {
      var $15 = $7;
    }
  } while (0);
  while (1) {
    if (label == 383) {
      label = 0;
      var $15 = HEAP32[$3$s2];
    }
    var $15;
    if ($15 >>> 0 >= 32) {
      break;
    }
    HEAP32[$3$s2] = $15 + 1 | 0;
    HEAP8[$15 + ($ctx + 64) | 0] = 0;
    label = 383;
    continue;
  }
  _memcpy($15 + ($ctx + 64) | 0, $ctx + 132 | 0, 32);
  HEAP32[$3$s2] = HEAP32[$3$s2] + 32 | 0;
  _whirlpool_add($1, 0, 0);
  var $25 = $ctx;
  var $i_013 = 0;
  while (1) {
    var $i_013;
    var $27$s2 = (($i_013 << 3) + $25 | 0) >> 2;
    var $31 = $i_013 << 3;
    HEAP8[$31 + ($ctx + 64) | 0] = (HEAP32[$27$s2 + 1] >>> 24 | 0 << 8) & 255;
    HEAP8[$ctx + ($31 | 1) + 64 | 0] = (HEAP32[$27$s2 + 1] >>> 16 | 0 << 16) & 255;
    HEAP8[$ctx + ($31 | 2) + 64 | 0] = (HEAP32[$27$s2 + 1] >>> 8 | 0 << 24) & 255;
    HEAP8[$ctx + ($31 | 3) + 64 | 0] = HEAP32[$27$s2 + 1] & 255;
    HEAP8[$ctx + ($31 | 4) + 64 | 0] = (HEAP32[$27$s2] >>> 24 | HEAP32[$27$s2 + 1] << 8) & 255;
    HEAP8[$ctx + ($31 | 5) + 64 | 0] = (HEAP32[$27$s2] >>> 16 | HEAP32[$27$s2 + 1] << 16) & 255;
    HEAP8[$ctx + ($31 | 6) + 64 | 0] = (HEAP32[$27$s2] >>> 8 | HEAP32[$27$s2 + 1] << 24) & 255;
    HEAP8[$ctx + ($31 | 7) + 64 | 0] = HEAP32[$27$s2] & 255;
    var $67 = $i_013 + 1 | 0;
    if (($67 | 0) == 8) {
      break;
    } else {
      var $i_013 = $67;
    }
  }
  return;
}
_whirlpool_final["X"] = 1;
function _whirlpool_add($context, $buffer_arg, $buffer_n) {
  var $1$s2;
  var label = 0;
  var $1$s2 = ($context + 128 | 0) >> 2;
  var $2 = $context + 64 | 0;
  var $buffer_n_tr = $buffer_n;
  var $buffer_arg_tr = $buffer_arg;
  L511 : while (1) {
    var $buffer_arg_tr;
    var $buffer_n_tr;
    var $3$0 = $buffer_n_tr;
    var $3$1 = 0;
    if ((HEAP32[$1$s2] | 0) == 64) {
      _whirlpool_transform($context, $2);
      HEAP32[$1$s2] = 0;
    }
    if (($buffer_arg_tr | 0) == 0) {
      label = 411;
      break;
    }
    if ((HEAP32[$1$s2] | 0) == 0) {
      var $_1_ph = $buffer_n_tr;
      var $buffer_1_ph = $buffer_arg_tr;
      break;
    } else {
      var $_0 = $buffer_n_tr;
      var $buffer_0 = $buffer_arg_tr;
    }
    while (1) {
      var $buffer_0;
      var $_0;
      if (($_0 | 0) == 0) {
        var $buffer_n_tr = 0;
        var $buffer_arg_tr = 0;
        continue L511;
      }
      var $14 = HEAP32[$1$s2];
      if ($14 >>> 0 >= 64) {
        label = 397;
        break L511;
      }
      var $18 = HEAP8[$buffer_0];
      HEAP32[$1$s2] = $14 + 1 | 0;
      HEAP8[$context + ($14 + 64) | 0] = $18;
      var $_0 = $_0 - 1 | 0;
      var $buffer_0 = $buffer_0 + 1 | 0;
    }
  }
  if (label == 397) {
    _whirlpool_add($context, 0, 0);
    var $_1_ph = $_0;
    var $buffer_1_ph = $buffer_0;
  } else if (label == 411) {
    return;
  }
  var $buffer_1_ph;
  var $_1_ph;
  L525 : do {
    if ($_1_ph >>> 0 > 63) {
      var $buffer_15 = $buffer_1_ph;
      var $_16 = $_1_ph;
      while (1) {
        var $_16;
        var $buffer_15;
        _whirlpool_transform($context, $buffer_15);
        HEAP32[$1$s2] = 0;
        var $23 = $_16 - 64 | 0;
        var $24 = $buffer_15 + 64 | 0;
        if ($23 >>> 0 > 63) {
          var $buffer_15 = $24;
          var $_16 = $23;
        } else {
          var $_2 = $23;
          var $buffer_2 = $24;
          break L525;
        }
      }
    } else {
      var $_2 = $_1_ph;
      var $buffer_2 = $buffer_1_ph;
    }
  } while (0);
  while (1) {
    var $buffer_2;
    var $_2;
    if (($_2 | 0) == 0) {
      break;
    }
    var $28 = HEAP32[$1$s2];
    if ($28 >>> 0 >= 64) {
      break;
    }
    var $32 = HEAP8[$buffer_2];
    HEAP32[$1$s2] = $28 + 1 | 0;
    HEAP8[$context + ($28 + 64) | 0] = $32;
    var $_2 = $_2 - 1 | 0;
    var $buffer_2 = $buffer_2 + 1 | 0;
  }
  var $i_0 = 1;
  var $carry_0 = 0;
  var $buffer_size_0$1 = $3$1 << 3 | $3$0 >>> 29;
  var $buffer_size_0$0 = $3$0 << 3 | 0 >>> 29;
  while (1) {
    var $buffer_size_0$0;
    var $buffer_size_0$1;
    var $carry_0;
    var $i_0;
    if ($i_0 >>> 0 >= 33) {
      break;
    }
    if (($buffer_size_0$0 | 0) == 0 & ($buffer_size_0$1 | 0) == 0 & ($carry_0 | 0) == 0) {
      break;
    }
    var $44 = 32 - $i_0 + $context + 132 | 0;
    var $46$0 = HEAPU8[$44];
    var $50$0 = (i64Math.add((i64Math.add($carry_0, 0, $buffer_size_0$0 & 255, $buffer_size_0$1 & 0), HEAP32[tempDoublePtr >> 2]), HEAP32[tempDoublePtr + 4 >> 2], $46$0, 0), HEAP32[tempDoublePtr >> 2]);
    HEAP8[$44] = $50$0 & 255;
    var $53$0 = $buffer_size_0$0 >>> 8 | $buffer_size_0$1 << 24;
    var $i_0 = $i_0 + 1 | 0;
    var $carry_0 = $50$0 >>> 8;
    var $buffer_size_0$1 = $buffer_size_0$1 >>> 8 | 0 << 24;
    var $buffer_size_0$0 = $53$0;
  }
  if (($buffer_size_0$0 | 0) == 0 & ($buffer_size_0$1 | 0) == 0 & ($carry_0 | 0) == 0) {
    return;
  } else {
    __gcry_assert_failed(489868, 481312, 1351, 494004);
  }
}



_whirlpool_add["X"] = 1;
function _whirlpool_transform($context, $data) {
  var $949$s2;
  var $944$s2;
  var $929$s2;
  var $919$s2;
  var $914$s2;
  var $113$s2;
  var $112$s2;
  var $111$s2;
  var $110$s2;
  var $109$s2;
  var $108$s2;
  var $107$s2;
  var $106$s2;
  var $105$s2;
  var $104$s2;
  var $103$s2;
  var $102$s2;
  var $101$s2;
  var $100$s2;
  var $99$s2;
  var $98$s2;
  var $97$s2;
  var $96$s2;
  var $95$s2;
  var $94$s2;
  var $93$s2;
  var $92$s2;
  var $91$s2;
  var $90$s2;
  var $st$28$1$s2;
  var $st$70$1$s2;
  var $st$70$0$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  var $data_block = __stackBase__;
  var $key = __stackBase__ + 64;
  var $state = __stackBase__ + 128;
  var $block = __stackBase__ + 192;
  var $i_0125 = 0;
  while (1) {
    var $i_0125;
    var $2 = $i_0125 << 3;
    var $25$0 = HEAPU8[$data + ($2 | 4) | 0];
    var $30$0 = HEAPU8[$data + ($2 | 5) | 0];
    var $35$0 = HEAPU8[$data + ($2 | 6) | 0];
    var $47$1 = HEAPU8[$data + ($2 | 1) | 0] << 16 | 0 >>> 16 | (HEAPU8[$data + $2 | 0] << 24 | 0 >>> 8) | (HEAPU8[$data + ($2 | 2) | 0] << 8 | 0 >>> 24) | HEAPU8[$data + ($2 | 3) | 0] | (0 << 24 | $25$0 >>> 8) | (0 << 16 | $30$0 >>> 16) | (0 << 8 | $35$0 >>> 24);
    var $48 = ($i_0125 << 3) + $data_block | 0;
    var $st$70$0 = $48 | 0, $st$70$0$s2 = $st$70$0 >> 2;
    HEAP32[$st$70$0$s2] = 0 << 16 | 0 >>> 16 | (0 << 24 | 0 >>> 8) | (0 << 8 | 0 >>> 24) | ($25$0 << 24 | 0 >>> 8) | ($30$0 << 16 | 0 >>> 16) | HEAPU8[$data + ($2 | 7) | 0] | ($35$0 << 8 | 0 >>> 24);
    var $st$70$1 = $48 + 4 | 0, $st$70$1$s2 = $st$70$1 >> 2;
    HEAP32[$st$70$1$s2] = $47$1;
    var $49 = $i_0125 + 1 | 0;
    if (($49 | 0) == 8) {
      break;
    } else {
      var $i_0125 = $49;
    }
  }
  var $context131 = $context;
  var $key126 = $key;
  var $state128 = $state;
  var $block127 = $block;
  for (var $$src = $context131 >> 2, $$dest = $key126 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  for (var $$src = $context131 >> 2, $$dest = $state128 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $50 = $data_block | 0;
  var $52 = $state | 0;
  var $st$12$0 = $52 | 0;
  var $st$12$1 = $52 + 4 | 0;
  var $54$1 = HEAP32[$st$12$1 >> 2] ^ HEAP32[$50 + 4 >> 2];
  HEAP32[$52 >> 2] = HEAP32[$st$12$0 >> 2] ^ HEAP32[$50 >> 2];
  HEAP32[$52 + 4 >> 2] = $54$1;
  var $55 = $data_block + 8 | 0;
  var $57 = $state + 8 | 0;
  var $st$28$0 = $57 | 0;
  var $st$28$1 = $57 + 4 | 0, $st$28$1$s2 = $st$28$1 >> 2;
  var $59$1 = HEAP32[$st$28$1$s2] ^ HEAP32[$55 + 4 >> 2];
  HEAP32[$57 >> 2] = HEAP32[$st$28$0 >> 2] ^ HEAP32[$55 >> 2];
  HEAP32[$57 + 4 >> 2] = $59$1;
  var $60 = $data_block + 16 | 0;
  var $62 = $state + 16 | 0;
  var $st$44$0 = $62 | 0;
  var $st$44$1 = $62 + 4 | 0;
  var $64$1 = HEAP32[$st$44$1 >> 2] ^ HEAP32[$60 + 4 >> 2];
  HEAP32[$62 >> 2] = HEAP32[$st$44$0 >> 2] ^ HEAP32[$60 >> 2];
  HEAP32[$62 + 4 >> 2] = $64$1;
  var $65 = $data_block + 24 | 0;
  var $67 = $state + 24 | 0;
  var $st$60$0 = $67 | 0;
  var $st$60$1 = $67 + 4 | 0;
  var $69$1 = HEAP32[$st$60$1 >> 2] ^ HEAP32[$65 + 4 >> 2];
  var $st$66$0 = $67 | 0;
  HEAP32[$st$66$0 >> 2] = HEAP32[$st$60$0 >> 2] ^ HEAP32[$65 >> 2];
  var $st$66$1 = $67 + 4 | 0;
  HEAP32[$st$66$1 >> 2] = $69$1;
  var $70 = $data_block + 32 | 0;
  var $72 = $state + 32 | 0;
  var $st$76$0 = $72 | 0;
  var $st$76$1 = $72 + 4 | 0;
  var $74$1 = HEAP32[$st$76$1 >> 2] ^ HEAP32[$70 + 4 >> 2];
  HEAP32[$72 >> 2] = HEAP32[$st$76$0 >> 2] ^ HEAP32[$70 >> 2];
  HEAP32[$72 + 4 >> 2] = $74$1;
  var $75 = $data_block + 40 | 0;
  var $77 = $state + 40 | 0;
  var $st$92$0 = $77 | 0;
  var $st$92$1 = $77 + 4 | 0;
  var $79$1 = HEAP32[$st$92$1 >> 2] ^ HEAP32[$75 + 4 >> 2];
  var $st$98$0 = $77 | 0;
  HEAP32[$st$98$0 >> 2] = HEAP32[$st$92$0 >> 2] ^ HEAP32[$75 >> 2];
  var $st$98$1 = $77 + 4 | 0;
  HEAP32[$st$98$1 >> 2] = $79$1;
  var $80 = $data_block + 48 | 0;
  var $82 = $state + 48 | 0;
  var $st$108$0 = $82 | 0;
  var $st$108$1 = $82 + 4 | 0;
  var $84$1 = HEAP32[$st$108$1 >> 2] ^ HEAP32[$80 + 4 >> 2];
  HEAP32[$82 >> 2] = HEAP32[$st$108$0 >> 2] ^ HEAP32[$80 >> 2];
  HEAP32[$82 + 4 >> 2] = $84$1;
  var $85 = $data_block + 56 | 0;
  var $87 = $state + 56 | 0;
  var $st$124$0 = $87 | 0;
  var $st$124$1 = $87 + 4 | 0;
  var $89$1 = HEAP32[$st$124$1 >> 2] ^ HEAP32[$85 + 4 >> 2];
  HEAP32[$87 >> 2] = HEAP32[$st$124$0 >> 2] ^ HEAP32[$85 >> 2];
  HEAP32[$87 + 4 >> 2] = $89$1;
  var $90 = $key | 0, $90$s2 = $90 >> 2;
  var $91$s2 = ($key + 56 | 0) >> 2;
  var $92 = $key + 48 | 0, $92$s2 = $92 >> 2;
  var $93$s2 = ($key + 40 | 0) >> 2;
  var $94 = $key + 32 | 0, $94$s2 = $94 >> 2;
  var $95 = $key + 24 | 0, $95$s2 = $95 >> 2;
  var $96$s2 = ($key + 16 | 0) >> 2;
  var $97 = $key + 8 | 0, $97$s2 = $97 >> 2;
  var $98$s2 = ($block | 0) >> 2;
  var $99$s2 = ($block + 8 | 0) >> 2;
  var $100$s2 = ($block + 16 | 0) >> 2;
  var $101$s2 = ($block + 24 | 0) >> 2;
  var $102$s2 = ($block + 32 | 0) >> 2;
  var $103$s2 = ($block + 40 | 0) >> 2;
  var $104$s2 = ($block + 48 | 0) >> 2;
  var $105$s2 = ($block + 56 | 0) >> 2;
  var $106$s2 = ($state | 0) >> 2;
  var $107$s2 = ($state + 56 | 0) >> 2;
  var $108$s2 = ($state + 48 | 0) >> 2;
  var $109$s2 = ($state + 40 | 0) >> 2;
  var $110$s2 = ($state + 32 | 0) >> 2;
  var $111$s2 = ($state + 24 | 0) >> 2;
  var $112$s2 = ($state + 16 | 0) >> 2;
  var $113$s2 = ($state + 8 | 0) >> 2;
  var $r_0118 = 0;
  while (1) {
    var $r_0118;
    var $st$1$0 = $90 | 0;
    var $st$1$1 = $90 + 4 | 0;
    var $118 = ((HEAP32[$st$1$1 >> 2] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $123 = (((HEAP32[$91$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $st$28$0 = $92 | 0;
    var $st$28$1 = $92 + 4 | 0, $st$28$1$s2 = $st$28$1 >> 2;
    var $128 = (((HEAP32[$st$28$1$s2] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $st$38$0 = $128 | 0;
    var $st$38$1 = $128 + 4 | 0;
    var $133 = ((HEAP32[$93$s2 + 1] & 255) << 3) + 520856 | 0;
    var $138 = (((HEAP32[$94$s2] >>> 24 | HEAP32[$94$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $st$66$0 = $138 | 0;
    var $st$66$1 = $138 + 4 | 0;
    var $st$70$0 = $95 | 0, $st$70$0$s2 = $st$70$0 >> 2;
    var $st$70$1 = $95 + 4 | 0, $st$70$1$s2 = $st$70$1 >> 2;
    var $143 = (((HEAP32[$st$70$0$s2] >>> 16 | HEAP32[$st$70$1$s2] << 16) & 255) << 3) + 516760 | 0;
    var $148 = (((HEAP32[$96$s2] >>> 8 | HEAP32[$96$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $st$98$0 = $97 | 0;
    var $st$98$1 = $97 + 4 | 0;
    var $152 = ((HEAP32[$st$98$0 >> 2] & 255) << 3) + 512664 | 0;
    var $154 = ($r_0118 << 3) + 439348 | 0;
    var $163$1 = HEAP32[$123 + 4 >> 2] ^ HEAP32[$118 + 4 >> 2] ^ HEAP32[$st$38$1 >> 2] ^ HEAP32[$133 + 4 >> 2] ^ HEAP32[$st$66$1 >> 2] ^ HEAP32[$143 + 4 >> 2] ^ HEAP32[$148 + 4 >> 2] ^ HEAP32[$152 + 4 >> 2] ^ HEAP32[$154 + 4 >> 2];
    HEAP32[$98$s2] = HEAP32[$123 >> 2] ^ HEAP32[$118 >> 2] ^ HEAP32[$st$38$0 >> 2] ^ HEAP32[$133 >> 2] ^ HEAP32[$st$66$0 >> 2] ^ HEAP32[$143 >> 2] ^ HEAP32[$148 >> 2] ^ HEAP32[$152 >> 2] ^ HEAP32[$154 >> 2];
    HEAP32[$98$s2 + 1] = $163$1;
    var $167 = ((HEAP32[$97$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $172 = (((HEAP32[$90$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $177 = (((HEAP32[$91$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $st$172$0 = $177 | 0;
    var $st$172$1 = $177 + 4 | 0;
    var $182 = ((HEAP32[$92$s2 + 1] & 255) << 3) + 520856 | 0;
    var $187 = (((HEAP32[$93$s2] >>> 24 | HEAP32[$93$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $st$204$0 = $94 | 0;
    var $st$204$1 = $94 + 4 | 0;
    var $192 = (((HEAP32[$st$204$0 >> 2] >>> 16 | HEAP32[$st$204$1 >> 2] << 16) & 255) << 3) + 516760 | 0;
    var $st$214$0 = $192 | 0;
    var $st$214$1 = $192 + 4 | 0;
    var $197 = (((HEAP32[$95$s2] >>> 8 | HEAP32[$95$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $201 = ((HEAP32[$96$s2] & 255) << 3) + 512664 | 0;
    var $209$1 = HEAP32[$172 + 4 >> 2] ^ HEAP32[$167 + 4 >> 2] ^ HEAP32[$st$172$1 >> 2] ^ HEAP32[$182 + 4 >> 2] ^ HEAP32[$187 + 4 >> 2] ^ HEAP32[$st$214$1 >> 2] ^ HEAP32[$197 + 4 >> 2] ^ HEAP32[$201 + 4 >> 2];
    HEAP32[$99$s2] = HEAP32[$172 >> 2] ^ HEAP32[$167 >> 2] ^ HEAP32[$st$172$0 >> 2] ^ HEAP32[$182 >> 2] ^ HEAP32[$187 >> 2] ^ HEAP32[$st$214$0 >> 2] ^ HEAP32[$197 >> 2] ^ HEAP32[$201 >> 2];
    HEAP32[$99$s2 + 1] = $209$1;
    var $213 = ((HEAP32[$96$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $218 = (((HEAP32[$97$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $223 = (((HEAP32[$90$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $228 = ((HEAP32[$91$s2 + 1] & 255) << 3) + 520856 | 0;
    var $233 = (((HEAP32[$92$s2] >>> 24 | HEAP32[$92$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $238 = (((HEAP32[$93$s2] >>> 16 | HEAP32[$93$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $243 = (((HEAP32[$94$s2] >>> 8 | HEAP32[$94$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $247 = ((HEAP32[$95$s2] & 255) << 3) + 512664 | 0;
    var $255$1 = HEAP32[$218 + 4 >> 2] ^ HEAP32[$213 + 4 >> 2] ^ HEAP32[$223 + 4 >> 2] ^ HEAP32[$228 + 4 >> 2] ^ HEAP32[$233 + 4 >> 2] ^ HEAP32[$238 + 4 >> 2] ^ HEAP32[$243 + 4 >> 2] ^ HEAP32[$247 + 4 >> 2];
    HEAP32[$100$s2] = HEAP32[$218 >> 2] ^ HEAP32[$213 >> 2] ^ HEAP32[$223 >> 2] ^ HEAP32[$228 >> 2] ^ HEAP32[$233 >> 2] ^ HEAP32[$238 >> 2] ^ HEAP32[$243 >> 2] ^ HEAP32[$247 >> 2];
    HEAP32[$100$s2 + 1] = $255$1;
    var $259 = ((HEAP32[$95$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $264 = (((HEAP32[$96$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $269 = (((HEAP32[$97$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $274 = ((HEAP32[$90$s2 + 1] & 255) << 3) + 520856 | 0;
    var $279 = (((HEAP32[$91$s2] >>> 24 | HEAP32[$91$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $284 = (((HEAP32[$92$s2] >>> 16 | HEAP32[$92$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $289 = (((HEAP32[$93$s2] >>> 8 | HEAP32[$93$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $293 = ((HEAP32[$94$s2] & 255) << 3) + 512664 | 0;
    var $301$1 = HEAP32[$264 + 4 >> 2] ^ HEAP32[$259 + 4 >> 2] ^ HEAP32[$269 + 4 >> 2] ^ HEAP32[$274 + 4 >> 2] ^ HEAP32[$279 + 4 >> 2] ^ HEAP32[$284 + 4 >> 2] ^ HEAP32[$289 + 4 >> 2] ^ HEAP32[$293 + 4 >> 2];
    HEAP32[$101$s2] = HEAP32[$264 >> 2] ^ HEAP32[$259 >> 2] ^ HEAP32[$269 >> 2] ^ HEAP32[$274 >> 2] ^ HEAP32[$279 >> 2] ^ HEAP32[$284 >> 2] ^ HEAP32[$289 >> 2] ^ HEAP32[$293 >> 2];
    HEAP32[$101$s2 + 1] = $301$1;
    var $305 = ((HEAP32[$94$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $310 = (((HEAP32[$95$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $315 = (((HEAP32[$96$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $320 = ((HEAP32[$97$s2 + 1] & 255) << 3) + 520856 | 0;
    var $325 = (((HEAP32[$90$s2] >>> 24 | HEAP32[$90$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $330 = (((HEAP32[$91$s2] >>> 16 | HEAP32[$91$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $335 = (((HEAP32[$92$s2] >>> 8 | HEAP32[$92$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $339 = ((HEAP32[$93$s2] & 255) << 3) + 512664 | 0;
    var $347$1 = HEAP32[$310 + 4 >> 2] ^ HEAP32[$305 + 4 >> 2] ^ HEAP32[$315 + 4 >> 2] ^ HEAP32[$320 + 4 >> 2] ^ HEAP32[$325 + 4 >> 2] ^ HEAP32[$330 + 4 >> 2] ^ HEAP32[$335 + 4 >> 2] ^ HEAP32[$339 + 4 >> 2];
    HEAP32[$102$s2] = HEAP32[$310 >> 2] ^ HEAP32[$305 >> 2] ^ HEAP32[$315 >> 2] ^ HEAP32[$320 >> 2] ^ HEAP32[$325 >> 2] ^ HEAP32[$330 >> 2] ^ HEAP32[$335 >> 2] ^ HEAP32[$339 >> 2];
    HEAP32[$102$s2 + 1] = $347$1;
    var $351 = ((HEAP32[$93$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $356 = (((HEAP32[$94$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $361 = (((HEAP32[$95$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $366 = ((HEAP32[$96$s2 + 1] & 255) << 3) + 520856 | 0;
    var $371 = (((HEAP32[$97$s2] >>> 24 | HEAP32[$97$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $376 = (((HEAP32[$90$s2] >>> 16 | HEAP32[$90$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $381 = (((HEAP32[$91$s2] >>> 8 | HEAP32[$91$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $385 = ((HEAP32[$92$s2] & 255) << 3) + 512664 | 0;
    var $393$1 = HEAP32[$356 + 4 >> 2] ^ HEAP32[$351 + 4 >> 2] ^ HEAP32[$361 + 4 >> 2] ^ HEAP32[$366 + 4 >> 2] ^ HEAP32[$371 + 4 >> 2] ^ HEAP32[$376 + 4 >> 2] ^ HEAP32[$381 + 4 >> 2] ^ HEAP32[$385 + 4 >> 2];
    HEAP32[$103$s2] = HEAP32[$356 >> 2] ^ HEAP32[$351 >> 2] ^ HEAP32[$361 >> 2] ^ HEAP32[$366 >> 2] ^ HEAP32[$371 >> 2] ^ HEAP32[$376 >> 2] ^ HEAP32[$381 >> 2] ^ HEAP32[$385 >> 2];
    HEAP32[$103$s2 + 1] = $393$1;
    var $397 = ((HEAP32[$92$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $402 = (((HEAP32[$93$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $407 = (((HEAP32[$94$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $412 = ((HEAP32[$95$s2 + 1] & 255) << 3) + 520856 | 0;
    var $417 = (((HEAP32[$96$s2] >>> 24 | HEAP32[$96$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $422 = (((HEAP32[$97$s2] >>> 16 | HEAP32[$97$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $427 = (((HEAP32[$90$s2] >>> 8 | HEAP32[$90$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $431 = ((HEAP32[$91$s2] & 255) << 3) + 512664 | 0;
    var $439$1 = HEAP32[$402 + 4 >> 2] ^ HEAP32[$397 + 4 >> 2] ^ HEAP32[$407 + 4 >> 2] ^ HEAP32[$412 + 4 >> 2] ^ HEAP32[$417 + 4 >> 2] ^ HEAP32[$422 + 4 >> 2] ^ HEAP32[$427 + 4 >> 2] ^ HEAP32[$431 + 4 >> 2];
    HEAP32[$104$s2] = HEAP32[$402 >> 2] ^ HEAP32[$397 >> 2] ^ HEAP32[$407 >> 2] ^ HEAP32[$412 >> 2] ^ HEAP32[$417 >> 2] ^ HEAP32[$422 >> 2] ^ HEAP32[$427 >> 2] ^ HEAP32[$431 >> 2];
    HEAP32[$104$s2 + 1] = $439$1;
    var $443 = ((HEAP32[$91$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $448 = (((HEAP32[$92$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $453 = (((HEAP32[$93$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $458 = ((HEAP32[$94$s2 + 1] & 255) << 3) + 520856 | 0;
    var $463 = (((HEAP32[$95$s2] >>> 24 | HEAP32[$95$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $468 = (((HEAP32[$96$s2] >>> 16 | HEAP32[$96$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $473 = (((HEAP32[$97$s2] >>> 8 | HEAP32[$97$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $477 = ((HEAP32[$90$s2] & 255) << 3) + 512664 | 0;
    var $485$1 = HEAP32[$448 + 4 >> 2] ^ HEAP32[$443 + 4 >> 2] ^ HEAP32[$453 + 4 >> 2] ^ HEAP32[$458 + 4 >> 2] ^ HEAP32[$463 + 4 >> 2] ^ HEAP32[$468 + 4 >> 2] ^ HEAP32[$473 + 4 >> 2] ^ HEAP32[$477 + 4 >> 2];
    HEAP32[$105$s2] = HEAP32[$448 >> 2] ^ HEAP32[$443 >> 2] ^ HEAP32[$453 >> 2] ^ HEAP32[$458 >> 2] ^ HEAP32[$463 >> 2] ^ HEAP32[$468 >> 2] ^ HEAP32[$473 >> 2] ^ HEAP32[$477 >> 2];
    HEAP32[$105$s2 + 1] = $485$1;
    for (var $$src = $block127 >> 2, $$dest = $key126 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $489 = ((HEAP32[$106$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $494 = (((HEAP32[$107$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $499 = (((HEAP32[$108$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $504 = ((HEAP32[$109$s2 + 1] & 255) << 3) + 520856 | 0;
    var $509 = (((HEAP32[$110$s2] >>> 24 | HEAP32[$110$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $514 = (((HEAP32[$111$s2] >>> 16 | HEAP32[$111$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $519 = (((HEAP32[$112$s2] >>> 8 | HEAP32[$112$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $523 = ((HEAP32[$113$s2] & 255) << 3) + 512664 | 0;
    var $533$1 = HEAP32[$494 + 4 >> 2] ^ HEAP32[$489 + 4 >> 2] ^ HEAP32[$499 + 4 >> 2] ^ HEAP32[$504 + 4 >> 2] ^ HEAP32[$509 + 4 >> 2] ^ HEAP32[$514 + 4 >> 2] ^ HEAP32[$519 + 4 >> 2] ^ HEAP32[$523 + 4 >> 2] ^ HEAP32[$90$s2 + 1];
    HEAP32[$98$s2] = HEAP32[$494 >> 2] ^ HEAP32[$489 >> 2] ^ HEAP32[$499 >> 2] ^ HEAP32[$504 >> 2] ^ HEAP32[$509 >> 2] ^ HEAP32[$514 >> 2] ^ HEAP32[$519 >> 2] ^ HEAP32[$523 >> 2] ^ HEAP32[$90$s2];
    HEAP32[$98$s2 + 1] = $533$1;
    var $537 = ((HEAP32[$113$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $542 = (((HEAP32[$106$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $547 = (((HEAP32[$107$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $552 = ((HEAP32[$108$s2 + 1] & 255) << 3) + 520856 | 0;
    var $557 = (((HEAP32[$109$s2] >>> 24 | HEAP32[$109$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $562 = (((HEAP32[$110$s2] >>> 16 | HEAP32[$110$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $567 = (((HEAP32[$111$s2] >>> 8 | HEAP32[$111$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $571 = ((HEAP32[$112$s2] & 255) << 3) + 512664 | 0;
    var $581$1 = HEAP32[$542 + 4 >> 2] ^ HEAP32[$537 + 4 >> 2] ^ HEAP32[$547 + 4 >> 2] ^ HEAP32[$552 + 4 >> 2] ^ HEAP32[$557 + 4 >> 2] ^ HEAP32[$562 + 4 >> 2] ^ HEAP32[$567 + 4 >> 2] ^ HEAP32[$571 + 4 >> 2] ^ HEAP32[$97$s2 + 1];
    HEAP32[$99$s2] = HEAP32[$542 >> 2] ^ HEAP32[$537 >> 2] ^ HEAP32[$547 >> 2] ^ HEAP32[$552 >> 2] ^ HEAP32[$557 >> 2] ^ HEAP32[$562 >> 2] ^ HEAP32[$567 >> 2] ^ HEAP32[$571 >> 2] ^ HEAP32[$97$s2];
    HEAP32[$99$s2 + 1] = $581$1;
    var $585 = ((HEAP32[$112$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $590 = (((HEAP32[$113$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $595 = (((HEAP32[$106$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $600 = ((HEAP32[$107$s2 + 1] & 255) << 3) + 520856 | 0;
    var $605 = (((HEAP32[$108$s2] >>> 24 | HEAP32[$108$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $610 = (((HEAP32[$109$s2] >>> 16 | HEAP32[$109$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $615 = (((HEAP32[$110$s2] >>> 8 | HEAP32[$110$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $619 = ((HEAP32[$111$s2] & 255) << 3) + 512664 | 0;
    var $629$1 = HEAP32[$590 + 4 >> 2] ^ HEAP32[$585 + 4 >> 2] ^ HEAP32[$595 + 4 >> 2] ^ HEAP32[$600 + 4 >> 2] ^ HEAP32[$605 + 4 >> 2] ^ HEAP32[$610 + 4 >> 2] ^ HEAP32[$615 + 4 >> 2] ^ HEAP32[$619 + 4 >> 2] ^ HEAP32[$96$s2 + 1];
    HEAP32[$100$s2] = HEAP32[$590 >> 2] ^ HEAP32[$585 >> 2] ^ HEAP32[$595 >> 2] ^ HEAP32[$600 >> 2] ^ HEAP32[$605 >> 2] ^ HEAP32[$610 >> 2] ^ HEAP32[$615 >> 2] ^ HEAP32[$619 >> 2] ^ HEAP32[$96$s2];
    HEAP32[$100$s2 + 1] = $629$1;
    var $633 = ((HEAP32[$111$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $638 = (((HEAP32[$112$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $643 = (((HEAP32[$113$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $648 = ((HEAP32[$106$s2 + 1] & 255) << 3) + 520856 | 0;
    var $653 = (((HEAP32[$107$s2] >>> 24 | HEAP32[$107$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $658 = (((HEAP32[$108$s2] >>> 16 | HEAP32[$108$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $663 = (((HEAP32[$109$s2] >>> 8 | HEAP32[$109$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $667 = ((HEAP32[$110$s2] & 255) << 3) + 512664 | 0;
    var $677$1 = HEAP32[$638 + 4 >> 2] ^ HEAP32[$633 + 4 >> 2] ^ HEAP32[$643 + 4 >> 2] ^ HEAP32[$648 + 4 >> 2] ^ HEAP32[$653 + 4 >> 2] ^ HEAP32[$658 + 4 >> 2] ^ HEAP32[$663 + 4 >> 2] ^ HEAP32[$667 + 4 >> 2] ^ HEAP32[$95$s2 + 1];
    HEAP32[$101$s2] = HEAP32[$638 >> 2] ^ HEAP32[$633 >> 2] ^ HEAP32[$643 >> 2] ^ HEAP32[$648 >> 2] ^ HEAP32[$653 >> 2] ^ HEAP32[$658 >> 2] ^ HEAP32[$663 >> 2] ^ HEAP32[$667 >> 2] ^ HEAP32[$95$s2];
    HEAP32[$101$s2 + 1] = $677$1;
    var $681 = ((HEAP32[$110$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $686 = (((HEAP32[$111$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $691 = (((HEAP32[$112$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $696 = ((HEAP32[$113$s2 + 1] & 255) << 3) + 520856 | 0;
    var $701 = (((HEAP32[$106$s2] >>> 24 | HEAP32[$106$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $706 = (((HEAP32[$107$s2] >>> 16 | HEAP32[$107$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $711 = (((HEAP32[$108$s2] >>> 8 | HEAP32[$108$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $715 = ((HEAP32[$109$s2] & 255) << 3) + 512664 | 0;
    var $725$1 = HEAP32[$686 + 4 >> 2] ^ HEAP32[$681 + 4 >> 2] ^ HEAP32[$691 + 4 >> 2] ^ HEAP32[$696 + 4 >> 2] ^ HEAP32[$701 + 4 >> 2] ^ HEAP32[$706 + 4 >> 2] ^ HEAP32[$711 + 4 >> 2] ^ HEAP32[$715 + 4 >> 2] ^ HEAP32[$94$s2 + 1];
    HEAP32[$102$s2] = HEAP32[$686 >> 2] ^ HEAP32[$681 >> 2] ^ HEAP32[$691 >> 2] ^ HEAP32[$696 >> 2] ^ HEAP32[$701 >> 2] ^ HEAP32[$706 >> 2] ^ HEAP32[$711 >> 2] ^ HEAP32[$715 >> 2] ^ HEAP32[$94$s2];
    HEAP32[$102$s2 + 1] = $725$1;
    var $729 = ((HEAP32[$109$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $734 = (((HEAP32[$110$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $739 = (((HEAP32[$111$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $744 = ((HEAP32[$112$s2 + 1] & 255) << 3) + 520856 | 0;
    var $749 = (((HEAP32[$113$s2] >>> 24 | HEAP32[$113$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $754 = (((HEAP32[$106$s2] >>> 16 | HEAP32[$106$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $759 = (((HEAP32[$107$s2] >>> 8 | HEAP32[$107$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $763 = ((HEAP32[$108$s2] & 255) << 3) + 512664 | 0;
    var $773$1 = HEAP32[$734 + 4 >> 2] ^ HEAP32[$729 + 4 >> 2] ^ HEAP32[$739 + 4 >> 2] ^ HEAP32[$744 + 4 >> 2] ^ HEAP32[$749 + 4 >> 2] ^ HEAP32[$754 + 4 >> 2] ^ HEAP32[$759 + 4 >> 2] ^ HEAP32[$763 + 4 >> 2] ^ HEAP32[$93$s2 + 1];
    HEAP32[$103$s2] = HEAP32[$734 >> 2] ^ HEAP32[$729 >> 2] ^ HEAP32[$739 >> 2] ^ HEAP32[$744 >> 2] ^ HEAP32[$749 >> 2] ^ HEAP32[$754 >> 2] ^ HEAP32[$759 >> 2] ^ HEAP32[$763 >> 2] ^ HEAP32[$93$s2];
    HEAP32[$103$s2 + 1] = $773$1;
    var $777 = ((HEAP32[$108$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $782 = (((HEAP32[$109$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $787 = (((HEAP32[$110$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $792 = ((HEAP32[$111$s2 + 1] & 255) << 3) + 520856 | 0;
    var $797 = (((HEAP32[$112$s2] >>> 24 | HEAP32[$112$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $802 = (((HEAP32[$113$s2] >>> 16 | HEAP32[$113$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $807 = (((HEAP32[$106$s2] >>> 8 | HEAP32[$106$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $811 = ((HEAP32[$107$s2] & 255) << 3) + 512664 | 0;
    var $821$1 = HEAP32[$782 + 4 >> 2] ^ HEAP32[$777 + 4 >> 2] ^ HEAP32[$787 + 4 >> 2] ^ HEAP32[$792 + 4 >> 2] ^ HEAP32[$797 + 4 >> 2] ^ HEAP32[$802 + 4 >> 2] ^ HEAP32[$807 + 4 >> 2] ^ HEAP32[$811 + 4 >> 2] ^ HEAP32[$92$s2 + 1];
    HEAP32[$104$s2] = HEAP32[$782 >> 2] ^ HEAP32[$777 >> 2] ^ HEAP32[$787 >> 2] ^ HEAP32[$792 >> 2] ^ HEAP32[$797 >> 2] ^ HEAP32[$802 >> 2] ^ HEAP32[$807 >> 2] ^ HEAP32[$811 >> 2] ^ HEAP32[$92$s2];
    HEAP32[$104$s2 + 1] = $821$1;
    var $825 = ((HEAP32[$107$s2 + 1] >>> 24 | 0 << 8) << 3) + 527e3 | 0;
    var $830 = (((HEAP32[$108$s2 + 1] >>> 16 | 0 << 16) & 255) << 3) + 524952 | 0;
    var $835 = (((HEAP32[$109$s2 + 1] >>> 8 | 0 << 24) & 255) << 3) + 522904 | 0;
    var $840 = ((HEAP32[$110$s2 + 1] & 255) << 3) + 520856 | 0;
    var $845 = (((HEAP32[$111$s2] >>> 24 | HEAP32[$111$s2 + 1] << 8) & 255) << 3) + 518808 | 0;
    var $850 = (((HEAP32[$112$s2] >>> 16 | HEAP32[$112$s2 + 1] << 16) & 255) << 3) + 516760 | 0;
    var $855 = (((HEAP32[$113$s2] >>> 8 | HEAP32[$113$s2 + 1] << 24) & 255) << 3) + 514712 | 0;
    var $859 = ((HEAP32[$106$s2] & 255) << 3) + 512664 | 0;
    var $869$1 = HEAP32[$830 + 4 >> 2] ^ HEAP32[$825 + 4 >> 2] ^ HEAP32[$835 + 4 >> 2] ^ HEAP32[$840 + 4 >> 2] ^ HEAP32[$845 + 4 >> 2] ^ HEAP32[$850 + 4 >> 2] ^ HEAP32[$855 + 4 >> 2] ^ HEAP32[$859 + 4 >> 2] ^ HEAP32[$91$s2 + 1];
    HEAP32[$105$s2] = HEAP32[$830 >> 2] ^ HEAP32[$825 >> 2] ^ HEAP32[$835 >> 2] ^ HEAP32[$840 >> 2] ^ HEAP32[$845 >> 2] ^ HEAP32[$850 >> 2] ^ HEAP32[$855 >> 2] ^ HEAP32[$859 >> 2] ^ HEAP32[$91$s2];
    HEAP32[$105$s2 + 1] = $869$1;
    for (var $$src = $block127 >> 2, $$dest = $state128 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP32[$$dest] = HEAP32[$$src];
    }
    var $870 = $r_0118 + 1 | 0;
    if (($870 | 0) == 10) {
      break;
    } else {
      var $r_0118 = $870;
    }
  }
  var $872 = $data_block | 0;
  var $st$1$0 = $872 | 0;
  var $st$1$1 = $872 + 4 | 0;
  var $874 = $context | 0;
  var $876$1 = HEAP32[$874 + 4 >> 2] ^ HEAP32[$st$1$1 >> 2];
  var $st$12$0 = $874 | 0;
  HEAP32[$st$12$0 >> 2] = HEAP32[$874 >> 2] ^ HEAP32[$st$1$0 >> 2];
  var $st$12$1 = $874 + 4 | 0;
  HEAP32[$st$12$1 >> 2] = $876$1;
  var $877 = $data_block + 8 | 0;
  var $879 = $context + 8 | 0;
  var $881$1 = HEAP32[$879 + 4 >> 2] ^ HEAP32[$877 + 4 >> 2];
  var $st$28$0 = $879 | 0;
  HEAP32[$st$28$0 >> 2] = HEAP32[$879 >> 2] ^ HEAP32[$877 >> 2];
  var $st$28$1 = $879 + 4 | 0, $st$28$1$s2 = $st$28$1 >> 2;
  HEAP32[$st$28$1$s2] = $881$1;
  var $882 = $data_block + 16 | 0;
  var $884 = $context + 16 | 0;
  var $st$38$0 = $884 | 0;
  var $st$38$1 = $884 + 4 | 0;
  var $886$1 = HEAP32[$st$38$1 >> 2] ^ HEAP32[$882 + 4 >> 2];
  var $st$44$0 = $884 | 0;
  HEAP32[$st$44$0 >> 2] = HEAP32[$st$38$0 >> 2] ^ HEAP32[$882 >> 2];
  var $st$44$1 = $884 + 4 | 0;
  HEAP32[$st$44$1 >> 2] = $886$1;
  var $887 = $data_block + 24 | 0;
  var $889 = $context + 24 | 0;
  var $891$1 = HEAP32[$889 + 4 >> 2] ^ HEAP32[$887 + 4 >> 2];
  var $st$60$0 = $889 | 0;
  HEAP32[$st$60$0 >> 2] = HEAP32[$889 >> 2] ^ HEAP32[$887 >> 2];
  var $st$60$1 = $889 + 4 | 0;
  HEAP32[$st$60$1 >> 2] = $891$1;
  var $892 = $data_block + 32 | 0;
  var $894 = $context + 32 | 0;
  var $st$70$0 = $894 | 0, $st$70$0$s2 = $st$70$0 >> 2;
  var $st$70$1 = $894 + 4 | 0, $st$70$1$s2 = $st$70$1 >> 2;
  var $896$1 = HEAP32[$st$70$1$s2] ^ HEAP32[$892 + 4 >> 2];
  var $st$76$0 = $894 | 0;
  HEAP32[$st$76$0 >> 2] = HEAP32[$st$70$0$s2] ^ HEAP32[$892 >> 2];
  var $st$76$1 = $894 + 4 | 0;
  HEAP32[$st$76$1 >> 2] = $896$1;
  var $897 = $data_block + 40 | 0;
  var $899 = $context + 40 | 0;
  var $901$1 = HEAP32[$899 + 4 >> 2] ^ HEAP32[$897 + 4 >> 2];
  var $st$92$0 = $899 | 0;
  HEAP32[$st$92$0 >> 2] = HEAP32[$899 >> 2] ^ HEAP32[$897 >> 2];
  var $st$92$1 = $899 + 4 | 0;
  HEAP32[$st$92$1 >> 2] = $901$1;
  var $902 = $data_block + 48 | 0;
  var $904 = $context + 48 | 0;
  var $906$1 = HEAP32[$904 + 4 >> 2] ^ HEAP32[$902 + 4 >> 2];
  var $st$108$0 = $904 | 0;
  HEAP32[$st$108$0 >> 2] = HEAP32[$904 >> 2] ^ HEAP32[$902 >> 2];
  var $st$108$1 = $904 + 4 | 0;
  HEAP32[$st$108$1 >> 2] = $906$1;
  var $907 = $data_block + 56 | 0;
  var $909 = $context + 56 | 0;
  var $911$1 = HEAP32[$909 + 4 >> 2] ^ HEAP32[$907 + 4 >> 2];
  var $st$124$0 = $909 | 0;
  HEAP32[$st$124$0 >> 2] = HEAP32[$909 >> 2] ^ HEAP32[$907 >> 2];
  var $st$124$1 = $909 + 4 | 0;
  HEAP32[$st$124$1 >> 2] = $911$1;
  var $912 = $state | 0;
  var $914$s2 = ($context | 0) >> 2;
  var $916$1 = HEAP32[$914$s2 + 1] ^ HEAP32[$912 + 4 >> 2];
  HEAP32[$914$s2] = HEAP32[$914$s2] ^ HEAP32[$912 >> 2];
  HEAP32[$914$s2 + 1] = $916$1;
  var $917 = $state + 8 | 0;
  var $919$s2 = ($context + 8 | 0) >> 2;
  var $921$1 = HEAP32[$919$s2 + 1] ^ HEAP32[$917 + 4 >> 2];
  HEAP32[$919$s2] = HEAP32[$919$s2] ^ HEAP32[$917 >> 2];
  HEAP32[$919$s2 + 1] = $921$1;
  var $922 = $state + 16 | 0;
  var $924 = $context + 16 | 0;
  var $926$1 = HEAP32[$924 + 4 >> 2] ^ HEAP32[$922 + 4 >> 2];
  var $st$172$0 = $924 | 0;
  HEAP32[$st$172$0 >> 2] = HEAP32[$924 >> 2] ^ HEAP32[$922 >> 2];
  var $st$172$1 = $924 + 4 | 0;
  HEAP32[$st$172$1 >> 2] = $926$1;
  var $927 = $state + 24 | 0;
  var $929$s2 = ($context + 24 | 0) >> 2;
  var $931$1 = HEAP32[$929$s2 + 1] ^ HEAP32[$927 + 4 >> 2];
  HEAP32[$929$s2] = HEAP32[$929$s2] ^ HEAP32[$927 >> 2];
  HEAP32[$929$s2 + 1] = $931$1;
  var $932 = $state + 32 | 0;
  var $934 = $context + 32 | 0;
  var $936$1 = HEAP32[$934 + 4 >> 2] ^ HEAP32[$932 + 4 >> 2];
  var $st$204$0 = $934 | 0;
  HEAP32[$st$204$0 >> 2] = HEAP32[$934 >> 2] ^ HEAP32[$932 >> 2];
  var $st$204$1 = $934 + 4 | 0;
  HEAP32[$st$204$1 >> 2] = $936$1;
  var $937 = $state + 40 | 0;
  var $939 = $context + 40 | 0;
  var $st$214$0 = $939 | 0;
  var $st$214$1 = $939 + 4 | 0;
  var $941$1 = HEAP32[$st$214$1 >> 2] ^ HEAP32[$937 + 4 >> 2];
  HEAP32[$939 >> 2] = HEAP32[$st$214$0 >> 2] ^ HEAP32[$937 >> 2];
  HEAP32[$939 + 4 >> 2] = $941$1;
  var $942 = $state + 48 | 0;
  var $944$s2 = ($context + 48 | 0) >> 2;
  var $946$1 = HEAP32[$944$s2 + 1] ^ HEAP32[$942 + 4 >> 2];
  HEAP32[$944$s2] = HEAP32[$944$s2] ^ HEAP32[$942 >> 2];
  HEAP32[$944$s2 + 1] = $946$1;
  var $947 = $state + 56 | 0;
  var $949$s2 = ($context + 56 | 0) >> 2;
  var $951$1 = HEAP32[$949$s2 + 1] ^ HEAP32[$947 + 4 >> 2];
  HEAP32[$949$s2] = HEAP32[$949$s2] ^ HEAP32[$947 >> 2];
  HEAP32[$949$s2 + 1] = $951$1;
  STACKTOP = __stackBase__;
  return;
}
_whirlpool_transform["X"] = 1;
function __gcry_mpi_normalize($a) {
  var label = 0;
  do {
    if (($a | 0) != 0) {
      if ((HEAP32[$a + 12 >> 2] & 4 | 0) == 0) {
        break;
      }
      return;
    }
  } while (0);
  var $7 = $a + 4 | 0;
  var $8 = $a + 16 | 0;
  var $10 = HEAP32[$7 >> 2];
  while (1) {
    var $10;
    if (($10 | 0) == 0) {
      label = 424;
      break;
    }
    var $13 = $10 - 1 | 0;
    if ((HEAP32[HEAP32[$8 >> 2] + ($13 << 2) >> 2] | 0) != 0) {
      label = 425;
      break;
    }
    HEAP32[$7 >> 2] = $13;
    var $10 = $13;
  }
  if (label == 424) {
    return;
  } else if (label == 425) {
    return;
  }
}
function __gcry_mpi_test_bit($a, $n) {
  var $1 = $n >>> 5;
  if ($1 >>> 0 >= HEAP32[$a + 4 >> 2] >>> 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = (HEAP32[HEAP32[$a + 16 >> 2] + ($1 << 2) >> 2] & 1 << ($n & 31) | 0) != 0 & 1;
  var $_0;
  return $_0;
}
function __gcry_mpi_clear_highbit($a, $n) {
  var $1 = $n >>> 5;
  var $2 = $a + 4 | 0;
  if ($1 >>> 0 >= HEAP32[$2 >> 2] >>> 0) {
    return;
  }
  var $6 = $a + 16 | 0;
  var $bitno_01 = $n & 31;
  while (1) {
    var $bitno_01;
    var $11 = ($1 << 2) + HEAP32[$6 >> 2] | 0;
    HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & (1 << $bitno_01 ^ -1);
    var $14 = $bitno_01 + 1 | 0;
    if (($14 | 0) == 32) {
      break;
    } else {
      var $bitno_01 = $14;
    }
  }
  HEAP32[$2 >> 2] = $1 + 1 | 0;
  return;
}
function __gcry_mpi_clear_bit($a, $n) {
  var $1 = $n >>> 5;
  if ($1 >>> 0 >= HEAP32[$a + 4 >> 2] >>> 0) {
    return;
  }
  var $11 = ($1 << 2) + HEAP32[$a + 16 >> 2] | 0;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & (1 << ($n & 31) ^ -1);
  return;
}
function __gcry_mpi_rshift_limbs($a, $count) {
  var $3$s2;
  var $2$s2;
  var $2$s2 = HEAP32[$a + 16 >> 2] >> 2;
  var $3$s2 = ($a + 4 | 0) >> 2;
  var $4 = HEAP32[$3$s2];
  if ($4 >>> 0 <= $count >>> 0) {
    var $storemerge = 0;
    var $storemerge;
    HEAP32[$3$s2] = $storemerge;
    return;
  }
  var $6 = $4 - $count | 0;
  if (($4 | 0) == ($count | 0)) {
    var $i_0_lcssa = 0;
  } else {
    var $8 = $4 - $count | 0;
    var $9 = $8 >>> 0 > 1;
    var $i_01 = 0;
    while (1) {
      var $i_01;
      HEAP32[($i_01 << 2 >> 2) + $2$s2] = HEAP32[($i_01 + $count << 2 >> 2) + $2$s2];
      var $15 = $i_01 + 1 | 0;
      if ($15 >>> 0 < $6 >>> 0) {
        var $i_01 = $15;
      } else {
        break;
      }
    }
    var $i_0_lcssa = $9 ? $8 : 1;
  }
  var $i_0_lcssa;
  HEAP32[($i_0_lcssa << 2 >> 2) + $2$s2] = 0;
  var $storemerge = HEAP32[$3$s2] - $count | 0;
  var $storemerge;
  HEAP32[$3$s2] = $storemerge;
  return;
}
function __gcry_mpi_add_ui($w, $u, $v) {
  var $14$s2;
  var $2 = HEAP32[$u + 4 >> 2];
  var $4 = HEAP32[$u + 8 >> 2];
  var $5 = $2 + 1 | 0;
  if ((HEAP32[$w >> 2] | 0) < ($5 | 0)) {
    __gcry_mpi_resize($w, $5);
  }
  var $12 = HEAP32[$u + 16 >> 2];
  var $14 = HEAP32[$w + 16 >> 2], $14$s2 = $14 >> 2;
  L593 : do {
    if (($2 | 0) == 0) {
      HEAP32[$14$s2] = $v;
      var $wsign_0 = 0;
      var $wsize_0 = ($v | 0) != 0 & 1;
    } else {
      if (($4 | 0) == 0) {
        var $22 = __gcry_mpih_add_1($14, $12, $2, $v);
        HEAP32[($2 << 2 >> 2) + $14$s2] = $22;
        var $wsign_0 = 0;
        var $wsize_0 = $22 + $2 | 0;
        break;
      }
      do {
        if (($2 | 0) == 1) {
          var $28 = HEAP32[$12 >> 2];
          if ($28 >>> 0 >= $v >>> 0) {
            break;
          }
          HEAP32[$14$s2] = $v - $28 | 0;
          var $wsign_0 = 0;
          var $wsize_0 = 1;
          break L593;
        }
      } while (0);
      __gcry_mpih_sub_1($14, $12, $2, $v);
      var $wsign_0 = 1;
      var $wsize_0 = $2 - ((HEAP32[($2 - 1 << 2 >> 2) + $14$s2] | 0) == 0 & 1) | 0;
    }
  } while (0);
  var $wsize_0;
  var $wsign_0;
  HEAP32[$w + 4 >> 2] = $wsize_0;
  HEAP32[$w + 8 >> 2] = $wsign_0;
  return;
}
__gcry_mpi_add_ui["X"] = 1;
function __gcry_mpi_add($w, $u, $v) {
  var $28$s2;
  var $w$s2 = $w >> 2;
  var $2 = HEAP32[$u + 4 >> 2];
  var $4 = HEAP32[$v + 4 >> 2];
  do {
    if (($2 | 0) < ($4 | 0)) {
      var $8 = HEAP32[$v + 8 >> 2];
      var $10 = HEAP32[$u + 8 >> 2];
      var $11 = $4 + 1 | 0;
      if ((HEAP32[$w$s2] | 0) >= ($11 | 0)) {
        var $vsign_0 = $10;
        var $usign_0 = $8;
        var $v_pn = $v;
        var $u_pn = $u;
        var $usize_0 = $4;
        var $vsize_0 = $2;
        break;
      }
      __gcry_mpi_resize($w, $11);
      var $vsign_0 = $10;
      var $usign_0 = $8;
      var $v_pn = $v;
      var $u_pn = $u;
      var $usize_0 = $4;
      var $vsize_0 = $2;
    } else {
      var $18 = HEAP32[$u + 8 >> 2];
      var $20 = HEAP32[$v + 8 >> 2];
      var $21 = $2 + 1 | 0;
      if ((HEAP32[$w$s2] | 0) >= ($21 | 0)) {
        var $vsign_0 = $20;
        var $usign_0 = $18;
        var $v_pn = $u;
        var $u_pn = $v;
        var $usize_0 = $2;
        var $vsize_0 = $4;
        break;
      }
      __gcry_mpi_resize($w, $21);
      var $vsign_0 = $20;
      var $usign_0 = $18;
      var $v_pn = $u;
      var $u_pn = $v;
      var $usize_0 = $2;
      var $vsize_0 = $4;
    }
  } while (0);
  var $vsize_0;
  var $usize_0;
  var $u_pn;
  var $v_pn;
  var $usign_0;
  var $vsign_0;
  var $up_0 = HEAP32[$v_pn + 16 >> 2];
  var $vp_0 = HEAP32[$u_pn + 16 >> 2];
  var $28 = HEAP32[$w$s2 + 4], $28$s2 = $28 >> 2;
  L611 : do {
    if (($vsize_0 | 0) == 0) {
      if (($usize_0 | 0) > 0) {
        var $_i_05 = 0;
      } else {
        var $wsign_0 = $usign_0;
        var $wsize_3 = $usize_0;
        break;
      }
      while (1) {
        var $_i_05;
        HEAP32[($_i_05 << 2 >> 2) + $28$s2] = HEAP32[$up_0 + ($_i_05 << 2) >> 2];
        var $34 = $_i_05 + 1 | 0;
        if (($34 | 0) == ($usize_0 | 0)) {
          var $wsign_0 = $usign_0;
          var $wsize_3 = $usize_0;
          break L611;
        } else {
          var $_i_05 = $34;
        }
      }
    } else {
      if (($usign_0 | 0) == ($vsign_0 | 0)) {
        var $73 = __gcry_mpih_add($28, $up_0, $usize_0, $vp_0, $vsize_0);
        HEAP32[($usize_0 << 2 >> 2) + $28$s2] = $73;
        var $wsign_0 = ($usign_0 | 0) != 0 & 1;
        var $wsize_3 = $73 + $usize_0 | 0;
        break;
      }
      if (($usize_0 | 0) != ($vsize_0 | 0)) {
        __gcry_mpih_sub($28, $up_0, $usize_0, $vp_0, $vsize_0);
        var $wsize_0 = $usize_0;
        while (1) {
          var $wsize_0;
          if (($wsize_0 | 0) <= 0) {
            var $wsign_0 = $usign_0;
            var $wsize_3 = $wsize_0;
            break L611;
          }
          var $44 = $wsize_0 - 1 | 0;
          if ((HEAP32[($44 << 2 >> 2) + $28$s2] | 0) == 0) {
            var $wsize_0 = $44;
          } else {
            var $wsign_0 = $usign_0;
            var $wsize_3 = $wsize_0;
            break L611;
          }
        }
      }
      if ((__gcry_mpih_cmp($up_0, $vp_0, $usize_0) | 0) < 0) {
        __gcry_mpih_sub_n($28, $vp_0, $up_0, $usize_0);
        var $wsize_1 = $usize_0;
        while (1) {
          var $wsize_1;
          if (($wsize_1 | 0) <= 0) {
            break;
          }
          var $56 = $wsize_1 - 1 | 0;
          if ((HEAP32[($56 << 2 >> 2) + $28$s2] | 0) == 0) {
            var $wsize_1 = $56;
          } else {
            break;
          }
        }
        var $wsign_0 = ($usign_0 | 0) == 0 & 1;
        var $wsize_3 = $wsize_1;
        break;
      } else {
        __gcry_mpih_sub_n($28, $up_0, $vp_0, $usize_0);
        var $wsize_2 = $usize_0;
        while (1) {
          var $wsize_2;
          if (($wsize_2 | 0) <= 0) {
            break;
          }
          var $67 = $wsize_2 - 1 | 0;
          if ((HEAP32[($67 << 2 >> 2) + $28$s2] | 0) == 0) {
            var $wsize_2 = $67;
          } else {
            break;
          }
        }
        var $wsign_0 = ($usign_0 | 0) != 0 & 1;
        var $wsize_3 = $wsize_2;
        break;
      }
    }
  } while (0);
  var $wsize_3;
  var $wsign_0;
  HEAP32[$w$s2 + 1] = $wsize_3;
  HEAP32[$w$s2 + 2] = $wsign_0;
  return;
}
__gcry_mpi_add["X"] = 1;
function __gcry_mpi_sub_ui($w, $u, $v) {
  var $14$s2;
  var $2 = HEAP32[$u + 4 >> 2];
  var $4 = HEAP32[$u + 8 >> 2];
  var $5 = $2 + 1 | 0;
  if ((HEAP32[$w >> 2] | 0) < ($5 | 0)) {
    __gcry_mpi_resize($w, $5);
  }
  var $12 = HEAP32[$u + 16 >> 2];
  var $14 = HEAP32[$w + 16 >> 2], $14$s2 = $14 >> 2;
  L641 : do {
    if (($2 | 0) == 0) {
      HEAP32[$14$s2] = $v;
      var $wsign_0 = 1;
      var $wsize_0 = ($v | 0) != 0 & 1;
    } else {
      if (($4 | 0) != 0) {
        var $22 = __gcry_mpih_add_1($14, $12, $2, $v);
        HEAP32[($2 << 2 >> 2) + $14$s2] = $22;
        var $wsign_0 = 0;
        var $wsize_0 = $22 + $2 | 0;
        break;
      }
      do {
        if (($2 | 0) == 1) {
          var $28 = HEAP32[$12 >> 2];
          if ($28 >>> 0 >= $v >>> 0) {
            break;
          }
          HEAP32[$14$s2] = $v - $28 | 0;
          var $wsign_0 = 1;
          var $wsize_0 = 1;
          break L641;
        }
      } while (0);
      __gcry_mpih_sub_1($14, $12, $2, $v);
      var $wsign_0 = 0;
      var $wsize_0 = $2 - ((HEAP32[($2 - 1 << 2 >> 2) + $14$s2] | 0) == 0 & 1) | 0;
    }
  } while (0);
  var $wsize_0;
  var $wsign_0;
  HEAP32[$w + 4 >> 2] = $wsize_0;
  HEAP32[$w + 8 >> 2] = $wsign_0;
  return;
}
__gcry_mpi_sub_ui["X"] = 1;
function __gcry_mpi_sub($w, $u, $v) {
  var $1 = __gcry_mpi_copy($v);
  var $2 = $1 + 8 | 0;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) == 0 & 1;
  __gcry_mpi_add($w, $u, $1);
  __gcry_mpi_free($1);
  return;
}
function __gcry_mpi_addm($w, $u, $v, $m) {
  __gcry_mpi_add($w, $u, $v);
  __gcry_mpi_fdiv_r($w, $w, $m);
  return;
}
function __gcry_mpi_subm($w, $u, $v, $m) {
  __gcry_mpi_sub($w, $u, $v);
  __gcry_mpi_fdiv_r($w, $w, $m);
  return;
}
function __gcry_mpi_get_nbits($a) {
  do {
    if (($a | 0) != 0) {
      if ((HEAP32[$a + 12 >> 2] & 4 | 0) == 0) {
        break;
      }
      var $_0 = HEAP32[$a + 8 >> 2];
      var $_0;
      return $_0;
    }
  } while (0);
  __gcry_mpi_normalize($a);
  var $11 = $a + 4 | 0;
  var $12 = HEAP32[$11 >> 2];
  if (($12 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $19 = HEAP32[HEAP32[$a + 16 >> 2] + ($12 - 1 << 2) >> 2];
  if (($19 | 0) == 0) {
    var $n_0 = 32;
  } else {
    if ($19 >>> 0 < 65536) {
      var $30 = $19 >>> 0 < 256 ? 0 : 8;
    } else {
      var $30 = $19 >>> 0 < 16777216 ? 16 : 24;
    }
    var $30;
    var $n_0 = 32 - $30 - HEAPU8[($19 >>> ($30 >>> 0)) + 492492 | 0] | 0;
  }
  var $n_0;
  var $_0 = (HEAP32[$11 >> 2] << 5) - $n_0 | 0;
  var $_0;
  return $_0;
}
function __gcry_mpi_set_bit($a, $n) {
  var $1 = $n >>> 5;
  var $3 = $a + 4 | 0;
  if ($1 >>> 0 >= HEAP32[$3 >> 2] >>> 0) {
    var $7 = $1 + 1 | 0;
    __gcry_mpi_resize($a, $7);
    HEAP32[$3 >> 2] = $7;
  }
  var $12 = ($1 << 2) + HEAP32[$a + 16 >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 1 << ($n & 31);
  return;
}
function __gcry_mpi_set_highbit($a, $n) {
  var $3$s2;
  var $1 = $n >>> 5;
  var $2 = $n & 31;
  var $3$s2 = ($a + 4 | 0) >> 2;
  if ($1 >>> 0 >= HEAP32[$3$s2] >>> 0) {
    var $7 = $1 + 1 | 0;
    __gcry_mpi_resize($a, $7);
    HEAP32[$3$s2] = $7;
  }
  var $10 = $a + 16 | 0;
  var $12 = ($1 << 2) + HEAP32[$10 >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 1 << $2;
  var $bitno_01 = $2 + 1 | 0;
  if ($bitno_01 >>> 0 < 32) {
    var $bitno_02 = $bitno_01;
  } else {
    var $22 = $1 + 1 | 0;
    HEAP32[$3$s2] = $22;
    return;
  }
  while (1) {
    var $bitno_02;
    var $19 = ($1 << 2) + HEAP32[$10 >> 2] | 0;
    HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & (1 << $bitno_02 ^ -1);
    var $bitno_0 = $bitno_02 + 1 | 0;
    if (($bitno_0 | 0) == 32) {
      break;
    } else {
      var $bitno_02 = $bitno_0;
    }
  }
  var $22 = $1 + 1 | 0;
  HEAP32[$3$s2] = $22;
  return;
}
function __gcry_mpi_rshift($x, $a, $n) {
  var $50$s2;
  var $96$s2;
  var $39$s2;
  var $5$s2;
  var $x$s2 = $x >> 2;
  var label = 0;
  var $1 = $n >>> 5;
  var $2 = $n & 31;
  L686 : do {
    if (($x | 0) == ($a | 0)) {
      var $5$s2 = ($x + 4 | 0) >> 2;
      if ($1 >>> 0 >= HEAP32[$5$s2] >>> 0) {
        HEAP32[$5$s2] = 0;
        return;
      }
      if (($1 | 0) != 0) {
        L694 : do {
          if ((HEAP32[$5$s2] | 0) == ($1 | 0)) {
            var $i_0_lcssa = 0;
          } else {
            var $13 = $x + 16 | 0;
            var $i_012 = 0;
            while (1) {
              var $i_012;
              var $16 = HEAP32[$13 >> 2];
              HEAP32[$16 + ($i_012 << 2) >> 2] = HEAP32[$16 + ($i_012 + $1 << 2) >> 2];
              var $20 = $i_012 + 1 | 0;
              if ($20 >>> 0 < (HEAP32[$5$s2] - $1 | 0) >>> 0) {
                var $i_012 = $20;
              } else {
                var $i_0_lcssa = $20;
                break L694;
              }
            }
          }
        } while (0);
        var $i_0_lcssa;
        HEAP32[HEAP32[$x$s2 + 4] + ($i_0_lcssa << 2) >> 2] = 0;
        HEAP32[$5$s2] = HEAP32[$5$s2] - $1 | 0;
      }
      var $30 = HEAP32[$5$s2];
      if (($30 | 0) == 0 | ($2 | 0) == 0) {
        break;
      }
      var $35 = HEAP32[$x$s2 + 4];
      __gcry_mpih_rshift($35, $35, $30, $2);
    } else {
      var $38 = ($1 | 0) != 0;
      var $39$s2 = ($a + 4 | 0) >> 2;
      var $40 = HEAP32[$39$s2];
      HEAP32[$x$s2 + 2] = HEAP32[$a + 8 >> 2];
      var $46 = (HEAP32[$x$s2] | 0) < ($40 | 0);
      if (!$38) {
        if ($46) {
          __gcry_mpi_resize($x, $40);
        }
        var $96$s2 = ($x + 4 | 0) >> 2;
        HEAP32[$96$s2] = $40;
        if (($40 | 0) == 0) {
          break;
        }
        if (($2 | 0) != 0) {
          __gcry_mpih_rshift(HEAP32[$x$s2 + 4], HEAP32[$a + 16 >> 2], $40, $2);
          break;
        }
        if ((HEAP32[$96$s2] | 0) == 0) {
          break;
        }
        var $102 = $a + 16 | 0;
        var $103 = $x + 16 | 0;
        var $i_32 = 0;
        while (1) {
          var $i_32;
          HEAP32[HEAP32[$103 >> 2] + ($i_32 << 2) >> 2] = HEAP32[HEAP32[$102 >> 2] + ($i_32 << 2) >> 2];
          var $116 = $i_32 + 1 | 0;
          if ($116 >>> 0 < HEAP32[$96$s2] >>> 0) {
            var $i_32 = $116;
          } else {
            break L686;
          }
        }
      }
      if ($46) {
        __gcry_mpi_resize($x, $40);
      }
      var $50$s2 = ($x + 4 | 0) >> 2;
      HEAP32[$50$s2] = $40;
      L718 : do {
        if ((HEAP32[$39$s2] | 0) == 0) {
          var $i_1_lcssa = 0;
        } else {
          var $53 = $a + 16 | 0;
          var $54 = $x + 16 | 0;
          var $i_16 = 0;
          while (1) {
            var $i_16;
            HEAP32[HEAP32[$54 >> 2] + ($i_16 << 2) >> 2] = HEAP32[HEAP32[$53 >> 2] + ($i_16 << 2) >> 2];
            var $61 = $i_16 + 1 | 0;
            if ($61 >>> 0 < HEAP32[$39$s2] >>> 0) {
              var $i_16 = $61;
            } else {
              var $i_1_lcssa = $61;
              break L718;
            }
          }
        }
      } while (0);
      var $i_1_lcssa;
      HEAP32[$50$s2] = $i_1_lcssa;
      if ($1 >>> 0 >= $i_1_lcssa >>> 0) {
        HEAP32[$50$s2] = 0;
        return;
      }
      if ($38) {
        L729 : do {
          if ((HEAP32[$50$s2] | 0) == ($1 | 0)) {
            var $i_2_lcssa = 0;
          } else {
            var $69 = $x + 16 | 0;
            var $i_24 = 0;
            while (1) {
              var $i_24;
              var $72 = HEAP32[$69 >> 2];
              HEAP32[$72 + ($i_24 << 2) >> 2] = HEAP32[$72 + ($i_24 + $1 << 2) >> 2];
              var $76 = $i_24 + 1 | 0;
              if ($76 >>> 0 < (HEAP32[$50$s2] - $1 | 0) >>> 0) {
                var $i_24 = $76;
              } else {
                var $i_2_lcssa = $76;
                break L729;
              }
            }
          }
        } while (0);
        var $i_2_lcssa;
        HEAP32[HEAP32[$x$s2 + 4] + ($i_2_lcssa << 2) >> 2] = 0;
        HEAP32[$50$s2] = HEAP32[$50$s2] - $1 | 0;
      }
      var $86 = HEAP32[$50$s2];
      if (($86 | 0) == 0 | ($2 | 0) == 0) {
        break;
      }
      var $91 = HEAP32[$x$s2 + 4];
      __gcry_mpih_rshift($91, $91, $86, $2);
    }
  } while (0);
  var $119 = $x + 4 | 0;
  var $120 = $x + 16 | 0;
  var $122 = HEAP32[$119 >> 2];
  while (1) {
    var $122;
    if (($122 | 0) <= 0) {
      label = 566;
      break;
    }
    var $125 = $122 - 1 | 0;
    if ((HEAP32[HEAP32[$120 >> 2] + ($125 << 2) >> 2] | 0) != 0) {
      label = 567;
      break;
    }
    HEAP32[$119 >> 2] = $125;
    var $122 = $125;
  }
  if (label == 566) {
    return;
  } else if (label == 567) {
    return;
  }
}
__gcry_mpi_rshift["X"] = 1;
function __gcry_mpi_lshift_limbs($a, $count) {
  var $1$s2;
  var $1$s2 = ($a + 4 | 0) >> 2;
  var $2 = HEAP32[$1$s2];
  if (($count | 0) == 0 | ($2 | 0) == 0) {
    return;
  }
  var $8 = $2 + $count | 0;
  if (HEAP32[$a >> 2] >>> 0 < $8 >>> 0) {
    __gcry_mpi_resize($a, $8);
  }
  var $13 = HEAP32[$a + 16 >> 2];
  var $14 = $13;
  L751 : do {
    if (($2 | 0) > 0) {
      var $i_03_in = $2;
      while (1) {
        var $i_03_in;
        var $i_03 = $i_03_in - 1 | 0;
        HEAP32[$13 + ($i_03 + $count << 2) >> 2] = HEAP32[$13 + ($i_03 << 2) >> 2];
        if (($i_03 | 0) > 0) {
          var $i_03_in = $i_03;
        } else {
          break L751;
        }
      }
    }
  } while (0);
  if (($count | 0) != 0) {
    _memset($14, 0, $count << 2);
  }
  HEAP32[$1$s2] = HEAP32[$1$s2] + $count | 0;
  return;
}
function __gcry_mpi_lshift($x, $a, $n) {
  var $x$s2 = $x >> 2;
  var label = 0;
  var $1 = $n >>> 5;
  var $2 = $n & 31;
  var $3 = ($x | 0) == ($a | 0);
  var $4 = ($n | 0) == 0;
  if ($3 & $4) {
    return;
  }
  if (!$3) {
    var $8 = HEAP32[$a + 4 >> 2];
    var $10 = HEAP32[$a + 8 >> 2];
    var $14 = $8 + ($1 + 1) | 0;
    if (HEAP32[$x$s2] >>> 0 < $14 >>> 0) {
      __gcry_mpi_resize($x, $14);
    }
    var $19 = HEAP32[$x$s2 + 4];
    var $21 = HEAP32[$a + 16 >> 2];
    L768 : do {
      if (($8 | 0) != 0) {
        var $_i_02 = 0;
        while (1) {
          var $_i_02;
          HEAP32[$19 + ($_i_02 << 2) >> 2] = HEAP32[$21 + ($_i_02 << 2) >> 2];
          var $26 = $_i_02 + 1 | 0;
          if (($26 | 0) == ($8 | 0)) {
            break L768;
          } else {
            var $_i_02 = $26;
          }
        }
      }
    } while (0);
    HEAP32[$x$s2 + 1] = $8;
    HEAP32[$x$s2 + 3] = HEAP32[$a + 12 >> 2];
    HEAP32[$x$s2 + 2] = $10;
  }
  do {
    if (($1 | 0) != 0 & ($2 | 0) == 0) {
      __gcry_mpi_lshift_limbs($x, $1);
    } else {
      if ($4) {
        break;
      }
      __gcry_mpi_lshift_limbs($x, $1 + 1 | 0);
      __gcry_mpi_rshift($x, $x, 32 - $2 | 0);
    }
  } while (0);
  var $40 = $x + 4 | 0;
  var $41 = $x + 16 | 0;
  var $43 = HEAP32[$40 >> 2];
  while (1) {
    var $43;
    if (($43 | 0) <= 0) {
      label = 596;
      break;
    }
    var $46 = $43 - 1 | 0;
    if ((HEAP32[HEAP32[$41 >> 2] + ($46 << 2) >> 2] | 0) != 0) {
      label = 597;
      break;
    }
    HEAP32[$40 >> 2] = $46;
    var $43 = $46;
  }
  if (label == 596) {
    return;
  } else if (label == 597) {
    return;
  }
}
__gcry_mpi_lshift["X"] = 1;
function __gcry_mpi_cmp_ui($u, $v) {
  __gcry_mpi_normalize($u);
  var $2 = HEAP32[$u + 4 >> 2];
  do {
    if (($2 | 0) == 0) {
      var $_0 = (($v | 0) != 0) << 31 >> 31;
    } else {
      if ((HEAP32[$u + 8 >> 2] | 0) != 0) {
        var $_0 = -1;
        break;
      }
      if (($2 | 0) != 1) {
        var $_0 = 1;
        break;
      }
      var $16 = HEAP32[HEAP32[$u + 16 >> 2] >> 2];
      if ($16 >>> 0 > $v >>> 0) {
        var $_0 = 1;
        break;
      }
      var $_0 = ($16 >>> 0 < $v >>> 0) << 31 >> 31;
    }
  } while (0);
  var $_0;
  return $_0;
}
function __gcry_mpi_cmp($u, $v) {
  var $66$s2;
  var $v$s2 = $v >> 2;
  var label = 0;
  var $1 = ($u | 0) != 0;
  do {
    if ($1) {
      if ((HEAP32[$u + 12 >> 2] & 4 | 0) == 0) {
        label = 607;
        break;
      } else {
        label = 610;
        break;
      }
    } else {
      label = 607;
    }
  } while (0);
  L796 : do {
    if (label == 607) {
      do {
        if (($v | 0) != 0) {
          if ((HEAP32[$v$s2 + 3] & 4 | 0) == 0) {
            break;
          }
          if ($1) {
            label = 610;
            break L796;
          } else {
            label = 615;
            break L796;
          }
        }
      } while (0);
      __gcry_mpi_normalize($u);
      __gcry_mpi_normalize($v);
      var $63 = HEAP32[$u + 4 >> 2];
      var $65 = HEAP32[$v$s2 + 1];
      var $66$s2 = ($u + 8 | 0) >> 2;
      do {
        if ((HEAP32[$66$s2] | 0) == 0) {
          if ((HEAP32[$v$s2 + 2] | 0) == 0) {
            if ((HEAP32[$66$s2] | 0) == 0) {
              break;
            } else {
              label = 625;
              break;
            }
          } else {
            var $_0 = 1;
            var $_0;
            return $_0;
          }
        } else {
          label = 625;
        }
      } while (0);
      do {
        if (label == 625) {
          if ((HEAP32[$v$s2 + 2] | 0) == 0) {
            var $_0 = -1;
          } else {
            break;
          }
          var $_0;
          return $_0;
        }
      } while (0);
      var $79 = ($63 | 0) != ($65 | 0);
      L811 : do {
        if ($79) {
          do {
            if ((HEAP32[$66$s2] | 0) == 0) {
              if ((HEAP32[$v$s2 + 2] | 0) == 0) {
                var $_0 = $63 - $65 | 0;
                var $_0;
                return $_0;
              } else {
                if (!$79) {
                  break L811;
                }
                if ((HEAP32[$66$s2] | 0) == 0) {
                  break L811;
                } else {
                  break;
                }
              }
            }
          } while (0);
          if ((HEAP32[$v$s2 + 2] | 0) == 0) {
            break;
          }
          var $_0 = $65 + $63 | 0;
          var $_0;
          return $_0;
        }
      } while (0);
      if (($63 | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      var $102 = __gcry_mpih_cmp(HEAP32[$u + 16 >> 2], HEAP32[$v$s2 + 4], $63);
      if (($102 | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      }
      var $_0 = ($102 >>> 31 | 0) == ((HEAP32[$66$s2] | 0) != 0 & 1 | 0) ? 1 : -1;
      var $_0;
      return $_0;
    }
  } while (0);
  L831 : do {
    if (label == 610) {
      var $15 = $u + 12 | 0;
      do {
        if ((HEAP32[$15 >> 2] & 4 | 0) != 0) {
          if (($v | 0) == 0) {
            var $_0 = -1;
            var $_0;
            return $_0;
          }
          if ((HEAP32[$v$s2 + 3] & 4 | 0) == 0) {
            var $_0 = -1;
            var $_0;
            return $_0;
          } else {
            if ($1) {
              break;
            } else {
              label = 615;
              break L831;
            }
          }
        }
      } while (0);
      if ((HEAP32[$15 >> 2] & 4 | 0) != 0 | ($v | 0) == 0) {
        break;
      } else {
        label = 616;
        break;
      }
    }
  } while (0);
  do {
    if (label == 615) {
      if (($v | 0) == 0) {
        break;
      } else {
        label = 616;
        break;
      }
    }
  } while (0);
  do {
    if (label == 616) {
      if ((HEAP32[$v$s2 + 3] & 4 | 0) == 0) {
        break;
      } else {
        var $_0 = 1;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $37 = $u + 8 | 0;
  do {
    if ((HEAP32[$37 >> 2] | 0) == 0) {
      if ((HEAP32[$v$s2 + 2] | 0) == 0) {
        var $_0 = 0;
      } else {
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $45 = HEAP32[$37 >> 2];
  var $47 = HEAP32[$v$s2 + 2];
  if (($45 | 0) < ($47 | 0)) {
    var $_0 = -1;
    var $_0;
    return $_0;
  }
  if (($45 | 0) > ($47 | 0)) {
    var $_0 = 1;
    var $_0;
    return $_0;
  }
  var $_0 = _memcmp(HEAP32[$u + 16 >> 2], HEAP32[$v$s2 + 4], ($45 + 7 | 0) / 8 & -1);
  var $_0;
  return $_0;
}
__gcry_mpi_cmp["X"] = 1;
function __gcry_mpi_fdiv_r($rem, $dividend, $divisor) {
  var $2 = HEAP32[$divisor + 8 >> 2];
  if (($rem | 0) == ($divisor | 0)) {
    var $5 = __gcry_mpi_copy($divisor);
    var $temp_divisor_0 = $5;
    var $_0 = $5;
  } else {
    var $temp_divisor_0 = 0;
    var $_0 = $divisor;
  }
  var $_0;
  var $temp_divisor_0;
  __gcry_mpi_tdiv_r($rem, $dividend, $_0);
  do {
    if (($2 | 0) != 0 ^ (HEAP32[$dividend + 8 >> 2] | 0) != 0) {
      if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
        break;
      }
      __gcry_mpi_add($rem, $rem, $_0);
    }
  } while (0);
  if (($temp_divisor_0 | 0) == 0) {
    return;
  }
  __gcry_mpi_free($temp_divisor_0);
  return;
}
function __gcry_mpi_tdiv_r($rem, $num, $den) {
  __gcry_mpi_tdiv_qr(0, $rem, $num, $den);
  return;
}
function __gcry_mpi_fdiv_r_ui($rem, $dividend, $divisor) {
  var $5 = __gcry_mpih_mod_1(HEAP32[$dividend + 16 >> 2], HEAP32[$dividend + 4 >> 2], $divisor);
  if (($5 | 0) == 0) {
    var $rlimb_0 = 0;
  } else {
    var $rlimb_0 = (HEAP32[$dividend + 8 >> 2] | 0) == 0 ? $5 : $divisor - $5 | 0;
  }
  var $rlimb_0;
  if (($rem | 0) == 0) {
    return $rlimb_0;
  }
  HEAP32[HEAP32[$rem + 16 >> 2] >> 2] = $rlimb_0;
  HEAP32[$rem + 4 >> 2] = ($rlimb_0 | 0) != 0 & 1;
  return $rlimb_0;
}
function __gcry_mpi_fdiv_q($quot, $dividend, $divisor) {
  var $3 = __gcry_mpi_alloc(HEAP32[$quot + 4 >> 2]);
  __gcry_mpi_fdiv_qr($quot, $3, $dividend, $divisor);
  __gcry_mpi_free($3);
  return;
}
function __gcry_mpi_fdiv_qr($quot, $rem, $dividend, $divisor) {
  var $2 = HEAP32[$divisor + 8 >> 2];
  if (($quot | 0) == ($divisor | 0) | ($rem | 0) == ($divisor | 0)) {
    var $6 = __gcry_mpi_copy($divisor);
    var $temp_divisor_0 = $6;
    var $_0 = $6;
  } else {
    var $temp_divisor_0 = 0;
    var $_0 = $divisor;
  }
  var $_0;
  var $temp_divisor_0;
  __gcry_mpi_tdiv_qr($quot, $rem, $dividend, $_0);
  do {
    if (($2 | 0) != (HEAP32[$dividend + 8 >> 2] | 0)) {
      if ((HEAP32[$rem + 4 >> 2] | 0) == 0) {
        break;
      }
      __gcry_mpi_sub_ui($quot, $quot, 1);
      __gcry_mpi_add($rem, $rem, $_0);
    }
  } while (0);
  if (($temp_divisor_0 | 0) == 0) {
    return;
  }
  __gcry_mpi_free($temp_divisor_0);
  return;
}
function __gcry_mpi_tdiv_qr($quot, $rem, $num, $den) {
  var $43$s2;
  var $41$s2;
  var $marker_nlimbs$s2;
  var $marker$s2;
  var $den$s2 = $den >> 2;
  var $rem$s2 = $rem >> 2;
  var $quot$s2 = $quot >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  var $marker$s2 = __stackBase__ >> 2;
  var $marker_nlimbs$s2 = __stackBase__ + 20 >> 2;
  var $1 = $num + 4 | 0;
  var $2 = HEAP32[$1 >> 2];
  var $4 = HEAP32[$den$s2 + 1];
  var $5 = $num + 8 | 0;
  var $6 = HEAP32[$5 >> 2];
  var $9 = HEAP32[$den$s2 + 2] ^ $6;
  var $10 = $2 + 1 | 0;
  __gcry_mpi_resize($rem, $10);
  var $11 = $10 - $4 | 0;
  if (($11 | 0) < 1) {
    L896 : do {
      if (($num | 0) != ($rem | 0)) {
        HEAP32[$rem$s2 + 1] = HEAP32[$1 >> 2];
        HEAP32[$rem$s2 + 2] = HEAP32[$5 >> 2];
        if (($2 | 0) <= 0) {
          break;
        }
        var $21 = $num + 16 | 0;
        var $22 = $rem + 16 | 0;
        var $_i_014 = 0;
        while (1) {
          var $_i_014;
          HEAP32[HEAP32[$22 >> 2] + ($_i_014 << 2) >> 2] = HEAP32[HEAP32[$21 >> 2] + ($_i_014 << 2) >> 2];
          var $29 = $_i_014 + 1 | 0;
          if (($29 | 0) == ($2 | 0)) {
            break L896;
          } else {
            var $_i_014 = $29;
          }
        }
      }
    } while (0);
    if (($quot | 0) == 0) {
      STACKTOP = __stackBase__;
      return;
    }
    HEAP32[$quot$s2 + 1] = 0;
    HEAP32[$quot$s2 + 2] = 0;
    STACKTOP = __stackBase__;
    return;
  }
  var $35 = ($quot | 0) != 0;
  if ($35) {
    __gcry_mpi_resize($quot, $11);
  }
  var $39 = HEAP32[$num + 16 >> 2];
  var $41 = HEAP32[$den$s2 + 4], $41$s2 = $41 >> 2;
  var $43 = HEAP32[$rem$s2 + 4], $43$s2 = $43 >> 2;
  if (($4 | 0) == 1) {
    if ($35) {
      var $48 = HEAP32[$quot$s2 + 4];
      var $50 = __gcry_mpih_divmod_1($48, $39, $2, HEAP32[$41$s2]);
      HEAP32[$quot$s2 + 1] = $11 - ((HEAP32[$48 + ($11 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
      HEAP32[$quot$s2 + 2] = $9;
      var $rlimb_0 = $50;
    } else {
      var $rlimb_0 = __gcry_mpih_mod_1($39, $2, HEAP32[$41$s2]);
    }
    var $rlimb_0;
    HEAP32[$43$s2] = $rlimb_0;
    HEAP32[$rem$s2 + 1] = ($rlimb_0 | 0) != 0 & 1;
    HEAP32[$rem$s2 + 2] = $6;
    STACKTOP = __stackBase__;
    return;
  }
  L918 : do {
    if ($35) {
      var $70 = HEAP32[$quot$s2 + 4];
      if (($70 | 0) != ($39 | 0)) {
        var $np_0 = $39;
        var $qp_0 = $70;
        var $markidx_0 = 0;
        break;
      }
      HEAP32[$marker_nlimbs$s2] = $2;
      var $77 = __gcry_mpi_alloc_limb_space($2, HEAP32[$quot$s2 + 3] & 1);
      HEAP32[$marker$s2] = $77;
      if (($2 | 0) > 0) {
        var $_i1_011 = 0;
      } else {
        var $np_0 = $77;
        var $qp_0 = $70;
        var $markidx_0 = 1;
        break;
      }
      while (1) {
        var $_i1_011;
        HEAP32[$77 + ($_i1_011 << 2) >> 2] = HEAP32[$70 + ($_i1_011 << 2) >> 2];
        var $83 = $_i1_011 + 1 | 0;
        if (($83 | 0) == ($2 | 0)) {
          var $np_0 = $77;
          var $qp_0 = $70;
          var $markidx_0 = 1;
          break L918;
        } else {
          var $_i1_011 = $83;
        }
      }
    } else {
      var $np_0 = $39;
      var $qp_0 = ($4 << 2) + $43 | 0;
      var $markidx_0 = 0;
    }
  } while (0);
  var $markidx_0;
  var $qp_0;
  var $np_0;
  var $88 = HEAP32[($4 - 1 << 2 >> 2) + $41$s2];
  if ($88 >>> 0 < 65536) {
    var $97 = $88 >>> 0 < 256 ? 0 : 8;
  } else {
    var $97 = $88 >>> 0 < 16777216 ? 16 : 24;
  }
  var $97;
  var $102 = HEAPU8[($88 >>> ($97 >>> 0)) + 492492 | 0] + $97 | 0;
  var $103 = 32 - $102 | 0;
  var $104 = ($102 | 0) != 32;
  L929 : do {
    if ($104) {
      HEAP32[($markidx_0 << 2 >> 2) + $marker_nlimbs$s2] = $4;
      if (($den | 0) == 0) {
        var $114 = 0;
      } else {
        var $114 = (HEAP32[$den$s2 + 3] & 1 | 0) != 0;
      }
      var $114;
      var $116 = __gcry_mpi_alloc_limb_space($4, $114 & 1);
      var $117 = $markidx_0 + 1 | 0;
      HEAP32[($markidx_0 << 2 >> 2) + $marker$s2] = $116;
      __gcry_mpih_lshift($116, $41, $4, $103);
      var $120 = __gcry_mpih_lshift($43, $np_0, $2, $103);
      if (($120 | 0) == 0) {
        var $dp_1 = $116;
        var $markidx_2 = $117;
        var $rsize_0 = $2;
        break;
      }
      HEAP32[($2 << 2 >> 2) + $43$s2] = $120;
      var $dp_1 = $116;
      var $markidx_2 = $117;
      var $rsize_0 = $10;
    } else {
      do {
        if (($41 | 0) == ($43 | 0)) {
          label = 710;
        } else {
          if ($35 & ($41 | 0) == ($qp_0 | 0)) {
            label = 710;
            break;
          } else {
            var $dp_0 = $41;
            var $markidx_1 = $markidx_0;
            break;
          }
        }
      } while (0);
      L938 : do {
        if (label == 710) {
          HEAP32[($markidx_0 << 2 >> 2) + $marker_nlimbs$s2] = $4;
          if (($den | 0) == 0) {
            var $137 = 0;
          } else {
            var $137 = (HEAP32[$den$s2 + 3] & 1 | 0) != 0;
          }
          var $137;
          var $139 = __gcry_mpi_alloc_limb_space($4, $137 & 1);
          var $140 = $markidx_0 + 1 | 0;
          HEAP32[($markidx_0 << 2 >> 2) + $marker$s2] = $139;
          if (($4 | 0) > 0) {
            var $_i3_04 = 0;
          } else {
            var $dp_0 = $139;
            var $markidx_1 = $140;
            break;
          }
          while (1) {
            var $_i3_04;
            HEAP32[$139 + ($_i3_04 << 2) >> 2] = HEAP32[($_i3_04 << 2 >> 2) + $41$s2];
            var $146 = $_i3_04 + 1 | 0;
            if (($146 | 0) == ($4 | 0)) {
              var $dp_0 = $139;
              var $markidx_1 = $140;
              break L938;
            } else {
              var $_i3_04 = $146;
            }
          }
        }
      } while (0);
      var $markidx_1;
      var $dp_0;
      if (($43 | 0) != ($np_0 | 0) & ($2 | 0) > 0) {
        var $_i4_02 = 0;
      } else {
        var $dp_1 = $dp_0;
        var $markidx_2 = $markidx_1;
        var $rsize_0 = $2;
        break;
      }
      while (1) {
        var $_i4_02;
        HEAP32[($_i4_02 << 2 >> 2) + $43$s2] = HEAP32[$np_0 + ($_i4_02 << 2) >> 2];
        var $152 = $_i4_02 + 1 | 0;
        if (($152 | 0) == ($2 | 0)) {
          var $dp_1 = $dp_0;
          var $markidx_2 = $markidx_1;
          var $rsize_0 = $2;
          break L929;
        } else {
          var $_i4_02 = $152;
        }
      }
    }
  } while (0);
  var $rsize_0;
  var $markidx_2;
  var $dp_1;
  var $153 = __gcry_mpih_divrem($qp_0, 0, $43, $rsize_0, $dp_1, $4);
  do {
    if ($35) {
      var $155 = $rsize_0 - $4 | 0;
      if (($153 | 0) == 0) {
        var $qsize_0 = $155;
      } else {
        HEAP32[$qp_0 + ($155 << 2) >> 2] = $153;
        var $qsize_0 = $155 + 1 | 0;
      }
      var $qsize_0;
      HEAP32[$quot$s2 + 1] = $qsize_0;
      HEAP32[$quot$s2 + 2] = $9;
      var $rsize_1 = $4;
      break;
    } else {
      var $rsize_1 = $4;
    }
  } while (0);
  while (1) {
    var $rsize_1;
    if (($rsize_1 | 0) <= 0) {
      break;
    }
    var $165 = $rsize_1 - 1 | 0;
    if ((HEAP32[($165 << 2 >> 2) + $43$s2] | 0) == 0) {
      var $rsize_1 = $165;
    } else {
      break;
    }
  }
  if (($rsize_1 | 0) == 0 | $104 ^ 1) {
    var $rsize_2 = $rsize_1;
  } else {
    __gcry_mpih_rshift($43, $43, $rsize_1, $103);
    var $rsize_2 = $rsize_1 - ((HEAP32[($rsize_1 - 1 << 2 >> 2) + $43$s2] | 0) == 0 & 1) | 0;
  }
  var $rsize_2;
  HEAP32[$rem$s2 + 1] = $rsize_2;
  HEAP32[$rem$s2 + 2] = $6;
  if (($markidx_2 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $markidx_37 = $markidx_2;
  }
  while (1) {
    var $markidx_37;
    var $183 = $markidx_37 - 1 | 0;
    __gcry_mpi_free_limb_space(HEAP32[($183 << 2 >> 2) + $marker$s2], HEAP32[($183 << 2 >> 2) + $marker_nlimbs$s2]);
    if (($183 | 0) == 0) {
      break;
    } else {
      var $markidx_37 = $183;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
__gcry_mpi_tdiv_qr["X"] = 1;
function __gcry_mpi_tdiv_q_2exp($w, $u, $count) {
  var $2 = HEAP32[$u + 4 >> 2];
  var $3 = $count >>> 5;
  var $4 = $2 - $3 | 0;
  if (($3 | 0) >= ($2 | 0)) {
    HEAP32[$w + 4 >> 2] = 0;
    return;
  }
  if ((HEAP32[$w >> 2] | 0) < ($4 | 0)) {
    __gcry_mpi_resize($w, $4);
  }
  var $15 = HEAP32[$w + 16 >> 2];
  var $16 = $count & 31;
  if (($16 | 0) == 0) {
    var $wsize_0 = $4;
  } else {
    __gcry_mpih_rshift($15, ($3 << 2) + HEAP32[$u + 16 >> 2] | 0, $4, $16);
    var $wsize_0 = $4 - ((HEAP32[$15 + ($4 - 1 << 2) >> 2] | 0) == 0 & 1) | 0;
  }
  var $wsize_0;
  HEAP32[$w + 4 >> 2] = $wsize_0;
  return;
}
function __gcry_mpi_divisible_ui($dividend, $divisor) {
  return (__gcry_mpih_mod_1(HEAP32[$dividend + 16 >> 2], HEAP32[$dividend + 4 >> 2], $divisor) | 0) == 0 & 1;
}
function __gcry_mpi_gcd($g, $xa, $xb) {
  var $1 = __gcry_mpi_copy($xa);
  var $2 = __gcry_mpi_copy($xb);
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  L980 : do {
    if ((__gcry_mpi_cmp_ui($2, 0) | 0) != 0) {
      while (1) {
        __gcry_mpi_fdiv_r($g, $1, $2);
        __gcry_mpi_set($1, $2);
        __gcry_mpi_set($2, $g);
        if ((__gcry_mpi_cmp_ui($2, 0) | 0) == 0) {
          break L980;
        }
      }
    }
  } while (0);
  __gcry_mpi_set($g, $1);
  __gcry_mpi_free($1);
  __gcry_mpi_free($2);
  return (__gcry_mpi_cmp_ui($g, 1) | 0) == 0 & 1;
}
function __gcry_mpi_div($quot, $rem, $dividend, $divisor, $round) {
  var __stackBase__ = STACKTOP;
  do {
    if (($round | 0) == 0) {
      if (($rem | 0) == 0) {
        var $7 = __gcry_mpi_alloc(HEAP32[$quot + 4 >> 2]);
        __gcry_mpi_tdiv_qr($quot, $7, $dividend, $divisor);
        __gcry_mpi_free($7);
        break;
      } else {
        __gcry_mpi_tdiv_qr($quot, $rem, $dividend, $divisor);
        break;
      }
    } else {
      if (($round | 0) >= 0) {
        __gcry_log_bug(490320, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      }
      if (($rem | 0) == 0) {
        __gcry_mpi_fdiv_q($quot, $dividend, $divisor);
        break;
      }
      if (($quot | 0) == 0) {
        __gcry_mpi_fdiv_r($rem, $dividend, $divisor);
        break;
      } else {
        __gcry_mpi_fdiv_qr($quot, $rem, $dividend, $divisor);
        break;
      }
    }
  } while (0);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_mpih_sub_1($res_ptr, $s1_ptr, $s1_size, $s2_limb) {
  var $1 = $s1_ptr + 4 | 0;
  var $2 = HEAP32[$s1_ptr >> 2];
  var $3 = $2 - $s2_limb | 0;
  var $4 = $res_ptr + 4 | 0;
  HEAP32[$res_ptr >> 2] = $3;
  L1002 : do {
    if ($3 >>> 0 > $2 >>> 0) {
      var $_01 = $4;
      var $_02 = $1;
      var $_04 = $s1_size;
      while (1) {
        var $_04;
        var $_02;
        var $_01;
        var $6 = $_04 - 1 | 0;
        if (($6 | 0) == 0) {
          var $_0 = 1;
          break;
        }
        var $9 = $_02 + 4 | 0;
        var $10 = HEAP32[$_02 >> 2];
        var $12 = $_01 + 4 | 0;
        HEAP32[$_01 >> 2] = $10 - 1 | 0;
        if (($10 | 0) == 0) {
          var $_01 = $12;
          var $_02 = $9;
          var $_04 = $6;
        } else {
          var $_1 = $12;
          var $_13 = $9;
          var $_15 = $6;
          break L1002;
        }
      }
      var $_0;
      return $_0;
    } else {
      var $_1 = $4;
      var $_13 = $1;
      var $_15 = $s1_size;
    }
  } while (0);
  var $_15;
  var $_13;
  var $_1;
  if (($_1 | 0) == ($_13 | 0)) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if (($_15 - 1 | 0) <= 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $17 = $_15 - 1 | 0;
  var $i_06 = 0;
  while (1) {
    var $i_06;
    HEAP32[$_1 + ($i_06 << 2) >> 2] = HEAP32[$_13 + ($i_06 << 2) >> 2];
    var $22 = $i_06 + 1 | 0;
    if (($22 | 0) == ($17 | 0)) {
      var $_0 = 0;
      break;
    } else {
      var $i_06 = $22;
    }
  }
  var $_0;
  return $_0;
}
function __gcry_mpih_cmp($op1_ptr, $op2_ptr, $size) {
  var label = 0;
  var $i_0_in = $size;
  while (1) {
    var $i_0_in;
    var $i_0 = $i_0_in - 1 | 0;
    if (($i_0_in | 0) <= 0) {
      var $_0 = 0;
      label = 776;
      break;
    }
    var $5 = HEAP32[$op1_ptr + ($i_0 << 2) >> 2];
    var $7 = HEAP32[$op2_ptr + ($i_0 << 2) >> 2];
    if (($5 | 0) == ($7 | 0)) {
      var $i_0_in = $i_0;
    } else {
      break;
    }
  }
  if (label == 776) {
    var $_0;
    return $_0;
  }
  var $_0 = $5 >>> 0 > $7 >>> 0 ? 1 : -1;
  var $_0;
  return $_0;
}
function __gcry_mpih_add_1($res_ptr, $s1_ptr, $s1_size, $s2_limb) {
  var $1 = $s1_ptr + 4 | 0;
  var $4 = $res_ptr + 4 | 0;
  HEAP32[$res_ptr >> 2] = _llvm_uadd_with_overflow_i32(HEAP32[$s1_ptr >> 2], $s2_limb);
  L1026 : do {
    if (tempRet0) {
      var $_01 = $4;
      var $_02 = $1;
      var $_04 = $s1_size;
      while (1) {
        var $_04;
        var $_02;
        var $_01;
        var $6 = $_04 - 1 | 0;
        if (($6 | 0) == 0) {
          var $_0 = 1;
          break;
        }
        var $9 = $_02 + 4 | 0;
        var $11 = HEAP32[$_02 >> 2] + 1 | 0;
        var $12 = $_01 + 4 | 0;
        HEAP32[$_01 >> 2] = $11;
        if (($11 | 0) == 0) {
          var $_01 = $12;
          var $_02 = $9;
          var $_04 = $6;
        } else {
          var $_1 = $12;
          var $_13 = $9;
          var $_15 = $6;
          break L1026;
        }
      }
      var $_0;
      return $_0;
    } else {
      var $_1 = $4;
      var $_13 = $1;
      var $_15 = $s1_size;
    }
  } while (0);
  var $_15;
  var $_13;
  var $_1;
  if (($_1 | 0) == ($_13 | 0)) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if (($_15 - 1 | 0) <= 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $17 = $_15 - 1 | 0;
  var $i_06 = 0;
  while (1) {
    var $i_06;
    HEAP32[$_1 + ($i_06 << 2) >> 2] = HEAP32[$_13 + ($i_06 << 2) >> 2];
    var $22 = $i_06 + 1 | 0;
    if (($22 | 0) == ($17 | 0)) {
      var $_0 = 0;
      break;
    } else {
      var $i_06 = $22;
    }
  }
  var $_0;
  return $_0;
}
function __gcry_mpih_add($res_ptr, $s1_ptr, $s1_size, $s2_ptr, $s2_size) {
  if (($s2_size | 0) == 0) {
    var $cy_0 = 0;
  } else {
    var $cy_0 = __gcry_mpih_add_n($res_ptr, $s1_ptr, $s2_ptr, $s2_size);
  }
  var $cy_0;
  if (($s1_size | 0) == ($s2_size | 0)) {
    var $cy_1 = $cy_0;
    var $cy_1;
    return $cy_1;
  }
  var $cy_1 = __gcry_mpih_add_1(($s2_size << 2) + $res_ptr | 0, ($s2_size << 2) + $s1_ptr | 0, $s1_size - $s2_size | 0, $cy_0);
  var $cy_1;
  return $cy_1;
}
function __gcry_mpih_sub($res_ptr, $s1_ptr, $s1_size, $s2_ptr, $s2_size) {
  if (($s2_size | 0) == 0) {
    var $cy_0 = 0;
  } else {
    var $cy_0 = __gcry_mpih_sub_n($res_ptr, $s1_ptr, $s2_ptr, $s2_size);
  }
  var $cy_0;
  if (($s1_size | 0) == ($s2_size | 0)) {
    var $cy_1 = $cy_0;
    var $cy_1;
    return $cy_1;
  }
  var $cy_1 = __gcry_mpih_sub_1(($s2_size << 2) + $res_ptr | 0, ($s2_size << 2) + $s1_ptr | 0, $s1_size - $s2_size | 0, $cy_0);
  var $cy_1;
  return $cy_1;
}
function __gcry_mpi_invm($x, $a, $n) {
  var $69$s2;
  var $59$s2;
  var label = 0;
  var $1 = __gcry_mpi_copy($a);
  var $2 = __gcry_mpi_copy($n);
  while (1) {
    if ((__gcry_mpi_test_bit($1, 0) | 0) != 0) {
      break;
    }
    if ((__gcry_mpi_test_bit($2, 0) | 0) != 0) {
      break;
    }
    __gcry_mpi_rshift($1, $1, 1);
    __gcry_mpi_rshift($2, $2, 1);
  }
  var $10 = __gcry_mpi_test_bit($2, 0);
  var $11 = __gcry_mpi_alloc_set_ui(1);
  var $12 = ($10 | 0) != 0;
  if ($12) {
    var $u2_0 = 0;
  } else {
    var $u2_0 = __gcry_mpi_alloc_set_ui(0);
  }
  var $u2_0;
  var $16 = __gcry_mpi_copy($1);
  var $17 = __gcry_mpi_copy($2);
  if ($12) {
    var $v2_0 = 0;
  } else {
    var $21 = __gcry_mpi_alloc(HEAP32[$1 + 4 >> 2]);
    __gcry_mpi_sub($21, $11, $1);
    var $v2_0 = $21;
  }
  var $v2_0;
  var $23 = __gcry_mpi_copy($2);
  do {
    if ((__gcry_mpi_test_bit($1, 0) | 0) == 0) {
      var $38 = __gcry_mpi_alloc_set_ui(1);
      if ($12) {
        var $t2_1 = 0;
      } else {
        var $t2_1 = __gcry_mpi_alloc_set_ui(0);
      }
      var $t2_1;
      var $t3_0 = __gcry_mpi_copy($1);
      var $t2_2 = $t2_1;
      var $t1_0 = $38;
      label = 818;
      break;
    } else {
      var $27 = __gcry_mpi_alloc_set_ui(0);
      if ($12) {
        var $t2_0 = 0;
      } else {
        var $29 = __gcry_mpi_alloc_set_ui(1);
        HEAP32[$29 + 8 >> 2] = 1;
        var $t2_0 = $29;
      }
      var $t2_0;
      var $32 = __gcry_mpi_copy($2);
      var $33 = $32 + 8 | 0;
      HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) == 0 & 1;
      var $t3_1 = $32;
      var $t2_3 = $t2_0;
      var $t1_1 = $27;
      break;
    }
  } while (0);
  while (1) {
    if (label == 818) {
      label = 0;
      var $t1_0;
      var $t2_2;
      var $t3_0;
      var $45 = (__gcry_mpi_test_bit($t1_0, 0) | 0) != 0;
      if ($12) {
        if ($45) {
          __gcry_mpi_add($t1_0, $t1_0, $2);
        }
        __gcry_mpi_rshift($t1_0, $t1_0, 1);
        __gcry_mpi_rshift($t3_0, $t3_0, 1);
        var $t3_1 = $t3_0;
        var $t2_3 = $t2_2;
        var $t1_1 = $t1_0;
        continue;
      }
      do {
        if ($45) {
          label = 821;
        } else {
          if ((__gcry_mpi_test_bit($t2_2, 0) | 0) == 0) {
            break;
          } else {
            label = 821;
            break;
          }
        }
      } while (0);
      if (label == 821) {
        label = 0;
        __gcry_mpi_add($t1_0, $t1_0, $2);
        __gcry_mpi_sub($t2_2, $t2_2, $1);
      }
      __gcry_mpi_rshift($t1_0, $t1_0, 1);
      __gcry_mpi_rshift($t2_2, $t2_2, 1);
      __gcry_mpi_rshift($t3_0, $t3_0, 1);
      var $t3_1 = $t3_0;
      var $t2_3 = $t2_2;
      var $t1_1 = $t1_0;
    }
    var $t1_1;
    var $t2_3;
    var $t3_1;
    if ((__gcry_mpi_test_bit($t3_1, 0) | 0) == 0) {
      var $t3_0 = $t3_1;
      var $t2_2 = $t2_3;
      var $t1_0 = $t1_1;
      label = 818;
      continue;
    }
    var $59$s2 = ($t3_1 + 8 | 0) >> 2;
    if ((HEAP32[$59$s2] | 0) == 0) {
      __gcry_mpi_set($11, $t1_1);
      if (!$12) {
        __gcry_mpi_set($u2_0, $t2_3);
      }
      __gcry_mpi_set($16, $t3_1);
    } else {
      __gcry_mpi_sub($17, $2, $t1_1);
      var $69$s2 = ($1 + 8 | 0) >> 2;
      var $70 = HEAP32[$69$s2];
      HEAP32[$69$s2] = ($70 | 0) == 0 & 1;
      if (!$12) {
        __gcry_mpi_sub($v2_0, $1, $t2_3);
      }
      HEAP32[$69$s2] = $70;
      var $75 = HEAP32[$59$s2];
      HEAP32[$59$s2] = ($75 | 0) == 0 & 1;
      __gcry_mpi_set($23, $t3_1);
      HEAP32[$59$s2] = $75;
    }
    __gcry_mpi_sub($t1_1, $11, $17);
    if (!$12) {
      __gcry_mpi_sub($t2_3, $u2_0, $v2_0);
    }
    __gcry_mpi_sub($t3_1, $16, $23);
    do {
      if ((HEAP32[$t1_1 + 8 >> 2] | 0) != 0) {
        __gcry_mpi_add($t1_1, $t1_1, $2);
        if ($12) {
          break;
        }
        __gcry_mpi_sub($t2_3, $t2_3, $1);
      }
    } while (0);
    if ((__gcry_mpi_cmp_ui($t3_1, 0) | 0) == 0) {
      break;
    } else {
      var $t3_0 = $t3_1;
      var $t2_2 = $t2_3;
      var $t1_0 = $t1_1;
      label = 818;
      continue;
    }
  }
  __gcry_mpi_set($x, $11);
  __gcry_mpi_free($11);
  __gcry_mpi_free($17);
  __gcry_mpi_free($t1_1);
  if ($12) {
    __gcry_mpi_free($16);
    __gcry_mpi_free($23);
    __gcry_mpi_free($t3_1);
    __gcry_mpi_free($1);
    __gcry_mpi_free($2);
    return 1;
  }
  __gcry_mpi_free($u2_0);
  __gcry_mpi_free($v2_0);
  __gcry_mpi_free($t2_3);
  __gcry_mpi_free($16);
  __gcry_mpi_free($23);
  __gcry_mpi_free($t3_1);
  __gcry_mpi_free($1);
  __gcry_mpi_free($2);
  return 1;
}
__gcry_mpi_invm["X"] = 1;
function __gcry_mpi_mod($rem, $dividend, $divisor) {
  __gcry_mpi_fdiv_r($rem, $dividend, $divisor);
  HEAP32[$rem + 8 >> 2] = 0;
  return;
}
function __gcry_mpi_barrett_init($m, $copy) {
  var $15$s2;
  var $1$s2;
  __gcry_mpi_normalize($m);
  var $1 = __gcry_xcalloc(1, 28), $1$s2 = $1 >> 2;
  if (($copy | 0) == 0) {
    HEAP32[$1$s2] = $m;
  } else {
    HEAP32[$1$s2] = __gcry_mpi_copy($m);
    HEAP32[$1$s2 + 1] = 1;
  }
  var $13 = HEAP32[$m + 4 >> 2];
  var $15$s2 = ($1 + 8 | 0) >> 2;
  HEAP32[$15$s2] = $13;
  var $17 = __gcry_mpi_alloc($13 + 1 | 0);
  __gcry_mpi_set_ui($17, 1);
  __gcry_mpi_lshift_limbs($17, HEAP32[$15$s2] << 1);
  __gcry_mpi_fdiv_q($17, $17, $m);
  HEAP32[$1$s2 + 3] = $17;
  HEAP32[$1$s2 + 4] = __gcry_mpi_alloc(HEAP32[$15$s2] << 1 | 1);
  HEAP32[$1$s2 + 5] = __gcry_mpi_alloc(HEAP32[$15$s2] << 1 | 1);
  return $1;
}
function __gcry_mpi_barrett_free($ctx) {
  var $ctx$s2 = $ctx >> 2;
  if (($ctx | 0) == 0) {
    return;
  }
  __gcry_mpi_free(HEAP32[$ctx$s2 + 3]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 4]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 5]);
  var $10 = HEAP32[$ctx$s2 + 6];
  if (($10 | 0) != 0) {
    __gcry_mpi_free($10);
  }
  if ((HEAP32[$ctx$s2 + 1] | 0) != 0) {
    __gcry_mpi_free(HEAP32[$ctx$s2]);
  }
  __gcry_free($ctx);
  return;
}
function __gcry_mpi_mod_barrett($r, $x, $ctx) {
  var $35$s2;
  var $ctx$s2 = $ctx >> 2;
  var $2 = HEAP32[$ctx$s2];
  var $4 = HEAP32[$ctx$s2 + 2];
  var $6 = HEAP32[$ctx$s2 + 3];
  var $8 = HEAP32[$ctx$s2 + 4];
  var $10 = HEAP32[$ctx$s2 + 5];
  __gcry_mpi_normalize($x);
  if ((HEAP32[$x + 4 >> 2] | 0) > ($4 << 1 | 0)) {
    __gcry_mpi_mod($r, $x, $2);
    return;
  }
  __gcry_mpi_set($10, $x);
  __gcry_mpi_rshift_limbs($10, $4 - 1 | 0);
  __gcry_mpi_mul($10, $10, $6);
  var $19 = $4 + 1 | 0;
  __gcry_mpi_rshift_limbs($10, $19);
  __gcry_mpi_set($8, $x);
  var $21 = $8 + 4 | 0;
  if ((HEAP32[$21 >> 2] | 0) > ($19 | 0)) {
    HEAP32[$21 >> 2] = $19;
  }
  __gcry_mpi_mul($10, $10, $2);
  var $26 = $10 + 4 | 0;
  if ((HEAP32[$26 >> 2] | 0) > ($19 | 0)) {
    HEAP32[$26 >> 2] = $19;
  }
  __gcry_mpi_sub($r, $8, $10);
  if ((HEAP32[$r + 8 >> 2] | 0) != 0) {
    var $35$s2 = ($ctx + 24 | 0) >> 2;
    if ((HEAP32[$35$s2] | 0) == 0) {
      var $40 = __gcry_mpi_alloc($4 + 2 | 0);
      HEAP32[$35$s2] = $40;
      __gcry_mpi_set_ui($40, 1);
      __gcry_mpi_lshift_limbs(HEAP32[$35$s2], $19);
    }
    __gcry_mpi_add($r, $r, HEAP32[$35$s2]);
  }
  if ((__gcry_mpi_cmp($r, $2) | 0) <= -1) {
    return;
  }
  while (1) {
    __gcry_mpi_sub($r, $r, $2);
    if ((__gcry_mpi_cmp($r, $2) | 0) <= -1) {
      break;
    }
  }
  return;
}
__gcry_mpi_mod_barrett["X"] = 1;
function __gcry_mpi_mul_barrett($w, $u, $v, $ctx) {
  __gcry_mpi_mul($w, $u, $v);
  __gcry_mpi_mod_barrett($w, $w, $ctx);
  return;
}
function __gcry_mpi_mul_ui($prod, $mult, $small_mult) {
  var $prod$s2 = $prod >> 2;
  var $2 = HEAP32[$mult + 4 >> 2];
  var $4 = HEAP32[$mult + 8 >> 2];
  if (($2 | 0) == 0 | ($small_mult | 0) == 0) {
    HEAP32[$prod$s2 + 1] = 0;
    HEAP32[$prod$s2 + 2] = 0;
    return;
  }
  var $11 = $2 + 1 | 0;
  if ((HEAP32[$prod$s2] | 0) < ($11 | 0)) {
    __gcry_mpi_resize($prod, $11);
  }
  var $18 = HEAP32[$prod$s2 + 4];
  var $21 = __gcry_mpih_mul_1($18, HEAP32[$mult + 16 >> 2], $2, $small_mult);
  if (($21 | 0) == 0) {
    var $size_0 = $2;
  } else {
    HEAP32[$18 + ($2 << 2) >> 2] = $21;
    var $size_0 = $11;
  }
  var $size_0;
  HEAP32[$prod$s2 + 1] = $size_0;
  HEAP32[$prod$s2 + 2] = $4;
  return;
}
function __gcry_mpi_mul_2exp($w, $u, $cnt) {
  var $w$s2 = $w >> 2;
  var $2 = HEAP32[$u + 4 >> 2];
  var $4 = HEAP32[$u + 8 >> 2];
  if (($2 | 0) == 0) {
    HEAP32[$w$s2 + 1] = 0;
    HEAP32[$w$s2 + 2] = 0;
    return;
  }
  var $10 = $cnt >>> 5;
  var $11 = $2 + $10 | 0;
  var $12 = $11 + 1 | 0;
  if ((HEAP32[$w$s2] | 0) < ($12 | 0)) {
    __gcry_mpi_resize($w, $12);
  }
  var $19 = HEAP32[$w$s2 + 4];
  var $20 = $19;
  var $21 = $cnt & 31;
  L1176 : do {
    if (($21 | 0) == 0) {
      if (($2 | 0) <= 0) {
        var $wsize_0 = $11;
        break;
      }
      var $24 = $u + 16 | 0;
      var $_i_03_in = $2;
      while (1) {
        var $_i_03_in;
        var $_i_03 = $_i_03_in - 1 | 0;
        HEAP32[$19 + ($_i_03 + $10 << 2) >> 2] = HEAP32[HEAP32[$24 >> 2] + ($_i_03 << 2) >> 2];
        if (($_i_03 | 0) > 0) {
          var $_i_03_in = $_i_03;
        } else {
          var $wsize_0 = $11;
          break L1176;
        }
      }
    } else {
      var $29 = __gcry_mpih_lshift(($10 << 2) + $19 | 0, HEAP32[$u + 16 >> 2], $2, $21);
      if (($29 | 0) == 0) {
        var $wsize_0 = $11;
        break;
      }
      HEAP32[$19 + ($11 << 2) >> 2] = $29;
      var $wsize_0 = $12;
    }
  } while (0);
  var $wsize_0;
  if (($10 | 0) != 0) {
    _memset($20, 0, $cnt >>> 0 > 63 ? $cnt >>> 3 & 536870908 : 4);
  }
  HEAP32[$w$s2 + 1] = $wsize_0;
  HEAP32[$w$s2 + 2] = $4;
  return;
}
__gcry_mpi_mul_2exp["X"] = 1;
function __gcry_mpi_mul($w, $u, $v) {
  var $v_u$s2;
  var $u_v$s2;
  var $w$s2 = $w >> 2;
  var label = 0;
  var $1 = $u + 4 | 0;
  var $2 = HEAP32[$1 >> 2];
  var $3 = $v + 4 | 0;
  var $4 = HEAP32[$3 >> 2];
  var $5 = ($2 | 0) < ($4 | 0);
  var $u_v$s2 = ($5 ? $u : $v) >> 2;
  var $v_u$s2 = ($5 ? $v : $u) >> 2;
  var $_5 = $5 ? $4 : $2;
  var $vsecure_0 = HEAP32[$u_v$s2 + 3] & 1;
  var $usecure_0 = HEAP32[$v_u$s2 + 3] & 1;
  var $vsize_0 = $5 ? HEAP32[$1 >> 2] : HEAP32[$3 >> 2];
  var $up_0 = HEAP32[$v_u$s2 + 4];
  var $vp_0 = HEAP32[$u_v$s2 + 4];
  var $6 = HEAP32[$u_v$s2 + 2] ^ HEAP32[$v_u$s2 + 2];
  var $7 = $w + 16 | 0;
  var $8 = HEAP32[$7 >> 2];
  var $9 = $vsize_0 + $_5 | 0;
  var $10 = ($w | 0) != 0;
  do {
    if ($10) {
      if ((HEAP32[$w$s2 + 3] & 1 | 0) != 0) {
        label = 909;
        break;
      }
      if (($u | 0) == 0) {
        label = 906;
        break;
      } else {
        label = 905;
        break;
      }
    } else {
      label = 905;
    }
  } while (0);
  do {
    if (label == 905) {
      if ((HEAP32[$u + 12 >> 2] & 1 | 0) == 0) {
        label = 906;
        break;
      } else {
        label = 908;
        break;
      }
    }
  } while (0);
  do {
    if (label == 906) {
      if (($v | 0) == 0) {
        label = 909;
        break;
      }
      if ((HEAP32[$v + 12 >> 2] & 1 | 0) == 0) {
        label = 909;
        break;
      } else {
        label = 908;
        break;
      }
    }
  } while (0);
  L1197 : do {
    if (label == 909) {
      var $35 = ($8 | 0) == ($up_0 | 0);
      if ((HEAP32[$w$s2] | 0) < ($9 | 0)) {
        if (!($35 | ($8 | 0) == ($vp_0 | 0))) {
          __gcry_mpi_resize($w, $9);
          var $up_1 = $up_0;
          var $vp_2 = $vp_0;
          var $wp_0 = HEAP32[$7 >> 2];
          var $tmp_limb_nlimbs_0 = 0;
          var $tmp_limb_0 = 0;
          var $assign_wp_0 = 0;
          break;
        }
        if ($10) {
          var $45 = (HEAP32[$w$s2 + 3] & 1 | 0) != 0;
        } else {
          var $45 = 0;
        }
        var $45;
        var $up_1 = $up_0;
        var $vp_2 = $vp_0;
        var $wp_0 = __gcry_mpi_alloc_limb_space($9, $45 & 1);
        var $tmp_limb_nlimbs_0 = 0;
        var $tmp_limb_0 = 0;
        var $assign_wp_0 = 1;
        break;
      }
      if ($35) {
        var $52 = __gcry_mpi_alloc_limb_space($_5, $usecure_0);
        var $_vp_0 = ($8 | 0) == ($vp_0 | 0) ? $52 : $vp_0;
        if (($_5 | 0) > 0) {
          var $_i_08 = 0;
        } else {
          var $up_1 = $52;
          var $vp_2 = $_vp_0;
          var $wp_0 = $8;
          var $tmp_limb_nlimbs_0 = $_5;
          var $tmp_limb_0 = $52;
          var $assign_wp_0 = 0;
          break;
        }
        while (1) {
          var $_i_08;
          HEAP32[$52 + ($_i_08 << 2) >> 2] = HEAP32[$8 + ($_i_08 << 2) >> 2];
          var $58 = $_i_08 + 1 | 0;
          if (($58 | 0) < ($_5 | 0)) {
            var $_i_08 = $58;
          } else {
            var $up_1 = $52;
            var $vp_2 = $_vp_0;
            var $wp_0 = $8;
            var $tmp_limb_nlimbs_0 = $_5;
            var $tmp_limb_0 = $52;
            var $assign_wp_0 = 0;
            break L1197;
          }
        }
      }
      if (($8 | 0) != ($vp_0 | 0)) {
        var $up_1 = $up_0;
        var $vp_2 = $vp_0;
        var $wp_0 = $8;
        var $tmp_limb_nlimbs_0 = 0;
        var $tmp_limb_0 = 0;
        var $assign_wp_0 = 0;
        break;
      }
      var $63 = __gcry_mpi_alloc_limb_space($vsize_0, $vsecure_0);
      if (($vsize_0 | 0) > 0) {
        var $_i1_06 = 0;
      } else {
        var $up_1 = $up_0;
        var $vp_2 = $63;
        var $wp_0 = $8;
        var $tmp_limb_nlimbs_0 = $vsize_0;
        var $tmp_limb_0 = $63;
        var $assign_wp_0 = 0;
        break;
      }
      while (1) {
        var $_i1_06;
        HEAP32[$63 + ($_i1_06 << 2) >> 2] = HEAP32[$8 + ($_i1_06 << 2) >> 2];
        var $68 = $_i1_06 + 1 | 0;
        if (($68 | 0) == ($vsize_0 | 0)) {
          var $up_1 = $up_0;
          var $vp_2 = $63;
          var $wp_0 = $8;
          var $tmp_limb_nlimbs_0 = $vsize_0;
          var $tmp_limb_0 = $63;
          var $assign_wp_0 = 0;
          break L1197;
        } else {
          var $_i1_06 = $68;
        }
      }
    } else if (label == 908) {
      var $up_1 = $up_0;
      var $vp_2 = $vp_0;
      var $wp_0 = __gcry_mpi_alloc_limb_space($9, 1);
      var $tmp_limb_nlimbs_0 = 0;
      var $tmp_limb_0 = 0;
      var $assign_wp_0 = 2;
    }
  } while (0);
  var $assign_wp_0;
  var $tmp_limb_0;
  var $tmp_limb_nlimbs_0;
  var $wp_0;
  var $vp_2;
  var $up_1;
  if (($vsize_0 | 0) == 0) {
    var $wsize_0 = 0;
  } else {
    var $wsize_0 = $9 - ((__gcry_mpih_mul($wp_0, $up_1, $_5, $vp_2, $vsize_0) | 0) == 0 & 1) | 0;
  }
  var $wsize_0;
  do {
    if (($assign_wp_0 | 0) == 2) {
      var $76 = __gcry_mpi_alloc_limb_space($wsize_0, 0);
      L1223 : do {
        if (($wsize_0 | 0) > 0) {
          var $_i2_010 = 0;
          while (1) {
            var $_i2_010;
            HEAP32[$76 + ($_i2_010 << 2) >> 2] = HEAP32[$wp_0 + ($_i2_010 << 2) >> 2];
            var $81 = $_i2_010 + 1 | 0;
            if (($81 | 0) == ($wsize_0 | 0)) {
              break L1223;
            } else {
              var $_i2_010 = $81;
            }
          }
        }
      } while (0);
      __gcry_mpi_free_limb_space($wp_0, 0);
      var $wp_1 = $76;
      label = 927;
      break;
    } else if (($assign_wp_0 | 0) != 0) {
      var $wp_1 = $wp_0;
      label = 927;
    }
  } while (0);
  if (label == 927) {
    var $wp_1;
    __gcry_mpi_assign_limb_space($w, $wp_1, $wsize_0);
  }
  HEAP32[$w$s2 + 1] = $wsize_0;
  HEAP32[$w$s2 + 2] = $6;
  if (($tmp_limb_0 | 0) == 0) {
    return;
  }
  __gcry_mpi_free_limb_space($tmp_limb_0, $tmp_limb_nlimbs_0);
  return;
}
__gcry_mpi_mul["X"] = 1;
function __gcry_mpi_mulm($w, $u, $v, $m) {
  __gcry_mpi_mul($w, $u, $v);
  __gcry_mpi_fdiv_r($w, $w, $m);
  return;
}
function __gcry_mpi_getbyte($a, $idx) {
  var label = 0;
  var $2 = HEAP32[$a + 16 >> 2];
  var $4 = HEAP32[$a + 4 >> 2];
  var $n_0 = 0;
  var $i_0 = 0;
  L1236 : while (1) {
    var $i_0;
    var $n_0;
    if (($i_0 | 0) >= ($4 | 0)) {
      var $_0 = -1;
      label = 943;
      break;
    }
    var $9 = HEAP32[$2 + ($i_0 << 2) >> 2];
    var $n_1 = $n_0;
    var $j_0 = 0;
    while (1) {
      var $j_0;
      var $n_1;
      if (($j_0 | 0) >= 4) {
        break;
      }
      if (($n_1 | 0) == ($idx | 0)) {
        break L1236;
      }
      var $n_1 = $n_1 + 1 | 0;
      var $j_0 = $j_0 + 1 | 0;
    }
    var $n_0 = $n_1;
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 943) {
    var $_0;
    return $_0;
  }
  var $_0 = $9 >>> ($j_0 << 3 >>> 0) & 255;
  var $_0;
  return $_0;
}
function __gcry_mpi_trailing_zeros($a) {
  var label = 0;
  var $2 = HEAP32[$a + 4 >> 2];
  var $3 = $a + 16 | 0;
  var $count_0 = 0;
  var $n_0 = 0;
  while (1) {
    var $n_0;
    var $count_0;
    if ($n_0 >>> 0 >= $2 >>> 0) {
      var $count_1 = $count_0;
      label = 955;
      break;
    }
    var $9 = HEAP32[HEAP32[$3 >> 2] + ($n_0 << 2) >> 2];
    if (($9 | 0) != 0) {
      break;
    }
    var $count_0 = $count_0 + 32 | 0;
    var $n_0 = $n_0 + 1 | 0;
  }
  if (label == 955) {
    var $count_1;
    return $count_1;
  }
  var $13 = $9 & -$9;
  if ($13 >>> 0 < 65536) {
    var $22 = $13 >>> 0 < 256 ? 0 : 8;
  } else {
    var $22 = $13 >>> 0 < 16777216 ? 16 : 24;
  }
  var $22;
  var $count_1 = $count_0 - 1 + $22 + HEAPU8[($13 >>> ($22 >>> 0)) + 492492 | 0] | 0;
  var $count_1;
  return $count_1;
}
function __gcry_mpi_dump($a) {
  var __stackBase__ = STACKTOP;
  __gcry_log_printf(490044, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  if (($a | 0) == 0) {
    __gcry_log_printf(489832, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[$a + 8 >> 2] | 0) != 0) {
    __gcry_log_printf(481284, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  var $9 = $a + 4 | 0;
  var $10 = HEAP32[$9 >> 2];
  L1269 : do {
    if (($10 | 0) > 0) {
      var $12 = $a + 16 | 0;
      var $14 = $10;
      var $i_01 = $10;
      while (1) {
        var $i_01;
        var $14;
        var $17 = $i_01 - 1 | 0;
        __gcry_log_printf(($i_01 | 0) != ($14 | 0) ? 477144 : 474184, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[HEAP32[$12 >> 2] + ($17 << 2) >> 2], tempInt));
        var $_pr = HEAP32[$9 >> 2];
        if (($17 | 0) > 0) {
          var $14 = $_pr;
          var $i_01 = $17;
        } else {
          var $_lcssa = $_pr;
          break L1269;
        }
      }
    } else {
      var $_lcssa = $10;
    }
  } while (0);
  var $_lcssa;
  if (($_lcssa | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_log_printf(472124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __gcry_log_mpidump($text, $a) {
  var __stackBase__ = STACKTOP;
  __gcry_log_printf(470736, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $text, tempInt));
  __gcry_mpi_dump($a);
  __gcry_log_printf(469344, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __gcry_mpi_get_buffer($a, $nbytes, $sign) {
  return _do_get_buffer($a, $nbytes, $sign, 0);
}
function __gcry_mpi_powm($res, $base, $expo, $mod) {
  var $167$s2;
  var $ep_0$s2;
  var $55$s2;
  var $31$s2;
  var $30$s2;
  var $res$s2 = $res >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  var $karactx = __stackBase__;
  var $2 = HEAP32[$expo + 4 >> 2];
  var $4 = HEAP32[$mod + 4 >> 2];
  var $5 = $4 << 1;
  var $7 = HEAP32[$mod + 8 >> 2];
  if (($expo | 0) == 0) {
    var $15 = 0;
  } else {
    var $15 = (HEAP32[$expo + 12 >> 2] & 1 | 0) != 0;
  }
  var $15;
  var $16 = $15 & 1;
  var $19 = HEAP32[$mod + 12 >> 2] & 1;
  var $20 = ($19 | 0) != 0;
  if (($base | 0) == 0) {
    var $28 = 0;
  } else {
    var $28 = (HEAP32[$base + 12 >> 2] & 1 | 0) != 0;
  }
  var $28;
  var $29 = $28 & 1;
  var $30$s2 = ($res + 16 | 0) >> 2;
  var $31 = HEAP32[$30$s2], $31$s2 = $31 >> 2;
  var $33 = HEAP32[$expo + 16 >> 2];
  if (($4 | 0) == 0) {
    var $msize_0 = 1 / ($4 | 0) & -1;
  } else {
    var $msize_0 = $4;
  }
  var $msize_0;
  if (($2 | 0) == 0) {
    HEAP32[$31$s2] = 1;
    if (($msize_0 | 0) == 1) {
      var $46 = (HEAP32[HEAP32[$mod + 16 >> 2] >> 2] | 0) == 1;
    } else {
      var $46 = 0;
    }
    var $46;
    HEAP32[$res$s2 + 1] = $46 & 1 ^ 1;
    HEAP32[$res$s2 + 2] = 0;
    STACKTOP = __stackBase__;
    return;
  }
  var $52 = $20 ? $msize_0 : 0;
  var $53 = __gcry_mpi_alloc_limb_space($msize_0, $19);
  var $55$s2 = ($mod + 16 | 0) >> 2;
  var $58 = HEAP32[HEAP32[$55$s2] + ($msize_0 - 1 << 2) >> 2];
  if ($58 >>> 0 < 65536) {
    var $67 = $58 >>> 0 < 256 ? 0 : 8;
  } else {
    var $67 = $58 >>> 0 < 16777216 ? 16 : 24;
  }
  var $67;
  var $72 = HEAPU8[($58 >>> ($67 >>> 0)) + 492492 | 0] + $67 | 0;
  var $73 = 32 - $72 | 0;
  var $74 = ($72 | 0) != 32;
  L1301 : do {
    if ($74) {
      __gcry_mpih_lshift($53, HEAP32[$55$s2], $msize_0, $73);
    } else {
      if (($msize_0 | 0) > 0) {
        var $_i_023 = 0;
      } else {
        break;
      }
      while (1) {
        var $_i_023;
        HEAP32[$53 + ($_i_023 << 2) >> 2] = HEAP32[HEAP32[$55$s2] + ($_i_023 << 2) >> 2];
        var $83 = $_i_023 + 1 | 0;
        if (($83 | 0) == ($msize_0 | 0)) {
          break L1301;
        } else {
          var $_i_023 = $83;
        }
      }
    }
  } while (0);
  var $85 = HEAP32[$base + 4 >> 2];
  var $86 = $base + 8 | 0;
  var $87 = HEAP32[$86 >> 2];
  L1307 : do {
    if (($85 | 0) > ($msize_0 | 0)) {
      var $90 = $85 + 1 | 0;
      var $_ = $28 ? $90 : 0;
      var $91 = __gcry_mpi_alloc_limb_space($90, $29);
      L1309 : do {
        if (($85 | 0) > 0) {
          var $93 = $base + 16 | 0;
          var $_i1_049 = 0;
          while (1) {
            var $_i1_049;
            HEAP32[$91 + ($_i1_049 << 2) >> 2] = HEAP32[HEAP32[$93 >> 2] + ($_i1_049 << 2) >> 2];
            var $99 = $_i1_049 + 1 | 0;
            if (($99 | 0) == ($85 | 0)) {
              break L1309;
            } else {
              var $_i1_049 = $99;
            }
          }
        }
      } while (0);
      __gcry_mpih_divrem(($msize_0 << 2) + $91 | 0, 0, $91, $85, $53, $msize_0);
      var $bsize_0 = $msize_0;
      while (1) {
        var $bsize_0;
        if (($bsize_0 | 0) <= 0) {
          var $bp_0 = $91;
          var $bsize_1 = $bsize_0;
          var $bp_marker_0 = $91;
          var $bp_nlimbs_0 = $_;
          label = 996;
          break L1307;
        }
        var $105 = $bsize_0 - 1 | 0;
        if ((HEAP32[$91 + ($105 << 2) >> 2] | 0) == 0) {
          var $bsize_0 = $105;
        } else {
          var $bp_nlimbs_065 = $_;
          var $bp_marker_066 = $91;
          var $bsize_167 = $bsize_0;
          var $bp_068 = $91;
          label = 998;
          break L1307;
        }
      }
    } else {
      var $bp_0 = HEAP32[$base + 16 >> 2];
      var $bsize_1 = $85;
      var $bp_marker_0 = 0;
      var $bp_nlimbs_0 = 0;
      label = 996;
      break;
    }
  } while (0);
  do {
    if (label == 996) {
      var $bp_nlimbs_0;
      var $bp_marker_0;
      var $bsize_1;
      var $bp_0;
      if (($bsize_1 | 0) != 0) {
        var $bp_nlimbs_065 = $bp_nlimbs_0;
        var $bp_marker_066 = $bp_marker_0;
        var $bsize_167 = $bsize_1;
        var $bp_068 = $bp_0;
        label = 998;
        break;
      }
      HEAP32[$res$s2 + 1] = 0;
      HEAP32[$res$s2 + 2] = 0;
      var $mp_marker_1 = $53;
      var $bp_marker_2 = $bp_marker_0;
      var $ep_marker_1 = 0;
      var $xp_marker_0 = 0;
      var $bp_nlimbs_2 = $bp_nlimbs_0;
      var $ep_nlimbs_1 = 0;
      var $xp_nlimbs_0 = 0;
      var $tspace_3 = 0;
      break;
    }
  } while (0);
  do {
    if (label == 998) {
      var $bp_068;
      var $bsize_167;
      var $bp_marker_066;
      var $bp_nlimbs_065;
      L1323 : do {
        if (($31 | 0) == ($bp_068 | 0)) {
          if (($bp_marker_066 | 0) != 0) {
            __gcry_assert_failed(490072, 489844, 137, 495300);
          }
          var $121 = $28 ? $bsize_167 : 0;
          var $122 = __gcry_mpi_alloc_limb_space($bsize_167, $29);
          if (($bsize_167 | 0) > 0) {
            var $_i2_045 = 0;
          } else {
            var $bp_1 = $122;
            var $bp_marker_1 = $122;
            var $bp_nlimbs_1 = $121;
            break;
          }
          while (1) {
            var $_i2_045;
            HEAP32[$122 + ($_i2_045 << 2) >> 2] = HEAP32[($_i2_045 << 2 >> 2) + $31$s2];
            var $127 = $_i2_045 + 1 | 0;
            if (($127 | 0) == ($bsize_167 | 0)) {
              var $bp_1 = $122;
              var $bp_marker_1 = $122;
              var $bp_nlimbs_1 = $121;
              break L1323;
            } else {
              var $_i2_045 = $127;
            }
          }
        } else {
          var $bp_1 = $bp_068;
          var $bp_marker_1 = $bp_marker_066;
          var $bp_nlimbs_1 = $bp_nlimbs_065;
        }
      } while (0);
      var $bp_nlimbs_1;
      var $bp_marker_1;
      var $bp_1;
      L1331 : do {
        if (($31 | 0) == ($33 | 0)) {
          var $130 = $15 ? $2 : 0;
          var $131 = __gcry_mpi_alloc_limb_space($2, $16);
          if (($2 | 0) > 0) {
            var $_i3_041 = 0;
          } else {
            var $ep_0 = $131, $ep_0$s2 = $ep_0 >> 2;
            var $ep_marker_0 = $131;
            var $ep_nlimbs_0 = $130;
            break;
          }
          while (1) {
            var $_i3_041;
            HEAP32[$131 + ($_i3_041 << 2) >> 2] = HEAP32[($_i3_041 << 2 >> 2) + $31$s2];
            var $136 = $_i3_041 + 1 | 0;
            if (($136 | 0) == ($2 | 0)) {
              var $ep_0 = $131, $ep_0$s2 = $ep_0 >> 2;
              var $ep_marker_0 = $131;
              var $ep_nlimbs_0 = $130;
              break L1331;
            } else {
              var $_i3_041 = $136;
            }
          }
        } else {
          var $ep_0 = $33, $ep_0$s2 = $ep_0 >> 2;
          var $ep_marker_0 = 0;
          var $ep_nlimbs_0 = 0;
        }
      } while (0);
      var $ep_nlimbs_0;
      var $ep_marker_0;
      var $ep_0;
      L1336 : do {
        if (($31 | 0) == ($53 | 0)) {
          if (($53 | 0) != 0) {
            __gcry_assert_failed(481288, 489844, 152, 495300);
          }
          var $142 = __gcry_mpi_alloc_limb_space($msize_0, $19);
          if (($msize_0 | 0) > 0) {
            var $_i4_037 = 0;
          } else {
            var $mp_marker_0 = $142;
            break;
          }
          while (1) {
            var $_i4_037;
            HEAP32[$142 + ($_i4_037 << 2) >> 2] = HEAP32[($_i4_037 << 2 >> 2) + $31$s2];
            var $147 = $_i4_037 + 1 | 0;
            if (($147 | 0) == ($msize_0 | 0)) {
              var $mp_marker_0 = $142;
              break L1336;
            } else {
              var $_i4_037 = $147;
            }
          }
        } else {
          var $mp_marker_0 = $53;
        }
      } while (0);
      var $mp_marker_0;
      if ((HEAP32[$res$s2] | 0) < ($5 | 0)) {
        __gcry_mpi_resize($res, $5);
        var $rp_0 = HEAP32[$30$s2];
      } else {
        var $rp_0 = $31;
      }
      var $rp_0;
      L1347 : do {
        if (($bsize_167 | 0) > 0) {
          var $_i5_032 = 0;
          while (1) {
            var $_i5_032;
            HEAP32[$rp_0 + ($_i5_032 << 2) >> 2] = HEAP32[$bp_1 + ($_i5_032 << 2) >> 2];
            var $158 = $_i5_032 + 1 | 0;
            if (($158 | 0) == ($bsize_167 | 0)) {
              break L1347;
            } else {
              var $_i5_032 = $158;
            }
          }
        }
      } while (0);
      if ($20) {
        var $163 = ($msize_0 << 1) + 2 | 0;
      } else {
        var $163 = 0;
      }
      var $163;
      var $166 = __gcry_mpi_alloc_limb_space(($msize_0 << 1) + 2 | 0, $19);
      var $167$s2 = $karactx >> 2;
      HEAP32[$167$s2] = 0;
      HEAP32[$167$s2 + 1] = 0;
      HEAP32[$167$s2 + 2] = 0;
      HEAP32[$167$s2 + 3] = 0;
      HEAP32[$167$s2 + 4] = 0;
      HEAP32[$167$s2 + 5] = 0;
      HEAP32[$167$s2 + 6] = 0;
      if ((HEAP32[$ep_0$s2] & 1 | 0) == 0) {
        var $174 = 1;
      } else {
        var $174 = (HEAP32[$86 >> 2] | 0) == 0;
      }
      var $174;
      var $175 = $2 - 1 | 0;
      var $177 = HEAP32[($175 << 2 >> 2) + $ep_0$s2];
      if ($177 >>> 0 < 65536) {
        var $186 = $177 >>> 0 < 256 ? 0 : 8;
      } else {
        var $186 = $177 >>> 0 < 16777216 ? 16 : 24;
      }
      var $186;
      var $191 = 32 - $186 - HEAPU8[($177 >>> ($186 >>> 0)) + 492492 | 0] | 0;
      var $194 = ($bsize_167 | 0) < 16;
      var $e_0_ph_in = $177 << $191;
      var $rp_1_ph = $rp_0;
      var $c_0_ph = 31 - $191 | 0;
      var $rsize_0_ph = $bsize_167;
      var $xp_0_ph = $166;
      var $i_0_ph = $175;
      var $tspace_0_ph = 0;
      var $tsize_0_ph = 0;
      L1361 : while (1) {
        var $tsize_0_ph;
        var $tspace_0_ph;
        var $i_0_ph;
        var $xp_0_ph;
        var $rsize_0_ph;
        var $c_0_ph;
        var $rp_1_ph;
        var $e_0_ph_in;
        var $e_0 = $e_0_ph_in << 1;
        var $c_0 = $c_0_ph;
        var $i_0 = $i_0_ph;
        while (1) {
          var $i_0;
          var $c_0;
          var $e_0;
          if (($c_0 | 0) != 0) {
            break;
          }
          var $231 = $i_0 - 1 | 0;
          if (($231 | 0) < 0) {
            break L1361;
          }
          var $e_0 = HEAP32[($231 << 2 >> 2) + $ep_0$s2];
          var $c_0 = 32;
          var $i_0 = $231;
        }
        if (($rsize_0_ph | 0) < 16) {
          __gcry_mpih_sqr_n_basecase($xp_0_ph, $rp_1_ph, $rsize_0_ph);
          var $tspace_2 = $tspace_0_ph;
          var $tsize_2 = $tsize_0_ph;
        } else {
          var $202 = $rsize_0_ph << 1;
          do {
            if (($tspace_0_ph | 0) == 0) {
              var $tspace_1 = __gcry_mpi_alloc_limb_space($202, 0);
              var $tsize_1 = $202;
            } else {
              if (($tsize_0_ph | 0) >= ($202 | 0)) {
                var $tspace_1 = $tspace_0_ph;
                var $tsize_1 = $tsize_0_ph;
                break;
              }
              __gcry_mpi_free_limb_space($tspace_0_ph, 0);
              var $tspace_1 = __gcry_mpi_alloc_limb_space($202, 0);
              var $tsize_1 = $202;
            }
          } while (0);
          var $tsize_1;
          var $tspace_1;
          __gcry_mpih_sqr_n($xp_0_ph, $rp_1_ph, $rsize_0_ph, $tspace_1);
          var $tspace_2 = $tspace_1;
          var $tsize_2 = $tsize_1;
        }
        var $tsize_2;
        var $tspace_2;
        var $211 = $rsize_0_ph << 1;
        if (($211 | 0) > ($msize_0 | 0)) {
          __gcry_mpih_divrem(($msize_0 << 2) + $xp_0_ph | 0, 0, $xp_0_ph, $211, $mp_marker_0, $msize_0);
          var $xsize_0 = $msize_0;
        } else {
          var $xsize_0 = $211;
        }
        var $xsize_0;
        do {
          if (($e_0 | 0) < 0) {
            if ($194) {
              __gcry_mpih_mul($rp_1_ph, $xp_0_ph, $xsize_0, $bp_1, $bsize_167);
            } else {
              __gcry_mpih_mul_karatsuba_case($rp_1_ph, $xp_0_ph, $xsize_0, $bp_1, $bsize_167, $karactx);
            }
            var $223 = $xsize_0 + $bsize_167 | 0;
            if (($223 | 0) <= ($msize_0 | 0)) {
              var $rp_2 = $rp_1_ph;
              var $rsize_1 = $223;
              var $xp_1 = $xp_0_ph;
              break;
            }
            __gcry_mpih_divrem(($msize_0 << 2) + $rp_1_ph | 0, 0, $rp_1_ph, $223, $mp_marker_0, $msize_0);
            var $rp_2 = $rp_1_ph;
            var $rsize_1 = $msize_0;
            var $xp_1 = $xp_0_ph;
          } else {
            var $rp_2 = $xp_0_ph;
            var $rsize_1 = $xsize_0;
            var $xp_1 = $rp_1_ph;
          }
        } while (0);
        var $xp_1;
        var $rsize_1;
        var $rp_2;
        var $e_0_ph_in = $e_0;
        var $rp_1_ph = $rp_2;
        var $c_0_ph = $c_0 - 1 | 0;
        var $rsize_0_ph = $rsize_1;
        var $xp_0_ph = $xp_1;
        var $i_0_ph = $i_0;
        var $tspace_0_ph = $tspace_2;
        var $tsize_0_ph = $tsize_2;
      }
      var $237 = HEAP32[$30$s2];
      do {
        if ($74) {
          var $239 = __gcry_mpih_lshift($237, $rp_1_ph, $rsize_0_ph, $73);
          var $240 = HEAP32[$30$s2];
          if (($239 | 0) == 0) {
            var $rp_3 = $240;
            var $rsize_2 = $rsize_0_ph;
            break;
          }
          HEAP32[$240 + ($rsize_0_ph << 2) >> 2] = $239;
          var $rp_3 = $240;
          var $rsize_2 = $rsize_0_ph + 1 | 0;
        } else {
          if (($237 | 0) == ($rp_1_ph | 0)) {
            var $rp_3 = $rp_1_ph;
            var $rsize_2 = $rsize_0_ph;
            break;
          }
          L1394 : do {
            if (($rsize_0_ph | 0) > 0) {
              var $_i8_025 = 0;
              while (1) {
                var $_i8_025;
                HEAP32[HEAP32[$30$s2] + ($_i8_025 << 2) >> 2] = HEAP32[$rp_1_ph + ($_i8_025 << 2) >> 2];
                var $252 = $_i8_025 + 1 | 0;
                if (($252 | 0) == ($rsize_0_ph | 0)) {
                  break L1394;
                } else {
                  var $_i8_025 = $252;
                }
              }
            }
          } while (0);
          var $rp_3 = HEAP32[$30$s2];
          var $rsize_2 = $rsize_0_ph;
        }
      } while (0);
      var $rsize_2;
      var $rp_3;
      if (($rsize_2 | 0) < ($msize_0 | 0)) {
        var $rsize_3 = $rsize_2;
      } else {
        __gcry_mpih_divrem(($msize_0 << 2) + $rp_3 | 0, 0, $rp_3, $rsize_2, $mp_marker_0, $msize_0);
        var $rsize_3 = $msize_0;
      }
      var $rsize_3;
      do {
        if ($74) {
          __gcry_mpih_rshift($rp_3, $rp_3, $rsize_3, $73);
          var $rsize_4 = $rsize_3;
          break;
        } else {
          var $rsize_4 = $rsize_3;
        }
      } while (0);
      while (1) {
        var $rsize_4;
        if (($rsize_4 | 0) <= 0) {
          break;
        }
        var $264 = $rsize_4 - 1 | 0;
        if ((HEAP32[$rp_3 + ($264 << 2) >> 2] | 0) == 0) {
          var $rsize_4 = $264;
        } else {
          break;
        }
      }
      __gcry_mpih_release_karatsuba_ctx($karactx);
      L1408 : do {
        if ($174 | ($rsize_4 | 0) == 0) {
          var $rsize_6 = $rsize_4;
          var $rsign_0 = $87;
        } else {
          if ($74) {
            __gcry_mpih_rshift($mp_marker_0, $mp_marker_0, $msize_0, $73);
          }
          __gcry_mpih_sub($rp_3, $mp_marker_0, $msize_0, $rp_3, $rsize_4);
          var $rsize_5 = $msize_0;
          while (1) {
            var $rsize_5;
            if (($rsize_5 | 0) <= 0) {
              var $rsize_6 = $rsize_5;
              var $rsign_0 = $7;
              break L1408;
            }
            var $278 = $rsize_5 - 1 | 0;
            if ((HEAP32[$rp_3 + ($278 << 2) >> 2] | 0) == 0) {
              var $rsize_5 = $278;
            } else {
              var $rsize_6 = $rsize_5;
              var $rsign_0 = $7;
              break L1408;
            }
          }
        }
      } while (0);
      var $rsign_0;
      var $rsize_6;
      if ((HEAP32[$30$s2] | 0) == ($rp_3 | 0)) {
        HEAP32[$res$s2 + 1] = $rsize_6;
        HEAP32[$res$s2 + 2] = $rsign_0;
        var $mp_marker_1 = $mp_marker_0;
        var $bp_marker_2 = $bp_marker_1;
        var $ep_marker_1 = $ep_marker_0;
        var $xp_marker_0 = $166;
        var $bp_nlimbs_2 = $bp_nlimbs_1;
        var $ep_nlimbs_1 = $ep_nlimbs_0;
        var $xp_nlimbs_0 = $163;
        var $tspace_3 = $tspace_0_ph;
        break;
      } else {
        __gcry_assert_failed(477152, 489844, 309, 495300);
      }
    }
  } while (0);
  var $tspace_3;
  var $xp_nlimbs_0;
  var $ep_nlimbs_1;
  var $bp_nlimbs_2;
  var $xp_marker_0;
  var $ep_marker_1;
  var $bp_marker_2;
  var $mp_marker_1;
  if (($mp_marker_1 | 0) != 0) {
    __gcry_mpi_free_limb_space($mp_marker_1, $52);
  }
  if (($bp_marker_2 | 0) != 0) {
    __gcry_mpi_free_limb_space($bp_marker_2, $bp_nlimbs_2);
  }
  if (($ep_marker_1 | 0) != 0) {
    __gcry_mpi_free_limb_space($ep_marker_1, $ep_nlimbs_1);
  }
  if (($xp_marker_0 | 0) != 0) {
    __gcry_mpi_free_limb_space($xp_marker_0, $xp_nlimbs_0);
  }
  if (($tspace_3 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_mpi_free_limb_space($tspace_3, 0);
  STACKTOP = __stackBase__;
  return;
}
__gcry_mpi_powm["X"] = 1;
function __gcry_mpi_putbyte($a, $idx, $xc) {
  var $9$s2;
  var label = 0;
  var $1 = $xc & 255;
  var $3 = HEAP32[$a + 16 >> 2];
  var $5 = HEAP32[$a >> 2];
  var $n_0 = 0;
  var $i_0 = 0;
  L1438 : while (1) {
    var $i_0;
    var $n_0;
    if (($i_0 | 0) >= ($5 | 0)) {
      label = 1094;
      break;
    }
    var $9$s2 = (($i_0 << 2) + $3 | 0) >> 2;
    var $10 = HEAP32[$9$s2];
    var $n_1 = $n_0;
    var $j_0 = 0;
    while (1) {
      var $j_0;
      var $n_1;
      if (($j_0 | 0) >= 4) {
        break;
      }
      if (($n_1 | 0) == ($idx | 0)) {
        break L1438;
      }
      var $n_1 = $n_1 + 1 | 0;
      var $j_0 = $j_0 + 1 | 0;
    }
    var $n_0 = $n_1;
    var $i_0 = $i_0 + 1 | 0;
  }
  if (label == 1094) {
    _abort();
  }
  if (($j_0 | 0) == 2) {
    var $limb_0 = $10 & -16711681 | $1 << 16;
  } else if (($j_0 | 0) == 1) {
    var $limb_0 = $10 & -65281 | $1 << 8;
  } else if (($j_0 | 0) == 0) {
    var $limb_0 = $10 & -256 | $1;
  } else {
    var $limb_0 = $10 & 16777215 | $xc << 24;
  }
  var $limb_0;
  var $32 = $a + 4 | 0;
  if ((HEAP32[$32 >> 2] | 0) > ($i_0 | 0)) {
    HEAP32[$9$s2] = $limb_0;
    return;
  }
  HEAP32[$32 >> 2] = $i_0 + 1 | 0;
  HEAP32[$9$s2] = $limb_0;
  return;
}
__gcry_mpi_putbyte["X"] = 1;
function _do_get_buffer($a, $nbytes, $sign, $force_secure) {
  var label = 0;
  if (($sign | 0) != 0) {
    HEAP32[$sign >> 2] = HEAP32[$a + 8 >> 2];
  }
  var $6 = $a + 4 | 0;
  var $8 = HEAP32[$6 >> 2] << 2;
  HEAP32[$nbytes >> 2] = $8;
  var $_ = ($8 | 0) == 0 ? 1 : $8;
  do {
    if (($force_secure | 0) == 0) {
      if (($a | 0) != 0) {
        if ((HEAP32[$a + 12 >> 2] & 1 | 0) != 0) {
          label = 1102;
          break;
        }
      }
      var $23 = __gcry_malloc($_);
      break;
    } else {
      label = 1102;
    }
  } while (0);
  if (label == 1102) {
    var $23 = __gcry_malloc_secure($_);
  }
  var $23;
  if (($23 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $26 = HEAP32[$6 >> 2];
  L1474 : do {
    if (($26 | 0) > 0) {
      var $28 = $a + 16 | 0;
      var $p_02 = $23;
      var $i_03_in = $26;
      while (1) {
        var $i_03_in;
        var $p_02;
        var $i_03 = $i_03_in - 1 | 0;
        var $32 = HEAP32[HEAP32[$28 >> 2] + ($i_03 << 2) >> 2];
        HEAP8[$p_02] = $32 >>> 24 & 255;
        HEAP8[$p_02 + 1 | 0] = $32 >>> 16 & 255;
        HEAP8[$p_02 + 2 | 0] = $32 >>> 8 & 255;
        HEAP8[$p_02 + 3 | 0] = $32 & 255;
        if (($i_03 | 0) > 0) {
          var $p_02 = $p_02 + 4 | 0;
          var $i_03_in = $i_03;
        } else {
          var $p_1 = $23;
          break L1474;
        }
      }
    } else {
      var $p_1 = $23;
    }
  } while (0);
  while (1) {
    var $p_1;
    if (HEAP8[$p_1] << 24 >> 24 != 0) {
      break;
    }
    var $48 = HEAP32[$nbytes >> 2];
    if (($48 | 0) == 0) {
      break;
    }
    HEAP32[$nbytes >> 2] = $48 - 1 | 0;
    var $p_1 = $p_1 + 1 | 0;
  }
  if (($p_1 | 0) == ($23 | 0)) {
    var $_0 = $23;
    var $_0;
    return $_0;
  }
  _memmove($23, $p_1, HEAP32[$nbytes >> 2], 1, 0);
  var $_0 = $23;
  var $_0;
  return $_0;
}
_do_get_buffer["X"] = 1;
function __gcry_mpi_get_secure_buffer($a, $nbytes, $sign) {
  return _do_get_buffer($a, $nbytes, $sign, 1);
}
function __gcry_mpi_scan($ret_mpi, $format, $buffer_arg, $buflen, $nscanned) {
  var $len$s2;
  var $ret_mpi$s2 = $ret_mpi >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $len = __stackBase__, $len$s2 = $len >> 2;
  if (($buffer_arg | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = (__gcry_is_secure($buffer_arg) | 0) != 0;
  }
  var $6;
  var $7 = ($format | 0) == 3;
  var $_buflen = $7 ? 0 : $buflen;
  HEAP32[$len$s2] = $_buflen;
  L1492 : do {
    if (($format | 0) == 1) {
      var $10 = ($_buflen + 3 | 0) >>> 2;
      if ($6) {
        var $16 = __gcry_mpi_alloc_secure($10);
      } else {
        var $16 = __gcry_mpi_alloc($10);
      }
      var $16;
      do {
        if ((HEAP32[$len$s2] | 0) != 0) {
          var $20 = HEAP8[$buffer_arg];
          HEAP32[$16 + 8 >> 2] = ($20 & 255) >>> 7 & 255;
          if ($20 << 24 >> 24 < 0) {
            __gcry_mpi_free($16);
            var $_0 = _gcry_error1095(63);
            break L1492;
          } else {
            __gcry_mpi_set_buffer($16, $buffer_arg, HEAP32[$len$s2], 0);
            break;
          }
        }
      } while (0);
      if (($ret_mpi | 0) == 0) {
        __gcry_mpi_free($16);
        var $_0 = 0;
        break;
      } else {
        __gcry_mpi_normalize($16);
        HEAP32[$ret_mpi$s2] = $16;
        var $_0 = 0;
        break;
      }
    } else if (($format | 0) == 5) {
      var $34 = ($_buflen + 3 | 0) >>> 2;
      if ($6) {
        var $40 = __gcry_mpi_alloc_secure($34);
      } else {
        var $40 = __gcry_mpi_alloc($34);
      }
      var $40;
      var $41 = HEAP32[$len$s2];
      if (($41 | 0) != 0) {
        __gcry_mpi_set_buffer($40, $buffer_arg, $41, 0);
      }
      if (($ret_mpi | 0) == 0) {
        __gcry_mpi_free($40);
        var $_0 = 0;
        break;
      } else {
        __gcry_mpi_normalize($40);
        HEAP32[$ret_mpi$s2] = $40;
        var $_0 = 0;
        break;
      }
    } else if (($format | 0) == 2) {
      var $50 = _mpi_read_from_buffer($buffer_arg, $len, $6 & 1);
      if (($nscanned | 0) != 0) {
        HEAP32[$nscanned >> 2] = HEAP32[$len$s2];
      }
      var $56 = ($50 | 0) == 0;
      do {
        if (($ret_mpi | 0) == 0 | $56) {
          if ($56) {
            break;
          }
          __gcry_mpi_free($50);
        } else {
          __gcry_mpi_normalize($50);
          HEAP32[$ret_mpi$s2] = $50;
          if (($50 | 0) != 0) {
            var $_0 = 0;
            break L1492;
          }
        }
      } while (0);
      var $_0 = _gcry_error1095(65);
    } else {
      if (!$7) {
        if (($format | 0) != 4) {
          var $_0 = _gcry_error1095(45);
          break;
        }
        if (($buflen | 0) != 0) {
          var $_0 = _gcry_error1095(45);
          break;
        }
        if ($6) {
          var $133 = __gcry_mpi_alloc_secure(0);
        } else {
          var $133 = __gcry_mpi_alloc(0);
        }
        var $133;
        if ((_mpi_fromstr($133, $buffer_arg) | 0) != 0) {
          __gcry_mpi_free($133);
          var $_0 = _gcry_error1095(65);
          break;
        }
        if (($ret_mpi | 0) == 0) {
          __gcry_mpi_free($133);
          var $_0 = 0;
          break;
        } else {
          __gcry_mpi_normalize($133);
          HEAP32[$ret_mpi$s2] = $133;
          var $_0 = 0;
          break;
        }
      }
      var $64 = ($_buflen | 0) != 0;
      if ($64 & $_buflen >>> 0 < 4) {
        var $_0 = _gcry_error1095(66);
        break;
      }
      var $85 = HEAPU8[$buffer_arg + 1 | 0] << 16 | HEAPU8[$buffer_arg] << 24 | HEAPU8[$buffer_arg + 3 | 0] | HEAPU8[$buffer_arg + 2 | 0] << 8;
      var $86 = $buffer_arg + 4 | 0;
      if ($64) {
        HEAP32[$len$s2] = $_buflen - 4 | 0;
      }
      var $90 = HEAP32[$len$s2];
      if (($90 | 0) != 0 & $85 >>> 0 > $90 >>> 0) {
        var $_0 = _gcry_error1095(67);
        break;
      }
      var $96 = $85 + 4 | 0;
      var $98 = ($85 + 3 | 0) >>> 2;
      if ($6) {
        var $104 = __gcry_mpi_alloc_secure($98);
      } else {
        var $104 = __gcry_mpi_alloc($98);
      }
      var $104;
      do {
        if (($85 | 0) != 0) {
          var $107 = HEAP8[$86];
          HEAP32[$104 + 8 >> 2] = ($107 & 255) >>> 7 & 255;
          if ($107 << 24 >> 24 < 0) {
            __gcry_mpi_free($104);
            var $_0 = _gcry_error1095(63);
            break L1492;
          } else {
            __gcry_mpi_set_buffer($104, $86, $85, 0);
            break;
          }
        }
      } while (0);
      if (($nscanned | 0) != 0) {
        HEAP32[$nscanned >> 2] = $96;
      }
      if (($ret_mpi | 0) == 0) {
        __gcry_mpi_free($104);
        var $_0 = 0;
        break;
      } else {
        __gcry_mpi_normalize($104);
        HEAP32[$ret_mpi$s2] = $104;
        var $_0 = 0;
        break;
      }
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
Module["__gcry_mpi_scan"] = __gcry_mpi_scan;
__gcry_mpi_scan["X"] = 1;
function _gcry_error1095($code) {
  return _gcry_err_make1102($code);
}
function _mpi_read_from_buffer($buffer, $ret_nread, $secure) {
  L1575 : do {
    if (HEAP32[$ret_nread >> 2] >>> 0 < 2) {
      var $val_0 = 0;
      var $nread_2 = 0;
    } else {
      var $10 = HEAPU8[$buffer] << 8 | HEAPU8[$buffer + 1 | 0];
      if ($10 >>> 0 > 16384) {
        var $val_0 = 0;
        var $nread_2 = 0;
        break;
      }
      var $15 = ($10 + 7 | 0) >>> 3;
      var $17 = ($15 + 3 | 0) >>> 2;
      if (($secure | 0) == 0) {
        var $24 = __gcry_mpi_alloc($17);
      } else {
        var $24 = __gcry_mpi_alloc_secure($17);
      }
      var $24;
      HEAP32[$24 + 4 >> 2] = $17;
      HEAP32[$24 + 8 >> 2] = 0;
      var $29 = $24 + 16 | 0;
      var $_0 = $buffer + 2 | 0;
      var $i_0 = -$15 & 3;
      var $j_0 = $17;
      var $nread_0 = 2;
      L1582 : while (1) {
        var $nread_0;
        var $j_0;
        var $i_0;
        var $_0;
        if (($j_0 | 0) > 0) {
          var $_1 = $_0;
          var $a_0 = 0;
          var $i_1 = $i_0;
          var $nread_1 = $nread_0;
        } else {
          var $val_0 = $24;
          var $nread_2 = $nread_0;
          break L1575;
        }
        while (1) {
          var $nread_1;
          var $i_1;
          var $a_0;
          var $_1;
          if (($i_1 | 0) >= 4) {
            break;
          }
          var $34 = $nread_1 + 1 | 0;
          if ($34 >>> 0 > HEAP32[$ret_nread >> 2] >>> 0) {
            break L1582;
          }
          var $43 = HEAPU8[$_1] | $a_0 << 8;
          var $_1 = $_1 + 1 | 0;
          var $a_0 = $43;
          var $i_1 = $i_1 + 1 | 0;
          var $nread_1 = $34;
        }
        var $46 = $j_0 - 1 | 0;
        HEAP32[HEAP32[$29 >> 2] + ($46 << 2) >> 2] = $a_0;
        var $_0 = $_1;
        var $i_0 = 0;
        var $j_0 = $46;
        var $nread_0 = $nread_1;
      }
      __gcry_mpi_free($24);
      var $val_0 = 0;
      var $nread_2 = $34;
    }
  } while (0);
  var $nread_2;
  var $val_0;
  HEAP32[$ret_nread >> 2] = $nread_2;
  return $val_0;
}
_mpi_read_from_buffer["X"] = 1;
function _mpi_fromstr($val, $str) {
  var label = 0;
  var $2 = HEAP8[$str] << 24 >> 24 == 45;
  var $_str = $2 ? $str + 1 | 0 : $str;
  if (HEAP8[$_str] << 24 >> 24 == 48) {
    var $_1 = HEAP8[$_str + 1 | 0] << 24 >> 24 == 120 ? $_str + 2 | 0 : $_str;
  } else {
    var $_1 = $_str;
  }
  var $_1;
  var $12 = _strlen($_1);
  var $15 = (($12 << 2) + 7 | 0) >>> 3;
  var $17 = ($15 + 3 | 0) >>> 2;
  if (HEAP32[$val >> 2] >>> 0 < $17 >>> 0) {
    __gcry_mpi_resize($val, $17);
  }
  HEAP32[$val + 4 >> 2] = $17;
  HEAP32[$val + 8 >> 2] = $2 & 1;
  var $27 = $val + 16 | 0;
  var $_2 = $_1;
  var $prepend_zero_1 = $12 & 1;
  var $i_0 = -$15 & 3;
  var $j_0 = $17;
  L1598 : while (1) {
    var $j_0;
    var $i_0;
    var $prepend_zero_1;
    var $_2;
    if (($j_0 | 0) > 0) {
      var $a_0 = 0;
      var $_3 = $_2;
      var $prepend_zero_2 = $prepend_zero_1;
      var $i_1 = $i_0;
    } else {
      var $_0 = 0;
      label = 1221;
      break;
    }
    while (1) {
      var $i_1;
      var $prepend_zero_2;
      var $_3;
      var $a_0;
      if (($i_1 | 0) >= 4) {
        break;
      }
      if (($prepend_zero_2 | 0) == 0) {
        var $35 = HEAP8[$_3];
        if ($35 << 24 >> 24 == 0) {
          label = 1201;
          break L1598;
        } else {
          var $c1_018 = $35 << 24 >> 24;
          var $_420 = $_3 + 1 | 0;
        }
      } else {
        var $c1_018 = 48;
        var $_420 = $_3;
      }
      var $_420;
      var $c1_018;
      var $39 = $_420 + 1 | 0;
      var $40 = HEAP8[$_420];
      var $41 = $40 << 24 >> 24;
      if ($40 << 24 >> 24 == 0) {
        label = 1203;
        break L1598;
      }
      do {
        if (($c1_018 - 48 | 0) >>> 0 < 10) {
          var $c_0 = $c1_018 - 48 | 0;
        } else {
          if (($c1_018 - 97 | 0) >>> 0 < 6) {
            var $c_0 = $c1_018 - 87 | 0;
            break;
          }
          if (($c1_018 - 65 | 0) >>> 0 >= 6) {
            label = 1210;
            break L1598;
          }
          var $c_0 = $c1_018 - 55 | 0;
        }
      } while (0);
      var $c_0;
      var $58 = $c_0 << 4;
      do {
        if (($40 - 48 & 255) < 10) {
          var $_pn = $41 - 48 | 0;
        } else {
          if (($40 - 97 & 255) < 6) {
            var $_pn = $41 - 87 | 0;
            break;
          }
          if (($40 - 65 & 255) >= 6) {
            label = 1217;
            break L1598;
          }
          var $_pn = $41 - 55 | 0;
        }
      } while (0);
      var $_pn;
      var $a_0 = $58 | $a_0 << 8 | $_pn;
      var $_3 = $39;
      var $prepend_zero_2 = 0;
      var $i_1 = $i_1 + 1 | 0;
    }
    var $76 = $j_0 - 1 | 0;
    HEAP32[HEAP32[$27 >> 2] + ($76 << 2) >> 2] = $a_0;
    var $_2 = $_3;
    var $prepend_zero_1 = $prepend_zero_2;
    var $i_0 = 0;
    var $j_0 = $76;
  }
  if (label == 1201) {
    __gcry_mpi_clear($val);
    var $_0 = 1;
    var $_0;
    return $_0;
  } else if (label == 1203) {
    __gcry_mpi_clear($val);
    var $_0 = 1;
    var $_0;
    return $_0;
  } else if (label == 1210) {
    __gcry_mpi_clear($val);
    var $_0 = 1;
    var $_0;
    return $_0;
  } else if (label == 1217) {
    __gcry_mpi_clear($val);
    var $_0 = 1;
    var $_0;
    return $_0;
  } else if (label == 1221) {
    var $_0;
    return $_0;
  }
}
_mpi_fromstr["X"] = 1;
function __gcry_mpi_set_buffer($a, $buffer_arg, $nbytes, $sign) {
  var $2 = ($nbytes + 3 | 0) >>> 2;
  if ((HEAP32[$a >> 2] | 0) < ($2 | 0)) {
    __gcry_mpi_resize($a, $2);
  }
  HEAP32[$a + 8 >> 2] = $sign;
  var $_sum = $nbytes - 1 | 0;
  var $9 = $buffer_arg + $_sum | 0;
  var $10 = $buffer_arg + 4 | 0;
  L1638 : do {
    if (($_sum | 0) < 4) {
      var $p_0_lcssa = $9;
      var $i_0_lcssa = 0;
    } else {
      var $12 = $a + 16 | 0;
      var $p_01 = $9;
      var $i_02 = 0;
      while (1) {
        var $i_02;
        var $p_01;
        var $25 = $p_01 - 4 | 0;
        var $32 = $i_02 + 1 | 0;
        HEAP32[HEAP32[$12 >> 2] + ($i_02 << 2) >> 2] = HEAPU8[$p_01 - 1 | 0] << 8 | HEAPU8[$p_01] | HEAPU8[$p_01 - 2 | 0] << 16 | HEAPU8[$p_01 - 3 | 0] << 24;
        if ($25 >>> 0 < $10 >>> 0) {
          var $p_0_lcssa = $25;
          var $i_0_lcssa = $32;
          break L1638;
        } else {
          var $p_01 = $25;
          var $i_02 = $32;
        }
      }
    }
  } while (0);
  var $i_0_lcssa;
  var $p_0_lcssa;
  if ($p_0_lcssa >>> 0 < $buffer_arg >>> 0) {
    var $i_1 = $i_0_lcssa;
  } else {
    var $38 = $p_0_lcssa - 1 | 0;
    var $40 = HEAPU8[$p_0_lcssa];
    if ($38 >>> 0 < $buffer_arg >>> 0) {
      var $alimb_0 = $40;
      var $p_1 = $38;
    } else {
      var $alimb_0 = HEAPU8[$38] << 8 | $40;
      var $p_1 = $p_0_lcssa - 2 | 0;
    }
    var $p_1;
    var $alimb_0;
    if ($p_1 >>> 0 < $buffer_arg >>> 0) {
      var $alimb_1 = $alimb_0;
      var $p_2 = $p_1;
    } else {
      var $alimb_1 = HEAPU8[$p_1] << 16 | $alimb_0;
      var $p_2 = $p_1 - 1 | 0;
    }
    var $p_2;
    var $alimb_1;
    if ($p_2 >>> 0 < $buffer_arg >>> 0) {
      var $alimb_2 = $alimb_1;
    } else {
      var $alimb_2 = HEAPU8[$p_2] << 24 | $alimb_1;
    }
    var $alimb_2;
    HEAP32[HEAP32[$a + 16 >> 2] + ($i_0_lcssa << 2) >> 2] = $alimb_2;
    var $i_1 = $i_0_lcssa + 1 | 0;
  }
  var $i_1;
  HEAP32[$a + 4 >> 2] = $i_1;
  if (($i_1 | 0) == ($2 | 0)) {
    return;
  } else {
    __gcry_assert_failed(467724, 465684, 365, 495276);
  }
}
__gcry_mpi_set_buffer["X"] = 1;
function _gpg_err_make1101($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function __gcry_mpi_print($format, $buffer, $buflen, $nwritten, $a) {
  var $dummy_nwritten_nwritten$s2;
  var $n12$s2;
  var $n8$s2;
  var $n3$s2;
  var $n1$s2;
  var $n$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $n = __stackBase__ + 4, $n$s2 = $n >> 2;
  var $n1 = __stackBase__ + 8, $n1$s2 = $n1 >> 2;
  var $n3 = __stackBase__ + 12, $n3$s2 = $n3 >> 2;
  var $n8 = __stackBase__ + 16, $n8$s2 = $n8 >> 2;
  var $n12 = __stackBase__ + 20, $n12$s2 = $n12 >> 2;
  var $1 = __gcry_mpi_get_nbits($a);
  var $dummy_nwritten_nwritten$s2 = (($nwritten | 0) == 0 ? __stackBase__ : $nwritten) >> 2;
  HEAP32[$dummy_nwritten_nwritten$s2] = 0;
  if (($format | 0) == 1) {
    if ((HEAP32[$a + 8 >> 2] | 0) != 0) {
      var $_0 = _gcry_error1095(63);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    var $10 = __gcry_mpi_get_buffer($a, $n, 0);
    if (($10 | 0) == 0) {
      var $_0 = _gpg_error_from_syserror();
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    var $15 = HEAP32[$n$s2];
    do {
      if (($15 | 0) == 0) {
        var $extra_0 = 0;
      } else {
        if (HEAP8[$10] << 24 >> 24 >= 0) {
          var $extra_0 = 0;
          break;
        }
        HEAP32[$n$s2] = $15 + 1 | 0;
        var $extra_0 = 1;
      }
    } while (0);
    var $extra_0;
    if (($buffer | 0) != 0) {
      if (HEAP32[$n$s2] >>> 0 > $buflen >>> 0) {
        __gcry_free($10);
        var $_0 = _gcry_error1095(66);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      if (($extra_0 | 0) == 0) {
        var $s_0 = $buffer;
      } else {
        HEAP8[$buffer] = 0;
        var $s_0 = $buffer + 1 | 0;
      }
      var $s_0;
      _memcpy($s_0, $10, HEAP32[$n$s2] - $extra_0 | 0);
    }
    __gcry_free($10);
    HEAP32[$dummy_nwritten_nwritten$s2] = HEAP32[$n$s2];
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (($format | 0) == 5) {
    var $39 = ($1 + 7 | 0) >>> 3;
    HEAP32[$n1$s2] = $39;
    var $40 = ($buffer | 0) != 0;
    if ($40 & $39 >>> 0 > $buflen >>> 0) {
      var $_0 = _gcry_error1095(66);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    do {
      if ($40) {
        var $46 = __gcry_mpi_get_buffer($a, $n1, 0);
        if (($46 | 0) != 0) {
          _memcpy($buffer, $46, HEAP32[$n1$s2]);
          __gcry_free($46);
          break;
        }
        var $_0 = _gpg_error_from_syserror();
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    } while (0);
    HEAP32[$dummy_nwritten_nwritten$s2] = HEAP32[$n1$s2];
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (($format | 0) == 2) {
    var $56 = ($1 + 7 | 0) >>> 3;
    HEAP32[$n3$s2] = $56;
    if ((HEAP32[$a + 8 >> 2] | 0) != 0) {
      var $_0 = _gcry_error1095(45);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    do {
      if (($buffer | 0) != 0) {
        if (($56 + 2 | 0) >>> 0 > $buflen >>> 0) {
          var $_0 = _gcry_error1095(66);
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
        HEAP8[$buffer] = $1 >>> 8 & 255;
        HEAP8[$buffer + 1 | 0] = $1 & 255;
        var $74 = __gcry_mpi_get_buffer($a, $n3, 0);
        if (($74 | 0) != 0) {
          _memcpy($buffer + 2 | 0, $74, HEAP32[$n3$s2]);
          __gcry_free($74);
          break;
        }
        var $_0 = _gpg_error_from_syserror();
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    } while (0);
    HEAP32[$dummy_nwritten_nwritten$s2] = HEAP32[$n3$s2] + 2 | 0;
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (($format | 0) == 3) {
    if ((HEAP32[$a + 8 >> 2] | 0) != 0) {
      var $_0 = _gcry_error1095(63);
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    var $90 = __gcry_mpi_get_buffer($a, $n8, 0);
    if (($90 | 0) == 0) {
      var $_0 = _gpg_error_from_syserror();
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    var $95 = HEAP32[$n8$s2];
    do {
      if (($95 | 0) == 0) {
        var $extra7_0 = 0;
      } else {
        if (HEAP8[$90] << 24 >> 24 >= 0) {
          var $extra7_0 = 0;
          break;
        }
        HEAP32[$n8$s2] = $95 + 1 | 0;
        var $extra7_0 = 1;
      }
    } while (0);
    var $extra7_0;
    if (($buffer | 0) != 0) {
      var $105 = HEAP32[$n8$s2];
      if (($105 + 4 | 0) >>> 0 > $buflen >>> 0) {
        __gcry_free($90);
        var $_0 = _gcry_error1095(66);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      HEAP8[$buffer] = $105 >>> 24 & 255;
      HEAP8[$buffer + 1 | 0] = HEAP32[$n8$s2] >>> 16 & 255;
      HEAP8[$buffer + 2 | 0] = HEAP32[$n8$s2] >>> 8 & 255;
      var $124 = $buffer + 4 | 0;
      HEAP8[$buffer + 3 | 0] = HEAP32[$n8$s2] & 255;
      if (($extra7_0 | 0) == 0) {
        var $s9_0 = $124;
      } else {
        HEAP8[$124] = 0;
        var $s9_0 = $buffer + 5 | 0;
      }
      var $s9_0;
      _memcpy($s9_0, $90, HEAP32[$n8$s2] - $extra7_0 | 0);
    }
    __gcry_free($90);
    HEAP32[$dummy_nwritten_nwritten$s2] = HEAP32[$n8$s2] + 4 | 0;
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (($format | 0) == 4) {
    HEAP32[$n12$s2] = 0;
    var $134 = __gcry_mpi_get_buffer($a, $n12, 0);
    if (($134 | 0) == 0) {
      var $_0 = _gpg_error_from_syserror();
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    do {
      if ((HEAP32[$n12$s2] | 0) == 0) {
        label = 1296;
      } else {
        if (HEAP8[$134] << 24 >> 24 < 0) {
          label = 1296;
          break;
        } else {
          var $extra11_0 = 0;
          break;
        }
      }
    } while (0);
    if (label == 1296) {
      var $extra11_0 = 2;
    }
    var $extra11_0;
    var $151 = HEAP32[$a + 8 >> 2];
    var $155 = (($151 | 0) != 0 & 1 | (HEAP32[$n12$s2] << 1) + $extra11_0) + 1 | 0;
    if (($buffer | 0) == 0) {
      var $storemerge = $155;
    } else {
      if ($155 >>> 0 > $buflen >>> 0) {
        __gcry_free($134);
        var $_0 = _gcry_error1095(66);
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      if (($151 | 0) == 0) {
        var $s13_0 = $buffer;
      } else {
        HEAP8[$buffer] = 45;
        var $s13_0 = $buffer + 1 | 0;
      }
      var $s13_0;
      if (($extra11_0 | 0) == 0) {
        var $s13_2_ph = $s13_0;
      } else {
        HEAP8[$s13_0] = 48;
        HEAP8[$s13_0 + 1 | 0] = 48;
        var $s13_2_ph = $s13_0 + 2 | 0;
      }
      var $s13_2_ph;
      L1765 : do {
        if ((HEAP32[$n12$s2] | 0) == 0) {
          var $s13_2_lcssa = $s13_2_ph;
        } else {
          var $i_05 = 0;
          var $s13_26 = $s13_2_ph;
          while (1) {
            var $s13_26;
            var $i_05;
            var $172 = HEAP8[$134 + $i_05 | 0];
            var $173 = $172 & 255;
            var $174 = $173 >>> 4;
            HEAP8[$s13_26] = (($172 & 255) < 160 ? $174 | 48 : $174 + 55 | 0) & 255;
            var $181 = $173 & 15;
            var $187 = $s13_26 + 2 | 0;
            HEAP8[$s13_26 + 1 | 0] = ($181 >>> 0 < 10 ? $181 | 48 : $181 + 55 | 0) & 255;
            var $188 = $i_05 + 1 | 0;
            if ($188 >>> 0 < HEAP32[$n12$s2] >>> 0) {
              var $i_05 = $188;
              var $s13_26 = $187;
            } else {
              var $s13_2_lcssa = $187;
              break L1765;
            }
          }
        }
      } while (0);
      var $s13_2_lcssa;
      HEAP8[$s13_2_lcssa] = 0;
      var $storemerge = $s13_2_lcssa + 1 - $buffer | 0;
    }
    var $storemerge;
    HEAP32[$dummy_nwritten_nwritten$s2] = $storemerge;
    __gcry_free($134);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    var $_0 = _gcry_error1095(45);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
Module["__gcry_mpi_print"] = __gcry_mpi_print;
__gcry_mpi_print["X"] = 1;
function _gpg_error_from_syserror() {
  return _gpg_error1100(_gpg_err_code_from_syserror());
}
function __gcry_mpi_aprint($format, $buffer, $nwritten, $a) {
  var $n$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  HEAP32[$buffer >> 2] = 0;
  var $1 = __gcry_mpi_print($format, 0, 0, $n, $a);
  do {
    if (($1 | 0) == 0) {
      do {
        if (($a | 0) == 0) {
          label = 1334;
        } else {
          if ((HEAP32[$a + 12 >> 2] & 1 | 0) == 0) {
            label = 1334;
            break;
          }
          var $17 = __gcry_malloc_secure(HEAP32[$n$s2]);
          break;
        }
      } while (0);
      if (label == 1334) {
        var $17 = __gcry_malloc(HEAP32[$n$s2]);
      }
      var $17;
      HEAP32[$buffer >> 2] = $17;
      if (($17 | 0) == 0) {
        var $_0 = _gpg_error_from_syserror();
        break;
      }
      var $23 = __gcry_mpi_print($format, $17, HEAP32[$n$s2], $n, $a);
      if (($23 | 0) != 0) {
        __gcry_free(HEAP32[$buffer >> 2]);
        HEAP32[$buffer >> 2] = 0;
        var $_0 = $23;
        break;
      }
      if (($nwritten | 0) == 0) {
        var $_0 = 0;
        break;
      }
      HEAP32[$nwritten >> 2] = HEAP32[$n$s2];
      var $_0 = 0;
    } else {
      var $_0 = $1;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gpg_error1100($code) {
  return _gpg_err_make1101(1, $code);
}
function _gcry_err_make1102($code) {
  return _gpg_err_make1101(32, $code);
}
function __gcry_mpih_add_n($res_ptr, $s1_ptr, $s2_ptr, $size) {
  var $j_0 = -$size | 0;
  var $cy_0 = 0;
  while (1) {
    var $cy_0;
    var $j_0;
    var $_sum = $j_0 + $size | 0;
    var $6 = HEAP32[$s1_ptr + ($_sum << 2) >> 2];
    var $uadd$0 = _llvm_uadd_with_overflow_i32(HEAP32[$s2_ptr + ($_sum << 2) >> 2], $cy_0);
    var $9 = tempRet0 & 1;
    var $uadd2$0 = _llvm_uadd_with_overflow_i32($uadd$0, $6);
    var $13 = (tempRet0 & 1) + $9 | 0;
    HEAP32[$res_ptr + ($_sum << 2) >> 2] = $uadd2$0;
    var $15 = $j_0 + 1 | 0;
    if (($15 | 0) == 0) {
      break;
    } else {
      var $j_0 = $15;
      var $cy_0 = $13;
    }
  }
  return $13;
}
function __gcry_mpih_mod_1($dividend_ptr, $dividend_size, $divisor_limb) {
  if (($dividend_size | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if ($divisor_limb >>> 0 < 65536) {
    var $11 = $divisor_limb >>> 0 < 256 ? 0 : 8;
  } else {
    var $11 = $divisor_limb >>> 0 < 16777216 ? 16 : 24;
  }
  var $11;
  var $16 = HEAPU8[($divisor_limb >>> ($11 >>> 0)) + 492492 | 0] + $11 | 0;
  var $17 = 32 - $16 | 0;
  if (($16 | 0) == 32) {
    var $102 = $dividend_size - 1 | 0;
    var $104 = HEAP32[$dividend_ptr + ($102 << 2) >> 2];
    var $105 = $104 >>> 0 < $divisor_limb >>> 0;
    var $_ = $105 ? $104 : 0;
    var $_16 = $105 ? $dividend_size - 2 | 0 : $102;
    if (($_16 | 0) <= -1) {
      var $_0 = $_;
      var $_0;
      return $_0;
    }
    var $108 = $divisor_limb >>> 16;
    var $109 = $divisor_limb & 65535;
    var $r_121 = $_;
    var $i_122 = $_16;
    while (1) {
      var $i_122;
      var $r_121;
      var $112 = HEAP32[$dividend_ptr + ($i_122 << 2) >> 2];
      var $115 = Math.floor(($r_121 >>> 0) / ($108 >>> 0)) * $109 & -1;
      var $118 = ($r_121 >>> 0) % ($108 >>> 0) << 16 | $112 >>> 16;
      do {
        if ($118 >>> 0 < $115 >>> 0) {
          var $121 = _llvm_uadd_with_overflow_i32($118, $divisor_limb);
          if (!($121 >>> 0 < $115 >>> 0 & (tempRet0 ^ 1))) {
            var $__r112_0 = $121;
            break;
          }
          var $__r112_0 = $121 + $divisor_limb | 0;
        } else {
          var $__r112_0 = $118;
        }
      } while (0);
      var $__r112_0;
      var $127 = $__r112_0 - $115 | 0;
      var $130 = Math.floor(($127 >>> 0) / ($108 >>> 0)) * $109 & -1;
      var $133 = ($127 >>> 0) % ($108 >>> 0) << 16 | $112 & 65535;
      do {
        if ($133 >>> 0 < $130 >>> 0) {
          var $136 = _llvm_uadd_with_overflow_i32($133, $divisor_limb);
          if (!($136 >>> 0 < $130 >>> 0 & (tempRet0 ^ 1))) {
            var $__r013_0 = $136;
            break;
          }
          var $__r013_0 = $136 + $divisor_limb | 0;
        } else {
          var $__r013_0 = $133;
        }
      } while (0);
      var $__r013_0;
      var $142 = $__r013_0 - $130 | 0;
      if (($i_122 | 0) > 0) {
        var $r_121 = $142;
        var $i_122 = $i_122 - 1 | 0;
      } else {
        var $_0 = $142;
        break;
      }
    }
    var $_0;
    return $_0;
  }
  var $20 = $divisor_limb << $17;
  var $23 = HEAP32[$dividend_ptr + ($dividend_size - 1 << 2) >> 2];
  var $24 = $23 >>> ($16 >>> 0);
  var $25 = $dividend_size - 2 | 0;
  L1822 : do {
    if (($25 | 0) > -1) {
      var $27 = $20 >>> 16;
      var $28 = $20 & 65535;
      var $r_017 = $24;
      var $n1_018 = $23;
      var $i_019 = $25;
      while (1) {
        var $i_019;
        var $n1_018;
        var $r_017;
        var $31 = HEAP32[$dividend_ptr + ($i_019 << 2) >> 2];
        var $34 = Math.floor(($r_017 >>> 0) / ($27 >>> 0)) * $28 & -1;
        var $38 = $31 >>> ($16 >>> 0) | $n1_018 << $17;
        var $40 = $38 >>> 16 | ($r_017 >>> 0) % ($27 >>> 0) << 16;
        do {
          if ($40 >>> 0 < $34 >>> 0) {
            var $43 = _llvm_uadd_with_overflow_i32($40, $20);
            if (!($43 >>> 0 < $34 >>> 0 & (tempRet0 ^ 1))) {
              var $__r1_0 = $43;
              break;
            }
            var $__r1_0 = $43 + $20 | 0;
          } else {
            var $__r1_0 = $40;
          }
        } while (0);
        var $__r1_0;
        var $49 = $__r1_0 - $34 | 0;
        var $52 = Math.floor(($49 >>> 0) / ($27 >>> 0)) * $28 & -1;
        var $55 = ($49 >>> 0) % ($27 >>> 0) << 16 | $38 & 65535;
        do {
          if ($55 >>> 0 < $52 >>> 0) {
            var $58 = _llvm_uadd_with_overflow_i32($55, $20);
            if (!($58 >>> 0 < $52 >>> 0 & (tempRet0 ^ 1))) {
              var $__r0_0 = $58;
              break;
            }
            var $__r0_0 = $58 + $20 | 0;
          } else {
            var $__r0_0 = $55;
          }
        } while (0);
        var $__r0_0;
        var $64 = $__r0_0 - $52 | 0;
        if (($i_019 | 0) > 0) {
          var $r_017 = $64;
          var $n1_018 = $31;
          var $i_019 = $i_019 - 1 | 0;
        } else {
          var $r_0_lcssa = $64;
          var $n1_0_lcssa = $31;
          break L1822;
        }
      }
    } else {
      var $r_0_lcssa = $24;
      var $n1_0_lcssa = $23;
    }
  } while (0);
  var $n1_0_lcssa;
  var $r_0_lcssa;
  var $67 = $20 >>> 16;
  var $68 = $20 & 65535;
  var $71 = Math.floor(($r_0_lcssa >>> 0) / ($67 >>> 0)) * $68 & -1;
  var $73 = $n1_0_lcssa << $17;
  var $75 = ($r_0_lcssa >>> 0) % ($67 >>> 0) << 16 | $73 >>> 16;
  do {
    if ($75 >>> 0 < $71 >>> 0) {
      var $78 = _llvm_uadd_with_overflow_i32($75, $20);
      if (!($78 >>> 0 < $71 >>> 0 & (tempRet0 ^ 1))) {
        var $__r15_0 = $78;
        break;
      }
      var $__r15_0 = $78 + $20 | 0;
    } else {
      var $__r15_0 = $75;
    }
  } while (0);
  var $__r15_0;
  var $84 = $__r15_0 - $71 | 0;
  var $87 = Math.floor(($84 >>> 0) / ($67 >>> 0)) * $68 & -1;
  var $90 = ($84 >>> 0) % ($67 >>> 0) << 16 | $73 & 65535;
  do {
    if ($90 >>> 0 < $87 >>> 0) {
      var $93 = _llvm_uadd_with_overflow_i32($90, $20);
      if (!($93 >>> 0 < $87 >>> 0 & (tempRet0 ^ 1))) {
        var $__r06_0 = $93;
        break;
      }
      var $__r06_0 = $93 + $20 | 0;
    } else {
      var $__r06_0 = $90;
    }
  } while (0);
  var $__r06_0;
  var $_0 = ($__r06_0 - $87 | 0) >>> ($17 >>> 0);
  var $_0;
  return $_0;
}
__gcry_mpih_mod_1["X"] = 1;
function __gcry_mpih_lshift($wp, $up, $usize, $cnt) {
  var $1 = 32 - $cnt | 0;
  var $2 = $usize - 1 | 0;
  var $4 = HEAP32[$up + ($2 << 2) >> 2];
  var $5 = $4 >>> ($1 >>> 0);
  L1845 : do {
    if (($2 | 0) > 0) {
      var $high_limb_01 = $4;
      var $i_02 = $2;
      var $9 = $usize - 2 | 0;
      while (1) {
        var $9;
        var $i_02;
        var $high_limb_01;
        var $11 = HEAP32[$up + ($9 << 2) >> 2];
        HEAP32[$wp + ($i_02 << 2) >> 2] = $11 >>> ($1 >>> 0) | $high_limb_01 << $cnt;
        if (($9 | 0) > 0) {
          var $high_limb_01 = $11;
          var $i_02 = $9;
          var $9 = $9 - 1 | 0;
        } else {
          var $high_limb_0_lcssa = $11;
          var $i_0_lcssa = 0;
          break L1845;
        }
      }
    } else {
      var $high_limb_0_lcssa = $4;
      var $i_0_lcssa = $2;
    }
  } while (0);
  var $i_0_lcssa;
  var $high_limb_0_lcssa;
  HEAP32[$wp + ($i_0_lcssa << 2) >> 2] = $high_limb_0_lcssa << $cnt;
  return $5;
}
function __gcry_mpih_divrem($qp, $qextra_limbs, $np, $nsize, $dp, $dsize) {
  var $_262$s2;
  var $dp$s2 = $dp >> 2;
  var $qp$s2 = $qp >> 2;
  var label = 0;
  if (($dsize | 0) == 0) {
    var $_0 = 1 / ($dsize | 0) & -1;
    var $_0;
    return $_0;
  } else if (($dsize | 0) == 1) {
    var $4 = HEAP32[$dp$s2];
    var $7 = HEAP32[$np + ($nsize - 1 << 2) >> 2];
    var $8 = $7 >>> 0 < $4 >>> 0;
    var $n1_0 = $7 - ($8 ? 0 : $4) | 0;
    var $most_significant_q_limb_0 = $8 & 1 ^ 1;
    var $11 = $nsize - 2 | 0;
    L1855 : do {
      if (($11 | 0) > -1) {
        var $13 = $4 >>> 16;
        var $14 = $4 & 65535;
        var $n1_151 = $n1_0;
        var $i_052 = $11;
        while (1) {
          var $i_052;
          var $n1_151;
          var $20 = Math.floor(($n1_151 >>> 0) / ($13 >>> 0));
          var $21 = $20 * $14 & -1;
          var $23 = ($i_052 << 2) + $np | 0;
          var $26 = HEAP32[$23 >> 2] >>> 16 | ($n1_151 >>> 0) % ($13 >>> 0) << 16;
          do {
            if ($26 >>> 0 < $21 >>> 0) {
              var $30 = _llvm_uadd_with_overflow_i32($26, $4);
              if (!($30 >>> 0 < $21 >>> 0 & (tempRet0 ^ 1))) {
                var $__q1_0 = $20 - 1 | 0;
                var $__r1_0 = $30;
                break;
              }
              var $__q1_0 = $20 - 2 | 0;
              var $__r1_0 = $30 + $4 | 0;
            } else {
              var $__q1_0 = $20;
              var $__r1_0 = $26;
            }
          } while (0);
          var $__r1_0;
          var $__q1_0;
          var $37 = $__r1_0 - $21 | 0;
          var $39 = Math.floor(($37 >>> 0) / ($13 >>> 0));
          var $40 = $39 * $14 & -1;
          var $44 = HEAP32[$23 >> 2] & 65535 | ($37 >>> 0) % ($13 >>> 0) << 16;
          do {
            if ($44 >>> 0 < $40 >>> 0) {
              var $48 = _llvm_uadd_with_overflow_i32($44, $4);
              if (!($48 >>> 0 < $40 >>> 0 & (tempRet0 ^ 1))) {
                var $__q0_0 = $39 - 1 | 0;
                var $__r0_0 = $48;
                break;
              }
              var $__q0_0 = $39 - 2 | 0;
              var $__r0_0 = $48 + $4 | 0;
            } else {
              var $__q0_0 = $39;
              var $__r0_0 = $44;
            }
          } while (0);
          var $__r0_0;
          var $__q0_0;
          var $55 = $__r0_0 - $40 | 0;
          HEAP32[($i_052 + $qextra_limbs << 2 >> 2) + $qp$s2] = $__q0_0 | $__q1_0 << 16;
          if (($i_052 | 0) > 0) {
            var $n1_151 = $55;
            var $i_052 = $i_052 - 1 | 0;
          } else {
            var $n1_1_lcssa = $55;
            break L1855;
          }
        }
      } else {
        var $n1_1_lcssa = $n1_0;
      }
    } while (0);
    var $n1_1_lcssa;
    L1868 : do {
      if (($qextra_limbs | 0) > 0) {
        var $16 = $4 >>> 16;
        var $17 = $4 & 65535;
        var $n1_246 = $n1_1_lcssa;
        var $i_147_in = $qextra_limbs;
        while (1) {
          var $i_147_in;
          var $n1_246;
          var $i_147 = $i_147_in - 1 | 0;
          var $63 = Math.floor(($n1_246 >>> 0) / ($16 >>> 0));
          var $64 = $63 * $17 & -1;
          var $65 = ($n1_246 >>> 0) % ($16 >>> 0) << 16;
          do {
            if ($65 >>> 0 < $64 >>> 0) {
              var $69 = _llvm_uadd_with_overflow_i32($65, $4);
              if (!($69 >>> 0 < $64 >>> 0 & (tempRet0 ^ 1))) {
                var $__q13_0 = $63 - 1 | 0;
                var $__r15_0 = $69;
                break;
              }
              var $__q13_0 = $63 - 2 | 0;
              var $__r15_0 = $69 + $4 | 0;
            } else {
              var $__q13_0 = $63;
              var $__r15_0 = $65;
            }
          } while (0);
          var $__r15_0;
          var $__q13_0;
          var $76 = $__r15_0 - $64 | 0;
          var $78 = Math.floor(($76 >>> 0) / ($16 >>> 0));
          var $79 = $78 * $17 & -1;
          var $80 = ($76 >>> 0) % ($16 >>> 0) << 16;
          do {
            if ($80 >>> 0 < $79 >>> 0) {
              var $84 = _llvm_uadd_with_overflow_i32($80, $4);
              if (!($84 >>> 0 < $79 >>> 0 & (tempRet0 ^ 1))) {
                var $__q04_0 = $78 - 1 | 0;
                var $__r06_0 = $84;
                break;
              }
              var $__q04_0 = $78 - 2 | 0;
              var $__r06_0 = $84 + $4 | 0;
            } else {
              var $__q04_0 = $78;
              var $__r06_0 = $80;
            }
          } while (0);
          var $__r06_0;
          var $__q04_0;
          var $91 = $__r06_0 - $79 | 0;
          HEAP32[($i_147 << 2 >> 2) + $qp$s2] = $__q04_0 | $__q13_0 << 16;
          if (($i_147 | 0) > 0) {
            var $n1_246 = $91;
            var $i_147_in = $i_147;
          } else {
            var $n1_2_lcssa = $91;
            break L1868;
          }
        }
      } else {
        var $n1_2_lcssa = $n1_1_lcssa;
      }
    } while (0);
    var $n1_2_lcssa;
    HEAP32[$np >> 2] = $n1_2_lcssa;
    var $_0 = $most_significant_q_limb_0;
    var $_0;
    return $_0;
  } else if (($dsize | 0) == 2) {
    var $98 = ($nsize - 2 << 2) + $np | 0;
    var $100 = HEAP32[$dp$s2 + 1];
    var $101 = HEAP32[$dp$s2];
    var $102 = -$101 | 0;
    var $104 = HEAP32[$np + ($nsize - 1 << 2) >> 2];
    var $105 = HEAP32[$98 >> 2];
    do {
      if ($104 >>> 0 < $100 >>> 0) {
        var $most_significant_q_limb_1 = 0;
        var $n19_0 = $104;
        var $n0_0 = $105;
      } else {
        if ($104 >>> 0 <= $100 >>> 0 & $105 >>> 0 < $101 >>> 0) {
          var $most_significant_q_limb_1 = 0;
          var $n19_0 = $104;
          var $n0_0 = $105;
          break;
        }
        var $111 = $105 - $101 | 0;
        var $most_significant_q_limb_1 = 1;
        var $n19_0 = (($111 >>> 0 > $105 >>> 0) << 31 >> 31) + ($104 - $100) | 0;
        var $n0_0 = $111;
      }
    } while (0);
    var $n0_0;
    var $n19_0;
    var $most_significant_q_limb_1;
    var $117 = $qextra_limbs - 3 + $nsize | 0;
    L1887 : do {
      if (($117 | 0) > -1) {
        var $121 = $101 - (($101 | 0) != 0 & 1) | 0;
        var $122 = $100 >>> 16;
        var $123 = $100 & 65535;
        var $124 = $101 & 65535;
        var $125 = $101 >>> 16;
        var $n0_139 = $n0_0;
        var $n19_140 = $n19_0;
        var $i8_041 = $117;
        var $_0242 = $98;
        while (1) {
          var $_0242;
          var $i8_041;
          var $n19_140;
          var $n0_139;
          if (($i8_041 | 0) < ($qextra_limbs | 0)) {
            HEAP32[$_0242 >> 2] = 0;
            var $_1 = $_0242;
          } else {
            var $_1 = $_0242 - 4 | 0;
          }
          var $_1;
          do {
            if (($n19_140 | 0) == ($100 | 0)) {
              var $134 = _llvm_uadd_with_overflow_i32($n0_139, $100);
              if (!tempRet0) {
                var $n19_2 = $121;
                var $n0_2 = $102;
                var $q_0 = -1;
                var $r_0 = $134;
                label = 1425;
                break;
              }
              var $uadd7$0 = _llvm_uadd_with_overflow_i32(HEAP32[$_1 >> 2], $101);
              HEAP32[($i8_041 << 2 >> 2) + $qp$s2] = -1;
              var $n19_5 = $134 - $101 + (tempRet0 & 1) | 0;
              var $n0_5 = $uadd7$0;
              break;
            } else {
              var $146 = Math.floor(($n19_140 >>> 0) / ($122 >>> 0));
              var $147 = $146 * $123 & -1;
              var $150 = ($n19_140 >>> 0) % ($122 >>> 0) << 16 | $n0_139 >>> 16;
              do {
                if ($150 >>> 0 < $147 >>> 0) {
                  var $154 = _llvm_uadd_with_overflow_i32($150, $100);
                  if (!($154 >>> 0 < $147 >>> 0 & (tempRet0 ^ 1))) {
                    var $__q113_0 = $146 - 1 | 0;
                    var $__r115_0 = $154;
                    break;
                  }
                  var $__q113_0 = $146 - 2 | 0;
                  var $__r115_0 = $154 + $100 | 0;
                } else {
                  var $__q113_0 = $146;
                  var $__r115_0 = $150;
                }
              } while (0);
              var $__r115_0;
              var $__q113_0;
              var $161 = $__r115_0 - $147 | 0;
              var $163 = Math.floor(($161 >>> 0) / ($122 >>> 0));
              var $164 = $163 * $123 & -1;
              var $167 = ($161 >>> 0) % ($122 >>> 0) << 16 | $n0_139 & 65535;
              do {
                if ($167 >>> 0 < $164 >>> 0) {
                  var $171 = _llvm_uadd_with_overflow_i32($167, $100);
                  if (!($171 >>> 0 < $164 >>> 0 & (tempRet0 ^ 1))) {
                    var $__q014_0 = $163 - 1 | 0;
                    var $__r016_0 = $171;
                    break;
                  }
                  var $__q014_0 = $163 - 2 | 0;
                  var $__r016_0 = $171 + $100 | 0;
                } else {
                  var $__q014_0 = $163;
                  var $__r016_0 = $167;
                }
              } while (0);
              var $__r016_0;
              var $__q014_0;
              var $180 = $__q014_0 | $__q113_0 << 16;
              var $181 = $__q014_0 & 65535;
              var $182 = $180 >>> 16;
              var $183 = $181 * $124 & -1;
              var $186 = $182 * $125 & -1;
              var $189 = _llvm_uadd_with_overflow_i32(($182 * $124 & -1) + ($183 >>> 16) | 0, $181 * $125 & -1);
              var $n19_2 = (tempRet0 ? $186 + 65536 | 0 : $186) + ($189 >>> 16) | 0;
              var $n0_2 = $189 << 16 | $183 & 65535;
              var $q_0 = $180;
              var $r_0 = $__r016_0 - $164 | 0;
              label = 1425;
              break;
            }
          } while (0);
          if (label == 1425) {
            label = 0;
            var $r_0;
            var $q_0;
            var $n0_2;
            var $n19_2;
            var $198 = HEAP32[$_1 >> 2];
            var $n19_3 = $n19_2;
            var $n0_3 = $n0_2;
            var $q_1 = $q_0;
            var $r_1 = $r_0;
            while (1) {
              var $r_1;
              var $q_1;
              var $n0_3;
              var $n19_3;
              if ($n19_3 >>> 0 <= $r_1 >>> 0) {
                if (!(($n19_3 | 0) == ($r_1 | 0) & $n0_3 >>> 0 > $198 >>> 0)) {
                  var $n19_4 = $n19_3;
                  var $n0_4 = $n0_3;
                  var $q_2 = $q_1;
                  var $r_2 = $r_1;
                  break;
                }
              }
              var $205 = $q_1 - 1 | 0;
              var $206 = $n0_3 - $101 | 0;
              var $209 = $n19_3 - ($206 >>> 0 > $n0_3 >>> 0 & 1) | 0;
              var $210 = _llvm_uadd_with_overflow_i32($r_1, $100);
              if (tempRet0) {
                var $n19_4 = $209;
                var $n0_4 = $206;
                var $q_2 = $205;
                var $r_2 = $210;
                break;
              } else {
                var $n19_3 = $209;
                var $n0_3 = $206;
                var $q_1 = $205;
                var $r_1 = $210;
              }
            }
            var $r_2;
            var $q_2;
            var $n0_4;
            var $n19_4;
            HEAP32[($i8_041 << 2 >> 2) + $qp$s2] = $q_2;
            var $214 = $198 - $n0_4 | 0;
            var $n19_5 = (($214 >>> 0 > $198 >>> 0) << 31 >> 31) + ($r_2 - $n19_4) | 0;
            var $n0_5 = $214;
          }
          var $n0_5;
          var $n19_5;
          if (($i8_041 | 0) > 0) {
            var $n0_139 = $n0_5;
            var $n19_140 = $n19_5;
            var $i8_041 = $i8_041 - 1 | 0;
            var $_0242 = $_1;
          } else {
            var $n0_1_lcssa = $n0_5;
            var $n19_1_lcssa = $n19_5;
            var $_02_lcssa = $_1;
            break L1887;
          }
        }
      } else {
        var $n0_1_lcssa = $n0_0;
        var $n19_1_lcssa = $n19_0;
        var $_02_lcssa = $98;
      }
    } while (0);
    var $_02_lcssa;
    var $n19_1_lcssa;
    var $n0_1_lcssa;
    HEAP32[$_02_lcssa + 4 >> 2] = $n19_1_lcssa;
    HEAP32[$_02_lcssa >> 2] = $n0_1_lcssa;
    var $_0 = $most_significant_q_limb_1;
    var $_0;
    return $_0;
  } else {
    var $224 = ($nsize - $dsize << 2) + $np | 0;
    var $225 = $dsize - 1 | 0;
    var $227 = HEAP32[($225 << 2 >> 2) + $dp$s2];
    var $228 = $dsize - 2 | 0;
    var $230 = HEAP32[($228 << 2 >> 2) + $dp$s2];
    var $231 = ($nsize - 1 << 2) + $np | 0;
    var $232 = HEAP32[$231 >> 2];
    do {
      if ($232 >>> 0 < $227 >>> 0) {
        var $most_significant_q_limb_2 = 0;
        var $n022_0 = $232;
      } else {
        if ($232 >>> 0 <= $227 >>> 0) {
          if ((__gcry_mpih_cmp($224, $dp, $225) | 0) <= -1) {
            var $most_significant_q_limb_2 = 0;
            var $n022_0 = $232;
            break;
          }
        }
        __gcry_mpih_sub_n($224, $224, $dp, $dsize);
        var $most_significant_q_limb_2 = 1;
        var $n022_0 = HEAP32[$231 >> 2];
      }
    } while (0);
    var $n022_0;
    var $most_significant_q_limb_2;
    var $244 = $nsize + $qextra_limbs - $dsize | 0;
    if (($244 | 0) <= 0) {
      var $_0 = $most_significant_q_limb_2;
      var $_0;
      return $_0;
    }
    var $246 = ($228 | 0) > -1;
    var $247 = $227 >>> 16;
    var $248 = $227 & 65535;
    var $249 = $230 & 65535;
    var $250 = $230 >>> 16;
    var $_sum20 = $dsize - 1 | 0;
    var $n022_161 = $n022_0;
    var $_262 = $224, $_262$s2 = $_262 >> 2;
    var $i20_064_in = $244;
    while (1) {
      var $i20_064_in;
      var $_262;
      var $n022_161;
      var $i20_064 = $i20_064_in - 1 | 0;
      if (($i20_064 | 0) < ($qextra_limbs | 0)) {
        var $259 = HEAP32[($225 << 2 >> 2) + $_262$s2];
        L1933 : do {
          if ($246) {
            var $_i_056 = $228;
            while (1) {
              var $_i_056;
              HEAP32[($_i_056 + 1 << 2 >> 2) + $_262$s2] = HEAP32[($_i_056 << 2 >> 2) + $_262$s2];
              if (($_i_056 | 0) > 0) {
                var $_i_056 = $_i_056 - 1 | 0;
              } else {
                break L1933;
              }
            }
          }
        } while (0);
        HEAP32[$_262$s2] = 0;
        var $_3 = $_262;
        var $n225_0 = $259;
      } else {
        var $_3 = $_262 - 4 | 0;
        var $n225_0 = HEAP32[($_sum20 << 2 >> 2) + $_262$s2];
      }
      var $n225_0;
      var $_3;
      L1938 : do {
        if (($n022_161 | 0) == ($227 | 0)) {
          var $q23_1 = -1;
        } else {
          var $269 = Math.floor(($n022_161 >>> 0) / ($247 >>> 0));
          var $270 = $269 * $248 & -1;
          var $272 = ($225 << 2) + $_3 | 0;
          var $275 = HEAP32[$272 >> 2] >>> 16 | ($n022_161 >>> 0) % ($247 >>> 0) << 16;
          do {
            if ($275 >>> 0 < $270 >>> 0) {
              var $279 = _llvm_uadd_with_overflow_i32($275, $227);
              if (!($279 >>> 0 < $270 >>> 0 & (tempRet0 ^ 1))) {
                var $__r131_0 = $279;
                var $__q129_0 = $269 - 1 | 0;
                break;
              }
              var $__r131_0 = $279 + $227 | 0;
              var $__q129_0 = $269 - 2 | 0;
            } else {
              var $__r131_0 = $275;
              var $__q129_0 = $269;
            }
          } while (0);
          var $__q129_0;
          var $__r131_0;
          var $286 = $__r131_0 - $270 | 0;
          var $288 = Math.floor(($286 >>> 0) / ($247 >>> 0));
          var $289 = $288 * $248 & -1;
          var $293 = HEAP32[$272 >> 2] & 65535 | ($286 >>> 0) % ($247 >>> 0) << 16;
          do {
            if ($293 >>> 0 < $289 >>> 0) {
              var $297 = _llvm_uadd_with_overflow_i32($293, $227);
              if (!($297 >>> 0 < $289 >>> 0 & (tempRet0 ^ 1))) {
                var $__r032_0 = $297;
                var $__q030_0 = $288 - 1 | 0;
                break;
              }
              var $__r032_0 = $297 + $227 | 0;
              var $__q030_0 = $288 - 2 | 0;
            } else {
              var $__r032_0 = $293;
              var $__q030_0 = $288;
            }
          } while (0);
          var $__q030_0;
          var $__r032_0;
          var $306 = $__q030_0 | $__q129_0 << 16;
          var $307 = $__q030_0 & 65535;
          var $308 = $306 >>> 16;
          var $309 = $307 * $249 & -1;
          var $312 = $308 * $250 & -1;
          var $315 = _llvm_uadd_with_overflow_i32(($308 * $249 & -1) + ($309 >>> 16) | 0, $307 * $250 & -1);
          var $323 = ($228 << 2) + $_3 | 0;
          var $r26_0 = $__r032_0 - $289 | 0;
          var $n124_0 = (tempRet0 ? $312 + 65536 | 0 : $312) + ($315 >>> 16) | 0;
          var $q23_0 = $306;
          var $n022_2 = $315 << 16 | $309 & 65535;
          while (1) {
            var $n022_2;
            var $q23_0;
            var $n124_0;
            var $r26_0;
            if ($n124_0 >>> 0 <= $r26_0 >>> 0) {
              if (($n124_0 | 0) != ($r26_0 | 0)) {
                var $q23_1 = $q23_0;
                break L1938;
              }
              if ($n022_2 >>> 0 <= HEAP32[$323 >> 2] >>> 0) {
                var $q23_1 = $q23_0;
                break L1938;
              }
            }
            var $331 = $q23_0 - 1 | 0;
            var $uadd16$0 = _llvm_uadd_with_overflow_i32($r26_0, $227);
            if (tempRet0) {
              var $q23_1 = $331;
              break L1938;
            }
            var $r26_0 = $uadd16$0;
            var $n124_0 = $n124_0 - ($n022_2 >>> 0 < $230 >>> 0 & 1) | 0;
            var $q23_0 = $331;
            var $n022_2 = $n022_2 - $230 | 0;
          }
        }
      } while (0);
      var $q23_1;
      if (($n225_0 | 0) == (__gcry_mpih_submul_1($_3, $dp, $dsize, $q23_1) | 0)) {
        var $q23_2 = $q23_1;
      } else {
        __gcry_mpih_add_n($_3, $_3, $dp, $dsize);
        var $q23_2 = $q23_1 - 1 | 0;
      }
      var $q23_2;
      HEAP32[($i20_064 << 2 >> 2) + $qp$s2] = $q23_2;
      if (($i20_064 | 0) > 0) {
        var $n022_161 = HEAP32[$_3 + ($225 << 2) >> 2];
        var $_262 = $_3, $_262$s2 = $_262 >> 2;
        var $i20_064_in = $i20_064;
      } else {
        var $_0 = $most_significant_q_limb_2;
        break;
      }
    }
    var $_0;
    return $_0;
  }
}
__gcry_mpih_divrem["X"] = 1;
function __gcry_mpih_divmod_1($quot_ptr, $dividend_ptr, $dividend_size, $divisor_limb) {
  if (($dividend_size | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if ($divisor_limb >>> 0 < 65536) {
    var $11 = $divisor_limb >>> 0 < 256 ? 0 : 8;
  } else {
    var $11 = $divisor_limb >>> 0 < 16777216 ? 16 : 24;
  }
  var $11;
  var $16 = HEAPU8[($divisor_limb >>> ($11 >>> 0)) + 492492 | 0] + $11 | 0;
  var $17 = 32 - $16 | 0;
  if (($16 | 0) == 32) {
    var $116 = $dividend_size - 1 | 0;
    var $118 = HEAP32[$dividend_ptr + ($116 << 2) >> 2];
    if ($118 >>> 0 < $divisor_limb >>> 0) {
      HEAP32[$quot_ptr + ($116 << 2) >> 2] = 0;
      var $i_1_ph = $dividend_size - 2 | 0;
      var $r_1_ph = $118;
    } else {
      var $i_1_ph = $116;
      var $r_1_ph = 0;
    }
    var $r_1_ph;
    var $i_1_ph;
    if (($i_1_ph | 0) <= -1) {
      var $_0 = $r_1_ph;
      var $_0;
      return $_0;
    }
    var $124 = $divisor_limb >>> 16;
    var $125 = $divisor_limb & 65535;
    var $r_120 = $r_1_ph;
    var $i_121 = $i_1_ph;
    while (1) {
      var $i_121;
      var $r_120;
      var $128 = HEAP32[$dividend_ptr + ($i_121 << 2) >> 2];
      var $130 = Math.floor(($r_120 >>> 0) / ($124 >>> 0));
      var $131 = $130 * $125 & -1;
      var $134 = ($r_120 >>> 0) % ($124 >>> 0) << 16 | $128 >>> 16;
      do {
        if ($134 >>> 0 < $131 >>> 0) {
          var $138 = _llvm_uadd_with_overflow_i32($134, $divisor_limb);
          if (!($138 >>> 0 < $131 >>> 0 & (tempRet0 ^ 1))) {
            var $__r112_0 = $138;
            var $__q110_0 = $130 - 1 | 0;
            break;
          }
          var $__r112_0 = $138 + $divisor_limb | 0;
          var $__q110_0 = $130 - 2 | 0;
        } else {
          var $__r112_0 = $134;
          var $__q110_0 = $130;
        }
      } while (0);
      var $__q110_0;
      var $__r112_0;
      var $145 = $__r112_0 - $131 | 0;
      var $147 = Math.floor(($145 >>> 0) / ($124 >>> 0));
      var $148 = $147 * $125 & -1;
      var $151 = ($145 >>> 0) % ($124 >>> 0) << 16 | $128 & 65535;
      do {
        if ($151 >>> 0 < $148 >>> 0) {
          var $155 = _llvm_uadd_with_overflow_i32($151, $divisor_limb);
          if (!($155 >>> 0 < $148 >>> 0 & (tempRet0 ^ 1))) {
            var $__r013_0 = $155;
            var $__q011_0 = $147 - 1 | 0;
            break;
          }
          var $__r013_0 = $155 + $divisor_limb | 0;
          var $__q011_0 = $147 - 2 | 0;
        } else {
          var $__r013_0 = $151;
          var $__q011_0 = $147;
        }
      } while (0);
      var $__q011_0;
      var $__r013_0;
      var $162 = $__r013_0 - $148 | 0;
      HEAP32[$quot_ptr + ($i_121 << 2) >> 2] = $__q011_0 | $__q110_0 << 16;
      if (($i_121 | 0) > 0) {
        var $r_120 = $162;
        var $i_121 = $i_121 - 1 | 0;
      } else {
        var $_0 = $162;
        break;
      }
    }
    var $_0;
    return $_0;
  }
  var $20 = $divisor_limb << $17;
  var $23 = HEAP32[$dividend_ptr + ($dividend_size - 1 << 2) >> 2];
  var $24 = $23 >>> ($16 >>> 0);
  var $25 = $dividend_size - 2 | 0;
  L1988 : do {
    if (($25 | 0) > -1) {
      var $27 = $20 >>> 16;
      var $28 = $20 & 65535;
      var $r_016 = $24;
      var $n1_017 = $23;
      var $i_018 = $25;
      while (1) {
        var $i_018;
        var $n1_017;
        var $r_016;
        var $31 = HEAP32[$dividend_ptr + ($i_018 << 2) >> 2];
        var $33 = Math.floor(($r_016 >>> 0) / ($27 >>> 0));
        var $34 = $33 * $28 & -1;
        var $38 = $31 >>> ($16 >>> 0) | $n1_017 << $17;
        var $40 = $38 >>> 16 | ($r_016 >>> 0) % ($27 >>> 0) << 16;
        do {
          if ($40 >>> 0 < $34 >>> 0) {
            var $44 = _llvm_uadd_with_overflow_i32($40, $20);
            if (!($44 >>> 0 < $34 >>> 0 & (tempRet0 ^ 1))) {
              var $__q1_0 = $33 - 1 | 0;
              var $__r1_0 = $44;
              break;
            }
            var $__q1_0 = $33 - 2 | 0;
            var $__r1_0 = $44 + $20 | 0;
          } else {
            var $__q1_0 = $33;
            var $__r1_0 = $40;
          }
        } while (0);
        var $__r1_0;
        var $__q1_0;
        var $51 = $__r1_0 - $34 | 0;
        var $53 = Math.floor(($51 >>> 0) / ($27 >>> 0));
        var $54 = $53 * $28 & -1;
        var $57 = ($51 >>> 0) % ($27 >>> 0) << 16 | $38 & 65535;
        do {
          if ($57 >>> 0 < $54 >>> 0) {
            var $61 = _llvm_uadd_with_overflow_i32($57, $20);
            if (!($61 >>> 0 < $54 >>> 0 & (tempRet0 ^ 1))) {
              var $__q0_0 = $53 - 1 | 0;
              var $__r0_0 = $61;
              break;
            }
            var $__q0_0 = $53 - 2 | 0;
            var $__r0_0 = $61 + $20 | 0;
          } else {
            var $__q0_0 = $53;
            var $__r0_0 = $57;
          }
        } while (0);
        var $__r0_0;
        var $__q0_0;
        var $68 = $__r0_0 - $54 | 0;
        HEAP32[$quot_ptr + ($i_018 + 1 << 2) >> 2] = $__q0_0 | $__q1_0 << 16;
        if (($i_018 | 0) > 0) {
          var $r_016 = $68;
          var $n1_017 = $31;
          var $i_018 = $i_018 - 1 | 0;
        } else {
          var $r_0_lcssa = $68;
          var $n1_0_lcssa = $31;
          break L1988;
        }
      }
    } else {
      var $r_0_lcssa = $24;
      var $n1_0_lcssa = $23;
    }
  } while (0);
  var $n1_0_lcssa;
  var $r_0_lcssa;
  var $75 = $20 >>> 16;
  var $76 = $20 & 65535;
  var $78 = Math.floor(($r_0_lcssa >>> 0) / ($75 >>> 0));
  var $79 = $78 * $76 & -1;
  var $81 = $n1_0_lcssa << $17;
  var $83 = ($r_0_lcssa >>> 0) % ($75 >>> 0) << 16 | $81 >>> 16;
  do {
    if ($83 >>> 0 < $79 >>> 0) {
      var $87 = _llvm_uadd_with_overflow_i32($83, $20);
      if (!($87 >>> 0 < $79 >>> 0 & (tempRet0 ^ 1))) {
        var $__r15_0 = $87;
        var $__q13_0 = $78 - 1 | 0;
        break;
      }
      var $__r15_0 = $87 + $20 | 0;
      var $__q13_0 = $78 - 2 | 0;
    } else {
      var $__r15_0 = $83;
      var $__q13_0 = $78;
    }
  } while (0);
  var $__q13_0;
  var $__r15_0;
  var $94 = $__r15_0 - $79 | 0;
  var $96 = Math.floor(($94 >>> 0) / ($75 >>> 0));
  var $97 = $96 * $76 & -1;
  var $100 = ($94 >>> 0) % ($75 >>> 0) << 16 | $81 & 65535;
  do {
    if ($100 >>> 0 < $97 >>> 0) {
      var $104 = _llvm_uadd_with_overflow_i32($100, $20);
      if (!($104 >>> 0 < $97 >>> 0 & (tempRet0 ^ 1))) {
        var $__r06_0 = $104;
        var $__q04_0 = $96 - 1 | 0;
        break;
      }
      var $__r06_0 = $104 + $20 | 0;
      var $__q04_0 = $96 - 2 | 0;
    } else {
      var $__r06_0 = $100;
      var $__q04_0 = $96;
    }
  } while (0);
  var $__q04_0;
  var $__r06_0;
  HEAP32[$quot_ptr >> 2] = $__q04_0 | $__q13_0 << 16;
  var $_0 = ($__r06_0 - $97 | 0) >>> ($17 >>> 0);
  var $_0;
  return $_0;
}
__gcry_mpih_divmod_1["X"] = 1;
function __gcry_mpih_sqr_n_basecase($prodp, $up, $size) {
  var $prodp11 = $prodp;
  var $1 = HEAP32[$up >> 2];
  L1 : do {
    if ($1 >>> 0 < 2) {
      var $5 = ($size | 0) > 0;
      do {
        if (($1 | 0) == 1) {
          if ($5) {
            var $_i_09 = 0;
          } else {
            break;
          }
          while (1) {
            var $_i_09;
            HEAP32[$prodp + ($_i_09 << 2) >> 2] = HEAP32[$up + ($_i_09 << 2) >> 2];
            var $9 = $_i_09 + 1 | 0;
            if (($9 | 0) == ($size | 0)) {
              var $cy_limb_0 = 0;
              break L1;
            } else {
              var $_i_09 = $9;
            }
          }
        } else {
          if (!$5) {
            break;
          }
          _memset($prodp11, 0, $size << 2);
          var $cy_limb_0 = 0;
          break L1;
        }
      } while (0);
      HEAP32[$prodp + ($size << 2) >> 2] = 0;
      return;
    } else {
      var $cy_limb_0 = __gcry_mpih_mul_1($prodp, $up, $size, $1);
    }
  } while (0);
  var $cy_limb_0;
  HEAP32[$prodp + ($size << 2) >> 2] = $cy_limb_0;
  if (($size | 0) <= 1) {
    return;
  }
  var $_0_sum = $size + 1 | 0;
  var $i_03 = 1;
  var $prodp_pn = $prodp;
  while (1) {
    var $prodp_pn;
    var $i_03;
    var $_05 = $prodp_pn + 4 | 0;
    var $18 = HEAP32[$up + ($i_03 << 2) >> 2];
    do {
      if ($18 >>> 0 < 2) {
        if (($18 | 0) != 1) {
          var $cy_limb_1 = 0;
          break;
        }
        var $cy_limb_1 = __gcry_mpih_add_n($_05, $_05, $up, $size);
      } else {
        var $cy_limb_1 = __gcry_mpih_addmul_1($_05, $up, $size, $18);
      }
    } while (0);
    var $cy_limb_1;
    HEAP32[$prodp_pn + ($_0_sum << 2) >> 2] = $cy_limb_1;
    var $28 = $i_03 + 1 | 0;
    if (($28 | 0) == ($size | 0)) {
      break;
    } else {
      var $i_03 = $28;
      var $prodp_pn = $_05;
    }
  }
  return;
}
__gcry_mpih_sqr_n_basecase["X"] = 1;
function __gcry_mpih_sqr_n($prodp, $up, $size, $tspace) {
  var $prodp$s2 = $prodp >> 2;
  if (($size & 1 | 0) != 0) {
    var $4 = $size - 1 | 0;
    if (($4 | 0) < 16) {
      __gcry_mpih_sqr_n_basecase($prodp, $up, $4);
    } else {
      __gcry_mpih_sqr_n($prodp, $up, $4, $tspace);
    }
    var $9 = ($4 << 2) + $prodp | 0;
    var $10 = ($4 << 2) + $up | 0;
    HEAP32[($4 << 3 >> 2) + $prodp$s2] = __gcry_mpih_addmul_1($9, $up, $4, HEAP32[$10 >> 2]);
    HEAP32[($4 + $size << 2 >> 2) + $prodp$s2] = __gcry_mpih_addmul_1($9, $up, $size, HEAP32[$10 >> 2]);
    return;
  }
  var $20 = $size >> 1;
  var $21 = ($20 | 0) < 16;
  var $22 = ($size << 2) + $prodp | 0;
  var $23 = ($20 << 2) + $up | 0;
  if ($21) {
    __gcry_mpih_sqr_n_basecase($22, $23, $20);
  } else {
    __gcry_mpih_sqr_n($22, $23, $20, $tspace);
  }
  if ((__gcry_mpih_cmp($23, $up, $20) | 0) > -1) {
    __gcry_mpih_sub_n($prodp, $23, $up, $20);
  } else {
    __gcry_mpih_sub_n($prodp, $up, $23, $20);
  }
  if ($21) {
    __gcry_mpih_sqr_n_basecase($tspace, $prodp, $20);
  } else {
    __gcry_mpih_sqr_n($tspace, $prodp, $20, ($size << 2) + $tspace | 0);
  }
  L45 : do {
    if (($20 | 0) > 0) {
      var $_i_06 = 0;
      while (1) {
        var $_i_06;
        HEAP32[($_i_06 + $20 << 2 >> 2) + $prodp$s2] = HEAP32[($_i_06 + $size << 2 >> 2) + $prodp$s2];
        var $41 = $_i_06 + 1 | 0;
        if (($41 | 0) == ($20 | 0)) {
          break L45;
        } else {
          var $_i_06 = $41;
        }
      }
    }
  } while (0);
  var $42 = ($20 + $size << 2) + $prodp | 0;
  var $44 = ($20 << 2) + $prodp | 0;
  var $46 = __gcry_mpih_add_n($22, $22, $42, $20) - __gcry_mpih_sub_n($44, $44, $tspace, $size) | 0;
  if ($21) {
    __gcry_mpih_sqr_n_basecase($tspace, $up, $20);
  } else {
    __gcry_mpih_sqr_n($tspace, $up, $20, ($size << 2) + $tspace | 0);
  }
  var $52 = __gcry_mpih_add_n($44, $44, $tspace, $size) + $46 | 0;
  if (($52 | 0) != 0) {
    __gcry_mpih_add_1($42, $42, $20, $52);
  }
  L56 : do {
    if (($20 | 0) > 0) {
      var $_i1_04 = 0;
      while (1) {
        var $_i1_04;
        HEAP32[($_i1_04 << 2 >> 2) + $prodp$s2] = HEAP32[$tspace + ($_i1_04 << 2) >> 2];
        var $60 = $_i1_04 + 1 | 0;
        if (($60 | 0) == ($20 | 0)) {
          break L56;
        } else {
          var $_i1_04 = $60;
        }
      }
    }
  } while (0);
  if ((__gcry_mpih_add_n($44, $44, ($20 << 2) + $tspace | 0, $20) | 0) == 0) {
    return;
  }
  __gcry_mpih_add_1($22, $22, $size, 1);
  return;
}
__gcry_mpih_sqr_n["X"] = 1;
function __gcry_mpih_mul_n($prodp, $up, $vp, $size) {
  var $2 = ($size | 0) < 16;
  if (($up | 0) == ($vp | 0)) {
    if ($2) {
      __gcry_mpih_sqr_n_basecase($prodp, $up, $size);
      return;
    } else {
      var $8 = $size << 1;
      var $9 = __gcry_mpi_alloc_limb_space($8, __gcry_is_secure($up));
      __gcry_mpih_sqr_n($prodp, $up, $size, $9);
      __gcry_mpi_free_limb_space($9, $8);
      return;
    }
  }
  if ($2) {
    _mul_n_basecase($prodp, $up, $vp, $size);
    return;
  }
  if ((__gcry_is_secure($up) | 0) == 0) {
    var $21 = (__gcry_is_secure($vp) | 0) != 0;
  } else {
    var $21 = 1;
  }
  var $21;
  var $23 = $size << 1;
  var $24 = __gcry_mpi_alloc_limb_space($23, $21 & 1);
  _mul_n($prodp, $up, $vp, $size, $24);
  __gcry_mpi_free_limb_space($24, $23);
  return;
}
function _mul_n_basecase($prodp, $up, $vp, $size) {
  var $prodp11 = $prodp;
  var $1 = HEAP32[$vp >> 2];
  L82 : do {
    if ($1 >>> 0 < 2) {
      var $5 = ($size | 0) > 0;
      do {
        if (($1 | 0) == 1) {
          if ($5) {
            var $_i_09 = 0;
          } else {
            break;
          }
          while (1) {
            var $_i_09;
            HEAP32[$prodp + ($_i_09 << 2) >> 2] = HEAP32[$up + ($_i_09 << 2) >> 2];
            var $9 = $_i_09 + 1 | 0;
            if (($9 | 0) == ($size | 0)) {
              var $cy_0 = 0;
              break L82;
            } else {
              var $_i_09 = $9;
            }
          }
        } else {
          if (!$5) {
            break;
          }
          _memset($prodp11, 0, $size << 2);
          var $cy_0 = 0;
          break L82;
        }
      } while (0);
      HEAP32[$prodp + ($size << 2) >> 2] = 0;
      return;
    } else {
      var $cy_0 = __gcry_mpih_mul_1($prodp, $up, $size, $1);
    }
  } while (0);
  var $cy_0;
  HEAP32[$prodp + ($size << 2) >> 2] = $cy_0;
  if (($size | 0) <= 1) {
    return;
  }
  var $_0_sum = $size + 1 | 0;
  var $i_03 = 1;
  var $prodp_pn = $prodp;
  while (1) {
    var $prodp_pn;
    var $i_03;
    var $_05 = $prodp_pn + 4 | 0;
    var $18 = HEAP32[$vp + ($i_03 << 2) >> 2];
    do {
      if ($18 >>> 0 < 2) {
        if (($18 | 0) != 1) {
          var $cy_2 = 0;
          break;
        }
        var $cy_2 = __gcry_mpih_add_n($_05, $_05, $up, $size);
      } else {
        var $cy_2 = __gcry_mpih_addmul_1($_05, $up, $size, $18);
      }
    } while (0);
    var $cy_2;
    HEAP32[$prodp_pn + ($_0_sum << 2) >> 2] = $cy_2;
    var $28 = $i_03 + 1 | 0;
    if (($28 | 0) == ($size | 0)) {
      break;
    } else {
      var $i_03 = $28;
      var $prodp_pn = $_05;
    }
  }
  return;
}
_mul_n_basecase["X"] = 1;
function _mul_n($prodp, $up, $vp, $size, $tspace) {
  var $prodp$s2 = $prodp >> 2;
  if (($size & 1 | 0) != 0) {
    var $4 = $size - 1 | 0;
    if (($4 | 0) < 16) {
      _mul_n_basecase($prodp, $up, $vp, $4);
    } else {
      _mul_n($prodp, $up, $vp, $4, $tspace);
    }
    var $9 = ($4 << 2) + $prodp | 0;
    HEAP32[($4 << 3 >> 2) + $prodp$s2] = __gcry_mpih_addmul_1($9, $up, $4, HEAP32[$vp + ($4 << 2) >> 2]);
    HEAP32[($4 + $size << 2 >> 2) + $prodp$s2] = __gcry_mpih_addmul_1($9, $vp, $size, HEAP32[$up + ($4 << 2) >> 2]);
    return;
  }
  var $21 = $size >> 1;
  var $22 = ($21 | 0) < 16;
  var $23 = ($size << 2) + $prodp | 0;
  var $24 = ($21 << 2) + $up | 0;
  var $25 = ($21 << 2) + $vp | 0;
  if ($22) {
    _mul_n_basecase($23, $24, $25, $21);
  } else {
    _mul_n($23, $24, $25, $21, $tspace);
  }
  if ((__gcry_mpih_cmp($24, $up, $21) | 0) > -1) {
    __gcry_mpih_sub_n($prodp, $24, $up, $21);
    var $negflg_0 = 0;
  } else {
    __gcry_mpih_sub_n($prodp, $up, $24, $21);
    var $negflg_0 = 1;
  }
  var $negflg_0;
  var $38 = ($21 << 2) + $prodp | 0;
  if ((__gcry_mpih_cmp($25, $vp, $21) | 0) > -1) {
    __gcry_mpih_sub_n($38, $25, $vp, $21);
    var $negflg_1 = $negflg_0 ^ 1;
  } else {
    __gcry_mpih_sub_n($38, $vp, $25, $21);
    var $negflg_1 = $negflg_0;
  }
  var $negflg_1;
  if ($22) {
    _mul_n_basecase($tspace, $prodp, $38, $21);
  } else {
    _mul_n($tspace, $prodp, $38, $21, ($size << 2) + $tspace | 0);
  }
  L130 : do {
    if (($21 | 0) > 0) {
      var $_i_06 = 0;
      while (1) {
        var $_i_06;
        HEAP32[($_i_06 + $21 << 2 >> 2) + $prodp$s2] = HEAP32[($_i_06 + $size << 2 >> 2) + $prodp$s2];
        var $52 = $_i_06 + 1 | 0;
        if (($52 | 0) == ($21 | 0)) {
          break L130;
        } else {
          var $_i_06 = $52;
        }
      }
    }
  } while (0);
  var $53 = ($21 + $size << 2) + $prodp | 0;
  var $54 = __gcry_mpih_add_n($23, $23, $53, $21);
  if (($negflg_1 | 0) == 0) {
    var $cy_0 = __gcry_mpih_add_n($38, $38, $tspace, $size) + $54 | 0;
  } else {
    var $cy_0 = $54 - __gcry_mpih_sub_n($38, $38, $tspace, $size) | 0;
  }
  var $cy_0;
  if ($22) {
    _mul_n_basecase($tspace, $up, $vp, $21);
  } else {
    _mul_n($tspace, $up, $vp, $21, ($size << 2) + $tspace | 0);
  }
  var $68 = __gcry_mpih_add_n($38, $38, $tspace, $size) + $cy_0 | 0;
  if (($68 | 0) != 0) {
    __gcry_mpih_add_1($53, $53, $21, $68);
  }
  L145 : do {
    if (($21 | 0) > 0) {
      var $_i1_04 = 0;
      while (1) {
        var $_i1_04;
        HEAP32[($_i1_04 << 2 >> 2) + $prodp$s2] = HEAP32[$tspace + ($_i1_04 << 2) >> 2];
        var $76 = $_i1_04 + 1 | 0;
        if (($76 | 0) == ($21 | 0)) {
          break L145;
        } else {
          var $_i1_04 = $76;
        }
      }
    }
  } while (0);
  if ((__gcry_mpih_add_n($38, $38, ($21 << 2) + $tspace | 0, $21) | 0) == 0) {
    return;
  }
  __gcry_mpih_add_1($23, $23, $size, 1);
  return;
}
_mul_n["X"] = 1;
function __gcry_mpih_mul_karatsuba_case($prodp, $up, $usize, $vp, $vsize, $ctx) {
  var $85$s2;
  var $38$s2;
  var $1$s2;
  var $ctx$s2 = $ctx >> 2;
  var label = 0;
  var $1$s2 = ($ctx + 4 | 0) >> 2;
  do {
    if ((HEAP32[$1$s2] | 0) == 0) {
      label = 121;
    } else {
      if ((HEAP32[$ctx$s2 + 3] | 0) >= ($vsize | 0)) {
        break;
      }
      var $_pr = HEAP32[$1$s2];
      if (($_pr | 0) == 0) {
        label = 121;
        break;
      }
      __gcry_mpi_free_limb_space($_pr, HEAP32[$ctx$s2 + 2]);
      label = 121;
      break;
    }
  } while (0);
  if (label == 121) {
    var $13 = $vsize << 1;
    HEAP32[$ctx$s2 + 2] = $13;
    if ((__gcry_is_secure($up) | 0) == 0) {
      var $23 = (__gcry_is_secure($vp) | 0) != 0;
    } else {
      var $23 = 1;
    }
    var $23;
    HEAP32[$1$s2] = __gcry_mpi_alloc_limb_space($13, $23 & 1);
    HEAP32[$ctx$s2 + 3] = $vsize;
  }
  var $28 = ($vsize | 0) < 16;
  if ($28) {
    _mul_n_basecase($prodp, $up, $vp, $vsize);
  } else {
    _mul_n($prodp, $up, $vp, $vsize, HEAP32[$1$s2]);
  }
  var $33 = ($vsize << 2) + $prodp | 0;
  var $34 = ($vsize << 2) + $up | 0;
  var $35 = $usize - $vsize | 0;
  L168 : do {
    if (($35 | 0) < ($vsize | 0)) {
      var $_1 = $33;
      var $_12 = $34;
      var $_14 = $35;
    } else {
      var $38$s2 = ($ctx + 16 | 0) >> 2;
      do {
        if ((HEAP32[$38$s2] | 0) == 0) {
          label = 132;
        } else {
          if ((HEAP32[$ctx$s2 + 6] | 0) >= ($vsize | 0)) {
            var $_0 = $33;
            var $_01 = $34;
            var $_03 = $35;
            break;
          }
          var $_pr5 = HEAP32[$38$s2];
          if (($_pr5 | 0) == 0) {
            label = 132;
            break;
          }
          __gcry_mpi_free_limb_space($_pr5, HEAP32[$ctx$s2 + 5]);
          label = 132;
          break;
        }
      } while (0);
      do {
        if (label == 132) {
          var $50 = $vsize << 1;
          HEAP32[$ctx$s2 + 5] = $50;
          if ((__gcry_is_secure($34) | 0) == 0) {
            var $60 = (__gcry_is_secure($vp) | 0) != 0;
          } else {
            var $60 = 1;
          }
          var $60;
          HEAP32[$38$s2] = __gcry_mpi_alloc_limb_space($50, $60 & 1);
          HEAP32[$ctx$s2 + 6] = $vsize;
          var $_0 = $33;
          var $_01 = $34;
          var $_03 = $35;
          break;
        }
      } while (0);
      while (1) {
        var $_03;
        var $_01;
        var $_0;
        var $64 = HEAP32[$38$s2];
        if ($28) {
          _mul_n_basecase($64, $_01, $vp, $vsize);
        } else {
          _mul_n($64, $_01, $vp, $vsize, HEAP32[$1$s2]);
        }
        var $70 = __gcry_mpih_add_n($_0, $_0, HEAP32[$38$s2], $vsize);
        var $71 = ($vsize << 2) + $_0 | 0;
        __gcry_mpih_add_1($71, ($vsize << 2) + HEAP32[$38$s2] | 0, $vsize, $70);
        var $75 = ($vsize << 2) + $_01 | 0;
        var $76 = $_03 - $vsize | 0;
        if (($76 | 0) < ($vsize | 0)) {
          var $_1 = $71;
          var $_12 = $75;
          var $_14 = $76;
          break L168;
        } else {
          var $_0 = $71;
          var $_01 = $75;
          var $_03 = $76;
        }
      }
    }
  } while (0);
  var $_14;
  var $_12;
  var $_1;
  if (($_14 | 0) == 0) {
    return;
  }
  if (($_14 | 0) < 16) {
    __gcry_mpih_mul(HEAP32[$1$s2], $vp, $vsize, $_12, $_14);
  } else {
    var $85$s2 = ($ctx | 0) >> 2;
    if ((HEAP32[$85$s2] | 0) == 0) {
      HEAP32[$85$s2] = __gcry_xcalloc(1, 28);
    }
    __gcry_mpih_mul_karatsuba_case(HEAP32[$1$s2], $vp, $vsize, $_12, $_14, HEAP32[$85$s2]);
  }
  var $96 = __gcry_mpih_add_n($_1, $_1, HEAP32[$1$s2], $vsize);
  __gcry_mpih_add_1(($vsize << 2) + $_1 | 0, ($vsize << 2) + HEAP32[$1$s2] | 0, $_14, $96);
  return;
}
__gcry_mpih_mul_karatsuba_case["X"] = 1;
function __gcry_mpih_mul($prodp, $up, $usize, $vp, $vsize) {
  var $34$s2;
  var __stackBase__ = STACKTOP;
  var $prodp14 = $prodp;
  var $ctx = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  var $1 = ($usize << 2) + $prodp | 0;
  if (($vsize | 0) >= 16) {
    var $34$s2 = $ctx >> 2;
    HEAP32[$34$s2] = 0;
    HEAP32[$34$s2 + 1] = 0;
    HEAP32[$34$s2 + 2] = 0;
    HEAP32[$34$s2 + 3] = 0;
    HEAP32[$34$s2 + 4] = 0;
    HEAP32[$34$s2 + 5] = 0;
    HEAP32[$34$s2 + 6] = 0;
    __gcry_mpih_mul_karatsuba_case($prodp, $up, $usize, $vp, $vsize, $ctx);
    __gcry_mpih_release_karatsuba_ctx($ctx);
    var $_0 = HEAP32[$prodp + ($usize - 1 + $vsize << 2) >> 2];
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($vsize | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = HEAP32[$vp >> 2];
  L205 : do {
    if ($6 >>> 0 < 2) {
      var $10 = ($usize | 0) > 0;
      if (($6 | 0) == 1) {
        if ($10) {
          var $_i_012 = 0;
        } else {
          var $cy_0 = 0;
          break;
        }
        while (1) {
          var $_i_012;
          HEAP32[$prodp + ($_i_012 << 2) >> 2] = HEAP32[$up + ($_i_012 << 2) >> 2];
          var $14 = $_i_012 + 1 | 0;
          if (($14 | 0) == ($usize | 0)) {
            var $cy_0 = 0;
            break L205;
          } else {
            var $_i_012 = $14;
          }
        }
      } else {
        if (!$10) {
          var $cy_0 = 0;
          break;
        }
        _memset($prodp14, 0, $usize << 2);
        var $cy_0 = 0;
        break;
      }
    } else {
      var $cy_0 = __gcry_mpih_mul_1($prodp, $up, $usize, $6);
    }
  } while (0);
  var $cy_0;
  HEAP32[$1 >> 2] = $cy_0;
  if (($vsize | 0) <= 1) {
    var $_0 = $cy_0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $_01_sum = $usize + 1 | 0;
  var $i_06 = 1;
  var $prodp_pn = $prodp;
  while (1) {
    var $prodp_pn;
    var $i_06;
    var $_018 = $prodp_pn + 4 | 0;
    var $21 = HEAP32[$vp + ($i_06 << 2) >> 2];
    do {
      if ($21 >>> 0 < 2) {
        if (($21 | 0) != 1) {
          var $cy_2 = 0;
          break;
        }
        var $cy_2 = __gcry_mpih_add_n($_018, $_018, $up, $usize);
      } else {
        var $cy_2 = __gcry_mpih_addmul_1($_018, $up, $usize, $21);
      }
    } while (0);
    var $cy_2;
    HEAP32[$prodp_pn + ($_01_sum << 2) >> 2] = $cy_2;
    var $31 = $i_06 + 1 | 0;
    if (($31 | 0) == ($vsize | 0)) {
      var $_0 = $cy_2;
      break;
    } else {
      var $i_06 = $31;
      var $prodp_pn = $_018;
    }
  }
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_mpih_mul["X"] = 1;
function __gcry_mpih_release_karatsuba_ctx($ctx) {
  var $_01$s2;
  var $ctx$s2 = $ctx >> 2;
  var $2 = HEAP32[$ctx$s2 + 4];
  if (($2 | 0) != 0) {
    __gcry_mpi_free_limb_space($2, HEAP32[$ctx$s2 + 5]);
  }
  var $9 = HEAP32[$ctx$s2 + 1];
  if (($9 | 0) != 0) {
    __gcry_mpi_free_limb_space($9, HEAP32[$ctx$s2 + 2]);
  }
  var $16 = HEAP32[$ctx$s2];
  if (($16 | 0) == 0) {
    return;
  } else {
    var $_01 = $16, $_01$s2 = $_01 >> 2;
  }
  while (1) {
    var $_01;
    var $19 = HEAP32[$_01$s2];
    var $21 = HEAP32[$_01$s2 + 4];
    if (($21 | 0) != 0) {
      __gcry_mpi_free_limb_space($21, HEAP32[$_01$s2 + 5]);
    }
    var $28 = HEAP32[$_01$s2 + 1];
    if (($28 | 0) != 0) {
      __gcry_mpi_free_limb_space($28, HEAP32[$_01$s2 + 2]);
    }
    __gcry_free($_01);
    if (($19 | 0) == 0) {
      break;
    } else {
      var $_01 = $19, $_01$s2 = $_01 >> 2;
    }
  }
  return;
}
function __gcry_mpih_mul_1($res_ptr, $s1_ptr, $s1_size, $s2_limb) {
  var $2 = $s2_limb & 65535;
  var $3 = $s2_limb >>> 16;
  var $cy_limb_0 = 0;
  var $j_0 = -$s1_size | 0;
  while (1) {
    var $j_0;
    var $cy_limb_0;
    var $_sum = $j_0 + $s1_size | 0;
    var $6 = HEAP32[$s1_ptr + ($_sum << 2) >> 2];
    var $7 = $6 & 65535;
    var $8 = $6 >>> 16;
    var $9 = $7 * $2 & -1;
    var $12 = $8 * $3 & -1;
    var $15 = _llvm_uadd_with_overflow_i32(($9 >>> 16) + ($7 * $3 & -1) | 0, $8 * $2 & -1);
    var $__x3_0 = tempRet0 ? $12 + 65536 | 0 : $12;
    var $uadd1$0 = _llvm_uadd_with_overflow_i32($15 << 16 | $9 & 65535, $cy_limb_0);
    var $26 = (tempRet0 & 1) + ($15 >>> 16) + $__x3_0 | 0;
    HEAP32[$res_ptr + ($_sum << 2) >> 2] = $uadd1$0;
    var $28 = $j_0 + 1 | 0;
    if (($28 | 0) == 0) {
      break;
    } else {
      var $cy_limb_0 = $26;
      var $j_0 = $28;
    }
  }
  return $26;
}
function __gcry_mpih_addmul_1($res_ptr, $s1_ptr, $s1_size, $s2_limb) {
  var $2 = $s2_limb & 65535;
  var $3 = $s2_limb >>> 16;
  var $cy_limb_0 = 0;
  var $j_0 = -$s1_size | 0;
  while (1) {
    var $j_0;
    var $cy_limb_0;
    var $_sum = $j_0 + $s1_size | 0;
    var $6 = HEAP32[$s1_ptr + ($_sum << 2) >> 2];
    var $7 = $6 & 65535;
    var $8 = $6 >>> 16;
    var $9 = $7 * $2 & -1;
    var $12 = $8 * $3 & -1;
    var $15 = _llvm_uadd_with_overflow_i32(($9 >>> 16) + ($7 * $3 & -1) | 0, $8 * $2 & -1);
    var $__x3_0 = tempRet0 ? $12 + 65536 | 0 : $12;
    var $uadd1$0 = _llvm_uadd_with_overflow_i32($15 << 16 | $9 & 65535, $cy_limb_0);
    var $24 = tempRet0 & 1;
    var $25 = ($_sum << 2) + $res_ptr | 0;
    var $uadd3$0 = _llvm_uadd_with_overflow_i32(HEAP32[$25 >> 2], $uadd1$0);
    var $32 = $__x3_0 + ($15 >>> 16) + $24 + (tempRet0 & 1) | 0;
    HEAP32[$25 >> 2] = $uadd3$0;
    var $33 = $j_0 + 1 | 0;
    if (($33 | 0) == 0) {
      break;
    } else {
      var $cy_limb_0 = $32;
      var $j_0 = $33;
    }
  }
  return $32;
}
function __gcry_mpi_get_hw_config() {
  return 446813;
}
function __gcry_mpi_m_check($a) {
  return;
}
function __gcry_register_random_progress($cb, $cb_data) {
  HEAP32[110040] = $cb;
  HEAP32[110036] = $cb_data;
  return;
}
function _gpg_err_make1189($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function __gcry_mpih_rshift($wp, $up, $usize, $cnt) {
  var $1 = 32 - $cnt | 0;
  var $2 = HEAP32[$up >> 2];
  var $3 = $2 << $1;
  if (($usize | 0) > 1) {
    var $low_limb_02 = $2;
    var $i_03 = 1;
    while (1) {
      var $i_03;
      var $low_limb_02;
      var $6 = HEAP32[$up + ($i_03 << 2) >> 2];
      HEAP32[$wp + ($i_03 - 1 << 2) >> 2] = $6 << $1 | $low_limb_02 >>> ($cnt >>> 0);
      var $11 = $i_03 + 1 | 0;
      if (($11 | 0) == ($usize | 0)) {
        break;
      } else {
        var $low_limb_02 = $6;
        var $i_03 = $11;
      }
    }
    var $low_limb_0_lcssa = $6;
    var $i_0_lcssa = $usize - 1 | 0;
  } else {
    var $low_limb_0_lcssa = $2;
    var $i_0_lcssa = 0;
  }
  var $i_0_lcssa;
  var $low_limb_0_lcssa;
  HEAP32[$wp + ($i_0_lcssa << 2) >> 2] = $low_limb_0_lcssa >>> ($cnt >>> 0);
  return $3;
}
function __gcry_mpi_clear($a) {
  HEAP32[$a + 4 >> 2] = 0;
  HEAP32[$a + 12 >> 2] = 0;
  return;
}
function __gcry_mpi_get_ui($w, $u) {
  var $2 = HEAP32[$w + 4 >> 2];
  if (($2 | 0) > 1) {
    var $err_01 = 67;
    var $err_01;
    return $err_01;
  }
  if (($2 | 0) == 1) {
    var $x_0_ph = HEAP32[HEAP32[$w + 16 >> 2] >> 2];
  } else {
    var $x_0_ph = 0;
  }
  var $x_0_ph;
  HEAP32[$u >> 2] = $x_0_ph;
  var $err_01 = 0;
  var $err_01;
  return $err_01;
}
function __gcry_mpih_submul_1($res_ptr, $s1_ptr, $s1_size, $s2_limb) {
  var $2 = $s2_limb & 65535;
  var $3 = $s2_limb >>> 16;
  var $cy_limb_0 = 0;
  var $j_0 = -$s1_size | 0;
  while (1) {
    var $j_0;
    var $cy_limb_0;
    var $_sum = $j_0 + $s1_size | 0;
    var $6 = HEAP32[$s1_ptr + ($_sum << 2) >> 2];
    var $7 = $6 & 65535;
    var $8 = $6 >>> 16;
    var $9 = $7 * $2 & -1;
    var $12 = $8 * $3 & -1;
    var $15 = _llvm_uadd_with_overflow_i32(($9 >>> 16) + ($7 * $3 & -1) | 0, $8 * $2 & -1);
    var $__x3_0 = tempRet0 ? $12 + 65536 | 0 : $12;
    var $uadd1$0 = _llvm_uadd_with_overflow_i32($15 << 16 | $9 & 65535, $cy_limb_0);
    var $25 = ($_sum << 2) + $res_ptr | 0;
    var $26 = HEAP32[$25 >> 2];
    var $27 = $26 - $uadd1$0 | 0;
    var $32 = $__x3_0 + ($15 >>> 16) + (tempRet0 & 1) + ($27 >>> 0 > $26 >>> 0 & 1) | 0;
    HEAP32[$25 >> 2] = $27;
    var $33 = $j_0 + 1 | 0;
    if (($33 | 0) == 0) {
      break;
    } else {
      var $cy_limb_0 = $32;
      var $j_0 = $33;
    }
  }
  return $32;
}
function __gcry_mpih_sub_n($res_ptr, $s1_ptr, $s2_ptr, $size) {
  var $j_0 = -$size | 0;
  var $cy_0 = 0;
  while (1) {
    var $cy_0;
    var $j_0;
    var $_sum = $j_0 + $size | 0;
    var $6 = HEAP32[$s1_ptr + ($_sum << 2) >> 2];
    var $10 = $6 - _llvm_uadd_with_overflow_i32(HEAP32[$s2_ptr + ($_sum << 2) >> 2], $cy_0) | 0;
    var $13 = ($10 >>> 0 > $6 >>> 0 & 1) + (tempRet0 & 1) | 0;
    HEAP32[$res_ptr + ($_sum << 2) >> 2] = $10;
    var $15 = $j_0 + 1 | 0;
    if (($15 | 0) == 0) {
      break;
    } else {
      var $j_0 = $15;
      var $cy_0 = $13;
    }
  }
  return $13;
}
function __gcry_mpi_alloc($nlimbs) {
  var $1$s2;
  var $1 = __gcry_xmalloc(20), $1$s2 = $1 >> 2;
  if (($nlimbs | 0) == 0) {
    var $7 = 0;
  } else {
    var $7 = __gcry_mpi_alloc_limb_space($nlimbs, 0);
  }
  var $7;
  HEAP32[$1$s2 + 4] = $7;
  HEAP32[$1$s2] = $nlimbs;
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = 0;
  HEAP32[$1$s2 + 3] = 0;
  return $1;
}
function __gcry_mpi_alloc_limb_space($nlimbs, $secure) {
  var $1 = ($nlimbs | 0) != 0;
  var $2 = $1 ? $nlimbs << 2 : 4;
  if (($secure | 0) == 0) {
    var $9 = __gcry_xmalloc($2);
  } else {
    var $9 = __gcry_xmalloc_secure($2);
  }
  var $9;
  var $10 = $9;
  if ($1) {
    return $10;
  }
  HEAP32[$10 >> 2] = 0;
  return $10;
}
function __gcry_mpi_alloc_secure($nlimbs) {
  var $1$s2;
  var $1 = __gcry_xmalloc(20), $1$s2 = $1 >> 2;
  if (($nlimbs | 0) == 0) {
    var $7 = 0;
  } else {
    var $7 = __gcry_mpi_alloc_limb_space($nlimbs, 1);
  }
  var $7;
  HEAP32[$1$s2 + 4] = $7;
  HEAP32[$1$s2] = $nlimbs;
  HEAP32[$1$s2 + 3] = 1;
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = 0;
  return $1;
}
function __gcry_mpi_free_limb_space($a, $nlimbs) {
  if (($a | 0) == 0) {
    return;
  }
  var $3 = $nlimbs << 2;
  L303 : do {
    if (($3 | 0) != 0) {
      var $_vptr_01 = $a;
      var $_vlen_02 = $3;
      while (1) {
        var $_vlen_02;
        var $_vptr_01;
        HEAP8[$_vptr_01] = 0;
        var $8 = $_vlen_02 - 1 | 0;
        if (($8 | 0) == 0) {
          break L303;
        } else {
          var $_vptr_01 = $_vptr_01 + 1 | 0;
          var $_vlen_02 = $8;
        }
      }
    }
  } while (0);
  __gcry_free($a);
  return;
}
function __gcry_mpi_assign_limb_space($a, $ap, $nlimbs) {
  var $1 = $a + 16 | 0;
  var $3 = $a | 0;
  __gcry_mpi_free_limb_space(HEAP32[$1 >> 2], HEAP32[$3 >> 2]);
  HEAP32[$1 >> 2] = $ap;
  HEAP32[$3 >> 2] = $nlimbs;
  return;
}
function __gcry_mpi_resize($a, $nlimbs) {
  var $17$s2;
  var $1$s2;
  var $1$s2 = ($a | 0) >> 2;
  if (HEAP32[$1$s2] >>> 0 >= $nlimbs >>> 0) {
    var $6 = HEAP32[$a + 4 >> 2];
    if ($6 >>> 0 >= HEAP32[$1$s2] >>> 0) {
      return;
    }
    var $9 = $a + 16 | 0;
    var $i_01 = $6;
    while (1) {
      var $i_01;
      HEAP32[HEAP32[$9 >> 2] + ($i_01 << 2) >> 2] = 0;
      var $13 = $i_01 + 1 | 0;
      if ($13 >>> 0 < HEAP32[$1$s2] >>> 0) {
        var $i_01 = $13;
      } else {
        break;
      }
    }
    return;
  }
  var $17$s2 = ($a + 16 | 0) >> 2;
  var $18 = HEAP32[$17$s2];
  L320 : do {
    if (($18 | 0) == 0) {
      if ((HEAP32[$a + 12 >> 2] & 1 | 0) == 0) {
        HEAP32[$17$s2] = __gcry_xcalloc($nlimbs, 4);
        break;
      } else {
        HEAP32[$17$s2] = __gcry_xcalloc_secure($nlimbs, 4);
        break;
      }
    } else {
      HEAP32[$17$s2] = __gcry_xrealloc($18, $nlimbs << 2);
      var $25 = HEAP32[$1$s2];
      if ($25 >>> 0 < $nlimbs >>> 0) {
        var $i_13 = $25;
      } else {
        break;
      }
      while (1) {
        var $i_13;
        HEAP32[HEAP32[$17$s2] + ($i_13 << 2) >> 2] = 0;
        var $29 = $i_13 + 1 | 0;
        if (($29 | 0) == ($nlimbs | 0)) {
          break L320;
        } else {
          var $i_13 = $29;
        }
      }
    }
  } while (0);
  HEAP32[$1$s2] = $nlimbs;
  return;
}
__gcry_mpi_resize["X"] = 1;
function __gcry_mpi_set_opaque($a, $p, $nbits) {
  var $_0$s2;
  if (($a | 0) == 0) {
    var $_0 = __gcry_mpi_alloc(0), $_0$s2 = $_0 >> 2;
  } else {
    var $_0 = $a, $_0$s2 = $_0 >> 2;
  }
  var $_0;
  var $5 = $_0 + 12 | 0;
  var $9 = $_0 + 16 | 0;
  var $10 = HEAP32[$9 >> 2];
  if ((HEAP32[$5 >> 2] & 4 | 0) == 0) {
    __gcry_mpi_free_limb_space($10, HEAP32[$_0$s2]);
  } else {
    __gcry_free($10);
  }
  HEAP32[$9 >> 2] = $p;
  HEAP32[$_0$s2] = 0;
  HEAP32[$_0$s2 + 1] = 0;
  HEAP32[$_0$s2 + 2] = $nbits;
  HEAP32[$5 >> 2] = 4;
  return $_0;
}
function __gcry_mpi_copy($a) {
  var $42$s2;
  var $40$s2;
  var $13$s2;
  if (($a | 0) == 0) {
    var $b_0 = 0;
    var $b_0;
    return $b_0;
  }
  var $3 = $a + 12 | 0;
  var $4 = HEAP32[$3 >> 2];
  if (($4 & 4 | 0) != 0) {
    var $8 = $a + 16 | 0;
    var $12 = (__gcry_is_secure(HEAP32[$8 >> 2]) | 0) == 0;
    var $13$s2 = ($a + 8 | 0) >> 2;
    var $16 = (HEAP32[$13$s2] + 7 | 0) / 8 & -1;
    if ($12) {
      var $22 = __gcry_xmalloc($16);
    } else {
      var $22 = __gcry_xmalloc_secure($16);
    }
    var $22;
    _memcpy($22, HEAP32[$8 >> 2], (HEAP32[$13$s2] + 7 | 0) / 8 & -1);
    var $b_0 = __gcry_mpi_set_opaque(0, $22, HEAP32[$13$s2]);
    var $b_0;
    return $b_0;
  }
  var $33 = $a + 4 | 0;
  var $34 = HEAP32[$33 >> 2];
  if (($4 & 1 | 0) == 0) {
    var $40 = __gcry_mpi_alloc($34), $40$s2 = $40 >> 2;
  } else {
    var $40 = __gcry_mpi_alloc_secure($34), $40$s2 = $40 >> 2;
  }
  var $40;
  var $42$s2 = ($40 + 4 | 0) >> 2;
  HEAP32[$42$s2] = HEAP32[$33 >> 2];
  HEAP32[$40$s2 + 2] = HEAP32[$a + 8 >> 2];
  HEAP32[$40$s2 + 3] = HEAP32[$3 >> 2];
  if ((HEAP32[$42$s2] | 0) <= 0) {
    var $b_0 = $40;
    var $b_0;
    return $b_0;
  }
  var $50 = $a + 16 | 0;
  var $52 = HEAP32[$40$s2 + 4];
  var $53 = HEAP32[$42$s2];
  var $i_01 = 0;
  while (1) {
    var $i_01;
    HEAP32[$52 + ($i_01 << 2) >> 2] = HEAP32[HEAP32[$50 >> 2] + ($i_01 << 2) >> 2];
    var $59 = $i_01 + 1 | 0;
    if (($59 | 0) < ($53 | 0)) {
      var $i_01 = $59;
    } else {
      var $b_0 = $40;
      break;
    }
  }
  var $b_0;
  return $b_0;
}
__gcry_mpi_copy["X"] = 1;
function __gcry_mpi_alloc_like($a) {
  var $37$s2;
  if (($a | 0) == 0) {
    var $b_0 = 0;
    var $b_0;
    return $b_0;
  }
  var $3 = $a + 12 | 0;
  var $4 = HEAP32[$3 >> 2];
  if (($4 & 4 | 0) == 0) {
    var $31 = HEAP32[$a + 4 >> 2];
    if (($4 & 1 | 0) == 0) {
      var $37 = __gcry_mpi_alloc($31), $37$s2 = $37 >> 2;
    } else {
      var $37 = __gcry_mpi_alloc_secure($31), $37$s2 = $37 >> 2;
    }
    var $37;
    HEAP32[$37$s2 + 1] = 0;
    HEAP32[$37$s2 + 2] = 0;
    HEAP32[$37$s2 + 3] = HEAP32[$3 >> 2];
    var $b_0 = $37;
    var $b_0;
    return $b_0;
  } else {
    var $8 = $a + 8 | 0;
    var $11 = (HEAP32[$8 >> 2] + 7 | 0) / 8 & -1;
    var $12 = $a + 16 | 0;
    if ((__gcry_is_secure(HEAP32[$12 >> 2]) | 0) == 0) {
      var $22 = __gcry_malloc($11);
    } else {
      var $22 = __gcry_malloc_secure($11);
    }
    var $22;
    _memcpy($22, HEAP32[$12 >> 2], $11);
    var $b_0 = __gcry_mpi_set_opaque(0, $22, HEAP32[$8 >> 2]);
    var $b_0;
    return $b_0;
  }
}
function __gcry_mpi_set($w, $u) {
  var $_0$s2;
  var $2 = HEAP32[$u + 4 >> 2];
  var $4 = HEAP32[$u + 8 >> 2];
  if (($w | 0) == 0) {
    var $_0 = __gcry_mpi_alloc($2), $_0$s2 = $_0 >> 2;
  } else {
    var $_0 = $w, $_0$s2 = $_0 >> 2;
  }
  var $_0;
  if ((HEAP32[$_0$s2] | 0) < ($2 | 0)) {
    __gcry_mpi_resize($_0, $2);
  }
  var $15 = HEAP32[$_0$s2 + 4];
  var $17 = HEAP32[$u + 16 >> 2];
  L384 : do {
    if (($2 | 0) > 0) {
      var $_i_01 = 0;
      while (1) {
        var $_i_01;
        HEAP32[$15 + ($_i_01 << 2) >> 2] = HEAP32[$17 + ($_i_01 << 2) >> 2];
        var $22 = $_i_01 + 1 | 0;
        if (($22 | 0) == ($2 | 0)) {
          break L384;
        } else {
          var $_i_01 = $22;
        }
      }
    }
  } while (0);
  HEAP32[$_0$s2 + 1] = $2;
  HEAP32[$_0$s2 + 3] = HEAP32[$u + 12 >> 2];
  HEAP32[$_0$s2 + 2] = $4;
  return $_0;
}
Module["__gcry_mpi_set"] = __gcry_mpi_set;
function __gcry_mpi_set_ui($w, $u) {
  var $_0$s2;
  if (($w | 0) == 0) {
    var $_0 = __gcry_mpi_alloc(1), $_0$s2 = $_0 >> 2;
  } else {
    var $_0 = $w, $_0$s2 = $_0 >> 2;
  }
  var $_0;
  if ((HEAP32[$_0$s2] | 0) < 1) {
    __gcry_mpi_resize($_0, 1);
  }
  HEAP32[HEAP32[$_0$s2 + 4] >> 2] = $u;
  HEAP32[$_0$s2 + 1] = ($u | 0) != 0 & 1;
  HEAP32[$_0$s2 + 2] = 0;
  HEAP32[$_0$s2 + 3] = 0;
  return $_0;
}
function _gcry_mpi_get_ui($w, $u) {
  return _gcry_error1169(__gcry_mpi_get_ui($w, $u));
}
function _gcry_error1169($code) {
  return _gcry_err_make1188($code);
}
function __gcry_mpi_alloc_set_ui($u) {
  var $1$s2;
  var $1 = __gcry_mpi_alloc(1), $1$s2 = $1 >> 2;
  HEAP32[HEAP32[$1$s2 + 4] >> 2] = $u;
  HEAP32[$1$s2 + 1] = ($u | 0) != 0 & 1;
  HEAP32[$1$s2 + 2] = 0;
  return $1;
}
function __gcry_mpi_swap($a, $b) {
  var $2$s2;
  var $1$s2;
  var $b$s2 = $b >> 2;
  var $a$s2 = $a >> 2;
  var $tmp6 = HEAP32[$a$s2];
  var $tmp7 = HEAP32[$a$s2 + 1];
  var $tmp8 = HEAP32[$a$s2 + 2];
  var $tmp9 = HEAP32[$a$s2 + 3];
  var $tmp10 = HEAP32[$a$s2 + 4];
  var $1$s2 = $a >> 2;
  var $2$s2 = $b >> 2;
  HEAP32[$1$s2] = HEAP32[$2$s2];
  HEAP32[$1$s2 + 1] = HEAP32[$2$s2 + 1];
  HEAP32[$1$s2 + 2] = HEAP32[$2$s2 + 2];
  HEAP32[$1$s2 + 3] = HEAP32[$2$s2 + 3];
  HEAP32[$1$s2 + 4] = HEAP32[$2$s2 + 4];
  HEAP32[$b$s2] = $tmp6;
  HEAP32[$b$s2 + 1] = $tmp7;
  HEAP32[$b$s2 + 2] = $tmp8;
  HEAP32[$b$s2 + 3] = $tmp9;
  HEAP32[$b$s2 + 4] = $tmp10;
  return;
}
function __gcry_mpi_new($nbits) {
  return __gcry_mpi_alloc(($nbits + 31 | 0) >>> 5);
}
Module["__gcry_mpi_new"] = __gcry_mpi_new;
function __gcry_mpi_snew($nbits) {
  return __gcry_mpi_alloc_secure(($nbits + 31 | 0) >>> 5);
}
function __gcry_mpi_release($a) {
  __gcry_mpi_free($a);
  return;
}
Module["__gcry_mpi_release"] = __gcry_mpi_release;
function __gcry_mpi_randomize($w, $nbits, $level) {
  var label = 0;
  var $2 = ($nbits + 7 | 0) >>> 3;
  var $4 = ($w | 0) != 0;
  L403 : do {
    if (($level | 0) == 0) {
      do {
        if ($4) {
          if ((HEAP32[$w + 12 >> 2] & 1 | 0) == 0) {
            label = 312;
            break;
          }
          var $16 = __gcry_xmalloc_secure($2);
          break;
        } else {
          label = 312;
        }
      } while (0);
      if (label == 312) {
        var $16 = __gcry_xmalloc($2);
      }
      var $16;
      __gcry_create_nonce($16, $2);
      var $p_0 = $16;
    } else {
      do {
        if ($4) {
          if ((HEAP32[$w + 12 >> 2] & 1 | 0) == 0) {
            break;
          }
          var $p_0 = __gcry_random_bytes_secure($2, $level);
          break L403;
        }
      } while (0);
      var $p_0 = __gcry_random_bytes($2, $level);
    }
  } while (0);
  var $p_0;
  __gcry_mpi_set_buffer($w, $p_0, $2, 0);
  __gcry_free($p_0);
  return;
}
function _gcry_err_make1188($code) {
  return _gpg_err_make1189($code);
}
function __gcry_random_progress($what, $printchar, $current, $total) {
  var $1 = HEAP32[110040];
  if (($1 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$1](HEAP32[110036], $what, $printchar, $current, $total);
  return;
}
function __gcry_random_initialize($full) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_rngcsprng_initialize($full);
    return;
  } else {
    __gcry_rngfips_initialize($full);
    return;
  }
}
function __gcry_random_dump_stats() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_dump_stats();
  return;
}
function __gcry_secure_random_alloc() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_secure_alloc();
  return;
}
function __gcry_mpi_free($a) {
  var __stackBase__ = STACKTOP;
  if (($a | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $3 = $a + 12 | 0;
  var $8 = HEAP32[$a + 16 >> 2];
  if ((HEAP32[$3 >> 2] & 4 | 0) == 0) {
    __gcry_mpi_free_limb_space($8, HEAP32[$a >> 2]);
  } else {
    __gcry_free($8);
  }
  if (HEAP32[$3 >> 2] >>> 0 > 7) {
    __gcry_log_bug(489352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_free($a);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_mpi_get_opaque($a, $nbits) {
  var __stackBase__ = STACKTOP;
  if ((HEAP32[$a + 12 >> 2] & 4 | 0) == 0) {
    __gcry_log_bug(489696, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if (($nbits | 0) != 0) {
    HEAP32[$nbits >> 2] = HEAP32[$a + 8 >> 2];
  }
  STACKTOP = __stackBase__;
  return HEAP32[$a + 16 >> 2];
}
function __gcry_mpi_set_flag($a, $flag) {
  var __stackBase__ = STACKTOP;
  if (($flag | 0) == 1) {
    _mpi_set_secure($a);
    STACKTOP = __stackBase__;
    return;
  } else {
    __gcry_log_bug(481236, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
}
function _mpi_set_secure($a) {
  var $9$s2;
  var $1 = $a + 12 | 0;
  var $2 = HEAP32[$1 >> 2];
  if (($2 & 1 | 0) != 0) {
    return;
  }
  HEAP32[$1 >> 2] = $2 | 1;
  var $7 = $a + 16 | 0;
  var $8 = HEAP32[$7 >> 2];
  var $9$s2 = ($a + 4 | 0) >> 2;
  var $10 = HEAP32[$9$s2];
  if (($10 | 0) == 0) {
    if (($8 | 0) == 0) {
      return;
    } else {
      __gcry_assert_failed(477132, 474172, 197, 494220);
    }
  }
  var $16 = __gcry_mpi_alloc_limb_space($10, 1);
  L472 : do {
    if ((HEAP32[$9$s2] | 0) > 0) {
      var $_i_01 = 0;
      while (1) {
        var $_i_01;
        HEAP32[$16 + ($_i_01 << 2) >> 2] = HEAP32[$8 + ($_i_01 << 2) >> 2];
        var $22 = $_i_01 + 1 | 0;
        if (($22 | 0) < (HEAP32[$9$s2] | 0)) {
          var $_i_01 = $22;
        } else {
          break L472;
        }
      }
    }
  } while (0);
  HEAP32[$7 >> 2] = $16;
  __gcry_mpi_free_limb_space($8, HEAP32[$a >> 2]);
  return;
}
function __gcry_mpi_clear_flag($a, $flag) {
  __gcry_log_bug(481236, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
function __gcry_mpi_get_flag($a, $flag) {
  var __stackBase__ = STACKTOP;
  if (($flag | 0) == 1) {
    var $_0 = HEAP32[$a + 12 >> 2] & 1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (($flag | 0) == 2) {
    var $_0 = HEAP32[$a + 12 >> 2] & 4;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    __gcry_log_bug(481236, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
}
function __gcry_set_random_daemon_socket($socketname) {
  return;
}
function __gcry_use_random_daemon($onoff) {
  return 0;
}
function __gcry_fips_mode() {
  return HEAP8[440724] & 1 ^ 1;
}
function __gcry_enforced_fips_mode() {
  return HEAP8[457036] & 1;
}
function __gcry_enable_quick_random_gen() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_enable_quick_gen();
  return;
}
function __gcry_random_is_faked() {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $_0 = __gcry_rngcsprng_is_faked();
  } else {
    var $_0 = 0;
  }
  var $_0;
  return $_0;
}
function __gcry_random_add_bytes($buf, $buflen, $quality) {
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_rngcsprng_add_bytes($buf, $buflen, $quality);
  var $_0;
  return $_0;
}
function __gcry_random_bytes($nbytes, $level) {
  var $1 = __gcry_xmalloc($nbytes);
  _do_randomize($1, $nbytes, $level);
  return $1;
}
function _do_randomize($buffer, $length, $level) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_rngcsprng_randomize($buffer, $length, $level);
    return;
  } else {
    __gcry_rngfips_randomize($buffer, $length, $level);
    return;
  }
}
function __gcry_random_bytes_secure($nbytes, $level) {
  var $1 = __gcry_xmalloc_secure($nbytes);
  _do_randomize($1, $nbytes, $level);
  return $1;
}
function __gcry_randomize($buffer, $length, $level) {
  _do_randomize($buffer, $length, $level);
  return;
}
function __gcry_set_random_seed_file($name) {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_set_seed_file($name);
  return;
}
function __gcry_update_random_seed_file() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_update_seed_file();
  return;
}
function __gcry_fast_random_poll() {
  if ((__gcry_fips_mode() | 0) != 0) {
    return;
  }
  __gcry_rngcsprng_fast_poll();
  return;
}
function __gcry_create_nonce($buffer, $length) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_rngcsprng_create_nonce($buffer, $length);
    return;
  } else {
    __gcry_rngfips_create_nonce($buffer, $length);
    return;
  }
}
function __gcry_random_selftest($report) {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_rngfips_selftest($report);
  var $_0;
  return $_0;
}
function __gcry_random_init_external_test($r_context, $flags, $key, $keylen, $seed, $seedlen, $dt, $dtlen) {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $_0 = 60;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_rngfips_init_external_test($r_context, $flags, $key, $keylen, $seed, $seedlen, $dt, $dtlen);
  var $_0;
  return $_0;
}
function __gcry_random_run_external_test($context, $buffer, $buflen) {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $_0 = 60;
    var $_0;
    return $_0;
  }
  var $_0 = __gcry_rngfips_run_external_test($context, $buffer, $buflen);
  var $_0;
  return $_0;
}
function __gcry_random_deinit_external_test($context) {
  if ((__gcry_fips_mode() | 0) == 0) {
    return;
  }
  __gcry_rngfips_deinit_external_test($context);
  return;
}
function __gcry_ath_init() {
  if (!HEAP8[440488]) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $2 = HEAP32[110124];
  do {
    if (($2 | 0) != 0) {
      var $5 = FUNCTION_TABLE[$2]();
      if (($5 | 0) == 0) {
        break;
      } else {
        var $_0 = $5;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $_0 = FUNCTION_TABLE[HEAP32[110125]](459480);
  var $_0;
  return $_0;
}
function __gcry_ath_install($ath_ops, $check_only) {
  var $2 = ($ath_ops | 0) == 0;
  if (($check_only | 0) == 0) {
    do {
      if ($2) {
        var $storemerge = 0;
      } else {
        if ((HEAP32[$ath_ops + 8 >> 2] | 0) == 0) {
          var $_0 = 45;
          var $_0;
          return $_0;
        }
        if ((HEAP32[$ath_ops + 16 >> 2] | 0) == 0) {
          var $_0 = 45;
          var $_0;
          return $_0;
        }
        if ((HEAP32[$ath_ops + 20 >> 2] | 0) == 0) {
          var $_0 = 45;
          var $_0;
          return $_0;
        } else {
          var $37 = $ath_ops;
          for (var $$src = $37 >> 2, $$dest = 110123, $$stop = $$src + 14; $$src < $$stop; $$src++, $$dest++) {
            HEAP32[$$dest] = HEAP32[$$src];
          }
          var $storemerge = 1;
          break;
        }
      }
    } while (0);
    var $storemerge;
    HEAP8[440488] = $storemerge;
    var $_0 = 0;
    var $_0;
    return $_0;
  } else {
    if ($2) {
      var $option_0 = 0;
    } else {
      var $option_0 = HEAP32[$ath_ops >> 2];
    }
    var $option_0;
    do {
      if (!HEAP8[440488]) {
        if (($option_0 & 255 | 0) == 0) {
          break;
        } else {
          var $_0 = 60;
        }
        var $_0;
        return $_0;
      }
    } while (0);
    var $12 = HEAP32[110123];
    var $13 = $12 & 255;
    if (($13 | 0) == 1) {
      var $_0 = 60;
      var $_0;
      return $_0;
    }
    var $16 = $option_0 & 255;
    if (($16 | 0) != 1 & ($13 | 0) == ($16 | 0)) {
      return (($12 ^ $option_0) & 65280 | 0) == 0 ? 0 : 60;
    } else {
      var $_0 = 60;
      var $_0;
      return $_0;
    }
  }
}
function __gcry_ath_mutex_init($lock) {
  if (HEAP8[440488]) {
    var $_0 = _mutex_init($lock, 0);
  } else {
    HEAP32[$lock >> 2] = 0;
    var $_0 = 0;
  }
  var $_0;
  return $_0;
}
function _mutex_init($lock, $just_check) {
  var $1 = ($just_check | 0) != 0;
  if (!$1) {
    var $err_04 = FUNCTION_TABLE[HEAP32[110125]]($lock);
    var $err_04;
    return $err_04;
  }
  FUNCTION_TABLE[HEAP32[110127]](459480);
  if ((HEAP32[$lock >> 2] | 0) == 0 | $1 ^ 1) {
    var $err_05 = FUNCTION_TABLE[HEAP32[110125]]($lock);
  } else {
    var $err_05 = 0;
  }
  var $err_05;
  FUNCTION_TABLE[HEAP32[110128]](459480);
  var $err_04 = $err_05;
  var $err_04;
  return $err_04;
}
function __gcry_ath_mutex_destroy($lock) {
  if (!HEAP8[440488]) {
    if ((HEAP32[$lock >> 2] | 0) != 0) {
      ___assert_func(488132, 173, 493900, 489464);
    }
    HEAP32[$lock >> 2] = 2;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if ((HEAP32[110126] | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  FUNCTION_TABLE[HEAP32[110127]](459480);
  var $8 = (HEAP32[$lock >> 2] | 0) == 0;
  FUNCTION_TABLE[HEAP32[110128]](459480);
  if ($8) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = FUNCTION_TABLE[HEAP32[110126]]($lock);
  var $_0;
  return $_0;
}
function __gcry_ath_mutex_lock($lock) {
  if (HEAP8[440488]) {
    var $2 = _mutex_init($lock, 1);
    if (($2 | 0) != 0) {
      var $_0 = $2;
      var $_0;
      return $_0;
    }
    var $_0 = FUNCTION_TABLE[HEAP32[110127]]($lock);
    var $_0;
    return $_0;
  } else {
    if ((HEAP32[$lock >> 2] | 0) != 0) {
      ___assert_func(488132, 193, 493876, 489464);
    }
    HEAP32[$lock >> 2] = 1;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function __gcry_ath_mutex_unlock($lock) {
  if (HEAP8[440488]) {
    var $2 = _mutex_init($lock, 1);
    if (($2 | 0) != 0) {
      var $_0 = $2;
      var $_0;
      return $_0;
    }
    var $_0 = FUNCTION_TABLE[HEAP32[110128]]($lock);
    var $_0;
    return $_0;
  } else {
    if ((HEAP32[$lock >> 2] | 0) != 1) {
      ___assert_func(488132, 213, 493852, 481008);
    }
    HEAP32[$lock >> 2] = 0;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function __gcry_ath_read($fd, $buf, $nbytes) {
  var $1 = HEAP32[110129];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($fd, $buf, $nbytes);
    var $_0;
    return $_0;
  } else {
    var $_0 = _read($fd, $buf, $nbytes);
    var $_0;
    return $_0;
  }
}
function __gcry_ath_write($fd, $buf, $nbytes) {
  var $1 = HEAP32[110130];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($fd, $buf, $nbytes);
    var $_0;
    return $_0;
  } else {
    var $_0 = _write($fd, $buf, $nbytes);
    var $_0;
    return $_0;
  }
}
function __gcry_ath_select($nfd, $rset, $wset, $eset, $timeout) {
  var $1 = HEAP32[110131];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($nfd, $rset, $wset, $eset, $timeout);
    var $_0;
    return $_0;
  } else {
    var $_0 = _select($nfd, $rset, $wset, $eset, $timeout);
    var $_0;
    return $_0;
  }
}
function __gcry_ath_waitpid($pid, $status, $options) {
  var $1 = HEAP32[110132];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($pid, $status, $options);
    var $_0;
    return $_0;
  } else {
    var $_0 = _wait($pid, $status, $options);
    var $_0;
    return $_0;
  }
}
function __gcry_ath_accept($s, $addr, $length_ptr) {
  var $1 = HEAP32[110133];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($s, $addr, $length_ptr);
    var $_0;
    return $_0;
  } else {
    var $_0 = _accept($s, $addr, $length_ptr);
    var $_0;
    return $_0;
  }
}
function __gcry_ath_connect($s, $addr, $length) {
  var $1 = HEAP32[110134];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($s, $addr, $length);
    var $_0;
    return $_0;
  } else {
    var $_0 = _connect($s, $addr, $length);
    var $_0;
    return $_0;
  }
}
function __gcry_ath_sendmsg($s, $msg, $flags) {
  var $1 = HEAP32[110135];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($s, $msg, $flags);
    var $_0;
    return $_0;
  } else {
    var $_0 = _sendmsg($s, $msg, $flags);
    var $_0;
    return $_0;
  }
}
function __gcry_ath_recvmsg($s, $msg, $flags) {
  var $1 = HEAP32[110136];
  if (HEAP8[440488] & ($1 | 0) != 0) {
    var $_0 = FUNCTION_TABLE[$1]($s, $msg, $flags);
    var $_0;
    return $_0;
  } else {
    var $_0 = _recvmsg($s, $msg, $flags);
    var $_0;
    return $_0;
  }
}
function __gcry_fips_signal_error($srcfile, $srcline, $srcfunc, $is_fatal, $description) {
  var __stackBase__ = STACKTOP;
  if ((__gcry_fips_mode() | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  var $4 = ($is_fatal | 0) != 0;
  _fips_new_state($4 ? 5 : 4);
  var $7 = ($srcfunc | 0) != 0;
  __gcry_log_info(465500, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $4 ? 490632 : 489800, HEAP32[tempInt + 4 >> 2] = $srcfile, HEAP32[tempInt + 8 >> 2] = $srcline, HEAP32[tempInt + 12 >> 2] = $7 ? 488064 : 489800, HEAP32[tempInt + 16 >> 2] = $7 ? $srcfunc : 489800, HEAP32[tempInt + 20 >> 2] = ($description | 0) != 0 ? $description : 487352, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __gcry_is_fips_mode_inactive() {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  _lock_fsm();
  var $4 = HEAP8[455272] & 1;
  _unlock_fsm();
  var $_0 = $4;
  var $_0;
  return $_0;
}
function __gcry_fips_is_operational() {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $result_0 = 1;
    var $result_0;
    return $result_0;
  }
  _lock_fsm();
  if ((HEAP32[114529] | 0) == 1) {
    _unlock_fsm();
    __gcry_fips_run_selftests(0);
    _lock_fsm();
  }
  var $11 = (HEAP32[114529] | 0) == 3 & 1;
  _unlock_fsm();
  var $result_0 = $11;
  var $result_0;
  return $result_0;
}
function __gcry_fips_run_selftests($extended) {
  if ((__gcry_fips_mode() | 0) != 0) {
    _fips_new_state(2);
  }
  do {
    if ((_run_cipher_selftests($extended) | 0) == 0) {
      if ((_run_digest_selftests($extended) | 0) != 0) {
        var $ec_0 = 50;
        var $result_0 = 4;
        break;
      }
      if ((_run_hmac_selftests($extended) | 0) != 0) {
        var $ec_0 = 50;
        var $result_0 = 4;
        break;
      }
      if ((_run_random_selftests() | 0) != 0) {
        var $ec_0 = 50;
        var $result_0 = 4;
        break;
      }
      var $18 = (_run_pubkey_selftests($extended) | 0) == 0;
      var $ec_0 = $18 ? 0 : 50;
      var $result_0 = $18 ? 3 : 4;
    } else {
      var $ec_0 = 50;
      var $result_0 = 4;
    }
  } while (0);
  var $result_0;
  var $ec_0;
  if ((__gcry_fips_mode() | 0) == 0) {
    return $ec_0;
  }
  _fips_new_state($result_0);
  return $ec_0;
}
function __gcry_initialize_fips_mode($force) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 512 | 0;
  var $line = __stackBase__;
  var $line2 = __stackBase__ + 256;
  if (HEAP8[491708]) {
    if ((__gcry_fips_mode() | 0) == 0) {
      __gcry_assert_failed(488076, 489456, 115, 495364);
    } else {
      _fips_new_state(5);
      __gcry_fips_noreturn();
    }
  }
  HEAP8[491708] = 1;
  L732 : do {
    if (($force | 0) == 0) {
      if ((_access(476912, 0) | 0) == 0) {
        if (!HEAP8[440724]) {
          break;
        }
        __gcry_assert_failed(480984, 489456, 133, 495364);
      }
      var $16 = _fopen(491676, 474024);
      do {
        if (($16 | 0) == 0) {
          var $32 = HEAP32[___errno_location() >> 2];
          if (($32 | 0) == 2 | ($32 | 0) == 13) {
            break;
          }
          if ((_access(472092, 0) | 0) != 0) {
            break;
          }
          var $37 = _strerror($32);
          __gcry_log_info(470632, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 491676, HEAP32[tempInt + 4 >> 2] = $37, tempInt));
          _abort();
        } else {
          var $19 = $line | 0;
          do {
            if ((_fgets($19, 256, $16) | 0) != 0) {
              if ((_atoi($19) | 0) == 0) {
                break;
              }
              _fclose($16);
              if (!HEAP8[440724]) {
                break L732;
              }
              __gcry_assert_failed(480984, 489456, 152, 495364);
            }
          } while (0);
          _fclose($16);
        }
      } while (0);
      HEAP8[440724] = 1;
      STACKTOP = __stackBase__;
      return;
    } else {
      if (!HEAP8[440724]) {
        break;
      }
      __gcry_assert_failed(480984, 489456, 122, 495364);
    }
  } while (0);
  var $40 = __gcry_ath_mutex_init(455436);
  if (($40 | 0) != 0) {
    var $43 = _strerror($40);
    __gcry_log_info(469220, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $43, tempInt));
    _abort();
  }
  var $45 = _fopen(476912, 474024);
  if (($45 | 0) != 0) {
    var $48 = $line2 | 0;
    do {
      if ((_fgets($48, 256, $45) | 0) != 0) {
        if ((_atoi($48) | 0) == 0) {
          break;
        }
        HEAP8[457036] = 1;
      }
    } while (0);
    _fclose($45);
  }
  _fips_new_state(1);
  STACKTOP = __stackBase__;
  return;
}
__gcry_initialize_fips_mode["X"] = 1;
function _fips_new_state($new_state) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  _lock_fsm();
  var $1 = HEAP32[114529];
  do {
    if (($1 | 0) == 0) {
      if (($new_state | 0) == 5 | ($new_state | 0) == 4 | ($new_state | 0) == 1) {
        label = 634;
        break;
      } else {
        label = 635;
        break;
      }
    } else if (($1 | 0) == 2) {
      if (($new_state - 3 | 0) >>> 0 < 3) {
        label = 634;
        break;
      } else {
        label = 635;
        break;
      }
    } else if (($1 | 0) == 3) {
      if (($new_state | 0) == 6 | ($new_state | 0) == 5 | ($new_state | 0) == 4 | ($new_state | 0) == 2) {
        label = 634;
        break;
      } else {
        label = 635;
        break;
      }
    } else if (($1 | 0) == 4) {
      if (($new_state | 0) == 6 | ($new_state | 0) == 5 | ($new_state | 0) == 4 | ($new_state | 0) == 2) {
        label = 634;
        break;
      } else {
        label = 635;
        break;
      }
    } else if (($1 | 0) == 5) {
      if (($new_state | 0) == 6) {
        label = 634;
        break;
      } else {
        label = 635;
        break;
      }
    } else if (($1 | 0) == 1) {
      if (($new_state | 0) == 5 | ($new_state | 0) == 4 | ($new_state | 0) == 2) {
        label = 634;
        break;
      } else {
        label = 635;
        break;
      }
    } else {
      label = 635;
    }
  } while (0);
  do {
    if (label == 635) {
      _unlock_fsm();
      var $ok_028 = 0;
    } else if (label == 634) {
      HEAP32[114529] = $new_state;
      _unlock_fsm();
      if ((__gcry_log_verbosity(2) | 0) != 0) {
        var $ok_028 = 1;
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  var $ok_028;
  var $13 = _state2str($1);
  var $14 = _state2str($new_state);
  __gcry_log_info(486412, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $13, HEAP32[tempInt + 4 >> 2] = $14, HEAP32[tempInt + 8 >> 2] = $ok_028 ? 485616 : 484700, tempInt));
  if ($ok_028) {
    STACKTOP = __stackBase__;
    return;
  } else {
    __gcry_fips_noreturn();
  }
}
function __gcry_fips_noreturn() {
  _fflush(0);
  _abort();
}
function __gcry_inactivate_fips_mode($text) {
  if ((__gcry_fips_mode() | 0) == 0) {
    __gcry_assert_failed(467592, 489456, 288, 495392);
  }
  if ((__gcry_enforced_fips_mode() | 0) != 0) {
    __gcry_fips_signal_error(489456, 293, 495392, 0, $text);
    return;
  }
  _lock_fsm();
  if (HEAP8[455272]) {
    _unlock_fsm();
    return;
  } else {
    HEAP8[455272] = 1;
    _unlock_fsm();
    return;
  }
}
function _lock_fsm() {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_ath_mutex_lock(455436);
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $4 = _strerror($1);
    __gcry_log_info(475380, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
    _abort();
  }
}
function _unlock_fsm() {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_ath_mutex_unlock(455436);
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $4 = _strerror($1);
    __gcry_log_info(475672, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
    _abort();
  }
}
function _check_binary_integrity() {
  return;
}
function _state2str($state) {
  if (($state | 0) == 0) {
    var $s_0 = 484016;
  } else if (($state | 0) == 5) {
    var $s_0 = 480084;
  } else if (($state | 0) == 1) {
    var $s_0 = 483056;
  } else if (($state | 0) == 2) {
    var $s_0 = 482404;
  } else if (($state | 0) == 4) {
    var $s_0 = 481276;
  } else if (($state | 0) == 6) {
    var $s_0 = 479748;
  } else if (($state | 0) == 3) {
    var $s_0 = 481732;
  } else {
    var $s_0 = 479476;
  }
  var $s_0;
  return $s_0;
}
function __gcry_fips_test_operational() {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $result_0 = 1;
    var $result_0;
    return $result_0;
  }
  _lock_fsm();
  var $6 = (HEAP32[114529] | 0) == 3 & 1;
  _unlock_fsm();
  var $result_0 = $6;
  var $result_0;
  return $result_0;
}
function __gcry_fips_test_error_or_operational() {
  if ((__gcry_fips_mode() | 0) == 0) {
    var $result_0 = 1;
    var $result_0;
    return $result_0;
  }
  _lock_fsm();
  var $6 = (HEAP32[114529] - 3 | 0) >>> 0 < 2 & 1;
  _unlock_fsm();
  var $result_0 = $6;
  var $result_0;
  return $result_0;
}
function _run_cipher_selftests($extended) {
  var $1 = __gcry_cipher_selftest(2, $extended, 244);
  var $2 = ($1 | 0) != 0;
  if ($2) {
    var $6 = _gpg_strerror($1);
  } else {
    var $6 = 0;
  }
  var $6;
  _reporter(477324, 2, 0, $6);
  var $7 = __gcry_cipher_selftest(7, $extended, 244);
  var $8 = ($7 | 0) != 0;
  if ($8) {
    var $12 = _gpg_strerror($7);
  } else {
    var $12 = 0;
  }
  var $12;
  _reporter(477324, 7, 0, $12);
  var $13 = __gcry_cipher_selftest(8, $extended, 244);
  var $14 = ($13 | 0) != 0;
  if ($14) {
    var $18 = _gpg_strerror($13);
  } else {
    var $18 = 0;
  }
  var $18;
  _reporter(477324, 8, 0, $18);
  var $_anyerr_0_2 = $14 ? 1 : $8 ? 1 : $2 & 1;
  var $19 = __gcry_cipher_selftest(9, $extended, 244);
  var $20 = ($19 | 0) != 0;
  if (!$20) {
    var $24 = 0;
    var $24;
    _reporter(477324, 9, 0, $24);
    var $_anyerr_0_3 = $20 ? 1 : $_anyerr_0_2;
    return $_anyerr_0_3;
  }
  var $24 = _gpg_strerror($19);
  var $24;
  _reporter(477324, 9, 0, $24);
  var $_anyerr_0_3 = $20 ? 1 : $_anyerr_0_2;
  return $_anyerr_0_3;
}
function _run_digest_selftests($extended) {
  var $1 = __gcry_md_selftest(2, $extended, 244);
  var $2 = ($1 | 0) != 0;
  if ($2) {
    var $6 = _gpg_strerror($1);
  } else {
    var $6 = 0;
  }
  var $6;
  _reporter(477908, 2, 0, $6);
  var $7 = __gcry_md_selftest(11, $extended, 244);
  var $8 = ($7 | 0) != 0;
  if ($8) {
    var $12 = _gpg_strerror($7);
  } else {
    var $12 = 0;
  }
  var $12;
  _reporter(477908, 11, 0, $12);
  var $13 = __gcry_md_selftest(8, $extended, 244);
  var $14 = ($13 | 0) != 0;
  if ($14) {
    var $18 = _gpg_strerror($13);
  } else {
    var $18 = 0;
  }
  var $18;
  _reporter(477908, 8, 0, $18);
  var $19 = __gcry_md_selftest(9, $extended, 244);
  var $20 = ($19 | 0) != 0;
  if ($20) {
    var $24 = _gpg_strerror($19);
  } else {
    var $24 = 0;
  }
  var $24;
  _reporter(477908, 9, 0, $24);
  var $_anyerr_0_3 = $20 ? 1 : $14 ? 1 : $8 ? 1 : $2 & 1;
  var $25 = __gcry_md_selftest(10, $extended, 244);
  var $26 = ($25 | 0) != 0;
  if (!$26) {
    var $30 = 0;
    var $30;
    _reporter(477908, 10, 0, $30);
    var $_anyerr_0_4 = $26 ? 1 : $_anyerr_0_3;
    return $_anyerr_0_4;
  }
  var $30 = _gpg_strerror($25);
  var $30;
  _reporter(477908, 10, 0, $30);
  var $_anyerr_0_4 = $26 ? 1 : $_anyerr_0_3;
  return $_anyerr_0_4;
}
function _run_hmac_selftests($extended) {
  var $1 = __gcry_hmac_selftest(2, $extended, 244);
  var $2 = ($1 | 0) != 0;
  if ($2) {
    var $6 = _gpg_strerror($1);
  } else {
    var $6 = 0;
  }
  var $6;
  _reporter(478244, 2, 0, $6);
  var $7 = __gcry_hmac_selftest(11, $extended, 244);
  var $8 = ($7 | 0) != 0;
  if ($8) {
    var $12 = _gpg_strerror($7);
  } else {
    var $12 = 0;
  }
  var $12;
  _reporter(478244, 11, 0, $12);
  var $13 = __gcry_hmac_selftest(8, $extended, 244);
  var $14 = ($13 | 0) != 0;
  if ($14) {
    var $18 = _gpg_strerror($13);
  } else {
    var $18 = 0;
  }
  var $18;
  _reporter(478244, 8, 0, $18);
  var $19 = __gcry_hmac_selftest(9, $extended, 244);
  var $20 = ($19 | 0) != 0;
  if ($20) {
    var $24 = _gpg_strerror($19);
  } else {
    var $24 = 0;
  }
  var $24;
  _reporter(478244, 9, 0, $24);
  var $_anyerr_0_3 = $20 ? 1 : $14 ? 1 : $8 ? 1 : $2 & 1;
  var $25 = __gcry_hmac_selftest(10, $extended, 244);
  var $26 = ($25 | 0) != 0;
  if (!$26) {
    var $30 = 0;
    var $30;
    _reporter(478244, 10, 0, $30);
    var $_anyerr_0_4 = $26 ? 1 : $_anyerr_0_3;
    return $_anyerr_0_4;
  }
  var $30 = _gpg_strerror($25);
  var $30;
  _reporter(478244, 10, 0, $30);
  var $_anyerr_0_4 = $26 ? 1 : $_anyerr_0_3;
  return $_anyerr_0_4;
}
function _run_random_selftests() {
  var $1 = __gcry_random_selftest(244);
  var $2 = ($1 | 0) != 0;
  if ($2) {
    var $6 = _gpg_strerror($1);
  } else {
    var $6 = 0;
  }
  var $6;
  _reporter(475952, 0, 0, $6);
  return $2 & 1;
}
function _run_pubkey_selftests($extended) {
  var $1 = __gcry_pk_selftest(1, $extended, 244);
  var $2 = ($1 | 0) != 0;
  if ($2) {
    var $6 = _gpg_strerror($1);
  } else {
    var $6 = 0;
  }
  var $6;
  _reporter(478892, 1, 0, $6);
  var $7 = __gcry_pk_selftest(17, $extended, 244);
  var $8 = ($7 | 0) != 0;
  if ($8) {
    var $12 = _gpg_strerror($7);
  } else {
    var $12 = 0;
  }
  var $12;
  _reporter(478892, 17, 0, $12);
  return $8 ? 1 : $2 & 1;
}
function _reporter($domain, $algo, $what, $errtxt) {
  var __stackBase__ = STACKTOP;
  var $1 = ($errtxt | 0) != 0;
  do {
    if (!$1) {
      if ((__gcry_log_verbosity(2) | 0) != 0) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  var $6 = _strcmp($domain, 478244);
  var $8 = ($6 | 0) != 0 ? $domain : 477908;
  var $9 = ($6 | 0) == 0;
  var $10 = $9 ? 477616 : 489800;
  do {
    if ((_strcmp($domain, 477324) | 0) == 0) {
      var $29 = __gcry_cipher_algo_name($algo);
    } else {
      if ((_strcmp($domain, 477908) | 0) == 0) {
        var $29 = __gcry_md_algo_name($algo);
        break;
      }
      if ($9) {
        var $29 = __gcry_md_algo_name($algo);
        break;
      }
      if ((_strcmp($domain, 478892) | 0) != 0) {
        var $29 = 489800;
        break;
      }
      var $29 = __gcry_pk_algo_name($algo);
    }
  } while (0);
  var $29;
  var $31 = ($what | 0) != 0;
  __gcry_log_info(478552, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 4 >> 2] = $10, HEAP32[tempInt + 8 >> 2] = $29, HEAP32[tempInt + 12 >> 2] = $algo, HEAP32[tempInt + 16 >> 2] = $1 ? $errtxt : 477136, HEAP32[tempInt + 20 >> 2] = $31 ? 476364 : 489800, HEAP32[tempInt + 24 >> 2] = $31 ? $what : 489800, HEAP32[tempInt + 28 >> 2] = $31 ? 476156 : 489800, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __gcry_global_is_operational() {
  if (!HEAP8[464504]) {
    _global_init();
  }
  return __gcry_fips_is_operational();
}
function __gcry_check_version($req_version) {
  var $rq_minor$s2;
  var $rq_major$s2;
  var $my_minor$s2;
  var $my_major$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $my_major = __stackBase__, $my_major$s2 = $my_major >> 2;
  var $my_minor = __stackBase__ + 4, $my_minor$s2 = $my_minor >> 2;
  var $my_micro = __stackBase__ + 8;
  var $rq_major = __stackBase__ + 12, $rq_major$s2 = $rq_major >> 2;
  var $rq_minor = __stackBase__ + 16, $rq_minor$s2 = $rq_minor >> 2;
  var $rq_micro = __stackBase__ + 20;
  _global_init();
  L904 : do {
    if (($req_version | 0) == 0) {
      var $_0 = 487604;
    } else {
      if ((_parse_version_string(487604, $my_major, $my_minor, $my_micro) | 0) == 0) {
        var $_0 = 0;
        break;
      }
      if ((_parse_version_string($req_version, $rq_major, $rq_minor, $rq_micro) | 0) == 0) {
        var $_0 = 0;
        break;
      }
      var $9 = HEAP32[$my_major$s2];
      var $10 = HEAP32[$rq_major$s2];
      if (($9 | 0) > ($10 | 0)) {
        var $_0 = 487604;
        break;
      }
      if (($9 | 0) == ($10 | 0)) {
        if ((HEAP32[$my_minor$s2] | 0) > (HEAP32[$rq_minor$s2] | 0)) {
          var $_0 = 487604;
          break;
        }
      }
      do {
        if ((HEAP32[$my_major$s2] | 0) == (HEAP32[$rq_major$s2] | 0)) {
          if ((HEAP32[$my_minor$s2] | 0) != (HEAP32[$rq_minor$s2] | 0)) {
            break;
          }
          if ((HEAP32[$my_micro >> 2] | 0) > (HEAP32[$rq_micro >> 2] | 0)) {
            var $_0 = 487604;
            break L904;
          }
        }
      } while (0);
      do {
        if ((HEAP32[$my_major$s2] | 0) == (HEAP32[$rq_major$s2] | 0)) {
          if ((HEAP32[$my_minor$s2] | 0) != (HEAP32[$rq_minor$s2] | 0)) {
            break;
          }
          if ((HEAP32[$my_micro >> 2] | 0) == (HEAP32[$rq_micro >> 2] | 0)) {
            var $_0 = 487604;
            break L904;
          }
        }
      } while (0);
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_check_version["X"] = 1;
function _parse_version_string($s, $major, $minor, $micro) {
  var $1 = _parse_version_number($s, $major);
  do {
    if (($1 | 0) == 0) {
      var $_0 = 0;
    } else {
      if (HEAP8[$1] << 24 >> 24 != 46) {
        var $_0 = 0;
        break;
      }
      var $8 = _parse_version_number($1 + 1 | 0, $minor);
      if (($8 | 0) == 0) {
        var $_0 = 0;
        break;
      }
      if (HEAP8[$8] << 24 >> 24 != 46) {
        var $_0 = 0;
        break;
      }
      var $_0 = _parse_version_number($8 + 1 | 0, $micro);
    }
  } while (0);
  var $_0;
  return $_0;
}
function __gcry_vcontrol($cmd, $arg_ptr) {
  var $arg_ptr$s2 = $arg_ptr >> 2;
  L929 : do {
    if (($cmd | 0) == 27) {
      __gcry_secmem_set_flags(__gcry_secmem_get_flags() | 1);
      var $err_0 = 0;
    } else if (($cmd | 0) == 13) {
      __gcry_random_dump_stats();
      var $err_0 = 0;
    } else if (($cmd | 0) == 25) {
      _global_init();
      __gcry_secmem_term();
      var $err_0 = 0;
    } else if (($cmd | 0) == 31) {
      __gcry_private_enable_m_guard();
      var $err_0 = 0;
    } else if (($cmd | 0) == 51) {
      var $err_0 = (__gcry_random_is_faked() | 0) != 0 & 1;
    } else if (($cmd | 0) == 44) {
      __gcry_enable_quick_random_gen();
      var $err_0 = 0;
    } else if (($cmd | 0) == 14) {
      __gcry_secmem_dump_stats();
      var $err_0 = 0;
    } else if (($cmd | 0) == 24) {
      _global_init();
      __gcry_secmem_init(HEAP32[$arg_ptr$s2]);
      var $err_0 = __gcry_secmem_get_flags() >>> 2 & 1;
    } else if (($cmd | 0) == 38) {
      if (HEAP8[491228]) {
        var $err_0 = 0;
        break;
      }
      _global_init();
      __gcry_random_initialize(0);
      HEAP8[491228] = 1;
      __gcry_global_is_operational();
      var $err_0 = 0;
    } else if (($cmd | 0) == 47) {
      var $57 = __gcry_ath_install(HEAP32[$arg_ptr$s2], HEAP8[464504] & 1);
      if (($57 | 0) != 0) {
        var $err_0 = $57;
        break;
      }
      _global_init();
      var $err_0 = 0;
    } else if (($cmd | 0) == 46) {
      if ((__gcry_global_is_operational() | 0) == 0) {
        var $err_0 = 0;
        break;
      }
      __gcry_update_random_seed_file();
      var $err_0 = 0;
    } else if (($cmd | 0) == 20) {
      HEAP32[114488] = HEAP32[114488] | HEAP32[$arg_ptr$s2];
      var $err_0 = 0;
    } else if (($cmd | 0) == 57) {
      _global_init();
      var $err_0 = __gcry_fips_run_selftests(1);
    } else if (($cmd | 0) == 58) {
      var $95 = HEAP32[$arg_ptr$s2];
      var $98 = HEAP32[$arg_ptr$s2 + 1];
      var $101 = HEAP32[$arg_ptr$s2 + 2];
      var $104 = HEAP32[$arg_ptr$s2 + 3];
      var $107 = HEAP32[$arg_ptr$s2 + 4];
      var $110 = HEAP32[$arg_ptr$s2 + 5];
      var $113 = HEAP32[$arg_ptr$s2 + 6];
      var $115 = HEAP32[$arg_ptr$s2 + 7];
      if ((__gcry_global_is_operational() | 0) == 0) {
        var $err_0 = 176;
        break;
      }
      var $err_0 = __gcry_random_init_external_test($95, $98, $101, $104, $107, $110, $113, $115);
    } else if (($cmd | 0) == 59) {
      var $123 = HEAP32[$arg_ptr$s2];
      var $126 = HEAP32[$arg_ptr$s2 + 1];
      var $128 = HEAP32[$arg_ptr$s2 + 2];
      if ((__gcry_global_is_operational() | 0) == 0) {
        var $err_0 = 176;
        break;
      }
      var $err_0 = __gcry_random_run_external_test($123, $126, $128);
    } else if (($cmd | 0) == 60) {
      __gcry_random_deinit_external_test(HEAP32[$arg_ptr$s2]);
      var $err_0 = 0;
    } else if (($cmd | 0) == 48) {
      __gcry_random_initialize(1);
      if ((__gcry_global_is_operational() | 0) == 0) {
        var $err_0 = 0;
        break;
      }
      __gcry_fast_random_poll();
      var $err_0 = 0;
    } else if (($cmd | 0) == 52) {
      var $err_0 = _gpg_error1287();
    } else if (($cmd | 0) == 50) {
      __gcry_random_initialize(1);
      var $err_0 = 0;
    } else if (($cmd | 0) == 53) {
      var $69 = HEAP32[$arg_ptr$s2];
      _print_config(($69 | 0) != 0 ? 68 : 156, $69);
      var $err_0 = 0;
    } else if (($cmd | 0) == 28) {
      __gcry_secmem_set_flags(__gcry_secmem_get_flags() | 2);
      var $err_0 = 0;
    } else if (($cmd | 0) == 29) {
      __gcry_secmem_set_flags(__gcry_secmem_get_flags() & -3);
      var $err_0 = 0;
    } else if (($cmd | 0) == 30) {
      _global_init();
      __gcry_secmem_init(0);
      var $err_0 = 0;
    } else if (($cmd | 0) == 37) {
      _global_init();
      HEAP8[440720] = 1;
      var $err_0 = 0;
    } else if (($cmd | 0) == 21) {
      HEAP32[114488] = HEAP32[114488] & (HEAP32[$arg_ptr$s2] ^ -1);
      var $err_0 = 0;
    } else if (($cmd | 0) == 36) {
      _global_init();
      var $err_0 = 0;
    } else if (($cmd | 0) == 40) {
      var $err_0 = HEAP8[464504] & 1;
    } else if (($cmd | 0) == 39) {
      var $err_0 = HEAP8[491228] & 1;
    } else if (($cmd | 0) == 54) {
      var $err_0 = (__gcry_fips_test_operational() | 0) != 0 & 1;
    } else if (($cmd | 0) == 55) {
      if ((__gcry_fips_mode() | 0) == 0) {
        var $err_0 = 0;
        break;
      }
      var $err_0 = ((__gcry_is_fips_mode_inactive() | 0) != 0 | HEAP8[440720]) & 1 ^ 1;
    } else if (($cmd | 0) == 56) {
      if (!HEAP8[464504]) {
        HEAP8[455444] = 1;
        var $err_0 = 0;
        break;
      }
      if ((__gcry_fips_test_error_or_operational() | 0) != 0) {
        __gcry_fips_run_selftests(1);
      }
      var $err_0 = (__gcry_fips_is_operational() | 0) != 0 & 1;
    } else if (($cmd | 0) == 19) {
      __gcry_set_log_verbosity(HEAP32[$arg_ptr$s2]);
      var $err_0 = 0;
    } else if (($cmd | 0) == 22) {
      _global_init();
      __gcry_secure_random_alloc();
      var $err_0 = 0;
    } else if (($cmd | 0) == 45) {
      __gcry_set_random_seed_file(HEAP32[$arg_ptr$s2]);
      var $err_0 = 0;
    } else if (($cmd | 0) == 63) {
      var $138 = HEAP32[$arg_ptr$s2];
      var $i_0 = 0;
      while (1) {
        var $i_0;
        if (($i_0 | 0) == 5) {
          var $err_0 = 88;
          break L929;
        }
        if ((_strcmp(HEAP32[($i_0 << 3) + 455280 >> 2], $138) | 0) == 0) {
          break;
        } else {
          var $i_0 = $i_0 + 1 | 0;
        }
      }
      HEAP32[114415] = HEAP32[114415] | HEAP32[($i_0 << 3) + 455276 >> 2];
      var $err_0 = 0;
    } else if (($cmd | 0) == 23 | ($cmd | 0) == 49 | ($cmd | 0) == 61 | ($cmd | 0) == 62) {
      var $err_0 = 0;
    } else {
      var $err_0 = 61;
    }
  } while (0);
  var $err_0;
  return _gcry_error1288($err_0);
}
__gcry_vcontrol["X"] = 1;
function _gpg_error1287() {
  return _gpg_err_make1339(1, 60);
}
function _print_config($fnc, $fp) {
  var __stackBase__ = STACKTOP;
  FUNCTION_TABLE[$fnc]($fp, 465484, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 487604, tempInt));
  FUNCTION_TABLE[$fnc]($fp, 490616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 489728, tempInt));
  FUNCTION_TABLE[$fnc]($fp, 488048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 487332, tempInt));
  FUNCTION_TABLE[$fnc]($fp, 486396, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 485560, tempInt));
  FUNCTION_TABLE[$fnc]($fp, 484684, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  FUNCTION_TABLE[$fnc]($fp, 484e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 446813, tempInt));
  FUNCTION_TABLE[$fnc]($fp, 483044, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  FUNCTION_TABLE[$fnc]($fp, 481728, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  var $11 = (__gcry_fips_mode() | 0) != 0 ? 121 : 110;
  var $14 = (__gcry_enforced_fips_mode() | 0) != 0 ? 121 : 110;
  FUNCTION_TABLE[$fnc]($fp, 481256, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $11, HEAP32[tempInt + 4 >> 2] = $14, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function _gcry_error1288($code) {
  return _gcry_err_make1340($code);
}
function __gcry_control($cmd, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  var $3 = __gcry_vcontrol($cmd, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return $3;
}
function __gcry_strerror($err) {
  return _gpg_strerror($err);
}
function __gcry_strsource($err) {
  return _gpg_strsource($err);
}
function __gcry_err_code_from_errno($err) {
  return _gpg_err_code_from_errno($err);
}
function __gcry_err_code_to_errno($code) {
  return _gpg_err_code_from_errno($code);
}
function __gcry_err_make_from_errno($source, $err) {
  return _gpg_err_make_from_errno($source, $err);
}
function _gpg_err_make_from_errno($source, $err) {
  return _gpg_err_make1339($source, _gpg_err_code_from_errno($err));
}
function __gcry_error_from_errno($err) {
  return _gcry_error1288(_gpg_err_code_from_errno($err));
}
function __gcry_set_allocation_handler($new_alloc_func, $new_alloc_secure_func, $new_is_secure_func, $new_realloc_func, $new_free_func) {
  _global_init();
  if ((__gcry_fips_mode() | 0) != 0) {
    __gcry_inactivate_fips_mode(489428);
  }
  HEAP32[116129] = $new_alloc_func;
  HEAP32[116128] = $new_alloc_secure_func;
  HEAP32[113815] = $new_is_secure_func;
  HEAP32[109805] = $new_realloc_func;
  HEAP32[113860] = $new_free_func;
  return;
}
function __gcry_set_outofcore_handler($f, $value) {
  var __stackBase__ = STACKTOP;
  _global_init();
  if ((__gcry_fips_mode() | 0) == 0) {
    HEAP32[110120] = $f;
    HEAP32[110119] = $value;
    STACKTOP = __stackBase__;
    return;
  } else {
    __gcry_log_info(480940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = __stackBase__;
    return;
  }
}
function __gcry_malloc($n) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $mem = __stackBase__;
  HEAP32[$mem >> 2] = 0;
  _do_malloc($n, 0, $mem);
  STACKTOP = __stackBase__;
  return HEAP32[$mem >> 2];
}
function _global_init() {
  if (HEAP8[464504]) {
    return;
  }
  HEAP8[464504] = 1;
  if ((__gcry_ath_init() | 0) != 0) {
    __gcry_bug(480072, 139, 494332);
  }
  __gcry_initialize_fips_mode(HEAP8[455444] & 1);
  __gcry_cipher_init();
  __gcry_md_init();
  __gcry_pk_init();
  return;
}
function __gcry_check_heap($a) {
  return;
}
function __gcry_get_hw_features() {
  return 0;
}
function __gcry_detect_hw_features($disabled_features) {
  return;
}
function __gcry_set_gettext_handler($f) {
  HEAP32[102597] = $f;
  return;
}
function __gcry_set_fatalerror_handler($fnc, $value) {
  HEAP32[113864] = $value;
  HEAP32[113865] = $fnc;
  return;
}
function __gcry_set_log_handler($f, $opaque) {
  HEAP32[112772] = $f;
  HEAP32[112771] = $opaque;
  return;
}
function __gcry_set_log_verbosity($level) {
  HEAP32[102596] = $level;
  return;
}
function _gpg_err_make1339($source, $code) {
  if (($code | 0) == 0) {
    var $8 = 0;
    var $8;
    return $8;
  }
  var $8 = $source << 24 & 2130706432 | $code & 65535;
  var $8;
  return $8;
}
function __gcry_log_verbosity($level) {
  return (HEAP32[102596] | 0) >= ($level | 0) & 1;
}
function _parse_version_number($s, $number) {
  do {
    if (HEAP8[$s] << 24 >> 24 == 48) {
      if (((HEAP8[$s + 1 | 0] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
        var $_0 = 0;
      } else {
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  L1032 : do {
    if (((HEAP8[$s] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
      var $val_06 = 0;
      var $_017 = $s;
      while (1) {
        var $_017;
        var $val_06;
        var $13 = (HEAP8[$_017] << 24 >> 24) + (($val_06 * 10 & -1) - 48) | 0;
        var $14 = $_017 + 1 | 0;
        if (((HEAP8[$14] << 24 >> 24) - 48 | 0) >>> 0 < 10) {
          var $val_06 = $13;
          var $_017 = $14;
        } else {
          var $val_0_lcssa = $13;
          var $_01_lcssa = $14;
          break L1032;
        }
      }
    } else {
      var $val_0_lcssa = 0;
      var $_01_lcssa = $s;
    }
  } while (0);
  var $_01_lcssa;
  var $val_0_lcssa;
  HEAP32[$number >> 2] = $val_0_lcssa;
  var $_0 = ($val_0_lcssa | 0) < 0 ? 0 : $_01_lcssa;
  var $_0;
  return $_0;
}
function __gcry_module_id_new($modules, $id_new) {
  var label = 0;
  var $mod_id_0 = 600;
  L1038 : while (1) {
    var $mod_id_0;
    var $2 = $mod_id_0 >>> 0 < 65500;
    if (!$2) {
      var $err_0 = 63;
      label = 872;
      break;
    }
    L1041 : do {
      if (($mod_id_0 | 0) == 1024) {
        var $mod_id_1 = 4095;
      } else {
        var $module_0 = $modules;
        while (1) {
          var $module_0;
          if (($module_0 | 0) == 0) {
            break L1038;
          }
          if (($mod_id_0 | 0) == (HEAP32[$module_0 + 24 >> 2] | 0)) {
            var $mod_id_1 = $mod_id_0;
            break L1041;
          }
          var $module_0 = HEAP32[$module_0 >> 2];
        }
      }
    } while (0);
    var $mod_id_1;
    var $mod_id_0 = $mod_id_1 + 1 | 0;
  }
  if (label == 872) {
    var $err_0;
    return $err_0;
  }
  if (!$2) {
    var $err_0 = 63;
    var $err_0;
    return $err_0;
  }
  HEAP32[$id_new >> 2] = $mod_id_0;
  var $err_0 = 0;
  var $err_0;
  return $err_0;
}
function __gcry_module_lookup_id($entries, $mod_id) {
  var label = 0;
  var $entry_0 = $entries;
  while (1) {
    var $entry_0;
    if (($entry_0 | 0) == 0) {
      label = 881;
      break;
    }
    if ((HEAP32[$entry_0 + 24 >> 2] | 0) == ($mod_id | 0)) {
      break;
    }
    var $entry_0 = HEAP32[$entry_0 >> 2];
  }
  if (label == 881) {
    return $entry_0;
  }
  var $8 = $entry_0 + 20 | 0;
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] + 1 | 0;
  return $entry_0;
}
function _do_malloc($n, $flags, $mem) {
  var label = 0;
  do {
    if (($flags & 1 | 0) == 0) {
      label = 888;
    } else {
      if ((_get_no_secure_memory() | 0) != 0) {
        label = 888;
        break;
      }
      var $7 = HEAP32[116128];
      if (($7 | 0) == 0) {
        var $m_0 = __gcry_private_malloc_secure($n);
        break;
      } else {
        var $m_0 = FUNCTION_TABLE[$7]($n);
        break;
      }
    }
  } while (0);
  do {
    if (label == 888) {
      var $14 = HEAP32[116129];
      if (($14 | 0) == 0) {
        var $m_0 = __gcry_private_malloc($n);
        break;
      } else {
        var $m_0 = FUNCTION_TABLE[$14]($n);
        break;
      }
    }
  } while (0);
  var $m_0;
  if (($m_0 | 0) != 0) {
    HEAP32[$mem >> 2] = $m_0;
    return;
  }
  if ((HEAP32[___errno_location() >> 2] | 0) == 0) {
    _gpg_err_set_errno(12);
  }
  ___errno_location();
  return;
}
function __gcry_malloc_secure($n) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $mem = __stackBase__;
  HEAP32[$mem >> 2] = 0;
  _do_malloc($n, 1, $mem);
  STACKTOP = __stackBase__;
  return HEAP32[$mem >> 2];
}
function __gcry_is_secure($a) {
  do {
    if ((_get_no_secure_memory() | 0) == 0) {
      var $4 = HEAP32[113815];
      if (($4 | 0) == 0) {
        var $_0 = __gcry_private_is_secure($a);
        break;
      } else {
        var $_0 = FUNCTION_TABLE[$4]($a);
        break;
      }
    } else {
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _get_no_secure_memory() {
  var $_b1 = HEAP8[440720];
  do {
    if ($_b1) {
      if ((__gcry_enforced_fips_mode() | 0) == 0) {
        var $_0 = $_b1 & 1;
        break;
      } else {
        HEAP8[440720] = 0;
        var $_0 = 0;
        break;
      }
    } else {
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  return $_0;
}
function __gcry_realloc($a, $n) {
  do {
    if (($a | 0) == 0) {
      var $_0 = __gcry_malloc($n);
    } else {
      if (($n | 0) == 0) {
        __gcry_free($a);
        var $_0 = 0;
        break;
      }
      var $8 = HEAP32[109805];
      if (($8 | 0) == 0) {
        var $p_0 = __gcry_private_realloc($a, $n);
      } else {
        var $p_0 = FUNCTION_TABLE[$8]($a, $n);
      }
      var $p_0;
      if (($p_0 | 0) != 0) {
        var $_0 = $p_0;
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) != 0) {
        var $_0 = 0;
        break;
      }
      _gpg_err_set_errno(12);
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  return $_0;
}
function __gcry_free($p) {
  if (($p | 0) == 0) {
    return;
  }
  var $4 = HEAP32[___errno_location() >> 2];
  var $5 = HEAP32[113860];
  if (($5 | 0) == 0) {
    __gcry_private_free($p);
  } else {
    FUNCTION_TABLE[$5]($p);
  }
  if (($4 | 0) == 0) {
    return;
  }
  _gpg_err_set_errno($4);
  return;
}
function __gcry_calloc($n, $m) {
  var $1 = $m * $n & -1;
  do {
    if (($m | 0) != 0) {
      if ((Math.floor(($1 >>> 0) / ($m >>> 0)) | 0) == ($n | 0)) {
        break;
      }
      _gpg_err_set_errno(12);
      var $_0 = 0;
      var $_0;
      return $_0;
    }
  } while (0);
  var $8 = __gcry_malloc($1);
  if (($8 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  _memset($8, 0, $1);
  var $_0 = $8;
  var $_0;
  return $_0;
}
function __gcry_calloc_secure($n, $m) {
  var $1 = $m * $n & -1;
  do {
    if (($m | 0) != 0) {
      if ((Math.floor(($1 >>> 0) / ($m >>> 0)) | 0) == ($n | 0)) {
        break;
      }
      _gpg_err_set_errno(12);
      var $_0 = 0;
      var $_0;
      return $_0;
    }
  } while (0);
  var $8 = __gcry_malloc_secure($1);
  if (($8 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  _memset($8, 0, $1);
  var $_0 = $8;
  var $_0;
  return $_0;
}
function __gcry_strdup($string) {
  var $4 = _strlen($string) + 1 | 0;
  if ((__gcry_is_secure($string) | 0) == 0) {
    var $string_cp_0 = __gcry_malloc($4);
  } else {
    var $string_cp_0 = __gcry_malloc_secure($4);
  }
  var $string_cp_0;
  if (($string_cp_0 | 0) == 0) {
    return $string_cp_0;
  }
  _strcpy($string_cp_0, $string);
  return $string_cp_0;
}
function __gcry_get_debug_flag($mask) {
  if ((__gcry_fips_mode() | 0) != 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = HEAP32[114488] & $mask;
  var $_0;
  return $_0;
}
function __gcry_set_progress_handler($cb, $cb_data) {
  __gcry_register_pk_dsa_progress($cb, $cb_data);
  __gcry_register_pk_elg_progress($cb, $cb_data);
  __gcry_register_primegen_progress($cb, $cb_data);
  __gcry_register_random_progress($cb, $cb_data);
  return;
}
function _gcry_err_make1340($code) {
  return _gpg_err_make1339(32, $code);
}
function __gcry_gettext($key) {
  var $1 = HEAP32[102597];
  if (($1 | 0) == 0) {
    var $_0 = $key;
  } else {
    var $_0 = FUNCTION_TABLE[$1]($key);
  }
  var $_0;
  return $_0;
}
function _write2stderr($s) {
  _write(2, $s, _strlen($s));
  return;
}
function __gcry_log($level, $fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv($level, $fmt, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_log_info($fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv(10, $fmt, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_log_info_with_dummy_fp($fp, $fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv(10, $fmt, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return 0;
}
function __gcry_log_error($fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv(30, $fmt, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_log_debug($fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv(100, $fmt, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_log_printf($fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  if (($fmt | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv(0, $fmt, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_log_printhex($text, $buffer, $length) {
  var __stackBase__ = STACKTOP;
  var $1 = ($text | 0) != 0;
  do {
    if ($1) {
      if (HEAP8[$text] << 24 >> 24 == 0) {
        break;
      }
      __gcry_log_debug(472076, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $text, tempInt));
    }
  } while (0);
  L1181 : do {
    if (($length | 0) != 0) {
      __gcry_log_printf(470612, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$buffer], tempInt));
      var $_02 = $length - 1 | 0;
      if (($_02 | 0) == 0) {
        break;
      } else {
        var $buffer_pn = $buffer;
        var $_04 = $_02;
      }
      while (1) {
        var $_04;
        var $buffer_pn;
        var $p_03 = $buffer_pn + 1 | 0;
        __gcry_log_printf(469196, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$p_03], tempInt));
        var $_0 = $_04 - 1 | 0;
        if (($_0 | 0) == 0) {
          break L1181;
        } else {
          var $buffer_pn = $p_03;
          var $_04 = $_0;
        }
      }
    }
  } while (0);
  if (!$1) {
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_log_printf(480920, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __gcry_burn_stack($bytes) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  var $_vlen_01 = 64;
  var $_vptr_02 = __stackBase__ | 0;
  while (1) {
    var $_vptr_02;
    var $_vlen_01;
    HEAP8[$_vptr_02] = 0;
    var $4 = $_vlen_01 - 1 | 0;
    if (($4 | 0) == 0) {
      break;
    } else {
      var $_vlen_01 = $4;
      var $_vptr_02 = $_vptr_02 + 1 | 0;
    }
  }
  var $7 = $bytes - 64 | 0;
  if (($7 | 0) <= 0) {
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_burn_stack($7);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_module_add($entries, $mod_id, $spec, $extraspec, $module) {
  var $7$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $1 = __stackBase__;
  HEAP32[$1 >> 2] = $mod_id;
  do {
    if (($mod_id | 0) == 0) {
      var $5 = __gcry_module_id_new(HEAP32[$entries >> 2], $1);
      if (($5 | 0) == 0) {
        break;
      } else {
        var $err_13 = $5;
      }
      var $err_13;
      STACKTOP = __stackBase__;
      return $err_13;
    }
  } while (0);
  var $7 = __gcry_malloc(28), $7$s2 = $7 >> 2;
  var $8 = $7;
  do {
    if (($7 | 0) == 0) {
      var $13 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      if (($13 | 0) == 0) {
        break;
      } else {
        var $err_13 = $13;
      }
      var $err_13;
      STACKTOP = __stackBase__;
      return $err_13;
    }
  } while (0);
  HEAP32[$7$s2 + 4] = 0;
  HEAP32[$7$s2 + 5] = 1;
  HEAP32[$7$s2 + 2] = $spec;
  HEAP32[$7$s2 + 3] = $extraspec;
  HEAP32[$7$s2 + 6] = HEAP32[$1 >> 2];
  var $27 = $7;
  HEAP32[$27 >> 2] = HEAP32[$entries >> 2];
  HEAP32[$7$s2 + 1] = $entries;
  var $30 = HEAP32[$entries >> 2];
  if (($30 | 0) != 0) {
    HEAP32[$30 + 4 >> 2] = $27;
  }
  HEAP32[$entries >> 2] = $8;
  if (($module | 0) == 0) {
    var $err_13 = 0;
    var $err_13;
    STACKTOP = __stackBase__;
    return $err_13;
  }
  HEAP32[$module >> 2] = $8;
  var $err_13 = 0;
  var $err_13;
  STACKTOP = __stackBase__;
  return $err_13;
}
__gcry_module_add["X"] = 1;
function __gcry_xmalloc($n) {
  var label = 0;
  while (1) {
    var $2 = __gcry_malloc($n);
    if (($2 | 0) != 0) {
      label = 1014;
      break;
    }
    var $6 = (__gcry_fips_mode() | 0) == 0;
    var $7 = HEAP32[110120];
    if (!($6 & ($7 | 0) != 0)) {
      label = 1013;
      break;
    }
    if ((FUNCTION_TABLE[$7](HEAP32[110119], $n, 0) | 0) == 0) {
      label = 1013;
      break;
    }
  }
  if (label == 1013) {
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
  } else if (label == 1014) {
    return $2;
  }
}
function __gcry_xrealloc($a, $n) {
  var label = 0;
  while (1) {
    var $2 = __gcry_realloc($a, $n);
    if (($2 | 0) != 0) {
      label = 1020;
      break;
    }
    var $6 = (__gcry_fips_mode() | 0) == 0;
    var $7 = HEAP32[110120];
    if (!($6 & ($7 | 0) != 0)) {
      label = 1019;
      break;
    }
    var $10 = HEAP32[110119];
    var $13 = (__gcry_is_secure($a) | 0) != 0 ? 3 : 2;
    if ((FUNCTION_TABLE[$7]($10, $n, $13) | 0) == 0) {
      label = 1019;
      break;
    }
  }
  if (label == 1020) {
    return $2;
  } else if (label == 1019) {
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
  }
}
function __gcry_xmalloc_secure($n) {
  var label = 0;
  while (1) {
    var $2 = __gcry_malloc_secure($n);
    if (($2 | 0) != 0) {
      label = 1026;
      break;
    }
    var $6 = (__gcry_fips_mode() | 0) == 0;
    var $7 = HEAP32[110120];
    if (!($6 & ($7 | 0) != 0)) {
      label = 1025;
      break;
    }
    if ((FUNCTION_TABLE[$7](HEAP32[110119], $n, 1) | 0) == 0) {
      label = 1025;
      break;
    }
  }
  if (label == 1025) {
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), __gcry_gettext(476880));
  } else if (label == 1026) {
    return $2;
  }
}
function __gcry_xcalloc($n, $m) {
  var $1 = $m * $n & -1;
  if (($m | 0) == 0) {
    var $11 = __gcry_xmalloc($1);
    _memset($11, 0, $1);
    return $11;
  }
  if ((Math.floor(($1 >>> 0) / ($m >>> 0)) | 0) == ($n | 0)) {
    var $11 = __gcry_xmalloc($1);
    _memset($11, 0, $1);
    return $11;
  } else {
    _gpg_err_set_errno(12);
    __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
  }
}
function __gcry_xcalloc_secure($n, $m) {
  var $1 = $m * $n & -1;
  do {
    if (($m | 0) != 0) {
      if ((Math.floor(($1 >>> 0) / ($m >>> 0)) | 0) == ($n | 0)) {
        break;
      }
      _gpg_err_set_errno(12);
      __gcry_fatal_error(_gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]), 0);
    }
  } while (0);
  var $11 = __gcry_xmalloc_secure($1);
  _memset($11, 0, $1);
  return $11;
}
function __gcry_xstrdup($string) {
  var label = 0;
  while (1) {
    var $2 = __gcry_strdup($string);
    if (($2 | 0) != 0) {
      label = 1044;
      break;
    }
    var $6 = (__gcry_is_secure($string) | 0) != 0;
    var $8 = (__gcry_fips_mode() | 0) == 0;
    var $9 = HEAP32[110120];
    if (!($8 & ($9 | 0) != 0)) {
      break;
    }
    var $12 = _strlen($string);
    if ((FUNCTION_TABLE[$9](HEAP32[110119], $12, $6 & 1) | 0) == 0) {
      break;
    }
  }
  if (label == 1044) {
    return $2;
  }
  var $20 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
  if (!$6) {
    var $24 = 0;
    var $24;
    __gcry_fatal_error($20, $24);
  }
  var $24 = __gcry_gettext(476880);
  var $24;
  __gcry_fatal_error($20, $24);
}
function __gcry_fatal_error($rc, $text) {
  if (($text | 0) == 0) {
    var $_0 = _gpg_strerror($rc);
  } else {
    var $_0 = $text;
  }
  var $_0;
  var $5 = HEAP32[113865];
  do {
    if (($5 | 0) != 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        break;
      }
      FUNCTION_TABLE[$5](HEAP32[113864], $rc, $_0);
    }
  } while (0);
  __gcry_fips_signal_error(486988, 84, 495452, 1, $_0);
  _write2stderr(489336);
  _write2stderr($_0);
  _write2stderr(480920);
  __gcry_secmem_term();
  _abort();
}
function __gcry_logv($level, $fmt, $arg_ptr) {
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[112772];
  if (($1 | 0) == 0) {
    if (($level | 0) == 40) {
      _fwrite(467572, 7, 1, HEAP32[_stderr >> 2]);
    } else if (($level | 0) == 100) {
      _fwrite(490608, 5, 1, HEAP32[_stderr >> 2]);
    } else if (($level | 0) == 50) {
      _fwrite(465468, 13, 1, HEAP32[_stderr >> 2]);
    } else if (!(($level | 0) == 0 | ($level | 0) == 10 | ($level | 0) == 20 | ($level | 0) == 30)) {
      _fprintf(HEAP32[_stderr >> 2], 489668, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $level, tempInt));
    }
    _fprintf(HEAP32[_stderr >> 2], $fmt, $arg_ptr);
  } else {
    FUNCTION_TABLE[$1](HEAP32[112771], $level, $fmt, $arg_ptr);
  }
  if (($level | 0) == 50 | ($level | 0) == 40) {
    __gcry_fips_signal_error(486988, 139, 495352, 1, 488016);
    __gcry_secmem_term();
    _abort();
  } else {
    STACKTOP = __stackBase__;
    return;
  }
}
function __gcry_bug($file, $line, $func) {
  __gcry_log(50, 476848, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $file, HEAP32[tempInt + 4 >> 2] = $line, HEAP32[tempInt + 8 >> 2] = $func, tempInt));
  _abort();
}
function __gcry_assert_failed($expr, $file, $line, $func) {
  __gcry_log(50, 473976, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $expr, HEAP32[tempInt + 4 >> 2] = $file, HEAP32[tempInt + 8 >> 2] = $line, HEAP32[tempInt + 12 >> 2] = $func, tempInt));
  _abort();
}
function __gcry_log_fatal($fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv(40, $fmt, HEAP32[$arg_ptr >> 2]);
  _abort();
}
function __gcry_log_bug($fmt, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  __gcry_logv(50, $fmt, HEAP32[$arg_ptr >> 2]);
  _abort();
}
function _ptr_into_pool_p($p) {
  var $1 = HEAP32[110054];
  if ($1 >>> 0 > $p >>> 0) {
    var $10 = 0;
    var $10;
    var $11 = $10 & 1;
    return $11;
  }
  var $10 = $p >>> 0 < (HEAP32[110045] + $1 | 0) >>> 0;
  var $10;
  var $11 = $10 & 1;
  return $11;
}
function _stats_update($add, $sub) {
  if (($add | 0) != 0) {
    HEAP32[114531] = HEAP32[114531] + $add | 0;
    HEAP32[114530] = HEAP32[114530] + 1 | 0;
  }
  if (($sub | 0) == 0) {
    return;
  }
  HEAP32[114531] = HEAP32[114531] - $sub | 0;
  HEAP32[114530] = HEAP32[114530] - 1 | 0;
  return;
}
function __gcry_module_use($module) {
  var $1 = $module + 20 | 0;
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1 | 0;
  return;
}
function __gcry_module_list($modules, $list, $list_length) {
  L1303 : do {
    if (($modules | 0) == 0) {
      var $length_0_lcssa = 0;
    } else {
      var $module_03 = $modules;
      var $length_04 = 0;
      while (1) {
        var $length_04;
        var $module_03;
        var $3 = HEAP32[$module_03 >> 2];
        var $4 = $length_04 + 1 | 0;
        if (($3 | 0) == 0) {
          var $length_0_lcssa = $4;
          break L1303;
        } else {
          var $module_03 = $3;
          var $length_04 = $4;
        }
      }
    }
  } while (0);
  var $length_0_lcssa;
  if (($list | 0) == 0) {
    HEAP32[$list_length >> 2] = $length_0_lcssa;
    return 0;
  }
  var $8 = HEAP32[$list_length >> 2];
  var $_length_0 = ($length_0_lcssa | 0) > ($8 | 0) ? $8 : $length_0_lcssa;
  L1311 : do {
    if (($_length_0 | 0) > 0) {
      var $11 = $length_0_lcssa ^ -1;
      var $12 = $8 ^ -1;
      var $14 = (($11 | 0) > ($12 | 0) ? $11 : $12) ^ -1;
      var $module_11 = $modules;
      var $i_02 = 0;
      while (1) {
        var $i_02;
        var $module_11;
        HEAP32[$list + ($i_02 << 2) >> 2] = HEAP32[$module_11 + 24 >> 2];
        var $21 = $i_02 + 1 | 0;
        if (($21 | 0) == ($14 | 0)) {
          break L1311;
        } else {
          var $module_11 = HEAP32[$module_11 >> 2];
          var $i_02 = $21;
        }
      }
    }
  } while (0);
  if (($_length_0 | 0) >= (HEAP32[$list_length >> 2] | 0)) {
    return 0;
  }
  HEAP32[$list_length >> 2] = $_length_0;
  return 0;
}
function __gcry_module_lookup($entries, $data, $func) {
  var label = 0;
  var $entry_0 = $entries;
  while (1) {
    var $entry_0;
    if (($entry_0 | 0) == 0) {
      label = 1100;
      break;
    }
    if ((FUNCTION_TABLE[$func](HEAP32[$entry_0 + 8 >> 2], $data) | 0) != 0) {
      break;
    }
    var $entry_0 = HEAP32[$entry_0 >> 2];
  }
  if (label == 1100) {
    return $entry_0;
  }
  var $9 = $entry_0 + 20 | 0;
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] + 1 | 0;
  return $entry_0;
}
function __gcry_module_release($module) {
  if (($module | 0) == 0) {
    return;
  }
  var $3 = $module + 20 | 0;
  var $5 = HEAP32[$3 >> 2] - 1 | 0;
  HEAP32[$3 >> 2] = $5;
  if (($5 | 0) != 0) {
    return;
  }
  __gcry_module_drop($module);
  return;
}
function __gcry_module_drop($entry) {
  var $1 = $entry | 0;
  var $3 = $entry + 4 | 0;
  HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$1 >> 2];
  var $5 = HEAP32[$1 >> 2];
  if (($5 | 0) == 0) {
    var $11 = $entry;
    __gcry_free($11);
    return;
  }
  HEAP32[$5 + 4 >> 2] = HEAP32[$3 >> 2];
  var $11 = $entry;
  __gcry_free($11);
  return;
}
function __gcry_secmem_set_flags($flags) {
  __gcry_ath_mutex_lock(416920);
  var $2 = HEAP32[102889];
  HEAP32[110179] = $flags & 1;
  var $4 = $flags & 2;
  HEAP32[102889] = $4;
  if (!(($4 | 0) == 0 & ($2 | 0) != 0 & HEAP8[412912])) {
    var $7 = __gcry_ath_mutex_unlock(416920);
    return;
  }
  HEAP8[412912] = 0;
  _print_warn();
  var $7 = __gcry_ath_mutex_unlock(416920);
  return;
}
function _print_warn() {
  var __stackBase__ = STACKTOP;
  if ((HEAP32[110179] | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_log_info(__gcry_gettext(490572), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __gcry_secmem_get_flags() {
  __gcry_ath_mutex_lock(416920);
  var $10 = (HEAP8[440704] ? 4 : 0) | (HEAP32[110179] | 0) != 0 & 1 | ((HEAP32[102889] | 0) != 0 ? 2 : 0);
  __gcry_ath_mutex_unlock(416920);
  return $10;
}
function __gcry_secmem_init($n) {
  __gcry_ath_mutex_lock(416920);
  _secmem_init($n);
  __gcry_ath_mutex_unlock(416920);
  return;
}
function __gcry_secmem_malloc($size) {
  __gcry_ath_mutex_lock(416920);
  var $2 = __gcry_secmem_malloc_internal($size);
  __gcry_ath_mutex_unlock(416920);
  return $2;
}
function __gcry_secmem_malloc_internal($size) {
  var __stackBase__ = STACKTOP;
  do {
    if ((HEAP32[110047] | 0) == 0) {
      _secmem_init(32768);
      if ((HEAP32[110047] | 0) != 0) {
        break;
      }
      __gcry_log_info(__gcry_gettext(489248), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      _gpg_err_set_errno(12);
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  do {
    if (HEAP8[440704]) {
      if ((__gcry_fips_mode() | 0) == 0) {
        break;
      }
      __gcry_log_info(__gcry_gettext(480864), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      _gpg_err_set_errno(12);
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (!((HEAP32[102889] | 0) != 0 | HEAP8[412912] ^ 1)) {
    HEAP8[412912] = 0;
    _print_warn();
  }
  var $21 = $size + 31 & -32;
  var $24 = _mb_get_new(HEAP32[110054], $21);
  if (($24 | 0) == 0) {
    var $29 = 0;
  } else {
    _stats_update($21, 0);
    var $29 = $24 + 8 | 0;
  }
  var $29;
  var $_0 = $29 | 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_secmem_free($a) {
  __gcry_ath_mutex_lock(416920);
  __gcry_secmem_free_internal($a);
  __gcry_ath_mutex_unlock(416920);
  return;
}
function __gcry_secmem_free_internal($a) {
  if (($a | 0) == 0) {
    return;
  }
  var $3 = $a - 8 | 0;
  var $4 = $3;
  var $6 = HEAP32[$3 >> 2];
  L1378 : do {
    if (($6 | 0) != 0) {
      var $_vlen_011 = $6;
      var $_vptr_012 = $a;
      while (1) {
        var $_vptr_012;
        var $_vlen_011;
        HEAP8[$_vptr_012] = -1;
        var $10 = $_vlen_011 - 1 | 0;
        if (($10 | 0) == 0) {
          break;
        } else {
          var $_vlen_011 = $10;
          var $_vptr_012 = $_vptr_012 + 1 | 0;
        }
      }
      if (($6 | 0) == 0) {
        break;
      } else {
        var $_vlen2_08 = $6;
        var $_vptr1_09 = $a;
      }
      while (1) {
        var $_vptr1_09;
        var $_vlen2_08;
        HEAP8[$_vptr1_09] = -86;
        var $14 = $_vlen2_08 - 1 | 0;
        if (($14 | 0) == 0) {
          break;
        } else {
          var $_vlen2_08 = $14;
          var $_vptr1_09 = $_vptr1_09 + 1 | 0;
        }
      }
      if (($6 | 0) == 0) {
        break;
      } else {
        var $_vptr3_04 = $a;
        var $_vlen4_05 = $6;
      }
      while (1) {
        var $_vlen4_05;
        var $_vptr3_04;
        HEAP8[$_vptr3_04] = 85;
        var $18 = $_vlen4_05 - 1 | 0;
        if (($18 | 0) == 0) {
          break;
        } else {
          var $_vptr3_04 = $_vptr3_04 + 1 | 0;
          var $_vlen4_05 = $18;
        }
      }
      if (($6 | 0) == 0) {
        break;
      } else {
        var $_vptr5_01 = $a;
        var $_vlen6_02 = $6;
      }
      while (1) {
        var $_vlen6_02;
        var $_vptr5_01;
        HEAP8[$_vptr5_01] = 0;
        var $21 = $_vlen6_02 - 1 | 0;
        if (($21 | 0) == 0) {
          break L1378;
        } else {
          var $_vptr5_01 = $_vptr5_01 + 1 | 0;
          var $_vlen6_02 = $21;
        }
      }
    }
  } while (0);
  _stats_update(0, $6);
  var $24 = $a - 4 | 0;
  HEAP32[$24 >> 2] = HEAP32[$24 >> 2] & -2;
  _mb_merge($4);
  return;
}
__gcry_secmem_free_internal["X"] = 1;
function __gcry_secmem_realloc($p, $newsize) {
  __gcry_ath_mutex_lock(416920);
  var $4 = HEAP32[$p - 8 >> 2];
  do {
    if ($4 >>> 0 > $newsize >>> 0) {
      var $a_0 = $p;
    } else {
      var $7 = __gcry_secmem_malloc_internal($newsize);
      if (($7 | 0) == 0) {
        var $a_0 = 0;
        break;
      }
      _memcpy($7, $p, $4);
      _memset($7 + $4 | 0, 0, $newsize - $4 | 0);
      __gcry_secmem_free_internal($p);
      var $a_0 = $7;
    }
  } while (0);
  var $a_0;
  __gcry_ath_mutex_unlock(416920);
  return $a_0;
}
function __gcry_private_is_secure($p) {
  if ((HEAP32[110047] | 0) == 0) {
    var $7 = 0;
  } else {
    var $7 = (_ptr_into_pool_p($p) | 0) != 0;
  }
  var $7;
  return $7 & 1;
}
function __gcry_secmem_term() {
  if ((HEAP32[110047] | 0) == 0) {
    return;
  }
  var $4 = HEAP32[110045];
  L1405 : do {
    if (($4 | 0) != 0) {
      var $_vlen_013 = $4;
      var $_vptr_014 = HEAP32[110054];
      while (1) {
        var $_vptr_014;
        var $_vlen_013;
        HEAP8[$_vptr_014] = -1;
        var $9 = $_vlen_013 - 1 | 0;
        if (($9 | 0) == 0) {
          break;
        } else {
          var $_vlen_013 = $9;
          var $_vptr_014 = $_vptr_014 + 1 | 0;
        }
      }
      var $_pr = HEAP32[110045];
      if (($_pr | 0) == 0) {
        break;
      }
      var $_vlen2_08 = $_pr;
      var $_vptr1_09 = HEAP32[110054];
      while (1) {
        var $_vptr1_09;
        var $_vlen2_08;
        HEAP8[$_vptr1_09] = -86;
        var $15 = $_vlen2_08 - 1 | 0;
        if (($15 | 0) == 0) {
          break;
        } else {
          var $_vlen2_08 = $15;
          var $_vptr1_09 = $_vptr1_09 + 1 | 0;
        }
      }
      var $_pr18_pr = HEAP32[110045];
      if (($_pr18_pr | 0) == 0) {
        break;
      }
      var $_vlen4_03 = $_pr18_pr;
      var $_vptr3_04 = HEAP32[110054];
      while (1) {
        var $_vptr3_04;
        var $_vlen4_03;
        HEAP8[$_vptr3_04] = 85;
        var $21 = $_vlen4_03 - 1 | 0;
        if (($21 | 0) == 0) {
          break;
        } else {
          var $_vlen4_03 = $21;
          var $_vptr3_04 = $_vptr3_04 + 1 | 0;
        }
      }
      var $_pr19_pr = HEAP32[110045];
      if (($_pr19_pr | 0) == 0) {
        break;
      }
      var $_vlen6_01 = $_pr19_pr;
      var $_vptr5_02 = HEAP32[110054];
      while (1) {
        var $_vptr5_02;
        var $_vlen6_01;
        HEAP8[$_vptr5_02] = 0;
        var $27 = $_vlen6_01 - 1 | 0;
        if (($27 | 0) == 0) {
          break L1405;
        } else {
          var $_vlen6_01 = $27;
          var $_vptr5_02 = $_vptr5_02 + 1 | 0;
        }
      }
    }
  } while (0);
  if ((HEAP32[110049] | 0) != 0) {
    _munmap(HEAP32[110054], HEAP32[110045]);
  }
  HEAP32[110054] = 0;
  HEAP32[110047] = 0;
  HEAP32[110045] = 0;
  HEAP8[440704] = 0;
  return;
}
__gcry_secmem_term["X"] = 1;
function __gcry_secmem_dump_stats() {
  var __stackBase__ = STACKTOP;
  __gcry_ath_mutex_lock(416920);
  if ((HEAP32[110047] | 0) == 0) {
    var $9 = __gcry_ath_mutex_unlock(416920);
    STACKTOP = __stackBase__;
    return;
  }
  var $6 = HEAP32[110045];
  var $7 = HEAP32[114530];
  __gcry_log_info(486500, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = HEAP32[114531], HEAP32[tempInt + 4 >> 2] = $6, HEAP32[tempInt + 8 >> 2] = $7, tempInt));
  var $9 = __gcry_ath_mutex_unlock(416920);
  STACKTOP = __stackBase__;
  return;
}
function _mb_merge($mb) {
  var $1 = _mb_get_prev($mb);
  var $2 = _mb_get_next($mb);
  do {
    if (($1 | 0) == 0) {
      var $_0 = $mb;
    } else {
      if ((HEAP32[$1 + 4 >> 2] & 1 | 0) != 0) {
        var $_0 = $mb;
        break;
      }
      var $12 = $1 | 0;
      HEAP32[$12 >> 2] = HEAP32[$mb >> 2] + HEAP32[$12 >> 2] + 8 | 0;
      var $_0 = $1;
    }
  } while (0);
  var $_0;
  if (($2 | 0) == 0) {
    return;
  }
  if ((HEAP32[$2 + 4 >> 2] & 1 | 0) != 0) {
    return;
  }
  var $26 = $_0 | 0;
  HEAP32[$26 >> 2] = HEAP32[$2 >> 2] + HEAP32[$26 >> 2] + 8 | 0;
  return;
}
function _mb_get_prev($mb) {
  var $2 = HEAP32[110054];
  if (($2 | 0) == ($mb | 0)) {
    var $mb_prev_1 = 0;
    var $mb_prev_1;
    return $mb_prev_1;
  } else {
    var $mb_prev_0 = $2;
  }
  while (1) {
    var $mb_prev_0;
    var $4 = _mb_get_next($mb_prev_0);
    if (($4 | 0) == ($mb | 0)) {
      var $mb_prev_1 = $mb_prev_0;
      break;
    } else {
      var $mb_prev_0 = $4;
    }
  }
  var $mb_prev_1;
  return $mb_prev_1;
}
function _mb_get_next($mb) {
  var $5 = $mb + HEAP32[$mb >> 2] + 8 | 0;
  return (_ptr_into_pool_p($5) | 0) == 0 ? 0 : $5;
}
function _mb_get_new($block, $size) {
  var $11$s2;
  var label = 0;
  var $mb_0 = $block;
  while (1) {
    var $mb_0;
    var $2 = $mb_0;
    if ((_ptr_into_pool_p($2) | 0) == 0) {
      break;
    }
    var $6 = $mb_0 + 4 | 0;
    var $7 = HEAP32[$6 >> 2];
    if (($7 & 1 | 0) == 0) {
      var $11$s2 = ($mb_0 | 0) >> 2;
      if (HEAP32[$11$s2] >>> 0 >= $size >>> 0) {
        label = 1207;
        break;
      }
    }
    var $mb_0 = _mb_get_next($mb_0);
  }
  do {
    if (label == 1207) {
      HEAP32[$6 >> 2] = $7 | 1;
      var $17 = HEAP32[$11$s2] - $size | 0;
      if ($17 >>> 0 <= 8) {
        break;
      }
      var $21 = $mb_0 + 8 | 0;
      var $22 = $21 + $size | 0;
      HEAP32[$22 >> 2] = $17 - 8 | 0;
      HEAP32[$size + ($21 + 4) >> 2] = 0;
      HEAP32[$11$s2] = $size;
      _mb_merge($22);
    }
  } while (0);
  if ((_ptr_into_pool_p($2) | 0) != 0) {
    var $mb_1 = $mb_0;
    var $mb_1;
    return $mb_1;
  }
  _gpg_err_set_errno(12);
  var $mb_1 = 0;
  var $mb_1;
  return $mb_1;
}
function __gcry_sexp_dump($a) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  if (($a | 0) == 0) {
    __gcry_log_printf(486140, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = __stackBase__;
    return;
  }
  var $indent_0_ph = 0;
  var $p_0_ph = $a | 0;
  L1470 : while (1) {
    var $p_0_ph;
    var $indent_0_ph;
    var $5 = $indent_0_ph << 1;
    var $6 = $indent_0_ph << 1;
    var $p_0 = $p_0_ph;
    while (1) {
      var $p_0;
      var $7 = HEAP8[$p_0];
      var $8 = $7 & 255;
      if ($7 << 24 >> 24 == 0) {
        break L1470;
      }
      var $11 = $p_0 + 1 | 0;
      if (($8 | 0) == 3) {
        label = 1221;
        break;
      } else if (($8 | 0) == 4) {
        label = 1222;
        break;
      } else if (($8 | 0) == 1) {
        var $20 = $11;
        var $srcval = (tempInt = HEAPU8[$20] | HEAPU8[$20 + 1] << 8, tempInt << 16 >> 16);
        __gcry_log_printf(473916, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $6, HEAP32[tempInt + 4 >> 2] = 480860, tempInt));
        var $22 = $srcval & 65535;
        _dump_string($p_0 + 3 | 0, $22);
        __gcry_log_printf(472044, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        var $p_0 = $22 + ($p_0 + 3) | 0;
        continue;
      } else {
        __gcry_log_printf(470560, (tempInt = STACKTOP, STACKTOP = STACKTOP + 12 | 0, HEAP32[tempInt >> 2] = $5, HEAP32[tempInt + 4 >> 2] = 480860, HEAP32[tempInt + 8 >> 2] = $8, tempInt));
        var $p_0 = $11;
        continue;
      }
    }
    if (label == 1221) {
      label = 0;
      __gcry_log_printf(489180, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $indent_0_ph << 1, HEAP32[tempInt + 4 >> 2] = 480860, tempInt));
      var $indent_0_ph = $indent_0_ph + 1 | 0;
      var $p_0_ph = $11;
      continue;
    } else if (label == 1222) {
      label = 0;
      var $indent_0_ = ($indent_0_ph | 0) == 0 ? 0 : $indent_0_ph - 1 | 0;
      __gcry_log_printf(476768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $indent_0_ << 1, HEAP32[tempInt + 4 >> 2] = 480860, tempInt));
      var $indent_0_ph = $indent_0_;
      var $p_0_ph = $11;
      continue;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function _secmem_init($n) {
  var __stackBase__ = STACKTOP;
  if (($n | 0) != 0) {
    var $_n = $n >>> 0 < 16384 ? 16384 : $n;
    if ((HEAP32[110047] | 0) == 0) {
      _init_pool($_n);
      _lock_pool(HEAP32[110054], $_n);
      STACKTOP = __stackBase__;
      return;
    } else {
      __gcry_log_error(473928, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      STACKTOP = __stackBase__;
      return;
    }
  }
  HEAP8[457664] = 1;
  var $3 = _getgid();
  if (($3 | 0) == (_getgid() | 0)) {
    STACKTOP = __stackBase__;
    return;
  }
  do {
    if ((_setgid($3) | 0) == 0) {
      if ((_getgid() | 0) != (_getgid() | 0)) {
        break;
      }
      if ((_setgid(0) | 0) == 0) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  __gcry_log_fatal(476780, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
function _init_pool($n) {
  var __stackBase__ = STACKTOP;
  HEAP32[110045] = $n;
  if (HEAP8[457664]) {
    __gcry_log_bug(469168, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  var $3 = _sysconf(8);
  var $5 = ($3 | 0) > 0 ? $3 : 4096;
  var $10 = HEAP32[110045] - 1 + $5 & -$5;
  HEAP32[110045] = $10;
  var $11 = _mmap(0, $10, 3, 4098, -1, 0);
  HEAP32[110054] = $11;
  if (($11 | 0) == -1) {
    var $14 = HEAP32[110045];
    var $17 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_info(467524, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $14, HEAP32[tempInt + 4 >> 2] = $17, tempInt));
  } else {
    HEAP32[110049] = 1;
    HEAP32[110047] = 1;
  }
  if ((HEAP32[110047] | 0) != 0) {
    var $30 = HEAP32[110054];
    var $31 = HEAP32[110045];
    var $32 = $30;
    HEAP32[$32 >> 2] = $31;
    var $33 = $30 + 4 | 0;
    var $34 = $33;
    HEAP32[$34 >> 2] = 0;
    STACKTOP = __stackBase__;
    return;
  }
  var $24 = _malloc(HEAP32[110045]);
  HEAP32[110054] = $24;
  if (($24 | 0) == 0) {
    __gcry_log_fatal(465428, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[110045], tempInt));
  }
  HEAP32[110047] = 1;
  var $30 = HEAP32[110054];
  var $31 = HEAP32[110045];
  var $32 = $30;
  HEAP32[$32 >> 2] = $31;
  var $33 = $30 + 4 | 0;
  var $34 = $33;
  HEAP32[$34 >> 2] = 0;
  STACKTOP = __stackBase__;
  return;
}
function _lock_pool($p, $n) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $1 = _getgid();
  var $2 = ($1 | 0) != 0;
  do {
    if ($2) {
      HEAP32[___errno_location() >> 2] = 1;
      var $err_02 = HEAP32[___errno_location() >> 2];
      label = 1260;
      break;
    } else {
      var $7 = _mlock($p, $n);
      if (($7 | 0) == 0) {
        STACKTOP = __stackBase__;
        return;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) == 0) {
        var $err_0 = $7;
      } else {
        var $err_0 = HEAP32[___errno_location() >> 2];
      }
      var $err_0;
      if ($2) {
        var $err_02 = $err_0;
        label = 1260;
        break;
      } else {
        var $err_01 = $err_0;
        break;
      }
    }
  } while (0);
  L1524 : do {
    if (label == 1260) {
      var $err_02;
      if ((_getgid() | 0) != 0) {
        var $err_01 = $err_02;
        break;
      }
      do {
        if ((_setgid($1) | 0) == 0) {
          if ((_getgid() | 0) != (_getgid() | 0)) {
            break;
          }
          if ((_setgid(0) | 0) != 0) {
            var $err_01 = $err_02;
            break L1524;
          }
        }
      } while (0);
      var $33 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_fatal(472048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $33, tempInt));
    }
  } while (0);
  var $err_01;
  if (($err_01 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  }
  do {
    if ((HEAP32[___errno_location() >> 2] | 0) != 1) {
      if ((HEAP32[___errno_location() >> 2] | 0) == 11) {
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) == 88) {
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) == 12) {
        break;
      }
      var $53 = _strerror($err_01);
      __gcry_log_error(470584, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $53, tempInt));
    }
  } while (0);
  HEAP8[412912] = 1;
  HEAP8[440704] = 1;
  STACKTOP = __stackBase__;
  return;
}
_lock_pool["X"] = 1;
function __gcry_sexp_length($list) {
  var label = 0;
  if (($list | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $level_0_ph = 0;
  var $p_0_ph = $list | 0;
  var $length_0_ph = 0;
  L1546 : while (1) {
    var $length_0_ph;
    var $p_0_ph;
    var $level_0_ph;
    var $level_0_ph4 = $level_0_ph;
    var $p_0_ph3 = $p_0_ph;
    L1548 : while (1) {
      var $p_0_ph3;
      var $level_0_ph4;
      var $p_0 = $p_0_ph3;
      while (1) {
        var $p_0;
        var $5 = HEAP8[$p_0];
        if ($5 << 24 >> 24 == 0) {
          var $_0 = $length_0_ph;
          break L1546;
        }
        var $8 = $p_0 + 1 | 0;
        if ($5 << 24 >> 24 == 1) {
          label = 1282;
          break L1548;
        } else if ($5 << 24 >> 24 == 3) {
          label = 1283;
          break L1548;
        } else if ($5 << 24 >> 24 == 4) {
          break;
        } else {
          var $p_0 = $8;
        }
      }
      var $level_0_ph4 = $level_0_ph4 - 1 | 0;
      var $p_0_ph3 = $8;
    }
    if (label == 1282) {
      label = 0;
      var $10 = $8;
      var $level_0_ph_be = $level_0_ph4;
      var $p_0_ph_be = $p_0 + ((tempInt = HEAPU8[$10] | HEAPU8[$10 + 1] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
      var $_pn = ($level_0_ph4 | 0) == 1 & 1;
    } else if (label == 1283) {
      label = 0;
      var $level_0_ph_be = $level_0_ph4 + 1 | 0;
      var $p_0_ph_be = $8;
      var $_pn = ($level_0_ph4 | 0) == 1 & 1;
    }
    var $_pn;
    var $p_0_ph_be;
    var $level_0_ph_be;
    var $level_0_ph = $level_0_ph_be;
    var $p_0_ph = $p_0_ph_be;
    var $length_0_ph = $_pn + $length_0_ph | 0;
  }
  var $_0;
  return $_0;
}
function _sexp_nth_data($list, $number, $datalen) {
  var label = 0;
  HEAP32[$datalen >> 2] = 0;
  if (($list | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $3 = $list | 0;
  do {
    if (HEAP8[$3] << 24 >> 24 == 3) {
      var $level_0 = 0;
      var $_01 = $number;
      var $p_0 = $list + 1 | 0;
      break;
    } else {
      if (($number | 0) == 0) {
        var $level_0 = 0;
        var $_01 = 0;
        var $p_0 = $3;
        break;
      } else {
        var $_0 = 0;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  L1567 : while (1) {
    var $p_0;
    var $_01;
    var $level_0;
    var $11 = HEAP8[$p_0];
    var $12 = $11 << 24 >> 24 == 1;
    if (($_01 | 0) <= 0) {
      break;
    }
    do {
      if ($12) {
        var $16 = $p_0 + 1 | 0;
        var $level_1 = $level_0;
        var $_1 = ((($level_0 | 0) == 0) << 31 >> 31) + $_01 | 0;
        var $p_1 = $p_0 + ((tempInt = HEAPU8[$16] | HEAPU8[$16 + 1] << 8, tempInt << 16 >> 16) & 65535) + 2 | 0;
      } else {
        if ($11 << 24 >> 24 == 4) {
          var $25 = $level_0 - 1 | 0;
          var $level_1 = $25;
          var $_1 = ((($25 | 0) == 0) << 31 >> 31) + $_01 | 0;
          var $p_1 = $p_0;
          break;
        } else if ($11 << 24 >> 24 == 3) {
          var $level_1 = $level_0 + 1 | 0;
          var $_1 = $_01;
          var $p_1 = $p_0;
          break;
        } else if ($11 << 24 >> 24 == 0) {
          var $_0 = 0;
          label = 1304;
          break L1567;
        } else {
          var $level_1 = $level_0;
          var $_1 = $_01;
          var $p_1 = $p_0;
          break;
        }
      }
    } while (0);
    var $p_1;
    var $_1;
    var $level_1;
    var $level_0 = $level_1;
    var $_01 = $_1;
    var $p_0 = $p_1 + 1 | 0;
  }
  if (label == 1304) {
    var $_0;
    return $_0;
  }
  if (!$12) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $33 = $p_0 + 1 | 0;
  HEAP32[$datalen >> 2] = (tempInt = HEAPU8[$33] | HEAPU8[$33 + 1] << 8, tempInt << 16 >> 16) & 65535;
  var $_0 = $p_0 + 3 | 0;
  var $_0;
  return $_0;
}
_sexp_nth_data["X"] = 1;
function _dump_string($p, $n) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  if (($n | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $_011 = $n;
    var $_02 = $p;
  }
  while (1) {
    var $_02;
    var $_011;
    var $2 = HEAP8[$_02];
    var $3 = $2 & 255;
    do {
      if (($3 & 128 | 0) == 0) {
        var $8 = (_iscntrl($3) | 0) == 0;
        var $9 = HEAP8[$_02];
        if (!$8) {
          var $13 = $9;
          label = 1312;
          break;
        }
        var $12 = $9 & 255;
        if ($9 << 24 >> 24 == 34) {
          var $21 = $12;
          label = 1319;
          break;
        }
        __gcry_log_printf(480068, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $12, tempInt));
        break;
      } else {
        var $13 = $2;
        label = 1312;
      }
    } while (0);
    do {
      if (label == 1312) {
        label = 0;
        var $13;
        var $14 = $13 & 255;
        if ($13 << 24 >> 24 == 10) {
          __gcry_log_printf(484680, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if ($13 << 24 >> 24 == 13) {
          __gcry_log_printf(483988, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if ($13 << 24 >> 24 == 8) {
          __gcry_log_printf(481724, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if ($13 << 24 >> 24 == 12) {
          __gcry_log_printf(483040, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if ($13 << 24 >> 24 == 0) {
          __gcry_log_printf(481232, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else if ($13 << 24 >> 24 == 11) {
          __gcry_log_printf(482388, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
          break;
        } else {
          var $21 = $14;
          label = 1319;
          break;
        }
      }
    } while (0);
    if (label == 1319) {
      label = 0;
      var $21;
      __gcry_log_printf(490564, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $21, tempInt));
    }
    var $24 = $_011 - 1 | 0;
    if (($24 | 0) == 0) {
      break;
    } else {
      var $_011 = $24;
      var $_02 = $_02 + 1 | 0;
    }
  }
  STACKTOP = __stackBase__;
  return;
}
function __gcry_sexp_create($retsexp, $buffer, $length, $autodetect, $freefnc) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $errcode = __stackBase__;
  var $se = __stackBase__ + 4;
  if (($retsexp | 0) == 0) {
    var $_0 = _gcry_error1456(45);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$retsexp >> 2] = 0;
  if ($autodetect >>> 0 > 1 | ($buffer | 0) == 0) {
    var $_0 = _gcry_error1456(45);
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $10 = ($length | 0) != 0;
  var $11 = ($autodetect | 0) == 0;
  do {
    if ($11 & ($10 ^ 1)) {
      var $13 = __gcry_sexp_canon_len($buffer, 0, 0, $errcode);
      if (($13 | 0) != 0) {
        var $_02 = $13;
        break;
      }
      var $_0 = HEAP32[$errcode >> 2];
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      if ($10 | $11) {
        var $_02 = $length;
        break;
      }
      var $_02 = _strlen($buffer);
    }
  } while (0);
  var $_02;
  var $21 = _sexp_sscan($se, 0, $buffer, $_02, 0, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  HEAP32[$errcode >> 2] = $21;
  if (($21 | 0) != 0) {
    var $_0 = $21;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$retsexp >> 2] = HEAP32[$se >> 2];
  if (($freefnc | 0) != 0) {
    FUNCTION_TABLE[$freefnc]($buffer);
  }
  var $_0 = _gcry_error1456(0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gcry_error1456($code) {
  return _gcry_err_make1499($code);
}
function __gcry_sexp_canon_len($buffer, $length, $erroff, $errcode) {
  var $_02$s2;
  var $dummy_erroff_erroff$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $dummy_erroff_erroff$s2 = (($erroff | 0) == 0 ? __stackBase__ : $erroff) >> 2;
  var $_02$s2 = (($errcode | 0) == 0 ? __stackBase__ + 4 : $errcode) >> 2;
  HEAP32[$_02$s2] = _gcry_error1456(0);
  HEAP32[$dummy_erroff_erroff$s2] = 0;
  do {
    if (($buffer | 0) == 0) {
      var $_0 = 0;
    } else {
      if (HEAP8[$buffer] << 24 >> 24 != 40) {
        HEAP32[$_02$s2] = _gcry_error1456(204);
        var $_0 = 0;
        break;
      }
      var $8 = ($length | 0) != 0;
      var $_not = $8 ^ 1;
      var $level_0 = 0;
      var $count_0 = 0;
      var $p_0 = $buffer;
      var $disphint_0 = 0;
      var $datalen_0 = 0;
      L1636 : while (1) {
        var $datalen_0;
        var $disphint_0;
        var $p_0;
        var $count_0;
        var $level_0;
        if (!($count_0 >>> 0 < $length >>> 0 | $_not)) {
          label = 1350;
          break;
        }
        var $17 = HEAP8[$p_0];
        var $18 = $17 & 255;
        do {
          if (($datalen_0 | 0) == 0) {
            if ($17 << 24 >> 24 == 91) {
              if (($disphint_0 | 0) == 0) {
                var $level_1 = $level_0;
                var $count_1 = $count_0;
                var $p_1 = $p_0;
                var $disphint_1 = $p_0;
                var $datalen_1 = 0;
                break;
              } else {
                label = 1371;
                break L1636;
              }
            } else if ($17 << 24 >> 24 == 93) {
              if (($disphint_0 | 0) == 0) {
                label = 1373;
                break L1636;
              } else {
                var $level_1 = $level_0;
                var $count_1 = $count_0;
                var $p_1 = $p_0;
                var $disphint_1 = 0;
                var $datalen_1 = $datalen_0;
                break;
              }
            } else if ($17 << 24 >> 24 == 41) {
              if (($level_0 | 0) == 0) {
                label = 1365;
                break L1636;
              }
              if (($disphint_0 | 0) != 0) {
                label = 1367;
                break L1636;
              }
              var $54 = $level_0 - 1 | 0;
              if (($54 | 0) == 0) {
                label = 1369;
                break L1636;
              } else {
                var $level_1 = $54;
                var $count_1 = $count_0;
                var $p_1 = $p_0;
                var $disphint_1 = 0;
                var $datalen_1 = $datalen_0;
                break;
              }
            } else if ($17 << 24 >> 24 == 40) {
              if (($disphint_0 | 0) != 0) {
                label = 1362;
                break L1636;
              }
              var $level_1 = $level_0 + 1 | 0;
              var $count_1 = $count_0;
              var $p_1 = $p_0;
              var $disphint_1 = 0;
              var $datalen_1 = $datalen_0;
              break;
            } else {
              if (($17 - 48 & 255) >= 10) {
                label = 1378;
                break L1636;
              }
              if ($17 << 24 >> 24 == 48) {
                label = 1376;
                break L1636;
              }
              var $level_1 = $level_0;
              var $count_1 = $count_0;
              var $p_1 = $p_0;
              var $disphint_1 = $disphint_0;
              var $datalen_1 = $18 - 48 | 0;
              break;
            }
          } else {
            if ($17 << 24 >> 24 != 58) {
              if (($17 - 48 & 255) >= 10) {
                label = 1359;
                break L1636;
              }
              var $level_1 = $level_0;
              var $count_1 = $count_0;
              var $p_1 = $p_0;
              var $disphint_1 = $disphint_0;
              var $datalen_1 = ($datalen_0 * 10 & -1) - 48 + $18 | 0;
              break;
            }
            if ($8) {
              if (($count_0 + $datalen_0 | 0) >>> 0 >= $length >>> 0) {
                label = 1355;
                break L1636;
              }
            }
            var $level_1 = $level_0;
            var $count_1 = $count_0 + $datalen_0 | 0;
            var $p_1 = $p_0 + $datalen_0 | 0;
            var $disphint_1 = $disphint_0;
            var $datalen_1 = 0;
          }
        } while (0);
        var $datalen_1;
        var $disphint_1;
        var $p_1;
        var $count_1;
        var $level_1;
        var $level_0 = $level_1;
        var $count_0 = $count_1 + 1 | 0;
        var $p_0 = $p_1 + 1 | 0;
        var $disphint_0 = $disphint_1;
        var $datalen_0 = $datalen_1;
      }
      if (label == 1350) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(202);
        var $_0 = 0;
        break;
      } else if (label == 1355) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(202);
        var $_0 = 0;
        break;
      } else if (label == 1369) {
        var $_0 = $count_0 + 1 | 0;
        break;
      } else if (label == 1359) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(201);
        var $_0 = 0;
        break;
      } else if (label == 1365) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(203);
        var $_0 = 0;
        break;
      } else if (label == 1371) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(208);
        var $_0 = 0;
        break;
      } else if (label == 1373) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(209);
        var $_0 = 0;
        break;
      } else if (label == 1362) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(209);
        var $_0 = 0;
        break;
      } else if (label == 1367) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(209);
        var $_0 = 0;
        break;
      } else if (label == 1376) {
        HEAP32[$dummy_erroff_erroff$s2] = $count_0;
        HEAP32[$_02$s2] = _gcry_error1456(207);
        var $_0 = 0;
        break;
      } else if (label == 1378) {
        if ($17 << 24 >> 24 == 38 | $17 << 24 >> 24 == 92) {
          HEAP32[$dummy_erroff_erroff$s2] = $count_0;
          HEAP32[$_02$s2] = _gcry_error1456(210);
          var $_0 = 0;
          break;
        } else {
          HEAP32[$dummy_erroff_erroff$s2] = $count_0;
          HEAP32[$_02$s2] = _gcry_error1456(205);
          var $_0 = 0;
          break;
        }
      }
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_sexp_canon_len["X"] = 1;
function _sexp_sscan($retsexp, $erroff, $buffer, $length, $argflag, $arg_list, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  var $3 = _vsexp_sscan($retsexp, $erroff, $buffer, $length, $argflag, $arg_list, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return $3;
}
function __gcry_sexp_new($retsexp, $buffer, $length, $autodetect) {
  return __gcry_sexp_create($retsexp, $buffer, $length, $autodetect, 0);
}
function __gcry_sexp_release($sexp) {
  if (($sexp | 0) == 0) {
    return;
  }
  var $3 = $sexp | 0;
  L1683 : do {
    if ((__gcry_is_secure($3) | 0) != 0) {
      var $6 = HEAP8[$3];
      if ($6 << 24 >> 24 == 0) {
        break;
      } else {
        var $p_03 = $3;
        var $8 = $6;
      }
      while (1) {
        var $8;
        var $p_03;
        var $9 = $p_03 + 1 | 0;
        if ($8 << 24 >> 24 == 1) {
          var $11 = $9;
          var $p_0_be = $p_03 + ((tempInt = HEAPU8[$11] | HEAPU8[$11 + 1] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
        } else {
          var $p_0_be = $9;
        }
        var $p_0_be;
        var $14 = HEAP8[$p_0_be];
        if ($14 << 24 >> 24 == 0) {
          break;
        } else {
          var $p_03 = $p_0_be;
          var $8 = $14;
        }
      }
      if (($p_0_be | 0) == ($sexp | 0)) {
        break;
      }
      var $_vptr_01 = $3;
      var $_vlen_02 = $p_0_be - $sexp | 0;
      while (1) {
        var $_vlen_02;
        var $_vptr_01;
        HEAP8[$_vptr_01] = 0;
        var $23 = $_vlen_02 - 1 | 0;
        if (($23 | 0) == 0) {
          break L1683;
        } else {
          var $_vptr_01 = $_vptr_01 + 1 | 0;
          var $_vlen_02 = $23;
        }
      }
    }
  } while (0);
  __gcry_free($3);
  return;
}
function _normalize($list) {
  do {
    if (($list | 0) == 0) {
      var $_0 = 0;
    } else {
      var $4 = HEAP8[$list | 0];
      if ($4 << 24 >> 24 == 0) {
        __gcry_sexp_release($list);
        var $_0 = 0;
        break;
      } else if ($4 << 24 >> 24 != 3) {
        var $_0 = $list;
        break;
      }
      if (HEAP8[$list + 1 | 0] << 24 >> 24 != 4) {
        var $_0 = $list;
        break;
      }
      __gcry_sexp_release($list);
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  return $_0;
}
function __gcry_sexp_car($list) {
  return __gcry_sexp_nth($list, 0);
}
function __gcry_sexp_nth_data($list, $number, $datalen) {
  return _sexp_nth_data($list, $number, $datalen);
}
function __gcry_sexp_nth_string($list, $number) {
  var $n$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  var $1 = _sexp_nth_data($list, $number, $n);
  do {
    if (($1 | 0) == 0) {
      var $_0 = 0;
    } else {
      var $4 = HEAP32[$n$s2];
      if (($4 | 0) == 0) {
        var $_0 = 0;
        break;
      }
      var $7 = $4 + 1 | 0;
      if (($7 | 0) == 0) {
        var $_0 = 0;
        break;
      }
      var $10 = __gcry_malloc($7);
      if (($10 | 0) == 0) {
        var $_0 = 0;
        break;
      }
      _memcpy($10, $1, HEAP32[$n$s2]);
      HEAP8[$10 + HEAP32[$n$s2] | 0] = 0;
      var $_0 = $10;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_sexp_nth_mpi($list, $number, $mpifmt) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $n = __stackBase__;
  var $a = __stackBase__ + 4;
  var $1 = _sexp_nth_data($list, $number, $n);
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return 0;
  } else {
    var $7 = (__gcry_mpi_scan($a, ($mpifmt | 0) == 0 ? 1 : $mpifmt, $1, HEAP32[$n >> 2], 0) | 0) == 0;
    STACKTOP = __stackBase__;
    return $7 ? HEAP32[$a >> 2] : 0;
  }
}
function __gcry_sexp_cons($a, $b) {
  __gcry_bug(469160, 318, 495108);
  return 0;
}
function __gcry_sexp_alist($array) {
  __gcry_bug(469160, 334, 495144);
  return 0;
}
function __gcry_sexp_vlist($a, varrp) {
  __gcry_bug(469160, 347, 495008);
  return 0;
}
function __gcry_sexp_append($a, $n) {
  __gcry_bug(469160, 363, 495124);
  return 0;
}
function __gcry_sexp_prepend($a, $n) {
  __gcry_bug(469160, 374, 495048);
  return 0;
}
function __gcry_sexp_find_token($list, $tok, $toklen) {
  var label = 0;
  if (($list | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if (($toklen | 0) == 0) {
    var $_01 = _strlen($tok);
  } else {
    var $_01 = $toklen;
  }
  var $_01;
  var $p_0 = $list | 0;
  L1729 : while (1) {
    var $p_0;
    var $8 = HEAP8[$p_0];
    do {
      if ($8 << 24 >> 24 == 3) {
        if (HEAP8[$p_0 + 1 | 0] << 24 >> 24 != 1) {
          var $55 = HEAP8[$p_0];
          break;
        }
        var $15 = $p_0 + 2 | 0;
        var $16 = (tempInt = HEAPU8[$15] | HEAPU8[$15 + 1] << 8, tempInt << 16 >> 16) & 65535;
        if (($16 | 0) == ($_01 | 0)) {
          if ((_memcmp($p_0 + 4 | 0, $tok, $_01) | 0) == 0) {
            break L1729;
          }
        }
        var $p_0 = $16 + ($p_0 + 4) | 0;
        continue L1729;
      } else if ($8 << 24 >> 24 == 0) {
        var $_0 = 0;
        label = 1443;
        break L1729;
      } else {
        var $55 = $8;
      }
    } while (0);
    var $55;
    var $57 = $p_0 + 1 | 0;
    if ($55 << 24 >> 24 != 1) {
      var $p_0 = $57;
      continue;
    }
    var $59 = $57;
    var $p_0 = $p_0 + ((tempInt = HEAPU8[$59] | HEAPU8[$59 + 1] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
  }
  if (label == 1443) {
    var $_0;
    return $_0;
  }
  var $level_0 = 1;
  var $p_1 = $16 + ($p_0 + 4) | 0;
  while (1) {
    var $p_1;
    var $level_0;
    if (($level_0 | 0) == 0) {
      break;
    }
    var $27 = HEAP8[$p_1];
    if ($27 << 24 >> 24 == 1) {
      var $30 = $p_1 + 1 | 0;
      var $level_1 = $level_0;
      var $p_2 = $p_1 + ((tempInt = HEAPU8[$30] | HEAPU8[$30 + 1] << 8, tempInt << 16 >> 16) & 65535) + 2 | 0;
    } else if ($27 << 24 >> 24 == 4) {
      var $level_1 = $level_0 - 1 | 0;
      var $p_2 = $p_1;
    } else if ($27 << 24 >> 24 == 0) {
      label = 1434;
      break;
    } else if ($27 << 24 >> 24 == 3) {
      var $level_1 = $level_0 + 1 | 0;
      var $p_2 = $p_1;
    } else {
      var $level_1 = $level_0;
      var $p_2 = $p_1;
    }
    var $p_2;
    var $level_1;
    var $level_0 = $level_1;
    var $p_1 = $p_2 + 1 | 0;
  }
  if (label == 1434) {
    __gcry_bug(469160, 431, 495084);
  }
  var $44 = $p_1 - $p_0 & 65535;
  var $46 = __gcry_malloc($44 + 1 | 0);
  if (($46 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  _memcpy($46, $p_0, $44);
  HEAP8[$46 + $44 | 0] = 0;
  var $_0 = _normalize($46);
  var $_0;
  return $_0;
}
__gcry_sexp_find_token["X"] = 1;
function __gcry_sexp_nth($list, $number) {
  var label = 0;
  if (($list | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $3 = $list | 0;
  if (HEAP8[$3] << 24 >> 24 == 3) {
    var $level_0_ph = 0;
    var $_01_ph = $number;
    var $p_0_ph = $3;
  } else {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  L1765 : while (1) {
    var $p_0_ph;
    var $_01_ph;
    var $level_0_ph;
    var $6 = ($_01_ph | 0) > 0;
    var $level_0_ph16 = $level_0_ph;
    var $p_0_ph15 = $p_0_ph;
    L1767 : while (1) {
      var $p_0_ph15;
      var $level_0_ph16;
      var $p_0 = $p_0_ph15;
      while (1) {
        var $p_0;
        var $8 = $p_0 + 1 | 0;
        var $9 = HEAP8[$8];
        var $10 = $9 << 24 >> 24 == 1;
        if (!$6) {
          break L1765;
        }
        if ($10) {
          label = 1453;
          break L1767;
        }
        if ($9 << 24 >> 24 == 3) {
          break;
        } else if ($9 << 24 >> 24 == 4) {
          label = 1457;
          break L1767;
        } else if ($9 << 24 >> 24 == 0) {
          var $_0 = 0;
          label = 1473;
          break L1765;
        } else {
          var $p_0 = $8;
        }
      }
      var $level_0_ph16 = $level_0_ph16 + 1 | 0;
      var $p_0_ph15 = $8;
    }
    if (label == 1453) {
      label = 0;
      var $14 = $p_0 + 2 | 0;
      var $level_0_ph_be = $level_0_ph16;
      var $_pn = (($level_0_ph16 | 0) == 0) << 31 >> 31;
      var $p_0_ph_be = $p_0 + ((tempInt = HEAPU8[$14] | HEAPU8[$14 + 1] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
    } else if (label == 1457) {
      label = 0;
      var $23 = $level_0_ph16 - 1 | 0;
      var $level_0_ph_be = $23;
      var $_pn = (($23 | 0) == 0) << 31 >> 31;
      var $p_0_ph_be = $8;
    }
    var $p_0_ph_be;
    var $_pn;
    var $level_0_ph_be;
    var $level_0_ph = $level_0_ph_be;
    var $_01_ph = $_pn + $_01_ph | 0;
    var $p_0_ph = $p_0_ph_be;
  }
  if (label == 1473) {
    var $_0;
    return $_0;
  }
  do {
    if ($10) {
      var $28 = $8;
      var $29 = (tempInt = HEAPU8[$28] | HEAPU8[$28 + 1] << 8, tempInt << 16 >> 16) & 65535;
      var $31 = __gcry_malloc($29 + 2 | 0);
      if (($31 | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      } else {
        _memcpy($31, $p_0 + 3 | 0, $29);
        HEAP8[$31 + $29 | 0] = 0;
        var $newlist_0 = $31;
        break;
      }
    } else {
      if ($9 << 24 >> 24 == 3) {
        var $level_1_ph = 1;
        var $p_1_ph = $8;
      } else {
        var $newlist_0 = 0;
        break;
      }
      L1787 : while (1) {
        var $p_1_ph;
        var $level_1_ph;
        var $p_1 = $p_1_ph;
        while (1) {
          var $p_1;
          var $39 = $p_1 + 1 | 0;
          var $40 = HEAP8[$39];
          if ($40 << 24 >> 24 == 1) {
            label = 1464;
            break;
          } else if ($40 << 24 >> 24 == 4) {
            label = 1466;
            break;
          } else if ($40 << 24 >> 24 == 0) {
            label = 1467;
            break L1787;
          } else if ($40 << 24 >> 24 == 3) {
            label = 1465;
            break;
          } else {
            var $p_1 = $39;
          }
        }
        if (label == 1464) {
          label = 0;
          var $43 = $p_1 + 2 | 0;
          var $level_2 = $level_1_ph;
          var $p_2 = $p_1 + ((tempInt = HEAPU8[$43] | HEAPU8[$43 + 1] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
        } else if (label == 1466) {
          label = 0;
          var $level_2 = $level_1_ph - 1 | 0;
          var $p_2 = $39;
        } else if (label == 1465) {
          label = 0;
          var $level_2 = $level_1_ph + 1 | 0;
          var $p_2 = $39;
        }
        var $p_2;
        var $level_2;
        if (($level_2 | 0) == 0) {
          break;
        } else {
          var $level_1_ph = $level_2;
          var $p_1_ph = $p_2;
        }
      }
      if (label == 1467) {
        __gcry_bug(469160, 605, 495068);
      }
      var $58 = $p_2 + 1 - $8 & 65535;
      var $60 = __gcry_malloc($58 + 1 | 0);
      if (($60 | 0) == 0) {
        var $_0 = 0;
        var $_0;
        return $_0;
      } else {
        _memcpy($60, $8, $58);
        HEAP8[$60 + $58 | 0] = 0;
        var $newlist_0 = $60;
        break;
      }
    }
  } while (0);
  var $newlist_0;
  var $_0 = _normalize($newlist_0);
  var $_0;
  return $_0;
}
__gcry_sexp_nth["X"] = 1;
function __gcry_sexp_cdr($list) {
  var label = 0;
  if (($list | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $3 = $list | 0;
  if (HEAP8[$3] << 24 >> 24 == 3) {
    var $skip_0_ph = 1;
    var $p_0_ph = $3;
    var $level_0_ph = 0;
  } else {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  L1810 : while (1) {
    var $level_0_ph;
    var $p_0_ph;
    var $skip_0_ph;
    var $7 = (($level_0_ph | 0) == 0) << 31 >> 31;
    var $skip_0_ph12 = $skip_0_ph;
    var $p_0_ph11 = $p_0_ph;
    L1812 : while (1) {
      var $p_0_ph11;
      var $skip_0_ph12;
      var $8 = ($skip_0_ph12 | 0) > 0;
      var $p_0 = $p_0_ph11;
      while (1) {
        var $p_0;
        var $10 = $p_0 + 1 | 0;
        if (!$8) {
          var $p_1 = $10;
          var $level_1 = 0;
          break L1810;
        }
        var $12 = HEAP8[$10];
        if ($12 << 24 >> 24 == 3) {
          label = 1486;
          break L1812;
        } else if ($12 << 24 >> 24 == 1) {
          break;
        } else if ($12 << 24 >> 24 == 4) {
          label = 1487;
          break L1812;
        } else if ($12 << 24 >> 24 == 0) {
          var $_0 = 0;
          label = 1496;
          break L1810;
        } else {
          var $p_0 = $10;
        }
      }
      var $15 = $p_0 + 2 | 0;
      var $skip_0_ph12 = $skip_0_ph12 + $7 | 0;
      var $p_0_ph11 = $p_0 + ((tempInt = HEAPU8[$15] | HEAPU8[$15 + 1] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
    }
    if (label == 1486) {
      label = 0;
      var $skip_0_ph = $skip_0_ph12;
      var $p_0_ph = $10;
      var $level_0_ph = $level_0_ph + 1 | 0;
      continue;
    } else if (label == 1487) {
      label = 0;
      var $21 = $level_0_ph - 1 | 0;
      var $skip_0_ph = ((($21 | 0) == 0) << 31 >> 31) + $skip_0_ph12 | 0;
      var $p_0_ph = $10;
      var $level_0_ph = $21;
      continue;
    }
  }
  if (label == 1496) {
    var $_0;
    return $_0;
  }
  while (1) {
    var $level_1;
    var $p_1;
    var $24 = HEAP8[$p_1];
    if ($24 << 24 >> 24 == 3) {
      var $p_2 = $p_1;
      var $level_2 = $level_1 + 1 | 0;
    } else if ($24 << 24 >> 24 == 1) {
      var $27 = $p_1 + 1 | 0;
      var $p_2 = $p_1 + ((tempInt = HEAPU8[$27] | HEAPU8[$27 + 1] << 8, tempInt << 16 >> 16) & 65535) + 2 | 0;
      var $level_2 = $level_1;
    } else if ($24 << 24 >> 24 == 4) {
      var $p_2 = $p_1;
      var $level_2 = $level_1 - 1 | 0;
    } else if ($24 << 24 >> 24 == 0) {
      var $_0 = 0;
      label = 1501;
      break;
    } else {
      var $p_2 = $p_1;
      var $level_2 = $level_1;
    }
    var $level_2;
    var $p_2;
    var $35 = $p_2 + 1 | 0;
    if (($level_2 | 0) == 0) {
      break;
    } else {
      var $p_1 = $35;
      var $level_1 = $level_2;
    }
  }
  if (label == 1501) {
    var $_0;
    return $_0;
  }
  var $41 = $35 - $10 & 65535;
  var $43 = __gcry_malloc($41 + 3 | 0);
  if (($43 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  HEAP8[$43] = 3;
  _memcpy($43 + 1 | 0, $10, $41);
  HEAP8[$41 + ($43 + 1) | 0] = 4;
  HEAP8[$41 + ($43 + 2) | 0] = 0;
  var $_0 = _normalize($43);
  var $_0;
  return $_0;
}
__gcry_sexp_cdr["X"] = 1;
function __gcry_sexp_cadr($list) {
  var $1 = __gcry_sexp_cdr($list);
  var $2 = __gcry_sexp_car($1);
  __gcry_sexp_release($1);
  return $2;
}
function __gcry_sexp_build($retsexp, $erroff, $format, varrp) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $arg_ptr = __stackBase__;
  HEAP32[$arg_ptr >> 2] = varrp;
  var $4 = _vsexp_sscan($retsexp, $erroff, $format, _strlen($format), 1, 0, HEAP32[$arg_ptr >> 2]);
  STACKTOP = __stackBase__;
  return $4;
}
function _vsexp_sscan($retsexp, $erroff, $buffer, $length, $argflag, $arg_list, $arg_ptr) {
  var $28$s2;
  var $19$s2;
  var $3$s2;
  var $dummy_erroff_erroff$s2;
  var $nm$s2;
  var $arg_list$s2 = $arg_list >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 100 | 0;
  var $c = __stackBase__ + 4;
  var $nm = __stackBase__ + 16, $nm$s2 = $nm >> 2;
  var $nbits = __stackBase__ + 20;
  var $buf = __stackBase__ + 24;
  var $buf27 = __stackBase__ + 60;
  var $aoff = __stackBase__ + 96;
  var $dummy_erroff_erroff$s2 = (($erroff | 0) == 0 ? __stackBase__ : $erroff) >> 2;
  var $2 = $length + 2 | 0;
  var $3$s2 = ($c + 4 | 0) >> 2;
  HEAP32[$3$s2] = $2;
  do {
    if (($buffer | 0) == 0 | ($length | 0) == 0) {
      label = 1507;
    } else {
      if ((__gcry_is_secure($buffer) | 0) == 0) {
        label = 1507;
        break;
      }
      HEAP32[$c >> 2] = __gcry_malloc_secure($2);
      break;
    }
  } while (0);
  if (label == 1507) {
    HEAP32[$c >> 2] = __gcry_malloc(HEAP32[$3$s2]);
  }
  var $19$s2 = ($c | 0) >> 2;
  var $20 = HEAP32[$19$s2];
  L1846 : do {
    if (($20 | 0) == 0) {
      var $25 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
      HEAP32[$dummy_erroff_erroff$s2] = 0;
      var $err_0 = $25;
      label = 1665;
      break;
    } else {
      var $28$s2 = ($c + 8 | 0) >> 2;
      HEAP32[$28$s2] = $20 | 0;
      var $29 = ($argflag | 0) != 0;
      var $30 = ($arg_list | 0) == 0;
      var $31 = ($arg_list | 0) == 0;
      var $32 = ($arg_list | 0) == 0;
      var $33 = ($arg_list | 0) == 0;
      var $34 = $buf | 0;
      var $35 = ($arg_list | 0) == 0;
      var $36 = $buf27 | 0;
      var $37 = ($arg_list | 0) == 0;
      var $_01 = $arg_ptr;
      var $p_0 = $buffer;
      var $n_0 = $length;
      var $digptr_0 = 0;
      var $quoted_0 = 0;
      var $tokenp_0 = 0;
      var $hexfmt_0 = 0;
      var $base64_0 = 0;
      var $disphint_0 = 0;
      var $percent_0 = 0;
      var $hexcount_0 = 0;
      var $quoted_esc_0 = 0;
      var $arg_counter_0 = 0;
      var $level_0 = 0;
      L1848 : while (1) {
        var $level_0;
        var $arg_counter_0;
        var $quoted_esc_0;
        var $hexcount_0;
        var $percent_0;
        var $disphint_0;
        var $base64_0;
        var $hexfmt_0;
        var $tokenp_0;
        var $quoted_0;
        var $digptr_0;
        var $n_0;
        var $p_0;
        var $_01;
        var $39 = ($n_0 | 0) != 0;
        if (!$39) {
          label = 1661;
          break;
        }
        var $42 = ($hexfmt_0 | 0) == 0;
        do {
          if (($tokenp_0 | 0) != 0 & $42) {
            if ((_memchr(410312, HEAP8[$p_0] << 24 >> 24, 71) | 0) != 0) {
              var $_9 = $_01;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = $quoted_0;
              var $tokenp_2 = $tokenp_0;
              var $hexfmt_3 = $hexfmt_0;
              var $base64_1 = $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = $percent_0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_0;
              var $level_1 = $level_0;
              break;
            }
            var $48 = $p_0;
            var $50 = $48 - $tokenp_0 | 0;
            var $51 = _make_space($c, $50);
            if (($51 | 0) != 0) {
              label = 1515;
              break L1848;
            }
            var $57 = HEAP32[$28$s2];
            HEAP32[$28$s2] = $57 + 1 | 0;
            HEAP8[$57] = 1;
            var $61 = HEAP32[$28$s2];
            tempBigInt = $50 & 65535;
            HEAP8[$61] = tempBigInt & 255;
            tempBigInt = tempBigInt >> 8;
            HEAP8[$61 + 1] = tempBigInt & 255;
            var $63 = HEAP32[$28$s2] + 2 | 0;
            HEAP32[$28$s2] = $63;
            _memcpy($63, $tokenp_0, $50);
            HEAP32[$28$s2] = HEAP32[$28$s2] + $50 | 0;
            var $tokenp_1 = 0;
            label = 1517;
            break;
          } else {
            var $tokenp_1 = $tokenp_0;
            label = 1517;
          }
        } while (0);
        L1855 : do {
          if (label == 1517) {
            label = 0;
            var $tokenp_1;
            if (($quoted_0 | 0) != 0) {
              var $70 = HEAP8[$p_0];
              if (($quoted_esc_0 | 0) == 0) {
                if ($70 << 24 >> 24 == 92) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = 1;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
                if ($70 << 24 >> 24 != 34) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
                var $130 = $quoted_0 + 1 | 0;
                var $131 = $p_0;
                var $133 = $131 - $130 | 0;
                var $134 = _make_space($c, $133);
                if (($134 | 0) != 0) {
                  label = 1538;
                  break L1848;
                }
                var $140 = HEAP32[$28$s2];
                HEAP32[$28$s2] = $140 + 1 | 0;
                HEAP8[$140] = 1;
                var $143 = HEAP32[$28$s2];
                tempBigInt = 0;
                HEAP8[$143] = tempBigInt & 255;
                tempBigInt = tempBigInt >> 8;
                HEAP8[$143 + 1] = tempBigInt & 255;
                var $145 = HEAP32[$28$s2] + 2 | 0;
                HEAP32[$28$s2] = $145;
                var $146 = _unquote_string($130, $133, $145);
                HEAP32[$28$s2] = HEAP32[$28$s2] + $146 | 0;
                tempBigInt = $146 & 65535;
                HEAP8[$143] = tempBigInt & 255;
                tempBigInt = tempBigInt >> 8;
                HEAP8[$143 + 1] = tempBigInt & 255;
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = 0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              }
              var $72 = $70 << 24 >> 24;
              if (($72 | 0) == 48 | ($72 | 0) == 49 | ($72 | 0) == 50 | ($72 | 0) == 51 | ($72 | 0) == 52 | ($72 | 0) == 53 | ($72 | 0) == 54 | ($72 | 0) == 55) {
                if ($n_0 >>> 0 <= 2) {
                  label = 1523;
                  break L1848;
                }
                if ((HEAP8[$p_0 + 1 | 0] - 48 & 255) >= 8) {
                  label = 1523;
                  break L1848;
                }
                var $80 = $p_0 + 2 | 0;
                if ((HEAP8[$80] - 48 & 255) >= 8) {
                  label = 1523;
                  break L1848;
                }
                var $_9 = $_01;
                var $p_3 = $80;
                var $n_3 = $n_0 - 2 | 0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = 0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if (($72 | 0) == 120) {
                if ($n_0 >>> 0 <= 2) {
                  label = 1528;
                  break L1848;
                }
                var $93 = HEAP8[$p_0 + 1 | 0];
                if (!(($93 - 48 & 255) < 10 | ($93 - 65 & 255) < 6 | ($93 - 97 & 255) < 6)) {
                  label = 1528;
                  break L1848;
                }
                var $98 = $p_0 + 2 | 0;
                var $99 = HEAP8[$98];
                if (!(($99 - 48 & 255) < 10 | ($99 - 65 & 255) < 6 | ($99 - 97 & 255) < 6)) {
                  label = 1528;
                  break L1848;
                }
                var $_9 = $_01;
                var $p_3 = $98;
                var $n_3 = $n_0 - 2 | 0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = 0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if (($72 | 0) == 10) {
                if (!$39) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = 0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = 0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
                var $117 = $p_0 + 1 | 0;
                var $119 = HEAP8[$117] << 24 >> 24 == 13;
                var $_9 = $_01;
                var $p_3 = $119 ? $117 : $p_0;
                var $n_3 = ($119 << 31 >> 31) + $n_0 | 0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = 0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if (($72 | 0) == 13) {
                if (!$39) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = 0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = 0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
                var $111 = $p_0 + 1 | 0;
                var $113 = HEAP8[$111] << 24 >> 24 == 10;
                var $_9 = $_01;
                var $p_3 = $113 ? $111 : $p_0;
                var $n_3 = ($113 << 31 >> 31) + $n_0 | 0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = 0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if (($72 | 0) == 98 | ($72 | 0) == 116 | ($72 | 0) == 118 | ($72 | 0) == 110 | ($72 | 0) == 102 | ($72 | 0) == 114 | ($72 | 0) == 34 | ($72 | 0) == 39 | ($72 | 0) == 92) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = 0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else {
                label = 1534;
                break L1848;
              }
            }
            if (!$42) {
              if ((_isxdigit(HEAP8[$p_0] << 24 >> 24) | 0) != 0) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = 0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0 + 1 | 0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              }
              if (HEAP8[$p_0] << 24 >> 24 != 35) {
                if ((_whitespacep($p_0) | 0) == 0) {
                  label = 1553;
                  break L1848;
                } else {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
              }
              if (($hexcount_0 & 1 | 0) != 0) {
                label = 1545;
                break L1848;
              }
              var $169 = ($hexcount_0 | 0) / 2 & -1;
              var $170 = _make_space($c, $169);
              if (($170 | 0) != 0) {
                label = 1547;
                break L1848;
              }
              var $177 = HEAP32[$28$s2];
              HEAP32[$28$s2] = $177 + 1 | 0;
              HEAP8[$177] = 1;
              var $181 = HEAP32[$28$s2];
              tempBigInt = $169 & 65535;
              HEAP8[$181] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$181 + 1] = tempBigInt & 255;
              HEAP32[$28$s2] = HEAP32[$28$s2] + 2 | 0;
              var $hexfmt_154 = $hexfmt_0 + 1 | 0;
              if ($hexfmt_154 >>> 0 < $p_0 >>> 0) {
                var $hexfmt_0_pn55 = $hexfmt_0;
                var $hexfmt_156 = $hexfmt_154;
              } else {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = 0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              }
              while (1) {
                var $hexfmt_156;
                var $hexfmt_0_pn55;
                if ((_whitespacep($hexfmt_156) | 0) == 0) {
                  var $190 = _hextobyte($hexfmt_156) & 255;
                  var $191 = HEAP32[$28$s2];
                  HEAP32[$28$s2] = $191 + 1 | 0;
                  HEAP8[$191] = $190;
                  var $hexfmt_0_pn_be = $hexfmt_0_pn55 + 2 | 0;
                } else {
                  var $hexfmt_0_pn_be = $hexfmt_156;
                }
                var $hexfmt_0_pn_be;
                var $hexfmt_1 = $hexfmt_0_pn_be + 1 | 0;
                if ($hexfmt_1 >>> 0 < $p_0 >>> 0) {
                  var $hexfmt_0_pn55 = $hexfmt_0_pn_be;
                  var $hexfmt_156 = $hexfmt_1;
                } else {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = 0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break L1855;
                }
              }
            }
            if (($base64_0 | 0) != 0) {
              var $_9 = $_01;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = 0;
              var $tokenp_2 = $tokenp_1;
              var $hexfmt_3 = 0;
              var $base64_1 = HEAP8[$p_0] << 24 >> 24 == 124 ? 0 : $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = $percent_0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_0;
              var $level_1 = $level_0;
              break;
            }
            if (($digptr_0 | 0) != 0) {
              var $209 = HEAP8[$p_0];
              if (($209 - 48 & 255) < 10) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = 0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              }
              if ($209 << 24 >> 24 == 58) {
                var $213 = _atoi($digptr_0);
                if ($213 >>> 0 > ($n_0 - 1 | 0) >>> 0) {
                  label = 1560;
                  break L1848;
                }
                var $221 = _make_space($c, $213);
                if (($221 | 0) != 0) {
                  label = 1562;
                  break L1848;
                }
                var $228 = HEAP32[$28$s2];
                HEAP32[$28$s2] = $228 + 1 | 0;
                HEAP8[$228] = 1;
                var $232 = HEAP32[$28$s2];
                tempBigInt = $213 & 65535;
                HEAP8[$232] = tempBigInt & 255;
                tempBigInt = tempBigInt >> 8;
                HEAP8[$232 + 1] = tempBigInt & 255;
                var $234 = HEAP32[$28$s2] + 2 | 0;
                HEAP32[$28$s2] = $234;
                _memcpy($234, $p_0 + 1 | 0, $213);
                HEAP32[$28$s2] = HEAP32[$28$s2] + $213 | 0;
                var $_9 = $_01;
                var $p_3 = $p_0 + $213 | 0;
                var $n_3 = $n_0 - $213 | 0;
                var $digptr_1 = 0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if ($209 << 24 >> 24 == 35) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = 0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $p_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = 0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if ($209 << 24 >> 24 == 124) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = 0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $p_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if ($209 << 24 >> 24 == 34) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = 0;
                var $quoted_1 = $p_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = 0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else {
                label = 1566;
                break L1848;
              }
            }
            var $248 = HEAP8[$p_0];
            if (($percent_0 | 0) == 0) {
              if ($248 << 24 >> 24 == 40) {
                if (($disphint_0 | 0) != 0) {
                  label = 1634;
                  break L1848;
                }
                var $557 = _make_space($c, 0);
                if (($557 | 0) != 0) {
                  label = 1636;
                  break L1848;
                }
                var $564 = HEAP32[$28$s2];
                HEAP32[$28$s2] = $564 + 1 | 0;
                HEAP8[$564] = 3;
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0 + 1 | 0;
                break;
              } else if ($248 << 24 >> 24 == 41) {
                if (($disphint_0 | 0) != 0) {
                  label = 1639;
                  break L1848;
                }
                var $574 = _make_space($c, 0);
                if (($574 | 0) != 0) {
                  label = 1641;
                  break L1848;
                }
                var $581 = HEAP32[$28$s2];
                HEAP32[$28$s2] = $581 + 1 | 0;
                HEAP8[$581] = 4;
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = $percent_0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0 - 1 | 0;
                break;
              } else if ($248 << 24 >> 24 == 35) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $p_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = 0;
                var $hexcount_1 = 0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if ($248 << 24 >> 24 == 124) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $p_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = 0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else if ($248 << 24 >> 24 == 91) {
                if (($disphint_0 | 0) == 0) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $p_0;
                  var $percent_1 = 0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                } else {
                  label = 1646;
                  break L1848;
                }
              } else if ($248 << 24 >> 24 == 93) {
                if (($disphint_0 | 0) == 0) {
                  label = 1648;
                  break L1848;
                } else {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = 0;
                  var $percent_1 = 0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
              } else if ($248 << 24 >> 24 == 34) {
                var $_9 = $_01;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $p_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = 0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = 0;
                var $arg_counter_9 = $arg_counter_0;
                var $level_1 = $level_0;
                break;
              } else {
                if (($248 - 48 & 255) < 10) {
                  if ($248 << 24 >> 24 == 48) {
                    label = 1651;
                    break L1848;
                  } else {
                    var $_9 = $_01;
                    var $p_3 = $p_0;
                    var $n_3 = $n_0;
                    var $digptr_1 = $p_0;
                    var $quoted_1 = $quoted_0;
                    var $tokenp_2 = $tokenp_1;
                    var $hexfmt_3 = $hexfmt_0;
                    var $base64_1 = $base64_0;
                    var $disphint_1 = $disphint_0;
                    var $percent_1 = $percent_0;
                    var $hexcount_1 = $hexcount_0;
                    var $quoted_esc_1 = $quoted_esc_0;
                    var $arg_counter_9 = $arg_counter_0;
                    var $level_1 = $level_0;
                    break;
                  }
                }
                var $607 = $248 << 24 >> 24;
                if ((_memchr(410312, $607, 71) | 0) != 0) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $p_0;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
                if ((_whitespacep($p_0) | 0) != 0) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $percent_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                }
                if ($248 << 24 >> 24 == 123) {
                  label = 1655;
                  break L1848;
                }
                if ((_memchr(485548, $607, 3) | 0) != 0) {
                  label = 1657;
                  break L1848;
                }
                if ($29 & $248 << 24 >> 24 == 37) {
                  var $_9 = $_01;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = $p_0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_0;
                  var $level_1 = $level_0;
                  break;
                } else {
                  label = 1659;
                  break L1848;
                }
              }
            }
            if ($248 << 24 >> 24 == 109 | $248 << 24 >> 24 == 77) {
              HEAP32[$nm$s2] = 0;
              var $253 = HEAP8[$p_0] << 24 >> 24 == 109 ? 1 : 5;
              if ($30) {
                var $_1 = $_01 + 4 | 0;
                var $arg_counter_1 = $arg_counter_0;
                var $m_0_in_in = $_01;
              } else {
                var $_1 = $_01;
                var $arg_counter_1 = $arg_counter_0 + 1 | 0;
                var $m_0_in_in = HEAP32[($arg_counter_0 << 2 >> 2) + $arg_list$s2];
              }
              var $m_0_in_in;
              var $arg_counter_1;
              var $_1;
              var $m_0 = HEAP32[$m_0_in_in >> 2];
              if ((__gcry_mpi_get_flag($m_0, 2) | 0) != 0) {
                var $264 = __gcry_mpi_get_opaque($m_0, $nbits);
                var $267 = (HEAP32[$nbits >> 2] + 7 | 0) >>> 3;
                HEAP32[$nm$s2] = $267;
                if (($264 | 0) == 0 | ($267 | 0) == 0) {
                  var $_9 = $_1;
                  var $p_3 = $p_0;
                  var $n_3 = $n_0;
                  var $digptr_1 = $digptr_0;
                  var $quoted_1 = $quoted_0;
                  var $tokenp_2 = $tokenp_1;
                  var $hexfmt_3 = $hexfmt_0;
                  var $base64_1 = $base64_0;
                  var $disphint_1 = $disphint_0;
                  var $percent_1 = 0;
                  var $hexcount_1 = $hexcount_0;
                  var $quoted_esc_1 = $quoted_esc_0;
                  var $arg_counter_9 = $arg_counter_1;
                  var $level_1 = $level_0;
                  break;
                }
                var $271 = _make_space($c, $267);
                if (($271 | 0) != 0) {
                  label = 1575;
                  break L1848;
                }
                do {
                  if ((__gcry_is_secure(HEAP32[$19$s2] | 0) | 0) == 0) {
                    if ((__gcry_mpi_get_flag($m_0, 1) | 0) == 0) {
                      break;
                    }
                    var $287 = __gcry_malloc_secure(HEAP32[$3$s2]);
                    if (($287 | 0) == 0) {
                      label = 1579;
                      break L1848;
                    }
                    var $295 = HEAP32[$19$s2];
                    _memcpy($287, $295 | 0, HEAP32[$28$s2] - $295 | 0);
                    HEAP32[$28$s2] = $287 + (HEAP32[$28$s2] - HEAP32[$19$s2]) | 0;
                    __gcry_free(HEAP32[$19$s2] | 0);
                    HEAP32[$19$s2] = $287;
                  }
                } while (0);
                var $310 = HEAP32[$28$s2];
                HEAP32[$28$s2] = $310 + 1 | 0;
                HEAP8[$310] = 1;
                var $315 = HEAP32[$28$s2];
                tempBigInt = HEAP32[$nm$s2] & 65535;
                HEAP8[$315] = tempBigInt & 255;
                tempBigInt = tempBigInt >> 8;
                HEAP8[$315 + 1] = tempBigInt & 255;
                var $317 = HEAP32[$28$s2] + 2 | 0;
                HEAP32[$28$s2] = $317;
                _memcpy($317, $264, HEAP32[$nm$s2]);
                HEAP32[$28$s2] = HEAP32[$28$s2] + HEAP32[$nm$s2] | 0;
                var $_9 = $_1;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = 0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_1;
                var $level_1 = $level_0;
                break;
              }
              if ((__gcry_mpi_print($253, 0, 0, $nm, $m_0) | 0) != 0) {
                label = 1583;
                break L1848;
              }
              var $328 = _make_space($c, HEAP32[$nm$s2]);
              if (($328 | 0) != 0) {
                label = 1585;
                break L1848;
              }
              do {
                if ((__gcry_is_secure(HEAP32[$19$s2] | 0) | 0) == 0) {
                  if ((__gcry_mpi_get_flag($m_0, 1) | 0) == 0) {
                    break;
                  }
                  var $344 = __gcry_malloc_secure(HEAP32[$3$s2]);
                  if (($344 | 0) == 0) {
                    label = 1589;
                    break L1848;
                  }
                  var $352 = HEAP32[$19$s2];
                  _memcpy($344, $352 | 0, HEAP32[$28$s2] - $352 | 0);
                  HEAP32[$28$s2] = $344 + (HEAP32[$28$s2] - HEAP32[$19$s2]) | 0;
                  __gcry_free(HEAP32[$19$s2] | 0);
                  HEAP32[$19$s2] = $344;
                }
              } while (0);
              var $367 = HEAP32[$28$s2];
              HEAP32[$28$s2] = $367 + 1 | 0;
              HEAP8[$367] = 1;
              var $372 = HEAP32[$28$s2];
              tempBigInt = HEAP32[$nm$s2] & 65535;
              HEAP8[$372] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$372 + 1] = tempBigInt & 255;
              var $374 = HEAP32[$28$s2] + 2 | 0;
              HEAP32[$28$s2] = $374;
              if ((__gcry_mpi_print($253, $374, HEAP32[$nm$s2], $nm, $m_0) | 0) != 0) {
                label = 1592;
                break L1848;
              }
              HEAP32[$28$s2] = HEAP32[$28$s2] + HEAP32[$nm$s2] | 0;
              var $_9 = $_1;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = $quoted_0;
              var $tokenp_2 = $tokenp_1;
              var $hexfmt_3 = $hexfmt_0;
              var $base64_1 = $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = 0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_1;
              var $level_1 = $level_0;
              break;
            } else if ($248 << 24 >> 24 == 115) {
              if ($31) {
                var $_2 = $_01 + 4 | 0;
                var $arg_counter_2 = $arg_counter_0;
                var $astr_0_in_in = $_01;
              } else {
                var $_2 = $_01;
                var $arg_counter_2 = $arg_counter_0 + 1 | 0;
                var $astr_0_in_in = HEAP32[($arg_counter_0 << 2 >> 2) + $arg_list$s2];
              }
              var $astr_0_in_in;
              var $arg_counter_2;
              var $_2;
              var $astr_0 = HEAP32[$astr_0_in_in >> 2];
              var $391 = _strlen($astr_0);
              var $392 = _make_space($c, $391);
              if (($392 | 0) != 0) {
                label = 1598;
                break L1848;
              }
              var $399 = HEAP32[$28$s2];
              HEAP32[$28$s2] = $399 + 1 | 0;
              HEAP8[$399] = 1;
              var $403 = HEAP32[$28$s2];
              tempBigInt = $391 & 65535;
              HEAP8[$403] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$403 + 1] = tempBigInt & 255;
              var $405 = HEAP32[$28$s2] + 2 | 0;
              HEAP32[$28$s2] = $405;
              _memcpy($405, $astr_0, $391);
              HEAP32[$28$s2] = HEAP32[$28$s2] + $391 | 0;
              var $_9 = $_2;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = $quoted_0;
              var $tokenp_2 = $tokenp_1;
              var $hexfmt_3 = $hexfmt_0;
              var $base64_1 = $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = 0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_2;
              var $level_1 = $level_0;
              break;
            } else if ($248 << 24 >> 24 == 98) {
              if ($32) {
                var $_4 = $_01 + 8 | 0;
                var $arg_counter_4 = $arg_counter_0;
                var $astr16_0_in_in = $_01 + 4 | 0;
                var $alen17_032_in_in = $_01;
              } else {
                var $_4 = $_01;
                var $arg_counter_4 = $arg_counter_0 + 2 | 0;
                var $astr16_0_in_in = HEAP32[($arg_counter_0 + 1 << 2 >> 2) + $arg_list$s2];
                var $alen17_032_in_in = HEAP32[($arg_counter_0 << 2 >> 2) + $arg_list$s2];
              }
              var $alen17_032_in_in;
              var $astr16_0_in_in;
              var $arg_counter_4;
              var $_4;
              var $alen17_032 = HEAP32[$alen17_032_in_in >> 2];
              var $astr16_0 = HEAP32[$astr16_0_in_in >> 2];
              var $420 = _make_space($c, $alen17_032);
              if (($420 | 0) != 0) {
                label = 1604;
                break L1848;
              }
              do {
                if (($alen17_032 | 0) != 0) {
                  if ((__gcry_is_secure(HEAP32[$19$s2] | 0) | 0) != 0) {
                    break;
                  }
                  if ((__gcry_is_secure($astr16_0) | 0) == 0) {
                    break;
                  }
                  var $438 = __gcry_malloc_secure(HEAP32[$3$s2]);
                  if (($438 | 0) == 0) {
                    label = 1609;
                    break L1848;
                  }
                  var $446 = HEAP32[$19$s2];
                  _memcpy($438, $446 | 0, HEAP32[$28$s2] - $446 | 0);
                  HEAP32[$28$s2] = $438 + (HEAP32[$28$s2] - HEAP32[$19$s2]) | 0;
                  __gcry_free(HEAP32[$19$s2] | 0);
                  HEAP32[$19$s2] = $438;
                }
              } while (0);
              var $461 = HEAP32[$28$s2];
              HEAP32[$28$s2] = $461 + 1 | 0;
              HEAP8[$461] = 1;
              var $465 = HEAP32[$28$s2];
              tempBigInt = $alen17_032 & 65535;
              HEAP8[$465] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$465 + 1] = tempBigInt & 255;
              var $467 = HEAP32[$28$s2] + 2 | 0;
              HEAP32[$28$s2] = $467;
              _memcpy($467, $astr16_0, $alen17_032);
              HEAP32[$28$s2] = HEAP32[$28$s2] + $alen17_032 | 0;
              var $_9 = $_4;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = $quoted_0;
              var $tokenp_2 = $tokenp_1;
              var $hexfmt_3 = $hexfmt_0;
              var $base64_1 = $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = 0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_4;
              var $level_1 = $level_0;
              break;
            } else if ($248 << 24 >> 24 == 100) {
              if ($33) {
                var $aint_0_in_in = $_01;
                var $_5 = $_01 + 4 | 0;
                var $arg_counter_5 = $arg_counter_0;
              } else {
                var $aint_0_in_in = HEAP32[($arg_counter_0 << 2 >> 2) + $arg_list$s2];
                var $_5 = $_01;
                var $arg_counter_5 = $arg_counter_0 + 1 | 0;
              }
              var $arg_counter_5;
              var $_5;
              var $aint_0_in_in;
              _sprintf($34, 487328, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[$aint_0_in_in >> 2], tempInt));
              var $479 = _strlen($34);
              var $480 = _make_space($c, $479);
              if (($480 | 0) != 0) {
                label = 1616;
                break L1848;
              }
              var $487 = HEAP32[$28$s2];
              HEAP32[$28$s2] = $487 + 1 | 0;
              HEAP8[$487] = 1;
              var $491 = HEAP32[$28$s2];
              tempBigInt = $479 & 65535;
              HEAP8[$491] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$491 + 1] = tempBigInt & 255;
              var $493 = HEAP32[$28$s2] + 2 | 0;
              HEAP32[$28$s2] = $493;
              _memcpy($493, $34, $479);
              HEAP32[$28$s2] = HEAP32[$28$s2] + $479 | 0;
              var $_9 = $_5;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = $quoted_0;
              var $tokenp_2 = $tokenp_1;
              var $hexfmt_3 = $hexfmt_0;
              var $base64_1 = $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = 0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_5;
              var $level_1 = $level_0;
              break;
            } else if ($248 << 24 >> 24 == 117) {
              if ($35) {
                var $aint25_0_in_in = $_01;
                var $_6 = $_01 + 4 | 0;
                var $arg_counter_6 = $arg_counter_0;
              } else {
                var $aint25_0_in_in = HEAP32[($arg_counter_0 << 2 >> 2) + $arg_list$s2];
                var $_6 = $_01;
                var $arg_counter_6 = $arg_counter_0 + 1 | 0;
              }
              var $arg_counter_6;
              var $_6;
              var $aint25_0_in_in;
              _sprintf($36, 486392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[$aint25_0_in_in >> 2], tempInt));
              var $505 = _strlen($36);
              var $506 = _make_space($c, $505);
              if (($506 | 0) != 0) {
                label = 1622;
                break L1848;
              }
              var $513 = HEAP32[$28$s2];
              HEAP32[$28$s2] = $513 + 1 | 0;
              HEAP8[$513] = 1;
              var $517 = HEAP32[$28$s2];
              tempBigInt = $505 & 65535;
              HEAP8[$517] = tempBigInt & 255;
              tempBigInt = tempBigInt >> 8;
              HEAP8[$517 + 1] = tempBigInt & 255;
              var $519 = HEAP32[$28$s2] + 2 | 0;
              HEAP32[$28$s2] = $519;
              _memcpy($519, $36, $505);
              HEAP32[$28$s2] = HEAP32[$28$s2] + $505 | 0;
              var $_9 = $_6;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = $quoted_0;
              var $tokenp_2 = $tokenp_1;
              var $hexfmt_3 = $hexfmt_0;
              var $base64_1 = $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = 0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_6;
              var $level_1 = $level_0;
              break;
            } else if ($248 << 24 >> 24 == 83) {
              if ($37) {
                var $asexp_0_in_in = $_01;
                var $_7 = $_01 + 4 | 0;
                var $arg_counter_7 = $arg_counter_0;
              } else {
                var $asexp_0_in_in = HEAP32[($arg_counter_0 << 2 >> 2) + $arg_list$s2];
                var $_7 = $_01;
                var $arg_counter_7 = $arg_counter_0 + 1 | 0;
              }
              var $arg_counter_7;
              var $_7;
              var $asexp_0_in_in;
              var $asexp_0 = HEAP32[$asexp_0_in_in >> 2];
              var $530 = _get_internal_buffer($asexp_0, $aoff);
              if (($530 | 0) == 0) {
                var $_9 = $_7;
                var $p_3 = $p_0;
                var $n_3 = $n_0;
                var $digptr_1 = $digptr_0;
                var $quoted_1 = $quoted_0;
                var $tokenp_2 = $tokenp_1;
                var $hexfmt_3 = $hexfmt_0;
                var $base64_1 = $base64_0;
                var $disphint_1 = $disphint_0;
                var $percent_1 = 0;
                var $hexcount_1 = $hexcount_0;
                var $quoted_esc_1 = $quoted_esc_0;
                var $arg_counter_9 = $arg_counter_7;
                var $level_1 = $level_0;
                break;
              }
              var $533 = _make_space($c, $530);
              if (($533 | 0) != 0) {
                label = 1629;
                break L1848;
              }
              _memcpy(HEAP32[$28$s2], $asexp_0 + HEAP32[$aoff >> 2] | 0, $530);
              HEAP32[$28$s2] = HEAP32[$28$s2] + $530 | 0;
              var $_9 = $_7;
              var $p_3 = $p_0;
              var $n_3 = $n_0;
              var $digptr_1 = $digptr_0;
              var $quoted_1 = $quoted_0;
              var $tokenp_2 = $tokenp_1;
              var $hexfmt_3 = $hexfmt_0;
              var $base64_1 = $base64_0;
              var $disphint_1 = $disphint_0;
              var $percent_1 = 0;
              var $hexcount_1 = $hexcount_0;
              var $quoted_esc_1 = $quoted_esc_0;
              var $arg_counter_9 = $arg_counter_7;
              var $level_1 = $level_0;
              break;
            } else {
              label = 1631;
              break L1848;
            }
          }
        } while (0);
        var $level_1;
        var $arg_counter_9;
        var $quoted_esc_1;
        var $hexcount_1;
        var $percent_1;
        var $disphint_1;
        var $base64_1;
        var $hexfmt_3;
        var $tokenp_2;
        var $quoted_1;
        var $digptr_1;
        var $n_3;
        var $p_3;
        var $_9;
        var $_01 = $_9;
        var $p_0 = $p_3 + 1 | 0;
        var $n_0 = $n_3 - 1 | 0;
        var $digptr_0 = $digptr_1;
        var $quoted_0 = $quoted_1;
        var $tokenp_0 = $tokenp_2;
        var $hexfmt_0 = $hexfmt_3;
        var $base64_0 = $base64_1;
        var $disphint_0 = $disphint_1;
        var $percent_0 = $percent_1;
        var $hexcount_0 = $hexcount_1;
        var $quoted_esc_0 = $quoted_esc_1;
        var $arg_counter_0 = $arg_counter_9;
        var $level_0 = $level_1;
      }
      do {
        if (label == 1515) {
          HEAP32[$dummy_erroff_erroff$s2] = $48 - $buffer | 0;
          var $err_0_ph = $51;
        } else if (label == 1534) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 206;
        } else if (label == 1528) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 206;
        } else if (label == 1545) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 212;
        } else if (label == 1523) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 206;
        } else if (label == 1538) {
          HEAP32[$dummy_erroff_erroff$s2] = $131 - $buffer | 0;
          var $err_0_ph = $134;
        } else if (label == 1547) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $170;
        } else if (label == 1553) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 211;
        } else if (label == 1560) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 202;
        } else if (label == 1562) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $221;
        } else if (label == 1566) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 201;
        } else if (label == 1575) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $271;
        } else if (label == 1579) {
          var $err_0 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
          label = 1665;
          break L1846;
        } else if (label == 1583) {
          __gcry_bug(469160, 1301, 494020);
        } else if (label == 1585) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $328;
        } else if (label == 1589) {
          var $err_0 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
          label = 1665;
          break L1846;
        } else if (label == 1592) {
          __gcry_bug(469160, 1328, 494020);
        } else if (label == 1598) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $392;
        } else if (label == 1604) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $420;
        } else if (label == 1609) {
          var $err_0 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
          label = 1665;
          break L1846;
        } else if (label == 1616) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $480;
        } else if (label == 1622) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $506;
        } else if (label == 1629) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $533;
        } else if (label == 1631) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 201;
        } else if (label == 1634) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 209;
        } else if (label == 1636) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $557;
        } else if (label == 1639) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 209;
        } else if (label == 1641) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = $574;
        } else if (label == 1646) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 208;
        } else if (label == 1648) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 209;
        } else if (label == 1651) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 207;
        } else if (label == 1655) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 210;
        } else if (label == 1657) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 210;
        } else if (label == 1659) {
          HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
          var $err_0_ph = 205;
        } else if (label == 1661) {
          var $633 = _make_space($c, 0);
          if (($633 | 0) == 0) {
            var $640 = HEAP32[$28$s2];
            HEAP32[$28$s2] = $640 + 1 | 0;
            HEAP8[$640] = 0;
            var $err_0 = ($level_0 | 0) == 0 ? 0 : 203;
            label = 1665;
            break L1846;
          } else {
            HEAP32[$dummy_erroff_erroff$s2] = $p_0 - $buffer | 0;
            var $err_0_ph = $633;
            break;
          }
        }
      } while (0);
      var $err_0_ph;
      var $err_035 = $err_0_ph;
      var $648 = HEAP32[$19$s2];
      break;
    }
  } while (0);
  do {
    if (label == 1665) {
      var $err_0;
      var $646 = HEAP32[$19$s2];
      if (($err_0 | 0) != 0) {
        var $err_035 = $err_0;
        var $648 = $646;
        break;
      }
      var $storemerge = _normalize($646);
      var $err_034 = 0;
      var $err_034;
      var $storemerge;
      HEAP32[$retsexp >> 2] = $storemerge;
      var $665 = _gcry_error1456($err_034);
      STACKTOP = __stackBase__;
      return $665;
    }
  } while (0);
  var $648;
  var $err_035;
  if (($648 | 0) == 0) {
    var $storemerge = 0;
    var $err_034 = $err_035;
    var $err_034;
    var $storemerge;
    HEAP32[$retsexp >> 2] = $storemerge;
    var $665 = _gcry_error1456($err_034);
    STACKTOP = __stackBase__;
    return $665;
  }
  var $651 = $648 | 0;
  L2041 : do {
    if ((__gcry_is_secure($651) | 0) != 0) {
      var $655 = HEAP32[$3$s2];
      if (($655 | 0) == 0) {
        break;
      } else {
        var $_vptr_0144 = $651;
        var $_vlen_0145 = $655;
      }
      while (1) {
        var $_vlen_0145;
        var $_vptr_0144;
        HEAP8[$_vptr_0144] = 0;
        var $658 = $_vlen_0145 - 1 | 0;
        if (($658 | 0) == 0) {
          break L2041;
        } else {
          var $_vptr_0144 = $_vptr_0144 + 1 | 0;
          var $_vlen_0145 = $658;
        }
      }
    }
  } while (0);
  __gcry_free(HEAP32[$19$s2] | 0);
  var $storemerge = 0;
  var $err_034 = $err_035;
  var $err_034;
  var $storemerge;
  HEAP32[$retsexp >> 2] = $storemerge;
  var $665 = _gcry_error1456($err_034);
  STACKTOP = __stackBase__;
  return $665;
}
_vsexp_sscan["X"] = 1;
function _whitespacep($p) {
  var $2 = HEAP8[$p] << 24 >> 24;
  if (($2 | 0) == 32 | ($2 | 0) == 9 | ($2 | 0) == 11 | ($2 | 0) == 12 | ($2 | 0) == 13 | ($2 | 0) == 10) {
    var $_0 = 1;
  } else {
    var $_0 = 0;
  }
  var $_0;
  return $_0;
}
function _unquote_string($string, $length, $buf) {
  if (($length | 0) == 0) {
    var $d_0_lcssa = $buf;
    var $d_0_lcssa;
    var $109 = $d_0_lcssa;
    var $110 = $buf;
    var $111 = $109 - $110 | 0;
    return $111;
  } else {
    var $esc_026 = 0;
    var $s_027 = $string;
    var $d_028 = $buf;
    var $n_029 = $length;
  }
  while (1) {
    var $n_029;
    var $d_028;
    var $s_027;
    var $esc_026;
    var $3 = HEAP8[$s_027];
    do {
      if (($esc_026 | 0) == 0) {
        if ($3 << 24 >> 24 == 92) {
          var $n_2 = $n_029;
          var $d_2 = $d_028;
          var $s_2 = $s_027;
          var $esc_1 = 1;
          break;
        }
        HEAP8[$d_028] = $3;
        var $n_2 = $n_029;
        var $d_2 = $d_028 + 1 | 0;
        var $s_2 = $s_027;
        var $esc_1 = $esc_026;
      } else {
        var $5 = $3 & 255;
        if (($5 | 0) == 114) {
          HEAP8[$d_028] = 13;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 102) {
          HEAP8[$d_028] = 12;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 118) {
          HEAP8[$d_028] = 11;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 110) {
          HEAP8[$d_028] = 10;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 34) {
          HEAP8[$d_028] = 34;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 116) {
          HEAP8[$d_028] = 9;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 13) {
          if ($n_029 >>> 0 <= 1) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          var $27 = $s_027 + 1 | 0;
          var $29 = HEAP8[$27] << 24 >> 24 == 10;
          var $n_2 = ($29 << 31 >> 31) + $n_029 | 0;
          var $d_2 = $d_028;
          var $s_2 = $29 ? $27 : $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 92) {
          HEAP8[$d_028] = 92;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 98) {
          HEAP8[$d_028] = 8;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 39) {
          HEAP8[$d_028] = 39;
          var $n_2 = $n_029;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 10) {
          if ($n_029 >>> 0 <= 1) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          var $34 = $s_027 + 1 | 0;
          var $36 = HEAP8[$34] << 24 >> 24 == 13;
          var $n_2 = ($36 << 31 >> 31) + $n_029 | 0;
          var $d_2 = $d_028;
          var $s_2 = $36 ? $34 : $s_027;
          var $esc_1 = 0;
          break;
        } else if (($5 | 0) == 120) {
          if ($n_029 >>> 0 <= 2) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          var $41 = $s_027 + 1 | 0;
          var $42 = HEAP8[$41];
          if (!(($42 - 48 & 255) < 10 | ($42 - 65 & 255) < 6 | ($42 - 97 & 255) < 6)) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          var $47 = $s_027 + 2 | 0;
          var $48 = HEAP8[$47];
          if (!(($48 - 48 & 255) < 10 | ($48 - 65 & 255) < 6 | ($48 - 97 & 255) < 6)) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          var $53 = HEAP8[$41];
          do {
            if (($53 & 255) < 58) {
              var $64 = $53 - 48 & 255;
            } else {
              if (($53 & 255) < 71) {
                var $64 = $53 - 55 & 255;
                break;
              } else {
                var $64 = $53 - 87 & 255;
                break;
              }
            }
          } while (0);
          var $64;
          var $65 = $64 << 4;
          var $66 = HEAP8[$47];
          do {
            if (($66 & 255) < 58) {
              var $77 = $66 - 48 & 255;
            } else {
              if (($66 & 255) < 71) {
                var $77 = $66 - 55 & 255;
                break;
              } else {
                var $77 = $66 - 87 & 255;
                break;
              }
            }
          } while (0);
          var $77;
          HEAP8[$d_028] = $77 + $65 & 255;
          var $n_2 = $n_029 - 2 | 0;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $47;
          var $esc_1 = 0;
          break;
        } else {
          if (!($n_029 >>> 0 > 2 & ($3 & 255) > 47 & ($3 & 255) < 56)) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          var $87 = HEAP8[$s_027 + 1 | 0];
          if (($87 - 48 & 255) >= 8) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          var $90 = $s_027 + 2 | 0;
          var $91 = HEAP8[$90];
          if (($91 - 48 & 255) >= 8) {
            var $n_2 = $n_029;
            var $d_2 = $d_028;
            var $s_2 = $s_027;
            var $esc_1 = 0;
            break;
          }
          HEAP8[$d_028] = (($87 << 3) + (($3 << 6) + 80 & 255) & 255) + $91 & 255;
          var $n_2 = $n_029 - 2 | 0;
          var $d_2 = $d_028 + 1 | 0;
          var $s_2 = $90;
          var $esc_1 = 0;
          break;
        }
      }
    } while (0);
    var $esc_1;
    var $s_2;
    var $d_2;
    var $n_2;
    var $106 = $n_2 - 1 | 0;
    if (($106 | 0) == 0) {
      var $d_0_lcssa = $d_2;
      break;
    } else {
      var $esc_026 = $esc_1;
      var $s_027 = $s_2 + 1 | 0;
      var $d_028 = $d_2;
      var $n_029 = $106;
    }
  }
  var $d_0_lcssa;
  var $109 = $d_0_lcssa;
  var $110 = $buf;
  var $111 = $109 - $110 | 0;
  return $111;
}
_unquote_string["X"] = 1;
function _hextobyte($s) {
  var $1 = HEAP8[$s];
  var $2 = $1 & 255;
  do {
    if (($1 - 48 & 255) < 10) {
      var $c_0 = ($2 << 4) - 768 | 0;
    } else {
      if (($1 - 65 & 255) < 6) {
        var $c_0 = ($2 << 4) - 880 | 0;
        break;
      }
      if (($1 - 97 & 255) >= 6) {
        var $c_0 = 0;
        break;
      }
      var $c_0 = ($2 << 4) - 1392 | 0;
    }
  } while (0);
  var $c_0;
  var $19 = HEAP8[$s + 1 | 0];
  var $20 = $19 & 255;
  if (($19 - 48 & 255) < 10) {
    var $c_1 = $c_0 - 48 + $20 | 0;
    var $c_1;
    return $c_1;
  }
  if (($19 - 65 & 255) < 6) {
    var $c_1 = $c_0 - 55 + $20 | 0;
    var $c_1;
    return $c_1;
  }
  if (($19 - 97 & 255) >= 6) {
    var $c_1 = $c_0;
    var $c_1;
    return $c_1;
  }
  var $c_1 = $c_0 - 87 + $20 | 0;
  var $c_1;
  return $c_1;
}
function __gcry_sexp_vbuild($retsexp, $erroff, $format, $arg_ptr) {
  return _vsexp_sscan($retsexp, $erroff, $format, _strlen($format), 1, 0, $arg_ptr);
}
function __gcry_sexp_build_array($retsexp, $erroff, $format, $arg_list) {
  var __stackBase__ = STACKTOP;
  var $2 = _sexp_sscan($retsexp, $erroff, $format, _strlen($format), 1, $arg_list, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return $2;
}
function __gcry_sexp_sscan($retsexp, $erroff, $buffer, $length) {
  var __stackBase__ = STACKTOP;
  var $1 = _sexp_sscan($retsexp, $erroff, $buffer, $length, 0, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  STACKTOP = __stackBase__;
  return $1;
}
function _suitable_encoding($buffer, $length) {
  var label = 0;
  if (($length | 0) == 0) {
    var $_0 = 1;
    var $_0;
    return $_0;
  } else {
    var $maybe_token_0 = 1;
    var $_01 = $length;
    var $s_0 = $buffer;
  }
  while (1) {
    var $s_0;
    var $_01;
    var $maybe_token_0;
    if (($_01 | 0) == 0) {
      break;
    }
    var $4 = HEAP8[$s_0];
    if (($4 & 255) < 32 | ($4 - 127 & 255) < 34) {
      if ((_memchr(489656, HEAPU8[$s_0], 10) | 0) == 0) {
        var $_0 = 0;
        label = 1751;
        break;
      }
    }
    do {
      if (($maybe_token_0 | 0) == 0) {
        var $maybe_token_1 = 0;
      } else {
        var $14 = HEAP8[$s_0];
        if (($14 - 65 & 255) < 26 | ($14 - 97 & 255) < 26 | ($14 - 48 & 255) < 10) {
          var $maybe_token_1 = $maybe_token_0;
          break;
        }
        var $maybe_token_1 = (_memchr(488004, $14 & 255, 9) | 0) == 0 ? 0 : $maybe_token_0;
      }
    } while (0);
    var $maybe_token_1;
    var $maybe_token_0 = $maybe_token_1;
    var $_01 = $_01 - 1 | 0;
    var $s_0 = $s_0 + 1 | 0;
  }
  if (label == 1751) {
    var $_0;
    return $_0;
  }
  do {
    if (($maybe_token_0 | 0) != 0) {
      if ((HEAP8[$buffer] - 48 & 255) < 10) {
        break;
      } else {
        var $_0 = 2;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $_0 = 1;
  var $_0;
  return $_0;
}
function _convert_to_string($s, $len, $dest) {
  var __stackBase__ = STACKTOP;
  if (($dest | 0) == 0) {
    if (($len | 0) == 0) {
      var $_0 = 2;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $count_012 = 2;
      var $_1313 = $len;
      var $_114 = $s;
    }
    while (1) {
      var $_114;
      var $_1313;
      var $count_012;
      var $53 = HEAP8[$_114];
      var $54 = $53 & 255;
      do {
        if (($54 | 0) == 8 | ($54 | 0) == 9 | ($54 | 0) == 11 | ($54 | 0) == 10 | ($54 | 0) == 12 | ($54 | 0) == 13 | ($54 | 0) == 34 | ($54 | 0) == 39 | ($54 | 0) == 92) {
          var $count_1 = $count_012 + 2 | 0;
        } else {
          if (($53 & 255) < 32 | ($53 - 127 & 255) < 34) {
            var $count_1 = $count_012 + 4 | 0;
            break;
          } else {
            var $count_1 = $count_012 + 1 | 0;
            break;
          }
        }
      } while (0);
      var $count_1;
      var $65 = $_1313 - 1 | 0;
      if (($65 | 0) == 0) {
        var $_0 = $count_1;
        break;
      } else {
        var $count_012 = $count_1;
        var $_1313 = $65;
        var $_114 = $_114 + 1 | 0;
      }
    }
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4 = $dest + 1 | 0;
  HEAP8[$dest] = 34;
  L2159 : do {
    if (($len | 0) == 0) {
      var $p_0_lcssa = $4;
    } else {
      var $p_09 = $4;
      var $_0210 = $len;
      var $_0111 = $s;
      while (1) {
        var $_0111;
        var $_0210;
        var $p_09;
        var $6 = HEAP8[$_0111];
        var $7 = $6 & 255;
        do {
          if (($7 | 0) == 9) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 116;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 12) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 102;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 11) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 118;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 92) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 92;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 13) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 114;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 10) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 110;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 34) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 34;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 39) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 39;
            var $p_1 = $p_09 + 2 | 0;
          } else if (($7 | 0) == 8) {
            HEAP8[$p_09] = 92;
            HEAP8[$p_09 + 1 | 0] = 98;
            var $p_1 = $p_09 + 2 | 0;
          } else {
            if (($6 & 255) < 32 | ($6 - 127 & 255) < 34) {
              _sprintf($p_09, 490564, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$_0111], tempInt));
              var $p_1 = $p_09 + 4 | 0;
              break;
            } else {
              HEAP8[$p_09] = $6;
              var $p_1 = $p_09 + 1 | 0;
              break;
            }
          }
        } while (0);
        var $p_1;
        var $46 = $_0210 - 1 | 0;
        if (($46 | 0) == 0) {
          var $p_0_lcssa = $p_1;
          break L2159;
        } else {
          var $p_09 = $p_1;
          var $_0210 = $46;
          var $_0111 = $_0111 + 1 | 0;
        }
      }
    }
  } while (0);
  var $p_0_lcssa;
  HEAP8[$p_0_lcssa] = 34;
  var $_0 = $p_0_lcssa + 1 - $dest | 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_convert_to_string["X"] = 1;
function _convert_to_token($src, $len, $dest) {
  if (($dest | 0) != 0) {
    _memcpy($dest, $src, $len);
  }
  return $len;
}
function _convert_to_hex($src, $len, $dest) {
  var __stackBase__ = STACKTOP;
  if (($dest | 0) == 0) {
    var $16 = $len << 1;
    var $17 = $16 + 2 | 0;
    STACKTOP = __stackBase__;
    return $17;
  }
  var $3 = $dest + 1 | 0;
  HEAP8[$dest] = 35;
  if (($len | 0) == 0) {
    var $_0_lcssa = $3;
  } else {
    var $6 = $len << 1 | 1;
    var $_01 = $3;
    var $i_02 = 0;
    while (1) {
      var $i_02;
      var $_01;
      _sprintf($_01, 465420, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAPU8[$src + $i_02 | 0], tempInt));
      var $12 = $i_02 + 1 | 0;
      if (($12 | 0) == ($len | 0)) {
        break;
      } else {
        var $_01 = $_01 + 2 | 0;
        var $i_02 = $12;
      }
    }
    var $_0_lcssa = $dest + $6 | 0;
  }
  var $_0_lcssa;
  HEAP8[$_0_lcssa] = 35;
  var $16 = $len << 1;
  var $17 = $16 + 2 | 0;
  STACKTOP = __stackBase__;
  return $17;
}
function _make_space($c, $n) {
  var $1 = $c + 8 | 0;
  var $3 = $c | 0;
  var $4 = HEAP32[$3 >> 2];
  var $7 = HEAP32[$1 >> 2] - $4 | 0;
  var $10 = $c + 4 | 0;
  var $11 = HEAP32[$10 >> 2];
  if (($7 + ($n + 3) | 0) >>> 0 < $11 >>> 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $16 = ($n << 1) + $11 + 6 | 0;
  if ($16 >>> 0 <= $11 >>> 0) {
    var $_0 = 67;
    var $_0;
    return $_0;
  }
  var $20 = __gcry_realloc($4 | 0, $16);
  if (($20 | 0) == 0) {
    var $_0 = _gpg_err_code_from_errno(HEAP32[___errno_location() >> 2]);
    var $_0;
    return $_0;
  } else {
    HEAP32[$10 >> 2] = $16;
    HEAP32[$1 >> 2] = $20 + $7 | 0;
    HEAP32[$3 >> 2] = $20;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
}
function __gcry_sexp_sprint($list, $mode, $buffer, $maxlength) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $3 = ($mode | 0) == 3;
  var $4 = ($buffer | 0) != 0;
  var $5 = __stackBase__ | 0;
  var $6 = ($buffer | 0) == 0;
  var $7 = ($mode | 0) != 1;
  var $8 = ($buffer | 0) == 0;
  var $9 = ($buffer | 0) != 0;
  var $10 = ($mode | 0) == 1;
  var $indent_0_ph = 0;
  var $len_0_ph = 0;
  var $s_0_ph = ($list | 0) == 0 ? 491232 : $list | 0;
  var $d_0_ph = $buffer;
  L2207 : while (1) {
    var $d_0_ph;
    var $s_0_ph;
    var $len_0_ph;
    var $indent_0_ph;
    var $len_0 = $len_0_ph;
    var $s_0 = $s_0_ph;
    var $d_0 = $d_0_ph;
    while (1) {
      var $d_0;
      var $s_0;
      var $len_0;
      var $13 = HEAP8[$s_0];
      if ($13 << 24 >> 24 == 0) {
        label = 1848;
        break L2207;
      }
      var $16 = $13 & 255;
      if (($16 | 0) == 4) {
        label = 1819;
        break;
      } else if (($16 | 0) == 3) {
        label = 1810;
        break;
      } else if (($16 | 0) != 1) {
        label = 1847;
        break L2207;
      }
      var $53 = $s_0 + 1 | 0;
      var $srcval = (tempInt = HEAPU8[$53] | HEAPU8[$53 + 1] << 8, tempInt << 16 >> 16);
      var $54 = $s_0 + 3 | 0;
      var $55 = $srcval & 65535;
      do {
        if ($3) {
          var $57 = _suitable_encoding($54, $55);
          if (($57 | 0) == 2) {
            var $nn_0 = _convert_to_token($54, $55, 0);
          } else if (($57 | 0) == 1) {
            var $nn_0 = _convert_to_string($54, $55, 0);
          } else {
            var $nn_0 = _convert_to_hex($54, $55, 0);
          }
          var $nn_0;
          var $65 = $nn_0 + $len_0 | 0;
          if ($4) {
            if ($65 >>> 0 >= $maxlength >>> 0) {
              var $_0 = 0;
              label = 1860;
              break L2207;
            }
            if (($57 | 0) == 1) {
              _convert_to_string($54, $55, $d_0);
            } else if (($57 | 0) == 2) {
              _convert_to_token($54, $55, $d_0);
            } else {
              _convert_to_hex($54, $55, $d_0);
            }
            var $d_7 = $d_0 + $nn_0 | 0;
          } else {
            var $d_7 = $d_0;
          }
          var $d_7;
          if (HEAP8[$55 + ($s_0 + 3) | 0] << 24 >> 24 == 4) {
            var $len_3 = $65;
            var $d_8 = $d_7;
            break;
          }
          var $82 = $65 + 1 | 0;
          if (!$4) {
            var $len_3 = $82;
            var $d_8 = $d_7;
            break;
          }
          if ($82 >>> 0 >= $maxlength >>> 0) {
            var $_0 = 0;
            label = 1863;
            break L2207;
          }
          HEAP8[$d_7] = 32;
          var $len_3 = $82;
          var $d_8 = $d_7 + 1 | 0;
        } else {
          _sprintf($5, 467520, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $55, tempInt));
          var $91 = $55 + $len_0 + _strlen($5) | 0;
          if ($6) {
            var $len_3 = $91;
            var $d_8 = $d_0;
            break;
          }
          if ($91 >>> 0 >= $maxlength >>> 0) {
            var $_0 = 0;
            label = 1859;
            break L2207;
          }
          var $95 = _stpcpy($d_0, $5);
          _memcpy($95, $54, $55);
          var $len_3 = $91;
          var $d_8 = $95 + $55 | 0;
        }
      } while (0);
      var $d_8;
      var $len_3;
      var $len_0 = $len_3;
      var $s_0 = $s_0 + ($srcval & 65535) + 3 | 0;
      var $d_0 = $d_8;
    }
    if (label == 1819) {
      label = 0;
      var $34 = $s_0 + 1 | 0;
      var $35 = $len_0 + 1 | 0;
      if ($9) {
        if ($35 >>> 0 >= $maxlength >>> 0) {
          var $_0 = 0;
          label = 1864;
          break;
        }
        HEAP8[$d_0] = 41;
        var $d_5 = $d_0 + 1 | 0;
      } else {
        var $d_5 = $d_0;
      }
      var $d_5;
      var $41 = $indent_0_ph - 1 | 0;
      var $42 = HEAP8[$34];
      if ($42 << 24 >> 24 == 3 | $42 << 24 >> 24 == 0) {
        var $indent_0_ph = $41;
        var $len_0_ph = $35;
        var $s_0_ph = $34;
        var $d_0_ph = $d_5;
        continue;
      }
      if ($10) {
        var $indent_0_ph = $41;
        var $len_0_ph = $35;
        var $s_0_ph = $34;
        var $d_0_ph = $d_5;
        continue;
      }
      var $46 = $41 + ($len_0 + 2) | 0;
      if (!$9) {
        var $indent_0_ph = $41;
        var $len_0_ph = $46;
        var $s_0_ph = $34;
        var $d_0_ph = $d_5;
        continue;
      }
      if ($46 >>> 0 >= $maxlength >>> 0) {
        var $_0 = 0;
        label = 1858;
        break;
      }
      HEAP8[$d_5] = 10;
      if (($41 | 0) <= 0) {
        var $indent_0_ph = $41;
        var $len_0_ph = $46;
        var $s_0_ph = $34;
        var $d_0_ph = $d_5 + 1 | 0;
        continue;
      }
      _memset($d_5 + 1 | 0, 32, $indent_0_ph - 1 | 0);
      var $scevgep26 = $d_5 + $indent_0_ph | 0;
      var $indent_0_ph = $41;
      var $len_0_ph = $46;
      var $s_0_ph = $34;
      var $d_0_ph = $scevgep26;
      continue;
    } else if (label == 1810) {
      label = 0;
      var $18 = $s_0 + 1 | 0;
      if ($7) {
        var $len_2 = $indent_0_ph + $len_0 + (($indent_0_ph | 0) != 0 & 1) | 0;
      } else {
        var $len_2 = $len_0;
      }
      var $len_2;
      var $23 = $len_2 + 1 | 0;
      if ($8) {
        var $d_4 = $d_0;
      } else {
        if ($23 >>> 0 >= $maxlength >>> 0) {
          var $_0 = 0;
          label = 1857;
          break;
        }
        do {
          if (($indent_0_ph | 0) == 0 | $7 ^ 1) {
            var $d_3 = $d_0;
          } else {
            var $28 = $d_0 + 1 | 0;
            HEAP8[$d_0] = 10;
            if (($indent_0_ph | 0) <= 0) {
              var $d_3 = $28;
              break;
            }
            _memset($28, 32, $indent_0_ph);
            var $d_3 = $indent_0_ph + ($d_0 + 1) | 0;
          }
        } while (0);
        var $d_3;
        HEAP8[$d_3] = 40;
        var $d_4 = $d_3 + 1 | 0;
      }
      var $d_4;
      var $indent_0_ph = $indent_0_ph + 1 | 0;
      var $len_0_ph = $23;
      var $s_0_ph = $18;
      var $d_0_ph = $d_4;
      continue;
    }
  }
  if (label == 1847) {
    __gcry_bug(469160, 1872, 495028);
  } else if (label == 1863) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 1864) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 1857) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 1858) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 1859) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 1860) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 1848) {
    do {
      if (($mode | 0) == 1) {
        var $len_4 = $len_0;
        var $d_9 = $d_0;
        label = 1852;
      } else {
        var $104 = $len_0 + 1 | 0;
        if (($buffer | 0) == 0) {
          var $len_42 = $104;
          break;
        }
        if ($104 >>> 0 < $maxlength >>> 0) {
          HEAP8[$d_0] = 10;
          var $len_4 = $104;
          var $d_9 = $d_0 + 1 | 0;
          label = 1852;
          break;
        } else {
          var $_0 = 0;
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      }
    } while (0);
    do {
      if (label == 1852) {
        var $d_9;
        var $len_4;
        if (($buffer | 0) == 0) {
          var $len_42 = $len_4;
          break;
        }
        if ($len_4 >>> 0 >= $maxlength >>> 0) {
          var $_0 = 0;
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
        HEAP8[$d_9] = 0;
        var $_0 = $len_4;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    } while (0);
    var $len_42;
    var $_0 = $len_42 + 1 | 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
__gcry_sexp_sprint["X"] = 1;
function __gcry_private_enable_m_guard() {
  HEAP8[410392] = 1;
  return;
}
function _gpg_err_make1500($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 536870912;
  }
  var $6;
  return $6;
}
function _get_internal_buffer($list, $r_off) {
  var label = 0;
  HEAP32[$r_off >> 2] = 0;
  if (($list | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $4 = $list;
  var $level_0_ph = 0;
  var $p_0_ph = $list | 0;
  L2292 : while (1) {
    var $p_0_ph;
    var $level_0_ph;
    var $p_0 = $p_0_ph;
    while (1) {
      var $p_0;
      var $5 = HEAP8[$p_0];
      if ($5 << 24 >> 24 == 0) {
        var $_0 = 0;
        label = 1883;
        break L2292;
      }
      var $8 = $p_0 + 1 | 0;
      if ($5 << 24 >> 24 == 4) {
        label = 1880;
        break;
      } else if ($5 << 24 >> 24 == 3) {
        break;
      } else if ($5 << 24 >> 24 != 1) {
        var $p_0 = $8;
        continue;
      }
      var $10 = $8;
      var $p_0 = $p_0 + ((tempInt = HEAPU8[$10] | HEAPU8[$10 + 1] << 8, tempInt << 16 >> 16) & 65535) + 3 | 0;
    }
    if (label == 1880) {
      label = 0;
      var $21 = $level_0_ph - 1 | 0;
      if (($21 | 0) == 0) {
        break;
      } else {
        var $level_0_ph = $21;
        var $p_0_ph = $8;
        continue;
      }
    }
    if (($level_0_ph | 0) == 0) {
      HEAP32[$r_off >> 2] = $p_0 - $4 | 0;
    }
    var $level_0_ph = $level_0_ph + 1 | 0;
    var $p_0_ph = $8;
  }
  if (label == 1883) {
    var $_0;
    return $_0;
  }
  var $_0 = $8 - $list | 0;
  var $_0;
  return $_0;
}
function _do_encrypt_stream($ctx, $outbuf, $inbuf, $length) {
  var $3$s2;
  var $1$s2;
  var $1$s2 = ($ctx | 0) >> 2;
  var $2 = HEAP32[$1$s2];
  var $3$s2 = ($ctx + 4 | 0) >> 2;
  var $4 = HEAP32[$3$s2];
  if (($length | 0) == 0) {
    var $i_0_lcssa = $2;
    var $j_0_lcssa = $4;
    var $j_0_lcssa;
    var $i_0_lcssa;
    HEAP32[$1$s2] = $i_0_lcssa;
    HEAP32[$3$s2] = $j_0_lcssa;
    return;
  } else {
    var $i_03 = $2;
    var $_024 = $length;
    var $_015 = $inbuf;
    var $_06 = $outbuf;
    var $j_07 = $4;
  }
  while (1) {
    var $j_07;
    var $_06;
    var $_015;
    var $_024;
    var $i_03;
    var $6 = $_024 - 1 | 0;
    var $8 = $i_03 + 1 & 255;
    var $9 = $ctx + ($8 + 8) | 0;
    var $10 = HEAP8[$9];
    var $11 = $10 & 255;
    var $13 = $11 + $j_07 & 255;
    var $14 = $ctx + ($13 + 8) | 0;
    HEAP8[$9] = HEAP8[$14];
    HEAP8[$14] = $10;
    HEAP8[$_06] = HEAP8[(HEAPU8[$9] + $11 & 255) + $ctx + 8 | 0] ^ HEAP8[$_015];
    if (($6 | 0) == 0) {
      var $i_0_lcssa = $8;
      var $j_0_lcssa = $13;
      break;
    } else {
      var $i_03 = $8;
      var $_024 = $6;
      var $_015 = $_015 + 1 | 0;
      var $_06 = $_06 + 1 | 0;
      var $j_07 = $13;
    }
  }
  var $j_0_lcssa;
  var $i_0_lcssa;
  HEAP32[$1$s2] = $i_0_lcssa;
  HEAP32[$3$s2] = $j_0_lcssa;
  return;
}
function _decrypt($bc, $ret_xl, $ret_xr) {
  var $bc$s2 = $bc >> 2;
  var $6 = HEAP32[$bc$s2 + 1041] ^ HEAP32[$ret_xl >> 2];
  var $27 = HEAP32[$bc$s2 + 1040] ^ HEAP32[$ret_xr >> 2] ^ (HEAP32[((($6 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($6 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($6 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($6 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $48 = HEAP32[$bc$s2 + 1039] ^ $6 ^ (HEAP32[((($27 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($27 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($27 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($27 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $69 = HEAP32[$bc$s2 + 1038] ^ $27 ^ (HEAP32[((($48 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($48 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($48 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($48 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $90 = HEAP32[$bc$s2 + 1037] ^ $48 ^ (HEAP32[((($69 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($69 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($69 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($69 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $111 = HEAP32[$bc$s2 + 1036] ^ $69 ^ (HEAP32[((($90 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($90 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($90 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($90 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $132 = HEAP32[$bc$s2 + 1035] ^ $90 ^ (HEAP32[((($111 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($111 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($111 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($111 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $153 = HEAP32[$bc$s2 + 1034] ^ $111 ^ (HEAP32[((($132 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($132 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($132 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($132 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $174 = HEAP32[$bc$s2 + 1033] ^ $132 ^ (HEAP32[((($153 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($153 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($153 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($153 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $195 = HEAP32[$bc$s2 + 1032] ^ $153 ^ (HEAP32[((($174 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($174 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($174 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($174 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $216 = HEAP32[$bc$s2 + 1031] ^ $174 ^ (HEAP32[((($195 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($195 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($195 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($195 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $237 = HEAP32[$bc$s2 + 1030] ^ $195 ^ (HEAP32[((($216 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($216 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($216 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($216 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $258 = HEAP32[$bc$s2 + 1029] ^ $216 ^ (HEAP32[((($237 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($237 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($237 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($237 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $279 = HEAP32[$bc$s2 + 1028] ^ $237 ^ (HEAP32[((($258 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($258 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($258 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($258 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $300 = HEAP32[$bc$s2 + 1027] ^ $258 ^ (HEAP32[((($279 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($279 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($279 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($279 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $321 = HEAP32[$bc$s2 + 1026] ^ $279 ^ (HEAP32[((($300 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($300 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($300 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($300 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $342 = HEAP32[$bc$s2 + 1025] ^ $300 ^ (HEAP32[((($321 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($321 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($321 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($321 & 255) << 2) + 3072 >> 2) + $bc$s2];
  HEAP32[$ret_xl >> 2] = HEAP32[$bc$s2 + 1024] ^ $321;
  HEAP32[$ret_xr >> 2] = $342;
  return;
}
_decrypt["X"] = 1;
function _gcry_err_make1499($code) {
  return _gpg_err_make1500($code);
}
function __gcry_private_malloc($n) {
  if (($n | 0) == 0) {
    _gpg_err_set_errno(22);
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if (!HEAP8[410392]) {
    var $_0 = _malloc($n);
    var $_0;
    return $_0;
  }
  var $6 = _malloc($n + 5 | 0);
  if (($6 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  HEAP8[$6] = $n & 255;
  HEAP8[$6 + 1 | 0] = $n >>> 8 & 255;
  HEAP8[$6 + 2 | 0] = $n >>> 16 & 255;
  HEAP8[$6 + 3 | 0] = 85;
  HEAP8[$n + ($6 + 4) | 0] = -86;
  var $_0 = $6 + 4 | 0;
  var $_0;
  return $_0;
}
function __gcry_private_malloc_secure($n) {
  if (($n | 0) == 0) {
    _gpg_err_set_errno(22);
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if (!HEAP8[410392]) {
    var $_0 = __gcry_secmem_malloc($n);
    var $_0;
    return $_0;
  }
  var $6 = __gcry_secmem_malloc($n + 5 | 0);
  if (($6 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  HEAP8[$6] = $n & 255;
  HEAP8[$6 + 1 | 0] = $n >>> 8 & 255;
  HEAP8[$6 + 2 | 0] = $n >>> 16 & 255;
  HEAP8[$6 + 3 | 0] = -52;
  HEAP8[$n + ($6 + 4) | 0] = -86;
  var $_0 = $6 + 4 | 0;
  var $_0;
  return $_0;
}
function __gcry_private_realloc($a, $n) {
  if (!HEAP8[410392]) {
    if ((__gcry_private_is_secure($a) | 0) == 0) {
      var $_0 = _realloc($a, $n);
      var $_0;
      return $_0;
    } else {
      var $_0 = __gcry_secmem_realloc($a, $n);
      var $_0;
      return $_0;
    }
  }
  if (($a | 0) == 0) {
    var $_0 = __gcry_private_malloc($n);
    var $_0;
    return $_0;
  }
  __gcry_private_check_heap($a);
  var $18 = HEAPU8[$a - 3 | 0] << 8 | HEAPU8[$a - 4 | 0] | HEAPU8[$a - 2 | 0] << 16;
  if ($18 >>> 0 >= $n >>> 0) {
    var $_0 = $a;
    var $_0;
    return $_0;
  }
  if (HEAP8[$a - 1 | 0] << 24 >> 24 == -52) {
    var $b_0 = __gcry_private_malloc_secure($n);
  } else {
    var $b_0 = __gcry_private_malloc($n);
  }
  var $b_0;
  if (($b_0 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  _memcpy($b_0, $a, $18);
  _memset($b_0 + $18 | 0, 0, $n - $18 | 0);
  __gcry_private_free($a);
  var $_0 = $b_0;
  var $_0;
  return $_0;
}
function __gcry_private_free($a) {
  if (($a | 0) == 0) {
    return;
  }
  if (HEAP8[410392]) {
    __gcry_private_check_heap($a);
    var $6 = $a - 4 | 0;
    if ((__gcry_private_is_secure($a) | 0) == 0) {
      _free($6);
      return;
    } else {
      __gcry_secmem_free($6);
      return;
    }
  } else {
    if ((__gcry_private_is_secure($a) | 0) == 0) {
      _free($a);
      return;
    } else {
      __gcry_secmem_free($a);
      return;
    }
  }
}
function _arcfour_setkey($context, $key, $keylen) {
  var $1 = _do_arcfour_setkey($context, $key, $keylen);
  __gcry_burn_stack(300);
  return $1;
}
function _encrypt_stream($context, $outbuf, $inbuf, $length) {
  _do_encrypt_stream($context, $outbuf, $inbuf, $length);
  __gcry_burn_stack(64);
  return;
}
function _do_arcfour_setkey($context, $key, $keylen) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  var $karr = __stackBase__;
  do {
    if (HEAP8[457656]) {
      label = 1953;
    } else {
      HEAP8[457656] = 1;
      var $2 = _selftest1523();
      HEAP32[114413] = $2;
      if (($2 | 0) == 0) {
        break;
      }
      __gcry_log_error(489056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt));
      label = 1953;
      break;
    }
  } while (0);
  do {
    if (label == 1953) {
      if ((HEAP32[114413] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if ($keylen >>> 0 < 5) {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$context + 4 >> 2] = 0;
  HEAP32[$context >> 2] = 0;
  var $i_07 = 0;
  while (1) {
    var $i_07;
    HEAP8[$i_07 + ($context + 8) | 0] = $i_07 & 255;
    var $15 = $i_07 + 1 | 0;
    if (($15 | 0) == 256) {
      var $i_16 = 0;
      break;
    } else {
      var $i_07 = $15;
    }
  }
  while (1) {
    var $i_16;
    HEAP8[$karr + $i_16 | 0] = HEAP8[$key + ($i_16 >>> 0) % ($keylen >>> 0) | 0];
    var $20 = $i_16 + 1 | 0;
    if (($20 | 0) == 256) {
      var $i_23 = 0;
      var $j_04 = 0;
      break;
    } else {
      var $i_16 = $20;
    }
  }
  while (1) {
    var $j_04;
    var $i_23;
    var $21 = $i_23 + ($context + 8) | 0;
    var $22 = HEAP8[$21];
    var $29 = (($22 & 255) + $j_04 + HEAPU8[$karr + $i_23 | 0] | 0) % 256;
    var $30 = $29 + ($context + 8) | 0;
    HEAP8[$21] = HEAP8[$30];
    HEAP8[$30] = $22;
    var $32 = $i_23 + 1 | 0;
    if (($32 | 0) == 256) {
      break;
    } else {
      var $i_23 = $32;
      var $j_04 = $29;
    }
  }
  _memset($karr | 0, 0, 256);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_do_arcfour_setkey["X"] = 1;
function _selftest1523() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 280 | 0;
  var $1 = __stackBase__;
  _arcfour_setkey($1, 415824, 5);
  var $3 = __stackBase__ + 264 | 0;
  _encrypt_stream($1, $3, 415596, 5);
  if ((_memcmp($3, 416640, 5) | 0) != 0) {
    var $_0 = 480804;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _arcfour_setkey($1, 415824, 5);
  _encrypt_stream($1, $3, $3, 5);
  var $_0 = (_memcmp($3, 415596, 5) | 0) == 0 ? 0 : 476732;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _bf_setkey($context, $key, $keylen) {
  var $2 = _do_bf_setkey($context, $key, $keylen);
  __gcry_burn_stack(64);
  return $2;
}
function _encrypt_block($context, $outbuf, $inbuf) {
  _do_encrypt_block($context, $outbuf, $inbuf);
  __gcry_burn_stack(64);
  return;
}
function _decrypt_block($context, $outbuf, $inbuf) {
  _do_decrypt_block($context, $outbuf, $inbuf);
  __gcry_burn_stack(64);
  return;
}
function _do_decrypt_block($bc, $outbuf, $inbuf) {
  var $d2$s2;
  var $d1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $d1 = __stackBase__, $d1$s2 = $d1 >> 2;
  var $d2 = __stackBase__ + 4, $d2$s2 = $d2 >> 2;
  HEAP32[$d1$s2] = HEAPU8[$inbuf + 1 | 0] << 16 | HEAPU8[$inbuf] << 24 | HEAPU8[$inbuf + 3 | 0] | HEAPU8[$inbuf + 2 | 0] << 8;
  HEAP32[$d2$s2] = HEAPU8[$inbuf + 5 | 0] << 16 | HEAPU8[$inbuf + 4 | 0] << 24 | HEAPU8[$inbuf + 7 | 0] | HEAPU8[$inbuf + 6 | 0] << 8;
  _decrypt($bc, $d1, $d2);
  HEAP8[$outbuf] = HEAP32[$d1$s2] >>> 24 & 255;
  HEAP8[$outbuf + 1 | 0] = HEAP32[$d1$s2] >>> 16 & 255;
  HEAP8[$outbuf + 2 | 0] = HEAP32[$d1$s2] >>> 8 & 255;
  HEAP8[$outbuf + 3 | 0] = HEAP32[$d1$s2] & 255;
  HEAP8[$outbuf + 4 | 0] = HEAP32[$d2$s2] >>> 24 & 255;
  HEAP8[$outbuf + 5 | 0] = HEAP32[$d2$s2] >>> 16 & 255;
  HEAP8[$outbuf + 6 | 0] = HEAP32[$d2$s2] >>> 8 & 255;
  HEAP8[$outbuf + 7 | 0] = HEAP32[$d2$s2] & 255;
  STACKTOP = __stackBase__;
  return;
}
_do_decrypt_block["X"] = 1;
function __gcry_private_check_heap($a) {
  var __stackBase__ = STACKTOP;
  if (($a | 0) == 0 | HEAP8[410392] ^ 1) {
    STACKTOP = __stackBase__;
    return;
  }
  var $3 = $a - 1 | 0;
  var $4 = HEAP8[$3];
  if (!($4 << 24 >> 24 == 85 | $4 << 24 >> 24 == -52)) {
    __gcry_log_fatal(485648, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 4 >> 2] = $4 & 255, tempInt));
  }
  if (HEAP8[$a + (HEAPU8[$a - 3 | 0] << 8 | HEAPU8[$a - 4 | 0] | HEAPU8[$a - 2 | 0] << 16) | 0] << 24 >> 24 == -86) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $26 = HEAPU8[$3];
    __gcry_log_fatal(489088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 4 >> 2] = $26, tempInt));
  }
}
function _do_encrypt1534($bc, $ret_xl, $ret_xr) {
  var $bc$s2 = $bc >> 2;
  var $5 = HEAP32[$bc$s2 + 1024] ^ HEAP32[$ret_xl >> 2];
  var $26 = HEAP32[$bc$s2 + 1025] ^ HEAP32[$ret_xr >> 2] ^ (HEAP32[((($5 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($5 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($5 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($5 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $47 = HEAP32[$bc$s2 + 1026] ^ $5 ^ (HEAP32[((($26 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($26 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($26 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($26 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $68 = HEAP32[$bc$s2 + 1027] ^ $26 ^ (HEAP32[((($47 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($47 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($47 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($47 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $89 = HEAP32[$bc$s2 + 1028] ^ $47 ^ (HEAP32[((($68 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($68 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($68 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($68 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $110 = HEAP32[$bc$s2 + 1029] ^ $68 ^ (HEAP32[((($89 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($89 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($89 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($89 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $131 = HEAP32[$bc$s2 + 1030] ^ $89 ^ (HEAP32[((($110 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($110 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($110 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($110 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $152 = HEAP32[$bc$s2 + 1031] ^ $110 ^ (HEAP32[((($131 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($131 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($131 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($131 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $173 = HEAP32[$bc$s2 + 1032] ^ $131 ^ (HEAP32[((($152 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($152 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($152 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($152 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $194 = HEAP32[$bc$s2 + 1033] ^ $152 ^ (HEAP32[((($173 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($173 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($173 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($173 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $215 = HEAP32[$bc$s2 + 1034] ^ $173 ^ (HEAP32[((($194 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($194 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($194 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($194 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $236 = HEAP32[$bc$s2 + 1035] ^ $194 ^ (HEAP32[((($215 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($215 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($215 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($215 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $257 = HEAP32[$bc$s2 + 1036] ^ $215 ^ (HEAP32[((($236 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($236 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($236 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($236 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $278 = HEAP32[$bc$s2 + 1037] ^ $236 ^ (HEAP32[((($257 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($257 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($257 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($257 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $299 = HEAP32[$bc$s2 + 1038] ^ $257 ^ (HEAP32[((($278 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($278 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($278 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($278 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $320 = HEAP32[$bc$s2 + 1039] ^ $278 ^ (HEAP32[((($299 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($299 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($299 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($299 & 255) << 2) + 3072 >> 2) + $bc$s2];
  var $341 = HEAP32[$bc$s2 + 1040] ^ $299 ^ (HEAP32[((($320 >>> 16 & 255) << 2) + 1024 >> 2) + $bc$s2] + HEAP32[($320 >>> 24 << 2 >> 2) + $bc$s2] ^ HEAP32[((($320 >>> 8 & 255) << 2) + 2048 >> 2) + $bc$s2]) + HEAP32[((($320 & 255) << 2) + 3072 >> 2) + $bc$s2];
  HEAP32[$ret_xl >> 2] = HEAP32[$bc$s2 + 1041] ^ $320;
  HEAP32[$ret_xr >> 2] = $341;
  return;
}
_do_encrypt1534["X"] = 1;
function _do_encrypt_block($bc, $outbuf, $inbuf) {
  var $d2$s2;
  var $d1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $d1 = __stackBase__, $d1$s2 = $d1 >> 2;
  var $d2 = __stackBase__ + 4, $d2$s2 = $d2 >> 2;
  HEAP32[$d1$s2] = HEAPU8[$inbuf + 1 | 0] << 16 | HEAPU8[$inbuf] << 24 | HEAPU8[$inbuf + 3 | 0] | HEAPU8[$inbuf + 2 | 0] << 8;
  HEAP32[$d2$s2] = HEAPU8[$inbuf + 5 | 0] << 16 | HEAPU8[$inbuf + 4 | 0] << 24 | HEAPU8[$inbuf + 7 | 0] | HEAPU8[$inbuf + 6 | 0] << 8;
  _do_encrypt1534($bc, $d1, $d2);
  HEAP8[$outbuf] = HEAP32[$d1$s2] >>> 24 & 255;
  HEAP8[$outbuf + 1 | 0] = HEAP32[$d1$s2] >>> 16 & 255;
  HEAP8[$outbuf + 2 | 0] = HEAP32[$d1$s2] >>> 8 & 255;
  HEAP8[$outbuf + 3 | 0] = HEAP32[$d1$s2] & 255;
  HEAP8[$outbuf + 4 | 0] = HEAP32[$d2$s2] >>> 24 & 255;
  HEAP8[$outbuf + 5 | 0] = HEAP32[$d2$s2] >>> 16 & 255;
  HEAP8[$outbuf + 6 | 0] = HEAP32[$d2$s2] >>> 8 & 255;
  HEAP8[$outbuf + 7 | 0] = HEAP32[$d2$s2] & 255;
  STACKTOP = __stackBase__;
  return;
}
_do_encrypt_block["X"] = 1;
function _do_bf_setkey($c, $key, $keylen) {
  var $datar$s2;
  var $datal$s2;
  var $c$s2 = $c >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $datal = __stackBase__, $datal$s2 = $datal >> 2;
  var $datar = __stackBase__ + 4, $datar$s2 = $datar >> 2;
  do {
    if (HEAP8[457648]) {
      label = 1986;
    } else {
      HEAP8[457648] = 1;
      var $2 = _selftest1535();
      HEAP32[114411] = $2;
      if (($2 | 0) == 0) {
        break;
      }
      __gcry_log_error(489052, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $2, tempInt));
      label = 1986;
      break;
    }
  } while (0);
  do {
    if (label == 1986) {
      if ((HEAP32[114411] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  HEAP32[$c$s2 + 1024] = 608135816;
  HEAP32[$c$s2 + 1025] = -2052912941;
  HEAP32[$c$s2 + 1026] = 320440878;
  HEAP32[$c$s2 + 1027] = 57701188;
  HEAP32[$c$s2 + 1028] = -1542899678;
  HEAP32[$c$s2 + 1029] = 698298832;
  HEAP32[$c$s2 + 1030] = 137296536;
  HEAP32[$c$s2 + 1031] = -330404727;
  HEAP32[$c$s2 + 1032] = 1160258022;
  HEAP32[$c$s2 + 1033] = 953160567;
  HEAP32[$c$s2 + 1034] = -1101764913;
  HEAP32[$c$s2 + 1035] = 887688300;
  HEAP32[$c$s2 + 1036] = -1062458953;
  HEAP32[$c$s2 + 1037] = -914599715;
  HEAP32[$c$s2 + 1038] = 1065670069;
  HEAP32[$c$s2 + 1039] = -1253635817;
  HEAP32[$c$s2 + 1040] = -1843997223;
  HEAP32[$c$s2 + 1041] = -1988494565;
  var $i_125 = 0;
  while (1) {
    var $i_125;
    HEAP32[($i_125 << 2 >> 2) + $c$s2] = HEAP32[($i_125 << 2) + 454228 >> 2];
    HEAP32[(($i_125 << 2) + 1024 >> 2) + $c$s2] = HEAP32[($i_125 << 2) + 453204 >> 2];
    HEAP32[(($i_125 << 2) + 2048 >> 2) + $c$s2] = HEAP32[($i_125 << 2) + 452180 >> 2];
    HEAP32[(($i_125 << 2) + 3072 >> 2) + $c$s2] = HEAP32[($i_125 << 2) + 451156 >> 2];
    var $38 = $i_125 + 1 | 0;
    if (($38 | 0) == 256) {
      var $i_222 = 0;
      var $j_023 = 0;
      break;
    } else {
      var $i_125 = $38;
    }
  }
  while (1) {
    var $j_023;
    var $i_222;
    var $60 = ($i_222 << 2) + $c + 4096 | 0;
    HEAP32[$60 >> 2] = (HEAPU8[$key + (($j_023 + 1 | 0) >>> 0) % ($keylen >>> 0) | 0] << 16 | HEAPU8[$key + $j_023 | 0] << 24 | HEAPU8[$key + (($j_023 + 2 | 0) >>> 0) % ($keylen >>> 0) | 0] << 8 | HEAPU8[$key + (($j_023 + 3 | 0) >>> 0) % ($keylen >>> 0) | 0]) ^ HEAP32[$60 >> 2];
    var $65 = $i_222 + 1 | 0;
    if (($65 | 0) == 18) {
      break;
    } else {
      var $i_222 = $65;
      var $j_023 = (($j_023 + 4 | 0) >>> 0) % ($keylen >>> 0);
    }
  }
  HEAP32[$datar$s2] = 0;
  HEAP32[$datal$s2] = 0;
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1024] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1025] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1026] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1027] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1028] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1029] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1030] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1031] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1032] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1033] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1034] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1035] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1036] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1037] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1038] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1039] = HEAP32[$datar$s2];
  _do_encrypt1534($c, $datal, $datar);
  HEAP32[$c$s2 + 1040] = HEAP32[$datal$s2];
  HEAP32[$c$s2 + 1041] = HEAP32[$datar$s2];
  var $i_419 = 0;
  while (1) {
    var $i_419;
    _do_encrypt1534($c, $datal, $datar);
    HEAP32[($i_419 << 2 >> 2) + $c$s2] = HEAP32[$datal$s2];
    HEAP32[(($i_419 | 1) << 2 >> 2) + $c$s2] = HEAP32[$datar$s2];
    var $108 = $i_419 + 2 | 0;
    if (($108 | 0) < 256) {
      var $i_419 = $108;
    } else {
      var $i_517 = 0;
      break;
    }
  }
  while (1) {
    var $i_517;
    _do_encrypt1534($c, $datal, $datar);
    HEAP32[(($i_517 << 2) + 1024 >> 2) + $c$s2] = HEAP32[$datal$s2];
    HEAP32[((($i_517 | 1) << 2) + 1024 >> 2) + $c$s2] = HEAP32[$datar$s2];
    var $115 = $i_517 + 2 | 0;
    if (($115 | 0) < 256) {
      var $i_517 = $115;
    } else {
      var $i_615 = 0;
      break;
    }
  }
  while (1) {
    var $i_615;
    _do_encrypt1534($c, $datal, $datar);
    HEAP32[(($i_615 << 2) + 2048 >> 2) + $c$s2] = HEAP32[$datal$s2];
    HEAP32[((($i_615 | 1) << 2) + 2048 >> 2) + $c$s2] = HEAP32[$datar$s2];
    var $122 = $i_615 + 2 | 0;
    if (($122 | 0) < 256) {
      var $i_615 = $122;
    } else {
      var $i_713 = 0;
      break;
    }
  }
  while (1) {
    var $i_713;
    _do_encrypt1534($c, $datal, $datar);
    HEAP32[(($i_713 << 2) + 3072 >> 2) + $c$s2] = HEAP32[$datal$s2];
    HEAP32[((($i_713 | 1) << 2) + 3072 >> 2) + $c$s2] = HEAP32[$datar$s2];
    var $129 = $i_713 + 2 | 0;
    if (($129 | 0) < 256) {
      var $i_713 = $129;
    } else {
      var $i_8 = 0;
      break;
    }
  }
  L2446 : while (1) {
    var $i_8;
    if (($i_8 | 0) >= 255) {
      var $_0 = 0;
      label = 2004;
      break;
    }
    var $133 = $i_8 + 1 | 0;
    var $134 = ($i_8 << 2) + $c | 0;
    var $135 = ($i_8 << 2) + $c + 1024 | 0;
    var $136 = ($i_8 << 2) + $c + 2048 | 0;
    var $137 = ($i_8 << 2) + $c + 3072 | 0;
    var $j_1 = $133;
    while (1) {
      var $j_1;
      if (($j_1 | 0) >= 256) {
        var $i_8 = $133;
        continue L2446;
      }
      if ((HEAP32[$134 >> 2] | 0) == (HEAP32[($j_1 << 2 >> 2) + $c$s2] | 0)) {
        var $_0 = 43;
        label = 2007;
        break L2446;
      }
      if ((HEAP32[$135 >> 2] | 0) == (HEAP32[(($j_1 << 2) + 1024 >> 2) + $c$s2] | 0)) {
        var $_0 = 43;
        label = 2005;
        break L2446;
      }
      if ((HEAP32[$136 >> 2] | 0) == (HEAP32[(($j_1 << 2) + 2048 >> 2) + $c$s2] | 0)) {
        var $_0 = 43;
        label = 2006;
        break L2446;
      }
      if ((HEAP32[$137 >> 2] | 0) == (HEAP32[(($j_1 << 2) + 3072 >> 2) + $c$s2] | 0)) {
        var $_0 = 43;
        label = 2008;
        break L2446;
      } else {
        var $j_1 = $j_1 + 1 | 0;
      }
    }
  }
  if (label == 2008) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 2007) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 2004) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 2005) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 2006) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_do_bf_setkey["X"] = 1;
function _selftest1535() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4212 | 0;
  var $c = __stackBase__;
  var $buffer = __stackBase__ + 4180;
  var $plain3 = __stackBase__ + 4188;
  var $key3 = __stackBase__ + 4196;
  var $cipher3 = __stackBase__ + 4204;
  var $1 = __stackBase__ + 4168 | 0;
  for (var $$src = 415676, $$dest = $1, $$stop = $$src + 9; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src];
  }
  HEAP32[$plain3 >> 2] = -1732584194;
  HEAP32[$plain3 + 4 >> 2] = 271733878;
  HEAP32[$key3 >> 2] = -1603372735;
  HEAP32[$key3 + 4 >> 2] = -462528174;
  HEAP32[$cipher3 >> 2] = 284431329;
  HEAP32[$cipher3 + 4 >> 2] = 1137638444;
  var $2 = $c;
  _bf_setkey($2, 480776, 26);
  var $4 = $buffer | 0;
  _encrypt_block($2, $4, $1);
  if ((_memcmp($4, 476720, 8) | 0) != 0) {
    var $_0 = 473884;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _decrypt_block($2, $4, $4);
  if ((_memcmp($4, $1, 8) | 0) != 0) {
    var $_0 = 472012;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _bf_setkey($2, $key3, 8);
  var $13 = $plain3;
  _encrypt_block($2, $4, $13);
  if ((_memcmp($4, $cipher3, 8) | 0) != 0) {
    var $_0 = 470528;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _decrypt_block($2, $4, $4);
  var $_0 = (_memcmp($4, $13, 8) | 0) == 0 ? 0 : 469128;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_selftest1535["X"] = 1;
function _camellia_setkey($c, $key, $keylen) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  if (!(($keylen | 0) == 32 | ($keylen | 0) == 24 | ($keylen | 0) == 16)) {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if (HEAP8[463736]) {
      label = 2022;
    } else {
      HEAP8[463736] = 1;
      var $3 = _selftest1567();
      HEAP32[115933] = $3;
      if (($3 | 0) == 0) {
        break;
      }
      __gcry_log_error(489652, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $3, tempInt));
      label = 2022;
      break;
    }
  } while (0);
  do {
    if (label == 2022) {
      if ((HEAP32[115933] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $8 = $keylen << 3;
  HEAP32[$c >> 2] = $8;
  __gcry_Camellia_Ekeygen($8, $key, $c + 4 | 0);
  __gcry_burn_stack(544);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _camellia_encrypt($c, $outbuf, $inbuf) {
  __gcry_Camellia_EncryptBlock(HEAP32[$c >> 2], $inbuf, $c + 4 | 0, $outbuf);
  __gcry_burn_stack(340);
  return;
}
function _camellia_decrypt($c, $outbuf, $inbuf) {
  __gcry_Camellia_DecryptBlock(HEAP32[$c >> 2], $inbuf, $c + 4 | 0, $outbuf);
  __gcry_burn_stack(340);
  return;
}
function _selftest1567() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 292 | 0;
  var $1 = __stackBase__;
  _camellia_setkey($1, 415808, 16);
  var $3 = __stackBase__ + 276 | 0;
  _camellia_encrypt($1, $3, 415628);
  do {
    if ((_memcmp($3, 416624, 16) | 0) == 0) {
      _camellia_decrypt($1, $3, $3);
      if ((_memcmp($3, 415628, 16) | 0) != 0) {
        var $_0 = 487288;
        break;
      }
      _camellia_setkey($1, 415784, 24);
      _camellia_encrypt($1, $3, 415628);
      if ((_memcmp($3, 416608, 16) | 0) != 0) {
        var $_0 = 486352;
        break;
      }
      _camellia_decrypt($1, $3, $3);
      if ((_memcmp($3, 415628, 16) | 0) != 0) {
        var $_0 = 485508;
        break;
      }
      _camellia_setkey($1, 415704, 32);
      _camellia_encrypt($1, $3, 415628);
      if ((_memcmp($3, 416568, 16) | 0) != 0) {
        var $_0 = 484632;
        break;
      }
      _camellia_decrypt($1, $3, $3);
      var $_0 = (_memcmp($3, 415628, 16) | 0) == 0 ? 0 : 483948;
    } else {
      var $_0 = 487964;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}



function __gcry_camellia_setup128($key, $subkey) {
  var $871$s2;
  var $870$s2;
  var $869$s2;
  var $865$s2;
  var $861$s2;
  var $856$s2;
  var $851$s2;
  var $847$s2;
  var $843$s2;
  var $839$s2;
  var $835$s2;
  var $830$s2;
  var $815$s2;
  var $811$s2;
  var $799$s2;
  var $794$s2;
  var $789$s2;
  var $785$s2;
  var $780$s2;
  var $776$s2;
  var $772$s2;
  var $768$s2;
  var $764$s2;
  var $759$s2;
  var $744$s2;
  var $740$s2;
  var $728$s2;
  var $723$s2;
  var $718$s2;
  var $714$s2;
  var $709$s2;
  var $705$s2;
  var $701$s2;
  var $697$s2;
  var $693$s2;
  var $690$s2;
  var $subkey$s2 = $subkey >> 2;
  var $6 = HEAPU8[$key + 1 | 0];
  var $8 = $6 << 16 | HEAPU8[$key] << 24;
  var $17 = HEAPU8[$key + 2 | 0] << 8 | HEAPU8[$key + 3 | 0] | $8;
  var $24 = HEAPU8[$key + 5 | 0];
  var $26 = $24 << 16 | HEAPU8[$key + 4 | 0] << 24;
  var $35 = HEAPU8[$key + 6 | 0] << 8 | HEAPU8[$key + 7 | 0] | $26;
  var $42 = HEAPU8[$key + 9 | 0];
  var $44 = $42 << 16 | HEAPU8[$key + 8 | 0] << 24;
  var $53 = HEAPU8[$key + 10 | 0] << 8 | HEAPU8[$key + 11 | 0] | $44;
  var $60 = HEAPU8[$key + 13 | 0];
  var $62 = $60 << 16 | HEAPU8[$key + 12 | 0] << 24;
  var $71 = HEAPU8[$key + 14 | 0] << 8 | HEAPU8[$key + 15 | 0] | $62;
  var $78 = $17 << 15;
  var $80 = $26 >>> 17 | $78;
  var $81 = $35 << 15;
  var $83 = $44 >>> 17 | $81;
  var $84 = $53 << 15;
  var $86 = $62 >>> 17 | $84;
  var $87 = $71 << 15;
  var $89 = $87 | $8 >>> 17;
  var $101 = $83 >>> 2 | $24 << 29 & -1073741824;
  var $105 = $86 >>> 2 | $42 << 29 & -1073741824;
  var $109 = $89 >>> 2 | $60 << 29 & -1073741824;
  var $113 = $80 >>> 2 | $6 << 29 & -1073741824;
  var $145 = $109 >>> 15 | $86 << 15 & -131072;
  var $149 = $89 << 15 & -131072 | $113 >>> 15;
  var $153 = $101 >>> 15 | $80 << 15 & -131072;
  var $157 = $105 >>> 15 | $83 << 15 & -131072;
  var $186 = $17 ^ -1600231809;
  var $187 = $35 ^ 1003262091;
  var $218 = HEAP32[(($186 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($186 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($186 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($186 & 255) << 2) + 459636 >> 2];
  var $222 = HEAP32[($187 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($187 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($187 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($187 >>> 8 & 255) << 2) + 459636 >> 2] ^ $218;
  var $226 = ($218 >>> 8 | $218 << 24) ^ $222;
  var $228 = $53 ^ -1233459112 ^ $222;
  var $230 = $71 ^ 1286239154 ^ $226;
  var $261 = HEAP32[(($228 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($228 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($228 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($228 & 255) << 2) + 459636 >> 2];
  var $265 = HEAP32[($230 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($230 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($230 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($230 >>> 8 & 255) << 2) + 459636 >> 2] ^ $261;
  var $269 = ($261 >>> 8 | $261 << 24) ^ $265;
  var $270 = $265 ^ -957401297;
  var $271 = $269 ^ -380665154;
  var $302 = HEAP32[(($270 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($270 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($270 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($270 & 255) << 2) + 459636 >> 2];
  var $306 = HEAP32[($271 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($271 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($271 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($271 >>> 8 & 255) << 2) + 459636 >> 2] ^ $302;
  var $310 = $306 ^ $222;
  var $312 = $306 ^ $226 ^ ($302 >>> 8 | $302 << 24);
  var $313 = $310 ^ 1426019237;
  var $314 = $312 ^ -237801700;
  var $345 = HEAP32[(($313 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($313 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($313 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($313 & 255) << 2) + 459636 >> 2];
  var $349 = HEAP32[($314 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($314 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($314 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($314 >>> 8 & 255) << 2) + 459636 >> 2] ^ $345;
  var $353 = $349 ^ $265;
  var $355 = $349 ^ $269 ^ ($345 >>> 8 | $345 << 24);
  var $362 = $355 >>> 17 | $353 << 15;
  var $365 = $355 << 15 | $310 >>> 17;
  var $368 = $312 >>> 17 | $310 << 15;
  var $371 = $353 >>> 17 | $312 << 15;
  var $377 = $355 >>> 2;
  var $379 = $362 << 15 | $377 & 32767;
  var $381 = $310 >>> 2;
  var $383 = $365 << 15 | $381 & 32767;
  var $385 = $312 >>> 2;
  var $387 = $368 << 15 | $385 & 32767;
  var $389 = $353 >>> 2;
  var $391 = $371 << 15 | $389 & 32767;
  var $403 = $379 << 15 | $365 >>> 2 & 32767;
  var $407 = $383 << 15 | $368 >>> 2 & 32767;
  var $425 = $403 << 15 | $383 >>> 2 & 32767;
  var $429 = $407 << 15 | $387 >>> 2 & 32767;
  var $433 = ($371 >>> 2 & 32767 | $312 << 13 & 98304) << 15 | $391 >>> 2 & 32767;
  var $437 = ($362 >>> 2 & 32767 | $353 << 13 & 98304) << 15 | $379 >>> 2 & 32767;
  var $448 = $429 << 2 | $385 & 3;
  var $451 = $433 << 2 | $389 & 3;
  var $454 = $437 << 2 | $377 & 3;
  var $457 = $425 << 2 | $381 & 3;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 = 0 | $17;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 = 0 | $53;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = 0 | $80;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = 0 | $86;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = 0 | $101;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $109 | 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = 0;
  var $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | ($89 << 13 & -32768 | $113 >>> 17);
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask260_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | $105;
  var $mask257_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0 | $113;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask260_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask257_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0 | 0 | $145;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0 | 0 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0 | 0 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0 | 0 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0 | 0 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0 | 0 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0 | 0 | 0;
  var $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0 | 0 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | $153;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | ($149 >>> 15 | $87 & -131072);
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | ($157 >>> 15 | $81 & -131072);
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask242_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $353 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 = $35 | 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 = $71 | 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $83 | 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $89 | 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $105 | 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = 0 | $113;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = 0;
  var $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | ($101 >>> 17 | $80 << 13 & -32768);
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask116_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | $109;
  var $mask113_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0 | $101;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask116_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask113_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0 | 0 | $149;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0 | 0 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0 | 0 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0 | 0 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0 | 0 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0 | 0 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0 | 0 | 0;
  var $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0 | 0 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | $157;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | ($153 >>> 15 | $78 & -131072);
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23 | ($145 >>> 15 | $84 & -131072);
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 = $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask98_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 = $355 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2;
  var $mask236_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $362 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & -1;
  var $mask92_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 = $365 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6);
  var $mask86_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = (0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8)) & -1 | $383;
  var $mask83_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = (0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9)) & -1 | 0 | $391;
  var $509 = $mask83_masked_masked_masked_masked_masked_masked_masked_masked_masked$9;
  var $510 = $509 ^ -1;
  var $mask230_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 = (0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & -1) & -1 | $379;
  var $mask227_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 = (0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & -1) & -1 | 0 | $387;
  var $mask224_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = (0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & -1) & -1 | 0 | 0 | $403;
  var $mask221_masked_masked_masked_masked_masked_masked_masked_masked$14 = $425 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & -1) & -1 | 0 | 0 | 0);
  var $mask218_masked_masked_masked_masked_masked_masked_masked$0 = ($mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 | 0 | 0 | 0 | 0) & -1 & -1 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$1 = ($mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 | 0 | 0 | 0 | 0) & -1 & 0 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$2 = $mask242_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 & -1 & -1 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$3 = (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3) & 0 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$4 = (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & -1 & -1 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$5 = (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$6 = $mask236_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 & -1 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$7 = (0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & -1) & 0 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$8 = $mask230_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$9 = $mask227_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$10 = (0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & -1) & -1 | 0 | 0 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$11 = (0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & -1) & -1 | 0 | 0 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$12 = $mask224_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$13 = (0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & -1) & -1 | 0 | 0 | 0 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$14 = $mask221_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$15 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & -1) & -1 | 0 | 0 | 0) | $433;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$16 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$17 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$18 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$19 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$20 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$21 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$22 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$23 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$24 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask218_masked_masked_masked_masked_masked_masked_masked$25 = 0 | ((0 | (0 | $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & -1) & -1 | 0 | 0 | 0) | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$2 = $mask218_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$3 = $mask218_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$4 = $mask218_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$5 = $mask218_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$6 = $mask218_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$7 = $mask218_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$8 = $mask218_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$9 = $mask218_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$10 = $mask218_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$11 = $mask218_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$12 = $mask218_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$13 = $mask218_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$14 = $mask218_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$15 = $mask218_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$16 = $mask218_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$17 = $mask218_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$18 = $mask218_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$19 = $mask218_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$20 = $mask218_masked_masked_masked_masked_masked_masked_masked$20 | $448;
  var $mask215_masked_masked_masked_masked_masked_masked$21 = $mask218_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$22 = $mask218_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$23 = $mask218_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$24 = $mask218_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask215_masked_masked_masked_masked_masked_masked$25 = $mask218_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask212_masked_masked_masked_masked_masked$2 = $mask215_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask212_masked_masked_masked_masked_masked$3 = $mask215_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask212_masked_masked_masked_masked_masked$4 = $mask215_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask212_masked_masked_masked_masked_masked$5 = $mask215_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask212_masked_masked_masked_masked_masked$6 = $mask215_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask212_masked_masked_masked_masked_masked$7 = $mask215_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask212_masked_masked_masked_masked_masked$8 = $mask215_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask212_masked_masked_masked_masked_masked$9 = $mask215_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask212_masked_masked_masked_masked_masked$10 = $mask215_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask212_masked_masked_masked_masked_masked$11 = $mask215_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask212_masked_masked_masked_masked_masked$12 = $mask215_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask212_masked_masked_masked_masked_masked$13 = $mask215_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask212_masked_masked_masked_masked_masked$14 = $mask215_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask212_masked_masked_masked_masked_masked$15 = $mask215_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask212_masked_masked_masked_masked_masked$16 = $mask215_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask212_masked_masked_masked_masked_masked$17 = $mask215_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask212_masked_masked_masked_masked_masked$18 = $mask215_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask212_masked_masked_masked_masked_masked$19 = $mask215_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask212_masked_masked_masked_masked_masked$20 = $mask215_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask212_masked_masked_masked_masked_masked$21 = $mask215_masked_masked_masked_masked_masked_masked$21 | $454;
  var $mask212_masked_masked_masked_masked_masked$22 = $mask215_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask212_masked_masked_masked_masked_masked$23 = $mask215_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask212_masked_masked_masked_masked_masked$24 = $mask215_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask212_masked_masked_masked_masked_masked$25 = $mask215_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask209_masked_masked_masked_masked$2 = $mask212_masked_masked_masked_masked_masked$2 | 0;
  var $mask209_masked_masked_masked_masked$3 = $mask212_masked_masked_masked_masked_masked$3 | 0;
  var $mask209_masked_masked_masked_masked$4 = $mask212_masked_masked_masked_masked_masked$4 | 0;
  var $mask209_masked_masked_masked_masked$5 = $mask212_masked_masked_masked_masked_masked$5 | 0;
  var $mask209_masked_masked_masked_masked$6 = $mask212_masked_masked_masked_masked_masked$6 | 0;
  var $mask209_masked_masked_masked_masked$7 = $mask212_masked_masked_masked_masked_masked$7 | 0;
  var $mask209_masked_masked_masked_masked$8 = $mask212_masked_masked_masked_masked_masked$8 | 0;
  var $mask209_masked_masked_masked_masked$9 = $mask212_masked_masked_masked_masked_masked$9 | 0;
  var $mask209_masked_masked_masked_masked$10 = $mask212_masked_masked_masked_masked_masked$10 | 0;
  var $mask209_masked_masked_masked_masked$11 = $mask212_masked_masked_masked_masked_masked$11 | 0;
  var $mask209_masked_masked_masked_masked$12 = $mask212_masked_masked_masked_masked_masked$12 | 0;
  var $mask209_masked_masked_masked_masked$13 = $mask212_masked_masked_masked_masked_masked$13 | 0;
  var $mask209_masked_masked_masked_masked$14 = $mask212_masked_masked_masked_masked_masked$14 | 0;
  var $mask209_masked_masked_masked_masked$15 = $mask212_masked_masked_masked_masked_masked$15 | 0;
  var $mask209_masked_masked_masked_masked$16 = $mask212_masked_masked_masked_masked_masked$16 | 0;
  var $mask209_masked_masked_masked_masked$17 = $mask212_masked_masked_masked_masked_masked$17 | 0;
  var $mask209_masked_masked_masked_masked$18 = $mask212_masked_masked_masked_masked_masked$18 | 0;
  var $mask209_masked_masked_masked_masked$19 = $mask212_masked_masked_masked_masked_masked$19 | 0;
  var $mask209_masked_masked_masked_masked$20 = $mask212_masked_masked_masked_masked_masked$20 | 0;
  var $mask209_masked_masked_masked_masked$21 = $mask212_masked_masked_masked_masked_masked$21 | 0;
  var $mask209_masked_masked_masked_masked$22 = $mask212_masked_masked_masked_masked_masked$22 | 0;
  var $mask209_masked_masked_masked_masked$23 = $mask212_masked_masked_masked_masked_masked$23 | 0;
  var $mask209_masked_masked_masked_masked$24 = $mask212_masked_masked_masked_masked_masked$24 | ($448 << 17 | $433 >>> 13 & 131071);
  var $mask209_masked_masked_masked_masked$25 = $mask212_masked_masked_masked_masked_masked$25 | 0;
  var $mask206_masked_masked_masked$5 = $mask209_masked_masked_masked_masked$5 | 0;
  var $mask206_masked_masked_masked$6 = $mask209_masked_masked_masked_masked$6 | 0;
  var $mask206_masked_masked_masked$7 = $mask209_masked_masked_masked_masked$7 | 0;
  var $mask206_masked_masked_masked$8 = $mask209_masked_masked_masked_masked$8 | 0;
  var $mask206_masked_masked_masked$9 = $mask209_masked_masked_masked_masked$9 | 0;
  var $mask206_masked_masked_masked$10 = $mask209_masked_masked_masked_masked$10 | 0;
  var $mask206_masked_masked_masked$11 = $mask209_masked_masked_masked_masked$11 | 0;
  var $mask206_masked_masked_masked$12 = $mask209_masked_masked_masked_masked$12 | 0;
  var $mask206_masked_masked_masked$13 = $mask209_masked_masked_masked_masked$13 | 0;
  var $mask206_masked_masked_masked$14 = $mask209_masked_masked_masked_masked$14 | 0;
  var $mask206_masked_masked_masked$15 = $mask209_masked_masked_masked_masked$15 | 0;
  var $mask206_masked_masked_masked$16 = $mask209_masked_masked_masked_masked$16 | 0;
  var $mask206_masked_masked_masked$17 = $mask209_masked_masked_masked_masked$17 | 0;
  var $mask206_masked_masked_masked$18 = $mask209_masked_masked_masked_masked$18 | 0;
  var $mask206_masked_masked_masked$19 = $mask209_masked_masked_masked_masked$19 | 0;
  var $mask206_masked_masked_masked$20 = $mask209_masked_masked_masked_masked$20 | 0;
  var $mask206_masked_masked_masked$21 = $mask209_masked_masked_masked_masked$21 | 0;
  var $mask206_masked_masked_masked$22 = $mask209_masked_masked_masked_masked$22 | 0;
  var $mask206_masked_masked_masked$23 = $mask209_masked_masked_masked_masked$23 | 0;
  var $mask206_masked_masked_masked$24 = $mask209_masked_masked_masked_masked$24 | 0;
  var $mask206_masked_masked_masked$25 = $mask209_masked_masked_masked_masked$25 | ($454 << 17 | $425 >>> 13 & 131071);
  var $mask203_masked_masked$3 = $mask209_masked_masked_masked_masked$3 | 0 | $310 ^ $53;
  var $mask200_masked$5 = $mask206_masked_masked_masked$5 | 0 | $86 ^ $53;
  var $mask200_masked$6 = $mask206_masked_masked_masked$6 | 0 | 0;
  var $mask200_masked$7 = $mask206_masked_masked_masked$7 | 0 | 0;
  var $mask200_masked$8 = $mask206_masked_masked_masked$8 | 0 | 0;
  var $mask200_masked$9 = $mask206_masked_masked_masked$9 | 0 | 0;
  var $mask200_masked$10 = $mask206_masked_masked_masked$10 | 0 | 0;
  var $mask200_masked$11 = $mask206_masked_masked_masked$11 | 0 | 0;
  var $mask200_masked$12 = $mask206_masked_masked_masked$12 | 0 | 0;
  var $mask200_masked$13 = $mask206_masked_masked_masked$13 | 0 | 0;
  var $mask200_masked$14 = $mask206_masked_masked_masked$14 | 0 | 0;
  var $mask200_masked$15 = $mask206_masked_masked_masked$15 | 0 | 0;
  var $mask200_masked$16 = $mask206_masked_masked_masked$16 | 0 | 0;
  var $mask200_masked$17 = $mask206_masked_masked_masked$17 | 0 | 0;
  var $mask200_masked$18 = $mask206_masked_masked_masked$18 | 0 | 0;
  var $mask200_masked$19 = $mask206_masked_masked_masked$19 | 0 | 0;
  var $mask200_masked$20 = $mask206_masked_masked_masked$20 | 0 | 0;
  var $mask200_masked$21 = $mask206_masked_masked_masked$21 | 0 | 0;
  var $mask200_masked$22 = $mask206_masked_masked_masked$22 | 0 | 0;
  var $mask200_masked$23 = $mask206_masked_masked_masked$23 | 0 | 0;
  var $mask200_masked$24 = $mask206_masked_masked_masked$24 | 0 | 0;
  var $mask200_masked$25 = $mask206_masked_masked_masked$25 | 0 | 0;
  var $mask197$0 = $mask218_masked_masked_masked_masked_masked_masked_masked$0 | 0 | 0 | 0 | 0;
  var $mask197$1 = $mask218_masked_masked_masked_masked_masked_masked_masked$1 | 0 | 0 | 0 | 0;
  var $mask197$2 = $mask209_masked_masked_masked_masked$2 | 0;
  var $mask197$3 = $mask203_masked_masked$3 | 0;
  var $mask197$4 = $mask209_masked_masked_masked_masked$4 | 0 | 0 | 0;
  var $mask197$5 = $mask200_masked$5 | 0;
  var $mask197$6 = $mask200_masked$6 | 0;
  var $mask197$7 = $mask200_masked$7 | $368 ^ $53;
  var $mask197$8 = $mask200_masked$8 | 0;
  var $mask197$9 = $mask200_masked$9 | 0;
  var $mask197$10 = $mask200_masked$10 | 0;
  var $mask197$11 = $mask200_masked$11 | 0;
  var $mask197$12 = $mask200_masked$12 | 0;
  var $mask197$13 = $mask200_masked$13 | 0;
  var $mask197$14 = $mask200_masked$14 | 0;
  var $mask197$15 = $mask200_masked$15 | 0;
  var $ins198$0 = $mask197$0 | 0;
  var $ins198$1 = $mask197$1 | $71 & $510 ^ $53;
  var $ins198$2 = $mask197$2 | 0;
  var $ins198$3 = $mask197$3 | 0;
  var $ins198$4 = $mask197$4 | 0;
  var $ins198$5 = $mask197$5 | 0;
  var $ins198$6 = $mask197$6 | 0;
  var $ins198$7 = $mask197$7 | 0;
  var $ins198$8 = $mask197$8 | 0;
  var $ins198$9 = $mask197$9 | 0;
  var $ins198$10 = $mask197$10 | 0;
  var $ins198$11 = $mask197$11 | 0;
  var $ins198$12 = $mask197$12 | 0;
  var $ins198$13 = $mask197$13 | 0;
  var $515$0 = $ins198$1;
  var $516$0 = $mask227_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9;
  var $518 = $515$0 & $516$0;
  var $mask80_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12)) & -1 | 0 | 0) & -1 | $407;
  var $mask77_masked_masked_masked_masked_masked_masked_masked_masked$14 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14)) & -1 | 0 | 0) & -1 | 0 | $429;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$0 = ($mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0 | 0 | 0 | 0 | 0) & -1 & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$1 = ($mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1 | 0 | 0 | 0 | 0) & -1 & 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$2 = $mask98_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2 & -1 & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$3 = (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3) & 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$4 = (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & -1 & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$5 = (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$6 = $mask92_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6 & -1 & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$7 = (0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7)) & 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$8 = $mask86_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8 & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$9 = $mask83_masked_masked_masked_masked_masked_masked_masked_masked_masked$9 & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$10 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10)) & -1 | 0 | 0) & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$11 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11)) & -1 | 0 | 0) & -1 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$12 = $mask80_masked_masked_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$13 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13)) & -1 | 0 | 0) & -1 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$14 = $mask77_masked_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$15 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15)) & -1 | 0 | 0) & -1 | 0 | 0 | $437;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$16 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$17 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$18 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$19 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$20 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$21 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$22 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$23 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$24 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask74_masked_masked_masked_masked_masked_masked_masked$25 = ((0 | (0 | $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25)) & -1 | 0 | 0) & -1 | 0 | 0 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$2 = $mask74_masked_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$3 = $mask74_masked_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$4 = $mask74_masked_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$5 = $mask74_masked_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$6 = $mask74_masked_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$7 = $mask74_masked_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$8 = $mask74_masked_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$9 = $mask74_masked_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$10 = $mask74_masked_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$11 = $mask74_masked_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$12 = $mask74_masked_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$13 = $mask74_masked_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$14 = $mask74_masked_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$15 = $mask74_masked_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$16 = $mask74_masked_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$17 = $mask74_masked_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$18 = $mask74_masked_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$19 = $mask74_masked_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$20 = $mask74_masked_masked_masked_masked_masked_masked_masked$20 | $451;
  var $mask71_masked_masked_masked_masked_masked_masked$21 = $mask74_masked_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$22 = $mask74_masked_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$23 = $mask74_masked_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$24 = $mask74_masked_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask71_masked_masked_masked_masked_masked_masked$25 = $mask74_masked_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask68_masked_masked_masked_masked_masked$2 = $mask71_masked_masked_masked_masked_masked_masked$2 | 0;
  var $mask68_masked_masked_masked_masked_masked$3 = $mask71_masked_masked_masked_masked_masked_masked$3 | 0;
  var $mask68_masked_masked_masked_masked_masked$4 = $mask71_masked_masked_masked_masked_masked_masked$4 | 0;
  var $mask68_masked_masked_masked_masked_masked$5 = $mask71_masked_masked_masked_masked_masked_masked$5 | 0;
  var $mask68_masked_masked_masked_masked_masked$6 = $mask71_masked_masked_masked_masked_masked_masked$6 | 0;
  var $mask68_masked_masked_masked_masked_masked$7 = $mask71_masked_masked_masked_masked_masked_masked$7 | 0;
  var $mask68_masked_masked_masked_masked_masked$8 = $mask71_masked_masked_masked_masked_masked_masked$8 | 0;
  var $mask68_masked_masked_masked_masked_masked$9 = $mask71_masked_masked_masked_masked_masked_masked$9 | 0;
  var $mask68_masked_masked_masked_masked_masked$10 = $mask71_masked_masked_masked_masked_masked_masked$10 | 0;
  var $mask68_masked_masked_masked_masked_masked$11 = $mask71_masked_masked_masked_masked_masked_masked$11 | 0;
  var $mask68_masked_masked_masked_masked_masked$12 = $mask71_masked_masked_masked_masked_masked_masked$12 | 0;
  var $mask68_masked_masked_masked_masked_masked$13 = $mask71_masked_masked_masked_masked_masked_masked$13 | 0;
  var $mask68_masked_masked_masked_masked_masked$14 = $mask71_masked_masked_masked_masked_masked_masked$14 | 0;
  var $mask68_masked_masked_masked_masked_masked$15 = $mask71_masked_masked_masked_masked_masked_masked$15 | 0;
  var $mask68_masked_masked_masked_masked_masked$16 = $mask71_masked_masked_masked_masked_masked_masked$16 | 0;
  var $mask68_masked_masked_masked_masked_masked$17 = $mask71_masked_masked_masked_masked_masked_masked$17 | 0;
  var $mask68_masked_masked_masked_masked_masked$18 = $mask71_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask68_masked_masked_masked_masked_masked$19 = $mask71_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask68_masked_masked_masked_masked_masked$20 = $mask71_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask68_masked_masked_masked_masked_masked$21 = $mask71_masked_masked_masked_masked_masked_masked$21 | $457;
  var $mask68_masked_masked_masked_masked_masked$22 = $mask71_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask68_masked_masked_masked_masked_masked$23 = $mask71_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask68_masked_masked_masked_masked_masked$24 = $mask71_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask68_masked_masked_masked_masked_masked$25 = $mask71_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask65_masked_masked_masked_masked$2 = $mask68_masked_masked_masked_masked_masked$2 | 0;
  var $mask65_masked_masked_masked_masked$3 = $mask68_masked_masked_masked_masked_masked$3 | 0;
  var $mask65_masked_masked_masked_masked$4 = $mask68_masked_masked_masked_masked_masked$4 | 0;
  var $mask65_masked_masked_masked_masked$5 = $mask68_masked_masked_masked_masked_masked$5 | 0;
  var $mask65_masked_masked_masked_masked$6 = $mask68_masked_masked_masked_masked_masked$6 | 0;
  var $mask65_masked_masked_masked_masked$7 = $mask68_masked_masked_masked_masked_masked$7 | 0;
  var $mask65_masked_masked_masked_masked$8 = $mask68_masked_masked_masked_masked_masked$8 | 0;
  var $mask65_masked_masked_masked_masked$9 = $mask68_masked_masked_masked_masked_masked$9 | 0;
  var $mask65_masked_masked_masked_masked$10 = $mask68_masked_masked_masked_masked_masked$10 | 0;
  var $mask65_masked_masked_masked_masked$11 = $mask68_masked_masked_masked_masked_masked$11 | 0;
  var $mask65_masked_masked_masked_masked$12 = $mask68_masked_masked_masked_masked_masked$12 | 0;
  var $mask65_masked_masked_masked_masked$13 = $mask68_masked_masked_masked_masked_masked$13 | 0;
  var $mask65_masked_masked_masked_masked$14 = $mask68_masked_masked_masked_masked_masked$14 | 0;
  var $mask65_masked_masked_masked_masked$15 = $mask68_masked_masked_masked_masked_masked$15 | 0;
  var $mask65_masked_masked_masked_masked$16 = $mask68_masked_masked_masked_masked_masked$16 | 0;
  var $mask65_masked_masked_masked_masked$17 = $mask68_masked_masked_masked_masked_masked$17 | 0;
  var $mask65_masked_masked_masked_masked$18 = $mask68_masked_masked_masked_masked_masked$18 | 0;
  var $mask65_masked_masked_masked_masked$19 = $mask68_masked_masked_masked_masked_masked$19 | 0;
  var $mask65_masked_masked_masked_masked$20 = $mask68_masked_masked_masked_masked_masked$20 | 0;
  var $mask65_masked_masked_masked_masked$21 = $mask68_masked_masked_masked_masked_masked$21 | 0;
  var $mask65_masked_masked_masked_masked$22 = $mask68_masked_masked_masked_masked_masked$22 | 0;
  var $mask65_masked_masked_masked_masked$23 = $mask68_masked_masked_masked_masked_masked$23 | 0;
  var $mask65_masked_masked_masked_masked$24 = $mask68_masked_masked_masked_masked_masked$24 | ($451 << 17 | $437 >>> 13 & 131071);
  var $mask65_masked_masked_masked_masked$25 = $mask68_masked_masked_masked_masked_masked$25 | 0;
  var $mask62_masked_masked_masked$5 = $mask65_masked_masked_masked_masked$5 | 0;
  var $mask62_masked_masked_masked$6 = $mask65_masked_masked_masked_masked$6 | 0;
  var $mask62_masked_masked_masked$7 = $mask65_masked_masked_masked_masked$7 | 0;
  var $mask62_masked_masked_masked$8 = $mask65_masked_masked_masked_masked$8 | 0;
  var $mask62_masked_masked_masked$9 = $mask65_masked_masked_masked_masked$9 | 0;
  var $mask62_masked_masked_masked$10 = $mask65_masked_masked_masked_masked$10 | 0;
  var $mask62_masked_masked_masked$11 = $mask65_masked_masked_masked_masked$11 | 0;
  var $mask62_masked_masked_masked$12 = $mask65_masked_masked_masked_masked$12 | 0;
  var $mask62_masked_masked_masked$13 = $mask65_masked_masked_masked_masked$13 | 0;
  var $mask62_masked_masked_masked$14 = $mask65_masked_masked_masked_masked$14 | 0;
  var $mask62_masked_masked_masked$15 = $mask65_masked_masked_masked_masked$15 | 0;
  var $mask62_masked_masked_masked$16 = $mask65_masked_masked_masked_masked$16 | 0;
  var $mask62_masked_masked_masked$17 = $mask65_masked_masked_masked_masked$17 | 0;
  var $mask62_masked_masked_masked$18 = $mask65_masked_masked_masked_masked$18 | 0;
  var $mask62_masked_masked_masked$19 = $mask65_masked_masked_masked_masked$19 | 0;
  var $mask62_masked_masked_masked$20 = $mask65_masked_masked_masked_masked$20 | 0;
  var $mask62_masked_masked_masked$21 = $mask65_masked_masked_masked_masked$21 | 0;
  var $mask62_masked_masked_masked$22 = $mask65_masked_masked_masked_masked$22 | 0;
  var $mask62_masked_masked_masked$23 = $mask65_masked_masked_masked_masked$23 | 0;
  var $mask62_masked_masked_masked$24 = $mask65_masked_masked_masked_masked$24 | 0;
  var $mask62_masked_masked_masked$25 = $mask65_masked_masked_masked_masked$25 | ($457 << 17 | $429 >>> 13 & 131071);
  var $mask59_masked_masked$3 = $mask65_masked_masked_masked_masked$3 | 0 | $312 ^ $71;
  var $mask56_masked$5 = $mask62_masked_masked_masked$5 | 0 | $89 ^ $71;
  var $mask56_masked$6 = $mask62_masked_masked_masked$6 | 0 | 0;
  var $mask56_masked$7 = $mask62_masked_masked_masked$7 | 0 | 0;
  var $mask56_masked$8 = $mask62_masked_masked_masked$8 | 0 | 0;
  var $mask56_masked$9 = $mask62_masked_masked_masked$9 | 0 | 0;
  var $mask56_masked$10 = $mask62_masked_masked_masked$10 | 0 | 0;
  var $mask56_masked$11 = $mask62_masked_masked_masked$11 | 0 | 0;
  var $mask56_masked$12 = $mask62_masked_masked_masked$12 | 0 | 0;
  var $mask56_masked$13 = $mask62_masked_masked_masked$13 | 0 | 0;
  var $mask56_masked$14 = $mask62_masked_masked_masked$14 | 0 | 0;
  var $mask56_masked$15 = $mask62_masked_masked_masked$15 | 0 | 0;
  var $mask56_masked$16 = $mask62_masked_masked_masked$16 | 0 | 0;
  var $mask56_masked$17 = $mask62_masked_masked_masked$17 | 0 | 0;
  var $mask56_masked$18 = $mask62_masked_masked_masked$18 | 0 | 0;
  var $mask56_masked$19 = $mask62_masked_masked_masked$19 | 0 | 0;
  var $mask56_masked$20 = $mask62_masked_masked_masked$20 | 0 | 0;
  var $mask56_masked$21 = $mask62_masked_masked_masked$21 | 0 | 0;
  var $mask56_masked$22 = $mask62_masked_masked_masked$22 | 0 | 0;
  var $mask56_masked$23 = $mask62_masked_masked_masked$23 | 0 | 0;
  var $mask56_masked$24 = $mask62_masked_masked_masked$24 | 0 | 0;
  var $mask56_masked$25 = $mask62_masked_masked_masked$25 | 0 | 0;
  var $mask53$0 = $mask74_masked_masked_masked_masked_masked_masked_masked$0 | 0 | 0 | 0 | 0;
  var $mask53$1 = $mask74_masked_masked_masked_masked_masked_masked_masked$1 | 0 | 0 | 0 | 0;
  var $mask53$2 = $mask65_masked_masked_masked_masked$2 | 0;
  var $mask53$3 = $mask59_masked_masked$3 | 0;
  var $mask53$4 = $mask65_masked_masked_masked_masked$4 | 0 | 0 | 0;
  var $mask53$5 = $mask56_masked$5 | 0;
  var $mask53$6 = $mask56_masked$6 | 0;
  var $mask53$7 = $mask56_masked$7 | $371 ^ $71;
  var $mask53$8 = $mask56_masked$8 | 0;
  var $mask53$9 = $mask56_masked$9 | 0;
  var $mask53$10 = $mask56_masked$10 | 0;
  var $mask53$11 = $mask56_masked$11 | 0;
  var $mask53$12 = $mask56_masked$12 | 0;
  var $mask53$13 = $mask56_masked$13 | 0;
  var $mask53$14 = $mask56_masked$14 | 0;
  var $mask53$15 = $mask56_masked$15 | 0;
  var $ins54$0 = 0 | $mask53$0;
  var $ins54$1 = ($518 << 1 | $518 >>> 31) ^ $71 | $mask53$1;
  var $ins54$2 = 0 | $mask53$2;
  var $ins54$3 = 0 | $mask53$3;
  var $ins54$4 = 0 | $mask53$4;
  var $ins54$5 = 0 | $mask53$5;
  var $ins54$6 = 0 | $mask53$6;
  var $ins54$7 = 0 | $mask53$7;
  var $ins54$8 = 0 | $mask53$8;
  var $ins54$9 = 0 | $mask53$9;
  var $ins54$10 = 0 | $mask53$10;
  var $ins54$11 = 0 | $mask53$11;
  var $ins54$12 = 0 | $mask53$12;
  var $ins54$13 = 0 | $mask53$13;
  var $526$11 = $ins198$1 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11;
  var $529$11 = $ins54$1 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11;
  var $532$13 = $ins198$1 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13;
  var $532$14 = $ins198$2 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14;
  var $532$15 = $ins198$3 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15;
  var $532$16 = $ins198$4 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16;
  var $532$17 = $ins198$5 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17;
  var $532$18 = $ins198$6 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18;
  var $532$19 = $ins198$7 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19;
  var $532$20 = $ins198$8 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20;
  var $532$21 = $ins198$9 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21;
  var $532$22 = $ins198$10 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22;
  var $532$23 = $ins198$11 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23;
  var $532$24 = $ins198$12 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24;
  var $532$25 = $ins198$13 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25;
  var $535$13 = $ins54$1 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13;
  var $535$14 = $ins54$2 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14;
  var $535$15 = $ins54$3 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15;
  var $535$16 = $ins54$4 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16;
  var $535$17 = $ins54$5 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17;
  var $535$18 = $ins54$6 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18;
  var $535$19 = $ins54$7 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19;
  var $535$20 = $ins54$8 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20;
  var $535$21 = $ins54$9 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21;
  var $535$22 = $ins54$10 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22;
  var $535$23 = $ins54$11 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23;
  var $535$24 = $ins54$12 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24;
  var $535$25 = $ins54$13 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25;
  var $538$15 = $ins198$1 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$15;
  var $541$15 = $ins54$1 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$15;
  var $544 = $ins54$1;
  var $546 = $mask113_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17;
  var $547 = $546 ^ -1;
  var $ins186$0 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0) & 0 | $mask197$0 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$0) & 0 | 0;
  var $ins186$1 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1) & 0 | $mask197$1 & 0 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$1) & 0 | $544 & $547 ^ $515$0;
  var $ins186$2 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | $mask197$2 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$2) & 0 | 0;
  var $ins186$3 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3) & 0 | $mask197$3 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$3) & 0 | 0;
  var $ins186$4 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | $mask197$4 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$4) & 0 | 0;
  var $ins186$5 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | $mask197$5 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$5) & 0 | 0;
  var $ins186$6 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | $mask197$6 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$6) & 0 | 0;
  var $ins186$7 = (0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | $mask197$7 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$7) & 0 | 0;
  var $554$0 = $mask257_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17;
  var $556 = $ins186$1 & $554$0;
  var $ins42$0 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0) & 0 | $mask53$0 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$0) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$0) & 0 | 0;
  var $ins42$1 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1) & 0 | $mask53$1 & 0 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$1) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$1) & 0 | ($556 << 1 | $556 >>> 31) ^ $544;
  var $ins42$2 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | $mask53$2 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$2) & 0 | 0;
  var $ins42$3 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3) & 0 | $mask53$3 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$3) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$3) & 0 | 0;
  var $ins42$4 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | $mask53$4 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$4) & 0 | 0;
  var $ins42$5 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | $mask53$5 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$5) & 0 | 0;
  var $ins42$6 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | $mask53$6 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$6) & 0 | 0;
  var $ins42$7 = (0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | $mask53$7 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$7) & 0 | 0;
  var $564$19 = $ins186$1 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19;
  var $567$19 = $ins42$1 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19;
  var $570$21 = $ins186$1 ^ $mask212_masked_masked_masked_masked_masked$21;
  var $570$22 = $ins186$2 ^ $mask212_masked_masked_masked_masked_masked$22;
  var $570$23 = $ins186$3 ^ $mask212_masked_masked_masked_masked_masked$23;
  var $570$24 = $ins186$4 ^ $mask212_masked_masked_masked_masked_masked$24;
  var $570$25 = $ins186$5 ^ $mask212_masked_masked_masked_masked_masked$25;
  var $573$21 = $ins42$1 ^ $mask68_masked_masked_masked_masked_masked$21;
  var $573$22 = $ins42$2 ^ $mask68_masked_masked_masked_masked_masked$22;
  var $573$23 = $ins42$3 ^ $mask68_masked_masked_masked_masked_masked$23;
  var $573$24 = $ins42$4 ^ $mask68_masked_masked_masked_masked_masked$24;
  var $573$25 = $ins42$5 ^ $mask68_masked_masked_masked_masked_masked$25;
  var $576$23 = $ins186$1 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23;
  var $576$24 = $ins186$2 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24;
  var $576$25 = $ins186$3 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25;
  var $579$23 = $ins42$1 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23;
  var $579$24 = $ins42$2 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24;
  var $579$25 = $ins42$3 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25;
  var $582$24 = $ins186$1 ^ $mask209_masked_masked_masked_masked$24;
  var $584$24 = $ins42$1 ^ $mask65_masked_masked_masked_masked$24;
  var $588 = $mask62_masked_masked_masked$25;
  var $602 = $mask116_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16;
  var $603 = $602 ^ -1;
  var $605 = $588 & $603 ^ $mask206_masked_masked_masked$25;
  var $607 = $mask260_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16;
  var $608 = $605 & $607;
  var $612 = ($608 << 1 | $608 >>> 31) ^ $588;
  var $640 = $mask86_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8;
  var $641 = $640 ^ -1;
  var $643 = $612 & $641 ^ $605;
  var $645 = $mask230_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8;
  var $646 = $643 & $645;
  var $650 = ($646 << 1 | $646 >>> 31) ^ $612;
  var $mask167_masked_masked_masked_masked_masked_masked_masked_masked$22 = (0 ^ $mask209_masked_masked_masked_masked$22) & 0 | (($ins198$12 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0 | ($mask200_masked$22 | 0) & -1 | $532$22 & 0 | ($ins198$8 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$22) & 0 | 0) & 0 | ($ins186$4 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0 | $570$22 & 0 | ($ins186$0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0 | ($mask206_masked_masked_masked$25 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & -1;
  var $mask164_masked_masked_masked_masked_masked_masked_masked$20 = (0 ^ $mask209_masked_masked_masked_masked$20) & 0 | (($ins198$10 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($mask200_masked$20 | 0) & -1 | $532$20 & 0 | ($ins198$6 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$20) & 0 | 0) & 0 | ($ins186$2 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($ins186$0 ^ $mask212_masked_masked_masked_masked_masked$20) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($mask206_masked_masked_masked$23 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($mask206_masked_masked_masked$25 ^ $mask215_masked_masked_masked_masked_masked_masked$20) & -1;
  var $mask164_masked_masked_masked_masked_masked_masked_masked$21 = (0 ^ $mask209_masked_masked_masked_masked$21) & 0 | (($ins198$11 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | ($mask200_masked$21 | 0) & -1 | $532$21 & 0 | ($ins198$7 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$21) & 0 | 0) & 0 | ($ins186$3 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | $570$21 & -1 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | ($mask206_masked_masked_masked$24 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | (0 ^ $mask215_masked_masked_masked_masked_masked_masked$21) & 0;
  var $mask164_masked_masked_masked_masked_masked_masked_masked$22 = $mask167_masked_masked_masked_masked_masked_masked_masked_masked$22 | (0 ^ $mask215_masked_masked_masked_masked_masked_masked$22) & 0;
  var $mask164_masked_masked_masked_masked_masked_masked_masked$23 = ($ins186$0 ^ $mask209_masked_masked_masked_masked$23) & 0 | (($ins198$13 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0 | ($mask200_masked$23 | 0) & -1 | $532$23 & 0 | ($ins198$9 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$23) & 0 | 0) & 0 | ($ins186$5 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0 | $570$23 & 0 | $576$23 & -1 | (0 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0 | (0 ^ $mask215_masked_masked_masked_masked_masked_masked$23) & 0;
  var $mask164_masked_masked_masked_masked_masked_masked_masked$24 = $582$24 & -1 | ((($mask197$14 | 0) ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0 | ($mask200_masked$24 | 0) & -1 | $532$24 & 0 | ($ins198$10 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$24) & 0 | 0) & 0 | ($ins186$6 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0 | $570$24 & 0 | $576$24 & 0 | (0 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0 | (0 ^ $mask215_masked_masked_masked_masked_masked_masked$24) & 0;
  var $mask164_masked_masked_masked_masked_masked_masked_masked$25 = ($ins186$2 ^ $mask209_masked_masked_masked_masked$25) & 0 | ((($mask197$15 | 0) ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0 | ($mask200_masked$25 | 0) & -1 | $532$25 & 0 | ($ins198$11 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$25) & 0 | 0) & -1 | ($ins186$7 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0 | $570$25 & 0 | $576$25 & 0 | (0 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0 | (0 ^ $mask215_masked_masked_masked_masked_masked_masked$25) & 0;
  var $mask161_masked_masked_masked_masked_masked_masked$18 = (0 ^ $mask209_masked_masked_masked_masked$18) & 0 | (($ins198$8 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask200_masked$18 | 0) & -1 | $532$18 & 0 | ($ins198$4 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$18) & 0 | 0) & 0 | ($ins186$0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$18) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask206_masked_masked_masked$21 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask206_masked_masked_masked$23 ^ $mask215_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask206_masked_masked_masked$25 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & -1;
  var $mask158_masked_masked_masked_masked_masked$14 = (0 ^ $mask209_masked_masked_masked_masked$14) & 0 | (($ins198$4 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | $mask197$14 & -1 | $532$14 & 0 | ($ins198$0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$14) & 0 | 0) & 0 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$14) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | ($mask206_masked_masked_masked$17 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | ($mask206_masked_masked_masked$19 ^ $mask215_masked_masked_masked_masked_masked_masked$14) & 0 | ($mask206_masked_masked_masked$21 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | $605 ^ $mask221_masked_masked_masked_masked_masked_masked_masked_masked$14;
  var $mask155_masked_masked_masked_masked$12 = (0 ^ $mask209_masked_masked_masked_masked$12) & 0 | (($ins198$2 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | $mask197$12 & -1 | ($ins198$0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$12) & 0 | 0) & 0 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$12) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | ($mask206_masked_masked_masked$15 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | ($mask206_masked_masked_masked$17 ^ $mask215_masked_masked_masked_masked_masked_masked$12) & 0 | ($mask206_masked_masked_masked$19 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | $605 ^ $mask224_masked_masked_masked_masked_masked_masked_masked_masked_masked$12;
  var $mask155_masked_masked_masked_masked$13 = (0 ^ $mask209_masked_masked_masked_masked$13) & 0 | (($ins198$3 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | $mask197$13 & 0 | $532$13 & -1 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$13) & 0 | 0) & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$13) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | ($mask206_masked_masked_masked$16 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | ($mask206_masked_masked_masked$18 ^ $mask215_masked_masked_masked_masked_masked_masked$13) & 0 | ($mask206_masked_masked_masked$20 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | 0;
  var $mask155_masked_masked_masked_masked$14 = $mask158_masked_masked_masked_masked_masked$14 | 0;
  var $mask155_masked_masked_masked_masked$15 = (0 ^ $mask209_masked_masked_masked_masked$15) & 0 | (($ins198$5 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | $mask197$15 & 0 | $532$15 & 0 | $538$15 & -1 | 0) & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$15) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | ($mask206_masked_masked_masked$18 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | ($mask206_masked_masked_masked$20 ^ $mask215_masked_masked_masked_masked_masked_masked$15) & 0 | ($mask206_masked_masked_masked$22 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$16 = (0 ^ $mask209_masked_masked_masked_masked$16) & 0 | (($ins198$6 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask200_masked$16 | 0) & -1 | $532$16 & 0 | ($ins198$2 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$16) & 0 | 0) & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$16) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask206_masked_masked_masked$19 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask206_masked_masked_masked$21 ^ $mask215_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask206_masked_masked_masked$23 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$17 = (0 ^ $mask209_masked_masked_masked_masked$17) & 0 | (($ins198$7 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask200_masked$17 | 0) & -1 | $532$17 & 0 | ($ins198$3 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$17) & 0 | 0) & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$17) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask206_masked_masked_masked$20 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask206_masked_masked_masked$22 ^ $mask215_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask206_masked_masked_masked$24 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$18 = $mask161_masked_masked_masked_masked_masked_masked$18 | 0 | 0;
  var $mask155_masked_masked_masked_masked$19 = (0 ^ $mask209_masked_masked_masked_masked$19) & 0 | (($ins198$9 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0 | ($mask200_masked$19 | 0) & -1 | $532$19 & 0 | ($ins198$5 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$19) & 0 | 0) & 0 | $564$19 & -1 | (0 ^ $mask212_masked_masked_masked_masked_masked$19) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0 | ($mask206_masked_masked_masked$22 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0 | ($mask206_masked_masked_masked$24 ^ $mask215_masked_masked_masked_masked_masked_masked$19) & 0 | (0 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$20 = $mask164_masked_masked_masked_masked_masked_masked_masked$20 | (0 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$21 = $mask164_masked_masked_masked_masked_masked_masked_masked$21 | (0 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$22 = $mask164_masked_masked_masked_masked_masked_masked_masked$22 | (0 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$23 = $mask164_masked_masked_masked_masked_masked_masked_masked$23 | (0 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$24 = $mask164_masked_masked_masked_masked_masked_masked_masked$24 | (0 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0 | 0 | 0;
  var $mask155_masked_masked_masked_masked$25 = $mask164_masked_masked_masked_masked_masked_masked_masked$25 | (0 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0 | 0 | 0;
  var $mask152_masked_masked_masked$10 = (0 ^ $mask209_masked_masked_masked_masked$10) & 0 | (($ins198$0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | $mask197$10 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$10) & 0 | 0) & 0 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$10) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | ($mask206_masked_masked_masked$13 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | ($mask206_masked_masked_masked$15 ^ $mask215_masked_masked_masked_masked_masked_masked$10) & 0 | ($mask206_masked_masked_masked$17 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | $605 ^ $101;
  var $mask149_masked_masked$6 = (0 ^ $mask209_masked_masked_masked_masked$6) & 0 | $ins186$6 & 0 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$6) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | ($mask206_masked_masked_masked$9 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | ($mask206_masked_masked_masked$11 ^ $mask215_masked_masked_masked_masked_masked_masked$6) & 0 | ($mask206_masked_masked_masked$13 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | $643 ^ $mask236_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6;
  var $mask146_masked$4 = (0 ^ $mask209_masked_masked_masked_masked$4) & 0 | $ins186$4 & 0 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$4) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | ($mask206_masked_masked_masked$7 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | ($mask206_masked_masked_masked$9 ^ $mask215_masked_masked_masked_masked_masked_masked$4) & 0 | ($mask206_masked_masked_masked$11 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | $643 ^ $80;
  var $mask146_masked$5 = (0 ^ $mask209_masked_masked_masked_masked$5) & 0 | $ins186$5 & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$5) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | ($mask206_masked_masked_masked$8 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | ($mask206_masked_masked_masked$10 ^ $mask215_masked_masked_masked_masked_masked_masked$5) & 0 | ($mask206_masked_masked_masked$12 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | 0;
  var $mask146_masked$6 = $mask149_masked_masked$6 | 0;
  var $mask146_masked$7 = (0 ^ $mask209_masked_masked_masked_masked$7) & 0 | $ins186$7 & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$7) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | ($mask206_masked_masked_masked$10 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | ($mask206_masked_masked_masked$12 ^ $mask215_masked_masked_masked_masked_masked_masked$7) & 0 | ($mask206_masked_masked_masked$14 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | 0 | 0;
  var $mask146_masked$8 = (0 ^ $mask209_masked_masked_masked_masked$8) & 0 | ((0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | $mask197$8 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$8) & 0 | 0) & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$8) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | ($mask206_masked_masked_masked$11 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | ($mask206_masked_masked_masked$13 ^ $mask215_masked_masked_masked_masked_masked_masked$8) & 0 | ($mask206_masked_masked_masked$15 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | 0 | 0;
  var $mask146_masked$9 = (0 ^ $mask209_masked_masked_masked_masked$9) & 0 | ((0 ^ $mask266_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | $mask197$9 & -1 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$9) & 0 | 0) & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$9) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | ($mask206_masked_masked_masked$12 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | ($mask206_masked_masked_masked$14 ^ $mask215_masked_masked_masked_masked_masked_masked$9) & 0 | ($mask206_masked_masked_masked$16 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | 0 | 0;
  var $mask146_masked$10 = $mask152_masked_masked_masked$10 | 0 | 0;
  var $mask146_masked$11 = (0 ^ $mask209_masked_masked_masked_masked$11) & 0 | ($526$11 & -1 | $mask197$11 & 0 | (0 ^ $mask263_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | (0 ^ $mask218_masked_masked_masked_masked_masked_masked_masked$11) & 0 | 0) & -1 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$11) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | ($mask206_masked_masked_masked$14 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | ($mask206_masked_masked_masked$16 ^ $mask215_masked_masked_masked_masked_masked_masked$11) & 0 | ($mask206_masked_masked_masked$18 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | 0 | 0 | 0;
  var $mask146_masked$12 = $mask155_masked_masked_masked_masked$12 | 0 | 0 | 0;
  var $mask146_masked$13 = $mask155_masked_masked_masked_masked$13 | 0 | 0 | 0;
  var $mask146_masked$14 = $mask155_masked_masked_masked_masked$14 | 0 | 0 | 0;
  var $mask146_masked$15 = $mask155_masked_masked_masked_masked$15 | 0 | 0 | 0;
  var $mask146_masked$16 = $mask155_masked_masked_masked_masked$16 | 0 | 0 | 0;
  var $mask146_masked$17 = $mask155_masked_masked_masked_masked$17 | 0 | 0 | 0;
  var $mask146_masked$18 = $mask155_masked_masked_masked_masked$18 | 0 | 0 | 0;
  var $mask146_masked$19 = $mask155_masked_masked_masked_masked$19 | 0 | 0 | 0;
  var $mask146_masked$20 = $mask155_masked_masked_masked_masked$20 | 0 | 0 | 0;
  var $mask146_masked$21 = $mask155_masked_masked_masked_masked$21 | 0 | 0 | 0;
  var $mask146_masked$22 = $mask155_masked_masked_masked_masked$22 | 0 | 0 | 0;
  var $mask146_masked$23 = $mask155_masked_masked_masked_masked$23 | 0 | 0 | 0;
  var $mask146_masked$24 = $mask155_masked_masked_masked_masked$24 | 0 | 0 | 0;
  var $mask146_masked$25 = $mask155_masked_masked_masked_masked$25 | 0 | 0 | 0;
  var $mask23_masked_masked_masked_masked_masked_masked_masked_masked$22 = (0 ^ $mask65_masked_masked_masked_masked$22) & 0 | (($ins54$12 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0 | ($mask56_masked$22 | 0) & -1 | $535$22 & 0 | ($ins54$8 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$22) & 0) & 0 | ($ins42$4 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0 | $573$22 & 0 | ($ins42$0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0 | ($mask62_masked_masked_masked$25 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & -1;
  var $mask20_masked_masked_masked_masked_masked_masked_masked$20 = (0 ^ $mask65_masked_masked_masked_masked$20) & 0 | (($ins54$10 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($mask56_masked$20 | 0) & -1 | $535$20 & 0 | ($ins54$6 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$20) & 0) & 0 | ($ins42$2 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($ins42$0 ^ $mask68_masked_masked_masked_masked_masked$20) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($mask62_masked_masked_masked$23 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0 | ($mask62_masked_masked_masked$25 ^ $mask71_masked_masked_masked_masked_masked_masked$20) & -1;
  var $mask20_masked_masked_masked_masked_masked_masked_masked$21 = (0 ^ $mask65_masked_masked_masked_masked$21) & 0 | (($ins54$11 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | ($mask56_masked$21 | 0) & -1 | $535$21 & 0 | ($ins54$7 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$21) & 0) & 0 | ($ins42$3 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | $573$21 & -1 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | ($mask62_masked_masked_masked$24 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0 | (0 ^ $mask71_masked_masked_masked_masked_masked_masked$21) & 0;
  var $mask20_masked_masked_masked_masked_masked_masked_masked$22 = $mask23_masked_masked_masked_masked_masked_masked_masked_masked$22 | (0 ^ $mask71_masked_masked_masked_masked_masked_masked$22) & 0;
  var $mask20_masked_masked_masked_masked_masked_masked_masked$23 = ($ins42$0 ^ $mask65_masked_masked_masked_masked$23) & 0 | (($ins54$13 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0 | ($mask56_masked$23 | 0) & -1 | $535$23 & 0 | ($ins54$9 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$23) & 0) & 0 | ($ins42$5 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0 | $573$23 & 0 | $579$23 & -1 | (0 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0 | (0 ^ $mask71_masked_masked_masked_masked_masked_masked$23) & 0;
  var $mask20_masked_masked_masked_masked_masked_masked_masked$24 = $584$24 & -1 | (((0 | $mask53$14) ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0 | ($mask56_masked$24 | 0) & -1 | $535$24 & 0 | ($ins54$10 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$24) & 0) & 0 | ($ins42$6 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0 | $573$24 & 0 | $579$24 & 0 | (0 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0 | (0 ^ $mask71_masked_masked_masked_masked_masked_masked$24) & 0;
  var $mask20_masked_masked_masked_masked_masked_masked_masked$25 = ($ins42$2 ^ $mask65_masked_masked_masked_masked$25) & 0 | (((0 | $mask53$15) ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0 | ($mask56_masked$25 | 0) & -1 | $535$25 & 0 | ($ins54$11 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$25) & 0) & -1 | ($ins42$7 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0 | $573$25 & 0 | $579$25 & 0 | (0 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0 | (0 ^ $mask71_masked_masked_masked_masked_masked_masked$25) & 0;
  var $mask17_masked_masked_masked_masked_masked_masked$18 = (0 ^ $mask65_masked_masked_masked_masked$18) & 0 | (($ins54$8 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask56_masked$18 | 0) & -1 | $535$18 & 0 | ($ins54$4 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$18) & 0) & 0 | ($ins42$0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$18) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask62_masked_masked_masked$21 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask62_masked_masked_masked$23 ^ $mask71_masked_masked_masked_masked_masked_masked$18) & 0 | ($mask62_masked_masked_masked$25 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$18) & -1;
  var $mask17_masked_masked_masked_masked_masked_masked$19 = (0 ^ $mask65_masked_masked_masked_masked$19) & 0 | (($ins54$9 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0 | ($mask56_masked$19 | 0) & -1 | $535$19 & 0 | ($ins54$5 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$19) & 0) & 0 | $567$19 & -1 | (0 ^ $mask68_masked_masked_masked_masked_masked$19) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0 | ($mask62_masked_masked_masked$22 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0 | ($mask62_masked_masked_masked$24 ^ $mask71_masked_masked_masked_masked_masked_masked$19) & 0 | (0 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$19) & 0;
  var $mask17_masked_masked_masked_masked_masked_masked$20 = $mask20_masked_masked_masked_masked_masked_masked_masked$20 | (0 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$20) & 0;
  var $mask17_masked_masked_masked_masked_masked_masked$21 = $mask20_masked_masked_masked_masked_masked_masked_masked$21 | (0 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$21) & 0;
  var $mask17_masked_masked_masked_masked_masked_masked$22 = $mask20_masked_masked_masked_masked_masked_masked_masked$22 | (0 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$22) & 0;
  var $mask17_masked_masked_masked_masked_masked_masked$23 = $mask20_masked_masked_masked_masked_masked_masked_masked$23 | (0 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$23) & 0;
  var $mask17_masked_masked_masked_masked_masked_masked$24 = $mask20_masked_masked_masked_masked_masked_masked_masked$24 | (0 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$24) & 0;
  var $mask17_masked_masked_masked_masked_masked_masked$25 = $mask20_masked_masked_masked_masked_masked_masked_masked$25 | (0 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$25) & 0;
  var $mask14_masked_masked_masked_masked_masked$14 = (0 ^ $mask65_masked_masked_masked_masked$14) & 0 | (($ins54$4 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | $mask53$14 & -1 | $535$14 & 0 | ($ins54$0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$14) & 0) & 0 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$14) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | ($mask62_masked_masked_masked$17 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | ($mask62_masked_masked_masked$19 ^ $mask71_masked_masked_masked_masked_masked_masked$14) & 0 | ($mask62_masked_masked_masked$21 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$14) & 0 | $612 ^ $mask77_masked_masked_masked_masked_masked_masked_masked_masked$14;
  var $mask14_masked_masked_masked_masked_masked$15 = (0 ^ $mask65_masked_masked_masked_masked$15) & 0 | (($ins54$5 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | $mask53$15 & 0 | $535$15 & 0 | $541$15 & -1) & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$15) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | ($mask62_masked_masked_masked$18 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | ($mask62_masked_masked_masked$20 ^ $mask71_masked_masked_masked_masked_masked_masked$15) & 0 | ($mask62_masked_masked_masked$22 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$15) & 0 | 0;
  var $mask14_masked_masked_masked_masked_masked$16 = (0 ^ $mask65_masked_masked_masked_masked$16) & 0 | (($ins54$6 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask56_masked$16 | 0) & -1 | $535$16 & 0 | ($ins54$2 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$16) & 0) & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$16) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask62_masked_masked_masked$19 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask62_masked_masked_masked$21 ^ $mask71_masked_masked_masked_masked_masked_masked$16) & 0 | ($mask62_masked_masked_masked$23 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$16) & 0 | 0;
  var $mask14_masked_masked_masked_masked_masked$17 = (0 ^ $mask65_masked_masked_masked_masked$17) & 0 | (($ins54$7 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask56_masked$17 | 0) & -1 | $535$17 & 0 | ($ins54$3 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$17) & 0) & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$17) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask62_masked_masked_masked$20 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask62_masked_masked_masked$22 ^ $mask71_masked_masked_masked_masked_masked_masked$17) & 0 | ($mask62_masked_masked_masked$24 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$17) & 0 | 0;
  var $mask14_masked_masked_masked_masked_masked$18 = $mask17_masked_masked_masked_masked_masked_masked$18 | 0;
  var $mask14_masked_masked_masked_masked_masked$19 = $mask17_masked_masked_masked_masked_masked_masked$19 | 0;
  var $mask14_masked_masked_masked_masked_masked$20 = $mask17_masked_masked_masked_masked_masked_masked$20 | 0;
  var $mask14_masked_masked_masked_masked_masked$21 = $mask17_masked_masked_masked_masked_masked_masked$21 | 0;
  var $mask14_masked_masked_masked_masked_masked$22 = $mask17_masked_masked_masked_masked_masked_masked$22 | 0;
  var $mask14_masked_masked_masked_masked_masked$23 = $mask17_masked_masked_masked_masked_masked_masked$23 | 0;
  var $mask14_masked_masked_masked_masked_masked$24 = $mask17_masked_masked_masked_masked_masked_masked$24 | 0;
  var $mask14_masked_masked_masked_masked_masked$25 = $mask17_masked_masked_masked_masked_masked_masked$25 | 0;
  var $mask11_masked_masked_masked_masked$12 = (0 ^ $mask65_masked_masked_masked_masked$12) & 0 | (($ins54$2 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | $mask53$12 & -1 | ($ins54$0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$12) & 0) & 0 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$12) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | ($mask62_masked_masked_masked$15 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | ($mask62_masked_masked_masked$17 ^ $mask71_masked_masked_masked_masked_masked_masked$12) & 0 | ($mask62_masked_masked_masked$19 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$12) & 0 | $612 ^ $mask80_masked_masked_masked_masked_masked_masked_masked_masked_masked$12;
  var $mask11_masked_masked_masked_masked$13 = (0 ^ $mask65_masked_masked_masked_masked$13) & 0 | (($ins54$3 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | $mask53$13 & 0 | $535$13 & -1 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$13) & 0) & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$13) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | ($mask62_masked_masked_masked$16 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | ($mask62_masked_masked_masked$18 ^ $mask71_masked_masked_masked_masked_masked_masked$13) & 0 | ($mask62_masked_masked_masked$20 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$13) & 0 | 0;
  var $mask11_masked_masked_masked_masked$14 = $mask14_masked_masked_masked_masked_masked$14 | 0;
  var $mask11_masked_masked_masked_masked$15 = $mask14_masked_masked_masked_masked_masked$15 | 0;
  var $mask11_masked_masked_masked_masked$16 = $mask14_masked_masked_masked_masked_masked$16 | 0;
  var $mask11_masked_masked_masked_masked$17 = $mask14_masked_masked_masked_masked_masked$17 | 0;
  var $mask11_masked_masked_masked_masked$18 = $mask14_masked_masked_masked_masked_masked$18 | 0;
  var $mask11_masked_masked_masked_masked$19 = $mask14_masked_masked_masked_masked_masked$19 | 0;
  var $mask11_masked_masked_masked_masked$20 = $mask14_masked_masked_masked_masked_masked$20 | 0;
  var $mask11_masked_masked_masked_masked$21 = $mask14_masked_masked_masked_masked_masked$21 | 0;
  var $mask11_masked_masked_masked_masked$22 = $mask14_masked_masked_masked_masked_masked$22 | 0;
  var $mask11_masked_masked_masked_masked$23 = $mask14_masked_masked_masked_masked_masked$23 | 0;
  var $mask11_masked_masked_masked_masked$24 = $mask14_masked_masked_masked_masked_masked$24 | 0;
  var $mask11_masked_masked_masked_masked$25 = $mask14_masked_masked_masked_masked_masked$25 | 0;
  var $mask8_masked_masked_masked$10 = (0 ^ $mask65_masked_masked_masked_masked$10) & 0 | (($ins54$0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | $mask53$10 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$10) & 0) & 0 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$10) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | ($mask62_masked_masked_masked$13 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | ($mask62_masked_masked_masked$15 ^ $mask71_masked_masked_masked_masked_masked_masked$10) & 0 | ($mask62_masked_masked_masked$17 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$10) & 0 | $612 ^ $105;
  var $mask8_masked_masked_masked$11 = (0 ^ $mask65_masked_masked_masked_masked$11) & 0 | ($529$11 & -1 | $mask53$11 & 0 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$11) & 0) & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$11) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | ($mask62_masked_masked_masked$14 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | ($mask62_masked_masked_masked$16 ^ $mask71_masked_masked_masked_masked_masked_masked$11) & 0 | ($mask62_masked_masked_masked$18 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$11) & 0 | 0;
  var $mask8_masked_masked_masked$12 = $mask11_masked_masked_masked_masked$12 | 0;
  var $mask8_masked_masked_masked$13 = $mask11_masked_masked_masked_masked$13 | 0;
  var $mask8_masked_masked_masked$14 = $mask11_masked_masked_masked_masked$14 | 0;
  var $mask8_masked_masked_masked$15 = $mask11_masked_masked_masked_masked$15 | 0;
  var $mask8_masked_masked_masked$16 = $mask11_masked_masked_masked_masked$16 | 0;
  var $mask8_masked_masked_masked$17 = $mask11_masked_masked_masked_masked$17 | 0;
  var $mask8_masked_masked_masked$18 = $mask11_masked_masked_masked_masked$18 | 0;
  var $mask8_masked_masked_masked$19 = $mask11_masked_masked_masked_masked$19 | 0;
  var $mask8_masked_masked_masked$20 = $mask11_masked_masked_masked_masked$20 | 0;
  var $mask8_masked_masked_masked$21 = $mask11_masked_masked_masked_masked$21 | 0;
  var $mask8_masked_masked_masked$22 = $mask11_masked_masked_masked_masked$22 | 0;
  var $mask8_masked_masked_masked$23 = $mask11_masked_masked_masked_masked$23 | 0;
  var $mask8_masked_masked_masked$24 = $mask11_masked_masked_masked_masked$24 | 0;
  var $mask8_masked_masked_masked$25 = $mask11_masked_masked_masked_masked$25 | 0;
  var $mask5_masked_masked$6 = (0 ^ $mask65_masked_masked_masked_masked$6) & 0 | $ins42$6 & 0 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$6) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | ($mask62_masked_masked_masked$9 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | ($mask62_masked_masked_masked$11 ^ $mask71_masked_masked_masked_masked_masked_masked$6) & 0 | ($mask62_masked_masked_masked$13 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6) & 0 | $650 ^ $mask92_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$6;
  var $mask5_masked_masked$7 = (0 ^ $mask65_masked_masked_masked_masked$7) & 0 | $ins42$7 & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$7) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | ($mask62_masked_masked_masked$10 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | ($mask62_masked_masked_masked$12 ^ $mask71_masked_masked_masked_masked_masked_masked$7) & 0 | ($mask62_masked_masked_masked$14 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$7) & 0 | 0;
  var $mask5_masked_masked$8 = (0 ^ $mask65_masked_masked_masked_masked$8) & 0 | ((0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | $mask53$8 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$8) & 0) & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$8) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | ($mask62_masked_masked_masked$11 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | ($mask62_masked_masked_masked$13 ^ $mask71_masked_masked_masked_masked_masked_masked$8) & 0 | ($mask62_masked_masked_masked$15 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$8) & 0 | 0;
  var $mask5_masked_masked$9 = (0 ^ $mask65_masked_masked_masked_masked$9) & 0 | ((0 ^ $mask122_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | $mask53$9 & -1 | (0 ^ $mask119_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | (0 ^ $mask74_masked_masked_masked_masked_masked_masked_masked$9) & 0) & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$9) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | ($mask62_masked_masked_masked$12 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | ($mask62_masked_masked_masked$14 ^ $mask71_masked_masked_masked_masked_masked_masked$9) & 0 | ($mask62_masked_masked_masked$16 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$9) & 0 | 0;
  var $mask5_masked_masked$10 = $mask8_masked_masked_masked$10 | 0;
  var $mask5_masked_masked$11 = $mask8_masked_masked_masked$11 | 0;
  var $mask5_masked_masked$12 = $mask8_masked_masked_masked$12 | 0;
  var $mask5_masked_masked$13 = $mask8_masked_masked_masked$13 | 0;
  var $mask5_masked_masked$14 = $mask8_masked_masked_masked$14 | 0;
  var $mask5_masked_masked$15 = $mask8_masked_masked_masked$15 | 0;
  var $mask5_masked_masked$16 = $mask8_masked_masked_masked$16 | 0;
  var $mask5_masked_masked$17 = $mask8_masked_masked_masked$17 | 0;
  var $mask5_masked_masked$18 = $mask8_masked_masked_masked$18 | 0;
  var $mask5_masked_masked$19 = $mask8_masked_masked_masked$19 | 0;
  var $mask5_masked_masked$20 = $mask8_masked_masked_masked$20 | 0;
  var $mask5_masked_masked$21 = $mask8_masked_masked_masked$21 | 0;
  var $mask5_masked_masked$22 = $mask8_masked_masked_masked$22 | 0;
  var $mask5_masked_masked$23 = $mask8_masked_masked_masked$23 | 0;
  var $mask5_masked_masked$24 = $mask8_masked_masked_masked$24 | 0;
  var $mask5_masked_masked$25 = $mask8_masked_masked_masked$25 | 0;
  var $mask2_masked$4 = (0 ^ $mask65_masked_masked_masked_masked$4) & 0 | $ins42$4 & 0 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$4) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | ($mask62_masked_masked_masked$7 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | ($mask62_masked_masked_masked$9 ^ $mask71_masked_masked_masked_masked_masked_masked$4) & 0 | ($mask62_masked_masked_masked$11 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$4) & 0 | $650 ^ $83;
  var $mask2_masked$5 = (0 ^ $mask65_masked_masked_masked_masked$5) & 0 | $ins42$5 & -1 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$5) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | ($mask62_masked_masked_masked$8 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | ($mask62_masked_masked_masked$10 ^ $mask71_masked_masked_masked_masked_masked_masked$5) & 0 | ($mask62_masked_masked_masked$12 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$5) & 0 | 0;
  var $mask2_masked$6 = $mask5_masked_masked$6 | 0;
  var $mask2_masked$7 = $mask5_masked_masked$7 | 0;
  var $mask2_masked$8 = $mask5_masked_masked$8 | 0;
  var $mask2_masked$9 = $mask5_masked_masked$9 | 0;
  var $mask2_masked$10 = $mask5_masked_masked$10 | 0;
  var $mask2_masked$11 = $mask5_masked_masked$11 | 0;
  var $mask2_masked$12 = $mask5_masked_masked$12 | 0;
  var $mask2_masked$13 = $mask5_masked_masked$13 | 0;
  var $mask2_masked$14 = $mask5_masked_masked$14 | 0;
  var $mask2_masked$15 = $mask5_masked_masked$15 | 0;
  var $mask2_masked$16 = $mask5_masked_masked$16 | 0;
  var $mask2_masked$17 = $mask5_masked_masked$17 | 0;
  var $mask2_masked$18 = $mask5_masked_masked$18 | 0;
  var $mask2_masked$19 = $mask5_masked_masked$19 | 0;
  var $mask2_masked$20 = $mask5_masked_masked$20 | 0;
  var $mask2_masked$21 = $mask5_masked_masked$21 | 0;
  var $mask2_masked$22 = $mask5_masked_masked$22 | 0;
  var $mask2_masked$23 = $mask5_masked_masked$23 | 0;
  var $mask2_masked$24 = $mask5_masked_masked$24 | 0;
  var $mask2_masked$25 = $mask5_masked_masked$25 | 0;
  var $681$0 = (0 ^ $mask209_masked_masked_masked_masked$2) & 0 | $ins186$2 & 0 | (0 ^ $mask251_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | (0 ^ $mask212_masked_masked_masked_masked_masked$2) & 0 | (0 ^ $mask245_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | ($mask206_masked_masked_masked$5 ^ $mask248_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | ($mask206_masked_masked_masked$7 ^ $mask215_masked_masked_masked_masked_masked_masked$2) & 0 | ($mask206_masked_masked_masked$9 ^ $mask254_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | $643 ^ $mask242_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2;
  HEAP32[$subkey$s2] = $681$0 ^ ($643 ^ $17);
  var $684$0 = (0 ^ $mask65_masked_masked_masked_masked$2) & 0 | $ins42$2 & 0 | (0 ^ $mask107_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | (0 ^ $mask68_masked_masked_masked_masked_masked$2) & 0 | (0 ^ $mask101_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | ($mask62_masked_masked_masked$5 ^ $mask104_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | ($mask62_masked_masked_masked$7 ^ $mask71_masked_masked_masked_masked_masked_masked$2) & 0 | ($mask62_masked_masked_masked$9 ^ $mask110_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2) & 0 | $650 ^ $mask98_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked_masked$2;
  HEAP32[$subkey$s2 + 1] = $684$0 ^ ($650 ^ $35);
  var $688$0 = $mask203_masked_masked$3;
  var $690$s2 = ($subkey + 16 | 0) >> 2;
  HEAP32[$690$s2] = $688$0;
  var $691$0 = $mask59_masked_masked$3;
  var $693$s2 = ($subkey + 20 | 0) >> 2;
  HEAP32[$693$s2] = $691$0;
  var $694$0 = $mask146_masked$4;
  var $697$s2 = ($subkey + 24 | 0) >> 2;
  HEAP32[$697$s2] = $681$0 ^ $694$0;
  var $698$0 = $mask2_masked$4;
  var $701$s2 = ($subkey + 28 | 0) >> 2;
  HEAP32[$701$s2] = $684$0 ^ $698$0;
  var $702$0 = $mask200_masked$5;
  var $705$s2 = ($subkey + 32 | 0) >> 2;
  HEAP32[$705$s2] = $702$0 ^ $688$0;
  var $706$0 = $mask56_masked$5;
  var $709$s2 = ($subkey + 36 | 0) >> 2;
  HEAP32[$709$s2] = $706$0 ^ $691$0;
  var $710$0 = $mask149_masked_masked$6;
  var $714$s2 = ($subkey + 40 | 0) >> 2;
  HEAP32[$714$s2] = $694$0 ^ $710$0;
  var $715$0 = $mask5_masked_masked$6;
  var $718$s2 = ($subkey + 44 | 0) >> 2;
  HEAP32[$718$s2] = $698$0 ^ $715$0;
  var $719$0 = $mask197$7;
  var $723$s2 = ($subkey + 48 | 0) >> 2;
  HEAP32[$723$s2] = $719$0 ^ $702$0;
  var $724$0 = $mask53$7;
  var $725 = $724$0;
  var $728$s2 = ($subkey + 52 | 0) >> 2;
  HEAP32[$728$s2] = $724$0 ^ $706$0;
  var $729$0 = $mask152_masked_masked_masked$10;
  var $731$0 = $mask8_masked_masked_masked$10;
  var $734 = $731$0 & $641 ^ $729$0;
  var $735 = $734 & $645;
  var $740$s2 = ($subkey + 56 | 0) >> 2;
  HEAP32[$740$s2] = $734 ^ $710$0;
  var $744$s2 = ($subkey + 60 | 0) >> 2;
  HEAP32[$744$s2] = $715$0 ^ $731$0 ^ ($735 << 1 | $735 >>> 31);
  HEAP32[$subkey$s2 + 16] = $645;
  HEAP32[$subkey$s2 + 17] = $640;
  var $747 = $516$0;
  HEAP32[$subkey$s2 + 18] = $747;
  HEAP32[$subkey$s2 + 19] = $509;
  var $751 = $725 & $510 ^ $719$0;
  var $752 = $751 & $747;
  var $756$0 = $526$11;
  var $759$s2 = ($subkey + 80 | 0) >> 2;
  HEAP32[$759$s2] = $756$0 ^ $751;
  var $760$0 = $529$11;
  var $764$s2 = ($subkey + 84 | 0) >> 2;
  HEAP32[$764$s2] = ($752 << 1 | $752 >>> 31) ^ $725 ^ $760$0;
  var $765$0 = $mask155_masked_masked_masked_masked$12;
  var $768$s2 = ($subkey + 88 | 0) >> 2;
  HEAP32[$768$s2] = $729$0 ^ $765$0;
  var $769$0 = $mask11_masked_masked_masked_masked$12;
  var $772$s2 = ($subkey + 92 | 0) >> 2;
  HEAP32[$772$s2] = $731$0 ^ $769$0;
  var $773$0 = $532$13;
  var $776$s2 = ($subkey + 96 | 0) >> 2;
  HEAP32[$776$s2] = $756$0 ^ $773$0;
  var $777$0 = $535$13;
  var $780$s2 = ($subkey + 100 | 0) >> 2;
  HEAP32[$780$s2] = $760$0 ^ $777$0;
  var $781$0 = $mask158_masked_masked_masked_masked_masked$14;
  var $785$s2 = ($subkey + 104 | 0) >> 2;
  HEAP32[$785$s2] = $765$0 ^ $781$0;
  var $786$0 = $mask14_masked_masked_masked_masked_masked$14;
  var $789$s2 = ($subkey + 108 | 0) >> 2;
  HEAP32[$789$s2] = $769$0 ^ $786$0;
  var $790$0 = $538$15;
  var $794$s2 = ($subkey + 112 | 0) >> 2;
  HEAP32[$794$s2] = $773$0 ^ $790$0;
  var $795$0 = $541$15;
  var $796 = $795$0;
  var $799$s2 = ($subkey + 116 | 0) >> 2;
  HEAP32[$799$s2] = $777$0 ^ $795$0;
  var $800$0 = $mask161_masked_masked_masked_masked_masked_masked$18;
  var $802$0 = $mask17_masked_masked_masked_masked_masked_masked$18;
  var $805 = $802$0 & $603 ^ $800$0;
  var $806 = $805 & $607;
  var $811$s2 = ($subkey + 120 | 0) >> 2;
  HEAP32[$811$s2] = $805 ^ $781$0;
  var $815$s2 = ($subkey + 124 | 0) >> 2;
  HEAP32[$815$s2] = $786$0 ^ $802$0 ^ ($806 << 1 | $806 >>> 31);
  HEAP32[$subkey$s2 + 32] = $607;
  HEAP32[$subkey$s2 + 33] = $602;
  var $818 = $554$0;
  HEAP32[$subkey$s2 + 34] = $818;
  HEAP32[$subkey$s2 + 35] = $546;
  var $822 = $796 & $547 ^ $790$0;
  var $823 = $822 & $818;
  var $827$0 = $564$19;
  var $830$s2 = ($subkey + 144 | 0) >> 2;
  HEAP32[$830$s2] = $827$0 ^ $822;
  var $831$0 = $567$19;
  var $835$s2 = ($subkey + 148 | 0) >> 2;
  HEAP32[$835$s2] = ($823 << 1 | $823 >>> 31) ^ $796 ^ $831$0;
  var $836$0 = $mask164_masked_masked_masked_masked_masked_masked_masked$20;
  var $839$s2 = ($subkey + 152 | 0) >> 2;
  HEAP32[$839$s2] = $800$0 ^ $836$0;
  var $840$0 = $mask20_masked_masked_masked_masked_masked_masked_masked$20;
  var $843$s2 = ($subkey + 156 | 0) >> 2;
  HEAP32[$843$s2] = $802$0 ^ $840$0;
  var $844$0 = $570$21;
  var $847$s2 = ($subkey + 160 | 0) >> 2;
  HEAP32[$847$s2] = $827$0 ^ $844$0;
  var $848$0 = $573$21;
  var $851$s2 = ($subkey + 164 | 0) >> 2;
  HEAP32[$851$s2] = $831$0 ^ $848$0;
  var $852$0 = $mask167_masked_masked_masked_masked_masked_masked_masked_masked$22;
  var $856$s2 = ($subkey + 168 | 0) >> 2;
  HEAP32[$856$s2] = $836$0 ^ $852$0;
  var $857$0 = $mask23_masked_masked_masked_masked_masked_masked_masked_masked$22;
  var $861$s2 = ($subkey + 172 | 0) >> 2;
  HEAP32[$861$s2] = $840$0 ^ $857$0;
  var $862$0 = $576$23;
  var $865$s2 = ($subkey + 176 | 0) >> 2;
  HEAP32[$865$s2] = $844$0 ^ $862$0;
  var $866$0 = $579$23;
  var $869$s2 = ($subkey + 180 | 0) >> 2;
  HEAP32[$869$s2] = $848$0 ^ $866$0;
  var $870$s2 = ($subkey + 184 | 0) >> 2;
  HEAP32[$870$s2] = $852$0;
  var $871$s2 = ($subkey + 188 | 0) >> 2;
  HEAP32[$871$s2] = $857$0;
  HEAP32[$subkey$s2 + 48] = $582$24 ^ $862$0;
  HEAP32[$subkey$s2 + 49] = $584$24 ^ $866$0;
  var $880 = HEAP32[$690$s2];
  var $882 = HEAP32[$693$s2] ^ $880;
  var $885 = $882 << 8 | $882 >>> 24;
  HEAP32[$693$s2] = $885 ^ $880;
  HEAP32[$690$s2] = $885;
  var $887 = HEAP32[$697$s2];
  var $889 = HEAP32[$701$s2] ^ $887;
  var $892 = $889 << 8 | $889 >>> 24;
  HEAP32[$701$s2] = $892 ^ $887;
  HEAP32[$697$s2] = $892;
  var $894 = HEAP32[$705$s2];
  var $896 = HEAP32[$709$s2] ^ $894;
  var $899 = $896 << 8 | $896 >>> 24;
  HEAP32[$709$s2] = $899 ^ $894;
  HEAP32[$705$s2] = $899;
  var $901 = HEAP32[$714$s2];
  var $903 = HEAP32[$718$s2] ^ $901;
  var $906 = $903 << 8 | $903 >>> 24;
  HEAP32[$718$s2] = $906 ^ $901;
  HEAP32[$714$s2] = $906;
  var $908 = HEAP32[$723$s2];
  var $910 = HEAP32[$728$s2] ^ $908;
  var $913 = $910 << 8 | $910 >>> 24;
  HEAP32[$728$s2] = $913 ^ $908;
  HEAP32[$723$s2] = $913;
  var $915 = HEAP32[$740$s2];
  var $917 = HEAP32[$744$s2] ^ $915;
  var $920 = $917 << 8 | $917 >>> 24;
  HEAP32[$744$s2] = $920 ^ $915;
  HEAP32[$740$s2] = $920;
  var $922 = HEAP32[$759$s2];
  var $924 = HEAP32[$764$s2] ^ $922;
  var $927 = $924 << 8 | $924 >>> 24;
  HEAP32[$764$s2] = $927 ^ $922;
  HEAP32[$759$s2] = $927;
  var $929 = HEAP32[$768$s2];
  var $931 = HEAP32[$772$s2] ^ $929;
  var $934 = $931 << 8 | $931 >>> 24;
  HEAP32[$772$s2] = $934 ^ $929;
  HEAP32[$768$s2] = $934;
  var $936 = HEAP32[$776$s2];
  var $938 = HEAP32[$780$s2] ^ $936;
  var $941 = $938 << 8 | $938 >>> 24;
  HEAP32[$780$s2] = $941 ^ $936;
  HEAP32[$776$s2] = $941;
  var $943 = HEAP32[$785$s2];
  var $945 = HEAP32[$789$s2] ^ $943;
  var $948 = $945 << 8 | $945 >>> 24;
  HEAP32[$789$s2] = $948 ^ $943;
  HEAP32[$785$s2] = $948;
  var $950 = HEAP32[$794$s2];
  var $952 = HEAP32[$799$s2] ^ $950;
  var $955 = $952 << 8 | $952 >>> 24;
  HEAP32[$799$s2] = $955 ^ $950;
  HEAP32[$794$s2] = $955;
  var $957 = HEAP32[$811$s2];
  var $959 = HEAP32[$815$s2] ^ $957;
  var $962 = $959 << 8 | $959 >>> 24;
  HEAP32[$815$s2] = $962 ^ $957;
  HEAP32[$811$s2] = $962;
  var $964 = HEAP32[$830$s2];
  var $966 = HEAP32[$835$s2] ^ $964;
  var $969 = $966 << 8 | $966 >>> 24;
  HEAP32[$835$s2] = $969 ^ $964;
  HEAP32[$830$s2] = $969;
  var $971 = HEAP32[$839$s2];
  var $973 = HEAP32[$843$s2] ^ $971;
  var $976 = $973 << 8 | $973 >>> 24;
  HEAP32[$843$s2] = $976 ^ $971;
  HEAP32[$839$s2] = $976;
  var $978 = HEAP32[$847$s2];
  var $980 = HEAP32[$851$s2] ^ $978;
  var $983 = $980 << 8 | $980 >>> 24;
  HEAP32[$851$s2] = $983 ^ $978;
  HEAP32[$847$s2] = $983;
  var $985 = HEAP32[$856$s2];
  var $987 = HEAP32[$861$s2] ^ $985;
  var $990 = $987 << 8 | $987 >>> 24;
  HEAP32[$861$s2] = $990 ^ $985;
  HEAP32[$856$s2] = $990;
  var $992 = HEAP32[$865$s2];
  var $994 = HEAP32[$869$s2] ^ $992;
  var $997 = $994 << 8 | $994 >>> 24;
  HEAP32[$869$s2] = $997 ^ $992;
  HEAP32[$865$s2] = $997;
  var $999 = HEAP32[$870$s2];
  var $1001 = HEAP32[$871$s2] ^ $999;
  var $1004 = $1001 << 8 | $1001 >>> 24;
  HEAP32[$871$s2] = $1004 ^ $999;
  HEAP32[$870$s2] = $1004;
  return;
}
__gcry_camellia_setup128["X"] = 1;
function __gcry_camellia_setup256($key, $subkey) {
  var $1163$s2;
  var $1161$s2;
  var $1159$s2;
  var $1155$s2;
  var $1151$s2;
  var $1147$s2;
  var $1143$s2;
  var $1139$s2;
  var $1135$s2;
  var $1131$s2;
  var $1127$s2;
  var $1123$s2;
  var $1101$s2;
  var $1097$s2;
  var $1083$s2;
  var $1079$s2;
  var $1075$s2;
  var $1071$s2;
  var $1067$s2;
  var $1063$s2;
  var $1059$s2;
  var $1055$s2;
  var $1051$s2;
  var $1047$s2;
  var $1025$s2;
  var $1021$s2;
  var $1007$s2;
  var $1003$s2;
  var $999$s2;
  var $995$s2;
  var $991$s2;
  var $987$s2;
  var $983$s2;
  var $979$s2;
  var $975$s2;
  var $971$s2;
  var $949$s2;
  var $945$s2;
  var $931$s2;
  var $927$s2;
  var $923$s2;
  var $919$s2;
  var $915$s2;
  var $911$s2;
  var $907$s2;
  var $903$s2;
  var $899$s2;
  var $897$s2;
  var $685$s2;
  var $684$s2;
  var $667$s2;
  var $666$s2;
  var $665$s2;
  var $664$s2;
  var $647$s2;
  var $646$s2;
  var $645$s2;
  var $644$s2;
  var $631$s2;
  var $630$s2;
  var $629$s2;
  var $628$s2;
  var $627$s2;
  var $626$s2;
  var $625$s2;
  var $624$s2;
  var $607$s2;
  var $606$s2;
  var $605$s2;
  var $604$s2;
  var $603$s2;
  var $602$s2;
  var $601$s2;
  var $600$s2;
  var $583$s2;
  var $582$s2;
  var $581$s2;
  var $580$s2;
  var $283$s2;
  var $282$s2;
  var $281$s2;
  var $280$s2;
  var $263$s2;
  var $262$s2;
  var $261$s2;
  var $260$s2;
  var $243$s2;
  var $242$s2;
  var $241$s2;
  var $240$s2;
  var $223$s2;
  var $222$s2;
  var $221$s2;
  var $220$s2;
  var $207$s2;
  var $206$s2;
  var $205$s2;
  var $204$s2;
  var $187$s2;
  var $186$s2;
  var $185$s2;
  var $184$s2;
  var $183$s2;
  var $182$s2;
  var $181$s2;
  var $180$s2;
  var $163$s2;
  var $162$s2;
  var $161$s2;
  var $160$s2;
  var $147$s2;
  var $146$s2;
  var $145$s2;
  var $144$s2;
  var $subkey$s2 = $subkey >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 272 | 0;
  var $subL = __stackBase__;
  var $subR = __stackBase__ + 136;
  var $6 = HEAPU8[$key + 1 | 0];
  var $8 = $6 << 16 | HEAPU8[$key] << 24;
  var $17 = HEAPU8[$key + 2 | 0] << 8 | HEAPU8[$key + 3 | 0] | $8;
  var $24 = HEAPU8[$key + 5 | 0];
  var $26 = $24 << 16 | HEAPU8[$key + 4 | 0] << 24;
  var $35 = HEAPU8[$key + 6 | 0] << 8 | HEAPU8[$key + 7 | 0] | $26;
  var $42 = HEAPU8[$key + 9 | 0];
  var $44 = $42 << 16 | HEAPU8[$key + 8 | 0] << 24;
  var $53 = HEAPU8[$key + 10 | 0] << 8 | HEAPU8[$key + 11 | 0] | $44;
  var $60 = HEAPU8[$key + 13 | 0];
  var $62 = $60 << 16 | HEAPU8[$key + 12 | 0] << 24;
  var $71 = HEAPU8[$key + 14 | 0] << 8 | HEAPU8[$key + 15 | 0] | $62;
  var $80 = HEAPU8[$key + 17 | 0] << 16 | HEAPU8[$key + 16 | 0] << 24;
  var $87 = HEAPU8[$key + 19 | 0];
  var $89 = HEAPU8[$key + 18 | 0] << 8 | $87 | $80;
  var $97 = HEAPU8[$key + 21 | 0] << 16;
  var $98 = $97 | HEAPU8[$key + 20 | 0] << 24;
  var $105 = HEAPU8[$key + 23 | 0];
  var $107 = $105 | $97 | HEAPU8[$key + 22 | 0] << 8;
  var $115 = HEAPU8[$key + 25 | 0] << 16;
  var $116 = $115 | HEAPU8[$key + 24 | 0] << 24;
  var $123 = HEAPU8[$key + 27 | 0];
  var $125 = $123 | $115 | HEAPU8[$key + 26 | 0] << 8;
  var $133 = HEAPU8[$key + 29 | 0] << 16;
  var $134 = $133 | HEAPU8[$key + 28 | 0] << 24;
  var $141 = HEAPU8[$key + 31 | 0];
  var $143 = $141 | $133 | HEAPU8[$key + 30 | 0] << 8;
  var $144$s2 = ($subL | 0) >> 2;
  HEAP32[$144$s2] = $17;
  var $145$s2 = ($subR | 0) >> 2;
  HEAP32[$145$s2] = $35;
  var $146$s2 = ($subL + 4 | 0) >> 2;
  HEAP32[$146$s2] = $53;
  var $147$s2 = ($subR + 4 | 0) >> 2;
  HEAP32[$147$s2] = $71;
  var $150 = $44 >>> 19 | $35 << 13;
  var $153 = $62 >>> 19 | $53 << 13;
  var $156 = $71 << 13 | $8 >>> 19;
  var $159 = $26 >>> 19 | $17 << 13;
  var $160$s2 = ($subL + 48 | 0) >> 2;
  HEAP32[$160$s2] = $150;
  var $161$s2 = ($subR + 48 | 0) >> 2;
  HEAP32[$161$s2] = $153;
  var $162$s2 = ($subL + 52 | 0) >> 2;
  HEAP32[$162$s2] = $156;
  var $163$s2 = ($subR + 52 | 0) >> 2;
  HEAP32[$163$s2] = $159;
  var $180$s2 = ($subL + 64 | 0) >> 2;
  HEAP32[$180$s2] = $53 >>> 4 & 32767 | $150 << 15;
  var $181$s2 = ($subR + 64 | 0) >> 2;
  HEAP32[$181$s2] = $71 >>> 4 & 32767 | $153 << 15;
  var $182$s2 = ($subL + 68 | 0) >> 2;
  HEAP32[$182$s2] = $156 << 15 | $17 >>> 4 & 32767;
  var $183$s2 = ($subR + 68 | 0) >> 2;
  HEAP32[$183$s2] = $35 >>> 4 & 32767 | $159 << 15;
  var $184$s2 = ($subL + 88 | 0) >> 2;
  HEAP32[$184$s2] = $153;
  var $185$s2 = ($subR + 88 | 0) >> 2;
  HEAP32[$185$s2] = $156;
  var $186$s2 = ($subL + 92 | 0) >> 2;
  HEAP32[$186$s2] = $159;
  var $187$s2 = ($subR + 92 | 0) >> 2;
  HEAP32[$187$s2] = $150;
  var $204$s2 = ($subL + 120 | 0) >> 2;
  HEAP32[$204$s2] = $156 << 2 | $6 >>> 1 & 3;
  var $205$s2 = ($subR + 120 | 0) >> 2;
  HEAP32[$205$s2] = $159 << 2 | $24 >>> 1 & 3;
  var $206$s2 = ($subL + 124 | 0) >> 2;
  HEAP32[$206$s2] = $150 << 2 | $42 >>> 1 & 3;
  var $207$s2 = ($subR + 124 | 0) >> 2;
  HEAP32[$207$s2] = $153 << 2 | $60 >>> 1 & 3;
  var $210 = $98 >>> 17 | $89 << 15;
  var $213 = $116 >>> 17 | $107 << 15;
  var $216 = $134 >>> 17 | $125 << 15;
  var $219 = $143 << 15 | $80 >>> 17;
  var $220$s2 = ($subL + 16 | 0) >> 2;
  HEAP32[$220$s2] = $210;
  var $221$s2 = ($subR + 16 | 0) >> 2;
  HEAP32[$221$s2] = $213;
  var $222$s2 = ($subL + 20 | 0) >> 2;
  HEAP32[$222$s2] = $216;
  var $223$s2 = ($subR + 20 | 0) >> 2;
  HEAP32[$223$s2] = $219;
  var $227 = $107 >>> 2 & 32767 | $210 << 15;
  var $231 = $125 >>> 2 & 32767 | $213 << 15;
  var $235 = $143 >>> 2 & 32767 | $216 << 15;
  var $239 = $219 << 15 | $89 >>> 2 & 32767;
  var $240$s2 = ($subL + 32 | 0) >> 2;
  HEAP32[$240$s2] = $227;
  var $241$s2 = ($subR + 32 | 0) >> 2;
  HEAP32[$241$s2] = $231;
  var $242$s2 = ($subL + 36 | 0) >> 2;
  HEAP32[$242$s2] = $235;
  var $243$s2 = ($subR + 36 | 0) >> 2;
  HEAP32[$243$s2] = $239;
  var $260$s2 = ($subL + 72 | 0) >> 2;
  HEAP32[$260$s2] = $231 >>> 2 | $105 << 28 & -1073741824;
  var $261$s2 = ($subR + 72 | 0) >> 2;
  HEAP32[$261$s2] = $235 >>> 2 | $123 << 28 & -1073741824;
  var $262$s2 = ($subL + 76 | 0) >> 2;
  HEAP32[$262$s2] = $239 >>> 2 | $141 << 28 & -1073741824;
  var $263$s2 = ($subR + 76 | 0) >> 2;
  HEAP32[$263$s2] = $227 >>> 2 | $87 << 28 & -1073741824;
  var $267 = $235 & -4 | $141 >>> 2 & 3;
  var $271 = $239 & -4 | $87 >>> 2 & 3;
  var $275 = $227 & -4 | $105 >>> 2 & 3;
  var $279 = $231 & -4 | $123 >>> 2 & 3;
  var $280$s2 = ($subL + 104 | 0) >> 2;
  HEAP32[$280$s2] = $267;
  var $281$s2 = ($subR + 104 | 0) >> 2;
  HEAP32[$281$s2] = $271;
  var $282$s2 = ($subL + 108 | 0) >> 2;
  HEAP32[$282$s2] = $275;
  var $283$s2 = ($subR + 108 | 0) >> 2;
  HEAP32[$283$s2] = $279;
  var $286 = $271 << 2 | $87 & 3;
  var $289 = $275 << 2 | $105 & 3;
  var $292 = $279 << 2 | $123 & 3;
  var $295 = $267 << 2 | $141 & 3;
  var $301 = HEAP32[$144$s2] ^ -1600231809 ^ $286;
  var $303 = $289 ^ 1003262091 ^ HEAP32[$145$s2];
  var $334 = HEAP32[(($301 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($301 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($301 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($301 & 255) << 2) + 459636 >> 2];
  var $338 = HEAP32[($303 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($303 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($303 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($303 >>> 8 & 255) << 2) + 459636 >> 2] ^ $334;
  var $342 = ($334 >>> 8 | $334 << 24) ^ $338;
  var $345 = HEAP32[$146$s2] ^ -1233459112 ^ $292 ^ $338;
  var $348 = HEAP32[$147$s2] ^ 1286239154 ^ $295 ^ $342;
  var $379 = HEAP32[(($345 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($345 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($345 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($345 & 255) << 2) + 459636 >> 2];
  var $383 = HEAP32[($348 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($348 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($348 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($348 >>> 8 & 255) << 2) + 459636 >> 2] ^ $379;
  var $387 = ($379 >>> 8 | $379 << 24) ^ $383;
  var $388 = $383 ^ $286;
  var $389 = $387 ^ $289;
  var $390 = $388 ^ -957401297;
  var $391 = $389 ^ -380665154;
  var $422 = HEAP32[(($390 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($390 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($390 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($390 & 255) << 2) + 459636 >> 2];
  var $426 = HEAP32[($391 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($391 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($391 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($391 >>> 8 & 255) << 2) + 459636 >> 2] ^ $422;
  var $430 = ($422 >>> 8 | $422 << 24) ^ $426;
  var $432 = $338 ^ $292 ^ $426;
  var $434 = $342 ^ $295 ^ $430;
  var $435 = $432 ^ 1426019237;
  var $436 = $434 ^ -237801700;
  var $467 = HEAP32[(($435 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($435 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($435 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($435 & 255) << 2) + 459636 >> 2];
  var $471 = HEAP32[($436 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($436 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($436 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($436 >>> 8 & 255) << 2) + 459636 >> 2] ^ $467;
  var $475 = ($467 >>> 8 | $467 << 24) ^ $471;
  var $476 = $471 ^ $388;
  var $477 = $475 ^ $389;
  var $478 = $471 ^ $383;
  var $479 = $475 ^ $387;
  var $480 = $478 ^ 283453434;
  var $481 = $479 ^ -563598051;
  var $512 = HEAP32[(($480 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($480 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($480 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($480 & 255) << 2) + 459636 >> 2];
  var $516 = HEAP32[($481 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($481 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($481 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($481 >>> 8 & 255) << 2) + 459636 >> 2] ^ $512;
  var $521 = $426 ^ $338 ^ $516;
  var $524 = $430 ^ $342 ^ $516 ^ ($512 >>> 8 | $512 << 24);
  var $525 = $521 ^ -1336506174;
  var $526 = $524 ^ -1276722691;
  var $557 = HEAP32[(($525 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($525 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($525 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($525 & 255) << 2) + 459636 >> 2];
  var $561 = HEAP32[($526 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($526 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($526 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($526 >>> 8 & 255) << 2) + 459636 >> 2] ^ $557;
  var $565 = $561 ^ $478;
  var $567 = $561 ^ $479 ^ ($557 >>> 8 | $557 << 24);
  var $570 = $477 >>> 17 | $476 << 15;
  var $573 = $477 << 15 | $432 >>> 17;
  var $576 = $434 >>> 17 | $432 << 15;
  var $579 = $476 >>> 17 | $434 << 15;
  var $580$s2 = ($subL + 24 | 0) >> 2;
  HEAP32[$580$s2] = $570;
  var $581$s2 = ($subR + 24 | 0) >> 2;
  HEAP32[$581$s2] = $573;
  var $582$s2 = ($subL + 28 | 0) >> 2;
  HEAP32[$582$s2] = $576;
  var $583$s2 = ($subR + 28 | 0) >> 2;
  HEAP32[$583$s2] = $579;
  var $587 = $573 >>> 2 | $477 << 13 & -1073741824;
  var $591 = $576 >>> 2 | $432 << 13 & -1073741824;
  var $595 = $579 >>> 2 | $434 << 13 & -1073741824;
  var $599 = $570 >>> 2 | $476 << 13 & -1073741824;
  var $600$s2 = ($subL + 56 | 0) >> 2;
  HEAP32[$600$s2] = $587;
  var $601$s2 = ($subR + 56 | 0) >> 2;
  HEAP32[$601$s2] = $591;
  var $602$s2 = ($subL + 60 | 0) >> 2;
  HEAP32[$602$s2] = $595;
  var $603$s2 = ($subR + 60 | 0) >> 2;
  HEAP32[$603$s2] = $599;
  var $604$s2 = ($subL + 96 | 0) >> 2;
  HEAP32[$604$s2] = $591;
  var $605$s2 = ($subR + 96 | 0) >> 2;
  HEAP32[$605$s2] = $595;
  var $606$s2 = ($subL + 100 | 0) >> 2;
  HEAP32[$606$s2] = $599;
  var $607$s2 = ($subR + 100 | 0) >> 2;
  HEAP32[$607$s2] = $587;
  var $624$s2 = ($subL + 112 | 0) >> 2;
  HEAP32[$624$s2] = $595 >>> 15 | $576 << 15 & -131072;
  var $625$s2 = ($subR + 112 | 0) >> 2;
  HEAP32[$625$s2] = $599 >>> 15 | $579 << 15 & -131072;
  var $626$s2 = ($subL + 116 | 0) >> 2;
  HEAP32[$626$s2] = $587 >>> 15 | $570 << 15 & -131072;
  var $627$s2 = ($subR + 116 | 0) >> 2;
  HEAP32[$627$s2] = $573 << 15 & -131072 | $591 >>> 15;
  var $628$s2 = ($subL + 8 | 0) >> 2;
  HEAP32[$628$s2] = $565;
  var $629$s2 = ($subR + 8 | 0) >> 2;
  HEAP32[$629$s2] = $567;
  var $630$s2 = ($subL + 12 | 0) >> 2;
  HEAP32[$630$s2] = $521;
  var $631$s2 = ($subR + 12 | 0) >> 2;
  HEAP32[$631$s2] = $524;
  var $634 = $567 >>> 2 | $565 << 30;
  var $637 = $567 << 30 | $521 >>> 2;
  var $640 = $524 >>> 2 | $521 << 30;
  var $643 = $565 >>> 2 | $524 << 30;
  var $644$s2 = ($subL + 40 | 0) >> 2;
  HEAP32[$644$s2] = $634;
  var $645$s2 = ($subR + 40 | 0) >> 2;
  HEAP32[$645$s2] = $637;
  var $646$s2 = ($subL + 44 | 0) >> 2;
  HEAP32[$646$s2] = $640;
  var $647$s2 = ($subR + 44 | 0) >> 2;
  HEAP32[$647$s2] = $643;
  var $651 = $637 >>> 2 | $567 << 28 & -1073741824;
  var $655 = $640 >>> 2 | $521 << 28 & -1073741824;
  var $659 = $643 >>> 2 | $524 << 28 & -1073741824;
  var $663 = $634 >>> 2 | $565 << 28 & -1073741824;
  var $664$s2 = ($subL + 80 | 0) >> 2;
  HEAP32[$664$s2] = $651;
  var $665$s2 = ($subR + 80 | 0) >> 2;
  HEAP32[$665$s2] = $655;
  var $666$s2 = ($subL + 84 | 0) >> 2;
  HEAP32[$666$s2] = $659;
  var $667$s2 = ($subR + 84 | 0) >> 2;
  HEAP32[$667$s2] = $663;
  var $684$s2 = ($subL + 128 | 0) >> 2;
  HEAP32[$684$s2] = $659 >>> 13 | $524 << 15 & -524288;
  var $685$s2 = ($subR + 128 | 0) >> 2;
  HEAP32[$685$s2] = $663 >>> 13 | $565 << 15 & -524288;
  var $686 = $subL + 132 | 0;
  HEAP32[$686 >> 2] = $651 >>> 13 | $567 << 15 & -524288;
  var $687 = $subR + 132 | 0;
  HEAP32[$687 >> 2] = $655 >>> 13 | $521 << 15 & -524288;
  HEAP32[$630$s2] = HEAP32[$630$s2] ^ HEAP32[$146$s2];
  HEAP32[$631$s2] = HEAP32[$631$s2] ^ HEAP32[$147$s2];
  HEAP32[$222$s2] = HEAP32[$222$s2] ^ HEAP32[$146$s2];
  HEAP32[$223$s2] = HEAP32[$223$s2] ^ HEAP32[$147$s2];
  HEAP32[$582$s2] = HEAP32[$582$s2] ^ HEAP32[$146$s2];
  HEAP32[$583$s2] = HEAP32[$583$s2] ^ HEAP32[$147$s2];
  var $711 = HEAP32[$146$s2] ^ HEAP32[$147$s2] & (HEAP32[$243$s2] ^ -1);
  HEAP32[$146$s2] = $711;
  var $713 = $711 & HEAP32[$242$s2];
  HEAP32[$147$s2] = ($713 << 1 | $713 >>> 31) ^ HEAP32[$147$s2];
  HEAP32[$646$s2] = HEAP32[$646$s2] ^ HEAP32[$146$s2];
  HEAP32[$647$s2] = HEAP32[$647$s2] ^ HEAP32[$147$s2];
  HEAP32[$162$s2] = HEAP32[$162$s2] ^ HEAP32[$146$s2];
  HEAP32[$163$s2] = HEAP32[$163$s2] ^ HEAP32[$147$s2];
  HEAP32[$602$s2] = HEAP32[$602$s2] ^ HEAP32[$146$s2];
  HEAP32[$603$s2] = HEAP32[$603$s2] ^ HEAP32[$147$s2];
  var $742 = HEAP32[$146$s2] ^ HEAP32[$147$s2] & (HEAP32[$183$s2] ^ -1);
  HEAP32[$146$s2] = $742;
  var $744 = $742 & HEAP32[$182$s2];
  HEAP32[$147$s2] = ($744 << 1 | $744 >>> 31) ^ HEAP32[$147$s2];
  HEAP32[$262$s2] = HEAP32[$262$s2] ^ HEAP32[$146$s2];
  HEAP32[$263$s2] = HEAP32[$263$s2] ^ HEAP32[$147$s2];
  HEAP32[$666$s2] = HEAP32[$666$s2] ^ HEAP32[$146$s2];
  HEAP32[$667$s2] = HEAP32[$667$s2] ^ HEAP32[$147$s2];
  HEAP32[$186$s2] = HEAP32[$186$s2] ^ HEAP32[$146$s2];
  HEAP32[$187$s2] = HEAP32[$187$s2] ^ HEAP32[$147$s2];
  var $773 = HEAP32[$146$s2] ^ HEAP32[$147$s2] & (HEAP32[$607$s2] ^ -1);
  HEAP32[$146$s2] = $773;
  var $775 = $773 & HEAP32[$606$s2];
  HEAP32[$147$s2] = ($775 << 1 | $775 >>> 31) ^ HEAP32[$147$s2];
  HEAP32[$282$s2] = HEAP32[$282$s2] ^ HEAP32[$146$s2];
  HEAP32[$283$s2] = HEAP32[$283$s2] ^ HEAP32[$147$s2];
  HEAP32[$626$s2] = HEAP32[$626$s2] ^ HEAP32[$146$s2];
  HEAP32[$627$s2] = HEAP32[$627$s2] ^ HEAP32[$147$s2];
  HEAP32[$206$s2] = HEAP32[$206$s2] ^ HEAP32[$146$s2];
  HEAP32[$207$s2] = HEAP32[$207$s2] ^ HEAP32[$147$s2];
  HEAP32[$684$s2] = HEAP32[$684$s2] ^ HEAP32[$146$s2];
  HEAP32[$685$s2] = HEAP32[$685$s2] ^ HEAP32[$147$s2];
  var $805 = HEAP32[$686 >> 2];
  var $806 = HEAP32[$687 >> 2];
  HEAP32[$204$s2] = HEAP32[$204$s2] ^ $805;
  HEAP32[$205$s2] = HEAP32[$205$s2] ^ $806;
  HEAP32[$624$s2] = HEAP32[$624$s2] ^ $805;
  HEAP32[$625$s2] = HEAP32[$625$s2] ^ $806;
  HEAP32[$280$s2] = HEAP32[$280$s2] ^ $805;
  HEAP32[$281$s2] = HEAP32[$281$s2] ^ $806;
  var $822 = $806 & (HEAP32[$605$s2] ^ -1) ^ $805;
  var $824 = $822 & HEAP32[$604$s2];
  var $828 = ($824 << 1 | $824 >>> 31) ^ $806;
  HEAP32[$184$s2] = HEAP32[$184$s2] ^ $822;
  HEAP32[$185$s2] = $828 ^ HEAP32[$185$s2];
  HEAP32[$664$s2] = HEAP32[$664$s2] ^ $822;
  HEAP32[$665$s2] = $828 ^ HEAP32[$665$s2];
  HEAP32[$260$s2] = HEAP32[$260$s2] ^ $822;
  HEAP32[$261$s2] = HEAP32[$261$s2] ^ $828;
  var $844 = $828 & (HEAP32[$181$s2] ^ -1) ^ $822;
  var $846 = $844 & HEAP32[$180$s2];
  var $850 = ($846 << 1 | $846 >>> 31) ^ $828;
  HEAP32[$600$s2] = HEAP32[$600$s2] ^ $844;
  HEAP32[$601$s2] = $850 ^ HEAP32[$601$s2];
  HEAP32[$160$s2] = HEAP32[$160$s2] ^ $844;
  HEAP32[$161$s2] = $850 ^ HEAP32[$161$s2];
  HEAP32[$644$s2] = HEAP32[$644$s2] ^ $844;
  HEAP32[$645$s2] = HEAP32[$645$s2] ^ $850;
  var $866 = $850 & (HEAP32[$241$s2] ^ -1) ^ $844;
  var $868 = $866 & HEAP32[$240$s2];
  var $872 = ($868 << 1 | $868 >>> 31) ^ $850;
  HEAP32[$580$s2] = HEAP32[$580$s2] ^ $866;
  HEAP32[$581$s2] = $872 ^ HEAP32[$581$s2];
  HEAP32[$220$s2] = HEAP32[$220$s2] ^ $866;
  HEAP32[$221$s2] = $872 ^ HEAP32[$221$s2];
  HEAP32[$628$s2] = HEAP32[$628$s2] ^ $866;
  HEAP32[$629$s2] = HEAP32[$629$s2] ^ $872;
  HEAP32[$144$s2] = HEAP32[$144$s2] ^ $866;
  HEAP32[$145$s2] = HEAP32[$145$s2] ^ $872;
  HEAP32[$subkey$s2] = HEAP32[$628$s2] ^ HEAP32[$144$s2];
  HEAP32[$subkey$s2 + 1] = HEAP32[$629$s2] ^ HEAP32[$145$s2];
  var $897$s2 = ($subkey + 16 | 0) >> 2;
  HEAP32[$897$s2] = HEAP32[$630$s2];
  var $899$s2 = ($subkey + 20 | 0) >> 2;
  HEAP32[$899$s2] = HEAP32[$631$s2];
  var $903$s2 = ($subkey + 24 | 0) >> 2;
  HEAP32[$903$s2] = HEAP32[$220$s2] ^ HEAP32[$628$s2];
  var $907$s2 = ($subkey + 28 | 0) >> 2;
  HEAP32[$907$s2] = HEAP32[$221$s2] ^ HEAP32[$629$s2];
  var $911$s2 = ($subkey + 32 | 0) >> 2;
  HEAP32[$911$s2] = HEAP32[$222$s2] ^ HEAP32[$630$s2];
  var $915$s2 = ($subkey + 36 | 0) >> 2;
  HEAP32[$915$s2] = HEAP32[$223$s2] ^ HEAP32[$631$s2];
  var $919$s2 = ($subkey + 40 | 0) >> 2;
  HEAP32[$919$s2] = HEAP32[$580$s2] ^ HEAP32[$220$s2];
  var $923$s2 = ($subkey + 44 | 0) >> 2;
  HEAP32[$923$s2] = HEAP32[$581$s2] ^ HEAP32[$221$s2];
  var $927$s2 = ($subkey + 48 | 0) >> 2;
  HEAP32[$927$s2] = HEAP32[$582$s2] ^ HEAP32[$222$s2];
  var $931$s2 = ($subkey + 52 | 0) >> 2;
  HEAP32[$931$s2] = HEAP32[$583$s2] ^ HEAP32[$223$s2];
  var $933 = HEAP32[$645$s2];
  var $937 = $933 & (HEAP32[$241$s2] ^ -1) ^ HEAP32[$644$s2];
  var $939 = $937 & HEAP32[$240$s2];
  var $945$s2 = ($subkey + 56 | 0) >> 2;
  HEAP32[$945$s2] = HEAP32[$580$s2] ^ $937;
  var $949$s2 = ($subkey + 60 | 0) >> 2;
  HEAP32[$949$s2] = HEAP32[$581$s2] ^ $933 ^ ($939 << 1 | $939 >>> 31);
  HEAP32[$subkey$s2 + 16] = HEAP32[$240$s2];
  HEAP32[$subkey$s2 + 17] = HEAP32[$241$s2];
  HEAP32[$subkey$s2 + 18] = HEAP32[$242$s2];
  HEAP32[$subkey$s2 + 19] = HEAP32[$243$s2];
  var $959 = HEAP32[$583$s2];
  var $963 = $959 & (HEAP32[$243$s2] ^ -1) ^ HEAP32[$582$s2];
  var $965 = $963 & HEAP32[$242$s2];
  var $971$s2 = ($subkey + 80 | 0) >> 2;
  HEAP32[$971$s2] = $963 ^ HEAP32[$646$s2];
  var $975$s2 = ($subkey + 84 | 0) >> 2;
  HEAP32[$975$s2] = HEAP32[$647$s2] ^ $959 ^ ($965 << 1 | $965 >>> 31);
  var $979$s2 = ($subkey + 88 | 0) >> 2;
  HEAP32[$979$s2] = HEAP32[$160$s2] ^ HEAP32[$644$s2];
  var $983$s2 = ($subkey + 92 | 0) >> 2;
  HEAP32[$983$s2] = HEAP32[$161$s2] ^ HEAP32[$645$s2];
  var $987$s2 = ($subkey + 96 | 0) >> 2;
  HEAP32[$987$s2] = HEAP32[$162$s2] ^ HEAP32[$646$s2];
  var $991$s2 = ($subkey + 100 | 0) >> 2;
  HEAP32[$991$s2] = HEAP32[$163$s2] ^ HEAP32[$647$s2];
  var $995$s2 = ($subkey + 104 | 0) >> 2;
  HEAP32[$995$s2] = HEAP32[$600$s2] ^ HEAP32[$160$s2];
  var $999$s2 = ($subkey + 108 | 0) >> 2;
  HEAP32[$999$s2] = HEAP32[$601$s2] ^ HEAP32[$161$s2];
  var $1003$s2 = ($subkey + 112 | 0) >> 2;
  HEAP32[$1003$s2] = HEAP32[$602$s2] ^ HEAP32[$162$s2];
  var $1007$s2 = ($subkey + 116 | 0) >> 2;
  HEAP32[$1007$s2] = HEAP32[$603$s2] ^ HEAP32[$163$s2];
  var $1009 = HEAP32[$261$s2];
  var $1013 = $1009 & (HEAP32[$181$s2] ^ -1) ^ HEAP32[$260$s2];
  var $1015 = $1013 & HEAP32[$180$s2];
  var $1021$s2 = ($subkey + 120 | 0) >> 2;
  HEAP32[$1021$s2] = HEAP32[$600$s2] ^ $1013;
  var $1025$s2 = ($subkey + 124 | 0) >> 2;
  HEAP32[$1025$s2] = HEAP32[$601$s2] ^ $1009 ^ ($1015 << 1 | $1015 >>> 31);
  HEAP32[$subkey$s2 + 32] = HEAP32[$180$s2];
  HEAP32[$subkey$s2 + 33] = HEAP32[$181$s2];
  HEAP32[$subkey$s2 + 34] = HEAP32[$182$s2];
  HEAP32[$subkey$s2 + 35] = HEAP32[$183$s2];
  var $1035 = HEAP32[$603$s2];
  var $1039 = $1035 & (HEAP32[$183$s2] ^ -1) ^ HEAP32[$602$s2];
  var $1041 = $1039 & HEAP32[$182$s2];
  var $1047$s2 = ($subkey + 144 | 0) >> 2;
  HEAP32[$1047$s2] = $1039 ^ HEAP32[$262$s2];
  var $1051$s2 = ($subkey + 148 | 0) >> 2;
  HEAP32[$1051$s2] = HEAP32[$263$s2] ^ $1035 ^ ($1041 << 1 | $1041 >>> 31);
  var $1055$s2 = ($subkey + 152 | 0) >> 2;
  HEAP32[$1055$s2] = HEAP32[$664$s2] ^ HEAP32[$260$s2];
  var $1059$s2 = ($subkey + 156 | 0) >> 2;
  HEAP32[$1059$s2] = HEAP32[$665$s2] ^ HEAP32[$261$s2];
  var $1063$s2 = ($subkey + 160 | 0) >> 2;
  HEAP32[$1063$s2] = HEAP32[$666$s2] ^ HEAP32[$262$s2];
  var $1067$s2 = ($subkey + 164 | 0) >> 2;
  HEAP32[$1067$s2] = HEAP32[$667$s2] ^ HEAP32[$263$s2];
  var $1071$s2 = ($subkey + 168 | 0) >> 2;
  HEAP32[$1071$s2] = HEAP32[$184$s2] ^ HEAP32[$664$s2];
  var $1075$s2 = ($subkey + 172 | 0) >> 2;
  HEAP32[$1075$s2] = HEAP32[$185$s2] ^ HEAP32[$665$s2];
  var $1079$s2 = ($subkey + 176 | 0) >> 2;
  HEAP32[$1079$s2] = HEAP32[$186$s2] ^ HEAP32[$666$s2];
  var $1083$s2 = ($subkey + 180 | 0) >> 2;
  HEAP32[$1083$s2] = HEAP32[$187$s2] ^ HEAP32[$667$s2];
  var $1085 = HEAP32[$281$s2];
  var $1089 = $1085 & (HEAP32[$605$s2] ^ -1) ^ HEAP32[$280$s2];
  var $1091 = $1089 & HEAP32[$604$s2];
  var $1097$s2 = ($subkey + 184 | 0) >> 2;
  HEAP32[$1097$s2] = HEAP32[$184$s2] ^ $1089;
  var $1101$s2 = ($subkey + 188 | 0) >> 2;
  HEAP32[$1101$s2] = HEAP32[$185$s2] ^ $1085 ^ ($1091 << 1 | $1091 >>> 31);
  HEAP32[$subkey$s2 + 48] = HEAP32[$604$s2];
  HEAP32[$subkey$s2 + 49] = HEAP32[$605$s2];
  HEAP32[$subkey$s2 + 50] = HEAP32[$606$s2];
  HEAP32[$subkey$s2 + 51] = HEAP32[$607$s2];
  var $1111 = HEAP32[$187$s2];
  var $1115 = $1111 & (HEAP32[$607$s2] ^ -1) ^ HEAP32[$186$s2];
  var $1117 = $1115 & HEAP32[$606$s2];
  var $1123$s2 = ($subkey + 208 | 0) >> 2;
  HEAP32[$1123$s2] = $1115 ^ HEAP32[$282$s2];
  var $1127$s2 = ($subkey + 212 | 0) >> 2;
  HEAP32[$1127$s2] = HEAP32[$283$s2] ^ $1111 ^ ($1117 << 1 | $1117 >>> 31);
  var $1131$s2 = ($subkey + 216 | 0) >> 2;
  HEAP32[$1131$s2] = HEAP32[$624$s2] ^ HEAP32[$280$s2];
  var $1135$s2 = ($subkey + 220 | 0) >> 2;
  HEAP32[$1135$s2] = HEAP32[$625$s2] ^ HEAP32[$281$s2];
  var $1139$s2 = ($subkey + 224 | 0) >> 2;
  HEAP32[$1139$s2] = HEAP32[$626$s2] ^ HEAP32[$282$s2];
  var $1143$s2 = ($subkey + 228 | 0) >> 2;
  HEAP32[$1143$s2] = HEAP32[$627$s2] ^ HEAP32[$283$s2];
  var $1147$s2 = ($subkey + 232 | 0) >> 2;
  HEAP32[$1147$s2] = HEAP32[$204$s2] ^ HEAP32[$624$s2];
  var $1151$s2 = ($subkey + 236 | 0) >> 2;
  HEAP32[$1151$s2] = HEAP32[$205$s2] ^ HEAP32[$625$s2];
  var $1155$s2 = ($subkey + 240 | 0) >> 2;
  HEAP32[$1155$s2] = HEAP32[$206$s2] ^ HEAP32[$626$s2];
  var $1159$s2 = ($subkey + 244 | 0) >> 2;
  HEAP32[$1159$s2] = HEAP32[$207$s2] ^ HEAP32[$627$s2];
  var $1161$s2 = ($subkey + 248 | 0) >> 2;
  HEAP32[$1161$s2] = HEAP32[$204$s2];
  var $1163$s2 = ($subkey + 252 | 0) >> 2;
  HEAP32[$1163$s2] = HEAP32[$205$s2];
  HEAP32[$subkey$s2 + 64] = HEAP32[$206$s2] ^ HEAP32[$684$s2];
  HEAP32[$subkey$s2 + 65] = HEAP32[$207$s2] ^ HEAP32[$685$s2];
  var $1172 = HEAP32[$897$s2];
  var $1174 = HEAP32[$899$s2] ^ $1172;
  var $1177 = $1174 << 8 | $1174 >>> 24;
  HEAP32[$899$s2] = $1177 ^ $1172;
  HEAP32[$897$s2] = $1177;
  var $1179 = HEAP32[$903$s2];
  var $1181 = HEAP32[$907$s2] ^ $1179;
  var $1184 = $1181 << 8 | $1181 >>> 24;
  HEAP32[$907$s2] = $1184 ^ $1179;
  HEAP32[$903$s2] = $1184;
  var $1186 = HEAP32[$911$s2];
  var $1188 = HEAP32[$915$s2] ^ $1186;
  var $1191 = $1188 << 8 | $1188 >>> 24;
  HEAP32[$915$s2] = $1191 ^ $1186;
  HEAP32[$911$s2] = $1191;
  var $1193 = HEAP32[$919$s2];
  var $1195 = HEAP32[$923$s2] ^ $1193;
  var $1198 = $1195 << 8 | $1195 >>> 24;
  HEAP32[$923$s2] = $1198 ^ $1193;
  HEAP32[$919$s2] = $1198;
  var $1200 = HEAP32[$927$s2];
  var $1202 = HEAP32[$931$s2] ^ $1200;
  var $1205 = $1202 << 8 | $1202 >>> 24;
  HEAP32[$931$s2] = $1205 ^ $1200;
  HEAP32[$927$s2] = $1205;
  var $1207 = HEAP32[$945$s2];
  var $1209 = HEAP32[$949$s2] ^ $1207;
  var $1212 = $1209 << 8 | $1209 >>> 24;
  HEAP32[$949$s2] = $1212 ^ $1207;
  HEAP32[$945$s2] = $1212;
  var $1214 = HEAP32[$971$s2];
  var $1216 = HEAP32[$975$s2] ^ $1214;
  var $1219 = $1216 << 8 | $1216 >>> 24;
  HEAP32[$975$s2] = $1219 ^ $1214;
  HEAP32[$971$s2] = $1219;
  var $1221 = HEAP32[$979$s2];
  var $1223 = HEAP32[$983$s2] ^ $1221;
  var $1226 = $1223 << 8 | $1223 >>> 24;
  HEAP32[$983$s2] = $1226 ^ $1221;
  HEAP32[$979$s2] = $1226;
  var $1228 = HEAP32[$987$s2];
  var $1230 = HEAP32[$991$s2] ^ $1228;
  var $1233 = $1230 << 8 | $1230 >>> 24;
  HEAP32[$991$s2] = $1233 ^ $1228;
  HEAP32[$987$s2] = $1233;
  var $1235 = HEAP32[$995$s2];
  var $1237 = HEAP32[$999$s2] ^ $1235;
  var $1240 = $1237 << 8 | $1237 >>> 24;
  HEAP32[$999$s2] = $1240 ^ $1235;
  HEAP32[$995$s2] = $1240;
  var $1242 = HEAP32[$1003$s2];
  var $1244 = HEAP32[$1007$s2] ^ $1242;
  var $1247 = $1244 << 8 | $1244 >>> 24;
  HEAP32[$1007$s2] = $1247 ^ $1242;
  HEAP32[$1003$s2] = $1247;
  var $1249 = HEAP32[$1021$s2];
  var $1251 = HEAP32[$1025$s2] ^ $1249;
  var $1254 = $1251 << 8 | $1251 >>> 24;
  HEAP32[$1025$s2] = $1254 ^ $1249;
  HEAP32[$1021$s2] = $1254;
  var $1256 = HEAP32[$1047$s2];
  var $1258 = HEAP32[$1051$s2] ^ $1256;
  var $1261 = $1258 << 8 | $1258 >>> 24;
  HEAP32[$1051$s2] = $1261 ^ $1256;
  HEAP32[$1047$s2] = $1261;
  var $1263 = HEAP32[$1055$s2];
  var $1265 = HEAP32[$1059$s2] ^ $1263;
  var $1268 = $1265 << 8 | $1265 >>> 24;
  HEAP32[$1059$s2] = $1268 ^ $1263;
  HEAP32[$1055$s2] = $1268;
  var $1270 = HEAP32[$1063$s2];
  var $1272 = HEAP32[$1067$s2] ^ $1270;
  var $1275 = $1272 << 8 | $1272 >>> 24;
  HEAP32[$1067$s2] = $1275 ^ $1270;
  HEAP32[$1063$s2] = $1275;
  var $1277 = HEAP32[$1071$s2];
  var $1279 = HEAP32[$1075$s2] ^ $1277;
  var $1282 = $1279 << 8 | $1279 >>> 24;
  HEAP32[$1075$s2] = $1282 ^ $1277;
  HEAP32[$1071$s2] = $1282;
  var $1284 = HEAP32[$1079$s2];
  var $1286 = HEAP32[$1083$s2] ^ $1284;
  var $1289 = $1286 << 8 | $1286 >>> 24;
  HEAP32[$1083$s2] = $1289 ^ $1284;
  HEAP32[$1079$s2] = $1289;
  var $1291 = HEAP32[$1097$s2];
  var $1293 = HEAP32[$1101$s2] ^ $1291;
  var $1296 = $1293 << 8 | $1293 >>> 24;
  HEAP32[$1101$s2] = $1296 ^ $1291;
  HEAP32[$1097$s2] = $1296;
  var $1298 = HEAP32[$1123$s2];
  var $1300 = HEAP32[$1127$s2] ^ $1298;
  var $1303 = $1300 << 8 | $1300 >>> 24;
  HEAP32[$1127$s2] = $1303 ^ $1298;
  HEAP32[$1123$s2] = $1303;
  var $1305 = HEAP32[$1131$s2];
  var $1307 = HEAP32[$1135$s2] ^ $1305;
  var $1310 = $1307 << 8 | $1307 >>> 24;
  HEAP32[$1135$s2] = $1310 ^ $1305;
  HEAP32[$1131$s2] = $1310;
  var $1312 = HEAP32[$1139$s2];
  var $1314 = HEAP32[$1143$s2] ^ $1312;
  var $1317 = $1314 << 8 | $1314 >>> 24;
  HEAP32[$1143$s2] = $1317 ^ $1312;
  HEAP32[$1139$s2] = $1317;
  var $1319 = HEAP32[$1147$s2];
  var $1321 = HEAP32[$1151$s2] ^ $1319;
  var $1324 = $1321 << 8 | $1321 >>> 24;
  HEAP32[$1151$s2] = $1324 ^ $1319;
  HEAP32[$1147$s2] = $1324;
  var $1326 = HEAP32[$1155$s2];
  var $1328 = HEAP32[$1159$s2] ^ $1326;
  var $1331 = $1328 << 8 | $1328 >>> 24;
  HEAP32[$1159$s2] = $1331 ^ $1326;
  HEAP32[$1155$s2] = $1331;
  var $1333 = HEAP32[$1161$s2];
  var $1335 = HEAP32[$1163$s2] ^ $1333;
  var $1338 = $1335 << 8 | $1335 >>> 24;
  HEAP32[$1163$s2] = $1338 ^ $1333;
  HEAP32[$1161$s2] = $1338;
  STACKTOP = __stackBase__;
  return;
}
__gcry_camellia_setup256["X"] = 1;
function __gcry_camellia_setup192($key, $subkey) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $kk = __stackBase__;
  var $1 = $kk | 0;
  _memcpy($1, $key, 24);
  var $3 = $key + 16 | 0;
  var $5 = $key + 20 | 0;
  var $7 = (HEAPU8[$5] | HEAPU8[$5 + 1] << 8 | HEAPU8[$5 + 2] << 16 | HEAPU8[$5 + 3] << 24) ^ -1;
  var $9 = $kk + 24 | 0;
  tempBigInt = (HEAPU8[$3] | HEAPU8[$3 + 1] << 8 | HEAPU8[$3 + 2] << 16 | HEAPU8[$3 + 3] << 24) ^ -1;
  HEAP8[$9] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$9 + 1] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$9 + 2] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$9 + 3] = tempBigInt & 255;
  var $11 = $kk + 28 | 0;
  tempBigInt = $7;
  HEAP8[$11] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$11 + 1] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$11 + 2] = tempBigInt & 255;
  tempBigInt = tempBigInt >> 8;
  HEAP8[$11 + 3] = tempBigInt & 255;
  __gcry_camellia_setup256($1, $subkey);
  STACKTOP = __stackBase__;
  return;
}
function __gcry_camellia_encrypt128($subkey, $io) {
  var $57$s2;
  var $54$s2;
  var $6$s2;
  var $io$s2 = $io >> 2;
  var $subkey$s2 = $subkey >> 2;
  HEAP32[$io$s2] = HEAP32[$io$s2] ^ HEAP32[$subkey$s2];
  var $6$s2 = ($io + 4 | 0) >> 2;
  var $8 = HEAP32[$6$s2] ^ HEAP32[$subkey$s2 + 1];
  HEAP32[$6$s2] = $8;
  var $23 = HEAP32[$io$s2];
  var $43 = HEAP32[(($23 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($23 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($23 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($23 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 4];
  var $50 = HEAP32[($8 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($8 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($8 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($8 >>> 8 & 255) << 2) + 459636 >> 2] ^ $43 ^ HEAP32[$subkey$s2 + 5];
  var $54$s2 = ($io + 8 | 0) >> 2;
  HEAP32[$54$s2] = $50 ^ HEAP32[$54$s2];
  var $57$s2 = ($io + 12 | 0) >> 2;
  var $60 = $50 ^ HEAP32[$57$s2] ^ ($43 >>> 8 | $43 << 24);
  HEAP32[$57$s2] = $60;
  var $75 = HEAP32[$54$s2];
  var $95 = HEAP32[(($75 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($75 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($75 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($75 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 6];
  var $102 = HEAP32[($60 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($60 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($60 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($60 >>> 8 & 255) << 2) + 459636 >> 2] ^ $95 ^ HEAP32[$subkey$s2 + 7];
  HEAP32[$io$s2] = $102 ^ HEAP32[$io$s2];
  var $110 = $102 ^ HEAP32[$6$s2] ^ ($95 >>> 8 | $95 << 24);
  HEAP32[$6$s2] = $110;
  var $125 = HEAP32[$io$s2];
  var $145 = HEAP32[(($125 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($125 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($125 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($125 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 8];
  var $152 = HEAP32[($110 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($110 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($110 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($110 >>> 8 & 255) << 2) + 459636 >> 2] ^ $145 ^ HEAP32[$subkey$s2 + 9];
  HEAP32[$54$s2] = $152 ^ HEAP32[$54$s2];
  var $160 = $152 ^ HEAP32[$57$s2] ^ ($145 >>> 8 | $145 << 24);
  HEAP32[$57$s2] = $160;
  var $175 = HEAP32[$54$s2];
  var $195 = HEAP32[(($175 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($175 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($175 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($175 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 10];
  var $202 = HEAP32[($160 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($160 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($160 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($160 >>> 8 & 255) << 2) + 459636 >> 2] ^ $195 ^ HEAP32[$subkey$s2 + 11];
  HEAP32[$io$s2] = $202 ^ HEAP32[$io$s2];
  var $210 = $202 ^ HEAP32[$6$s2] ^ ($195 >>> 8 | $195 << 24);
  HEAP32[$6$s2] = $210;
  var $225 = HEAP32[$io$s2];
  var $245 = HEAP32[(($225 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($225 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($225 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($225 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 12];
  var $252 = HEAP32[($210 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($210 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($210 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($210 >>> 8 & 255) << 2) + 459636 >> 2] ^ $245 ^ HEAP32[$subkey$s2 + 13];
  HEAP32[$54$s2] = $252 ^ HEAP32[$54$s2];
  var $260 = $252 ^ HEAP32[$57$s2] ^ ($245 >>> 8 | $245 << 24);
  HEAP32[$57$s2] = $260;
  var $275 = HEAP32[$54$s2];
  var $295 = HEAP32[(($275 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($275 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($275 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($275 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 14];
  var $302 = HEAP32[($260 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($260 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($260 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($260 >>> 8 & 255) << 2) + 459636 >> 2] ^ $295 ^ HEAP32[$subkey$s2 + 15];
  HEAP32[$io$s2] = $302 ^ HEAP32[$io$s2];
  var $310 = $302 ^ HEAP32[$6$s2] ^ ($295 >>> 8 | $295 << 24);
  HEAP32[$6$s2] = $310;
  var $314 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 16];
  var $318 = ($314 << 1 | $314 >>> 31) ^ $310;
  HEAP32[$6$s2] = $318;
  HEAP32[$io$s2] = ($318 | HEAP32[$subkey$s2 + 17]) ^ HEAP32[$io$s2];
  var $329 = HEAP32[$54$s2] ^ (HEAP32[$57$s2] | HEAP32[$subkey$s2 + 19]);
  HEAP32[$54$s2] = $329;
  var $332 = HEAP32[$subkey$s2 + 18] & $329;
  HEAP32[$57$s2] = ($332 << 1 | $332 >>> 31) ^ HEAP32[$57$s2];
  var $338 = HEAP32[$6$s2];
  var $353 = HEAP32[$io$s2];
  var $373 = HEAP32[(($353 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($353 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($353 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($353 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 20];
  var $380 = HEAP32[($338 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($338 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($338 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($338 >>> 8 & 255) << 2) + 459636 >> 2] ^ $373 ^ HEAP32[$subkey$s2 + 21];
  HEAP32[$54$s2] = $380 ^ HEAP32[$54$s2];
  var $388 = $380 ^ HEAP32[$57$s2] ^ ($373 >>> 8 | $373 << 24);
  HEAP32[$57$s2] = $388;
  var $403 = HEAP32[$54$s2];
  var $423 = HEAP32[(($403 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($403 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($403 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($403 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 22];
  var $430 = HEAP32[($388 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($388 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($388 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($388 >>> 8 & 255) << 2) + 459636 >> 2] ^ $423 ^ HEAP32[$subkey$s2 + 23];
  HEAP32[$io$s2] = $430 ^ HEAP32[$io$s2];
  var $438 = $430 ^ HEAP32[$6$s2] ^ ($423 >>> 8 | $423 << 24);
  HEAP32[$6$s2] = $438;
  var $453 = HEAP32[$io$s2];
  var $473 = HEAP32[(($453 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($453 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($453 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($453 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 24];
  var $480 = HEAP32[($438 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($438 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($438 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($438 >>> 8 & 255) << 2) + 459636 >> 2] ^ $473 ^ HEAP32[$subkey$s2 + 25];
  HEAP32[$54$s2] = $480 ^ HEAP32[$54$s2];
  var $488 = $480 ^ HEAP32[$57$s2] ^ ($473 >>> 8 | $473 << 24);
  HEAP32[$57$s2] = $488;
  var $503 = HEAP32[$54$s2];
  var $523 = HEAP32[(($503 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($503 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($503 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($503 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 26];
  var $530 = HEAP32[($488 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($488 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($488 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($488 >>> 8 & 255) << 2) + 459636 >> 2] ^ $523 ^ HEAP32[$subkey$s2 + 27];
  HEAP32[$io$s2] = $530 ^ HEAP32[$io$s2];
  var $538 = $530 ^ HEAP32[$6$s2] ^ ($523 >>> 8 | $523 << 24);
  HEAP32[$6$s2] = $538;
  var $553 = HEAP32[$io$s2];
  var $573 = HEAP32[(($553 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($553 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($553 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($553 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 28];
  var $580 = HEAP32[($538 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($538 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($538 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($538 >>> 8 & 255) << 2) + 459636 >> 2] ^ $573 ^ HEAP32[$subkey$s2 + 29];
  HEAP32[$54$s2] = $580 ^ HEAP32[$54$s2];
  var $588 = $580 ^ HEAP32[$57$s2] ^ ($573 >>> 8 | $573 << 24);
  HEAP32[$57$s2] = $588;
  var $603 = HEAP32[$54$s2];
  var $623 = HEAP32[(($603 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($603 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($603 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($603 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 30];
  var $630 = HEAP32[($588 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($588 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($588 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($588 >>> 8 & 255) << 2) + 459636 >> 2] ^ $623 ^ HEAP32[$subkey$s2 + 31];
  HEAP32[$io$s2] = $630 ^ HEAP32[$io$s2];
  var $638 = $630 ^ HEAP32[$6$s2] ^ ($623 >>> 8 | $623 << 24);
  HEAP32[$6$s2] = $638;
  var $642 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 32];
  var $646 = ($642 << 1 | $642 >>> 31) ^ $638;
  HEAP32[$6$s2] = $646;
  HEAP32[$io$s2] = ($646 | HEAP32[$subkey$s2 + 33]) ^ HEAP32[$io$s2];
  var $657 = HEAP32[$54$s2] ^ (HEAP32[$57$s2] | HEAP32[$subkey$s2 + 35]);
  HEAP32[$54$s2] = $657;
  var $660 = HEAP32[$subkey$s2 + 34] & $657;
  HEAP32[$57$s2] = ($660 << 1 | $660 >>> 31) ^ HEAP32[$57$s2];
  var $666 = HEAP32[$6$s2];
  var $681 = HEAP32[$io$s2];
  var $701 = HEAP32[(($681 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($681 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($681 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($681 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 36];
  var $708 = HEAP32[($666 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($666 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($666 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($666 >>> 8 & 255) << 2) + 459636 >> 2] ^ $701 ^ HEAP32[$subkey$s2 + 37];
  HEAP32[$54$s2] = $708 ^ HEAP32[$54$s2];
  var $716 = $708 ^ HEAP32[$57$s2] ^ ($701 >>> 8 | $701 << 24);
  HEAP32[$57$s2] = $716;
  var $731 = HEAP32[$54$s2];
  var $751 = HEAP32[(($731 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($731 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($731 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($731 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 38];
  var $758 = HEAP32[($716 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($716 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($716 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($716 >>> 8 & 255) << 2) + 459636 >> 2] ^ $751 ^ HEAP32[$subkey$s2 + 39];
  HEAP32[$io$s2] = $758 ^ HEAP32[$io$s2];
  var $766 = $758 ^ HEAP32[$6$s2] ^ ($751 >>> 8 | $751 << 24);
  HEAP32[$6$s2] = $766;
  var $781 = HEAP32[$io$s2];
  var $801 = HEAP32[(($781 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($781 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($781 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($781 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 40];
  var $808 = HEAP32[($766 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($766 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($766 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($766 >>> 8 & 255) << 2) + 459636 >> 2] ^ $801 ^ HEAP32[$subkey$s2 + 41];
  HEAP32[$54$s2] = $808 ^ HEAP32[$54$s2];
  var $816 = $808 ^ HEAP32[$57$s2] ^ ($801 >>> 8 | $801 << 24);
  HEAP32[$57$s2] = $816;
  var $831 = HEAP32[$54$s2];
  var $851 = HEAP32[(($831 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($831 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($831 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($831 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 42];
  var $858 = HEAP32[($816 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($816 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($816 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($816 >>> 8 & 255) << 2) + 459636 >> 2] ^ $851 ^ HEAP32[$subkey$s2 + 43];
  HEAP32[$io$s2] = $858 ^ HEAP32[$io$s2];
  var $866 = $858 ^ HEAP32[$6$s2] ^ ($851 >>> 8 | $851 << 24);
  HEAP32[$6$s2] = $866;
  var $881 = HEAP32[$io$s2];
  var $901 = HEAP32[(($881 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($881 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($881 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($881 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 44];
  var $908 = HEAP32[($866 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($866 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($866 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($866 >>> 8 & 255) << 2) + 459636 >> 2] ^ $901 ^ HEAP32[$subkey$s2 + 45];
  HEAP32[$54$s2] = $908 ^ HEAP32[$54$s2];
  var $916 = $908 ^ HEAP32[$57$s2] ^ ($901 >>> 8 | $901 << 24);
  HEAP32[$57$s2] = $916;
  var $931 = HEAP32[$54$s2];
  var $951 = HEAP32[(($931 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($931 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($931 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($931 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 46];
  var $958 = HEAP32[($916 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($916 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($916 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($916 >>> 8 & 255) << 2) + 459636 >> 2] ^ $951 ^ HEAP32[$subkey$s2 + 47];
  HEAP32[$io$s2] = $958 ^ HEAP32[$io$s2];
  HEAP32[$6$s2] = $958 ^ HEAP32[$6$s2] ^ ($951 >>> 8 | $951 << 24);
  HEAP32[$54$s2] = HEAP32[$54$s2] ^ HEAP32[$subkey$s2 + 48];
  HEAP32[$57$s2] = HEAP32[$57$s2] ^ HEAP32[$subkey$s2 + 49];
  var $975 = HEAP32[$io$s2];
  var $976 = HEAP32[$6$s2];
  HEAP32[$io$s2] = HEAP32[$54$s2];
  HEAP32[$6$s2] = HEAP32[$57$s2];
  HEAP32[$54$s2] = $975;
  HEAP32[$57$s2] = $976;
  return;
}
__gcry_camellia_encrypt128["X"] = 1;
function __gcry_camellia_decrypt128($subkey, $io) {
  var $58$s2;
  var $55$s2;
  var $7$s2;
  var $io$s2 = $io >> 2;
  var $subkey$s2 = $subkey >> 2;
  HEAP32[$io$s2] = HEAP32[$io$s2] ^ HEAP32[$subkey$s2 + 48];
  var $7$s2 = ($io + 4 | 0) >> 2;
  var $9 = HEAP32[$7$s2] ^ HEAP32[$subkey$s2 + 49];
  HEAP32[$7$s2] = $9;
  var $24 = HEAP32[$io$s2];
  var $44 = HEAP32[(($24 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($24 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($24 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($24 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 46];
  var $51 = HEAP32[($9 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($9 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($9 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($9 >>> 8 & 255) << 2) + 459636 >> 2] ^ $44 ^ HEAP32[$subkey$s2 + 47];
  var $55$s2 = ($io + 8 | 0) >> 2;
  HEAP32[$55$s2] = $51 ^ HEAP32[$55$s2];
  var $58$s2 = ($io + 12 | 0) >> 2;
  var $61 = $51 ^ HEAP32[$58$s2] ^ ($44 >>> 8 | $44 << 24);
  HEAP32[$58$s2] = $61;
  var $76 = HEAP32[$55$s2];
  var $96 = HEAP32[(($76 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($76 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($76 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($76 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 44];
  var $103 = HEAP32[($61 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($61 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($61 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($61 >>> 8 & 255) << 2) + 459636 >> 2] ^ $96 ^ HEAP32[$subkey$s2 + 45];
  HEAP32[$io$s2] = $103 ^ HEAP32[$io$s2];
  var $111 = $103 ^ HEAP32[$7$s2] ^ ($96 >>> 8 | $96 << 24);
  HEAP32[$7$s2] = $111;
  var $126 = HEAP32[$io$s2];
  var $146 = HEAP32[(($126 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($126 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($126 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($126 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 42];
  var $153 = HEAP32[($111 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($111 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($111 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($111 >>> 8 & 255) << 2) + 459636 >> 2] ^ $146 ^ HEAP32[$subkey$s2 + 43];
  HEAP32[$55$s2] = $153 ^ HEAP32[$55$s2];
  var $161 = $153 ^ HEAP32[$58$s2] ^ ($146 >>> 8 | $146 << 24);
  HEAP32[$58$s2] = $161;
  var $176 = HEAP32[$55$s2];
  var $196 = HEAP32[(($176 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($176 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($176 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($176 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 40];
  var $203 = HEAP32[($161 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($161 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($161 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($161 >>> 8 & 255) << 2) + 459636 >> 2] ^ $196 ^ HEAP32[$subkey$s2 + 41];
  HEAP32[$io$s2] = $203 ^ HEAP32[$io$s2];
  var $211 = $203 ^ HEAP32[$7$s2] ^ ($196 >>> 8 | $196 << 24);
  HEAP32[$7$s2] = $211;
  var $226 = HEAP32[$io$s2];
  var $246 = HEAP32[(($226 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($226 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($226 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($226 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 38];
  var $253 = HEAP32[($211 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($211 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($211 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($211 >>> 8 & 255) << 2) + 459636 >> 2] ^ $246 ^ HEAP32[$subkey$s2 + 39];
  HEAP32[$55$s2] = $253 ^ HEAP32[$55$s2];
  var $261 = $253 ^ HEAP32[$58$s2] ^ ($246 >>> 8 | $246 << 24);
  HEAP32[$58$s2] = $261;
  var $276 = HEAP32[$55$s2];
  var $296 = HEAP32[(($276 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($276 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($276 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($276 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 36];
  var $303 = HEAP32[($261 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($261 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($261 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($261 >>> 8 & 255) << 2) + 459636 >> 2] ^ $296 ^ HEAP32[$subkey$s2 + 37];
  HEAP32[$io$s2] = $303 ^ HEAP32[$io$s2];
  var $311 = $303 ^ HEAP32[$7$s2] ^ ($296 >>> 8 | $296 << 24);
  HEAP32[$7$s2] = $311;
  var $315 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 34];
  var $319 = ($315 << 1 | $315 >>> 31) ^ $311;
  HEAP32[$7$s2] = $319;
  HEAP32[$io$s2] = ($319 | HEAP32[$subkey$s2 + 35]) ^ HEAP32[$io$s2];
  var $330 = HEAP32[$55$s2] ^ (HEAP32[$58$s2] | HEAP32[$subkey$s2 + 33]);
  HEAP32[$55$s2] = $330;
  var $333 = HEAP32[$subkey$s2 + 32] & $330;
  HEAP32[$58$s2] = ($333 << 1 | $333 >>> 31) ^ HEAP32[$58$s2];
  var $339 = HEAP32[$7$s2];
  var $354 = HEAP32[$io$s2];
  var $374 = HEAP32[(($354 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($354 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($354 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($354 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 30];
  var $381 = HEAP32[($339 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($339 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($339 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($339 >>> 8 & 255) << 2) + 459636 >> 2] ^ $374 ^ HEAP32[$subkey$s2 + 31];
  HEAP32[$55$s2] = $381 ^ HEAP32[$55$s2];
  var $389 = $381 ^ HEAP32[$58$s2] ^ ($374 >>> 8 | $374 << 24);
  HEAP32[$58$s2] = $389;
  var $404 = HEAP32[$55$s2];
  var $424 = HEAP32[(($404 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($404 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($404 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($404 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 28];
  var $431 = HEAP32[($389 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($389 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($389 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($389 >>> 8 & 255) << 2) + 459636 >> 2] ^ $424 ^ HEAP32[$subkey$s2 + 29];
  HEAP32[$io$s2] = $431 ^ HEAP32[$io$s2];
  var $439 = $431 ^ HEAP32[$7$s2] ^ ($424 >>> 8 | $424 << 24);
  HEAP32[$7$s2] = $439;
  var $454 = HEAP32[$io$s2];
  var $474 = HEAP32[(($454 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($454 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($454 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($454 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 26];
  var $481 = HEAP32[($439 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($439 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($439 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($439 >>> 8 & 255) << 2) + 459636 >> 2] ^ $474 ^ HEAP32[$subkey$s2 + 27];
  HEAP32[$55$s2] = $481 ^ HEAP32[$55$s2];
  var $489 = $481 ^ HEAP32[$58$s2] ^ ($474 >>> 8 | $474 << 24);
  HEAP32[$58$s2] = $489;
  var $504 = HEAP32[$55$s2];
  var $524 = HEAP32[(($504 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($504 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($504 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($504 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 24];
  var $531 = HEAP32[($489 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($489 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($489 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($489 >>> 8 & 255) << 2) + 459636 >> 2] ^ $524 ^ HEAP32[$subkey$s2 + 25];
  HEAP32[$io$s2] = $531 ^ HEAP32[$io$s2];
  var $539 = $531 ^ HEAP32[$7$s2] ^ ($524 >>> 8 | $524 << 24);
  HEAP32[$7$s2] = $539;
  var $554 = HEAP32[$io$s2];
  var $574 = HEAP32[(($554 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($554 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($554 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($554 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 22];
  var $581 = HEAP32[($539 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($539 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($539 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($539 >>> 8 & 255) << 2) + 459636 >> 2] ^ $574 ^ HEAP32[$subkey$s2 + 23];
  HEAP32[$55$s2] = $581 ^ HEAP32[$55$s2];
  var $589 = $581 ^ HEAP32[$58$s2] ^ ($574 >>> 8 | $574 << 24);
  HEAP32[$58$s2] = $589;
  var $604 = HEAP32[$55$s2];
  var $624 = HEAP32[(($604 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($604 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($604 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($604 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 20];
  var $631 = HEAP32[($589 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($589 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($589 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($589 >>> 8 & 255) << 2) + 459636 >> 2] ^ $624 ^ HEAP32[$subkey$s2 + 21];
  HEAP32[$io$s2] = $631 ^ HEAP32[$io$s2];
  var $639 = $631 ^ HEAP32[$7$s2] ^ ($624 >>> 8 | $624 << 24);
  HEAP32[$7$s2] = $639;
  var $643 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 18];
  var $647 = ($643 << 1 | $643 >>> 31) ^ $639;
  HEAP32[$7$s2] = $647;
  HEAP32[$io$s2] = ($647 | HEAP32[$subkey$s2 + 19]) ^ HEAP32[$io$s2];
  var $658 = HEAP32[$55$s2] ^ (HEAP32[$58$s2] | HEAP32[$subkey$s2 + 17]);
  HEAP32[$55$s2] = $658;
  var $661 = HEAP32[$subkey$s2 + 16] & $658;
  HEAP32[$58$s2] = ($661 << 1 | $661 >>> 31) ^ HEAP32[$58$s2];
  var $667 = HEAP32[$7$s2];
  var $682 = HEAP32[$io$s2];
  var $702 = HEAP32[(($682 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($682 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($682 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($682 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 14];
  var $709 = HEAP32[($667 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($667 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($667 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($667 >>> 8 & 255) << 2) + 459636 >> 2] ^ $702 ^ HEAP32[$subkey$s2 + 15];
  HEAP32[$55$s2] = $709 ^ HEAP32[$55$s2];
  var $717 = $709 ^ HEAP32[$58$s2] ^ ($702 >>> 8 | $702 << 24);
  HEAP32[$58$s2] = $717;
  var $732 = HEAP32[$55$s2];
  var $752 = HEAP32[(($732 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($732 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($732 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($732 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 12];
  var $759 = HEAP32[($717 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($717 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($717 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($717 >>> 8 & 255) << 2) + 459636 >> 2] ^ $752 ^ HEAP32[$subkey$s2 + 13];
  HEAP32[$io$s2] = $759 ^ HEAP32[$io$s2];
  var $767 = $759 ^ HEAP32[$7$s2] ^ ($752 >>> 8 | $752 << 24);
  HEAP32[$7$s2] = $767;
  var $782 = HEAP32[$io$s2];
  var $802 = HEAP32[(($782 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($782 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($782 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($782 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 10];
  var $809 = HEAP32[($767 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($767 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($767 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($767 >>> 8 & 255) << 2) + 459636 >> 2] ^ $802 ^ HEAP32[$subkey$s2 + 11];
  HEAP32[$55$s2] = $809 ^ HEAP32[$55$s2];
  var $817 = $809 ^ HEAP32[$58$s2] ^ ($802 >>> 8 | $802 << 24);
  HEAP32[$58$s2] = $817;
  var $832 = HEAP32[$55$s2];
  var $852 = HEAP32[(($832 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($832 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($832 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($832 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 8];
  var $859 = HEAP32[($817 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($817 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($817 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($817 >>> 8 & 255) << 2) + 459636 >> 2] ^ $852 ^ HEAP32[$subkey$s2 + 9];
  HEAP32[$io$s2] = $859 ^ HEAP32[$io$s2];
  var $867 = $859 ^ HEAP32[$7$s2] ^ ($852 >>> 8 | $852 << 24);
  HEAP32[$7$s2] = $867;
  var $882 = HEAP32[$io$s2];
  var $902 = HEAP32[(($882 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($882 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($882 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($882 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 6];
  var $909 = HEAP32[($867 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($867 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($867 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($867 >>> 8 & 255) << 2) + 459636 >> 2] ^ $902 ^ HEAP32[$subkey$s2 + 7];
  HEAP32[$55$s2] = $909 ^ HEAP32[$55$s2];
  var $917 = $909 ^ HEAP32[$58$s2] ^ ($902 >>> 8 | $902 << 24);
  HEAP32[$58$s2] = $917;
  var $932 = HEAP32[$55$s2];
  var $952 = HEAP32[(($932 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($932 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($932 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($932 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 4];
  var $959 = HEAP32[($917 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($917 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($917 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($917 >>> 8 & 255) << 2) + 459636 >> 2] ^ $952 ^ HEAP32[$subkey$s2 + 5];
  HEAP32[$io$s2] = $959 ^ HEAP32[$io$s2];
  HEAP32[$7$s2] = $959 ^ HEAP32[$7$s2] ^ ($952 >>> 8 | $952 << 24);
  HEAP32[$55$s2] = HEAP32[$55$s2] ^ HEAP32[$subkey$s2];
  HEAP32[$58$s2] = HEAP32[$58$s2] ^ HEAP32[$subkey$s2 + 1];
  var $975 = HEAP32[$io$s2];
  var $976 = HEAP32[$7$s2];
  HEAP32[$io$s2] = HEAP32[$55$s2];
  HEAP32[$7$s2] = HEAP32[$58$s2];
  HEAP32[$55$s2] = $975;
  HEAP32[$58$s2] = $976;
  return;
}
__gcry_camellia_decrypt128["X"] = 1;
function __gcry_camellia_encrypt256($subkey, $io) {
  var $57$s2;
  var $54$s2;
  var $6$s2;
  var $io$s2 = $io >> 2;
  var $subkey$s2 = $subkey >> 2;
  HEAP32[$io$s2] = HEAP32[$io$s2] ^ HEAP32[$subkey$s2];
  var $6$s2 = ($io + 4 | 0) >> 2;
  var $8 = HEAP32[$6$s2] ^ HEAP32[$subkey$s2 + 1];
  HEAP32[$6$s2] = $8;
  var $23 = HEAP32[$io$s2];
  var $43 = HEAP32[(($23 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($23 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($23 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($23 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 4];
  var $50 = HEAP32[($8 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($8 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($8 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($8 >>> 8 & 255) << 2) + 459636 >> 2] ^ $43 ^ HEAP32[$subkey$s2 + 5];
  var $54$s2 = ($io + 8 | 0) >> 2;
  HEAP32[$54$s2] = $50 ^ HEAP32[$54$s2];
  var $57$s2 = ($io + 12 | 0) >> 2;
  var $60 = $50 ^ HEAP32[$57$s2] ^ ($43 >>> 8 | $43 << 24);
  HEAP32[$57$s2] = $60;
  var $75 = HEAP32[$54$s2];
  var $95 = HEAP32[(($75 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($75 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($75 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($75 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 6];
  var $102 = HEAP32[($60 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($60 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($60 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($60 >>> 8 & 255) << 2) + 459636 >> 2] ^ $95 ^ HEAP32[$subkey$s2 + 7];
  HEAP32[$io$s2] = $102 ^ HEAP32[$io$s2];
  var $110 = $102 ^ HEAP32[$6$s2] ^ ($95 >>> 8 | $95 << 24);
  HEAP32[$6$s2] = $110;
  var $125 = HEAP32[$io$s2];
  var $145 = HEAP32[(($125 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($125 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($125 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($125 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 8];
  var $152 = HEAP32[($110 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($110 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($110 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($110 >>> 8 & 255) << 2) + 459636 >> 2] ^ $145 ^ HEAP32[$subkey$s2 + 9];
  HEAP32[$54$s2] = $152 ^ HEAP32[$54$s2];
  var $160 = $152 ^ HEAP32[$57$s2] ^ ($145 >>> 8 | $145 << 24);
  HEAP32[$57$s2] = $160;
  var $175 = HEAP32[$54$s2];
  var $195 = HEAP32[(($175 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($175 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($175 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($175 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 10];
  var $202 = HEAP32[($160 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($160 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($160 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($160 >>> 8 & 255) << 2) + 459636 >> 2] ^ $195 ^ HEAP32[$subkey$s2 + 11];
  HEAP32[$io$s2] = $202 ^ HEAP32[$io$s2];
  var $210 = $202 ^ HEAP32[$6$s2] ^ ($195 >>> 8 | $195 << 24);
  HEAP32[$6$s2] = $210;
  var $225 = HEAP32[$io$s2];
  var $245 = HEAP32[(($225 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($225 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($225 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($225 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 12];
  var $252 = HEAP32[($210 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($210 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($210 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($210 >>> 8 & 255) << 2) + 459636 >> 2] ^ $245 ^ HEAP32[$subkey$s2 + 13];
  HEAP32[$54$s2] = $252 ^ HEAP32[$54$s2];
  var $260 = $252 ^ HEAP32[$57$s2] ^ ($245 >>> 8 | $245 << 24);
  HEAP32[$57$s2] = $260;
  var $275 = HEAP32[$54$s2];
  var $295 = HEAP32[(($275 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($275 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($275 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($275 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 14];
  var $302 = HEAP32[($260 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($260 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($260 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($260 >>> 8 & 255) << 2) + 459636 >> 2] ^ $295 ^ HEAP32[$subkey$s2 + 15];
  HEAP32[$io$s2] = $302 ^ HEAP32[$io$s2];
  var $310 = $302 ^ HEAP32[$6$s2] ^ ($295 >>> 8 | $295 << 24);
  HEAP32[$6$s2] = $310;
  var $314 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 16];
  var $318 = ($314 << 1 | $314 >>> 31) ^ $310;
  HEAP32[$6$s2] = $318;
  HEAP32[$io$s2] = ($318 | HEAP32[$subkey$s2 + 17]) ^ HEAP32[$io$s2];
  var $329 = HEAP32[$54$s2] ^ (HEAP32[$57$s2] | HEAP32[$subkey$s2 + 19]);
  HEAP32[$54$s2] = $329;
  var $332 = HEAP32[$subkey$s2 + 18] & $329;
  HEAP32[$57$s2] = ($332 << 1 | $332 >>> 31) ^ HEAP32[$57$s2];
  var $338 = HEAP32[$6$s2];
  var $353 = HEAP32[$io$s2];
  var $373 = HEAP32[(($353 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($353 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($353 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($353 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 20];
  var $380 = HEAP32[($338 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($338 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($338 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($338 >>> 8 & 255) << 2) + 459636 >> 2] ^ $373 ^ HEAP32[$subkey$s2 + 21];
  HEAP32[$54$s2] = $380 ^ HEAP32[$54$s2];
  var $388 = $380 ^ HEAP32[$57$s2] ^ ($373 >>> 8 | $373 << 24);
  HEAP32[$57$s2] = $388;
  var $403 = HEAP32[$54$s2];
  var $423 = HEAP32[(($403 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($403 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($403 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($403 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 22];
  var $430 = HEAP32[($388 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($388 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($388 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($388 >>> 8 & 255) << 2) + 459636 >> 2] ^ $423 ^ HEAP32[$subkey$s2 + 23];
  HEAP32[$io$s2] = $430 ^ HEAP32[$io$s2];
  var $438 = $430 ^ HEAP32[$6$s2] ^ ($423 >>> 8 | $423 << 24);
  HEAP32[$6$s2] = $438;
  var $453 = HEAP32[$io$s2];
  var $473 = HEAP32[(($453 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($453 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($453 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($453 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 24];
  var $480 = HEAP32[($438 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($438 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($438 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($438 >>> 8 & 255) << 2) + 459636 >> 2] ^ $473 ^ HEAP32[$subkey$s2 + 25];
  HEAP32[$54$s2] = $480 ^ HEAP32[$54$s2];
  var $488 = $480 ^ HEAP32[$57$s2] ^ ($473 >>> 8 | $473 << 24);
  HEAP32[$57$s2] = $488;
  var $503 = HEAP32[$54$s2];
  var $523 = HEAP32[(($503 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($503 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($503 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($503 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 26];
  var $530 = HEAP32[($488 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($488 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($488 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($488 >>> 8 & 255) << 2) + 459636 >> 2] ^ $523 ^ HEAP32[$subkey$s2 + 27];
  HEAP32[$io$s2] = $530 ^ HEAP32[$io$s2];
  var $538 = $530 ^ HEAP32[$6$s2] ^ ($523 >>> 8 | $523 << 24);
  HEAP32[$6$s2] = $538;
  var $553 = HEAP32[$io$s2];
  var $573 = HEAP32[(($553 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($553 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($553 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($553 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 28];
  var $580 = HEAP32[($538 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($538 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($538 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($538 >>> 8 & 255) << 2) + 459636 >> 2] ^ $573 ^ HEAP32[$subkey$s2 + 29];
  HEAP32[$54$s2] = $580 ^ HEAP32[$54$s2];
  var $588 = $580 ^ HEAP32[$57$s2] ^ ($573 >>> 8 | $573 << 24);
  HEAP32[$57$s2] = $588;
  var $603 = HEAP32[$54$s2];
  var $623 = HEAP32[(($603 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($603 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($603 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($603 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 30];
  var $630 = HEAP32[($588 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($588 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($588 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($588 >>> 8 & 255) << 2) + 459636 >> 2] ^ $623 ^ HEAP32[$subkey$s2 + 31];
  HEAP32[$io$s2] = $630 ^ HEAP32[$io$s2];
  var $638 = $630 ^ HEAP32[$6$s2] ^ ($623 >>> 8 | $623 << 24);
  HEAP32[$6$s2] = $638;
  var $642 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 32];
  var $646 = ($642 << 1 | $642 >>> 31) ^ $638;
  HEAP32[$6$s2] = $646;
  HEAP32[$io$s2] = ($646 | HEAP32[$subkey$s2 + 33]) ^ HEAP32[$io$s2];
  var $657 = HEAP32[$54$s2] ^ (HEAP32[$57$s2] | HEAP32[$subkey$s2 + 35]);
  HEAP32[$54$s2] = $657;
  var $660 = HEAP32[$subkey$s2 + 34] & $657;
  HEAP32[$57$s2] = ($660 << 1 | $660 >>> 31) ^ HEAP32[$57$s2];
  var $666 = HEAP32[$6$s2];
  var $681 = HEAP32[$io$s2];
  var $701 = HEAP32[(($681 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($681 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($681 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($681 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 36];
  var $708 = HEAP32[($666 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($666 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($666 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($666 >>> 8 & 255) << 2) + 459636 >> 2] ^ $701 ^ HEAP32[$subkey$s2 + 37];
  HEAP32[$54$s2] = $708 ^ HEAP32[$54$s2];
  var $716 = $708 ^ HEAP32[$57$s2] ^ ($701 >>> 8 | $701 << 24);
  HEAP32[$57$s2] = $716;
  var $731 = HEAP32[$54$s2];
  var $751 = HEAP32[(($731 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($731 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($731 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($731 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 38];
  var $758 = HEAP32[($716 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($716 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($716 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($716 >>> 8 & 255) << 2) + 459636 >> 2] ^ $751 ^ HEAP32[$subkey$s2 + 39];
  HEAP32[$io$s2] = $758 ^ HEAP32[$io$s2];
  var $766 = $758 ^ HEAP32[$6$s2] ^ ($751 >>> 8 | $751 << 24);
  HEAP32[$6$s2] = $766;
  var $781 = HEAP32[$io$s2];
  var $801 = HEAP32[(($781 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($781 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($781 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($781 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 40];
  var $808 = HEAP32[($766 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($766 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($766 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($766 >>> 8 & 255) << 2) + 459636 >> 2] ^ $801 ^ HEAP32[$subkey$s2 + 41];
  HEAP32[$54$s2] = $808 ^ HEAP32[$54$s2];
  var $816 = $808 ^ HEAP32[$57$s2] ^ ($801 >>> 8 | $801 << 24);
  HEAP32[$57$s2] = $816;
  var $831 = HEAP32[$54$s2];
  var $851 = HEAP32[(($831 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($831 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($831 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($831 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 42];
  var $858 = HEAP32[($816 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($816 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($816 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($816 >>> 8 & 255) << 2) + 459636 >> 2] ^ $851 ^ HEAP32[$subkey$s2 + 43];
  HEAP32[$io$s2] = $858 ^ HEAP32[$io$s2];
  var $866 = $858 ^ HEAP32[$6$s2] ^ ($851 >>> 8 | $851 << 24);
  HEAP32[$6$s2] = $866;
  var $881 = HEAP32[$io$s2];
  var $901 = HEAP32[(($881 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($881 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($881 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($881 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 44];
  var $908 = HEAP32[($866 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($866 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($866 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($866 >>> 8 & 255) << 2) + 459636 >> 2] ^ $901 ^ HEAP32[$subkey$s2 + 45];
  HEAP32[$54$s2] = $908 ^ HEAP32[$54$s2];
  var $916 = $908 ^ HEAP32[$57$s2] ^ ($901 >>> 8 | $901 << 24);
  HEAP32[$57$s2] = $916;
  var $931 = HEAP32[$54$s2];
  var $951 = HEAP32[(($931 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($931 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($931 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($931 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 46];
  var $958 = HEAP32[($916 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($916 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($916 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($916 >>> 8 & 255) << 2) + 459636 >> 2] ^ $951 ^ HEAP32[$subkey$s2 + 47];
  HEAP32[$io$s2] = $958 ^ HEAP32[$io$s2];
  var $966 = $958 ^ HEAP32[$6$s2] ^ ($951 >>> 8 | $951 << 24);
  HEAP32[$6$s2] = $966;
  var $970 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 48];
  var $974 = ($970 << 1 | $970 >>> 31) ^ $966;
  HEAP32[$6$s2] = $974;
  HEAP32[$io$s2] = ($974 | HEAP32[$subkey$s2 + 49]) ^ HEAP32[$io$s2];
  var $985 = HEAP32[$54$s2] ^ (HEAP32[$57$s2] | HEAP32[$subkey$s2 + 51]);
  HEAP32[$54$s2] = $985;
  var $988 = HEAP32[$subkey$s2 + 50] & $985;
  HEAP32[$57$s2] = ($988 << 1 | $988 >>> 31) ^ HEAP32[$57$s2];
  var $994 = HEAP32[$6$s2];
  var $1009 = HEAP32[$io$s2];
  var $1029 = HEAP32[(($1009 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1009 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1009 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1009 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 52];
  var $1036 = HEAP32[($994 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($994 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($994 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($994 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1029 ^ HEAP32[$subkey$s2 + 53];
  HEAP32[$54$s2] = $1036 ^ HEAP32[$54$s2];
  var $1044 = $1036 ^ HEAP32[$57$s2] ^ ($1029 >>> 8 | $1029 << 24);
  HEAP32[$57$s2] = $1044;
  var $1059 = HEAP32[$54$s2];
  var $1079 = HEAP32[(($1059 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1059 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1059 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1059 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 54];
  var $1086 = HEAP32[($1044 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1044 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1044 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1044 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1079 ^ HEAP32[$subkey$s2 + 55];
  HEAP32[$io$s2] = $1086 ^ HEAP32[$io$s2];
  var $1094 = $1086 ^ HEAP32[$6$s2] ^ ($1079 >>> 8 | $1079 << 24);
  HEAP32[$6$s2] = $1094;
  var $1109 = HEAP32[$io$s2];
  var $1129 = HEAP32[(($1109 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1109 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1109 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1109 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 56];
  var $1136 = HEAP32[($1094 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1094 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1094 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1094 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1129 ^ HEAP32[$subkey$s2 + 57];
  HEAP32[$54$s2] = $1136 ^ HEAP32[$54$s2];
  var $1144 = $1136 ^ HEAP32[$57$s2] ^ ($1129 >>> 8 | $1129 << 24);
  HEAP32[$57$s2] = $1144;
  var $1159 = HEAP32[$54$s2];
  var $1179 = HEAP32[(($1159 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1159 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1159 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1159 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 58];
  var $1186 = HEAP32[($1144 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1144 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1144 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1144 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1179 ^ HEAP32[$subkey$s2 + 59];
  HEAP32[$io$s2] = $1186 ^ HEAP32[$io$s2];
  var $1194 = $1186 ^ HEAP32[$6$s2] ^ ($1179 >>> 8 | $1179 << 24);
  HEAP32[$6$s2] = $1194;
  var $1209 = HEAP32[$io$s2];
  var $1229 = HEAP32[(($1209 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1209 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1209 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1209 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 60];
  var $1236 = HEAP32[($1194 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1194 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1194 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1194 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1229 ^ HEAP32[$subkey$s2 + 61];
  HEAP32[$54$s2] = $1236 ^ HEAP32[$54$s2];
  var $1244 = $1236 ^ HEAP32[$57$s2] ^ ($1229 >>> 8 | $1229 << 24);
  HEAP32[$57$s2] = $1244;
  var $1259 = HEAP32[$54$s2];
  var $1279 = HEAP32[(($1259 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1259 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1259 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1259 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 62];
  var $1286 = HEAP32[($1244 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1244 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1244 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1244 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1279 ^ HEAP32[$subkey$s2 + 63];
  HEAP32[$io$s2] = $1286 ^ HEAP32[$io$s2];
  HEAP32[$6$s2] = $1286 ^ HEAP32[$6$s2] ^ ($1279 >>> 8 | $1279 << 24);
  HEAP32[$54$s2] = HEAP32[$54$s2] ^ HEAP32[$subkey$s2 + 64];
  HEAP32[$57$s2] = HEAP32[$57$s2] ^ HEAP32[$subkey$s2 + 65];
  var $1303 = HEAP32[$io$s2];
  var $1304 = HEAP32[$6$s2];
  HEAP32[$io$s2] = HEAP32[$54$s2];
  HEAP32[$6$s2] = HEAP32[$57$s2];
  HEAP32[$54$s2] = $1303;
  HEAP32[$57$s2] = $1304;
  return;
}
__gcry_camellia_encrypt256["X"] = 1;
function __gcry_camellia_decrypt256($subkey, $io) {
  var $58$s2;
  var $55$s2;
  var $7$s2;
  var $io$s2 = $io >> 2;
  var $subkey$s2 = $subkey >> 2;
  HEAP32[$io$s2] = HEAP32[$io$s2] ^ HEAP32[$subkey$s2 + 64];
  var $7$s2 = ($io + 4 | 0) >> 2;
  var $9 = HEAP32[$7$s2] ^ HEAP32[$subkey$s2 + 65];
  HEAP32[$7$s2] = $9;
  var $24 = HEAP32[$io$s2];
  var $44 = HEAP32[(($24 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($24 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($24 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($24 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 62];
  var $51 = HEAP32[($9 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($9 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($9 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($9 >>> 8 & 255) << 2) + 459636 >> 2] ^ $44 ^ HEAP32[$subkey$s2 + 63];
  var $55$s2 = ($io + 8 | 0) >> 2;
  HEAP32[$55$s2] = $51 ^ HEAP32[$55$s2];
  var $58$s2 = ($io + 12 | 0) >> 2;
  var $61 = $51 ^ HEAP32[$58$s2] ^ ($44 >>> 8 | $44 << 24);
  HEAP32[$58$s2] = $61;
  var $76 = HEAP32[$55$s2];
  var $96 = HEAP32[(($76 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($76 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($76 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($76 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 60];
  var $103 = HEAP32[($61 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($61 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($61 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($61 >>> 8 & 255) << 2) + 459636 >> 2] ^ $96 ^ HEAP32[$subkey$s2 + 61];
  HEAP32[$io$s2] = $103 ^ HEAP32[$io$s2];
  var $111 = $103 ^ HEAP32[$7$s2] ^ ($96 >>> 8 | $96 << 24);
  HEAP32[$7$s2] = $111;
  var $126 = HEAP32[$io$s2];
  var $146 = HEAP32[(($126 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($126 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($126 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($126 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 58];
  var $153 = HEAP32[($111 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($111 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($111 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($111 >>> 8 & 255) << 2) + 459636 >> 2] ^ $146 ^ HEAP32[$subkey$s2 + 59];
  HEAP32[$55$s2] = $153 ^ HEAP32[$55$s2];
  var $161 = $153 ^ HEAP32[$58$s2] ^ ($146 >>> 8 | $146 << 24);
  HEAP32[$58$s2] = $161;
  var $176 = HEAP32[$55$s2];
  var $196 = HEAP32[(($176 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($176 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($176 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($176 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 56];
  var $203 = HEAP32[($161 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($161 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($161 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($161 >>> 8 & 255) << 2) + 459636 >> 2] ^ $196 ^ HEAP32[$subkey$s2 + 57];
  HEAP32[$io$s2] = $203 ^ HEAP32[$io$s2];
  var $211 = $203 ^ HEAP32[$7$s2] ^ ($196 >>> 8 | $196 << 24);
  HEAP32[$7$s2] = $211;
  var $226 = HEAP32[$io$s2];
  var $246 = HEAP32[(($226 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($226 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($226 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($226 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 54];
  var $253 = HEAP32[($211 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($211 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($211 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($211 >>> 8 & 255) << 2) + 459636 >> 2] ^ $246 ^ HEAP32[$subkey$s2 + 55];
  HEAP32[$55$s2] = $253 ^ HEAP32[$55$s2];
  var $261 = $253 ^ HEAP32[$58$s2] ^ ($246 >>> 8 | $246 << 24);
  HEAP32[$58$s2] = $261;
  var $276 = HEAP32[$55$s2];
  var $296 = HEAP32[(($276 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($276 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($276 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($276 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 52];
  var $303 = HEAP32[($261 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($261 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($261 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($261 >>> 8 & 255) << 2) + 459636 >> 2] ^ $296 ^ HEAP32[$subkey$s2 + 53];
  HEAP32[$io$s2] = $303 ^ HEAP32[$io$s2];
  var $311 = $303 ^ HEAP32[$7$s2] ^ ($296 >>> 8 | $296 << 24);
  HEAP32[$7$s2] = $311;
  var $315 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 50];
  var $319 = ($315 << 1 | $315 >>> 31) ^ $311;
  HEAP32[$7$s2] = $319;
  HEAP32[$io$s2] = ($319 | HEAP32[$subkey$s2 + 51]) ^ HEAP32[$io$s2];
  var $330 = HEAP32[$55$s2] ^ (HEAP32[$58$s2] | HEAP32[$subkey$s2 + 49]);
  HEAP32[$55$s2] = $330;
  var $333 = HEAP32[$subkey$s2 + 48] & $330;
  HEAP32[$58$s2] = ($333 << 1 | $333 >>> 31) ^ HEAP32[$58$s2];
  var $339 = HEAP32[$7$s2];
  var $354 = HEAP32[$io$s2];
  var $374 = HEAP32[(($354 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($354 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($354 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($354 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 46];
  var $381 = HEAP32[($339 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($339 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($339 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($339 >>> 8 & 255) << 2) + 459636 >> 2] ^ $374 ^ HEAP32[$subkey$s2 + 47];
  HEAP32[$55$s2] = $381 ^ HEAP32[$55$s2];
  var $389 = $381 ^ HEAP32[$58$s2] ^ ($374 >>> 8 | $374 << 24);
  HEAP32[$58$s2] = $389;
  var $404 = HEAP32[$55$s2];
  var $424 = HEAP32[(($404 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($404 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($404 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($404 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 44];
  var $431 = HEAP32[($389 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($389 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($389 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($389 >>> 8 & 255) << 2) + 459636 >> 2] ^ $424 ^ HEAP32[$subkey$s2 + 45];
  HEAP32[$io$s2] = $431 ^ HEAP32[$io$s2];
  var $439 = $431 ^ HEAP32[$7$s2] ^ ($424 >>> 8 | $424 << 24);
  HEAP32[$7$s2] = $439;
  var $454 = HEAP32[$io$s2];
  var $474 = HEAP32[(($454 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($454 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($454 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($454 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 42];
  var $481 = HEAP32[($439 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($439 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($439 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($439 >>> 8 & 255) << 2) + 459636 >> 2] ^ $474 ^ HEAP32[$subkey$s2 + 43];
  HEAP32[$55$s2] = $481 ^ HEAP32[$55$s2];
  var $489 = $481 ^ HEAP32[$58$s2] ^ ($474 >>> 8 | $474 << 24);
  HEAP32[$58$s2] = $489;
  var $504 = HEAP32[$55$s2];
  var $524 = HEAP32[(($504 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($504 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($504 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($504 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 40];
  var $531 = HEAP32[($489 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($489 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($489 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($489 >>> 8 & 255) << 2) + 459636 >> 2] ^ $524 ^ HEAP32[$subkey$s2 + 41];
  HEAP32[$io$s2] = $531 ^ HEAP32[$io$s2];
  var $539 = $531 ^ HEAP32[$7$s2] ^ ($524 >>> 8 | $524 << 24);
  HEAP32[$7$s2] = $539;
  var $554 = HEAP32[$io$s2];
  var $574 = HEAP32[(($554 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($554 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($554 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($554 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 38];
  var $581 = HEAP32[($539 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($539 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($539 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($539 >>> 8 & 255) << 2) + 459636 >> 2] ^ $574 ^ HEAP32[$subkey$s2 + 39];
  HEAP32[$55$s2] = $581 ^ HEAP32[$55$s2];
  var $589 = $581 ^ HEAP32[$58$s2] ^ ($574 >>> 8 | $574 << 24);
  HEAP32[$58$s2] = $589;
  var $604 = HEAP32[$55$s2];
  var $624 = HEAP32[(($604 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($604 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($604 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($604 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 36];
  var $631 = HEAP32[($589 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($589 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($589 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($589 >>> 8 & 255) << 2) + 459636 >> 2] ^ $624 ^ HEAP32[$subkey$s2 + 37];
  HEAP32[$io$s2] = $631 ^ HEAP32[$io$s2];
  var $639 = $631 ^ HEAP32[$7$s2] ^ ($624 >>> 8 | $624 << 24);
  HEAP32[$7$s2] = $639;
  var $643 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 34];
  var $647 = ($643 << 1 | $643 >>> 31) ^ $639;
  HEAP32[$7$s2] = $647;
  HEAP32[$io$s2] = ($647 | HEAP32[$subkey$s2 + 35]) ^ HEAP32[$io$s2];
  var $658 = HEAP32[$55$s2] ^ (HEAP32[$58$s2] | HEAP32[$subkey$s2 + 33]);
  HEAP32[$55$s2] = $658;
  var $661 = HEAP32[$subkey$s2 + 32] & $658;
  HEAP32[$58$s2] = ($661 << 1 | $661 >>> 31) ^ HEAP32[$58$s2];
  var $667 = HEAP32[$7$s2];
  var $682 = HEAP32[$io$s2];
  var $702 = HEAP32[(($682 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($682 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($682 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($682 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 30];
  var $709 = HEAP32[($667 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($667 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($667 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($667 >>> 8 & 255) << 2) + 459636 >> 2] ^ $702 ^ HEAP32[$subkey$s2 + 31];
  HEAP32[$55$s2] = $709 ^ HEAP32[$55$s2];
  var $717 = $709 ^ HEAP32[$58$s2] ^ ($702 >>> 8 | $702 << 24);
  HEAP32[$58$s2] = $717;
  var $732 = HEAP32[$55$s2];
  var $752 = HEAP32[(($732 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($732 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($732 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($732 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 28];
  var $759 = HEAP32[($717 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($717 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($717 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($717 >>> 8 & 255) << 2) + 459636 >> 2] ^ $752 ^ HEAP32[$subkey$s2 + 29];
  HEAP32[$io$s2] = $759 ^ HEAP32[$io$s2];
  var $767 = $759 ^ HEAP32[$7$s2] ^ ($752 >>> 8 | $752 << 24);
  HEAP32[$7$s2] = $767;
  var $782 = HEAP32[$io$s2];
  var $802 = HEAP32[(($782 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($782 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($782 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($782 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 26];
  var $809 = HEAP32[($767 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($767 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($767 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($767 >>> 8 & 255) << 2) + 459636 >> 2] ^ $802 ^ HEAP32[$subkey$s2 + 27];
  HEAP32[$55$s2] = $809 ^ HEAP32[$55$s2];
  var $817 = $809 ^ HEAP32[$58$s2] ^ ($802 >>> 8 | $802 << 24);
  HEAP32[$58$s2] = $817;
  var $832 = HEAP32[$55$s2];
  var $852 = HEAP32[(($832 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($832 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($832 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($832 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 24];
  var $859 = HEAP32[($817 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($817 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($817 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($817 >>> 8 & 255) << 2) + 459636 >> 2] ^ $852 ^ HEAP32[$subkey$s2 + 25];
  HEAP32[$io$s2] = $859 ^ HEAP32[$io$s2];
  var $867 = $859 ^ HEAP32[$7$s2] ^ ($852 >>> 8 | $852 << 24);
  HEAP32[$7$s2] = $867;
  var $882 = HEAP32[$io$s2];
  var $902 = HEAP32[(($882 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($882 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($882 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($882 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 22];
  var $909 = HEAP32[($867 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($867 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($867 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($867 >>> 8 & 255) << 2) + 459636 >> 2] ^ $902 ^ HEAP32[$subkey$s2 + 23];
  HEAP32[$55$s2] = $909 ^ HEAP32[$55$s2];
  var $917 = $909 ^ HEAP32[$58$s2] ^ ($902 >>> 8 | $902 << 24);
  HEAP32[$58$s2] = $917;
  var $932 = HEAP32[$55$s2];
  var $952 = HEAP32[(($932 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($932 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($932 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($932 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 20];
  var $959 = HEAP32[($917 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($917 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($917 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($917 >>> 8 & 255) << 2) + 459636 >> 2] ^ $952 ^ HEAP32[$subkey$s2 + 21];
  HEAP32[$io$s2] = $959 ^ HEAP32[$io$s2];
  var $967 = $959 ^ HEAP32[$7$s2] ^ ($952 >>> 8 | $952 << 24);
  HEAP32[$7$s2] = $967;
  var $971 = HEAP32[$io$s2] & HEAP32[$subkey$s2 + 18];
  var $975 = ($971 << 1 | $971 >>> 31) ^ $967;
  HEAP32[$7$s2] = $975;
  HEAP32[$io$s2] = ($975 | HEAP32[$subkey$s2 + 19]) ^ HEAP32[$io$s2];
  var $986 = HEAP32[$55$s2] ^ (HEAP32[$58$s2] | HEAP32[$subkey$s2 + 17]);
  HEAP32[$55$s2] = $986;
  var $989 = HEAP32[$subkey$s2 + 16] & $986;
  HEAP32[$58$s2] = ($989 << 1 | $989 >>> 31) ^ HEAP32[$58$s2];
  var $995 = HEAP32[$7$s2];
  var $1010 = HEAP32[$io$s2];
  var $1030 = HEAP32[(($1010 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1010 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1010 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1010 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 14];
  var $1037 = HEAP32[($995 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($995 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($995 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($995 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1030 ^ HEAP32[$subkey$s2 + 15];
  HEAP32[$55$s2] = $1037 ^ HEAP32[$55$s2];
  var $1045 = $1037 ^ HEAP32[$58$s2] ^ ($1030 >>> 8 | $1030 << 24);
  HEAP32[$58$s2] = $1045;
  var $1060 = HEAP32[$55$s2];
  var $1080 = HEAP32[(($1060 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1060 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1060 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1060 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 12];
  var $1087 = HEAP32[($1045 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1045 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1045 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1045 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1080 ^ HEAP32[$subkey$s2 + 13];
  HEAP32[$io$s2] = $1087 ^ HEAP32[$io$s2];
  var $1095 = $1087 ^ HEAP32[$7$s2] ^ ($1080 >>> 8 | $1080 << 24);
  HEAP32[$7$s2] = $1095;
  var $1110 = HEAP32[$io$s2];
  var $1130 = HEAP32[(($1110 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1110 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1110 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1110 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 10];
  var $1137 = HEAP32[($1095 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1095 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1095 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1095 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1130 ^ HEAP32[$subkey$s2 + 11];
  HEAP32[$55$s2] = $1137 ^ HEAP32[$55$s2];
  var $1145 = $1137 ^ HEAP32[$58$s2] ^ ($1130 >>> 8 | $1130 << 24);
  HEAP32[$58$s2] = $1145;
  var $1160 = HEAP32[$55$s2];
  var $1180 = HEAP32[(($1160 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1160 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1160 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1160 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 8];
  var $1187 = HEAP32[($1145 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1145 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1145 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1145 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1180 ^ HEAP32[$subkey$s2 + 9];
  HEAP32[$io$s2] = $1187 ^ HEAP32[$io$s2];
  var $1195 = $1187 ^ HEAP32[$7$s2] ^ ($1180 >>> 8 | $1180 << 24);
  HEAP32[$7$s2] = $1195;
  var $1210 = HEAP32[$io$s2];
  var $1230 = HEAP32[(($1210 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1210 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1210 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1210 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 6];
  var $1237 = HEAP32[($1195 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1195 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1195 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1195 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1230 ^ HEAP32[$subkey$s2 + 7];
  HEAP32[$55$s2] = $1237 ^ HEAP32[$55$s2];
  var $1245 = $1237 ^ HEAP32[$58$s2] ^ ($1230 >>> 8 | $1230 << 24);
  HEAP32[$58$s2] = $1245;
  var $1260 = HEAP32[$55$s2];
  var $1280 = HEAP32[(($1260 >>> 16 & 255) << 2) + 462708 >> 2] ^ HEAP32[($1260 >>> 24 << 2) + 461684 >> 2] ^ HEAP32[(($1260 >>> 8 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1260 & 255) << 2) + 459636 >> 2] ^ HEAP32[$subkey$s2 + 4];
  var $1287 = HEAP32[($1245 >>> 24 << 2) + 462708 >> 2] ^ HEAP32[(($1245 & 255) << 2) + 461684 >> 2] ^ HEAP32[(($1245 >>> 16 & 255) << 2) + 460660 >> 2] ^ HEAP32[(($1245 >>> 8 & 255) << 2) + 459636 >> 2] ^ $1280 ^ HEAP32[$subkey$s2 + 5];
  HEAP32[$io$s2] = $1287 ^ HEAP32[$io$s2];
  HEAP32[$7$s2] = $1287 ^ HEAP32[$7$s2] ^ ($1280 >>> 8 | $1280 << 24);
  HEAP32[$55$s2] = HEAP32[$55$s2] ^ HEAP32[$subkey$s2];
  HEAP32[$58$s2] = HEAP32[$58$s2] ^ HEAP32[$subkey$s2 + 1];
  var $1303 = HEAP32[$io$s2];
  var $1304 = HEAP32[$7$s2];
  HEAP32[$io$s2] = HEAP32[$55$s2];
  HEAP32[$7$s2] = HEAP32[$58$s2];
  HEAP32[$55$s2] = $1303;
  HEAP32[$58$s2] = $1304;
  return;
}
__gcry_camellia_decrypt256["X"] = 1;
function _do_decrypt_block1585($c, $outbuf, $inbuf) {
  var $c$s2 = $c >> 2;
  var $37 = HEAPU8[$inbuf + 5 | 0] << 16 | HEAPU8[$inbuf + 4 | 0] << 24 | HEAPU8[$inbuf + 7 | 0] | HEAPU8[$inbuf + 6 | 0] << 8;
  var $40 = $37 + HEAP32[$c$s2 + 15] | 0;
  var $43 = HEAPU8[$c + 79 | 0];
  var $47 = $40 << $43 | $40 >>> ((32 - $43 | 0) >>> 0);
  var $65 = (HEAP32[(($47 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($47 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($47 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($47 & 255) << 2) + 434500 >> 2] ^ (HEAPU8[$inbuf + 1 | 0] << 16 | HEAPU8[$inbuf] << 24 | HEAPU8[$inbuf + 3 | 0] | HEAPU8[$inbuf + 2 | 0] << 8);
  var $68 = HEAP32[$c$s2 + 14] - $65 | 0;
  var $71 = HEAPU8[$c + 78 | 0];
  var $75 = $68 >>> ((32 - $71 | 0) >>> 0) | $68 << $71;
  var $93 = (HEAP32[(($75 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($75 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($75 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($75 & 255) << 2) + 434500 >> 2] ^ $37;
  var $96 = $93 ^ HEAP32[$c$s2 + 13];
  var $99 = HEAPU8[$c + 77 | 0];
  var $103 = $96 >>> ((32 - $99 | 0) >>> 0) | $96 << $99;
  var $121 = HEAP32[(($103 & 255) << 2) + 434500 >> 2] ^ $65 ^ HEAP32[($103 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($103 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($103 >>> 8 & 255) << 2) + 435524 >> 2];
  var $124 = $121 + HEAP32[$c$s2 + 12] | 0;
  var $127 = HEAPU8[$c + 76 | 0];
  var $131 = $124 >>> ((32 - $127 | 0) >>> 0) | $124 << $127;
  var $149 = (HEAP32[(($131 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($131 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($131 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($131 & 255) << 2) + 434500 >> 2] ^ $93;
  var $152 = HEAP32[$c$s2 + 11] - $149 | 0;
  var $155 = HEAPU8[$c + 75 | 0];
  var $159 = $152 >>> ((32 - $155 | 0) >>> 0) | $152 << $155;
  var $177 = (HEAP32[(($159 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($159 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($159 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($159 & 255) << 2) + 434500 >> 2] ^ $121;
  var $180 = $177 ^ HEAP32[$c$s2 + 10];
  var $183 = HEAPU8[$c + 74 | 0];
  var $187 = $180 >>> ((32 - $183 | 0) >>> 0) | $180 << $183;
  var $205 = HEAP32[(($187 & 255) << 2) + 434500 >> 2] ^ $149 ^ HEAP32[($187 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($187 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($187 >>> 8 & 255) << 2) + 435524 >> 2];
  var $208 = $205 + HEAP32[$c$s2 + 9] | 0;
  var $211 = HEAPU8[$c + 73 | 0];
  var $215 = $208 >>> ((32 - $211 | 0) >>> 0) | $208 << $211;
  var $233 = (HEAP32[(($215 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($215 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($215 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($215 & 255) << 2) + 434500 >> 2] ^ $177;
  var $236 = HEAP32[$c$s2 + 8] - $233 | 0;
  var $239 = HEAPU8[$c + 72 | 0];
  var $243 = $236 >>> ((32 - $239 | 0) >>> 0) | $236 << $239;
  var $261 = (HEAP32[(($243 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($243 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($243 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($243 & 255) << 2) + 434500 >> 2] ^ $205;
  var $264 = $261 ^ HEAP32[$c$s2 + 7];
  var $267 = HEAPU8[$c + 71 | 0];
  var $271 = $264 >>> ((32 - $267 | 0) >>> 0) | $264 << $267;
  var $289 = HEAP32[(($271 & 255) << 2) + 434500 >> 2] ^ $233 ^ HEAP32[($271 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($271 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($271 >>> 8 & 255) << 2) + 435524 >> 2];
  var $292 = $289 + HEAP32[$c$s2 + 6] | 0;
  var $295 = HEAPU8[$c + 70 | 0];
  var $299 = $292 >>> ((32 - $295 | 0) >>> 0) | $292 << $295;
  var $317 = (HEAP32[(($299 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($299 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($299 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($299 & 255) << 2) + 434500 >> 2] ^ $261;
  var $320 = HEAP32[$c$s2 + 5] - $317 | 0;
  var $323 = HEAPU8[$c + 69 | 0];
  var $327 = $320 >>> ((32 - $323 | 0) >>> 0) | $320 << $323;
  var $345 = (HEAP32[(($327 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($327 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($327 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($327 & 255) << 2) + 434500 >> 2] ^ $289;
  var $348 = $345 ^ HEAP32[$c$s2 + 4];
  var $351 = HEAPU8[$c + 68 | 0];
  var $355 = $348 >>> ((32 - $351 | 0) >>> 0) | $348 << $351;
  var $373 = HEAP32[(($355 & 255) << 2) + 434500 >> 2] ^ $317 ^ HEAP32[($355 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($355 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($355 >>> 8 & 255) << 2) + 435524 >> 2];
  var $376 = $373 + HEAP32[$c$s2 + 3] | 0;
  var $379 = HEAPU8[$c + 67 | 0];
  var $383 = $376 >>> ((32 - $379 | 0) >>> 0) | $376 << $379;
  var $401 = (HEAP32[(($383 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($383 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($383 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($383 & 255) << 2) + 434500 >> 2] ^ $345;
  var $404 = HEAP32[$c$s2 + 2] - $401 | 0;
  var $407 = HEAPU8[$c + 66 | 0];
  var $411 = $404 >>> ((32 - $407 | 0) >>> 0) | $404 << $407;
  var $429 = (HEAP32[(($411 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($411 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($411 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($411 & 255) << 2) + 434500 >> 2] ^ $373;
  var $432 = $429 ^ HEAP32[$c$s2 + 1];
  var $435 = HEAPU8[$c + 65 | 0];
  var $439 = $432 >>> ((32 - $435 | 0) >>> 0) | $432 << $435;
  var $457 = HEAP32[(($439 & 255) << 2) + 434500 >> 2] ^ $401 ^ HEAP32[($439 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($439 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($439 >>> 8 & 255) << 2) + 435524 >> 2];
  var $459 = $457 + HEAP32[$c$s2] | 0;
  var $461 = HEAPU8[$c + 64 | 0];
  var $465 = $459 >>> ((32 - $461 | 0) >>> 0) | $459 << $461;
  var $483 = (HEAP32[(($465 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($465 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($465 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($465 & 255) << 2) + 434500 >> 2] ^ $429;
  HEAP8[$outbuf] = $483 >>> 24 & 255;
  HEAP8[$outbuf + 1 | 0] = $483 >>> 16 & 255;
  HEAP8[$outbuf + 2 | 0] = $483 >>> 8 & 255;
  HEAP8[$outbuf + 3 | 0] = $483 & 255;
  HEAP8[$outbuf + 4 | 0] = $457 >>> 24 & 255;
  HEAP8[$outbuf + 5 | 0] = $457 >>> 16 & 255;
  HEAP8[$outbuf + 6 | 0] = $457 >>> 8 & 255;
  HEAP8[$outbuf + 7 | 0] = $457 & 255;
  return;
}
_do_decrypt_block1585["X"] = 1;
function __gcry_Camellia_Ekeygen($keyBitLength, $rawKey, $keyTable) {
  if (($keyBitLength | 0) == 128) {
    __gcry_camellia_setup128($rawKey, $keyTable);
    return;
  } else if (($keyBitLength | 0) == 192) {
    __gcry_camellia_setup192($rawKey, $keyTable);
    return;
  } else if (($keyBitLength | 0) == 256) {
    __gcry_camellia_setup256($rawKey, $keyTable);
    return;
  } else {
    return;
  }
}
function __gcry_Camellia_EncryptBlock($keyBitLength, $plaintext, $keyTable, $ciphertext) {
  var $75$s2;
  var $56$s2;
  var $37$s2;
  var $18$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $tmp = __stackBase__;
  var $18 = $tmp | 0, $18$s2 = $18 >> 2;
  HEAP32[$18$s2] = HEAPU8[$plaintext + 1 | 0] << 16 | HEAPU8[$plaintext] << 24 | HEAPU8[$plaintext + 3 | 0] | HEAPU8[$plaintext + 2 | 0] << 8;
  var $37$s2 = ($tmp + 4 | 0) >> 2;
  HEAP32[$37$s2] = HEAPU8[$plaintext + 5 | 0] << 16 | HEAPU8[$plaintext + 4 | 0] << 24 | HEAPU8[$plaintext + 7 | 0] | HEAPU8[$plaintext + 6 | 0] << 8;
  var $56$s2 = ($tmp + 8 | 0) >> 2;
  HEAP32[$56$s2] = HEAPU8[$plaintext + 9 | 0] << 16 | HEAPU8[$plaintext + 8 | 0] << 24 | HEAPU8[$plaintext + 11 | 0] | HEAPU8[$plaintext + 10 | 0] << 8;
  var $75$s2 = ($tmp + 12 | 0) >> 2;
  HEAP32[$75$s2] = HEAPU8[$plaintext + 13 | 0] << 16 | HEAPU8[$plaintext + 12 | 0] << 24 | HEAPU8[$plaintext + 15 | 0] | HEAPU8[$plaintext + 14 | 0] << 8;
  if (($keyBitLength | 0) == 128) {
    __gcry_camellia_encrypt128($keyTable, $18);
  } else if (($keyBitLength | 0) == 192 | ($keyBitLength | 0) == 256) {
    __gcry_camellia_encrypt256($keyTable, $18);
  }
  HEAP8[$ciphertext] = HEAP32[$18$s2] >>> 24 & 255;
  HEAP8[$ciphertext + 1 | 0] = HEAP32[$18$s2] >>> 16 & 255;
  HEAP8[$ciphertext + 2 | 0] = HEAP32[$18$s2] >>> 8 & 255;
  HEAP8[$ciphertext + 3 | 0] = HEAP32[$18$s2] & 255;
  HEAP8[$ciphertext + 4 | 0] = HEAP32[$37$s2] >>> 24 & 255;
  HEAP8[$ciphertext + 5 | 0] = HEAP32[$37$s2] >>> 16 & 255;
  HEAP8[$ciphertext + 6 | 0] = HEAP32[$37$s2] >>> 8 & 255;
  HEAP8[$ciphertext + 7 | 0] = HEAP32[$37$s2] & 255;
  HEAP8[$ciphertext + 8 | 0] = HEAP32[$56$s2] >>> 24 & 255;
  HEAP8[$ciphertext + 9 | 0] = HEAP32[$56$s2] >>> 16 & 255;
  HEAP8[$ciphertext + 10 | 0] = HEAP32[$56$s2] >>> 8 & 255;
  HEAP8[$ciphertext + 11 | 0] = HEAP32[$56$s2] & 255;
  HEAP8[$ciphertext + 12 | 0] = HEAP32[$75$s2] >>> 24 & 255;
  HEAP8[$ciphertext + 13 | 0] = HEAP32[$75$s2] >>> 16 & 255;
  HEAP8[$ciphertext + 14 | 0] = HEAP32[$75$s2] >>> 8 & 255;
  HEAP8[$ciphertext + 15 | 0] = HEAP32[$75$s2] & 255;
  STACKTOP = __stackBase__;
  return;
}
__gcry_Camellia_EncryptBlock["X"] = 1;
function __gcry_Camellia_DecryptBlock($keyBitLength, $ciphertext, $keyTable, $plaintext) {
  var $75$s2;
  var $56$s2;
  var $37$s2;
  var $18$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $tmp = __stackBase__;
  var $18 = $tmp | 0, $18$s2 = $18 >> 2;
  HEAP32[$18$s2] = HEAPU8[$ciphertext + 1 | 0] << 16 | HEAPU8[$ciphertext] << 24 | HEAPU8[$ciphertext + 3 | 0] | HEAPU8[$ciphertext + 2 | 0] << 8;
  var $37$s2 = ($tmp + 4 | 0) >> 2;
  HEAP32[$37$s2] = HEAPU8[$ciphertext + 5 | 0] << 16 | HEAPU8[$ciphertext + 4 | 0] << 24 | HEAPU8[$ciphertext + 7 | 0] | HEAPU8[$ciphertext + 6 | 0] << 8;
  var $56$s2 = ($tmp + 8 | 0) >> 2;
  HEAP32[$56$s2] = HEAPU8[$ciphertext + 9 | 0] << 16 | HEAPU8[$ciphertext + 8 | 0] << 24 | HEAPU8[$ciphertext + 11 | 0] | HEAPU8[$ciphertext + 10 | 0] << 8;
  var $75$s2 = ($tmp + 12 | 0) >> 2;
  HEAP32[$75$s2] = HEAPU8[$ciphertext + 13 | 0] << 16 | HEAPU8[$ciphertext + 12 | 0] << 24 | HEAPU8[$ciphertext + 15 | 0] | HEAPU8[$ciphertext + 14 | 0] << 8;
  if (($keyBitLength | 0) == 128) {
    __gcry_camellia_decrypt128($keyTable, $18);
  } else if (($keyBitLength | 0) == 192 | ($keyBitLength | 0) == 256) {
    __gcry_camellia_decrypt256($keyTable, $18);
  }
  HEAP8[$plaintext] = HEAP32[$18$s2] >>> 24 & 255;
  HEAP8[$plaintext + 1 | 0] = HEAP32[$18$s2] >>> 16 & 255;
  HEAP8[$plaintext + 2 | 0] = HEAP32[$18$s2] >>> 8 & 255;
  HEAP8[$plaintext + 3 | 0] = HEAP32[$18$s2] & 255;
  HEAP8[$plaintext + 4 | 0] = HEAP32[$37$s2] >>> 24 & 255;
  HEAP8[$plaintext + 5 | 0] = HEAP32[$37$s2] >>> 16 & 255;
  HEAP8[$plaintext + 6 | 0] = HEAP32[$37$s2] >>> 8 & 255;
  HEAP8[$plaintext + 7 | 0] = HEAP32[$37$s2] & 255;
  HEAP8[$plaintext + 8 | 0] = HEAP32[$56$s2] >>> 24 & 255;
  HEAP8[$plaintext + 9 | 0] = HEAP32[$56$s2] >>> 16 & 255;
  HEAP8[$plaintext + 10 | 0] = HEAP32[$56$s2] >>> 8 & 255;
  HEAP8[$plaintext + 11 | 0] = HEAP32[$56$s2] & 255;
  HEAP8[$plaintext + 12 | 0] = HEAP32[$75$s2] >>> 24 & 255;
  HEAP8[$plaintext + 13 | 0] = HEAP32[$75$s2] >>> 16 & 255;
  HEAP8[$plaintext + 14 | 0] = HEAP32[$75$s2] >>> 8 & 255;
  HEAP8[$plaintext + 15 | 0] = HEAP32[$75$s2] & 255;
  STACKTOP = __stackBase__;
  return;
}
__gcry_Camellia_DecryptBlock["X"] = 1;
function _cast_setkey($context, $key, $keylen) {
  var $2 = _do_cast_setkey($context, $key, $keylen);
  __gcry_burn_stack(124);
  return $2;
}
function _encrypt_block1583($context, $outbuf, $inbuf) {
  _do_encrypt_block1586($context, $outbuf, $inbuf);
  __gcry_burn_stack(36);
  return;
}
function _decrypt_block1584($context, $outbuf, $inbuf) {
  _do_decrypt_block1585($context, $outbuf, $inbuf);
  __gcry_burn_stack(36);
  return;
}
function _do_encrypt_block1586($c, $outbuf, $inbuf) {
  var $c$s2 = $c >> 2;
  var $37 = HEAPU8[$inbuf + 5 | 0] << 16 | HEAPU8[$inbuf + 4 | 0] << 24 | HEAPU8[$inbuf + 7 | 0] | HEAPU8[$inbuf + 6 | 0] << 8;
  var $39 = $37 + HEAP32[$c$s2] | 0;
  var $41 = HEAPU8[$c + 64 | 0];
  var $45 = $39 << $41 | $39 >>> ((32 - $41 | 0) >>> 0);
  var $63 = (HEAP32[(($45 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($45 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($45 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($45 & 255) << 2) + 434500 >> 2] ^ (HEAPU8[$inbuf + 1 | 0] << 16 | HEAPU8[$inbuf] << 24 | HEAPU8[$inbuf + 3 | 0] | HEAPU8[$inbuf + 2 | 0] << 8);
  var $66 = $63 ^ HEAP32[$c$s2 + 1];
  var $69 = HEAPU8[$c + 65 | 0];
  var $73 = $66 >>> ((32 - $69 | 0) >>> 0) | $66 << $69;
  var $91 = HEAP32[(($73 & 255) << 2) + 434500 >> 2] ^ $37 ^ HEAP32[($73 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($73 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($73 >>> 8 & 255) << 2) + 435524 >> 2];
  var $94 = HEAP32[$c$s2 + 2] - $91 | 0;
  var $97 = HEAPU8[$c + 66 | 0];
  var $101 = $94 >>> ((32 - $97 | 0) >>> 0) | $94 << $97;
  var $119 = (HEAP32[(($101 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($101 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($101 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($101 & 255) << 2) + 434500 >> 2] ^ $63;
  var $122 = $119 + HEAP32[$c$s2 + 3] | 0;
  var $125 = HEAPU8[$c + 67 | 0];
  var $129 = $122 >>> ((32 - $125 | 0) >>> 0) | $122 << $125;
  var $147 = (HEAP32[(($129 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($129 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($129 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($129 & 255) << 2) + 434500 >> 2] ^ $91;
  var $150 = $147 ^ HEAP32[$c$s2 + 4];
  var $153 = HEAPU8[$c + 68 | 0];
  var $157 = $150 >>> ((32 - $153 | 0) >>> 0) | $150 << $153;
  var $175 = HEAP32[(($157 & 255) << 2) + 434500 >> 2] ^ $119 ^ HEAP32[($157 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($157 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($157 >>> 8 & 255) << 2) + 435524 >> 2];
  var $178 = HEAP32[$c$s2 + 5] - $175 | 0;
  var $181 = HEAPU8[$c + 69 | 0];
  var $185 = $178 >>> ((32 - $181 | 0) >>> 0) | $178 << $181;
  var $203 = (HEAP32[(($185 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($185 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($185 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($185 & 255) << 2) + 434500 >> 2] ^ $147;
  var $206 = $203 + HEAP32[$c$s2 + 6] | 0;
  var $209 = HEAPU8[$c + 70 | 0];
  var $213 = $206 >>> ((32 - $209 | 0) >>> 0) | $206 << $209;
  var $231 = (HEAP32[(($213 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($213 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($213 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($213 & 255) << 2) + 434500 >> 2] ^ $175;
  var $234 = $231 ^ HEAP32[$c$s2 + 7];
  var $237 = HEAPU8[$c + 71 | 0];
  var $241 = $234 >>> ((32 - $237 | 0) >>> 0) | $234 << $237;
  var $259 = HEAP32[(($241 & 255) << 2) + 434500 >> 2] ^ $203 ^ HEAP32[($241 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($241 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($241 >>> 8 & 255) << 2) + 435524 >> 2];
  var $262 = HEAP32[$c$s2 + 8] - $259 | 0;
  var $265 = HEAPU8[$c + 72 | 0];
  var $269 = $262 >>> ((32 - $265 | 0) >>> 0) | $262 << $265;
  var $287 = (HEAP32[(($269 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($269 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($269 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($269 & 255) << 2) + 434500 >> 2] ^ $231;
  var $290 = $287 + HEAP32[$c$s2 + 9] | 0;
  var $293 = HEAPU8[$c + 73 | 0];
  var $297 = $290 >>> ((32 - $293 | 0) >>> 0) | $290 << $293;
  var $315 = (HEAP32[(($297 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($297 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($297 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($297 & 255) << 2) + 434500 >> 2] ^ $259;
  var $318 = $315 ^ HEAP32[$c$s2 + 10];
  var $321 = HEAPU8[$c + 74 | 0];
  var $325 = $318 >>> ((32 - $321 | 0) >>> 0) | $318 << $321;
  var $343 = HEAP32[(($325 & 255) << 2) + 434500 >> 2] ^ $287 ^ HEAP32[($325 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($325 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($325 >>> 8 & 255) << 2) + 435524 >> 2];
  var $346 = HEAP32[$c$s2 + 11] - $343 | 0;
  var $349 = HEAPU8[$c + 75 | 0];
  var $353 = $346 >>> ((32 - $349 | 0) >>> 0) | $346 << $349;
  var $371 = (HEAP32[(($353 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($353 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($353 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($353 & 255) << 2) + 434500 >> 2] ^ $315;
  var $374 = $371 + HEAP32[$c$s2 + 12] | 0;
  var $377 = HEAPU8[$c + 76 | 0];
  var $381 = $374 >>> ((32 - $377 | 0) >>> 0) | $374 << $377;
  var $399 = (HEAP32[(($381 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($381 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($381 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($381 & 255) << 2) + 434500 >> 2] ^ $343;
  var $402 = $399 ^ HEAP32[$c$s2 + 13];
  var $405 = HEAPU8[$c + 77 | 0];
  var $409 = $402 >>> ((32 - $405 | 0) >>> 0) | $402 << $405;
  var $427 = HEAP32[(($409 & 255) << 2) + 434500 >> 2] ^ $371 ^ HEAP32[($409 >>> 24 << 2) + 437572 >> 2] - HEAP32[(($409 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[(($409 >>> 8 & 255) << 2) + 435524 >> 2];
  var $430 = HEAP32[$c$s2 + 14] - $427 | 0;
  var $433 = HEAPU8[$c + 78 | 0];
  var $437 = $430 >>> ((32 - $433 | 0) >>> 0) | $430 << $433;
  var $455 = (HEAP32[(($437 >>> 16 & 255) << 2) + 436548 >> 2] + HEAP32[($437 >>> 24 << 2) + 437572 >> 2] ^ HEAP32[(($437 >>> 8 & 255) << 2) + 435524 >> 2]) - HEAP32[(($437 & 255) << 2) + 434500 >> 2] ^ $399;
  var $458 = $455 + HEAP32[$c$s2 + 15] | 0;
  var $461 = HEAPU8[$c + 79 | 0];
  var $465 = $458 >>> ((32 - $461 | 0) >>> 0) | $458 << $461;
  var $483 = (HEAP32[(($465 >>> 16 & 255) << 2) + 436548 >> 2] ^ HEAP32[($465 >>> 24 << 2) + 437572 >> 2]) - HEAP32[(($465 >>> 8 & 255) << 2) + 435524 >> 2] + HEAP32[(($465 & 255) << 2) + 434500 >> 2] ^ $427;
  HEAP8[$outbuf] = $483 >>> 24 & 255;
  HEAP8[$outbuf + 1 | 0] = $483 >>> 16 & 255;
  HEAP8[$outbuf + 2 | 0] = $483 >>> 8 & 255;
  HEAP8[$outbuf + 3 | 0] = $483 & 255;
  HEAP8[$outbuf + 4 | 0] = $455 >>> 24 & 255;
  HEAP8[$outbuf + 5 | 0] = $455 >>> 16 & 255;
  HEAP8[$outbuf + 6 | 0] = $455 >>> 8 & 255;
  HEAP8[$outbuf + 7 | 0] = $455 & 255;
  return;
}
_do_encrypt_block1586["X"] = 1;
function _do_cast_setkey($c, $key, $keylen) {
  var $152$s2;
  var $151$s2;
  var $k$s2;
  var $x$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $c3 = $c;
  var $x = STACKTOP, $x$s2 = $x >> 2;
  STACKTOP = STACKTOP + 16 | 0;
  var $z = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $k = STACKTOP, $k$s2 = $k >> 2;
  STACKTOP = STACKTOP + 64 | 0;
  var $1 = $k;
  do {
    if (HEAP8[457640]) {
      label = 2069;
    } else {
      HEAP8[457640] = 1;
      var $3 = _selftest1587();
      HEAP32[114409] = $3;
      if (($3 | 0) == 0) {
        break;
      }
      __gcry_log_error(489e3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $3, tempInt));
      label = 2069;
      break;
    }
  } while (0);
  do {
    if (label == 2069) {
      if ((HEAP32[114409] | 0) == 0) {
        break;
      } else {
        var $_0 = 50;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  if (($keylen | 0) != 16) {
    var $_0 = 44;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $27 = $x | 0;
  HEAP32[$27 >> 2] = HEAPU8[$key + 1 | 0] << 16 | HEAPU8[$key] << 24 | HEAPU8[$key + 3 | 0] | HEAPU8[$key + 2 | 0] << 8;
  HEAP32[$x$s2 + 1] = HEAPU8[$key + 5 | 0] << 16 | HEAPU8[$key + 4 | 0] << 24 | HEAPU8[$key + 7 | 0] | HEAPU8[$key + 6 | 0] << 8;
  HEAP32[$x$s2 + 2] = HEAPU8[$key + 9 | 0] << 16 | HEAPU8[$key + 8 | 0] << 24 | HEAPU8[$key + 11 | 0] | HEAPU8[$key + 10 | 0] << 8;
  HEAP32[$x$s2 + 3] = HEAPU8[$key + 13 | 0] << 16 | HEAPU8[$key + 12 | 0] << 24 | HEAPU8[$key + 15 | 0] | HEAPU8[$key + 14 | 0] << 8;
  var $85 = $z | 0;
  var $86 = $k | 0;
  _key_schedule1588($27, $85, $86);
  for (var $$src = $1 >> 2, $$dest = $c3 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  _key_schedule1588($27, $85, $86);
  HEAP8[$c + 64 | 0] = HEAP32[$k$s2] & 31;
  HEAP8[$c + 65 | 0] = HEAP32[$k$s2 + 1] & 31;
  HEAP8[$c + 66 | 0] = HEAP32[$k$s2 + 2] & 31;
  HEAP8[$c + 67 | 0] = HEAP32[$k$s2 + 3] & 31;
  HEAP8[$c + 68 | 0] = HEAP32[$k$s2 + 4] & 31;
  HEAP8[$c + 69 | 0] = HEAP32[$k$s2 + 5] & 31;
  HEAP8[$c + 70 | 0] = HEAP32[$k$s2 + 6] & 31;
  HEAP8[$c + 71 | 0] = HEAP32[$k$s2 + 7] & 31;
  HEAP8[$c + 72 | 0] = HEAP32[$k$s2 + 8] & 31;
  HEAP8[$c + 73 | 0] = HEAP32[$k$s2 + 9] & 31;
  HEAP8[$c + 74 | 0] = HEAP32[$k$s2 + 10] & 31;
  HEAP8[$c + 75 | 0] = HEAP32[$k$s2 + 11] & 31;
  HEAP8[$c + 76 | 0] = HEAP32[$k$s2 + 12] & 31;
  HEAP8[$c + 77 | 0] = HEAP32[$k$s2 + 13] & 31;
  HEAP8[$c + 78 | 0] = HEAP32[$k$s2 + 14] & 31;
  HEAP8[$c + 79 | 0] = HEAP32[$k$s2 + 15] & 31;
  var $151$s2 = $x >> 2;
  HEAP32[$151$s2] = 0;
  HEAP32[$151$s2 + 1] = 0;
  HEAP32[$151$s2 + 2] = 0;
  HEAP32[$151$s2 + 3] = 0;
  var $152$s2 = $z >> 2;
  HEAP32[$152$s2] = 0;
  HEAP32[$152$s2 + 1] = 0;
  HEAP32[$152$s2 + 2] = 0;
  HEAP32[$152$s2 + 3] = 0;
  for (var $$dest = $1 >> 2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
    HEAP32[$$dest] = 0;
  }
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_do_cast_setkey["X"] = 1;
function _selftest1587() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  var $c = __stackBase__;
  var $plain = __stackBase__ + 96;
  var $cipher = __stackBase__ + 104;
  var $buffer = __stackBase__ + 112;
  var $1 = __stackBase__ + 80 | 0;
  for (var $$src = 415896, $$dest = $1, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP8[$$dest] = HEAP8[$$src];
  }
  HEAP32[$plain >> 2] = 1732584193;
  HEAP32[$plain + 4 >> 2] = -271733879;
  HEAP32[$cipher >> 2] = -447771869;
  HEAP32[$cipher + 4 >> 2] = -1304134012;
  var $2 = $c;
  _cast_setkey($2, $1, 16);
  var $4 = $buffer | 0;
  var $5 = $plain;
  _encrypt_block1583($2, $4, $5);
  if ((_memcmp($4, $cipher, 8) | 0) != 0) {
    var $_0 = 480760;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  _decrypt_block1584($2, $4, $4);
  var $_0 = (_memcmp($4, $5, 8) | 0) == 0 ? 0 : 476688;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _crc32_init($context) {
  HEAP32[$context >> 2] = -1;
  return;
}
function _crc32rfc1510_init($context) {
  HEAP32[$context >> 2] = 0;
  return;
}
function _crc24rfc2440_init($context) {
  HEAP32[$context >> 2] = 11994318;
  return;
}
function _key_schedule1588($x, $z, $k) {
  var $104$s2;
  var $79$s2;
  var $78$s2;
  var $52$s2;
  var $18$s2;
  var $2$s2;
  var $k$s2 = $k >> 2;
  var $z$s2 = $z >> 2;
  var $x$s2 = $x >> 2;
  var $2$s2 = ($x + 12 | 0) >> 2;
  var $3 = HEAP32[$2$s2];
  var $18$s2 = ($x + 8 | 0) >> 2;
  var $27 = HEAP32[(($3 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[$x$s2] ^ HEAP32[(($3 & 255) << 2) + 432452 >> 2] ^ HEAP32[($3 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($3 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[$18$s2] >>> 24 << 2) + 431428 >> 2];
  HEAP32[$z$s2] = $27;
  var $28 = HEAP32[$18$s2];
  var $51 = HEAP32[($27 >>> 24 << 2) + 433476 >> 2] ^ $28 ^ HEAP32[(($27 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($27 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($27 & 255) << 2) + 430404 >> 2] ^ HEAP32[(($28 >>> 8 & 255) << 2) + 430404 >> 2];
  var $52$s2 = ($z + 4 | 0) >> 2;
  HEAP32[$52$s2] = $51;
  var $77 = HEAP32[(($51 & 255) << 2) + 433476 >> 2] ^ HEAP32[$2$s2] ^ HEAP32[(($51 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($51 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($51 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$18$s2] >>> 16 & 255) << 2) + 433476 >> 2];
  var $78$s2 = ($z + 8 | 0) >> 2;
  HEAP32[$78$s2] = $77;
  var $79$s2 = ($x + 4 | 0) >> 2;
  var $104$s2 = ($z + 12 | 0) >> 2;
  HEAP32[$104$s2] = HEAP32[(($77 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[$79$s2] ^ HEAP32[(($77 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($77 & 255) << 2) + 431428 >> 2] ^ HEAP32[($77 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$18$s2] & 255) << 2) + 432452 >> 2];
  var $105 = HEAP32[$78$s2];
  var $113 = HEAP32[$52$s2];
  HEAP32[$k$s2] = HEAP32[(($105 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[($105 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[(($113 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($113 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$z$s2] >>> 8 & 255) << 2) + 433476 >> 2];
  var $130 = HEAP32[$78$s2];
  var $138 = HEAP32[$52$s2];
  HEAP32[$k$s2 + 1] = HEAP32[(($130 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($130 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($138 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($138 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[(($138 >>> 8 & 255) << 2) + 432452 >> 2];
  var $155 = HEAP32[$104$s2];
  var $163 = HEAP32[$z$s2];
  HEAP32[$k$s2 + 2] = HEAP32[(($155 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[($155 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[(($163 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($163 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$78$s2] >>> 16 & 255) << 2) + 431428 >> 2];
  var $181 = HEAP32[$104$s2];
  var $189 = HEAP32[$z$s2];
  HEAP32[$k$s2 + 3] = HEAP32[(($181 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($181 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($189 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($189 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[($181 >>> 24 << 2) + 430404 >> 2];
  var $206 = HEAP32[$52$s2];
  var $229 = HEAP32[(($206 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[$78$s2] ^ HEAP32[(($206 & 255) << 2) + 432452 >> 2] ^ HEAP32[($206 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($206 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[$z$s2] >>> 24 << 2) + 431428 >> 2];
  HEAP32[$x$s2] = $229;
  var $230 = HEAP32[$z$s2];
  var $253 = HEAP32[($229 >>> 24 << 2) + 433476 >> 2] ^ $230 ^ HEAP32[(($229 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($229 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($229 & 255) << 2) + 430404 >> 2] ^ HEAP32[(($230 >>> 8 & 255) << 2) + 430404 >> 2];
  HEAP32[$79$s2] = $253;
  var $278 = HEAP32[(($253 & 255) << 2) + 433476 >> 2] ^ HEAP32[$52$s2] ^ HEAP32[(($253 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($253 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($253 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$z$s2] >>> 16 & 255) << 2) + 433476 >> 2];
  HEAP32[$18$s2] = $278;
  var $302 = HEAP32[(($278 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[$104$s2] ^ HEAP32[(($278 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($278 & 255) << 2) + 431428 >> 2] ^ HEAP32[($278 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$z$s2] & 255) << 2) + 432452 >> 2];
  HEAP32[$2$s2] = $302;
  var $303 = HEAP32[$x$s2];
  HEAP32[$k$s2 + 4] = HEAP32[(($303 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($303 & 255) << 2) + 433476 >> 2] ^ HEAP32[($302 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($302 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[$18$s2] >>> 24 << 2) + 433476 >> 2];
  var $327 = HEAP32[$x$s2];
  var $335 = HEAP32[$2$s2];
  HEAP32[$k$s2 + 5] = HEAP32[($327 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[(($327 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($335 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($335 & 255) << 2) + 430404 >> 2] ^ HEAP32[(($335 >>> 16 & 255) << 2) + 432452 >> 2];
  var $352 = HEAP32[$79$s2];
  var $360 = HEAP32[$18$s2];
  HEAP32[$k$s2 + 6] = HEAP32[(($352 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($352 & 255) << 2) + 433476 >> 2] ^ HEAP32[($360 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($360 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$x$s2] & 255) << 2) + 431428 >> 2];
  var $377 = HEAP32[$79$s2];
  var $385 = HEAP32[$18$s2];
  HEAP32[$k$s2 + 7] = HEAP32[($377 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[(($377 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($385 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($385 & 255) << 2) + 430404 >> 2] ^ HEAP32[(($377 & 255) << 2) + 430404 >> 2];
  var $402 = HEAP32[$2$s2];
  var $425 = HEAP32[(($402 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[$x$s2] ^ HEAP32[(($402 & 255) << 2) + 432452 >> 2] ^ HEAP32[($402 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($402 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[$18$s2] >>> 24 << 2) + 431428 >> 2];
  HEAP32[$z$s2] = $425;
  var $426 = HEAP32[$18$s2];
  var $449 = HEAP32[($425 >>> 24 << 2) + 433476 >> 2] ^ $426 ^ HEAP32[(($425 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($425 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($425 & 255) << 2) + 430404 >> 2] ^ HEAP32[(($426 >>> 8 & 255) << 2) + 430404 >> 2];
  HEAP32[$52$s2] = $449;
  var $474 = HEAP32[(($449 & 255) << 2) + 433476 >> 2] ^ HEAP32[$2$s2] ^ HEAP32[(($449 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($449 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($449 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$18$s2] >>> 16 & 255) << 2) + 433476 >> 2];
  HEAP32[$78$s2] = $474;
  var $498 = HEAP32[(($474 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[$79$s2] ^ HEAP32[(($474 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($474 & 255) << 2) + 431428 >> 2] ^ HEAP32[($474 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$18$s2] & 255) << 2) + 432452 >> 2];
  HEAP32[$104$s2] = $498;
  var $499 = HEAP32[$z$s2];
  HEAP32[$k$s2 + 8] = HEAP32[(($499 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($499 & 255) << 2) + 433476 >> 2] ^ HEAP32[($498 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($498 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$78$s2] >>> 16 & 255) << 2) + 433476 >> 2];
  var $524 = HEAP32[$z$s2];
  var $532 = HEAP32[$104$s2];
  HEAP32[$k$s2 + 9] = HEAP32[($524 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[(($524 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($532 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($532 & 255) << 2) + 430404 >> 2] ^ HEAP32[($532 >>> 24 << 2) + 432452 >> 2];
  var $548 = HEAP32[$52$s2];
  var $556 = HEAP32[$78$s2];
  HEAP32[$k$s2 + 10] = HEAP32[(($548 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($548 & 255) << 2) + 433476 >> 2] ^ HEAP32[($556 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($556 >>> 16 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$z$s2] >>> 8 & 255) << 2) + 431428 >> 2];
  var $574 = HEAP32[$52$s2];
  var $582 = HEAP32[$78$s2];
  HEAP32[$k$s2 + 11] = HEAP32[($574 >>> 24 << 2) + 432452 >> 2] ^ HEAP32[(($574 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($582 >>> 8 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($582 & 255) << 2) + 430404 >> 2] ^ HEAP32[(($574 >>> 8 & 255) << 2) + 430404 >> 2];
  var $600 = HEAP32[$52$s2];
  var $623 = HEAP32[(($600 >>> 16 & 255) << 2) + 433476 >> 2] ^ HEAP32[$78$s2] ^ HEAP32[(($600 & 255) << 2) + 432452 >> 2] ^ HEAP32[($600 >>> 24 << 2) + 431428 >> 2] ^ HEAP32[(($600 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[$z$s2] >>> 24 << 2) + 431428 >> 2];
  HEAP32[$x$s2] = $623;
  var $624 = HEAP32[$z$s2];
  var $647 = HEAP32[($623 >>> 24 << 2) + 433476 >> 2] ^ $624 ^ HEAP32[(($623 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($623 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($623 & 255) << 2) + 430404 >> 2] ^ HEAP32[(($624 >>> 8 & 255) << 2) + 430404 >> 2];
  HEAP32[$79$s2] = $647;
  var $672 = HEAP32[(($647 & 255) << 2) + 433476 >> 2] ^ HEAP32[$52$s2] ^ HEAP32[(($647 >>> 8 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($647 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($647 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$z$s2] >>> 16 & 255) << 2) + 433476 >> 2];
  HEAP32[$18$s2] = $672;
  HEAP32[$2$s2] = HEAP32[(($672 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[$104$s2] ^ HEAP32[(($672 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($672 & 255) << 2) + 431428 >> 2] ^ HEAP32[($672 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$z$s2] & 255) << 2) + 432452 >> 2];
  var $697 = HEAP32[$18$s2];
  var $705 = HEAP32[$79$s2];
  HEAP32[$k$s2 + 12] = HEAP32[(($697 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[($697 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[(($705 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($705 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[((HEAP32[$x$s2] & 255) << 2) + 433476 >> 2];
  var $722 = HEAP32[$18$s2];
  var $730 = HEAP32[$79$s2];
  HEAP32[$k$s2 + 13] = HEAP32[(($722 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($722 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($730 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($730 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[(($730 & 255) << 2) + 432452 >> 2];
  var $746 = HEAP32[$2$s2];
  var $754 = HEAP32[$x$s2];
  HEAP32[$k$s2 + 14] = HEAP32[(($746 >>> 16 & 255) << 2) + 432452 >> 2] ^ HEAP32[($746 >>> 24 << 2) + 433476 >> 2] ^ HEAP32[(($754 & 255) << 2) + 431428 >> 2] ^ HEAP32[(($754 >>> 8 & 255) << 2) + 430404 >> 2] ^ HEAP32[(HEAP32[$18$s2] >>> 24 << 2) + 431428 >> 2];
  var $771 = HEAP32[$2$s2];
  var $779 = HEAP32[$x$s2];
  HEAP32[$k$s2 + 15] = HEAP32[(($771 & 255) << 2) + 432452 >> 2] ^ HEAP32[(($771 >>> 8 & 255) << 2) + 433476 >> 2] ^ HEAP32[(($779 >>> 16 & 255) << 2) + 431428 >> 2] ^ HEAP32[($779 >>> 24 << 2) + 430404 >> 2] ^ HEAP32[(($771 >>> 16 & 255) << 2) + 430404 >> 2];
  return;
}
_key_schedule1588["X"] = 1;
function _crc32_final($context) {
  var $1$s2;
  var $1$s2 = $context >> 2;
  var $3 = HEAP32[$1$s2] ^ -1;
  HEAP32[$1$s2] = $3;
  HEAP8[$context + 4 | 0] = $3 >>> 24 & 255;
  HEAP8[$context + 5 | 0] = HEAP32[$1$s2] >>> 16 & 255;
  HEAP8[$context + 6 | 0] = HEAP32[$1$s2] >>> 8 & 255;
  HEAP8[$context + 7 | 0] = HEAP32[$1$s2] & 255;
  return;
}
function _crc32_read($context) {
  return $context + 4 | 0;
}
function _crc32rfc1510_final($context) {
  var $1$s2;
  var $1$s2 = $context >> 2;
  HEAP8[$context + 4 | 0] = HEAP32[$1$s2] >>> 24 & 255;
  HEAP8[$context + 5 | 0] = HEAP32[$1$s2] >>> 16 & 255;
  HEAP8[$context + 6 | 0] = HEAP32[$1$s2] >>> 8 & 255;
  HEAP8[$context + 7 | 0] = HEAP32[$1$s2] & 255;
  return;
}
function _crc24rfc2440_write($context, $inbuf_arg, $inlen) {
  if (($inbuf_arg | 0) == 0 | ($inlen | 0) == 0) {
    return;
  }
  var $3 = $context;
  var $inbuf_04 = $inbuf_arg;
  var $_in = $inlen;
  while (1) {
    var $_in;
    var $inbuf_04;
    var $4 = $_in - 1 | 0;
    var $10 = (HEAPU8[$inbuf_04] << 16 ^ HEAP32[$3 >> 2]) << 1;
    var $14 = (($10 & 16777216 | 0) == 0 ? $10 : $10 ^ 25578747) << 1;
    var $18 = (($14 & 16777216 | 0) == 0 ? $14 : $14 ^ 25578747) << 1;
    var $22 = (($18 & 16777216 | 0) == 0 ? $18 : $18 ^ 25578747) << 1;
    var $26 = (($22 & 16777216 | 0) == 0 ? $22 : $22 ^ 25578747) << 1;
    var $30 = (($26 & 16777216 | 0) == 0 ? $26 : $26 ^ 25578747) << 1;
    var $34 = (($30 & 16777216 | 0) == 0 ? $30 : $30 ^ 25578747) << 1;
    var $38 = (($34 & 16777216 | 0) == 0 ? $34 : $34 ^ 25578747) << 1;
    HEAP32[$3 >> 2] = ($38 & 16777216 | 0) == 0 ? $38 : $38 ^ 25578747;
    if (($4 | 0) == 0) {
      break;
    } else {
      var $inbuf_04 = $inbuf_04 + 1 | 0;
      var $_in = $4;
    }
  }
  return;
}
_crc24rfc2440_write["X"] = 1;
function _crc24rfc2440_final($context) {
  var $1$s2;
  var $1$s2 = $context >> 2;
  HEAP8[$context + 4 | 0] = HEAP32[$1$s2] >>> 16 & 255;
  HEAP8[$context + 5 | 0] = HEAP32[$1$s2] >>> 8 & 255;
  HEAP8[$context + 6 | 0] = HEAP32[$1$s2] & 255;
  return;
}
function _crc32_write($context, $inbuf, $inlen) {
  if (($inbuf | 0) == 0) {
    return;
  }
  var $3 = $context;
  HEAP32[$3 >> 2] = _update_crc32(HEAP32[$3 >> 2], $inbuf, $inlen);
  return;
}
function __gcry_register_pk_dsa_progress($cb, $cb_data) {
  HEAP32[110039] = $cb;
  HEAP32[110035] = $cb_data;
  return;
}
function _gpg_err_code1660($err) {
  return $err & 65535;
}
function _update_crc32($crc, $buf_arg, $len) {
  if (($len | 0) == 0) {
    var $_0_lcssa = $crc;
    var $_0_lcssa;
    return $_0_lcssa;
  } else {
    var $n_01 = 0;
    var $_02 = $crc;
  }
  while (1) {
    var $_02;
    var $n_01;
    var $9 = HEAP32[((HEAPU8[$buf_arg + $n_01 | 0] ^ $_02 & 255) << 2) + 458128 >> 2] ^ $_02 >>> 8;
    var $10 = $n_01 + 1 | 0;
    if (($10 | 0) == ($len | 0)) {
      var $_0_lcssa = $9;
      break;
    } else {
      var $n_01 = $10;
      var $_02 = $9;
    }
  }
  var $_0_lcssa;
  return $_0_lcssa;
}
function _dsa_generate($algo, $nbits, $evalue, $skey, $retfactors) {
  return _dsa_generate_ext($algo, $nbits, 0, 0, $skey, $retfactors, 0);
}
function _dsa_check_secret_key($algo, $skey) {
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $1 = HEAP32[$skey >> 2];
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $4 = $skey + 4 | 0;
  if ((HEAP32[$4 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $8 = $skey + 8 | 0;
  if ((HEAP32[$8 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $12 = $skey + 12 | 0;
  if ((HEAP32[$12 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $16 = $skey + 16 | 0;
  if ((HEAP32[$16 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  } else {
    HEAP32[$sk$s2] = $1;
    HEAP32[$sk$s2 + 1] = HEAP32[$4 >> 2];
    HEAP32[$sk$s2 + 2] = HEAP32[$8 >> 2];
    HEAP32[$sk$s2 + 3] = HEAP32[$12 >> 2];
    HEAP32[$sk$s2 + 4] = HEAP32[$16 >> 2];
    var $_ = (_check_secret_key1665($sk) | 0) == 0 ? 7 : 0;
    STACKTOP = __stackBase__;
    return $_;
  }
}
function _dsa_sign($algo, $resarr, $data, $skey) {
  var $22$s2;
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  do {
    if (($data | 0) == 0) {
      var $err_0 = 30;
    } else {
      var $3 = HEAP32[$skey >> 2];
      if (($3 | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $6 = $skey + 4 | 0;
      if ((HEAP32[$6 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $10 = $skey + 8 | 0;
      if ((HEAP32[$10 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $14 = $skey + 12 | 0;
      if ((HEAP32[$14 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $18 = $skey + 16 | 0;
      if ((HEAP32[$18 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $22$s2 = ($sk | 0) >> 2;
      HEAP32[$22$s2] = $3;
      HEAP32[$sk$s2 + 1] = HEAP32[$6 >> 2];
      HEAP32[$sk$s2 + 2] = HEAP32[$10 >> 2];
      HEAP32[$sk$s2 + 3] = HEAP32[$14 >> 2];
      HEAP32[$sk$s2 + 4] = HEAP32[$18 >> 2];
      HEAP32[$resarr >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[$22$s2] + 4 >> 2]);
      var $38 = __gcry_mpi_alloc(HEAP32[HEAP32[$22$s2] + 4 >> 2]);
      HEAP32[$resarr + 4 >> 2] = $38;
      _sign(HEAP32[$resarr >> 2], $38, $data, $sk);
      var $err_0 = 0;
    }
  } while (0);
  var $err_0;
  STACKTOP = __stackBase__;
  return $err_0;
}
_dsa_sign["X"] = 1;
function _dsa_verify($algo, $hash, $data, $pkey, $cmp, $opaquev) {
  var $pk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $pk = __stackBase__, $pk$s2 = $pk >> 2;
  if ((HEAP32[$data >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $4 = $data + 4 | 0;
  if ((HEAP32[$4 >> 2] | 0) == 0 | ($hash | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $9 = HEAP32[$pkey >> 2];
  if (($9 | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $12 = $pkey + 4 | 0;
  if ((HEAP32[$12 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $16 = $pkey + 8 | 0;
  if ((HEAP32[$16 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $20 = $pkey + 12 | 0;
  if ((HEAP32[$20 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  } else {
    HEAP32[$pk$s2] = $9;
    HEAP32[$pk$s2 + 1] = HEAP32[$12 >> 2];
    HEAP32[$pk$s2 + 2] = HEAP32[$16 >> 2];
    HEAP32[$pk$s2 + 3] = HEAP32[$20 >> 2];
    var $_ = (_verify(HEAP32[$data >> 2], HEAP32[$4 >> 2], $hash, $pk) | 0) == 0 ? 8 : 0;
    STACKTOP = __stackBase__;
    return $_;
  }
}
function _dsa_get_nbits($algo, $pkey) {
  return __gcry_mpi_get_nbits(HEAP32[$pkey >> 2]);
}
function _run_selftests1659($algo, $extended, $report) {
  if (($algo | 0) == 17) {
    var $ec_0 = _selftests_dsa($report);
  } else {
    var $ec_0 = 4;
  }
  var $ec_0;
  return $ec_0;
}
function _dsa_generate_ext($algo, $nbits, $evalue, $genparms, $skey, $retfactors, $r_extrainfo) {
  var $164$s2;
  var $48$s2;
  var $45$s2;
  var $42$s2;
  var $1$s2;
  var $domain$s2;
  var $seedinfo$s2;
  var $sk$s2;
  var $retfactors$s2 = $retfactors >> 2;
  var $skey$s2 = $skey >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 108 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $seedinfo = __stackBase__ + 20, $seedinfo$s2 = $seedinfo >> 2;
  var $domain = __stackBase__ + 24, $domain$s2 = $domain >> 2;
  var $buf = __stackBase__ + 36;
  var $n = __stackBase__ + 88;
  var $counter = __stackBase__ + 92;
  var $seed = __stackBase__ + 96;
  var $seedlen = __stackBase__ + 100;
  var $h_value = __stackBase__ + 104;
  HEAP32[$seedinfo$s2] = 0;
  var $1$s2 = $domain >> 2;
  HEAP32[$1$s2] = 0;
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = 0;
  L2621 : do {
    if (($genparms | 0) == 0) {
      var $_01 = $nbits;
      var $qbits_1 = 0;
      var $deriveparms_0 = 0;
      var $transient_key_1 = 0;
      var $use_fips186_2_1 = 0;
      var $use_fips186_1 = 0;
    } else {
      var $4 = __gcry_sexp_find_token($genparms, 471984, 0);
      L2623 : do {
        if (($4 | 0) == 0) {
          var $qbits_0 = 0;
        } else {
          var $7 = __gcry_sexp_nth_data($4, 1, $n);
          do {
            if (($7 | 0) != 0) {
              var $10 = HEAP32[$n >> 2];
              if ($10 >>> 0 > 48) {
                break;
              }
              var $14 = $buf | 0;
              _memcpy($14, $7, $10);
              HEAP8[$buf + HEAP32[$n >> 2] | 0] = 0;
              var $17 = _strtoul($14, 0, 0);
              __gcry_sexp_release($4);
              var $qbits_0 = $17;
              break L2623;
            }
          } while (0);
          __gcry_sexp_release($4);
          var $_0 = 65;
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      var $qbits_0;
      var $19 = __gcry_sexp_find_token($genparms, 470492, 0);
      if (($19 | 0) == 0) {
        var $transient_key_0 = 0;
      } else {
        __gcry_sexp_release($19);
        var $transient_key_0 = 1;
      }
      var $transient_key_0;
      var $23 = __gcry_sexp_find_token($genparms, 469084, 0);
      var $24 = __gcry_sexp_find_token($genparms, 467488, 0);
      if (($24 | 0) == 0) {
        var $use_fips186_0 = 0;
      } else {
        __gcry_sexp_release($24);
        var $use_fips186_0 = 1;
      }
      var $use_fips186_0;
      var $28 = __gcry_sexp_find_token($genparms, 465384, 0);
      if (($28 | 0) == 0) {
        var $use_fips186_2_0 = 0;
      } else {
        __gcry_sexp_release($28);
        var $use_fips186_2_0 = 1;
      }
      var $use_fips186_2_0;
      var $32 = __gcry_sexp_find_token($genparms, 490536, 0);
      if (($32 | 0) == 0) {
        var $_01 = $nbits;
        var $qbits_1 = $qbits_0;
        var $deriveparms_0 = $23;
        var $transient_key_1 = $transient_key_0;
        var $use_fips186_2_1 = $use_fips186_2_0;
        var $use_fips186_1 = $use_fips186_0;
        break;
      }
      if (!(($23 | 0) == 0 & ($qbits_0 | 0) == 0 & ($nbits | 0) == 0)) {
        __gcry_sexp_release($32);
        __gcry_sexp_release($23);
        var $_0 = 55;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      var $40 = __gcry_sexp_find_token($32, 489648, 0);
      var $42$s2 = ($domain | 0) >> 2;
      HEAP32[$42$s2] = __gcry_sexp_nth_mpi($40, 1, 5);
      __gcry_sexp_release($40);
      var $43 = __gcry_sexp_find_token($32, 487960, 0);
      var $45$s2 = ($domain + 4 | 0) >> 2;
      HEAP32[$45$s2] = __gcry_sexp_nth_mpi($43, 1, 5);
      __gcry_sexp_release($43);
      var $46 = __gcry_sexp_find_token($32, 487284, 0);
      var $48$s2 = ($domain + 8 | 0) >> 2;
      HEAP32[$48$s2] = __gcry_sexp_nth_mpi($46, 1, 5);
      __gcry_sexp_release($46);
      __gcry_sexp_release($32);
      var $49 = HEAP32[$42$s2];
      do {
        if (($49 | 0) != 0) {
          if ((HEAP32[$45$s2] | 0) == 0) {
            break;
          }
          if ((HEAP32[$48$s2] | 0) == 0) {
            break;
          }
          var $_01 = __gcry_mpi_get_nbits($49);
          var $qbits_1 = __gcry_mpi_get_nbits(HEAP32[$45$s2]);
          var $deriveparms_0 = $23;
          var $transient_key_1 = $transient_key_0;
          var $use_fips186_2_1 = $use_fips186_2_0;
          var $use_fips186_1 = $use_fips186_0;
          break L2621;
        }
      } while (0);
      __gcry_mpi_release(HEAP32[$42$s2]);
      __gcry_mpi_release(HEAP32[$45$s2]);
      __gcry_mpi_release(HEAP32[$48$s2]);
      __gcry_sexp_release($23);
      var $_0 = 128;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $use_fips186_1;
  var $use_fips186_2_1;
  var $transient_key_1;
  var $deriveparms_0;
  var $qbits_1;
  var $_01;
  do {
    if (($deriveparms_0 | 0) == 0 & ($use_fips186_1 | 0) == 0 & ($use_fips186_2_1 | 0) == 0) {
      if ((__gcry_fips_mode() | 0) != 0) {
        label = 2168;
        break;
      }
      var $ec_0 = _generate($sk, $_01, $qbits_1, $transient_key_1, $domain, $retfactors);
      break;
    } else {
      label = 2168;
    }
  } while (0);
  do {
    if (label == 2168) {
      var $73 = _generate_fips186($sk, $_01, $qbits_1, $deriveparms_0, $domain, $counter, $seed, $seedlen, $h_value);
      __gcry_sexp_release($deriveparms_0);
      if (($73 | 0) != 0) {
        var $ec_0 = $73;
        break;
      }
      var $76 = HEAP32[$h_value >> 2];
      if (($76 | 0) == 0) {
        var $ec_0 = 0;
        break;
      }
      var $80 = HEAP32[$seedlen >> 2];
      var $81 = HEAP32[$seed >> 2];
      var $83 = _gpg_err_code1660(__gcry_sexp_build($seedinfo, 0, 486308, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = HEAP32[$counter >> 2], HEAP32[tempInt + 4 >> 2] = $80, HEAP32[tempInt + 8 >> 2] = $81, HEAP32[tempInt + 12 >> 2] = $76, tempInt)));
      if (($83 | 0) != 0) {
        var $86 = $sk | 0;
        __gcry_mpi_release(HEAP32[$86 >> 2]);
        HEAP32[$86 >> 2] = 0;
        var $88 = $sk + 4 | 0;
        __gcry_mpi_release(HEAP32[$88 >> 2]);
        HEAP32[$88 >> 2] = 0;
        var $90 = $sk + 8 | 0;
        __gcry_mpi_release(HEAP32[$90 >> 2]);
        HEAP32[$90 >> 2] = 0;
        var $92 = $sk + 12 | 0;
        __gcry_mpi_release(HEAP32[$92 >> 2]);
        HEAP32[$92 >> 2] = 0;
        var $94 = $sk + 16 | 0;
        __gcry_mpi_release(HEAP32[$94 >> 2]);
        HEAP32[$94 >> 2] = 0;
      }
      __gcry_free(HEAP32[$seed >> 2]);
      __gcry_mpi_release(HEAP32[$h_value >> 2]);
      var $ec_0 = $83;
    }
  } while (0);
  var $ec_0;
  __gcry_mpi_release(HEAP32[$domain$s2]);
  __gcry_mpi_release(HEAP32[$domain$s2 + 1]);
  __gcry_mpi_release(HEAP32[$domain$s2 + 2]);
  L2663 : do {
    if (($ec_0 | 0) == 0) {
      HEAP32[$skey$s2] = HEAP32[$sk$s2];
      HEAP32[$skey$s2 + 1] = HEAP32[$sk$s2 + 1];
      HEAP32[$skey$s2 + 2] = HEAP32[$sk$s2 + 2];
      HEAP32[$skey$s2 + 3] = HEAP32[$sk$s2 + 3];
      HEAP32[$skey$s2 + 4] = HEAP32[$sk$s2 + 4];
      if (($r_extrainfo | 0) == 0) {
        var $ec_2 = 0;
        break;
      }
      var $126 = HEAP32[$retfactors$s2];
      do {
        if (($126 | 0) == 0) {
          if ((HEAP32[$seedinfo$s2] | 0) != 0) {
            var $nfactors_0_ph = 0;
            label = 2179;
            break;
          }
          HEAP32[$r_extrainfo >> 2] = 0;
          var $ec_2 = $ec_0;
          break L2663;
        } else {
          var $134 = $126;
          var $nfactors_026 = 0;
        }
      } while (0);
      while (1) {
        if (label == 2179) {
          label = 0;
          var $nfactors_0_ph;
          var $_pr = HEAP32[$retfactors$s2];
          if (($_pr | 0) == 0) {
            var $nfactors_027 = $nfactors_0_ph;
            break;
          } else {
            var $134 = $_pr;
            var $nfactors_026 = $nfactors_0_ph;
          }
        }
        var $nfactors_026;
        var $134;
        if ((HEAP32[$134 + ($nfactors_026 << 2) >> 2] | 0) == 0) {
          var $nfactors_027 = $nfactors_026;
          break;
        }
        var $nfactors_0_ph = $nfactors_026 + 1 | 0;
        label = 2179;
        continue;
      }
      var $nfactors_027;
      var $142 = __gcry_malloc(($nfactors_027 << 1) + 50 | 0);
      do {
        if (($142 | 0) == 0) {
          var $arg_list_0 = 0;
          var $ec_1 = _gpg_err_code_from_syserror();
        } else {
          var $147 = _stpcpy($142, 485492);
          if ((HEAP32[$seedinfo$s2] | 0) == 0) {
            var $p_0 = $147;
          } else {
            var $p_0 = _stpcpy($147, 484628);
          }
          var $p_0;
          if (($nfactors_027 | 0) == 0) {
            var $p_2 = $p_0;
          } else {
            var $155 = _stpcpy($p_0, 483932);
            L2682 : do {
              if (($nfactors_027 | 0) > 0) {
                var $i_05 = 0;
                var $p_16 = $155;
                while (1) {
                  var $p_16;
                  var $i_05;
                  var $157 = _stpcpy($p_16, 483008);
                  var $158 = $i_05 + 1 | 0;
                  if (($158 | 0) == ($nfactors_027 | 0)) {
                    var $p_1_lcssa = $157;
                    break L2682;
                  } else {
                    var $i_05 = $158;
                    var $p_16 = $157;
                  }
                }
              } else {
                var $p_1_lcssa = $155;
              }
            } while (0);
            var $p_1_lcssa;
            var $p_2 = _stpcpy($p_1_lcssa, 482364);
          }
          var $p_2;
          _stpcpy($p_2, 482364);
          var $163 = __gcry_calloc($nfactors_027 + 2 | 0, 4);
          var $164 = $163, $164$s2 = $164 >> 2;
          if (($163 | 0) == 0) {
            var $arg_list_0 = $164;
            var $ec_1 = _gpg_err_code_from_syserror();
            break;
          }
          if ((HEAP32[$seedinfo$s2] | 0) == 0) {
            var $i_2_ph = 0;
          } else {
            HEAP32[$164$s2] = $seedinfo;
            var $i_2_ph = 1;
          }
          var $i_2_ph;
          if (($nfactors_027 | 0) > 0) {
            var $174 = HEAP32[$retfactors$s2];
            var $i_27 = $i_2_ph;
            var $j_08 = 0;
            while (1) {
              var $j_08;
              var $i_27;
              HEAP32[($i_27 << 2 >> 2) + $164$s2] = ($j_08 << 2) + $174 | 0;
              var $180 = $j_08 + 1 | 0;
              if (($180 | 0) == ($nfactors_027 | 0)) {
                break;
              } else {
                var $i_27 = $i_27 + 1 | 0;
                var $j_08 = $180;
              }
            }
            var $i_2_lcssa = $nfactors_027 + $i_2_ph | 0;
          } else {
            var $i_2_lcssa = $i_2_ph;
          }
          var $i_2_lcssa;
          HEAP32[($i_2_lcssa << 2 >> 2) + $164$s2] = 0;
          var $arg_list_0 = $164;
          var $ec_1 = _gpg_err_code1660(__gcry_sexp_build_array($r_extrainfo, 0, $142, $164));
        }
      } while (0);
      var $ec_1;
      var $arg_list_0;
      __gcry_free($arg_list_0);
      __gcry_free($142);
      var $189 = HEAP32[$retfactors$s2];
      L2701 : do {
        if (($nfactors_027 | 0) > 0) {
          var $i_314 = 0;
          var $190 = $189;
          while (1) {
            var $190;
            var $i_314;
            __gcry_mpi_release(HEAP32[$190 + ($i_314 << 2) >> 2]);
            HEAP32[HEAP32[$retfactors$s2] + ($i_314 << 2) >> 2] = 0;
            var $195 = $i_314 + 1 | 0;
            var $196 = HEAP32[$retfactors$s2];
            if (($195 | 0) == ($nfactors_027 | 0)) {
              var $_lcssa = $196;
              break L2701;
            } else {
              var $i_314 = $195;
              var $190 = $196;
            }
          }
        } else {
          var $_lcssa = $189;
        }
      } while (0);
      var $_lcssa;
      __gcry_free($_lcssa);
      HEAP32[$retfactors$s2] = 0;
      if (($ec_1 | 0) == 0) {
        var $ec_2 = 0;
        break;
      }
      __gcry_mpi_release(HEAP32[$skey$s2]);
      HEAP32[$skey$s2] = 0;
      var $200 = $skey + 4 | 0;
      __gcry_mpi_release(HEAP32[$200 >> 2]);
      HEAP32[$200 >> 2] = 0;
      var $202 = $skey + 8 | 0;
      __gcry_mpi_release(HEAP32[$202 >> 2]);
      HEAP32[$202 >> 2] = 0;
      var $204 = $skey + 12 | 0;
      __gcry_mpi_release(HEAP32[$204 >> 2]);
      HEAP32[$204 >> 2] = 0;
      var $206 = $skey + 16 | 0;
      __gcry_mpi_release(HEAP32[$206 >> 2]);
      HEAP32[$206 >> 2] = 0;
      var $ec_2 = $ec_1;
    } else {
      var $ec_2 = $ec_0;
    }
  } while (0);
  var $ec_2;
  __gcry_sexp_release(HEAP32[$seedinfo$s2]);
  var $_0 = $ec_2;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_dsa_generate_ext["X"] = 1;
function _generate_fips186($sk, $nbits, $qbits, $deriveparms, $domain, $r_counter, $r_seed, $r_seedlen, $r_h) {
  var $1$s2;
  var $prime_p$s2;
  var $prime_q$s2;
  var $initial_seed$s2;
  var $sk$s2 = $sk >> 2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 20 | 0;
  var $initial_seed = __stackBase__, $initial_seed$s2 = $initial_seed >> 2;
  var $prime_q = __stackBase__ + 12, $prime_q$s2 = $prime_q >> 2;
  var $prime_p = __stackBase__ + 16, $prime_p$s2 = $prime_p >> 2;
  var $1$s2 = $initial_seed >> 2;
  HEAP32[$1$s2] = 0;
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = 0;
  HEAP32[$prime_q$s2] = 0;
  HEAP32[$prime_p$s2] = 0;
  HEAP32[$r_counter >> 2] = 0;
  HEAP32[$r_seed >> 2] = 0;
  HEAP32[$r_seedlen >> 2] = 0;
  HEAP32[$r_h >> 2] = 0;
  do {
    if (($qbits | 0) == 0) {
      if (($nbits | 0) == 2048) {
        var $_016 = 224;
        label = 2213;
        break;
      } else if (($nbits | 0) == 1024) {
        var $_01 = 160;
        label = 2212;
        break;
      }
      var $_01 = ($nbits | 0) == 3072 ? 256 : $qbits;
      label = 2212;
      break;
    } else {
      var $_01 = $qbits;
      label = 2212;
    }
  } while (0);
  do {
    if (label == 2212) {
      var $_01;
      if (($nbits | 0) == 1024 & ($_01 | 0) == 160) {
        var $_017 = $_01;
        break;
      } else {
        var $_016 = $_01;
        label = 2213;
        break;
      }
    }
  } while (0);
  do {
    if (label == 2213) {
      var $_016;
      var $11 = ($_016 | 0) == 256;
      if (($nbits | 0) == 2048 & (($_016 | 0) == 224 | $11) | ($nbits | 0) == 3072 & $11) {
        var $_017 = $_016;
        break;
      } else {
        var $_0 = 55;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $_017;
  var $15 = HEAP32[$domain >> 2];
  do {
    if (($15 | 0) == 0) {
      label = 2223;
    } else {
      var $18 = $domain + 4 | 0;
      if ((HEAP32[$18 >> 2] | 0) == 0) {
        label = 2223;
        break;
      }
      var $22 = $domain + 8 | 0;
      if ((HEAP32[$22 >> 2] | 0) == 0) {
        label = 2223;
        break;
      }
      HEAP32[$prime_p$s2] = __gcry_mpi_copy($15);
      HEAP32[$prime_q$s2] = __gcry_mpi_copy(HEAP32[$18 >> 2]);
      var $30 = __gcry_mpi_copy(HEAP32[$22 >> 2]);
      if ((__gcry_mpi_get_nbits(HEAP32[$prime_p$s2]) | 0) != ($nbits | 0)) {
        __gcry_assert_failed(475908, 481204, 465, 494416);
      }
      if ((__gcry_mpi_get_nbits(HEAP32[$prime_q$s2]) | 0) != ($_017 | 0)) {
        __gcry_assert_failed(475628, 481204, 466, 494416);
      }
      if (($deriveparms | 0) == 0) {
        var $value_e_0 = 0;
        var $value_h_0 = 0;
        var $value_g_0 = $30;
        var $ec_0 = 0;
        label = 2229;
        break;
      }
      __gcry_assert_failed(475364, 481204, 467, 494416);
    }
  } while (0);
  L2729 : do {
    if (label == 2223) {
      do {
        if (($deriveparms | 0) != 0) {
          var $46 = __gcry_sexp_find_token($deriveparms, 475108, 0);
          HEAP32[$initial_seed$s2] = $46;
          if (($46 | 0) == 0) {
            break;
          }
          HEAP32[$initial_seed$s2 + 1] = __gcry_sexp_nth_data($46, 1, $initial_seed + 8 | 0);
        }
      } while (0);
      var $58 = __gcry_generate_fips186_2_prime($nbits, $_017, HEAP32[$initial_seed$s2 + 1], HEAP32[$initial_seed$s2 + 2], $prime_q, $prime_p, $r_counter, $r_seed, $r_seedlen);
      __gcry_sexp_release(HEAP32[$initial_seed$s2]);
      if (($58 | 0) != 0) {
        var $value_e_1 = 0;
        var $ec_1 = $58;
        break;
      }
      var $64 = __gcry_mpi_alloc_like(HEAP32[$prime_p$s2]);
      __gcry_mpi_sub_ui($64, HEAP32[$prime_p$s2], 1);
      __gcry_mpi_fdiv_q($64, $64, HEAP32[$prime_q$s2]);
      var $68 = __gcry_mpi_alloc_like(HEAP32[$prime_p$s2]);
      var $69 = __gcry_mpi_alloc_set_ui(1);
      while (1) {
        __gcry_mpi_add_ui($69, $69, 1);
        __gcry_mpi_powm($68, $69, $64, HEAP32[$prime_p$s2]);
        if ((__gcry_mpi_cmp_ui($68, 1) | 0) != 0) {
          var $value_e_0 = $64;
          var $value_h_0 = $69;
          var $value_g_0 = $68;
          var $ec_0 = $58;
          label = 2229;
          break L2729;
        }
      }
    }
  } while (0);
  if (label == 2229) {
    var $ec_0;
    var $value_g_0;
    var $value_h_0;
    var $value_e_0;
    var $74 = __gcry_mpi_snew($_017);
    var $75 = $_017 + 1 | 0;
    while (1) {
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        _progress1661(46);
      }
      __gcry_mpi_randomize($74, $_017, 2);
      __gcry_mpi_clear_highbit($74, $75);
      if ((__gcry_mpi_cmp_ui($74, 0) | 0) <= 0) {
        continue;
      }
      if ((__gcry_mpi_cmp($74, HEAP32[$prime_q$s2]) | 0) <= -1) {
        break;
      }
    }
    var $87 = __gcry_mpi_alloc_like(HEAP32[$prime_p$s2]);
    __gcry_mpi_powm($87, $value_g_0, $74, HEAP32[$prime_p$s2]);
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1661(10);
      __gcry_log_mpidump(478532, HEAP32[$prime_p$s2]);
      __gcry_log_mpidump(478236, HEAP32[$prime_q$s2]);
      __gcry_log_mpidump(477900, $value_g_0);
      __gcry_log_mpidump(477608, $87);
      __gcry_log_mpidump(477316, $74);
      __gcry_log_mpidump(475004, $value_h_0);
    }
    HEAP32[$sk$s2] = HEAP32[$prime_p$s2];
    HEAP32[$prime_p$s2] = 0;
    HEAP32[$sk$s2 + 1] = HEAP32[$prime_q$s2];
    HEAP32[$prime_q$s2] = 0;
    HEAP32[$sk$s2 + 2] = $value_g_0;
    HEAP32[$sk$s2 + 3] = $87;
    HEAP32[$sk$s2 + 4] = $74;
    HEAP32[$r_h >> 2] = $value_h_0;
    var $value_e_1 = $value_e_0;
    var $ec_1 = $ec_0;
  }
  var $ec_1;
  var $value_e_1;
  __gcry_mpi_release(HEAP32[$prime_p$s2]);
  __gcry_mpi_release(HEAP32[$prime_q$s2]);
  __gcry_mpi_release(0);
  __gcry_mpi_release(0);
  __gcry_mpi_release(0);
  __gcry_mpi_release(0);
  __gcry_mpi_release($value_e_1);
  do {
    if (($ec_1 | 0) == 0) {
      if ((_test_keys1662($sk, $_017) | 0) == 0) {
        var $_0 = 0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        var $110 = $sk | 0;
        __gcry_mpi_release(HEAP32[$110 >> 2]);
        HEAP32[$110 >> 2] = 0;
        var $112 = $sk + 4 | 0;
        __gcry_mpi_release(HEAP32[$112 >> 2]);
        HEAP32[$112 >> 2] = 0;
        var $114 = $sk + 8 | 0;
        __gcry_mpi_release(HEAP32[$114 >> 2]);
        HEAP32[$114 >> 2] = 0;
        var $116 = $sk + 12 | 0;
        __gcry_mpi_release(HEAP32[$116 >> 2]);
        HEAP32[$116 >> 2] = 0;
        var $118 = $sk + 16 | 0;
        __gcry_mpi_release(HEAP32[$118 >> 2]);
        HEAP32[$118 >> 2] = 0;
        __gcry_fips_signal_error(481204, 570, 494416, 0, 477092);
        var $ec_2_ph = 50;
        break;
      }
    } else {
      var $ec_2_ph = $ec_1;
    }
  } while (0);
  var $ec_2_ph;
  HEAP32[$r_counter >> 2] = 0;
  __gcry_free(HEAP32[$r_seed >> 2]);
  HEAP32[$r_seed >> 2] = 0;
  HEAP32[$r_seedlen >> 2] = 0;
  __gcry_mpi_release(HEAP32[$r_h >> 2]);
  HEAP32[$r_h >> 2] = 0;
  var $_0 = $ec_2_ph;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_generate_fips186["X"] = 1;
function __gcry_register_pk_ecc_progress($cb, $cb_data) {
  return;
}
function _progress1661($c) {
  var $1 = HEAP32[110039];
  if (($1 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$1](HEAP32[110035], 476148, $c, 0, 0);
  return;
}
function _test_keys1662($sk, $qbits) {
  var $pk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $pk = __stackBase__, $pk$s2 = $pk >> 2;
  var $1 = __gcry_mpi_new($qbits);
  var $2 = __gcry_mpi_new($qbits);
  var $3 = __gcry_mpi_new($qbits);
  HEAP32[$pk$s2] = HEAP32[$sk >> 2];
  HEAP32[$pk$s2 + 1] = HEAP32[$sk + 4 >> 2];
  HEAP32[$pk$s2 + 2] = HEAP32[$sk + 8 >> 2];
  HEAP32[$pk$s2 + 3] = HEAP32[$sk + 12 >> 2];
  __gcry_mpi_randomize($1, $qbits, 0);
  _sign($2, $3, $1, $sk);
  if ((_verify($2, $3, $1, $pk) | 0) == 0) {
    var $result_0 = -1;
    var $result_0;
    __gcry_mpi_release($3);
    __gcry_mpi_release($2);
    __gcry_mpi_release($1);
    STACKTOP = __stackBase__;
    return $result_0;
  }
  __gcry_mpi_add_ui($1, $1, 1);
  var $result_0 = ((_verify($2, $3, $1, $pk) | 0) != 0) << 31 >> 31;
  var $result_0;
  __gcry_mpi_release($3);
  __gcry_mpi_release($2);
  __gcry_mpi_release($1);
  STACKTOP = __stackBase__;
  return $result_0;
}
function _sign($r, $s, $hash, $skey) {
  var $1$s2;
  var $1$s2 = ($skey + 4 | 0) >> 2;
  var $3 = _gen_k(HEAP32[$1$s2]);
  var $6 = $skey | 0;
  __gcry_mpi_powm($r, HEAP32[$skey + 8 >> 2], $3, HEAP32[$6 >> 2]);
  __gcry_mpi_fdiv_r($r, $r, HEAP32[$1$s2]);
  var $11 = __gcry_mpi_alloc(HEAP32[$3 + 4 >> 2]);
  __gcry_mpi_invm($11, $3, HEAP32[$1$s2]);
  var $17 = __gcry_mpi_alloc(HEAP32[HEAP32[$6 >> 2] + 4 >> 2]);
  __gcry_mpi_mul($17, HEAP32[$skey + 16 >> 2], $r);
  __gcry_mpi_add($17, $17, $hash);
  __gcry_mpi_mulm($s, $11, $17, HEAP32[$1$s2]);
  __gcry_mpi_free($3);
  __gcry_mpi_free($11);
  __gcry_mpi_free($17);
  return;
}
function _verify($r, $s, $hash, $pkey) {
  var $4$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $base = __stackBase__;
  var $ex = __stackBase__ + 12;
  if ((__gcry_mpi_cmp_ui($r, 0) | 0) <= 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4$s2 = ($pkey + 4 | 0) >> 2;
  if ((__gcry_mpi_cmp($r, HEAP32[$4$s2]) | 0) >= 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_mpi_cmp_ui($s, 0) | 0) <= 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_mpi_cmp($s, HEAP32[$4$s2]) | 0) >= 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $19 = __gcry_mpi_alloc(HEAP32[HEAP32[$4$s2] + 4 >> 2]);
  var $23 = __gcry_mpi_alloc(HEAP32[HEAP32[$4$s2] + 4 >> 2]);
  var $27 = __gcry_mpi_alloc(HEAP32[HEAP32[$4$s2] + 4 >> 2]);
  var $28 = $pkey | 0;
  var $32 = __gcry_mpi_alloc(HEAP32[HEAP32[$28 >> 2] + 4 >> 2]);
  __gcry_mpi_invm($19, $s, HEAP32[$4$s2]);
  __gcry_mpi_mulm($23, $hash, $19, HEAP32[$4$s2]);
  __gcry_mpi_mulm($27, $r, $19, HEAP32[$4$s2]);
  var $39 = $base | 0;
  HEAP32[$39 >> 2] = HEAP32[$pkey + 8 >> 2];
  var $40 = $ex | 0;
  HEAP32[$40 >> 2] = $23;
  HEAP32[$base + 4 >> 2] = HEAP32[$pkey + 12 >> 2];
  HEAP32[$ex + 4 >> 2] = $27;
  HEAP32[$base + 8 >> 2] = 0;
  HEAP32[$ex + 8 >> 2] = 0;
  __gcry_mpi_mulpowm($32, $39, $40, HEAP32[$28 >> 2]);
  __gcry_mpi_fdiv_r($32, $32, HEAP32[$4$s2]);
  var $51 = (__gcry_mpi_cmp($32, $r) | 0) == 0 & 1;
  __gcry_mpi_free($19);
  __gcry_mpi_free($23);
  __gcry_mpi_free($27);
  __gcry_mpi_free($32);
  var $_0 = $51;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_verify["X"] = 1;
function _gen_k($q) {
  var __stackBase__ = STACKTOP;
  var $3 = __gcry_mpi_alloc_secure(HEAP32[$q + 4 >> 2]);
  var $4 = __gcry_mpi_get_nbits($q);
  var $6 = ($4 + 7 | 0) >>> 3;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(476340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  var $10 = $4 >>> 0 < 32;
  var $11 = $4 - 1 | 0;
  var $rndbuf_0 = 0;
  while (1) {
    var $rndbuf_0;
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1661(46);
    }
    if (($rndbuf_0 | 0) == 0 | $10) {
      __gcry_free($rndbuf_0);
      var $rndbuf_1 = __gcry_random_bytes_secure($6, 1);
    } else {
      var $20 = __gcry_random_bytes_secure(4, 1);
      var $21 = $20;
      var $22 = $rndbuf_0;
      tempBigInt = HEAPU8[$21] | HEAPU8[$21 + 1] << 8 | HEAPU8[$21 + 2] << 16 | HEAPU8[$21 + 3] << 24 | 0;
      HEAP8[$22] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$22 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$22 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$22 + 3] = tempBigInt & 255;
      __gcry_free($20);
      var $rndbuf_1 = $rndbuf_0;
    }
    var $rndbuf_1;
    __gcry_mpi_set_buffer($3, $rndbuf_1, $6, 0);
    var $26 = (__gcry_mpi_test_bit($3, $11) | 0) == 0;
    __gcry_mpi_set_highbit($3, $11);
    if ($26) {
      __gcry_mpi_clear_bit($3, $11);
    }
    if ((__gcry_mpi_cmp($3, $q) | 0) >= 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $rndbuf_0 = $rndbuf_1;
        continue;
      }
      _progress1661(43);
      var $rndbuf_0 = $rndbuf_1;
      continue;
    }
    if ((__gcry_mpi_cmp_ui($3, 0) | 0) > 0) {
      break;
    }
    if ((__gcry_get_debug_flag(1) | 0) == 0) {
      var $rndbuf_0 = $rndbuf_1;
      continue;
    }
    _progress1661(45);
    var $rndbuf_0 = $rndbuf_1;
  }
  __gcry_free($rndbuf_1);
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    STACKTOP = __stackBase__;
    return $3;
  }
  _progress1661(10);
  STACKTOP = __stackBase__;
  return $3;
}
_gen_k["X"] = 1;
function _selftests_dsa($report) {
  var $pkey$s2;
  var $skey$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $skey = __stackBase__, $skey$s2 = $skey >> 2;
  var $pkey = __stackBase__ + 4, $pkey$s2 = $pkey >> 2;
  HEAP32[$skey$s2] = 0;
  HEAP32[$pkey$s2] = 0;
  var $1 = __gcry_sexp_sscan($skey, 0, 427164, 965);
  do {
    if (($1 | 0) == 0) {
      var $4 = __gcry_sexp_sscan($pkey, 0, 429164, 916);
      if (($4 | 0) != 0) {
        var $err_01 = $4;
        label = 2291;
        break;
      }
      var $9 = __gcry_pk_testkey(HEAP32[$skey$s2]);
      if (($9 | 0) != 0) {
        var $what_0 = 474416;
        var $errtxt_0 = __gcry_strerror($9);
        break;
      }
      var $16 = _selftest_sign_10241663(HEAP32[$pkey$s2], HEAP32[$skey$s2]);
      if (($16 | 0) != 0) {
        var $what_0 = 474164;
        var $errtxt_0 = $16;
        break;
      }
      __gcry_sexp_release(HEAP32[$pkey$s2]);
      __gcry_sexp_release(HEAP32[$skey$s2]);
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $err_01 = $1;
      label = 2291;
    }
  } while (0);
  if (label == 2291) {
    var $err_01;
    var $what_0 = 474728;
    var $errtxt_0 = __gcry_strerror($err_01);
  }
  var $errtxt_0;
  var $what_0;
  __gcry_sexp_release(HEAP32[$pkey$s2]);
  __gcry_sexp_release(HEAP32[$skey$s2]);
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  FUNCTION_TABLE[$report](473584, 17, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _selftest_sign_10241663($pkey, $skey) {
  var $sig$s2;
  var $data_bad$s2;
  var $data$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $data = __stackBase__, $data$s2 = $data >> 2;
  var $data_bad = __stackBase__ + 4, $data_bad$s2 = $data_bad >> 2;
  var $sig = __stackBase__ + 8, $sig$s2 = $sig >> 2;
  HEAP32[$data$s2] = 0;
  HEAP32[$data_bad$s2] = 0;
  HEAP32[$sig$s2] = 0;
  do {
    if ((__gcry_sexp_sscan($data, 0, 415400, 69) | 0) == 0) {
      if ((__gcry_sexp_sscan($data_bad, 0, 415252, 69) | 0) != 0) {
        var $errtxt_0 = 473356;
        break;
      }
      if ((__gcry_pk_sign($sig, HEAP32[$data$s2], $skey) | 0) != 0) {
        var $errtxt_0 = 473140;
        break;
      }
      if ((__gcry_pk_verify(HEAP32[$sig$s2], HEAP32[$data$s2], $pkey) | 0) != 0) {
        var $errtxt_0 = 472996;
        break;
      }
      var $errtxt_0 = (_gcry_err_code1664(__gcry_pk_verify(HEAP32[$sig$s2], HEAP32[$data_bad$s2], $pkey)) | 0) == 8 ? 0 : 472836;
    } else {
      var $errtxt_0 = 473356;
    }
  } while (0);
  var $errtxt_0;
  __gcry_sexp_release(HEAP32[$sig$s2]);
  __gcry_sexp_release(HEAP32[$data_bad$s2]);
  __gcry_sexp_release(HEAP32[$data$s2]);
  STACKTOP = __stackBase__;
  return $errtxt_0;
}
function _gcry_err_code1664($err) {
  return _gpg_err_code1660($err);
}
function _check_secret_key1665($sk) {
  var $1 = $sk + 12 | 0;
  var $5 = __gcry_mpi_alloc(HEAP32[HEAP32[$1 >> 2] + 4 >> 2]);
  __gcry_mpi_powm($5, HEAP32[$sk + 8 >> 2], HEAP32[$sk + 16 >> 2], HEAP32[$sk >> 2]);
  var $15 = (__gcry_mpi_cmp($5, HEAP32[$1 >> 2]) | 0) == 0 & 1;
  __gcry_mpi_free($5);
  return $15;
}
function _ecc_generate($algo, $nbits, $evalue, $skey, $retfactors) {
  return _ecc_generate_ext($algo, $nbits, 0, 0, $skey, $retfactors, 0);
}
function _ecc_check_secret_key($algo, $skey) {
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $1 = HEAP32[$skey >> 2];
  do {
    if (($1 | 0) == 0) {
      var $_0 = 30;
    } else {
      var $4 = $skey + 4 | 0;
      if ((HEAP32[$4 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $8 = $skey + 8 | 0;
      if ((HEAP32[$8 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $12 = $skey + 12 | 0;
      if ((HEAP32[$12 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $16 = $skey + 16 | 0;
      if ((HEAP32[$16 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $20 = $skey + 20 | 0;
      if ((HEAP32[$20 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $24 = $skey + 24 | 0;
      if ((HEAP32[$24 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      HEAP32[$sk$s2] = $1;
      HEAP32[$sk$s2 + 1] = HEAP32[$4 >> 2];
      HEAP32[$sk$s2 + 2] = HEAP32[$8 >> 2];
      var $33 = $sk + 12 | 0;
      __gcry_mpi_ec_point_init($33);
      var $35 = _os2ec($33, HEAP32[$12 >> 2]);
      if (($35 | 0) != 0) {
        __gcry_mpi_ec_point_free($33);
        var $_0 = $35;
        break;
      }
      HEAP32[$sk$s2 + 6] = HEAP32[$16 >> 2];
      var $41 = $sk + 32 | 0;
      __gcry_mpi_ec_point_init($41);
      var $43 = _os2ec($41, HEAP32[$20 >> 2]);
      if (($43 | 0) == 0) {
        HEAP32[$sk$s2 + 11] = HEAP32[$24 >> 2];
        var $50 = (_check_secret_key1778($sk) | 0) == 0;
        __gcry_mpi_ec_point_free($33);
        __gcry_mpi_ec_point_free($41);
        var $_0 = $50 ? 0 : 7;
        break;
      } else {
        __gcry_mpi_ec_point_free($33);
        __gcry_mpi_ec_point_free($41);
        var $_0 = $43;
        break;
      }
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_ecc_check_secret_key["X"] = 1;
function _ecc_sign($algo, $resarr, $data, $skey) {
  var $30$s2;
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  do {
    if (($data | 0) == 0) {
      var $_0 = 30;
    } else {
      var $3 = HEAP32[$skey >> 2];
      if (($3 | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $6 = $skey + 4 | 0;
      if ((HEAP32[$6 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $10 = $skey + 8 | 0;
      if ((HEAP32[$10 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $14 = $skey + 12 | 0;
      if ((HEAP32[$14 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $18 = $skey + 16 | 0;
      if ((HEAP32[$18 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $22 = $skey + 20 | 0;
      if ((HEAP32[$22 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $26 = $skey + 24 | 0;
      if ((HEAP32[$26 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $30$s2 = ($sk | 0) >> 2;
      HEAP32[$30$s2] = $3;
      HEAP32[$sk$s2 + 1] = HEAP32[$6 >> 2];
      HEAP32[$sk$s2 + 2] = HEAP32[$10 >> 2];
      var $35 = $sk + 12 | 0;
      __gcry_mpi_ec_point_init($35);
      var $37 = _os2ec($35, HEAP32[$14 >> 2]);
      if (($37 | 0) != 0) {
        __gcry_mpi_ec_point_free($35);
        var $_0 = $37;
        break;
      }
      HEAP32[$sk$s2 + 6] = HEAP32[$18 >> 2];
      var $43 = $sk + 32 | 0;
      __gcry_mpi_ec_point_init($43);
      var $45 = _os2ec($43, HEAP32[$22 >> 2]);
      if (($45 | 0) != 0) {
        __gcry_mpi_ec_point_free($35);
        __gcry_mpi_ec_point_free($43);
        var $_0 = $45;
        break;
      }
      HEAP32[$sk$s2 + 11] = HEAP32[$26 >> 2];
      HEAP32[$resarr >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[$30$s2] + 4 >> 2]);
      var $58 = __gcry_mpi_alloc(HEAP32[HEAP32[$30$s2] + 4 >> 2]);
      var $59 = $resarr + 4 | 0;
      HEAP32[$59 >> 2] = $58;
      var $61 = _sign1776($data, $sk, HEAP32[$resarr >> 2], $58);
      if (($61 | 0) != 0) {
        __gcry_mpi_free(HEAP32[$resarr >> 2]);
        __gcry_mpi_free(HEAP32[$59 >> 2]);
        HEAP32[$resarr >> 2] = 0;
      }
      __gcry_mpi_ec_point_free($35);
      __gcry_mpi_ec_point_free($43);
      var $_0 = $61;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_ecc_sign["X"] = 1;
function _ecc_verify($algo, $hash, $data, $pkey, $cmp, $opaquev) {
  var $pk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 44 | 0;
  var $pk = __stackBase__, $pk$s2 = $pk >> 2;
  do {
    if ((HEAP32[$data >> 2] | 0) == 0) {
      var $_0 = 30;
    } else {
      var $4 = $data + 4 | 0;
      if ((HEAP32[$4 >> 2] | 0) == 0 | ($hash | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $9 = HEAP32[$pkey >> 2];
      if (($9 | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $12 = $pkey + 4 | 0;
      if ((HEAP32[$12 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $16 = $pkey + 8 | 0;
      if ((HEAP32[$16 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $20 = $pkey + 12 | 0;
      if ((HEAP32[$20 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $24 = $pkey + 16 | 0;
      if ((HEAP32[$24 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $28 = $pkey + 20 | 0;
      if ((HEAP32[$28 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      HEAP32[$pk$s2] = $9;
      HEAP32[$pk$s2 + 1] = HEAP32[$12 >> 2];
      HEAP32[$pk$s2 + 2] = HEAP32[$16 >> 2];
      var $37 = $pk + 12 | 0;
      __gcry_mpi_ec_point_init($37);
      var $39 = _os2ec($37, HEAP32[$20 >> 2]);
      if (($39 | 0) != 0) {
        __gcry_mpi_ec_point_free($37);
        var $_0 = $39;
        break;
      }
      HEAP32[$pk$s2 + 6] = HEAP32[$24 >> 2];
      var $45 = $pk + 32 | 0;
      __gcry_mpi_ec_point_init($45);
      var $47 = _os2ec($45, HEAP32[$28 >> 2]);
      if (($47 | 0) == 0) {
        var $53 = _verify1777($hash, $pk, HEAP32[$data >> 2], HEAP32[$4 >> 2]);
        __gcry_mpi_ec_point_free($37);
        __gcry_mpi_ec_point_free($45);
        var $_0 = $53;
        break;
      } else {
        __gcry_mpi_ec_point_free($37);
        __gcry_mpi_ec_point_free($45);
        var $_0 = $47;
        break;
      }
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_ecc_verify["X"] = 1;
function _ecc_get_nbits($algo, $pkey) {
  return __gcry_mpi_get_nbits(HEAP32[$pkey >> 2]);
}
function _generate($sk, $nbits, $qbits, $transient_key, $domain, $ret_factors) {
  var $114$s2;
  var $113$s2;
  var $112$s2;
  var $111$s2;
  var $110$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  do {
    if (($qbits | 0) == 0) {
      if (($nbits - 512 | 0) >>> 0 < 513) {
        var $_06 = 160;
        break;
      }
      if (($nbits | 0) == 3072) {
        var $_06 = 256;
        break;
      } else if (($nbits | 0) == 15360) {
        var $_06 = 512;
        break;
      } else if (($nbits | 0) == 7680) {
        var $_06 = 384;
        break;
      } else if (($nbits | 0) == 2048) {
        var $_06 = 224;
        break;
      } else {
        var $_0 = 55;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
    } else {
      var $_06 = $qbits;
    }
  } while (0);
  var $_06;
  if (!(($_06 - 160 | 0) >>> 0 < 353 & ($_06 & 7 | 0) == 0)) {
    var $_0 = 55;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ($_06 << 1 >>> 0 > $nbits >>> 0 | $nbits >>> 0 > 15360) {
    var $_0 = 55;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if ((__gcry_fips_mode() | 0) != 0) {
      if ($nbits >>> 0 > 1023 & ($transient_key | 0) == 0) {
        break;
      } else {
        var $_0 = 55;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  var $24 = HEAP32[$domain >> 2];
  do {
    if (($24 | 0) == 0) {
      label = 2373;
    } else {
      var $27 = $domain + 4 | 0;
      if ((HEAP32[$27 >> 2] | 0) == 0) {
        label = 2373;
        break;
      }
      var $31 = $domain + 8 | 0;
      if ((HEAP32[$31 >> 2] | 0) == 0) {
        label = 2373;
        break;
      }
      var $35 = __gcry_mpi_copy($24);
      var $37 = __gcry_mpi_copy(HEAP32[$27 >> 2]);
      var $39 = __gcry_mpi_copy(HEAP32[$31 >> 2]);
      if ((__gcry_mpi_get_nbits($35) | 0) != ($nbits | 0)) {
        __gcry_assert_failed(481668, 481204, 305, 494448);
      }
      if ((__gcry_mpi_get_nbits($37) | 0) == ($_06 | 0)) {
        var $e_0 = 0;
        var $h_0 = __gcry_mpi_alloc(0);
        var $g_0 = $39;
        var $q_0 = $37;
        var $p_0 = $35;
        break;
      } else {
        __gcry_assert_failed(480032, 481204, 306, 494448);
      }
    }
  } while (0);
  L2921 : do {
    if (label == 2373) {
      var $50 = __gcry_generate_elg_prime(1, $nbits, $_06, 0, $ret_factors);
      var $53 = __gcry_mpi_copy(HEAP32[HEAP32[$ret_factors >> 2] >> 2]);
      if ((__gcry_mpi_get_nbits($53) | 0) != ($_06 | 0)) {
        __gcry_assert_failed(480032, 481204, 316, 494448);
      }
      var $58 = $50 + 4 | 0;
      var $60 = __gcry_mpi_alloc(HEAP32[$58 >> 2]);
      __gcry_mpi_sub_ui($60, $50, 1);
      __gcry_mpi_fdiv_q($60, $60, $53);
      var $62 = __gcry_mpi_alloc(HEAP32[$58 >> 2]);
      var $63 = __gcry_mpi_alloc_set_ui(1);
      while (1) {
        __gcry_mpi_add_ui($63, $63, 1);
        __gcry_mpi_powm($62, $63, $60, $50);
        if ((__gcry_mpi_cmp_ui($62, 1) | 0) != 0) {
          var $e_0 = $60;
          var $h_0 = $63;
          var $g_0 = $62;
          var $q_0 = $53;
          var $p_0 = $50;
          break L2921;
        }
      }
    }
  } while (0);
  var $p_0;
  var $q_0;
  var $g_0;
  var $h_0;
  var $e_0;
  var $67 = ($transient_key | 0) != 0;
  var $68 = $67 ? 1 : 2;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(479724, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $67 ? 479456 : 476684, tempInt));
  }
  if ($_06 >>> 0 <= 159) {
    __gcry_assert_failed(478876, 481204, 341, 494448);
  }
  var $79 = __gcry_mpi_alloc_secure(HEAP32[$q_0 + 4 >> 2]);
  __gcry_mpi_sub_ui($h_0, $q_0, 1);
  var $81 = ($_06 + 7 | 0) >>> 3;
  var $83 = ($_06 + 7 | 0) >>> 3;
  var $84 = $_06 + 1 | 0;
  var $rndbuf_0 = 0;
  while (1) {
    var $rndbuf_0;
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1661(46);
    }
    if (($rndbuf_0 | 0) == 0) {
      var $rndbuf_1 = __gcry_random_bytes_secure($81, $68);
    } else {
      var $93 = __gcry_random_bytes_secure(2, $68);
      var $94 = $93;
      var $95 = $rndbuf_0;
      tempBigInt = (tempInt = HEAPU8[$94] | HEAPU8[$94 + 1] << 8, tempInt << 16 >> 16);
      HEAP8[$95] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$95 + 1] = tempBigInt & 255;
      __gcry_free($93);
      var $rndbuf_1 = $rndbuf_0;
    }
    var $rndbuf_1;
    __gcry_mpi_set_buffer($79, $rndbuf_1, $83, 0);
    __gcry_mpi_clear_highbit($79, $84);
    if ((__gcry_mpi_cmp_ui($79, 0) | 0) <= 0) {
      var $rndbuf_0 = $rndbuf_1;
      continue;
    }
    if ((__gcry_mpi_cmp($79, $h_0) | 0) > -1) {
      var $rndbuf_0 = $rndbuf_1;
    } else {
      break;
    }
  }
  __gcry_free($rndbuf_1);
  __gcry_mpi_free($e_0);
  __gcry_mpi_free($h_0);
  var $105 = __gcry_mpi_alloc(HEAP32[$p_0 + 4 >> 2]);
  __gcry_mpi_powm($105, $g_0, $79, $p_0);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    _progress1661(10);
    __gcry_log_mpidump(478532, $p_0);
    __gcry_log_mpidump(478236, $q_0);
    __gcry_log_mpidump(477900, $g_0);
    __gcry_log_mpidump(477608, $105);
    __gcry_log_mpidump(477316, $79);
  }
  var $110$s2 = ($sk | 0) >> 2;
  HEAP32[$110$s2] = $p_0;
  var $111$s2 = ($sk + 4 | 0) >> 2;
  HEAP32[$111$s2] = $q_0;
  var $112$s2 = ($sk + 8 | 0) >> 2;
  HEAP32[$112$s2] = $g_0;
  var $113$s2 = ($sk + 12 | 0) >> 2;
  HEAP32[$113$s2] = $105;
  var $114$s2 = ($sk + 16 | 0) >> 2;
  HEAP32[$114$s2] = $79;
  if ((_test_keys1662($sk, $_06) | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_mpi_release(HEAP32[$110$s2]);
  HEAP32[$110$s2] = 0;
  __gcry_mpi_release(HEAP32[$111$s2]);
  HEAP32[$111$s2] = 0;
  __gcry_mpi_release(HEAP32[$112$s2]);
  HEAP32[$112$s2] = 0;
  __gcry_mpi_release(HEAP32[$113$s2]);
  HEAP32[$113$s2] = 0;
  __gcry_mpi_release(HEAP32[$114$s2]);
  HEAP32[$114$s2] = 0;
  __gcry_fips_signal_error(481204, 395, 494448, 0, 477092);
  var $_0 = 50;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_generate["X"] = 1;
function _run_selftests1772($algo, $extended, $report) {
  return ($algo | 0) == 301 ? 0 : 4;
}
function _ecc_generate_ext($algo, $nbits, $evalue, $genparms, $skey, $retfactors, $r_extrainfo) {
  var $28$s2;
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 52 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $usedcurve = __stackBase__ + 48;
  HEAP32[$usedcurve >> 2] = 0;
  do {
    if (($genparms | 0) == 0) {
      var $transient_key_0 = 0;
      var $curve_name_1 = 0;
    } else {
      var $3 = __gcry_sexp_find_token($genparms, 489148, 0);
      do {
        if (($3 | 0) == 0) {
          var $curve_name_0 = 0;
        } else {
          var $6 = __gcry_sexp_nth_string($3, 1);
          __gcry_sexp_release($3);
          if (($6 | 0) == 0) {
            var $_0 = 65;
          } else {
            var $curve_name_0 = $6;
            break;
          }
          var $_0;
          STACKTOP = __stackBase__;
          return $_0;
        }
      } while (0);
      var $curve_name_0;
      var $9 = __gcry_sexp_find_token($genparms, 488424, 0);
      if (($9 | 0) == 0) {
        var $transient_key_0 = 0;
        var $curve_name_1 = $curve_name_0;
        break;
      }
      __gcry_sexp_release($9);
      var $transient_key_0 = 1;
      var $curve_name_1 = $curve_name_0;
    }
  } while (0);
  var $curve_name_1;
  var $transient_key_0;
  if (($nbits | 0) == 0 & ($curve_name_1 | 0) == 0) {
    var $_0 = 68;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $16 = __gcry_mpi_new(0);
  var $17 = __gcry_mpi_new(0);
  var $18 = __gcry_mpi_new(0);
  var $19 = __gcry_mpi_new(0);
  var $20 = _generate_key($sk, $nbits, $curve_name_1, $transient_key_0, $16, $17, $18, $19, $usedcurve);
  __gcry_free($curve_name_1);
  if (($20 | 0) != 0) {
    var $_0 = $20;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $23 = HEAP32[$usedcurve >> 2];
  if (($23 | 0) != 0) {
    __gcry_sexp_build($r_extrainfo, 0, 488340, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $23, tempInt));
  }
  var $28$s2 = ($sk | 0) >> 2;
  HEAP32[$skey >> 2] = HEAP32[$28$s2];
  var $32 = $skey + 4 | 0;
  HEAP32[$32 >> 2] = HEAP32[$sk$s2 + 1];
  var $35 = $skey + 8 | 0;
  HEAP32[$35 >> 2] = HEAP32[$sk$s2 + 2];
  var $38 = $skey + 12 | 0;
  HEAP32[$38 >> 2] = _ec2os($16, $17, HEAP32[$28$s2]);
  var $41 = $skey + 16 | 0;
  HEAP32[$41 >> 2] = HEAP32[$sk$s2 + 6];
  var $44 = $skey + 20 | 0;
  HEAP32[$44 >> 2] = _ec2os($18, $19, HEAP32[$28$s2]);
  var $47 = $skey + 24 | 0;
  HEAP32[$47 >> 2] = HEAP32[$sk$s2 + 11];
  __gcry_mpi_free($16);
  __gcry_mpi_free($17);
  __gcry_mpi_free($18);
  __gcry_mpi_free($19);
  __gcry_mpi_ec_point_free($sk + 12 | 0);
  __gcry_mpi_ec_point_free($sk + 32 | 0);
  var $50 = __gcry_calloc(1, 4);
  HEAP32[$retfactors >> 2] = $50;
  if (($50 | 0) == 0) {
    var $_0 = _gpg_err_code_from_syserror();
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_log_mpidump(488156, HEAP32[$skey >> 2]);
  __gcry_log_mpidump(488084, HEAP32[$32 >> 2]);
  __gcry_log_mpidump(487768, HEAP32[$35 >> 2]);
  __gcry_log_mpidump(487752, HEAP32[$38 >> 2]);
  __gcry_log_mpidump(487724, HEAP32[$41 >> 2]);
  __gcry_log_mpidump(487628, HEAP32[$44 >> 2]);
  __gcry_log_mpidump(487556, HEAP32[$47 >> 2]);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_ecc_generate_ext["X"] = 1;
function _compute_keygrip1773($md, $keyparam) {
  var $tmpvalues11$s2;
  var $tmpvalues$s2;
  var $values12$s2;
  var $values$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $values = __stackBase__, $values$s2 = $values >> 2;
  var $values12$s2 = $values >> 2;
  var $tmpvalues = STACKTOP, $tmpvalues$s2 = $tmpvalues >> 2;
  STACKTOP = STACKTOP + 24 | 0;
  var $buf = STACKTOP;
  STACKTOP = STACKTOP + 30 | 0;
  STACKTOP = STACKTOP + 3 >> 2 << 2;
  var $rawmpilen = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  HEAP32[$values12$s2] = 0;
  HEAP32[$values12$s2 + 1] = 0;
  HEAP32[$values12$s2 + 2] = 0;
  HEAP32[$values12$s2 + 3] = 0;
  HEAP32[$values12$s2 + 4] = 0;
  HEAP32[$values12$s2 + 5] = 0;
  var $tmpvalues11$s2 = $tmpvalues >> 2;
  var $idx_1 = 0;
  while (1) {
    var $idx_1;
    if (($idx_1 | 0) >= 6) {
      label = 2426;
      break;
    }
    var $4 = __gcry_sexp_find_token($keyparam, $idx_1 + 459152 | 0, 1);
    if (($4 | 0) != 0) {
      var $8 = ($idx_1 << 2) + $values | 0;
      HEAP32[$8 >> 2] = __gcry_sexp_nth_mpi($4, 1, 5);
      __gcry_sexp_release($4);
      if ((HEAP32[$8 >> 2] | 0) == 0) {
        var $ec_1 = 65;
        break;
      }
    }
    var $idx_1 = $idx_1 + 1 | 0;
  }
  L2987 : do {
    if (label == 2426) {
      var $14 = __gcry_sexp_find_token($keyparam, 489148, 5);
      do {
        if (($14 | 0) == 0) {
          var $ec_0 = 0;
        } else {
          HEAP32[$tmpvalues11$s2] = 0;
          HEAP32[$tmpvalues11$s2 + 1] = 0;
          HEAP32[$tmpvalues11$s2 + 2] = 0;
          HEAP32[$tmpvalues11$s2 + 3] = 0;
          HEAP32[$tmpvalues11$s2 + 4] = 0;
          HEAP32[$tmpvalues11$s2 + 5] = 0;
          var $17 = __gcry_sexp_nth_string($14, 1);
          __gcry_sexp_release($14);
          if (($17 | 0) == 0) {
            var $ec_1 = 65;
            break L2987;
          }
          var $21 = _ecc_get_param($17, $tmpvalues | 0);
          __gcry_free($17);
          if (($21 | 0) != 0) {
            var $ec_1 = $21;
            break L2987;
          }
          var $23 = $values | 0;
          var $27 = HEAP32[$tmpvalues$s2];
          if ((HEAP32[$23 >> 2] | 0) == 0) {
            HEAP32[$23 >> 2] = $27;
          } else {
            __gcry_mpi_free($27);
          }
          var $31 = $values + 4 | 0;
          var $35 = HEAP32[$tmpvalues$s2 + 1];
          if ((HEAP32[$31 >> 2] | 0) == 0) {
            HEAP32[$31 >> 2] = $35;
          } else {
            __gcry_mpi_free($35);
          }
          var $78 = $values + 8 | 0;
          var $82 = HEAP32[$tmpvalues$s2 + 2];
          if ((HEAP32[$78 >> 2] | 0) == 0) {
            HEAP32[$78 >> 2] = $82;
          } else {
            __gcry_mpi_free($82);
          }
          var $86 = $values + 12 | 0;
          var $90 = HEAP32[$tmpvalues$s2 + 3];
          if ((HEAP32[$86 >> 2] | 0) == 0) {
            HEAP32[$86 >> 2] = $90;
          } else {
            __gcry_mpi_free($90);
          }
          var $94 = $values + 16 | 0;
          var $98 = HEAP32[$tmpvalues$s2 + 4];
          if ((HEAP32[$94 >> 2] | 0) == 0) {
            HEAP32[$94 >> 2] = $98;
          } else {
            __gcry_mpi_free($98);
          }
          var $102 = $values + 20 | 0;
          var $106 = HEAP32[$tmpvalues$s2 + 5];
          if ((HEAP32[$102 >> 2] | 0) == 0) {
            HEAP32[$102 >> 2] = $106;
            var $ec_0 = $21;
            break;
          } else {
            __gcry_mpi_free($106);
            var $ec_0 = $21;
            break;
          }
        }
      } while (0);
      var $ec_0;
      var $idx_4 = 0;
      while (1) {
        var $idx_4;
        if (($idx_4 | 0) >= 6) {
          break;
        }
        var $41 = HEAP32[($idx_4 << 2 >> 2) + $values$s2];
        if (($41 | 0) == 0) {
          var $ec_1 = 68;
          break L2987;
        }
        __gcry_mpi_normalize($41);
        var $idx_4 = $idx_4 + 1 | 0;
      }
      var $38 = $buf | 0;
      var $idx_5 = 0;
      while (1) {
        var $idx_5;
        if (($idx_5 | 0) >= 6) {
          var $ec_1 = $ec_0;
          break L2987;
        }
        var $50 = __gcry_mpi_get_buffer(HEAP32[($idx_5 << 2 >> 2) + $values$s2], $rawmpilen, 0);
        if (($50 | 0) == 0) {
          break;
        }
        var $58 = HEAP32[$rawmpilen >> 2];
        _snprintf($38, 30, 488520, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP8[$idx_5 + 459152 | 0] << 24 >> 24, HEAP32[tempInt + 4 >> 2] = $58, tempInt));
        __gcry_md_write($md, $38, _strlen($38));
        __gcry_md_write($md, $50, HEAP32[$rawmpilen >> 2]);
        __gcry_md_write($md, 488468, 1);
        __gcry_free($50);
        var $idx_5 = $idx_5 + 1 | 0;
      }
      var $ec_1 = _gpg_err_code_from_syserror();
    }
  } while (0);
  var $ec_1;
  __gcry_mpi_release(HEAP32[$values$s2]);
  __gcry_mpi_release(HEAP32[$values$s2 + 1]);
  __gcry_mpi_release(HEAP32[$values$s2 + 2]);
  __gcry_mpi_release(HEAP32[$values$s2 + 3]);
  __gcry_mpi_release(HEAP32[$values$s2 + 4]);
  __gcry_mpi_release(HEAP32[$values$s2 + 5]);
  STACKTOP = __stackBase__;
  return $ec_1;
}
_compute_keygrip1773["X"] = 1;
function _ecc_get_curve($pkey, $iterator, $r_nbits) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $E = __stackBase__;
  var $1 = ($r_nbits | 0) != 0;
  if ($1) {
    HEAP32[$r_nbits >> 2] = 0;
  }
  if (($pkey | 0) == 0) {
    if (!(($iterator | 0) > -1 & $iterator >>> 0 < 13)) {
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    var $10 = HEAP32[($iterator * 9 | 0) + 114286];
    if (!$1) {
      var $_0 = $10;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    HEAP32[$r_nbits >> 2] = HEAP32[($iterator * 9 | 0) + 114287];
    var $_0 = $10;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $15 = HEAP32[$pkey >> 2];
  if (($15 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $18 = $pkey + 4 | 0;
  if ((HEAP32[$18 >> 2] | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $22 = $pkey + 8 | 0;
  if ((HEAP32[$22 >> 2] | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $26 = $pkey + 12 | 0;
  if ((HEAP32[$26 >> 2] | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $30 = $pkey + 16 | 0;
  if ((HEAP32[$30 >> 2] | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $34 = $E | 0;
  HEAP32[$34 >> 2] = $15;
  var $36 = $E + 4 | 0;
  HEAP32[$36 >> 2] = HEAP32[$18 >> 2];
  var $38 = $E + 8 | 0;
  HEAP32[$38 >> 2] = HEAP32[$22 >> 2];
  var $39 = $E + 12 | 0;
  __gcry_mpi_ec_point_init($39);
  if ((_os2ec($39, HEAP32[$26 >> 2]) | 0) != 0) {
    __gcry_mpi_ec_point_free($39);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $45 = HEAP32[$30 >> 2];
  HEAP32[$E + 24 >> 2] = $45;
  var $47 = HEAP32[$34 >> 2];
  var $48 = HEAP32[$36 >> 2];
  var $49 = HEAP32[$38 >> 2];
  var $51 = HEAP32[$39 >> 2];
  var $53 = HEAP32[$E + 16 >> 2];
  var $idx_0 = 0;
  L3061 : while (1) {
    var $idx_0;
    var $55 = $idx_0 * 36 + 457144 | 0;
    if (($idx_0 | 0) == 12) {
      var $result_1 = 0;
      break;
    }
    var $60 = _scanval(HEAP32[($idx_0 * 9 | 0) + 114289]);
    do {
      if ((__gcry_mpi_cmp($60, $47) | 0) == 0) {
        __gcry_mpi_free($60);
        var $66 = _scanval(HEAP32[($idx_0 * 9 | 0) + 114290]);
        if ((__gcry_mpi_cmp($66, $48) | 0) != 0) {
          var $tmp_0 = $66;
          break;
        }
        __gcry_mpi_free($66);
        var $72 = _scanval(HEAP32[($idx_0 * 9 | 0) + 114291]);
        if ((__gcry_mpi_cmp($72, $49) | 0) != 0) {
          var $tmp_0 = $72;
          break;
        }
        __gcry_mpi_free($72);
        var $78 = _scanval(HEAP32[($idx_0 * 9 | 0) + 114292]);
        if ((__gcry_mpi_cmp($78, $45) | 0) != 0) {
          var $tmp_0 = $78;
          break;
        }
        __gcry_mpi_free($78);
        var $84 = _scanval(HEAP32[($idx_0 * 9 | 0) + 114293]);
        if ((__gcry_mpi_cmp($84, $51) | 0) != 0) {
          var $tmp_0 = $84;
          break;
        }
        __gcry_mpi_free($84);
        var $90 = _scanval(HEAP32[($idx_0 * 9 | 0) + 114294]);
        if ((__gcry_mpi_cmp($90, $53) | 0) == 0) {
          label = 2478;
          break L3061;
        } else {
          var $tmp_0 = $90;
        }
      } else {
        var $tmp_0 = $60;
      }
    } while (0);
    var $tmp_0;
    __gcry_mpi_free($tmp_0);
    var $idx_0 = $idx_0 + 1 | 0;
  }
  do {
    if (label == 2478) {
      var $94 = HEAP32[$55 >> 2];
      if (!$1) {
        var $result_1 = $94;
        break;
      }
      HEAP32[$r_nbits >> 2] = HEAP32[($idx_0 * 9 | 0) + 114287];
      var $result_1 = $94;
    }
  } while (0);
  var $result_1;
  __gcry_mpi_ec_point_free($39);
  var $_0 = $result_1;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_ecc_get_curve["X"] = 1;
function _ecc_get_param_sexp($name) {
  var $pkey$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 28 | 0;
  var $pkey = __stackBase__, $pkey$s2 = $pkey >> 2;
  var $result = __stackBase__ + 24;
  var $1 = $pkey | 0;
  if ((_ecc_get_param($name, $1) | 0) != 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $7 = HEAP32[$pkey$s2 + 1];
  var $9 = HEAP32[$pkey$s2 + 2];
  var $11 = HEAP32[$pkey$s2 + 3];
  var $13 = HEAP32[$pkey$s2 + 4];
  if ((__gcry_sexp_build($result, 0, 469040, (tempInt = STACKTOP, STACKTOP = STACKTOP + 20 | 0, HEAP32[tempInt >> 2] = HEAP32[$1 >> 2], HEAP32[tempInt + 4 >> 2] = $7, HEAP32[tempInt + 8 >> 2] = $9, HEAP32[tempInt + 12 >> 2] = $11, HEAP32[tempInt + 16 >> 2] = $13, tempInt)) | 0) != 0) {
    HEAP32[$result >> 2] = 0;
  }
  var $18 = HEAP32[$pkey$s2];
  L3083 : do {
    if (($18 | 0) != 0) {
      var $i_01 = 0;
      var $20 = $18;
      while (1) {
        var $20;
        var $i_01;
        __gcry_mpi_release($20);
        var $21 = $i_01 + 1 | 0;
        var $23 = HEAP32[($21 << 2 >> 2) + $pkey$s2];
        if (($23 | 0) == 0) {
          break L3083;
        } else {
          var $i_01 = $21;
          var $20 = $23;
        }
      }
    }
  } while (0);
  var $_0 = HEAP32[$result >> 2];
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _ecc_encrypt_raw($algo, $resarr, $k, $pkey, $flags) {
  var $26$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  var $pk = __stackBase__;
  var $R = __stackBase__ + 44;
  if (($k | 0) == 0) {
    var $_0 = 30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $3 = HEAP32[$pkey >> 2];
  if (($3 | 0) == 0) {
    var $_0 = 30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = $pkey + 4 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 0) {
    var $_0 = 30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $10 = $pkey + 8 | 0;
  if ((HEAP32[$10 >> 2] | 0) == 0) {
    var $_0 = 30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $14 = $pkey + 12 | 0;
  if ((HEAP32[$14 >> 2] | 0) == 0) {
    var $_0 = 30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $18 = $pkey + 16 | 0;
  if ((HEAP32[$18 >> 2] | 0) == 0) {
    var $_0 = 30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $22 = $pkey + 20 | 0;
  if ((HEAP32[$22 >> 2] | 0) == 0) {
    var $_0 = 30;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $26$s2 = ($pk | 0) >> 2;
  HEAP32[$26$s2] = $3;
  var $28 = $pk + 4 | 0;
  HEAP32[$28 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$pk + 8 >> 2] = HEAP32[$10 >> 2];
  var $31 = $pk + 12 | 0;
  __gcry_mpi_ec_point_init($31);
  var $33 = _os2ec($31, HEAP32[$14 >> 2]);
  if (($33 | 0) != 0) {
    __gcry_mpi_ec_point_free($31);
    var $_0 = $33;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$pk + 24 >> 2] = HEAP32[$18 >> 2];
  var $39 = $pk + 32 | 0;
  __gcry_mpi_ec_point_init($39);
  var $41 = _os2ec($39, HEAP32[$22 >> 2]);
  if (($41 | 0) != 0) {
    __gcry_mpi_ec_point_free($31);
    __gcry_mpi_ec_point_free($39);
    var $_0 = $41;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $47 = __gcry_mpi_ec_init(HEAP32[$26$s2], HEAP32[$28 >> 2]);
  var $48 = __gcry_mpi_new(0);
  var $49 = __gcry_mpi_new(0);
  __gcry_mpi_ec_point_init($R);
  __gcry_mpi_ec_mul_point($R, $k, $39, $47);
  if ((__gcry_mpi_ec_get_affine($48, $49, $R, $47) | 0) != 0) {
    __gcry_log_fatal(485060, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  var $55 = _ec2os($48, $49, HEAP32[$26$s2]);
  __gcry_mpi_ec_mul_point($R, $k, $31, $47);
  if ((__gcry_mpi_ec_get_affine($48, $49, $R, $47) | 0) != 0) {
    __gcry_log_fatal(484984, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  var $61 = _ec2os($48, $49, HEAP32[$26$s2]);
  __gcry_mpi_free($48);
  __gcry_mpi_free($49);
  __gcry_mpi_ec_point_free($R);
  __gcry_mpi_ec_free($47);
  __gcry_mpi_ec_point_free($31);
  __gcry_mpi_ec_point_free($39);
  if (($55 | 0) == 0 | ($61 | 0) == 0) {
    __gcry_mpi_free($55);
    __gcry_mpi_free($61);
    var $_0 = 32854;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    HEAP32[$resarr >> 2] = $55;
    HEAP32[$resarr + 4 >> 2] = $61;
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_ecc_encrypt_raw["X"] = 1;
function _ecc_decrypt_raw($algo, $result, $data, $skey, $flags) {
  var $39$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  var $sk = __stackBase__;
  var $R = __stackBase__ + 48;
  var $kG = __stackBase__ + 60;
  HEAP32[$result >> 2] = 0;
  do {
    if (($data | 0) == 0) {
      var $_0 = 30;
    } else {
      if ((HEAP32[$data >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      if ((HEAP32[$skey >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $9 = $skey + 4 | 0;
      if ((HEAP32[$9 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $13 = $skey + 8 | 0;
      if ((HEAP32[$13 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $17 = $skey + 12 | 0;
      if ((HEAP32[$17 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $21 = $skey + 16 | 0;
      if ((HEAP32[$21 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $25 = $skey + 20 | 0;
      if ((HEAP32[$25 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      var $29 = $skey + 24 | 0;
      if ((HEAP32[$29 >> 2] | 0) == 0) {
        var $_0 = 30;
        break;
      }
      __gcry_mpi_ec_point_init($kG);
      var $34 = _os2ec($kG, HEAP32[$data >> 2]);
      if (($34 | 0) != 0) {
        __gcry_mpi_ec_point_free($kG);
        var $_0 = $34;
        break;
      }
      var $39$s2 = ($sk | 0) >> 2;
      HEAP32[$39$s2] = HEAP32[$skey >> 2];
      var $41 = $sk + 4 | 0;
      HEAP32[$41 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$sk + 8 >> 2] = HEAP32[$13 >> 2];
      var $44 = $sk + 12 | 0;
      __gcry_mpi_ec_point_init($44);
      var $46 = _os2ec($44, HEAP32[$17 >> 2]);
      if (($46 | 0) != 0) {
        __gcry_mpi_ec_point_free($kG);
        __gcry_mpi_ec_point_free($44);
        var $_0 = $46;
        break;
      }
      HEAP32[$sk + 24 >> 2] = HEAP32[$21 >> 2];
      var $52 = $sk + 32 | 0;
      __gcry_mpi_ec_point_init($52);
      var $54 = _os2ec($52, HEAP32[$25 >> 2]);
      if (($54 | 0) != 0) {
        __gcry_mpi_ec_point_free($kG);
        __gcry_mpi_ec_point_free($44);
        __gcry_mpi_ec_point_free($52);
        var $_0 = $54;
        break;
      }
      var $59 = $sk + 44 | 0;
      HEAP32[$59 >> 2] = HEAP32[$29 >> 2];
      var $62 = __gcry_mpi_ec_init(HEAP32[$39$s2], HEAP32[$41 >> 2]);
      __gcry_mpi_ec_point_init($R);
      __gcry_mpi_ec_mul_point($R, HEAP32[$59 >> 2], $kG, $62);
      __gcry_mpi_ec_point_free($kG);
      var $64 = __gcry_mpi_new(0);
      var $65 = __gcry_mpi_new(0);
      if ((__gcry_mpi_ec_get_affine($64, $65, $R, $62) | 0) != 0) {
        __gcry_log_fatal(485156, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      }
      var $71 = _ec2os($64, $65, HEAP32[$39$s2]);
      __gcry_mpi_free($64);
      __gcry_mpi_free($65);
      __gcry_mpi_ec_point_free($R);
      __gcry_mpi_ec_free($62);
      __gcry_mpi_ec_point_free($kG);
      __gcry_mpi_ec_point_free($44);
      __gcry_mpi_ec_point_free($52);
      if (($71 | 0) == 0) {
        var $_0 = 32854;
        break;
      }
      HEAP32[$result >> 2] = $71;
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_ecc_decrypt_raw["X"] = 1;
function _ecc_get_param($name, $pkey) {
  var $6$s2;
  var $pkey$s2 = $pkey >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  var $E = __stackBase__ + 4;
  var $1 = _fill_in_curve(0, $name, $E, __stackBase__);
  if (($1 | 0) != 0) {
    var $_0 = $1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4 = __gcry_mpi_new(0);
  var $5 = __gcry_mpi_new(0);
  var $6$s2 = ($E | 0) >> 2;
  var $8 = $E + 4 | 0;
  var $10 = __gcry_mpi_ec_init(HEAP32[$6$s2], HEAP32[$8 >> 2]);
  var $11 = $E + 12 | 0;
  if ((__gcry_mpi_ec_get_affine($4, $5, $11, $10) | 0) != 0) {
    __gcry_log_fatal(465088, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_mpi_ec_free($10);
  __gcry_mpi_ec_point_free($11);
  HEAP32[$pkey$s2] = HEAP32[$6$s2];
  HEAP32[$pkey$s2 + 1] = HEAP32[$8 >> 2];
  HEAP32[$pkey$s2 + 2] = HEAP32[$E + 8 >> 2];
  HEAP32[$pkey$s2 + 3] = _ec2os($4, $5, HEAP32[$6$s2]);
  HEAP32[$pkey$s2 + 4] = HEAP32[$E + 24 >> 2];
  HEAP32[$pkey$s2 + 5] = 0;
  __gcry_mpi_free($4);
  __gcry_mpi_free($5);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _selftests_ecdsa() {
  return;
}
function __gcry_register_pk_elg_progress($cb, $cb_data) {
  HEAP32[110038] = $cb;
  HEAP32[110034] = $cb_data;
  return;
}
function _os2ec($result, $value) {
  var $x$s2;
  var $n$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  var $x = __stackBase__ + 4, $x$s2 = $x >> 2;
  var $y = __stackBase__ + 8;
  var $3 = (__gcry_mpi_get_nbits($value) + 7 | 0) >>> 3;
  HEAP32[$n$s2] = $3;
  var $4 = __gcry_xmalloc($3);
  var $6 = __gcry_mpi_print(5, $4, HEAP32[$n$s2], $n, $value);
  do {
    if (($6 | 0) == 0) {
      var $10 = HEAP32[$n$s2];
      if (($10 | 0) == 0) {
        __gcry_free($4);
        var $_0 = 65;
        break;
      }
      if (HEAP8[$4] << 24 >> 24 != 4) {
        __gcry_free($4);
        var $_0 = 69;
        break;
      }
      var $18 = $10 - 1 | 0;
      if (($18 & 1 | 0) != 0) {
        __gcry_free($4);
        var $_0 = 65;
        break;
      }
      var $23 = $18 >>> 1;
      HEAP32[$n$s2] = $23;
      var $25 = __gcry_mpi_scan($x, 5, $4 + 1 | 0, $23, 0);
      if (($25 | 0) != 0) {
        __gcry_free($4);
        var $_0 = $25;
        break;
      }
      var $29 = HEAP32[$n$s2];
      var $31 = __gcry_mpi_scan($y, 5, $29 + ($4 + 1) | 0, $29, 0);
      __gcry_free($4);
      if (($31 | 0) == 0) {
        __gcry_mpi_set(HEAP32[$result >> 2], HEAP32[$x$s2]);
        __gcry_mpi_set(HEAP32[$result + 4 >> 2], HEAP32[$y >> 2]);
        __gcry_mpi_set_ui(HEAP32[$result + 8 >> 2], 1);
        __gcry_mpi_free(HEAP32[$x$s2]);
        __gcry_mpi_free(HEAP32[$y >> 2]);
        var $_0 = 0;
        break;
      } else {
        __gcry_mpi_free(HEAP32[$x$s2]);
        var $_0 = $31;
        break;
      }
    } else {
      __gcry_free($4);
      var $_0 = $6;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_os2ec["X"] = 1;
function _fill_in_curve($nbits, $name, $curve, $r_nbits) {
  var $curve$s2 = $curve >> 2;
  var label = 0;
  L3185 : do {
    if (($name | 0) == 0) {
      var $idx_2 = 0;
      while (1) {
        var $idx_2;
        if (($idx_2 | 0) == 12) {
          var $_0 = 55;
          break;
        }
        if ((HEAP32[($idx_2 * 9 | 0) + 114287] | 0) == ($nbits | 0)) {
          var $idx_33 = $idx_2;
          var $resname_14 = 0;
          break L3185;
        } else {
          var $idx_2 = $idx_2 + 1 | 0;
        }
      }
      var $_0;
      return $_0;
    } else {
      var $idx_0 = 0;
      while (1) {
        var $idx_0;
        if (($idx_0 | 0) == 12) {
          var $aliasno_0 = 0;
          break;
        }
        var $5 = HEAP32[($idx_0 * 9 | 0) + 114286];
        if ((_strcmp($name, $5) | 0) == 0) {
          var $idx_33 = $idx_0;
          var $resname_14 = $5;
          break L3185;
        } else {
          var $idx_0 = $idx_0 + 1 | 0;
        }
      }
      while (1) {
        var $aliasno_0;
        if (($aliasno_0 | 0) == 19) {
          label = 2584;
          break;
        }
        var $10 = ($aliasno_0 << 3) + 457956 | 0;
        if ((_strcmp($name, HEAP32[($aliasno_0 << 3) + 457960 >> 2]) | 0) == 0) {
          var $idx_1 = 0;
          break;
        } else {
          var $aliasno_0 = $aliasno_0 + 1 | 0;
        }
      }
      if (label == 2584) {
        if (($idx_0 | 0) == 12) {
          var $_0 = 55;
        } else {
          var $idx_33 = $idx_0;
          var $resname_14 = 0;
          break;
        }
        var $_0;
        return $_0;
      }
      while (1) {
        var $idx_1;
        if (($idx_1 | 0) == 12) {
          var $_0 = 55;
          break;
        }
        var $19 = HEAP32[($idx_1 * 9 | 0) + 114286];
        if ((_strcmp(HEAP32[$10 >> 2], $19) | 0) == 0) {
          var $idx_33 = $idx_1;
          var $resname_14 = $19;
          break L3185;
        } else {
          var $idx_1 = $idx_1 + 1 | 0;
        }
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $resname_14;
  var $idx_33;
  do {
    if ((__gcry_fips_mode() | 0) != 0) {
      if ((HEAP32[($idx_33 * 9 | 0) + 114288] & 1 | 0) == 0) {
        var $_0 = 60;
      } else {
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  HEAP32[$r_nbits >> 2] = HEAP32[($idx_33 * 9 | 0) + 114287];
  HEAP32[$curve$s2] = _scanval(HEAP32[($idx_33 * 9 | 0) + 114289]);
  HEAP32[$curve$s2 + 1] = _scanval(HEAP32[($idx_33 * 9 | 0) + 114290]);
  HEAP32[$curve$s2 + 2] = _scanval(HEAP32[($idx_33 * 9 | 0) + 114291]);
  HEAP32[$curve$s2 + 6] = _scanval(HEAP32[($idx_33 * 9 | 0) + 114292]);
  HEAP32[$curve$s2 + 3] = _scanval(HEAP32[($idx_33 * 9 | 0) + 114293]);
  HEAP32[$curve$s2 + 4] = _scanval(HEAP32[($idx_33 * 9 | 0) + 114294]);
  HEAP32[$curve$s2 + 5] = __gcry_mpi_alloc_set_ui(1);
  HEAP32[$curve$s2 + 7] = $resname_14;
  var $_0 = 0;
  var $_0;
  return $_0;
}
_fill_in_curve["X"] = 1;
function _gen_k1774($p, $security_level) {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_mpi_get_nbits($p);
  var $2 = __gcry_mpi_snew($1);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(485300, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $security_level, tempInt));
  }
  __gcry_mpi_randomize($2, $1, $security_level);
  __gcry_mpi_mod($2, $2, $p);
  STACKTOP = __stackBase__;
  return $2;
}
function _point_set($d, $s) {
  __gcry_mpi_set(HEAP32[$d >> 2], HEAP32[$s >> 2]);
  __gcry_mpi_set(HEAP32[$d + 4 >> 2], HEAP32[$s + 4 >> 2]);
  __gcry_mpi_set(HEAP32[$d + 8 >> 2], HEAP32[$s + 8 >> 2]);
  return;
}
function _curve_free($E) {
  var $1 = $E | 0;
  __gcry_mpi_free(HEAP32[$1 >> 2]);
  HEAP32[$1 >> 2] = 0;
  var $3 = $E + 4 | 0;
  __gcry_mpi_free(HEAP32[$3 >> 2]);
  HEAP32[$3 >> 2] = 0;
  var $5 = $E + 8 | 0;
  __gcry_mpi_free(HEAP32[$5 >> 2]);
  HEAP32[$5 >> 2] = 0;
  __gcry_mpi_ec_point_free($E + 12 | 0);
  var $8 = $E + 24 | 0;
  __gcry_mpi_free(HEAP32[$8 >> 2]);
  HEAP32[$8 >> 2] = 0;
  return;
}
function _curve_copy($agg_result, $E) {
  var $20$s2;
  var $19$s2;
  var $R$s2;
  var tempParam$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var tempParam$s2 = $E >> 2;
  $E = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  HEAP32[$E >> 2] = HEAP32[tempParam$s2];
  HEAP32[$E + 4 >> 2] = HEAP32[tempParam$s2 + 1];
  HEAP32[$E + 8 >> 2] = HEAP32[tempParam$s2 + 2];
  HEAP32[$E + 12 >> 2] = HEAP32[tempParam$s2 + 3];
  HEAP32[$E + 16 >> 2] = HEAP32[tempParam$s2 + 4];
  HEAP32[$E + 20 >> 2] = HEAP32[tempParam$s2 + 5];
  HEAP32[$E + 24 >> 2] = HEAP32[tempParam$s2 + 6];
  HEAP32[$E + 28 >> 2] = HEAP32[tempParam$s2 + 7];
  var $R = __stackBase__, $R$s2 = $R >> 2;
  HEAP32[$R$s2] = __gcry_mpi_copy(HEAP32[$E >> 2]);
  HEAP32[$R$s2 + 1] = __gcry_mpi_copy(HEAP32[$E + 4 >> 2]);
  HEAP32[$R$s2 + 2] = __gcry_mpi_copy(HEAP32[$E + 8 >> 2]);
  var $13 = $R + 12 | 0;
  __gcry_mpi_ec_point_init($13);
  _point_set($13, $E + 12 | 0);
  HEAP32[$R$s2 + 6] = __gcry_mpi_copy(HEAP32[$E + 24 >> 2]);
  var $19$s2 = $agg_result >> 2;
  var $20$s2 = $R >> 2;
  HEAP32[$19$s2] = HEAP32[$20$s2];
  HEAP32[$19$s2 + 1] = HEAP32[$20$s2 + 1];
  HEAP32[$19$s2 + 2] = HEAP32[$20$s2 + 2];
  HEAP32[$19$s2 + 3] = HEAP32[$20$s2 + 3];
  HEAP32[$19$s2 + 4] = HEAP32[$20$s2 + 4];
  HEAP32[$19$s2 + 5] = HEAP32[$20$s2 + 5];
  HEAP32[$19$s2 + 6] = HEAP32[$20$s2 + 6];
  HEAP32[$19$s2 + 7] = HEAP32[$20$s2 + 7];
  STACKTOP = __stackBase__;
  return;
}
function _sign1776($input, $skey, $r, $s) {
  var $19$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $I = __stackBase__;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_mpidump(485884, $input);
  }
  var $5 = __gcry_mpi_alloc(0);
  var $6 = __gcry_mpi_alloc(0);
  var $7 = __gcry_mpi_alloc(0);
  var $8 = __gcry_mpi_alloc(0);
  __gcry_mpi_ec_point_init($I);
  __gcry_mpi_set_ui($s, 0);
  __gcry_mpi_set_ui($r, 0);
  var $15 = __gcry_mpi_ec_init(HEAP32[$skey >> 2], HEAP32[$skey + 4 >> 2]);
  var $16 = $skey + 24 | 0;
  var $17 = $skey + 12 | 0;
  var $18 = $skey + 44 | 0;
  var $19$s2 = ($skey + 24 | 0) >> 2;
  var $k_0 = 0;
  L3220 : while (1) {
    var $k_0;
    if ((__gcry_mpi_cmp_ui($s, 0) | 0) == 0) {
      var $k_1 = $k_0;
    } else {
      label = 2610;
      break;
    }
    while (1) {
      var $k_1;
      if ((__gcry_mpi_cmp_ui($r, 0) | 0) != 0) {
        break;
      }
      __gcry_mpi_free($k_1);
      var $27 = _gen_k1774(HEAP32[$16 >> 2], 1);
      __gcry_mpi_ec_mul_point($I, $27, $17, $15);
      if ((__gcry_mpi_ec_get_affine($8, 0, $I, $15) | 0) != 0) {
        label = 2606;
        break L3220;
      }
      __gcry_mpi_mod($r, $8, HEAP32[$16 >> 2]);
      var $k_1 = $27;
    }
    __gcry_mpi_mulm($5, HEAP32[$18 >> 2], $r, HEAP32[$19$s2]);
    __gcry_mpi_addm($6, $input, $5, HEAP32[$19$s2]);
    __gcry_mpi_invm($7, $k_1, HEAP32[$19$s2]);
    __gcry_mpi_mulm($s, $7, $6, HEAP32[$19$s2]);
    var $k_0 = $k_1;
  }
  do {
    if (label == 2606) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $k_2 = $27;
        var $err_0 = 8;
        break;
      }
      __gcry_log_debug(485832, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $k_2 = $27;
      var $err_0 = 8;
    } else if (label == 2610) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $k_2 = $k_0;
        var $err_0 = 0;
        break;
      }
      __gcry_log_mpidump(485692, $r);
      __gcry_log_mpidump(485624, $s);
      var $k_2 = $k_0;
      var $err_0 = 0;
    }
  } while (0);
  var $err_0;
  var $k_2;
  __gcry_mpi_ec_free($15);
  __gcry_mpi_ec_point_free($I);
  __gcry_mpi_free($8);
  __gcry_mpi_free($7);
  __gcry_mpi_free($6);
  __gcry_mpi_free($5);
  __gcry_mpi_free($k_2);
  STACKTOP = __stackBase__;
  return $err_0;
}
_sign1776["X"] = 1;
function _verify1777($input, $pkey, $r, $s) {
  var $4$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  var $Q = __stackBase__;
  var $Q1 = __stackBase__ + 12;
  var $Q2 = __stackBase__ + 24;
  if ((__gcry_mpi_cmp_ui($r, 0) | 0) <= 0) {
    var $_0 = 8;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4$s2 = ($pkey + 24 | 0) >> 2;
  if ((__gcry_mpi_cmp($r, HEAP32[$4$s2]) | 0) >= 0) {
    var $_0 = 8;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_mpi_cmp_ui($s, 0) | 0) <= 0) {
    var $_0 = 8;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_mpi_cmp($s, HEAP32[$4$s2]) | 0) >= 0) {
    var $_0 = 8;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $16 = __gcry_mpi_alloc(0);
  var $17 = __gcry_mpi_alloc(0);
  var $18 = __gcry_mpi_alloc(0);
  var $19 = __gcry_mpi_alloc(0);
  var $20 = __gcry_mpi_alloc(0);
  __gcry_mpi_ec_point_init($Q);
  __gcry_mpi_ec_point_init($Q1);
  __gcry_mpi_ec_point_init($Q2);
  var $25 = __gcry_mpi_ec_init(HEAP32[$pkey >> 2], HEAP32[$pkey + 4 >> 2]);
  __gcry_mpi_invm($16, $s, HEAP32[$4$s2]);
  __gcry_mpi_mulm($17, $input, $16, HEAP32[$4$s2]);
  __gcry_mpi_ec_mul_point($Q1, $17, $pkey + 12 | 0, $25);
  __gcry_mpi_mulm($18, $r, $16, HEAP32[$4$s2]);
  __gcry_mpi_ec_mul_point($Q2, $18, $pkey + 32 | 0, $25);
  __gcry_mpi_ec_add_points($Q, $Q1, $Q2, $25);
  do {
    if ((__gcry_mpi_cmp_ui(HEAP32[$Q + 8 >> 2], 0) | 0) == 0) {
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $err_0 = 8;
        break;
      }
      __gcry_log_debug(486572, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      var $err_0 = 8;
    } else {
      if ((__gcry_mpi_ec_get_affine($19, $20, $Q, $25) | 0) != 0) {
        if ((__gcry_get_debug_flag(1) | 0) == 0) {
          var $err_0 = 8;
          break;
        }
        __gcry_log_debug(486452, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        var $err_0 = 8;
        break;
      }
      __gcry_mpi_mod($19, $19, HEAP32[$4$s2]);
      var $50 = (__gcry_mpi_cmp($19, $r) | 0) == 0;
      var $52 = (__gcry_get_debug_flag(1) | 0) != 0;
      if ($50) {
        if (!$52) {
          var $err_0 = 0;
          break;
        }
        __gcry_log_debug(485912, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        var $err_0 = 0;
        break;
      } else {
        if (!$52) {
          var $err_0 = 8;
          break;
        }
        __gcry_log_mpidump(486148, $19);
        __gcry_log_mpidump(486124, $20);
        __gcry_log_mpidump(486108, $r);
        __gcry_log_mpidump(486040, $s);
        __gcry_log_debug(485956, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
        var $err_0 = 8;
        break;
      }
    }
  } while (0);
  var $err_0;
  __gcry_mpi_ec_free($25);
  __gcry_mpi_ec_point_free($Q2);
  __gcry_mpi_ec_point_free($Q1);
  __gcry_mpi_ec_point_free($Q);
  __gcry_mpi_free($20);
  __gcry_mpi_free($19);
  __gcry_mpi_free($18);
  __gcry_mpi_free($17);
  __gcry_mpi_free($16);
  var $_0 = $err_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_verify1777["X"] = 1;
function _check_secret_key1778($sk) {
  var $sk$s2 = $sk >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $Q = __stackBase__;
  var $1 = __gcry_mpi_alloc(0);
  var $3 = $sk + 12 | 0;
  var $6 = _gen_y_2(HEAP32[$3 >> 2], $sk | 0);
  var $8 = HEAP32[$sk$s2 + 4];
  var $9 = $sk | 0;
  __gcry_mpi_mulm($1, $8, $8, HEAP32[$9 >> 2]);
  if ((__gcry_mpi_cmp($6, $1) | 0) != 0) {
    if ((__gcry_get_debug_flag(1) | 0) == 0) {
      var $_0 = 1;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    __gcry_log_debug(484756, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    var $_0 = 1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_mpi_cmp_ui(HEAP32[$sk$s2 + 5], 0) | 0) == 0) {
    if ((__gcry_get_debug_flag(1) | 0) == 0) {
      var $_0 = 1;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
    __gcry_log_debug(484708, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    var $_0 = 1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_mpi_ec_point_init($Q);
  var $30 = __gcry_mpi_ec_init(HEAP32[$9 >> 2], HEAP32[$sk$s2 + 1]);
  __gcry_mpi_ec_mul_point($Q, HEAP32[$sk$s2 + 6], $3, $30);
  var $33 = $Q + 8 | 0;
  if ((__gcry_mpi_cmp_ui(HEAP32[$33 >> 2], 0) | 0) != 0) {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      __gcry_log_debug(484432, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    __gcry_mpi_ec_point_free($Q);
    __gcry_mpi_ec_free($30);
    var $_0 = 1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $43 = $sk + 40 | 0;
  if ((__gcry_mpi_cmp_ui(HEAP32[$43 >> 2], 0) | 0) == 0) {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      __gcry_log_debug(484384, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
    __gcry_mpi_ec_free($30);
    var $_0 = 1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_mpi_ec_mul_point($Q, HEAP32[$sk$s2 + 11], $3, $30);
  do {
    if ((HEAP32[$Q >> 2] | 0) == (HEAP32[$sk$s2 + 8] | 0)) {
      if ((HEAP32[$Q + 4 >> 2] | 0) != (HEAP32[$sk$s2 + 9] | 0)) {
        break;
      }
      if ((HEAP32[$33 >> 2] | 0) != (HEAP32[$43 >> 2] | 0)) {
        break;
      }
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        __gcry_log_debug(484316, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
      }
      __gcry_mpi_ec_free($30);
      var $_0 = 1;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  __gcry_mpi_ec_free($30);
  __gcry_mpi_ec_point_free($Q);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_check_secret_key1778["X"] = 1;
function _gen_y_2($x, $base) {
  var $5$s2;
  var $1 = __gcry_mpi_alloc_set_ui(3);
  var $2 = __gcry_mpi_new(0);
  var $3 = __gcry_mpi_new(0);
  var $4 = __gcry_mpi_new(0);
  var $5$s2 = ($base | 0) >> 2;
  __gcry_mpi_powm($2, $x, $1, HEAP32[$5$s2]);
  __gcry_mpi_mulm($3, HEAP32[$base + 4 >> 2], $x, HEAP32[$5$s2]);
  __gcry_mpi_addm($3, $3, HEAP32[$base + 8 >> 2], HEAP32[$5$s2]);
  __gcry_mpi_addm($4, $2, $3, HEAP32[$5$s2]);
  __gcry_mpi_free($2);
  __gcry_mpi_free($3);
  __gcry_mpi_free($1);
  return $4;
}
function _scanval($string) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $val = __stackBase__;
  var $1 = __gcry_mpi_scan($val, 4, $string, 0, 0);
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return HEAP32[$val >> 2];
  } else {
    var $4 = _gpg_strerror($1);
    __gcry_log_fatal(467452, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
  }
}
function _ec2os($x, $y, $p) {
  var $n$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $n = __stackBase__, $n$s2 = $n >> 2;
  var $result = __stackBase__ + 4;
  var $2 = __gcry_mpi_get_nbits($p) + 7 | 0;
  var $3 = $2 >>> 3;
  var $5 = $2 >>> 2 | 1;
  var $6 = __gcry_xmalloc($5);
  HEAP8[$6] = 4;
  var $7 = $6 + 1 | 0;
  var $8 = __gcry_mpi_print(5, $7, $3, $n, $x);
  if (($8 | 0) != 0) {
    var $11 = _gpg_strerror($8);
    __gcry_log_fatal(465048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $11, tempInt));
  }
  var $13 = HEAP32[$n$s2];
  if ($13 >>> 0 < $3 >>> 0) {
    _memmove($6 + ($3 + 1 - $13) | 0, $7, $13, 1, 0);
    _memset($7, 0, $3 - HEAP32[$n$s2] | 0);
  }
  var $_sum = $3 + 1 | 0;
  var $21 = $6 + $_sum | 0;
  var $22 = __gcry_mpi_print(5, $21, $3, $n, $y);
  if (($22 | 0) != 0) {
    var $25 = _gpg_strerror($22);
    __gcry_log_fatal(465048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $25, tempInt));
  }
  var $27 = HEAP32[$n$s2];
  if ($27 >>> 0 < $3 >>> 0) {
    _memmove($6 + ($_sum + $3 - $27) | 0, $21, $27, 1, 0);
    _memset($21, 0, $3 - HEAP32[$n$s2] | 0);
  }
  var $35 = __gcry_mpi_scan($result, 5, $6, $5, 0);
  if (($35 | 0) == 0) {
    __gcry_free($6);
    STACKTOP = __stackBase__;
    return HEAP32[$result >> 2];
  } else {
    var $38 = _gpg_strerror($35);
    __gcry_log_fatal(464948, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $38, tempInt));
  }
}
_ec2os["X"] = 1;
function _generate_key($sk, $nbits, $name, $transient_key, $g_x, $g_y, $q_x, $q_y, $r_usedcurve) {
  var $E$s2;
  var $1$s2;
  var $sk$s2 = $sk >> 2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  var $1 = __stackBase__, $1$s2 = $1 >> 2;
  var $E = __stackBase__ + 4, $E$s2 = $E >> 2;
  var $Q = __stackBase__ + 36;
  HEAP32[$1$s2] = $nbits;
  HEAP32[$r_usedcurve >> 2] = 0;
  var $3 = _fill_in_curve(HEAP32[$1$s2], $name, $E, $1);
  if (($3 | 0) != 0) {
    var $_0 = $3;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  do {
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      __gcry_log_mpidump(487536, HEAP32[$E$s2]);
      __gcry_log_mpidump(487496, HEAP32[$E$s2 + 1]);
      __gcry_log_mpidump(487472, HEAP32[$E$s2 + 2]);
      __gcry_log_mpidump(487412, HEAP32[$E$s2 + 6]);
      __gcry_log_mpidump(487380, HEAP32[$E$s2 + 3]);
      __gcry_log_mpidump(487084, HEAP32[$E$s2 + 4]);
      __gcry_log_mpidump(487060, HEAP32[$E$s2 + 5]);
      var $24 = HEAP32[$E$s2 + 7];
      if (($24 | 0) == 0) {
        break;
      }
      __gcry_log_debug(487028, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $24, tempInt));
    }
  } while (0);
  var $30 = $E + 24 | 0;
  var $32 = _gen_k1774(HEAP32[$30 >> 2], ($transient_key | 0) != 0 ? 1 : 2);
  __gcry_mpi_ec_point_init($Q);
  var $33 = $E | 0;
  var $35 = $E + 4 | 0;
  var $37 = __gcry_mpi_ec_init(HEAP32[$33 >> 2], HEAP32[$35 >> 2]);
  var $38 = $E + 12 | 0;
  __gcry_mpi_ec_mul_point($Q, $32, $38, $37);
  HEAP32[$sk$s2] = __gcry_mpi_copy(HEAP32[$33 >> 2]);
  HEAP32[$sk$s2 + 1] = __gcry_mpi_copy(HEAP32[$35 >> 2]);
  HEAP32[$sk$s2 + 2] = __gcry_mpi_copy(HEAP32[$E$s2 + 2]);
  var $49 = $sk + 12 | 0;
  __gcry_mpi_ec_point_init($49);
  _point_set($49, $38);
  HEAP32[$sk$s2 + 6] = __gcry_mpi_copy(HEAP32[$30 >> 2]);
  var $53 = $sk + 32 | 0;
  __gcry_mpi_ec_point_init($53);
  _point_set($53, $Q);
  HEAP32[$sk$s2 + 11] = __gcry_mpi_copy($32);
  do {
    if (!(($g_x | 0) == 0 | ($g_y | 0) == 0)) {
      if ((__gcry_mpi_ec_get_affine($g_x, $g_y, $49, $37) | 0) == 0) {
        break;
      }
      __gcry_log_fatal(486940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
  } while (0);
  do {
    if (!(($q_x | 0) == 0 | ($q_y | 0) == 0)) {
      if ((__gcry_mpi_ec_get_affine($q_x, $q_y, $53, $37) | 0) == 0) {
        break;
      }
      __gcry_log_fatal(486940, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    }
  } while (0);
  __gcry_mpi_ec_free($37);
  __gcry_mpi_ec_point_free($Q);
  __gcry_mpi_free($32);
  HEAP32[$r_usedcurve >> 2] = HEAP32[$E$s2 + 7];
  _curve_free($E);
  _test_keys1775($sk, HEAP32[$1$s2] - 64 | 0);
  var $_0 = 0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_generate_key["X"] = 1;
function _test_keys1775($sk, $nbits) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  var $pk = __stackBase__;
  var $R_ = __stackBase__ + 44;
  var $1 = __gcry_mpi_new($nbits);
  var $2 = __gcry_mpi_new($nbits);
  var $3 = __gcry_mpi_new($nbits);
  var $4 = __gcry_mpi_new($nbits);
  var $5 = __gcry_mpi_new($nbits);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(486836, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_mpi_ec_point_init($R_);
  var $10 = $pk | 0;
  _curve_copy($pk | 0, $sk | 0);
  var $12 = $pk + 32 | 0;
  __gcry_mpi_ec_point_init($12);
  _point_set($12, $sk + 32 | 0);
  __gcry_mpi_randomize($1, $nbits, 0);
  if ((_sign1776($1, $sk, $4, $5) | 0) != 0) {
    __gcry_log_fatal(486796, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((_verify1777($1, $pk, $4, $5) | 0) != 0) {
    __gcry_log_fatal(486744, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    __gcry_mpi_ec_point_free($12);
    _curve_free($10);
    __gcry_mpi_ec_point_free($R_);
    __gcry_mpi_free($5);
    __gcry_mpi_free($4);
    __gcry_mpi_free($3);
    __gcry_mpi_free($2);
    __gcry_mpi_free($1);
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_log_debug(486700, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  __gcry_mpi_ec_point_free($12);
  _curve_free($10);
  __gcry_mpi_ec_point_free($R_);
  __gcry_mpi_free($5);
  __gcry_mpi_free($4);
  __gcry_mpi_free($3);
  __gcry_mpi_free($2);
  __gcry_mpi_free($1);
  STACKTOP = __stackBase__;
  return;
}
function _elg_generate($algo, $nbits, $evalue, $skey, $retfactors) {
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  _generate1810($sk, $nbits, $retfactors);
  HEAP32[$skey >> 2] = HEAP32[$sk$s2];
  HEAP32[$skey + 4 >> 2] = HEAP32[$sk$s2 + 1];
  HEAP32[$skey + 8 >> 2] = HEAP32[$sk$s2 + 2];
  HEAP32[$skey + 12 >> 2] = HEAP32[$sk$s2 + 3];
  STACKTOP = __stackBase__;
  return 0;
}
function _elg_check_secret_key($algo, $skey) {
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  var $1 = HEAP32[$skey >> 2];
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $4 = $skey + 4 | 0;
  if ((HEAP32[$4 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $8 = $skey + 8 | 0;
  if ((HEAP32[$8 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $12 = $skey + 12 | 0;
  if ((HEAP32[$12 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  } else {
    HEAP32[$sk$s2] = $1;
    HEAP32[$sk$s2 + 1] = HEAP32[$4 >> 2];
    HEAP32[$sk$s2 + 2] = HEAP32[$8 >> 2];
    HEAP32[$sk$s2 + 3] = HEAP32[$12 >> 2];
    var $_ = (_check_secret_key1818($sk) | 0) == 0 ? 7 : 0;
    STACKTOP = __stackBase__;
    return $_;
  }
}
function _gpg_err_make1869($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 16777216;
  }
  var $6;
  return $6;
}
function _wiener_map($n) {
  var label = 0;
  var $i_0 = 0;
  while (1) {
    var $i_0;
    if (($i_0 | 0) == 19) {
      label = 8;
      break;
    }
    if (HEAP32[($i_0 << 3) + 409620 >> 2] >>> 0 < $n >>> 0) {
      var $i_0 = $i_0 + 1 | 0;
    } else {
      label = 7;
      break;
    }
  }
  if (label == 7) {
    var $_0 = HEAP32[($i_0 << 3) + 409624 >> 2];
    var $_0;
    return $_0;
  } else if (label == 8) {
    var $_0 = ($n >>> 3) + 200 | 0;
    var $_0;
    return $_0;
  }
}
function _elg_encrypt($algo, $resarr, $data, $pkey, $flags) {
  var $14$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $pk = __stackBase__;
  do {
    if (($data | 0) == 0) {
      var $err_0 = 30;
    } else {
      var $3 = HEAP32[$pkey >> 2];
      if (($3 | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $6 = $pkey + 4 | 0;
      if ((HEAP32[$6 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $10 = $pkey + 8 | 0;
      if ((HEAP32[$10 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $14$s2 = ($pk | 0) >> 2;
      HEAP32[$14$s2] = $3;
      HEAP32[$pk + 4 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$pk + 8 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$resarr >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[$14$s2] + 4 >> 2]);
      var $26 = __gcry_mpi_alloc(HEAP32[HEAP32[$14$s2] + 4 >> 2]);
      HEAP32[$resarr + 4 >> 2] = $26;
      _do_encrypt1813(HEAP32[$resarr >> 2], $26, $data, $pk);
      var $err_0 = 0;
    }
  } while (0);
  var $err_0;
  STACKTOP = __stackBase__;
  return $err_0;
}
function _elg_decrypt($algo, $result, $data, $skey, $flags) {
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  do {
    if ((HEAP32[$data >> 2] | 0) == 0) {
      var $err_0 = 30;
    } else {
      var $4 = $data + 4 | 0;
      if ((HEAP32[$4 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $8 = HEAP32[$skey >> 2];
      if (($8 | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $11 = $skey + 4 | 0;
      if ((HEAP32[$11 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $15 = $skey + 8 | 0;
      if ((HEAP32[$15 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $19 = $skey + 12 | 0;
      if ((HEAP32[$19 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $23 = $sk | 0;
      HEAP32[$23 >> 2] = $8;
      HEAP32[$sk$s2 + 1] = HEAP32[$11 >> 2];
      HEAP32[$sk$s2 + 2] = HEAP32[$15 >> 2];
      HEAP32[$sk$s2 + 3] = HEAP32[$19 >> 2];
      var $33 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[$23 >> 2] + 4 >> 2]);
      HEAP32[$result >> 2] = $33;
      _decrypt1814($33, HEAP32[$data >> 2], HEAP32[$4 >> 2], $sk);
      var $err_0 = 0;
    }
  } while (0);
  var $err_0;
  STACKTOP = __stackBase__;
  return $err_0;
}
function _elg_sign($algo, $resarr, $data, $skey) {
  var $18$s2;
  var $sk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  do {
    if (($data | 0) == 0) {
      var $err_0 = 30;
    } else {
      var $3 = HEAP32[$skey >> 2];
      if (($3 | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $6 = $skey + 4 | 0;
      if ((HEAP32[$6 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $10 = $skey + 8 | 0;
      if ((HEAP32[$10 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $14 = $skey + 12 | 0;
      if ((HEAP32[$14 >> 2] | 0) == 0) {
        var $err_0 = 30;
        break;
      }
      var $18$s2 = ($sk | 0) >> 2;
      HEAP32[$18$s2] = $3;
      HEAP32[$sk$s2 + 1] = HEAP32[$6 >> 2];
      HEAP32[$sk$s2 + 2] = HEAP32[$10 >> 2];
      HEAP32[$sk$s2 + 3] = HEAP32[$14 >> 2];
      HEAP32[$resarr >> 2] = __gcry_mpi_alloc(HEAP32[HEAP32[$18$s2] + 4 >> 2]);
      var $32 = __gcry_mpi_alloc(HEAP32[HEAP32[$18$s2] + 4 >> 2]);
      HEAP32[$resarr + 4 >> 2] = $32;
      _sign1815(HEAP32[$resarr >> 2], $32, $data, $sk);
      var $err_0 = 0;
    }
  } while (0);
  var $err_0;
  STACKTOP = __stackBase__;
  return $err_0;
}
function _elg_verify($algo, $hash, $data, $pkey, $cmp, $opaquev) {
  var $pk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $pk = __stackBase__, $pk$s2 = $pk >> 2;
  if ((HEAP32[$data >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $4 = $data + 4 | 0;
  if ((HEAP32[$4 >> 2] | 0) == 0 | ($hash | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $9 = HEAP32[$pkey >> 2];
  if (($9 | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $12 = $pkey + 4 | 0;
  if ((HEAP32[$12 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  }
  var $16 = $pkey + 8 | 0;
  if ((HEAP32[$16 >> 2] | 0) == 0) {
    STACKTOP = __stackBase__;
    return 30;
  } else {
    HEAP32[$pk$s2] = $9;
    HEAP32[$pk$s2 + 1] = HEAP32[$12 >> 2];
    HEAP32[$pk$s2 + 2] = HEAP32[$16 >> 2];
    var $_ = (_verify1816(HEAP32[$data >> 2], HEAP32[$4 >> 2], $hash, $pk) | 0) == 0 ? 8 : 0;
    STACKTOP = __stackBase__;
    return $_;
  }
}
function _elg_get_nbits($algo, $pkey) {
  return __gcry_mpi_get_nbits(HEAP32[$pkey >> 2]);
}
function _elg_generate_ext($algo, $nbits, $evalue, $genparms, $skey, $retfactors, $r_extrainfo) {
  var $sk$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  var $sk = __stackBase__, $sk$s2 = $sk >> 2;
  do {
    if (($genparms | 0) == 0) {
      label = 50;
    } else {
      var $3 = __gcry_sexp_find_token($genparms, 471968, 0);
      if (($3 | 0) == 0) {
        label = 50;
        break;
      }
      var $6 = __gcry_sexp_nth_mpi($3, 1, 0);
      __gcry_sexp_release($3);
      if (($6 | 0) == 0) {
        var $_0 = 30;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      } else {
        var $ec_0 = _generate_using_x($sk, $nbits, $6, $retfactors);
        break;
      }
    }
  } while (0);
  if (label == 50) {
    _generate1810($sk, $nbits, $retfactors);
    var $ec_0 = 0;
  }
  var $ec_0;
  HEAP32[$skey >> 2] = HEAP32[$sk$s2];
  HEAP32[$skey + 4 >> 2] = HEAP32[$sk$s2 + 1];
  HEAP32[$skey + 8 >> 2] = HEAP32[$sk$s2 + 2];
  HEAP32[$skey + 12 >> 2] = HEAP32[$sk$s2 + 3];
  var $_0 = $ec_0;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _generate_using_x($sk, $nbits, $x, $ret_factors) {
  var $5$s2;
  var $4$s2;
  var $3$s2;
  var $2$s2;
  var $1$s2;
  var __stackBase__ = STACKTOP;
  var $1$s2 = ($sk | 0) >> 2;
  var $2$s2 = ($sk + 4 | 0) >> 2;
  var $3$s2 = ($sk + 8 | 0) >> 2;
  var $4$s2 = ($sk + 12 | 0) >> 2;
  var $5$s2 = $sk >> 2;
  HEAP32[$5$s2] = 0;
  HEAP32[$5$s2 + 1] = 0;
  HEAP32[$5$s2 + 2] = 0;
  HEAP32[$5$s2 + 3] = 0;
  var $6 = __gcry_mpi_get_nbits($x);
  if (!($6 >>> 0 > 63 & $6 >>> 0 < $nbits >>> 0)) {
    var $_0 = 55;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $10 = __gcry_mpi_new($nbits);
  var $11 = _wiener_map($nbits);
  var $13 = __gcry_mpi_alloc(1);
  var $14 = __gcry_generate_elg_prime(0, $nbits, ($11 & 1) + $11 | 0, $13, $ret_factors);
  __gcry_mpi_sub_ui($10, $14, 1);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(482916, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $6, tempInt));
  }
  do {
    if ((__gcry_mpi_cmp_ui($x, 0) | 0) > 0) {
      if ((__gcry_mpi_cmp($x, $10) | 0) >= 0) {
        break;
      }
      var $26 = __gcry_mpi_new($nbits);
      __gcry_mpi_powm($26, $13, $x, $14);
      if ((__gcry_get_debug_flag(1) | 0) != 0) {
        _progress1811(10);
        __gcry_log_mpidump(467440, $14);
        __gcry_log_mpidump(465360, $13);
        __gcry_log_mpidump(490472, $26);
        __gcry_log_mpidump(489572, $x);
      }
      HEAP32[$1$s2] = $14;
      HEAP32[$2$s2] = $13;
      HEAP32[$3$s2] = $26;
      HEAP32[$4$s2] = __gcry_mpi_copy($x);
      __gcry_mpi_release($10);
      if ((_test_keys1812($sk, $nbits - 64 | 0, 1) | 0) == 0) {
        var $_0 = 0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      __gcry_mpi_release(HEAP32[$1$s2]);
      HEAP32[$1$s2] = 0;
      __gcry_mpi_release(HEAP32[$2$s2]);
      HEAP32[$2$s2] = 0;
      __gcry_mpi_release(HEAP32[$3$s2]);
      HEAP32[$3$s2] = 0;
      __gcry_mpi_release(HEAP32[$4$s2]);
      HEAP32[$4$s2] = 0;
      var $_0 = 7;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  __gcry_mpi_release($10);
  __gcry_mpi_release($14);
  __gcry_mpi_release($13);
  var $_0 = 55;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_generate_using_x["X"] = 1;
function _progress1811($c) {
  var $1 = HEAP32[110038];
  if (($1 | 0) == 0) {
    return;
  }
  FUNCTION_TABLE[$1](HEAP32[110034], 483864, $c, 0, 0);
  return;
}
function _do_encrypt1813($a, $b, $input, $pkey) {
  var $1$s2;
  var $1$s2 = ($pkey | 0) >> 2;
  var $3 = _gen_k1817(HEAP32[$1$s2], 1);
  __gcry_mpi_powm($a, HEAP32[$pkey + 4 >> 2], $3, HEAP32[$1$s2]);
  __gcry_mpi_powm($b, HEAP32[$pkey + 8 >> 2], $3, HEAP32[$1$s2]);
  __gcry_mpi_mulm($b, $b, $input, HEAP32[$1$s2]);
  __gcry_mpi_free($3);
  return;
}
function _decrypt1814($output, $a, $b, $skey) {
  var $1$s2;
  var $1$s2 = ($skey | 0) >> 2;
  var $5 = __gcry_mpi_alloc_secure(HEAP32[HEAP32[$1$s2] + 4 >> 2]);
  __gcry_mpi_powm($5, $a, HEAP32[$skey + 12 >> 2], HEAP32[$1$s2]);
  __gcry_mpi_invm($5, $5, HEAP32[$1$s2]);
  __gcry_mpi_mulm($output, $b, $5, HEAP32[$1$s2]);
  __gcry_mpi_free($5);
  return;
}
function _sign1815($a, $b, $input, $skey) {
  var $6$s2;
  var $1 = $a + 4 | 0;
  var $3 = __gcry_mpi_alloc(HEAP32[$1 >> 2]);
  var $5 = __gcry_mpi_alloc(HEAP32[$1 >> 2]);
  var $6$s2 = ($skey | 0) >> 2;
  var $8 = __gcry_mpi_copy(HEAP32[$6$s2]);
  __gcry_mpi_sub_ui($8, $8, 1);
  var $10 = _gen_k1817(HEAP32[$6$s2], 0);
  __gcry_mpi_powm($a, HEAP32[$skey + 4 >> 2], $10, HEAP32[$6$s2]);
  __gcry_mpi_mul($3, HEAP32[$skey + 12 >> 2], $a);
  __gcry_mpi_subm($3, $input, $3, $8);
  __gcry_mpi_invm($5, $10, $8);
  __gcry_mpi_mulm($b, $3, $5, $8);
  __gcry_mpi_free($10);
  __gcry_mpi_free($3);
  __gcry_mpi_free($5);
  __gcry_mpi_free($8);
  return;
}
function _verify1816($a, $b, $input, $pkey) {
  var $4$s2;
  var $ex$s2;
  var $base$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  var $base = __stackBase__, $base$s2 = $base >> 2;
  var $ex = __stackBase__ + 16, $ex$s2 = $ex >> 2;
  if ((__gcry_mpi_cmp_ui($a, 0) | 0) <= 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $4$s2 = ($pkey | 0) >> 2;
  if ((__gcry_mpi_cmp($a, HEAP32[$4$s2]) | 0) >= 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $9 = $a + 4 | 0;
  var $11 = __gcry_mpi_alloc(HEAP32[$9 >> 2]);
  var $13 = __gcry_mpi_alloc(HEAP32[$9 >> 2]);
  __gcry_mpi_invm($13, HEAP32[$pkey + 4 >> 2], HEAP32[$4$s2]);
  var $18 = $base | 0;
  HEAP32[$18 >> 2] = $13;
  var $19 = $ex | 0;
  HEAP32[$19 >> 2] = $input;
  HEAP32[$base$s2 + 1] = HEAP32[$pkey + 8 >> 2];
  HEAP32[$ex$s2 + 1] = $a;
  HEAP32[$base$s2 + 2] = $a;
  HEAP32[$ex$s2 + 2] = $b;
  HEAP32[$base$s2 + 3] = 0;
  HEAP32[$ex$s2 + 3] = 0;
  __gcry_mpi_mulpowm($11, $18, $19, HEAP32[$4$s2]);
  var $31 = (__gcry_mpi_cmp_ui($11, 1) | 0) == 0 & 1;
  __gcry_mpi_free($11);
  __gcry_mpi_free($13);
  var $_0 = $31;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _check_secret_key1818($sk) {
  var $1 = $sk + 8 | 0;
  var $5 = __gcry_mpi_alloc(HEAP32[HEAP32[$1 >> 2] + 4 >> 2]);
  __gcry_mpi_powm($5, HEAP32[$sk + 4 >> 2], HEAP32[$sk + 12 >> 2], HEAP32[$sk >> 2]);
  var $15 = (__gcry_mpi_cmp($5, HEAP32[$1 >> 2]) | 0) == 0 & 1;
  __gcry_mpi_free($5);
  return $15;
}
function __gcry_hash_selftest_check_one($algo, $datamode, $data, $datalen, $expect, $expectlen) {
  var $hd$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1004 | 0;
  var $hd = __stackBase__, $hd$s2 = $hd >> 2;
  if ((__gcry_md_get_algo_dlen($algo) | 0) != ($expectlen | 0)) {
    var $_0 = 482852;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((__gcry_md_open($hd, $algo, 0) | 0) != 0) {
    var $_0 = 488396;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  L108 : do {
    if (($datamode | 0) == 1) {
      var $10 = __stackBase__ + 4 | 0;
      _memset($10, 97, 1e3);
      var $11 = HEAP32[$hd$s2];
      var $i_03 = 0;
      while (1) {
        var $i_03;
        __gcry_md_write($11, $10, 1e3);
        var $13 = $i_03 + 1 | 0;
        if (($13 | 0) == 1e3) {
          label = 92;
          break L108;
        } else {
          var $i_03 = $13;
        }
      }
    } else if (($datamode | 0) == 0) {
      __gcry_md_write(HEAP32[$hd$s2], $data, $datalen);
      label = 92;
      break;
    } else {
      var $result_1 = 480224;
    }
  } while (0);
  if (label == 92) {
    var $result_1 = (_memcmp(__gcry_md_read(HEAP32[$hd$s2], $algo), $expect, $expectlen) | 0) == 0 ? 0 : 476584;
  }
  var $result_1;
  __gcry_md_close(HEAP32[$hd$s2]);
  var $_0 = $result_1;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_hmac_selftest($algo, $extended, $report) {
  do {
    if ((__gcry_md_algo_info($algo, 8, 0, 0) | 0) == 0) {
      var $ec_0 = _run_selftests1867($algo, $extended, $report);
    } else {
      if (($report | 0) == 0) {
        var $ec_0 = 5;
        break;
      }
      FUNCTION_TABLE[$report](482760, $algo, 488388, 480200);
      var $ec_0 = 5;
    }
  } while (0);
  var $ec_0;
  return _gpg_error1868($ec_0);
}
function _run_selftests1867($algo, $extended, $report) {
  if (($algo | 0) == 2) {
    var $ec_0 = _selftests_sha11870($extended, $report);
  } else if (($algo | 0) == 11) {
    var $ec_0 = _selftests_sha2241871($extended, $report);
  } else if (($algo | 0) == 10) {
    var $ec_0 = _selftests_sha5121874($extended, $report);
  } else if (($algo | 0) == 8) {
    var $ec_0 = _selftests_sha2561872($extended, $report);
  } else if (($algo | 0) == 9) {
    var $ec_0 = _selftests_sha3841873($extended, $report);
  } else {
    var $ec_0 = 5;
  }
  var $ec_0;
  return $ec_0;
}
function _gpg_error1868($code) {
  return _gpg_err_make1869($code);
}
function _generate1810($sk, $nbits, $ret_factors) {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_mpi_new($nbits);
  var $2 = _wiener_map($nbits);
  var $_ = ($2 & 1) + $2 | 0;
  var $4 = __gcry_mpi_alloc(1);
  var $5 = __gcry_generate_elg_prime(0, $nbits, $_, $4, $ret_factors);
  __gcry_mpi_sub_ui($1, $5, 1);
  var $6 = $_ * 3 & -1;
  var $7 = $6 >>> 1;
  if ($7 >>> 0 >= $nbits >>> 0) {
    __gcry_bug(470476, 292, 494436);
  }
  var $11 = __gcry_mpi_snew($7);
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(469008, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $7, tempInt));
  }
  var $16 = ($7 + 7 | 0) >>> 3;
  var $18 = ($7 + 7 | 0) >>> 3;
  var $19 = $7 + 1 | 0;
  var $20 = $6 >>> 0 < 32;
  var $22 = ($7 + 7 | 0) >>> 3;
  var $rndbuf_0 = 0;
  while (1) {
    var $rndbuf_0;
    if ((__gcry_get_debug_flag(1) | 0) != 0) {
      _progress1811(46);
    }
    do {
      if (($rndbuf_0 | 0) == 0) {
        var $rndbuf_1 = __gcry_random_bytes_secure($16, 2);
      } else {
        if ($20) {
          __gcry_free($rndbuf_0);
          var $rndbuf_1 = __gcry_random_bytes_secure($22, 2);
          break;
        } else {
          var $32 = __gcry_random_bytes_secure(2, 2);
          var $33 = $32;
          var $34 = $rndbuf_0;
          tempBigInt = (tempInt = HEAPU8[$33] | HEAPU8[$33 + 1] << 8, tempInt << 16 >> 16);
          HEAP8[$34] = tempBigInt & 255;
          tempBigInt = tempBigInt >> 8;
          HEAP8[$34 + 1] = tempBigInt & 255;
          __gcry_free($32);
          var $rndbuf_1 = $rndbuf_0;
          break;
        }
      }
    } while (0);
    var $rndbuf_1;
    __gcry_mpi_set_buffer($11, $rndbuf_1, $18, 0);
    __gcry_mpi_clear_highbit($11, $19);
    if ((__gcry_mpi_cmp_ui($11, 0) | 0) <= 0) {
      var $rndbuf_0 = $rndbuf_1;
      continue;
    }
    if ((__gcry_mpi_cmp($11, $1) | 0) > -1) {
      var $rndbuf_0 = $rndbuf_1;
    } else {
      break;
    }
  }
  __gcry_free($rndbuf_1);
  var $44 = __gcry_mpi_new($nbits);
  __gcry_mpi_powm($44, $4, $11, $5);
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    var $49 = $sk | 0;
    HEAP32[$49 >> 2] = $5;
    var $50 = $sk + 4 | 0;
    HEAP32[$50 >> 2] = $4;
    var $51 = $sk + 8 | 0;
    HEAP32[$51 >> 2] = $44;
    var $52 = $sk + 12 | 0;
    HEAP32[$52 >> 2] = $11;
    __gcry_mpi_release($1);
    var $53 = $nbits - 64 | 0;
    var $54 = _test_keys1812($sk, $53, 0);
    STACKTOP = __stackBase__;
    return;
  }
  _progress1811(10);
  __gcry_log_mpidump(467440, $5);
  __gcry_log_mpidump(465360, $4);
  __gcry_log_mpidump(490472, $44);
  __gcry_log_mpidump(489572, $11);
  var $49 = $sk | 0;
  HEAP32[$49 >> 2] = $5;
  var $50 = $sk + 4 | 0;
  HEAP32[$50 >> 2] = $4;
  var $51 = $sk + 8 | 0;
  HEAP32[$51 >> 2] = $44;
  var $52 = $sk + 12 | 0;
  HEAP32[$52 >> 2] = $11;
  __gcry_mpi_release($1);
  var $53 = $nbits - 64 | 0;
  var $54 = _test_keys1812($sk, $53, 0);
  STACKTOP = __stackBase__;
  return;
}
_generate1810["X"] = 1;
function _test_keys1812($sk, $nbits, $nodie) {
  var $pk$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $pk = __stackBase__, $pk$s2 = $pk >> 2;
  var $1 = __gcry_mpi_new(0);
  var $2 = __gcry_mpi_new($nbits);
  var $3 = __gcry_mpi_new($nbits);
  var $4 = __gcry_mpi_new($nbits);
  HEAP32[$pk$s2] = HEAP32[$sk >> 2];
  HEAP32[$pk$s2 + 1] = HEAP32[$sk + 4 >> 2];
  HEAP32[$pk$s2 + 2] = HEAP32[$sk + 8 >> 2];
  __gcry_mpi_randomize($1, $nbits, 0);
  _do_encrypt1813($2, $3, $1, $pk);
  _decrypt1814($4, $2, $3, $sk);
  var $not_ = (__gcry_mpi_cmp($1, $4) | 0) != 0;
  var $_ = $not_ & 1;
  _sign1815($2, $3, $1, $sk);
  var $failed_1 = (_verify1816($2, $3, $1, $pk) | 0) == 0 ? $_ | 2 : $_;
  __gcry_mpi_release($1);
  __gcry_mpi_release($2);
  __gcry_mpi_release($3);
  __gcry_mpi_release($4);
  var $18 = ($failed_1 | 0) != 0;
  if ($18 & ($nodie | 0) == 0) {
    __gcry_log_fatal(487872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $not_ ? 487216 : 486228, HEAP32[tempInt + 4 >> 2] = ($failed_1 & 2 | 0) != 0 ? 485428 : 486228, tempInt));
  }
  if (!$18) {
    STACKTOP = __stackBase__;
    return $failed_1;
  }
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    STACKTOP = __stackBase__;
    return $failed_1;
  }
  __gcry_log_debug(487872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $not_ ? 487216 : 486228, HEAP32[tempInt + 4 >> 2] = ($failed_1 & 2 | 0) != 0 ? 485428 : 486228, tempInt));
  STACKTOP = __stackBase__;
  return $failed_1;
}
_test_keys1812["X"] = 1;
function _gen_k1817($p, $small_k) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_mpi_alloc_secure(0);
  var $4 = __gcry_mpi_alloc(HEAP32[$p + 4 >> 2]);
  var $5 = __gcry_mpi_copy($p);
  var $6 = __gcry_mpi_get_nbits($p);
  do {
    if (($small_k | 0) == 0) {
      var $nbits_0 = $6;
    } else {
      var $11 = (_wiener_map($6) * 3 & -1) >>> 1;
      if ($11 >>> 0 < $6 >>> 0) {
        var $nbits_0 = $11;
        break;
      }
      __gcry_bug(470476, 192, 494500);
    }
  } while (0);
  var $nbits_0;
  var $16 = ($nbits_0 + 7 | 0) >>> 3;
  if ((__gcry_get_debug_flag(1) | 0) != 0) {
    __gcry_log_debug(484592, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  __gcry_mpi_sub_ui($5, $p, 1);
  var $21 = $nbits_0 >>> 0 < 32;
  var $rndbuf_0 = 0;
  L176 : while (1) {
    var $rndbuf_0;
    if (($rndbuf_0 | 0) == 0 | $21) {
      __gcry_free($rndbuf_0);
      var $rndbuf_1 = __gcry_random_bytes_secure($16, 1);
    } else {
      var $26 = __gcry_random_bytes_secure(4, 1);
      var $27 = $26;
      var $28 = $rndbuf_0;
      tempBigInt = HEAPU8[$27] | HEAPU8[$27 + 1] << 8 | HEAPU8[$27 + 2] << 16 | HEAPU8[$27 + 3] << 24 | 0;
      HEAP8[$28] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$28 + 1] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$28 + 2] = tempBigInt & 255;
      tempBigInt = tempBigInt >> 8;
      HEAP8[$28 + 3] = tempBigInt & 255;
      __gcry_free($26);
      var $rndbuf_1 = $rndbuf_0;
    }
    var $rndbuf_1;
    __gcry_mpi_set_buffer($1, $rndbuf_1, $16, 0);
    while (1) {
      if ((__gcry_mpi_cmp($1, $5) | 0) >= 0) {
        label = 150;
        break;
      }
      if ((__gcry_mpi_cmp_ui($1, 0) | 0) <= 0) {
        label = 153;
        break;
      }
      if ((__gcry_mpi_gcd($4, $1, $5) | 0) != 0) {
        break L176;
      }
      __gcry_mpi_add_ui($1, $1, 1);
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        continue;
      }
      _progress1811(46);
    }
    if (label == 153) {
      label = 0;
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $rndbuf_0 = $rndbuf_1;
        continue;
      }
      _progress1811(45);
      var $rndbuf_0 = $rndbuf_1;
      continue;
    } else if (label == 150) {
      label = 0;
      if ((__gcry_get_debug_flag(1) | 0) == 0) {
        var $rndbuf_0 = $rndbuf_1;
        continue;
      }
      _progress1811(43);
      var $rndbuf_0 = $rndbuf_1;
      continue;
    }
  }
  __gcry_free($rndbuf_1);
  if ((__gcry_get_debug_flag(1) | 0) == 0) {
    __gcry_mpi_free($5);
    __gcry_mpi_free($4);
    STACKTOP = __stackBase__;
    return $1;
  }
  _progress1811(10);
  __gcry_mpi_free($5);
  __gcry_mpi_free($4);
  STACKTOP = __stackBase__;
  return $1;
}
_gen_k1817["X"] = 1;
function __gcry_compat_identification() {
  return 492332;
}
function _selftests_sha11870($extended, $report) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 128 | 0;
  var $key = __stackBase__;
  var $i_09 = 0;
  while (1) {
    var $i_09;
    HEAP8[$key + $i_09 | 0] = $i_09 & 255;
    var $4 = $i_09 + 1 | 0;
    if (($4 | 0) == 64) {
      break;
    } else {
      var $i_09 = $4;
    }
  }
  var $6 = $key | 0;
  var $7 = _check_one(2, 477528, 9, $6, 64, 477280, 20);
  do {
    if (($7 | 0) == 0) {
      if (($extended | 0) == 0) {
        var $_0 = 0;
        var $_0;
        STACKTOP = __stackBase__;
        return $_0;
      }
      HEAP8[$key | 0] = 48;
      HEAP8[$key + 1 | 0] = 49;
      HEAP8[$key + 2 | 0] = 50;
      HEAP8[$key + 3 | 0] = 51;
      HEAP8[$key + 4 | 0] = 52;
      HEAP8[$key + 5 | 0] = 53;
      HEAP8[$key + 6 | 0] = 54;
      HEAP8[$key + 7 | 0] = 55;
      HEAP8[$key + 8 | 0] = 56;
      HEAP8[$key + 9 | 0] = 57;
      HEAP8[$key + 10 | 0] = 58;
      HEAP8[$key + 11 | 0] = 59;
      HEAP8[$key + 12 | 0] = 60;
      HEAP8[$key + 13 | 0] = 61;
      HEAP8[$key + 14 | 0] = 62;
      HEAP8[$key + 15 | 0] = 63;
      HEAP8[$key + 16 | 0] = 64;
      HEAP8[$key + 17 | 0] = 65;
      HEAP8[$key + 18 | 0] = 66;
      HEAP8[$key + 19 | 0] = 67;
      var $31 = _check_one(2, 476228, 9, $6, 20, 476024, 20);
      if (($31 | 0) == 0) {
        var $i_24 = 0;
        var $j_15 = 80;
      } else {
        var $what_0 = 476976;
        var $errtxt_0 = $31;
        break;
      }
      while (1) {
        var $j_15;
        var $i_24;
        var $33 = $j_15 + 1 | 0;
        HEAP8[$key + $i_24 | 0] = $j_15 & 255;
        if (($33 | 0) == 180) {
          break;
        } else {
          var $i_24 = $i_24 + 1 | 0;
          var $j_15 = $33;
        }
      }
      var $38 = _check_one(2, 475516, 9, $6, 100, 475220, 20);
      if (($38 | 0) == 0) {
        var $i_31 = 0;
        var $j_22 = 112;
      } else {
        var $what_0 = 475792;
        var $errtxt_0 = $38;
        break;
      }
      while (1) {
        var $j_22;
        var $i_31;
        var $40 = $j_22 + 1 | 0;
        HEAP8[$key + $i_31 | 0] = $j_22 & 255;
        if (($40 | 0) == 161) {
          break;
        } else {
          var $i_31 = $i_31 + 1 | 0;
          var $j_22 = $40;
        }
      }
      var $45 = _check_one(2, 474856, 9, $6, 49, 474568, 20);
      if (($45 | 0) == 0) {
        var $_0 = 0;
      } else {
        var $what_0 = 475080;
        var $errtxt_0 = $45;
        break;
      }
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $what_0 = 477816;
      var $errtxt_0 = $7;
    }
  } while (0);
  var $errtxt_0;
  var $what_0;
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  FUNCTION_TABLE[$report](482760, 2, $what_0, $errtxt_0);
  var $_0 = 50;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_selftests_sha11870["X"] = 1;
function _selftests_sha2241871($extended, $report) {
  var label = 0;
  var $1 = ($extended | 0) == 0;
  var $tvidx_0 = 0;
  while (1) {
    var $tvidx_0;
    var $4 = HEAP32[($tvidx_0 * 10 | 0) + 103643];
    if (($4 | 0) == 0) {
      var $_0 = 0;
      label = 189;
      break;
    }
    var $8 = HEAP32[($tvidx_0 * 10 | 0) + 103644];
    var $9 = _strlen($8);
    var $11 = HEAP32[($tvidx_0 * 10 | 0) + 103645];
    var $14 = _check_one(11, $8, $9, $11, _strlen($11), $tvidx_0 * 40 + 414584 | 0, 28);
    if (($14 | 0) != 0) {
      label = 184;
      break;
    }
    if ($1) {
      var $_0 = 0;
      label = 187;
      break;
    } else {
      var $tvidx_0 = $tvidx_0 + 1 | 0;
    }
  }
  if (label == 187) {
    var $_0;
    return $_0;
  } else if (label == 189) {
    var $_0;
    return $_0;
  } else if (label == 184) {
    if (($report | 0) == 0) {
      var $_0 = 50;
      var $_0;
      return $_0;
    }
    FUNCTION_TABLE[$report](482760, 11, $4, $14);
    var $_0 = 50;
    var $_0;
    return $_0;
  }
}
function _selftests_sha2561872($extended, $report) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $dlen = __stackBase__;
  var $1 = ($extended | 0) == 0;
  var $tvidx_0 = 0;
  while (1) {
    var $tvidx_0;
    var $4 = HEAP32[($tvidx_0 * 11 | 0) + 103566];
    if (($4 | 0) == 0) {
      var $_0 = 0;
      label = 204;
      break;
    }
    var $7 = $tvidx_0 * 44 + 414268 | 0;
    var $8 = HEAP32[$7 >> 2];
    var $9 = _strlen($8);
    var $10 = $tvidx_0 * 44 + 414272 | 0;
    var $11 = HEAP32[$10 >> 2];
    var $13 = $tvidx_0 * 44 + 414276 | 0;
    var $14 = _check_one(8, $8, $9, $11, _strlen($11), $13, 32);
    if (($14 | 0) != 0) {
      var $errtxt_0 = $14;
      break;
    }
    var $17 = HEAP32[$10 >> 2];
    var $19 = __gcry_hmac256_new($17, _strlen($17));
    if (($19 | 0) == 0) {
      var $errtxt_0 = 478780;
      break;
    }
    var $22 = HEAP32[$7 >> 2];
    __gcry_hmac256_update($19, $22, _strlen($22));
    var $24 = __gcry_hmac256_finalize($19, $dlen);
    if (($24 | 0) == 0) {
      label = 196;
      break;
    }
    if ((HEAP32[$dlen >> 2] | 0) != 32) {
      label = 199;
      break;
    }
    if ((_memcmp($24, $13, 32) | 0) != 0) {
      label = 199;
      break;
    }
    __gcry_hmac256_release($19);
    if ($1) {
      var $_0 = 0;
      label = 206;
      break;
    } else {
      var $tvidx_0 = $tvidx_0 + 1 | 0;
    }
  }
  if (label == 196) {
    __gcry_hmac256_release($19);
    var $errtxt_0 = 478432;
  } else if (label == 206) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else if (label == 199) {
    __gcry_hmac256_release($19);
    var $errtxt_0 = 478120;
  } else if (label == 204) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $errtxt_0;
  if (($report | 0) == 0) {
    var $_0 = 50;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  FUNCTION_TABLE[$report](482760, 8, $4, $errtxt_0);
  var $_0 = 50;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _selftests_sha3841873($extended, $report) {
  var label = 0;
  var $1 = ($extended | 0) == 0;
  var $tvidx_0 = 0;
  while (1) {
    var $tvidx_0;
    var $4 = HEAP32[($tvidx_0 * 15 | 0) + 103461];
    if (($4 | 0) == 0) {
      var $_0 = 0;
      label = 215;
      break;
    }
    var $8 = HEAP32[($tvidx_0 * 15 | 0) + 103462];
    var $9 = _strlen($8);
    var $11 = HEAP32[($tvidx_0 * 15 | 0) + 103463];
    var $14 = _check_one(9, $8, $9, $11, _strlen($11), $tvidx_0 * 60 + 413856 | 0, 48);
    if (($14 | 0) != 0) {
      label = 212;
      break;
    }
    if ($1) {
      var $_0 = 0;
      label = 217;
      break;
    } else {
      var $tvidx_0 = $tvidx_0 + 1 | 0;
    }
  }
  if (label == 217) {
    var $_0;
    return $_0;
  } else if (label == 212) {
    if (($report | 0) == 0) {
      var $_0 = 50;
      var $_0;
      return $_0;
    }
    FUNCTION_TABLE[$report](482760, 9, $4, $14);
    var $_0 = 50;
    var $_0;
    return $_0;
  } else if (label == 215) {
    var $_0;
    return $_0;
  }
}
function _selftests_sha5121874($extended, $report) {
  var label = 0;
  var $1 = ($extended | 0) == 0;
  var $tvidx_0 = 0;
  while (1) {
    var $tvidx_0;
    var $4 = HEAP32[($tvidx_0 * 19 | 0) + 103328];
    if (($4 | 0) == 0) {
      var $_0 = 0;
      label = 227;
      break;
    }
    var $8 = HEAP32[($tvidx_0 * 19 | 0) + 103329];
    var $9 = _strlen($8);
    var $11 = HEAP32[($tvidx_0 * 19 | 0) + 103330];
    var $14 = _check_one(10, $8, $9, $11, _strlen($11), $tvidx_0 * 76 + 413324 | 0, 64);
    if (($14 | 0) != 0) {
      label = 223;
      break;
    }
    if ($1) {
      var $_0 = 0;
      label = 229;
      break;
    } else {
      var $tvidx_0 = $tvidx_0 + 1 | 0;
    }
  }
  if (label == 227) {
    var $_0;
    return $_0;
  } else if (label == 223) {
    if (($report | 0) == 0) {
      var $_0 = 50;
      var $_0;
      return $_0;
    }
    FUNCTION_TABLE[$report](482760, 10, $4, $14);
    var $_0 = 50;
    var $_0;
    return $_0;
  } else if (label == 229) {
    var $_0;
    return $_0;
  }
}
function _check_one($algo, $data, $datalen, $key, $keylen, $expect, $expectlen) {
  var $hd$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $hd = __stackBase__, $hd$s2 = $hd >> 2;
  do {
    if ((__gcry_md_get_algo_dlen($algo) | 0) == ($expectlen | 0)) {
      if ((__gcry_md_open($hd, $algo, 2) | 0) != 0) {
        var $_0 = 481088;
        break;
      }
      var $9 = (__gcry_md_setkey(HEAP32[$hd$s2], $key, $keylen) | 0) == 0;
      var $10 = HEAP32[$hd$s2];
      if (!$9) {
        __gcry_md_close($10);
        var $_0 = 479948;
        break;
      }
      __gcry_md_write($10, $data, $datalen);
      var $14 = __gcry_md_read(HEAP32[$hd$s2], $algo);
      if (($14 | 0) == 0) {
        __gcry_md_close(HEAP32[$hd$s2]);
        var $_0 = 479692;
        break;
      } else {
        var $20 = (_memcmp($14, $expect, $expectlen) | 0) == 0;
        __gcry_md_close(HEAP32[$hd$s2]);
        var $_0 = $20 ? 0 : 479372;
        break;
      }
    } else {
      var $_0 = 481564;
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_mpi_ec_point_init($p) {
  HEAP32[$p >> 2] = __gcry_mpi_new(0);
  HEAP32[$p + 4 >> 2] = __gcry_mpi_new(0);
  HEAP32[$p + 8 >> 2] = __gcry_mpi_new(0);
  return;
}
function __gcry_mpi_ec_point_free($p) {
  var $1 = $p | 0;
  __gcry_mpi_free(HEAP32[$1 >> 2]);
  HEAP32[$1 >> 2] = 0;
  var $3 = $p + 4 | 0;
  __gcry_mpi_free(HEAP32[$3 >> 2]);
  HEAP32[$3 >> 2] = 0;
  var $5 = $p + 8 | 0;
  __gcry_mpi_free(HEAP32[$5 >> 2]);
  HEAP32[$5 >> 2] = 0;
  return;
}
function __gcry_mpi_ec_init($p, $a) {
  var $4$s2;
  var $1$s2;
  __gcry_mpi_normalize($p);
  __gcry_mpi_normalize($a);
  var $1 = __gcry_xcalloc(1, 80), $1$s2 = $1 >> 2;
  var $2 = $1;
  var $4$s2 = $1 >> 2;
  HEAP32[$4$s2] = __gcry_mpi_copy($p);
  var $7 = $1 + 4 | 0;
  HEAP32[$7 >> 2] = __gcry_mpi_copy($a);
  var $9 = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  __gcry_mpi_sub_ui($9, HEAP32[$4$s2], 3);
  HEAP32[$1$s2 + 2] = (__gcry_mpi_cmp(HEAP32[$7 >> 2], $9) | 0) == 0 & 1;
  __gcry_mpi_free($9);
  HEAP32[$1$s2 + 3] = __gcry_mpi_alloc_set_ui(1);
  var $22 = $1 + 16 | 0;
  HEAP32[$22 >> 2] = __gcry_mpi_alloc_set_ui(2);
  HEAP32[$1$s2 + 5] = __gcry_mpi_alloc_set_ui(3);
  HEAP32[$1$s2 + 6] = __gcry_mpi_alloc_set_ui(4);
  HEAP32[$1$s2 + 7] = __gcry_mpi_alloc_set_ui(8);
  var $32 = __gcry_mpi_alloc(0);
  HEAP32[$1$s2 + 8] = $32;
  _ec_invm($32, HEAP32[$22 >> 2], $2);
  HEAP32[$1$s2 + 9] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 10] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 11] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 12] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 13] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 14] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 15] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 16] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 17] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 18] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  HEAP32[$1$s2 + 19] = __gcry_mpi_alloc_like(HEAP32[$4$s2]);
  return $2;
}
__gcry_mpi_ec_init["X"] = 1;
function _ec_invm($x, $a, $ctx) {
  __gcry_mpi_invm($x, $a, HEAP32[$ctx >> 2]);
  return;
}
function __gcry_mpi_ec_free($ctx) {
  var $ctx$s2 = $ctx >> 2;
  if (($ctx | 0) == 0) {
    return;
  }
  __gcry_mpi_free(HEAP32[$ctx$s2]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 1]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 3]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 4]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 5]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 6]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 7]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 8]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 9]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 10]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 11]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 12]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 13]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 14]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 15]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 16]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 17]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 18]);
  __gcry_mpi_free(HEAP32[$ctx$s2 + 19]);
  __gcry_free($ctx);
  return;
}
__gcry_mpi_ec_free["X"] = 1;
function __gcry_mpi_ec_get_affine($x, $y, $point, $ctx) {
  var $1 = $point + 8 | 0;
  if ((__gcry_mpi_cmp_ui(HEAP32[$1 >> 2], 0) | 0) == 0) {
    var $_0 = -1;
    var $_0;
    return $_0;
  }
  var $6 = __gcry_mpi_new(0);
  var $7 = __gcry_mpi_new(0);
  _ec_invm($6, HEAP32[$1 >> 2], $ctx);
  _ec_mulm($7, $6, $6, $ctx);
  if (($x | 0) != 0) {
    _ec_mulm($x, HEAP32[$point >> 2], $7, $ctx);
  }
  if (($y | 0) != 0) {
    var $16 = __gcry_mpi_new(0);
    _ec_mulm($16, $7, $6, $ctx);
    _ec_mulm($y, HEAP32[$point + 4 >> 2], $16, $ctx);
    __gcry_mpi_free($16);
  }
  __gcry_mpi_free($7);
  __gcry_mpi_free($6);
  var $_0 = 0;
  var $_0;
  return $_0;
}
function _ec_mulm($w, $u, $v, $ctx) {
  __gcry_mpi_mulm($w, $u, $v, HEAP32[$ctx >> 2]);
  return;
}
function __gcry_mpi_ec_dup_point($result, $point, $ctx) {
  var $103$s2;
  var $85$s2;
  var $77$s2;
  var $73$s2;
  var $71$s2;
  var $31$s2;
  var $26$s2;
  var $55$s2;
  var $46$s2;
  var $6$s2;
  var $1$s2;
  var $ctx$s2 = $ctx >> 2;
  var $1$s2 = ($point + 4 | 0) >> 2;
  do {
    if ((__gcry_mpi_cmp_ui(HEAP32[$1$s2], 0) | 0) != 0) {
      var $6$s2 = ($point + 8 | 0) >> 2;
      if ((__gcry_mpi_cmp_ui(HEAP32[$6$s2], 0) | 0) == 0) {
        break;
      }
      var $24 = $ctx + 36 | 0;
      if ((HEAP32[$ctx$s2 + 2] | 0) == 0) {
        var $46$s2 = ($ctx + 48 | 0) >> 2;
        _ec_powm(HEAP32[$46$s2], HEAP32[$point >> 2], HEAP32[$ctx$s2 + 4], $ctx);
        var $52 = HEAP32[$46$s2];
        _ec_mulm($52, $52, HEAP32[$ctx$s2 + 5], $ctx);
        var $55$s2 = ($24 | 0) >> 2;
        _ec_powm(HEAP32[$55$s2], HEAP32[$6$s2], HEAP32[$ctx$s2 + 6], $ctx);
        var $60 = HEAP32[$55$s2];
        _ec_mulm($60, $60, HEAP32[$ctx$s2 + 1], $ctx);
        var $63 = HEAP32[$46$s2];
        _ec_addm($63, $63, HEAP32[$55$s2], $ctx);
      } else {
        var $26$s2 = ($24 | 0) >> 2;
        _ec_powm(HEAP32[$26$s2], HEAP32[$6$s2], HEAP32[$ctx$s2 + 4], $ctx);
        var $31$s2 = ($ctx + 48 | 0) >> 2;
        var $33 = $point | 0;
        _ec_subm(HEAP32[$31$s2], HEAP32[$33 >> 2], HEAP32[$26$s2], $ctx);
        var $36 = HEAP32[$31$s2];
        _ec_mulm($36, $36, HEAP32[$ctx$s2 + 5], $ctx);
        var $39 = $ctx + 40 | 0;
        _ec_addm(HEAP32[$39 >> 2], HEAP32[$33 >> 2], HEAP32[$26$s2], $ctx);
        var $43 = HEAP32[$31$s2];
        _ec_mulm($43, $43, HEAP32[$39 >> 2], $ctx);
      }
      var $66 = $result + 8 | 0;
      _ec_mulm(HEAP32[$66 >> 2], HEAP32[$1$s2], HEAP32[$6$s2], $ctx);
      var $70 = HEAP32[$66 >> 2];
      var $71$s2 = ($ctx + 16 | 0) >> 2;
      _ec_mulm($70, $70, HEAP32[$71$s2], $ctx);
      var $73$s2 = ($ctx + 40 | 0) >> 2;
      _ec_powm(HEAP32[$73$s2], HEAP32[$1$s2], HEAP32[$71$s2], $ctx);
      var $77$s2 = ($ctx + 52 | 0) >> 2;
      _ec_mulm(HEAP32[$77$s2], HEAP32[$73$s2], HEAP32[$point >> 2], $ctx);
      var $82 = HEAP32[$77$s2];
      _ec_mulm($82, $82, HEAP32[$ctx$s2 + 6], $ctx);
      var $85$s2 = ($result | 0) >> 2;
      var $87 = $ctx + 48 | 0;
      _ec_powm(HEAP32[$85$s2], HEAP32[$87 >> 2], HEAP32[$71$s2], $ctx);
      var $90 = $24 | 0;
      _ec_mulm(HEAP32[$90 >> 2], HEAP32[$77$s2], HEAP32[$71$s2], $ctx);
      var $94 = HEAP32[$85$s2];
      _ec_subm($94, $94, HEAP32[$90 >> 2], $ctx);
      var $96 = HEAP32[$73$s2];
      _ec_powm($96, $96, HEAP32[$71$s2], $ctx);
      var $98 = $ctx + 56 | 0;
      _ec_mulm(HEAP32[$98 >> 2], HEAP32[$73$s2], HEAP32[$ctx$s2 + 7], $ctx);
      var $103$s2 = ($result + 4 | 0) >> 2;
      _ec_subm(HEAP32[$103$s2], HEAP32[$77$s2], HEAP32[$85$s2], $ctx);
      var $107 = HEAP32[$103$s2];
      _ec_mulm($107, $107, HEAP32[$87 >> 2], $ctx);
      var $109 = HEAP32[$103$s2];
      _ec_subm($109, $109, HEAP32[$98 >> 2], $ctx);
      return;
    }
  } while (0);
  __gcry_mpi_set_ui(HEAP32[$result >> 2], 1);
  __gcry_mpi_set_ui(HEAP32[$result + 4 >> 2], 1);
  __gcry_mpi_set_ui(HEAP32[$result + 8 >> 2], 0);
  return;
}
__gcry_mpi_ec_dup_point["X"] = 1;
function _ec_powm($w, $b, $e, $ctx) {
  __gcry_mpi_powm($w, $b, $e, HEAP32[$ctx >> 2]);
  return;
}
function _ec_subm($w, $u, $v, $ctx) {
  __gcry_mpi_subm($w, $u, $v, HEAP32[$ctx >> 2]);
  return;
}
function _ec_addm($w, $u, $v, $ctx) {
  __gcry_mpi_addm($w, $u, $v, HEAP32[$ctx >> 2]);
  return;
}
function __gcry_rngcsprng_secure_alloc() {
  HEAP8[416916] = 1;
  return;
}
function __gcry_rngcsprng_enable_quick_gen() {
  HEAP8[439428] = 1;
  return;
}
function __gcry_rngcsprng_set_daemon_socket($socketname) {
  return;
}
function __gcry_rngcsprng_use_daemon($onoff) {
  return 0;
}
function _gpg_error1947() {
  return;
}
function __gcry_mpi_ec_add_points($result, $p1, $p2, $ctx) {
  var $166$s2;
  var $153$s2;
  var $151$s2;
  var $148$s2;
  var $111$s2;
  var $104$s2;
  var $99$s2;
  var $96$s2;
  var $92$s2;
  var $80$s2;
  var $68$s2;
  var $43$s2;
  var $23$s2;
  var $3$s2;
  var $1$s2;
  var $p2$s2 = $p2 >> 2;
  var $result$s2 = $result >> 2;
  var $1$s2 = ($p1 | 0) >> 2;
  var $3$s2 = ($p2 | 0) >> 2;
  do {
    if ((__gcry_mpi_cmp(HEAP32[$1$s2], HEAP32[$3$s2]) | 0) == 0) {
      if ((__gcry_mpi_cmp(HEAP32[$p1 + 4 >> 2], HEAP32[$p2$s2 + 1]) | 0) != 0) {
        break;
      }
      if ((__gcry_mpi_cmp(HEAP32[$p1 + 8 >> 2], HEAP32[$p2$s2 + 2]) | 0) != 0) {
        break;
      }
      __gcry_mpi_ec_dup_point($result, $p1, $ctx);
      return;
    }
  } while (0);
  var $23$s2 = ($p1 + 8 | 0) >> 2;
  if ((__gcry_mpi_cmp_ui(HEAP32[$23$s2], 0) | 0) == 0) {
    __gcry_mpi_set(HEAP32[$result$s2], HEAP32[$3$s2]);
    __gcry_mpi_set(HEAP32[$result$s2 + 1], HEAP32[$p2$s2 + 1]);
    __gcry_mpi_set(HEAP32[$result$s2 + 2], HEAP32[$p2$s2 + 2]);
    return;
  }
  var $43$s2 = ($p2 + 8 | 0) >> 2;
  if ((__gcry_mpi_cmp_ui(HEAP32[$43$s2], 0) | 0) == 0) {
    __gcry_mpi_set(HEAP32[$result$s2], HEAP32[$1$s2]);
    __gcry_mpi_set(HEAP32[$result$s2 + 1], HEAP32[$p1 + 4 >> 2]);
    __gcry_mpi_set(HEAP32[$result$s2 + 2], HEAP32[$23$s2]);
    return;
  }
  var $64 = (__gcry_mpi_cmp_ui(HEAP32[$23$s2], 1) | 0) == 0;
  var $67 = (__gcry_mpi_cmp_ui(HEAP32[$43$s2], 1) | 0) == 0;
  var $68$s2 = ($ctx + 36 | 0) >> 2;
  var $69 = HEAP32[$68$s2];
  if ($67) {
    __gcry_mpi_set($69, HEAP32[$1$s2]);
  } else {
    _ec_powm($69, HEAP32[$43$s2], HEAP32[$ctx + 16 >> 2], $ctx);
    var $77 = HEAP32[$68$s2];
    _ec_mulm($77, $77, HEAP32[$1$s2], $ctx);
  }
  var $80$s2 = ($ctx + 40 | 0) >> 2;
  var $81 = HEAP32[$80$s2];
  if ($64) {
    __gcry_mpi_set($81, HEAP32[$1$s2]);
  } else {
    _ec_powm($81, HEAP32[$23$s2], HEAP32[$ctx + 16 >> 2], $ctx);
    var $89 = HEAP32[$80$s2];
    _ec_mulm($89, $89, HEAP32[$3$s2], $ctx);
  }
  var $92$s2 = ($ctx + 44 | 0) >> 2;
  _ec_subm(HEAP32[$92$s2], HEAP32[$68$s2], HEAP32[$80$s2], $ctx);
  var $96$s2 = ($ctx + 48 | 0) >> 2;
  var $99$s2 = ($ctx + 20 | 0) >> 2;
  _ec_powm(HEAP32[$96$s2], HEAP32[$43$s2], HEAP32[$99$s2], $ctx);
  var $101 = HEAP32[$96$s2];
  _ec_mulm($101, $101, HEAP32[$p1 + 4 >> 2], $ctx);
  var $104$s2 = ($ctx + 52 | 0) >> 2;
  _ec_powm(HEAP32[$104$s2], HEAP32[$23$s2], HEAP32[$99$s2], $ctx);
  var $108 = HEAP32[$104$s2];
  _ec_mulm($108, $108, HEAP32[$p2$s2 + 1], $ctx);
  var $111$s2 = ($ctx + 56 | 0) >> 2;
  _ec_subm(HEAP32[$111$s2], HEAP32[$96$s2], HEAP32[$104$s2], $ctx);
  if ((__gcry_mpi_cmp_ui(HEAP32[$92$s2], 0) | 0) != 0) {
    var $134 = $ctx + 60 | 0;
    _ec_addm(HEAP32[$134 >> 2], HEAP32[$68$s2], HEAP32[$80$s2], $ctx);
    var $138 = $ctx + 64 | 0;
    _ec_addm(HEAP32[$138 >> 2], HEAP32[$96$s2], HEAP32[$104$s2], $ctx);
    var $142 = $result + 8 | 0;
    _ec_mulm(HEAP32[$142 >> 2], HEAP32[$23$s2], HEAP32[$43$s2], $ctx);
    var $146 = HEAP32[$142 >> 2];
    _ec_mulm($146, $146, HEAP32[$92$s2], $ctx);
    var $148$s2 = ($ctx + 72 | 0) >> 2;
    var $151$s2 = ($ctx + 16 | 0) >> 2;
    _ec_powm(HEAP32[$148$s2], HEAP32[$111$s2], HEAP32[$151$s2], $ctx);
    var $153$s2 = ($ctx + 76 | 0) >> 2;
    _ec_powm(HEAP32[$153$s2], HEAP32[$92$s2], HEAP32[$151$s2], $ctx);
    var $157 = HEAP32[$153$s2];
    _ec_mulm($157, $157, HEAP32[$134 >> 2], $ctx);
    var $159 = $result | 0;
    _ec_subm(HEAP32[$159 >> 2], HEAP32[$148$s2], HEAP32[$153$s2], $ctx);
    _ec_mulm(HEAP32[$148$s2], HEAP32[$159 >> 2], HEAP32[$151$s2], $ctx);
    var $166$s2 = ($ctx + 68 | 0) >> 2;
    _ec_subm(HEAP32[$166$s2], HEAP32[$153$s2], HEAP32[$148$s2], $ctx);
    var $170 = HEAP32[$166$s2];
    _ec_mulm($170, $170, HEAP32[$111$s2], $ctx);
    _ec_powm(HEAP32[$148$s2], HEAP32[$92$s2], HEAP32[$99$s2], $ctx);
    var $175 = HEAP32[$148$s2];
    _ec_mulm($175, $175, HEAP32[$138 >> 2], $ctx);
    var $177 = $result + 4 | 0;
    _ec_subm(HEAP32[$177 >> 2], HEAP32[$166$s2], HEAP32[$148$s2], $ctx);
    var $181 = HEAP32[$177 >> 2];
    _ec_mulm($181, $181, HEAP32[$ctx + 32 >> 2], $ctx);
    return;
  }
  if ((__gcry_mpi_cmp_ui(HEAP32[$111$s2], 0) | 0) == 0) {
    __gcry_mpi_ec_dup_point($result, $p1, $ctx);
    return;
  } else {
    __gcry_mpi_set_ui(HEAP32[$result$s2], 1);
    __gcry_mpi_set_ui(HEAP32[$result$s2 + 1], 1);
    __gcry_mpi_set_ui(HEAP32[$result$s2 + 2], 0);
    return;
  }
}
__gcry_mpi_ec_add_points["X"] = 1;
function __gcry_mpi_ec_mul_point($result, $scalar, $point, $ctx) {
  var $17$s2;
  var $1$s2;
  var $p1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 36 | 0;
  var $p1 = __stackBase__, $p1$s2 = $p1 >> 2;
  var $p2 = __stackBase__ + 12;
  var $p1inv = __stackBase__ + 24;
  var $1$s2 = ($ctx | 0) >> 2;
  var $3 = __gcry_mpi_alloc_like(HEAP32[$1$s2]);
  var $5 = __gcry_mpi_alloc_like(HEAP32[$1$s2]);
  var $7 = __gcry_mpi_alloc_like(HEAP32[$1$s2]);
  var $8 = __gcry_mpi_copy($scalar);
  var $11 = __gcry_mpi_copy(HEAP32[$point + 4 >> 2]);
  var $12 = $8 + 8 | 0;
  if ((HEAP32[$12 >> 2] | 0) != 0) {
    HEAP32[$12 >> 2] = 0;
    _ec_invm($11, $11, $ctx);
  }
  var $17$s2 = ($point + 8 | 0) >> 2;
  if ((__gcry_mpi_cmp_ui(HEAP32[$17$s2], 1) | 0) == 0) {
    __gcry_mpi_set($3, HEAP32[$point >> 2]);
    __gcry_mpi_set($5, $11);
  } else {
    var $28 = __gcry_mpi_alloc_like(HEAP32[$1$s2]);
    var $30 = __gcry_mpi_alloc_like(HEAP32[$1$s2]);
    var $31 = HEAP32[$17$s2];
    _ec_mulm($28, $31, $31, $ctx);
    _ec_mulm($30, HEAP32[$17$s2], $28, $ctx);
    _ec_invm($28, $28, $ctx);
    _ec_mulm($3, HEAP32[$point >> 2], $28, $ctx);
    _ec_invm($30, $30, $ctx);
    _ec_mulm($5, $11, $30, $ctx);
    __gcry_mpi_free($28);
    __gcry_mpi_free($30);
  }
  var $38 = __gcry_mpi_copy(HEAP32[$ctx + 12 >> 2]);
  __gcry_mpi_mul($7, $8, HEAP32[$ctx + 20 >> 2]);
  var $41 = __gcry_mpi_get_nbits($7);
  __gcry_mpi_set(HEAP32[$result >> 2], HEAP32[$point >> 2]);
  __gcry_mpi_set(HEAP32[$result + 4 >> 2], $11);
  __gcry_mpi_free($11);
  __gcry_mpi_set(HEAP32[$result + 8 >> 2], HEAP32[$17$s2]);
  HEAP32[$p1$s2] = $3;
  HEAP32[$p1$s2 + 1] = $5;
  HEAP32[$p1$s2 + 2] = $38;
  __gcry_mpi_ec_point_init($p2);
  __gcry_mpi_ec_point_init($p1inv);
  var $57 = $41 - 2 | 0;
  if (($57 | 0) == 0) {
    __gcry_mpi_ec_point_free($p1);
    __gcry_mpi_ec_point_free($p2);
    __gcry_mpi_ec_point_free($p1inv);
    __gcry_mpi_free($7);
    __gcry_mpi_free($8);
    STACKTOP = __stackBase__;
    return;
  }
  var $59 = $p1inv + 4 | 0;
  var $i_01 = $57;
  while (1) {
    var $i_01;
    __gcry_mpi_ec_dup_point($result, $result, $ctx);
    do {
      if ((__gcry_mpi_test_bit($7, $i_01) | 0) == 1) {
        if ((__gcry_mpi_test_bit($8, $i_01) | 0) != 0) {
          break;
        }
        _point_set1891($p2, $result);
        __gcry_mpi_ec_add_points($result, $p2, $p1, $ctx);
      }
    } while (0);
    do {
      if ((__gcry_mpi_test_bit($7, $i_01) | 0) == 0) {
        if ((__gcry_mpi_test_bit($8, $i_01) | 0) != 1) {
          break;
        }
        _point_set1891($p2, $result);
        _point_set1891($p1inv, $p1);
        var $74 = HEAP32[$59 >> 2];
        _ec_subm($74, HEAP32[$1$s2], $74, $ctx);
        __gcry_mpi_ec_add_points($result, $p2, $p1inv, $ctx);
      }
    } while (0);
    var $77 = $i_01 - 1 | 0;
    if (($77 | 0) == 0) {
      break;
    } else {
      var $i_01 = $77;
    }
  }
  __gcry_mpi_ec_point_free($p1);
  __gcry_mpi_ec_point_free($p2);
  __gcry_mpi_ec_point_free($p1inv);
  __gcry_mpi_free($7);
  __gcry_mpi_free($8);
  STACKTOP = __stackBase__;
  return;
}
__gcry_mpi_ec_mul_point["X"] = 1;
function _point_set1891($d, $s) {
  __gcry_mpi_set(HEAP32[$d >> 2], HEAP32[$s >> 2]);
  __gcry_mpi_set(HEAP32[$d + 4 >> 2], HEAP32[$s + 4 >> 2]);
  __gcry_mpi_set(HEAP32[$d + 8 >> 2], HEAP32[$s + 8 >> 2]);
  return;
}
function _build_index($exparray, $k, $i, $t) {
  var $1 = $t - $i | 0;
  if (($k | 0) > 0) {
    var $idx_02 = 0;
    var $j_03_in = $k;
  } else {
    var $idx_0_lcssa = 0;
    var $idx_0_lcssa;
    return $idx_0_lcssa;
  }
  while (1) {
    var $j_03_in;
    var $idx_02;
    var $j_03 = $j_03_in - 1 | 0;
    var $idx_1 = (__gcry_mpi_test_bit(HEAP32[$exparray + ($j_03 << 2) >> 2], $1) | 0) != 0 & 1 | $idx_02 << 1;
    if (($j_03 | 0) > 0) {
      var $idx_02 = $idx_1;
      var $j_03_in = $j_03;
    } else {
      var $idx_0_lcssa = $idx_1;
      break;
    }
  }
  var $idx_0_lcssa;
  return $idx_0_lcssa;
}
function __gcry_rngcsprng_initialize($full) {
  if (($full | 0) == 0) {
    _initialize_basics();
    return;
  } else {
    _initialize();
    return;
  }
}
function _initialize() {
  _initialize_basics();
  _lock_pool1948();
  if ((HEAP32[109684] | 0) != 0) {
    _unlock_pool();
    return;
  }
  if (HEAP8[416916]) {
    var $9 = __gcry_xcalloc_secure(1, 664);
  } else {
    var $9 = __gcry_xcalloc(1, 664);
  }
  var $9;
  HEAP32[109684] = $9;
  if (HEAP8[416916]) {
    var $15 = __gcry_xcalloc_secure(1, 664);
  } else {
    var $15 = __gcry_xcalloc(1, 664);
  }
  var $15;
  HEAP32[113813] = $15;
  _getfnc_gather_random();
  HEAP32[103227] = 286;
  _unlock_pool();
  return;
}
function __gcry_rngcsprng_dump_stats() {
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[109683];
  var $2 = HEAP32[109681];
  var $3 = HEAP32[109680];
  var $4 = HEAP32[109674];
  var $5 = HEAP32[109675];
  var $6 = HEAP32[109682];
  var $7 = HEAP32[109678];
  var $8 = HEAP32[109679];
  var $9 = HEAP32[109676];
  var $10 = HEAP32[109677];
  var $13 = (__gcry_rndhw_failed_p() | 0) != 0 ? 488304 : 480188;
  __gcry_log_info(482416, (tempInt = STACKTOP, STACKTOP = STACKTOP + 48 | 0, HEAP32[tempInt >> 2] = 600, HEAP32[tempInt + 4 >> 2] = $1, HEAP32[tempInt + 8 >> 2] = $2, HEAP32[tempInt + 12 >> 2] = $3, HEAP32[tempInt + 16 >> 2] = $4, HEAP32[tempInt + 20 >> 2] = $5, HEAP32[tempInt + 24 >> 2] = $6, HEAP32[tempInt + 28 >> 2] = $7, HEAP32[tempInt + 32 >> 2] = $8, HEAP32[tempInt + 36 >> 2] = $9, HEAP32[tempInt + 40 >> 2] = $10, HEAP32[tempInt + 44 >> 2] = $13, tempInt));
  STACKTOP = __stackBase__;
  return;
}
function __gcry_rngcsprng_is_faked() {
  _initialize();
  return HEAP8[439428] & 1;
}
function __gcry_rngcsprng_add_bytes($buf, $buflen, $quality) {
  do {
    if (($quality | 0) == -1) {
      var $_02 = 35;
    } else {
      if (($quality | 0) > 100) {
        var $_02 = 100;
        break;
      }
      var $_02 = ($quality | 0) < 0 ? 0 : $quality;
    }
  } while (0);
  var $_02;
  if (($buf | 0) == 0) {
    var $_0 = 16777261;
    var $_0;
    return $_0;
  }
  if (($buflen | 0) == 0 | ($_02 | 0) < 10) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  _initialize_basics();
  if (($buflen | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  } else {
    var $_013 = $buflen;
    var $bufptr_04 = $buf;
  }
  while (1) {
    var $bufptr_04;
    var $_013;
    var $14 = $_013 >>> 0 > 600 ? 600 : $_013;
    _lock_pool1948();
    if ((HEAP32[109684] | 0) != 0) {
      _add_randomness($bufptr_04, $14, 1);
    }
    _unlock_pool();
    if (($_013 | 0) == ($14 | 0)) {
      var $_0 = 0;
      break;
    } else {
      var $_013 = $_013 - $14 | 0;
      var $bufptr_04 = $bufptr_04 + $14 | 0;
    }
  }
  var $_0;
  return $_0;
}
function __gcry_rngcsprng_randomize($buffer, $length, $level) {
  _initialize();
  var $2 = HEAP8[439428] & $level >>> 0 > 1 ? 1 : $level & 3;
  _lock_pool1948();
  if ($2 >>> 0 > 1) {
    HEAP32[109677] = HEAP32[109677] + $length | 0;
    HEAP32[109676] = HEAP32[109676] + 1 | 0;
  } else {
    HEAP32[109679] = HEAP32[109679] + $length | 0;
    HEAP32[109678] = HEAP32[109678] + 1 | 0;
  }
  if (($length | 0) == 0) {
    _unlock_pool();
    return;
  } else {
    var $_02 = $length;
    var $p_03 = $buffer;
  }
  while (1) {
    var $p_03;
    var $_02;
    var $16 = $_02 >>> 0 > 600 ? 600 : $_02;
    _read_pool($p_03, $16, $2);
    if (($_02 | 0) == ($16 | 0)) {
      break;
    } else {
      var $_02 = $_02 - $16 | 0;
      var $p_03 = $p_03 + $16 | 0;
    }
  }
  _unlock_pool();
  return;
}



function __gcry_mpi_mulpowm($res, $basearray, $exparray, $m) {
  var $43$s2;
  var label = 0;
  var $indvars_iv = 0;
  while (1) {
    var $indvars_iv;
    if ((HEAP32[$basearray + ($indvars_iv << 2) >> 2] | 0) == 0) {
      break;
    } else {
      var $indvars_iv = $indvars_iv + 1 | 0;
    }
  }
  if (($indvars_iv | 0) == 0) {
    __gcry_assert_failed(482548, 488352, 80, 495316);
  }
  var $7 = HEAP32[$exparray >> 2];
  L447 : do {
    if (($7 | 0) == 0) {
      var $t_0_lcssa = 0;
      var $i_0_lcssa = 0;
    } else {
      var $t_06 = 0;
      var $i_07 = 0;
      var $10 = $7;
      while (1) {
        var $10;
        var $i_07;
        var $t_06;
        var $11 = __gcry_mpi_get_nbits($10);
        var $_t_0 = ($11 | 0) > ($t_06 | 0) ? $11 : $t_06;
        var $13 = $i_07 + 1 | 0;
        var $15 = HEAP32[$exparray + ($13 << 2) >> 2];
        if (($15 | 0) == 0) {
          var $t_0_lcssa = $_t_0;
          var $i_0_lcssa = $13;
          break L447;
        } else {
          var $t_06 = $_t_0;
          var $i_07 = $13;
          var $10 = $15;
        }
      }
    }
  } while (0);
  var $i_0_lcssa;
  var $t_0_lcssa;
  if (($i_0_lcssa | 0) != ($indvars_iv | 0)) {
    __gcry_assert_failed(480192, 488352, 88, 495316);
  }
  if (($t_0_lcssa | 0) == 0) {
    __gcry_assert_failed(476564, 488352, 89, 495316);
  }
  if (($indvars_iv | 0) >= 10) {
    __gcry_assert_failed(473804, 488352, 90, 495316);
  }
  var $26 = 1 << $indvars_iv;
  var $27 = __gcry_xcalloc($26, 4);
  var $28 = $27;
  var $32 = __gcry_mpi_alloc(HEAP32[$m + 4 >> 2] + 1 | 0);
  __gcry_mpi_set_ui($res, 1);
  var $34 = ($indvars_iv | 0) > 0;
  var $i_1 = 1;
  while (1) {
    var $i_1;
    if (($i_1 | 0) > ($t_0_lcssa | 0)) {
      break;
    }
    __gcry_mpi_mulm($32, $res, $res, $m);
    var $38 = _build_index($exparray, $indvars_iv, $i_1, $t_0_lcssa);
    if (!(($38 | 0) > -1 & ($38 | 0) < ($26 | 0))) {
      label = 380;
      break;
    }
    var $43$s2 = (($38 << 2) + $28 | 0) >> 2;
    do {
      if ((HEAP32[$43$s2] | 0) == 0) {
        if (($38 | 0) == 0) {
          HEAP32[$28 >> 2] = __gcry_mpi_alloc_set_ui(1);
          break;
        }
        L469 : do {
          if ($34) {
            var $j_02 = 0;
            while (1) {
              var $j_02;
              do {
                if ((1 << $j_02 & $38 | 0) != 0) {
                  var $54 = HEAP32[$43$s2];
                  var $57 = HEAP32[$basearray + ($j_02 << 2) >> 2];
                  if (($54 | 0) == 0) {
                    HEAP32[$43$s2] = __gcry_mpi_copy($57);
                    break;
                  } else {
                    __gcry_mpi_mulm($54, $54, $57, $m);
                    break;
                  }
                }
              } while (0);
              var $62 = $j_02 + 1 | 0;
              if (($62 | 0) == ($indvars_iv | 0)) {
                break L469;
              } else {
                var $j_02 = $62;
              }
            }
          }
        } while (0);
        if ((HEAP32[$43$s2] | 0) != 0) {
          break;
        }
        HEAP32[$43$s2] = __gcry_mpi_alloc(0);
      }
    } while (0);
    __gcry_mpi_mulm($res, $32, HEAP32[$43$s2], $m);
    var $i_1 = $i_1 + 1 | 0;
  }
  if (label == 380) {
    __gcry_assert_failed(471924, 488352, 103, 495316);
  }
  __gcry_mpi_free($32);
  if (($26 | 0) > 0) {
    var $i_21 = 0;
  } else {
    __gcry_free($27);
    return;
  }
  while (1) {
    var $i_21;
    __gcry_mpi_free(HEAP32[$28 + ($i_21 << 2) >> 2]);
    var $74 = $i_21 + 1 | 0;
    if (($74 | 0) == ($26 | 0)) {
      break;
    } else {
      var $i_21 = $74;
    }
  }
  __gcry_free($27);
  return;
}
__gcry_mpi_mulpowm["X"] = 1;
function _initialize_basics() {
  var __stackBase__ = STACKTOP;
  if (HEAP8[455268]) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP8[455268] = 1;
  var $2 = __gcry_ath_mutex_init(440192);
  if (($2 | 0) != 0) {
    var $5 = _strerror($2);
    __gcry_log_fatal(477780, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $5, tempInt));
  }
  var $7 = __gcry_ath_mutex_init(440712);
  if (($7 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $10 = _strerror($7);
    __gcry_log_fatal(477460, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $10, tempInt));
  }
}
function _lock_pool1948() {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_ath_mutex_lock(440192);
  if (($1 | 0) == 0) {
    HEAP8[440200] = 1;
    STACKTOP = __stackBase__;
    return;
  } else {
    var $4 = _strerror($1);
    __gcry_log_fatal(479652, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
  }
}
function _add_randomness($buffer, $length, $origin) {
  if (!HEAP8[440200]) {
    __gcry_assert_failed(490404, 476548, 1074, 494992);
  }
  HEAP32[109675] = HEAP32[109675] + $length | 0;
  HEAP32[109674] = HEAP32[109674] + 1 | 0;
  if (($length | 0) == 0) {
    return;
  }
  var $8 = $origin >>> 0 < 3;
  var $p_03 = $buffer;
  var $count_04 = 0;
  var $_in = $length;
  while (1) {
    var $_in;
    var $count_04;
    var $p_03;
    var $10 = $_in - 1 | 0;
    var $11 = $p_03 + 1 | 0;
    var $12 = HEAP8[$p_03];
    var $13 = HEAP32[110044];
    HEAP32[110044] = $13 + 1 | 0;
    var $16 = HEAP32[109684] + $13 | 0;
    HEAP8[$16] = HEAP8[$16] ^ $12;
    var $19 = $count_04 + 1 | 0;
    if (HEAP32[110044] >>> 0 > 599) {
      do {
        if ($8 | HEAP8[440208]) {
          var $count_1 = $19;
        } else {
          var $25 = HEAP32[110051] + $19 | 0;
          HEAP32[110051] = $25;
          if ($25 >>> 0 <= 599) {
            var $count_1 = 0;
            break;
          }
          HEAP8[440208] = 1;
          var $count_1 = 0;
        }
      } while (0);
      var $count_1;
      HEAP32[110044] = 0;
      _mix_pool(HEAP32[109684]);
      HEAP32[109683] = HEAP32[109683] + 1 | 0;
      HEAP32[113814] = ($10 | 0) == 0 & 1;
      var $count_0_be = $count_1;
    } else {
      var $count_0_be = $19;
    }
    var $count_0_be;
    if (($10 | 0) == 0) {
      break;
    } else {
      var $p_03 = $11;
      var $count_04 = $count_0_be;
      var $_in = $10;
    }
  }
  return;
}
_add_randomness["X"] = 1;
function _unlock_pool() {
  var __stackBase__ = STACKTOP;
  HEAP8[440200] = 0;
  var $1 = __gcry_ath_mutex_unlock(440192);
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $4 = _strerror($1);
    __gcry_log_fatal(479908, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
  }
}
function _gpg_err_make1959() {
  return;
}
function _getfnc_fast_random_poll() {
  return;
}
function __gcry_rngcsprng_update_seed_file() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  _initialize_basics();
  _lock_pool1948();
  var $3 = HEAP32[109684];
  if (!((HEAP32[104228] | 0) != 0 & ($3 | 0) != 0 & HEAP8[440208])) {
    _unlock_pool();
    STACKTOP = __stackBase__;
    return;
  }
  if (!HEAP8[464508]) {
    _unlock_pool();
    __gcry_log_info(__gcry_gettext(473768), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    STACKTOP = __stackBase__;
    return;
  }
  var $i_05 = 0;
  var $dp_06 = HEAP32[113813];
  var $sp_07 = $3;
  while (1) {
    var $sp_07;
    var $dp_06;
    var $i_05;
    HEAP32[$dp_06 >> 2] = HEAP32[$sp_07 >> 2] - 1515870811 | 0;
    var $16 = $i_05 + 1 | 0;
    if (($16 | 0) == 150) {
      break;
    } else {
      var $i_05 = $16;
      var $dp_06 = $dp_06 + 4 | 0;
      var $sp_07 = $sp_07 + 4 | 0;
    }
  }
  _mix_pool(HEAP32[109684]);
  HEAP32[109683] = HEAP32[109683] + 1 | 0;
  _mix_pool(HEAP32[113813]);
  HEAP32[109682] = HEAP32[109682] + 1 | 0;
  var $27 = _open(HEAP32[104228], 513, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 384, tempInt));
  do {
    if (($27 | 0) == -1) {
      var $30 = __gcry_gettext(471900);
      var $31 = HEAP32[104228];
      var $34 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_info($30, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $31, HEAP32[tempInt + 4 >> 2] = $34, tempInt));
    } else {
      if ((_lock_seed_file($27, HEAP32[104228], 1) | 0) != 0) {
        _close($27);
        break;
      }
      if ((_ftruncate($27, 0) | 0) != 0) {
        var $45 = __gcry_gettext(470436);
        var $46 = HEAP32[104228];
        var $49 = _strerror(HEAP32[___errno_location() >> 2]);
        __gcry_log_info($45, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $46, HEAP32[tempInt + 4 >> 2] = $49, tempInt));
        _close($27);
        break;
      }
      while (1) {
        var $52 = _write($27, HEAP32[113813], 600);
        if (($52 | 0) == 600) {
          break;
        } else if (($52 | 0) != -1) {
          label = 441;
          break;
        }
        if ((HEAP32[___errno_location() >> 2] | 0) != 4) {
          label = 441;
          break;
        }
      }
      if (label == 441) {
        var $57 = __gcry_gettext(470436);
        var $58 = HEAP32[104228];
        var $61 = _strerror(HEAP32[___errno_location() >> 2]);
        __gcry_log_info($57, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $58, HEAP32[tempInt + 4 >> 2] = $61, tempInt));
      }
      if ((_close($27) | 0) == 0) {
        break;
      }
      var $65 = __gcry_gettext(468972);
      var $66 = HEAP32[104228];
      var $69 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_info($65, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $66, HEAP32[tempInt + 4 >> 2] = $69, tempInt));
    }
  } while (0);
  _unlock_pool();
  STACKTOP = __stackBase__;
  return;
}
__gcry_rngcsprng_update_seed_file["X"] = 1;
function _lock_seed_file($fd, $fname, $for_write) {
  var $1$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  var $lck = __stackBase__;
  var $tv = __stackBase__ + 16;
  var $1$s2 = $lck >> 2;
  HEAP32[$1$s2] = 0;
  HEAP32[$1$s2 + 1] = 0;
  HEAP32[$1$s2 + 2] = 0;
  HEAP32[$1$s2 + 3] = 0;
  HEAP16[$lck >> 1] = ($for_write | 0) != 0 ? 2 : 1;
  HEAP16[$lck + 2 >> 1] = 0;
  var $6 = $tv | 0;
  var $7 = $tv + 4 | 0;
  var $backoff_0 = 0;
  while (1) {
    var $backoff_0;
    if ((_fcntl($fd, 8, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $lck, tempInt)) | 0) != -1) {
      var $_0 = 0;
      label = 459;
      break;
    }
    if ((HEAP32[___errno_location() >> 2] | 0) != 11) {
      if ((HEAP32[___errno_location() >> 2] | 0) != 13) {
        break;
      }
    }
    if (($backoff_0 | 0) > 2) {
      __gcry_log_info(__gcry_gettext(481056), (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fname, tempInt));
    }
    HEAP32[$6 >> 2] = $backoff_0;
    HEAP32[$7 >> 2] = 25e4;
    _select(0, 0, 0, 0, $tv);
    var $backoff_0 = (($backoff_0 | 0) < 10 & 1) + $backoff_0 | 0;
  }
  if (label == 459) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $20 = __gcry_gettext(481540);
  var $23 = _strerror(HEAP32[___errno_location() >> 2]);
  __gcry_log_info($20, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $fname, HEAP32[tempInt + 4 >> 2] = $23, tempInt));
  var $_0 = -1;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_rngcsprng_fast_poll() {
  _initialize_basics();
  _lock_pool1948();
  if ((HEAP32[109684] | 0) == 0) {
    _unlock_pool();
    return;
  }
  _do_fast_random_poll();
  _unlock_pool();
  return;
}
function _random_poll() {
  HEAP32[109681] = HEAP32[109681] + 1 | 0;
  _read_random_source(3, 120, 1);
  return;
}
function _gather_faked($origin, $length) {
  var __stackBase__ = STACKTOP;
  if (!HEAP8[455432]) {
    __gcry_log_info(__gcry_gettext(479320), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    HEAP8[455432] = 1;
    _srand(_time(0) * _getgid() & -1);
  }
  var $7 = __gcry_xmalloc($length);
  var $p_0 = $7;
  var $n_0 = $length;
  while (1) {
    var $n_0;
    var $p_0;
    if (($n_0 | 0) == 0) {
      break;
    }
    HEAP8[$p_0] = _rand() * 256 * 4.656612873077393e-10 & -1 & 255;
    var $p_0 = $p_0 + 1 | 0;
    var $n_0 = $n_0 - 1 | 0;
  }
  _add_randomness($7, $length, $origin);
  __gcry_free($7);
  STACKTOP = __stackBase__;
  return;
}
function _read_pool($buffer, $length, $level) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 12 | 0;
  var $my_pid2;
  var $x = __stackBase__;
  var $apid = __stackBase__ + 4;
  var $x2 = __stackBase__ + 8;
  if (!HEAP8[440200]) {
    __gcry_assert_failed(490404, 476548, 934, 494092);
  }
  var $1 = ($level | 0) != 2;
  var $2 = ($level | 0) == 2;
  var $3 = $apid;
  var $4 = $x2;
  var $5 = $x;
  var $_0 = $buffer;
  var $_02 = $length;
  L587 : while (1) {
    var $_02;
    var $_0;
    $my_pid2 = _getgid();
    if ((HEAP32[109806] | 0) == -1) {
      HEAP32[109806] = $my_pid2;
    }
    if ((HEAP32[109806] | 0) != ($my_pid2 | 0)) {
      HEAP32[109806] = $my_pid2;
      HEAP32[$x >> 2] = HEAP32[109806];
      _add_randomness($5, 4, 0);
      HEAP32[113814] = 0;
    }
    if (!HEAP8[440200]) {
      label = 480;
      break;
    }
    var $23 = $_02 >>> 0 > 600;
    if ($23) {
      label = 482;
      break;
    }
    do {
      if (!HEAP8[440208]) {
        if ((_read_seed_file() | 0) == 0) {
          break;
        }
        HEAP8[440208] = 1;
      }
    } while (0);
    if (!($1 | HEAP8[457932])) {
      HEAP32[110053] = 0;
      var $32 = $_02 >>> 0 < 300;
      var $_mux = $32 ? 300 : $_02;
      if (!($32 | $23 ^ 1)) {
        label = 488;
        break;
      }
      _read_random_source(4, $_mux, 2);
      HEAP32[110053] = HEAP32[110053] + $_mux | 0;
      HEAP8[457932] = 1;
    }
    do {
      if ($2) {
        var $39 = HEAP32[110053];
        if ($39 >>> 0 >= $_02 >>> 0) {
          break;
        }
        if (($39 | 0) < 0) {
          HEAP32[110053] = 0;
        }
        var $46 = $_02 - HEAP32[110053] | 0;
        if ($46 >>> 0 > 600) {
          label = 495;
          break L587;
        }
        _read_random_source(4, $46, 2);
        HEAP32[110053] = HEAP32[110053] + $46 | 0;
      }
    } while (0);
    L613 : do {
      if (!HEAP8[440208]) {
        while (1) {
          _random_poll();
          if (HEAP8[440208]) {
            break L613;
          }
        }
      }
    } while (0);
    _do_fast_random_poll();
    HEAP32[$apid >> 2] = HEAP32[109806];
    _add_randomness($3, 4, 0);
    if ((HEAP32[113814] | 0) == 0) {
      _mix_pool(HEAP32[109684]);
      HEAP32[109683] = HEAP32[109683] + 1 | 0;
    }
    var $dp_09 = HEAP32[113813];
    var $sp_010 = HEAP32[109684];
    var $i_011 = 0;
    while (1) {
      var $i_011;
      var $sp_010;
      var $dp_09;
      HEAP32[$dp_09 >> 2] = HEAP32[$sp_010 >> 2] - 1515870811 | 0;
      var $67 = $i_011 + 1 | 0;
      if (($67 | 0) == 150) {
        break;
      } else {
        var $dp_09 = $dp_09 + 4 | 0;
        var $sp_010 = $sp_010 + 4 | 0;
        var $i_011 = $67;
      }
    }
    _mix_pool(HEAP32[109684]);
    HEAP32[109683] = HEAP32[109683] + 1 | 0;
    _mix_pool(HEAP32[113813]);
    HEAP32[109682] = HEAP32[109682] + 1 | 0;
    var $77 = $_02 - 1 | 0;
    if (($_02 | 0) == 0) {
      var $_1_lcssa = $_0;
      var $_lcssa = $77;
    } else {
      var $_112 = $_0;
      var $79 = $77;
      while (1) {
        var $79;
        var $_112;
        var $80 = HEAP32[110046];
        HEAP32[110046] = $80 + 1 | 0;
        HEAP8[$_112] = HEAP8[HEAP32[113813] + $80 | 0];
        if (HEAP32[110046] >>> 0 > 599) {
          HEAP32[110046] = 0;
        }
        HEAP32[110053] = HEAP32[110053] - 1 | 0;
        if (($79 | 0) == 0) {
          break;
        } else {
          var $_112 = $_112 + 1 | 0;
          var $79 = $79 - 1 | 0;
        }
      }
      var $_1_lcssa = $_0 + $_02 | 0;
      var $_lcssa = -1;
    }
    var $_lcssa;
    var $_1_lcssa;
    if ((HEAP32[110053] | 0) < 0) {
      HEAP32[110053] = 0;
    }
    _memset(HEAP32[113813], 0, 600);
    if ((_getgid() | 0) == ($my_pid2 | 0)) {
      label = 512;
      break;
    }
    HEAP32[$x2 >> 2] = _getgid();
    _add_randomness($4, 4, 0);
    HEAP32[113814] = 0;
    HEAP32[109806] = HEAP32[$x2 >> 2];
    var $_0 = $_1_lcssa;
    var $_02 = $_lcssa;
  }
  if (label == 488) {
    __gcry_bug(476548, 979, 494092);
  } else if (label == 482) {
    __gcry_log_bug(489516, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  } else if (label == 495) {
    __gcry_bug(476548, 995, 494092);
  } else if (label == 480) {
    __gcry_assert_failed(490404, 476548, 953, 494092);
  } else if (label == 512) {
    STACKTOP = __stackBase__;
    return;
  }
}
_read_pool["X"] = 1;
function __gcry_rngcsprng_set_seed_file($name) {
  if ((HEAP32[104228] | 0) == 0) {
    HEAP32[104228] = __gcry_xstrdup($name);
    return;
  } else {
    __gcry_bug(476548, 673, 495192);
  }
}
function _mix_pool($pool) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 92 | 0;
  var $md = __stackBase__;
  var $1 = $pool + 600 | 0;
  if (!HEAP8[440200]) {
    __gcry_assert_failed(490404, 476548, 615, 494236);
  }
  __gcry_rmd160_init($md);
  _memcpy($1, $pool + 580 | 0, 20);
  var $6 = $pool + 620 | 0;
  _memcpy($6, $pool, 44);
  __gcry_rmd160_mixblock($md, $1);
  _memcpy($pool, $1, 20);
  L649 : do {
    if (HEAP8[446960] & (HEAP32[109684] | 0) == ($pool | 0)) {
      var $i_09 = 0;
      while (1) {
        var $i_09;
        var $11 = $pool + $i_09 | 0;
        HEAP8[$11] = HEAP8[$11] ^ HEAP8[$i_09 + 446964 | 0];
        var $14 = $i_09 + 1 | 0;
        if (($14 | 0) == 20) {
          var $p_06 = $pool;
          var $n_07 = 1;
          break L649;
        } else {
          var $i_09 = $14;
        }
      }
    } else {
      var $p_06 = $pool;
      var $n_07 = 1;
    }
  } while (0);
  while (1) {
    var $n_07;
    var $p_06;
    _memcpy($1, $p_06, 20);
    var $15 = $p_06 + 20 | 0;
    var $16 = $p_06 + 40 | 0;
    L654 : do {
      if (($p_06 + 104 | 0) >>> 0 < $1 >>> 0) {
        _memcpy($6, $16, 44);
      } else {
        var $i_13 = 20;
        var $pp_04 = $16;
        while (1) {
          var $pp_04;
          var $i_13;
          var $pp_0_pool = $pp_04 >>> 0 < $1 >>> 0 ? $pp_04 : $pool;
          HEAP8[$i_13 + ($pool + 600) | 0] = HEAP8[$pp_0_pool];
          var $24 = $i_13 + 1 | 0;
          if (($24 | 0) == 64) {
            break L654;
          } else {
            var $i_13 = $24;
            var $pp_04 = $pp_0_pool + 1 | 0;
          }
        }
      }
    } while (0);
    __gcry_rmd160_mixblock($md, $1);
    _memcpy($15, $1, 20);
    var $25 = $n_07 + 1 | 0;
    if (($25 | 0) == 30) {
      break;
    } else {
      var $p_06 = $15;
      var $n_07 = $25;
    }
  }
  if ((HEAP32[109684] | 0) != ($pool | 0)) {
    __gcry_burn_stack(384);
    STACKTOP = __stackBase__;
    return;
  }
  __gcry_rmd160_hash_buffer(446964, $pool, 600);
  HEAP8[446960] = 1;
  __gcry_burn_stack(384);
  STACKTOP = __stackBase__;
  return;
}
_mix_pool["X"] = 1;
function _do_fast_random_poll() {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  var $tv = __stackBase__;
  var $buf = __stackBase__ + 8;
  var $x = __stackBase__ + 80;
  var $x1 = __stackBase__ + 84;
  if (!HEAP8[440200]) {
    __gcry_assert_failed(490404, 476548, 1180, 494884);
  }
  HEAP32[109680] = HEAP32[109680] + 1 | 0;
  if ((_gettimeofday($tv, 0) | 0) == 0) {
    _add_randomness($tv, 4, 2);
    _add_randomness($tv + 4 | 0, 4, 2);
    _getrusage(0, $buf);
    var $13 = $buf;
    _add_randomness($13, 72, 2);
    for (var $$dest = $13 >> 2, $$stop = $$dest + 18; $$dest < $$stop; $$dest++) {
      HEAP32[$$dest] = 0;
    }
    HEAP32[$x >> 2] = _time(0);
    _add_randomness($x, 4, 2);
    HEAP32[$x1 >> 2] = _clock();
    _add_randomness($x1, 4, 2);
    STACKTOP = __stackBase__;
    return;
  } else {
    __gcry_bug(476548, 1198, 494884);
  }
}
function __gcry_rngcsprng_create_nonce($buffer, $length) {
  var __stackBase__ = STACKTOP;
  var $apid;
  _initialize();
  var $1 = __gcry_ath_mutex_lock(440712);
  if (($1 | 0) != 0) {
    var $4 = _strerror($1);
    __gcry_log_fatal(467368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
  }
  $apid = _getgid();
  do {
    if (HEAP8[491236]) {
      if ((HEAP32[122817] | 0) == ($apid | 0)) {
        break;
      }
      __gcry_randomize(491260, 8, 0);
      HEAP32[122817] = $apid;
    } else {
      var $8 = _time(0);
      HEAP32[122817] = $apid;
      HEAP32[122810] = $apid;
      HEAP32[122811] = $8;
      __gcry_randomize(491260, 8, 0);
      HEAP8[491236] = 1;
    }
  } while (0);
  L680 : do {
    if (($length | 0) != 0) {
      var $p_02 = $buffer;
      var $_03 = $length;
      while (1) {
        var $_03;
        var $p_02;
        __gcry_sha1_hash_buffer(491240, 491240, 28);
        var $19 = $_03 >>> 0 > 20 ? 20 : $_03;
        _memcpy($p_02, 491240, $19);
        if (($_03 | 0) == ($19 | 0)) {
          break L680;
        } else {
          var $p_02 = $p_02 + $19 | 0;
          var $_03 = $_03 - $19 | 0;
        }
      }
    }
  } while (0);
  var $23 = __gcry_ath_mutex_unlock(440712);
  if (($23 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $26 = _strerror($23);
    __gcry_log_fatal(465296, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $26, tempInt));
  }
}
function _read_seed_file() {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 684 | 0;
  var $sb = __stackBase__;
  var $buffer = __stackBase__ + 72;
  var $x = __stackBase__ + 672;
  var $x1 = __stackBase__ + 676;
  var $x2 = __stackBase__ + 680;
  if (!HEAP8[440200]) {
    __gcry_assert_failed(490404, 476548, 743, 494076);
  }
  var $3 = HEAP32[104228];
  if (($3 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $6 = _open($3, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  if (($6 | 0) == -1) {
    if ((HEAP32[___errno_location() >> 2] | 0) == 2) {
      HEAP8[464508] = 1;
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else {
      var $14 = __gcry_gettext(486176);
      var $15 = HEAP32[104228];
      var $18 = _strerror(HEAP32[___errno_location() >> 2]);
      __gcry_log_info($14, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $15, HEAP32[tempInt + 4 >> 2] = $18, tempInt));
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  }
  if ((_lock_seed_file($6, HEAP32[104228], 0) | 0) != 0) {
    _close($6);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((_fstat($6, $sb) | 0) != 0) {
    var $28 = __gcry_gettext(485388);
    var $29 = HEAP32[104228];
    var $32 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_info($28, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $29, HEAP32[tempInt + 4 >> 2] = $32, tempInt));
    _close($6);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if ((HEAP32[$sb + 8 >> 2] & 61440 | 0) != 32768) {
    __gcry_log_info(__gcry_gettext(484496), (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = HEAP32[104228], tempInt));
    _close($6);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $45 = HEAP32[$sb + 28 >> 2];
  if (($45 | 0) == 600) {
    var $46 = $buffer | 0;
    while (1) {
      var $54 = _read($6, $46, 600);
      if (($54 | 0) == 600) {
        label = 565;
        break;
      } else if (($54 | 0) != -1) {
        label = 577;
        break;
      }
      if ((HEAP32[___errno_location() >> 2] | 0) != 4) {
        label = 576;
        break;
      }
    }
    if (label == 565) {
      _close($6);
      _add_randomness($46, 600, 0);
      HEAP32[$x >> 2] = _getgid();
      _add_randomness($x, 4, 0);
      HEAP32[$x1 >> 2] = _time(0);
      _add_randomness($x1, 4, 0);
      HEAP32[$x2 >> 2] = _clock();
      _add_randomness($x2, 4, 0);
      _read_random_source(0, 16, 0);
      HEAP8[464508] = 1;
      var $_0 = 1;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    } else if (label == 576) {
      var $59 = __gcry_gettext(482120);
      var $60 = HEAP32[104228];
      var $61 = ___errno_location();
      var $62 = HEAP32[$61 >> 2];
      var $63 = _strerror($62);
      __gcry_log_fatal($59, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $60, HEAP32[tempInt + 4 >> 2] = $63, tempInt));
    } else if (label == 577) {
      var $59 = __gcry_gettext(482120);
      var $60 = HEAP32[104228];
      var $61 = ___errno_location();
      var $62 = HEAP32[$61 >> 2];
      var $63 = _strerror($62);
      __gcry_log_fatal($59, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $60, HEAP32[tempInt + 4 >> 2] = $63, tempInt));
    }
  } else if (($45 | 0) == 0) {
    __gcry_log_info(__gcry_gettext(483696), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    _close($6);
    HEAP8[464508] = 1;
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    __gcry_log_info(__gcry_gettext(482796), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
    _close($6);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_read_seed_file["X"] = 1;
function _read_random_source($orgin, $length, $level) {
  var __stackBase__ = STACKTOP;
  var $1 = HEAP32[103227];
  if (($1 | 0) == 0) {
    __gcry_log_fatal(487804, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
  if ((FUNCTION_TABLE[$1](186, $orgin, $length, $level) | 0) < 0) {
    __gcry_log_fatal(487124, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  } else {
    STACKTOP = __stackBase__;
    return;
  }
}
function _getfnc_gather_random() {
  var __stackBase__ = STACKTOP;
  do {
    if ((_access(478768, 4) | 0) == 0) {
      if ((_access(478416, 4) | 0) != 0) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  __gcry_log_fatal(__gcry_gettext(478080), (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
function _basic_initialization() {
  return;
}
function __gcry_rngfips_dump_stats() {
  return;
}
function __gcry_rngfips_is_faked() {
  return 0;
}
function __gcry_rngfips_add_bytes($buf, $buflen, $quality) {
  return 0;
}
function _gpg_err_code2012($err) {
  return $err & 65535;
}
function _gpg_err_make2013($code) {
  if (($code | 0) == 0) {
    var $6 = 0;
  } else {
    var $6 = $code & 65535 | 16777216;
  }
  var $6;
  return $6;
}
function _setup_guards($rng_ctx) {
  HEAP8[$rng_ctx | 0] = 17;
  HEAP8[$rng_ctx + 16 | 0] = 42;
  HEAP8[$rng_ctx + 33 | 0] = -119;
  HEAP8[$rng_ctx + 50 | 0] = -4;
  return;
}
function __gcry_rngfips_randomize($buffer, $length, $level) {
  __gcry_rngfips_initialize(1);
  _lock_rng();
  if (($level | 0) == 2) {
    _get_random($buffer, $length, HEAP32[102890]);
    _unlock_rng();
    return;
  } else {
    _get_random($buffer, $length, HEAP32[102891]);
    _unlock_rng();
    return;
  }
}
function __gcry_rngfips_create_nonce($buffer, $length) {
  __gcry_rngfips_initialize(1);
  _lock_rng();
  _get_random($buffer, $length, HEAP32[110177]);
  _unlock_rng();
  return;
}
function __gcry_rngfips_selftest($report) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  __gcry_randomize(__stackBase__ | 0, 8, 1);
  var $3 = _gpg_error2004(_selftest_kat($report));
  STACKTOP = __stackBase__;
  return $3;
}
function _gpg_error2004($code) {
  return _gpg_err_make2013($code);
}
function __gcry_rngfips_init_external_test($r_context, $flags, $key, $keylen, $seed, $seedlen, $dt, $dtlen) {
  var $6$s2;
  var label = 0;
  __gcry_rngfips_initialize(1);
  if (!(($key | 0) != 0 & ($r_context | 0) != 0 & ($keylen | 0) == 16 & ($seed | 0) != 0 & ($seedlen | 0) == 16 & ($dt | 0) != 0 & ($dtlen | 0) == 16)) {
    var $_0 = 45;
    var $_0;
    return $_0;
  }
  var $6 = __gcry_calloc(1, $dtlen + 68 | 0), $6$s2 = $6 >> 2;
  var $7 = $6;
  if (($6 | 0) == 0) {
    var $_0 = _gpg_err_code_from_syserror();
    var $_0;
    return $_0;
  }
  _setup_guards($7);
  var $13 = $6 + 4 | 0;
  var $14 = __gcry_cipher_open($13, 7, 1, 1);
  do {
    if (($14 | 0) == 0) {
      var $18 = __gcry_cipher_setkey(HEAP32[$13 >> 2], $key, $keylen);
      if (($18 | 0) != 0) {
        var $err_0_ph = $18;
        label = 613;
        break;
      }
      HEAP32[$6$s2 + 15] = _getgid();
      _memcpy($6 + 17 | 0, $seed, $seedlen);
      var $26 = $6 + 8 | 0;
      HEAP32[$26 >> 2] = HEAP32[$26 >> 2] | 1;
      HEAP32[$6$s2 + 16] = _getgid();
      var $32 = $6 + 68 | 0;
      _memcpy($32, $dt, $dtlen);
      HEAP32[$6$s2 + 13] = $32;
      HEAP32[$6$s2 + 14] = HEAPU8[$6 + 81 | 0] << 16 | HEAPU8[$6 + 80 | 0] << 24 | HEAPU8[$6 + 83 | 0] | HEAPU8[$6 + 82 | 0] << 8;
      if (($flags & 1 | 0) != 0) {
        HEAP8[$6 + 51 | 0] = 1;
      }
      _check_guards($7);
      var $storemerge = $6;
      var $err_07 = 0;
      break;
    } else {
      var $err_0_ph = $14;
      label = 613;
    }
  } while (0);
  if (label == 613) {
    var $err_0_ph;
    __gcry_cipher_close(HEAP32[$13 >> 2]);
    __gcry_free($6);
    var $storemerge = 0;
    var $err_07 = $err_0_ph;
  }
  var $err_07;
  var $storemerge;
  HEAP32[$r_context >> 2] = $storemerge;
  var $_0 = _gcry_err_code2007($err_07);
  var $_0;
  return $_0;
}
__gcry_rngfips_init_external_test["X"] = 1;
function _gcry_err_code2007($err) {
  return _gpg_err_code2012($err);
}
function __gcry_rngfips_run_external_test($context, $buffer, $buflen) {
  if (!(($buffer | 0) != 0 & ($context | 0) != 0 & ($buflen | 0) == 16)) {
    var $_0 = 45;
    var $_0;
    return $_0;
  }
  _lock_rng();
  _get_random($buffer, $buflen, $context);
  _unlock_rng();
  var $_0 = 0;
  var $_0;
  return $_0;
}
function __gcry_rngfips_deinit_external_test($context) {
  if (($context | 0) == 0) {
    return;
  }
  __gcry_cipher_close(HEAP32[$context + 4 >> 2]);
  __gcry_free($context);
  return;
}
function __gcry_rngfips_initialize($full) {
  if (($full | 0) == 0) {
    return;
  }
  _lock_rng();
  do {
    if ((HEAP32[102888] | 0) == 0) {
      HEAP32[102888] = __gcry_xmalloc_secure(48);
      var $8 = __gcry_xcalloc(1, 68);
      HEAP32[110177] = $8;
      _setup_guards($8);
      var $10 = __gcry_xcalloc_secure(1, 68);
      HEAP32[102891] = $10;
      _setup_guards($10);
      var $12 = __gcry_xcalloc_secure(1, 68);
      HEAP32[102890] = $12;
      _setup_guards($12);
    } else {
      var $14 = HEAP32[110177];
      if ((HEAP32[$14 + 52 >> 2] | 0) != 0) {
        __gcry_assert_failed(481944, 488176, 772, 495164);
      }
      if ((HEAP32[HEAP32[102891] + 52 >> 2] | 0) != 0) {
        __gcry_assert_failed(480152, 488176, 773, 495164);
      }
      if ((HEAP32[HEAP32[102890] + 52 >> 2] | 0) == 0) {
        _check_guards($14);
        _check_guards(HEAP32[102891]);
        _check_guards(HEAP32[102890]);
        break;
      } else {
        __gcry_assert_failed(476408, 488176, 774, 495164);
      }
    }
  } while (0);
  _unlock_rng();
  return;
}
__gcry_rngfips_initialize["X"] = 1;
function _lock_rng() {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_ath_mutex_lock(455448);
  if (($1 | 0) == 0) {
    HEAP8[455452] = 1;
    STACKTOP = __stackBase__;
    return;
  } else {
    var $4 = _strerror($1);
    __gcry_log_fatal(477244, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
  }
}
function _check_guards($rng_ctx) {
  var __stackBase__ = STACKTOP;
  do {
    if (HEAP8[$rng_ctx | 0] << 24 >> 24 == 17) {
      if (HEAP8[$rng_ctx + 16 | 0] << 24 >> 24 != 42) {
        break;
      }
      if (HEAP8[$rng_ctx + 33 | 0] << 24 >> 24 != -119) {
        break;
      }
      if (HEAP8[$rng_ctx + 50 | 0] << 24 >> 24 != -4) {
        break;
      }
      STACKTOP = __stackBase__;
      return;
    }
  } while (0);
  __gcry_log_fatal(477412, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $rng_ctx, tempInt));
}
function _unlock_rng() {
  var __stackBase__ = STACKTOP;
  HEAP8[455452] = 0;
  var $1 = __gcry_ath_mutex_unlock(455448);
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $4 = _strerror($1);
    __gcry_log_fatal(477744, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
  }
}
function _get_random($buffer, $length, $rng_ctx) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  if (($buffer | 0) == 0) {
    __gcry_assert_failed(479900, 488176, 690, 494344);
  }
  if (($rng_ctx | 0) == 0) {
    __gcry_assert_failed(479644, 488176, 691, 494344);
  }
  _check_guards($rng_ctx);
  var $7 = $rng_ctx + 4 | 0;
  do {
    if ((HEAP32[$7 >> 2] | 0) == 0) {
      if ((HEAP32[110177] | 0) == ($rng_ctx | 0)) {
        var $storemerge = _x931_generate_key(1);
      } else {
        var $storemerge = _x931_generate_key(0);
      }
      var $storemerge;
      HEAP32[$7 >> 2] = $storemerge;
      if (($storemerge | 0) == 0) {
        break;
      }
      HEAP32[$rng_ctx + 60 >> 2] = _getgid();
      label = 666;
      break;
    } else {
      label = 666;
    }
  } while (0);
  L835 : do {
    if (label == 666) {
      if ((HEAP32[$rng_ctx + 8 >> 2] & 1 | 0) == 0) {
        _x931_reseed($rng_ctx);
      }
      do {
        if ((HEAP32[$rng_ctx + 60 >> 2] | 0) == (_getgid() | 0)) {
          if ((HEAP32[$rng_ctx + 64 >> 2] | 0) != (_getgid() | 0)) {
            break;
          }
          if ((_x931_aes_driver($buffer, $length, $rng_ctx) | 0) != 0) {
            break L835;
          }
          _check_guards($rng_ctx);
          STACKTOP = __stackBase__;
          return;
        }
      } while (0);
      __gcry_fips_signal_error(488176, 719, 494344, 0, 479264);
    }
  } while (0);
  __gcry_log_fatal(478736, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
}
_get_random["X"] = 1;
function _selftest_kat($report) {
  var $13$s2;
  var $8$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  if ((HEAP32[102888] | 0) == 0) {
    __gcry_assert_failed(473724, 488176, 904, 494060);
  }
  var $5 = __gcry_xcalloc(1, 68);
  var $6 = $5;
  _setup_guards($6);
  _lock_rng();
  var $8 = $5 + 4 | 0, $8$s2 = $8 >> 2;
  var $10 = $5 + 60 | 0;
  var $11 = $5 + 17 | 0;
  var $13$s2 = ($5 + 8 | 0) >> 2;
  var $15 = $5 + 64 | 0;
  var $17 = $5 + 52 | 0;
  var $19 = $5 + 56 | 0;
  var $20 = __stackBase__ | 0;
  var $tvidx_0 = 0;
  L850 : while (1) {
    var $tvidx_0;
    if ($tvidx_0 >>> 0 >= 3) {
      var $errtxt_0 = 0;
      break;
    }
    if ((__gcry_cipher_open($8, 7, 1, 1) | 0) != 0) {
      var $errtxt_0 = 471860;
      break;
    }
    if ((__gcry_cipher_setkey(HEAP32[$8$s2], $tvidx_0 * 96 + 415928 | 0, 16) | 0) != 0) {
      var $errtxt_0 = 470408;
      break;
    }
    HEAP32[$10 >> 2] = _getgid();
    var $33 = $tvidx_0 * 96 + 415960 | 0;
    for (var $$src = $33, $$dest = $11, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP32[$13$s2] = HEAP32[$13$s2] | 1;
    HEAP32[$15 >> 2] = _getgid();
    HEAP32[$17 >> 2] = $tvidx_0 * 96 + 415944 | 0;
    HEAP32[$19 >> 2] = HEAPU8[$tvidx_0 * 96 + 415957 | 0] << 16 | HEAPU8[$tvidx_0 * 96 + 415956 | 0] << 24 | HEAPU8[$tvidx_0 * 96 + 415959 | 0] | HEAPU8[$tvidx_0 * 96 + 415958 | 0] << 8;
    var $ridx_0 = 0;
    while (1) {
      var $ridx_0;
      if (($ridx_0 | 0) >= 3) {
        break;
      }
      if ((_x931_aes_driver($20, 16, $6) | 0) != 0) {
        var $errtxt_0 = 468940;
        break L850;
      }
      if ((_memcmp($20, ($ridx_0 << 4) + $tvidx_0 * 96 + 415976 | 0, 16) | 0) == 0) {
        var $ridx_0 = $ridx_0 + 1 | 0;
      } else {
        var $errtxt_0 = 467328;
        break L850;
      }
    }
    if ((HEAP32[$10 >> 2] | 0) != (_getgid() | 0)) {
      var $errtxt_0 = 465272;
      break;
    }
    if ((HEAP32[$15 >> 2] | 0) != (_getgid() | 0)) {
      var $errtxt_0 = 465272;
      break;
    }
    __gcry_cipher_close(HEAP32[$8$s2]);
    HEAP32[$8$s2] = 0;
    HEAP32[$13$s2] = HEAP32[$13$s2] & -2;
    _check_guards($6);
    var $tvidx_0 = $tvidx_0 + 1 | 0;
  }
  var $errtxt_0;
  _unlock_rng();
  __gcry_cipher_close(HEAP32[$5 + 4 >> 2]);
  _check_guards($6);
  __gcry_free($5);
  if (($report | 0) == 0 | ($errtxt_0 | 0) == 0) {
    var $86 = ($errtxt_0 | 0) != 0;
    var $87 = $86 ? 50 : 0;
    STACKTOP = __stackBase__;
    return $87;
  }
  FUNCTION_TABLE[$report](490396, 0, 489512, $errtxt_0);
  var $86 = ($errtxt_0 | 0) != 0;
  var $87 = $86 ? 50 : 0;
  STACKTOP = __stackBase__;
  return $87;
}
_selftest_kat["X"] = 1;
function _x931_aes_driver($output, $length, $rng_ctx) {
  var $9$s2;
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  if (!HEAP8[455452]) {
    __gcry_assert_failed(487784, 488176, 449, 493988);
  }
  var $3 = $rng_ctx + 4 | 0;
  if ((HEAP32[$3 >> 2] | 0) == 0) {
    __gcry_assert_failed(487104, 488176, 450, 493988);
  }
  var $9$s2 = ($rng_ctx + 8 | 0) >> 2;
  if ((HEAP32[$9$s2] & 1 | 0) == 0) {
    __gcry_assert_failed(486156, 488176, 451, 493988);
  }
  var $14 = HEAP32[102888];
  if (($14 | 0) == 0) {
    __gcry_assert_failed(473724, 488176, 453, 493988);
  }
  var $18 = $14 + 16 | 0;
  var $19 = $14 + 32 | 0;
  var $20 = $rng_ctx + 52 | 0;
  var $21 = $rng_ctx + 12 | 0;
  var $22 = __stackBase__ | 0;
  var $23 = $rng_ctx + 17 | 0;
  var $24 = $rng_ctx + 12 | 0;
  var $25 = $rng_ctx + 51 | 0;
  var $26 = $rng_ctx + 34 | 0;
  var $_01_ph = $output;
  var $_02_ph = $length;
  while (1) {
    var $_02_ph;
    var $_01_ph;
    var $29 = $_02_ph >>> 0 < 16 ? $_02_ph : 16;
    if (($_02_ph | 0) == 0) {
      var $_0 = 0;
      label = 714;
      break;
    }
    while (1) {
      do {
        if ((HEAP32[$20 >> 2] | 0) == 0) {
          if (HEAP32[$21 >> 2] >>> 0 <= 1e3) {
            break;
          }
          _x931_reseed($rng_ctx);
          HEAP32[$21 >> 2] = 0;
        }
      } while (0);
      _x931_get_dt($22, $rng_ctx);
      _x931_aes($19, $22, $23, HEAP32[$3 >> 2], $14, $18);
      HEAP32[$24 >> 2] = HEAP32[$24 >> 2] + 1 | 0;
      if (HEAP8[$25] << 24 >> 24 != 0) {
        if (!((HEAP32[$20 >> 2] | 0) == 0 | (HEAP32[110177] | 0) == ($rng_ctx | 0) | (HEAP32[102891] | 0) == ($rng_ctx | 0) | (HEAP32[102890] | 0) == ($rng_ctx | 0))) {
          break;
        }
      }
      if ((HEAP32[$9$s2] & 2 | 0) != 0) {
        label = 709;
        break;
      }
      for (var $$src = $19, $$dest = $26, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src];
      }
      HEAP32[$9$s2] = HEAP32[$9$s2] | 2;
    }
    if (label == 709) {
      label = 0;
      if ((_memcmp($26, $19, 16) | 0) == 0) {
        break;
      }
      for (var $$src = $19, $$dest = $26, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
        HEAP8[$$dest] = HEAP8[$$src];
      }
    }
    _memcpy($_01_ph, $19, $29);
    HEAP8[$19] = 0;
    HEAP8[$14 + 33 | 0] = 0;
    HEAP8[$14 + 34 | 0] = 0;
    HEAP8[$14 + 35 | 0] = 0;
    HEAP8[$14 + 36 | 0] = 0;
    HEAP8[$14 + 37 | 0] = 0;
    HEAP8[$14 + 38 | 0] = 0;
    HEAP8[$14 + 39 | 0] = 0;
    HEAP8[$14 + 40 | 0] = 0;
    HEAP8[$14 + 41 | 0] = 0;
    HEAP8[$14 + 42 | 0] = 0;
    HEAP8[$14 + 43 | 0] = 0;
    HEAP8[$14 + 44 | 0] = 0;
    HEAP8[$14 + 45 | 0] = 0;
    HEAP8[$14 + 46 | 0] = 0;
    HEAP8[$14 + 47 | 0] = 0;
    var $_01_ph = $_01_ph + $29 | 0;
    var $_02_ph = $_02_ph - $29 | 0;
  }
  if (label == 714) {
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  __gcry_fips_signal_error(488176, 507, 493988, 0, 485348);
  var $_0 = -1;
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
_x931_aes_driver["X"] = 1;
function _x931_reseed($rng_ctx) {
  if (!HEAP8[455452]) {
    __gcry_assert_failed(487784, 488176, 663, 493924);
  }
  var $5 = $rng_ctx + 17 | 0;
  if ((HEAP32[110177] | 0) == ($rng_ctx | 0)) {
    _get_random($5, 16, HEAP32[102891]);
    var $9 = $rng_ctx + 8 | 0;
    HEAP32[$9 >> 2] = HEAP32[$9 >> 2] | 1;
    HEAP32[$rng_ctx + 64 >> 2] = _getgid();
    return;
  } else {
    _x931_generate_seed($5);
    var $16 = $rng_ctx + 8 | 0;
    HEAP32[$16 >> 2] = HEAP32[$16 >> 2] | 1;
    HEAP32[$rng_ctx + 64 >> 2] = _getgid();
    return;
  }
}
function __gcry_rndhw_poll_fast($add, $origin) {
  return;
}
function __gcry_rndhw_poll_slow($add, $origin) {
  return 0;
}
function __gcry_rndhw_failed_p() {
  return HEAP32[109673];
}
function _xor_buffer($r, $a, $b) {
  HEAP8[$r] = HEAP8[$b] ^ HEAP8[$a];
  HEAP8[$r + 1 | 0] = HEAP8[$b + 1 | 0] ^ HEAP8[$a + 1 | 0];
  HEAP8[$r + 2 | 0] = HEAP8[$b + 2 | 0] ^ HEAP8[$a + 2 | 0];
  HEAP8[$r + 3 | 0] = HEAP8[$b + 3 | 0] ^ HEAP8[$a + 3 | 0];
  HEAP8[$r + 4 | 0] = HEAP8[$b + 4 | 0] ^ HEAP8[$a + 4 | 0];
  HEAP8[$r + 5 | 0] = HEAP8[$b + 5 | 0] ^ HEAP8[$a + 5 | 0];
  HEAP8[$r + 6 | 0] = HEAP8[$b + 6 | 0] ^ HEAP8[$a + 6 | 0];
  HEAP8[$r + 7 | 0] = HEAP8[$b + 7 | 0] ^ HEAP8[$a + 7 | 0];
  HEAP8[$r + 8 | 0] = HEAP8[$b + 8 | 0] ^ HEAP8[$a + 8 | 0];
  HEAP8[$r + 9 | 0] = HEAP8[$b + 9 | 0] ^ HEAP8[$a + 9 | 0];
  HEAP8[$r + 10 | 0] = HEAP8[$b + 10 | 0] ^ HEAP8[$a + 10 | 0];
  HEAP8[$r + 11 | 0] = HEAP8[$b + 11 | 0] ^ HEAP8[$a + 11 | 0];
  HEAP8[$r + 12 | 0] = HEAP8[$b + 12 | 0] ^ HEAP8[$a + 12 | 0];
  HEAP8[$r + 13 | 0] = HEAP8[$b + 13 | 0] ^ HEAP8[$a + 13 | 0];
  HEAP8[$r + 14 | 0] = HEAP8[$b + 14 | 0] ^ HEAP8[$a + 14 | 0];
  HEAP8[$r + 15 | 0] = HEAP8[$b + 15 | 0] ^ HEAP8[$a + 15 | 0];
  return;
}
_xor_buffer["X"] = 1;
function _x931_aes($result_R, $datetime_DT, $seed_V, $key, $intermediate_I, $temp_xor) {
  _encrypt_aes($key, $intermediate_I, $datetime_DT);
  _xor_buffer($temp_xor, $intermediate_I, $seed_V);
  _encrypt_aes($key, $result_R, $temp_xor);
  _xor_buffer($temp_xor, $result_R, $intermediate_I);
  _encrypt_aes($key, $seed_V, $temp_xor);
  HEAP8[$intermediate_I] = 0;
  HEAP8[$intermediate_I + 1 | 0] = 0;
  HEAP8[$intermediate_I + 2 | 0] = 0;
  HEAP8[$intermediate_I + 3 | 0] = 0;
  HEAP8[$intermediate_I + 4 | 0] = 0;
  HEAP8[$intermediate_I + 5 | 0] = 0;
  HEAP8[$intermediate_I + 6 | 0] = 0;
  HEAP8[$intermediate_I + 7 | 0] = 0;
  HEAP8[$intermediate_I + 8 | 0] = 0;
  HEAP8[$intermediate_I + 9 | 0] = 0;
  HEAP8[$intermediate_I + 10 | 0] = 0;
  HEAP8[$intermediate_I + 11 | 0] = 0;
  HEAP8[$intermediate_I + 12 | 0] = 0;
  HEAP8[$intermediate_I + 13 | 0] = 0;
  HEAP8[$intermediate_I + 14 | 0] = 0;
  HEAP8[$intermediate_I + 15 | 0] = 0;
  HEAP8[$temp_xor] = 0;
  HEAP8[$temp_xor + 1 | 0] = 0;
  HEAP8[$temp_xor + 2 | 0] = 0;
  HEAP8[$temp_xor + 3 | 0] = 0;
  HEAP8[$temp_xor + 4 | 0] = 0;
  HEAP8[$temp_xor + 5 | 0] = 0;
  HEAP8[$temp_xor + 6 | 0] = 0;
  HEAP8[$temp_xor + 7 | 0] = 0;
  HEAP8[$temp_xor + 8 | 0] = 0;
  HEAP8[$temp_xor + 9 | 0] = 0;
  HEAP8[$temp_xor + 10 | 0] = 0;
  HEAP8[$temp_xor + 11 | 0] = 0;
  HEAP8[$temp_xor + 12 | 0] = 0;
  HEAP8[$temp_xor + 13 | 0] = 0;
  HEAP8[$temp_xor + 14 | 0] = 0;
  HEAP8[$temp_xor + 15 | 0] = 0;
  return;
}
_x931_aes["X"] = 1;
function _set_cloexec_flag($fd) {
  var __stackBase__ = STACKTOP;
  var $1 = _fcntl($fd, 1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = 0, tempInt));
  if (($1 | 0) < 0) {
    var $_0 = $1;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $_0 = _fcntl($fd, 2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $1 | 1, tempInt));
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function __gcry_hmac256_new($key, $keylen) {
  var $25$s2;
  var $1$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  var $ipad = __stackBase__;
  var $1 = _malloc(172), $1$s2 = $1 >> 2;
  var $2 = $1;
  if (($1 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  HEAP32[$1$s2] = 1779033703;
  HEAP32[$1$s2 + 1] = -1150833019;
  HEAP32[$1$s2 + 2] = 1013904242;
  HEAP32[$1$s2 + 3] = -1521486534;
  HEAP32[$1$s2 + 4] = 1359893119;
  HEAP32[$1$s2 + 5] = -1694144372;
  HEAP32[$1$s2 + 6] = 528734635;
  HEAP32[$1$s2 + 7] = 1541459225;
  HEAP32[$1$s2 + 8] = 0;
  HEAP32[$1$s2 + 9] = 0;
  var $25$s2 = ($1 + 40 | 0) >> 2;
  HEAP32[$25$s2] = HEAP32[$25$s2] & -4;
  if (($key | 0) == 0) {
    var $_0 = $2;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  var $30 = $ipad | 0;
  _memset($30, 0, 64);
  var $31 = $1 + 105 | 0;
  _memset($31, 0, 64);
  do {
    if ($keylen >>> 0 < 65) {
      _memcpy($30, $key, $keylen);
      _memcpy($31, $key, $keylen);
      var $i_03 = 0;
      break;
    } else {
      var $35 = __gcry_hmac256_new(0, 0);
      if (($35 | 0) != 0) {
        __gcry_hmac256_update($35, $key, $keylen);
        _finalize($35);
        var $39 = $35 + 41 | 0;
        _memcpy($30, $39, 32);
        _memcpy($31, $39, 32);
        __gcry_hmac256_release($35);
        var $i_03 = 0;
        break;
      }
      _free($1);
      var $_0 = 0;
      var $_0;
      STACKTOP = __stackBase__;
      return $_0;
    }
  } while (0);
  while (1) {
    var $i_03;
    var $40 = $ipad + $i_03 | 0;
    HEAP8[$40] = HEAP8[$40] ^ 54;
    var $43 = $i_03 + ($1 + 105) | 0;
    HEAP8[$43] = HEAP8[$43] ^ 92;
    var $46 = $i_03 + 1 | 0;
    if (($46 | 0) == 64) {
      break;
    } else {
      var $i_03 = $46;
    }
  }
  HEAP32[$25$s2] = HEAP32[$25$s2] | 2;
  __gcry_hmac256_update($2, $30, 64);
  var $_vptr_01 = $30;
  var $_vlen_02 = 64;
  while (1) {
    var $_vlen_02;
    var $_vptr_01;
    HEAP8[$_vptr_01] = 0;
    var $52 = $_vlen_02 - 1 | 0;
    if (($52 | 0) == 0) {
      var $_0 = $2;
      break;
    } else {
      var $_vptr_01 = $_vptr_01 + 1 | 0;
      var $_vlen_02 = $52;
    }
  }
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
__gcry_hmac256_new["X"] = 1;
function _x931_get_dt($buffer, $rng_ctx) {
  var $48$s2;
  var $13$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  var $tv = __stackBase__;
  if (!HEAP8[455452]) {
    __gcry_assert_failed(487784, 488176, 279, 493936);
  }
  var $4 = HEAP32[$rng_ctx + 52 >> 2];
  if (!(($4 | 0) == 0 | (HEAP32[110177] | 0) == ($rng_ctx | 0) | (HEAP32[102891] | 0) == ($rng_ctx | 0) | (HEAP32[102890] | 0) == ($rng_ctx | 0))) {
    for (var $$src = $4, $$dest = $buffer, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    var $13$s2 = ($rng_ctx + 56 | 0) >> 2;
    HEAP8[$buffer + 12 | 0] = HEAP32[$13$s2] >>> 24 & 255;
    HEAP8[$buffer + 13 | 0] = HEAP32[$13$s2] >>> 16 & 255;
    HEAP8[$buffer + 14 | 0] = HEAP32[$13$s2] >>> 8 & 255;
    HEAP8[$buffer + 15 | 0] = HEAP32[$13$s2] & 255;
    HEAP32[$13$s2] = HEAP32[$13$s2] + 1 | 0;
    STACKTOP = __stackBase__;
    return;
  }
  if ((HEAP32[102401] | 0) == 0) {
    HEAP32[102403] = _getgid();
    HEAP32[102404] = _getgid();
  }
  if ((_gettimeofday($tv, 0) | 0) != 0) {
    var $43 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_fatal(482768, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $43, tempInt));
  }
  var $46 = HEAP32[$tv + 4 >> 2];
  var $47 = $46 << 4;
  var $48$s2 = ($tv | 0) >> 2;
  if ((HEAP32[$48$s2] | 0) == (HEAP32[102401] | 0) & ($47 | 0) == (HEAP32[102400] | 0)) {
    HEAP16[204804] = HEAP16[204804] + 1 & 4095;
  } else {
    HEAP16[204804] = 0;
    HEAP32[102401] = HEAP32[$48$s2];
    HEAP32[102400] = $47;
  }
  HEAP8[$buffer] = HEAP32[$48$s2] >>> 24 & 255;
  HEAP8[$buffer + 1 | 0] = HEAP32[$48$s2] >>> 16 & 255;
  HEAP8[$buffer + 2 | 0] = HEAP32[$48$s2] >>> 8 & 255;
  HEAP8[$buffer + 3 | 0] = HEAP32[$48$s2] & 255;
  HEAP8[$buffer + 4 | 0] = $46 >>> 12 & 255;
  HEAP8[$buffer + 5 | 0] = $46 >>> 4 & 255;
  HEAP8[$buffer + 6 | 0] = (HEAPU16[204804] >>> 8 & 15 | $47) & 255;
  HEAP8[$buffer + 7 | 0] = HEAP16[204804] & 255;
  HEAP8[$buffer + 8 | 0] = HEAP32[102403] >>> 24 & 255;
  HEAP8[$buffer + 9 | 0] = HEAP32[102403] >>> 16 & 255;
  HEAP8[$buffer + 10 | 0] = HEAP32[102403] >>> 8 & 255;
  HEAP8[$buffer + 11 | 0] = HEAP32[102403] & 255;
  HEAP8[$buffer + 12 | 0] = HEAP32[102404] >>> 24 & 255;
  HEAP8[$buffer + 13 | 0] = HEAP32[102404] >>> 16 & 255;
  HEAP8[$buffer + 14 | 0] = HEAP32[102404] >>> 8 & 255;
  HEAP8[$buffer + 15 | 0] = HEAP32[102404] & 255;
  var $122 = HEAP32[102404] + 1 | 0;
  HEAP32[102404] = $122;
  if (($122 | 0) != 0) {
    STACKTOP = __stackBase__;
    return;
  }
  HEAP32[102403] = HEAP32[102403] + 1 | 0;
  STACKTOP = __stackBase__;
  return;
}
_x931_get_dt["X"] = 1;
function _encrypt_aes($key, $output, $input) {
  var __stackBase__ = STACKTOP;
  var $1 = __gcry_cipher_encrypt($key, $output, 16, $input, 16);
  if (($1 | 0) == 0) {
    STACKTOP = __stackBase__;
    return;
  } else {
    var $4 = __gcry_strerror($1);
    __gcry_log_fatal(483660, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $4, tempInt));
  }
}
function _x931_generate_seed($seed_buffer) {
  if (HEAP8[455452]) {
    var $3 = _get_entropy();
    for (var $$src = $3, $$dest = $seed_buffer, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
      HEAP8[$$dest] = HEAP8[$$src];
    }
    HEAP8[$3] = 0;
    HEAP8[$3 + 1 | 0] = 0;
    HEAP8[$3 + 2 | 0] = 0;
    HEAP8[$3 + 3 | 0] = 0;
    HEAP8[$3 + 4 | 0] = 0;
    HEAP8[$3 + 5 | 0] = 0;
    HEAP8[$3 + 6 | 0] = 0;
    HEAP8[$3 + 7 | 0] = 0;
    HEAP8[$3 + 8 | 0] = 0;
    HEAP8[$3 + 9 | 0] = 0;
    HEAP8[$3 + 10 | 0] = 0;
    HEAP8[$3 + 11 | 0] = 0;
    HEAP8[$3 + 12 | 0] = 0;
    HEAP8[$3 + 13 | 0] = 0;
    HEAP8[$3 + 14 | 0] = 0;
    HEAP8[$3 + 15 | 0] = 0;
    __gcry_free($3);
    return;
  } else {
    __gcry_assert_failed(487784, 488176, 647, 493948);
  }
}
function _get_entropy() {
  var __stackBase__ = STACKTOP;
  if ((HEAP32[114258] | 0) != 0) {
    __gcry_assert_failed(482096, 488176, 557, 494372);
  }
  HEAP32[114258] = __gcry_xmalloc_secure(16);
  HEAP32[114256] = 16;
  HEAP32[114257] = 0;
  __gcry_rndlinux_gather_random(88, 0, 16, 2);
  var $10 = HEAP32[114258];
  if ((HEAP32[114257] | 0) == (HEAP32[114256] | 0)) {
    HEAP32[114258] = 0;
    STACKTOP = __stackBase__;
    return $10;
  } else {
    __gcry_free($10);
    HEAP32[114258] = 0;
    __gcry_log_fatal(481512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  }
}
function _entropy_collect_cb($buffer, $length, $origin) {
  var label = 0;
  if (!HEAP8[455452]) {
    __gcry_assert_failed(487784, 488176, 536, 494648);
  }
  if ((HEAP32[114258] | 0) == 0) {
    __gcry_assert_failed(481032, 488176, 537, 494648);
  } else {
    var $p_0 = $buffer;
    var $_0 = $length;
  }
  while (1) {
    var $_0;
    var $p_0;
    if (($_0 | 0) == 0) {
      label = 786;
      break;
    }
    var $9 = HEAP32[114257];
    if ($9 >>> 0 >= HEAP32[114256] >>> 0) {
      label = 785;
      break;
    }
    var $14 = HEAP8[$p_0];
    HEAP32[114257] = $9 + 1 | 0;
    var $17 = HEAP32[114258] + $9 | 0;
    HEAP8[$17] = HEAP8[$17] ^ $14;
    var $p_0 = $p_0 + 1 | 0;
    var $_0 = $_0 - 1 | 0;
  }
  if (label == 786) {
    return;
  } else if (label == 785) {
    return;
  }
}
function _x931_generate_key($for_nonce) {
  var $hd$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $hd = __stackBase__, $hd$s2 = $hd >> 2;
  if (!HEAP8[455452]) {
    __gcry_assert_failed(487784, 488176, 601, 493968);
  }
  var $3 = __gcry_cipher_open($hd, 7, 1, 1);
  if (($3 | 0) != 0) {
    var $6 = __gcry_strerror($3);
    __gcry_log_error(478372, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $6, tempInt));
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
  if (($for_nonce | 0) == 0) {
    var $buffer_0 = _get_entropy();
  } else {
    var $10 = __gcry_xmalloc(16);
    _get_random($10, 16, HEAP32[102891]);
    var $buffer_0 = $10;
  }
  var $buffer_0;
  var $16 = __gcry_cipher_setkey(HEAP32[$hd$s2], $buffer_0, 16);
  HEAP8[$buffer_0] = 0;
  HEAP8[$buffer_0 + 1 | 0] = 0;
  HEAP8[$buffer_0 + 2 | 0] = 0;
  HEAP8[$buffer_0 + 3 | 0] = 0;
  HEAP8[$buffer_0 + 4 | 0] = 0;
  HEAP8[$buffer_0 + 5 | 0] = 0;
  HEAP8[$buffer_0 + 6 | 0] = 0;
  HEAP8[$buffer_0 + 7 | 0] = 0;
  HEAP8[$buffer_0 + 8 | 0] = 0;
  HEAP8[$buffer_0 + 9 | 0] = 0;
  HEAP8[$buffer_0 + 10 | 0] = 0;
  HEAP8[$buffer_0 + 11 | 0] = 0;
  HEAP8[$buffer_0 + 12 | 0] = 0;
  HEAP8[$buffer_0 + 13 | 0] = 0;
  HEAP8[$buffer_0 + 14 | 0] = 0;
  HEAP8[$buffer_0 + 15 | 0] = 0;
  __gcry_free($buffer_0);
  if (($16 | 0) == 0) {
    var $_0 = HEAP32[$hd$s2];
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  } else {
    var $34 = __gcry_strerror($16);
    __gcry_log_error(478048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $34, tempInt));
    __gcry_cipher_close(HEAP32[$hd$s2]);
    var $_0 = 0;
    var $_0;
    STACKTOP = __stackBase__;
    return $_0;
  }
}
_x931_generate_key["X"] = 1;
function __gcry_rndlinux_gather_random($add, $origin, $length, $level) {
  var label = 0;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 784 | 0;
  var $buffer = __stackBase__;
  var $rfds = __stackBase__ + 768;
  var $tv = __stackBase__ + 776;
  do {
    if (($level | 0) > 1) {
      if ((HEAP32[122819] | 0) != -1) {
        var $fd_0_in = 491276;
        break;
      }
      HEAP32[122819] = _open_device(481596);
      var $fd_0_in = 491276;
    } else {
      if ((HEAP32[122818] | 0) != -1) {
        var $fd_0_in = 491272;
        break;
      }
      HEAP32[122818] = _open_device(488140);
      var $fd_0_in = 491272;
    }
  } while (0);
  var $fd_0_in;
  var $fd_0 = HEAP32[$fd_0_in >> 2];
  var $14 = 1 << ($fd_0 & 31);
  var $16 = ($fd_0 >>> 5 << 2) + $rfds | 0;
  var $17 = $tv | 0;
  var $18 = $tv + 4 | 0;
  var $19 = $fd_0 + 1 | 0;
  var $20 = $buffer | 0;
  var $_1_ph = $length;
  var $delay_0_ph = 0;
  var $any_need_entropy_0_ph = 1;
  var $last_so_far_0_ph = 0;
  L1013 : while (1) {
    var $last_so_far_0_ph;
    var $any_need_entropy_0_ph;
    var $delay_0_ph;
    var $_1_ph;
    var $_1_ph8 = $_1_ph;
    var $delay_0_ph7 = $delay_0_ph;
    while (1) {
      var $delay_0_ph7;
      var $_1_ph8;
      var $21 = ($delay_0_ph7 | 0) != 0;
      var $22 = $21 ? 0 : 1e5;
      var $_1 = $_1_ph8;
      while (1) {
        var $_1;
        if (($_1 | 0) == 0) {
          break L1013;
        }
        var $26 = $rfds;
        HEAP32[$26 >> 2] = 0;
        HEAP32[$26 + 4 >> 2] = 0;
        HEAP32[$16 >> 2] = HEAP32[$16 >> 2] | $14;
        HEAP32[$17 >> 2] = $delay_0_ph7;
        HEAP32[$18 >> 2] = $22;
        var $29 = _select($19, $rfds, 0, 0, $tv);
        if (($29 | 0) == -1) {
          label = 815;
          break;
        } else if (($29 | 0) == 0) {
          break;
        }
        var $31 = $_1 >>> 0 < 768 ? $_1 : 768;
        while (1) {
          var $43 = _read($fd_0, $20, $31);
          if (($43 | 0) > -1 & ($43 | 0) > ($31 | 0)) {
            __gcry_log_error(473592, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $43, tempInt));
            var $n_0 = $31;
          } else {
            var $n_0 = $43;
          }
          var $n_0;
          if (($n_0 | 0) != -1) {
            break;
          }
          if ((HEAP32[___errno_location() >> 2] | 0) != 4) {
            label = 820;
            break L1013;
          }
        }
        FUNCTION_TABLE[$add]($20, $n_0, $origin);
        var $_1 = $_1 - $n_0 | 0;
      }
      if (label == 815) {
        label = 0;
        var $41 = _strerror(HEAP32[___errno_location() >> 2]);
        __gcry_log_error(476368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $41, tempInt));
        var $_1_ph8 = $_1;
        var $delay_0_ph7 = $21 ? $delay_0_ph7 : 1;
        continue;
      }
      if ($any_need_entropy_0_ph) {
        break;
      }
      if (($last_so_far_0_ph | 0) == ($length - $_1 | 0)) {
        var $_1_ph8 = $_1;
        var $delay_0_ph7 = 3;
      } else {
        break;
      }
    }
    var $37 = $length - $_1 | 0;
    __gcry_random_progress(480128, 88, $37, $length);
    var $_1_ph = $_1;
    var $delay_0_ph = 3;
    var $any_need_entropy_0_ph = 0;
    var $last_so_far_0_ph = $37;
  }
  if (label == 820) {
    var $55 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_fatal(471820, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $55, tempInt));
  }
  _memset($buffer | 0, 0, 768);
  if ($any_need_entropy_0_ph) {
    STACKTOP = __stackBase__;
    return 0;
  }
  __gcry_random_progress(480128, 88, $length, $length);
  STACKTOP = __stackBase__;
  return 0;
}
__gcry_rndlinux_gather_random["X"] = 1;
function _open_device($name) {
  var __stackBase__ = STACKTOP;
  var $1 = _open($name, 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 3 >> 2 << 2, HEAP32[tempInt >> 2] = 0, tempInt));
  if (($1 | 0) == -1) {
    var $6 = _strerror(HEAP32[___errno_location() >> 2]);
    __gcry_log_fatal(470380, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $name, HEAP32[tempInt + 4 >> 2] = $6, tempInt));
  }
  if ((_set_cloexec_flag($1) | 0) == 0) {
    STACKTOP = __stackBase__;
    return $1;
  }
  var $13 = _strerror(HEAP32[___errno_location() >> 2]);
  __gcry_log_error(468872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1, HEAP32[tempInt + 4 >> 2] = $13, tempInt));
  STACKTOP = __stackBase__;
  return $1;
}
function _gpg_err_init() {
  return 0;
}
function _real_init() {
  return;
}
function _gpg_err_deinit($mode) {
  return;
}
function _gpg_err_code2047($err) {
  return $err & 65535;
}
function _msgidxof($code) {
  if ($code >>> 0 < 186) {
    var $22 = $code;
    var $22;
    return $22;
  }
  if (($code - 198 | 0) >>> 0 < 16) {
    var $22 = $code - 12 | 0;
    var $22;
    return $22;
  }
  if (($code - 257 | 0) >>> 0 < 15) {
    var $22 = $code - 55 | 0;
    var $22;
    return $22;
  }
  if (($code - 273 | 0) >>> 0 < 9) {
    var $22 = $code - 56 | 0;
    var $22;
    return $22;
  }
  if (($code - 1024 | 0) >>> 0 >= 16) {
    return ($code - 16381 | 0) >>> 0 < 3 ? $code - 16139 | 0 : 245;
  }
  var $22 = $code - 798 | 0;
  var $22;
  return $22;
}
function _gpg_err_code_from_errno($err) {
  var label = 0;
  if (($err | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  do {
    if (($err - 1 | 0) >>> 0 < 11) {
      var $21 = $err - 1 | 0;
      label = 864;
      break;
    } else {
      if (($err - 11 | 0) >>> 0 < 25) {
        var $23 = $err;
        break;
      }
      if (($err - 35 | 0) >>> 0 < 6) {
        var $21 = $err + 1 | 0;
        label = 864;
        break;
      }
      if (($err - 42 | 0) >>> 0 < 16) {
        var $23 = $err;
        break;
      }
      if (($err - 59 | 0) >>> 0 < 37) {
        var $21 = $err - 1 | 0;
        label = 864;
        break;
      } else {
        var $21 = ($err - 95 | 0) >>> 0 < 31 ? $err : -1;
        label = 864;
        break;
      }
    }
  } while (0);
  do {
    if (label == 864) {
      var $21;
      if (($21 | 0) < 0) {
        var $_0 = 16382;
      } else {
        var $23 = $21;
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $23;
  var $_0 = HEAP32[($23 << 2) + 456520 >> 2] | 32768;
  var $_0;
  return $_0;
}
function __gcry_hmac256_update($hd, $buffer, $length) {
  var $3$s2;
  var label = 0;
  var $2 = $hd + 40 | 0;
  var $3$s2 = ($hd + 36 | 0) >> 2;
  var $4 = $hd + 41 | 0;
  var $5 = $hd + 32 | 0;
  var $length_tr = $length;
  var $buffer_tr = $buffer;
  L1093 : while (1) {
    var $buffer_tr;
    var $length_tr;
    if ((HEAP32[$2 >> 2] & 1 | 0) != 0) {
      label = 887;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 64) {
      _transform2036($hd, $4);
      HEAP32[$3$s2] = 0;
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1 | 0;
    }
    if (($buffer_tr | 0) == 0) {
      label = 888;
      break;
    }
    if ((HEAP32[$3$s2] | 0) == 0) {
      var $inbuf_1_ph = $buffer_tr;
      var $_1_ph = $length_tr;
      break;
    } else {
      var $inbuf_0 = $buffer_tr;
      var $_0 = $length_tr;
    }
    while (1) {
      var $_0;
      var $inbuf_0;
      if (($_0 | 0) == 0) {
        var $length_tr = 0;
        var $buffer_tr = 0;
        continue L1093;
      }
      var $21 = HEAP32[$3$s2];
      if (($21 | 0) >= 64) {
        label = 879;
        break L1093;
      }
      var $25 = HEAP8[$inbuf_0];
      HEAP32[$3$s2] = $21 + 1 | 0;
      HEAP8[$hd + ($21 + 41) | 0] = $25;
      var $inbuf_0 = $inbuf_0 + 1 | 0;
      var $_0 = $_0 - 1 | 0;
    }
  }
  if (label == 879) {
    __gcry_hmac256_update($hd, 0, 0);
    var $inbuf_1_ph = $inbuf_0;
    var $_1_ph = $_0;
  } else if (label == 887) {
    return;
  } else if (label == 888) {
    return;
  }
  var $_1_ph;
  var $inbuf_1_ph;
  L1109 : do {
    if ($_1_ph >>> 0 > 63) {
      var $30 = $hd + 32 | 0;
      var $_13 = $_1_ph;
      var $inbuf_14 = $inbuf_1_ph;
      while (1) {
        var $inbuf_14;
        var $_13;
        _transform2036($hd, $inbuf_14);
        HEAP32[$3$s2] = 0;
        HEAP32[$30 >> 2] = HEAP32[$30 >> 2] + 1 | 0;
        var $34 = $_13 - 64 | 0;
        var $35 = $inbuf_14 + 64 | 0;
        if ($34 >>> 0 > 63) {
          var $_13 = $34;
          var $inbuf_14 = $35;
        } else {
          var $inbuf_2 = $35;
          var $_2 = $34;
          break L1109;
        }
      }
    } else {
      var $inbuf_2 = $inbuf_1_ph;
      var $_2 = $_1_ph;
    }
  } while (0);
  while (1) {
    var $_2;
    var $inbuf_2;
    if (($_2 | 0) == 0) {
      label = 890;
      break;
    }
    var $39 = HEAP32[$3$s2];
    if (($39 | 0) >= 64) {
      label = 889;
      break;
    }
    var $43 = HEAP8[$inbuf_2];
    HEAP32[$3$s2] = $39 + 1 | 0;
    HEAP8[$hd + ($39 + 41) | 0] = $43;
    var $inbuf_2 = $inbuf_2 + 1 | 0;
    var $_2 = $_2 - 1 | 0;
  }
  if (label == 889) {
    return;
  } else if (label == 890) {
    return;
  }
}
__gcry_hmac256_update["X"] = 1;
function _finalize($hd) {
  var $172$s2;
  var $156$s2;
  var $140$s2;
  var $124$s2;
  var $108$s2;
  var $92$s2;
  var $76$s2;
  var $60$s2;
  var $10$s2;
  var $2$s2;
  var $2$s2 = ($hd + 40 | 0) >> 2;
  if ((HEAP32[$2$s2] & 1 | 0) != 0) {
    return;
  }
  __gcry_hmac256_update($hd, 0, 0);
  var $7 = HEAP32[$hd + 32 >> 2];
  var $10$s2 = ($hd + 36 | 0) >> 2;
  var $11 = HEAP32[$10$s2];
  var $12 = _llvm_uadd_with_overflow_i32($7 << 6, $11);
  var $msb_0 = (tempRet0 & 1) + ($7 >>> 26) | 0;
  var $15 = $12 << 3;
  var $18 = $msb_0 << 3 | $12 >>> 29;
  HEAP32[$10$s2] = $11 + 1 | 0;
  var $21 = $hd + 41 | 0;
  HEAP8[$hd + ($11 + 41) | 0] = -128;
  var $23 = HEAP32[$10$s2];
  L1124 : do {
    if (($11 | 0) < 56) {
      if (($23 | 0) < 56) {
        var $26 = $23;
      } else {
        break;
      }
      while (1) {
        var $26;
        HEAP32[$10$s2] = $26 + 1 | 0;
        HEAP8[$hd + ($26 + 41) | 0] = 0;
        var $29 = HEAP32[$10$s2];
        if (($29 | 0) < 56) {
          var $26 = $29;
        } else {
          break L1124;
        }
      }
    } else {
      L1126 : do {
        if (($23 | 0) < 64) {
          var $31 = $23;
          while (1) {
            var $31;
            HEAP32[$10$s2] = $31 + 1 | 0;
            HEAP8[$hd + ($31 + 41) | 0] = 0;
            var $34 = HEAP32[$10$s2];
            if (($34 | 0) < 64) {
              var $31 = $34;
            } else {
              break L1126;
            }
          }
        }
      } while (0);
      __gcry_hmac256_update($hd, 0, 0);
      _memset($21 | 0, 0, 56);
    }
  } while (0);
  HEAP8[$hd + 97 | 0] = $msb_0 >>> 21 & 255;
  HEAP8[$hd + 98 | 0] = $msb_0 >>> 13 & 255;
  HEAP8[$hd + 99 | 0] = $msb_0 >>> 5 & 255;
  HEAP8[$hd + 100 | 0] = $18 & 255;
  HEAP8[$hd + 101 | 0] = $12 >>> 21 & 255;
  HEAP8[$hd + 102 | 0] = $12 >>> 13 & 255;
  HEAP8[$hd + 103 | 0] = $12 >>> 5 & 255;
  HEAP8[$hd + 104 | 0] = $15 & 255;
  var $59 = $21 | 0;
  _transform2036($hd, $59);
  var $60$s2 = ($hd | 0) >> 2;
  HEAP8[$59] = HEAP32[$60$s2] >>> 24 & 255;
  HEAP8[$hd + 42 | 0] = HEAP32[$60$s2] >>> 16 & 255;
  HEAP8[$hd + 43 | 0] = HEAP32[$60$s2] >>> 8 & 255;
  HEAP8[$hd + 44 | 0] = HEAP32[$60$s2] & 255;
  var $76$s2 = ($hd + 4 | 0) >> 2;
  HEAP8[$hd + 45 | 0] = HEAP32[$76$s2] >>> 24 & 255;
  HEAP8[$hd + 46 | 0] = HEAP32[$76$s2] >>> 16 & 255;
  HEAP8[$hd + 47 | 0] = HEAP32[$76$s2] >>> 8 & 255;
  HEAP8[$hd + 48 | 0] = HEAP32[$76$s2] & 255;
  var $92$s2 = ($hd + 8 | 0) >> 2;
  HEAP8[$hd + 49 | 0] = HEAP32[$92$s2] >>> 24 & 255;
  HEAP8[$hd + 50 | 0] = HEAP32[$92$s2] >>> 16 & 255;
  HEAP8[$hd + 51 | 0] = HEAP32[$92$s2] >>> 8 & 255;
  HEAP8[$hd + 52 | 0] = HEAP32[$92$s2] & 255;
  var $108$s2 = ($hd + 12 | 0) >> 2;
  HEAP8[$hd + 53 | 0] = HEAP32[$108$s2] >>> 24 & 255;
  HEAP8[$hd + 54 | 0] = HEAP32[$108$s2] >>> 16 & 255;
  HEAP8[$hd + 55 | 0] = HEAP32[$108$s2] >>> 8 & 255;
  HEAP8[$hd + 56 | 0] = HEAP32[$108$s2] & 255;
  var $124$s2 = ($hd + 16 | 0) >> 2;
  HEAP8[$hd + 57 | 0] = HEAP32[$124$s2] >>> 24 & 255;
  HEAP8[$hd + 58 | 0] = HEAP32[$124$s2] >>> 16 & 255;
  HEAP8[$hd + 59 | 0] = HEAP32[$124$s2] >>> 8 & 255;
  HEAP8[$hd + 60 | 0] = HEAP32[$124$s2] & 255;
  var $140$s2 = ($hd + 20 | 0) >> 2;
  HEAP8[$hd + 61 | 0] = HEAP32[$140$s2] >>> 24 & 255;
  HEAP8[$hd + 62 | 0] = HEAP32[$140$s2] >>> 16 & 255;
  HEAP8[$hd + 63 | 0] = HEAP32[$140$s2] >>> 8 & 255;
  HEAP8[$hd + 64 | 0] = HEAP32[$140$s2] & 255;
  var $156$s2 = ($hd + 24 | 0) >> 2;
  HEAP8[$hd + 65 | 0] = HEAP32[$156$s2] >>> 24 & 255;
  HEAP8[$hd + 66 | 0] = HEAP32[$156$s2] >>> 16 & 255;
  HEAP8[$hd + 67 | 0] = HEAP32[$156$s2] >>> 8 & 255;
  HEAP8[$hd + 68 | 0] = HEAP32[$156$s2] & 255;
  var $172$s2 = ($hd + 28 | 0) >> 2;
  HEAP8[$hd + 69 | 0] = HEAP32[$172$s2] >>> 24 & 255;
  HEAP8[$hd + 70 | 0] = HEAP32[$172$s2] >>> 16 & 255;
  HEAP8[$hd + 71 | 0] = HEAP32[$172$s2] >>> 8 & 255;
  HEAP8[$hd + 72 | 0] = HEAP32[$172$s2] & 255;
  HEAP32[$2$s2] = HEAP32[$2$s2] | 1;
  return;
}
_finalize["X"] = 1;
function __gcry_hmac256_release($ctx) {
  if (($ctx | 0) == 0) {
    return;
  }
  var $3 = $ctx;
  L1139 : do {
    if ((HEAP32[$ctx + 40 >> 2] & 2 | 0) != 0) {
      var $_vptr_01 = $ctx + 105 | 0;
      var $_vlen_02 = 64;
      while (1) {
        var $_vlen_02;
        var $_vptr_01;
        HEAP8[$_vptr_01] = 0;
        var $12 = $_vlen_02 - 1 | 0;
        if (($12 | 0) == 0) {
          break L1139;
        } else {
          var $_vptr_01 = $_vptr_01 + 1 | 0;
          var $_vlen_02 = $12;
        }
      }
    }
  } while (0);
  _free($3);
  return;
}
function _transform2036($hd, $data_arg) {
  var $16$s2;
  var $14$s2;
  var $12$s2;
  var $10$s2;
  var $8$s2;
  var $6$s2;
  var $4$s2;
  var $2$s2;
  var $w$s2;
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  var $1 = __stackBase__;
  var $w = STACKTOP, $w$s2 = $w >> 2;
  STACKTOP = STACKTOP + 256 | 0;
  var $2$s2 = ($hd | 0) >> 2;
  var $3 = HEAP32[$2$s2];
  var $4$s2 = ($hd + 4 | 0) >> 2;
  var $5 = HEAP32[$4$s2];
  var $6$s2 = ($hd + 8 | 0) >> 2;
  var $7 = HEAP32[$6$s2];
  var $8$s2 = ($hd + 12 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10$s2 = ($hd + 16 | 0) >> 2;
  var $11 = HEAP32[$10$s2];
  var $12$s2 = ($hd + 20 | 0) >> 2;
  var $13 = HEAP32[$12$s2];
  var $14$s2 = ($hd + 24 | 0) >> 2;
  var $15 = HEAP32[$14$s2];
  var $16$s2 = ($hd + 28 | 0) >> 2;
  var $17 = HEAP32[$16$s2];
  var $data_014 = $data_arg;
  var $i_015 = 0;
  var $p2_016 = $1;
  while (1) {
    var $p2_016;
    var $i_015;
    var $data_014;
    HEAP8[$p2_016 + 3 | 0] = HEAP8[$data_014];
    HEAP8[$p2_016 + 2 | 0] = HEAP8[$data_014 + 1 | 0];
    HEAP8[$p2_016 + 1 | 0] = HEAP8[$data_014 + 2 | 0];
    HEAP8[$p2_016] = HEAP8[$data_014 + 3 | 0];
    var $30 = $i_015 + 1 | 0;
    if (($30 | 0) == 16) {
      break;
    } else {
      var $data_014 = $data_014 + 4 | 0;
      var $i_015 = $30;
      var $p2_016 = $p2_016 + 4 | 0;
    }
  }
  var $w21 = $w;
  for (var $$src = $1 >> 2, $$dest = $w21 >> 2, $$stop = $$src + 16; $$src < $$stop; $$src++, $$dest++) {
    HEAP32[$$dest] = HEAP32[$$src];
  }
  var $i_211 = 16;
  while (1) {
    var $i_211;
    var $35 = HEAP32[($i_211 - 2 << 2 >> 2) + $w$s2];
    var $50 = HEAP32[($i_211 - 15 << 2 >> 2) + $w$s2];
    HEAP32[($i_211 << 2 >> 2) + $w$s2] = HEAP32[($i_211 - 16 << 2 >> 2) + $w$s2] + HEAP32[($i_211 - 7 << 2 >> 2) + $w$s2] + (($35 >>> 19 | $35 << 13) ^ $35 >>> 10 ^ ($35 >>> 17 | $35 << 15)) + (($50 >>> 18 | $50 << 14) ^ $50 >>> 3 ^ ($50 >>> 7 | $50 << 25)) | 0;
    var $67 = $i_211 + 1 | 0;
    if (($67 | 0) == 64) {
      var $h_01 = $17;
      var $g_02 = $15;
      var $f_03 = $13;
      var $e_04 = $11;
      var $d_05 = $9;
      var $c_06 = $7;
      var $b_07 = $5;
      var $a_08 = $3;
      var $i_39 = 0;
      break;
    } else {
      var $i_211 = $67;
    }
  }
  while (1) {
    var $i_39;
    var $a_08;
    var $b_07;
    var $c_06;
    var $d_05;
    var $e_04;
    var $f_03;
    var $g_02;
    var $h_01;
    var $89 = ($e_04 & ($f_03 ^ $g_02) ^ $g_02) + $h_01 + (($e_04 >>> 11 | $e_04 << 21) ^ ($e_04 >>> 25 | $e_04 << 7) ^ ($e_04 >>> 6 | $e_04 << 26)) + HEAP32[($i_39 << 2) + 411040 >> 2] + HEAP32[($i_39 << 2 >> 2) + $w$s2] | 0;
    var $105 = $89 + $d_05 | 0;
    var $107 = (($a_08 >>> 13 | $a_08 << 19) ^ ($a_08 >>> 22 | $a_08 << 10) ^ ($a_08 >>> 2 | $a_08 << 30)) + (($a_08 | $b_07) & $c_06 | $a_08 & $b_07) + $89 | 0;
    var $108 = $i_39 + 1 | 0;
    if (($108 | 0) == 64) {
      break;
    } else {
      var $h_01 = $g_02;
      var $g_02 = $f_03;
      var $f_03 = $e_04;
      var $e_04 = $105;
      var $d_05 = $c_06;
      var $c_06 = $b_07;
      var $b_07 = $a_08;
      var $a_08 = $107;
      var $i_39 = $108;
    }
  }
  HEAP32[$2$s2] = HEAP32[$2$s2] + $107 | 0;
  HEAP32[$4$s2] = HEAP32[$4$s2] + $a_08 | 0;
  HEAP32[$6$s2] = HEAP32[$6$s2] + $b_07 | 0;
  HEAP32[$8$s2] = HEAP32[$8$s2] + $c_06 | 0;
  HEAP32[$10$s2] = HEAP32[$10$s2] + $105 | 0;
  HEAP32[$12$s2] = HEAP32[$12$s2] + $e_04 | 0;
  HEAP32[$14$s2] = HEAP32[$14$s2] + $f_03 | 0;
  HEAP32[$16$s2] = HEAP32[$16$s2] + $g_02 | 0;
  STACKTOP = __stackBase__;
  return;
}
_transform2036["X"] = 1;
function __gcry_hmac256_finalize($hd, $r_dlen) {
  _finalize($hd);
  var $1 = $hd;
  do {
    if ((HEAP32[$hd + 40 >> 2] & 2 | 0) != 0) {
      var $7 = __gcry_hmac256_new(0, 0);
      if (($7 | 0) != 0) {
        __gcry_hmac256_update($7, $hd + 105 | 0, 64);
        var $12 = $hd + 41 | 0;
        __gcry_hmac256_update($7, $12, 32);
        _finalize($7);
        _memcpy($12, $7 + 41 | 0, 32);
        __gcry_hmac256_release($7);
        break;
      }
      _free($1);
      var $_0 = 0;
      var $_0;
      return $_0;
    }
  } while (0);
  if (($r_dlen | 0) != 0) {
    HEAP32[$r_dlen >> 2] = 32;
  }
  var $_0 = $hd + 41 | 0;
  var $_0;
  return $_0;
}
function __gcry_hmac256_file($result, $resultsize, $filename, $key, $keylen) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $digestlen = __stackBase__;
  var $1 = _fopen($filename, 481508);
  do {
    if (($1 | 0) == 0) {
      var $_0 = -1;
    } else {
      var $4 = __gcry_hmac256_new($key, $keylen);
      if (($4 | 0) == 0) {
        _fclose($1);
        var $_0 = -1;
        break;
      }
      var $9 = _malloc(32768);
      if (($9 | 0) == 0) {
        _fclose($1);
        __gcry_hmac256_release($4);
        var $_0 = -1;
        break;
      }
      var $11 = _fread($9, 1, 32768, $1);
      L1175 : do {
        if (($11 | 0) != 0) {
          var $15 = $11;
          while (1) {
            var $15;
            __gcry_hmac256_update($4, $9, $15);
            var $16 = _fread($9, 1, 32768, $1);
            if (($16 | 0) == 0) {
              break L1175;
            } else {
              var $15 = $16;
            }
          }
        }
      } while (0);
      _free($9);
      var $19 = (_ferror($1) | 0) == 0;
      _fclose($1);
      if (!$19) {
        __gcry_hmac256_release($4);
        var $_0 = -1;
        break;
      }
      var $23 = __gcry_hmac256_finalize($4, $digestlen);
      if (($23 | 0) == 0) {
        __gcry_hmac256_release($4);
        var $_0 = -1;
        break;
      }
      var $27 = HEAP32[$digestlen >> 2];
      if ($27 >>> 0 > $resultsize >>> 0) {
        __gcry_hmac256_release($4);
        HEAP32[___errno_location() >> 2] = 22;
        var $_0 = -1;
        break;
      } else {
        _memcpy($result, $23, $27);
        __gcry_hmac256_release($4);
        var $_0 = HEAP32[$digestlen >> 2];
        break;
      }
    }
  } while (0);
  var $_0;
  STACKTOP = __stackBase__;
  return $_0;
}
function _gpg_err_code_from_syserror() {
  var label = 0;
  var $2 = HEAP32[___errno_location() >> 2];
  if (($2 | 0) == 0) {
    var $_0 = 16381;
    var $_0;
    return $_0;
  }
  do {
    if (($2 - 1 | 0) >>> 0 < 11) {
      var $23 = $2 - 1 | 0;
      label = 951;
      break;
    } else {
      if (($2 - 11 | 0) >>> 0 < 25) {
        var $25 = $2;
        break;
      }
      if (($2 - 35 | 0) >>> 0 < 6) {
        var $23 = $2 + 1 | 0;
        label = 951;
        break;
      }
      if (($2 - 42 | 0) >>> 0 < 16) {
        var $25 = $2;
        break;
      }
      if (($2 - 59 | 0) >>> 0 < 37) {
        var $23 = $2 - 1 | 0;
        label = 951;
        break;
      } else {
        var $23 = ($2 - 95 | 0) >>> 0 < 31 ? $2 : -1;
        label = 951;
        break;
      }
    }
  } while (0);
  do {
    if (label == 951) {
      var $23;
      if (($23 | 0) < 0) {
        var $_0 = 16382;
      } else {
        var $25 = $23;
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $25;
  var $_0 = HEAP32[($25 << 2) + 456520 >> 2] | 32768;
  var $_0;
  return $_0;
}
function _gpg_err_set_errno($err) {
  HEAP32[___errno_location() >> 2] = $err;
  return;
}
function _gpg_strerror($err) {
  var $1 = _gpg_err_code2047($err);
  do {
    if (($1 & 32768 | 0) == 0) {
      var $code_0 = $1;
    } else {
      var $5 = _gpg_err_code_to_errno($1);
      if (($5 | 0) == 0) {
        var $code_0 = 16382;
        break;
      }
      var $_0 = _strerror($5);
      var $_0;
      return $_0;
    }
  } while (0);
  var $code_0;
  var $_0 = HEAP32[(_msgidxof($code_0) << 2) + 445804 >> 2] + 440952 | 0;
  var $_0;
  return $_0;
}
function _gpg_strerror_r($err, $buf, $buflen) {
  var $1 = _gpg_err_code2047($err);
  do {
    if (($1 & 32768 | 0) == 0) {
      var $code_0 = $1;
    } else {
      var $5 = _gpg_err_code_to_errno($1);
      if (($5 | 0) == 0) {
        var $code_0 = 16382;
        break;
      }
      var $8 = _system_strerror_r($5, $buf, $buflen);
      if (($8 | 0) == 22) {
        var $code_0 = 16382;
        break;
      }
      if (($buflen | 0) == 0) {
        var $_0 = $8;
        var $_0;
        return $_0;
      }
      HEAP8[$buf + ($buflen - 1) | 0] = 0;
      var $_0 = $8;
      var $_0;
      return $_0;
    }
  } while (0);
  var $code_0;
  var $19 = HEAP32[(_msgidxof($code_0) << 2) + 445804 >> 2] + 440952 | 0;
  var $21 = _strlen($19) + 1 | 0;
  var $23 = $21 >>> 0 < $buflen >>> 0 ? $21 : $buflen;
  _memcpy($buf, $19, $23);
  if (($buflen | 0) != 0) {
    HEAP8[$buf + ($buflen - 1) | 0] = 0;
  }
  var $_0 = ($23 | 0) == ($21 | 0) ? 0 : 34;
  var $_0;
  return $_0;
}
function _gpg_err_source($err) {
  return $err >>> 24 & 127;
}
function _msgidxof2052($code) {
  if ($code >>> 0 < 15) {
    return $code;
  } else {
    return ($code - 31 | 0) >>> 0 < 5 ? $code - 16 | 0 : 20;
  }
}
function _gpg_err_code_to_errno($code) {
  do {
    if (($code & 32768 | 0) == 0) {
      var $_0 = 0;
    } else {
      var $4 = $code & -32769;
      if ($4 >>> 0 >= 141) {
        var $_0 = 0;
        break;
      }
      var $_0 = HEAP32[($4 << 2) + 455956 >> 2];
    }
  } while (0);
  var $_0;
  return $_0;
}
function _system_strerror_r($no, $buf, $buflen) {
  var $1 = _strerror_r($no, $buf, $buflen);
  if (($1 | 0) == ($buf | 0)) {
    var $_0 = (_strlen($buf) + 1 | 0) >>> 0 < $buflen >>> 0 ? 0 : 34;
    var $_0;
    return $_0;
  } else {
    var $5 = _strlen($1) + 1 | 0;
    var $7 = $5 >>> 0 < $buflen >>> 0 ? $5 : $buflen;
    _memcpy($buf, $1, $7);
    var $_0 = ($7 | 0) == ($5 | 0) ? 0 : 34;
    var $_0;
    return $_0;
  }
}
function _gpg_strsource($err) {
  return HEAP32[(_msgidxof2052(_gpg_err_source($err)) << 2) + 445720 >> 2] + 440728 | 0;
}
function _malloc($bytes) {
  do {
    if ($bytes >>> 0 < 245) {
      if ($bytes >>> 0 < 11) {
        var $8 = 16;
      } else {
        var $8 = $bytes + 11 & -8;
      }
      var $8;
      var $9 = $8 >>> 3;
      var $10 = HEAP32[122690];
      var $11 = $10 >>> ($9 >>> 0);
      if (($11 & 3 | 0) != 0) {
        var $17 = ($11 & 1 ^ 1) + $9 | 0;
        var $18 = $17 << 1;
        var $20 = ($18 << 2) + 490800 | 0;
        var $21 = ($18 + 2 << 2) + 490800 | 0;
        var $22 = HEAP32[$21 >> 2];
        var $23 = $22 + 8 | 0;
        var $24 = HEAP32[$23 >> 2];
        do {
          if (($20 | 0) == ($24 | 0)) {
            HEAP32[122690] = $10 & (1 << $17 ^ -1);
          } else {
            if ($24 >>> 0 < HEAP32[122694] >>> 0) {
              _abort();
            } else {
              HEAP32[$21 >> 2] = $24;
              HEAP32[$24 + 12 >> 2] = $20;
              break;
            }
          }
        } while (0);
        var $38 = $17 << 3;
        HEAP32[$22 + 4 >> 2] = $38 | 3;
        var $43 = $22 + ($38 | 4) | 0;
        HEAP32[$43 >> 2] = HEAP32[$43 >> 2] | 1;
        var $mem_0 = $23;
        var $mem_0;
        return $mem_0;
      }
      if ($8 >>> 0 <= HEAP32[122692] >>> 0) {
        var $nb_0 = $8;
        break;
      }
      if (($11 | 0) == 0) {
        if ((HEAP32[122691] | 0) == 0) {
          var $nb_0 = $8;
          break;
        }
        var $146 = _tmalloc_small($8);
        if (($146 | 0) == 0) {
          var $nb_0 = $8;
          break;
        } else {
          var $mem_0 = $146;
        }
        var $mem_0;
        return $mem_0;
      }
      var $54 = 2 << $9;
      var $57 = $11 << $9 & ($54 | -$54);
      var $60 = ($57 & -$57) - 1 | 0;
      var $62 = $60 >>> 12 & 16;
      var $63 = $60 >>> ($62 >>> 0);
      var $65 = $63 >>> 5 & 8;
      var $66 = $63 >>> ($65 >>> 0);
      var $68 = $66 >>> 2 & 4;
      var $69 = $66 >>> ($68 >>> 0);
      var $71 = $69 >>> 1 & 2;
      var $72 = $69 >>> ($71 >>> 0);
      var $74 = $72 >>> 1 & 1;
      var $80 = ($65 | $62 | $68 | $71 | $74) + ($72 >>> ($74 >>> 0)) | 0;
      var $81 = $80 << 1;
      var $83 = ($81 << 2) + 490800 | 0;
      var $84 = ($81 + 2 << 2) + 490800 | 0;
      var $85 = HEAP32[$84 >> 2];
      var $86 = $85 + 8 | 0;
      var $87 = HEAP32[$86 >> 2];
      do {
        if (($83 | 0) == ($87 | 0)) {
          HEAP32[122690] = $10 & (1 << $80 ^ -1);
        } else {
          if ($87 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          } else {
            HEAP32[$84 >> 2] = $87;
            HEAP32[$87 + 12 >> 2] = $83;
            break;
          }
        }
      } while (0);
      var $101 = $80 << 3;
      var $102 = $101 - $8 | 0;
      HEAP32[$85 + 4 >> 2] = $8 | 3;
      var $105 = $85;
      var $107 = $105 + $8 | 0;
      HEAP32[$105 + ($8 | 4) >> 2] = $102 | 1;
      HEAP32[$105 + $101 >> 2] = $102;
      var $113 = HEAP32[122692];
      if (($113 | 0) != 0) {
        var $116 = HEAP32[122695];
        var $119 = $113 >>> 2 & 1073741822;
        var $121 = ($119 << 2) + 490800 | 0;
        var $122 = HEAP32[122690];
        var $123 = 1 << ($113 >>> 3);
        do {
          if (($122 & $123 | 0) == 0) {
            HEAP32[122690] = $122 | $123;
            var $F4_0 = $121;
          } else {
            var $130 = HEAP32[($119 + 2 << 2) + 490800 >> 2];
            if ($130 >>> 0 >= HEAP32[122694] >>> 0) {
              var $F4_0 = $130;
              break;
            }
            _abort();
          }
        } while (0);
        var $F4_0;
        HEAP32[($119 + 2 << 2) + 490800 >> 2] = $116;
        HEAP32[$F4_0 + 12 >> 2] = $116;
        HEAP32[$116 + 8 >> 2] = $F4_0;
        HEAP32[$116 + 12 >> 2] = $121;
      }
      HEAP32[122692] = $102;
      HEAP32[122695] = $107;
      var $mem_0 = $86;
      var $mem_0;
      return $mem_0;
    } else {
      if ($bytes >>> 0 > 4294967231) {
        var $nb_0 = -1;
        break;
      }
      var $152 = $bytes + 11 & -8;
      if ((HEAP32[122691] | 0) == 0) {
        var $nb_0 = $152;
        break;
      }
      var $156 = _tmalloc_large($152);
      if (($156 | 0) == 0) {
        var $nb_0 = $152;
        break;
      } else {
        var $mem_0 = $156;
      }
      var $mem_0;
      return $mem_0;
    }
  } while (0);
  var $nb_0;
  var $159 = HEAP32[122692];
  if ($nb_0 >>> 0 > $159 >>> 0) {
    var $188 = HEAP32[122693];
    if ($nb_0 >>> 0 < $188 >>> 0) {
      var $191 = $188 - $nb_0 | 0;
      HEAP32[122693] = $191;
      var $192 = HEAP32[122696];
      var $193 = $192;
      HEAP32[122696] = $193 + $nb_0 | 0;
      HEAP32[$nb_0 + ($193 + 4) >> 2] = $191 | 1;
      HEAP32[$192 + 4 >> 2] = $nb_0 | 3;
      var $mem_0 = $192 + 8 | 0;
      var $mem_0;
      return $mem_0;
    } else {
      var $mem_0 = _sys_alloc($nb_0);
      var $mem_0;
      return $mem_0;
    }
  } else {
    var $162 = $159 - $nb_0 | 0;
    var $163 = HEAP32[122695];
    if ($162 >>> 0 > 15) {
      var $166 = $163;
      HEAP32[122695] = $166 + $nb_0 | 0;
      HEAP32[122692] = $162;
      HEAP32[$nb_0 + ($166 + 4) >> 2] = $162 | 1;
      HEAP32[$166 + $159 >> 2] = $162;
      HEAP32[$163 + 4 >> 2] = $nb_0 | 3;
    } else {
      HEAP32[122692] = 0;
      HEAP32[122695] = 0;
      HEAP32[$163 + 4 >> 2] = $159 | 3;
      var $181 = $159 + ($163 + 4) | 0;
      HEAP32[$181 >> 2] = HEAP32[$181 >> 2] | 1;
    }
    var $mem_0 = $163 + 8 | 0;
    var $mem_0;
    return $mem_0;
  }
}
Module["_malloc"] = _malloc;
_malloc["X"] = 1;
function _tmalloc_small($nb) {
  var $R_1$s2;
  var $v_0$s2;
  var $1 = HEAP32[122691];
  var $4 = ($1 & -$1) - 1 | 0;
  var $6 = $4 >>> 12 & 16;
  var $7 = $4 >>> ($6 >>> 0);
  var $9 = $7 >>> 5 & 8;
  var $10 = $7 >>> ($9 >>> 0);
  var $12 = $10 >>> 2 & 4;
  var $13 = $10 >>> ($12 >>> 0);
  var $15 = $13 >>> 1 & 2;
  var $16 = $13 >>> ($15 >>> 0);
  var $18 = $16 >>> 1 & 1;
  var $26 = HEAP32[(($9 | $6 | $12 | $15 | $18) + ($16 >>> ($18 >>> 0)) << 2) + 491064 >> 2];
  var $t_0 = $26;
  var $v_0 = $26, $v_0$s2 = $v_0 >> 2;
  var $rsize_0 = (HEAP32[$26 + 4 >> 2] & -8) - $nb | 0;
  while (1) {
    var $rsize_0;
    var $v_0;
    var $t_0;
    var $33 = HEAP32[$t_0 + 16 >> 2];
    if (($33 | 0) == 0) {
      var $37 = HEAP32[$t_0 + 20 >> 2];
      if (($37 | 0) == 0) {
        break;
      } else {
        var $39 = $37;
      }
    } else {
      var $39 = $33;
    }
    var $39;
    var $43 = (HEAP32[$39 + 4 >> 2] & -8) - $nb | 0;
    var $44 = $43 >>> 0 < $rsize_0 >>> 0;
    var $t_0 = $39;
    var $v_0 = $44 ? $39 : $v_0, $v_0$s2 = $v_0 >> 2;
    var $rsize_0 = $44 ? $43 : $rsize_0;
  }
  var $46 = $v_0;
  var $47 = HEAP32[122694];
  if ($46 >>> 0 < $47 >>> 0) {
    _abort();
  }
  var $50 = $46 + $nb | 0;
  var $51 = $50;
  if ($46 >>> 0 >= $50 >>> 0) {
    _abort();
  }
  var $55 = HEAP32[$v_0$s2 + 6];
  var $57 = HEAP32[$v_0$s2 + 3];
  L1318 : do {
    if (($57 | 0) == ($v_0 | 0)) {
      var $69 = $v_0 + 20 | 0;
      var $70 = HEAP32[$69 >> 2];
      do {
        if (($70 | 0) == 0) {
          var $73 = $v_0 + 16 | 0;
          var $74 = HEAP32[$73 >> 2];
          if (($74 | 0) == 0) {
            var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
            break L1318;
          } else {
            var $RP_0 = $73;
            var $R_0 = $74;
            break;
          }
        } else {
          var $RP_0 = $69;
          var $R_0 = $70;
        }
      } while (0);
      while (1) {
        var $R_0;
        var $RP_0;
        var $76 = $R_0 + 20 | 0;
        if ((HEAP32[$76 >> 2] | 0) == 0) {
          var $80 = $R_0 + 16 | 0;
          if ((HEAP32[$80 >> 2] | 0) == 0) {
            break;
          } else {
            var $CP_0 = $80;
          }
        } else {
          var $CP_0 = $76;
        }
        var $CP_0;
        var $RP_0 = $CP_0;
        var $R_0 = HEAP32[$CP_0 >> 2];
      }
      if ($RP_0 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      } else {
        HEAP32[$RP_0 >> 2] = 0;
        var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
        break;
      }
    } else {
      var $61 = HEAP32[$v_0$s2 + 2];
      if ($61 >>> 0 < $47 >>> 0) {
        _abort();
      } else {
        HEAP32[$61 + 12 >> 2] = $57;
        HEAP32[$57 + 8 >> 2] = $61;
        var $R_1 = $57, $R_1$s2 = $R_1 >> 2;
        break;
      }
    }
  } while (0);
  var $R_1;
  L1336 : do {
    if (($55 | 0) != 0) {
      var $93 = $v_0 + 28 | 0;
      var $95 = (HEAP32[$93 >> 2] << 2) + 491064 | 0;
      do {
        if (($v_0 | 0) == (HEAP32[$95 >> 2] | 0)) {
          HEAP32[$95 >> 2] = $R_1;
          if (($R_1 | 0) != 0) {
            break;
          }
          HEAP32[122691] = HEAP32[122691] & (1 << HEAP32[$93 >> 2] ^ -1);
          break L1336;
        } else {
          if ($55 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          }
          var $109 = $55 + 16 | 0;
          if ((HEAP32[$109 >> 2] | 0) == ($v_0 | 0)) {
            HEAP32[$109 >> 2] = $R_1;
          } else {
            HEAP32[$55 + 20 >> 2] = $R_1;
          }
          if (($R_1 | 0) == 0) {
            break L1336;
          }
        }
      } while (0);
      if ($R_1 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      }
      HEAP32[$R_1$s2 + 6] = $55;
      var $125 = HEAP32[$v_0$s2 + 4];
      do {
        if (($125 | 0) != 0) {
          if ($125 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          } else {
            HEAP32[$R_1$s2 + 4] = $125;
            HEAP32[$125 + 24 >> 2] = $R_1;
            break;
          }
        }
      } while (0);
      var $137 = HEAP32[$v_0$s2 + 5];
      if (($137 | 0) == 0) {
        break;
      }
      if ($137 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      } else {
        HEAP32[$R_1$s2 + 5] = $137;
        HEAP32[$137 + 24 >> 2] = $R_1;
        break;
      }
    }
  } while (0);
  if ($rsize_0 >>> 0 < 16) {
    var $151 = $rsize_0 + $nb | 0;
    HEAP32[$v_0$s2 + 1] = $151 | 3;
    var $155 = $151 + ($46 + 4) | 0;
    HEAP32[$155 >> 2] = HEAP32[$155 >> 2] | 1;
    var $195 = $v_0 + 8 | 0;
    var $196 = $195;
    return $196;
  }
  HEAP32[$v_0$s2 + 1] = $nb | 3;
  HEAP32[$nb + ($46 + 4) >> 2] = $rsize_0 | 1;
  HEAP32[$46 + $rsize_0 + $nb >> 2] = $rsize_0;
  var $166 = HEAP32[122692];
  if (($166 | 0) != 0) {
    var $169 = HEAP32[122695];
    var $172 = $166 >>> 2 & 1073741822;
    var $174 = ($172 << 2) + 490800 | 0;
    var $175 = HEAP32[122690];
    var $176 = 1 << ($166 >>> 3);
    do {
      if (($175 & $176 | 0) == 0) {
        HEAP32[122690] = $175 | $176;
        var $F1_0 = $174;
      } else {
        var $183 = HEAP32[($172 + 2 << 2) + 490800 >> 2];
        if ($183 >>> 0 >= HEAP32[122694] >>> 0) {
          var $F1_0 = $183;
          break;
        }
        _abort();
      }
    } while (0);
    var $F1_0;
    HEAP32[($172 + 2 << 2) + 490800 >> 2] = $169;
    HEAP32[$F1_0 + 12 >> 2] = $169;
    HEAP32[$169 + 8 >> 2] = $F1_0;
    HEAP32[$169 + 12 >> 2] = $174;
  }
  HEAP32[122692] = $rsize_0;
  HEAP32[122695] = $51;
  var $195 = $v_0 + 8 | 0;
  var $196 = $195;
  return $196;
}
_tmalloc_small["X"] = 1;
function _sys_alloc($nb) {
  var $sp_0$s2;
  var label = 0;
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  L1381 : do {
    if ((HEAP32[122800] & 4 | 0) == 0) {
      var $9 = HEAP32[122696];
      do {
        if (($9 | 0) == 0) {
          label = 1095;
        } else {
          var $13 = _segment_holding($9);
          if (($13 | 0) == 0) {
            label = 1095;
            break;
          }
          var $41 = HEAP32[111699];
          var $46 = $nb + 47 - HEAP32[122693] + $41 & -$41;
          if ($46 >>> 0 >= 2147483647) {
            var $tsize_0121720_ph = 0;
            break;
          }
          var $49 = _sbrk($46);
          var $55 = ($49 | 0) == (HEAP32[$13 >> 2] + HEAP32[$13 + 4 >> 2] | 0);
          var $tbase_0 = $55 ? $49 : -1;
          var $tsize_0 = $55 ? $46 : 0;
          var $asize_1 = $46;
          var $br_0 = $49;
          label = 1102;
          break;
        }
      } while (0);
      do {
        if (label == 1095) {
          var $15 = _sbrk(0);
          if (($15 | 0) == -1) {
            var $tsize_0121720_ph = 0;
            break;
          }
          var $18 = HEAP32[111699];
          var $22 = $18 + ($nb + 47) & -$18;
          var $23 = $15;
          var $24 = HEAP32[111698];
          var $25 = $24 - 1 | 0;
          if (($25 & $23 | 0) == 0) {
            var $asize_0 = $22;
          } else {
            var $asize_0 = $22 - $23 + ($25 + $23 & -$24) | 0;
          }
          var $asize_0;
          if ($asize_0 >>> 0 >= 2147483647) {
            var $tsize_0121720_ph = 0;
            break;
          }
          var $37 = _sbrk($asize_0);
          var $38 = ($37 | 0) == ($15 | 0);
          var $tbase_0 = $38 ? $15 : -1;
          var $tsize_0 = $38 ? $asize_0 : 0;
          var $asize_1 = $asize_0;
          var $br_0 = $37;
          label = 1102;
          break;
        }
      } while (0);
      L1394 : do {
        if (label == 1102) {
          var $br_0;
          var $asize_1;
          var $tsize_0;
          var $tbase_0;
          var $57 = -$asize_1 | 0;
          if (($tbase_0 | 0) != -1) {
            var $tsize_229 = $tsize_0;
            var $tbase_230 = $tbase_0;
            label = 1115;
            break L1381;
          }
          do {
            if (($br_0 | 0) != -1 & $asize_1 >>> 0 < 2147483647) {
              if ($asize_1 >>> 0 >= ($nb + 48 | 0) >>> 0) {
                var $asize_2 = $asize_1;
                break;
              }
              var $66 = HEAP32[111699];
              var $71 = $nb + 47 - $asize_1 + $66 & -$66;
              if ($71 >>> 0 >= 2147483647) {
                var $asize_2 = $asize_1;
                break;
              }
              if ((_sbrk($71) | 0) == -1) {
                _sbrk($57);
                var $tsize_0121720_ph = $tsize_0;
                break L1394;
              } else {
                var $asize_2 = $71 + $asize_1 | 0;
                break;
              }
            } else {
              var $asize_2 = $asize_1;
            }
          } while (0);
          var $asize_2;
          if (($br_0 | 0) != -1) {
            var $tsize_229 = $asize_2;
            var $tbase_230 = $br_0;
            label = 1115;
            break L1381;
          }
          HEAP32[122800] = HEAP32[122800] | 4;
          var $tsize_125 = $tsize_0;
          label = 1112;
          break L1381;
        }
      } while (0);
      var $tsize_0121720_ph;
      HEAP32[122800] = HEAP32[122800] | 4;
      var $tsize_125 = $tsize_0121720_ph;
      label = 1112;
      break;
    } else {
      var $tsize_125 = 0;
      label = 1112;
    }
  } while (0);
  do {
    if (label == 1112) {
      var $tsize_125;
      var $86 = HEAP32[111699];
      var $90 = $86 + ($nb + 47) & -$86;
      if ($90 >>> 0 >= 2147483647) {
        break;
      }
      var $93 = _sbrk($90);
      var $94 = _sbrk(0);
      if (!(($94 | 0) != -1 & ($93 | 0) != -1 & $93 >>> 0 < $94 >>> 0)) {
        break;
      }
      var $98 = $94 - $93 | 0;
      var $100 = $98 >>> 0 > ($nb + 40 | 0) >>> 0;
      var $_tbase_1 = $100 ? $93 : -1;
      if (($_tbase_1 | 0) == -1) {
        break;
      } else {
        var $tsize_229 = $100 ? $98 : $tsize_125;
        var $tbase_230 = $_tbase_1;
        label = 1115;
        break;
      }
    }
  } while (0);
  do {
    if (label == 1115) {
      var $tbase_230;
      var $tsize_229;
      var $103 = HEAP32[122798] + $tsize_229 | 0;
      HEAP32[122798] = $103;
      if ($103 >>> 0 > HEAP32[122799] >>> 0) {
        HEAP32[122799] = $103;
      }
      L1416 : do {
        if ((HEAP32[122696] | 0) == 0) {
          var $111 = HEAP32[122694];
          if (($111 | 0) == 0 | $tbase_230 >>> 0 < $111 >>> 0) {
            HEAP32[122694] = $tbase_230;
          }
          HEAP32[122801] = $tbase_230;
          HEAP32[122802] = $tsize_229;
          HEAP32[122804] = 0;
          HEAP32[122699] = HEAP32[111697];
          HEAP32[122698] = -1;
          _init_bins();
          _init_top($tbase_230, $tsize_229 - 40 | 0);
        } else {
          var $sp_0 = 491204, $sp_0$s2 = $sp_0 >> 2;
          while (1) {
            var $sp_0;
            if (($sp_0 | 0) == 0) {
              break;
            }
            var $122 = HEAP32[$sp_0$s2];
            var $123 = $sp_0 + 4 | 0;
            var $124 = HEAP32[$123 >> 2];
            var $125 = $122 + $124 | 0;
            if (($tbase_230 | 0) == ($125 | 0)) {
              label = 1124;
              break;
            }
            var $sp_0 = HEAP32[$sp_0$s2 + 2], $sp_0$s2 = $sp_0 >> 2;
          }
          do {
            if (label == 1124) {
              if ((HEAP32[$sp_0$s2 + 3] & 8 | 0) != 0) {
                break;
              }
              var $136 = HEAP32[122696];
              if (!($136 >>> 0 >= $122 >>> 0 & $136 >>> 0 < $125 >>> 0)) {
                break;
              }
              HEAP32[$123 >> 2] = $124 + $tsize_229 | 0;
              _init_top(HEAP32[122696], HEAP32[122693] + $tsize_229 | 0);
              break L1416;
            }
          } while (0);
          if ($tbase_230 >>> 0 < HEAP32[122694] >>> 0) {
            HEAP32[122694] = $tbase_230;
          }
          var $147 = $tbase_230 + $tsize_229 | 0;
          var $sp_1 = 491204;
          while (1) {
            var $sp_1;
            if (($sp_1 | 0) == 0) {
              break;
            }
            var $151 = $sp_1 | 0;
            var $152 = HEAP32[$151 >> 2];
            if (($152 | 0) == ($147 | 0)) {
              label = 1133;
              break;
            }
            var $sp_1 = HEAP32[$sp_1 + 8 >> 2];
          }
          do {
            if (label == 1133) {
              if ((HEAP32[$sp_1 + 12 >> 2] & 8 | 0) != 0) {
                break;
              }
              HEAP32[$151 >> 2] = $tbase_230;
              var $162 = $sp_1 + 4 | 0;
              HEAP32[$162 >> 2] = HEAP32[$162 >> 2] + $tsize_229 | 0;
              var $_0 = _prepend_alloc($tbase_230, $152, $nb);
              var $_0;
              return $_0;
            }
          } while (0);
          _add_segment($tbase_230, $tsize_229);
        }
      } while (0);
      var $167 = HEAP32[122693];
      if ($167 >>> 0 <= $nb >>> 0) {
        break;
      }
      var $170 = $167 - $nb | 0;
      HEAP32[122693] = $170;
      var $171 = HEAP32[122696];
      var $172 = $171;
      HEAP32[122696] = $172 + $nb | 0;
      HEAP32[$nb + ($172 + 4) >> 2] = $170 | 1;
      HEAP32[$171 + 4 >> 2] = $nb | 3;
      var $_0 = $171 + 8 | 0;
      var $_0;
      return $_0;
    }
  } while (0);
  HEAP32[___errno_location() >> 2] = 12;
  var $_0 = 0;
  var $_0;
  return $_0;
}
_sys_alloc["X"] = 1;
function _tmalloc_large($nb) {
  var $R_1$s2;
  var $112$s2;
  var $t_224$s2;
  var $v_3_lcssa$s2;
  var $t_0$s2;
  var $nb$s2 = $nb >> 2;
  var label = 0;
  var $1 = -$nb | 0;
  var $2 = $nb >>> 8;
  do {
    if (($2 | 0) == 0) {
      var $idx_0 = 0;
    } else {
      if ($nb >>> 0 > 16777215) {
        var $idx_0 = 31;
        break;
      }
      var $9 = ($2 + 1048320 | 0) >>> 16 & 8;
      var $10 = $2 << $9;
      var $13 = ($10 + 520192 | 0) >>> 16 & 4;
      var $14 = $10 << $13;
      var $17 = ($14 + 245760 | 0) >>> 16 & 2;
      var $23 = 14 - ($13 | $9 | $17) + ($14 << $17 >>> 15) | 0;
      var $idx_0 = $nb >>> (($23 + 7 | 0) >>> 0) & 1 | $23 << 1;
    }
  } while (0);
  var $idx_0;
  var $31 = HEAP32[($idx_0 << 2) + 491064 >> 2];
  L1452 : do {
    if (($31 | 0) == 0) {
      var $v_2 = 0;
      var $rsize_2 = $1;
      var $t_1 = 0;
    } else {
      if (($idx_0 | 0) == 31) {
        var $39 = 0;
      } else {
        var $39 = 25 - ($idx_0 >>> 1) | 0;
      }
      var $39;
      var $v_0 = 0;
      var $rsize_0 = $1;
      var $t_0 = $31, $t_0$s2 = $t_0 >> 2;
      var $sizebits_0 = $nb << $39;
      var $rst_0 = 0;
      while (1) {
        var $rst_0;
        var $sizebits_0;
        var $t_0;
        var $rsize_0;
        var $v_0;
        var $44 = HEAP32[$t_0$s2 + 1] & -8;
        var $45 = $44 - $nb | 0;
        if ($45 >>> 0 < $rsize_0 >>> 0) {
          if (($44 | 0) == ($nb | 0)) {
            var $v_2 = $t_0;
            var $rsize_2 = $45;
            var $t_1 = $t_0;
            break L1452;
          } else {
            var $v_1 = $t_0;
            var $rsize_1 = $45;
          }
        } else {
          var $v_1 = $v_0;
          var $rsize_1 = $rsize_0;
        }
        var $rsize_1;
        var $v_1;
        var $51 = HEAP32[$t_0$s2 + 5];
        var $54 = HEAP32[(($sizebits_0 >>> 31 << 2) + 16 >> 2) + $t_0$s2];
        var $rst_1 = ($51 | 0) == 0 | ($51 | 0) == ($54 | 0) ? $rst_0 : $51;
        if (($54 | 0) == 0) {
          var $v_2 = $v_1;
          var $rsize_2 = $rsize_1;
          var $t_1 = $rst_1;
          break L1452;
        } else {
          var $v_0 = $v_1;
          var $rsize_0 = $rsize_1;
          var $t_0 = $54, $t_0$s2 = $t_0 >> 2;
          var $sizebits_0 = $sizebits_0 << 1;
          var $rst_0 = $rst_1;
        }
      }
    }
  } while (0);
  var $t_1;
  var $rsize_2;
  var $v_2;
  do {
    if (($t_1 | 0) == 0 & ($v_2 | 0) == 0) {
      var $62 = 2 << $idx_0;
      var $66 = HEAP32[122691] & ($62 | -$62);
      if (($66 | 0) == 0) {
        var $t_2_ph = $t_1;
        break;
      }
      var $71 = ($66 & -$66) - 1 | 0;
      var $73 = $71 >>> 12 & 16;
      var $74 = $71 >>> ($73 >>> 0);
      var $76 = $74 >>> 5 & 8;
      var $77 = $74 >>> ($76 >>> 0);
      var $79 = $77 >>> 2 & 4;
      var $80 = $77 >>> ($79 >>> 0);
      var $82 = $80 >>> 1 & 2;
      var $83 = $80 >>> ($82 >>> 0);
      var $85 = $83 >>> 1 & 1;
      var $t_2_ph = HEAP32[(($76 | $73 | $79 | $82 | $85) + ($83 >>> ($85 >>> 0)) << 2) + 491064 >> 2];
    } else {
      var $t_2_ph = $t_1;
    }
  } while (0);
  var $t_2_ph;
  L1467 : do {
    if (($t_2_ph | 0) == 0) {
      var $rsize_3_lcssa = $rsize_2;
      var $v_3_lcssa = $v_2, $v_3_lcssa$s2 = $v_3_lcssa >> 2;
    } else {
      var $t_224 = $t_2_ph, $t_224$s2 = $t_224 >> 2;
      var $rsize_325 = $rsize_2;
      var $v_326 = $v_2;
      while (1) {
        var $v_326;
        var $rsize_325;
        var $t_224;
        var $98 = (HEAP32[$t_224$s2 + 1] & -8) - $nb | 0;
        var $99 = $98 >>> 0 < $rsize_325 >>> 0;
        var $_rsize_3 = $99 ? $98 : $rsize_325;
        var $t_2_v_3 = $99 ? $t_224 : $v_326;
        var $101 = HEAP32[$t_224$s2 + 4];
        if (($101 | 0) != 0) {
          var $t_224 = $101, $t_224$s2 = $t_224 >> 2;
          var $rsize_325 = $_rsize_3;
          var $v_326 = $t_2_v_3;
          continue;
        }
        var $104 = HEAP32[$t_224$s2 + 5];
        if (($104 | 0) == 0) {
          var $rsize_3_lcssa = $_rsize_3;
          var $v_3_lcssa = $t_2_v_3, $v_3_lcssa$s2 = $v_3_lcssa >> 2;
          break L1467;
        } else {
          var $t_224 = $104, $t_224$s2 = $t_224 >> 2;
          var $rsize_325 = $_rsize_3;
          var $v_326 = $t_2_v_3;
        }
      }
    }
  } while (0);
  var $v_3_lcssa;
  var $rsize_3_lcssa;
  if (($v_3_lcssa | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if ($rsize_3_lcssa >>> 0 >= (HEAP32[122692] - $nb | 0) >>> 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $112 = $v_3_lcssa, $112$s2 = $112 >> 2;
  var $113 = HEAP32[122694];
  if ($112 >>> 0 < $113 >>> 0) {
    _abort();
  }
  var $116 = $112 + $nb | 0;
  var $117 = $116;
  if ($112 >>> 0 >= $116 >>> 0) {
    _abort();
  }
  var $121 = HEAP32[$v_3_lcssa$s2 + 6];
  var $123 = HEAP32[$v_3_lcssa$s2 + 3];
  L1484 : do {
    if (($123 | 0) == ($v_3_lcssa | 0)) {
      var $135 = $v_3_lcssa + 20 | 0;
      var $136 = HEAP32[$135 >> 2];
      do {
        if (($136 | 0) == 0) {
          var $139 = $v_3_lcssa + 16 | 0;
          var $140 = HEAP32[$139 >> 2];
          if (($140 | 0) == 0) {
            var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
            break L1484;
          } else {
            var $RP_0 = $139;
            var $R_0 = $140;
            break;
          }
        } else {
          var $RP_0 = $135;
          var $R_0 = $136;
        }
      } while (0);
      while (1) {
        var $R_0;
        var $RP_0;
        var $142 = $R_0 + 20 | 0;
        if ((HEAP32[$142 >> 2] | 0) == 0) {
          var $146 = $R_0 + 16 | 0;
          if ((HEAP32[$146 >> 2] | 0) == 0) {
            break;
          } else {
            var $CP_0 = $146;
          }
        } else {
          var $CP_0 = $142;
        }
        var $CP_0;
        var $RP_0 = $CP_0;
        var $R_0 = HEAP32[$CP_0 >> 2];
      }
      if ($RP_0 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      } else {
        HEAP32[$RP_0 >> 2] = 0;
        var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
        break;
      }
    } else {
      var $127 = HEAP32[$v_3_lcssa$s2 + 2];
      if ($127 >>> 0 < $113 >>> 0) {
        _abort();
      } else {
        HEAP32[$127 + 12 >> 2] = $123;
        HEAP32[$123 + 8 >> 2] = $127;
        var $R_1 = $123, $R_1$s2 = $R_1 >> 2;
        break;
      }
    }
  } while (0);
  var $R_1;
  L1502 : do {
    if (($121 | 0) != 0) {
      var $159 = $v_3_lcssa + 28 | 0;
      var $161 = (HEAP32[$159 >> 2] << 2) + 491064 | 0;
      do {
        if (($v_3_lcssa | 0) == (HEAP32[$161 >> 2] | 0)) {
          HEAP32[$161 >> 2] = $R_1;
          if (($R_1 | 0) != 0) {
            break;
          }
          HEAP32[122691] = HEAP32[122691] & (1 << HEAP32[$159 >> 2] ^ -1);
          break L1502;
        } else {
          if ($121 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          }
          var $175 = $121 + 16 | 0;
          if ((HEAP32[$175 >> 2] | 0) == ($v_3_lcssa | 0)) {
            HEAP32[$175 >> 2] = $R_1;
          } else {
            HEAP32[$121 + 20 >> 2] = $R_1;
          }
          if (($R_1 | 0) == 0) {
            break L1502;
          }
        }
      } while (0);
      if ($R_1 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      }
      HEAP32[$R_1$s2 + 6] = $121;
      var $191 = HEAP32[$v_3_lcssa$s2 + 4];
      do {
        if (($191 | 0) != 0) {
          if ($191 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          } else {
            HEAP32[$R_1$s2 + 4] = $191;
            HEAP32[$191 + 24 >> 2] = $R_1;
            break;
          }
        }
      } while (0);
      var $203 = HEAP32[$v_3_lcssa$s2 + 5];
      if (($203 | 0) == 0) {
        break;
      }
      if ($203 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      } else {
        HEAP32[$R_1$s2 + 5] = $203;
        HEAP32[$203 + 24 >> 2] = $R_1;
        break;
      }
    }
  } while (0);
  do {
    if ($rsize_3_lcssa >>> 0 < 16) {
      var $217 = $rsize_3_lcssa + $nb | 0;
      HEAP32[$v_3_lcssa$s2 + 1] = $217 | 3;
      var $221 = $217 + ($112 + 4) | 0;
      HEAP32[$221 >> 2] = HEAP32[$221 >> 2] | 1;
    } else {
      HEAP32[$v_3_lcssa$s2 + 1] = $nb | 3;
      HEAP32[$nb$s2 + ($112$s2 + 1)] = $rsize_3_lcssa | 1;
      HEAP32[($rsize_3_lcssa >> 2) + $112$s2 + $nb$s2] = $rsize_3_lcssa;
      if ($rsize_3_lcssa >>> 0 < 256) {
        var $236 = $rsize_3_lcssa >>> 2 & 1073741822;
        var $238 = ($236 << 2) + 490800 | 0;
        var $239 = HEAP32[122690];
        var $240 = 1 << ($rsize_3_lcssa >>> 3);
        do {
          if (($239 & $240 | 0) == 0) {
            HEAP32[122690] = $239 | $240;
            var $F5_0 = $238;
          } else {
            var $247 = HEAP32[($236 + 2 << 2) + 490800 >> 2];
            if ($247 >>> 0 >= HEAP32[122694] >>> 0) {
              var $F5_0 = $247;
              break;
            }
            _abort();
          }
        } while (0);
        var $F5_0;
        HEAP32[($236 + 2 << 2) + 490800 >> 2] = $117;
        HEAP32[$F5_0 + 12 >> 2] = $117;
        HEAP32[$nb$s2 + ($112$s2 + 2)] = $F5_0;
        HEAP32[$nb$s2 + ($112$s2 + 3)] = $238;
        break;
      }
      var $260 = $116;
      var $261 = $rsize_3_lcssa >>> 8;
      do {
        if (($261 | 0) == 0) {
          var $I7_0 = 0;
        } else {
          if ($rsize_3_lcssa >>> 0 > 16777215) {
            var $I7_0 = 31;
            break;
          }
          var $268 = ($261 + 1048320 | 0) >>> 16 & 8;
          var $269 = $261 << $268;
          var $272 = ($269 + 520192 | 0) >>> 16 & 4;
          var $273 = $269 << $272;
          var $276 = ($273 + 245760 | 0) >>> 16 & 2;
          var $282 = 14 - ($272 | $268 | $276) + ($273 << $276 >>> 15) | 0;
          var $I7_0 = $rsize_3_lcssa >>> (($282 + 7 | 0) >>> 0) & 1 | $282 << 1;
        }
      } while (0);
      var $I7_0;
      var $289 = ($I7_0 << 2) + 491064 | 0;
      HEAP32[$nb$s2 + ($112$s2 + 7)] = $I7_0;
      HEAP32[$nb$s2 + ($112$s2 + 5)] = 0;
      HEAP32[$nb$s2 + ($112$s2 + 4)] = 0;
      var $296 = HEAP32[122691];
      var $297 = 1 << $I7_0;
      if (($296 & $297 | 0) == 0) {
        HEAP32[122691] = $296 | $297;
        HEAP32[$289 >> 2] = $260;
        HEAP32[$nb$s2 + ($112$s2 + 6)] = $289;
        HEAP32[$nb$s2 + ($112$s2 + 3)] = $260;
        HEAP32[$nb$s2 + ($112$s2 + 2)] = $260;
        break;
      }
      if (($I7_0 | 0) == 31) {
        var $316 = 0;
      } else {
        var $316 = 25 - ($I7_0 >>> 1) | 0;
      }
      var $316;
      var $K12_0 = $rsize_3_lcssa << $316;
      var $T_0 = HEAP32[$289 >> 2];
      while (1) {
        var $T_0;
        var $K12_0;
        if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa | 0)) {
          break;
        }
        var $325 = ($K12_0 >>> 31 << 2) + $T_0 + 16 | 0;
        var $326 = HEAP32[$325 >> 2];
        if (($326 | 0) == 0) {
          label = 1213;
          break;
        } else {
          var $K12_0 = $K12_0 << 1;
          var $T_0 = $326;
        }
      }
      if (label == 1213) {
        if ($325 >>> 0 < HEAP32[122694] >>> 0) {
          _abort();
        } else {
          HEAP32[$325 >> 2] = $260;
          HEAP32[$nb$s2 + ($112$s2 + 6)] = $T_0;
          HEAP32[$nb$s2 + ($112$s2 + 3)] = $260;
          HEAP32[$nb$s2 + ($112$s2 + 2)] = $260;
          break;
        }
      }
      var $342 = $T_0 + 8 | 0;
      var $343 = HEAP32[$342 >> 2];
      var $345 = HEAP32[122694];
      if ($T_0 >>> 0 < $345 >>> 0) {
        _abort();
      }
      if ($343 >>> 0 < $345 >>> 0) {
        _abort();
      } else {
        HEAP32[$343 + 12 >> 2] = $260;
        HEAP32[$342 >> 2] = $260;
        HEAP32[$nb$s2 + ($112$s2 + 2)] = $343;
        HEAP32[$nb$s2 + ($112$s2 + 3)] = $T_0;
        HEAP32[$nb$s2 + ($112$s2 + 6)] = 0;
        break;
      }
    }
  } while (0);
  var $_0 = $v_3_lcssa + 8 | 0;
  var $_0;
  return $_0;
}
_tmalloc_large["X"] = 1;
function _sys_trim($pad) {
  var $22$s2;
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  if ($pad >>> 0 >= 4294967232) {
    var $released_2 = 0;
    var $released_2;
    var $62 = $released_2 & 1;
    return $62;
  }
  var $7 = HEAP32[122696];
  if (($7 | 0) == 0) {
    var $released_2 = 0;
    var $released_2;
    var $62 = $released_2 & 1;
    return $62;
  }
  var $11 = HEAP32[122693];
  do {
    if ($11 >>> 0 > ($pad + 40 | 0) >>> 0) {
      var $14 = HEAP32[111699];
      var $20 = (Math.floor(((-40 - $pad - 1 + $11 + $14 | 0) >>> 0) / ($14 >>> 0)) - 1) * $14 & -1;
      var $22 = _segment_holding($7), $22$s2 = $22 >> 2;
      if ((HEAP32[$22$s2 + 3] & 8 | 0) != 0) {
        break;
      }
      var $28 = _sbrk(0);
      if (($28 | 0) != (HEAP32[$22$s2] + HEAP32[$22$s2 + 1] | 0)) {
        break;
      }
      var $39 = _sbrk(-($20 >>> 0 > 2147483646 ? -2147483648 - $14 | 0 : $20) | 0);
      var $40 = _sbrk(0);
      if (!(($39 | 0) != -1 & $40 >>> 0 < $28 >>> 0)) {
        break;
      }
      var $46 = $28 - $40 | 0;
      if (($28 | 0) == ($40 | 0)) {
        break;
      }
      var $49 = $22 + 4 | 0;
      HEAP32[$49 >> 2] = HEAP32[$49 >> 2] - $46 | 0;
      HEAP32[122798] = HEAP32[122798] - $46 | 0;
      _init_top(HEAP32[122696], HEAP32[122693] - $46 | 0);
      var $released_2 = ($28 | 0) != ($40 | 0);
      var $released_2;
      var $62 = $released_2 & 1;
      return $62;
    }
  } while (0);
  if (HEAP32[122693] >>> 0 <= HEAP32[122697] >>> 0) {
    var $released_2 = 0;
    var $released_2;
    var $62 = $released_2 & 1;
    return $62;
  }
  HEAP32[122697] = -1;
  var $released_2 = 0;
  var $released_2;
  var $62 = $released_2 & 1;
  return $62;
}
_sys_trim["X"] = 1;
function _free($mem) {
  var $R7_1$s2;
  var $179$s2;
  var $R_1$s2;
  var $p_0$s2;
  var $167$s2;
  var $_sum2$s2;
  var $14$s2;
  var $mem$s2 = $mem >> 2;
  var label = 0;
  if (($mem | 0) == 0) {
    return;
  }
  var $3 = $mem - 8 | 0;
  var $4 = $3;
  var $5 = HEAP32[122694];
  if ($3 >>> 0 < $5 >>> 0) {
    _abort();
  }
  var $10 = HEAP32[$mem - 4 >> 2];
  var $11 = $10 & 3;
  if (($11 | 0) == 1) {
    _abort();
  }
  var $14 = $10 & -8, $14$s2 = $14 >> 2;
  var $15 = $mem + ($14 - 8) | 0;
  var $16 = $15;
  L1600 : do {
    if (($10 & 1 | 0) == 0) {
      var $21 = HEAP32[$3 >> 2];
      if (($11 | 0) == 0) {
        return;
      }
      var $_sum2 = -8 - $21 | 0, $_sum2$s2 = $_sum2 >> 2;
      var $24 = $mem + $_sum2 | 0;
      var $25 = $24;
      var $26 = $21 + $14 | 0;
      if ($24 >>> 0 < $5 >>> 0) {
        _abort();
      }
      if (($25 | 0) == (HEAP32[122695] | 0)) {
        var $167$s2 = ($mem + ($14 - 4) | 0) >> 2;
        if ((HEAP32[$167$s2] & 3 | 0) != 3) {
          var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
          var $psize_0 = $26;
          break;
        }
        HEAP32[122692] = $26;
        HEAP32[$167$s2] = HEAP32[$167$s2] & -2;
        HEAP32[$_sum2$s2 + ($mem$s2 + 1)] = $26 | 1;
        HEAP32[$15 >> 2] = $26;
        return;
      }
      var $32 = $21 >>> 3;
      if ($21 >>> 0 < 256) {
        var $37 = HEAP32[$_sum2$s2 + ($mem$s2 + 2)];
        var $40 = HEAP32[$_sum2$s2 + ($mem$s2 + 3)];
        if (($37 | 0) == ($40 | 0)) {
          HEAP32[122690] = HEAP32[122690] & (1 << $32 ^ -1);
          var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
          var $psize_0 = $26;
          break;
        }
        var $51 = (($21 >>> 2 & 1073741822) << 2) + 490800 | 0;
        if (($37 | 0) != ($51 | 0) & $37 >>> 0 < $5 >>> 0) {
          _abort();
        }
        if (($40 | 0) == ($51 | 0) | $40 >>> 0 >= $5 >>> 0) {
          HEAP32[$37 + 12 >> 2] = $40;
          HEAP32[$40 + 8 >> 2] = $37;
          var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
          var $psize_0 = $26;
          break;
        } else {
          _abort();
        }
      }
      var $62 = $24;
      var $65 = HEAP32[$_sum2$s2 + ($mem$s2 + 6)];
      var $68 = HEAP32[$_sum2$s2 + ($mem$s2 + 3)];
      L1625 : do {
        if (($68 | 0) == ($62 | 0)) {
          var $82 = $_sum2 + ($mem + 20) | 0;
          var $83 = HEAP32[$82 >> 2];
          do {
            if (($83 | 0) == 0) {
              var $87 = $_sum2 + ($mem + 16) | 0;
              var $88 = HEAP32[$87 >> 2];
              if (($88 | 0) == 0) {
                var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
                break L1625;
              } else {
                var $RP_0 = $87;
                var $R_0 = $88;
                break;
              }
            } else {
              var $RP_0 = $82;
              var $R_0 = $83;
            }
          } while (0);
          while (1) {
            var $R_0;
            var $RP_0;
            var $90 = $R_0 + 20 | 0;
            if ((HEAP32[$90 >> 2] | 0) == 0) {
              var $94 = $R_0 + 16 | 0;
              if ((HEAP32[$94 >> 2] | 0) == 0) {
                break;
              } else {
                var $CP_0 = $94;
              }
            } else {
              var $CP_0 = $90;
            }
            var $CP_0;
            var $RP_0 = $CP_0;
            var $R_0 = HEAP32[$CP_0 >> 2];
          }
          if ($RP_0 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          } else {
            HEAP32[$RP_0 >> 2] = 0;
            var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
            break;
          }
        } else {
          var $73 = HEAP32[$_sum2$s2 + ($mem$s2 + 2)];
          if ($73 >>> 0 < $5 >>> 0) {
            _abort();
          } else {
            HEAP32[$73 + 12 >> 2] = $68;
            HEAP32[$68 + 8 >> 2] = $73;
            var $R_1 = $68, $R_1$s2 = $R_1 >> 2;
            break;
          }
        }
      } while (0);
      var $R_1;
      if (($65 | 0) == 0) {
        var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
        var $psize_0 = $26;
        break;
      }
      var $108 = $_sum2 + ($mem + 28) | 0;
      var $110 = (HEAP32[$108 >> 2] << 2) + 491064 | 0;
      do {
        if (($62 | 0) == (HEAP32[$110 >> 2] | 0)) {
          HEAP32[$110 >> 2] = $R_1;
          if (($R_1 | 0) != 0) {
            break;
          }
          HEAP32[122691] = HEAP32[122691] & (1 << HEAP32[$108 >> 2] ^ -1);
          var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
          var $psize_0 = $26;
          break L1600;
        } else {
          if ($65 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          }
          var $124 = $65 + 16 | 0;
          if ((HEAP32[$124 >> 2] | 0) == ($62 | 0)) {
            HEAP32[$124 >> 2] = $R_1;
          } else {
            HEAP32[$65 + 20 >> 2] = $R_1;
          }
          if (($R_1 | 0) == 0) {
            var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
            var $psize_0 = $26;
            break L1600;
          }
        }
      } while (0);
      if ($R_1 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      }
      HEAP32[$R_1$s2 + 6] = $65;
      var $141 = HEAP32[$_sum2$s2 + ($mem$s2 + 4)];
      do {
        if (($141 | 0) != 0) {
          if ($141 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          } else {
            HEAP32[$R_1$s2 + 4] = $141;
            HEAP32[$141 + 24 >> 2] = $R_1;
            break;
          }
        }
      } while (0);
      var $154 = HEAP32[$_sum2$s2 + ($mem$s2 + 5)];
      if (($154 | 0) == 0) {
        var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
        var $psize_0 = $26;
        break;
      }
      if ($154 >>> 0 < HEAP32[122694] >>> 0) {
        _abort();
      } else {
        HEAP32[$R_1$s2 + 5] = $154;
        HEAP32[$154 + 24 >> 2] = $R_1;
        var $p_0 = $25, $p_0$s2 = $p_0 >> 2;
        var $psize_0 = $26;
        break;
      }
    } else {
      var $p_0 = $4, $p_0$s2 = $p_0 >> 2;
      var $psize_0 = $14;
    }
  } while (0);
  var $psize_0;
  var $p_0;
  var $179 = $p_0, $179$s2 = $179 >> 2;
  if ($179 >>> 0 >= $15 >>> 0) {
    _abort();
  }
  var $183 = $mem + ($14 - 4) | 0;
  var $184 = HEAP32[$183 >> 2];
  if (($184 & 1 | 0) == 0) {
    _abort();
  }
  do {
    if (($184 & 2 | 0) == 0) {
      if (($16 | 0) == (HEAP32[122696] | 0)) {
        var $195 = HEAP32[122693] + $psize_0 | 0;
        HEAP32[122693] = $195;
        HEAP32[122696] = $p_0;
        HEAP32[$p_0$s2 + 1] = $195 | 1;
        if (($p_0 | 0) == (HEAP32[122695] | 0)) {
          HEAP32[122695] = 0;
          HEAP32[122692] = 0;
        }
        if ($195 >>> 0 <= HEAP32[122697] >>> 0) {
          return;
        }
        _sys_trim(0);
        return;
      }
      if (($16 | 0) == (HEAP32[122695] | 0)) {
        var $211 = HEAP32[122692] + $psize_0 | 0;
        HEAP32[122692] = $211;
        HEAP32[122695] = $p_0;
        HEAP32[$p_0$s2 + 1] = $211 | 1;
        HEAP32[($211 >> 2) + $179$s2] = $211;
        return;
      }
      var $218 = ($184 & -8) + $psize_0 | 0;
      var $219 = $184 >>> 3;
      L1692 : do {
        if ($184 >>> 0 < 256) {
          var $224 = HEAP32[$mem$s2 + $14$s2];
          var $227 = HEAP32[(($14 | 4) >> 2) + $mem$s2];
          if (($224 | 0) == ($227 | 0)) {
            HEAP32[122690] = HEAP32[122690] & (1 << $219 ^ -1);
            break;
          }
          var $238 = (($184 >>> 2 & 1073741822) << 2) + 490800 | 0;
          do {
            if (($224 | 0) != ($238 | 0)) {
              if ($224 >>> 0 >= HEAP32[122694] >>> 0) {
                break;
              }
              _abort();
            }
          } while (0);
          do {
            if (($227 | 0) != ($238 | 0)) {
              if ($227 >>> 0 >= HEAP32[122694] >>> 0) {
                break;
              }
              _abort();
            }
          } while (0);
          HEAP32[$224 + 12 >> 2] = $227;
          HEAP32[$227 + 8 >> 2] = $224;
        } else {
          var $253 = $15;
          var $256 = HEAP32[$14$s2 + ($mem$s2 + 4)];
          var $259 = HEAP32[(($14 | 4) >> 2) + $mem$s2];
          L1706 : do {
            if (($259 | 0) == ($253 | 0)) {
              var $274 = $14 + ($mem + 12) | 0;
              var $275 = HEAP32[$274 >> 2];
              do {
                if (($275 | 0) == 0) {
                  var $279 = $14 + ($mem + 8) | 0;
                  var $280 = HEAP32[$279 >> 2];
                  if (($280 | 0) == 0) {
                    var $R7_1 = 0, $R7_1$s2 = $R7_1 >> 2;
                    break L1706;
                  } else {
                    var $RP9_0 = $279;
                    var $R7_0 = $280;
                    break;
                  }
                } else {
                  var $RP9_0 = $274;
                  var $R7_0 = $275;
                }
              } while (0);
              while (1) {
                var $R7_0;
                var $RP9_0;
                var $282 = $R7_0 + 20 | 0;
                if ((HEAP32[$282 >> 2] | 0) == 0) {
                  var $286 = $R7_0 + 16 | 0;
                  if ((HEAP32[$286 >> 2] | 0) == 0) {
                    break;
                  } else {
                    var $CP10_0 = $286;
                  }
                } else {
                  var $CP10_0 = $282;
                }
                var $CP10_0;
                var $RP9_0 = $CP10_0;
                var $R7_0 = HEAP32[$CP10_0 >> 2];
              }
              if ($RP9_0 >>> 0 < HEAP32[122694] >>> 0) {
                _abort();
              } else {
                HEAP32[$RP9_0 >> 2] = 0;
                var $R7_1 = $R7_0, $R7_1$s2 = $R7_1 >> 2;
                break;
              }
            } else {
              var $264 = HEAP32[$mem$s2 + $14$s2];
              if ($264 >>> 0 < HEAP32[122694] >>> 0) {
                _abort();
              } else {
                HEAP32[$264 + 12 >> 2] = $259;
                HEAP32[$259 + 8 >> 2] = $264;
                var $R7_1 = $259, $R7_1$s2 = $R7_1 >> 2;
                break;
              }
            }
          } while (0);
          var $R7_1;
          if (($256 | 0) == 0) {
            break;
          }
          var $300 = $14 + ($mem + 20) | 0;
          var $302 = (HEAP32[$300 >> 2] << 2) + 491064 | 0;
          do {
            if (($253 | 0) == (HEAP32[$302 >> 2] | 0)) {
              HEAP32[$302 >> 2] = $R7_1;
              if (($R7_1 | 0) != 0) {
                break;
              }
              HEAP32[122691] = HEAP32[122691] & (1 << HEAP32[$300 >> 2] ^ -1);
              break L1692;
            } else {
              if ($256 >>> 0 < HEAP32[122694] >>> 0) {
                _abort();
              }
              var $316 = $256 + 16 | 0;
              if ((HEAP32[$316 >> 2] | 0) == ($253 | 0)) {
                HEAP32[$316 >> 2] = $R7_1;
              } else {
                HEAP32[$256 + 20 >> 2] = $R7_1;
              }
              if (($R7_1 | 0) == 0) {
                break L1692;
              }
            }
          } while (0);
          if ($R7_1 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          }
          HEAP32[$R7_1$s2 + 6] = $256;
          var $333 = HEAP32[$14$s2 + ($mem$s2 + 2)];
          do {
            if (($333 | 0) != 0) {
              if ($333 >>> 0 < HEAP32[122694] >>> 0) {
                _abort();
              } else {
                HEAP32[$R7_1$s2 + 4] = $333;
                HEAP32[$333 + 24 >> 2] = $R7_1;
                break;
              }
            }
          } while (0);
          var $346 = HEAP32[$14$s2 + ($mem$s2 + 3)];
          if (($346 | 0) == 0) {
            break;
          }
          if ($346 >>> 0 < HEAP32[122694] >>> 0) {
            _abort();
          } else {
            HEAP32[$R7_1$s2 + 5] = $346;
            HEAP32[$346 + 24 >> 2] = $R7_1;
            break;
          }
        }
      } while (0);
      HEAP32[$p_0$s2 + 1] = $218 | 1;
      HEAP32[($218 >> 2) + $179$s2] = $218;
      if (($p_0 | 0) != (HEAP32[122695] | 0)) {
        var $psize_1 = $218;
        break;
      }
      HEAP32[122692] = $218;
      return;
    } else {
      HEAP32[$183 >> 2] = $184 & -2;
      HEAP32[$p_0$s2 + 1] = $psize_0 | 1;
      HEAP32[($psize_0 >> 2) + $179$s2] = $psize_0;
      var $psize_1 = $psize_0;
    }
  } while (0);
  var $psize_1;
  if ($psize_1 >>> 0 < 256) {
    var $376 = $psize_1 >>> 2 & 1073741822;
    var $378 = ($376 << 2) + 490800 | 0;
    var $379 = HEAP32[122690];
    var $380 = 1 << ($psize_1 >>> 3);
    do {
      if (($379 & $380 | 0) == 0) {
        HEAP32[122690] = $379 | $380;
        var $F16_0 = $378;
      } else {
        var $387 = HEAP32[($376 + 2 << 2) + 490800 >> 2];
        if ($387 >>> 0 >= HEAP32[122694] >>> 0) {
          var $F16_0 = $387;
          break;
        }
        _abort();
      }
    } while (0);
    var $F16_0;
    HEAP32[($376 + 2 << 2) + 490800 >> 2] = $p_0;
    HEAP32[$F16_0 + 12 >> 2] = $p_0;
    HEAP32[$p_0$s2 + 2] = $F16_0;
    HEAP32[$p_0$s2 + 3] = $378;
    return;
  }
  var $398 = $p_0;
  var $399 = $psize_1 >>> 8;
  do {
    if (($399 | 0) == 0) {
      var $I18_0 = 0;
    } else {
      if ($psize_1 >>> 0 > 16777215) {
        var $I18_0 = 31;
        break;
      }
      var $406 = ($399 + 1048320 | 0) >>> 16 & 8;
      var $407 = $399 << $406;
      var $410 = ($407 + 520192 | 0) >>> 16 & 4;
      var $411 = $407 << $410;
      var $414 = ($411 + 245760 | 0) >>> 16 & 2;
      var $420 = 14 - ($410 | $406 | $414) + ($411 << $414 >>> 15) | 0;
      var $I18_0 = $psize_1 >>> (($420 + 7 | 0) >>> 0) & 1 | $420 << 1;
    }
  } while (0);
  var $I18_0;
  var $427 = ($I18_0 << 2) + 491064 | 0;
  HEAP32[$p_0$s2 + 7] = $I18_0;
  HEAP32[$p_0$s2 + 5] = 0;
  HEAP32[$p_0$s2 + 4] = 0;
  var $431 = HEAP32[122691];
  var $432 = 1 << $I18_0;
  do {
    if (($431 & $432 | 0) == 0) {
      HEAP32[122691] = $431 | $432;
      HEAP32[$427 >> 2] = $398;
      HEAP32[$p_0$s2 + 6] = $427;
      HEAP32[$p_0$s2 + 3] = $p_0;
      HEAP32[$p_0$s2 + 2] = $p_0;
    } else {
      if (($I18_0 | 0) == 31) {
        var $447 = 0;
      } else {
        var $447 = 25 - ($I18_0 >>> 1) | 0;
      }
      var $447;
      var $K19_0 = $psize_1 << $447;
      var $T_0 = HEAP32[$427 >> 2];
      while (1) {
        var $T_0;
        var $K19_0;
        if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
          break;
        }
        var $456 = ($K19_0 >>> 31 << 2) + $T_0 + 16 | 0;
        var $457 = HEAP32[$456 >> 2];
        if (($457 | 0) == 0) {
          label = 1366;
          break;
        } else {
          var $K19_0 = $K19_0 << 1;
          var $T_0 = $457;
        }
      }
      if (label == 1366) {
        if ($456 >>> 0 < HEAP32[122694] >>> 0) {
          _abort();
        } else {
          HEAP32[$456 >> 2] = $398;
          HEAP32[$p_0$s2 + 6] = $T_0;
          HEAP32[$p_0$s2 + 3] = $p_0;
          HEAP32[$p_0$s2 + 2] = $p_0;
          break;
        }
      }
      var $470 = $T_0 + 8 | 0;
      var $471 = HEAP32[$470 >> 2];
      var $473 = HEAP32[122694];
      if ($T_0 >>> 0 < $473 >>> 0) {
        _abort();
      }
      if ($471 >>> 0 < $473 >>> 0) {
        _abort();
      } else {
        HEAP32[$471 + 12 >> 2] = $398;
        HEAP32[$470 >> 2] = $398;
        HEAP32[$p_0$s2 + 2] = $471;
        HEAP32[$p_0$s2 + 3] = $T_0;
        HEAP32[$p_0$s2 + 6] = 0;
        break;
      }
    }
  } while (0);
  var $485 = HEAP32[122698] - 1 | 0;
  HEAP32[122698] = $485;
  if (($485 | 0) != 0) {
    return;
  }
  _release_unused_segments();
  return;
}
Module["_free"] = _free;
_free["X"] = 1;
function _malloc_footprint() {
  return HEAP32[122798];
}
function _malloc_max_footprint() {
  return HEAP32[122799];
}
function _release_unused_segments() {
  var $sp_0_in = 491212;
  while (1) {
    var $sp_0_in;
    var $sp_0 = HEAP32[$sp_0_in >> 2];
    if (($sp_0 | 0) == 0) {
      break;
    } else {
      var $sp_0_in = $sp_0 + 8 | 0;
    }
  }
  HEAP32[122698] = -1;
  return;
}
function _calloc($n_elements, $elem_size) {
  do {
    if (($n_elements | 0) == 0) {
      var $req_0 = 0;
    } else {
      var $3 = $elem_size * $n_elements & -1;
      if (($elem_size | $n_elements) >>> 0 <= 65535) {
        var $req_0 = $3;
        break;
      }
      var $req_0 = (Math.floor(($3 >>> 0) / ($n_elements >>> 0)) | 0) == ($elem_size | 0) ? $3 : -1;
    }
  } while (0);
  var $req_0;
  var $10 = _malloc($req_0);
  if (($10 | 0) == 0) {
    return $10;
  }
  if ((HEAP32[$10 - 4 >> 2] & 3 | 0) == 0) {
    return $10;
  }
  _memset($10, 0, $req_0);
  return $10;
}
Module["_calloc"] = _calloc;
function _realloc($oldmem, $bytes) {
  if (($oldmem | 0) == 0) {
    var $_0 = _malloc($bytes);
    var $_0;
    return $_0;
  } else {
    var $_0 = _internal_realloc($oldmem, $bytes);
    var $_0;
    return $_0;
  }
}
Module["_realloc"] = _realloc;
function _memalign($alignment, $bytes) {
  return _internal_memalign($alignment, $bytes);
}
function _internal_memalign($alignment, $bytes) {
  var $49$s2;
  if ($alignment >>> 0 < 9) {
    var $_0 = _malloc($bytes);
    var $_0;
    return $_0;
  }
  var $_alignment = $alignment >>> 0 < 16 ? 16 : $alignment;
  L1824 : do {
    if (($_alignment - 1 & $_alignment | 0) == 0) {
      var $_1 = $_alignment;
    } else {
      var $a_0 = 16;
      while (1) {
        var $a_0;
        if ($a_0 >>> 0 < $_alignment >>> 0) {
          var $a_0 = $a_0 << 1;
        } else {
          var $_1 = $a_0;
          break L1824;
        }
      }
    }
  } while (0);
  var $_1;
  if ((-64 - $_1 | 0) >>> 0 <= $bytes >>> 0) {
    HEAP32[___errno_location() >> 2] = 12;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  if ($bytes >>> 0 < 11) {
    var $21 = 16;
  } else {
    var $21 = $bytes + 11 & -8;
  }
  var $21;
  var $24 = _malloc($21 + ($_1 + 12) | 0);
  if (($24 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $27 = $24 - 8 | 0;
  do {
    if ((($24 >>> 0) % ($_1 >>> 0) | 0) == 0) {
      var $p_0_in = $27;
      var $leader_1 = 0;
    } else {
      var $36 = $24 + ($_1 - 1) & -$_1;
      var $37 = $36 - 8 | 0;
      var $39 = $27;
      if (($37 - $39 | 0) >>> 0 > 15) {
        var $45 = $37;
      } else {
        var $45 = $36 + ($_1 - 8) | 0;
      }
      var $45;
      var $47 = $45 - $39 | 0;
      var $49$s2 = ($24 - 4 | 0) >> 2;
      var $50 = HEAP32[$49$s2];
      var $52 = ($50 & -8) - $47 | 0;
      if (($50 & 3 | 0) == 0) {
        HEAP32[$45 >> 2] = HEAP32[$27 >> 2] + $47 | 0;
        HEAP32[$45 + 4 >> 2] = $52;
        var $p_0_in = $45;
        var $leader_1 = 0;
        break;
      } else {
        var $64 = $45 + 4 | 0;
        HEAP32[$64 >> 2] = $52 | HEAP32[$64 >> 2] & 1 | 2;
        var $70 = $52 + ($45 + 4) | 0;
        HEAP32[$70 >> 2] = HEAP32[$70 >> 2] | 1;
        HEAP32[$49$s2] = $47 | HEAP32[$49$s2] & 1 | 2;
        var $78 = $24 + ($47 - 4) | 0;
        HEAP32[$78 >> 2] = HEAP32[$78 >> 2] | 1;
        var $p_0_in = $45;
        var $leader_1 = $24;
        break;
      }
    }
  } while (0);
  var $leader_1;
  var $p_0_in;
  var $83 = $p_0_in + 4 | 0;
  var $84 = HEAP32[$83 >> 2];
  do {
    if (($84 & 3 | 0) == 0) {
      var $trailer_0 = 0;
    } else {
      var $88 = $84 & -8;
      if ($88 >>> 0 <= ($21 + 16 | 0) >>> 0) {
        var $trailer_0 = 0;
        break;
      }
      HEAP32[$83 >> 2] = $21 | $84 & 1 | 2;
      HEAP32[$p_0_in + ($21 | 4) >> 2] = $88 - $21 | 3;
      var $100 = $p_0_in + ($88 | 4) | 0;
      HEAP32[$100 >> 2] = HEAP32[$100 >> 2] | 1;
      var $trailer_0 = $21 + ($p_0_in + 8) | 0;
    }
  } while (0);
  var $trailer_0;
  if (($leader_1 | 0) != 0) {
    _free($leader_1);
  }
  if (($trailer_0 | 0) != 0) {
    _free($trailer_0);
  }
  var $_0 = $p_0_in + 8 | 0;
  var $_0;
  return $_0;
}
_internal_memalign["X"] = 1;
function _independent_calloc($n_elements, $elem_size, $chunks) {
  var __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 4 | 0;
  var $sz = __stackBase__;
  HEAP32[$sz >> 2] = $elem_size;
  var $1 = _ialloc($n_elements, $sz, 3, $chunks);
  STACKTOP = __stackBase__;
  return $1;
}
function _ialloc($n_elements, $sizes, $opts, $chunks) {
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  var $6 = ($n_elements | 0) == 0;
  do {
    if (($chunks | 0) == 0) {
      if ($6) {
        var $_0 = _malloc(0);
        var $_0;
        return $_0;
      } else {
        var $13 = $n_elements << 2;
        if ($13 >>> 0 < 11) {
          var $marray_0 = 0;
          var $array_size_0 = 16;
          break;
        }
        var $marray_0 = 0;
        var $array_size_0 = $13 + 11 & -8;
        break;
      }
    } else {
      if ($6) {
        var $_0 = $chunks;
      } else {
        var $marray_0 = $chunks;
        var $array_size_0 = 0;
        break;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $array_size_0;
  var $marray_0;
  L1873 : do {
    if (($opts & 1 | 0) == 0) {
      if (($n_elements | 0) == 0) {
        var $element_size_0 = 0;
        var $contents_size_1 = 0;
        break;
      } else {
        var $contents_size_07 = 0;
        var $i_08 = 0;
      }
      while (1) {
        var $i_08;
        var $contents_size_07;
        var $32 = HEAP32[$sizes + ($i_08 << 2) >> 2];
        if ($32 >>> 0 < 11) {
          var $38 = 16;
        } else {
          var $38 = $32 + 11 & -8;
        }
        var $38;
        var $39 = $38 + $contents_size_07 | 0;
        var $40 = $i_08 + 1 | 0;
        if (($40 | 0) == ($n_elements | 0)) {
          var $element_size_0 = 0;
          var $contents_size_1 = $39;
          break L1873;
        } else {
          var $contents_size_07 = $39;
          var $i_08 = $40;
        }
      }
    } else {
      var $23 = HEAP32[$sizes >> 2];
      if ($23 >>> 0 < 11) {
        var $29 = 16;
      } else {
        var $29 = $23 + 11 & -8;
      }
      var $29;
      var $element_size_0 = $29;
      var $contents_size_1 = $29 * $n_elements & -1;
    }
  } while (0);
  var $contents_size_1;
  var $element_size_0;
  var $44 = _malloc($array_size_0 - 4 + $contents_size_1 | 0);
  if (($44 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $47 = $44 - 8 | 0;
  var $51 = HEAP32[$44 - 4 >> 2] & -8;
  if (($opts & 2 | 0) != 0) {
    _memset($44, 0, -4 - $array_size_0 + $51 | 0);
  }
  if (($marray_0 | 0) == 0) {
    HEAP32[$44 + ($contents_size_1 - 4) >> 2] = $51 - $contents_size_1 | 3;
    var $marray_1 = $44 + $contents_size_1 | 0;
    var $remainder_size_0 = $contents_size_1;
  } else {
    var $marray_1 = $marray_0;
    var $remainder_size_0 = $51;
  }
  var $remainder_size_0;
  var $marray_1;
  HEAP32[$marray_1 >> 2] = $44;
  var $67 = $n_elements - 1 | 0;
  L1894 : do {
    if (($67 | 0) == 0) {
      var $p_0_in_lcssa = $47;
      var $remainder_size_1_lcssa = $remainder_size_0;
    } else {
      var $69 = ($element_size_0 | 0) == 0;
      var $p_0_in3 = $47;
      var $remainder_size_14 = $remainder_size_0;
      var $i_15 = 0;
      while (1) {
        var $i_15;
        var $remainder_size_14;
        var $p_0_in3;
        do {
          if ($69) {
            var $73 = HEAP32[$sizes + ($i_15 << 2) >> 2];
            if ($73 >>> 0 < 11) {
              var $size_0 = 16;
              break;
            }
            var $size_0 = $73 + 11 & -8;
          } else {
            var $size_0 = $element_size_0;
          }
        } while (0);
        var $size_0;
        var $79 = $remainder_size_14 - $size_0 | 0;
        HEAP32[$p_0_in3 + 4 >> 2] = $size_0 | 3;
        var $83 = $p_0_in3 + $size_0 | 0;
        var $84 = $i_15 + 1 | 0;
        HEAP32[$marray_1 + ($84 << 2) >> 2] = $size_0 + ($p_0_in3 + 8) | 0;
        if (($84 | 0) == ($67 | 0)) {
          var $p_0_in_lcssa = $83;
          var $remainder_size_1_lcssa = $79;
          break L1894;
        } else {
          var $p_0_in3 = $83;
          var $remainder_size_14 = $79;
          var $i_15 = $84;
        }
      }
    }
  } while (0);
  var $remainder_size_1_lcssa;
  var $p_0_in_lcssa;
  HEAP32[$p_0_in_lcssa + 4 >> 2] = $remainder_size_1_lcssa | 3;
  var $_0 = $marray_1;
  var $_0;
  return $_0;
}
_ialloc["X"] = 1;
function _independent_comalloc($n_elements, $sizes, $chunks) {
  return _ialloc($n_elements, $sizes, 0, $chunks);
}
function _valloc($bytes) {
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  return _memalign(HEAP32[111698], $bytes);
}
function _pvalloc($bytes) {
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  var $5 = HEAP32[111698];
  return _memalign($5, $bytes - 1 + $5 & -$5);
}
function _malloc_trim($pad) {
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  return _sys_trim($pad);
}
function _mallinfo($agg_result) {
  _internal_mallinfo($agg_result);
  return;
}
function _internal_mallinfo($agg_result) {
  var $agg_result$s2 = $agg_result >> 2;
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  if ((HEAP32[122696] | 0) == 0) {
    var $nm_0_0 = 0;
    var $nm_1_0 = 0;
    var $nm_9_0 = 0;
    var $nm_8_0 = 0;
    var $nm_4_0 = 0;
    var $nm_5_0 = 0;
    var $nm_7_0 = 0;
  } else {
    var $9 = HEAP32[122693] + 40 | 0;
    var $10 = HEAP32[122696];
    var $s_02 = 491204;
    var $sum_03 = $9;
    var $mfree_04 = $9;
    var $nfree_05 = 1;
    while (1) {
      var $nfree_05;
      var $mfree_04;
      var $sum_03;
      var $s_02;
      var $12 = $s_02 | 0;
      var $13 = HEAP32[$12 >> 2];
      var $15 = $13 + 8 | 0;
      if (($15 & 7 | 0) == 0) {
        var $22 = 0;
      } else {
        var $22 = -$15 & 7;
      }
      var $22;
      var $24 = HEAP32[$12 >> 2];
      var $25 = $s_02 + 4 | 0;
      var $q_0_in = $13 + $22 | 0;
      var $nfree_1 = $nfree_05;
      var $mfree_1 = $mfree_04;
      var $sum_1 = $sum_03;
      while (1) {
        var $sum_1;
        var $mfree_1;
        var $nfree_1;
        var $q_0_in;
        if ($q_0_in >>> 0 < $24 >>> 0) {
          break;
        }
        if ($q_0_in >>> 0 >= ($24 + HEAP32[$25 >> 2] | 0) >>> 0 | ($q_0_in | 0) == ($10 | 0)) {
          break;
        }
        var $35 = $q_0_in + 4 | 0;
        var $36 = HEAP32[$35 >> 2];
        if (($36 | 0) == 7) {
          break;
        }
        var $39 = $36 & -8;
        if (($36 & 3 | 0) == 1) {
          var $nfree_2 = $nfree_1 + 1 | 0;
          var $mfree_2 = $39 + $mfree_1 | 0;
        } else {
          var $nfree_2 = $nfree_1;
          var $mfree_2 = $mfree_1;
        }
        var $mfree_2;
        var $nfree_2;
        var $q_0_in = $q_0_in + (HEAP32[$35 >> 2] & -8) | 0;
        var $nfree_1 = $nfree_2;
        var $mfree_1 = $mfree_2;
        var $sum_1 = $39 + $sum_1 | 0;
      }
      var $51 = HEAP32[$s_02 + 8 >> 2];
      if (($51 | 0) == 0) {
        break;
      } else {
        var $s_02 = $51;
        var $sum_03 = $sum_1;
        var $mfree_04 = $mfree_1;
        var $nfree_05 = $nfree_1;
      }
    }
    var $54 = HEAP32[122798];
    var $nm_0_0 = $sum_1;
    var $nm_1_0 = $nfree_1;
    var $nm_9_0 = HEAP32[122693];
    var $nm_8_0 = $mfree_1;
    var $nm_4_0 = $54 - $sum_1 | 0;
    var $nm_5_0 = HEAP32[122799];
    var $nm_7_0 = $54 - $mfree_1 | 0;
  }
  var $nm_7_0;
  var $nm_5_0;
  var $nm_4_0;
  var $nm_8_0;
  var $nm_9_0;
  var $nm_1_0;
  var $nm_0_0;
  HEAP32[$agg_result$s2] = $nm_0_0;
  HEAP32[$agg_result$s2 + 1] = $nm_1_0;
  HEAP32[$agg_result$s2 + 2] = 0;
  HEAP32[$agg_result$s2 + 3] = 0;
  HEAP32[$agg_result$s2 + 4] = $nm_4_0;
  HEAP32[$agg_result$s2 + 5] = $nm_5_0;
  HEAP32[$agg_result$s2 + 6] = 0;
  HEAP32[$agg_result$s2 + 7] = $nm_7_0;
  HEAP32[$agg_result$s2 + 8] = $nm_8_0;
  HEAP32[$agg_result$s2 + 9] = $nm_9_0;
  return;
}
_internal_mallinfo["X"] = 1;
function _malloc_stats() {
  _internal_malloc_stats();
  return;
}
function _internal_malloc_stats() {
  var __stackBase__ = STACKTOP;
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  L1945 : do {
    if ((HEAP32[122696] | 0) == 0) {
      var $maxfp_0 = 0;
      var $fp_0 = 0;
      var $used_3 = 0;
    } else {
      var $8 = HEAP32[122799];
      var $9 = HEAP32[122798];
      var $12 = HEAP32[122696];
      var $s_03 = 491204;
      var $used_04 = $9 - 40 - HEAP32[122693] | 0;
      while (1) {
        var $used_04;
        var $s_03;
        var $14 = $s_03 | 0;
        var $15 = HEAP32[$14 >> 2];
        var $17 = $15 + 8 | 0;
        if (($17 & 7 | 0) == 0) {
          var $24 = 0;
        } else {
          var $24 = -$17 & 7;
        }
        var $24;
        var $26 = HEAP32[$14 >> 2];
        var $27 = $s_03 + 4 | 0;
        var $q_0_in = $15 + $24 | 0;
        var $used_1 = $used_04;
        while (1) {
          var $used_1;
          var $q_0_in;
          if ($q_0_in >>> 0 < $26 >>> 0) {
            break;
          }
          if ($q_0_in >>> 0 >= ($26 + HEAP32[$27 >> 2] | 0) >>> 0 | ($q_0_in | 0) == ($12 | 0)) {
            break;
          }
          var $37 = $q_0_in + 4 | 0;
          var $38 = HEAP32[$37 >> 2];
          if (($38 | 0) == 7) {
            break;
          }
          if (($38 & 3 | 0) == 1) {
            var $used_2 = $used_1 - ($38 & -8) | 0;
          } else {
            var $used_2 = $used_1;
          }
          var $used_2;
          var $q_0_in = $q_0_in + (HEAP32[$37 >> 2] & -8) | 0;
          var $used_1 = $used_2;
        }
        var $51 = HEAP32[$s_03 + 8 >> 2];
        if (($51 | 0) == 0) {
          var $maxfp_0 = $8;
          var $fp_0 = $9;
          var $used_3 = $used_1;
          break L1945;
        } else {
          var $s_03 = $51;
          var $used_04 = $used_1;
        }
      }
    }
  } while (0);
  var $used_3;
  var $fp_0;
  var $maxfp_0;
  _fprintf(HEAP32[_stderr >> 2], 484148, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $maxfp_0, tempInt));
  _fprintf(HEAP32[_stderr >> 2], 488472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $fp_0, tempInt));
  _fprintf(HEAP32[_stderr >> 2], 480260, (tempInt = STACKTOP, STACKTOP = STACKTOP + 4 | 0, HEAP32[tempInt >> 2] = $used_3, tempInt));
  STACKTOP = __stackBase__;
  return;
}
_internal_malloc_stats["X"] = 1;
function _mallopt($param_number, $value) {
  return _change_mparam($param_number, $value);
}
function _change_mparam($param_number, $value) {
  if ((HEAP32[111697] | 0) == 0) {
    _init_mparams();
  }
  do {
    if (($param_number | 0) == -3) {
      HEAP32[111700] = $value;
      var $_0 = 1;
    } else if (($param_number | 0) == -1) {
      HEAP32[111701] = $value;
      var $_0 = 1;
    } else if (($param_number | 0) == -2) {
      if (HEAP32[111698] >>> 0 > $value >>> 0) {
        var $_0 = 0;
        break;
      }
      if (($value - 1 & $value | 0) != 0) {
        var $_0 = 0;
        break;
      }
      HEAP32[111699] = $value;
      var $_0 = 1;
    } else {
      var $_0 = 0;
    }
  } while (0);
  var $_0;
  return $_0;
}
function _internal_realloc($oldmem, $bytes) {
  var $21$s2;
  var $8$s2;
  var label = 0;
  if ($bytes >>> 0 > 4294967231) {
    HEAP32[___errno_location() >> 2] = 12;
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $5 = $oldmem - 8 | 0;
  var $6 = $5;
  var $8$s2 = ($oldmem - 4 | 0) >> 2;
  var $9 = HEAP32[$8$s2];
  var $10 = $9 & -8;
  var $_sum = $10 - 8 | 0;
  var $12 = $oldmem + $_sum | 0;
  if ($5 >>> 0 < HEAP32[122694] >>> 0) {
    _abort();
  }
  if (!(($9 & 3 | 0) != 1 & ($_sum | 0) > -8)) {
    _abort();
  }
  var $21$s2 = ($oldmem + ($10 - 4) | 0) >> 2;
  if ((HEAP32[$21$s2] & 1 | 0) == 0) {
    _abort();
  }
  if ($bytes >>> 0 < 11) {
    var $31 = 16;
  } else {
    var $31 = $bytes + 11 & -8;
  }
  var $31;
  var $32 = HEAP32[$8$s2];
  do {
    if (($32 & 3 | 0) == 0) {
      var $extra_0 = 0;
      var $newp_0 = _mmap_resize($6, $31);
      label = 1551;
      break;
    } else {
      if ($10 >>> 0 >= $31 >>> 0) {
        var $40 = $10 - $31 | 0;
        if ($40 >>> 0 <= 15) {
          var $extra_0 = 0;
          var $newp_0 = $6;
          label = 1551;
          break;
        }
        HEAP32[$8$s2] = $31 | $32 & 1 | 2;
        HEAP32[$oldmem + ($31 - 4) >> 2] = $40 | 3;
        HEAP32[$21$s2] = HEAP32[$21$s2] | 1;
        var $extra_0 = $oldmem + $31 | 0;
        var $newp_0 = $6;
        label = 1551;
        break;
      }
      if (($12 | 0) != (HEAP32[122696] | 0)) {
        break;
      }
      var $57 = HEAP32[122693] + $10 | 0;
      if ($57 >>> 0 <= $31 >>> 0) {
        break;
      }
      var $60 = $57 - $31 | 0;
      HEAP32[$8$s2] = $31 | $32 & 1 | 2;
      HEAP32[$oldmem + ($31 - 4) >> 2] = $60 | 1;
      HEAP32[122696] = $oldmem + ($31 - 8) | 0;
      HEAP32[122693] = $60;
      var $extra_0 = 0;
      var $newp_0 = $6;
      label = 1551;
      break;
    }
  } while (0);
  do {
    if (label == 1551) {
      var $newp_0;
      var $extra_0;
      if (($newp_0 | 0) == 0) {
        break;
      }
      if (($extra_0 | 0) != 0) {
        _free($extra_0);
      }
      var $_0 = $newp_0 + 8 | 0;
      var $_0;
      return $_0;
    }
  } while (0);
  var $77 = _malloc($bytes);
  if (($77 | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $84 = $10 - ((HEAP32[$8$s2] & 3 | 0) == 0 ? 8 : 4) | 0;
  _memcpy($77, $oldmem, $84 >>> 0 < $bytes >>> 0 ? $84 : $bytes);
  _free($oldmem);
  var $_0 = $77;
  var $_0;
  return $_0;
}
_internal_realloc["X"] = 1;
function _init_mparams() {
  if ((HEAP32[111697] | 0) != 0) {
    return;
  }
  var $4 = _sysconf(8);
  if (($4 - 1 & $4 | 0) != 0) {
    _abort();
  }
  HEAP32[111699] = $4;
  HEAP32[111698] = $4;
  HEAP32[111700] = -1;
  HEAP32[111701] = 2097152;
  HEAP32[111702] = 0;
  HEAP32[122800] = 0;
  HEAP32[111697] = _time(0) & -16 ^ 1431655768;
  return;
}
function _malloc_usable_size($mem) {
  if (($mem | 0) == 0) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $5 = HEAP32[$mem - 4 >> 2];
  var $6 = $5 & 3;
  if (($6 | 0) == 1) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  var $_0 = ($5 & -8) - (($6 | 0) == 0 ? 8 : 4) | 0;
  var $_0;
  return $_0;
}
function _mmap_resize($oldp, $nb) {
  var $3 = HEAP32[$oldp + 4 >> 2] & -8;
  if ($nb >>> 0 < 256) {
    var $_0 = 0;
    var $_0;
    return $_0;
  }
  do {
    if ($3 >>> 0 >= ($nb + 4 | 0) >>> 0) {
      if (($3 - $nb | 0) >>> 0 > HEAP32[111699] << 1 >>> 0) {
        break;
      } else {
        var $_0 = $oldp;
      }
      var $_0;
      return $_0;
    }
  } while (0);
  var $_0 = 0;
  var $_0;
  return $_0;
}
function _segment_holding($addr) {
  var $sp_0$s2;
  var label = 0;
  var $sp_0 = 491204, $sp_0$s2 = $sp_0 >> 2;
  while (1) {
    var $sp_0;
    var $3 = HEAP32[$sp_0$s2];
    if ($3 >>> 0 <= $addr >>> 0) {
      if (($3 + HEAP32[$sp_0$s2 + 1] | 0) >>> 0 > $addr >>> 0) {
        var $_0 = $sp_0;
        label = 1593;
        break;
      }
    }
    var $12 = HEAP32[$sp_0$s2 + 2];
    if (($12 | 0) == 0) {
      var $_0 = 0;
      label = 1592;
      break;
    } else {
      var $sp_0 = $12, $sp_0$s2 = $sp_0 >> 2;
    }
  }
  if (label == 1592) {
    var $_0;
    return $_0;
  } else if (label == 1593) {
    var $_0;
    return $_0;
  }
}
function _init_top($p, $psize) {
  var $1 = $p;
  var $3 = $p + 8 | 0;
  if (($3 & 7 | 0) == 0) {
    var $10 = 0;
  } else {
    var $10 = -$3 & 7;
  }
  var $10;
  var $13 = $psize - $10 | 0;
  HEAP32[122696] = $1 + $10 | 0;
  HEAP32[122693] = $13;
  HEAP32[$10 + ($1 + 4) >> 2] = $13 | 1;
  HEAP32[$psize + ($1 + 4) >> 2] = 40;
  HEAP32[122697] = HEAP32[111701];
  return;
}
function _init_bins() {
  var $i_02 = 0;
  while (1) {
    var $i_02;
    var $2 = $i_02 << 1;
    var $4 = ($2 << 2) + 490800 | 0;
    HEAP32[($2 + 3 << 2) + 490800 >> 2] = $4;
    HEAP32[($2 + 2 << 2) + 490800 >> 2] = $4;
    var $7 = $i_02 + 1 | 0;
    if (($7 | 0) == 32) {
      break;
    } else {
      var $i_02 = $7;
    }
  }
  return;
}
function _mmap_alloc() {
}
function _prepend_alloc($newbase, $oldbase, $nb) {
  var $R_1$s2;
  var $_sum$s2;
  var $19$s2;
  var $oldbase$s2 = $oldbase >> 2;
  var $newbase$s2 = $newbase >> 2;
  var label = 0;
  var $2 = $newbase + 8 | 0;
  if (($2 & 7 | 0) == 0) {
    var $9 = 0;
  } else {
    var $9 = -$2 & 7;
  }
  var $9;
  var $12 = $oldbase + 8 | 0;
  if (($12 & 7 | 0) == 0) {
    var $19 = 0, $19$s2 = $19 >> 2;
  } else {
    var $19 = -$12 & 7, $19$s2 = $19 >> 2;
  }
  var $19;
  var $20 = $oldbase + $19 | 0;
  var $21 = $20;
  var $_sum = $9 + $nb | 0, $_sum$s2 = $_sum >> 2;
  var $25 = $newbase + $_sum | 0;
  var $26 = $25;
  var $27 = $20 - ($newbase + $9) - $nb | 0;
  HEAP32[($9 + 4 >> 2) + $newbase$s2] = $nb | 3;
  if (($21 | 0) == (HEAP32[122696] | 0)) {
    var $35 = HEAP32[122693] + $27 | 0;
    HEAP32[122693] = $35;
    HEAP32[122696] = $26;
    HEAP32[$_sum$s2 + ($newbase$s2 + 1)] = $35 | 1;
    var $_sum1819 = $9 | 8;
    var $336 = $newbase + $_sum1819 | 0;
    return $336;
  }
  if (($21 | 0) == (HEAP32[122695] | 0)) {
    var $44 = HEAP32[122692] + $27 | 0;
    HEAP32[122692] = $44;
    HEAP32[122695] = $26;
    HEAP32[$_sum$s2 + ($newbase$s2 + 1)] = $44 | 1;
    HEAP32[($44 >> 2) + $newbase$s2 + $_sum$s2] = $44;
    var $_sum1819 = $9 | 8;
    var $336 = $newbase + $_sum1819 | 0;
    return $336;
  }
  var $53 = HEAP32[$19$s2 + ($oldbase$s2 + 1)];
  if (($53 & 3 | 0) == 1) {
    var $57 = $53 & -8;
    var $58 = $53 >>> 3;
    L2072 : do {
      if ($53 >>> 0 < 256) {
        var $63 = HEAP32[(($19 | 8) >> 2) + $oldbase$s2];
        var $66 = HEAP32[$19$s2 + ($oldbase$s2 + 3)];
        if (($63 | 0) == ($66 | 0)) {
          HEAP32[122690] = HEAP32[122690] & (1 << $58 ^ -1);
          break;
        }
        var $77 = (($53 >>> 2 & 1073741822) << 2) + 490800 | 0;
        do {
          if (($63 | 0) != ($77 | 0)) {
            if ($63 >>> 0 >= HEAP32[122694] >>> 0) {
              break;
            }
            _abort();
          }
        } while (0);
        do {
          if (($66 | 0) != ($77 | 0)) {
            if ($66 >>> 0 >= HEAP32[122694] >>> 0) {
              break;
            }
            _abort();
          }
        } while (0);
        HEAP32[$63 + 12 >> 2] = $66;
        HEAP32[$66 + 8 >> 2] = $63;
      } else {
        var $92 = $20;
        var $95 = HEAP32[(($19 | 24) >> 2) + $oldbase$s2];
        var $98 = HEAP32[$19$s2 + ($oldbase$s2 + 3)];
        L2074 : do {
          if (($98 | 0) == ($92 | 0)) {
            var $_sum67 = $19 | 16;
            var $113 = $_sum67 + ($oldbase + 4) | 0;
            var $114 = HEAP32[$113 >> 2];
            do {
              if (($114 | 0) == 0) {
                var $118 = $oldbase + $_sum67 | 0;
                var $119 = HEAP32[$118 >> 2];
                if (($119 | 0) == 0) {
                  var $R_1 = 0, $R_1$s2 = $R_1 >> 2;
                  break L2074;
                } else {
                  var $RP_0 = $118;
                  var $R_0 = $119;
                  break;
                }
              } else {
                var $RP_0 = $113;
                var $R_0 = $114;
              }
            } while (0);
            while (1) {
              var $R_0;
              var $RP_0;
              var $121 = $R_0 + 20 | 0;
              if ((HEAP32[$121 >> 2] | 0) == 0) {
                var $125 = $R_0 + 16 | 0;
                if ((HEAP32[$125 >> 2] | 0) == 0) {
                  break;
                } else {
                  var $CP_0 = $125;
                }
              } else {
                var $CP_0 = $121;
              }
              var $CP_0;
              var $RP_0 = $CP_0;
              var $R_0 = HEAP32[$CP_0 >> 2];
            }
            if ($RP_0 >>> 0 < HEAP32[122694] >>> 0) {
              _abort();
            } else {
              HEAP32[$RP_0 >> 2] = 0;
              var $R_1 = $R_0, $R_1$s2 = $R_1 >> 2;
              break;
            }
          } else {
            var $103 = HEAP32[(($19 | 8) >> 2) + $oldbase$s2];
            if ($103 >>> 0 < HEAP32[122694] >>> 0) {
              _abort();
            } else {
              HEAP32[$103 + 12 >> 2] = $98;
              HEAP32[$98 + 8 >> 2] = $103;
              var $R_1 = $98, $R_1$s2 = $R_1 >> 2;
              break;
            }
          }
        } while (0);
        var $R_1;
        if (($95 | 0) == 0) {
          break;
        }
        var $139 = $19 + ($oldbase + 28) | 0;
        var $141 = (HEAP32[$139 >> 2] << 2) + 491064 | 0;
        do {
          if (($92 | 0) == (HEAP32[$141 >> 2] | 0)) {
            HEAP32[$141 >> 2] = $R_1;
            if (($R_1 | 0) != 0) {
              break;
            }
            HEAP32[122691] = HEAP32[122691] & (1 << HEAP32[$139 >> 2] ^ -1);
            break L2072;
          } else {
            if ($95 >>> 0 < HEAP32[122694] >>> 0) {
              _abort();
            }
            var $155 = $95 + 16 | 0;
            if ((HEAP32[$155 >> 2] | 0) == ($92 | 0)) {
              HEAP32[$155 >> 2] = $R_1;
            } else {
              HEAP32[$95 + 20 >> 2] = $R_1;
            }
            if (($R_1 | 0) == 0) {
              break L2072;
            }
          }
        } while (0);
        if ($R_1 >>> 0 < HEAP32[122694] >>> 0) {
          _abort();
        }
        HEAP32[$R_1$s2 + 6] = $95;
        var $_sum3132 = $19 | 16;
        var $172 = HEAP32[($_sum3132 >> 2) + $oldbase$s2];
        do {
          if (($172 | 0) != 0) {
            if ($172 >>> 0 < HEAP32[122694] >>> 0) {
              _abort();
            } else {
              HEAP32[$R_1$s2 + 4] = $172;
              HEAP32[$172 + 24 >> 2] = $R_1;
              break;
            }
          }
        } while (0);
        var $185 = HEAP32[($_sum3132 + 4 >> 2) + $oldbase$s2];
        if (($185 | 0) == 0) {
          break;
        }
        if ($185 >>> 0 < HEAP32[122694] >>> 0) {
          _abort();
        } else {
          HEAP32[$R_1$s2 + 5] = $185;
          HEAP32[$185 + 24 >> 2] = $R_1;
          break;
        }
      }
    } while (0);
    var $oldfirst_0 = $oldbase + ($57 | $19) | 0;
    var $qsize_0 = $57 + $27 | 0;
  } else {
    var $oldfirst_0 = $21;
    var $qsize_0 = $27;
  }
  var $qsize_0;
  var $oldfirst_0;
  var $201 = $oldfirst_0 + 4 | 0;
  HEAP32[$201 >> 2] = HEAP32[$201 >> 2] & -2;
  HEAP32[$_sum$s2 + ($newbase$s2 + 1)] = $qsize_0 | 1;
  HEAP32[($qsize_0 >> 2) + $newbase$s2 + $_sum$s2] = $qsize_0;
  if ($qsize_0 >>> 0 < 256) {
    var $213 = $qsize_0 >>> 2 & 1073741822;
    var $215 = ($213 << 2) + 490800 | 0;
    var $216 = HEAP32[122690];
    var $217 = 1 << ($qsize_0 >>> 3);
    do {
      if (($216 & $217 | 0) == 0) {
        HEAP32[122690] = $216 | $217;
        var $F4_0 = $215;
      } else {
        var $224 = HEAP32[($213 + 2 << 2) + 490800 >> 2];
        if ($224 >>> 0 >= HEAP32[122694] >>> 0) {
          var $F4_0 = $224;
          break;
        }
        _abort();
      }
    } while (0);
    var $F4_0;
    HEAP32[($213 + 2 << 2) + 490800 >> 2] = $26;
    HEAP32[$F4_0 + 12 >> 2] = $26;
    HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $F4_0;
    HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $215;
    var $_sum1819 = $9 | 8;
    var $336 = $newbase + $_sum1819 | 0;
    return $336;
  }
  var $237 = $25;
  var $238 = $qsize_0 >>> 8;
  do {
    if (($238 | 0) == 0) {
      var $I7_0 = 0;
    } else {
      if ($qsize_0 >>> 0 > 16777215) {
        var $I7_0 = 31;
        break;
      }
      var $245 = ($238 + 1048320 | 0) >>> 16 & 8;
      var $246 = $238 << $245;
      var $249 = ($246 + 520192 | 0) >>> 16 & 4;
      var $250 = $246 << $249;
      var $253 = ($250 + 245760 | 0) >>> 16 & 2;
      var $259 = 14 - ($249 | $245 | $253) + ($250 << $253 >>> 15) | 0;
      var $I7_0 = $qsize_0 >>> (($259 + 7 | 0) >>> 0) & 1 | $259 << 1;
    }
  } while (0);
  var $I7_0;
  var $266 = ($I7_0 << 2) + 491064 | 0;
  HEAP32[$_sum$s2 + ($newbase$s2 + 7)] = $I7_0;
  HEAP32[$_sum$s2 + ($newbase$s2 + 5)] = 0;
  HEAP32[$_sum$s2 + ($newbase$s2 + 4)] = 0;
  var $273 = HEAP32[122691];
  var $274 = 1 << $I7_0;
  if (($273 & $274 | 0) == 0) {
    HEAP32[122691] = $273 | $274;
    HEAP32[$266 >> 2] = $237;
    HEAP32[$_sum$s2 + ($newbase$s2 + 6)] = $266;
    HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $237;
    HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $237;
    var $_sum1819 = $9 | 8;
    var $336 = $newbase + $_sum1819 | 0;
    return $336;
  }
  if (($I7_0 | 0) == 31) {
    var $293 = 0;
  } else {
    var $293 = 25 - ($I7_0 >>> 1) | 0;
  }
  var $293;
  var $K8_0 = $qsize_0 << $293;
  var $T_0 = HEAP32[$266 >> 2];
  while (1) {
    var $T_0;
    var $K8_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($qsize_0 | 0)) {
      break;
    }
    var $302 = ($K8_0 >>> 31 << 2) + $T_0 + 16 | 0;
    var $303 = HEAP32[$302 >> 2];
    if (($303 | 0) == 0) {
      label = 1668;
      break;
    } else {
      var $K8_0 = $K8_0 << 1;
      var $T_0 = $303;
    }
  }
  if (label == 1668) {
    if ($302 >>> 0 < HEAP32[122694] >>> 0) {
      _abort();
    }
    HEAP32[$302 >> 2] = $237;
    HEAP32[$_sum$s2 + ($newbase$s2 + 6)] = $T_0;
    HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $237;
    HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $237;
    var $_sum1819 = $9 | 8;
    var $336 = $newbase + $_sum1819 | 0;
    return $336;
  }
  var $319 = $T_0 + 8 | 0;
  var $320 = HEAP32[$319 >> 2];
  var $322 = HEAP32[122694];
  if ($T_0 >>> 0 < $322 >>> 0) {
    _abort();
  }
  if ($320 >>> 0 < $322 >>> 0) {
    _abort();
  }
  HEAP32[$320 + 12 >> 2] = $237;
  HEAP32[$319 >> 2] = $237;
  HEAP32[$_sum$s2 + ($newbase$s2 + 2)] = $320;
  HEAP32[$_sum$s2 + ($newbase$s2 + 3)] = $T_0;
  HEAP32[$_sum$s2 + ($newbase$s2 + 6)] = 0;
  var $_sum1819 = $9 | 8;
  var $336 = $newbase + $_sum1819 | 0;
  return $336;
}
_prepend_alloc["X"] = 1;
function __ZNKSt9bad_alloc4whatEv($this) {
  return 476640;
}
function __ZNKSt20bad_array_new_length4whatEv($this) {
  return 486232;
}
function __ZSt15get_new_handlerv() {
  return tempValue = HEAP32[123918], HEAP32[123918] = tempValue, tempValue;
}
function __ZSt15set_new_handlerPFvvE($handler) {
  return tempValue = HEAP32[123918], HEAP32[123918] = $handler, tempValue;
}
function __ZNSt9bad_allocC2Ev($this) {
  HEAP32[$this >> 2] = 495560;
  return;
}
function __ZdlPv($ptr) {
  if (($ptr | 0) != 0) {
    _free($ptr);
  }
  return;
}
function __ZdlPvRKSt9nothrow_t($ptr, $0) {
  __ZdlPv($ptr);
  return;
}
function __ZdaPv($ptr) {
  __ZdlPv($ptr);
  return;
}
function __ZdaPvRKSt9nothrow_t($ptr, $0) {
  __ZdaPv($ptr);
  return;
}
function __ZNSt9bad_allocD0Ev($this) {
  __ZNSt9bad_allocD2Ev($this);
  __ZdlPv($this);
  return;
}
function __ZNSt9bad_allocD2Ev($this) {
  return;
}
function __ZNSt20bad_array_new_lengthC2Ev($this) {
  __ZNSt9bad_allocC2Ev($this | 0);
  HEAP32[$this >> 2] = 495584;
  return;
}
function __ZNSt20bad_array_new_lengthD0Ev($this) {
  __ZNSt9bad_allocD2Ev($this | 0);
  __ZdlPv($this);
  return;
}
function _add_segment($tbase, $tsize) {
  var $23$s2;
  var $1$s2;
  var label = 0;
  var $1 = HEAP32[122696], $1$s2 = $1 >> 2;
  var $2 = $1;
  var $3 = _segment_holding($2);
  var $5 = HEAP32[$3 >> 2];
  var $7 = HEAP32[$3 + 4 >> 2];
  var $8 = $5 + $7 | 0;
  var $10 = $5 + ($7 - 39) | 0;
  if (($10 & 7 | 0) == 0) {
    var $17 = 0;
  } else {
    var $17 = -$10 & 7;
  }
  var $17;
  var $18 = $5 + ($7 - 47) + $17 | 0;
  var $22 = $18 >>> 0 < ($1 + 16 | 0) >>> 0 ? $2 : $18;
  var $23 = $22 + 8 | 0, $23$s2 = $23 >> 2;
  _init_top($tbase, $tsize - 40 | 0);
  HEAP32[$22 + 4 >> 2] = 27;
  HEAP32[$23$s2] = HEAP32[122801];
  HEAP32[$23$s2 + 1] = HEAP32[122802];
  HEAP32[$23$s2 + 2] = HEAP32[122803];
  HEAP32[$23$s2 + 3] = HEAP32[122804];
  HEAP32[122801] = $tbase;
  HEAP32[122802] = $tsize;
  HEAP32[122804] = 0;
  HEAP32[122803] = $23;
  var $30 = $22 + 28 | 0;
  HEAP32[$30 >> 2] = 7;
  L2189 : do {
    if (($22 + 32 | 0) >>> 0 < $8 >>> 0) {
      var $33 = $30;
      while (1) {
        var $33;
        var $34 = $33 + 4 | 0;
        HEAP32[$34 >> 2] = 7;
        if (($33 + 8 | 0) >>> 0 < $8 >>> 0) {
          var $33 = $34;
        } else {
          break L2189;
        }
      }
    }
  } while (0);
  if (($22 | 0) == ($2 | 0)) {
    return;
  }
  var $42 = $22 - $1 | 0;
  var $45 = $42 + ($2 + 4) | 0;
  HEAP32[$45 >> 2] = HEAP32[$45 >> 2] & -2;
  HEAP32[$1$s2 + 1] = $42 | 1;
  HEAP32[$2 + $42 >> 2] = $42;
  if ($42 >>> 0 < 256) {
    var $55 = $42 >>> 2 & 1073741822;
    var $57 = ($55 << 2) + 490800 | 0;
    var $58 = HEAP32[122690];
    var $59 = 1 << ($42 >>> 3);
    do {
      if (($58 & $59 | 0) == 0) {
        HEAP32[122690] = $58 | $59;
        var $F_0 = $57;
      } else {
        var $66 = HEAP32[($55 + 2 << 2) + 490800 >> 2];
        if ($66 >>> 0 >= HEAP32[122694] >>> 0) {
          var $F_0 = $66;
          break;
        }
        _abort();
      }
    } while (0);
    var $F_0;
    HEAP32[($55 + 2 << 2) + 490800 >> 2] = $1;
    HEAP32[$F_0 + 12 >> 2] = $1;
    HEAP32[$1$s2 + 2] = $F_0;
    HEAP32[$1$s2 + 3] = $57;
    return;
  }
  var $77 = $1;
  var $78 = $42 >>> 8;
  do {
    if (($78 | 0) == 0) {
      var $I1_0 = 0;
    } else {
      if ($42 >>> 0 > 16777215) {
        var $I1_0 = 31;
        break;
      }
      var $85 = ($78 + 1048320 | 0) >>> 16 & 8;
      var $86 = $78 << $85;
      var $89 = ($86 + 520192 | 0) >>> 16 & 4;
      var $90 = $86 << $89;
      var $93 = ($90 + 245760 | 0) >>> 16 & 2;
      var $99 = 14 - ($89 | $85 | $93) + ($90 << $93 >>> 15) | 0;
      var $I1_0 = $42 >>> (($99 + 7 | 0) >>> 0) & 1 | $99 << 1;
    }
  } while (0);
  var $I1_0;
  var $106 = ($I1_0 << 2) + 491064 | 0;
  HEAP32[$1$s2 + 7] = $I1_0;
  HEAP32[$1$s2 + 5] = 0;
  HEAP32[$1$s2 + 4] = 0;
  var $110 = HEAP32[122691];
  var $111 = 1 << $I1_0;
  if (($110 & $111 | 0) == 0) {
    HEAP32[122691] = $110 | $111;
    HEAP32[$106 >> 2] = $77;
    HEAP32[$1$s2 + 6] = $106;
    HEAP32[$1$s2 + 3] = $1;
    HEAP32[$1$s2 + 2] = $1;
    return;
  }
  if (($I1_0 | 0) == 31) {
    var $126 = 0;
  } else {
    var $126 = 25 - ($I1_0 >>> 1) | 0;
  }
  var $126;
  var $K2_0 = $42 << $126;
  var $T_0 = HEAP32[$106 >> 2];
  while (1) {
    var $T_0;
    var $K2_0;
    if ((HEAP32[$T_0 + 4 >> 2] & -8 | 0) == ($42 | 0)) {
      break;
    }
    var $135 = ($K2_0 >>> 31 << 2) + $T_0 + 16 | 0;
    var $136 = HEAP32[$135 >> 2];
    if (($136 | 0) == 0) {
      label = 1722;
      break;
    } else {
      var $K2_0 = $K2_0 << 1;
      var $T_0 = $136;
    }
  }
  if (label == 1722) {
    if ($135 >>> 0 < HEAP32[122694] >>> 0) {
      _abort();
    }
    HEAP32[$135 >> 2] = $77;
    HEAP32[$1$s2 + 6] = $T_0;
    HEAP32[$1$s2 + 3] = $1;
    HEAP32[$1$s2 + 2] = $1;
    return;
  }
  var $149 = $T_0 + 8 | 0;
  var $150 = HEAP32[$149 >> 2];
  var $152 = HEAP32[122694];
  if ($T_0 >>> 0 < $152 >>> 0) {
    _abort();
  }
  if ($150 >>> 0 < $152 >>> 0) {
    _abort();
  }
  HEAP32[$150 + 12 >> 2] = $77;
  HEAP32[$149 >> 2] = $77;
  HEAP32[$1$s2 + 2] = $150;
  HEAP32[$1$s2 + 3] = $T_0;
  HEAP32[$1$s2 + 6] = 0;
  return;
}
_add_segment["X"] = 1;
function __Znwj($size) {
  var label = 0;
  var $_size = ($size | 0) == 0 ? 1 : $size;
  while (1) {
    var $3 = _malloc($_size);
    if (($3 | 0) != 0) {
      label = 1746;
      break;
    }
    var $6 = __ZSt15get_new_handlerv();
    if (($6 | 0) == 0) {
      break;
    }
    FUNCTION_TABLE[$6]();
  }
  if (label == 1746) {
    return $3;
  }
  var $15 = ___cxa_allocate_exception(4);
  __ZNSt9bad_allocC2Ev($15);
  ___cxa_throw($15, 495644, 140);
}
function __ZnwjRKSt9nothrow_t($size, $0) {
  return __Znwj($size);
}
function __Znaj($size) {
  return __Znwj($size);
}
function __ZnajRKSt9nothrow_t($size, $nothrow) {
  return __Znaj($size);
}
function __ZSt17__throw_bad_allocv() {
  var $1 = ___cxa_allocate_exception(4);
  __ZNSt9bad_allocC2Ev($1);
  ___cxa_throw($1, 495644, 140);
}





// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    add: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.add(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    subtract: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.subtract(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    multiply: function(xl, xh, yl, yh) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.multiply(y);
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    divide: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.div(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, z, null);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    modulo: function(xl, xh, yl, yh, unsigned) {
      Wrapper.ensureTemps();
      if (!unsigned) {
        var x = new goog.math.Long(xl, xh);
        var y = new goog.math.Long(yl, yh);
        var ret = x.modulo(y);
        HEAP32[tempDoublePtr>>2] = ret.low_;
        HEAP32[tempDoublePtr+4>>2] = ret.high_;
      } else {
        // slow precise bignum division
        var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
        var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
        var z = new BigInteger();
        x.divRemTo(y, null, z);
        var l = new BigInteger();
        var h = new BigInteger();
        z.divRemTo(Wrapper.two32, h, l);
        HEAP32[tempDoublePtr>>2] = parseInt(l.toString()) | 0;
        HEAP32[tempDoublePtr+4>>2] = parseInt(h.toString()) | 0;
      }
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_serpent_key_prepare","_gcry_err_make1340","_gcry_cipher_algo_info","_otrl_mem_init","_run_selftests907","_gcry_pk_lookup_func_name","__gcry_pk_get_param","_gcry_ac_key_pair_extract","_decrypt_block","_otrl_auth_handle_key","_do_bf_setkey","_ac_data_values_destroy","_ec2os","_otrl_sm_hash","_tripledes_set3keys","_jsapi_privkey_write_trusted_fingerprints_FILEp","_fragment_and_send","_otrl_instag_write","_gcry_md_list","_dsa_sign","__gcry_module_add","_read_seed_file","_do_tripledes_encrypt","_convert_to_hex","_sexp_to_key","__gcry_mpih_lshift","__gcry_generate_elg_prime","_seed_setkey","_gcry_sexp_create","_otrl_proto_fragment_create","_md_get_algo","_otrl_sm_check_know_log","__gcry_mpi_mod","_sexp_sscan","_is_prime","__gcry_pk_get_keygrip","__gcry_ac_data_encrypt_scheme","_whirlpool_write","_get_pool_prime","_gcry_md_reset","_md_asn_oid","_otrl_tlv_free","_otrl_dh_keypair_init","_sha512_read","_gcry_error664","_ecc_get_param_sexp","__gcry_rngfips_selftest","_otrl_context_find_recent_instance","_do_encrypt","__gcry_fips_test_error_or_operational","_ac_scheme_get","_ecc_generate","_selftests_sha384","__gcry_log_printf","__gcry_ac_data_clear","__gcry_random_is_faked","_gcry_mpi_get_ui","__gcry_ath_mutex_unlock","_otrl_context_priv_force_finished","_do_init","_msgops_callback_gone_secure","__ZdlPvRKSt9nothrow_t","_selftest775","_selftest996","_gcry_ac_data_from_sexp","__gcry_ac_data_sign_scheme","_x931_aes","_transform2036","_unlock_fsm","__gcry_gettext","_gather_faked","_twofish_decrypt","__gcry_ac_data_from_sexp","__gcry_logv","_gcry_cipher_info","_gpg_err_make7276","_otrl_message_abort_smp","_otrl_dh_compute_v2_auth_keys","_malloc_footprint","_otrl_dh_init","_dsa_generate_ext","_otrl_context_force_finished","_gcry_md_is_secure","__gcry_mpi_new","_Sum1","_Sum0","_gcry_mpi_invm","_gcry_sexp_sscan","_mallinfo","_gcry_sexp_prepend","__gcry_cipher_selftest","_gen_k","_otrl_context_forget_all","_otrl_privkey_generate_calculate","_elg_decrypt","_gcry_mpi_clear_flag","_selftests_rsa","__gcry_mpi_set_flag","_gcry_md_debug","__gcry_ac_key_pair_destroy","_otrl_sm_msg3_init","__gcry_pk_register","_jsapi_conncontext_get_accountname","__gcry_ac_data_encrypt","__gcry_mpi_randomize","_gpg_error1947","_md4_init","_jsapi_conncontext_get_our_instance","_otrl_sm_state_free","__gcry_mpi_get_ui","__gcry_md_hash_buffer","__gcry_rndhw_poll_slow","_gcry_mpi_mul_ui","_disconnect_context","_camellia_decrypt","__gcry_ac_data_decrypt","__gcry_pk_decrypt","_pending_find","__gcry_module_list","_ecc_verify","__gcry_strdup","__gcry_fips_run_selftests","__ZdlPv","__gcry_module_use","__gcry_ac_data_set","_sexp_elements_extract","__gcry_pk_encrypt","_otrl_context_set_trust","__gcry_log_info","__gcry_md_is_enabled","_otrl_message_free","_sha256_final","_otrl_tlv_parse","_gcry_err_code663","_gcry_err_make97","_rsa_blind","_independent_calloc","_otrl_proto_message_version","_gpg_err_code451","__gcry_mpih_cmp","_pubkey_encrypt","__gcry_ath_write","_gcry_md_write","_gcry_mpi_add","_privkey_fopen","__gcry_mpi_rshift_limbs","_gcry_set_progress_handler","__gcry_mpi_m_check","_des_setkey","_get_hash_algo","_gcry_sexp_new","_crc24rfc2440_init","_gcry_xcalloc","_sexp_write","__gcry_register_pk_ecc_progress","_do_cast_setkey","_gcry_err_code848","__gcry_ac_key_data_get","_Sum1964","_gpg_err_code_from_syserror","_pubkey_get_npkey","_add_randomness","_gcry_sexp_dump","_new_context","_gcry_cipher_get_algo_keylen","__gcry_fips_signal_error","_internal_mallinfo","__gcry_pk_unregister","_gcry_xmalloc_secure","_gpg_err_make1959","__gcry_ath_mutex_init","_jsapi_privkey_write_trusted_fingerprints","_otrl_dh_gen_keypair","_gcry_cipher_list","_gcry_md_lookup_oid","_jsapi_conncontext_get_active_fingerprint","_jsapi_sexp_write","_gpg_err_code1660","_gpg_err_make695","__gcry_sexp_cadr","_msgops_callback_resent_msg_prefix_free","__gcry_secure_random_alloc","_encrypt_stream","__gcry_sexp_sscan","_otrl_proto_fragment_free","_serpent_decrypt_internal","_do_cfb_encrypt","_emsa_pkcs_v1_5_encode","__gcry_cipher_list","_selftest707","_msgops_callback_update_context_list","_gpg_err_make183","_do_encrypt1534","__ZNSt20bad_array_new_lengthD0Ev","__gcry_md_algo_name","__gcry_pk_module_lookup","__gcry_check_heap","__gcry_ath_sendmsg","__gcry_rngcsprng_add_bytes","_elg_encrypt","_otrl_auth_clear","__gcry_ac_io_init","_gcry_pk_encrypt","_encrypt_block1583","__gcry_register_random_progress","__gcry_md_reset","_do_twofish_decrypt","_otrl_sm_msg1_init","__gcry_mpi_mulpowm","__gcry_md_debug","_otrl_dh_incctr","_dummy_decrypt","_unserialize_mpi_array","_calculate_pubkey_auth","__gcry_sexp_nth","__gcry_ac_data_destroy","_gcry_cipher_setkey","_otrl_message_respond_smp","_otrl_dh_keypair_free","_gcry_prime_generate","_sha1_write","_is_weak_key","__gcry_update_random_seed_file","_gcry_err_make1188","_gcry_md_copy","_ecc_get_nbits","_release_unused_segments","_gcry_md_algo_info","_pkcs1_decode_for_encryption","_emsa_pkcs_v1_5_encode_data_cb","_gpg_error155","_hextobyte","__gcry_module_lookup","__gcry_ac_init","__gcry_ac_data_new","__gcry_ath_read","__gcry_mpi_free","_em_randomize_nonzero","_gcry_mpi_rshift","_otrl_message_initiate_smp","_otrl_instag_forget","_rsa_sign","_gcry_ac_data_encode","__gcry_pk_map_name","_key_schedule1588","_gcry_pk_unregister","_gpg_error1100","__gcry_mpi_swap","__gcry_sexp_alist","_point_set1891","_m_out_of_n","__gcry_malloc","_gcry_sexp_nth","__gcry_cipher_init","_otrl_privkey_generate_start","_gcry_sexp_vlist","_pending_forget","_independent_comalloc","_gpg_err_make98","__gcry_free","_selftests_sha256","__gcry_mpi_free_limb_space","_otrl_sm_msg4_init","_gcry_ac_data_to_sexp","_otrl_privkey_generate_FILEp","_gpg_err_code849","_mgf1","_jsapi_conncontext_get_protocol","_set_cloexec_flag","_selftest1567","_gcry_xstrdup","__gcry_md_enable","_otrl_proto_data_read_flags","__gcry_mpi_ec_dup_point","__gcry_generate_fips186_3_prime","_gcry_malloc","_valloc","_gcry_strdup","__gcry_mpi_set_opaque","__gcry_ath_accept","_Maj966","_md_enable","_camellia_setkey","__gcry_mpi_resize","__gcry_mpi_set_highbit","__ZSt15set_new_handlerPFvvE","_gcry_err_make401","_gcry_mpi_dump","_otrl_auth_copy_on_key","_gcry_prime_release_factors","_gcry_free","_dummy_check_secret_key","__gcry_mpi_clear_flag","__gcry_sexp_car","__gcry_ac_data_copy","__gcry_log_fatal","_otrl_sm_step2a","__gcry_secmem_malloc","__gcry_set_log_verbosity","__gcry_rmd160_init","_selftest_basic_256","__gcry_generate_fips186_2_prime","__gcry_cipher_info","_crc24rfc2440_final","_Sum0965","_sexp_elements_extract_ecc","_serpent_setkey_internal","_gcry_cipher_lookup_func_oid","__ZNSt9bad_allocC2Ev","_elg_sign","_otrl_sm_msg_free","__gcry_xcalloc","__gcry_mpi_barrett_init","__gcry_pk_algo_name","_find_x931_prime","__gcry_global_is_operational","__gcry_mpi_alloc_like","__gcry_hmac_selftest","_rotate_dh_keys","_selftest_fips_128_38a","_otrl_context_force_plaintext","_jsapi_userstate_import_privkey","__gcry_private_check_heap","_ac_data_set_to_mpi","_selftests_sha3841873","_elg_get_nbits","__gcry_hmac256_new","_change_mparam","_do_fast_random_poll","__gcry_ac_close","_gpg_err_make","__gcry_kdf_derive","_ptr_into_pool_p","__gcry_md_write","_tiger_round","_gcry_cipher_mode_from_oid","__gcry_ac_io_read","__gcry_rngfips_is_faked","__gcry_secmem_malloc_internal","__gcry_mpi_powm","_gcry_cipher_map_name","_gcry_sexp_nth_string","_whirlpool_add","__gcry_ac_mpi_to_os","_gcry_sexp_cadr","_gcry_cipher_open","__gcry_mpi_subm","_oaep_encode","_msgops_callback_convert_msg","_twofish_encrypt","_otrl_userstate_free","_check_secret_key","_gcry_cipher_get_algo_blklen","__gcry_err_make_from_errno","_do_aeswrap_decrypt","_gpg_err_deinit","_gcry_ac_data_new","_gpg_error_from_syserror","__gcry_mpi_get_flag","_selftests_sha2561872","_otrl_mem_realloc","_check_one","_gcry_set_log_handler","_md_register_default","_otrl_sm_state_new","__gcry_xrealloc","_gcry_calloc","_mb_get_new","_do_decrypt_block1585","_ec_invm","_write2stderr","__Znaj","_sha1_init","_transform908","__gcry_sexp_length","_msgidxof","__gcry_pk_verify","_dummy_verify","_pubkey_check_secret_key","__gcry_mpi_trailing_zeros","_dsa_generate","_gcry_cipher_lookup_oid","_do_des_setkey","__gcry_mpi_divisible_ui","_do_setkey774","_gcry_set_fatalerror_handler","_gcry_err_make182","__gcry_sexp_vlist","_elg_check_secret_key","__gcry_secmem_term","__gcry_pk_algo_info","__gcry_ac_data_dump","_tripledes_ecb_crypt","__gcry_mpi_aprint","__gcry_aes_cbc_enc","_otrl_instag_generate","_mutex_init","__gcry_log","__gcry_mpi_set_bit","__gcry_xmalloc_secure","_gcry_cipher_register","_test_keys1812","_des_key_schedule","_gcry_err_make694","_check_expon","_jsapi_make_pubkey","_tiger2_init","_msgops_callback_write_fingerprints","__gcry_sexp_append","_otrl_context_priv_new","_sys_alloc","__gcry_rngcsprng_use_daemon","_gcry_ac_key_get_grip","_sha256_write","_build_index","_verify","_msgops_callback_handle_msg_event","_jsapi_conncontext_get_msgstate","_otrl_version","_gcry_md_get_algo","_otrl_dh_session_free","_encodeblock","__gcry_hmac256_finalize","__gcry_mpih_mul_n","__gcry_hmac256_file","__gcry_mpi_fdiv_r_ui","_search_oid524","_gcry_sexp_length","_gpg_err_code_from_errno","__gcry_rngcsprng_create_nonce","__gcry_set_outofcore_handler","__gcry_generate_public_prime","_rsa_check_secret_key","_otrl_context_update_recent_child","_internal_memalign","__gcry_prime_generate","__gcry_mpi_addm","_system_strerror_r","__gcry_cipher_get_algo_blklen","_otrl_privkey_hash_to_human","__gcry_mpi_get_opaque","_malloc_max_footprint","_ac_data_construct","_gpg_error602","__gcry_ac_io_read_all","_sha224_init","_gcry_sexp_sprint","__gcry_ac_io_init_va","__gcry_pk_sign","__gcry_create_nonce","_convert_to_token","__gcry_mpih_rshift","__gcry_mpi_alloc","_Ch","_gcry_set_outofcore_handler","_selftest1587","_ac_dencode_prepare","_serpent_setkey","__gcry_mpi_mulm","_gcry_md_lookup_name","_selftests_sha1","_gpg_err_make1189","_gpg_err_code485","_otrl_proto_default_query_msg","_randomExponent","_print_warn","_cast_setkey","_prepare_decryption","_pkcs1_encode_for_encryption","_crc32_final","_global_init","__gcry_cipher_map_name","_suitable_encoding","_eme_pkcs_v1_5_encode","_msgops_callback_still_secure","_md5_write","_gcry_error113","_pass","__gcry_md_is_secure","__gcry_mpi_clear","__gcry_secmem_dump_stats","__gcry_ath_init","__gcry_module_release","_malloc_stats","_otrl_instag_forget_all","_gpg_err_make463","__gcry_ac_key_init","__gcry_cipher_open","_test_keys1662","_gcry_md_info","_tmalloc_small","_jsapi_userstate_write_to_file","_sexp_data_to_mpi","__gcry_ac_key_pair_generate","_create_signature_message","__gcry_mpih_release_karatsuba_ctx","_gcry_ac_data_destroy","__gcry_aes_cfb_dec","__gcry_md_setkey","_gcry_cipher_setctr","_state2str","__gcry_log_info_with_dummy_fp","_pubkey_get_nskey","__gcry_sexp_canon_len","__gcry_rngcsprng_is_faked","_gcry_err_code","_gcry_ac_close","__gcry_module_lookup_id","_setup_guards","_selftest_basic_128","__gcry_set_fatalerror_handler","__ZNKSt20bad_array_new_length4whatEv","_bf_setkey","_run_selftests1772","_selftests_sha512","__gcry_pk_ctl","_selftest_sign_10241663","_pubkey_get_nenc","_gcry_mpi_cmp_ui","_gcry_error_from_errno","__gcry_mpi_mul_ui","__gcry_ac_key_destroy","__gcry_camellia_decrypt256","_do_cbc_encrypt","_otrl_tlv_serialize","_do_setkey","_ialloc","_otrl_privkey_generate_cancelled","_oaep_decode","_jsapi_privkey_delete","_md_read","_gpg_err_make1500","__gcry_pk_get_elements","_gpg_error1287","_normalize","_sexp_nth_data","_otrl_base64_encode","_unquote_string","_do_encrypt1813","_encrypt_aes","_initialize","__gcry_Camellia_DecryptBlock","_transform782","_tiger_read","__gcry_set_random_daemon_socket","_selftest_encr_1024","_xor_buffer","_mpi_read_from_buffer","_decrypt1814","_gcry_md_lookup_func_name","__gcry_err_code_from_errno","_run_selftests847","_gcry_ac_data_set","_save_pool_prime","_jsapi_account_write","_gpg_err_code563","__gcry_mpi_barrett_free","__gcry_random_init_external_test","_gcry_mpi_powm","_dummy_decrypt_stream","__gcry_camellia_setup128","_crc32rfc1510_init","_whirlpool_init","__gcry_pk_genkey","__gcry_log_bug","__gcry_sexp_cdr","__gcry_mpi_fdiv_qr","_md_final","_eme_pkcs_v1_5_decode","_gcry_prime_check","__gcry_mpi_sub_ui","_ac_data_dencode","_otrl_base64_otr_decode","_gcry_error346","_otrl_instag_get_new","_gcry_md_register","_otrl_privkey_find","_check_guards","_gcry_error1169","_otrl_context_find","__gcry_ac_data_verify_scheme","_jsapi_userstate_get_privkey_root","__gcry_mpi_get_secure_buffer","_gcry_mpi_set_bit","_progress","_ecc_generate_ext","_elg_verify","_gpg_error2004","_get_internal_buffer","_tiger_init","_sha1_read","__gcry_sexp_prepend","__gcry_fips_mode","__gcry_log_error","__gcry_mpi_clear_bit","_do_tripledes_setkey","_gpg_error518","__gcry_sexp_cons","_basic_initialization","_md_close","_pubkey_verify","__gcry_register_pk_elg_progress","_otrl_mem_malloc","_x931_aes_driver","__gcry_set_allocation_handler","__gcry_mpi_tdiv_q_2exp","_lock_pool","__gcry_md_list","_cipher_decrypt","_do_encrypt_aligned","__ZSt17__throw_bad_allocv","_gcry_ac_data_sign_scheme","_gcry_mpi_randomize","_otrl_privkey_forget","__gcry_mpi_assign_limb_space","_gcry_cipher_lookup_name","_otrl_userstate_create","_otrl_dh_cmpctr","_gcry_cipher_lookup_func_name","_dsa_get_nbits","_otrl_sm_proof_know_log","_check_group_elem","_gcry_cipher_encrypt","_rsa_get_nbits","_run_selftests934","_gcry_mpi_set","__gcry_log_verbosity","_mallopt","_do_twofish_setkey","_secret","_gcry_pk_get_curve","_md_write","__gcry_ath_waitpid","__gcry_ac_key_test","__gcry_md_info","_jsapi_instag_get_tag","_prime_generate_internal","_do_tripledes_decrypt","__gcry_random_initialize","_otrl_privkey_write_fingerprints_FILEp","_ecc_sign","_serpent_encrypt_internal","_gcry_pk_algo_name","_otrl_sm_check_equal_coords","_generate_std","_generate_key","_calloc","_gcry_mpi_set_ui","_gcry_sexp_build_array","_gcry_randomize","_otrl_context_forget_fingerprint","__gcry_check_version","_gcry_md_hash_buffer","_otrl_privkey_fingerprint","_otrl_privkey_read_FILEp","_pk_register_default","_stats_update","_gcry_pk_list","_otrl_message_initiate_smp_q","_gpg_error337","__gcry_rngcsprng_update_seed_file","_gcry_mpi_new","_Cho","__ZdaPvRKSt9nothrow_t","__gcry_cipher_setiv","_generate_using_x","__gcry_camellia_setup192","_gpg_err_make402","_ac_ssa_dencode_prepare_pkcs_v1_5","__gcry_md_open","_gcry_err_make","_msgops_callback_create_instag","_ecc_get_param","_whirlpool_read","_whirlpool_final","_gcry_err_make202","_otrl_sm_step2b","_gcry_malloc_secure","_gcry_error70","_otrl_privkey_read_fingerprints_FILEp","_do_ofb_encrypt","_msgops_callback_account_name_free","_gcry_mpi_gcd","__gcry_mpi_set_ui","__gcry_module_drop","_gcry_cipher_algo_name","_do_ecb_encrypt","_ecc_encrypt_raw","__gcry_rngfips_init_external_test","_rmd160_read","__gcry_aes_cbc_dec","_do_encrypt865","_gcry_error171","_gcry_mpi_test_bit","__gcry_set_gettext_handler","_gcry_check_version","__gcry_rngcsprng_set_seed_file","_ctoh","_init_encoding_ctx","_gcry_ac_data_dump","__gcry_set_progress_handler","__gcry_strerror","_jsapi_conncontext_get_username","_check_secret_key1665","__gcry_mpi_add","_otrl_privkey_generate_finish","__gcry_pk_module_release","_gcry_err_code2007","__gcry_prime_check","_selftest_fips_192","_prepend_alloc","_gcry_err_make159","_gcry_ac_key_data_get","__gcry_mpi_clear_highbit","__gcry_realloc","__gcry_strsource","_jsapi_conncontext_get_master","__gcry_mpih_sqr_n","_jsapi_conncontext_get_trust","_init_bins","_selftests_sha5121874","_rsa_generate_ext","_msgops_callback_max_message_size","_internal_malloc_stats","__gcry_md_close","__gcry_err_code_to_errno","_otrl_context_find_fingerprint","_crc32rfc1510_final","_sign1815","__gcry_ac_data_verify","_twofish_setkey","_progress1811","_gcry_xmalloc","_init_mparams","_msgops_callback_new_fingerprint","_jsapi_privkey_get_accountname","_gcry_err_make71","_jsapi_conncontext_get_protocol_version","_do_encrypt_stream","_msgops_callback_create_privkey","_do_ecb_decrypt","_verify1816","_otrl_privkey_write_fingerprints","__ZSt15get_new_handlerv","_do_decrypt772","_entropy_collect_cb","_do_aeswrap_encrypt","_otrl_auth_new","__gcry_hash_selftest_check_one","_check_digest_algo","_rijndael_setkey","_gcry_ac_data_verify","_otrl_proto_create_data","__gcry_assert_failed","_md_copy","_selftests_dsa","_elg_generate_ext","_key_schedule","_gpg_error","_otrl_context_forget","__gcry_get_hw_features","_gcry_err_make_from_errno","_otrl_privkey_verify","_gcry_pk_map_name","_gcry_error86","__gcry_ac_data_encode","__gcry_cipher_get_algo_keylen","_do_encrypt_block","__gcry_mpi_mul_barrett","__gcry_aes_ctr_enc","_arcfour_setkey","_gcry_error68","_gcry_md_algo_name","_init_pool","_fill_in_curve","_gcry_sexp_alist","_prepare_macpads","_crc32_init","__gcry_mpi_lshift","_md_start_debug","_msgops_callback_account_name","__gcry_rngfips_add_bytes","_initialize_basics","_gcry_error142","_gcry_ac_key_test","__gcry_get_debug_flag","_gcry_err_make307","_gcry_calloc_secure","__gcry_random_bytes_secure","_sys_trim","__gcry_prime_release_factors","__gcry_mpih_sub","_otrl_privkey_read_fingerprints","_jsapi_conncontext_get_their_instance","__gcry_ac_mpi_to_os_alloc","_convert_to_string","_otrl_proto_query_bestversion","_md5_read","_gcry_ac_data_get_name","_gcry_ac_data_get_index","_do_decrypt_aligned","__gcry_ath_mutex_lock","_populate_context_instag","__gcry_camellia_decrypt128","_gcry_sexp_cdr","__gcry_random_deinit_external_test","__gcry_Camellia_Ekeygen","_msgops_callback_convert_free","_md_stop_debug","__gcry_mpi_rshift","__gcry_is_secure","__gcry_random_add_bytes","_finalize","_gcry_md_enable","_message_malformed","_seed_decrypt","_gcry_mpi_release","_gcry_pk_testkey","_gcry_mpi_div","_lock_rng","_rmd160_write","_gcry_create_nonce","_add_segment","_gcry_ac_key_pair_destroy","_gen_k1817","__gcry_cipher_algo_name","__gcry_secmem_init","_dummy_decrypt_block","_md4_read","__gcry_sexp_find_token","_gpg_err_make_from_errno","__gcry_md_algo_info","_otrl_sm_msg2_init","__gcry_hmac256_release","_md5_init","__gcry_mpi_print","_otrl_instag_read","__gcry_control","__gcry_cipher_register","__gcry_ac_key_get_nbits","_gcry_mpi_get_nbits","__gcry_mpih_add","_transform","_do_ctr_decrypt","__gcry_secmem_free_internal","_do_encrypt_block1586","__gcry_md_unregister","_gpg_error488","__gcry_aes_cfb_enc","_tiger_write","_pubkey_sign","_gcry_kdf_derive","__gcry_prime_group_generator","__gcry_generate_secret_prime","_test_keys","_gcry_realloc","_gcry_set_allocation_handler","_gcry_mpi_sub_ui","_generate1810","__gcry_mpi_get_nbits","__gcry_secmem_realloc","_gpg_error261","__gcry_mpih_mod_1","__gcry_ac_data_get_name","__gcry_vcontrol","__gcry_ac_data_decrypt_scheme","_go_encrypted","__gcry_sexp_build_array","_ecc_get_curve","__gcry_mpi_set","__gcry_rngfips_run_external_test","_gcry_mpi_mod","_selftest_sign_1024","_rsa_generate","_gcry_control","__gcry_set_log_handler","_get_entropy","__gcry_rngcsprng_fast_poll","__gcry_mpi_set_buffer","_otrl_mem_is_secure","_whitespacep","__gcry_rngfips_deinit_external_test","__gcry_mpih_mul_karatsuba_case","_check_exponent","_gcry_random_bytes_secure","_gpg_strerror","_gpg_err_make114","_sha1_final","_gpg_strerror_r","_jsapi_privkey_get_protocol","__gcry_md_register","_gcry_ac_data_clear","_gcry_prime_group_generator","_gcry_pk_ctl","_release_mpi_array","_otrl_privkey_generate_finish_FILEp","_md_open","__ZNSt9bad_allocD0Ev","__gcry_rngcsprng_set_daemon_socket","_gcry_mpi_mul_2exp","_gpg_err_code610","_init_top","__gcry_rngcsprng_initialize","_otrl_sm_proof_equal_logs","_run_selftests","_elg_generate","_otrl_auth_handle_commit","__gcry_use_random_daemon","_ec_powm","__gcry_mpi_ec_init","_mb_merge","_otrl_tlv_find","_msgops_callback_received_symkey","_otrl_message_poll","_pubkey_get_nsig","__gcry_ath_connect","_gen_y_2","_do_randomize","__gcry_mpi_sub","_gcry_pk_get_keygrip","_gcry_ac_data_sign","_run_selftests773","__gcry_mpi_ec_mul_point","_pss_verify","_decrypt_block1584","__gcry_mpih_divmod_1","_gcry_mpi_aprint","__gcry_mpi_alloc_secure","_selftests_sha2241871","__gcry_log_debug","__gcry_mpih_mul_1","_disable_pubkey_algo","_otrl_auth_start_v1","__gcry_mpi_fdiv_r","__gcry_derive_x931_prime","_dummy_setkey","__gcry_log_mpidump","_memalign","__gcry_mpi_ec_free","_gcry_pk_algo_info","_gpg_err_make1339","_gcry_mpi_set_opaque","_check_pubkey_algo","_gcry_pk_lookup_name","_mmap_alloc","_otrl_sm_step3","_otrl_sm_step1","__gcry_cipher_decrypt","__gcry_mpi_get_buffer","_otrl_sm_step4","_otrl_sm_step5","_gpg_error650","__gcry_ath_select","__gcry_log_printhex","_gcry_pk_get_nbits","__gcry_pk_aliased_algo_name","_otrl_privkey_fingerprint_raw","__gcry_random_run_external_test","_selftests_sha224","_md_digest_length","_setkey_core","__gcry_cipher_mode_from_oid","__gcry_camellia_encrypt256","__gcry_mpi_tdiv_r","_gcry_cipher_unregister","__gcry_mpih_submul_1","__gcry_ac_data_length","_generate","_wiener_map","__gcry_rmd160_hash_buffer","__gcry_sexp_release","_crc32_read","_gcry_sexp_append","__gcry_mpi_ec_point_init","_gcry_md_ctl","_pubkey_decrypt","_send_or_error_auth","_gcry_md_open","_Maj","_dummy_generate","_otrl_privkey_generate","__gcry_private_enable_m_guard","_gcry_sexp_nth_data","__gcry_ac_data_decode","_rmd160_final","_pss_verify_cmp","_run_pubkey_selftests","_gcry_error1095","_otrl_base64_otr_encode","_gcry_error","_otrl_message_disconnect_all_instances","_gpg_err_code2047","_transform981","_mul_n_basecase","_gpg_err_make612","_cipher_get_blocksize","_gcry_err_make564","_mpi_set_secure","_run_digest_selftests","_run_random_selftests","__gcry_md_init","_dsa_verify","_gcry_mpi_scan","_gcry_ac_data_decrypt_scheme","__gcry_sexp_sprint","_do_des_encrypt","_cipher_setkey","_otrl_auth_handle_v1_key_exchange","_gcry_xcalloc_secure","_selftests_ecdsa","_pvalloc","_otrl_sm_check_equal_logs","_do_des_decrypt","__gcry_fips_is_operational","_gcry_err_make611","_do_twofish_encrypt","_run_cipher_selftests","__gcry_pk_list","__gcry_xstrdup","_do_ctr_encrypt","__gcry_rngcsprng_secure_alloc","_msgidxof2052","_x931_reseed","__gcry_rngfips_dump_stats","_malloc_usable_size","_md4_final","__gcry_initialize_fips_mode","_gcry_err_make1102","__gcry_ath_install","__gcry_md_map_name","_ecc_check_secret_key","__gcry_register_primegen_progress","_msgops_callback_is_logged_in","_create_key_message","_otrl_proto_accept_data","_gcry_ac_key_destroy","_unlock_pool","__gcry_sexp_nth_string","__gcry_random_selftest","_selftests_sha11870","_gcry_cipher_ctl","_otrl_privkey_pending_forget_all","_gen_prime","_gcry_err_code_from_errno","_otrl_auth_handle_revealsig","_gcry_mpi_set_flag","__gcry_mpi_ec_get_affine","_gcry_mpi_addm","__gcry_mpi_alloc_set_ui","__gcry_rngcsprng_randomize","_gcry_mpi_print","_gcry_sexp_nth_mpi","_x931_generate_key","__gcry_pk_get_nbits","__gcry_fast_random_poll","_gcry_err_make1499","_gcry_xrealloc","_gcry_strerror","__gcry_cipher_unregister","_otrl_message_poll_get_default_interval","_mmap_resize","__gcry_pk_selftest","_gcry_pk_register","__gcry_inactivate_fips_mode","__gcry_mpih_addmul_1","_decrypt","__gcry_mpi_test_bit","__ZnwjRKSt9nothrow_t","__gcry_cipher_encrypt","_gcry_ac_data_copy","_otrl_init","__gcry_bug","_tiger1_init","_compute_keygrip1773","_dummy_encrypt","__gcry_ac_key_get_grip","__gcry_mpi_getbyte","_extract_a_from_sexp","__gcry_set_random_seed_file","_ecc_decrypt_raw","__gcry_sexp_nth_data","_sign1776","_set_smp_trust","__gcry_rngcsprng_enable_quick_gen","_mpi_fromstr","_crc24rfc2440_write","_rijndael_decrypt","_generate_x931","__gcry_mpi_normalize","_otrl_privkey_forget_all","_gcry_sexp_car","_verify1777","_gcry_ac_key_pair_generate","_gpg_err_make72","_gcry_err_code1664","__gcry_xmalloc","__gcry_mpi_mul_2exp","__gcry_md_read","_gcry_mpi_get_opaque","_realloc","_segment_holding","_gcry_ac_key_get_nbits","_gcry_md_close","_whirlpool_transform","_check_binary_integrity","__gcry_cipher_algo_info","_selftest867","_gcry_mpi_cmp","_get_no_secure_memory","_jsapi_initialise","_octet_string_from_mpi","_msgops_callback_otr_error_message","__gcry_pk_init","_selftest_kat","__gcry_Camellia_EncryptBlock","_serpent_decrypt","_gpg_err_make489","_pubkey_generate","__gcry_enable_quick_random_gen","_gcry_err_make115","_gcry_mpi_subm","_pss_encode","_parse_version_string","_do_ofb_decrypt","_test_keys1775","_gcry_md_is_enabled","__gcry_mpi_get_hw_config","_gcry_error1288","_transform576","_unlock_rng","_otrl_context_find_recent_secure_instance","_os2ec","__gcry_mpi_ec_point_free","_open_device","_point_set","_make_pubkey","_msgops_callback_timer_control","_gcry_ac_data_decode","_rsa_verify","_otrl_proto_whitespace_bestversion","_gcry_ac_open","__gcry_private_malloc_secure","_gcry_mpi_snew","_sexp_to_enc","_selftest_fips","__ZNSt9bad_allocD2Ev","_otrl_instag_read_FILEp","_gcry_cipher_decrypt","_real_init","__gcry_calloc_secure","_seed_encrypt","__gcry_pk_get_curve","__gcry_ath_recvmsg","_serpent_test","__ZNSt20bad_array_new_lengthC2Ev","_otrl_mem_free","_jsapi_messageappops_new","__gcry_xcalloc_secure","_gcry_mpi_sub","_gcry_random_add_bytes","_gcry_mpi_mul","_init_respond_smp","_do_get_buffer","__gcry_camellia_setup256","__gcry_mpi_gcd","__gcry_mpi_scan","_rotate_y_keys","_gcry_mpi_lshift","_fips_new_state","_gcry_md_read","_gcry_pk_sign","_msgops_callback_inject_message","_gcry_pk_verify","__gcry_rngfips_randomize","__gcry_cipher_setctr","__gcry_is_fips_mode_inactive","_gcry_ac_data_verify_scheme","__gcry_md_get","_cipher_sync","_do_decrypt864","_gpg_error1868","__gcry_random_bytes","_malloc","__gcry_rngfips_initialize","__gcry_rndlinux_gather_random","__gcry_mpi_cmp","__gcry_md_get_algo","__gcry_ac_key_pair_extract","__gcry_private_free","_gcry_md_unregister","__gcry_camellia_encrypt128","__gcry_secmem_free","__ZdaPv","__gcry_compat_identification","_tripledes_set2keys","_selftest","_rsa_unblind","_gpg_err_make1869","_jsapi_can_start_smp","_gcry_ac_key_init","__gcry_mpi_snew","_serpent_subkeys_generate","__gcry_md_copy","__gcry_ath_mutex_destroy","_read_pool","_curve_free","_dummy_get_nbits","__gcry_rndhw_failed_p","__gcry_ac_io_process","_rsa_encrypt","_transform963","_gcry_strsource","__gcry_rngcsprng_dump_stats","_crc32_write","_otrl_tlv_seriallen","_md4_write","_otrl_tlv_new","_cipher_get_keylen","__gcry_mpi_fdiv_q","_otrl_sm_state_init","_gcry_error1456","_gcry_mpi_clear_bit","_run_selftests1659","_selftest_fips_256","_gcry_md_lookup_func_oid","__gcry_mpi_add_ui","_free","_gpg_err_make308","_gcry_cipher_setiv","_gpg_err_set_errno","_update_crc32","_digest_algo_to_string","_tmalloc_large","__gcry_ac_io_write","_do_setkey866","_disable_cipher_algo","_gcry_mpi_swap","__gcry_mpi_lshift_limbs","__gcry_random_progress","_dump_string","_do_tripledes_set_extra_info","_otrl_sm_proof_equal_coords","_create_revealsig_message","_gcry_ac_data_decrypt","_msgops_callback_policy","_md5_final","_gcry_ac_id_to_name","_run_hmac_selftests","__gcry_mpih_sqr_n_basecase","_gen_k1774","_gcry_md_setkey","_otrl_instag_write_FILEp","_ec_mulm","__gcry_cipher_ctl","__gcry_rndhw_poll_fast","_msgops_callback_gone_insecure","_vsexp_sscan","_otrl_instag_generate_FILEp","_run_selftests962","_x931_generate_seed","_camellia_encrypt","_dummy_sign","__gcry_mpih_divrem","__gcry_private_is_secure","__gcry_mpih_add_n","__gcry_burn_stack","__gcry_sexp_nth_mpi","_sha256_read","_internal_realloc","__gcry_sexp_build","_do_malloc","_gcry_mpi_clear_highbit","_public","_gcry_ac_io_init","_gcry_sexp_find_token","__gcry_mpi_putbyte","__gcry_mpi_mul","__gcry_mpi_copy","_otrl_auth_handle_signature","__gcry_md_ctl","__gcry_mpih_add_1","_gpg_err_make1101","_working_memcmp","_otrl_message_sending","__gcry_module_id_new","_gcry_mpi_get_flag","_cipher_reset","_gcry_md_map_name","_gcry_error199","_gcry_mpi_set_highbit","__gcry_register_pk_dsa_progress","__gcry_randomize","_gcry_error426","_otrl_instag_find","_cipher_encrypt","_check_secret_key1818","_gpg_err_source","_sign","__gcry_enforced_fips_mode","_gcry_pk_get_param","_gcry_error603","_getfnc_gather_random","_dummy_encrypt_stream","__gcry_ac_data_get_index","_selftest1523","_serpent_encrypt","_do_decrypt","__gcry_cipher_close","_jsapi_conncontext_get_smstate","_gcry_error519","_otrl_privkey_read","_do_cbc_decrypt","_otrl_proto_fragment_accumulate","__gcry_sha1_hash_buffer","_run_selftests1867","_gen_x931_parm_xi","_sha256_init","_mul_n","_gcry_ac_data_encrypt_scheme","_otrl_auth_start_v23","_selftest1535","__gcry_mpi_dump","_gen_x931_parm_xp","_check_secret_key1778","__gcry_mpi_ec_add_points","_gcry_err_code_to_errno","_otrl_base64_decode","__gcry_mpih_mul","_check_cipher_algo","_otrl_dh_compute_v1_session_id","_x931_get_dt","_tiger_final","__gcry_private_malloc","__gcry_mpi_div","__gcry_mpi_alloc_limb_space","_pending_insert","_gpg_err_make203","_gcry_sexp_cons","_parse_version_number","__gcry_ac_open","__gcry_pk_testkey","_gcry_md_get_algo_dlen","_gcry_mpi_mulm","_rsa_decrypt","_gpg_err_make158","_msgops_callback_resent_msg_prefix","_mb_get_prev","__gcry_mpi_invm","_dsa_check_secret_key","_otrl_dh_session_blank","_gcry_ac_name_to_id","_msgops_callback_otr_error_message_free","__gcry_mpi_release","_sexp_to_sig","_gcry_err_make462","_gcry_ac_data_length","__gcry_mpi_cmp_ui","_lock_fsm","__gcry_sexp_dump","_gpg_err_make2013","_ec_addm","_reporter","__gcry_rngfips_create_nonce","_jsapi_privkey_get_dsa_token","_gcry_sexp_build","_curve_copy","_lock_seed_file","_gcry_set_gettext_handler","_check_prime","_getfnc_fast_random_poll","_sha512_write","_gcry_pk_decrypt","__gcry_sexp_new","_ROTR","__gcry_ac_data_sign","_mb_get_next","_des_ecb_crypt","_cipher_register_default","_encrypt_block","__gcry_hmac256_update","_ac_data_extract","_malloc_trim","_gcry_sexp_release","__gcry_secmem_get_flags","_msgops_callback_handle_smp_event","_cipher_algo_to_string","_openpgp_s2k","_rijndael_encrypt","_sha512_init","_lock_pool1948","__gcry_fips_test_operational","_serialize_mpi_array","_otrl_message_disconnect","_gcry_random_bytes","_create_v1_key_exchange_message","_sha384_init","_mix_pool","__ZNKSt9bad_alloc4whatEv","__gcry_mpih_sub_1","_ac_data_mpi_copy","_otrl_dh_session","_do_decrypt_block","_compute_keygrip","_gcry_cipher_close","__gcry_detect_hw_features","_random_poll","_scanval","_otrl_proto_message_type","__gcry_fips_noreturn","__gcry_calloc","_gpg_err_init","_gcry_sexp_canon_len","__gcry_mpih_sub_n","_gcry_error294","_gcry_mpi_add_ui","__gcry_random_dump_stats","_maybe_resend","_pkcs1_encode_for_signature","_search_oid","_otrl_sm_init","_gpg_err_code","_gcry_err_make7175","__gcry_mpi_mod_barrett","__gcry_rmd160_mixblock","_decode","__gcry_sexp_vbuild","__gcry_secmem_set_flags","_reveal_macs","_gpg_err_make565","__Znwj","_sha512_final","_otrl_privkey_sign","__gcry_md_get_algo_dlen","_otrl_message_receiving","_gpg_err_code_to_errno","_do_arcfour_setkey","__gcry_fatal_error","_otrl_dh_keypair_copy","_account_write","_gpg_strsource","_gcry_pk_genkey","_otrl_proto_instance","__gcry_private_realloc","_gcry_is_secure","__gcry_sexp_create","_dummy_encrypt_block","__gcry_ac_data_to_sexp","_gcry_mpi_copy","_check_pubkey_auth","__gcry_error_from_errno","_make_space","_do_cfb_decrypt","_ac_es_dencode_prepare_pkcs_v1_5","_selftest_fips_128","_gcry_ac_io_init_va","_selftest_basic_192","_otrl_message_symkey","__gcry_malloc_secure","_do_encrypt765","_pkdf2","_gcry_ac_data_encrypt","_otrl_context_is_fingerprint_trusted","_print_config","_cipher_setiv","_jsapi_privkey_get_next","_secmem_init","__gcry_md_selftest","_gpg_err_code2012","__gcry_cipher_setkey","_gpg_err_code693","__gcry_mpi_tdiv_qr","_generate_fips186","_read_random_source","__gcry_ac_os_to_mpi","_transform935","_ec_subm","_get_random","_progress1661","_gpg_error425","__ZnajRKSt9nothrow_t"]



}).call(this);
